#!/usr/bin/env python3
import os
import argparse
import json
import subprocess
import shutil
print("Searching...")

parser = argparse.ArgumentParser()
parser.add_argument("--json", type=json.loads, required=True, help="the json input")
args, unknown = parser.parse_known_args()
topics=args.json["topic"]["path"]
topics= args.json["topic"]["path"]
mod = args.json["opts"]["model"]

try: 
    threshold='-t '+args.json["opts"]["threshold"]
except:
    threshold=''

try: 
    nfields='-n '+args.json["opts"]["nfields"]
except:
    nfields=''

try: 
    lambdas='-l '+ args.json["opts"]["lambdas"]
except:
    lambdas=''

###################
print("hello")
print(os.listdir('//elr_files//EntityLinkingRetrieval-ELR-master//data//'))
print("babye")
annotated_json_file='//elr_files//EntityLinkingRetrieval-ELR-master//data//extracted_annotation.json'
os.chdir("//elr_files//EntityLinkingRetrieval-ELR-master//")

files = os.listdir('data')
for file in files:
    shutil.copy(os.path.join('data', file), '/output')
#######################
    
os.chdir("//elr_files//EntityLinkingRetrieval-ELR-master")
print("sub1 start !!!!!!!!!!! ")
sp1 = subprocess.Popen(['python query_extract_annotate.py {} '.format(topics)],shell=True)
sp1.wait()

print("first done")
print(os.listdir('//elr_files//EntityLinkingRetrieval-ELR-master//data//'))
query_json_file='//elr_files//EntityLinkingRetrieval-ELR-master//data//extracted_queries.json'
sb2=subprocess.Popen(["python  query_extract_annotate2.py {} ".format(query_json_file)],shell=True)
sb2.wait()

files = os.listdir('data')
for file in files:
    shutil.copy(os.path.join('data', file), '/output')
    
annotaion_file="//elr_files//EntityLinkingRetrieval-ELR-master//data//rb04_topics_annotation.json"
print(os.listdir('//elr_files//EntityLinkingRetrieval-ELR-master//data//'))

sp3 = subprocess.Popen(["python -m nordlys.elr.retrieval_elr -q query_json_file -a annotaion_file {}  {} {}  {}".format(mod,threshold,nfields,lambdas)],shell=True)
sp3.wait()

files = os.listdir('my_runs')
for file in files:
    shutil.copy(os.path.join('my_runs', file), '/output')

files = os.listdir('runs')
for file in files:
    shutil.copy(os.path.join('runs', file), '/output')


