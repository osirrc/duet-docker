#!/usr/bin/env python3
import os
import argparse
import json
import subprocess
import shutil
print("Searching...")

parser = argparse.ArgumentParser()
parser.add_argument("--json", type=json.loads, required=True, help="the json input")
args, unknown = parser.parse_known_args()
topics=args.json["topic"]["path"]
topics= args.json["topic"]["path"]
mod = args.json["opts"]["model"]

try: 
    threshold='-t '+args.json["opts"]["threshold"]
except:
    threshold=''

try: 
    nfields='-n '+args.json["opts"]["nfields"]
except:
    nfields=''

try: 
    lambdas='-l '+ args.json["opts"]["lambdas"]
except:
    lambdas=''


os.chdir("//elr_files//EntityLinkingRetrieval-ELR-master")
subprocess.run("python query_extract_annotate.py {} ".format(topics),shell=True)

query_file="//elr_files//EntityLinkingRetrieval-ELR-master//data//extracted_queries.json"
annotaion_file="//elr_files//EntityLinkingRetrieval-ELR-master//data//rb04_topics_annotation.json"

subprocess.run("python -m nordlys.elr.retrieval_elr -q query_file -a annotaion_file {}  {} {}  {}".format(mod,threshold,nfields,lambdas),shell=True)

files = os.listdir('my_runs')
for file in files:
    shutil.copy(os.path.join('my_runs', file), '/output')




