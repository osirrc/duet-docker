#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/FieldCacheImpl$SortedDocValuesImpl.h"
#include "org/apache/lucene/index/SortedDocValues.h"
#include "org/apache/lucene/util/packed/MonotonicAppendingLongBuffer.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/util/Accountable.h"
#include "org/apache/lucene/util/packed/PackedInts$Reader.h"
#include "org/apache/lucene/util/PagedBytes$Reader.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *FieldCacheImpl$SortedDocValuesImpl::class$ = NULL;
        jmethodID *FieldCacheImpl$SortedDocValuesImpl::mids$ = NULL;
        bool FieldCacheImpl$SortedDocValuesImpl::live$ = false;

        jclass FieldCacheImpl$SortedDocValuesImpl::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/FieldCacheImpl$SortedDocValuesImpl");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_0e116268] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/PagedBytes$Reader;Lorg/apache/lucene/util/packed/MonotonicAppendingLongBuffer;Lorg/apache/lucene/util/packed/PackedInts$Reader;I)V");
            mids$[mid_iterator_57832734] = env->getMethodID(cls, "iterator", "()Lorg/apache/lucene/index/SortedDocValues;");
            mids$[mid_ramBytesUsed_54c6a17a] = env->getMethodID(cls, "ramBytesUsed", "()J");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        FieldCacheImpl$SortedDocValuesImpl::FieldCacheImpl$SortedDocValuesImpl(const ::org::apache::lucene::util::PagedBytes$Reader & a0, const ::org::apache::lucene::util::packed::MonotonicAppendingLongBuffer & a1, const ::org::apache::lucene::util::packed::PackedInts$Reader & a2, jint a3) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_0e116268, a0.this$, a1.this$, a2.this$, a3)) {}

        ::org::apache::lucene::index::SortedDocValues FieldCacheImpl$SortedDocValuesImpl::iterator() const
        {
          return ::org::apache::lucene::index::SortedDocValues(env->callObjectMethod(this$, mids$[mid_iterator_57832734]));
        }

        jlong FieldCacheImpl$SortedDocValuesImpl::ramBytesUsed() const
        {
          return env->callLongMethod(this$, mids$[mid_ramBytesUsed_54c6a17a]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_FieldCacheImpl$SortedDocValuesImpl_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FieldCacheImpl$SortedDocValuesImpl_instance_(PyTypeObject *type, PyObject *arg);
        static int t_FieldCacheImpl$SortedDocValuesImpl_init_(t_FieldCacheImpl$SortedDocValuesImpl *self, PyObject *args, PyObject *kwds);
        static PyObject *t_FieldCacheImpl$SortedDocValuesImpl_iterator(t_FieldCacheImpl$SortedDocValuesImpl *self);
        static PyObject *t_FieldCacheImpl$SortedDocValuesImpl_ramBytesUsed(t_FieldCacheImpl$SortedDocValuesImpl *self);

        static PyMethodDef t_FieldCacheImpl$SortedDocValuesImpl__methods_[] = {
          DECLARE_METHOD(t_FieldCacheImpl$SortedDocValuesImpl, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FieldCacheImpl$SortedDocValuesImpl, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FieldCacheImpl$SortedDocValuesImpl, iterator, METH_NOARGS),
          DECLARE_METHOD(t_FieldCacheImpl$SortedDocValuesImpl, ramBytesUsed, METH_NOARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(FieldCacheImpl$SortedDocValuesImpl, t_FieldCacheImpl$SortedDocValuesImpl, ::java::lang::Object, FieldCacheImpl$SortedDocValuesImpl, t_FieldCacheImpl$SortedDocValuesImpl_init_, 0, 0, 0, 0, 0);

        void t_FieldCacheImpl$SortedDocValuesImpl::install(PyObject *module)
        {
          installType(&PY_TYPE(FieldCacheImpl$SortedDocValuesImpl), module, "FieldCacheImpl$SortedDocValuesImpl", 0);
        }

        void t_FieldCacheImpl$SortedDocValuesImpl::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(FieldCacheImpl$SortedDocValuesImpl).tp_dict, "class_", make_descriptor(FieldCacheImpl$SortedDocValuesImpl::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(FieldCacheImpl$SortedDocValuesImpl).tp_dict, "wrapfn_", make_descriptor(t_FieldCacheImpl$SortedDocValuesImpl::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(FieldCacheImpl$SortedDocValuesImpl).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_FieldCacheImpl$SortedDocValuesImpl_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, FieldCacheImpl$SortedDocValuesImpl::initializeClass, 1)))
            return NULL;
          return t_FieldCacheImpl$SortedDocValuesImpl::wrap_Object(FieldCacheImpl$SortedDocValuesImpl(((t_FieldCacheImpl$SortedDocValuesImpl *) arg)->object.this$));
        }
        static PyObject *t_FieldCacheImpl$SortedDocValuesImpl_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, FieldCacheImpl$SortedDocValuesImpl::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_FieldCacheImpl$SortedDocValuesImpl_init_(t_FieldCacheImpl$SortedDocValuesImpl *self, PyObject *args, PyObject *kwds)
        {
          ::org::apache::lucene::util::PagedBytes$Reader a0((jobject) NULL);
          ::org::apache::lucene::util::packed::MonotonicAppendingLongBuffer a1((jobject) NULL);
          ::org::apache::lucene::util::packed::PackedInts$Reader a2((jobject) NULL);
          jint a3;
          FieldCacheImpl$SortedDocValuesImpl object((jobject) NULL);

          if (!parseArgs(args, "kkkI", ::org::apache::lucene::util::PagedBytes$Reader::initializeClass, ::org::apache::lucene::util::packed::MonotonicAppendingLongBuffer::initializeClass, ::org::apache::lucene::util::packed::PackedInts$Reader::initializeClass, &a0, &a1, &a2, &a3))
          {
            INT_CALL(object = FieldCacheImpl$SortedDocValuesImpl(a0, a1, a2, a3));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_FieldCacheImpl$SortedDocValuesImpl_iterator(t_FieldCacheImpl$SortedDocValuesImpl *self)
        {
          ::org::apache::lucene::index::SortedDocValues result((jobject) NULL);
          OBJ_CALL(result = self->object.iterator());
          return ::org::apache::lucene::index::t_SortedDocValues::wrap_Object(result);
        }

        static PyObject *t_FieldCacheImpl$SortedDocValuesImpl_ramBytesUsed(t_FieldCacheImpl$SortedDocValuesImpl *self)
        {
          jlong result;
          OBJ_CALL(result = self->object.ramBytesUsed());
          return PyLong_FromLongLong((PY_LONG_LONG) result);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/join/FixedBitSetCachingWrapperFilter.h"
#include "org/apache/lucene/search/Filter.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace join {

          ::java::lang::Class *FixedBitSetCachingWrapperFilter::class$ = NULL;
          jmethodID *FixedBitSetCachingWrapperFilter::mids$ = NULL;
          bool FixedBitSetCachingWrapperFilter::live$ = false;

          jclass FixedBitSetCachingWrapperFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/join/FixedBitSetCachingWrapperFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_9bb37152] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/Filter;)V");
              mids$[mid_docIdSetToCache_5fee2a54] = env->getMethodID(cls, "docIdSetToCache", "(Lorg/apache/lucene/search/DocIdSet;Lorg/apache/lucene/index/AtomicReader;)Lorg/apache/lucene/search/DocIdSet;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          FixedBitSetCachingWrapperFilter::FixedBitSetCachingWrapperFilter(const ::org::apache::lucene::search::Filter & a0) : ::org::apache::lucene::search::CachingWrapperFilter(env->newObject(initializeClass, &mids$, mid_init$_9bb37152, a0.this$)) {}
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace join {
          static PyObject *t_FixedBitSetCachingWrapperFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_FixedBitSetCachingWrapperFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_FixedBitSetCachingWrapperFilter_init_(t_FixedBitSetCachingWrapperFilter *self, PyObject *args, PyObject *kwds);

          static PyMethodDef t_FixedBitSetCachingWrapperFilter__methods_[] = {
            DECLARE_METHOD(t_FixedBitSetCachingWrapperFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FixedBitSetCachingWrapperFilter, instance_, METH_O | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(FixedBitSetCachingWrapperFilter, t_FixedBitSetCachingWrapperFilter, ::org::apache::lucene::search::CachingWrapperFilter, FixedBitSetCachingWrapperFilter, t_FixedBitSetCachingWrapperFilter_init_, 0, 0, 0, 0, 0);

          void t_FixedBitSetCachingWrapperFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(FixedBitSetCachingWrapperFilter), module, "FixedBitSetCachingWrapperFilter", 0);
          }

          void t_FixedBitSetCachingWrapperFilter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(FixedBitSetCachingWrapperFilter).tp_dict, "class_", make_descriptor(FixedBitSetCachingWrapperFilter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(FixedBitSetCachingWrapperFilter).tp_dict, "wrapfn_", make_descriptor(t_FixedBitSetCachingWrapperFilter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(FixedBitSetCachingWrapperFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_FixedBitSetCachingWrapperFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, FixedBitSetCachingWrapperFilter::initializeClass, 1)))
              return NULL;
            return t_FixedBitSetCachingWrapperFilter::wrap_Object(FixedBitSetCachingWrapperFilter(((t_FixedBitSetCachingWrapperFilter *) arg)->object.this$));
          }
          static PyObject *t_FixedBitSetCachingWrapperFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, FixedBitSetCachingWrapperFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_FixedBitSetCachingWrapperFilter_init_(t_FixedBitSetCachingWrapperFilter *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::search::Filter a0((jobject) NULL);
            FixedBitSetCachingWrapperFilter object((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::search::Filter::initializeClass, &a0))
            {
              INT_CALL(object = FixedBitSetCachingWrapperFilter(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/payloads/PayloadNearQuery$PayloadNearSpanWeight.h"
#include "org/apache/lucene/util/Bits.h"
#include "org/apache/lucene/search/payloads/PayloadNearQuery.h"
#include "java/lang/Class.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "org/apache/lucene/search/spans/SpanQuery.h"
#include "org/apache/lucene/search/Explanation.h"
#include "org/apache/lucene/search/IndexSearcher.h"
#include "org/apache/lucene/search/Scorer.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace payloads {

          ::java::lang::Class *PayloadNearQuery$PayloadNearSpanWeight::class$ = NULL;
          jmethodID *PayloadNearQuery$PayloadNearSpanWeight::mids$ = NULL;
          bool PayloadNearQuery$PayloadNearSpanWeight::live$ = false;

          jclass PayloadNearQuery$PayloadNearSpanWeight::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/payloads/PayloadNearQuery$PayloadNearSpanWeight");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_a7d11f1c] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/payloads/PayloadNearQuery;Lorg/apache/lucene/search/spans/SpanQuery;Lorg/apache/lucene/search/IndexSearcher;)V");
              mids$[mid_explain_6ad94adc] = env->getMethodID(cls, "explain", "(Lorg/apache/lucene/index/AtomicReaderContext;I)Lorg/apache/lucene/search/Explanation;");
              mids$[mid_scorer_3869ad24] = env->getMethodID(cls, "scorer", "(Lorg/apache/lucene/index/AtomicReaderContext;Lorg/apache/lucene/util/Bits;)Lorg/apache/lucene/search/Scorer;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          PayloadNearQuery$PayloadNearSpanWeight::PayloadNearQuery$PayloadNearSpanWeight(const ::org::apache::lucene::search::payloads::PayloadNearQuery & a0, const ::org::apache::lucene::search::spans::SpanQuery & a1, const ::org::apache::lucene::search::IndexSearcher & a2) : ::org::apache::lucene::search::spans::SpanWeight(env->newObject(initializeClass, &mids$, mid_init$_a7d11f1c, a0.this$, a1.this$, a2.this$)) {}

          ::org::apache::lucene::search::Explanation PayloadNearQuery$PayloadNearSpanWeight::explain(const ::org::apache::lucene::index::AtomicReaderContext & a0, jint a1) const
          {
            return ::org::apache::lucene::search::Explanation(env->callObjectMethod(this$, mids$[mid_explain_6ad94adc], a0.this$, a1));
          }

          ::org::apache::lucene::search::Scorer PayloadNearQuery$PayloadNearSpanWeight::scorer(const ::org::apache::lucene::index::AtomicReaderContext & a0, const ::org::apache::lucene::util::Bits & a1) const
          {
            return ::org::apache::lucene::search::Scorer(env->callObjectMethod(this$, mids$[mid_scorer_3869ad24], a0.this$, a1.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace payloads {
          static PyObject *t_PayloadNearQuery$PayloadNearSpanWeight_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PayloadNearQuery$PayloadNearSpanWeight_instance_(PyTypeObject *type, PyObject *arg);
          static int t_PayloadNearQuery$PayloadNearSpanWeight_init_(t_PayloadNearQuery$PayloadNearSpanWeight *self, PyObject *args, PyObject *kwds);
          static PyObject *t_PayloadNearQuery$PayloadNearSpanWeight_explain(t_PayloadNearQuery$PayloadNearSpanWeight *self, PyObject *args);
          static PyObject *t_PayloadNearQuery$PayloadNearSpanWeight_scorer(t_PayloadNearQuery$PayloadNearSpanWeight *self, PyObject *args);

          static PyMethodDef t_PayloadNearQuery$PayloadNearSpanWeight__methods_[] = {
            DECLARE_METHOD(t_PayloadNearQuery$PayloadNearSpanWeight, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PayloadNearQuery$PayloadNearSpanWeight, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PayloadNearQuery$PayloadNearSpanWeight, explain, METH_VARARGS),
            DECLARE_METHOD(t_PayloadNearQuery$PayloadNearSpanWeight, scorer, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(PayloadNearQuery$PayloadNearSpanWeight, t_PayloadNearQuery$PayloadNearSpanWeight, ::org::apache::lucene::search::spans::SpanWeight, PayloadNearQuery$PayloadNearSpanWeight, t_PayloadNearQuery$PayloadNearSpanWeight_init_, 0, 0, 0, 0, 0);

          void t_PayloadNearQuery$PayloadNearSpanWeight::install(PyObject *module)
          {
            installType(&PY_TYPE(PayloadNearQuery$PayloadNearSpanWeight), module, "PayloadNearQuery$PayloadNearSpanWeight", 0);
          }

          void t_PayloadNearQuery$PayloadNearSpanWeight::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(PayloadNearQuery$PayloadNearSpanWeight).tp_dict, "class_", make_descriptor(PayloadNearQuery$PayloadNearSpanWeight::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(PayloadNearQuery$PayloadNearSpanWeight).tp_dict, "wrapfn_", make_descriptor(t_PayloadNearQuery$PayloadNearSpanWeight::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(PayloadNearQuery$PayloadNearSpanWeight).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_PayloadNearQuery$PayloadNearSpanWeight_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, PayloadNearQuery$PayloadNearSpanWeight::initializeClass, 1)))
              return NULL;
            return t_PayloadNearQuery$PayloadNearSpanWeight::wrap_Object(PayloadNearQuery$PayloadNearSpanWeight(((t_PayloadNearQuery$PayloadNearSpanWeight *) arg)->object.this$));
          }
          static PyObject *t_PayloadNearQuery$PayloadNearSpanWeight_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, PayloadNearQuery$PayloadNearSpanWeight::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_PayloadNearQuery$PayloadNearSpanWeight_init_(t_PayloadNearQuery$PayloadNearSpanWeight *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::search::payloads::PayloadNearQuery a0((jobject) NULL);
            ::org::apache::lucene::search::spans::SpanQuery a1((jobject) NULL);
            ::org::apache::lucene::search::IndexSearcher a2((jobject) NULL);
            PayloadNearQuery$PayloadNearSpanWeight object((jobject) NULL);

            if (!parseArgs(args, "kkk", ::org::apache::lucene::search::payloads::PayloadNearQuery::initializeClass, ::org::apache::lucene::search::spans::SpanQuery::initializeClass, ::org::apache::lucene::search::IndexSearcher::initializeClass, &a0, &a1, &a2))
            {
              INT_CALL(object = PayloadNearQuery$PayloadNearSpanWeight(a0, a1, a2));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_PayloadNearQuery$PayloadNearSpanWeight_explain(t_PayloadNearQuery$PayloadNearSpanWeight *self, PyObject *args)
          {
            ::org::apache::lucene::index::AtomicReaderContext a0((jobject) NULL);
            jint a1;
            ::org::apache::lucene::search::Explanation result((jobject) NULL);

            if (!parseArgs(args, "kI", ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.explain(a0, a1));
              return ::org::apache::lucene::search::t_Explanation::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(PayloadNearQuery$PayloadNearSpanWeight), (PyObject *) self, "explain", args, 2);
          }

          static PyObject *t_PayloadNearQuery$PayloadNearSpanWeight_scorer(t_PayloadNearQuery$PayloadNearSpanWeight *self, PyObject *args)
          {
            ::org::apache::lucene::index::AtomicReaderContext a0((jobject) NULL);
            ::org::apache::lucene::util::Bits a1((jobject) NULL);
            ::org::apache::lucene::search::Scorer result((jobject) NULL);

            if (!parseArgs(args, "kk", ::org::apache::lucene::index::AtomicReaderContext::initializeClass, ::org::apache::lucene::util::Bits::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.scorer(a0, a1));
              return ::org::apache::lucene::search::t_Scorer::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(PayloadNearQuery$PayloadNearSpanWeight), (PyObject *) self, "scorer", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/facet/sortedset/SortedSetDocValuesFacetCounts.h"
#include "java/lang/Number.h"
#include "org/apache/lucene/facet/sortedset/SortedSetDocValuesReaderState.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/facet/FacetsCollector.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/facet/FacetResult.h"
#include "java/util/List.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace sortedset {

          ::java::lang::Class *SortedSetDocValuesFacetCounts::class$ = NULL;
          jmethodID *SortedSetDocValuesFacetCounts::mids$ = NULL;
          bool SortedSetDocValuesFacetCounts::live$ = false;

          jclass SortedSetDocValuesFacetCounts::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/facet/sortedset/SortedSetDocValuesFacetCounts");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_2661b27e] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/facet/sortedset/SortedSetDocValuesReaderState;Lorg/apache/lucene/facet/FacetsCollector;)V");
              mids$[mid_getAllDims_cdc2a528] = env->getMethodID(cls, "getAllDims", "(I)Ljava/util/List;");
              mids$[mid_getSpecificValue_8ecbcac9] = env->getMethodID(cls, "getSpecificValue", "(Ljava/lang/String;[Ljava/lang/String;)Ljava/lang/Number;");
              mids$[mid_getTopChildren_37e8c044] = env->getMethodID(cls, "getTopChildren", "(ILjava/lang/String;[Ljava/lang/String;)Lorg/apache/lucene/facet/FacetResult;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          SortedSetDocValuesFacetCounts::SortedSetDocValuesFacetCounts(const ::org::apache::lucene::facet::sortedset::SortedSetDocValuesReaderState & a0, const ::org::apache::lucene::facet::FacetsCollector & a1) : ::org::apache::lucene::facet::Facets(env->newObject(initializeClass, &mids$, mid_init$_2661b27e, a0.this$, a1.this$)) {}

          ::java::util::List SortedSetDocValuesFacetCounts::getAllDims(jint a0) const
          {
            return ::java::util::List(env->callObjectMethod(this$, mids$[mid_getAllDims_cdc2a528], a0));
          }

          ::java::lang::Number SortedSetDocValuesFacetCounts::getSpecificValue(const ::java::lang::String & a0, const JArray< ::java::lang::String > & a1) const
          {
            return ::java::lang::Number(env->callObjectMethod(this$, mids$[mid_getSpecificValue_8ecbcac9], a0.this$, a1.this$));
          }

          ::org::apache::lucene::facet::FacetResult SortedSetDocValuesFacetCounts::getTopChildren(jint a0, const ::java::lang::String & a1, const JArray< ::java::lang::String > & a2) const
          {
            return ::org::apache::lucene::facet::FacetResult(env->callObjectMethod(this$, mids$[mid_getTopChildren_37e8c044], a0, a1.this$, a2.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace sortedset {
          static PyObject *t_SortedSetDocValuesFacetCounts_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SortedSetDocValuesFacetCounts_instance_(PyTypeObject *type, PyObject *arg);
          static int t_SortedSetDocValuesFacetCounts_init_(t_SortedSetDocValuesFacetCounts *self, PyObject *args, PyObject *kwds);
          static PyObject *t_SortedSetDocValuesFacetCounts_getAllDims(t_SortedSetDocValuesFacetCounts *self, PyObject *args);
          static PyObject *t_SortedSetDocValuesFacetCounts_getSpecificValue(t_SortedSetDocValuesFacetCounts *self, PyObject *args);
          static PyObject *t_SortedSetDocValuesFacetCounts_getTopChildren(t_SortedSetDocValuesFacetCounts *self, PyObject *args);

          static PyMethodDef t_SortedSetDocValuesFacetCounts__methods_[] = {
            DECLARE_METHOD(t_SortedSetDocValuesFacetCounts, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SortedSetDocValuesFacetCounts, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SortedSetDocValuesFacetCounts, getAllDims, METH_VARARGS),
            DECLARE_METHOD(t_SortedSetDocValuesFacetCounts, getSpecificValue, METH_VARARGS),
            DECLARE_METHOD(t_SortedSetDocValuesFacetCounts, getTopChildren, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(SortedSetDocValuesFacetCounts, t_SortedSetDocValuesFacetCounts, ::org::apache::lucene::facet::Facets, SortedSetDocValuesFacetCounts, t_SortedSetDocValuesFacetCounts_init_, 0, 0, 0, 0, 0);

          void t_SortedSetDocValuesFacetCounts::install(PyObject *module)
          {
            installType(&PY_TYPE(SortedSetDocValuesFacetCounts), module, "SortedSetDocValuesFacetCounts", 0);
          }

          void t_SortedSetDocValuesFacetCounts::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(SortedSetDocValuesFacetCounts).tp_dict, "class_", make_descriptor(SortedSetDocValuesFacetCounts::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(SortedSetDocValuesFacetCounts).tp_dict, "wrapfn_", make_descriptor(t_SortedSetDocValuesFacetCounts::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(SortedSetDocValuesFacetCounts).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_SortedSetDocValuesFacetCounts_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, SortedSetDocValuesFacetCounts::initializeClass, 1)))
              return NULL;
            return t_SortedSetDocValuesFacetCounts::wrap_Object(SortedSetDocValuesFacetCounts(((t_SortedSetDocValuesFacetCounts *) arg)->object.this$));
          }
          static PyObject *t_SortedSetDocValuesFacetCounts_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, SortedSetDocValuesFacetCounts::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_SortedSetDocValuesFacetCounts_init_(t_SortedSetDocValuesFacetCounts *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::facet::sortedset::SortedSetDocValuesReaderState a0((jobject) NULL);
            ::org::apache::lucene::facet::FacetsCollector a1((jobject) NULL);
            SortedSetDocValuesFacetCounts object((jobject) NULL);

            if (!parseArgs(args, "kk", ::org::apache::lucene::facet::sortedset::SortedSetDocValuesReaderState::initializeClass, ::org::apache::lucene::facet::FacetsCollector::initializeClass, &a0, &a1))
            {
              INT_CALL(object = SortedSetDocValuesFacetCounts(a0, a1));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_SortedSetDocValuesFacetCounts_getAllDims(t_SortedSetDocValuesFacetCounts *self, PyObject *args)
          {
            jint a0;
            ::java::util::List result((jobject) NULL);

            if (!parseArgs(args, "I", &a0))
            {
              OBJ_CALL(result = self->object.getAllDims(a0));
              return ::java::util::t_List::wrap_Object(result, &::org::apache::lucene::facet::PY_TYPE(FacetResult));
            }

            return callSuper(&PY_TYPE(SortedSetDocValuesFacetCounts), (PyObject *) self, "getAllDims", args, 2);
          }

          static PyObject *t_SortedSetDocValuesFacetCounts_getSpecificValue(t_SortedSetDocValuesFacetCounts *self, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            JArray< ::java::lang::String > a1((jobject) NULL);
            ::java::lang::Number result((jobject) NULL);

            if (!parseArgs(args, "s[s", &a0, &a1))
            {
              OBJ_CALL(result = self->object.getSpecificValue(a0, a1));
              return ::java::lang::t_Number::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(SortedSetDocValuesFacetCounts), (PyObject *) self, "getSpecificValue", args, 2);
          }

          static PyObject *t_SortedSetDocValuesFacetCounts_getTopChildren(t_SortedSetDocValuesFacetCounts *self, PyObject *args)
          {
            jint a0;
            ::java::lang::String a1((jobject) NULL);
            JArray< ::java::lang::String > a2((jobject) NULL);
            ::org::apache::lucene::facet::FacetResult result((jobject) NULL);

            if (!parseArgs(args, "Is[s", &a0, &a1, &a2))
            {
              OBJ_CALL(result = self->object.getTopChildren(a0, a1, a2));
              return ::org::apache::lucene::facet::t_FacetResult::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(SortedSetDocValuesFacetCounts), (PyObject *) self, "getTopChildren", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/MultiTerms.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "org/apache/lucene/index/ReaderSlice.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/index/TermsEnum.h"
#include "java/io/IOException.h"
#include "java/util/Comparator.h"
#include "org/apache/lucene/util/automaton/CompiledAutomaton.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *MultiTerms::class$ = NULL;
        jmethodID *MultiTerms::mids$ = NULL;
        bool MultiTerms::live$ = false;

        jclass MultiTerms::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/MultiTerms");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_cc1bf630] = env->getMethodID(cls, "<init>", "([Lorg/apache/lucene/index/Terms;[Lorg/apache/lucene/index/ReaderSlice;)V");
            mids$[mid_getComparator_5a7ff2fc] = env->getMethodID(cls, "getComparator", "()Ljava/util/Comparator;");
            mids$[mid_getDocCount_54c6a179] = env->getMethodID(cls, "getDocCount", "()I");
            mids$[mid_getMax_4ae19461] = env->getMethodID(cls, "getMax", "()Lorg/apache/lucene/util/BytesRef;");
            mids$[mid_getMin_4ae19461] = env->getMethodID(cls, "getMin", "()Lorg/apache/lucene/util/BytesRef;");
            mids$[mid_getSubSlices_df2851e8] = env->getMethodID(cls, "getSubSlices", "()[Lorg/apache/lucene/index/ReaderSlice;");
            mids$[mid_getSubTerms_a3c12bfa] = env->getMethodID(cls, "getSubTerms", "()[Lorg/apache/lucene/index/Terms;");
            mids$[mid_getSumDocFreq_54c6a17a] = env->getMethodID(cls, "getSumDocFreq", "()J");
            mids$[mid_getSumTotalTermFreq_54c6a17a] = env->getMethodID(cls, "getSumTotalTermFreq", "()J");
            mids$[mid_hasFreqs_54c6a16a] = env->getMethodID(cls, "hasFreqs", "()Z");
            mids$[mid_hasOffsets_54c6a16a] = env->getMethodID(cls, "hasOffsets", "()Z");
            mids$[mid_hasPayloads_54c6a16a] = env->getMethodID(cls, "hasPayloads", "()Z");
            mids$[mid_hasPositions_54c6a16a] = env->getMethodID(cls, "hasPositions", "()Z");
            mids$[mid_intersect_b8f2b1bc] = env->getMethodID(cls, "intersect", "(Lorg/apache/lucene/util/automaton/CompiledAutomaton;Lorg/apache/lucene/util/BytesRef;)Lorg/apache/lucene/index/TermsEnum;");
            mids$[mid_iterator_d737078b] = env->getMethodID(cls, "iterator", "(Lorg/apache/lucene/index/TermsEnum;)Lorg/apache/lucene/index/TermsEnum;");
            mids$[mid_size_54c6a17a] = env->getMethodID(cls, "size", "()J");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        MultiTerms::MultiTerms(const JArray< ::org::apache::lucene::index::Terms > & a0, const JArray< ::org::apache::lucene::index::ReaderSlice > & a1) : ::org::apache::lucene::index::Terms(env->newObject(initializeClass, &mids$, mid_init$_cc1bf630, a0.this$, a1.this$)) {}

        ::java::util::Comparator MultiTerms::getComparator() const
        {
          return ::java::util::Comparator(env->callObjectMethod(this$, mids$[mid_getComparator_5a7ff2fc]));
        }

        jint MultiTerms::getDocCount() const
        {
          return env->callIntMethod(this$, mids$[mid_getDocCount_54c6a179]);
        }

        ::org::apache::lucene::util::BytesRef MultiTerms::getMax() const
        {
          return ::org::apache::lucene::util::BytesRef(env->callObjectMethod(this$, mids$[mid_getMax_4ae19461]));
        }

        ::org::apache::lucene::util::BytesRef MultiTerms::getMin() const
        {
          return ::org::apache::lucene::util::BytesRef(env->callObjectMethod(this$, mids$[mid_getMin_4ae19461]));
        }

        JArray< ::org::apache::lucene::index::ReaderSlice > MultiTerms::getSubSlices() const
        {
          return JArray< ::org::apache::lucene::index::ReaderSlice >(env->callObjectMethod(this$, mids$[mid_getSubSlices_df2851e8]));
        }

        JArray< ::org::apache::lucene::index::Terms > MultiTerms::getSubTerms() const
        {
          return JArray< ::org::apache::lucene::index::Terms >(env->callObjectMethod(this$, mids$[mid_getSubTerms_a3c12bfa]));
        }

        jlong MultiTerms::getSumDocFreq() const
        {
          return env->callLongMethod(this$, mids$[mid_getSumDocFreq_54c6a17a]);
        }

        jlong MultiTerms::getSumTotalTermFreq() const
        {
          return env->callLongMethod(this$, mids$[mid_getSumTotalTermFreq_54c6a17a]);
        }

        jboolean MultiTerms::hasFreqs() const
        {
          return env->callBooleanMethod(this$, mids$[mid_hasFreqs_54c6a16a]);
        }

        jboolean MultiTerms::hasOffsets() const
        {
          return env->callBooleanMethod(this$, mids$[mid_hasOffsets_54c6a16a]);
        }

        jboolean MultiTerms::hasPayloads() const
        {
          return env->callBooleanMethod(this$, mids$[mid_hasPayloads_54c6a16a]);
        }

        jboolean MultiTerms::hasPositions() const
        {
          return env->callBooleanMethod(this$, mids$[mid_hasPositions_54c6a16a]);
        }

        ::org::apache::lucene::index::TermsEnum MultiTerms::intersect(const ::org::apache::lucene::util::automaton::CompiledAutomaton & a0, const ::org::apache::lucene::util::BytesRef & a1) const
        {
          return ::org::apache::lucene::index::TermsEnum(env->callObjectMethod(this$, mids$[mid_intersect_b8f2b1bc], a0.this$, a1.this$));
        }

        ::org::apache::lucene::index::TermsEnum MultiTerms::iterator(const ::org::apache::lucene::index::TermsEnum & a0) const
        {
          return ::org::apache::lucene::index::TermsEnum(env->callObjectMethod(this$, mids$[mid_iterator_d737078b], a0.this$));
        }

        jlong MultiTerms::size() const
        {
          return env->callLongMethod(this$, mids$[mid_size_54c6a17a]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_MultiTerms_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_MultiTerms_instance_(PyTypeObject *type, PyObject *arg);
        static int t_MultiTerms_init_(t_MultiTerms *self, PyObject *args, PyObject *kwds);
        static PyObject *t_MultiTerms_getComparator(t_MultiTerms *self, PyObject *args);
        static PyObject *t_MultiTerms_getDocCount(t_MultiTerms *self, PyObject *args);
        static PyObject *t_MultiTerms_getMax(t_MultiTerms *self, PyObject *args);
        static PyObject *t_MultiTerms_getMin(t_MultiTerms *self, PyObject *args);
        static PyObject *t_MultiTerms_getSubSlices(t_MultiTerms *self);
        static PyObject *t_MultiTerms_getSubTerms(t_MultiTerms *self);
        static PyObject *t_MultiTerms_getSumDocFreq(t_MultiTerms *self, PyObject *args);
        static PyObject *t_MultiTerms_getSumTotalTermFreq(t_MultiTerms *self, PyObject *args);
        static PyObject *t_MultiTerms_hasFreqs(t_MultiTerms *self, PyObject *args);
        static PyObject *t_MultiTerms_hasOffsets(t_MultiTerms *self, PyObject *args);
        static PyObject *t_MultiTerms_hasPayloads(t_MultiTerms *self, PyObject *args);
        static PyObject *t_MultiTerms_hasPositions(t_MultiTerms *self, PyObject *args);
        static PyObject *t_MultiTerms_intersect(t_MultiTerms *self, PyObject *args);
        static PyObject *t_MultiTerms_iterator(t_MultiTerms *self, PyObject *args);
        static PyObject *t_MultiTerms_size(t_MultiTerms *self, PyObject *args);
        static PyObject *t_MultiTerms_get__comparator(t_MultiTerms *self, void *data);
        static PyObject *t_MultiTerms_get__docCount(t_MultiTerms *self, void *data);
        static PyObject *t_MultiTerms_get__max(t_MultiTerms *self, void *data);
        static PyObject *t_MultiTerms_get__min(t_MultiTerms *self, void *data);
        static PyObject *t_MultiTerms_get__subSlices(t_MultiTerms *self, void *data);
        static PyObject *t_MultiTerms_get__subTerms(t_MultiTerms *self, void *data);
        static PyObject *t_MultiTerms_get__sumDocFreq(t_MultiTerms *self, void *data);
        static PyObject *t_MultiTerms_get__sumTotalTermFreq(t_MultiTerms *self, void *data);
        static PyGetSetDef t_MultiTerms__fields_[] = {
          DECLARE_GET_FIELD(t_MultiTerms, comparator),
          DECLARE_GET_FIELD(t_MultiTerms, docCount),
          DECLARE_GET_FIELD(t_MultiTerms, max),
          DECLARE_GET_FIELD(t_MultiTerms, min),
          DECLARE_GET_FIELD(t_MultiTerms, subSlices),
          DECLARE_GET_FIELD(t_MultiTerms, subTerms),
          DECLARE_GET_FIELD(t_MultiTerms, sumDocFreq),
          DECLARE_GET_FIELD(t_MultiTerms, sumTotalTermFreq),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_MultiTerms__methods_[] = {
          DECLARE_METHOD(t_MultiTerms, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MultiTerms, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MultiTerms, getComparator, METH_VARARGS),
          DECLARE_METHOD(t_MultiTerms, getDocCount, METH_VARARGS),
          DECLARE_METHOD(t_MultiTerms, getMax, METH_VARARGS),
          DECLARE_METHOD(t_MultiTerms, getMin, METH_VARARGS),
          DECLARE_METHOD(t_MultiTerms, getSubSlices, METH_NOARGS),
          DECLARE_METHOD(t_MultiTerms, getSubTerms, METH_NOARGS),
          DECLARE_METHOD(t_MultiTerms, getSumDocFreq, METH_VARARGS),
          DECLARE_METHOD(t_MultiTerms, getSumTotalTermFreq, METH_VARARGS),
          DECLARE_METHOD(t_MultiTerms, hasFreqs, METH_VARARGS),
          DECLARE_METHOD(t_MultiTerms, hasOffsets, METH_VARARGS),
          DECLARE_METHOD(t_MultiTerms, hasPayloads, METH_VARARGS),
          DECLARE_METHOD(t_MultiTerms, hasPositions, METH_VARARGS),
          DECLARE_METHOD(t_MultiTerms, intersect, METH_VARARGS),
          DECLARE_METHOD(t_MultiTerms, iterator, METH_VARARGS),
          DECLARE_METHOD(t_MultiTerms, size, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(MultiTerms, t_MultiTerms, ::org::apache::lucene::index::Terms, MultiTerms, t_MultiTerms_init_, 0, 0, t_MultiTerms__fields_, 0, 0);

        void t_MultiTerms::install(PyObject *module)
        {
          installType(&PY_TYPE(MultiTerms), module, "MultiTerms", 0);
        }

        void t_MultiTerms::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(MultiTerms).tp_dict, "class_", make_descriptor(MultiTerms::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(MultiTerms).tp_dict, "wrapfn_", make_descriptor(t_MultiTerms::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(MultiTerms).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_MultiTerms_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, MultiTerms::initializeClass, 1)))
            return NULL;
          return t_MultiTerms::wrap_Object(MultiTerms(((t_MultiTerms *) arg)->object.this$));
        }
        static PyObject *t_MultiTerms_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, MultiTerms::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_MultiTerms_init_(t_MultiTerms *self, PyObject *args, PyObject *kwds)
        {
          JArray< ::org::apache::lucene::index::Terms > a0((jobject) NULL);
          JArray< ::org::apache::lucene::index::ReaderSlice > a1((jobject) NULL);
          MultiTerms object((jobject) NULL);

          if (!parseArgs(args, "[k[k", ::org::apache::lucene::index::Terms::initializeClass, ::org::apache::lucene::index::ReaderSlice::initializeClass, &a0, &a1))
          {
            INT_CALL(object = MultiTerms(a0, a1));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_MultiTerms_getComparator(t_MultiTerms *self, PyObject *args)
        {
          ::java::util::Comparator result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.getComparator());
            return ::java::util::t_Comparator::wrap_Object(result, &::org::apache::lucene::util::PY_TYPE(BytesRef));
          }

          return callSuper(&PY_TYPE(MultiTerms), (PyObject *) self, "getComparator", args, 2);
        }

        static PyObject *t_MultiTerms_getDocCount(t_MultiTerms *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.getDocCount());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(MultiTerms), (PyObject *) self, "getDocCount", args, 2);
        }

        static PyObject *t_MultiTerms_getMax(t_MultiTerms *self, PyObject *args)
        {
          ::org::apache::lucene::util::BytesRef result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.getMax());
            return ::org::apache::lucene::util::t_BytesRef::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(MultiTerms), (PyObject *) self, "getMax", args, 2);
        }

        static PyObject *t_MultiTerms_getMin(t_MultiTerms *self, PyObject *args)
        {
          ::org::apache::lucene::util::BytesRef result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.getMin());
            return ::org::apache::lucene::util::t_BytesRef::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(MultiTerms), (PyObject *) self, "getMin", args, 2);
        }

        static PyObject *t_MultiTerms_getSubSlices(t_MultiTerms *self)
        {
          JArray< ::org::apache::lucene::index::ReaderSlice > result((jobject) NULL);
          OBJ_CALL(result = self->object.getSubSlices());
          return JArray<jobject>(result.this$).wrap(::org::apache::lucene::index::t_ReaderSlice::wrap_jobject);
        }

        static PyObject *t_MultiTerms_getSubTerms(t_MultiTerms *self)
        {
          JArray< ::org::apache::lucene::index::Terms > result((jobject) NULL);
          OBJ_CALL(result = self->object.getSubTerms());
          return JArray<jobject>(result.this$).wrap(::org::apache::lucene::index::t_Terms::wrap_jobject);
        }

        static PyObject *t_MultiTerms_getSumDocFreq(t_MultiTerms *self, PyObject *args)
        {
          jlong result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.getSumDocFreq());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          return callSuper(&PY_TYPE(MultiTerms), (PyObject *) self, "getSumDocFreq", args, 2);
        }

        static PyObject *t_MultiTerms_getSumTotalTermFreq(t_MultiTerms *self, PyObject *args)
        {
          jlong result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.getSumTotalTermFreq());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          return callSuper(&PY_TYPE(MultiTerms), (PyObject *) self, "getSumTotalTermFreq", args, 2);
        }

        static PyObject *t_MultiTerms_hasFreqs(t_MultiTerms *self, PyObject *args)
        {
          jboolean result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hasFreqs());
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(MultiTerms), (PyObject *) self, "hasFreqs", args, 2);
        }

        static PyObject *t_MultiTerms_hasOffsets(t_MultiTerms *self, PyObject *args)
        {
          jboolean result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hasOffsets());
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(MultiTerms), (PyObject *) self, "hasOffsets", args, 2);
        }

        static PyObject *t_MultiTerms_hasPayloads(t_MultiTerms *self, PyObject *args)
        {
          jboolean result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hasPayloads());
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(MultiTerms), (PyObject *) self, "hasPayloads", args, 2);
        }

        static PyObject *t_MultiTerms_hasPositions(t_MultiTerms *self, PyObject *args)
        {
          jboolean result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hasPositions());
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(MultiTerms), (PyObject *) self, "hasPositions", args, 2);
        }

        static PyObject *t_MultiTerms_intersect(t_MultiTerms *self, PyObject *args)
        {
          ::org::apache::lucene::util::automaton::CompiledAutomaton a0((jobject) NULL);
          ::org::apache::lucene::util::BytesRef a1((jobject) NULL);
          ::org::apache::lucene::index::TermsEnum result((jobject) NULL);

          if (!parseArgs(args, "kk", ::org::apache::lucene::util::automaton::CompiledAutomaton::initializeClass, ::org::apache::lucene::util::BytesRef::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = self->object.intersect(a0, a1));
            return ::org::apache::lucene::index::t_TermsEnum::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(MultiTerms), (PyObject *) self, "intersect", args, 2);
        }

        static PyObject *t_MultiTerms_iterator(t_MultiTerms *self, PyObject *args)
        {
          ::org::apache::lucene::index::TermsEnum a0((jobject) NULL);
          ::org::apache::lucene::index::TermsEnum result((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::index::TermsEnum::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.iterator(a0));
            return ::org::apache::lucene::index::t_TermsEnum::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(MultiTerms), (PyObject *) self, "iterator", args, 2);
        }

        static PyObject *t_MultiTerms_size(t_MultiTerms *self, PyObject *args)
        {
          jlong result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.size());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          return callSuper(&PY_TYPE(MultiTerms), (PyObject *) self, "size", args, 2);
        }

        static PyObject *t_MultiTerms_get__comparator(t_MultiTerms *self, void *data)
        {
          ::java::util::Comparator value((jobject) NULL);
          OBJ_CALL(value = self->object.getComparator());
          return ::java::util::t_Comparator::wrap_Object(value);
        }

        static PyObject *t_MultiTerms_get__docCount(t_MultiTerms *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object.getDocCount());
          return PyInt_FromLong((long) value);
        }

        static PyObject *t_MultiTerms_get__max(t_MultiTerms *self, void *data)
        {
          ::org::apache::lucene::util::BytesRef value((jobject) NULL);
          OBJ_CALL(value = self->object.getMax());
          return ::org::apache::lucene::util::t_BytesRef::wrap_Object(value);
        }

        static PyObject *t_MultiTerms_get__min(t_MultiTerms *self, void *data)
        {
          ::org::apache::lucene::util::BytesRef value((jobject) NULL);
          OBJ_CALL(value = self->object.getMin());
          return ::org::apache::lucene::util::t_BytesRef::wrap_Object(value);
        }

        static PyObject *t_MultiTerms_get__subSlices(t_MultiTerms *self, void *data)
        {
          JArray< ::org::apache::lucene::index::ReaderSlice > value((jobject) NULL);
          OBJ_CALL(value = self->object.getSubSlices());
          return JArray<jobject>(value.this$).wrap(::org::apache::lucene::index::t_ReaderSlice::wrap_jobject);
        }

        static PyObject *t_MultiTerms_get__subTerms(t_MultiTerms *self, void *data)
        {
          JArray< ::org::apache::lucene::index::Terms > value((jobject) NULL);
          OBJ_CALL(value = self->object.getSubTerms());
          return JArray<jobject>(value.this$).wrap(::org::apache::lucene::index::t_Terms::wrap_jobject);
        }

        static PyObject *t_MultiTerms_get__sumDocFreq(t_MultiTerms *self, void *data)
        {
          jlong value;
          OBJ_CALL(value = self->object.getSumDocFreq());
          return PyLong_FromLongLong((PY_LONG_LONG) value);
        }

        static PyObject *t_MultiTerms_get__sumTotalTermFreq(t_MultiTerms *self, void *data)
        {
          jlong value;
          OBJ_CALL(value = self->object.getSumTotalTermFreq());
          return PyLong_FromLongLong((PY_LONG_LONG) value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queries/function/valuesource/MultiBoolFunction.h"
#include "java/lang/Class.h"
#include "java/lang/Object.h"
#include "org/apache/lucene/search/IndexSearcher.h"
#include "java/io/IOException.h"
#include "java/util/Map.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "java/lang/String.h"
#include "org/apache/lucene/queries/function/docvalues/BoolDocValues.h"
#include "org/apache/lucene/queries/function/ValueSource.h"
#include "java/util/List.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {

            ::java::lang::Class *MultiBoolFunction::class$ = NULL;
            jmethodID *MultiBoolFunction::mids$ = NULL;
            bool MultiBoolFunction::live$ = false;

            jclass MultiBoolFunction::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queries/function/valuesource/MultiBoolFunction");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_1fde8fc3] = env->getMethodID(cls, "<init>", "(Ljava/util/List;)V");
                mids$[mid_createWeight_1b6125ba] = env->getMethodID(cls, "createWeight", "(Ljava/util/Map;Lorg/apache/lucene/search/IndexSearcher;)V");
                mids$[mid_description_14c7b5c5] = env->getMethodID(cls, "description", "()Ljava/lang/String;");
                mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
                mids$[mid_getValues_ea0ab6f1] = env->getMethodID(cls, "getValues", "(Ljava/util/Map;Lorg/apache/lucene/index/AtomicReaderContext;)Lorg/apache/lucene/queries/function/docvalues/BoolDocValues;");
                mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
                mids$[mid_name_14c7b5c5] = env->getMethodID(cls, "name", "()Ljava/lang/String;");
                mids$[mid_func_d2e34ba5] = env->getMethodID(cls, "func", "(I[Lorg/apache/lucene/queries/function/FunctionValues;)Z");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            MultiBoolFunction::MultiBoolFunction(const ::java::util::List & a0) : ::org::apache::lucene::queries::function::valuesource::BoolFunction(env->newObject(initializeClass, &mids$, mid_init$_1fde8fc3, a0.this$)) {}

            void MultiBoolFunction::createWeight(const ::java::util::Map & a0, const ::org::apache::lucene::search::IndexSearcher & a1) const
            {
              env->callVoidMethod(this$, mids$[mid_createWeight_1b6125ba], a0.this$, a1.this$);
            }

            ::java::lang::String MultiBoolFunction::description() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_description_14c7b5c5]));
            }

            jboolean MultiBoolFunction::equals(const ::java::lang::Object & a0) const
            {
              return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
            }

            ::org::apache::lucene::queries::function::docvalues::BoolDocValues MultiBoolFunction::getValues(const ::java::util::Map & a0, const ::org::apache::lucene::index::AtomicReaderContext & a1) const
            {
              return ::org::apache::lucene::queries::function::docvalues::BoolDocValues(env->callObjectMethod(this$, mids$[mid_getValues_ea0ab6f1], a0.this$, a1.this$));
            }

            jint MultiBoolFunction::hashCode() const
            {
              return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {
            static PyObject *t_MultiBoolFunction_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_MultiBoolFunction_instance_(PyTypeObject *type, PyObject *arg);
            static int t_MultiBoolFunction_init_(t_MultiBoolFunction *self, PyObject *args, PyObject *kwds);
            static PyObject *t_MultiBoolFunction_createWeight(t_MultiBoolFunction *self, PyObject *args);
            static PyObject *t_MultiBoolFunction_description(t_MultiBoolFunction *self, PyObject *args);
            static PyObject *t_MultiBoolFunction_equals(t_MultiBoolFunction *self, PyObject *args);
            static PyObject *t_MultiBoolFunction_getValues(t_MultiBoolFunction *self, PyObject *args);
            static PyObject *t_MultiBoolFunction_hashCode(t_MultiBoolFunction *self, PyObject *args);

            static PyMethodDef t_MultiBoolFunction__methods_[] = {
              DECLARE_METHOD(t_MultiBoolFunction, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_MultiBoolFunction, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_MultiBoolFunction, createWeight, METH_VARARGS),
              DECLARE_METHOD(t_MultiBoolFunction, description, METH_VARARGS),
              DECLARE_METHOD(t_MultiBoolFunction, equals, METH_VARARGS),
              DECLARE_METHOD(t_MultiBoolFunction, getValues, METH_VARARGS),
              DECLARE_METHOD(t_MultiBoolFunction, hashCode, METH_VARARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(MultiBoolFunction, t_MultiBoolFunction, ::org::apache::lucene::queries::function::valuesource::BoolFunction, MultiBoolFunction, t_MultiBoolFunction_init_, 0, 0, 0, 0, 0);

            void t_MultiBoolFunction::install(PyObject *module)
            {
              installType(&PY_TYPE(MultiBoolFunction), module, "MultiBoolFunction", 0);
            }

            void t_MultiBoolFunction::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(MultiBoolFunction).tp_dict, "class_", make_descriptor(MultiBoolFunction::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(MultiBoolFunction).tp_dict, "wrapfn_", make_descriptor(t_MultiBoolFunction::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(MultiBoolFunction).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_MultiBoolFunction_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, MultiBoolFunction::initializeClass, 1)))
                return NULL;
              return t_MultiBoolFunction::wrap_Object(MultiBoolFunction(((t_MultiBoolFunction *) arg)->object.this$));
            }
            static PyObject *t_MultiBoolFunction_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, MultiBoolFunction::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_MultiBoolFunction_init_(t_MultiBoolFunction *self, PyObject *args, PyObject *kwds)
            {
              ::java::util::List a0((jobject) NULL);
              PyTypeObject **p0;
              MultiBoolFunction object((jobject) NULL);

              if (!parseArgs(args, "K", ::java::util::List::initializeClass, &a0, &p0, ::java::util::t_List::parameters_))
              {
                INT_CALL(object = MultiBoolFunction(a0));
                self->object = object;
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_MultiBoolFunction_createWeight(t_MultiBoolFunction *self, PyObject *args)
            {
              ::java::util::Map a0((jobject) NULL);
              PyTypeObject **p0;
              ::org::apache::lucene::search::IndexSearcher a1((jobject) NULL);

              if (!parseArgs(args, "Kk", ::java::util::Map::initializeClass, ::org::apache::lucene::search::IndexSearcher::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_, &a1))
              {
                OBJ_CALL(self->object.createWeight(a0, a1));
                Py_RETURN_NONE;
              }

              return callSuper(&PY_TYPE(MultiBoolFunction), (PyObject *) self, "createWeight", args, 2);
            }

            static PyObject *t_MultiBoolFunction_description(t_MultiBoolFunction *self, PyObject *args)
            {
              ::java::lang::String result((jobject) NULL);

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.description());
                return j2p(result);
              }

              return callSuper(&PY_TYPE(MultiBoolFunction), (PyObject *) self, "description", args, 2);
            }

            static PyObject *t_MultiBoolFunction_equals(t_MultiBoolFunction *self, PyObject *args)
            {
              ::java::lang::Object a0((jobject) NULL);
              jboolean result;

              if (!parseArgs(args, "o", &a0))
              {
                OBJ_CALL(result = self->object.equals(a0));
                Py_RETURN_BOOL(result);
              }

              return callSuper(&PY_TYPE(MultiBoolFunction), (PyObject *) self, "equals", args, 2);
            }

            static PyObject *t_MultiBoolFunction_getValues(t_MultiBoolFunction *self, PyObject *args)
            {
              ::java::util::Map a0((jobject) NULL);
              PyTypeObject **p0;
              ::org::apache::lucene::index::AtomicReaderContext a1((jobject) NULL);
              ::org::apache::lucene::queries::function::docvalues::BoolDocValues result((jobject) NULL);

              if (!parseArgs(args, "Kk", ::java::util::Map::initializeClass, ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_, &a1))
              {
                OBJ_CALL(result = self->object.getValues(a0, a1));
                return ::org::apache::lucene::queries::function::docvalues::t_BoolDocValues::wrap_Object(result);
              }

              return callSuper(&PY_TYPE(MultiBoolFunction), (PyObject *) self, "getValues", args, 2);
            }

            static PyObject *t_MultiBoolFunction_hashCode(t_MultiBoolFunction *self, PyObject *args)
            {
              jint result;

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.hashCode());
                return PyInt_FromLong((long) result);
              }

              return callSuper(&PY_TYPE(MultiBoolFunction), (PyObject *) self, "hashCode", args, 2);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/TermsEnum$SeekStatus.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *TermsEnum$SeekStatus::class$ = NULL;
        jmethodID *TermsEnum$SeekStatus::mids$ = NULL;
        bool TermsEnum$SeekStatus::live$ = false;
        TermsEnum$SeekStatus *TermsEnum$SeekStatus::END = NULL;
        TermsEnum$SeekStatus *TermsEnum$SeekStatus::FOUND = NULL;
        TermsEnum$SeekStatus *TermsEnum$SeekStatus::NOT_FOUND = NULL;

        jclass TermsEnum$SeekStatus::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/TermsEnum$SeekStatus");

            mids$ = new jmethodID[max_mid];
            mids$[mid_valueOf_e0b0a2bc] = env->getStaticMethodID(cls, "valueOf", "(Ljava/lang/String;)Lorg/apache/lucene/index/TermsEnum$SeekStatus;");
            mids$[mid_values_5e8184a6] = env->getStaticMethodID(cls, "values", "()[Lorg/apache/lucene/index/TermsEnum$SeekStatus;");

            class$ = (::java::lang::Class *) new JObject(cls);
            cls = (jclass) class$->this$;

            END = new TermsEnum$SeekStatus(env->getStaticObjectField(cls, "END", "Lorg/apache/lucene/index/TermsEnum$SeekStatus;"));
            FOUND = new TermsEnum$SeekStatus(env->getStaticObjectField(cls, "FOUND", "Lorg/apache/lucene/index/TermsEnum$SeekStatus;"));
            NOT_FOUND = new TermsEnum$SeekStatus(env->getStaticObjectField(cls, "NOT_FOUND", "Lorg/apache/lucene/index/TermsEnum$SeekStatus;"));
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        TermsEnum$SeekStatus TermsEnum$SeekStatus::valueOf(const ::java::lang::String & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return TermsEnum$SeekStatus(env->callStaticObjectMethod(cls, mids$[mid_valueOf_e0b0a2bc], a0.this$));
        }

        JArray< TermsEnum$SeekStatus > TermsEnum$SeekStatus::values()
        {
          jclass cls = env->getClass(initializeClass);
          return JArray< TermsEnum$SeekStatus >(env->callStaticObjectMethod(cls, mids$[mid_values_5e8184a6]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_TermsEnum$SeekStatus_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_TermsEnum$SeekStatus_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_TermsEnum$SeekStatus_of_(t_TermsEnum$SeekStatus *self, PyObject *args);
        static PyObject *t_TermsEnum$SeekStatus_valueOf(PyTypeObject *type, PyObject *args);
        static PyObject *t_TermsEnum$SeekStatus_values(PyTypeObject *type);
        static PyObject *t_TermsEnum$SeekStatus_get__parameters_(t_TermsEnum$SeekStatus *self, void *data);
        static PyGetSetDef t_TermsEnum$SeekStatus__fields_[] = {
          DECLARE_GET_FIELD(t_TermsEnum$SeekStatus, parameters_),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_TermsEnum$SeekStatus__methods_[] = {
          DECLARE_METHOD(t_TermsEnum$SeekStatus, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_TermsEnum$SeekStatus, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_TermsEnum$SeekStatus, of_, METH_VARARGS),
          DECLARE_METHOD(t_TermsEnum$SeekStatus, valueOf, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_TermsEnum$SeekStatus, values, METH_NOARGS | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(TermsEnum$SeekStatus, t_TermsEnum$SeekStatus, ::java::lang::Enum, TermsEnum$SeekStatus, abstract_init, 0, 0, t_TermsEnum$SeekStatus__fields_, 0, 0);
        PyObject *t_TermsEnum$SeekStatus::wrap_Object(const TermsEnum$SeekStatus& object, PyTypeObject *p0)
        {
          PyObject *obj = t_TermsEnum$SeekStatus::wrap_Object(object);
          if (obj != NULL && obj != Py_None)
          {
            t_TermsEnum$SeekStatus *self = (t_TermsEnum$SeekStatus *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        PyObject *t_TermsEnum$SeekStatus::wrap_jobject(const jobject& object, PyTypeObject *p0)
        {
          PyObject *obj = t_TermsEnum$SeekStatus::wrap_jobject(object);
          if (obj != NULL && obj != Py_None)
          {
            t_TermsEnum$SeekStatus *self = (t_TermsEnum$SeekStatus *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        void t_TermsEnum$SeekStatus::install(PyObject *module)
        {
          installType(&PY_TYPE(TermsEnum$SeekStatus), module, "TermsEnum$SeekStatus", 0);
        }

        void t_TermsEnum$SeekStatus::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(TermsEnum$SeekStatus).tp_dict, "class_", make_descriptor(TermsEnum$SeekStatus::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(TermsEnum$SeekStatus).tp_dict, "wrapfn_", make_descriptor(t_TermsEnum$SeekStatus::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(TermsEnum$SeekStatus).tp_dict, "boxfn_", make_descriptor(boxObject));
          env->getClass(TermsEnum$SeekStatus::initializeClass);
          PyDict_SetItemString(PY_TYPE(TermsEnum$SeekStatus).tp_dict, "END", make_descriptor(t_TermsEnum$SeekStatus::wrap_Object(*TermsEnum$SeekStatus::END)));
          PyDict_SetItemString(PY_TYPE(TermsEnum$SeekStatus).tp_dict, "FOUND", make_descriptor(t_TermsEnum$SeekStatus::wrap_Object(*TermsEnum$SeekStatus::FOUND)));
          PyDict_SetItemString(PY_TYPE(TermsEnum$SeekStatus).tp_dict, "NOT_FOUND", make_descriptor(t_TermsEnum$SeekStatus::wrap_Object(*TermsEnum$SeekStatus::NOT_FOUND)));
        }

        static PyObject *t_TermsEnum$SeekStatus_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, TermsEnum$SeekStatus::initializeClass, 1)))
            return NULL;
          return t_TermsEnum$SeekStatus::wrap_Object(TermsEnum$SeekStatus(((t_TermsEnum$SeekStatus *) arg)->object.this$));
        }
        static PyObject *t_TermsEnum$SeekStatus_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, TermsEnum$SeekStatus::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_TermsEnum$SeekStatus_of_(t_TermsEnum$SeekStatus *self, PyObject *args)
        {
          if (!parseArg(args, "T", 1, &(self->parameters)))
            Py_RETURN_SELF;
          return PyErr_SetArgsError((PyObject *) self, "of_", args);
        }

        static PyObject *t_TermsEnum$SeekStatus_valueOf(PyTypeObject *type, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          TermsEnum$SeekStatus result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::index::TermsEnum$SeekStatus::valueOf(a0));
            return t_TermsEnum$SeekStatus::wrap_Object(result);
          }

          return callSuper(type, "valueOf", args, 2);
        }

        static PyObject *t_TermsEnum$SeekStatus_values(PyTypeObject *type)
        {
          JArray< TermsEnum$SeekStatus > result((jobject) NULL);
          OBJ_CALL(result = ::org::apache::lucene::index::TermsEnum$SeekStatus::values());
          return JArray<jobject>(result.this$).wrap(t_TermsEnum$SeekStatus::wrap_jobject);
        }
        static PyObject *t_TermsEnum$SeekStatus_get__parameters_(t_TermsEnum$SeekStatus *self, void *data)
        {
          return typeParameters(self->parameters, sizeof(self->parameters));
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/ar/ArabicNormalizationFilter.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ar {

          ::java::lang::Class *ArabicNormalizationFilter::class$ = NULL;
          jmethodID *ArabicNormalizationFilter::mids$ = NULL;
          bool ArabicNormalizationFilter::live$ = false;

          jclass ArabicNormalizationFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/ar/ArabicNormalizationFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_c7c794dc] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;)V");
              mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ArabicNormalizationFilter::ArabicNormalizationFilter(const ::org::apache::lucene::analysis::TokenStream & a0) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_c7c794dc, a0.this$)) {}

          jboolean ArabicNormalizationFilter::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_54c6a16a]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ar {
          static PyObject *t_ArabicNormalizationFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_ArabicNormalizationFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_ArabicNormalizationFilter_init_(t_ArabicNormalizationFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_ArabicNormalizationFilter_incrementToken(t_ArabicNormalizationFilter *self, PyObject *args);

          static PyMethodDef t_ArabicNormalizationFilter__methods_[] = {
            DECLARE_METHOD(t_ArabicNormalizationFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ArabicNormalizationFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ArabicNormalizationFilter, incrementToken, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(ArabicNormalizationFilter, t_ArabicNormalizationFilter, ::org::apache::lucene::analysis::TokenFilter, ArabicNormalizationFilter, t_ArabicNormalizationFilter_init_, 0, 0, 0, 0, 0);

          void t_ArabicNormalizationFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(ArabicNormalizationFilter), module, "ArabicNormalizationFilter", 0);
          }

          void t_ArabicNormalizationFilter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(ArabicNormalizationFilter).tp_dict, "class_", make_descriptor(ArabicNormalizationFilter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(ArabicNormalizationFilter).tp_dict, "wrapfn_", make_descriptor(t_ArabicNormalizationFilter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(ArabicNormalizationFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_ArabicNormalizationFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, ArabicNormalizationFilter::initializeClass, 1)))
              return NULL;
            return t_ArabicNormalizationFilter::wrap_Object(ArabicNormalizationFilter(((t_ArabicNormalizationFilter *) arg)->object.this$));
          }
          static PyObject *t_ArabicNormalizationFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, ArabicNormalizationFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_ArabicNormalizationFilter_init_(t_ArabicNormalizationFilter *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ArabicNormalizationFilter object((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              INT_CALL(object = ArabicNormalizationFilter(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_ArabicNormalizationFilter_incrementToken(t_ArabicNormalizationFilter *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(ArabicNormalizationFilter), (PyObject *) self, "incrementToken", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/miscellaneous/KeepWordFilterFactory.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "java/io/IOException.h"
#include "java/util/Map.h"
#include "java/lang/String.h"
#include "org/apache/lucene/analysis/util/ResourceLoader.h"
#include "org/apache/lucene/analysis/util/ResourceLoaderAware.h"
#include "org/apache/lucene/analysis/util/CharArraySet.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {

          ::java::lang::Class *KeepWordFilterFactory::class$ = NULL;
          jmethodID *KeepWordFilterFactory::mids$ = NULL;
          bool KeepWordFilterFactory::live$ = false;

          jclass KeepWordFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/miscellaneous/KeepWordFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4c9e2b1c] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_a65cd6ab] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/TokenStream;");
              mids$[mid_getWords_d2d3505c] = env->getMethodID(cls, "getWords", "()Lorg/apache/lucene/analysis/util/CharArraySet;");
              mids$[mid_inform_d6a4bc97] = env->getMethodID(cls, "inform", "(Lorg/apache/lucene/analysis/util/ResourceLoader;)V");
              mids$[mid_isEnablePositionIncrements_54c6a16a] = env->getMethodID(cls, "isEnablePositionIncrements", "()Z");
              mids$[mid_isIgnoreCase_54c6a16a] = env->getMethodID(cls, "isIgnoreCase", "()Z");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          KeepWordFilterFactory::KeepWordFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_4c9e2b1c, a0.this$)) {}

          ::org::apache::lucene::analysis::TokenStream KeepWordFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::TokenStream(env->callObjectMethod(this$, mids$[mid_create_a65cd6ab], a0.this$));
          }

          ::org::apache::lucene::analysis::util::CharArraySet KeepWordFilterFactory::getWords() const
          {
            return ::org::apache::lucene::analysis::util::CharArraySet(env->callObjectMethod(this$, mids$[mid_getWords_d2d3505c]));
          }

          void KeepWordFilterFactory::inform(const ::org::apache::lucene::analysis::util::ResourceLoader & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_inform_d6a4bc97], a0.this$);
          }

          jboolean KeepWordFilterFactory::isEnablePositionIncrements() const
          {
            return env->callBooleanMethod(this$, mids$[mid_isEnablePositionIncrements_54c6a16a]);
          }

          jboolean KeepWordFilterFactory::isIgnoreCase() const
          {
            return env->callBooleanMethod(this$, mids$[mid_isIgnoreCase_54c6a16a]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {
          static PyObject *t_KeepWordFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_KeepWordFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_KeepWordFilterFactory_init_(t_KeepWordFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_KeepWordFilterFactory_create(t_KeepWordFilterFactory *self, PyObject *args);
          static PyObject *t_KeepWordFilterFactory_getWords(t_KeepWordFilterFactory *self);
          static PyObject *t_KeepWordFilterFactory_inform(t_KeepWordFilterFactory *self, PyObject *arg);
          static PyObject *t_KeepWordFilterFactory_isEnablePositionIncrements(t_KeepWordFilterFactory *self);
          static PyObject *t_KeepWordFilterFactory_isIgnoreCase(t_KeepWordFilterFactory *self);
          static PyObject *t_KeepWordFilterFactory_get__enablePositionIncrements(t_KeepWordFilterFactory *self, void *data);
          static PyObject *t_KeepWordFilterFactory_get__ignoreCase(t_KeepWordFilterFactory *self, void *data);
          static PyObject *t_KeepWordFilterFactory_get__words(t_KeepWordFilterFactory *self, void *data);
          static PyGetSetDef t_KeepWordFilterFactory__fields_[] = {
            DECLARE_GET_FIELD(t_KeepWordFilterFactory, enablePositionIncrements),
            DECLARE_GET_FIELD(t_KeepWordFilterFactory, ignoreCase),
            DECLARE_GET_FIELD(t_KeepWordFilterFactory, words),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_KeepWordFilterFactory__methods_[] = {
            DECLARE_METHOD(t_KeepWordFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_KeepWordFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_KeepWordFilterFactory, create, METH_VARARGS),
            DECLARE_METHOD(t_KeepWordFilterFactory, getWords, METH_NOARGS),
            DECLARE_METHOD(t_KeepWordFilterFactory, inform, METH_O),
            DECLARE_METHOD(t_KeepWordFilterFactory, isEnablePositionIncrements, METH_NOARGS),
            DECLARE_METHOD(t_KeepWordFilterFactory, isIgnoreCase, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(KeepWordFilterFactory, t_KeepWordFilterFactory, ::org::apache::lucene::analysis::util::TokenFilterFactory, KeepWordFilterFactory, t_KeepWordFilterFactory_init_, 0, 0, t_KeepWordFilterFactory__fields_, 0, 0);

          void t_KeepWordFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(KeepWordFilterFactory), module, "KeepWordFilterFactory", 0);
          }

          void t_KeepWordFilterFactory::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(KeepWordFilterFactory).tp_dict, "class_", make_descriptor(KeepWordFilterFactory::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(KeepWordFilterFactory).tp_dict, "wrapfn_", make_descriptor(t_KeepWordFilterFactory::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(KeepWordFilterFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_KeepWordFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, KeepWordFilterFactory::initializeClass, 1)))
              return NULL;
            return t_KeepWordFilterFactory::wrap_Object(KeepWordFilterFactory(((t_KeepWordFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_KeepWordFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, KeepWordFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_KeepWordFilterFactory_init_(t_KeepWordFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            KeepWordFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = KeepWordFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_KeepWordFilterFactory_create(t_KeepWordFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::TokenStream result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::t_TokenStream::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(KeepWordFilterFactory), (PyObject *) self, "create", args, 2);
          }

          static PyObject *t_KeepWordFilterFactory_getWords(t_KeepWordFilterFactory *self)
          {
            ::org::apache::lucene::analysis::util::CharArraySet result((jobject) NULL);
            OBJ_CALL(result = self->object.getWords());
            return ::org::apache::lucene::analysis::util::t_CharArraySet::wrap_Object(result);
          }

          static PyObject *t_KeepWordFilterFactory_inform(t_KeepWordFilterFactory *self, PyObject *arg)
          {
            ::org::apache::lucene::analysis::util::ResourceLoader a0((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::analysis::util::ResourceLoader::initializeClass, &a0))
            {
              OBJ_CALL(self->object.inform(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "inform", arg);
            return NULL;
          }

          static PyObject *t_KeepWordFilterFactory_isEnablePositionIncrements(t_KeepWordFilterFactory *self)
          {
            jboolean result;
            OBJ_CALL(result = self->object.isEnablePositionIncrements());
            Py_RETURN_BOOL(result);
          }

          static PyObject *t_KeepWordFilterFactory_isIgnoreCase(t_KeepWordFilterFactory *self)
          {
            jboolean result;
            OBJ_CALL(result = self->object.isIgnoreCase());
            Py_RETURN_BOOL(result);
          }

          static PyObject *t_KeepWordFilterFactory_get__enablePositionIncrements(t_KeepWordFilterFactory *self, void *data)
          {
            jboolean value;
            OBJ_CALL(value = self->object.isEnablePositionIncrements());
            Py_RETURN_BOOL(value);
          }

          static PyObject *t_KeepWordFilterFactory_get__ignoreCase(t_KeepWordFilterFactory *self, void *data)
          {
            jboolean value;
            OBJ_CALL(value = self->object.isIgnoreCase());
            Py_RETURN_BOOL(value);
          }

          static PyObject *t_KeepWordFilterFactory_get__words(t_KeepWordFilterFactory *self, void *data)
          {
            ::org::apache::lucene::analysis::util::CharArraySet value((jobject) NULL);
            OBJ_CALL(value = self->object.getWords());
            return ::org::apache::lucene::analysis::util::t_CharArraySet::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/pylucene/search/PythonByteParser.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/index/Terms.h"
#include "org/apache/lucene/index/TermsEnum.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/search/FieldCache$ByteParser.h"
#include "java/lang/Throwable.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace pylucene {
      namespace search {

        ::java::lang::Class *PythonByteParser::class$ = NULL;
        jmethodID *PythonByteParser::mids$ = NULL;
        bool PythonByteParser::live$ = false;

        jclass PythonByteParser::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/pylucene/search/PythonByteParser");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_finalize_54c6a166] = env->getMethodID(cls, "finalize", "()V");
            mids$[mid_parseByte_7bc03dd0] = env->getMethodID(cls, "parseByte", "(Lorg/apache/lucene/util/BytesRef;)B");
            mids$[mid_pythonDecRef_54c6a166] = env->getMethodID(cls, "pythonDecRef", "()V");
            mids$[mid_pythonExtension_54c6a17a] = env->getMethodID(cls, "pythonExtension", "()J");
            mids$[mid_pythonExtension_0ee6df2f] = env->getMethodID(cls, "pythonExtension", "(J)V");
            mids$[mid_termsEnum_fb3ac14e] = env->getMethodID(cls, "termsEnum", "(Lorg/apache/lucene/index/Terms;)Lorg/apache/lucene/index/TermsEnum;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        PythonByteParser::PythonByteParser() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        void PythonByteParser::finalize() const
        {
          env->callVoidMethod(this$, mids$[mid_finalize_54c6a166]);
        }

        jlong PythonByteParser::pythonExtension() const
        {
          return env->callLongMethod(this$, mids$[mid_pythonExtension_54c6a17a]);
        }

        void PythonByteParser::pythonExtension(jlong a0) const
        {
          env->callVoidMethod(this$, mids$[mid_pythonExtension_0ee6df2f], a0);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace pylucene {
      namespace search {
        static PyObject *t_PythonByteParser_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_PythonByteParser_instance_(PyTypeObject *type, PyObject *arg);
        static int t_PythonByteParser_init_(t_PythonByteParser *self, PyObject *args, PyObject *kwds);
        static PyObject *t_PythonByteParser_finalize(t_PythonByteParser *self);
        static PyObject *t_PythonByteParser_pythonExtension(t_PythonByteParser *self, PyObject *args);
        static jbyte JNICALL t_PythonByteParser_parseByte0(JNIEnv *jenv, jobject jobj, jobject a0);
        static void JNICALL t_PythonByteParser_pythonDecRef1(JNIEnv *jenv, jobject jobj);
        static jobject JNICALL t_PythonByteParser_termsEnum2(JNIEnv *jenv, jobject jobj, jobject a0);
        static PyObject *t_PythonByteParser_get__self(t_PythonByteParser *self, void *data);
        static PyGetSetDef t_PythonByteParser__fields_[] = {
          DECLARE_GET_FIELD(t_PythonByteParser, self),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_PythonByteParser__methods_[] = {
          DECLARE_METHOD(t_PythonByteParser, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PythonByteParser, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PythonByteParser, finalize, METH_NOARGS),
          DECLARE_METHOD(t_PythonByteParser, pythonExtension, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(PythonByteParser, t_PythonByteParser, ::java::lang::Object, PythonByteParser, t_PythonByteParser_init_, 0, 0, t_PythonByteParser__fields_, 0, 0);

        void t_PythonByteParser::install(PyObject *module)
        {
          installType(&PY_TYPE(PythonByteParser), module, "PythonByteParser", 1);
        }

        void t_PythonByteParser::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(PythonByteParser).tp_dict, "class_", make_descriptor(PythonByteParser::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(PythonByteParser).tp_dict, "wrapfn_", make_descriptor(t_PythonByteParser::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(PythonByteParser).tp_dict, "boxfn_", make_descriptor(boxObject));
          jclass cls = env->getClass(PythonByteParser::initializeClass);
          JNINativeMethod methods[] = {
            { "parseByte", "(Lorg/apache/lucene/util/BytesRef;)B", (void *) t_PythonByteParser_parseByte0 },
            { "pythonDecRef", "()V", (void *) t_PythonByteParser_pythonDecRef1 },
            { "termsEnum", "(Lorg/apache/lucene/index/Terms;)Lorg/apache/lucene/index/TermsEnum;", (void *) t_PythonByteParser_termsEnum2 },
          };
          env->registerNatives(cls, methods, 3);
        }

        static PyObject *t_PythonByteParser_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, PythonByteParser::initializeClass, 1)))
            return NULL;
          return t_PythonByteParser::wrap_Object(PythonByteParser(((t_PythonByteParser *) arg)->object.this$));
        }
        static PyObject *t_PythonByteParser_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, PythonByteParser::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_PythonByteParser_init_(t_PythonByteParser *self, PyObject *args, PyObject *kwds)
        {
          PythonByteParser object((jobject) NULL);

          INT_CALL(object = PythonByteParser());
          self->object = object;

          Py_INCREF((PyObject *) self);
          self->object.pythonExtension((jlong) (Py_intptr_t) (void *) self);

          return 0;
        }

        static PyObject *t_PythonByteParser_finalize(t_PythonByteParser *self)
        {
          OBJ_CALL(self->object.finalize());
          Py_RETURN_NONE;
        }

        static PyObject *t_PythonByteParser_pythonExtension(t_PythonByteParser *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 0:
            {
              jlong result;
              OBJ_CALL(result = self->object.pythonExtension());
              return PyLong_FromLongLong((PY_LONG_LONG) result);
            }
            break;
           case 1:
            {
              jlong a0;

              if (!parseArgs(args, "J", &a0))
              {
                OBJ_CALL(self->object.pythonExtension(a0));
                Py_RETURN_NONE;
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "pythonExtension", args);
          return NULL;
        }

        static jbyte JNICALL t_PythonByteParser_parseByte0(JNIEnv *jenv, jobject jobj, jobject a0)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonByteParser::mids$[PythonByteParser::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          jbyte value;
          PyObject *o0 = ::org::apache::lucene::util::t_BytesRef::wrap_Object(::org::apache::lucene::util::BytesRef(a0));
          PyObject *result = PyObject_CallMethod(obj, "parseByte", "O", o0);
          Py_DECREF(o0);
          if (!result)
            throwPythonError();
          else if (parseArg(result, "B", &value))
          {
            throwTypeError("parseByte", result);
            Py_DECREF(result);
          }
          else
          {
            Py_DECREF(result);
            return value;
          }

          return (jbyte) 0;
        }

        static void JNICALL t_PythonByteParser_pythonDecRef1(JNIEnv *jenv, jobject jobj)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonByteParser::mids$[PythonByteParser::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;

          if (obj != NULL)
          {
            jenv->CallVoidMethod(jobj, PythonByteParser::mids$[PythonByteParser::mid_pythonExtension_0ee6df2f], (jlong) 0);
            env->finalizeObject(jenv, obj);
          }
        }

        static jobject JNICALL t_PythonByteParser_termsEnum2(JNIEnv *jenv, jobject jobj, jobject a0)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonByteParser::mids$[PythonByteParser::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          ::org::apache::lucene::index::TermsEnum value((jobject) NULL);
          PyObject *o0 = ::org::apache::lucene::index::t_Terms::wrap_Object(::org::apache::lucene::index::Terms(a0));
          PyObject *result = PyObject_CallMethod(obj, "termsEnum", "O", o0);
          Py_DECREF(o0);
          if (!result)
            throwPythonError();
          else if (parseArg(result, "k", ::org::apache::lucene::index::TermsEnum::initializeClass, &value))
          {
            throwTypeError("termsEnum", result);
            Py_DECREF(result);
          }
          else
          {
            jobj = jenv->NewLocalRef(value.this$);
            Py_DECREF(result);
            return jobj;
          }

          return (jobject) NULL;
        }

        static PyObject *t_PythonByteParser_get__self(t_PythonByteParser *self, void *data)
        {
          jlong ptr;
          OBJ_CALL(ptr = self->object.pythonExtension());
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;

          if (obj != NULL)
          {
            Py_INCREF(obj);
            return obj;
          }
          else
            Py_RETURN_NONE;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/ReferenceManager.h"
#include "java/io/Closeable.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/search/ReferenceManager$RefreshListener.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *ReferenceManager::class$ = NULL;
        jmethodID *ReferenceManager::mids$ = NULL;
        bool ReferenceManager::live$ = false;

        jclass ReferenceManager::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/ReferenceManager");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_acquire_846352c3] = env->getMethodID(cls, "acquire", "()Ljava/lang/Object;");
            mids$[mid_addListener_c1691f71] = env->getMethodID(cls, "addListener", "(Lorg/apache/lucene/search/ReferenceManager$RefreshListener;)V");
            mids$[mid_close_54c6a166] = env->getMethodID(cls, "close", "()V");
            mids$[mid_maybeRefresh_54c6a16a] = env->getMethodID(cls, "maybeRefresh", "()Z");
            mids$[mid_maybeRefreshBlocking_54c6a166] = env->getMethodID(cls, "maybeRefreshBlocking", "()V");
            mids$[mid_release_290588ee] = env->getMethodID(cls, "release", "(Ljava/lang/Object;)V");
            mids$[mid_removeListener_c1691f71] = env->getMethodID(cls, "removeListener", "(Lorg/apache/lucene/search/ReferenceManager$RefreshListener;)V");
            mids$[mid_decRef_290588ee] = env->getMethodID(cls, "decRef", "(Ljava/lang/Object;)V");
            mids$[mid_getRefCount_290588f1] = env->getMethodID(cls, "getRefCount", "(Ljava/lang/Object;)I");
            mids$[mid_tryIncRef_290588e2] = env->getMethodID(cls, "tryIncRef", "(Ljava/lang/Object;)Z");
            mids$[mid_refreshIfNeeded_a932a95f] = env->getMethodID(cls, "refreshIfNeeded", "(Ljava/lang/Object;)Ljava/lang/Object;");
            mids$[mid_afterClose_54c6a166] = env->getMethodID(cls, "afterClose", "()V");
            mids$[mid_afterMaybeRefresh_54c6a166] = env->getMethodID(cls, "afterMaybeRefresh", "()V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        ReferenceManager::ReferenceManager() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        ::java::lang::Object ReferenceManager::acquire() const
        {
          return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_acquire_846352c3]));
        }

        void ReferenceManager::addListener(const ::org::apache::lucene::search::ReferenceManager$RefreshListener & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_addListener_c1691f71], a0.this$);
        }

        void ReferenceManager::close() const
        {
          env->callVoidMethod(this$, mids$[mid_close_54c6a166]);
        }

        jboolean ReferenceManager::maybeRefresh() const
        {
          return env->callBooleanMethod(this$, mids$[mid_maybeRefresh_54c6a16a]);
        }

        void ReferenceManager::maybeRefreshBlocking() const
        {
          env->callVoidMethod(this$, mids$[mid_maybeRefreshBlocking_54c6a166]);
        }

        void ReferenceManager::release(const ::java::lang::Object & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_release_290588ee], a0.this$);
        }

        void ReferenceManager::removeListener(const ::org::apache::lucene::search::ReferenceManager$RefreshListener & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_removeListener_c1691f71], a0.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_ReferenceManager_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_ReferenceManager_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_ReferenceManager_of_(t_ReferenceManager *self, PyObject *args);
        static int t_ReferenceManager_init_(t_ReferenceManager *self, PyObject *args, PyObject *kwds);
        static PyObject *t_ReferenceManager_acquire(t_ReferenceManager *self);
        static PyObject *t_ReferenceManager_addListener(t_ReferenceManager *self, PyObject *arg);
        static PyObject *t_ReferenceManager_close(t_ReferenceManager *self);
        static PyObject *t_ReferenceManager_maybeRefresh(t_ReferenceManager *self);
        static PyObject *t_ReferenceManager_maybeRefreshBlocking(t_ReferenceManager *self);
        static PyObject *t_ReferenceManager_release(t_ReferenceManager *self, PyObject *arg);
        static PyObject *t_ReferenceManager_removeListener(t_ReferenceManager *self, PyObject *arg);
        static PyObject *t_ReferenceManager_get__parameters_(t_ReferenceManager *self, void *data);
        static PyGetSetDef t_ReferenceManager__fields_[] = {
          DECLARE_GET_FIELD(t_ReferenceManager, parameters_),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_ReferenceManager__methods_[] = {
          DECLARE_METHOD(t_ReferenceManager, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_ReferenceManager, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_ReferenceManager, of_, METH_VARARGS),
          DECLARE_METHOD(t_ReferenceManager, acquire, METH_NOARGS),
          DECLARE_METHOD(t_ReferenceManager, addListener, METH_O),
          DECLARE_METHOD(t_ReferenceManager, close, METH_NOARGS),
          DECLARE_METHOD(t_ReferenceManager, maybeRefresh, METH_NOARGS),
          DECLARE_METHOD(t_ReferenceManager, maybeRefreshBlocking, METH_NOARGS),
          DECLARE_METHOD(t_ReferenceManager, release, METH_O),
          DECLARE_METHOD(t_ReferenceManager, removeListener, METH_O),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(ReferenceManager, t_ReferenceManager, ::java::lang::Object, ReferenceManager, t_ReferenceManager_init_, 0, 0, t_ReferenceManager__fields_, 0, 0);
        PyObject *t_ReferenceManager::wrap_Object(const ReferenceManager& object, PyTypeObject *p0)
        {
          PyObject *obj = t_ReferenceManager::wrap_Object(object);
          if (obj != NULL && obj != Py_None)
          {
            t_ReferenceManager *self = (t_ReferenceManager *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        PyObject *t_ReferenceManager::wrap_jobject(const jobject& object, PyTypeObject *p0)
        {
          PyObject *obj = t_ReferenceManager::wrap_jobject(object);
          if (obj != NULL && obj != Py_None)
          {
            t_ReferenceManager *self = (t_ReferenceManager *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        void t_ReferenceManager::install(PyObject *module)
        {
          installType(&PY_TYPE(ReferenceManager), module, "ReferenceManager", 0);
          PyDict_SetItemString(PY_TYPE(ReferenceManager).tp_dict, "RefreshListener", make_descriptor(&PY_TYPE(ReferenceManager$RefreshListener)));
        }

        void t_ReferenceManager::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(ReferenceManager).tp_dict, "class_", make_descriptor(ReferenceManager::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(ReferenceManager).tp_dict, "wrapfn_", make_descriptor(t_ReferenceManager::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(ReferenceManager).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_ReferenceManager_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, ReferenceManager::initializeClass, 1)))
            return NULL;
          return t_ReferenceManager::wrap_Object(ReferenceManager(((t_ReferenceManager *) arg)->object.this$));
        }
        static PyObject *t_ReferenceManager_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, ReferenceManager::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_ReferenceManager_of_(t_ReferenceManager *self, PyObject *args)
        {
          if (!parseArg(args, "T", 1, &(self->parameters)))
            Py_RETURN_SELF;
          return PyErr_SetArgsError((PyObject *) self, "of_", args);
        }

        static int t_ReferenceManager_init_(t_ReferenceManager *self, PyObject *args, PyObject *kwds)
        {
          ReferenceManager object((jobject) NULL);

          INT_CALL(object = ReferenceManager());
          self->object = object;

          return 0;
        }

        static PyObject *t_ReferenceManager_acquire(t_ReferenceManager *self)
        {
          ::java::lang::Object result((jobject) NULL);
          OBJ_CALL(result = self->object.acquire());
          return self->parameters[0] != NULL ? wrapType(self->parameters[0], result.this$) : ::java::lang::t_Object::wrap_Object(result);
        }

        static PyObject *t_ReferenceManager_addListener(t_ReferenceManager *self, PyObject *arg)
        {
          ::org::apache::lucene::search::ReferenceManager$RefreshListener a0((jobject) NULL);
          PyTypeObject **p0;

          if (!parseArg(arg, "K", ::org::apache::lucene::search::ReferenceManager$RefreshListener::initializeClass, &a0, &p0, ::org::apache::lucene::search::t_ReferenceManager$RefreshListener::parameters_))
          {
            OBJ_CALL(self->object.addListener(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "addListener", arg);
          return NULL;
        }

        static PyObject *t_ReferenceManager_close(t_ReferenceManager *self)
        {
          OBJ_CALL(self->object.close());
          Py_RETURN_NONE;
        }

        static PyObject *t_ReferenceManager_maybeRefresh(t_ReferenceManager *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.maybeRefresh());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_ReferenceManager_maybeRefreshBlocking(t_ReferenceManager *self)
        {
          OBJ_CALL(self->object.maybeRefreshBlocking());
          Py_RETURN_NONE;
        }

        static PyObject *t_ReferenceManager_release(t_ReferenceManager *self, PyObject *arg)
        {
          ::java::lang::Object a0((jobject) NULL);

          if (!parseArg(arg, "O", self->parameters[0], &a0))
          {
            OBJ_CALL(self->object.release(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "release", arg);
          return NULL;
        }

        static PyObject *t_ReferenceManager_removeListener(t_ReferenceManager *self, PyObject *arg)
        {
          ::org::apache::lucene::search::ReferenceManager$RefreshListener a0((jobject) NULL);
          PyTypeObject **p0;

          if (!parseArg(arg, "K", ::org::apache::lucene::search::ReferenceManager$RefreshListener::initializeClass, &a0, &p0, ::org::apache::lucene::search::t_ReferenceManager$RefreshListener::parameters_))
          {
            OBJ_CALL(self->object.removeListener(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "removeListener", arg);
          return NULL;
        }
        static PyObject *t_ReferenceManager_get__parameters_(t_ReferenceManager *self, void *data)
        {
          return typeParameters(self->parameters, sizeof(self->parameters));
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/packed/DirectWriter.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/store/IndexOutput.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace packed {

          ::java::lang::Class *DirectWriter::class$ = NULL;
          jmethodID *DirectWriter::mids$ = NULL;
          bool DirectWriter::live$ = false;

          jclass DirectWriter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/util/packed/DirectWriter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_add_0ee6df2f] = env->getMethodID(cls, "add", "(J)V");
              mids$[mid_bitsRequired_0ee6df30] = env->getStaticMethodID(cls, "bitsRequired", "(J)I");
              mids$[mid_finish_54c6a166] = env->getMethodID(cls, "finish", "()V");
              mids$[mid_getInstance_3b8d11ee] = env->getStaticMethodID(cls, "getInstance", "(Lorg/apache/lucene/store/IndexOutput;JI)Lorg/apache/lucene/util/packed/DirectWriter;");
              mids$[mid_unsignedBitsRequired_0ee6df30] = env->getStaticMethodID(cls, "unsignedBitsRequired", "(J)I");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          void DirectWriter::add(jlong a0) const
          {
            env->callVoidMethod(this$, mids$[mid_add_0ee6df2f], a0);
          }

          jint DirectWriter::bitsRequired(jlong a0)
          {
            jclass cls = env->getClass(initializeClass);
            return env->callStaticIntMethod(cls, mids$[mid_bitsRequired_0ee6df30], a0);
          }

          void DirectWriter::finish() const
          {
            env->callVoidMethod(this$, mids$[mid_finish_54c6a166]);
          }

          DirectWriter DirectWriter::getInstance(const ::org::apache::lucene::store::IndexOutput & a0, jlong a1, jint a2)
          {
            jclass cls = env->getClass(initializeClass);
            return DirectWriter(env->callStaticObjectMethod(cls, mids$[mid_getInstance_3b8d11ee], a0.this$, a1, a2));
          }

          jint DirectWriter::unsignedBitsRequired(jlong a0)
          {
            jclass cls = env->getClass(initializeClass);
            return env->callStaticIntMethod(cls, mids$[mid_unsignedBitsRequired_0ee6df30], a0);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace packed {
          static PyObject *t_DirectWriter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_DirectWriter_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_DirectWriter_add(t_DirectWriter *self, PyObject *arg);
          static PyObject *t_DirectWriter_bitsRequired(PyTypeObject *type, PyObject *arg);
          static PyObject *t_DirectWriter_finish(t_DirectWriter *self);
          static PyObject *t_DirectWriter_getInstance(PyTypeObject *type, PyObject *args);
          static PyObject *t_DirectWriter_unsignedBitsRequired(PyTypeObject *type, PyObject *arg);

          static PyMethodDef t_DirectWriter__methods_[] = {
            DECLARE_METHOD(t_DirectWriter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_DirectWriter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_DirectWriter, add, METH_O),
            DECLARE_METHOD(t_DirectWriter, bitsRequired, METH_O | METH_CLASS),
            DECLARE_METHOD(t_DirectWriter, finish, METH_NOARGS),
            DECLARE_METHOD(t_DirectWriter, getInstance, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_DirectWriter, unsignedBitsRequired, METH_O | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(DirectWriter, t_DirectWriter, ::java::lang::Object, DirectWriter, abstract_init, 0, 0, 0, 0, 0);

          void t_DirectWriter::install(PyObject *module)
          {
            installType(&PY_TYPE(DirectWriter), module, "DirectWriter", 0);
          }

          void t_DirectWriter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(DirectWriter).tp_dict, "class_", make_descriptor(DirectWriter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(DirectWriter).tp_dict, "wrapfn_", make_descriptor(t_DirectWriter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(DirectWriter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_DirectWriter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, DirectWriter::initializeClass, 1)))
              return NULL;
            return t_DirectWriter::wrap_Object(DirectWriter(((t_DirectWriter *) arg)->object.this$));
          }
          static PyObject *t_DirectWriter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, DirectWriter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_DirectWriter_add(t_DirectWriter *self, PyObject *arg)
          {
            jlong a0;

            if (!parseArg(arg, "J", &a0))
            {
              OBJ_CALL(self->object.add(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "add", arg);
            return NULL;
          }

          static PyObject *t_DirectWriter_bitsRequired(PyTypeObject *type, PyObject *arg)
          {
            jlong a0;
            jint result;

            if (!parseArg(arg, "J", &a0))
            {
              OBJ_CALL(result = ::org::apache::lucene::util::packed::DirectWriter::bitsRequired(a0));
              return PyInt_FromLong((long) result);
            }

            PyErr_SetArgsError(type, "bitsRequired", arg);
            return NULL;
          }

          static PyObject *t_DirectWriter_finish(t_DirectWriter *self)
          {
            OBJ_CALL(self->object.finish());
            Py_RETURN_NONE;
          }

          static PyObject *t_DirectWriter_getInstance(PyTypeObject *type, PyObject *args)
          {
            ::org::apache::lucene::store::IndexOutput a0((jobject) NULL);
            jlong a1;
            jint a2;
            DirectWriter result((jobject) NULL);

            if (!parseArgs(args, "kJI", ::org::apache::lucene::store::IndexOutput::initializeClass, &a0, &a1, &a2))
            {
              OBJ_CALL(result = ::org::apache::lucene::util::packed::DirectWriter::getInstance(a0, a1, a2));
              return t_DirectWriter::wrap_Object(result);
            }

            PyErr_SetArgsError(type, "getInstance", args);
            return NULL;
          }

          static PyObject *t_DirectWriter_unsignedBitsRequired(PyTypeObject *type, PyObject *arg)
          {
            jlong a0;
            jint result;

            if (!parseArg(arg, "J", &a0))
            {
              OBJ_CALL(result = ::org::apache::lucene::util::packed::DirectWriter::unsignedBitsRequired(a0));
              return PyInt_FromLong((long) result);
            }

            PyErr_SetArgsError(type, "unsignedBitsRequired", arg);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/standard/parser/ParseException.h"
#include "org/apache/lucene/queryparser/flexible/messages/Message.h"
#include "java/lang/String.h"
#include "org/apache/lucene/queryparser/flexible/standard/parser/Token.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace parser {

              ::java::lang::Class *ParseException::class$ = NULL;
              jmethodID *ParseException::mids$ = NULL;
              jfieldID *ParseException::fids$ = NULL;
              bool ParseException::live$ = false;

              jclass ParseException::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/standard/parser/ParseException");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
                  mids$[mid_init$_1dde9d59] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/queryparser/flexible/messages/Message;)V");
                  mids$[mid_init$_8fff18a5] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/queryparser/flexible/standard/parser/Token;[[I[Ljava/lang/String;)V");

                  fids$ = new jfieldID[max_fid];
                  fids$[fid_currentToken] = env->getFieldID(cls, "currentToken", "Lorg/apache/lucene/queryparser/flexible/standard/parser/Token;");
                  fids$[fid_expectedTokenSequences] = env->getFieldID(cls, "expectedTokenSequences", "[[I");
                  fids$[fid_tokenImage] = env->getFieldID(cls, "tokenImage", "[Ljava/lang/String;");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              ParseException::ParseException() : ::org::apache::lucene::queryparser::flexible::core::QueryNodeParseException(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

              ParseException::ParseException(const ::org::apache::lucene::queryparser::flexible::messages::Message & a0) : ::org::apache::lucene::queryparser::flexible::core::QueryNodeParseException(env->newObject(initializeClass, &mids$, mid_init$_1dde9d59, a0.this$)) {}

              ParseException::ParseException(const ::org::apache::lucene::queryparser::flexible::standard::parser::Token & a0, const JArray< JArray< jint > > & a1, const JArray< ::java::lang::String > & a2) : ::org::apache::lucene::queryparser::flexible::core::QueryNodeParseException(env->newObject(initializeClass, &mids$, mid_init$_8fff18a5, a0.this$, a1.this$, a2.this$)) {}

              ::org::apache::lucene::queryparser::flexible::standard::parser::Token ParseException::_get_currentToken() const
              {
                return ::org::apache::lucene::queryparser::flexible::standard::parser::Token(env->getObjectField(this$, fids$[fid_currentToken]));
              }

              void ParseException::_set_currentToken(const ::org::apache::lucene::queryparser::flexible::standard::parser::Token & a0) const
              {
                env->setObjectField(this$, fids$[fid_currentToken], a0.this$);
              }

              JArray< JArray< jint > > ParseException::_get_expectedTokenSequences() const
              {
                return JArray< JArray< jint > >(env->getObjectField(this$, fids$[fid_expectedTokenSequences]));
              }

              void ParseException::_set_expectedTokenSequences(const JArray< JArray< jint > > & a0) const
              {
                env->setObjectField(this$, fids$[fid_expectedTokenSequences], a0.this$);
              }

              JArray< ::java::lang::String > ParseException::_get_tokenImage() const
              {
                return JArray< ::java::lang::String >(env->getObjectField(this$, fids$[fid_tokenImage]));
              }

              void ParseException::_set_tokenImage(const JArray< ::java::lang::String > & a0) const
              {
                env->setObjectField(this$, fids$[fid_tokenImage], a0.this$);
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace parser {
              static PyObject *t_ParseException_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_ParseException_instance_(PyTypeObject *type, PyObject *arg);
              static int t_ParseException_init_(t_ParseException *self, PyObject *args, PyObject *kwds);
              static PyObject *t_ParseException_get__currentToken(t_ParseException *self, void *data);
              static int t_ParseException_set__currentToken(t_ParseException *self, PyObject *arg, void *data);
              static PyObject *t_ParseException_get__expectedTokenSequences(t_ParseException *self, void *data);
              static int t_ParseException_set__expectedTokenSequences(t_ParseException *self, PyObject *arg, void *data);
              static PyObject *t_ParseException_get__tokenImage(t_ParseException *self, void *data);
              static int t_ParseException_set__tokenImage(t_ParseException *self, PyObject *arg, void *data);

              static PyGetSetDef t_ParseException__fields_[] = {
                DECLARE_GETSET_FIELD(t_ParseException, currentToken),
                DECLARE_GETSET_FIELD(t_ParseException, expectedTokenSequences),
                DECLARE_GETSET_FIELD(t_ParseException, tokenImage),
                { NULL, NULL, NULL, NULL, NULL }
              };

              static PyMethodDef t_ParseException__methods_[] = {
                DECLARE_METHOD(t_ParseException, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_ParseException, instance_, METH_O | METH_CLASS),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(ParseException, t_ParseException, ::org::apache::lucene::queryparser::flexible::core::QueryNodeParseException, ParseException, t_ParseException_init_, 0, 0, t_ParseException__fields_, 0, 0);

              void t_ParseException::install(PyObject *module)
              {
                installType(&PY_TYPE(ParseException), module, "ParseException", 0);
              }

              void t_ParseException::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(ParseException).tp_dict, "class_", make_descriptor(ParseException::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(ParseException).tp_dict, "wrapfn_", make_descriptor(t_ParseException::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(ParseException).tp_dict, "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_ParseException_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, ParseException::initializeClass, 1)))
                  return NULL;
                return t_ParseException::wrap_Object(ParseException(((t_ParseException *) arg)->object.this$));
              }
              static PyObject *t_ParseException_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, ParseException::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_ParseException_init_(t_ParseException *self, PyObject *args, PyObject *kwds)
              {
                switch (PyTuple_GET_SIZE(args)) {
                 case 0:
                  {
                    ParseException object((jobject) NULL);

                    INT_CALL(object = ParseException());
                    self->object = object;
                    break;
                  }
                  goto err;
                 case 1:
                  {
                    ::org::apache::lucene::queryparser::flexible::messages::Message a0((jobject) NULL);
                    ParseException object((jobject) NULL);

                    if (!parseArgs(args, "k", ::org::apache::lucene::queryparser::flexible::messages::Message::initializeClass, &a0))
                    {
                      INT_CALL(object = ParseException(a0));
                      self->object = object;
                      break;
                    }
                  }
                  goto err;
                 case 3:
                  {
                    ::org::apache::lucene::queryparser::flexible::standard::parser::Token a0((jobject) NULL);
                    JArray< JArray< jint > > a1((jobject) NULL);
                    JArray< ::java::lang::String > a2((jobject) NULL);
                    ParseException object((jobject) NULL);

                    if (!parseArgs(args, "k[[I[s", ::org::apache::lucene::queryparser::flexible::standard::parser::Token::initializeClass, &a0, &a1, &a2))
                    {
                      INT_CALL(object = ParseException(a0, a1, a2));
                      self->object = object;
                      break;
                    }
                  }
                 default:
                 err:
                  PyErr_SetArgsError((PyObject *) self, "__init__", args);
                  return -1;
                }

                return 0;
              }

              static PyObject *t_ParseException_get__currentToken(t_ParseException *self, void *data)
              {
                ::org::apache::lucene::queryparser::flexible::standard::parser::Token value((jobject) NULL);
                OBJ_CALL(value = self->object._get_currentToken());
                return ::org::apache::lucene::queryparser::flexible::standard::parser::t_Token::wrap_Object(value);
              }
              static int t_ParseException_set__currentToken(t_ParseException *self, PyObject *arg, void *data)
              {
                ::org::apache::lucene::queryparser::flexible::standard::parser::Token value((jobject) NULL);
                if (!parseArg(arg, "k", ::org::apache::lucene::queryparser::flexible::standard::parser::Token::initializeClass, &value))
                {
                  INT_CALL(self->object._set_currentToken(value));
                  return 0;
                }
                PyErr_SetArgsError((PyObject *) self, "currentToken", arg);
                return -1;
              }

              static PyObject *t_ParseException_get__expectedTokenSequences(t_ParseException *self, void *data)
              {
                JArray< JArray< jint > > value((jobject) NULL);
                OBJ_CALL(value = self->object._get_expectedTokenSequences());
                return JArray<jobject>(value.this$).wrap(NULL);
              }
              static int t_ParseException_set__expectedTokenSequences(t_ParseException *self, PyObject *arg, void *data)
              {
                JArray< JArray< jint > > value((jobject) NULL);
                if (!parseArg(arg, "[[I", &value))
                {
                  INT_CALL(self->object._set_expectedTokenSequences(value));
                  return 0;
                }
                PyErr_SetArgsError((PyObject *) self, "expectedTokenSequences", arg);
                return -1;
              }

              static PyObject *t_ParseException_get__tokenImage(t_ParseException *self, void *data)
              {
                JArray< ::java::lang::String > value((jobject) NULL);
                OBJ_CALL(value = self->object._get_tokenImage());
                return JArray<jstring>(value.this$).wrap();
              }
              static int t_ParseException_set__tokenImage(t_ParseException *self, PyObject *arg, void *data)
              {
                JArray< ::java::lang::String > value((jobject) NULL);
                if (!parseArg(arg, "[s", &value))
                {
                  INT_CALL(self->object._set_tokenImage(value));
                  return 0;
                }
                PyErr_SetArgsError((PyObject *) self, "tokenImage", arg);
                return -1;
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/facet/FacetsConfig.h"
#include "java/lang/Class.h"
#include "java/util/Map.h"
#include "org/apache/lucene/facet/taxonomy/TaxonomyWriter.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/document/Document.h"
#include "org/apache/lucene/facet/FacetsConfig$DimConfig.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {

        ::java::lang::Class *FacetsConfig::class$ = NULL;
        jmethodID *FacetsConfig::mids$ = NULL;
        bool FacetsConfig::live$ = false;
        ::org::apache::lucene::facet::FacetsConfig$DimConfig *FacetsConfig::DEFAULT_DIM_CONFIG = NULL;
        ::java::lang::String *FacetsConfig::DEFAULT_INDEX_FIELD_NAME = NULL;

        jclass FacetsConfig::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/facet/FacetsConfig");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_build_4faaf947] = env->getMethodID(cls, "build", "(Lorg/apache/lucene/document/Document;)Lorg/apache/lucene/document/Document;");
            mids$[mid_build_ae4aef7e] = env->getMethodID(cls, "build", "(Lorg/apache/lucene/facet/taxonomy/TaxonomyWriter;Lorg/apache/lucene/document/Document;)Lorg/apache/lucene/document/Document;");
            mids$[mid_getDimConfig_7d95dc61] = env->getMethodID(cls, "getDimConfig", "(Ljava/lang/String;)Lorg/apache/lucene/facet/FacetsConfig$DimConfig;");
            mids$[mid_getDimConfigs_db60befd] = env->getMethodID(cls, "getDimConfigs", "()Ljava/util/Map;");
            mids$[mid_pathToString_1034289b] = env->getStaticMethodID(cls, "pathToString", "([Ljava/lang/String;)Ljava/lang/String;");
            mids$[mid_pathToString_64aeb14d] = env->getStaticMethodID(cls, "pathToString", "([Ljava/lang/String;I)Ljava/lang/String;");
            mids$[mid_pathToString_05f95d9d] = env->getStaticMethodID(cls, "pathToString", "(Ljava/lang/String;[Ljava/lang/String;)Ljava/lang/String;");
            mids$[mid_setHierarchical_f3691645] = env->getMethodID(cls, "setHierarchical", "(Ljava/lang/String;Z)V");
            mids$[mid_setIndexFieldName_4a264742] = env->getMethodID(cls, "setIndexFieldName", "(Ljava/lang/String;Ljava/lang/String;)V");
            mids$[mid_setMultiValued_f3691645] = env->getMethodID(cls, "setMultiValued", "(Ljava/lang/String;Z)V");
            mids$[mid_setRequireDimCount_f3691645] = env->getMethodID(cls, "setRequireDimCount", "(Ljava/lang/String;Z)V");
            mids$[mid_stringToPath_1f6a174f] = env->getStaticMethodID(cls, "stringToPath", "(Ljava/lang/String;)[Ljava/lang/String;");
            mids$[mid_getDefaultDimConfig_d06bca2f] = env->getMethodID(cls, "getDefaultDimConfig", "()Lorg/apache/lucene/facet/FacetsConfig$DimConfig;");
            mids$[mid_dedupAndEncode_14756a33] = env->getMethodID(cls, "dedupAndEncode", "(Lorg/apache/lucene/util/IntsRef;)Lorg/apache/lucene/util/BytesRef;");

            class$ = (::java::lang::Class *) new JObject(cls);
            cls = (jclass) class$->this$;

            DEFAULT_DIM_CONFIG = new ::org::apache::lucene::facet::FacetsConfig$DimConfig(env->getStaticObjectField(cls, "DEFAULT_DIM_CONFIG", "Lorg/apache/lucene/facet/FacetsConfig$DimConfig;"));
            DEFAULT_INDEX_FIELD_NAME = new ::java::lang::String(env->getStaticObjectField(cls, "DEFAULT_INDEX_FIELD_NAME", "Ljava/lang/String;"));
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        FacetsConfig::FacetsConfig() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        ::org::apache::lucene::document::Document FacetsConfig::build(const ::org::apache::lucene::document::Document & a0) const
        {
          return ::org::apache::lucene::document::Document(env->callObjectMethod(this$, mids$[mid_build_4faaf947], a0.this$));
        }

        ::org::apache::lucene::document::Document FacetsConfig::build(const ::org::apache::lucene::facet::taxonomy::TaxonomyWriter & a0, const ::org::apache::lucene::document::Document & a1) const
        {
          return ::org::apache::lucene::document::Document(env->callObjectMethod(this$, mids$[mid_build_ae4aef7e], a0.this$, a1.this$));
        }

        ::org::apache::lucene::facet::FacetsConfig$DimConfig FacetsConfig::getDimConfig(const ::java::lang::String & a0) const
        {
          return ::org::apache::lucene::facet::FacetsConfig$DimConfig(env->callObjectMethod(this$, mids$[mid_getDimConfig_7d95dc61], a0.this$));
        }

        ::java::util::Map FacetsConfig::getDimConfigs() const
        {
          return ::java::util::Map(env->callObjectMethod(this$, mids$[mid_getDimConfigs_db60befd]));
        }

        ::java::lang::String FacetsConfig::pathToString(const JArray< ::java::lang::String > & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return ::java::lang::String(env->callStaticObjectMethod(cls, mids$[mid_pathToString_1034289b], a0.this$));
        }

        ::java::lang::String FacetsConfig::pathToString(const JArray< ::java::lang::String > & a0, jint a1)
        {
          jclass cls = env->getClass(initializeClass);
          return ::java::lang::String(env->callStaticObjectMethod(cls, mids$[mid_pathToString_64aeb14d], a0.this$, a1));
        }

        ::java::lang::String FacetsConfig::pathToString(const ::java::lang::String & a0, const JArray< ::java::lang::String > & a1)
        {
          jclass cls = env->getClass(initializeClass);
          return ::java::lang::String(env->callStaticObjectMethod(cls, mids$[mid_pathToString_05f95d9d], a0.this$, a1.this$));
        }

        void FacetsConfig::setHierarchical(const ::java::lang::String & a0, jboolean a1) const
        {
          env->callVoidMethod(this$, mids$[mid_setHierarchical_f3691645], a0.this$, a1);
        }

        void FacetsConfig::setIndexFieldName(const ::java::lang::String & a0, const ::java::lang::String & a1) const
        {
          env->callVoidMethod(this$, mids$[mid_setIndexFieldName_4a264742], a0.this$, a1.this$);
        }

        void FacetsConfig::setMultiValued(const ::java::lang::String & a0, jboolean a1) const
        {
          env->callVoidMethod(this$, mids$[mid_setMultiValued_f3691645], a0.this$, a1);
        }

        void FacetsConfig::setRequireDimCount(const ::java::lang::String & a0, jboolean a1) const
        {
          env->callVoidMethod(this$, mids$[mid_setRequireDimCount_f3691645], a0.this$, a1);
        }

        JArray< ::java::lang::String > FacetsConfig::stringToPath(const ::java::lang::String & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return JArray< ::java::lang::String >(env->callStaticObjectMethod(cls, mids$[mid_stringToPath_1f6a174f], a0.this$));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        static PyObject *t_FacetsConfig_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FacetsConfig_instance_(PyTypeObject *type, PyObject *arg);
        static int t_FacetsConfig_init_(t_FacetsConfig *self, PyObject *args, PyObject *kwds);
        static PyObject *t_FacetsConfig_build(t_FacetsConfig *self, PyObject *args);
        static PyObject *t_FacetsConfig_getDimConfig(t_FacetsConfig *self, PyObject *arg);
        static PyObject *t_FacetsConfig_getDimConfigs(t_FacetsConfig *self);
        static PyObject *t_FacetsConfig_pathToString(PyTypeObject *type, PyObject *args);
        static PyObject *t_FacetsConfig_setHierarchical(t_FacetsConfig *self, PyObject *args);
        static PyObject *t_FacetsConfig_setIndexFieldName(t_FacetsConfig *self, PyObject *args);
        static PyObject *t_FacetsConfig_setMultiValued(t_FacetsConfig *self, PyObject *args);
        static PyObject *t_FacetsConfig_setRequireDimCount(t_FacetsConfig *self, PyObject *args);
        static PyObject *t_FacetsConfig_stringToPath(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FacetsConfig_get__dimConfigs(t_FacetsConfig *self, void *data);
        static PyGetSetDef t_FacetsConfig__fields_[] = {
          DECLARE_GET_FIELD(t_FacetsConfig, dimConfigs),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_FacetsConfig__methods_[] = {
          DECLARE_METHOD(t_FacetsConfig, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FacetsConfig, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FacetsConfig, build, METH_VARARGS),
          DECLARE_METHOD(t_FacetsConfig, getDimConfig, METH_O),
          DECLARE_METHOD(t_FacetsConfig, getDimConfigs, METH_NOARGS),
          DECLARE_METHOD(t_FacetsConfig, pathToString, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_FacetsConfig, setHierarchical, METH_VARARGS),
          DECLARE_METHOD(t_FacetsConfig, setIndexFieldName, METH_VARARGS),
          DECLARE_METHOD(t_FacetsConfig, setMultiValued, METH_VARARGS),
          DECLARE_METHOD(t_FacetsConfig, setRequireDimCount, METH_VARARGS),
          DECLARE_METHOD(t_FacetsConfig, stringToPath, METH_O | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(FacetsConfig, t_FacetsConfig, ::java::lang::Object, FacetsConfig, t_FacetsConfig_init_, 0, 0, t_FacetsConfig__fields_, 0, 0);

        void t_FacetsConfig::install(PyObject *module)
        {
          installType(&PY_TYPE(FacetsConfig), module, "FacetsConfig", 0);
          PyDict_SetItemString(PY_TYPE(FacetsConfig).tp_dict, "DimConfig", make_descriptor(&PY_TYPE(FacetsConfig$DimConfig)));
        }

        void t_FacetsConfig::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(FacetsConfig).tp_dict, "class_", make_descriptor(FacetsConfig::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(FacetsConfig).tp_dict, "wrapfn_", make_descriptor(t_FacetsConfig::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(FacetsConfig).tp_dict, "boxfn_", make_descriptor(boxObject));
          env->getClass(FacetsConfig::initializeClass);
          PyDict_SetItemString(PY_TYPE(FacetsConfig).tp_dict, "DEFAULT_DIM_CONFIG", make_descriptor(::org::apache::lucene::facet::t_FacetsConfig$DimConfig::wrap_Object(*FacetsConfig::DEFAULT_DIM_CONFIG)));
          PyDict_SetItemString(PY_TYPE(FacetsConfig).tp_dict, "DEFAULT_INDEX_FIELD_NAME", make_descriptor(j2p(*FacetsConfig::DEFAULT_INDEX_FIELD_NAME)));
        }

        static PyObject *t_FacetsConfig_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, FacetsConfig::initializeClass, 1)))
            return NULL;
          return t_FacetsConfig::wrap_Object(FacetsConfig(((t_FacetsConfig *) arg)->object.this$));
        }
        static PyObject *t_FacetsConfig_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, FacetsConfig::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_FacetsConfig_init_(t_FacetsConfig *self, PyObject *args, PyObject *kwds)
        {
          FacetsConfig object((jobject) NULL);

          INT_CALL(object = FacetsConfig());
          self->object = object;

          return 0;
        }

        static PyObject *t_FacetsConfig_build(t_FacetsConfig *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              ::org::apache::lucene::document::Document a0((jobject) NULL);
              ::org::apache::lucene::document::Document result((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::document::Document::initializeClass, &a0))
              {
                OBJ_CALL(result = self->object.build(a0));
                return ::org::apache::lucene::document::t_Document::wrap_Object(result);
              }
            }
            break;
           case 2:
            {
              ::org::apache::lucene::facet::taxonomy::TaxonomyWriter a0((jobject) NULL);
              ::org::apache::lucene::document::Document a1((jobject) NULL);
              ::org::apache::lucene::document::Document result((jobject) NULL);

              if (!parseArgs(args, "kk", ::org::apache::lucene::facet::taxonomy::TaxonomyWriter::initializeClass, ::org::apache::lucene::document::Document::initializeClass, &a0, &a1))
              {
                OBJ_CALL(result = self->object.build(a0, a1));
                return ::org::apache::lucene::document::t_Document::wrap_Object(result);
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "build", args);
          return NULL;
        }

        static PyObject *t_FacetsConfig_getDimConfig(t_FacetsConfig *self, PyObject *arg)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::facet::FacetsConfig$DimConfig result((jobject) NULL);

          if (!parseArg(arg, "s", &a0))
          {
            OBJ_CALL(result = self->object.getDimConfig(a0));
            return ::org::apache::lucene::facet::t_FacetsConfig$DimConfig::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "getDimConfig", arg);
          return NULL;
        }

        static PyObject *t_FacetsConfig_getDimConfigs(t_FacetsConfig *self)
        {
          ::java::util::Map result((jobject) NULL);
          OBJ_CALL(result = self->object.getDimConfigs());
          return ::java::util::t_Map::wrap_Object(result, &::java::lang::PY_TYPE(String), &::org::apache::lucene::facet::PY_TYPE(FacetsConfig$DimConfig));
        }

        static PyObject *t_FacetsConfig_pathToString(PyTypeObject *type, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              JArray< ::java::lang::String > a0((jobject) NULL);
              ::java::lang::String result((jobject) NULL);

              if (!parseArgs(args, "[s", &a0))
              {
                OBJ_CALL(result = ::org::apache::lucene::facet::FacetsConfig::pathToString(a0));
                return j2p(result);
              }
            }
            break;
           case 2:
            {
              JArray< ::java::lang::String > a0((jobject) NULL);
              jint a1;
              ::java::lang::String result((jobject) NULL);

              if (!parseArgs(args, "[sI", &a0, &a1))
              {
                OBJ_CALL(result = ::org::apache::lucene::facet::FacetsConfig::pathToString(a0, a1));
                return j2p(result);
              }
            }
            {
              ::java::lang::String a0((jobject) NULL);
              JArray< ::java::lang::String > a1((jobject) NULL);
              ::java::lang::String result((jobject) NULL);

              if (!parseArgs(args, "s[s", &a0, &a1))
              {
                OBJ_CALL(result = ::org::apache::lucene::facet::FacetsConfig::pathToString(a0, a1));
                return j2p(result);
              }
            }
          }

          PyErr_SetArgsError(type, "pathToString", args);
          return NULL;
        }

        static PyObject *t_FacetsConfig_setHierarchical(t_FacetsConfig *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          jboolean a1;

          if (!parseArgs(args, "sZ", &a0, &a1))
          {
            OBJ_CALL(self->object.setHierarchical(a0, a1));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setHierarchical", args);
          return NULL;
        }

        static PyObject *t_FacetsConfig_setIndexFieldName(t_FacetsConfig *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::java::lang::String a1((jobject) NULL);

          if (!parseArgs(args, "ss", &a0, &a1))
          {
            OBJ_CALL(self->object.setIndexFieldName(a0, a1));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setIndexFieldName", args);
          return NULL;
        }

        static PyObject *t_FacetsConfig_setMultiValued(t_FacetsConfig *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          jboolean a1;

          if (!parseArgs(args, "sZ", &a0, &a1))
          {
            OBJ_CALL(self->object.setMultiValued(a0, a1));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setMultiValued", args);
          return NULL;
        }

        static PyObject *t_FacetsConfig_setRequireDimCount(t_FacetsConfig *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          jboolean a1;

          if (!parseArgs(args, "sZ", &a0, &a1))
          {
            OBJ_CALL(self->object.setRequireDimCount(a0, a1));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setRequireDimCount", args);
          return NULL;
        }

        static PyObject *t_FacetsConfig_stringToPath(PyTypeObject *type, PyObject *arg)
        {
          ::java::lang::String a0((jobject) NULL);
          JArray< ::java::lang::String > result((jobject) NULL);

          if (!parseArg(arg, "s", &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::facet::FacetsConfig::stringToPath(a0));
            return JArray<jstring>(result.this$).wrap();
          }

          PyErr_SetArgsError(type, "stringToPath", arg);
          return NULL;
        }

        static PyObject *t_FacetsConfig_get__dimConfigs(t_FacetsConfig *self, void *data)
        {
          ::java::util::Map value((jobject) NULL);
          OBJ_CALL(value = self->object.getDimConfigs());
          return ::java::util::t_Map::wrap_Object(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/PostingsConsumer.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "org/apache/lucene/util/FixedBitSet.h"
#include "org/apache/lucene/codecs/TermStats.h"
#include "java/lang/Class.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/index/MergeState.h"
#include "org/apache/lucene/index/DocsEnum.h"
#include "org/apache/lucene/index/FieldInfo$IndexOptions.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {

        ::java::lang::Class *PostingsConsumer::class$ = NULL;
        jmethodID *PostingsConsumer::mids$ = NULL;
        bool PostingsConsumer::live$ = false;

        jclass PostingsConsumer::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/PostingsConsumer");

            mids$ = new jmethodID[max_mid];
            mids$[mid_addPosition_d481f39e] = env->getMethodID(cls, "addPosition", "(ILorg/apache/lucene/util/BytesRef;II)V");
            mids$[mid_finishDoc_54c6a166] = env->getMethodID(cls, "finishDoc", "()V");
            mids$[mid_merge_3a3a1af6] = env->getMethodID(cls, "merge", "(Lorg/apache/lucene/index/MergeState;Lorg/apache/lucene/index/FieldInfo$IndexOptions;Lorg/apache/lucene/index/DocsEnum;Lorg/apache/lucene/util/FixedBitSet;)Lorg/apache/lucene/codecs/TermStats;");
            mids$[mid_startDoc_d8d154a6] = env->getMethodID(cls, "startDoc", "(II)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        void PostingsConsumer::addPosition(jint a0, const ::org::apache::lucene::util::BytesRef & a1, jint a2, jint a3) const
        {
          env->callVoidMethod(this$, mids$[mid_addPosition_d481f39e], a0, a1.this$, a2, a3);
        }

        void PostingsConsumer::finishDoc() const
        {
          env->callVoidMethod(this$, mids$[mid_finishDoc_54c6a166]);
        }

        ::org::apache::lucene::codecs::TermStats PostingsConsumer::merge(const ::org::apache::lucene::index::MergeState & a0, const ::org::apache::lucene::index::FieldInfo$IndexOptions & a1, const ::org::apache::lucene::index::DocsEnum & a2, const ::org::apache::lucene::util::FixedBitSet & a3) const
        {
          return ::org::apache::lucene::codecs::TermStats(env->callObjectMethod(this$, mids$[mid_merge_3a3a1af6], a0.this$, a1.this$, a2.this$, a3.this$));
        }

        void PostingsConsumer::startDoc(jint a0, jint a1) const
        {
          env->callVoidMethod(this$, mids$[mid_startDoc_d8d154a6], a0, a1);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        static PyObject *t_PostingsConsumer_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_PostingsConsumer_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_PostingsConsumer_addPosition(t_PostingsConsumer *self, PyObject *args);
        static PyObject *t_PostingsConsumer_finishDoc(t_PostingsConsumer *self);
        static PyObject *t_PostingsConsumer_merge(t_PostingsConsumer *self, PyObject *args);
        static PyObject *t_PostingsConsumer_startDoc(t_PostingsConsumer *self, PyObject *args);

        static PyMethodDef t_PostingsConsumer__methods_[] = {
          DECLARE_METHOD(t_PostingsConsumer, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PostingsConsumer, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PostingsConsumer, addPosition, METH_VARARGS),
          DECLARE_METHOD(t_PostingsConsumer, finishDoc, METH_NOARGS),
          DECLARE_METHOD(t_PostingsConsumer, merge, METH_VARARGS),
          DECLARE_METHOD(t_PostingsConsumer, startDoc, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(PostingsConsumer, t_PostingsConsumer, ::java::lang::Object, PostingsConsumer, abstract_init, 0, 0, 0, 0, 0);

        void t_PostingsConsumer::install(PyObject *module)
        {
          installType(&PY_TYPE(PostingsConsumer), module, "PostingsConsumer", 0);
        }

        void t_PostingsConsumer::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(PostingsConsumer).tp_dict, "class_", make_descriptor(PostingsConsumer::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(PostingsConsumer).tp_dict, "wrapfn_", make_descriptor(t_PostingsConsumer::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(PostingsConsumer).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_PostingsConsumer_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, PostingsConsumer::initializeClass, 1)))
            return NULL;
          return t_PostingsConsumer::wrap_Object(PostingsConsumer(((t_PostingsConsumer *) arg)->object.this$));
        }
        static PyObject *t_PostingsConsumer_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, PostingsConsumer::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_PostingsConsumer_addPosition(t_PostingsConsumer *self, PyObject *args)
        {
          jint a0;
          ::org::apache::lucene::util::BytesRef a1((jobject) NULL);
          jint a2;
          jint a3;

          if (!parseArgs(args, "IkII", ::org::apache::lucene::util::BytesRef::initializeClass, &a0, &a1, &a2, &a3))
          {
            OBJ_CALL(self->object.addPosition(a0, a1, a2, a3));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "addPosition", args);
          return NULL;
        }

        static PyObject *t_PostingsConsumer_finishDoc(t_PostingsConsumer *self)
        {
          OBJ_CALL(self->object.finishDoc());
          Py_RETURN_NONE;
        }

        static PyObject *t_PostingsConsumer_merge(t_PostingsConsumer *self, PyObject *args)
        {
          ::org::apache::lucene::index::MergeState a0((jobject) NULL);
          ::org::apache::lucene::index::FieldInfo$IndexOptions a1((jobject) NULL);
          PyTypeObject **p1;
          ::org::apache::lucene::index::DocsEnum a2((jobject) NULL);
          ::org::apache::lucene::util::FixedBitSet a3((jobject) NULL);
          ::org::apache::lucene::codecs::TermStats result((jobject) NULL);

          if (!parseArgs(args, "kKkk", ::org::apache::lucene::index::MergeState::initializeClass, ::org::apache::lucene::index::FieldInfo$IndexOptions::initializeClass, ::org::apache::lucene::index::DocsEnum::initializeClass, ::org::apache::lucene::util::FixedBitSet::initializeClass, &a0, &a1, &p1, ::org::apache::lucene::index::t_FieldInfo$IndexOptions::parameters_, &a2, &a3))
          {
            OBJ_CALL(result = self->object.merge(a0, a1, a2, a3));
            return ::org::apache::lucene::codecs::t_TermStats::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "merge", args);
          return NULL;
        }

        static PyObject *t_PostingsConsumer_startDoc(t_PostingsConsumer *self, PyObject *args)
        {
          jint a0;
          jint a1;

          if (!parseArgs(args, "II", &a0, &a1))
          {
            OBJ_CALL(self->object.startDoc(a0, a1));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "startDoc", args);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/FieldInfosWriter.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/store/IOContext.h"
#include "org/apache/lucene/store/Directory.h"
#include "java/lang/String.h"
#include "org/apache/lucene/index/FieldInfos.h"
#include "java/io/IOException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {

        ::java::lang::Class *FieldInfosWriter::class$ = NULL;
        jmethodID *FieldInfosWriter::mids$ = NULL;
        bool FieldInfosWriter::live$ = false;

        jclass FieldInfosWriter::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/FieldInfosWriter");

            mids$ = new jmethodID[max_mid];
            mids$[mid_write_e0613aa0] = env->getMethodID(cls, "write", "(Lorg/apache/lucene/store/Directory;Ljava/lang/String;Ljava/lang/String;Lorg/apache/lucene/index/FieldInfos;Lorg/apache/lucene/store/IOContext;)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        void FieldInfosWriter::write(const ::org::apache::lucene::store::Directory & a0, const ::java::lang::String & a1, const ::java::lang::String & a2, const ::org::apache::lucene::index::FieldInfos & a3, const ::org::apache::lucene::store::IOContext & a4) const
        {
          env->callVoidMethod(this$, mids$[mid_write_e0613aa0], a0.this$, a1.this$, a2.this$, a3.this$, a4.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        static PyObject *t_FieldInfosWriter_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FieldInfosWriter_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FieldInfosWriter_write(t_FieldInfosWriter *self, PyObject *args);

        static PyMethodDef t_FieldInfosWriter__methods_[] = {
          DECLARE_METHOD(t_FieldInfosWriter, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FieldInfosWriter, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FieldInfosWriter, write, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(FieldInfosWriter, t_FieldInfosWriter, ::java::lang::Object, FieldInfosWriter, abstract_init, 0, 0, 0, 0, 0);

        void t_FieldInfosWriter::install(PyObject *module)
        {
          installType(&PY_TYPE(FieldInfosWriter), module, "FieldInfosWriter", 0);
        }

        void t_FieldInfosWriter::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(FieldInfosWriter).tp_dict, "class_", make_descriptor(FieldInfosWriter::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(FieldInfosWriter).tp_dict, "wrapfn_", make_descriptor(t_FieldInfosWriter::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(FieldInfosWriter).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_FieldInfosWriter_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, FieldInfosWriter::initializeClass, 1)))
            return NULL;
          return t_FieldInfosWriter::wrap_Object(FieldInfosWriter(((t_FieldInfosWriter *) arg)->object.this$));
        }
        static PyObject *t_FieldInfosWriter_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, FieldInfosWriter::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_FieldInfosWriter_write(t_FieldInfosWriter *self, PyObject *args)
        {
          ::org::apache::lucene::store::Directory a0((jobject) NULL);
          ::java::lang::String a1((jobject) NULL);
          ::java::lang::String a2((jobject) NULL);
          ::org::apache::lucene::index::FieldInfos a3((jobject) NULL);
          ::org::apache::lucene::store::IOContext a4((jobject) NULL);

          if (!parseArgs(args, "ksskk", ::org::apache::lucene::store::Directory::initializeClass, ::org::apache::lucene::index::FieldInfos::initializeClass, ::org::apache::lucene::store::IOContext::initializeClass, &a0, &a1, &a2, &a3, &a4))
          {
            OBJ_CALL(self->object.write(a0, a1, a2, a3, a4));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "write", args);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/tokenattributes/CharTermAttributeImpl.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "java/lang/Class.h"
#include "java/lang/Object.h"
#include "org/apache/lucene/analysis/tokenattributes/TermToBytesRefAttribute.h"
#include "org/apache/lucene/analysis/tokenattributes/CharTermAttribute.h"
#include "java/lang/CharSequence.h"
#include "java/lang/String.h"
#include "org/apache/lucene/util/AttributeReflector.h"
#include "java/lang/StringBuilder.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace tokenattributes {

          ::java::lang::Class *CharTermAttributeImpl::class$ = NULL;
          jmethodID *CharTermAttributeImpl::mids$ = NULL;
          bool CharTermAttributeImpl::live$ = false;

          jclass CharTermAttributeImpl::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/tokenattributes/CharTermAttributeImpl");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_append_2b3c6943] = env->getMethodID(cls, "append", "(Lorg/apache/lucene/analysis/tokenattributes/CharTermAttribute;)Lorg/apache/lucene/analysis/tokenattributes/CharTermAttribute;");
              mids$[mid_append_8fff6b0d] = env->getMethodID(cls, "append", "(Ljava/lang/StringBuilder;)Lorg/apache/lucene/analysis/tokenattributes/CharTermAttribute;");
              mids$[mid_append_ec8fc27b] = env->getMethodID(cls, "append", "(C)Lorg/apache/lucene/analysis/tokenattributes/CharTermAttribute;");
              mids$[mid_append_950755e3] = env->getMethodID(cls, "append", "(Ljava/lang/CharSequence;)Lorg/apache/lucene/analysis/tokenattributes/CharTermAttribute;");
              mids$[mid_append_727d3f8d] = env->getMethodID(cls, "append", "(Ljava/lang/String;)Lorg/apache/lucene/analysis/tokenattributes/CharTermAttribute;");
              mids$[mid_append_6505d5ab] = env->getMethodID(cls, "append", "(Ljava/lang/CharSequence;II)Lorg/apache/lucene/analysis/tokenattributes/CharTermAttribute;");
              mids$[mid_buffer_dab10e7f] = env->getMethodID(cls, "buffer", "()[C");
              mids$[mid_charAt_39c7bd29] = env->getMethodID(cls, "charAt", "(I)C");
              mids$[mid_clear_54c6a166] = env->getMethodID(cls, "clear", "()V");
              mids$[mid_clone_c3b245d5] = env->getMethodID(cls, "clone", "()Lorg/apache/lucene/analysis/tokenattributes/CharTermAttributeImpl;");
              mids$[mid_copyBuffer_6f0bb356] = env->getMethodID(cls, "copyBuffer", "([CII)V");
              mids$[mid_copyTo_d86caa9f] = env->getMethodID(cls, "copyTo", "(Lorg/apache/lucene/util/AttributeImpl;)V");
              mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
              mids$[mid_fillBytesRef_54c6a166] = env->getMethodID(cls, "fillBytesRef", "()V");
              mids$[mid_getBytesRef_4ae19461] = env->getMethodID(cls, "getBytesRef", "()Lorg/apache/lucene/util/BytesRef;");
              mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
              mids$[mid_length_54c6a179] = env->getMethodID(cls, "length", "()I");
              mids$[mid_reflectWith_5f3f5102] = env->getMethodID(cls, "reflectWith", "(Lorg/apache/lucene/util/AttributeReflector;)V");
              mids$[mid_resizeBuffer_b4292e99] = env->getMethodID(cls, "resizeBuffer", "(I)[C");
              mids$[mid_setEmpty_211a9257] = env->getMethodID(cls, "setEmpty", "()Lorg/apache/lucene/analysis/tokenattributes/CharTermAttribute;");
              mids$[mid_setLength_da4913e5] = env->getMethodID(cls, "setLength", "(I)Lorg/apache/lucene/analysis/tokenattributes/CharTermAttribute;");
              mids$[mid_subSequence_f88dfd57] = env->getMethodID(cls, "subSequence", "(II)Ljava/lang/CharSequence;");
              mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          CharTermAttributeImpl::CharTermAttributeImpl() : ::org::apache::lucene::util::AttributeImpl(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          ::org::apache::lucene::analysis::tokenattributes::CharTermAttribute CharTermAttributeImpl::append(const ::org::apache::lucene::analysis::tokenattributes::CharTermAttribute & a0) const
          {
            return ::org::apache::lucene::analysis::tokenattributes::CharTermAttribute(env->callObjectMethod(this$, mids$[mid_append_2b3c6943], a0.this$));
          }

          ::org::apache::lucene::analysis::tokenattributes::CharTermAttribute CharTermAttributeImpl::append(const ::java::lang::StringBuilder & a0) const
          {
            return ::org::apache::lucene::analysis::tokenattributes::CharTermAttribute(env->callObjectMethod(this$, mids$[mid_append_8fff6b0d], a0.this$));
          }

          ::org::apache::lucene::analysis::tokenattributes::CharTermAttribute CharTermAttributeImpl::append(jchar a0) const
          {
            return ::org::apache::lucene::analysis::tokenattributes::CharTermAttribute(env->callObjectMethod(this$, mids$[mid_append_ec8fc27b], a0));
          }

          ::org::apache::lucene::analysis::tokenattributes::CharTermAttribute CharTermAttributeImpl::append(const ::java::lang::CharSequence & a0) const
          {
            return ::org::apache::lucene::analysis::tokenattributes::CharTermAttribute(env->callObjectMethod(this$, mids$[mid_append_950755e3], a0.this$));
          }

          ::org::apache::lucene::analysis::tokenattributes::CharTermAttribute CharTermAttributeImpl::append(const ::java::lang::String & a0) const
          {
            return ::org::apache::lucene::analysis::tokenattributes::CharTermAttribute(env->callObjectMethod(this$, mids$[mid_append_727d3f8d], a0.this$));
          }

          ::org::apache::lucene::analysis::tokenattributes::CharTermAttribute CharTermAttributeImpl::append(const ::java::lang::CharSequence & a0, jint a1, jint a2) const
          {
            return ::org::apache::lucene::analysis::tokenattributes::CharTermAttribute(env->callObjectMethod(this$, mids$[mid_append_6505d5ab], a0.this$, a1, a2));
          }

          JArray< jchar > CharTermAttributeImpl::buffer() const
          {
            return JArray< jchar >(env->callObjectMethod(this$, mids$[mid_buffer_dab10e7f]));
          }

          jchar CharTermAttributeImpl::charAt(jint a0) const
          {
            return env->callCharMethod(this$, mids$[mid_charAt_39c7bd29], a0);
          }

          void CharTermAttributeImpl::clear() const
          {
            env->callVoidMethod(this$, mids$[mid_clear_54c6a166]);
          }

          CharTermAttributeImpl CharTermAttributeImpl::clone() const
          {
            return CharTermAttributeImpl(env->callObjectMethod(this$, mids$[mid_clone_c3b245d5]));
          }

          void CharTermAttributeImpl::copyBuffer(const JArray< jchar > & a0, jint a1, jint a2) const
          {
            env->callVoidMethod(this$, mids$[mid_copyBuffer_6f0bb356], a0.this$, a1, a2);
          }

          void CharTermAttributeImpl::copyTo(const ::org::apache::lucene::util::AttributeImpl & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_copyTo_d86caa9f], a0.this$);
          }

          jboolean CharTermAttributeImpl::equals(const ::java::lang::Object & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
          }

          void CharTermAttributeImpl::fillBytesRef() const
          {
            env->callVoidMethod(this$, mids$[mid_fillBytesRef_54c6a166]);
          }

          ::org::apache::lucene::util::BytesRef CharTermAttributeImpl::getBytesRef() const
          {
            return ::org::apache::lucene::util::BytesRef(env->callObjectMethod(this$, mids$[mid_getBytesRef_4ae19461]));
          }

          jint CharTermAttributeImpl::hashCode() const
          {
            return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
          }

          jint CharTermAttributeImpl::length() const
          {
            return env->callIntMethod(this$, mids$[mid_length_54c6a179]);
          }

          void CharTermAttributeImpl::reflectWith(const ::org::apache::lucene::util::AttributeReflector & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_reflectWith_5f3f5102], a0.this$);
          }

          JArray< jchar > CharTermAttributeImpl::resizeBuffer(jint a0) const
          {
            return JArray< jchar >(env->callObjectMethod(this$, mids$[mid_resizeBuffer_b4292e99], a0));
          }

          ::org::apache::lucene::analysis::tokenattributes::CharTermAttribute CharTermAttributeImpl::setEmpty() const
          {
            return ::org::apache::lucene::analysis::tokenattributes::CharTermAttribute(env->callObjectMethod(this$, mids$[mid_setEmpty_211a9257]));
          }

          ::org::apache::lucene::analysis::tokenattributes::CharTermAttribute CharTermAttributeImpl::setLength(jint a0) const
          {
            return ::org::apache::lucene::analysis::tokenattributes::CharTermAttribute(env->callObjectMethod(this$, mids$[mid_setLength_da4913e5], a0));
          }

          ::java::lang::CharSequence CharTermAttributeImpl::subSequence(jint a0, jint a1) const
          {
            return ::java::lang::CharSequence(env->callObjectMethod(this$, mids$[mid_subSequence_f88dfd57], a0, a1));
          }

          ::java::lang::String CharTermAttributeImpl::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace tokenattributes {
          static PyObject *t_CharTermAttributeImpl_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_CharTermAttributeImpl_instance_(PyTypeObject *type, PyObject *arg);
          static int t_CharTermAttributeImpl_init_(t_CharTermAttributeImpl *self, PyObject *args, PyObject *kwds);
          static PyObject *t_CharTermAttributeImpl_append(t_CharTermAttributeImpl *self, PyObject *args);
          static PyObject *t_CharTermAttributeImpl_buffer(t_CharTermAttributeImpl *self);
          static PyObject *t_CharTermAttributeImpl_charAt(t_CharTermAttributeImpl *self, PyObject *arg);
          static PyObject *t_CharTermAttributeImpl_clear(t_CharTermAttributeImpl *self, PyObject *args);
          static PyObject *t_CharTermAttributeImpl_clone(t_CharTermAttributeImpl *self, PyObject *args);
          static PyObject *t_CharTermAttributeImpl_copyBuffer(t_CharTermAttributeImpl *self, PyObject *args);
          static PyObject *t_CharTermAttributeImpl_copyTo(t_CharTermAttributeImpl *self, PyObject *args);
          static PyObject *t_CharTermAttributeImpl_equals(t_CharTermAttributeImpl *self, PyObject *args);
          static PyObject *t_CharTermAttributeImpl_fillBytesRef(t_CharTermAttributeImpl *self);
          static PyObject *t_CharTermAttributeImpl_getBytesRef(t_CharTermAttributeImpl *self);
          static PyObject *t_CharTermAttributeImpl_hashCode(t_CharTermAttributeImpl *self, PyObject *args);
          static PyObject *t_CharTermAttributeImpl_length(t_CharTermAttributeImpl *self);
          static PyObject *t_CharTermAttributeImpl_reflectWith(t_CharTermAttributeImpl *self, PyObject *args);
          static PyObject *t_CharTermAttributeImpl_resizeBuffer(t_CharTermAttributeImpl *self, PyObject *arg);
          static PyObject *t_CharTermAttributeImpl_setEmpty(t_CharTermAttributeImpl *self);
          static PyObject *t_CharTermAttributeImpl_setLength(t_CharTermAttributeImpl *self, PyObject *arg);
          static PyObject *t_CharTermAttributeImpl_subSequence(t_CharTermAttributeImpl *self, PyObject *args);
          static PyObject *t_CharTermAttributeImpl_toString(t_CharTermAttributeImpl *self, PyObject *args);
          static PyObject *t_CharTermAttributeImpl_get__bytesRef(t_CharTermAttributeImpl *self, void *data);
          static PyGetSetDef t_CharTermAttributeImpl__fields_[] = {
            DECLARE_GET_FIELD(t_CharTermAttributeImpl, bytesRef),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_CharTermAttributeImpl__methods_[] = {
            DECLARE_METHOD(t_CharTermAttributeImpl, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CharTermAttributeImpl, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CharTermAttributeImpl, append, METH_VARARGS),
            DECLARE_METHOD(t_CharTermAttributeImpl, buffer, METH_NOARGS),
            DECLARE_METHOD(t_CharTermAttributeImpl, charAt, METH_O),
            DECLARE_METHOD(t_CharTermAttributeImpl, clear, METH_VARARGS),
            DECLARE_METHOD(t_CharTermAttributeImpl, clone, METH_VARARGS),
            DECLARE_METHOD(t_CharTermAttributeImpl, copyBuffer, METH_VARARGS),
            DECLARE_METHOD(t_CharTermAttributeImpl, copyTo, METH_VARARGS),
            DECLARE_METHOD(t_CharTermAttributeImpl, equals, METH_VARARGS),
            DECLARE_METHOD(t_CharTermAttributeImpl, fillBytesRef, METH_NOARGS),
            DECLARE_METHOD(t_CharTermAttributeImpl, getBytesRef, METH_NOARGS),
            DECLARE_METHOD(t_CharTermAttributeImpl, hashCode, METH_VARARGS),
            DECLARE_METHOD(t_CharTermAttributeImpl, length, METH_NOARGS),
            DECLARE_METHOD(t_CharTermAttributeImpl, reflectWith, METH_VARARGS),
            DECLARE_METHOD(t_CharTermAttributeImpl, resizeBuffer, METH_O),
            DECLARE_METHOD(t_CharTermAttributeImpl, setEmpty, METH_NOARGS),
            DECLARE_METHOD(t_CharTermAttributeImpl, setLength, METH_O),
            DECLARE_METHOD(t_CharTermAttributeImpl, subSequence, METH_VARARGS),
            DECLARE_METHOD(t_CharTermAttributeImpl, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(CharTermAttributeImpl, t_CharTermAttributeImpl, ::org::apache::lucene::util::AttributeImpl, CharTermAttributeImpl, t_CharTermAttributeImpl_init_, 0, 0, t_CharTermAttributeImpl__fields_, 0, 0);

          void t_CharTermAttributeImpl::install(PyObject *module)
          {
            installType(&PY_TYPE(CharTermAttributeImpl), module, "CharTermAttributeImpl", 0);
          }

          void t_CharTermAttributeImpl::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(CharTermAttributeImpl).tp_dict, "class_", make_descriptor(CharTermAttributeImpl::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(CharTermAttributeImpl).tp_dict, "wrapfn_", make_descriptor(t_CharTermAttributeImpl::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(CharTermAttributeImpl).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_CharTermAttributeImpl_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, CharTermAttributeImpl::initializeClass, 1)))
              return NULL;
            return t_CharTermAttributeImpl::wrap_Object(CharTermAttributeImpl(((t_CharTermAttributeImpl *) arg)->object.this$));
          }
          static PyObject *t_CharTermAttributeImpl_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, CharTermAttributeImpl::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_CharTermAttributeImpl_init_(t_CharTermAttributeImpl *self, PyObject *args, PyObject *kwds)
          {
            CharTermAttributeImpl object((jobject) NULL);

            INT_CALL(object = CharTermAttributeImpl());
            self->object = object;

            return 0;
          }

          static PyObject *t_CharTermAttributeImpl_append(t_CharTermAttributeImpl *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::org::apache::lucene::analysis::tokenattributes::CharTermAttribute a0((jobject) NULL);
                ::org::apache::lucene::analysis::tokenattributes::CharTermAttribute result((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::analysis::tokenattributes::CharTermAttribute::initializeClass, &a0))
                {
                  OBJ_CALL(result = self->object.append(a0));
                  return ::org::apache::lucene::analysis::tokenattributes::t_CharTermAttribute::wrap_Object(result);
                }
              }
              {
                ::java::lang::StringBuilder a0((jobject) NULL);
                ::org::apache::lucene::analysis::tokenattributes::CharTermAttribute result((jobject) NULL);

                if (!parseArgs(args, "k", ::java::lang::StringBuilder::initializeClass, &a0))
                {
                  OBJ_CALL(result = self->object.append(a0));
                  return ::org::apache::lucene::analysis::tokenattributes::t_CharTermAttribute::wrap_Object(result);
                }
              }
              {
                jchar a0;
                ::org::apache::lucene::analysis::tokenattributes::CharTermAttribute result((jobject) NULL);

                if (!parseArgs(args, "C", &a0))
                {
                  OBJ_CALL(result = self->object.append(a0));
                  return ::org::apache::lucene::analysis::tokenattributes::t_CharTermAttribute::wrap_Object(result);
                }
              }
              {
                ::java::lang::CharSequence a0((jobject) NULL);
                ::org::apache::lucene::analysis::tokenattributes::CharTermAttribute result((jobject) NULL);

                if (!parseArgs(args, "O", &::java::lang::PY_TYPE(CharSequence), &a0))
                {
                  OBJ_CALL(result = self->object.append(a0));
                  return ::org::apache::lucene::analysis::tokenattributes::t_CharTermAttribute::wrap_Object(result);
                }
              }
              {
                ::java::lang::String a0((jobject) NULL);
                ::org::apache::lucene::analysis::tokenattributes::CharTermAttribute result((jobject) NULL);

                if (!parseArgs(args, "s", &a0))
                {
                  OBJ_CALL(result = self->object.append(a0));
                  return ::org::apache::lucene::analysis::tokenattributes::t_CharTermAttribute::wrap_Object(result);
                }
              }
              break;
             case 3:
              {
                ::java::lang::CharSequence a0((jobject) NULL);
                jint a1;
                jint a2;
                ::org::apache::lucene::analysis::tokenattributes::CharTermAttribute result((jobject) NULL);

                if (!parseArgs(args, "OII", &::java::lang::PY_TYPE(CharSequence), &a0, &a1, &a2))
                {
                  OBJ_CALL(result = self->object.append(a0, a1, a2));
                  return ::org::apache::lucene::analysis::tokenattributes::t_CharTermAttribute::wrap_Object(result);
                }
              }
            }

            PyErr_SetArgsError((PyObject *) self, "append", args);
            return NULL;
          }

          static PyObject *t_CharTermAttributeImpl_buffer(t_CharTermAttributeImpl *self)
          {
            JArray< jchar > result((jobject) NULL);
            OBJ_CALL(result = self->object.buffer());
            return result.wrap();
          }

          static PyObject *t_CharTermAttributeImpl_charAt(t_CharTermAttributeImpl *self, PyObject *arg)
          {
            jint a0;
            jchar result;

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(result = self->object.charAt(a0));
              return PyUnicode_FromUnicode((Py_UNICODE *) &result, 1);
            }

            PyErr_SetArgsError((PyObject *) self, "charAt", arg);
            return NULL;
          }

          static PyObject *t_CharTermAttributeImpl_clear(t_CharTermAttributeImpl *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.clear());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(CharTermAttributeImpl), (PyObject *) self, "clear", args, 2);
          }

          static PyObject *t_CharTermAttributeImpl_clone(t_CharTermAttributeImpl *self, PyObject *args)
          {
            CharTermAttributeImpl result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.clone());
              return t_CharTermAttributeImpl::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(CharTermAttributeImpl), (PyObject *) self, "clone", args, 2);
          }

          static PyObject *t_CharTermAttributeImpl_copyBuffer(t_CharTermAttributeImpl *self, PyObject *args)
          {
            JArray< jchar > a0((jobject) NULL);
            jint a1;
            jint a2;

            if (!parseArgs(args, "[CII", &a0, &a1, &a2))
            {
              OBJ_CALL(self->object.copyBuffer(a0, a1, a2));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "copyBuffer", args);
            return NULL;
          }

          static PyObject *t_CharTermAttributeImpl_copyTo(t_CharTermAttributeImpl *self, PyObject *args)
          {
            ::org::apache::lucene::util::AttributeImpl a0((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::util::AttributeImpl::initializeClass, &a0))
            {
              OBJ_CALL(self->object.copyTo(a0));
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(CharTermAttributeImpl), (PyObject *) self, "copyTo", args, 2);
          }

          static PyObject *t_CharTermAttributeImpl_equals(t_CharTermAttributeImpl *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            jboolean result;

            if (!parseArgs(args, "o", &a0))
            {
              OBJ_CALL(result = self->object.equals(a0));
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(CharTermAttributeImpl), (PyObject *) self, "equals", args, 2);
          }

          static PyObject *t_CharTermAttributeImpl_fillBytesRef(t_CharTermAttributeImpl *self)
          {
            OBJ_CALL(self->object.fillBytesRef());
            Py_RETURN_NONE;
          }

          static PyObject *t_CharTermAttributeImpl_getBytesRef(t_CharTermAttributeImpl *self)
          {
            ::org::apache::lucene::util::BytesRef result((jobject) NULL);
            OBJ_CALL(result = self->object.getBytesRef());
            return ::org::apache::lucene::util::t_BytesRef::wrap_Object(result);
          }

          static PyObject *t_CharTermAttributeImpl_hashCode(t_CharTermAttributeImpl *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.hashCode());
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(CharTermAttributeImpl), (PyObject *) self, "hashCode", args, 2);
          }

          static PyObject *t_CharTermAttributeImpl_length(t_CharTermAttributeImpl *self)
          {
            jint result;
            OBJ_CALL(result = self->object.length());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_CharTermAttributeImpl_reflectWith(t_CharTermAttributeImpl *self, PyObject *args)
          {
            ::org::apache::lucene::util::AttributeReflector a0((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::util::AttributeReflector::initializeClass, &a0))
            {
              OBJ_CALL(self->object.reflectWith(a0));
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(CharTermAttributeImpl), (PyObject *) self, "reflectWith", args, 2);
          }

          static PyObject *t_CharTermAttributeImpl_resizeBuffer(t_CharTermAttributeImpl *self, PyObject *arg)
          {
            jint a0;
            JArray< jchar > result((jobject) NULL);

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(result = self->object.resizeBuffer(a0));
              return result.wrap();
            }

            PyErr_SetArgsError((PyObject *) self, "resizeBuffer", arg);
            return NULL;
          }

          static PyObject *t_CharTermAttributeImpl_setEmpty(t_CharTermAttributeImpl *self)
          {
            ::org::apache::lucene::analysis::tokenattributes::CharTermAttribute result((jobject) NULL);
            OBJ_CALL(result = self->object.setEmpty());
            return ::org::apache::lucene::analysis::tokenattributes::t_CharTermAttribute::wrap_Object(result);
          }

          static PyObject *t_CharTermAttributeImpl_setLength(t_CharTermAttributeImpl *self, PyObject *arg)
          {
            jint a0;
            ::org::apache::lucene::analysis::tokenattributes::CharTermAttribute result((jobject) NULL);

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(result = self->object.setLength(a0));
              return ::org::apache::lucene::analysis::tokenattributes::t_CharTermAttribute::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "setLength", arg);
            return NULL;
          }

          static PyObject *t_CharTermAttributeImpl_subSequence(t_CharTermAttributeImpl *self, PyObject *args)
          {
            jint a0;
            jint a1;
            ::java::lang::CharSequence result((jobject) NULL);

            if (!parseArgs(args, "II", &a0, &a1))
            {
              OBJ_CALL(result = self->object.subSequence(a0, a1));
              return ::java::lang::t_CharSequence::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "subSequence", args);
            return NULL;
          }

          static PyObject *t_CharTermAttributeImpl_toString(t_CharTermAttributeImpl *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(&PY_TYPE(CharTermAttributeImpl), (PyObject *) self, "toString", args, 2);
          }

          static PyObject *t_CharTermAttributeImpl_get__bytesRef(t_CharTermAttributeImpl *self, void *data)
          {
            ::org::apache::lucene::util::BytesRef value((jobject) NULL);
            OBJ_CALL(value = self->object.getBytesRef());
            return ::org::apache::lucene::util::t_BytesRef::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/surround/query/BasicQueryFactory.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/queryparser/surround/query/TooManyBasicQueries.h"
#include "org/apache/lucene/search/spans/SpanTermQuery.h"
#include "java/lang/String.h"
#include "org/apache/lucene/search/TermQuery.h"
#include "org/apache/lucene/index/Term.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace surround {
          namespace query {

            ::java::lang::Class *BasicQueryFactory::class$ = NULL;
            jmethodID *BasicQueryFactory::mids$ = NULL;
            bool BasicQueryFactory::live$ = false;

            jclass BasicQueryFactory::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/surround/query/BasicQueryFactory");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
                mids$[mid_init$_39c7bd3c] = env->getMethodID(cls, "<init>", "(I)V");
                mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
                mids$[mid_getMaxBasicQueries_54c6a179] = env->getMethodID(cls, "getMaxBasicQueries", "()I");
                mids$[mid_getNrQueriesMade_54c6a179] = env->getMethodID(cls, "getNrQueriesMade", "()I");
                mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
                mids$[mid_newSpanTermQuery_538d14f1] = env->getMethodID(cls, "newSpanTermQuery", "(Lorg/apache/lucene/index/Term;)Lorg/apache/lucene/search/spans/SpanTermQuery;");
                mids$[mid_newTermQuery_ab5e03f9] = env->getMethodID(cls, "newTermQuery", "(Lorg/apache/lucene/index/Term;)Lorg/apache/lucene/search/TermQuery;");
                mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");
                mids$[mid_checkMax_54c6a166] = env->getMethodID(cls, "checkMax", "()V");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            BasicQueryFactory::BasicQueryFactory() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

            BasicQueryFactory::BasicQueryFactory(jint a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_39c7bd3c, a0)) {}

            jboolean BasicQueryFactory::equals(const ::java::lang::Object & a0) const
            {
              return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
            }

            jint BasicQueryFactory::getMaxBasicQueries() const
            {
              return env->callIntMethod(this$, mids$[mid_getMaxBasicQueries_54c6a179]);
            }

            jint BasicQueryFactory::getNrQueriesMade() const
            {
              return env->callIntMethod(this$, mids$[mid_getNrQueriesMade_54c6a179]);
            }

            jint BasicQueryFactory::hashCode() const
            {
              return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
            }

            ::org::apache::lucene::search::spans::SpanTermQuery BasicQueryFactory::newSpanTermQuery(const ::org::apache::lucene::index::Term & a0) const
            {
              return ::org::apache::lucene::search::spans::SpanTermQuery(env->callObjectMethod(this$, mids$[mid_newSpanTermQuery_538d14f1], a0.this$));
            }

            ::org::apache::lucene::search::TermQuery BasicQueryFactory::newTermQuery(const ::org::apache::lucene::index::Term & a0) const
            {
              return ::org::apache::lucene::search::TermQuery(env->callObjectMethod(this$, mids$[mid_newTermQuery_ab5e03f9], a0.this$));
            }

            ::java::lang::String BasicQueryFactory::toString() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace surround {
          namespace query {
            static PyObject *t_BasicQueryFactory_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_BasicQueryFactory_instance_(PyTypeObject *type, PyObject *arg);
            static int t_BasicQueryFactory_init_(t_BasicQueryFactory *self, PyObject *args, PyObject *kwds);
            static PyObject *t_BasicQueryFactory_equals(t_BasicQueryFactory *self, PyObject *args);
            static PyObject *t_BasicQueryFactory_getMaxBasicQueries(t_BasicQueryFactory *self);
            static PyObject *t_BasicQueryFactory_getNrQueriesMade(t_BasicQueryFactory *self);
            static PyObject *t_BasicQueryFactory_hashCode(t_BasicQueryFactory *self, PyObject *args);
            static PyObject *t_BasicQueryFactory_newSpanTermQuery(t_BasicQueryFactory *self, PyObject *arg);
            static PyObject *t_BasicQueryFactory_newTermQuery(t_BasicQueryFactory *self, PyObject *arg);
            static PyObject *t_BasicQueryFactory_toString(t_BasicQueryFactory *self, PyObject *args);
            static PyObject *t_BasicQueryFactory_get__maxBasicQueries(t_BasicQueryFactory *self, void *data);
            static PyObject *t_BasicQueryFactory_get__nrQueriesMade(t_BasicQueryFactory *self, void *data);
            static PyGetSetDef t_BasicQueryFactory__fields_[] = {
              DECLARE_GET_FIELD(t_BasicQueryFactory, maxBasicQueries),
              DECLARE_GET_FIELD(t_BasicQueryFactory, nrQueriesMade),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_BasicQueryFactory__methods_[] = {
              DECLARE_METHOD(t_BasicQueryFactory, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_BasicQueryFactory, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_BasicQueryFactory, equals, METH_VARARGS),
              DECLARE_METHOD(t_BasicQueryFactory, getMaxBasicQueries, METH_NOARGS),
              DECLARE_METHOD(t_BasicQueryFactory, getNrQueriesMade, METH_NOARGS),
              DECLARE_METHOD(t_BasicQueryFactory, hashCode, METH_VARARGS),
              DECLARE_METHOD(t_BasicQueryFactory, newSpanTermQuery, METH_O),
              DECLARE_METHOD(t_BasicQueryFactory, newTermQuery, METH_O),
              DECLARE_METHOD(t_BasicQueryFactory, toString, METH_VARARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(BasicQueryFactory, t_BasicQueryFactory, ::java::lang::Object, BasicQueryFactory, t_BasicQueryFactory_init_, 0, 0, t_BasicQueryFactory__fields_, 0, 0);

            void t_BasicQueryFactory::install(PyObject *module)
            {
              installType(&PY_TYPE(BasicQueryFactory), module, "BasicQueryFactory", 0);
            }

            void t_BasicQueryFactory::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(BasicQueryFactory).tp_dict, "class_", make_descriptor(BasicQueryFactory::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(BasicQueryFactory).tp_dict, "wrapfn_", make_descriptor(t_BasicQueryFactory::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(BasicQueryFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_BasicQueryFactory_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, BasicQueryFactory::initializeClass, 1)))
                return NULL;
              return t_BasicQueryFactory::wrap_Object(BasicQueryFactory(((t_BasicQueryFactory *) arg)->object.this$));
            }
            static PyObject *t_BasicQueryFactory_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, BasicQueryFactory::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_BasicQueryFactory_init_(t_BasicQueryFactory *self, PyObject *args, PyObject *kwds)
            {
              switch (PyTuple_GET_SIZE(args)) {
               case 0:
                {
                  BasicQueryFactory object((jobject) NULL);

                  INT_CALL(object = BasicQueryFactory());
                  self->object = object;
                  break;
                }
                goto err;
               case 1:
                {
                  jint a0;
                  BasicQueryFactory object((jobject) NULL);

                  if (!parseArgs(args, "I", &a0))
                  {
                    INT_CALL(object = BasicQueryFactory(a0));
                    self->object = object;
                    break;
                  }
                }
               default:
               err:
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_BasicQueryFactory_equals(t_BasicQueryFactory *self, PyObject *args)
            {
              ::java::lang::Object a0((jobject) NULL);
              jboolean result;

              if (!parseArgs(args, "o", &a0))
              {
                OBJ_CALL(result = self->object.equals(a0));
                Py_RETURN_BOOL(result);
              }

              return callSuper(&PY_TYPE(BasicQueryFactory), (PyObject *) self, "equals", args, 2);
            }

            static PyObject *t_BasicQueryFactory_getMaxBasicQueries(t_BasicQueryFactory *self)
            {
              jint result;
              OBJ_CALL(result = self->object.getMaxBasicQueries());
              return PyInt_FromLong((long) result);
            }

            static PyObject *t_BasicQueryFactory_getNrQueriesMade(t_BasicQueryFactory *self)
            {
              jint result;
              OBJ_CALL(result = self->object.getNrQueriesMade());
              return PyInt_FromLong((long) result);
            }

            static PyObject *t_BasicQueryFactory_hashCode(t_BasicQueryFactory *self, PyObject *args)
            {
              jint result;

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.hashCode());
                return PyInt_FromLong((long) result);
              }

              return callSuper(&PY_TYPE(BasicQueryFactory), (PyObject *) self, "hashCode", args, 2);
            }

            static PyObject *t_BasicQueryFactory_newSpanTermQuery(t_BasicQueryFactory *self, PyObject *arg)
            {
              ::org::apache::lucene::index::Term a0((jobject) NULL);
              ::org::apache::lucene::search::spans::SpanTermQuery result((jobject) NULL);

              if (!parseArg(arg, "k", ::org::apache::lucene::index::Term::initializeClass, &a0))
              {
                OBJ_CALL(result = self->object.newSpanTermQuery(a0));
                return ::org::apache::lucene::search::spans::t_SpanTermQuery::wrap_Object(result);
              }

              PyErr_SetArgsError((PyObject *) self, "newSpanTermQuery", arg);
              return NULL;
            }

            static PyObject *t_BasicQueryFactory_newTermQuery(t_BasicQueryFactory *self, PyObject *arg)
            {
              ::org::apache::lucene::index::Term a0((jobject) NULL);
              ::org::apache::lucene::search::TermQuery result((jobject) NULL);

              if (!parseArg(arg, "k", ::org::apache::lucene::index::Term::initializeClass, &a0))
              {
                OBJ_CALL(result = self->object.newTermQuery(a0));
                return ::org::apache::lucene::search::t_TermQuery::wrap_Object(result);
              }

              PyErr_SetArgsError((PyObject *) self, "newTermQuery", arg);
              return NULL;
            }

            static PyObject *t_BasicQueryFactory_toString(t_BasicQueryFactory *self, PyObject *args)
            {
              ::java::lang::String result((jobject) NULL);

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.toString());
                return j2p(result);
              }

              return callSuper(&PY_TYPE(BasicQueryFactory), (PyObject *) self, "toString", args, 2);
            }

            static PyObject *t_BasicQueryFactory_get__maxBasicQueries(t_BasicQueryFactory *self, void *data)
            {
              jint value;
              OBJ_CALL(value = self->object.getMaxBasicQueries());
              return PyInt_FromLong((long) value);
            }

            static PyObject *t_BasicQueryFactory_get__nrQueriesMade(t_BasicQueryFactory *self, void *data)
            {
              jint value;
              OBJ_CALL(value = self->object.getNrQueriesMade());
              return PyInt_FromLong((long) value);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/vectorhighlight/BreakIteratorBoundaryScanner.h"
#include "java/lang/StringBuilder.h"
#include "org/apache/lucene/search/vectorhighlight/BoundaryScanner.h"
#include "java/text/BreakIterator.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace vectorhighlight {

          ::java::lang::Class *BreakIteratorBoundaryScanner::class$ = NULL;
          jmethodID *BreakIteratorBoundaryScanner::mids$ = NULL;
          bool BreakIteratorBoundaryScanner::live$ = false;

          jclass BreakIteratorBoundaryScanner::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/vectorhighlight/BreakIteratorBoundaryScanner");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_918887c2] = env->getMethodID(cls, "<init>", "(Ljava/text/BreakIterator;)V");
              mids$[mid_findEndOffset_f3d950f1] = env->getMethodID(cls, "findEndOffset", "(Ljava/lang/StringBuilder;I)I");
              mids$[mid_findStartOffset_f3d950f1] = env->getMethodID(cls, "findStartOffset", "(Ljava/lang/StringBuilder;I)I");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          BreakIteratorBoundaryScanner::BreakIteratorBoundaryScanner(const ::java::text::BreakIterator & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_918887c2, a0.this$)) {}

          jint BreakIteratorBoundaryScanner::findEndOffset(const ::java::lang::StringBuilder & a0, jint a1) const
          {
            return env->callIntMethod(this$, mids$[mid_findEndOffset_f3d950f1], a0.this$, a1);
          }

          jint BreakIteratorBoundaryScanner::findStartOffset(const ::java::lang::StringBuilder & a0, jint a1) const
          {
            return env->callIntMethod(this$, mids$[mid_findStartOffset_f3d950f1], a0.this$, a1);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace vectorhighlight {
          static PyObject *t_BreakIteratorBoundaryScanner_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_BreakIteratorBoundaryScanner_instance_(PyTypeObject *type, PyObject *arg);
          static int t_BreakIteratorBoundaryScanner_init_(t_BreakIteratorBoundaryScanner *self, PyObject *args, PyObject *kwds);
          static PyObject *t_BreakIteratorBoundaryScanner_findEndOffset(t_BreakIteratorBoundaryScanner *self, PyObject *args);
          static PyObject *t_BreakIteratorBoundaryScanner_findStartOffset(t_BreakIteratorBoundaryScanner *self, PyObject *args);

          static PyMethodDef t_BreakIteratorBoundaryScanner__methods_[] = {
            DECLARE_METHOD(t_BreakIteratorBoundaryScanner, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_BreakIteratorBoundaryScanner, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_BreakIteratorBoundaryScanner, findEndOffset, METH_VARARGS),
            DECLARE_METHOD(t_BreakIteratorBoundaryScanner, findStartOffset, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(BreakIteratorBoundaryScanner, t_BreakIteratorBoundaryScanner, ::java::lang::Object, BreakIteratorBoundaryScanner, t_BreakIteratorBoundaryScanner_init_, 0, 0, 0, 0, 0);

          void t_BreakIteratorBoundaryScanner::install(PyObject *module)
          {
            installType(&PY_TYPE(BreakIteratorBoundaryScanner), module, "BreakIteratorBoundaryScanner", 0);
          }

          void t_BreakIteratorBoundaryScanner::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(BreakIteratorBoundaryScanner).tp_dict, "class_", make_descriptor(BreakIteratorBoundaryScanner::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(BreakIteratorBoundaryScanner).tp_dict, "wrapfn_", make_descriptor(t_BreakIteratorBoundaryScanner::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(BreakIteratorBoundaryScanner).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_BreakIteratorBoundaryScanner_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, BreakIteratorBoundaryScanner::initializeClass, 1)))
              return NULL;
            return t_BreakIteratorBoundaryScanner::wrap_Object(BreakIteratorBoundaryScanner(((t_BreakIteratorBoundaryScanner *) arg)->object.this$));
          }
          static PyObject *t_BreakIteratorBoundaryScanner_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, BreakIteratorBoundaryScanner::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_BreakIteratorBoundaryScanner_init_(t_BreakIteratorBoundaryScanner *self, PyObject *args, PyObject *kwds)
          {
            ::java::text::BreakIterator a0((jobject) NULL);
            BreakIteratorBoundaryScanner object((jobject) NULL);

            if (!parseArgs(args, "k", ::java::text::BreakIterator::initializeClass, &a0))
            {
              INT_CALL(object = BreakIteratorBoundaryScanner(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_BreakIteratorBoundaryScanner_findEndOffset(t_BreakIteratorBoundaryScanner *self, PyObject *args)
          {
            ::java::lang::StringBuilder a0((jobject) NULL);
            jint a1;
            jint result;

            if (!parseArgs(args, "kI", ::java::lang::StringBuilder::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.findEndOffset(a0, a1));
              return PyInt_FromLong((long) result);
            }

            PyErr_SetArgsError((PyObject *) self, "findEndOffset", args);
            return NULL;
          }

          static PyObject *t_BreakIteratorBoundaryScanner_findStartOffset(t_BreakIteratorBoundaryScanner *self, PyObject *args)
          {
            ::java::lang::StringBuilder a0((jobject) NULL);
            jint a1;
            jint result;

            if (!parseArgs(args, "kI", ::java::lang::StringBuilder::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.findStartOffset(a0, a1));
              return PyInt_FromLong((long) result);
            }

            PyErr_SetArgsError((PyObject *) self, "findStartOffset", args);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "java/io/InputStream.h"
#include "java/io/Closeable.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace java {
  namespace io {

    ::java::lang::Class *InputStream::class$ = NULL;
    jmethodID *InputStream::mids$ = NULL;
    bool InputStream::live$ = false;

    jclass InputStream::initializeClass(bool getOnly)
    {
      if (getOnly)
        return (jclass) (live$ ? class$->this$ : NULL);
      if (class$ == NULL)
      {
        jclass cls = (jclass) env->findClass("java/io/InputStream");

        mids$ = new jmethodID[max_mid];
        mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
        mids$[mid_available_54c6a179] = env->getMethodID(cls, "available", "()I");
        mids$[mid_close_54c6a166] = env->getMethodID(cls, "close", "()V");
        mids$[mid_mark_39c7bd3c] = env->getMethodID(cls, "mark", "(I)V");
        mids$[mid_markSupported_54c6a16a] = env->getMethodID(cls, "markSupported", "()Z");
        mids$[mid_read_54c6a179] = env->getMethodID(cls, "read", "()I");
        mids$[mid_read_49b4f134] = env->getMethodID(cls, "read", "([B)I");
        mids$[mid_read_86f44340] = env->getMethodID(cls, "read", "([BII)I");
        mids$[mid_reset_54c6a166] = env->getMethodID(cls, "reset", "()V");
        mids$[mid_skip_0ee6df33] = env->getMethodID(cls, "skip", "(J)J");

        class$ = (::java::lang::Class *) new JObject(cls);
        live$ = true;
      }
      return (jclass) class$->this$;
    }

    InputStream::InputStream() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

    jint InputStream::available() const
    {
      return env->callIntMethod(this$, mids$[mid_available_54c6a179]);
    }

    void InputStream::close() const
    {
      env->callVoidMethod(this$, mids$[mid_close_54c6a166]);
    }

    void InputStream::mark(jint a0) const
    {
      env->callVoidMethod(this$, mids$[mid_mark_39c7bd3c], a0);
    }

    jboolean InputStream::markSupported() const
    {
      return env->callBooleanMethod(this$, mids$[mid_markSupported_54c6a16a]);
    }

    jint InputStream::read() const
    {
      return env->callIntMethod(this$, mids$[mid_read_54c6a179]);
    }

    jint InputStream::read(const JArray< jbyte > & a0) const
    {
      return env->callIntMethod(this$, mids$[mid_read_49b4f134], a0.this$);
    }

    jint InputStream::read(const JArray< jbyte > & a0, jint a1, jint a2) const
    {
      return env->callIntMethod(this$, mids$[mid_read_86f44340], a0.this$, a1, a2);
    }

    void InputStream::reset() const
    {
      env->callVoidMethod(this$, mids$[mid_reset_54c6a166]);
    }

    jlong InputStream::skip(jlong a0) const
    {
      return env->callLongMethod(this$, mids$[mid_skip_0ee6df33], a0);
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace java {
  namespace io {
    static PyObject *t_InputStream_cast_(PyTypeObject *type, PyObject *arg);
    static PyObject *t_InputStream_instance_(PyTypeObject *type, PyObject *arg);
    static int t_InputStream_init_(t_InputStream *self, PyObject *args, PyObject *kwds);
    static PyObject *t_InputStream_available(t_InputStream *self);
    static PyObject *t_InputStream_close(t_InputStream *self);
    static PyObject *t_InputStream_mark(t_InputStream *self, PyObject *arg);
    static PyObject *t_InputStream_markSupported(t_InputStream *self);
    static PyObject *t_InputStream_read(t_InputStream *self, PyObject *args);
    static PyObject *t_InputStream_reset(t_InputStream *self);
    static PyObject *t_InputStream_skip(t_InputStream *self, PyObject *arg);

    static PyMethodDef t_InputStream__methods_[] = {
      DECLARE_METHOD(t_InputStream, cast_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_InputStream, instance_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_InputStream, available, METH_NOARGS),
      DECLARE_METHOD(t_InputStream, close, METH_NOARGS),
      DECLARE_METHOD(t_InputStream, mark, METH_O),
      DECLARE_METHOD(t_InputStream, markSupported, METH_NOARGS),
      DECLARE_METHOD(t_InputStream, read, METH_VARARGS),
      DECLARE_METHOD(t_InputStream, reset, METH_NOARGS),
      DECLARE_METHOD(t_InputStream, skip, METH_O),
      { NULL, NULL, 0, NULL }
    };

    DECLARE_TYPE(InputStream, t_InputStream, ::java::lang::Object, InputStream, t_InputStream_init_, 0, 0, 0, 0, 0);

    void t_InputStream::install(PyObject *module)
    {
      installType(&PY_TYPE(InputStream), module, "InputStream", 0);
    }

    void t_InputStream::initialize(PyObject *module)
    {
      PyDict_SetItemString(PY_TYPE(InputStream).tp_dict, "class_", make_descriptor(InputStream::initializeClass, 1));
      PyDict_SetItemString(PY_TYPE(InputStream).tp_dict, "wrapfn_", make_descriptor(t_InputStream::wrap_jobject));
      PyDict_SetItemString(PY_TYPE(InputStream).tp_dict, "boxfn_", make_descriptor(boxObject));
    }

    static PyObject *t_InputStream_cast_(PyTypeObject *type, PyObject *arg)
    {
      if (!(arg = castCheck(arg, InputStream::initializeClass, 1)))
        return NULL;
      return t_InputStream::wrap_Object(InputStream(((t_InputStream *) arg)->object.this$));
    }
    static PyObject *t_InputStream_instance_(PyTypeObject *type, PyObject *arg)
    {
      if (!castCheck(arg, InputStream::initializeClass, 0))
        Py_RETURN_FALSE;
      Py_RETURN_TRUE;
    }

    static int t_InputStream_init_(t_InputStream *self, PyObject *args, PyObject *kwds)
    {
      InputStream object((jobject) NULL);

      INT_CALL(object = InputStream());
      self->object = object;

      return 0;
    }

    static PyObject *t_InputStream_available(t_InputStream *self)
    {
      jint result;
      OBJ_CALL(result = self->object.available());
      return PyInt_FromLong((long) result);
    }

    static PyObject *t_InputStream_close(t_InputStream *self)
    {
      OBJ_CALL(self->object.close());
      Py_RETURN_NONE;
    }

    static PyObject *t_InputStream_mark(t_InputStream *self, PyObject *arg)
    {
      jint a0;

      if (!parseArg(arg, "I", &a0))
      {
        OBJ_CALL(self->object.mark(a0));
        Py_RETURN_NONE;
      }

      PyErr_SetArgsError((PyObject *) self, "mark", arg);
      return NULL;
    }

    static PyObject *t_InputStream_markSupported(t_InputStream *self)
    {
      jboolean result;
      OBJ_CALL(result = self->object.markSupported());
      Py_RETURN_BOOL(result);
    }

    static PyObject *t_InputStream_read(t_InputStream *self, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 0:
        {
          jint result;
          OBJ_CALL(result = self->object.read());
          return PyInt_FromLong((long) result);
        }
        break;
       case 1:
        {
          JArray< jbyte > a0((jobject) NULL);
          jint result;

          if (!parseArgs(args, "[B", &a0))
          {
            OBJ_CALL(result = self->object.read(a0));
            return PyInt_FromLong((long) result);
          }
        }
        break;
       case 3:
        {
          JArray< jbyte > a0((jobject) NULL);
          jint a1;
          jint a2;
          jint result;

          if (!parseArgs(args, "[BII", &a0, &a1, &a2))
          {
            OBJ_CALL(result = self->object.read(a0, a1, a2));
            return PyInt_FromLong((long) result);
          }
        }
      }

      PyErr_SetArgsError((PyObject *) self, "read", args);
      return NULL;
    }

    static PyObject *t_InputStream_reset(t_InputStream *self)
    {
      OBJ_CALL(self->object.reset());
      Py_RETURN_NONE;
    }

    static PyObject *t_InputStream_skip(t_InputStream *self, PyObject *arg)
    {
      jlong a0;
      jlong result;

      if (!parseArg(arg, "J", &a0))
      {
        OBJ_CALL(result = self->object.skip(a0));
        return PyLong_FromLongLong((PY_LONG_LONG) result);
      }

      PyErr_SetArgsError((PyObject *) self, "skip", arg);
      return NULL;
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/join/ToParentBlockJoinFieldComparator$Highest.h"
#include "org/apache/lucene/search/FieldComparator.h"
#include "java/lang/Object.h"
#include "org/apache/lucene/search/Filter.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace join {

          ::java::lang::Class *ToParentBlockJoinFieldComparator$Highest::class$ = NULL;
          jmethodID *ToParentBlockJoinFieldComparator$Highest::mids$ = NULL;
          bool ToParentBlockJoinFieldComparator$Highest::live$ = false;

          jclass ToParentBlockJoinFieldComparator$Highest::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/join/ToParentBlockJoinFieldComparator$Highest");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_f2105569] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/FieldComparator;Lorg/apache/lucene/search/Filter;Lorg/apache/lucene/search/Filter;I)V");
              mids$[mid_compareBottom_39c7bd23] = env->getMethodID(cls, "compareBottom", "(I)I");
              mids$[mid_compareTop_39c7bd23] = env->getMethodID(cls, "compareTop", "(I)I");
              mids$[mid_copy_d8d154a6] = env->getMethodID(cls, "copy", "(II)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ToParentBlockJoinFieldComparator$Highest::ToParentBlockJoinFieldComparator$Highest(const ::org::apache::lucene::search::FieldComparator & a0, const ::org::apache::lucene::search::Filter & a1, const ::org::apache::lucene::search::Filter & a2, jint a3) : ::org::apache::lucene::search::join::ToParentBlockJoinFieldComparator(env->newObject(initializeClass, &mids$, mid_init$_f2105569, a0.this$, a1.this$, a2.this$, a3)) {}

          jint ToParentBlockJoinFieldComparator$Highest::compareBottom(jint a0) const
          {
            return env->callIntMethod(this$, mids$[mid_compareBottom_39c7bd23], a0);
          }

          jint ToParentBlockJoinFieldComparator$Highest::compareTop(jint a0) const
          {
            return env->callIntMethod(this$, mids$[mid_compareTop_39c7bd23], a0);
          }

          void ToParentBlockJoinFieldComparator$Highest::copy(jint a0, jint a1) const
          {
            env->callVoidMethod(this$, mids$[mid_copy_d8d154a6], a0, a1);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace join {
          static PyObject *t_ToParentBlockJoinFieldComparator$Highest_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_ToParentBlockJoinFieldComparator$Highest_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_ToParentBlockJoinFieldComparator$Highest_of_(t_ToParentBlockJoinFieldComparator$Highest *self, PyObject *args);
          static int t_ToParentBlockJoinFieldComparator$Highest_init_(t_ToParentBlockJoinFieldComparator$Highest *self, PyObject *args, PyObject *kwds);
          static PyObject *t_ToParentBlockJoinFieldComparator$Highest_compareBottom(t_ToParentBlockJoinFieldComparator$Highest *self, PyObject *args);
          static PyObject *t_ToParentBlockJoinFieldComparator$Highest_compareTop(t_ToParentBlockJoinFieldComparator$Highest *self, PyObject *args);
          static PyObject *t_ToParentBlockJoinFieldComparator$Highest_copy(t_ToParentBlockJoinFieldComparator$Highest *self, PyObject *args);
          static PyObject *t_ToParentBlockJoinFieldComparator$Highest_get__parameters_(t_ToParentBlockJoinFieldComparator$Highest *self, void *data);
          static PyGetSetDef t_ToParentBlockJoinFieldComparator$Highest__fields_[] = {
            DECLARE_GET_FIELD(t_ToParentBlockJoinFieldComparator$Highest, parameters_),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_ToParentBlockJoinFieldComparator$Highest__methods_[] = {
            DECLARE_METHOD(t_ToParentBlockJoinFieldComparator$Highest, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ToParentBlockJoinFieldComparator$Highest, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ToParentBlockJoinFieldComparator$Highest, of_, METH_VARARGS),
            DECLARE_METHOD(t_ToParentBlockJoinFieldComparator$Highest, compareBottom, METH_VARARGS),
            DECLARE_METHOD(t_ToParentBlockJoinFieldComparator$Highest, compareTop, METH_VARARGS),
            DECLARE_METHOD(t_ToParentBlockJoinFieldComparator$Highest, copy, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(ToParentBlockJoinFieldComparator$Highest, t_ToParentBlockJoinFieldComparator$Highest, ::org::apache::lucene::search::join::ToParentBlockJoinFieldComparator, ToParentBlockJoinFieldComparator$Highest, t_ToParentBlockJoinFieldComparator$Highest_init_, 0, 0, t_ToParentBlockJoinFieldComparator$Highest__fields_, 0, 0);
          PyObject *t_ToParentBlockJoinFieldComparator$Highest::wrap_Object(const ToParentBlockJoinFieldComparator$Highest& object, PyTypeObject *p0)
          {
            PyObject *obj = t_ToParentBlockJoinFieldComparator$Highest::wrap_Object(object);
            if (obj != NULL && obj != Py_None)
            {
              t_ToParentBlockJoinFieldComparator$Highest *self = (t_ToParentBlockJoinFieldComparator$Highest *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          PyObject *t_ToParentBlockJoinFieldComparator$Highest::wrap_jobject(const jobject& object, PyTypeObject *p0)
          {
            PyObject *obj = t_ToParentBlockJoinFieldComparator$Highest::wrap_jobject(object);
            if (obj != NULL && obj != Py_None)
            {
              t_ToParentBlockJoinFieldComparator$Highest *self = (t_ToParentBlockJoinFieldComparator$Highest *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          void t_ToParentBlockJoinFieldComparator$Highest::install(PyObject *module)
          {
            installType(&PY_TYPE(ToParentBlockJoinFieldComparator$Highest), module, "ToParentBlockJoinFieldComparator$Highest", 0);
          }

          void t_ToParentBlockJoinFieldComparator$Highest::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(ToParentBlockJoinFieldComparator$Highest).tp_dict, "class_", make_descriptor(ToParentBlockJoinFieldComparator$Highest::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(ToParentBlockJoinFieldComparator$Highest).tp_dict, "wrapfn_", make_descriptor(t_ToParentBlockJoinFieldComparator$Highest::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(ToParentBlockJoinFieldComparator$Highest).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_ToParentBlockJoinFieldComparator$Highest_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, ToParentBlockJoinFieldComparator$Highest::initializeClass, 1)))
              return NULL;
            return t_ToParentBlockJoinFieldComparator$Highest::wrap_Object(ToParentBlockJoinFieldComparator$Highest(((t_ToParentBlockJoinFieldComparator$Highest *) arg)->object.this$));
          }
          static PyObject *t_ToParentBlockJoinFieldComparator$Highest_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, ToParentBlockJoinFieldComparator$Highest::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_ToParentBlockJoinFieldComparator$Highest_of_(t_ToParentBlockJoinFieldComparator$Highest *self, PyObject *args)
          {
            if (!parseArg(args, "T", 1, &(self->parameters)))
              Py_RETURN_SELF;
            return PyErr_SetArgsError((PyObject *) self, "of_", args);
          }

          static int t_ToParentBlockJoinFieldComparator$Highest_init_(t_ToParentBlockJoinFieldComparator$Highest *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::search::FieldComparator a0((jobject) NULL);
            PyTypeObject **p0;
            ::org::apache::lucene::search::Filter a1((jobject) NULL);
            ::org::apache::lucene::search::Filter a2((jobject) NULL);
            jint a3;
            ToParentBlockJoinFieldComparator$Highest object((jobject) NULL);

            if (!parseArgs(args, "KkkI", ::org::apache::lucene::search::FieldComparator::initializeClass, ::org::apache::lucene::search::Filter::initializeClass, ::org::apache::lucene::search::Filter::initializeClass, &a0, &p0, ::org::apache::lucene::search::t_FieldComparator::parameters_, &a1, &a2, &a3))
            {
              INT_CALL(object = ToParentBlockJoinFieldComparator$Highest(a0, a1, a2, a3));
              self->object = object;
              self->parameters[0] = &::java::lang::PY_TYPE(Object);
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_ToParentBlockJoinFieldComparator$Highest_compareBottom(t_ToParentBlockJoinFieldComparator$Highest *self, PyObject *args)
          {
            jint a0;
            jint result;

            if (!parseArgs(args, "I", &a0))
            {
              OBJ_CALL(result = self->object.compareBottom(a0));
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(ToParentBlockJoinFieldComparator$Highest), (PyObject *) self, "compareBottom", args, 2);
          }

          static PyObject *t_ToParentBlockJoinFieldComparator$Highest_compareTop(t_ToParentBlockJoinFieldComparator$Highest *self, PyObject *args)
          {
            jint a0;
            jint result;

            if (!parseArgs(args, "I", &a0))
            {
              OBJ_CALL(result = self->object.compareTop(a0));
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(ToParentBlockJoinFieldComparator$Highest), (PyObject *) self, "compareTop", args, 2);
          }

          static PyObject *t_ToParentBlockJoinFieldComparator$Highest_copy(t_ToParentBlockJoinFieldComparator$Highest *self, PyObject *args)
          {
            jint a0;
            jint a1;

            if (!parseArgs(args, "II", &a0, &a1))
            {
              OBJ_CALL(self->object.copy(a0, a1));
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(ToParentBlockJoinFieldComparator$Highest), (PyObject *) self, "copy", args, 2);
          }
          static PyObject *t_ToParentBlockJoinFieldComparator$Highest_get__parameters_(t_ToParentBlockJoinFieldComparator$Highest *self, void *data)
          {
            return typeParameters(self->parameters, sizeof(self->parameters));
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/facet/sortedset/DefaultSortedSetDocValuesReaderState.h"
#include "java/lang/Class.h"
#include "java/util/Map.h"
#include "java/lang/String.h"
#include "org/apache/lucene/index/SortedSetDocValues.h"
#include "org/apache/lucene/facet/sortedset/SortedSetDocValuesReaderState$OrdRange.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace sortedset {

          ::java::lang::Class *DefaultSortedSetDocValuesReaderState::class$ = NULL;
          jmethodID *DefaultSortedSetDocValuesReaderState::mids$ = NULL;
          jfieldID *DefaultSortedSetDocValuesReaderState::fids$ = NULL;
          bool DefaultSortedSetDocValuesReaderState::live$ = false;

          jclass DefaultSortedSetDocValuesReaderState::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/facet/sortedset/DefaultSortedSetDocValuesReaderState");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_7d7eaea9] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/IndexReader;)V");
              mids$[mid_init$_215fea03] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/IndexReader;Ljava/lang/String;)V");
              mids$[mid_getDocValues_4bead171] = env->getMethodID(cls, "getDocValues", "()Lorg/apache/lucene/index/SortedSetDocValues;");
              mids$[mid_getField_14c7b5c5] = env->getMethodID(cls, "getField", "()Ljava/lang/String;");
              mids$[mid_getOrdRange_73e2ee38] = env->getMethodID(cls, "getOrdRange", "(Ljava/lang/String;)Lorg/apache/lucene/facet/sortedset/SortedSetDocValuesReaderState$OrdRange;");
              mids$[mid_getOrigReader_94bbd010] = env->getMethodID(cls, "getOrigReader", "()Lorg/apache/lucene/index/IndexReader;");
              mids$[mid_getPrefixToOrdRange_db60befd] = env->getMethodID(cls, "getPrefixToOrdRange", "()Ljava/util/Map;");
              mids$[mid_getSize_54c6a179] = env->getMethodID(cls, "getSize", "()I");

              fids$ = new jfieldID[max_fid];
              fids$[fid_origReader] = env->getFieldID(cls, "origReader", "Lorg/apache/lucene/index/IndexReader;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          DefaultSortedSetDocValuesReaderState::DefaultSortedSetDocValuesReaderState(const ::org::apache::lucene::index::IndexReader & a0) : ::org::apache::lucene::facet::sortedset::SortedSetDocValuesReaderState(env->newObject(initializeClass, &mids$, mid_init$_7d7eaea9, a0.this$)) {}

          DefaultSortedSetDocValuesReaderState::DefaultSortedSetDocValuesReaderState(const ::org::apache::lucene::index::IndexReader & a0, const ::java::lang::String & a1) : ::org::apache::lucene::facet::sortedset::SortedSetDocValuesReaderState(env->newObject(initializeClass, &mids$, mid_init$_215fea03, a0.this$, a1.this$)) {}

          ::org::apache::lucene::index::SortedSetDocValues DefaultSortedSetDocValuesReaderState::getDocValues() const
          {
            return ::org::apache::lucene::index::SortedSetDocValues(env->callObjectMethod(this$, mids$[mid_getDocValues_4bead171]));
          }

          ::java::lang::String DefaultSortedSetDocValuesReaderState::getField() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getField_14c7b5c5]));
          }

          ::org::apache::lucene::facet::sortedset::SortedSetDocValuesReaderState$OrdRange DefaultSortedSetDocValuesReaderState::getOrdRange(const ::java::lang::String & a0) const
          {
            return ::org::apache::lucene::facet::sortedset::SortedSetDocValuesReaderState$OrdRange(env->callObjectMethod(this$, mids$[mid_getOrdRange_73e2ee38], a0.this$));
          }

          ::org::apache::lucene::index::IndexReader DefaultSortedSetDocValuesReaderState::getOrigReader() const
          {
            return ::org::apache::lucene::index::IndexReader(env->callObjectMethod(this$, mids$[mid_getOrigReader_94bbd010]));
          }

          ::java::util::Map DefaultSortedSetDocValuesReaderState::getPrefixToOrdRange() const
          {
            return ::java::util::Map(env->callObjectMethod(this$, mids$[mid_getPrefixToOrdRange_db60befd]));
          }

          jint DefaultSortedSetDocValuesReaderState::getSize() const
          {
            return env->callIntMethod(this$, mids$[mid_getSize_54c6a179]);
          }

          ::org::apache::lucene::index::IndexReader DefaultSortedSetDocValuesReaderState::_get_origReader() const
          {
            return ::org::apache::lucene::index::IndexReader(env->getObjectField(this$, fids$[fid_origReader]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace sortedset {
          static PyObject *t_DefaultSortedSetDocValuesReaderState_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_DefaultSortedSetDocValuesReaderState_instance_(PyTypeObject *type, PyObject *arg);
          static int t_DefaultSortedSetDocValuesReaderState_init_(t_DefaultSortedSetDocValuesReaderState *self, PyObject *args, PyObject *kwds);
          static PyObject *t_DefaultSortedSetDocValuesReaderState_getDocValues(t_DefaultSortedSetDocValuesReaderState *self, PyObject *args);
          static PyObject *t_DefaultSortedSetDocValuesReaderState_getField(t_DefaultSortedSetDocValuesReaderState *self, PyObject *args);
          static PyObject *t_DefaultSortedSetDocValuesReaderState_getOrdRange(t_DefaultSortedSetDocValuesReaderState *self, PyObject *args);
          static PyObject *t_DefaultSortedSetDocValuesReaderState_getOrigReader(t_DefaultSortedSetDocValuesReaderState *self, PyObject *args);
          static PyObject *t_DefaultSortedSetDocValuesReaderState_getPrefixToOrdRange(t_DefaultSortedSetDocValuesReaderState *self, PyObject *args);
          static PyObject *t_DefaultSortedSetDocValuesReaderState_getSize(t_DefaultSortedSetDocValuesReaderState *self, PyObject *args);

          static PyObject *t_DefaultSortedSetDocValuesReaderState_get__docValues(t_DefaultSortedSetDocValuesReaderState *self, void *data);
          static PyObject *t_DefaultSortedSetDocValuesReaderState_get__field(t_DefaultSortedSetDocValuesReaderState *self, void *data);
          static PyObject *t_DefaultSortedSetDocValuesReaderState_get__origReader(t_DefaultSortedSetDocValuesReaderState *self, void *data);
          static PyObject *t_DefaultSortedSetDocValuesReaderState_get__prefixToOrdRange(t_DefaultSortedSetDocValuesReaderState *self, void *data);
          static PyObject *t_DefaultSortedSetDocValuesReaderState_get__size(t_DefaultSortedSetDocValuesReaderState *self, void *data);
          static PyGetSetDef t_DefaultSortedSetDocValuesReaderState__fields_[] = {
            DECLARE_GET_FIELD(t_DefaultSortedSetDocValuesReaderState, docValues),
            DECLARE_GET_FIELD(t_DefaultSortedSetDocValuesReaderState, field),
            DECLARE_GET_FIELD(t_DefaultSortedSetDocValuesReaderState, origReader),
            DECLARE_GET_FIELD(t_DefaultSortedSetDocValuesReaderState, prefixToOrdRange),
            DECLARE_GET_FIELD(t_DefaultSortedSetDocValuesReaderState, size),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_DefaultSortedSetDocValuesReaderState__methods_[] = {
            DECLARE_METHOD(t_DefaultSortedSetDocValuesReaderState, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_DefaultSortedSetDocValuesReaderState, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_DefaultSortedSetDocValuesReaderState, getDocValues, METH_VARARGS),
            DECLARE_METHOD(t_DefaultSortedSetDocValuesReaderState, getField, METH_VARARGS),
            DECLARE_METHOD(t_DefaultSortedSetDocValuesReaderState, getOrdRange, METH_VARARGS),
            DECLARE_METHOD(t_DefaultSortedSetDocValuesReaderState, getOrigReader, METH_VARARGS),
            DECLARE_METHOD(t_DefaultSortedSetDocValuesReaderState, getPrefixToOrdRange, METH_VARARGS),
            DECLARE_METHOD(t_DefaultSortedSetDocValuesReaderState, getSize, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(DefaultSortedSetDocValuesReaderState, t_DefaultSortedSetDocValuesReaderState, ::org::apache::lucene::facet::sortedset::SortedSetDocValuesReaderState, DefaultSortedSetDocValuesReaderState, t_DefaultSortedSetDocValuesReaderState_init_, 0, 0, t_DefaultSortedSetDocValuesReaderState__fields_, 0, 0);

          void t_DefaultSortedSetDocValuesReaderState::install(PyObject *module)
          {
            installType(&PY_TYPE(DefaultSortedSetDocValuesReaderState), module, "DefaultSortedSetDocValuesReaderState", 0);
          }

          void t_DefaultSortedSetDocValuesReaderState::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(DefaultSortedSetDocValuesReaderState).tp_dict, "class_", make_descriptor(DefaultSortedSetDocValuesReaderState::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(DefaultSortedSetDocValuesReaderState).tp_dict, "wrapfn_", make_descriptor(t_DefaultSortedSetDocValuesReaderState::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(DefaultSortedSetDocValuesReaderState).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_DefaultSortedSetDocValuesReaderState_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, DefaultSortedSetDocValuesReaderState::initializeClass, 1)))
              return NULL;
            return t_DefaultSortedSetDocValuesReaderState::wrap_Object(DefaultSortedSetDocValuesReaderState(((t_DefaultSortedSetDocValuesReaderState *) arg)->object.this$));
          }
          static PyObject *t_DefaultSortedSetDocValuesReaderState_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, DefaultSortedSetDocValuesReaderState::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_DefaultSortedSetDocValuesReaderState_init_(t_DefaultSortedSetDocValuesReaderState *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
                DefaultSortedSetDocValuesReaderState object((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::index::IndexReader::initializeClass, &a0))
                {
                  INT_CALL(object = DefaultSortedSetDocValuesReaderState(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 2:
              {
                ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
                ::java::lang::String a1((jobject) NULL);
                DefaultSortedSetDocValuesReaderState object((jobject) NULL);

                if (!parseArgs(args, "ks", ::org::apache::lucene::index::IndexReader::initializeClass, &a0, &a1))
                {
                  INT_CALL(object = DefaultSortedSetDocValuesReaderState(a0, a1));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_DefaultSortedSetDocValuesReaderState_getDocValues(t_DefaultSortedSetDocValuesReaderState *self, PyObject *args)
          {
            ::org::apache::lucene::index::SortedSetDocValues result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.getDocValues());
              return ::org::apache::lucene::index::t_SortedSetDocValues::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(DefaultSortedSetDocValuesReaderState), (PyObject *) self, "getDocValues", args, 2);
          }

          static PyObject *t_DefaultSortedSetDocValuesReaderState_getField(t_DefaultSortedSetDocValuesReaderState *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.getField());
              return j2p(result);
            }

            return callSuper(&PY_TYPE(DefaultSortedSetDocValuesReaderState), (PyObject *) self, "getField", args, 2);
          }

          static PyObject *t_DefaultSortedSetDocValuesReaderState_getOrdRange(t_DefaultSortedSetDocValuesReaderState *self, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            ::org::apache::lucene::facet::sortedset::SortedSetDocValuesReaderState$OrdRange result((jobject) NULL);

            if (!parseArgs(args, "s", &a0))
            {
              OBJ_CALL(result = self->object.getOrdRange(a0));
              return ::org::apache::lucene::facet::sortedset::t_SortedSetDocValuesReaderState$OrdRange::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(DefaultSortedSetDocValuesReaderState), (PyObject *) self, "getOrdRange", args, 2);
          }

          static PyObject *t_DefaultSortedSetDocValuesReaderState_getOrigReader(t_DefaultSortedSetDocValuesReaderState *self, PyObject *args)
          {
            ::org::apache::lucene::index::IndexReader result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.getOrigReader());
              return ::org::apache::lucene::index::t_IndexReader::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(DefaultSortedSetDocValuesReaderState), (PyObject *) self, "getOrigReader", args, 2);
          }

          static PyObject *t_DefaultSortedSetDocValuesReaderState_getPrefixToOrdRange(t_DefaultSortedSetDocValuesReaderState *self, PyObject *args)
          {
            ::java::util::Map result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.getPrefixToOrdRange());
              return ::java::util::t_Map::wrap_Object(result, &::java::lang::PY_TYPE(String), &::org::apache::lucene::facet::sortedset::PY_TYPE(SortedSetDocValuesReaderState$OrdRange));
            }

            return callSuper(&PY_TYPE(DefaultSortedSetDocValuesReaderState), (PyObject *) self, "getPrefixToOrdRange", args, 2);
          }

          static PyObject *t_DefaultSortedSetDocValuesReaderState_getSize(t_DefaultSortedSetDocValuesReaderState *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.getSize());
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(DefaultSortedSetDocValuesReaderState), (PyObject *) self, "getSize", args, 2);
          }

          static PyObject *t_DefaultSortedSetDocValuesReaderState_get__docValues(t_DefaultSortedSetDocValuesReaderState *self, void *data)
          {
            ::org::apache::lucene::index::SortedSetDocValues value((jobject) NULL);
            OBJ_CALL(value = self->object.getDocValues());
            return ::org::apache::lucene::index::t_SortedSetDocValues::wrap_Object(value);
          }

          static PyObject *t_DefaultSortedSetDocValuesReaderState_get__field(t_DefaultSortedSetDocValuesReaderState *self, void *data)
          {
            ::java::lang::String value((jobject) NULL);
            OBJ_CALL(value = self->object.getField());
            return j2p(value);
          }

          static PyObject *t_DefaultSortedSetDocValuesReaderState_get__origReader(t_DefaultSortedSetDocValuesReaderState *self, void *data)
          {
            ::org::apache::lucene::index::IndexReader value((jobject) NULL);
            OBJ_CALL(value = self->object.getOrigReader());
            return ::org::apache::lucene::index::t_IndexReader::wrap_Object(value);
          }

          static PyObject *t_DefaultSortedSetDocValuesReaderState_get__prefixToOrdRange(t_DefaultSortedSetDocValuesReaderState *self, void *data)
          {
            ::java::util::Map value((jobject) NULL);
            OBJ_CALL(value = self->object.getPrefixToOrdRange());
            return ::java::util::t_Map::wrap_Object(value);
          }

          static PyObject *t_DefaultSortedSetDocValuesReaderState_get__size(t_DefaultSortedSetDocValuesReaderState *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getSize());
            return PyInt_FromLong((long) value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/store/ByteArrayDataInput.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {

        ::java::lang::Class *ByteArrayDataInput::class$ = NULL;
        jmethodID *ByteArrayDataInput::mids$ = NULL;
        bool ByteArrayDataInput::live$ = false;

        jclass ByteArrayDataInput::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/store/ByteArrayDataInput");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_init$_49b4f12b] = env->getMethodID(cls, "<init>", "([B)V");
            mids$[mid_init$_86f4435f] = env->getMethodID(cls, "<init>", "([BII)V");
            mids$[mid_eof_54c6a16a] = env->getMethodID(cls, "eof", "()Z");
            mids$[mid_getPosition_54c6a179] = env->getMethodID(cls, "getPosition", "()I");
            mids$[mid_length_54c6a179] = env->getMethodID(cls, "length", "()I");
            mids$[mid_readByte_54c6a172] = env->getMethodID(cls, "readByte", "()B");
            mids$[mid_readBytes_86f4435f] = env->getMethodID(cls, "readBytes", "([BII)V");
            mids$[mid_readInt_54c6a179] = env->getMethodID(cls, "readInt", "()I");
            mids$[mid_readLong_54c6a17a] = env->getMethodID(cls, "readLong", "()J");
            mids$[mid_readShort_54c6a163] = env->getMethodID(cls, "readShort", "()S");
            mids$[mid_readVInt_54c6a179] = env->getMethodID(cls, "readVInt", "()I");
            mids$[mid_readVLong_54c6a17a] = env->getMethodID(cls, "readVLong", "()J");
            mids$[mid_reset_49b4f12b] = env->getMethodID(cls, "reset", "([B)V");
            mids$[mid_reset_86f4435f] = env->getMethodID(cls, "reset", "([BII)V");
            mids$[mid_rewind_54c6a166] = env->getMethodID(cls, "rewind", "()V");
            mids$[mid_setPosition_39c7bd3c] = env->getMethodID(cls, "setPosition", "(I)V");
            mids$[mid_skipBytes_0ee6df2f] = env->getMethodID(cls, "skipBytes", "(J)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        ByteArrayDataInput::ByteArrayDataInput() : ::org::apache::lucene::store::DataInput(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        ByteArrayDataInput::ByteArrayDataInput(const JArray< jbyte > & a0) : ::org::apache::lucene::store::DataInput(env->newObject(initializeClass, &mids$, mid_init$_49b4f12b, a0.this$)) {}

        ByteArrayDataInput::ByteArrayDataInput(const JArray< jbyte > & a0, jint a1, jint a2) : ::org::apache::lucene::store::DataInput(env->newObject(initializeClass, &mids$, mid_init$_86f4435f, a0.this$, a1, a2)) {}

        jboolean ByteArrayDataInput::eof() const
        {
          return env->callBooleanMethod(this$, mids$[mid_eof_54c6a16a]);
        }

        jint ByteArrayDataInput::getPosition() const
        {
          return env->callIntMethod(this$, mids$[mid_getPosition_54c6a179]);
        }

        jint ByteArrayDataInput::length() const
        {
          return env->callIntMethod(this$, mids$[mid_length_54c6a179]);
        }

        jbyte ByteArrayDataInput::readByte() const
        {
          return env->callByteMethod(this$, mids$[mid_readByte_54c6a172]);
        }

        void ByteArrayDataInput::readBytes(const JArray< jbyte > & a0, jint a1, jint a2) const
        {
          env->callVoidMethod(this$, mids$[mid_readBytes_86f4435f], a0.this$, a1, a2);
        }

        jint ByteArrayDataInput::readInt() const
        {
          return env->callIntMethod(this$, mids$[mid_readInt_54c6a179]);
        }

        jlong ByteArrayDataInput::readLong() const
        {
          return env->callLongMethod(this$, mids$[mid_readLong_54c6a17a]);
        }

        jshort ByteArrayDataInput::readShort() const
        {
          return env->callShortMethod(this$, mids$[mid_readShort_54c6a163]);
        }

        jint ByteArrayDataInput::readVInt() const
        {
          return env->callIntMethod(this$, mids$[mid_readVInt_54c6a179]);
        }

        jlong ByteArrayDataInput::readVLong() const
        {
          return env->callLongMethod(this$, mids$[mid_readVLong_54c6a17a]);
        }

        void ByteArrayDataInput::reset(const JArray< jbyte > & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_reset_49b4f12b], a0.this$);
        }

        void ByteArrayDataInput::reset(const JArray< jbyte > & a0, jint a1, jint a2) const
        {
          env->callVoidMethod(this$, mids$[mid_reset_86f4435f], a0.this$, a1, a2);
        }

        void ByteArrayDataInput::rewind() const
        {
          env->callVoidMethod(this$, mids$[mid_rewind_54c6a166]);
        }

        void ByteArrayDataInput::setPosition(jint a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setPosition_39c7bd3c], a0);
        }

        void ByteArrayDataInput::skipBytes(jlong a0) const
        {
          env->callVoidMethod(this$, mids$[mid_skipBytes_0ee6df2f], a0);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {
        static PyObject *t_ByteArrayDataInput_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_ByteArrayDataInput_instance_(PyTypeObject *type, PyObject *arg);
        static int t_ByteArrayDataInput_init_(t_ByteArrayDataInput *self, PyObject *args, PyObject *kwds);
        static PyObject *t_ByteArrayDataInput_eof(t_ByteArrayDataInput *self);
        static PyObject *t_ByteArrayDataInput_getPosition(t_ByteArrayDataInput *self);
        static PyObject *t_ByteArrayDataInput_length(t_ByteArrayDataInput *self);
        static PyObject *t_ByteArrayDataInput_readByte(t_ByteArrayDataInput *self, PyObject *args);
        static PyObject *t_ByteArrayDataInput_readBytes(t_ByteArrayDataInput *self, PyObject *args);
        static PyObject *t_ByteArrayDataInput_readInt(t_ByteArrayDataInput *self, PyObject *args);
        static PyObject *t_ByteArrayDataInput_readLong(t_ByteArrayDataInput *self, PyObject *args);
        static PyObject *t_ByteArrayDataInput_readShort(t_ByteArrayDataInput *self, PyObject *args);
        static PyObject *t_ByteArrayDataInput_readVInt(t_ByteArrayDataInput *self, PyObject *args);
        static PyObject *t_ByteArrayDataInput_readVLong(t_ByteArrayDataInput *self, PyObject *args);
        static PyObject *t_ByteArrayDataInput_reset(t_ByteArrayDataInput *self, PyObject *args);
        static PyObject *t_ByteArrayDataInput_rewind(t_ByteArrayDataInput *self);
        static PyObject *t_ByteArrayDataInput_setPosition(t_ByteArrayDataInput *self, PyObject *arg);
        static PyObject *t_ByteArrayDataInput_skipBytes(t_ByteArrayDataInput *self, PyObject *args);
        static PyObject *t_ByteArrayDataInput_get__position(t_ByteArrayDataInput *self, void *data);
        static int t_ByteArrayDataInput_set__position(t_ByteArrayDataInput *self, PyObject *arg, void *data);
        static PyGetSetDef t_ByteArrayDataInput__fields_[] = {
          DECLARE_GETSET_FIELD(t_ByteArrayDataInput, position),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_ByteArrayDataInput__methods_[] = {
          DECLARE_METHOD(t_ByteArrayDataInput, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_ByteArrayDataInput, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_ByteArrayDataInput, eof, METH_NOARGS),
          DECLARE_METHOD(t_ByteArrayDataInput, getPosition, METH_NOARGS),
          DECLARE_METHOD(t_ByteArrayDataInput, length, METH_NOARGS),
          DECLARE_METHOD(t_ByteArrayDataInput, readByte, METH_VARARGS),
          DECLARE_METHOD(t_ByteArrayDataInput, readBytes, METH_VARARGS),
          DECLARE_METHOD(t_ByteArrayDataInput, readInt, METH_VARARGS),
          DECLARE_METHOD(t_ByteArrayDataInput, readLong, METH_VARARGS),
          DECLARE_METHOD(t_ByteArrayDataInput, readShort, METH_VARARGS),
          DECLARE_METHOD(t_ByteArrayDataInput, readVInt, METH_VARARGS),
          DECLARE_METHOD(t_ByteArrayDataInput, readVLong, METH_VARARGS),
          DECLARE_METHOD(t_ByteArrayDataInput, reset, METH_VARARGS),
          DECLARE_METHOD(t_ByteArrayDataInput, rewind, METH_NOARGS),
          DECLARE_METHOD(t_ByteArrayDataInput, setPosition, METH_O),
          DECLARE_METHOD(t_ByteArrayDataInput, skipBytes, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(ByteArrayDataInput, t_ByteArrayDataInput, ::org::apache::lucene::store::DataInput, ByteArrayDataInput, t_ByteArrayDataInput_init_, 0, 0, t_ByteArrayDataInput__fields_, 0, 0);

        void t_ByteArrayDataInput::install(PyObject *module)
        {
          installType(&PY_TYPE(ByteArrayDataInput), module, "ByteArrayDataInput", 0);
        }

        void t_ByteArrayDataInput::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(ByteArrayDataInput).tp_dict, "class_", make_descriptor(ByteArrayDataInput::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(ByteArrayDataInput).tp_dict, "wrapfn_", make_descriptor(t_ByteArrayDataInput::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(ByteArrayDataInput).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_ByteArrayDataInput_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, ByteArrayDataInput::initializeClass, 1)))
            return NULL;
          return t_ByteArrayDataInput::wrap_Object(ByteArrayDataInput(((t_ByteArrayDataInput *) arg)->object.this$));
        }
        static PyObject *t_ByteArrayDataInput_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, ByteArrayDataInput::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_ByteArrayDataInput_init_(t_ByteArrayDataInput *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 0:
            {
              ByteArrayDataInput object((jobject) NULL);

              INT_CALL(object = ByteArrayDataInput());
              self->object = object;
              break;
            }
            goto err;
           case 1:
            {
              JArray< jbyte > a0((jobject) NULL);
              ByteArrayDataInput object((jobject) NULL);

              if (!parseArgs(args, "[B", &a0))
              {
                INT_CALL(object = ByteArrayDataInput(a0));
                self->object = object;
                break;
              }
            }
            goto err;
           case 3:
            {
              JArray< jbyte > a0((jobject) NULL);
              jint a1;
              jint a2;
              ByteArrayDataInput object((jobject) NULL);

              if (!parseArgs(args, "[BII", &a0, &a1, &a2))
              {
                INT_CALL(object = ByteArrayDataInput(a0, a1, a2));
                self->object = object;
                break;
              }
            }
           default:
           err:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_ByteArrayDataInput_eof(t_ByteArrayDataInput *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.eof());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_ByteArrayDataInput_getPosition(t_ByteArrayDataInput *self)
        {
          jint result;
          OBJ_CALL(result = self->object.getPosition());
          return PyInt_FromLong((long) result);
        }

        static PyObject *t_ByteArrayDataInput_length(t_ByteArrayDataInput *self)
        {
          jint result;
          OBJ_CALL(result = self->object.length());
          return PyInt_FromLong((long) result);
        }

        static PyObject *t_ByteArrayDataInput_readByte(t_ByteArrayDataInput *self, PyObject *args)
        {
          jbyte result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.readByte());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(ByteArrayDataInput), (PyObject *) self, "readByte", args, 2);
        }

        static PyObject *t_ByteArrayDataInput_readBytes(t_ByteArrayDataInput *self, PyObject *args)
        {
          JArray< jbyte > a0((jobject) NULL);
          jint a1;
          jint a2;

          if (!parseArgs(args, "[BII", &a0, &a1, &a2))
          {
            OBJ_CALL(self->object.readBytes(a0, a1, a2));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(ByteArrayDataInput), (PyObject *) self, "readBytes", args, 2);
        }

        static PyObject *t_ByteArrayDataInput_readInt(t_ByteArrayDataInput *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.readInt());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(ByteArrayDataInput), (PyObject *) self, "readInt", args, 2);
        }

        static PyObject *t_ByteArrayDataInput_readLong(t_ByteArrayDataInput *self, PyObject *args)
        {
          jlong result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.readLong());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          return callSuper(&PY_TYPE(ByteArrayDataInput), (PyObject *) self, "readLong", args, 2);
        }

        static PyObject *t_ByteArrayDataInput_readShort(t_ByteArrayDataInput *self, PyObject *args)
        {
          jshort result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.readShort());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(ByteArrayDataInput), (PyObject *) self, "readShort", args, 2);
        }

        static PyObject *t_ByteArrayDataInput_readVInt(t_ByteArrayDataInput *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.readVInt());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(ByteArrayDataInput), (PyObject *) self, "readVInt", args, 2);
        }

        static PyObject *t_ByteArrayDataInput_readVLong(t_ByteArrayDataInput *self, PyObject *args)
        {
          jlong result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.readVLong());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          return callSuper(&PY_TYPE(ByteArrayDataInput), (PyObject *) self, "readVLong", args, 2);
        }

        static PyObject *t_ByteArrayDataInput_reset(t_ByteArrayDataInput *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              JArray< jbyte > a0((jobject) NULL);

              if (!parseArgs(args, "[B", &a0))
              {
                OBJ_CALL(self->object.reset(a0));
                Py_RETURN_NONE;
              }
            }
            break;
           case 3:
            {
              JArray< jbyte > a0((jobject) NULL);
              jint a1;
              jint a2;

              if (!parseArgs(args, "[BII", &a0, &a1, &a2))
              {
                OBJ_CALL(self->object.reset(a0, a1, a2));
                Py_RETURN_NONE;
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "reset", args);
          return NULL;
        }

        static PyObject *t_ByteArrayDataInput_rewind(t_ByteArrayDataInput *self)
        {
          OBJ_CALL(self->object.rewind());
          Py_RETURN_NONE;
        }

        static PyObject *t_ByteArrayDataInput_setPosition(t_ByteArrayDataInput *self, PyObject *arg)
        {
          jint a0;

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(self->object.setPosition(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setPosition", arg);
          return NULL;
        }

        static PyObject *t_ByteArrayDataInput_skipBytes(t_ByteArrayDataInput *self, PyObject *args)
        {
          jlong a0;

          if (!parseArgs(args, "J", &a0))
          {
            OBJ_CALL(self->object.skipBytes(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(ByteArrayDataInput), (PyObject *) self, "skipBytes", args, 2);
        }

        static PyObject *t_ByteArrayDataInput_get__position(t_ByteArrayDataInput *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object.getPosition());
          return PyInt_FromLong((long) value);
        }
        static int t_ByteArrayDataInput_set__position(t_ByteArrayDataInput *self, PyObject *arg, void *data)
        {
          {
            jint value;
            if (!parseArg(arg, "I", &value))
            {
              INT_CALL(self->object.setPosition(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "position", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "java/io/StringWriter.h"
#include "java/lang/Class.h"
#include "java/lang/StringBuffer.h"
#include "java/lang/CharSequence.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "JArray.h"

namespace java {
  namespace io {

    ::java::lang::Class *StringWriter::class$ = NULL;
    jmethodID *StringWriter::mids$ = NULL;
    bool StringWriter::live$ = false;

    jclass StringWriter::initializeClass(bool getOnly)
    {
      if (getOnly)
        return (jclass) (live$ ? class$->this$ : NULL);
      if (class$ == NULL)
      {
        jclass cls = (jclass) env->findClass("java/io/StringWriter");

        mids$ = new jmethodID[max_mid];
        mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
        mids$[mid_init$_39c7bd3c] = env->getMethodID(cls, "<init>", "(I)V");
        mids$[mid_append_3aee6342] = env->getMethodID(cls, "append", "(C)Ljava/io/StringWriter;");
        mids$[mid_append_e2d4acee] = env->getMethodID(cls, "append", "(Ljava/lang/CharSequence;)Ljava/io/StringWriter;");
        mids$[mid_append_199526fa] = env->getMethodID(cls, "append", "(Ljava/lang/CharSequence;II)Ljava/io/StringWriter;");
        mids$[mid_close_54c6a166] = env->getMethodID(cls, "close", "()V");
        mids$[mid_flush_54c6a166] = env->getMethodID(cls, "flush", "()V");
        mids$[mid_getBuffer_d54172a5] = env->getMethodID(cls, "getBuffer", "()Ljava/lang/StringBuffer;");
        mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");
        mids$[mid_write_5fdc3f48] = env->getMethodID(cls, "write", "(Ljava/lang/String;)V");
        mids$[mid_write_39c7bd3c] = env->getMethodID(cls, "write", "(I)V");
        mids$[mid_write_555f322c] = env->getMethodID(cls, "write", "(Ljava/lang/String;II)V");
        mids$[mid_write_6f0bb356] = env->getMethodID(cls, "write", "([CII)V");

        class$ = (::java::lang::Class *) new JObject(cls);
        live$ = true;
      }
      return (jclass) class$->this$;
    }

    StringWriter::StringWriter() : ::java::io::Writer(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

    StringWriter::StringWriter(jint a0) : ::java::io::Writer(env->newObject(initializeClass, &mids$, mid_init$_39c7bd3c, a0)) {}

    StringWriter StringWriter::append(jchar a0) const
    {
      return StringWriter(env->callObjectMethod(this$, mids$[mid_append_3aee6342], a0));
    }

    StringWriter StringWriter::append(const ::java::lang::CharSequence & a0) const
    {
      return StringWriter(env->callObjectMethod(this$, mids$[mid_append_e2d4acee], a0.this$));
    }

    StringWriter StringWriter::append(const ::java::lang::CharSequence & a0, jint a1, jint a2) const
    {
      return StringWriter(env->callObjectMethod(this$, mids$[mid_append_199526fa], a0.this$, a1, a2));
    }

    void StringWriter::close() const
    {
      env->callVoidMethod(this$, mids$[mid_close_54c6a166]);
    }

    void StringWriter::flush() const
    {
      env->callVoidMethod(this$, mids$[mid_flush_54c6a166]);
    }

    ::java::lang::StringBuffer StringWriter::getBuffer() const
    {
      return ::java::lang::StringBuffer(env->callObjectMethod(this$, mids$[mid_getBuffer_d54172a5]));
    }

    ::java::lang::String StringWriter::toString() const
    {
      return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
    }

    void StringWriter::write(const ::java::lang::String & a0) const
    {
      env->callVoidMethod(this$, mids$[mid_write_5fdc3f48], a0.this$);
    }

    void StringWriter::write(jint a0) const
    {
      env->callVoidMethod(this$, mids$[mid_write_39c7bd3c], a0);
    }

    void StringWriter::write(const ::java::lang::String & a0, jint a1, jint a2) const
    {
      env->callVoidMethod(this$, mids$[mid_write_555f322c], a0.this$, a1, a2);
    }

    void StringWriter::write(const JArray< jchar > & a0, jint a1, jint a2) const
    {
      env->callVoidMethod(this$, mids$[mid_write_6f0bb356], a0.this$, a1, a2);
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace java {
  namespace io {
    static PyObject *t_StringWriter_cast_(PyTypeObject *type, PyObject *arg);
    static PyObject *t_StringWriter_instance_(PyTypeObject *type, PyObject *arg);
    static int t_StringWriter_init_(t_StringWriter *self, PyObject *args, PyObject *kwds);
    static PyObject *t_StringWriter_append(t_StringWriter *self, PyObject *args);
    static PyObject *t_StringWriter_close(t_StringWriter *self, PyObject *args);
    static PyObject *t_StringWriter_flush(t_StringWriter *self, PyObject *args);
    static PyObject *t_StringWriter_getBuffer(t_StringWriter *self);
    static PyObject *t_StringWriter_toString(t_StringWriter *self, PyObject *args);
    static PyObject *t_StringWriter_write(t_StringWriter *self, PyObject *args);
    static PyObject *t_StringWriter_get__buffer(t_StringWriter *self, void *data);
    static PyGetSetDef t_StringWriter__fields_[] = {
      DECLARE_GET_FIELD(t_StringWriter, buffer),
      { NULL, NULL, NULL, NULL, NULL }
    };

    static PyMethodDef t_StringWriter__methods_[] = {
      DECLARE_METHOD(t_StringWriter, cast_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_StringWriter, instance_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_StringWriter, append, METH_VARARGS),
      DECLARE_METHOD(t_StringWriter, close, METH_VARARGS),
      DECLARE_METHOD(t_StringWriter, flush, METH_VARARGS),
      DECLARE_METHOD(t_StringWriter, getBuffer, METH_NOARGS),
      DECLARE_METHOD(t_StringWriter, toString, METH_VARARGS),
      DECLARE_METHOD(t_StringWriter, write, METH_VARARGS),
      { NULL, NULL, 0, NULL }
    };

    DECLARE_TYPE(StringWriter, t_StringWriter, ::java::io::Writer, StringWriter, t_StringWriter_init_, 0, 0, t_StringWriter__fields_, 0, 0);

    void t_StringWriter::install(PyObject *module)
    {
      installType(&PY_TYPE(StringWriter), module, "StringWriter", 0);
    }

    void t_StringWriter::initialize(PyObject *module)
    {
      PyDict_SetItemString(PY_TYPE(StringWriter).tp_dict, "class_", make_descriptor(StringWriter::initializeClass, 1));
      PyDict_SetItemString(PY_TYPE(StringWriter).tp_dict, "wrapfn_", make_descriptor(t_StringWriter::wrap_jobject));
      PyDict_SetItemString(PY_TYPE(StringWriter).tp_dict, "boxfn_", make_descriptor(boxObject));
    }

    static PyObject *t_StringWriter_cast_(PyTypeObject *type, PyObject *arg)
    {
      if (!(arg = castCheck(arg, StringWriter::initializeClass, 1)))
        return NULL;
      return t_StringWriter::wrap_Object(StringWriter(((t_StringWriter *) arg)->object.this$));
    }
    static PyObject *t_StringWriter_instance_(PyTypeObject *type, PyObject *arg)
    {
      if (!castCheck(arg, StringWriter::initializeClass, 0))
        Py_RETURN_FALSE;
      Py_RETURN_TRUE;
    }

    static int t_StringWriter_init_(t_StringWriter *self, PyObject *args, PyObject *kwds)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 0:
        {
          StringWriter object((jobject) NULL);

          INT_CALL(object = StringWriter());
          self->object = object;
          break;
        }
        goto err;
       case 1:
        {
          jint a0;
          StringWriter object((jobject) NULL);

          if (!parseArgs(args, "I", &a0))
          {
            INT_CALL(object = StringWriter(a0));
            self->object = object;
            break;
          }
        }
       default:
       err:
        PyErr_SetArgsError((PyObject *) self, "__init__", args);
        return -1;
      }

      return 0;
    }

    static PyObject *t_StringWriter_append(t_StringWriter *self, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 1:
        {
          jchar a0;
          StringWriter result((jobject) NULL);

          if (!parseArgs(args, "C", &a0))
          {
            OBJ_CALL(result = self->object.append(a0));
            return t_StringWriter::wrap_Object(result);
          }
        }
        {
          ::java::lang::CharSequence a0((jobject) NULL);
          StringWriter result((jobject) NULL);

          if (!parseArgs(args, "O", &::java::lang::PY_TYPE(CharSequence), &a0))
          {
            OBJ_CALL(result = self->object.append(a0));
            return t_StringWriter::wrap_Object(result);
          }
        }
        break;
       case 3:
        {
          ::java::lang::CharSequence a0((jobject) NULL);
          jint a1;
          jint a2;
          StringWriter result((jobject) NULL);

          if (!parseArgs(args, "OII", &::java::lang::PY_TYPE(CharSequence), &a0, &a1, &a2))
          {
            OBJ_CALL(result = self->object.append(a0, a1, a2));
            return t_StringWriter::wrap_Object(result);
          }
        }
      }

      return callSuper(&PY_TYPE(StringWriter), (PyObject *) self, "append", args, 2);
    }

    static PyObject *t_StringWriter_close(t_StringWriter *self, PyObject *args)
    {

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(self->object.close());
        Py_RETURN_NONE;
      }

      return callSuper(&PY_TYPE(StringWriter), (PyObject *) self, "close", args, 2);
    }

    static PyObject *t_StringWriter_flush(t_StringWriter *self, PyObject *args)
    {

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(self->object.flush());
        Py_RETURN_NONE;
      }

      return callSuper(&PY_TYPE(StringWriter), (PyObject *) self, "flush", args, 2);
    }

    static PyObject *t_StringWriter_getBuffer(t_StringWriter *self)
    {
      ::java::lang::StringBuffer result((jobject) NULL);
      OBJ_CALL(result = self->object.getBuffer());
      return ::java::lang::t_StringBuffer::wrap_Object(result);
    }

    static PyObject *t_StringWriter_toString(t_StringWriter *self, PyObject *args)
    {
      ::java::lang::String result((jobject) NULL);

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.toString());
        return j2p(result);
      }

      return callSuper(&PY_TYPE(StringWriter), (PyObject *) self, "toString", args, 2);
    }

    static PyObject *t_StringWriter_write(t_StringWriter *self, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 1:
        {
          ::java::lang::String a0((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(self->object.write(a0));
            Py_RETURN_NONE;
          }
        }
        {
          jint a0;

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(self->object.write(a0));
            Py_RETURN_NONE;
          }
        }
        break;
       case 3:
        {
          ::java::lang::String a0((jobject) NULL);
          jint a1;
          jint a2;

          if (!parseArgs(args, "sII", &a0, &a1, &a2))
          {
            OBJ_CALL(self->object.write(a0, a1, a2));
            Py_RETURN_NONE;
          }
        }
        {
          JArray< jchar > a0((jobject) NULL);
          jint a1;
          jint a2;

          if (!parseArgs(args, "[CII", &a0, &a1, &a2))
          {
            OBJ_CALL(self->object.write(a0, a1, a2));
            Py_RETURN_NONE;
          }
        }
      }

      return callSuper(&PY_TYPE(StringWriter), (PyObject *) self, "write", args, 2);
    }

    static PyObject *t_StringWriter_get__buffer(t_StringWriter *self, void *data)
    {
      ::java::lang::StringBuffer value((jobject) NULL);
      OBJ_CALL(value = self->object.getBuffer());
      return ::java::lang::t_StringBuffer::wrap_Object(value);
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queries/function/docvalues/BoolDocValues.h"
#include "org/apache/lucene/queries/function/ValueSource.h"
#include "org/apache/lucene/queries/function/FunctionValues$ValueFiller.h"
#include "java/lang/String.h"
#include "java/lang/Object.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace docvalues {

            ::java::lang::Class *BoolDocValues::class$ = NULL;
            jmethodID *BoolDocValues::mids$ = NULL;
            bool BoolDocValues::live$ = false;

            jclass BoolDocValues::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queries/function/docvalues/BoolDocValues");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_ca78fe7a] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/queries/function/ValueSource;)V");
                mids$[mid_boolVal_39c7bd30] = env->getMethodID(cls, "boolVal", "(I)Z");
                mids$[mid_byteVal_39c7bd28] = env->getMethodID(cls, "byteVal", "(I)B");
                mids$[mid_doubleVal_39c7bd2e] = env->getMethodID(cls, "doubleVal", "(I)D");
                mids$[mid_floatVal_39c7bd2c] = env->getMethodID(cls, "floatVal", "(I)F");
                mids$[mid_getValueFiller_7731f0bd] = env->getMethodID(cls, "getValueFiller", "()Lorg/apache/lucene/queries/function/FunctionValues$ValueFiller;");
                mids$[mid_intVal_39c7bd23] = env->getMethodID(cls, "intVal", "(I)I");
                mids$[mid_longVal_39c7bd20] = env->getMethodID(cls, "longVal", "(I)J");
                mids$[mid_objectVal_29be6a55] = env->getMethodID(cls, "objectVal", "(I)Ljava/lang/Object;");
                mids$[mid_shortVal_39c7bd39] = env->getMethodID(cls, "shortVal", "(I)S");
                mids$[mid_strVal_141401b3] = env->getMethodID(cls, "strVal", "(I)Ljava/lang/String;");
                mids$[mid_toString_141401b3] = env->getMethodID(cls, "toString", "(I)Ljava/lang/String;");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            BoolDocValues::BoolDocValues(const ::org::apache::lucene::queries::function::ValueSource & a0) : ::org::apache::lucene::queries::function::FunctionValues(env->newObject(initializeClass, &mids$, mid_init$_ca78fe7a, a0.this$)) {}

            jboolean BoolDocValues::boolVal(jint a0) const
            {
              return env->callBooleanMethod(this$, mids$[mid_boolVal_39c7bd30], a0);
            }

            jbyte BoolDocValues::byteVal(jint a0) const
            {
              return env->callByteMethod(this$, mids$[mid_byteVal_39c7bd28], a0);
            }

            jdouble BoolDocValues::doubleVal(jint a0) const
            {
              return env->callDoubleMethod(this$, mids$[mid_doubleVal_39c7bd2e], a0);
            }

            jfloat BoolDocValues::floatVal(jint a0) const
            {
              return env->callFloatMethod(this$, mids$[mid_floatVal_39c7bd2c], a0);
            }

            ::org::apache::lucene::queries::function::FunctionValues$ValueFiller BoolDocValues::getValueFiller() const
            {
              return ::org::apache::lucene::queries::function::FunctionValues$ValueFiller(env->callObjectMethod(this$, mids$[mid_getValueFiller_7731f0bd]));
            }

            jint BoolDocValues::intVal(jint a0) const
            {
              return env->callIntMethod(this$, mids$[mid_intVal_39c7bd23], a0);
            }

            jlong BoolDocValues::longVal(jint a0) const
            {
              return env->callLongMethod(this$, mids$[mid_longVal_39c7bd20], a0);
            }

            ::java::lang::Object BoolDocValues::objectVal(jint a0) const
            {
              return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_objectVal_29be6a55], a0));
            }

            jshort BoolDocValues::shortVal(jint a0) const
            {
              return env->callShortMethod(this$, mids$[mid_shortVal_39c7bd39], a0);
            }

            ::java::lang::String BoolDocValues::strVal(jint a0) const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_strVal_141401b3], a0));
            }

            ::java::lang::String BoolDocValues::toString(jint a0) const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_141401b3], a0));
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace docvalues {
            static PyObject *t_BoolDocValues_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_BoolDocValues_instance_(PyTypeObject *type, PyObject *arg);
            static int t_BoolDocValues_init_(t_BoolDocValues *self, PyObject *args, PyObject *kwds);
            static PyObject *t_BoolDocValues_boolVal(t_BoolDocValues *self, PyObject *args);
            static PyObject *t_BoolDocValues_byteVal(t_BoolDocValues *self, PyObject *args);
            static PyObject *t_BoolDocValues_doubleVal(t_BoolDocValues *self, PyObject *args);
            static PyObject *t_BoolDocValues_floatVal(t_BoolDocValues *self, PyObject *args);
            static PyObject *t_BoolDocValues_getValueFiller(t_BoolDocValues *self, PyObject *args);
            static PyObject *t_BoolDocValues_intVal(t_BoolDocValues *self, PyObject *args);
            static PyObject *t_BoolDocValues_longVal(t_BoolDocValues *self, PyObject *args);
            static PyObject *t_BoolDocValues_objectVal(t_BoolDocValues *self, PyObject *args);
            static PyObject *t_BoolDocValues_shortVal(t_BoolDocValues *self, PyObject *args);
            static PyObject *t_BoolDocValues_strVal(t_BoolDocValues *self, PyObject *args);
            static PyObject *t_BoolDocValues_toString(t_BoolDocValues *self, PyObject *args);
            static PyObject *t_BoolDocValues_get__valueFiller(t_BoolDocValues *self, void *data);
            static PyGetSetDef t_BoolDocValues__fields_[] = {
              DECLARE_GET_FIELD(t_BoolDocValues, valueFiller),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_BoolDocValues__methods_[] = {
              DECLARE_METHOD(t_BoolDocValues, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_BoolDocValues, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_BoolDocValues, boolVal, METH_VARARGS),
              DECLARE_METHOD(t_BoolDocValues, byteVal, METH_VARARGS),
              DECLARE_METHOD(t_BoolDocValues, doubleVal, METH_VARARGS),
              DECLARE_METHOD(t_BoolDocValues, floatVal, METH_VARARGS),
              DECLARE_METHOD(t_BoolDocValues, getValueFiller, METH_VARARGS),
              DECLARE_METHOD(t_BoolDocValues, intVal, METH_VARARGS),
              DECLARE_METHOD(t_BoolDocValues, longVal, METH_VARARGS),
              DECLARE_METHOD(t_BoolDocValues, objectVal, METH_VARARGS),
              DECLARE_METHOD(t_BoolDocValues, shortVal, METH_VARARGS),
              DECLARE_METHOD(t_BoolDocValues, strVal, METH_VARARGS),
              DECLARE_METHOD(t_BoolDocValues, toString, METH_VARARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(BoolDocValues, t_BoolDocValues, ::org::apache::lucene::queries::function::FunctionValues, BoolDocValues, t_BoolDocValues_init_, 0, 0, t_BoolDocValues__fields_, 0, 0);

            void t_BoolDocValues::install(PyObject *module)
            {
              installType(&PY_TYPE(BoolDocValues), module, "BoolDocValues", 0);
            }

            void t_BoolDocValues::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(BoolDocValues).tp_dict, "class_", make_descriptor(BoolDocValues::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(BoolDocValues).tp_dict, "wrapfn_", make_descriptor(t_BoolDocValues::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(BoolDocValues).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_BoolDocValues_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, BoolDocValues::initializeClass, 1)))
                return NULL;
              return t_BoolDocValues::wrap_Object(BoolDocValues(((t_BoolDocValues *) arg)->object.this$));
            }
            static PyObject *t_BoolDocValues_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, BoolDocValues::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_BoolDocValues_init_(t_BoolDocValues *self, PyObject *args, PyObject *kwds)
            {
              ::org::apache::lucene::queries::function::ValueSource a0((jobject) NULL);
              BoolDocValues object((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::queries::function::ValueSource::initializeClass, &a0))
              {
                INT_CALL(object = BoolDocValues(a0));
                self->object = object;
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_BoolDocValues_boolVal(t_BoolDocValues *self, PyObject *args)
            {
              jint a0;
              jboolean result;

              if (!parseArgs(args, "I", &a0))
              {
                OBJ_CALL(result = self->object.boolVal(a0));
                Py_RETURN_BOOL(result);
              }

              return callSuper(&PY_TYPE(BoolDocValues), (PyObject *) self, "boolVal", args, 2);
            }

            static PyObject *t_BoolDocValues_byteVal(t_BoolDocValues *self, PyObject *args)
            {
              jint a0;
              jbyte result;

              if (!parseArgs(args, "I", &a0))
              {
                OBJ_CALL(result = self->object.byteVal(a0));
                return PyInt_FromLong((long) result);
              }

              return callSuper(&PY_TYPE(BoolDocValues), (PyObject *) self, "byteVal", args, 2);
            }

            static PyObject *t_BoolDocValues_doubleVal(t_BoolDocValues *self, PyObject *args)
            {
              jint a0;
              jdouble result;

              if (!parseArgs(args, "I", &a0))
              {
                OBJ_CALL(result = self->object.doubleVal(a0));
                return PyFloat_FromDouble((double) result);
              }

              return callSuper(&PY_TYPE(BoolDocValues), (PyObject *) self, "doubleVal", args, 2);
            }

            static PyObject *t_BoolDocValues_floatVal(t_BoolDocValues *self, PyObject *args)
            {
              jint a0;
              jfloat result;

              if (!parseArgs(args, "I", &a0))
              {
                OBJ_CALL(result = self->object.floatVal(a0));
                return PyFloat_FromDouble((double) result);
              }

              return callSuper(&PY_TYPE(BoolDocValues), (PyObject *) self, "floatVal", args, 2);
            }

            static PyObject *t_BoolDocValues_getValueFiller(t_BoolDocValues *self, PyObject *args)
            {
              ::org::apache::lucene::queries::function::FunctionValues$ValueFiller result((jobject) NULL);

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.getValueFiller());
                return ::org::apache::lucene::queries::function::t_FunctionValues$ValueFiller::wrap_Object(result);
              }

              return callSuper(&PY_TYPE(BoolDocValues), (PyObject *) self, "getValueFiller", args, 2);
            }

            static PyObject *t_BoolDocValues_intVal(t_BoolDocValues *self, PyObject *args)
            {
              jint a0;
              jint result;

              if (!parseArgs(args, "I", &a0))
              {
                OBJ_CALL(result = self->object.intVal(a0));
                return PyInt_FromLong((long) result);
              }

              return callSuper(&PY_TYPE(BoolDocValues), (PyObject *) self, "intVal", args, 2);
            }

            static PyObject *t_BoolDocValues_longVal(t_BoolDocValues *self, PyObject *args)
            {
              jint a0;
              jlong result;

              if (!parseArgs(args, "I", &a0))
              {
                OBJ_CALL(result = self->object.longVal(a0));
                return PyLong_FromLongLong((PY_LONG_LONG) result);
              }

              return callSuper(&PY_TYPE(BoolDocValues), (PyObject *) self, "longVal", args, 2);
            }

            static PyObject *t_BoolDocValues_objectVal(t_BoolDocValues *self, PyObject *args)
            {
              jint a0;
              ::java::lang::Object result((jobject) NULL);

              if (!parseArgs(args, "I", &a0))
              {
                OBJ_CALL(result = self->object.objectVal(a0));
                return ::java::lang::t_Object::wrap_Object(result);
              }

              return callSuper(&PY_TYPE(BoolDocValues), (PyObject *) self, "objectVal", args, 2);
            }

            static PyObject *t_BoolDocValues_shortVal(t_BoolDocValues *self, PyObject *args)
            {
              jint a0;
              jshort result;

              if (!parseArgs(args, "I", &a0))
              {
                OBJ_CALL(result = self->object.shortVal(a0));
                return PyInt_FromLong((long) result);
              }

              return callSuper(&PY_TYPE(BoolDocValues), (PyObject *) self, "shortVal", args, 2);
            }

            static PyObject *t_BoolDocValues_strVal(t_BoolDocValues *self, PyObject *args)
            {
              jint a0;
              ::java::lang::String result((jobject) NULL);

              if (!parseArgs(args, "I", &a0))
              {
                OBJ_CALL(result = self->object.strVal(a0));
                return j2p(result);
              }

              return callSuper(&PY_TYPE(BoolDocValues), (PyObject *) self, "strVal", args, 2);
            }

            static PyObject *t_BoolDocValues_toString(t_BoolDocValues *self, PyObject *args)
            {
              jint a0;
              ::java::lang::String result((jobject) NULL);

              if (!parseArgs(args, "I", &a0))
              {
                OBJ_CALL(result = self->object.toString(a0));
                return j2p(result);
              }

              return callSuper(&PY_TYPE(BoolDocValues), (PyObject *) self, "toString", args, 2);
            }

            static PyObject *t_BoolDocValues_get__valueFiller(t_BoolDocValues *self, void *data)
            {
              ::org::apache::lucene::queries::function::FunctionValues$ValueFiller value((jobject) NULL);
              OBJ_CALL(value = self->object.getValueFiller());
              return ::org::apache::lucene::queries::function::t_FunctionValues$ValueFiller::wrap_Object(value);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/FieldComparator$DocComparator.h"
#include "java/lang/Integer.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *FieldComparator$DocComparator::class$ = NULL;
        jmethodID *FieldComparator$DocComparator::mids$ = NULL;
        bool FieldComparator$DocComparator::live$ = false;

        jclass FieldComparator$DocComparator::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/FieldComparator$DocComparator");

            mids$ = new jmethodID[max_mid];
            mids$[mid_compare_d8d154b9] = env->getMethodID(cls, "compare", "(II)I");
            mids$[mid_compareBottom_39c7bd23] = env->getMethodID(cls, "compareBottom", "(I)I");
            mids$[mid_compareTop_39c7bd23] = env->getMethodID(cls, "compareTop", "(I)I");
            mids$[mid_copy_d8d154a6] = env->getMethodID(cls, "copy", "(II)V");
            mids$[mid_setBottom_39c7bd3c] = env->getMethodID(cls, "setBottom", "(I)V");
            mids$[mid_setNextReader_6329aed7] = env->getMethodID(cls, "setNextReader", "(Lorg/apache/lucene/index/AtomicReaderContext;)Lorg/apache/lucene/search/FieldComparator;");
            mids$[mid_setTopValue_af7b73a4] = env->getMethodID(cls, "setTopValue", "(Ljava/lang/Integer;)V");
            mids$[mid_value_7266dabb] = env->getMethodID(cls, "value", "(I)Ljava/lang/Integer;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        jint FieldComparator$DocComparator::compare(jint a0, jint a1) const
        {
          return env->callIntMethod(this$, mids$[mid_compare_d8d154b9], a0, a1);
        }

        jint FieldComparator$DocComparator::compareBottom(jint a0) const
        {
          return env->callIntMethod(this$, mids$[mid_compareBottom_39c7bd23], a0);
        }

        jint FieldComparator$DocComparator::compareTop(jint a0) const
        {
          return env->callIntMethod(this$, mids$[mid_compareTop_39c7bd23], a0);
        }

        void FieldComparator$DocComparator::copy(jint a0, jint a1) const
        {
          env->callVoidMethod(this$, mids$[mid_copy_d8d154a6], a0, a1);
        }

        void FieldComparator$DocComparator::setBottom(jint a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setBottom_39c7bd3c], a0);
        }

        ::org::apache::lucene::search::FieldComparator FieldComparator$DocComparator::setNextReader(const ::org::apache::lucene::index::AtomicReaderContext & a0) const
        {
          return ::org::apache::lucene::search::FieldComparator(env->callObjectMethod(this$, mids$[mid_setNextReader_6329aed7], a0.this$));
        }

        void FieldComparator$DocComparator::setTopValue(const ::java::lang::Integer & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setTopValue_af7b73a4], a0.this$);
        }

        ::java::lang::Integer FieldComparator$DocComparator::value(jint a0) const
        {
          return ::java::lang::Integer(env->callObjectMethod(this$, mids$[mid_value_7266dabb], a0));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_FieldComparator$DocComparator_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FieldComparator$DocComparator_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FieldComparator$DocComparator_of_(t_FieldComparator$DocComparator *self, PyObject *args);
        static PyObject *t_FieldComparator$DocComparator_compare(t_FieldComparator$DocComparator *self, PyObject *args);
        static PyObject *t_FieldComparator$DocComparator_compareBottom(t_FieldComparator$DocComparator *self, PyObject *args);
        static PyObject *t_FieldComparator$DocComparator_compareTop(t_FieldComparator$DocComparator *self, PyObject *args);
        static PyObject *t_FieldComparator$DocComparator_copy(t_FieldComparator$DocComparator *self, PyObject *args);
        static PyObject *t_FieldComparator$DocComparator_setBottom(t_FieldComparator$DocComparator *self, PyObject *args);
        static PyObject *t_FieldComparator$DocComparator_setNextReader(t_FieldComparator$DocComparator *self, PyObject *args);
        static PyObject *t_FieldComparator$DocComparator_setTopValue(t_FieldComparator$DocComparator *self, PyObject *args);
        static PyObject *t_FieldComparator$DocComparator_value(t_FieldComparator$DocComparator *self, PyObject *args);
        static int t_FieldComparator$DocComparator_set__bottom(t_FieldComparator$DocComparator *self, PyObject *arg, void *data);
        static int t_FieldComparator$DocComparator_set__nextReader(t_FieldComparator$DocComparator *self, PyObject *arg, void *data);
        static int t_FieldComparator$DocComparator_set__topValue(t_FieldComparator$DocComparator *self, PyObject *arg, void *data);
        static PyObject *t_FieldComparator$DocComparator_get__parameters_(t_FieldComparator$DocComparator *self, void *data);
        static PyGetSetDef t_FieldComparator$DocComparator__fields_[] = {
          DECLARE_SET_FIELD(t_FieldComparator$DocComparator, bottom),
          DECLARE_SET_FIELD(t_FieldComparator$DocComparator, nextReader),
          DECLARE_SET_FIELD(t_FieldComparator$DocComparator, topValue),
          DECLARE_GET_FIELD(t_FieldComparator$DocComparator, parameters_),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_FieldComparator$DocComparator__methods_[] = {
          DECLARE_METHOD(t_FieldComparator$DocComparator, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FieldComparator$DocComparator, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FieldComparator$DocComparator, of_, METH_VARARGS),
          DECLARE_METHOD(t_FieldComparator$DocComparator, compare, METH_VARARGS),
          DECLARE_METHOD(t_FieldComparator$DocComparator, compareBottom, METH_VARARGS),
          DECLARE_METHOD(t_FieldComparator$DocComparator, compareTop, METH_VARARGS),
          DECLARE_METHOD(t_FieldComparator$DocComparator, copy, METH_VARARGS),
          DECLARE_METHOD(t_FieldComparator$DocComparator, setBottom, METH_VARARGS),
          DECLARE_METHOD(t_FieldComparator$DocComparator, setNextReader, METH_VARARGS),
          DECLARE_METHOD(t_FieldComparator$DocComparator, setTopValue, METH_VARARGS),
          DECLARE_METHOD(t_FieldComparator$DocComparator, value, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(FieldComparator$DocComparator, t_FieldComparator$DocComparator, ::org::apache::lucene::search::FieldComparator, FieldComparator$DocComparator, abstract_init, 0, 0, t_FieldComparator$DocComparator__fields_, 0, 0);
        PyObject *t_FieldComparator$DocComparator::wrap_Object(const FieldComparator$DocComparator& object, PyTypeObject *p0)
        {
          PyObject *obj = t_FieldComparator$DocComparator::wrap_Object(object);
          if (obj != NULL && obj != Py_None)
          {
            t_FieldComparator$DocComparator *self = (t_FieldComparator$DocComparator *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        PyObject *t_FieldComparator$DocComparator::wrap_jobject(const jobject& object, PyTypeObject *p0)
        {
          PyObject *obj = t_FieldComparator$DocComparator::wrap_jobject(object);
          if (obj != NULL && obj != Py_None)
          {
            t_FieldComparator$DocComparator *self = (t_FieldComparator$DocComparator *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        void t_FieldComparator$DocComparator::install(PyObject *module)
        {
          installType(&PY_TYPE(FieldComparator$DocComparator), module, "FieldComparator$DocComparator", 0);
        }

        void t_FieldComparator$DocComparator::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(FieldComparator$DocComparator).tp_dict, "class_", make_descriptor(FieldComparator$DocComparator::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(FieldComparator$DocComparator).tp_dict, "wrapfn_", make_descriptor(t_FieldComparator$DocComparator::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(FieldComparator$DocComparator).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_FieldComparator$DocComparator_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, FieldComparator$DocComparator::initializeClass, 1)))
            return NULL;
          return t_FieldComparator$DocComparator::wrap_Object(FieldComparator$DocComparator(((t_FieldComparator$DocComparator *) arg)->object.this$));
        }
        static PyObject *t_FieldComparator$DocComparator_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, FieldComparator$DocComparator::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_FieldComparator$DocComparator_of_(t_FieldComparator$DocComparator *self, PyObject *args)
        {
          if (!parseArg(args, "T", 1, &(self->parameters)))
            Py_RETURN_SELF;
          return PyErr_SetArgsError((PyObject *) self, "of_", args);
        }

        static PyObject *t_FieldComparator$DocComparator_compare(t_FieldComparator$DocComparator *self, PyObject *args)
        {
          jint a0;
          jint a1;
          jint result;

          if (!parseArgs(args, "II", &a0, &a1))
          {
            OBJ_CALL(result = self->object.compare(a0, a1));
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(FieldComparator$DocComparator), (PyObject *) self, "compare", args, 2);
        }

        static PyObject *t_FieldComparator$DocComparator_compareBottom(t_FieldComparator$DocComparator *self, PyObject *args)
        {
          jint a0;
          jint result;

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(result = self->object.compareBottom(a0));
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(FieldComparator$DocComparator), (PyObject *) self, "compareBottom", args, 2);
        }

        static PyObject *t_FieldComparator$DocComparator_compareTop(t_FieldComparator$DocComparator *self, PyObject *args)
        {
          jint a0;
          jint result;

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(result = self->object.compareTop(a0));
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(FieldComparator$DocComparator), (PyObject *) self, "compareTop", args, 2);
        }

        static PyObject *t_FieldComparator$DocComparator_copy(t_FieldComparator$DocComparator *self, PyObject *args)
        {
          jint a0;
          jint a1;

          if (!parseArgs(args, "II", &a0, &a1))
          {
            OBJ_CALL(self->object.copy(a0, a1));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(FieldComparator$DocComparator), (PyObject *) self, "copy", args, 2);
        }

        static PyObject *t_FieldComparator$DocComparator_setBottom(t_FieldComparator$DocComparator *self, PyObject *args)
        {
          jint a0;

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(self->object.setBottom(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(FieldComparator$DocComparator), (PyObject *) self, "setBottom", args, 2);
        }

        static PyObject *t_FieldComparator$DocComparator_setNextReader(t_FieldComparator$DocComparator *self, PyObject *args)
        {
          ::org::apache::lucene::index::AtomicReaderContext a0((jobject) NULL);
          ::org::apache::lucene::search::FieldComparator result((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.setNextReader(a0));
            return ::org::apache::lucene::search::t_FieldComparator::wrap_Object(result, &::java::lang::PY_TYPE(Integer));
          }

          return callSuper(&PY_TYPE(FieldComparator$DocComparator), (PyObject *) self, "setNextReader", args, 2);
        }

        static PyObject *t_FieldComparator$DocComparator_setTopValue(t_FieldComparator$DocComparator *self, PyObject *args)
        {
          ::java::lang::Integer a0((jobject) NULL);

          if (!parseArgs(args, "O", &::java::lang::PY_TYPE(Integer), &a0))
          {
            OBJ_CALL(self->object.setTopValue(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(FieldComparator$DocComparator), (PyObject *) self, "setTopValue", args, 2);
        }

        static PyObject *t_FieldComparator$DocComparator_value(t_FieldComparator$DocComparator *self, PyObject *args)
        {
          jint a0;
          ::java::lang::Integer result((jobject) NULL);

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(result = self->object.value(a0));
            return ::java::lang::t_Integer::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(FieldComparator$DocComparator), (PyObject *) self, "value", args, 2);
        }
        static PyObject *t_FieldComparator$DocComparator_get__parameters_(t_FieldComparator$DocComparator *self, void *data)
        {
          return typeParameters(self->parameters, sizeof(self->parameters));
        }

        static int t_FieldComparator$DocComparator_set__bottom(t_FieldComparator$DocComparator *self, PyObject *arg, void *data)
        {
          {
            jint value;
            if (!parseArg(arg, "I", &value))
            {
              INT_CALL(self->object.setBottom(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "bottom", arg);
          return -1;
        }

        static int t_FieldComparator$DocComparator_set__nextReader(t_FieldComparator$DocComparator *self, PyObject *arg, void *data)
        {
          {
            ::org::apache::lucene::index::AtomicReaderContext value((jobject) NULL);
            if (!parseArg(arg, "k", ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &value))
            {
              INT_CALL(self->object.setNextReader(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "nextReader", arg);
          return -1;
        }

        static int t_FieldComparator$DocComparator_set__topValue(t_FieldComparator$DocComparator *self, PyObject *arg, void *data)
        {
          {
            ::java::lang::Integer value((jobject) NULL);
            if (!parseArg(arg, "O", &::java::lang::PY_TYPE(Integer), &value))
            {
              INT_CALL(self->object.setTopValue(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "topValue", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/BooleanClause$Occur.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *BooleanClause$Occur::class$ = NULL;
        jmethodID *BooleanClause$Occur::mids$ = NULL;
        bool BooleanClause$Occur::live$ = false;
        BooleanClause$Occur *BooleanClause$Occur::MUST = NULL;
        BooleanClause$Occur *BooleanClause$Occur::MUST_NOT = NULL;
        BooleanClause$Occur *BooleanClause$Occur::SHOULD = NULL;

        jclass BooleanClause$Occur::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/BooleanClause$Occur");

            mids$ = new jmethodID[max_mid];
            mids$[mid_valueOf_af513d37] = env->getStaticMethodID(cls, "valueOf", "(Ljava/lang/String;)Lorg/apache/lucene/search/BooleanClause$Occur;");
            mids$[mid_values_e84c4b69] = env->getStaticMethodID(cls, "values", "()[Lorg/apache/lucene/search/BooleanClause$Occur;");

            class$ = (::java::lang::Class *) new JObject(cls);
            cls = (jclass) class$->this$;

            MUST = new BooleanClause$Occur(env->getStaticObjectField(cls, "MUST", "Lorg/apache/lucene/search/BooleanClause$Occur;"));
            MUST_NOT = new BooleanClause$Occur(env->getStaticObjectField(cls, "MUST_NOT", "Lorg/apache/lucene/search/BooleanClause$Occur;"));
            SHOULD = new BooleanClause$Occur(env->getStaticObjectField(cls, "SHOULD", "Lorg/apache/lucene/search/BooleanClause$Occur;"));
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        BooleanClause$Occur BooleanClause$Occur::valueOf(const ::java::lang::String & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return BooleanClause$Occur(env->callStaticObjectMethod(cls, mids$[mid_valueOf_af513d37], a0.this$));
        }

        JArray< BooleanClause$Occur > BooleanClause$Occur::values()
        {
          jclass cls = env->getClass(initializeClass);
          return JArray< BooleanClause$Occur >(env->callStaticObjectMethod(cls, mids$[mid_values_e84c4b69]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_BooleanClause$Occur_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_BooleanClause$Occur_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_BooleanClause$Occur_of_(t_BooleanClause$Occur *self, PyObject *args);
        static PyObject *t_BooleanClause$Occur_valueOf(PyTypeObject *type, PyObject *args);
        static PyObject *t_BooleanClause$Occur_values(PyTypeObject *type);
        static PyObject *t_BooleanClause$Occur_get__parameters_(t_BooleanClause$Occur *self, void *data);
        static PyGetSetDef t_BooleanClause$Occur__fields_[] = {
          DECLARE_GET_FIELD(t_BooleanClause$Occur, parameters_),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_BooleanClause$Occur__methods_[] = {
          DECLARE_METHOD(t_BooleanClause$Occur, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_BooleanClause$Occur, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_BooleanClause$Occur, of_, METH_VARARGS),
          DECLARE_METHOD(t_BooleanClause$Occur, valueOf, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_BooleanClause$Occur, values, METH_NOARGS | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(BooleanClause$Occur, t_BooleanClause$Occur, ::java::lang::Enum, BooleanClause$Occur, abstract_init, 0, 0, t_BooleanClause$Occur__fields_, 0, 0);
        PyObject *t_BooleanClause$Occur::wrap_Object(const BooleanClause$Occur& object, PyTypeObject *p0)
        {
          PyObject *obj = t_BooleanClause$Occur::wrap_Object(object);
          if (obj != NULL && obj != Py_None)
          {
            t_BooleanClause$Occur *self = (t_BooleanClause$Occur *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        PyObject *t_BooleanClause$Occur::wrap_jobject(const jobject& object, PyTypeObject *p0)
        {
          PyObject *obj = t_BooleanClause$Occur::wrap_jobject(object);
          if (obj != NULL && obj != Py_None)
          {
            t_BooleanClause$Occur *self = (t_BooleanClause$Occur *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        void t_BooleanClause$Occur::install(PyObject *module)
        {
          installType(&PY_TYPE(BooleanClause$Occur), module, "BooleanClause$Occur", 0);
        }

        void t_BooleanClause$Occur::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(BooleanClause$Occur).tp_dict, "class_", make_descriptor(BooleanClause$Occur::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(BooleanClause$Occur).tp_dict, "wrapfn_", make_descriptor(t_BooleanClause$Occur::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(BooleanClause$Occur).tp_dict, "boxfn_", make_descriptor(boxObject));
          env->getClass(BooleanClause$Occur::initializeClass);
          PyDict_SetItemString(PY_TYPE(BooleanClause$Occur).tp_dict, "MUST", make_descriptor(t_BooleanClause$Occur::wrap_Object(*BooleanClause$Occur::MUST)));
          PyDict_SetItemString(PY_TYPE(BooleanClause$Occur).tp_dict, "MUST_NOT", make_descriptor(t_BooleanClause$Occur::wrap_Object(*BooleanClause$Occur::MUST_NOT)));
          PyDict_SetItemString(PY_TYPE(BooleanClause$Occur).tp_dict, "SHOULD", make_descriptor(t_BooleanClause$Occur::wrap_Object(*BooleanClause$Occur::SHOULD)));
        }

        static PyObject *t_BooleanClause$Occur_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, BooleanClause$Occur::initializeClass, 1)))
            return NULL;
          return t_BooleanClause$Occur::wrap_Object(BooleanClause$Occur(((t_BooleanClause$Occur *) arg)->object.this$));
        }
        static PyObject *t_BooleanClause$Occur_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, BooleanClause$Occur::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_BooleanClause$Occur_of_(t_BooleanClause$Occur *self, PyObject *args)
        {
          if (!parseArg(args, "T", 1, &(self->parameters)))
            Py_RETURN_SELF;
          return PyErr_SetArgsError((PyObject *) self, "of_", args);
        }

        static PyObject *t_BooleanClause$Occur_valueOf(PyTypeObject *type, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          BooleanClause$Occur result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::search::BooleanClause$Occur::valueOf(a0));
            return t_BooleanClause$Occur::wrap_Object(result);
          }

          return callSuper(type, "valueOf", args, 2);
        }

        static PyObject *t_BooleanClause$Occur_values(PyTypeObject *type)
        {
          JArray< BooleanClause$Occur > result((jobject) NULL);
          OBJ_CALL(result = ::org::apache::lucene::search::BooleanClause$Occur::values());
          return JArray<jobject>(result.this$).wrap(t_BooleanClause$Occur::wrap_jobject);
        }
        static PyObject *t_BooleanClause$Occur_get__parameters_(t_BooleanClause$Occur *self, void *data)
        {
          return typeParameters(self->parameters, sizeof(self->parameters));
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/tokenattributes/PayloadAttributeImpl.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "java/lang/Object.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/analysis/tokenattributes/PayloadAttribute.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace tokenattributes {

          ::java::lang::Class *PayloadAttributeImpl::class$ = NULL;
          jmethodID *PayloadAttributeImpl::mids$ = NULL;
          bool PayloadAttributeImpl::live$ = false;

          jclass PayloadAttributeImpl::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/tokenattributes/PayloadAttributeImpl");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_init$_7bc03dc4] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/BytesRef;)V");
              mids$[mid_clear_54c6a166] = env->getMethodID(cls, "clear", "()V");
              mids$[mid_clone_fdeb4a36] = env->getMethodID(cls, "clone", "()Lorg/apache/lucene/analysis/tokenattributes/PayloadAttributeImpl;");
              mids$[mid_copyTo_d86caa9f] = env->getMethodID(cls, "copyTo", "(Lorg/apache/lucene/util/AttributeImpl;)V");
              mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
              mids$[mid_getPayload_4ae19461] = env->getMethodID(cls, "getPayload", "()Lorg/apache/lucene/util/BytesRef;");
              mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
              mids$[mid_setPayload_7bc03dc4] = env->getMethodID(cls, "setPayload", "(Lorg/apache/lucene/util/BytesRef;)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          PayloadAttributeImpl::PayloadAttributeImpl() : ::org::apache::lucene::util::AttributeImpl(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          PayloadAttributeImpl::PayloadAttributeImpl(const ::org::apache::lucene::util::BytesRef & a0) : ::org::apache::lucene::util::AttributeImpl(env->newObject(initializeClass, &mids$, mid_init$_7bc03dc4, a0.this$)) {}

          void PayloadAttributeImpl::clear() const
          {
            env->callVoidMethod(this$, mids$[mid_clear_54c6a166]);
          }

          PayloadAttributeImpl PayloadAttributeImpl::clone() const
          {
            return PayloadAttributeImpl(env->callObjectMethod(this$, mids$[mid_clone_fdeb4a36]));
          }

          void PayloadAttributeImpl::copyTo(const ::org::apache::lucene::util::AttributeImpl & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_copyTo_d86caa9f], a0.this$);
          }

          jboolean PayloadAttributeImpl::equals(const ::java::lang::Object & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
          }

          ::org::apache::lucene::util::BytesRef PayloadAttributeImpl::getPayload() const
          {
            return ::org::apache::lucene::util::BytesRef(env->callObjectMethod(this$, mids$[mid_getPayload_4ae19461]));
          }

          jint PayloadAttributeImpl::hashCode() const
          {
            return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
          }

          void PayloadAttributeImpl::setPayload(const ::org::apache::lucene::util::BytesRef & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setPayload_7bc03dc4], a0.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace tokenattributes {
          static PyObject *t_PayloadAttributeImpl_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PayloadAttributeImpl_instance_(PyTypeObject *type, PyObject *arg);
          static int t_PayloadAttributeImpl_init_(t_PayloadAttributeImpl *self, PyObject *args, PyObject *kwds);
          static PyObject *t_PayloadAttributeImpl_clear(t_PayloadAttributeImpl *self, PyObject *args);
          static PyObject *t_PayloadAttributeImpl_clone(t_PayloadAttributeImpl *self, PyObject *args);
          static PyObject *t_PayloadAttributeImpl_copyTo(t_PayloadAttributeImpl *self, PyObject *args);
          static PyObject *t_PayloadAttributeImpl_equals(t_PayloadAttributeImpl *self, PyObject *args);
          static PyObject *t_PayloadAttributeImpl_getPayload(t_PayloadAttributeImpl *self);
          static PyObject *t_PayloadAttributeImpl_hashCode(t_PayloadAttributeImpl *self, PyObject *args);
          static PyObject *t_PayloadAttributeImpl_setPayload(t_PayloadAttributeImpl *self, PyObject *arg);
          static PyObject *t_PayloadAttributeImpl_get__payload(t_PayloadAttributeImpl *self, void *data);
          static int t_PayloadAttributeImpl_set__payload(t_PayloadAttributeImpl *self, PyObject *arg, void *data);
          static PyGetSetDef t_PayloadAttributeImpl__fields_[] = {
            DECLARE_GETSET_FIELD(t_PayloadAttributeImpl, payload),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_PayloadAttributeImpl__methods_[] = {
            DECLARE_METHOD(t_PayloadAttributeImpl, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PayloadAttributeImpl, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PayloadAttributeImpl, clear, METH_VARARGS),
            DECLARE_METHOD(t_PayloadAttributeImpl, clone, METH_VARARGS),
            DECLARE_METHOD(t_PayloadAttributeImpl, copyTo, METH_VARARGS),
            DECLARE_METHOD(t_PayloadAttributeImpl, equals, METH_VARARGS),
            DECLARE_METHOD(t_PayloadAttributeImpl, getPayload, METH_NOARGS),
            DECLARE_METHOD(t_PayloadAttributeImpl, hashCode, METH_VARARGS),
            DECLARE_METHOD(t_PayloadAttributeImpl, setPayload, METH_O),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(PayloadAttributeImpl, t_PayloadAttributeImpl, ::org::apache::lucene::util::AttributeImpl, PayloadAttributeImpl, t_PayloadAttributeImpl_init_, 0, 0, t_PayloadAttributeImpl__fields_, 0, 0);

          void t_PayloadAttributeImpl::install(PyObject *module)
          {
            installType(&PY_TYPE(PayloadAttributeImpl), module, "PayloadAttributeImpl", 0);
          }

          void t_PayloadAttributeImpl::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(PayloadAttributeImpl).tp_dict, "class_", make_descriptor(PayloadAttributeImpl::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(PayloadAttributeImpl).tp_dict, "wrapfn_", make_descriptor(t_PayloadAttributeImpl::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(PayloadAttributeImpl).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_PayloadAttributeImpl_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, PayloadAttributeImpl::initializeClass, 1)))
              return NULL;
            return t_PayloadAttributeImpl::wrap_Object(PayloadAttributeImpl(((t_PayloadAttributeImpl *) arg)->object.this$));
          }
          static PyObject *t_PayloadAttributeImpl_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, PayloadAttributeImpl::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_PayloadAttributeImpl_init_(t_PayloadAttributeImpl *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 0:
              {
                PayloadAttributeImpl object((jobject) NULL);

                INT_CALL(object = PayloadAttributeImpl());
                self->object = object;
                break;
              }
              goto err;
             case 1:
              {
                ::org::apache::lucene::util::BytesRef a0((jobject) NULL);
                PayloadAttributeImpl object((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::util::BytesRef::initializeClass, &a0))
                {
                  INT_CALL(object = PayloadAttributeImpl(a0));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_PayloadAttributeImpl_clear(t_PayloadAttributeImpl *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.clear());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(PayloadAttributeImpl), (PyObject *) self, "clear", args, 2);
          }

          static PyObject *t_PayloadAttributeImpl_clone(t_PayloadAttributeImpl *self, PyObject *args)
          {
            PayloadAttributeImpl result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.clone());
              return t_PayloadAttributeImpl::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(PayloadAttributeImpl), (PyObject *) self, "clone", args, 2);
          }

          static PyObject *t_PayloadAttributeImpl_copyTo(t_PayloadAttributeImpl *self, PyObject *args)
          {
            ::org::apache::lucene::util::AttributeImpl a0((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::util::AttributeImpl::initializeClass, &a0))
            {
              OBJ_CALL(self->object.copyTo(a0));
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(PayloadAttributeImpl), (PyObject *) self, "copyTo", args, 2);
          }

          static PyObject *t_PayloadAttributeImpl_equals(t_PayloadAttributeImpl *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            jboolean result;

            if (!parseArgs(args, "o", &a0))
            {
              OBJ_CALL(result = self->object.equals(a0));
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(PayloadAttributeImpl), (PyObject *) self, "equals", args, 2);
          }

          static PyObject *t_PayloadAttributeImpl_getPayload(t_PayloadAttributeImpl *self)
          {
            ::org::apache::lucene::util::BytesRef result((jobject) NULL);
            OBJ_CALL(result = self->object.getPayload());
            return ::org::apache::lucene::util::t_BytesRef::wrap_Object(result);
          }

          static PyObject *t_PayloadAttributeImpl_hashCode(t_PayloadAttributeImpl *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.hashCode());
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(PayloadAttributeImpl), (PyObject *) self, "hashCode", args, 2);
          }

          static PyObject *t_PayloadAttributeImpl_setPayload(t_PayloadAttributeImpl *self, PyObject *arg)
          {
            ::org::apache::lucene::util::BytesRef a0((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::util::BytesRef::initializeClass, &a0))
            {
              OBJ_CALL(self->object.setPayload(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setPayload", arg);
            return NULL;
          }

          static PyObject *t_PayloadAttributeImpl_get__payload(t_PayloadAttributeImpl *self, void *data)
          {
            ::org::apache::lucene::util::BytesRef value((jobject) NULL);
            OBJ_CALL(value = self->object.getPayload());
            return ::org::apache::lucene::util::t_BytesRef::wrap_Object(value);
          }
          static int t_PayloadAttributeImpl_set__payload(t_PayloadAttributeImpl *self, PyObject *arg, void *data)
          {
            {
              ::org::apache::lucene::util::BytesRef value((jobject) NULL);
              if (!parseArg(arg, "k", ::org::apache::lucene::util::BytesRef::initializeClass, &value))
              {
                INT_CALL(self->object.setPayload(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "payload", arg);
            return -1;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/standard/builders/WildcardQueryNodeBuilder.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/QueryNode.h"
#include "org/apache/lucene/queryparser/flexible/core/QueryNodeException.h"
#include "org/apache/lucene/queryparser/flexible/standard/builders/StandardQueryBuilder.h"
#include "org/apache/lucene/search/WildcardQuery.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace builders {

              ::java::lang::Class *WildcardQueryNodeBuilder::class$ = NULL;
              jmethodID *WildcardQueryNodeBuilder::mids$ = NULL;
              bool WildcardQueryNodeBuilder::live$ = false;

              jclass WildcardQueryNodeBuilder::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/standard/builders/WildcardQueryNodeBuilder");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
                  mids$[mid_build_143b8b5f] = env->getMethodID(cls, "build", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;)Lorg/apache/lucene/search/WildcardQuery;");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              WildcardQueryNodeBuilder::WildcardQueryNodeBuilder() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

              ::org::apache::lucene::search::WildcardQuery WildcardQueryNodeBuilder::build(const ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode & a0) const
              {
                return ::org::apache::lucene::search::WildcardQuery(env->callObjectMethod(this$, mids$[mid_build_143b8b5f], a0.this$));
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace builders {
              static PyObject *t_WildcardQueryNodeBuilder_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_WildcardQueryNodeBuilder_instance_(PyTypeObject *type, PyObject *arg);
              static int t_WildcardQueryNodeBuilder_init_(t_WildcardQueryNodeBuilder *self, PyObject *args, PyObject *kwds);
              static PyObject *t_WildcardQueryNodeBuilder_build(t_WildcardQueryNodeBuilder *self, PyObject *arg);

              static PyMethodDef t_WildcardQueryNodeBuilder__methods_[] = {
                DECLARE_METHOD(t_WildcardQueryNodeBuilder, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_WildcardQueryNodeBuilder, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_WildcardQueryNodeBuilder, build, METH_O),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(WildcardQueryNodeBuilder, t_WildcardQueryNodeBuilder, ::java::lang::Object, WildcardQueryNodeBuilder, t_WildcardQueryNodeBuilder_init_, 0, 0, 0, 0, 0);

              void t_WildcardQueryNodeBuilder::install(PyObject *module)
              {
                installType(&PY_TYPE(WildcardQueryNodeBuilder), module, "WildcardQueryNodeBuilder", 0);
              }

              void t_WildcardQueryNodeBuilder::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(WildcardQueryNodeBuilder).tp_dict, "class_", make_descriptor(WildcardQueryNodeBuilder::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(WildcardQueryNodeBuilder).tp_dict, "wrapfn_", make_descriptor(t_WildcardQueryNodeBuilder::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(WildcardQueryNodeBuilder).tp_dict, "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_WildcardQueryNodeBuilder_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, WildcardQueryNodeBuilder::initializeClass, 1)))
                  return NULL;
                return t_WildcardQueryNodeBuilder::wrap_Object(WildcardQueryNodeBuilder(((t_WildcardQueryNodeBuilder *) arg)->object.this$));
              }
              static PyObject *t_WildcardQueryNodeBuilder_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, WildcardQueryNodeBuilder::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_WildcardQueryNodeBuilder_init_(t_WildcardQueryNodeBuilder *self, PyObject *args, PyObject *kwds)
              {
                WildcardQueryNodeBuilder object((jobject) NULL);

                INT_CALL(object = WildcardQueryNodeBuilder());
                self->object = object;

                return 0;
              }

              static PyObject *t_WildcardQueryNodeBuilder_build(t_WildcardQueryNodeBuilder *self, PyObject *arg)
              {
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode a0((jobject) NULL);
                ::org::apache::lucene::search::WildcardQuery result((jobject) NULL);

                if (!parseArg(arg, "k", ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode::initializeClass, &a0))
                {
                  OBJ_CALL(result = self->object.build(a0));
                  return ::org::apache::lucene::search::t_WildcardQuery::wrap_Object(result);
                }

                PyErr_SetArgsError((PyObject *) self, "build", arg);
                return NULL;
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queries/function/docvalues/DocTermsIndexDocValues$DocTermsIndexException.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace docvalues {

            ::java::lang::Class *DocTermsIndexDocValues$DocTermsIndexException::class$ = NULL;
            jmethodID *DocTermsIndexDocValues$DocTermsIndexException::mids$ = NULL;
            bool DocTermsIndexDocValues$DocTermsIndexException::live$ = false;

            jclass DocTermsIndexDocValues$DocTermsIndexException::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queries/function/docvalues/DocTermsIndexDocValues$DocTermsIndexException");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_df97be8c] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Ljava/lang/RuntimeException;)V");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            DocTermsIndexDocValues$DocTermsIndexException::DocTermsIndexDocValues$DocTermsIndexException(const ::java::lang::String & a0, const ::java::lang::RuntimeException & a1) : ::java::lang::RuntimeException(env->newObject(initializeClass, &mids$, mid_init$_df97be8c, a0.this$, a1.this$)) {}
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace docvalues {
            static PyObject *t_DocTermsIndexDocValues$DocTermsIndexException_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_DocTermsIndexDocValues$DocTermsIndexException_instance_(PyTypeObject *type, PyObject *arg);
            static int t_DocTermsIndexDocValues$DocTermsIndexException_init_(t_DocTermsIndexDocValues$DocTermsIndexException *self, PyObject *args, PyObject *kwds);

            static PyMethodDef t_DocTermsIndexDocValues$DocTermsIndexException__methods_[] = {
              DECLARE_METHOD(t_DocTermsIndexDocValues$DocTermsIndexException, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_DocTermsIndexDocValues$DocTermsIndexException, instance_, METH_O | METH_CLASS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(DocTermsIndexDocValues$DocTermsIndexException, t_DocTermsIndexDocValues$DocTermsIndexException, ::java::lang::RuntimeException, DocTermsIndexDocValues$DocTermsIndexException, t_DocTermsIndexDocValues$DocTermsIndexException_init_, 0, 0, 0, 0, 0);

            void t_DocTermsIndexDocValues$DocTermsIndexException::install(PyObject *module)
            {
              installType(&PY_TYPE(DocTermsIndexDocValues$DocTermsIndexException), module, "DocTermsIndexDocValues$DocTermsIndexException", 0);
            }

            void t_DocTermsIndexDocValues$DocTermsIndexException::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(DocTermsIndexDocValues$DocTermsIndexException).tp_dict, "class_", make_descriptor(DocTermsIndexDocValues$DocTermsIndexException::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(DocTermsIndexDocValues$DocTermsIndexException).tp_dict, "wrapfn_", make_descriptor(t_DocTermsIndexDocValues$DocTermsIndexException::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(DocTermsIndexDocValues$DocTermsIndexException).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_DocTermsIndexDocValues$DocTermsIndexException_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, DocTermsIndexDocValues$DocTermsIndexException::initializeClass, 1)))
                return NULL;
              return t_DocTermsIndexDocValues$DocTermsIndexException::wrap_Object(DocTermsIndexDocValues$DocTermsIndexException(((t_DocTermsIndexDocValues$DocTermsIndexException *) arg)->object.this$));
            }
            static PyObject *t_DocTermsIndexDocValues$DocTermsIndexException_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, DocTermsIndexDocValues$DocTermsIndexException::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_DocTermsIndexDocValues$DocTermsIndexException_init_(t_DocTermsIndexDocValues$DocTermsIndexException *self, PyObject *args, PyObject *kwds)
            {
              ::java::lang::String a0((jobject) NULL);
              ::java::lang::RuntimeException a1((jobject) NULL);
              DocTermsIndexDocValues$DocTermsIndexException object((jobject) NULL);

              if (!parseArgs(args, "sk", ::java::lang::RuntimeException::initializeClass, &a0, &a1))
              {
                INT_CALL(object = DocTermsIndexDocValues$DocTermsIndexException(a0, a1));
                self->object = object;
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/PostingsBaseFormat.h"
#include "org/apache/lucene/codecs/PostingsReaderBase.h"
#include "org/apache/lucene/index/SegmentReadState.h"
#include "org/apache/lucene/codecs/PostingsWriterBase.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "org/apache/lucene/index/SegmentWriteState.h"
#include "java/io/IOException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {

        ::java::lang::Class *PostingsBaseFormat::class$ = NULL;
        jmethodID *PostingsBaseFormat::mids$ = NULL;
        jfieldID *PostingsBaseFormat::fids$ = NULL;
        bool PostingsBaseFormat::live$ = false;

        jclass PostingsBaseFormat::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/PostingsBaseFormat");

            mids$ = new jmethodID[max_mid];
            mids$[mid_postingsReaderBase_927fb3f2] = env->getMethodID(cls, "postingsReaderBase", "(Lorg/apache/lucene/index/SegmentReadState;)Lorg/apache/lucene/codecs/PostingsReaderBase;");
            mids$[mid_postingsWriterBase_c1fe85c2] = env->getMethodID(cls, "postingsWriterBase", "(Lorg/apache/lucene/index/SegmentWriteState;)Lorg/apache/lucene/codecs/PostingsWriterBase;");

            fids$ = new jfieldID[max_fid];
            fids$[fid_name] = env->getFieldID(cls, "name", "Ljava/lang/String;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        ::org::apache::lucene::codecs::PostingsReaderBase PostingsBaseFormat::postingsReaderBase(const ::org::apache::lucene::index::SegmentReadState & a0) const
        {
          return ::org::apache::lucene::codecs::PostingsReaderBase(env->callObjectMethod(this$, mids$[mid_postingsReaderBase_927fb3f2], a0.this$));
        }

        ::org::apache::lucene::codecs::PostingsWriterBase PostingsBaseFormat::postingsWriterBase(const ::org::apache::lucene::index::SegmentWriteState & a0) const
        {
          return ::org::apache::lucene::codecs::PostingsWriterBase(env->callObjectMethod(this$, mids$[mid_postingsWriterBase_c1fe85c2], a0.this$));
        }

        ::java::lang::String PostingsBaseFormat::_get_name() const
        {
          return ::java::lang::String(env->getObjectField(this$, fids$[fid_name]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        static PyObject *t_PostingsBaseFormat_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_PostingsBaseFormat_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_PostingsBaseFormat_postingsReaderBase(t_PostingsBaseFormat *self, PyObject *arg);
        static PyObject *t_PostingsBaseFormat_postingsWriterBase(t_PostingsBaseFormat *self, PyObject *arg);
        static PyObject *t_PostingsBaseFormat_get__name(t_PostingsBaseFormat *self, void *data);

        static PyGetSetDef t_PostingsBaseFormat__fields_[] = {
          DECLARE_GET_FIELD(t_PostingsBaseFormat, name),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_PostingsBaseFormat__methods_[] = {
          DECLARE_METHOD(t_PostingsBaseFormat, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PostingsBaseFormat, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PostingsBaseFormat, postingsReaderBase, METH_O),
          DECLARE_METHOD(t_PostingsBaseFormat, postingsWriterBase, METH_O),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(PostingsBaseFormat, t_PostingsBaseFormat, ::java::lang::Object, PostingsBaseFormat, abstract_init, 0, 0, t_PostingsBaseFormat__fields_, 0, 0);

        void t_PostingsBaseFormat::install(PyObject *module)
        {
          installType(&PY_TYPE(PostingsBaseFormat), module, "PostingsBaseFormat", 0);
        }

        void t_PostingsBaseFormat::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(PostingsBaseFormat).tp_dict, "class_", make_descriptor(PostingsBaseFormat::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(PostingsBaseFormat).tp_dict, "wrapfn_", make_descriptor(t_PostingsBaseFormat::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(PostingsBaseFormat).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_PostingsBaseFormat_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, PostingsBaseFormat::initializeClass, 1)))
            return NULL;
          return t_PostingsBaseFormat::wrap_Object(PostingsBaseFormat(((t_PostingsBaseFormat *) arg)->object.this$));
        }
        static PyObject *t_PostingsBaseFormat_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, PostingsBaseFormat::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_PostingsBaseFormat_postingsReaderBase(t_PostingsBaseFormat *self, PyObject *arg)
        {
          ::org::apache::lucene::index::SegmentReadState a0((jobject) NULL);
          ::org::apache::lucene::codecs::PostingsReaderBase result((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::index::SegmentReadState::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.postingsReaderBase(a0));
            return ::org::apache::lucene::codecs::t_PostingsReaderBase::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "postingsReaderBase", arg);
          return NULL;
        }

        static PyObject *t_PostingsBaseFormat_postingsWriterBase(t_PostingsBaseFormat *self, PyObject *arg)
        {
          ::org::apache::lucene::index::SegmentWriteState a0((jobject) NULL);
          ::org::apache::lucene::codecs::PostingsWriterBase result((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::index::SegmentWriteState::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.postingsWriterBase(a0));
            return ::org::apache::lucene::codecs::t_PostingsWriterBase::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "postingsWriterBase", arg);
          return NULL;
        }

        static PyObject *t_PostingsBaseFormat_get__name(t_PostingsBaseFormat *self, void *data)
        {
          ::java::lang::String value((jobject) NULL);
          OBJ_CALL(value = self->object._get_name());
          return j2p(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/tokenattributes/FlagsAttribute.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace tokenattributes {

          ::java::lang::Class *FlagsAttribute::class$ = NULL;
          jmethodID *FlagsAttribute::mids$ = NULL;
          bool FlagsAttribute::live$ = false;

          jclass FlagsAttribute::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/tokenattributes/FlagsAttribute");

              mids$ = new jmethodID[max_mid];
              mids$[mid_getFlags_54c6a179] = env->getMethodID(cls, "getFlags", "()I");
              mids$[mid_setFlags_39c7bd3c] = env->getMethodID(cls, "setFlags", "(I)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          jint FlagsAttribute::getFlags() const
          {
            return env->callIntMethod(this$, mids$[mid_getFlags_54c6a179]);
          }

          void FlagsAttribute::setFlags(jint a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setFlags_39c7bd3c], a0);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace tokenattributes {
          static PyObject *t_FlagsAttribute_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_FlagsAttribute_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_FlagsAttribute_getFlags(t_FlagsAttribute *self);
          static PyObject *t_FlagsAttribute_setFlags(t_FlagsAttribute *self, PyObject *arg);
          static PyObject *t_FlagsAttribute_get__flags(t_FlagsAttribute *self, void *data);
          static int t_FlagsAttribute_set__flags(t_FlagsAttribute *self, PyObject *arg, void *data);
          static PyGetSetDef t_FlagsAttribute__fields_[] = {
            DECLARE_GETSET_FIELD(t_FlagsAttribute, flags),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_FlagsAttribute__methods_[] = {
            DECLARE_METHOD(t_FlagsAttribute, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FlagsAttribute, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FlagsAttribute, getFlags, METH_NOARGS),
            DECLARE_METHOD(t_FlagsAttribute, setFlags, METH_O),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(FlagsAttribute, t_FlagsAttribute, ::org::apache::lucene::util::Attribute, FlagsAttribute, abstract_init, 0, 0, t_FlagsAttribute__fields_, 0, 0);

          void t_FlagsAttribute::install(PyObject *module)
          {
            installType(&PY_TYPE(FlagsAttribute), module, "FlagsAttribute", 0);
          }

          void t_FlagsAttribute::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(FlagsAttribute).tp_dict, "class_", make_descriptor(FlagsAttribute::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(FlagsAttribute).tp_dict, "wrapfn_", make_descriptor(t_FlagsAttribute::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(FlagsAttribute).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_FlagsAttribute_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, FlagsAttribute::initializeClass, 1)))
              return NULL;
            return t_FlagsAttribute::wrap_Object(FlagsAttribute(((t_FlagsAttribute *) arg)->object.this$));
          }
          static PyObject *t_FlagsAttribute_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, FlagsAttribute::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_FlagsAttribute_getFlags(t_FlagsAttribute *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getFlags());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_FlagsAttribute_setFlags(t_FlagsAttribute *self, PyObject *arg)
          {
            jint a0;

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(self->object.setFlags(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setFlags", arg);
            return NULL;
          }

          static PyObject *t_FlagsAttribute_get__flags(t_FlagsAttribute *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getFlags());
            return PyInt_FromLong((long) value);
          }
          static int t_FlagsAttribute_set__flags(t_FlagsAttribute *self, PyObject *arg, void *data)
          {
            {
              jint value;
              if (!parseArg(arg, "I", &value))
              {
                INT_CALL(self->object.setFlags(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "flags", arg);
            return -1;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/expressions/js/JavascriptParser$equality_return.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace expressions {
        namespace js {

          ::java::lang::Class *JavascriptParser$equality_return::class$ = NULL;
          jmethodID *JavascriptParser$equality_return::mids$ = NULL;
          bool JavascriptParser$equality_return::live$ = false;

          jclass JavascriptParser$equality_return::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/expressions/js/JavascriptParser$equality_return");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          JavascriptParser$equality_return::JavascriptParser$equality_return() : ::org::antlr::runtime::ParserRuleReturnScope(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace expressions {
        namespace js {
          static PyObject *t_JavascriptParser$equality_return_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_JavascriptParser$equality_return_instance_(PyTypeObject *type, PyObject *arg);
          static int t_JavascriptParser$equality_return_init_(t_JavascriptParser$equality_return *self, PyObject *args, PyObject *kwds);

          static PyMethodDef t_JavascriptParser$equality_return__methods_[] = {
            DECLARE_METHOD(t_JavascriptParser$equality_return, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_JavascriptParser$equality_return, instance_, METH_O | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(JavascriptParser$equality_return, t_JavascriptParser$equality_return, ::org::antlr::runtime::ParserRuleReturnScope, JavascriptParser$equality_return, t_JavascriptParser$equality_return_init_, 0, 0, 0, 0, 0);

          void t_JavascriptParser$equality_return::install(PyObject *module)
          {
            installType(&PY_TYPE(JavascriptParser$equality_return), module, "JavascriptParser$equality_return", 0);
          }

          void t_JavascriptParser$equality_return::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(JavascriptParser$equality_return).tp_dict, "class_", make_descriptor(JavascriptParser$equality_return::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(JavascriptParser$equality_return).tp_dict, "wrapfn_", make_descriptor(t_JavascriptParser$equality_return::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(JavascriptParser$equality_return).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_JavascriptParser$equality_return_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, JavascriptParser$equality_return::initializeClass, 1)))
              return NULL;
            return t_JavascriptParser$equality_return::wrap_Object(JavascriptParser$equality_return(((t_JavascriptParser$equality_return *) arg)->object.this$));
          }
          static PyObject *t_JavascriptParser$equality_return_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, JavascriptParser$equality_return::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_JavascriptParser$equality_return_init_(t_JavascriptParser$equality_return *self, PyObject *args, PyObject *kwds)
          {
            JavascriptParser$equality_return object((jobject) NULL);

            INT_CALL(object = JavascriptParser$equality_return());
            self->object = object;

            return 0;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/position/PositionFilterFactory.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "org/apache/lucene/analysis/position/PositionFilter.h"
#include "java/lang/String.h"
#include "java/util/Map.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace position {

          ::java::lang::Class *PositionFilterFactory::class$ = NULL;
          jmethodID *PositionFilterFactory::mids$ = NULL;
          bool PositionFilterFactory::live$ = false;

          jclass PositionFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/position/PositionFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4c9e2b1c] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_17e0c763] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/position/PositionFilter;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          PositionFilterFactory::PositionFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_4c9e2b1c, a0.this$)) {}

          ::org::apache::lucene::analysis::position::PositionFilter PositionFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::position::PositionFilter(env->callObjectMethod(this$, mids$[mid_create_17e0c763], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace position {
          static PyObject *t_PositionFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PositionFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_PositionFilterFactory_init_(t_PositionFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_PositionFilterFactory_create(t_PositionFilterFactory *self, PyObject *args);

          static PyMethodDef t_PositionFilterFactory__methods_[] = {
            DECLARE_METHOD(t_PositionFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PositionFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PositionFilterFactory, create, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(PositionFilterFactory, t_PositionFilterFactory, ::org::apache::lucene::analysis::util::TokenFilterFactory, PositionFilterFactory, t_PositionFilterFactory_init_, 0, 0, 0, 0, 0);

          void t_PositionFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(PositionFilterFactory), module, "PositionFilterFactory", 0);
          }

          void t_PositionFilterFactory::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(PositionFilterFactory).tp_dict, "class_", make_descriptor(PositionFilterFactory::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(PositionFilterFactory).tp_dict, "wrapfn_", make_descriptor(t_PositionFilterFactory::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(PositionFilterFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_PositionFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, PositionFilterFactory::initializeClass, 1)))
              return NULL;
            return t_PositionFilterFactory::wrap_Object(PositionFilterFactory(((t_PositionFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_PositionFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, PositionFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_PositionFilterFactory_init_(t_PositionFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            PositionFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = PositionFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_PositionFilterFactory_create(t_PositionFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::position::PositionFilter result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::position::t_PositionFilter::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(PositionFilterFactory), (PyObject *) self, "create", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/automaton/Automaton.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/util/automaton/State.h"
#include "java/lang/String.h"
#include "java/util/Collection.h"
#include "java/util/Set.h"
#include "java/lang/Cloneable.h"
#include "org/apache/lucene/util/automaton/Transition.h"
#include "java/util/List.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace automaton {

          ::java::lang::Class *Automaton::class$ = NULL;
          jmethodID *Automaton::mids$ = NULL;
          bool Automaton::live$ = false;
          jint Automaton::MINIMIZE_HOPCROFT = (jint) 0;

          jclass Automaton::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/util/automaton/Automaton");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_init$_931bc953] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/automaton/State;)V");
              mids$[mid_clearNumberedStates_54c6a166] = env->getMethodID(cls, "clearNumberedStates", "()V");
              mids$[mid_clone_9b0d5999] = env->getMethodID(cls, "clone", "()Lorg/apache/lucene/util/automaton/Automaton;");
              mids$[mid_complement_9b0d5999] = env->getMethodID(cls, "complement", "()Lorg/apache/lucene/util/automaton/Automaton;");
              mids$[mid_concatenate_3449867a] = env->getStaticMethodID(cls, "concatenate", "(Ljava/util/List;)Lorg/apache/lucene/util/automaton/Automaton;");
              mids$[mid_concatenate_7aca8e1f] = env->getMethodID(cls, "concatenate", "(Lorg/apache/lucene/util/automaton/Automaton;)Lorg/apache/lucene/util/automaton/Automaton;");
              mids$[mid_determinize_54c6a166] = env->getMethodID(cls, "determinize", "()V");
              mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
              mids$[mid_expandSingleton_54c6a166] = env->getMethodID(cls, "expandSingleton", "()V");
              mids$[mid_getAcceptStates_03e99967] = env->getMethodID(cls, "getAcceptStates", "()Ljava/util/Set;");
              mids$[mid_getInfo_846352c3] = env->getMethodID(cls, "getInfo", "()Ljava/lang/Object;");
              mids$[mid_getInitialState_0b46b0b2] = env->getMethodID(cls, "getInitialState", "()Lorg/apache/lucene/util/automaton/State;");
              mids$[mid_getNumberOfStates_54c6a179] = env->getMethodID(cls, "getNumberOfStates", "()I");
              mids$[mid_getNumberOfTransitions_54c6a179] = env->getMethodID(cls, "getNumberOfTransitions", "()I");
              mids$[mid_getNumberedStates_b3b8db1a] = env->getMethodID(cls, "getNumberedStates", "()[Lorg/apache/lucene/util/automaton/State;");
              mids$[mid_getSingleton_14c7b5c5] = env->getMethodID(cls, "getSingleton", "()Ljava/lang/String;");
              mids$[mid_getSortedTransitions_14b6b645] = env->getMethodID(cls, "getSortedTransitions", "()[[Lorg/apache/lucene/util/automaton/Transition;");
              mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
              mids$[mid_intersection_7aca8e1f] = env->getMethodID(cls, "intersection", "(Lorg/apache/lucene/util/automaton/Automaton;)Lorg/apache/lucene/util/automaton/Automaton;");
              mids$[mid_isDeterministic_54c6a16a] = env->getMethodID(cls, "isDeterministic", "()Z");
              mids$[mid_isEmptyString_54c6a16a] = env->getMethodID(cls, "isEmptyString", "()Z");
              mids$[mid_minimize_7aca8e1f] = env->getStaticMethodID(cls, "minimize", "(Lorg/apache/lucene/util/automaton/Automaton;)Lorg/apache/lucene/util/automaton/Automaton;");
              mids$[mid_minus_7aca8e1f] = env->getMethodID(cls, "minus", "(Lorg/apache/lucene/util/automaton/Automaton;)Lorg/apache/lucene/util/automaton/Automaton;");
              mids$[mid_optional_9b0d5999] = env->getMethodID(cls, "optional", "()Lorg/apache/lucene/util/automaton/Automaton;");
              mids$[mid_reduce_54c6a166] = env->getMethodID(cls, "reduce", "()V");
              mids$[mid_removeDeadTransitions_54c6a166] = env->getMethodID(cls, "removeDeadTransitions", "()V");
              mids$[mid_repeat_9b0d5999] = env->getMethodID(cls, "repeat", "()Lorg/apache/lucene/util/automaton/Automaton;");
              mids$[mid_repeat_d5b8a843] = env->getMethodID(cls, "repeat", "(I)Lorg/apache/lucene/util/automaton/Automaton;");
              mids$[mid_repeat_42dcb2dd] = env->getMethodID(cls, "repeat", "(II)Lorg/apache/lucene/util/automaton/Automaton;");
              mids$[mid_restoreInvariant_54c6a166] = env->getMethodID(cls, "restoreInvariant", "()V");
              mids$[mid_setAllowMutate_bb0c7673] = env->getStaticMethodID(cls, "setAllowMutate", "(Z)Z");
              mids$[mid_setDeterministic_bb0c767f] = env->getMethodID(cls, "setDeterministic", "(Z)V");
              mids$[mid_setInfo_290588ee] = env->getMethodID(cls, "setInfo", "(Ljava/lang/Object;)V");
              mids$[mid_setMinimization_39c7bd3c] = env->getStaticMethodID(cls, "setMinimization", "(I)V");
              mids$[mid_setMinimizeAlways_bb0c767f] = env->getStaticMethodID(cls, "setMinimizeAlways", "(Z)V");
              mids$[mid_setNumberedStates_77bb44b7] = env->getMethodID(cls, "setNumberedStates", "([Lorg/apache/lucene/util/automaton/State;)V");
              mids$[mid_setNumberedStates_4364f077] = env->getMethodID(cls, "setNumberedStates", "([Lorg/apache/lucene/util/automaton/State;I)V");
              mids$[mid_subsetOf_fc7cf398] = env->getMethodID(cls, "subsetOf", "(Lorg/apache/lucene/util/automaton/Automaton;)Z");
              mids$[mid_toDot_14c7b5c5] = env->getMethodID(cls, "toDot", "()Ljava/lang/String;");
              mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");
              mids$[mid_union_40d33194] = env->getStaticMethodID(cls, "union", "(Ljava/util/Collection;)Lorg/apache/lucene/util/automaton/Automaton;");
              mids$[mid_union_7aca8e1f] = env->getMethodID(cls, "union", "(Lorg/apache/lucene/util/automaton/Automaton;)Lorg/apache/lucene/util/automaton/Automaton;");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              MINIMIZE_HOPCROFT = env->getStaticIntField(cls, "MINIMIZE_HOPCROFT");
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          Automaton::Automaton() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          Automaton::Automaton(const ::org::apache::lucene::util::automaton::State & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_931bc953, a0.this$)) {}

          void Automaton::clearNumberedStates() const
          {
            env->callVoidMethod(this$, mids$[mid_clearNumberedStates_54c6a166]);
          }

          Automaton Automaton::clone() const
          {
            return Automaton(env->callObjectMethod(this$, mids$[mid_clone_9b0d5999]));
          }

          Automaton Automaton::complement() const
          {
            return Automaton(env->callObjectMethod(this$, mids$[mid_complement_9b0d5999]));
          }

          Automaton Automaton::concatenate(const ::java::util::List & a0)
          {
            jclass cls = env->getClass(initializeClass);
            return Automaton(env->callStaticObjectMethod(cls, mids$[mid_concatenate_3449867a], a0.this$));
          }

          Automaton Automaton::concatenate(const Automaton & a0) const
          {
            return Automaton(env->callObjectMethod(this$, mids$[mid_concatenate_7aca8e1f], a0.this$));
          }

          void Automaton::determinize() const
          {
            env->callVoidMethod(this$, mids$[mid_determinize_54c6a166]);
          }

          jboolean Automaton::equals(const ::java::lang::Object & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
          }

          void Automaton::expandSingleton() const
          {
            env->callVoidMethod(this$, mids$[mid_expandSingleton_54c6a166]);
          }

          ::java::util::Set Automaton::getAcceptStates() const
          {
            return ::java::util::Set(env->callObjectMethod(this$, mids$[mid_getAcceptStates_03e99967]));
          }

          ::java::lang::Object Automaton::getInfo() const
          {
            return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_getInfo_846352c3]));
          }

          ::org::apache::lucene::util::automaton::State Automaton::getInitialState() const
          {
            return ::org::apache::lucene::util::automaton::State(env->callObjectMethod(this$, mids$[mid_getInitialState_0b46b0b2]));
          }

          jint Automaton::getNumberOfStates() const
          {
            return env->callIntMethod(this$, mids$[mid_getNumberOfStates_54c6a179]);
          }

          jint Automaton::getNumberOfTransitions() const
          {
            return env->callIntMethod(this$, mids$[mid_getNumberOfTransitions_54c6a179]);
          }

          JArray< ::org::apache::lucene::util::automaton::State > Automaton::getNumberedStates() const
          {
            return JArray< ::org::apache::lucene::util::automaton::State >(env->callObjectMethod(this$, mids$[mid_getNumberedStates_b3b8db1a]));
          }

          ::java::lang::String Automaton::getSingleton() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getSingleton_14c7b5c5]));
          }

          JArray< JArray< ::org::apache::lucene::util::automaton::Transition > > Automaton::getSortedTransitions() const
          {
            return JArray< JArray< ::org::apache::lucene::util::automaton::Transition > >(env->callObjectMethod(this$, mids$[mid_getSortedTransitions_14b6b645]));
          }

          jint Automaton::hashCode() const
          {
            return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
          }

          Automaton Automaton::intersection(const Automaton & a0) const
          {
            return Automaton(env->callObjectMethod(this$, mids$[mid_intersection_7aca8e1f], a0.this$));
          }

          jboolean Automaton::isDeterministic() const
          {
            return env->callBooleanMethod(this$, mids$[mid_isDeterministic_54c6a16a]);
          }

          jboolean Automaton::isEmptyString() const
          {
            return env->callBooleanMethod(this$, mids$[mid_isEmptyString_54c6a16a]);
          }

          Automaton Automaton::minimize(const Automaton & a0)
          {
            jclass cls = env->getClass(initializeClass);
            return Automaton(env->callStaticObjectMethod(cls, mids$[mid_minimize_7aca8e1f], a0.this$));
          }

          Automaton Automaton::minus(const Automaton & a0) const
          {
            return Automaton(env->callObjectMethod(this$, mids$[mid_minus_7aca8e1f], a0.this$));
          }

          Automaton Automaton::optional() const
          {
            return Automaton(env->callObjectMethod(this$, mids$[mid_optional_9b0d5999]));
          }

          void Automaton::reduce() const
          {
            env->callVoidMethod(this$, mids$[mid_reduce_54c6a166]);
          }

          void Automaton::removeDeadTransitions() const
          {
            env->callVoidMethod(this$, mids$[mid_removeDeadTransitions_54c6a166]);
          }

          Automaton Automaton::repeat() const
          {
            return Automaton(env->callObjectMethod(this$, mids$[mid_repeat_9b0d5999]));
          }

          Automaton Automaton::repeat(jint a0) const
          {
            return Automaton(env->callObjectMethod(this$, mids$[mid_repeat_d5b8a843], a0));
          }

          Automaton Automaton::repeat(jint a0, jint a1) const
          {
            return Automaton(env->callObjectMethod(this$, mids$[mid_repeat_42dcb2dd], a0, a1));
          }

          void Automaton::restoreInvariant() const
          {
            env->callVoidMethod(this$, mids$[mid_restoreInvariant_54c6a166]);
          }

          jboolean Automaton::setAllowMutate(jboolean a0)
          {
            jclass cls = env->getClass(initializeClass);
            return env->callStaticBooleanMethod(cls, mids$[mid_setAllowMutate_bb0c7673], a0);
          }

          void Automaton::setDeterministic(jboolean a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setDeterministic_bb0c767f], a0);
          }

          void Automaton::setInfo(const ::java::lang::Object & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setInfo_290588ee], a0.this$);
          }

          void Automaton::setMinimization(jint a0)
          {
            jclass cls = env->getClass(initializeClass);
            env->callStaticVoidMethod(cls, mids$[mid_setMinimization_39c7bd3c], a0);
          }

          void Automaton::setMinimizeAlways(jboolean a0)
          {
            jclass cls = env->getClass(initializeClass);
            env->callStaticVoidMethod(cls, mids$[mid_setMinimizeAlways_bb0c767f], a0);
          }

          void Automaton::setNumberedStates(const JArray< ::org::apache::lucene::util::automaton::State > & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setNumberedStates_77bb44b7], a0.this$);
          }

          void Automaton::setNumberedStates(const JArray< ::org::apache::lucene::util::automaton::State > & a0, jint a1) const
          {
            env->callVoidMethod(this$, mids$[mid_setNumberedStates_4364f077], a0.this$, a1);
          }

          jboolean Automaton::subsetOf(const Automaton & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_subsetOf_fc7cf398], a0.this$);
          }

          ::java::lang::String Automaton::toDot() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toDot_14c7b5c5]));
          }

          ::java::lang::String Automaton::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
          }

          Automaton Automaton::union$(const ::java::util::Collection & a0)
          {
            jclass cls = env->getClass(initializeClass);
            return Automaton(env->callStaticObjectMethod(cls, mids$[mid_union_40d33194], a0.this$));
          }

          Automaton Automaton::union$(const Automaton & a0) const
          {
            return Automaton(env->callObjectMethod(this$, mids$[mid_union_7aca8e1f], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace automaton {
          static PyObject *t_Automaton_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Automaton_instance_(PyTypeObject *type, PyObject *arg);
          static int t_Automaton_init_(t_Automaton *self, PyObject *args, PyObject *kwds);
          static PyObject *t_Automaton_clearNumberedStates(t_Automaton *self);
          static PyObject *t_Automaton_clone(t_Automaton *self);
          static PyObject *t_Automaton_complement(t_Automaton *self);
          static PyObject *t_Automaton_concatenate(t_Automaton *self, PyObject *arg);
          static PyObject *t_Automaton_concatenate_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Automaton_determinize(t_Automaton *self);
          static PyObject *t_Automaton_equals(t_Automaton *self, PyObject *args);
          static PyObject *t_Automaton_expandSingleton(t_Automaton *self);
          static PyObject *t_Automaton_getAcceptStates(t_Automaton *self);
          static PyObject *t_Automaton_getInfo(t_Automaton *self);
          static PyObject *t_Automaton_getInitialState(t_Automaton *self);
          static PyObject *t_Automaton_getNumberOfStates(t_Automaton *self);
          static PyObject *t_Automaton_getNumberOfTransitions(t_Automaton *self);
          static PyObject *t_Automaton_getNumberedStates(t_Automaton *self);
          static PyObject *t_Automaton_getSingleton(t_Automaton *self);
          static PyObject *t_Automaton_getSortedTransitions(t_Automaton *self);
          static PyObject *t_Automaton_hashCode(t_Automaton *self, PyObject *args);
          static PyObject *t_Automaton_intersection(t_Automaton *self, PyObject *arg);
          static PyObject *t_Automaton_isDeterministic(t_Automaton *self);
          static PyObject *t_Automaton_isEmptyString(t_Automaton *self);
          static PyObject *t_Automaton_minimize(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Automaton_minus(t_Automaton *self, PyObject *arg);
          static PyObject *t_Automaton_optional(t_Automaton *self);
          static PyObject *t_Automaton_reduce(t_Automaton *self);
          static PyObject *t_Automaton_removeDeadTransitions(t_Automaton *self);
          static PyObject *t_Automaton_repeat(t_Automaton *self, PyObject *args);
          static PyObject *t_Automaton_restoreInvariant(t_Automaton *self);
          static PyObject *t_Automaton_setAllowMutate(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Automaton_setDeterministic(t_Automaton *self, PyObject *arg);
          static PyObject *t_Automaton_setInfo(t_Automaton *self, PyObject *arg);
          static PyObject *t_Automaton_setMinimization(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Automaton_setMinimizeAlways(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Automaton_setNumberedStates(t_Automaton *self, PyObject *args);
          static PyObject *t_Automaton_subsetOf(t_Automaton *self, PyObject *arg);
          static PyObject *t_Automaton_toDot(t_Automaton *self);
          static PyObject *t_Automaton_toString(t_Automaton *self, PyObject *args);
          static PyObject *t_Automaton_union(t_Automaton *self, PyObject *arg);
          static PyObject *t_Automaton_union_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Automaton_get__acceptStates(t_Automaton *self, void *data);
          static int t_Automaton_set__allowMutate(t_Automaton *self, PyObject *arg, void *data);
          static PyObject *t_Automaton_get__deterministic(t_Automaton *self, void *data);
          static int t_Automaton_set__deterministic(t_Automaton *self, PyObject *arg, void *data);
          static PyObject *t_Automaton_get__emptyString(t_Automaton *self, void *data);
          static PyObject *t_Automaton_get__info(t_Automaton *self, void *data);
          static int t_Automaton_set__info(t_Automaton *self, PyObject *arg, void *data);
          static PyObject *t_Automaton_get__initialState(t_Automaton *self, void *data);
          static int t_Automaton_set__minimization(t_Automaton *self, PyObject *arg, void *data);
          static int t_Automaton_set__minimizeAlways(t_Automaton *self, PyObject *arg, void *data);
          static PyObject *t_Automaton_get__numberOfStates(t_Automaton *self, void *data);
          static PyObject *t_Automaton_get__numberOfTransitions(t_Automaton *self, void *data);
          static PyObject *t_Automaton_get__numberedStates(t_Automaton *self, void *data);
          static int t_Automaton_set__numberedStates(t_Automaton *self, PyObject *arg, void *data);
          static PyObject *t_Automaton_get__singleton(t_Automaton *self, void *data);
          static PyObject *t_Automaton_get__sortedTransitions(t_Automaton *self, void *data);
          static PyGetSetDef t_Automaton__fields_[] = {
            DECLARE_GET_FIELD(t_Automaton, acceptStates),
            DECLARE_SET_FIELD(t_Automaton, allowMutate),
            DECLARE_GETSET_FIELD(t_Automaton, deterministic),
            DECLARE_GET_FIELD(t_Automaton, emptyString),
            DECLARE_GETSET_FIELD(t_Automaton, info),
            DECLARE_GET_FIELD(t_Automaton, initialState),
            DECLARE_SET_FIELD(t_Automaton, minimization),
            DECLARE_SET_FIELD(t_Automaton, minimizeAlways),
            DECLARE_GET_FIELD(t_Automaton, numberOfStates),
            DECLARE_GET_FIELD(t_Automaton, numberOfTransitions),
            DECLARE_GETSET_FIELD(t_Automaton, numberedStates),
            DECLARE_GET_FIELD(t_Automaton, singleton),
            DECLARE_GET_FIELD(t_Automaton, sortedTransitions),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_Automaton__methods_[] = {
            DECLARE_METHOD(t_Automaton, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Automaton, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Automaton, clearNumberedStates, METH_NOARGS),
            DECLARE_METHOD(t_Automaton, clone, METH_NOARGS),
            DECLARE_METHOD(t_Automaton, complement, METH_NOARGS),
            DECLARE_METHOD(t_Automaton, concatenate, METH_O),
            DECLARE_METHOD(t_Automaton, concatenate_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Automaton, determinize, METH_NOARGS),
            DECLARE_METHOD(t_Automaton, equals, METH_VARARGS),
            DECLARE_METHOD(t_Automaton, expandSingleton, METH_NOARGS),
            DECLARE_METHOD(t_Automaton, getAcceptStates, METH_NOARGS),
            DECLARE_METHOD(t_Automaton, getInfo, METH_NOARGS),
            DECLARE_METHOD(t_Automaton, getInitialState, METH_NOARGS),
            DECLARE_METHOD(t_Automaton, getNumberOfStates, METH_NOARGS),
            DECLARE_METHOD(t_Automaton, getNumberOfTransitions, METH_NOARGS),
            DECLARE_METHOD(t_Automaton, getNumberedStates, METH_NOARGS),
            DECLARE_METHOD(t_Automaton, getSingleton, METH_NOARGS),
            DECLARE_METHOD(t_Automaton, getSortedTransitions, METH_NOARGS),
            DECLARE_METHOD(t_Automaton, hashCode, METH_VARARGS),
            DECLARE_METHOD(t_Automaton, intersection, METH_O),
            DECLARE_METHOD(t_Automaton, isDeterministic, METH_NOARGS),
            DECLARE_METHOD(t_Automaton, isEmptyString, METH_NOARGS),
            DECLARE_METHOD(t_Automaton, minimize, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Automaton, minus, METH_O),
            DECLARE_METHOD(t_Automaton, optional, METH_NOARGS),
            DECLARE_METHOD(t_Automaton, reduce, METH_NOARGS),
            DECLARE_METHOD(t_Automaton, removeDeadTransitions, METH_NOARGS),
            DECLARE_METHOD(t_Automaton, repeat, METH_VARARGS),
            DECLARE_METHOD(t_Automaton, restoreInvariant, METH_NOARGS),
            DECLARE_METHOD(t_Automaton, setAllowMutate, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Automaton, setDeterministic, METH_O),
            DECLARE_METHOD(t_Automaton, setInfo, METH_O),
            DECLARE_METHOD(t_Automaton, setMinimization, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Automaton, setMinimizeAlways, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Automaton, setNumberedStates, METH_VARARGS),
            DECLARE_METHOD(t_Automaton, subsetOf, METH_O),
            DECLARE_METHOD(t_Automaton, toDot, METH_NOARGS),
            DECLARE_METHOD(t_Automaton, toString, METH_VARARGS),
            DECLARE_METHOD(t_Automaton, union, METH_O),
            DECLARE_METHOD(t_Automaton, union_, METH_O | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(Automaton, t_Automaton, ::java::lang::Object, Automaton, t_Automaton_init_, 0, 0, t_Automaton__fields_, 0, 0);

          void t_Automaton::install(PyObject *module)
          {
            installType(&PY_TYPE(Automaton), module, "Automaton", 0);
          }

          void t_Automaton::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(Automaton).tp_dict, "class_", make_descriptor(Automaton::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(Automaton).tp_dict, "wrapfn_", make_descriptor(t_Automaton::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(Automaton).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(Automaton::initializeClass);
            PyDict_SetItemString(PY_TYPE(Automaton).tp_dict, "MINIMIZE_HOPCROFT", make_descriptor(Automaton::MINIMIZE_HOPCROFT));
          }

          static PyObject *t_Automaton_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, Automaton::initializeClass, 1)))
              return NULL;
            return t_Automaton::wrap_Object(Automaton(((t_Automaton *) arg)->object.this$));
          }
          static PyObject *t_Automaton_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, Automaton::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_Automaton_init_(t_Automaton *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 0:
              {
                Automaton object((jobject) NULL);

                INT_CALL(object = Automaton());
                self->object = object;
                break;
              }
              goto err;
             case 1:
              {
                ::org::apache::lucene::util::automaton::State a0((jobject) NULL);
                Automaton object((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::util::automaton::State::initializeClass, &a0))
                {
                  INT_CALL(object = Automaton(a0));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_Automaton_clearNumberedStates(t_Automaton *self)
          {
            OBJ_CALL(self->object.clearNumberedStates());
            Py_RETURN_NONE;
          }

          static PyObject *t_Automaton_clone(t_Automaton *self)
          {
            Automaton result((jobject) NULL);
            OBJ_CALL(result = self->object.clone());
            return t_Automaton::wrap_Object(result);
          }

          static PyObject *t_Automaton_complement(t_Automaton *self)
          {
            Automaton result((jobject) NULL);
            OBJ_CALL(result = self->object.complement());
            return t_Automaton::wrap_Object(result);
          }

          static PyObject *t_Automaton_concatenate(t_Automaton *self, PyObject *arg)
          {
            Automaton a0((jobject) NULL);
            Automaton result((jobject) NULL);

            if (!parseArg(arg, "k", Automaton::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.concatenate(a0));
              return t_Automaton::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "concatenate", arg);
            return NULL;
          }

          static PyObject *t_Automaton_concatenate_(PyTypeObject *type, PyObject *arg)
          {
            ::java::util::List a0((jobject) NULL);
            PyTypeObject **p0;
            Automaton result((jobject) NULL);

            if (!parseArg(arg, "K", ::java::util::List::initializeClass, &a0, &p0, ::java::util::t_List::parameters_))
            {
              OBJ_CALL(result = ::org::apache::lucene::util::automaton::Automaton::concatenate(a0));
              return t_Automaton::wrap_Object(result);
            }

            PyErr_SetArgsError(type, "concatenate_", arg);
            return NULL;
          }

          static PyObject *t_Automaton_determinize(t_Automaton *self)
          {
            OBJ_CALL(self->object.determinize());
            Py_RETURN_NONE;
          }

          static PyObject *t_Automaton_equals(t_Automaton *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            jboolean result;

            if (!parseArgs(args, "o", &a0))
            {
              OBJ_CALL(result = self->object.equals(a0));
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(Automaton), (PyObject *) self, "equals", args, 2);
          }

          static PyObject *t_Automaton_expandSingleton(t_Automaton *self)
          {
            OBJ_CALL(self->object.expandSingleton());
            Py_RETURN_NONE;
          }

          static PyObject *t_Automaton_getAcceptStates(t_Automaton *self)
          {
            ::java::util::Set result((jobject) NULL);
            OBJ_CALL(result = self->object.getAcceptStates());
            return ::java::util::t_Set::wrap_Object(result, &::org::apache::lucene::util::automaton::PY_TYPE(State));
          }

          static PyObject *t_Automaton_getInfo(t_Automaton *self)
          {
            ::java::lang::Object result((jobject) NULL);
            OBJ_CALL(result = self->object.getInfo());
            return ::java::lang::t_Object::wrap_Object(result);
          }

          static PyObject *t_Automaton_getInitialState(t_Automaton *self)
          {
            ::org::apache::lucene::util::automaton::State result((jobject) NULL);
            OBJ_CALL(result = self->object.getInitialState());
            return ::org::apache::lucene::util::automaton::t_State::wrap_Object(result);
          }

          static PyObject *t_Automaton_getNumberOfStates(t_Automaton *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getNumberOfStates());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_Automaton_getNumberOfTransitions(t_Automaton *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getNumberOfTransitions());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_Automaton_getNumberedStates(t_Automaton *self)
          {
            JArray< ::org::apache::lucene::util::automaton::State > result((jobject) NULL);
            OBJ_CALL(result = self->object.getNumberedStates());
            return JArray<jobject>(result.this$).wrap(::org::apache::lucene::util::automaton::t_State::wrap_jobject);
          }

          static PyObject *t_Automaton_getSingleton(t_Automaton *self)
          {
            ::java::lang::String result((jobject) NULL);
            OBJ_CALL(result = self->object.getSingleton());
            return j2p(result);
          }

          static PyObject *t_Automaton_getSortedTransitions(t_Automaton *self)
          {
            JArray< JArray< ::org::apache::lucene::util::automaton::Transition > > result((jobject) NULL);
            OBJ_CALL(result = self->object.getSortedTransitions());
            return JArray<jobject>(result.this$).wrap(NULL);
          }

          static PyObject *t_Automaton_hashCode(t_Automaton *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.hashCode());
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(Automaton), (PyObject *) self, "hashCode", args, 2);
          }

          static PyObject *t_Automaton_intersection(t_Automaton *self, PyObject *arg)
          {
            Automaton a0((jobject) NULL);
            Automaton result((jobject) NULL);

            if (!parseArg(arg, "k", Automaton::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.intersection(a0));
              return t_Automaton::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "intersection", arg);
            return NULL;
          }

          static PyObject *t_Automaton_isDeterministic(t_Automaton *self)
          {
            jboolean result;
            OBJ_CALL(result = self->object.isDeterministic());
            Py_RETURN_BOOL(result);
          }

          static PyObject *t_Automaton_isEmptyString(t_Automaton *self)
          {
            jboolean result;
            OBJ_CALL(result = self->object.isEmptyString());
            Py_RETURN_BOOL(result);
          }

          static PyObject *t_Automaton_minimize(PyTypeObject *type, PyObject *arg)
          {
            Automaton a0((jobject) NULL);
            Automaton result((jobject) NULL);

            if (!parseArg(arg, "k", Automaton::initializeClass, &a0))
            {
              OBJ_CALL(result = ::org::apache::lucene::util::automaton::Automaton::minimize(a0));
              return t_Automaton::wrap_Object(result);
            }

            PyErr_SetArgsError(type, "minimize", arg);
            return NULL;
          }

          static PyObject *t_Automaton_minus(t_Automaton *self, PyObject *arg)
          {
            Automaton a0((jobject) NULL);
            Automaton result((jobject) NULL);

            if (!parseArg(arg, "k", Automaton::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.minus(a0));
              return t_Automaton::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "minus", arg);
            return NULL;
          }

          static PyObject *t_Automaton_optional(t_Automaton *self)
          {
            Automaton result((jobject) NULL);
            OBJ_CALL(result = self->object.optional());
            return t_Automaton::wrap_Object(result);
          }

          static PyObject *t_Automaton_reduce(t_Automaton *self)
          {
            OBJ_CALL(self->object.reduce());
            Py_RETURN_NONE;
          }

          static PyObject *t_Automaton_removeDeadTransitions(t_Automaton *self)
          {
            OBJ_CALL(self->object.removeDeadTransitions());
            Py_RETURN_NONE;
          }

          static PyObject *t_Automaton_repeat(t_Automaton *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 0:
              {
                Automaton result((jobject) NULL);
                OBJ_CALL(result = self->object.repeat());
                return t_Automaton::wrap_Object(result);
              }
              break;
             case 1:
              {
                jint a0;
                Automaton result((jobject) NULL);

                if (!parseArgs(args, "I", &a0))
                {
                  OBJ_CALL(result = self->object.repeat(a0));
                  return t_Automaton::wrap_Object(result);
                }
              }
              break;
             case 2:
              {
                jint a0;
                jint a1;
                Automaton result((jobject) NULL);

                if (!parseArgs(args, "II", &a0, &a1))
                {
                  OBJ_CALL(result = self->object.repeat(a0, a1));
                  return t_Automaton::wrap_Object(result);
                }
              }
            }

            PyErr_SetArgsError((PyObject *) self, "repeat", args);
            return NULL;
          }

          static PyObject *t_Automaton_restoreInvariant(t_Automaton *self)
          {
            OBJ_CALL(self->object.restoreInvariant());
            Py_RETURN_NONE;
          }

          static PyObject *t_Automaton_setAllowMutate(PyTypeObject *type, PyObject *arg)
          {
            jboolean a0;
            jboolean result;

            if (!parseArg(arg, "Z", &a0))
            {
              OBJ_CALL(result = ::org::apache::lucene::util::automaton::Automaton::setAllowMutate(a0));
              Py_RETURN_BOOL(result);
            }

            PyErr_SetArgsError(type, "setAllowMutate", arg);
            return NULL;
          }

          static PyObject *t_Automaton_setDeterministic(t_Automaton *self, PyObject *arg)
          {
            jboolean a0;

            if (!parseArg(arg, "Z", &a0))
            {
              OBJ_CALL(self->object.setDeterministic(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setDeterministic", arg);
            return NULL;
          }

          static PyObject *t_Automaton_setInfo(t_Automaton *self, PyObject *arg)
          {
            ::java::lang::Object a0((jobject) NULL);

            if (!parseArg(arg, "o", &a0))
            {
              OBJ_CALL(self->object.setInfo(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setInfo", arg);
            return NULL;
          }

          static PyObject *t_Automaton_setMinimization(PyTypeObject *type, PyObject *arg)
          {
            jint a0;

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(::org::apache::lucene::util::automaton::Automaton::setMinimization(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError(type, "setMinimization", arg);
            return NULL;
          }

          static PyObject *t_Automaton_setMinimizeAlways(PyTypeObject *type, PyObject *arg)
          {
            jboolean a0;

            if (!parseArg(arg, "Z", &a0))
            {
              OBJ_CALL(::org::apache::lucene::util::automaton::Automaton::setMinimizeAlways(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError(type, "setMinimizeAlways", arg);
            return NULL;
          }

          static PyObject *t_Automaton_setNumberedStates(t_Automaton *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                JArray< ::org::apache::lucene::util::automaton::State > a0((jobject) NULL);

                if (!parseArgs(args, "[k", ::org::apache::lucene::util::automaton::State::initializeClass, &a0))
                {
                  OBJ_CALL(self->object.setNumberedStates(a0));
                  Py_RETURN_NONE;
                }
              }
              break;
             case 2:
              {
                JArray< ::org::apache::lucene::util::automaton::State > a0((jobject) NULL);
                jint a1;

                if (!parseArgs(args, "[kI", ::org::apache::lucene::util::automaton::State::initializeClass, &a0, &a1))
                {
                  OBJ_CALL(self->object.setNumberedStates(a0, a1));
                  Py_RETURN_NONE;
                }
              }
            }

            PyErr_SetArgsError((PyObject *) self, "setNumberedStates", args);
            return NULL;
          }

          static PyObject *t_Automaton_subsetOf(t_Automaton *self, PyObject *arg)
          {
            Automaton a0((jobject) NULL);
            jboolean result;

            if (!parseArg(arg, "k", Automaton::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.subsetOf(a0));
              Py_RETURN_BOOL(result);
            }

            PyErr_SetArgsError((PyObject *) self, "subsetOf", arg);
            return NULL;
          }

          static PyObject *t_Automaton_toDot(t_Automaton *self)
          {
            ::java::lang::String result((jobject) NULL);
            OBJ_CALL(result = self->object.toDot());
            return j2p(result);
          }

          static PyObject *t_Automaton_toString(t_Automaton *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(&PY_TYPE(Automaton), (PyObject *) self, "toString", args, 2);
          }

          static PyObject *t_Automaton_union(t_Automaton *self, PyObject *arg)
          {
            Automaton a0((jobject) NULL);
            Automaton result((jobject) NULL);

            if (!parseArg(arg, "k", Automaton::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.union$(a0));
              return t_Automaton::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "union", arg);
            return NULL;
          }

          static PyObject *t_Automaton_union_(PyTypeObject *type, PyObject *arg)
          {
            ::java::util::Collection a0((jobject) NULL);
            PyTypeObject **p0;
            Automaton result((jobject) NULL);

            if (!parseArg(arg, "K", ::java::util::Collection::initializeClass, &a0, &p0, ::java::util::t_Collection::parameters_))
            {
              OBJ_CALL(result = ::org::apache::lucene::util::automaton::Automaton::union$(a0));
              return t_Automaton::wrap_Object(result);
            }

            PyErr_SetArgsError(type, "union_", arg);
            return NULL;
          }

          static PyObject *t_Automaton_get__acceptStates(t_Automaton *self, void *data)
          {
            ::java::util::Set value((jobject) NULL);
            OBJ_CALL(value = self->object.getAcceptStates());
            return ::java::util::t_Set::wrap_Object(value);
          }

          static int t_Automaton_set__allowMutate(t_Automaton *self, PyObject *arg, void *data)
          {
            {
              jboolean value;
              if (!parseArg(arg, "Z", &value))
              {
                INT_CALL(self->object.setAllowMutate(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "allowMutate", arg);
            return -1;
          }

          static PyObject *t_Automaton_get__deterministic(t_Automaton *self, void *data)
          {
            jboolean value;
            OBJ_CALL(value = self->object.isDeterministic());
            Py_RETURN_BOOL(value);
          }
          static int t_Automaton_set__deterministic(t_Automaton *self, PyObject *arg, void *data)
          {
            {
              jboolean value;
              if (!parseArg(arg, "Z", &value))
              {
                INT_CALL(self->object.setDeterministic(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "deterministic", arg);
            return -1;
          }

          static PyObject *t_Automaton_get__emptyString(t_Automaton *self, void *data)
          {
            jboolean value;
            OBJ_CALL(value = self->object.isEmptyString());
            Py_RETURN_BOOL(value);
          }

          static PyObject *t_Automaton_get__info(t_Automaton *self, void *data)
          {
            ::java::lang::Object value((jobject) NULL);
            OBJ_CALL(value = self->object.getInfo());
            return ::java::lang::t_Object::wrap_Object(value);
          }
          static int t_Automaton_set__info(t_Automaton *self, PyObject *arg, void *data)
          {
            {
              ::java::lang::Object value((jobject) NULL);
              if (!parseArg(arg, "o", &value))
              {
                INT_CALL(self->object.setInfo(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "info", arg);
            return -1;
          }

          static PyObject *t_Automaton_get__initialState(t_Automaton *self, void *data)
          {
            ::org::apache::lucene::util::automaton::State value((jobject) NULL);
            OBJ_CALL(value = self->object.getInitialState());
            return ::org::apache::lucene::util::automaton::t_State::wrap_Object(value);
          }

          static int t_Automaton_set__minimization(t_Automaton *self, PyObject *arg, void *data)
          {
            {
              jint value;
              if (!parseArg(arg, "I", &value))
              {
                INT_CALL(self->object.setMinimization(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "minimization", arg);
            return -1;
          }

          static int t_Automaton_set__minimizeAlways(t_Automaton *self, PyObject *arg, void *data)
          {
            {
              jboolean value;
              if (!parseArg(arg, "Z", &value))
              {
                INT_CALL(self->object.setMinimizeAlways(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "minimizeAlways", arg);
            return -1;
          }

          static PyObject *t_Automaton_get__numberOfStates(t_Automaton *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getNumberOfStates());
            return PyInt_FromLong((long) value);
          }

          static PyObject *t_Automaton_get__numberOfTransitions(t_Automaton *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getNumberOfTransitions());
            return PyInt_FromLong((long) value);
          }

          static PyObject *t_Automaton_get__numberedStates(t_Automaton *self, void *data)
          {
            JArray< ::org::apache::lucene::util::automaton::State > value((jobject) NULL);
            OBJ_CALL(value = self->object.getNumberedStates());
            return JArray<jobject>(value.this$).wrap(::org::apache::lucene::util::automaton::t_State::wrap_jobject);
          }
          static int t_Automaton_set__numberedStates(t_Automaton *self, PyObject *arg, void *data)
          {
            {
              JArray< ::org::apache::lucene::util::automaton::State > value((jobject) NULL);
              if (!parseArg(arg, "[k", ::org::apache::lucene::util::automaton::State::initializeClass, &value))
              {
                INT_CALL(self->object.setNumberedStates(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "numberedStates", arg);
            return -1;
          }

          static PyObject *t_Automaton_get__singleton(t_Automaton *self, void *data)
          {
            ::java::lang::String value((jobject) NULL);
            OBJ_CALL(value = self->object.getSingleton());
            return j2p(value);
          }

          static PyObject *t_Automaton_get__sortedTransitions(t_Automaton *self, void *data)
          {
            JArray< JArray< ::org::apache::lucene::util::automaton::Transition > > value((jobject) NULL);
            OBJ_CALL(value = self->object.getSortedTransitions());
            return JArray<jobject>(value.this$).wrap(NULL);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/PagedBytes$PagedBytesDataInput.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *PagedBytes$PagedBytesDataInput::class$ = NULL;
        jmethodID *PagedBytes$PagedBytesDataInput::mids$ = NULL;
        bool PagedBytes$PagedBytesDataInput::live$ = false;

        jclass PagedBytes$PagedBytesDataInput::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/PagedBytes$PagedBytesDataInput");

            mids$ = new jmethodID[max_mid];
            mids$[mid_clone_da9ab8b7] = env->getMethodID(cls, "clone", "()Lorg/apache/lucene/util/PagedBytes$PagedBytesDataInput;");
            mids$[mid_getPosition_54c6a17a] = env->getMethodID(cls, "getPosition", "()J");
            mids$[mid_readByte_54c6a172] = env->getMethodID(cls, "readByte", "()B");
            mids$[mid_readBytes_86f4435f] = env->getMethodID(cls, "readBytes", "([BII)V");
            mids$[mid_setPosition_0ee6df2f] = env->getMethodID(cls, "setPosition", "(J)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        PagedBytes$PagedBytesDataInput PagedBytes$PagedBytesDataInput::clone() const
        {
          return PagedBytes$PagedBytesDataInput(env->callObjectMethod(this$, mids$[mid_clone_da9ab8b7]));
        }

        jlong PagedBytes$PagedBytesDataInput::getPosition() const
        {
          return env->callLongMethod(this$, mids$[mid_getPosition_54c6a17a]);
        }

        jbyte PagedBytes$PagedBytesDataInput::readByte() const
        {
          return env->callByteMethod(this$, mids$[mid_readByte_54c6a172]);
        }

        void PagedBytes$PagedBytesDataInput::readBytes(const JArray< jbyte > & a0, jint a1, jint a2) const
        {
          env->callVoidMethod(this$, mids$[mid_readBytes_86f4435f], a0.this$, a1, a2);
        }

        void PagedBytes$PagedBytesDataInput::setPosition(jlong a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setPosition_0ee6df2f], a0);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_PagedBytes$PagedBytesDataInput_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_PagedBytes$PagedBytesDataInput_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_PagedBytes$PagedBytesDataInput_clone(t_PagedBytes$PagedBytesDataInput *self, PyObject *args);
        static PyObject *t_PagedBytes$PagedBytesDataInput_getPosition(t_PagedBytes$PagedBytesDataInput *self);
        static PyObject *t_PagedBytes$PagedBytesDataInput_readByte(t_PagedBytes$PagedBytesDataInput *self, PyObject *args);
        static PyObject *t_PagedBytes$PagedBytesDataInput_readBytes(t_PagedBytes$PagedBytesDataInput *self, PyObject *args);
        static PyObject *t_PagedBytes$PagedBytesDataInput_setPosition(t_PagedBytes$PagedBytesDataInput *self, PyObject *arg);
        static PyObject *t_PagedBytes$PagedBytesDataInput_get__position(t_PagedBytes$PagedBytesDataInput *self, void *data);
        static int t_PagedBytes$PagedBytesDataInput_set__position(t_PagedBytes$PagedBytesDataInput *self, PyObject *arg, void *data);
        static PyGetSetDef t_PagedBytes$PagedBytesDataInput__fields_[] = {
          DECLARE_GETSET_FIELD(t_PagedBytes$PagedBytesDataInput, position),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_PagedBytes$PagedBytesDataInput__methods_[] = {
          DECLARE_METHOD(t_PagedBytes$PagedBytesDataInput, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PagedBytes$PagedBytesDataInput, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PagedBytes$PagedBytesDataInput, clone, METH_VARARGS),
          DECLARE_METHOD(t_PagedBytes$PagedBytesDataInput, getPosition, METH_NOARGS),
          DECLARE_METHOD(t_PagedBytes$PagedBytesDataInput, readByte, METH_VARARGS),
          DECLARE_METHOD(t_PagedBytes$PagedBytesDataInput, readBytes, METH_VARARGS),
          DECLARE_METHOD(t_PagedBytes$PagedBytesDataInput, setPosition, METH_O),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(PagedBytes$PagedBytesDataInput, t_PagedBytes$PagedBytesDataInput, ::org::apache::lucene::store::DataInput, PagedBytes$PagedBytesDataInput, abstract_init, 0, 0, t_PagedBytes$PagedBytesDataInput__fields_, 0, 0);

        void t_PagedBytes$PagedBytesDataInput::install(PyObject *module)
        {
          installType(&PY_TYPE(PagedBytes$PagedBytesDataInput), module, "PagedBytes$PagedBytesDataInput", 0);
        }

        void t_PagedBytes$PagedBytesDataInput::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(PagedBytes$PagedBytesDataInput).tp_dict, "class_", make_descriptor(PagedBytes$PagedBytesDataInput::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(PagedBytes$PagedBytesDataInput).tp_dict, "wrapfn_", make_descriptor(t_PagedBytes$PagedBytesDataInput::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(PagedBytes$PagedBytesDataInput).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_PagedBytes$PagedBytesDataInput_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, PagedBytes$PagedBytesDataInput::initializeClass, 1)))
            return NULL;
          return t_PagedBytes$PagedBytesDataInput::wrap_Object(PagedBytes$PagedBytesDataInput(((t_PagedBytes$PagedBytesDataInput *) arg)->object.this$));
        }
        static PyObject *t_PagedBytes$PagedBytesDataInput_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, PagedBytes$PagedBytesDataInput::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_PagedBytes$PagedBytesDataInput_clone(t_PagedBytes$PagedBytesDataInput *self, PyObject *args)
        {
          PagedBytes$PagedBytesDataInput result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.clone());
            return t_PagedBytes$PagedBytesDataInput::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(PagedBytes$PagedBytesDataInput), (PyObject *) self, "clone", args, 2);
        }

        static PyObject *t_PagedBytes$PagedBytesDataInput_getPosition(t_PagedBytes$PagedBytesDataInput *self)
        {
          jlong result;
          OBJ_CALL(result = self->object.getPosition());
          return PyLong_FromLongLong((PY_LONG_LONG) result);
        }

        static PyObject *t_PagedBytes$PagedBytesDataInput_readByte(t_PagedBytes$PagedBytesDataInput *self, PyObject *args)
        {
          jbyte result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.readByte());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(PagedBytes$PagedBytesDataInput), (PyObject *) self, "readByte", args, 2);
        }

        static PyObject *t_PagedBytes$PagedBytesDataInput_readBytes(t_PagedBytes$PagedBytesDataInput *self, PyObject *args)
        {
          JArray< jbyte > a0((jobject) NULL);
          jint a1;
          jint a2;

          if (!parseArgs(args, "[BII", &a0, &a1, &a2))
          {
            OBJ_CALL(self->object.readBytes(a0, a1, a2));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(PagedBytes$PagedBytesDataInput), (PyObject *) self, "readBytes", args, 2);
        }

        static PyObject *t_PagedBytes$PagedBytesDataInput_setPosition(t_PagedBytes$PagedBytesDataInput *self, PyObject *arg)
        {
          jlong a0;

          if (!parseArg(arg, "J", &a0))
          {
            OBJ_CALL(self->object.setPosition(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setPosition", arg);
          return NULL;
        }

        static PyObject *t_PagedBytes$PagedBytesDataInput_get__position(t_PagedBytes$PagedBytesDataInput *self, void *data)
        {
          jlong value;
          OBJ_CALL(value = self->object.getPosition());
          return PyLong_FromLongLong((PY_LONG_LONG) value);
        }
        static int t_PagedBytes$PagedBytesDataInput_set__position(t_PagedBytes$PagedBytesDataInput *self, PyObject *arg, void *data)
        {
          {
            jlong value;
            if (!parseArg(arg, "J", &value))
            {
              INT_CALL(self->object.setPosition(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "position", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/ValueQueryNode.h"
#include "java/lang/Object.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace nodes {

              ::java::lang::Class *ValueQueryNode::class$ = NULL;
              jmethodID *ValueQueryNode::mids$ = NULL;
              bool ValueQueryNode::live$ = false;

              jclass ValueQueryNode::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/core/nodes/ValueQueryNode");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_getValue_846352c3] = env->getMethodID(cls, "getValue", "()Ljava/lang/Object;");
                  mids$[mid_setValue_290588ee] = env->getMethodID(cls, "setValue", "(Ljava/lang/Object;)V");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              ::java::lang::Object ValueQueryNode::getValue() const
              {
                return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_getValue_846352c3]));
              }

              void ValueQueryNode::setValue(const ::java::lang::Object & a0) const
              {
                env->callVoidMethod(this$, mids$[mid_setValue_290588ee], a0.this$);
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace nodes {
              static PyObject *t_ValueQueryNode_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_ValueQueryNode_instance_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_ValueQueryNode_of_(t_ValueQueryNode *self, PyObject *args);
              static PyObject *t_ValueQueryNode_getValue(t_ValueQueryNode *self);
              static PyObject *t_ValueQueryNode_setValue(t_ValueQueryNode *self, PyObject *arg);
              static PyObject *t_ValueQueryNode_get__value(t_ValueQueryNode *self, void *data);
              static int t_ValueQueryNode_set__value(t_ValueQueryNode *self, PyObject *arg, void *data);
              static PyObject *t_ValueQueryNode_get__parameters_(t_ValueQueryNode *self, void *data);
              static PyGetSetDef t_ValueQueryNode__fields_[] = {
                DECLARE_GETSET_FIELD(t_ValueQueryNode, value),
                DECLARE_GET_FIELD(t_ValueQueryNode, parameters_),
                { NULL, NULL, NULL, NULL, NULL }
              };

              static PyMethodDef t_ValueQueryNode__methods_[] = {
                DECLARE_METHOD(t_ValueQueryNode, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_ValueQueryNode, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_ValueQueryNode, of_, METH_VARARGS),
                DECLARE_METHOD(t_ValueQueryNode, getValue, METH_NOARGS),
                DECLARE_METHOD(t_ValueQueryNode, setValue, METH_O),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(ValueQueryNode, t_ValueQueryNode, ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode, ValueQueryNode, abstract_init, 0, 0, t_ValueQueryNode__fields_, 0, 0);
              PyObject *t_ValueQueryNode::wrap_Object(const ValueQueryNode& object, PyTypeObject *p0)
              {
                PyObject *obj = t_ValueQueryNode::wrap_Object(object);
                if (obj != NULL && obj != Py_None)
                {
                  t_ValueQueryNode *self = (t_ValueQueryNode *) obj;
                  self->parameters[0] = p0;
                }
                return obj;
              }

              PyObject *t_ValueQueryNode::wrap_jobject(const jobject& object, PyTypeObject *p0)
              {
                PyObject *obj = t_ValueQueryNode::wrap_jobject(object);
                if (obj != NULL && obj != Py_None)
                {
                  t_ValueQueryNode *self = (t_ValueQueryNode *) obj;
                  self->parameters[0] = p0;
                }
                return obj;
              }

              void t_ValueQueryNode::install(PyObject *module)
              {
                installType(&PY_TYPE(ValueQueryNode), module, "ValueQueryNode", 0);
              }

              void t_ValueQueryNode::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(ValueQueryNode).tp_dict, "class_", make_descriptor(ValueQueryNode::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(ValueQueryNode).tp_dict, "wrapfn_", make_descriptor(t_ValueQueryNode::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(ValueQueryNode).tp_dict, "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_ValueQueryNode_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, ValueQueryNode::initializeClass, 1)))
                  return NULL;
                return t_ValueQueryNode::wrap_Object(ValueQueryNode(((t_ValueQueryNode *) arg)->object.this$));
              }
              static PyObject *t_ValueQueryNode_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, ValueQueryNode::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static PyObject *t_ValueQueryNode_of_(t_ValueQueryNode *self, PyObject *args)
              {
                if (!parseArg(args, "T", 1, &(self->parameters)))
                  Py_RETURN_SELF;
                return PyErr_SetArgsError((PyObject *) self, "of_", args);
              }

              static PyObject *t_ValueQueryNode_getValue(t_ValueQueryNode *self)
              {
                ::java::lang::Object result((jobject) NULL);
                OBJ_CALL(result = self->object.getValue());
                return self->parameters[0] != NULL ? wrapType(self->parameters[0], result.this$) : ::java::lang::t_Object::wrap_Object(result);
              }

              static PyObject *t_ValueQueryNode_setValue(t_ValueQueryNode *self, PyObject *arg)
              {
                ::java::lang::Object a0((jobject) NULL);

                if (!parseArg(arg, "O", self->parameters[0], &a0))
                {
                  OBJ_CALL(self->object.setValue(a0));
                  Py_RETURN_NONE;
                }

                PyErr_SetArgsError((PyObject *) self, "setValue", arg);
                return NULL;
              }
              static PyObject *t_ValueQueryNode_get__parameters_(t_ValueQueryNode *self, void *data)
              {
                return typeParameters(self->parameters, sizeof(self->parameters));
              }

              static PyObject *t_ValueQueryNode_get__value(t_ValueQueryNode *self, void *data)
              {
                ::java::lang::Object value((jobject) NULL);
                OBJ_CALL(value = self->object.getValue());
                return ::java::lang::t_Object::wrap_Object(value);
              }
              static int t_ValueQueryNode_set__value(t_ValueQueryNode *self, PyObject *arg, void *data)
              {
                {
                  ::java::lang::Object value((jobject) NULL);
                  if (!parseArg(arg, "o", &value))
                  {
                    INT_CALL(self->object.setValue(value));
                    return 0;
                  }
                }
                PyErr_SetArgsError((PyObject *) self, "value", arg);
                return -1;
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/standard/builders/PrefixWildcardQueryNodeBuilder.h"
#include "org/apache/lucene/search/PrefixQuery.h"
#include "org/apache/lucene/queryparser/flexible/core/QueryNodeException.h"
#include "org/apache/lucene/queryparser/flexible/standard/builders/StandardQueryBuilder.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/QueryNode.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace builders {

              ::java::lang::Class *PrefixWildcardQueryNodeBuilder::class$ = NULL;
              jmethodID *PrefixWildcardQueryNodeBuilder::mids$ = NULL;
              bool PrefixWildcardQueryNodeBuilder::live$ = false;

              jclass PrefixWildcardQueryNodeBuilder::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/standard/builders/PrefixWildcardQueryNodeBuilder");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
                  mids$[mid_build_652a8ae7] = env->getMethodID(cls, "build", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;)Lorg/apache/lucene/search/PrefixQuery;");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              PrefixWildcardQueryNodeBuilder::PrefixWildcardQueryNodeBuilder() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

              ::org::apache::lucene::search::PrefixQuery PrefixWildcardQueryNodeBuilder::build(const ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode & a0) const
              {
                return ::org::apache::lucene::search::PrefixQuery(env->callObjectMethod(this$, mids$[mid_build_652a8ae7], a0.this$));
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace builders {
              static PyObject *t_PrefixWildcardQueryNodeBuilder_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_PrefixWildcardQueryNodeBuilder_instance_(PyTypeObject *type, PyObject *arg);
              static int t_PrefixWildcardQueryNodeBuilder_init_(t_PrefixWildcardQueryNodeBuilder *self, PyObject *args, PyObject *kwds);
              static PyObject *t_PrefixWildcardQueryNodeBuilder_build(t_PrefixWildcardQueryNodeBuilder *self, PyObject *arg);

              static PyMethodDef t_PrefixWildcardQueryNodeBuilder__methods_[] = {
                DECLARE_METHOD(t_PrefixWildcardQueryNodeBuilder, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_PrefixWildcardQueryNodeBuilder, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_PrefixWildcardQueryNodeBuilder, build, METH_O),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(PrefixWildcardQueryNodeBuilder, t_PrefixWildcardQueryNodeBuilder, ::java::lang::Object, PrefixWildcardQueryNodeBuilder, t_PrefixWildcardQueryNodeBuilder_init_, 0, 0, 0, 0, 0);

              void t_PrefixWildcardQueryNodeBuilder::install(PyObject *module)
              {
                installType(&PY_TYPE(PrefixWildcardQueryNodeBuilder), module, "PrefixWildcardQueryNodeBuilder", 0);
              }

              void t_PrefixWildcardQueryNodeBuilder::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(PrefixWildcardQueryNodeBuilder).tp_dict, "class_", make_descriptor(PrefixWildcardQueryNodeBuilder::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(PrefixWildcardQueryNodeBuilder).tp_dict, "wrapfn_", make_descriptor(t_PrefixWildcardQueryNodeBuilder::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(PrefixWildcardQueryNodeBuilder).tp_dict, "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_PrefixWildcardQueryNodeBuilder_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, PrefixWildcardQueryNodeBuilder::initializeClass, 1)))
                  return NULL;
                return t_PrefixWildcardQueryNodeBuilder::wrap_Object(PrefixWildcardQueryNodeBuilder(((t_PrefixWildcardQueryNodeBuilder *) arg)->object.this$));
              }
              static PyObject *t_PrefixWildcardQueryNodeBuilder_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, PrefixWildcardQueryNodeBuilder::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_PrefixWildcardQueryNodeBuilder_init_(t_PrefixWildcardQueryNodeBuilder *self, PyObject *args, PyObject *kwds)
              {
                PrefixWildcardQueryNodeBuilder object((jobject) NULL);

                INT_CALL(object = PrefixWildcardQueryNodeBuilder());
                self->object = object;

                return 0;
              }

              static PyObject *t_PrefixWildcardQueryNodeBuilder_build(t_PrefixWildcardQueryNodeBuilder *self, PyObject *arg)
              {
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode a0((jobject) NULL);
                ::org::apache::lucene::search::PrefixQuery result((jobject) NULL);

                if (!parseArg(arg, "k", ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode::initializeClass, &a0))
                {
                  OBJ_CALL(result = self->object.build(a0));
                  return ::org::apache::lucene::search::t_PrefixQuery::wrap_Object(result);
                }

                PyErr_SetArgsError((PyObject *) self, "build", arg);
                return NULL;
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/facet/taxonomy/writercache/LruTaxonomyWriterCache.h"
#include "org/apache/lucene/facet/taxonomy/writercache/TaxonomyWriterCache.h"
#include "org/apache/lucene/facet/taxonomy/writercache/LruTaxonomyWriterCache$LRUType.h"
#include "org/apache/lucene/facet/taxonomy/FacetLabel.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace taxonomy {
          namespace writercache {

            ::java::lang::Class *LruTaxonomyWriterCache::class$ = NULL;
            jmethodID *LruTaxonomyWriterCache::mids$ = NULL;
            bool LruTaxonomyWriterCache::live$ = false;

            jclass LruTaxonomyWriterCache::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/facet/taxonomy/writercache/LruTaxonomyWriterCache");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_39c7bd3c] = env->getMethodID(cls, "<init>", "(I)V");
                mids$[mid_init$_83a5d707] = env->getMethodID(cls, "<init>", "(ILorg/apache/lucene/facet/taxonomy/writercache/LruTaxonomyWriterCache$LRUType;)V");
                mids$[mid_clear_54c6a166] = env->getMethodID(cls, "clear", "()V");
                mids$[mid_close_54c6a166] = env->getMethodID(cls, "close", "()V");
                mids$[mid_get_283f83f5] = env->getMethodID(cls, "get", "(Lorg/apache/lucene/facet/taxonomy/FacetLabel;)I");
                mids$[mid_isFull_54c6a16a] = env->getMethodID(cls, "isFull", "()Z");
                mids$[mid_put_7ba580a4] = env->getMethodID(cls, "put", "(Lorg/apache/lucene/facet/taxonomy/FacetLabel;I)Z");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            LruTaxonomyWriterCache::LruTaxonomyWriterCache(jint a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_39c7bd3c, a0)) {}

            LruTaxonomyWriterCache::LruTaxonomyWriterCache(jint a0, const ::org::apache::lucene::facet::taxonomy::writercache::LruTaxonomyWriterCache$LRUType & a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_83a5d707, a0, a1.this$)) {}

            void LruTaxonomyWriterCache::clear() const
            {
              env->callVoidMethod(this$, mids$[mid_clear_54c6a166]);
            }

            void LruTaxonomyWriterCache::close() const
            {
              env->callVoidMethod(this$, mids$[mid_close_54c6a166]);
            }

            jint LruTaxonomyWriterCache::get(const ::org::apache::lucene::facet::taxonomy::FacetLabel & a0) const
            {
              return env->callIntMethod(this$, mids$[mid_get_283f83f5], a0.this$);
            }

            jboolean LruTaxonomyWriterCache::isFull() const
            {
              return env->callBooleanMethod(this$, mids$[mid_isFull_54c6a16a]);
            }

            jboolean LruTaxonomyWriterCache::put(const ::org::apache::lucene::facet::taxonomy::FacetLabel & a0, jint a1) const
            {
              return env->callBooleanMethod(this$, mids$[mid_put_7ba580a4], a0.this$, a1);
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace taxonomy {
          namespace writercache {
            static PyObject *t_LruTaxonomyWriterCache_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_LruTaxonomyWriterCache_instance_(PyTypeObject *type, PyObject *arg);
            static int t_LruTaxonomyWriterCache_init_(t_LruTaxonomyWriterCache *self, PyObject *args, PyObject *kwds);
            static PyObject *t_LruTaxonomyWriterCache_clear(t_LruTaxonomyWriterCache *self);
            static PyObject *t_LruTaxonomyWriterCache_close(t_LruTaxonomyWriterCache *self);
            static PyObject *t_LruTaxonomyWriterCache_get(t_LruTaxonomyWriterCache *self, PyObject *arg);
            static PyObject *t_LruTaxonomyWriterCache_isFull(t_LruTaxonomyWriterCache *self);
            static PyObject *t_LruTaxonomyWriterCache_put(t_LruTaxonomyWriterCache *self, PyObject *args);
            static PyObject *t_LruTaxonomyWriterCache_get__full(t_LruTaxonomyWriterCache *self, void *data);
            static PyGetSetDef t_LruTaxonomyWriterCache__fields_[] = {
              DECLARE_GET_FIELD(t_LruTaxonomyWriterCache, full),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_LruTaxonomyWriterCache__methods_[] = {
              DECLARE_METHOD(t_LruTaxonomyWriterCache, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_LruTaxonomyWriterCache, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_LruTaxonomyWriterCache, clear, METH_NOARGS),
              DECLARE_METHOD(t_LruTaxonomyWriterCache, close, METH_NOARGS),
              DECLARE_METHOD(t_LruTaxonomyWriterCache, get, METH_O),
              DECLARE_METHOD(t_LruTaxonomyWriterCache, isFull, METH_NOARGS),
              DECLARE_METHOD(t_LruTaxonomyWriterCache, put, METH_VARARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(LruTaxonomyWriterCache, t_LruTaxonomyWriterCache, ::java::lang::Object, LruTaxonomyWriterCache, t_LruTaxonomyWriterCache_init_, 0, 0, t_LruTaxonomyWriterCache__fields_, 0, 0);

            void t_LruTaxonomyWriterCache::install(PyObject *module)
            {
              installType(&PY_TYPE(LruTaxonomyWriterCache), module, "LruTaxonomyWriterCache", 0);
              PyDict_SetItemString(PY_TYPE(LruTaxonomyWriterCache).tp_dict, "LRUType", make_descriptor(&PY_TYPE(LruTaxonomyWriterCache$LRUType)));
            }

            void t_LruTaxonomyWriterCache::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(LruTaxonomyWriterCache).tp_dict, "class_", make_descriptor(LruTaxonomyWriterCache::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(LruTaxonomyWriterCache).tp_dict, "wrapfn_", make_descriptor(t_LruTaxonomyWriterCache::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(LruTaxonomyWriterCache).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_LruTaxonomyWriterCache_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, LruTaxonomyWriterCache::initializeClass, 1)))
                return NULL;
              return t_LruTaxonomyWriterCache::wrap_Object(LruTaxonomyWriterCache(((t_LruTaxonomyWriterCache *) arg)->object.this$));
            }
            static PyObject *t_LruTaxonomyWriterCache_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, LruTaxonomyWriterCache::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_LruTaxonomyWriterCache_init_(t_LruTaxonomyWriterCache *self, PyObject *args, PyObject *kwds)
            {
              switch (PyTuple_GET_SIZE(args)) {
               case 1:
                {
                  jint a0;
                  LruTaxonomyWriterCache object((jobject) NULL);

                  if (!parseArgs(args, "I", &a0))
                  {
                    INT_CALL(object = LruTaxonomyWriterCache(a0));
                    self->object = object;
                    break;
                  }
                }
                goto err;
               case 2:
                {
                  jint a0;
                  ::org::apache::lucene::facet::taxonomy::writercache::LruTaxonomyWriterCache$LRUType a1((jobject) NULL);
                  PyTypeObject **p1;
                  LruTaxonomyWriterCache object((jobject) NULL);

                  if (!parseArgs(args, "IK", ::org::apache::lucene::facet::taxonomy::writercache::LruTaxonomyWriterCache$LRUType::initializeClass, &a0, &a1, &p1, ::org::apache::lucene::facet::taxonomy::writercache::t_LruTaxonomyWriterCache$LRUType::parameters_))
                  {
                    INT_CALL(object = LruTaxonomyWriterCache(a0, a1));
                    self->object = object;
                    break;
                  }
                }
               default:
               err:
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_LruTaxonomyWriterCache_clear(t_LruTaxonomyWriterCache *self)
            {
              OBJ_CALL(self->object.clear());
              Py_RETURN_NONE;
            }

            static PyObject *t_LruTaxonomyWriterCache_close(t_LruTaxonomyWriterCache *self)
            {
              OBJ_CALL(self->object.close());
              Py_RETURN_NONE;
            }

            static PyObject *t_LruTaxonomyWriterCache_get(t_LruTaxonomyWriterCache *self, PyObject *arg)
            {
              ::org::apache::lucene::facet::taxonomy::FacetLabel a0((jobject) NULL);
              jint result;

              if (!parseArg(arg, "k", ::org::apache::lucene::facet::taxonomy::FacetLabel::initializeClass, &a0))
              {
                OBJ_CALL(result = self->object.get(a0));
                return PyInt_FromLong((long) result);
              }

              PyErr_SetArgsError((PyObject *) self, "get", arg);
              return NULL;
            }

            static PyObject *t_LruTaxonomyWriterCache_isFull(t_LruTaxonomyWriterCache *self)
            {
              jboolean result;
              OBJ_CALL(result = self->object.isFull());
              Py_RETURN_BOOL(result);
            }

            static PyObject *t_LruTaxonomyWriterCache_put(t_LruTaxonomyWriterCache *self, PyObject *args)
            {
              ::org::apache::lucene::facet::taxonomy::FacetLabel a0((jobject) NULL);
              jint a1;
              jboolean result;

              if (!parseArgs(args, "kI", ::org::apache::lucene::facet::taxonomy::FacetLabel::initializeClass, &a0, &a1))
              {
                OBJ_CALL(result = self->object.put(a0, a1));
                Py_RETURN_BOOL(result);
              }

              PyErr_SetArgsError((PyObject *) self, "put", args);
              return NULL;
            }

            static PyObject *t_LruTaxonomyWriterCache_get__full(t_LruTaxonomyWriterCache *self, void *data)
            {
              jboolean value;
              OBJ_CALL(value = self->object.isFull());
              Py_RETURN_BOOL(value);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/xml/sax/helpers/DefaultHandler.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace xml {
    namespace sax {
      namespace helpers {

        ::java::lang::Class *DefaultHandler::class$ = NULL;
        jmethodID *DefaultHandler::mids$ = NULL;
        bool DefaultHandler::live$ = false;

        jclass DefaultHandler::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/xml/sax/helpers/DefaultHandler");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_characters_6f0bb356] = env->getMethodID(cls, "characters", "([CII)V");
            mids$[mid_endDocument_54c6a166] = env->getMethodID(cls, "endDocument", "()V");
            mids$[mid_endElement_9c119564] = env->getMethodID(cls, "endElement", "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V");
            mids$[mid_endPrefixMapping_5fdc3f48] = env->getMethodID(cls, "endPrefixMapping", "(Ljava/lang/String;)V");
            mids$[mid_ignorableWhitespace_6f0bb356] = env->getMethodID(cls, "ignorableWhitespace", "([CII)V");
            mids$[mid_notationDecl_9c119564] = env->getMethodID(cls, "notationDecl", "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V");
            mids$[mid_processingInstruction_4a264742] = env->getMethodID(cls, "processingInstruction", "(Ljava/lang/String;Ljava/lang/String;)V");
            mids$[mid_skippedEntity_5fdc3f48] = env->getMethodID(cls, "skippedEntity", "(Ljava/lang/String;)V");
            mids$[mid_startDocument_54c6a166] = env->getMethodID(cls, "startDocument", "()V");
            mids$[mid_startPrefixMapping_4a264742] = env->getMethodID(cls, "startPrefixMapping", "(Ljava/lang/String;Ljava/lang/String;)V");
            mids$[mid_unparsedEntityDecl_3202cd2e] = env->getMethodID(cls, "unparsedEntityDecl", "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        DefaultHandler::DefaultHandler() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        void DefaultHandler::characters(const JArray< jchar > & a0, jint a1, jint a2) const
        {
          env->callVoidMethod(this$, mids$[mid_characters_6f0bb356], a0.this$, a1, a2);
        }

        void DefaultHandler::endDocument() const
        {
          env->callVoidMethod(this$, mids$[mid_endDocument_54c6a166]);
        }

        void DefaultHandler::endElement(const ::java::lang::String & a0, const ::java::lang::String & a1, const ::java::lang::String & a2) const
        {
          env->callVoidMethod(this$, mids$[mid_endElement_9c119564], a0.this$, a1.this$, a2.this$);
        }

        void DefaultHandler::endPrefixMapping(const ::java::lang::String & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_endPrefixMapping_5fdc3f48], a0.this$);
        }

        void DefaultHandler::ignorableWhitespace(const JArray< jchar > & a0, jint a1, jint a2) const
        {
          env->callVoidMethod(this$, mids$[mid_ignorableWhitespace_6f0bb356], a0.this$, a1, a2);
        }

        void DefaultHandler::notationDecl(const ::java::lang::String & a0, const ::java::lang::String & a1, const ::java::lang::String & a2) const
        {
          env->callVoidMethod(this$, mids$[mid_notationDecl_9c119564], a0.this$, a1.this$, a2.this$);
        }

        void DefaultHandler::processingInstruction(const ::java::lang::String & a0, const ::java::lang::String & a1) const
        {
          env->callVoidMethod(this$, mids$[mid_processingInstruction_4a264742], a0.this$, a1.this$);
        }

        void DefaultHandler::skippedEntity(const ::java::lang::String & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_skippedEntity_5fdc3f48], a0.this$);
        }

        void DefaultHandler::startDocument() const
        {
          env->callVoidMethod(this$, mids$[mid_startDocument_54c6a166]);
        }

        void DefaultHandler::startPrefixMapping(const ::java::lang::String & a0, const ::java::lang::String & a1) const
        {
          env->callVoidMethod(this$, mids$[mid_startPrefixMapping_4a264742], a0.this$, a1.this$);
        }

        void DefaultHandler::unparsedEntityDecl(const ::java::lang::String & a0, const ::java::lang::String & a1, const ::java::lang::String & a2, const ::java::lang::String & a3) const
        {
          env->callVoidMethod(this$, mids$[mid_unparsedEntityDecl_3202cd2e], a0.this$, a1.this$, a2.this$, a3.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace xml {
    namespace sax {
      namespace helpers {
        static PyObject *t_DefaultHandler_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_DefaultHandler_instance_(PyTypeObject *type, PyObject *arg);
        static int t_DefaultHandler_init_(t_DefaultHandler *self, PyObject *args, PyObject *kwds);
        static PyObject *t_DefaultHandler_characters(t_DefaultHandler *self, PyObject *args);
        static PyObject *t_DefaultHandler_endDocument(t_DefaultHandler *self);
        static PyObject *t_DefaultHandler_endElement(t_DefaultHandler *self, PyObject *args);
        static PyObject *t_DefaultHandler_endPrefixMapping(t_DefaultHandler *self, PyObject *arg);
        static PyObject *t_DefaultHandler_ignorableWhitespace(t_DefaultHandler *self, PyObject *args);
        static PyObject *t_DefaultHandler_notationDecl(t_DefaultHandler *self, PyObject *args);
        static PyObject *t_DefaultHandler_processingInstruction(t_DefaultHandler *self, PyObject *args);
        static PyObject *t_DefaultHandler_skippedEntity(t_DefaultHandler *self, PyObject *arg);
        static PyObject *t_DefaultHandler_startDocument(t_DefaultHandler *self);
        static PyObject *t_DefaultHandler_startPrefixMapping(t_DefaultHandler *self, PyObject *args);
        static PyObject *t_DefaultHandler_unparsedEntityDecl(t_DefaultHandler *self, PyObject *args);

        static PyMethodDef t_DefaultHandler__methods_[] = {
          DECLARE_METHOD(t_DefaultHandler, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_DefaultHandler, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_DefaultHandler, characters, METH_VARARGS),
          DECLARE_METHOD(t_DefaultHandler, endDocument, METH_NOARGS),
          DECLARE_METHOD(t_DefaultHandler, endElement, METH_VARARGS),
          DECLARE_METHOD(t_DefaultHandler, endPrefixMapping, METH_O),
          DECLARE_METHOD(t_DefaultHandler, ignorableWhitespace, METH_VARARGS),
          DECLARE_METHOD(t_DefaultHandler, notationDecl, METH_VARARGS),
          DECLARE_METHOD(t_DefaultHandler, processingInstruction, METH_VARARGS),
          DECLARE_METHOD(t_DefaultHandler, skippedEntity, METH_O),
          DECLARE_METHOD(t_DefaultHandler, startDocument, METH_NOARGS),
          DECLARE_METHOD(t_DefaultHandler, startPrefixMapping, METH_VARARGS),
          DECLARE_METHOD(t_DefaultHandler, unparsedEntityDecl, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(DefaultHandler, t_DefaultHandler, ::java::lang::Object, DefaultHandler, t_DefaultHandler_init_, 0, 0, 0, 0, 0);

        void t_DefaultHandler::install(PyObject *module)
        {
          installType(&PY_TYPE(DefaultHandler), module, "DefaultHandler", 0);
        }

        void t_DefaultHandler::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(DefaultHandler).tp_dict, "class_", make_descriptor(DefaultHandler::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(DefaultHandler).tp_dict, "wrapfn_", make_descriptor(t_DefaultHandler::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(DefaultHandler).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_DefaultHandler_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, DefaultHandler::initializeClass, 1)))
            return NULL;
          return t_DefaultHandler::wrap_Object(DefaultHandler(((t_DefaultHandler *) arg)->object.this$));
        }
        static PyObject *t_DefaultHandler_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, DefaultHandler::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_DefaultHandler_init_(t_DefaultHandler *self, PyObject *args, PyObject *kwds)
        {
          DefaultHandler object((jobject) NULL);

          INT_CALL(object = DefaultHandler());
          self->object = object;

          return 0;
        }

        static PyObject *t_DefaultHandler_characters(t_DefaultHandler *self, PyObject *args)
        {
          JArray< jchar > a0((jobject) NULL);
          jint a1;
          jint a2;

          if (!parseArgs(args, "[CII", &a0, &a1, &a2))
          {
            OBJ_CALL(self->object.characters(a0, a1, a2));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "characters", args);
          return NULL;
        }

        static PyObject *t_DefaultHandler_endDocument(t_DefaultHandler *self)
        {
          OBJ_CALL(self->object.endDocument());
          Py_RETURN_NONE;
        }

        static PyObject *t_DefaultHandler_endElement(t_DefaultHandler *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::java::lang::String a1((jobject) NULL);
          ::java::lang::String a2((jobject) NULL);

          if (!parseArgs(args, "sss", &a0, &a1, &a2))
          {
            OBJ_CALL(self->object.endElement(a0, a1, a2));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "endElement", args);
          return NULL;
        }

        static PyObject *t_DefaultHandler_endPrefixMapping(t_DefaultHandler *self, PyObject *arg)
        {
          ::java::lang::String a0((jobject) NULL);

          if (!parseArg(arg, "s", &a0))
          {
            OBJ_CALL(self->object.endPrefixMapping(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "endPrefixMapping", arg);
          return NULL;
        }

        static PyObject *t_DefaultHandler_ignorableWhitespace(t_DefaultHandler *self, PyObject *args)
        {
          JArray< jchar > a0((jobject) NULL);
          jint a1;
          jint a2;

          if (!parseArgs(args, "[CII", &a0, &a1, &a2))
          {
            OBJ_CALL(self->object.ignorableWhitespace(a0, a1, a2));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "ignorableWhitespace", args);
          return NULL;
        }

        static PyObject *t_DefaultHandler_notationDecl(t_DefaultHandler *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::java::lang::String a1((jobject) NULL);
          ::java::lang::String a2((jobject) NULL);

          if (!parseArgs(args, "sss", &a0, &a1, &a2))
          {
            OBJ_CALL(self->object.notationDecl(a0, a1, a2));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "notationDecl", args);
          return NULL;
        }

        static PyObject *t_DefaultHandler_processingInstruction(t_DefaultHandler *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::java::lang::String a1((jobject) NULL);

          if (!parseArgs(args, "ss", &a0, &a1))
          {
            OBJ_CALL(self->object.processingInstruction(a0, a1));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "processingInstruction", args);
          return NULL;
        }

        static PyObject *t_DefaultHandler_skippedEntity(t_DefaultHandler *self, PyObject *arg)
        {
          ::java::lang::String a0((jobject) NULL);

          if (!parseArg(arg, "s", &a0))
          {
            OBJ_CALL(self->object.skippedEntity(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "skippedEntity", arg);
          return NULL;
        }

        static PyObject *t_DefaultHandler_startDocument(t_DefaultHandler *self)
        {
          OBJ_CALL(self->object.startDocument());
          Py_RETURN_NONE;
        }

        static PyObject *t_DefaultHandler_startPrefixMapping(t_DefaultHandler *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::java::lang::String a1((jobject) NULL);

          if (!parseArgs(args, "ss", &a0, &a1))
          {
            OBJ_CALL(self->object.startPrefixMapping(a0, a1));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "startPrefixMapping", args);
          return NULL;
        }

        static PyObject *t_DefaultHandler_unparsedEntityDecl(t_DefaultHandler *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::java::lang::String a1((jobject) NULL);
          ::java::lang::String a2((jobject) NULL);
          ::java::lang::String a3((jobject) NULL);

          if (!parseArgs(args, "ssss", &a0, &a1, &a2, &a3))
          {
            OBJ_CALL(self->object.unparsedEntityDecl(a0, a1, a2, a3));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "unparsedEntityDecl", args);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/CheckIndex$Status$DocValuesStatus.h"
#include "java/lang/Throwable.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *CheckIndex$Status$DocValuesStatus::class$ = NULL;
        jmethodID *CheckIndex$Status$DocValuesStatus::mids$ = NULL;
        jfieldID *CheckIndex$Status$DocValuesStatus::fids$ = NULL;
        bool CheckIndex$Status$DocValuesStatus::live$ = false;

        jclass CheckIndex$Status$DocValuesStatus::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/CheckIndex$Status$DocValuesStatus");

            fids$ = new jfieldID[max_fid];
            fids$[fid_error] = env->getFieldID(cls, "error", "Ljava/lang/Throwable;");
            fids$[fid_totalBinaryFields] = env->getFieldID(cls, "totalBinaryFields", "J");
            fids$[fid_totalNumericFields] = env->getFieldID(cls, "totalNumericFields", "J");
            fids$[fid_totalSortedFields] = env->getFieldID(cls, "totalSortedFields", "J");
            fids$[fid_totalSortedNumericFields] = env->getFieldID(cls, "totalSortedNumericFields", "J");
            fids$[fid_totalSortedSetFields] = env->getFieldID(cls, "totalSortedSetFields", "J");
            fids$[fid_totalValueFields] = env->getFieldID(cls, "totalValueFields", "J");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        ::java::lang::Throwable CheckIndex$Status$DocValuesStatus::_get_error() const
        {
          return ::java::lang::Throwable(env->getObjectField(this$, fids$[fid_error]));
        }

        void CheckIndex$Status$DocValuesStatus::_set_error(const ::java::lang::Throwable & a0) const
        {
          env->setObjectField(this$, fids$[fid_error], a0.this$);
        }

        jlong CheckIndex$Status$DocValuesStatus::_get_totalBinaryFields() const
        {
          return env->getLongField(this$, fids$[fid_totalBinaryFields]);
        }

        void CheckIndex$Status$DocValuesStatus::_set_totalBinaryFields(jlong a0) const
        {
          env->setLongField(this$, fids$[fid_totalBinaryFields], a0);
        }

        jlong CheckIndex$Status$DocValuesStatus::_get_totalNumericFields() const
        {
          return env->getLongField(this$, fids$[fid_totalNumericFields]);
        }

        void CheckIndex$Status$DocValuesStatus::_set_totalNumericFields(jlong a0) const
        {
          env->setLongField(this$, fids$[fid_totalNumericFields], a0);
        }

        jlong CheckIndex$Status$DocValuesStatus::_get_totalSortedFields() const
        {
          return env->getLongField(this$, fids$[fid_totalSortedFields]);
        }

        void CheckIndex$Status$DocValuesStatus::_set_totalSortedFields(jlong a0) const
        {
          env->setLongField(this$, fids$[fid_totalSortedFields], a0);
        }

        jlong CheckIndex$Status$DocValuesStatus::_get_totalSortedNumericFields() const
        {
          return env->getLongField(this$, fids$[fid_totalSortedNumericFields]);
        }

        void CheckIndex$Status$DocValuesStatus::_set_totalSortedNumericFields(jlong a0) const
        {
          env->setLongField(this$, fids$[fid_totalSortedNumericFields], a0);
        }

        jlong CheckIndex$Status$DocValuesStatus::_get_totalSortedSetFields() const
        {
          return env->getLongField(this$, fids$[fid_totalSortedSetFields]);
        }

        void CheckIndex$Status$DocValuesStatus::_set_totalSortedSetFields(jlong a0) const
        {
          env->setLongField(this$, fids$[fid_totalSortedSetFields], a0);
        }

        jlong CheckIndex$Status$DocValuesStatus::_get_totalValueFields() const
        {
          return env->getLongField(this$, fids$[fid_totalValueFields]);
        }

        void CheckIndex$Status$DocValuesStatus::_set_totalValueFields(jlong a0) const
        {
          env->setLongField(this$, fids$[fid_totalValueFields], a0);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_CheckIndex$Status$DocValuesStatus_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_CheckIndex$Status$DocValuesStatus_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_CheckIndex$Status$DocValuesStatus_get__error(t_CheckIndex$Status$DocValuesStatus *self, void *data);
        static int t_CheckIndex$Status$DocValuesStatus_set__error(t_CheckIndex$Status$DocValuesStatus *self, PyObject *arg, void *data);
        static PyObject *t_CheckIndex$Status$DocValuesStatus_get__totalBinaryFields(t_CheckIndex$Status$DocValuesStatus *self, void *data);
        static int t_CheckIndex$Status$DocValuesStatus_set__totalBinaryFields(t_CheckIndex$Status$DocValuesStatus *self, PyObject *arg, void *data);
        static PyObject *t_CheckIndex$Status$DocValuesStatus_get__totalNumericFields(t_CheckIndex$Status$DocValuesStatus *self, void *data);
        static int t_CheckIndex$Status$DocValuesStatus_set__totalNumericFields(t_CheckIndex$Status$DocValuesStatus *self, PyObject *arg, void *data);
        static PyObject *t_CheckIndex$Status$DocValuesStatus_get__totalSortedFields(t_CheckIndex$Status$DocValuesStatus *self, void *data);
        static int t_CheckIndex$Status$DocValuesStatus_set__totalSortedFields(t_CheckIndex$Status$DocValuesStatus *self, PyObject *arg, void *data);
        static PyObject *t_CheckIndex$Status$DocValuesStatus_get__totalSortedNumericFields(t_CheckIndex$Status$DocValuesStatus *self, void *data);
        static int t_CheckIndex$Status$DocValuesStatus_set__totalSortedNumericFields(t_CheckIndex$Status$DocValuesStatus *self, PyObject *arg, void *data);
        static PyObject *t_CheckIndex$Status$DocValuesStatus_get__totalSortedSetFields(t_CheckIndex$Status$DocValuesStatus *self, void *data);
        static int t_CheckIndex$Status$DocValuesStatus_set__totalSortedSetFields(t_CheckIndex$Status$DocValuesStatus *self, PyObject *arg, void *data);
        static PyObject *t_CheckIndex$Status$DocValuesStatus_get__totalValueFields(t_CheckIndex$Status$DocValuesStatus *self, void *data);
        static int t_CheckIndex$Status$DocValuesStatus_set__totalValueFields(t_CheckIndex$Status$DocValuesStatus *self, PyObject *arg, void *data);

        static PyGetSetDef t_CheckIndex$Status$DocValuesStatus__fields_[] = {
          DECLARE_GETSET_FIELD(t_CheckIndex$Status$DocValuesStatus, error),
          DECLARE_GETSET_FIELD(t_CheckIndex$Status$DocValuesStatus, totalBinaryFields),
          DECLARE_GETSET_FIELD(t_CheckIndex$Status$DocValuesStatus, totalNumericFields),
          DECLARE_GETSET_FIELD(t_CheckIndex$Status$DocValuesStatus, totalSortedFields),
          DECLARE_GETSET_FIELD(t_CheckIndex$Status$DocValuesStatus, totalSortedNumericFields),
          DECLARE_GETSET_FIELD(t_CheckIndex$Status$DocValuesStatus, totalSortedSetFields),
          DECLARE_GETSET_FIELD(t_CheckIndex$Status$DocValuesStatus, totalValueFields),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_CheckIndex$Status$DocValuesStatus__methods_[] = {
          DECLARE_METHOD(t_CheckIndex$Status$DocValuesStatus, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_CheckIndex$Status$DocValuesStatus, instance_, METH_O | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(CheckIndex$Status$DocValuesStatus, t_CheckIndex$Status$DocValuesStatus, ::java::lang::Object, CheckIndex$Status$DocValuesStatus, abstract_init, 0, 0, t_CheckIndex$Status$DocValuesStatus__fields_, 0, 0);

        void t_CheckIndex$Status$DocValuesStatus::install(PyObject *module)
        {
          installType(&PY_TYPE(CheckIndex$Status$DocValuesStatus), module, "CheckIndex$Status$DocValuesStatus", 0);
        }

        void t_CheckIndex$Status$DocValuesStatus::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(CheckIndex$Status$DocValuesStatus).tp_dict, "class_", make_descriptor(CheckIndex$Status$DocValuesStatus::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(CheckIndex$Status$DocValuesStatus).tp_dict, "wrapfn_", make_descriptor(t_CheckIndex$Status$DocValuesStatus::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(CheckIndex$Status$DocValuesStatus).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_CheckIndex$Status$DocValuesStatus_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, CheckIndex$Status$DocValuesStatus::initializeClass, 1)))
            return NULL;
          return t_CheckIndex$Status$DocValuesStatus::wrap_Object(CheckIndex$Status$DocValuesStatus(((t_CheckIndex$Status$DocValuesStatus *) arg)->object.this$));
        }
        static PyObject *t_CheckIndex$Status$DocValuesStatus_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, CheckIndex$Status$DocValuesStatus::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_CheckIndex$Status$DocValuesStatus_get__error(t_CheckIndex$Status$DocValuesStatus *self, void *data)
        {
          ::java::lang::Throwable value((jobject) NULL);
          OBJ_CALL(value = self->object._get_error());
          return ::java::lang::t_Throwable::wrap_Object(value);
        }
        static int t_CheckIndex$Status$DocValuesStatus_set__error(t_CheckIndex$Status$DocValuesStatus *self, PyObject *arg, void *data)
        {
          ::java::lang::Throwable value((jobject) NULL);
          if (!parseArg(arg, "k", ::java::lang::Throwable::initializeClass, &value))
          {
            INT_CALL(self->object._set_error(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "error", arg);
          return -1;
        }

        static PyObject *t_CheckIndex$Status$DocValuesStatus_get__totalBinaryFields(t_CheckIndex$Status$DocValuesStatus *self, void *data)
        {
          jlong value;
          OBJ_CALL(value = self->object._get_totalBinaryFields());
          return PyLong_FromLongLong((PY_LONG_LONG) value);
        }
        static int t_CheckIndex$Status$DocValuesStatus_set__totalBinaryFields(t_CheckIndex$Status$DocValuesStatus *self, PyObject *arg, void *data)
        {
          jlong value;
          if (!parseArg(arg, "J", &value))
          {
            INT_CALL(self->object._set_totalBinaryFields(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "totalBinaryFields", arg);
          return -1;
        }

        static PyObject *t_CheckIndex$Status$DocValuesStatus_get__totalNumericFields(t_CheckIndex$Status$DocValuesStatus *self, void *data)
        {
          jlong value;
          OBJ_CALL(value = self->object._get_totalNumericFields());
          return PyLong_FromLongLong((PY_LONG_LONG) value);
        }
        static int t_CheckIndex$Status$DocValuesStatus_set__totalNumericFields(t_CheckIndex$Status$DocValuesStatus *self, PyObject *arg, void *data)
        {
          jlong value;
          if (!parseArg(arg, "J", &value))
          {
            INT_CALL(self->object._set_totalNumericFields(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "totalNumericFields", arg);
          return -1;
        }

        static PyObject *t_CheckIndex$Status$DocValuesStatus_get__totalSortedFields(t_CheckIndex$Status$DocValuesStatus *self, void *data)
        {
          jlong value;
          OBJ_CALL(value = self->object._get_totalSortedFields());
          return PyLong_FromLongLong((PY_LONG_LONG) value);
        }
        static int t_CheckIndex$Status$DocValuesStatus_set__totalSortedFields(t_CheckIndex$Status$DocValuesStatus *self, PyObject *arg, void *data)
        {
          jlong value;
          if (!parseArg(arg, "J", &value))
          {
            INT_CALL(self->object._set_totalSortedFields(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "totalSortedFields", arg);
          return -1;
        }

        static PyObject *t_CheckIndex$Status$DocValuesStatus_get__totalSortedNumericFields(t_CheckIndex$Status$DocValuesStatus *self, void *data)
        {
          jlong value;
          OBJ_CALL(value = self->object._get_totalSortedNumericFields());
          return PyLong_FromLongLong((PY_LONG_LONG) value);
        }
        static int t_CheckIndex$Status$DocValuesStatus_set__totalSortedNumericFields(t_CheckIndex$Status$DocValuesStatus *self, PyObject *arg, void *data)
        {
          jlong value;
          if (!parseArg(arg, "J", &value))
          {
            INT_CALL(self->object._set_totalSortedNumericFields(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "totalSortedNumericFields", arg);
          return -1;
        }

        static PyObject *t_CheckIndex$Status$DocValuesStatus_get__totalSortedSetFields(t_CheckIndex$Status$DocValuesStatus *self, void *data)
        {
          jlong value;
          OBJ_CALL(value = self->object._get_totalSortedSetFields());
          return PyLong_FromLongLong((PY_LONG_LONG) value);
        }
        static int t_CheckIndex$Status$DocValuesStatus_set__totalSortedSetFields(t_CheckIndex$Status$DocValuesStatus *self, PyObject *arg, void *data)
        {
          jlong value;
          if (!parseArg(arg, "J", &value))
          {
            INT_CALL(self->object._set_totalSortedSetFields(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "totalSortedSetFields", arg);
          return -1;
        }

        static PyObject *t_CheckIndex$Status$DocValuesStatus_get__totalValueFields(t_CheckIndex$Status$DocValuesStatus *self, void *data)
        {
          jlong value;
          OBJ_CALL(value = self->object._get_totalValueFields());
          return PyLong_FromLongLong((PY_LONG_LONG) value);
        }
        static int t_CheckIndex$Status$DocValuesStatus_set__totalValueFields(t_CheckIndex$Status$DocValuesStatus *self, PyObject *arg, void *data)
        {
          jlong value;
          if (!parseArg(arg, "J", &value))
          {
            INT_CALL(self->object._set_totalValueFields(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "totalValueFields", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/egothor/stemmer/MultiTrie2.h"
#include "java/lang/Class.h"
#include "java/lang/CharSequence.h"
#include "java/io/DataOutput.h"
#include "java/io/DataInput.h"
#include "java/io/IOException.h"
#include "org/egothor/stemmer/Reduce.h"
#include "org/egothor/stemmer/Trie.h"
#include "JArray.h"

namespace org {
  namespace egothor {
    namespace stemmer {

      ::java::lang::Class *MultiTrie2::class$ = NULL;
      jmethodID *MultiTrie2::mids$ = NULL;
      bool MultiTrie2::live$ = false;

      jclass MultiTrie2::initializeClass(bool getOnly)
      {
        if (getOnly)
          return (jclass) (live$ ? class$->this$ : NULL);
        if (class$ == NULL)
        {
          jclass cls = (jclass) env->findClass("org/egothor/stemmer/MultiTrie2");

          mids$ = new jmethodID[max_mid];
          mids$[mid_init$_e051d6a6] = env->getMethodID(cls, "<init>", "(Ljava/io/DataInput;)V");
          mids$[mid_init$_bb0c767f] = env->getMethodID(cls, "<init>", "(Z)V");
          mids$[mid_add_db1d05ae] = env->getMethodID(cls, "add", "(Ljava/lang/CharSequence;Ljava/lang/CharSequence;)V");
          mids$[mid_decompose_2fa560b3] = env->getMethodID(cls, "decompose", "(Ljava/lang/CharSequence;)[Ljava/lang/CharSequence;");
          mids$[mid_getFully_856f5013] = env->getMethodID(cls, "getFully", "(Ljava/lang/CharSequence;)Ljava/lang/CharSequence;");
          mids$[mid_getLastOnPath_856f5013] = env->getMethodID(cls, "getLastOnPath", "(Ljava/lang/CharSequence;)Ljava/lang/CharSequence;");
          mids$[mid_reduce_6ee87cd1] = env->getMethodID(cls, "reduce", "(Lorg/egothor/stemmer/Reduce;)Lorg/egothor/stemmer/Trie;");
          mids$[mid_store_cfb051e6] = env->getMethodID(cls, "store", "(Ljava/io/DataOutput;)V");

          class$ = (::java::lang::Class *) new JObject(cls);
          live$ = true;
        }
        return (jclass) class$->this$;
      }

      MultiTrie2::MultiTrie2(const ::java::io::DataInput & a0) : ::org::egothor::stemmer::MultiTrie(env->newObject(initializeClass, &mids$, mid_init$_e051d6a6, a0.this$)) {}

      MultiTrie2::MultiTrie2(jboolean a0) : ::org::egothor::stemmer::MultiTrie(env->newObject(initializeClass, &mids$, mid_init$_bb0c767f, a0)) {}

      void MultiTrie2::add(const ::java::lang::CharSequence & a0, const ::java::lang::CharSequence & a1) const
      {
        env->callVoidMethod(this$, mids$[mid_add_db1d05ae], a0.this$, a1.this$);
      }

      JArray< ::java::lang::CharSequence > MultiTrie2::decompose(const ::java::lang::CharSequence & a0) const
      {
        return JArray< ::java::lang::CharSequence >(env->callObjectMethod(this$, mids$[mid_decompose_2fa560b3], a0.this$));
      }

      ::java::lang::CharSequence MultiTrie2::getFully(const ::java::lang::CharSequence & a0) const
      {
        return ::java::lang::CharSequence(env->callObjectMethod(this$, mids$[mid_getFully_856f5013], a0.this$));
      }

      ::java::lang::CharSequence MultiTrie2::getLastOnPath(const ::java::lang::CharSequence & a0) const
      {
        return ::java::lang::CharSequence(env->callObjectMethod(this$, mids$[mid_getLastOnPath_856f5013], a0.this$));
      }

      ::org::egothor::stemmer::Trie MultiTrie2::reduce(const ::org::egothor::stemmer::Reduce & a0) const
      {
        return ::org::egothor::stemmer::Trie(env->callObjectMethod(this$, mids$[mid_reduce_6ee87cd1], a0.this$));
      }

      void MultiTrie2::store(const ::java::io::DataOutput & a0) const
      {
        env->callVoidMethod(this$, mids$[mid_store_cfb051e6], a0.this$);
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace egothor {
    namespace stemmer {
      static PyObject *t_MultiTrie2_cast_(PyTypeObject *type, PyObject *arg);
      static PyObject *t_MultiTrie2_instance_(PyTypeObject *type, PyObject *arg);
      static int t_MultiTrie2_init_(t_MultiTrie2 *self, PyObject *args, PyObject *kwds);
      static PyObject *t_MultiTrie2_add(t_MultiTrie2 *self, PyObject *args);
      static PyObject *t_MultiTrie2_decompose(t_MultiTrie2 *self, PyObject *arg);
      static PyObject *t_MultiTrie2_getFully(t_MultiTrie2 *self, PyObject *args);
      static PyObject *t_MultiTrie2_getLastOnPath(t_MultiTrie2 *self, PyObject *args);
      static PyObject *t_MultiTrie2_reduce(t_MultiTrie2 *self, PyObject *args);
      static PyObject *t_MultiTrie2_store(t_MultiTrie2 *self, PyObject *args);

      static PyMethodDef t_MultiTrie2__methods_[] = {
        DECLARE_METHOD(t_MultiTrie2, cast_, METH_O | METH_CLASS),
        DECLARE_METHOD(t_MultiTrie2, instance_, METH_O | METH_CLASS),
        DECLARE_METHOD(t_MultiTrie2, add, METH_VARARGS),
        DECLARE_METHOD(t_MultiTrie2, decompose, METH_O),
        DECLARE_METHOD(t_MultiTrie2, getFully, METH_VARARGS),
        DECLARE_METHOD(t_MultiTrie2, getLastOnPath, METH_VARARGS),
        DECLARE_METHOD(t_MultiTrie2, reduce, METH_VARARGS),
        DECLARE_METHOD(t_MultiTrie2, store, METH_VARARGS),
        { NULL, NULL, 0, NULL }
      };

      DECLARE_TYPE(MultiTrie2, t_MultiTrie2, ::org::egothor::stemmer::MultiTrie, MultiTrie2, t_MultiTrie2_init_, 0, 0, 0, 0, 0);

      void t_MultiTrie2::install(PyObject *module)
      {
        installType(&PY_TYPE(MultiTrie2), module, "MultiTrie2", 0);
      }

      void t_MultiTrie2::initialize(PyObject *module)
      {
        PyDict_SetItemString(PY_TYPE(MultiTrie2).tp_dict, "class_", make_descriptor(MultiTrie2::initializeClass, 1));
        PyDict_SetItemString(PY_TYPE(MultiTrie2).tp_dict, "wrapfn_", make_descriptor(t_MultiTrie2::wrap_jobject));
        PyDict_SetItemString(PY_TYPE(MultiTrie2).tp_dict, "boxfn_", make_descriptor(boxObject));
      }

      static PyObject *t_MultiTrie2_cast_(PyTypeObject *type, PyObject *arg)
      {
        if (!(arg = castCheck(arg, MultiTrie2::initializeClass, 1)))
          return NULL;
        return t_MultiTrie2::wrap_Object(MultiTrie2(((t_MultiTrie2 *) arg)->object.this$));
      }
      static PyObject *t_MultiTrie2_instance_(PyTypeObject *type, PyObject *arg)
      {
        if (!castCheck(arg, MultiTrie2::initializeClass, 0))
          Py_RETURN_FALSE;
        Py_RETURN_TRUE;
      }

      static int t_MultiTrie2_init_(t_MultiTrie2 *self, PyObject *args, PyObject *kwds)
      {
        switch (PyTuple_GET_SIZE(args)) {
         case 1:
          {
            ::java::io::DataInput a0((jobject) NULL);
            MultiTrie2 object((jobject) NULL);

            if (!parseArgs(args, "k", ::java::io::DataInput::initializeClass, &a0))
            {
              INT_CALL(object = MultiTrie2(a0));
              self->object = object;
              break;
            }
          }
          {
            jboolean a0;
            MultiTrie2 object((jobject) NULL);

            if (!parseArgs(args, "Z", &a0))
            {
              INT_CALL(object = MultiTrie2(a0));
              self->object = object;
              break;
            }
          }
         default:
          PyErr_SetArgsError((PyObject *) self, "__init__", args);
          return -1;
        }

        return 0;
      }

      static PyObject *t_MultiTrie2_add(t_MultiTrie2 *self, PyObject *args)
      {
        ::java::lang::CharSequence a0((jobject) NULL);
        ::java::lang::CharSequence a1((jobject) NULL);

        if (!parseArgs(args, "OO", &::java::lang::PY_TYPE(CharSequence), &::java::lang::PY_TYPE(CharSequence), &a0, &a1))
        {
          OBJ_CALL(self->object.add(a0, a1));
          Py_RETURN_NONE;
        }

        return callSuper(&PY_TYPE(MultiTrie2), (PyObject *) self, "add", args, 2);
      }

      static PyObject *t_MultiTrie2_decompose(t_MultiTrie2 *self, PyObject *arg)
      {
        ::java::lang::CharSequence a0((jobject) NULL);
        JArray< ::java::lang::CharSequence > result((jobject) NULL);

        if (!parseArg(arg, "O", &::java::lang::PY_TYPE(CharSequence), &a0))
        {
          OBJ_CALL(result = self->object.decompose(a0));
          return JArray<jobject>(result.this$).wrap(::java::lang::t_CharSequence::wrap_jobject);
        }

        PyErr_SetArgsError((PyObject *) self, "decompose", arg);
        return NULL;
      }

      static PyObject *t_MultiTrie2_getFully(t_MultiTrie2 *self, PyObject *args)
      {
        ::java::lang::CharSequence a0((jobject) NULL);
        ::java::lang::CharSequence result((jobject) NULL);

        if (!parseArgs(args, "O", &::java::lang::PY_TYPE(CharSequence), &a0))
        {
          OBJ_CALL(result = self->object.getFully(a0));
          return ::java::lang::t_CharSequence::wrap_Object(result);
        }

        return callSuper(&PY_TYPE(MultiTrie2), (PyObject *) self, "getFully", args, 2);
      }

      static PyObject *t_MultiTrie2_getLastOnPath(t_MultiTrie2 *self, PyObject *args)
      {
        ::java::lang::CharSequence a0((jobject) NULL);
        ::java::lang::CharSequence result((jobject) NULL);

        if (!parseArgs(args, "O", &::java::lang::PY_TYPE(CharSequence), &a0))
        {
          OBJ_CALL(result = self->object.getLastOnPath(a0));
          return ::java::lang::t_CharSequence::wrap_Object(result);
        }

        return callSuper(&PY_TYPE(MultiTrie2), (PyObject *) self, "getLastOnPath", args, 2);
      }

      static PyObject *t_MultiTrie2_reduce(t_MultiTrie2 *self, PyObject *args)
      {
        ::org::egothor::stemmer::Reduce a0((jobject) NULL);
        ::org::egothor::stemmer::Trie result((jobject) NULL);

        if (!parseArgs(args, "k", ::org::egothor::stemmer::Reduce::initializeClass, &a0))
        {
          OBJ_CALL(result = self->object.reduce(a0));
          return ::org::egothor::stemmer::t_Trie::wrap_Object(result);
        }

        return callSuper(&PY_TYPE(MultiTrie2), (PyObject *) self, "reduce", args, 2);
      }

      static PyObject *t_MultiTrie2_store(t_MultiTrie2 *self, PyObject *args)
      {
        ::java::io::DataOutput a0((jobject) NULL);

        if (!parseArgs(args, "k", ::java::io::DataOutput::initializeClass, &a0))
        {
          OBJ_CALL(self->object.store(a0));
          Py_RETURN_NONE;
        }

        return callSuper(&PY_TYPE(MultiTrie2), (PyObject *) self, "store", args, 2);
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queries/function/valuesource/QueryValueSource.h"
#include "org/apache/lucene/queries/function/FunctionValues.h"
#include "java/lang/Class.h"
#include "java/lang/Object.h"
#include "java/io/IOException.h"
#include "java/util/Map.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "java/lang/String.h"
#include "org/apache/lucene/search/IndexSearcher.h"
#include "org/apache/lucene/search/Query.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {

            ::java::lang::Class *QueryValueSource::class$ = NULL;
            jmethodID *QueryValueSource::mids$ = NULL;
            bool QueryValueSource::live$ = false;

            jclass QueryValueSource::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queries/function/valuesource/QueryValueSource");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_05a7d758] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/Query;F)V");
                mids$[mid_createWeight_1b6125ba] = env->getMethodID(cls, "createWeight", "(Ljava/util/Map;Lorg/apache/lucene/search/IndexSearcher;)V");
                mids$[mid_description_14c7b5c5] = env->getMethodID(cls, "description", "()Ljava/lang/String;");
                mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
                mids$[mid_getDefaultValue_54c6a176] = env->getMethodID(cls, "getDefaultValue", "()F");
                mids$[mid_getQuery_97e3851a] = env->getMethodID(cls, "getQuery", "()Lorg/apache/lucene/search/Query;");
                mids$[mid_getValues_4c566485] = env->getMethodID(cls, "getValues", "(Ljava/util/Map;Lorg/apache/lucene/index/AtomicReaderContext;)Lorg/apache/lucene/queries/function/FunctionValues;");
                mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            QueryValueSource::QueryValueSource(const ::org::apache::lucene::search::Query & a0, jfloat a1) : ::org::apache::lucene::queries::function::ValueSource(env->newObject(initializeClass, &mids$, mid_init$_05a7d758, a0.this$, a1)) {}

            void QueryValueSource::createWeight(const ::java::util::Map & a0, const ::org::apache::lucene::search::IndexSearcher & a1) const
            {
              env->callVoidMethod(this$, mids$[mid_createWeight_1b6125ba], a0.this$, a1.this$);
            }

            ::java::lang::String QueryValueSource::description() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_description_14c7b5c5]));
            }

            jboolean QueryValueSource::equals(const ::java::lang::Object & a0) const
            {
              return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
            }

            jfloat QueryValueSource::getDefaultValue() const
            {
              return env->callFloatMethod(this$, mids$[mid_getDefaultValue_54c6a176]);
            }

            ::org::apache::lucene::search::Query QueryValueSource::getQuery() const
            {
              return ::org::apache::lucene::search::Query(env->callObjectMethod(this$, mids$[mid_getQuery_97e3851a]));
            }

            ::org::apache::lucene::queries::function::FunctionValues QueryValueSource::getValues(const ::java::util::Map & a0, const ::org::apache::lucene::index::AtomicReaderContext & a1) const
            {
              return ::org::apache::lucene::queries::function::FunctionValues(env->callObjectMethod(this$, mids$[mid_getValues_4c566485], a0.this$, a1.this$));
            }

            jint QueryValueSource::hashCode() const
            {
              return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {
            static PyObject *t_QueryValueSource_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_QueryValueSource_instance_(PyTypeObject *type, PyObject *arg);
            static int t_QueryValueSource_init_(t_QueryValueSource *self, PyObject *args, PyObject *kwds);
            static PyObject *t_QueryValueSource_createWeight(t_QueryValueSource *self, PyObject *args);
            static PyObject *t_QueryValueSource_description(t_QueryValueSource *self, PyObject *args);
            static PyObject *t_QueryValueSource_equals(t_QueryValueSource *self, PyObject *args);
            static PyObject *t_QueryValueSource_getDefaultValue(t_QueryValueSource *self);
            static PyObject *t_QueryValueSource_getQuery(t_QueryValueSource *self);
            static PyObject *t_QueryValueSource_getValues(t_QueryValueSource *self, PyObject *args);
            static PyObject *t_QueryValueSource_hashCode(t_QueryValueSource *self, PyObject *args);
            static PyObject *t_QueryValueSource_get__defaultValue(t_QueryValueSource *self, void *data);
            static PyObject *t_QueryValueSource_get__query(t_QueryValueSource *self, void *data);
            static PyGetSetDef t_QueryValueSource__fields_[] = {
              DECLARE_GET_FIELD(t_QueryValueSource, defaultValue),
              DECLARE_GET_FIELD(t_QueryValueSource, query),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_QueryValueSource__methods_[] = {
              DECLARE_METHOD(t_QueryValueSource, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_QueryValueSource, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_QueryValueSource, createWeight, METH_VARARGS),
              DECLARE_METHOD(t_QueryValueSource, description, METH_VARARGS),
              DECLARE_METHOD(t_QueryValueSource, equals, METH_VARARGS),
              DECLARE_METHOD(t_QueryValueSource, getDefaultValue, METH_NOARGS),
              DECLARE_METHOD(t_QueryValueSource, getQuery, METH_NOARGS),
              DECLARE_METHOD(t_QueryValueSource, getValues, METH_VARARGS),
              DECLARE_METHOD(t_QueryValueSource, hashCode, METH_VARARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(QueryValueSource, t_QueryValueSource, ::org::apache::lucene::queries::function::ValueSource, QueryValueSource, t_QueryValueSource_init_, 0, 0, t_QueryValueSource__fields_, 0, 0);

            void t_QueryValueSource::install(PyObject *module)
            {
              installType(&PY_TYPE(QueryValueSource), module, "QueryValueSource", 0);
            }

            void t_QueryValueSource::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(QueryValueSource).tp_dict, "class_", make_descriptor(QueryValueSource::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(QueryValueSource).tp_dict, "wrapfn_", make_descriptor(t_QueryValueSource::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(QueryValueSource).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_QueryValueSource_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, QueryValueSource::initializeClass, 1)))
                return NULL;
              return t_QueryValueSource::wrap_Object(QueryValueSource(((t_QueryValueSource *) arg)->object.this$));
            }
            static PyObject *t_QueryValueSource_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, QueryValueSource::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_QueryValueSource_init_(t_QueryValueSource *self, PyObject *args, PyObject *kwds)
            {
              ::org::apache::lucene::search::Query a0((jobject) NULL);
              jfloat a1;
              QueryValueSource object((jobject) NULL);

              if (!parseArgs(args, "kF", ::org::apache::lucene::search::Query::initializeClass, &a0, &a1))
              {
                INT_CALL(object = QueryValueSource(a0, a1));
                self->object = object;
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_QueryValueSource_createWeight(t_QueryValueSource *self, PyObject *args)
            {
              ::java::util::Map a0((jobject) NULL);
              PyTypeObject **p0;
              ::org::apache::lucene::search::IndexSearcher a1((jobject) NULL);

              if (!parseArgs(args, "Kk", ::java::util::Map::initializeClass, ::org::apache::lucene::search::IndexSearcher::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_, &a1))
              {
                OBJ_CALL(self->object.createWeight(a0, a1));
                Py_RETURN_NONE;
              }

              return callSuper(&PY_TYPE(QueryValueSource), (PyObject *) self, "createWeight", args, 2);
            }

            static PyObject *t_QueryValueSource_description(t_QueryValueSource *self, PyObject *args)
            {
              ::java::lang::String result((jobject) NULL);

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.description());
                return j2p(result);
              }

              return callSuper(&PY_TYPE(QueryValueSource), (PyObject *) self, "description", args, 2);
            }

            static PyObject *t_QueryValueSource_equals(t_QueryValueSource *self, PyObject *args)
            {
              ::java::lang::Object a0((jobject) NULL);
              jboolean result;

              if (!parseArgs(args, "o", &a0))
              {
                OBJ_CALL(result = self->object.equals(a0));
                Py_RETURN_BOOL(result);
              }

              return callSuper(&PY_TYPE(QueryValueSource), (PyObject *) self, "equals", args, 2);
            }

            static PyObject *t_QueryValueSource_getDefaultValue(t_QueryValueSource *self)
            {
              jfloat result;
              OBJ_CALL(result = self->object.getDefaultValue());
              return PyFloat_FromDouble((double) result);
            }

            static PyObject *t_QueryValueSource_getQuery(t_QueryValueSource *self)
            {
              ::org::apache::lucene::search::Query result((jobject) NULL);
              OBJ_CALL(result = self->object.getQuery());
              return ::org::apache::lucene::search::t_Query::wrap_Object(result);
            }

            static PyObject *t_QueryValueSource_getValues(t_QueryValueSource *self, PyObject *args)
            {
              ::java::util::Map a0((jobject) NULL);
              PyTypeObject **p0;
              ::org::apache::lucene::index::AtomicReaderContext a1((jobject) NULL);
              ::org::apache::lucene::queries::function::FunctionValues result((jobject) NULL);

              if (!parseArgs(args, "Kk", ::java::util::Map::initializeClass, ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_, &a1))
              {
                OBJ_CALL(result = self->object.getValues(a0, a1));
                return ::org::apache::lucene::queries::function::t_FunctionValues::wrap_Object(result);
              }

              return callSuper(&PY_TYPE(QueryValueSource), (PyObject *) self, "getValues", args, 2);
            }

            static PyObject *t_QueryValueSource_hashCode(t_QueryValueSource *self, PyObject *args)
            {
              jint result;

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.hashCode());
                return PyInt_FromLong((long) result);
              }

              return callSuper(&PY_TYPE(QueryValueSource), (PyObject *) self, "hashCode", args, 2);
            }

            static PyObject *t_QueryValueSource_get__defaultValue(t_QueryValueSource *self, void *data)
            {
              jfloat value;
              OBJ_CALL(value = self->object.getDefaultValue());
              return PyFloat_FromDouble((double) value);
            }

            static PyObject *t_QueryValueSource_get__query(t_QueryValueSource *self, void *data)
            {
              ::org::apache::lucene::search::Query value((jobject) NULL);
              OBJ_CALL(value = self->object.getQuery());
              return ::org::apache::lucene::search::t_Query::wrap_Object(value);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/commongrams/CommonGramsQueryFilter.h"
#include "org/apache/lucene/analysis/commongrams/CommonGramsFilter.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace commongrams {

          ::java::lang::Class *CommonGramsQueryFilter::class$ = NULL;
          jmethodID *CommonGramsQueryFilter::mids$ = NULL;
          bool CommonGramsQueryFilter::live$ = false;

          jclass CommonGramsQueryFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/commongrams/CommonGramsQueryFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_625c9356] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/commongrams/CommonGramsFilter;)V");
              mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");
              mids$[mid_isGramType_54c6a16a] = env->getMethodID(cls, "isGramType", "()Z");
              mids$[mid_reset_54c6a166] = env->getMethodID(cls, "reset", "()V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          CommonGramsQueryFilter::CommonGramsQueryFilter(const ::org::apache::lucene::analysis::commongrams::CommonGramsFilter & a0) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_625c9356, a0.this$)) {}

          jboolean CommonGramsQueryFilter::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_54c6a16a]);
          }

          jboolean CommonGramsQueryFilter::isGramType() const
          {
            return env->callBooleanMethod(this$, mids$[mid_isGramType_54c6a16a]);
          }

          void CommonGramsQueryFilter::reset() const
          {
            env->callVoidMethod(this$, mids$[mid_reset_54c6a166]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace commongrams {
          static PyObject *t_CommonGramsQueryFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_CommonGramsQueryFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_CommonGramsQueryFilter_init_(t_CommonGramsQueryFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_CommonGramsQueryFilter_incrementToken(t_CommonGramsQueryFilter *self, PyObject *args);
          static PyObject *t_CommonGramsQueryFilter_isGramType(t_CommonGramsQueryFilter *self);
          static PyObject *t_CommonGramsQueryFilter_reset(t_CommonGramsQueryFilter *self, PyObject *args);
          static PyObject *t_CommonGramsQueryFilter_get__gramType(t_CommonGramsQueryFilter *self, void *data);
          static PyGetSetDef t_CommonGramsQueryFilter__fields_[] = {
            DECLARE_GET_FIELD(t_CommonGramsQueryFilter, gramType),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_CommonGramsQueryFilter__methods_[] = {
            DECLARE_METHOD(t_CommonGramsQueryFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CommonGramsQueryFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CommonGramsQueryFilter, incrementToken, METH_VARARGS),
            DECLARE_METHOD(t_CommonGramsQueryFilter, isGramType, METH_NOARGS),
            DECLARE_METHOD(t_CommonGramsQueryFilter, reset, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(CommonGramsQueryFilter, t_CommonGramsQueryFilter, ::org::apache::lucene::analysis::TokenFilter, CommonGramsQueryFilter, t_CommonGramsQueryFilter_init_, 0, 0, t_CommonGramsQueryFilter__fields_, 0, 0);

          void t_CommonGramsQueryFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(CommonGramsQueryFilter), module, "CommonGramsQueryFilter", 0);
          }

          void t_CommonGramsQueryFilter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(CommonGramsQueryFilter).tp_dict, "class_", make_descriptor(CommonGramsQueryFilter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(CommonGramsQueryFilter).tp_dict, "wrapfn_", make_descriptor(t_CommonGramsQueryFilter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(CommonGramsQueryFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_CommonGramsQueryFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, CommonGramsQueryFilter::initializeClass, 1)))
              return NULL;
            return t_CommonGramsQueryFilter::wrap_Object(CommonGramsQueryFilter(((t_CommonGramsQueryFilter *) arg)->object.this$));
          }
          static PyObject *t_CommonGramsQueryFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, CommonGramsQueryFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_CommonGramsQueryFilter_init_(t_CommonGramsQueryFilter *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::analysis::commongrams::CommonGramsFilter a0((jobject) NULL);
            CommonGramsQueryFilter object((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::commongrams::CommonGramsFilter::initializeClass, &a0))
            {
              INT_CALL(object = CommonGramsQueryFilter(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_CommonGramsQueryFilter_incrementToken(t_CommonGramsQueryFilter *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(CommonGramsQueryFilter), (PyObject *) self, "incrementToken", args, 2);
          }

          static PyObject *t_CommonGramsQueryFilter_isGramType(t_CommonGramsQueryFilter *self)
          {
            jboolean result;
            OBJ_CALL(result = self->object.isGramType());
            Py_RETURN_BOOL(result);
          }

          static PyObject *t_CommonGramsQueryFilter_reset(t_CommonGramsQueryFilter *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.reset());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(CommonGramsQueryFilter), (PyObject *) self, "reset", args, 2);
          }

          static PyObject *t_CommonGramsQueryFilter_get__gramType(t_CommonGramsQueryFilter *self, void *data)
          {
            jboolean value;
            OBJ_CALL(value = self->object.isGramType());
            Py_RETURN_BOOL(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/postingshighlight/Passage.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace postingshighlight {

          ::java::lang::Class *Passage::class$ = NULL;
          jmethodID *Passage::mids$ = NULL;
          bool Passage::live$ = false;

          jclass Passage::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/postingshighlight/Passage");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_getEndOffset_54c6a179] = env->getMethodID(cls, "getEndOffset", "()I");
              mids$[mid_getMatchEnds_dab10e75] = env->getMethodID(cls, "getMatchEnds", "()[I");
              mids$[mid_getMatchStarts_dab10e75] = env->getMethodID(cls, "getMatchStarts", "()[I");
              mids$[mid_getMatchTerms_19d1f84d] = env->getMethodID(cls, "getMatchTerms", "()[Lorg/apache/lucene/util/BytesRef;");
              mids$[mid_getNumMatches_54c6a179] = env->getMethodID(cls, "getNumMatches", "()I");
              mids$[mid_getScore_54c6a176] = env->getMethodID(cls, "getScore", "()F");
              mids$[mid_getStartOffset_54c6a179] = env->getMethodID(cls, "getStartOffset", "()I");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          Passage::Passage() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          jint Passage::getEndOffset() const
          {
            return env->callIntMethod(this$, mids$[mid_getEndOffset_54c6a179]);
          }

          JArray< jint > Passage::getMatchEnds() const
          {
            return JArray< jint >(env->callObjectMethod(this$, mids$[mid_getMatchEnds_dab10e75]));
          }

          JArray< jint > Passage::getMatchStarts() const
          {
            return JArray< jint >(env->callObjectMethod(this$, mids$[mid_getMatchStarts_dab10e75]));
          }

          JArray< ::org::apache::lucene::util::BytesRef > Passage::getMatchTerms() const
          {
            return JArray< ::org::apache::lucene::util::BytesRef >(env->callObjectMethod(this$, mids$[mid_getMatchTerms_19d1f84d]));
          }

          jint Passage::getNumMatches() const
          {
            return env->callIntMethod(this$, mids$[mid_getNumMatches_54c6a179]);
          }

          jfloat Passage::getScore() const
          {
            return env->callFloatMethod(this$, mids$[mid_getScore_54c6a176]);
          }

          jint Passage::getStartOffset() const
          {
            return env->callIntMethod(this$, mids$[mid_getStartOffset_54c6a179]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace postingshighlight {
          static PyObject *t_Passage_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Passage_instance_(PyTypeObject *type, PyObject *arg);
          static int t_Passage_init_(t_Passage *self, PyObject *args, PyObject *kwds);
          static PyObject *t_Passage_getEndOffset(t_Passage *self);
          static PyObject *t_Passage_getMatchEnds(t_Passage *self);
          static PyObject *t_Passage_getMatchStarts(t_Passage *self);
          static PyObject *t_Passage_getMatchTerms(t_Passage *self);
          static PyObject *t_Passage_getNumMatches(t_Passage *self);
          static PyObject *t_Passage_getScore(t_Passage *self);
          static PyObject *t_Passage_getStartOffset(t_Passage *self);
          static PyObject *t_Passage_get__endOffset(t_Passage *self, void *data);
          static PyObject *t_Passage_get__matchEnds(t_Passage *self, void *data);
          static PyObject *t_Passage_get__matchStarts(t_Passage *self, void *data);
          static PyObject *t_Passage_get__matchTerms(t_Passage *self, void *data);
          static PyObject *t_Passage_get__numMatches(t_Passage *self, void *data);
          static PyObject *t_Passage_get__score(t_Passage *self, void *data);
          static PyObject *t_Passage_get__startOffset(t_Passage *self, void *data);
          static PyGetSetDef t_Passage__fields_[] = {
            DECLARE_GET_FIELD(t_Passage, endOffset),
            DECLARE_GET_FIELD(t_Passage, matchEnds),
            DECLARE_GET_FIELD(t_Passage, matchStarts),
            DECLARE_GET_FIELD(t_Passage, matchTerms),
            DECLARE_GET_FIELD(t_Passage, numMatches),
            DECLARE_GET_FIELD(t_Passage, score),
            DECLARE_GET_FIELD(t_Passage, startOffset),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_Passage__methods_[] = {
            DECLARE_METHOD(t_Passage, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Passage, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Passage, getEndOffset, METH_NOARGS),
            DECLARE_METHOD(t_Passage, getMatchEnds, METH_NOARGS),
            DECLARE_METHOD(t_Passage, getMatchStarts, METH_NOARGS),
            DECLARE_METHOD(t_Passage, getMatchTerms, METH_NOARGS),
            DECLARE_METHOD(t_Passage, getNumMatches, METH_NOARGS),
            DECLARE_METHOD(t_Passage, getScore, METH_NOARGS),
            DECLARE_METHOD(t_Passage, getStartOffset, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(Passage, t_Passage, ::java::lang::Object, Passage, t_Passage_init_, 0, 0, t_Passage__fields_, 0, 0);

          void t_Passage::install(PyObject *module)
          {
            installType(&PY_TYPE(Passage), module, "Passage", 0);
          }

          void t_Passage::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(Passage).tp_dict, "class_", make_descriptor(Passage::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(Passage).tp_dict, "wrapfn_", make_descriptor(t_Passage::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(Passage).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_Passage_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, Passage::initializeClass, 1)))
              return NULL;
            return t_Passage::wrap_Object(Passage(((t_Passage *) arg)->object.this$));
          }
          static PyObject *t_Passage_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, Passage::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_Passage_init_(t_Passage *self, PyObject *args, PyObject *kwds)
          {
            Passage object((jobject) NULL);

            INT_CALL(object = Passage());
            self->object = object;

            return 0;
          }

          static PyObject *t_Passage_getEndOffset(t_Passage *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getEndOffset());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_Passage_getMatchEnds(t_Passage *self)
          {
            JArray< jint > result((jobject) NULL);
            OBJ_CALL(result = self->object.getMatchEnds());
            return result.wrap();
          }

          static PyObject *t_Passage_getMatchStarts(t_Passage *self)
          {
            JArray< jint > result((jobject) NULL);
            OBJ_CALL(result = self->object.getMatchStarts());
            return result.wrap();
          }

          static PyObject *t_Passage_getMatchTerms(t_Passage *self)
          {
            JArray< ::org::apache::lucene::util::BytesRef > result((jobject) NULL);
            OBJ_CALL(result = self->object.getMatchTerms());
            return JArray<jobject>(result.this$).wrap(::org::apache::lucene::util::t_BytesRef::wrap_jobject);
          }

          static PyObject *t_Passage_getNumMatches(t_Passage *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getNumMatches());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_Passage_getScore(t_Passage *self)
          {
            jfloat result;
            OBJ_CALL(result = self->object.getScore());
            return PyFloat_FromDouble((double) result);
          }

          static PyObject *t_Passage_getStartOffset(t_Passage *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getStartOffset());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_Passage_get__endOffset(t_Passage *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getEndOffset());
            return PyInt_FromLong((long) value);
          }

          static PyObject *t_Passage_get__matchEnds(t_Passage *self, void *data)
          {
            JArray< jint > value((jobject) NULL);
            OBJ_CALL(value = self->object.getMatchEnds());
            return value.wrap();
          }

          static PyObject *t_Passage_get__matchStarts(t_Passage *self, void *data)
          {
            JArray< jint > value((jobject) NULL);
            OBJ_CALL(value = self->object.getMatchStarts());
            return value.wrap();
          }

          static PyObject *t_Passage_get__matchTerms(t_Passage *self, void *data)
          {
            JArray< ::org::apache::lucene::util::BytesRef > value((jobject) NULL);
            OBJ_CALL(value = self->object.getMatchTerms());
            return JArray<jobject>(value.this$).wrap(::org::apache::lucene::util::t_BytesRef::wrap_jobject);
          }

          static PyObject *t_Passage_get__numMatches(t_Passage *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getNumMatches());
            return PyInt_FromLong((long) value);
          }

          static PyObject *t_Passage_get__score(t_Passage *self, void *data)
          {
            jfloat value;
            OBJ_CALL(value = self->object.getScore());
            return PyFloat_FromDouble((double) value);
          }

          static PyObject *t_Passage_get__startOffset(t_Passage *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getStartOffset());
            return PyInt_FromLong((long) value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/highlight/SimpleSpanFragmenter.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/String.h"
#include "org/apache/lucene/search/highlight/Fragmenter.h"
#include "org/apache/lucene/search/highlight/QueryScorer.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace highlight {

          ::java::lang::Class *SimpleSpanFragmenter::class$ = NULL;
          jmethodID *SimpleSpanFragmenter::mids$ = NULL;
          bool SimpleSpanFragmenter::live$ = false;

          jclass SimpleSpanFragmenter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/highlight/SimpleSpanFragmenter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_fe38f734] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/highlight/QueryScorer;)V");
              mids$[mid_init$_14d972ea] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/highlight/QueryScorer;I)V");
              mids$[mid_isNewFragment_54c6a16a] = env->getMethodID(cls, "isNewFragment", "()Z");
              mids$[mid_start_7d0c5392] = env->getMethodID(cls, "start", "(Ljava/lang/String;Lorg/apache/lucene/analysis/TokenStream;)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          SimpleSpanFragmenter::SimpleSpanFragmenter(const ::org::apache::lucene::search::highlight::QueryScorer & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_fe38f734, a0.this$)) {}

          SimpleSpanFragmenter::SimpleSpanFragmenter(const ::org::apache::lucene::search::highlight::QueryScorer & a0, jint a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_14d972ea, a0.this$, a1)) {}

          jboolean SimpleSpanFragmenter::isNewFragment() const
          {
            return env->callBooleanMethod(this$, mids$[mid_isNewFragment_54c6a16a]);
          }

          void SimpleSpanFragmenter::start(const ::java::lang::String & a0, const ::org::apache::lucene::analysis::TokenStream & a1) const
          {
            env->callVoidMethod(this$, mids$[mid_start_7d0c5392], a0.this$, a1.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace highlight {
          static PyObject *t_SimpleSpanFragmenter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SimpleSpanFragmenter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_SimpleSpanFragmenter_init_(t_SimpleSpanFragmenter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_SimpleSpanFragmenter_isNewFragment(t_SimpleSpanFragmenter *self);
          static PyObject *t_SimpleSpanFragmenter_start(t_SimpleSpanFragmenter *self, PyObject *args);
          static PyObject *t_SimpleSpanFragmenter_get__newFragment(t_SimpleSpanFragmenter *self, void *data);
          static PyGetSetDef t_SimpleSpanFragmenter__fields_[] = {
            DECLARE_GET_FIELD(t_SimpleSpanFragmenter, newFragment),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_SimpleSpanFragmenter__methods_[] = {
            DECLARE_METHOD(t_SimpleSpanFragmenter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SimpleSpanFragmenter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SimpleSpanFragmenter, isNewFragment, METH_NOARGS),
            DECLARE_METHOD(t_SimpleSpanFragmenter, start, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(SimpleSpanFragmenter, t_SimpleSpanFragmenter, ::java::lang::Object, SimpleSpanFragmenter, t_SimpleSpanFragmenter_init_, 0, 0, t_SimpleSpanFragmenter__fields_, 0, 0);

          void t_SimpleSpanFragmenter::install(PyObject *module)
          {
            installType(&PY_TYPE(SimpleSpanFragmenter), module, "SimpleSpanFragmenter", 0);
          }

          void t_SimpleSpanFragmenter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(SimpleSpanFragmenter).tp_dict, "class_", make_descriptor(SimpleSpanFragmenter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(SimpleSpanFragmenter).tp_dict, "wrapfn_", make_descriptor(t_SimpleSpanFragmenter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(SimpleSpanFragmenter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_SimpleSpanFragmenter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, SimpleSpanFragmenter::initializeClass, 1)))
              return NULL;
            return t_SimpleSpanFragmenter::wrap_Object(SimpleSpanFragmenter(((t_SimpleSpanFragmenter *) arg)->object.this$));
          }
          static PyObject *t_SimpleSpanFragmenter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, SimpleSpanFragmenter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_SimpleSpanFragmenter_init_(t_SimpleSpanFragmenter *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::org::apache::lucene::search::highlight::QueryScorer a0((jobject) NULL);
                SimpleSpanFragmenter object((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::search::highlight::QueryScorer::initializeClass, &a0))
                {
                  INT_CALL(object = SimpleSpanFragmenter(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 2:
              {
                ::org::apache::lucene::search::highlight::QueryScorer a0((jobject) NULL);
                jint a1;
                SimpleSpanFragmenter object((jobject) NULL);

                if (!parseArgs(args, "kI", ::org::apache::lucene::search::highlight::QueryScorer::initializeClass, &a0, &a1))
                {
                  INT_CALL(object = SimpleSpanFragmenter(a0, a1));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_SimpleSpanFragmenter_isNewFragment(t_SimpleSpanFragmenter *self)
          {
            jboolean result;
            OBJ_CALL(result = self->object.isNewFragment());
            Py_RETURN_BOOL(result);
          }

          static PyObject *t_SimpleSpanFragmenter_start(t_SimpleSpanFragmenter *self, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            ::org::apache::lucene::analysis::TokenStream a1((jobject) NULL);

            if (!parseArgs(args, "sk", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0, &a1))
            {
              OBJ_CALL(self->object.start(a0, a1));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "start", args);
            return NULL;
          }

          static PyObject *t_SimpleSpanFragmenter_get__newFragment(t_SimpleSpanFragmenter *self, void *data)
          {
            jboolean value;
            OBJ_CALL(value = self->object.isNewFragment());
            Py_RETURN_BOOL(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/store/RAMOutputStream.h"
#include "org/apache/lucene/store/DataOutput.h"
#include "org/apache/lucene/util/Accountable.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/store/RAMFile.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {

        ::java::lang::Class *RAMOutputStream::class$ = NULL;
        jmethodID *RAMOutputStream::mids$ = NULL;
        bool RAMOutputStream::live$ = false;

        jclass RAMOutputStream::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/store/RAMOutputStream");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_init$_ca7ad9be] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/store/RAMFile;Z)V");
            mids$[mid_close_54c6a166] = env->getMethodID(cls, "close", "()V");
            mids$[mid_flush_54c6a166] = env->getMethodID(cls, "flush", "()V");
            mids$[mid_getChecksum_54c6a17a] = env->getMethodID(cls, "getChecksum", "()J");
            mids$[mid_getFilePointer_54c6a17a] = env->getMethodID(cls, "getFilePointer", "()J");
            mids$[mid_ramBytesUsed_54c6a17a] = env->getMethodID(cls, "ramBytesUsed", "()J");
            mids$[mid_reset_54c6a166] = env->getMethodID(cls, "reset", "()V");
            mids$[mid_writeByte_b2271687] = env->getMethodID(cls, "writeByte", "(B)V");
            mids$[mid_writeBytes_86f4435f] = env->getMethodID(cls, "writeBytes", "([BII)V");
            mids$[mid_writeTo_27875f57] = env->getMethodID(cls, "writeTo", "(Lorg/apache/lucene/store/DataOutput;)V");
            mids$[mid_writeTo_b8354c43] = env->getMethodID(cls, "writeTo", "([BI)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        RAMOutputStream::RAMOutputStream() : ::org::apache::lucene::store::IndexOutput(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        RAMOutputStream::RAMOutputStream(const ::org::apache::lucene::store::RAMFile & a0, jboolean a1) : ::org::apache::lucene::store::IndexOutput(env->newObject(initializeClass, &mids$, mid_init$_ca7ad9be, a0.this$, a1)) {}

        void RAMOutputStream::close() const
        {
          env->callVoidMethod(this$, mids$[mid_close_54c6a166]);
        }

        void RAMOutputStream::flush() const
        {
          env->callVoidMethod(this$, mids$[mid_flush_54c6a166]);
        }

        jlong RAMOutputStream::getChecksum() const
        {
          return env->callLongMethod(this$, mids$[mid_getChecksum_54c6a17a]);
        }

        jlong RAMOutputStream::getFilePointer() const
        {
          return env->callLongMethod(this$, mids$[mid_getFilePointer_54c6a17a]);
        }

        jlong RAMOutputStream::ramBytesUsed() const
        {
          return env->callLongMethod(this$, mids$[mid_ramBytesUsed_54c6a17a]);
        }

        void RAMOutputStream::reset() const
        {
          env->callVoidMethod(this$, mids$[mid_reset_54c6a166]);
        }

        void RAMOutputStream::writeByte(jbyte a0) const
        {
          env->callVoidMethod(this$, mids$[mid_writeByte_b2271687], a0);
        }

        void RAMOutputStream::writeBytes(const JArray< jbyte > & a0, jint a1, jint a2) const
        {
          env->callVoidMethod(this$, mids$[mid_writeBytes_86f4435f], a0.this$, a1, a2);
        }

        void RAMOutputStream::writeTo(const ::org::apache::lucene::store::DataOutput & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_writeTo_27875f57], a0.this$);
        }

        void RAMOutputStream::writeTo(const JArray< jbyte > & a0, jint a1) const
        {
          env->callVoidMethod(this$, mids$[mid_writeTo_b8354c43], a0.this$, a1);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {
        static PyObject *t_RAMOutputStream_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_RAMOutputStream_instance_(PyTypeObject *type, PyObject *arg);
        static int t_RAMOutputStream_init_(t_RAMOutputStream *self, PyObject *args, PyObject *kwds);
        static PyObject *t_RAMOutputStream_close(t_RAMOutputStream *self, PyObject *args);
        static PyObject *t_RAMOutputStream_flush(t_RAMOutputStream *self, PyObject *args);
        static PyObject *t_RAMOutputStream_getChecksum(t_RAMOutputStream *self, PyObject *args);
        static PyObject *t_RAMOutputStream_getFilePointer(t_RAMOutputStream *self, PyObject *args);
        static PyObject *t_RAMOutputStream_ramBytesUsed(t_RAMOutputStream *self);
        static PyObject *t_RAMOutputStream_reset(t_RAMOutputStream *self);
        static PyObject *t_RAMOutputStream_writeByte(t_RAMOutputStream *self, PyObject *args);
        static PyObject *t_RAMOutputStream_writeBytes(t_RAMOutputStream *self, PyObject *args);
        static PyObject *t_RAMOutputStream_writeTo(t_RAMOutputStream *self, PyObject *args);
        static PyObject *t_RAMOutputStream_get__checksum(t_RAMOutputStream *self, void *data);
        static PyObject *t_RAMOutputStream_get__filePointer(t_RAMOutputStream *self, void *data);
        static PyGetSetDef t_RAMOutputStream__fields_[] = {
          DECLARE_GET_FIELD(t_RAMOutputStream, checksum),
          DECLARE_GET_FIELD(t_RAMOutputStream, filePointer),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_RAMOutputStream__methods_[] = {
          DECLARE_METHOD(t_RAMOutputStream, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_RAMOutputStream, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_RAMOutputStream, close, METH_VARARGS),
          DECLARE_METHOD(t_RAMOutputStream, flush, METH_VARARGS),
          DECLARE_METHOD(t_RAMOutputStream, getChecksum, METH_VARARGS),
          DECLARE_METHOD(t_RAMOutputStream, getFilePointer, METH_VARARGS),
          DECLARE_METHOD(t_RAMOutputStream, ramBytesUsed, METH_NOARGS),
          DECLARE_METHOD(t_RAMOutputStream, reset, METH_NOARGS),
          DECLARE_METHOD(t_RAMOutputStream, writeByte, METH_VARARGS),
          DECLARE_METHOD(t_RAMOutputStream, writeBytes, METH_VARARGS),
          DECLARE_METHOD(t_RAMOutputStream, writeTo, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(RAMOutputStream, t_RAMOutputStream, ::org::apache::lucene::store::IndexOutput, RAMOutputStream, t_RAMOutputStream_init_, 0, 0, t_RAMOutputStream__fields_, 0, 0);

        void t_RAMOutputStream::install(PyObject *module)
        {
          installType(&PY_TYPE(RAMOutputStream), module, "RAMOutputStream", 0);
        }

        void t_RAMOutputStream::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(RAMOutputStream).tp_dict, "class_", make_descriptor(RAMOutputStream::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(RAMOutputStream).tp_dict, "wrapfn_", make_descriptor(t_RAMOutputStream::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(RAMOutputStream).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_RAMOutputStream_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, RAMOutputStream::initializeClass, 1)))
            return NULL;
          return t_RAMOutputStream::wrap_Object(RAMOutputStream(((t_RAMOutputStream *) arg)->object.this$));
        }
        static PyObject *t_RAMOutputStream_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, RAMOutputStream::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_RAMOutputStream_init_(t_RAMOutputStream *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 0:
            {
              RAMOutputStream object((jobject) NULL);

              INT_CALL(object = RAMOutputStream());
              self->object = object;
              break;
            }
            goto err;
           case 2:
            {
              ::org::apache::lucene::store::RAMFile a0((jobject) NULL);
              jboolean a1;
              RAMOutputStream object((jobject) NULL);

              if (!parseArgs(args, "kZ", ::org::apache::lucene::store::RAMFile::initializeClass, &a0, &a1))
              {
                INT_CALL(object = RAMOutputStream(a0, a1));
                self->object = object;
                break;
              }
            }
           default:
           err:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_RAMOutputStream_close(t_RAMOutputStream *self, PyObject *args)
        {

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(self->object.close());
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(RAMOutputStream), (PyObject *) self, "close", args, 2);
        }

        static PyObject *t_RAMOutputStream_flush(t_RAMOutputStream *self, PyObject *args)
        {

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(self->object.flush());
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(RAMOutputStream), (PyObject *) self, "flush", args, 2);
        }

        static PyObject *t_RAMOutputStream_getChecksum(t_RAMOutputStream *self, PyObject *args)
        {
          jlong result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.getChecksum());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          return callSuper(&PY_TYPE(RAMOutputStream), (PyObject *) self, "getChecksum", args, 2);
        }

        static PyObject *t_RAMOutputStream_getFilePointer(t_RAMOutputStream *self, PyObject *args)
        {
          jlong result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.getFilePointer());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          return callSuper(&PY_TYPE(RAMOutputStream), (PyObject *) self, "getFilePointer", args, 2);
        }

        static PyObject *t_RAMOutputStream_ramBytesUsed(t_RAMOutputStream *self)
        {
          jlong result;
          OBJ_CALL(result = self->object.ramBytesUsed());
          return PyLong_FromLongLong((PY_LONG_LONG) result);
        }

        static PyObject *t_RAMOutputStream_reset(t_RAMOutputStream *self)
        {
          OBJ_CALL(self->object.reset());
          Py_RETURN_NONE;
        }

        static PyObject *t_RAMOutputStream_writeByte(t_RAMOutputStream *self, PyObject *args)
        {
          jbyte a0;

          if (!parseArgs(args, "B", &a0))
          {
            OBJ_CALL(self->object.writeByte(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(RAMOutputStream), (PyObject *) self, "writeByte", args, 2);
        }

        static PyObject *t_RAMOutputStream_writeBytes(t_RAMOutputStream *self, PyObject *args)
        {
          JArray< jbyte > a0((jobject) NULL);
          jint a1;
          jint a2;

          if (!parseArgs(args, "[BII", &a0, &a1, &a2))
          {
            OBJ_CALL(self->object.writeBytes(a0, a1, a2));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(RAMOutputStream), (PyObject *) self, "writeBytes", args, 2);
        }

        static PyObject *t_RAMOutputStream_writeTo(t_RAMOutputStream *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              ::org::apache::lucene::store::DataOutput a0((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::store::DataOutput::initializeClass, &a0))
              {
                OBJ_CALL(self->object.writeTo(a0));
                Py_RETURN_NONE;
              }
            }
            break;
           case 2:
            {
              JArray< jbyte > a0((jobject) NULL);
              jint a1;

              if (!parseArgs(args, "[BI", &a0, &a1))
              {
                OBJ_CALL(self->object.writeTo(a0, a1));
                Py_RETURN_NONE;
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "writeTo", args);
          return NULL;
        }

        static PyObject *t_RAMOutputStream_get__checksum(t_RAMOutputStream *self, void *data)
        {
          jlong value;
          OBJ_CALL(value = self->object.getChecksum());
          return PyLong_FromLongLong((PY_LONG_LONG) value);
        }

        static PyObject *t_RAMOutputStream_get__filePointer(t_RAMOutputStream *self, void *data)
        {
          jlong value;
          OBJ_CALL(value = self->object.getFilePointer());
          return PyLong_FromLongLong((PY_LONG_LONG) value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/store/NoSuchDirectoryException.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {

        ::java::lang::Class *NoSuchDirectoryException::class$ = NULL;
        jmethodID *NoSuchDirectoryException::mids$ = NULL;
        bool NoSuchDirectoryException::live$ = false;

        jclass NoSuchDirectoryException::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/store/NoSuchDirectoryException");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_5fdc3f48] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        NoSuchDirectoryException::NoSuchDirectoryException(const ::java::lang::String & a0) : ::java::io::FileNotFoundException(env->newObject(initializeClass, &mids$, mid_init$_5fdc3f48, a0.this$)) {}
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {
        static PyObject *t_NoSuchDirectoryException_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_NoSuchDirectoryException_instance_(PyTypeObject *type, PyObject *arg);
        static int t_NoSuchDirectoryException_init_(t_NoSuchDirectoryException *self, PyObject *args, PyObject *kwds);

        static PyMethodDef t_NoSuchDirectoryException__methods_[] = {
          DECLARE_METHOD(t_NoSuchDirectoryException, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_NoSuchDirectoryException, instance_, METH_O | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(NoSuchDirectoryException, t_NoSuchDirectoryException, ::java::io::FileNotFoundException, NoSuchDirectoryException, t_NoSuchDirectoryException_init_, 0, 0, 0, 0, 0);

        void t_NoSuchDirectoryException::install(PyObject *module)
        {
          installType(&PY_TYPE(NoSuchDirectoryException), module, "NoSuchDirectoryException", 0);
        }

        void t_NoSuchDirectoryException::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(NoSuchDirectoryException).tp_dict, "class_", make_descriptor(NoSuchDirectoryException::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(NoSuchDirectoryException).tp_dict, "wrapfn_", make_descriptor(t_NoSuchDirectoryException::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(NoSuchDirectoryException).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_NoSuchDirectoryException_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, NoSuchDirectoryException::initializeClass, 1)))
            return NULL;
          return t_NoSuchDirectoryException::wrap_Object(NoSuchDirectoryException(((t_NoSuchDirectoryException *) arg)->object.this$));
        }
        static PyObject *t_NoSuchDirectoryException_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, NoSuchDirectoryException::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_NoSuchDirectoryException_init_(t_NoSuchDirectoryException *self, PyObject *args, PyObject *kwds)
        {
          ::java::lang::String a0((jobject) NULL);
          NoSuchDirectoryException object((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            INT_CALL(object = NoSuchDirectoryException(a0));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/spans/SpanPositionRangeQuery.h"
#include "java/lang/Object.h"
#include "java/lang/String.h"
#include "org/apache/lucene/search/spans/SpanQuery.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace spans {

          ::java::lang::Class *SpanPositionRangeQuery::class$ = NULL;
          jmethodID *SpanPositionRangeQuery::mids$ = NULL;
          bool SpanPositionRangeQuery::live$ = false;

          jclass SpanPositionRangeQuery::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/spans/SpanPositionRangeQuery");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_d606f0cb] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/spans/SpanQuery;II)V");
              mids$[mid_clone_718ddad5] = env->getMethodID(cls, "clone", "()Lorg/apache/lucene/search/spans/SpanPositionRangeQuery;");
              mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
              mids$[mid_getEnd_54c6a179] = env->getMethodID(cls, "getEnd", "()I");
              mids$[mid_getStart_54c6a179] = env->getMethodID(cls, "getStart", "()I");
              mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
              mids$[mid_toString_97a5258f] = env->getMethodID(cls, "toString", "(Ljava/lang/String;)Ljava/lang/String;");
              mids$[mid_acceptPosition_5342f73f] = env->getMethodID(cls, "acceptPosition", "(Lorg/apache/lucene/search/spans/Spans;)Lorg/apache/lucene/search/spans/SpanPositionCheckQuery$AcceptStatus;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          SpanPositionRangeQuery::SpanPositionRangeQuery(const ::org::apache::lucene::search::spans::SpanQuery & a0, jint a1, jint a2) : ::org::apache::lucene::search::spans::SpanPositionCheckQuery(env->newObject(initializeClass, &mids$, mid_init$_d606f0cb, a0.this$, a1, a2)) {}

          SpanPositionRangeQuery SpanPositionRangeQuery::clone() const
          {
            return SpanPositionRangeQuery(env->callObjectMethod(this$, mids$[mid_clone_718ddad5]));
          }

          jboolean SpanPositionRangeQuery::equals(const ::java::lang::Object & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
          }

          jint SpanPositionRangeQuery::getEnd() const
          {
            return env->callIntMethod(this$, mids$[mid_getEnd_54c6a179]);
          }

          jint SpanPositionRangeQuery::getStart() const
          {
            return env->callIntMethod(this$, mids$[mid_getStart_54c6a179]);
          }

          jint SpanPositionRangeQuery::hashCode() const
          {
            return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
          }

          ::java::lang::String SpanPositionRangeQuery::toString(const ::java::lang::String & a0) const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_97a5258f], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace spans {
          static PyObject *t_SpanPositionRangeQuery_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SpanPositionRangeQuery_instance_(PyTypeObject *type, PyObject *arg);
          static int t_SpanPositionRangeQuery_init_(t_SpanPositionRangeQuery *self, PyObject *args, PyObject *kwds);
          static PyObject *t_SpanPositionRangeQuery_clone(t_SpanPositionRangeQuery *self, PyObject *args);
          static PyObject *t_SpanPositionRangeQuery_equals(t_SpanPositionRangeQuery *self, PyObject *args);
          static PyObject *t_SpanPositionRangeQuery_getEnd(t_SpanPositionRangeQuery *self);
          static PyObject *t_SpanPositionRangeQuery_getStart(t_SpanPositionRangeQuery *self);
          static PyObject *t_SpanPositionRangeQuery_hashCode(t_SpanPositionRangeQuery *self, PyObject *args);
          static PyObject *t_SpanPositionRangeQuery_toString(t_SpanPositionRangeQuery *self, PyObject *args);
          static PyObject *t_SpanPositionRangeQuery_get__end(t_SpanPositionRangeQuery *self, void *data);
          static PyObject *t_SpanPositionRangeQuery_get__start(t_SpanPositionRangeQuery *self, void *data);
          static PyGetSetDef t_SpanPositionRangeQuery__fields_[] = {
            DECLARE_GET_FIELD(t_SpanPositionRangeQuery, end),
            DECLARE_GET_FIELD(t_SpanPositionRangeQuery, start),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_SpanPositionRangeQuery__methods_[] = {
            DECLARE_METHOD(t_SpanPositionRangeQuery, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SpanPositionRangeQuery, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SpanPositionRangeQuery, clone, METH_VARARGS),
            DECLARE_METHOD(t_SpanPositionRangeQuery, equals, METH_VARARGS),
            DECLARE_METHOD(t_SpanPositionRangeQuery, getEnd, METH_NOARGS),
            DECLARE_METHOD(t_SpanPositionRangeQuery, getStart, METH_NOARGS),
            DECLARE_METHOD(t_SpanPositionRangeQuery, hashCode, METH_VARARGS),
            DECLARE_METHOD(t_SpanPositionRangeQuery, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(SpanPositionRangeQuery, t_SpanPositionRangeQuery, ::org::apache::lucene::search::spans::SpanPositionCheckQuery, SpanPositionRangeQuery, t_SpanPositionRangeQuery_init_, 0, 0, t_SpanPositionRangeQuery__fields_, 0, 0);

          void t_SpanPositionRangeQuery::install(PyObject *module)
          {
            installType(&PY_TYPE(SpanPositionRangeQuery), module, "SpanPositionRangeQuery", 0);
          }

          void t_SpanPositionRangeQuery::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(SpanPositionRangeQuery).tp_dict, "class_", make_descriptor(SpanPositionRangeQuery::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(SpanPositionRangeQuery).tp_dict, "wrapfn_", make_descriptor(t_SpanPositionRangeQuery::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(SpanPositionRangeQuery).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_SpanPositionRangeQuery_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, SpanPositionRangeQuery::initializeClass, 1)))
              return NULL;
            return t_SpanPositionRangeQuery::wrap_Object(SpanPositionRangeQuery(((t_SpanPositionRangeQuery *) arg)->object.this$));
          }
          static PyObject *t_SpanPositionRangeQuery_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, SpanPositionRangeQuery::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_SpanPositionRangeQuery_init_(t_SpanPositionRangeQuery *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::search::spans::SpanQuery a0((jobject) NULL);
            jint a1;
            jint a2;
            SpanPositionRangeQuery object((jobject) NULL);

            if (!parseArgs(args, "kII", ::org::apache::lucene::search::spans::SpanQuery::initializeClass, &a0, &a1, &a2))
            {
              INT_CALL(object = SpanPositionRangeQuery(a0, a1, a2));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_SpanPositionRangeQuery_clone(t_SpanPositionRangeQuery *self, PyObject *args)
          {
            SpanPositionRangeQuery result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.clone());
              return t_SpanPositionRangeQuery::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(SpanPositionRangeQuery), (PyObject *) self, "clone", args, 2);
          }

          static PyObject *t_SpanPositionRangeQuery_equals(t_SpanPositionRangeQuery *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            jboolean result;

            if (!parseArgs(args, "o", &a0))
            {
              OBJ_CALL(result = self->object.equals(a0));
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(SpanPositionRangeQuery), (PyObject *) self, "equals", args, 2);
          }

          static PyObject *t_SpanPositionRangeQuery_getEnd(t_SpanPositionRangeQuery *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getEnd());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_SpanPositionRangeQuery_getStart(t_SpanPositionRangeQuery *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getStart());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_SpanPositionRangeQuery_hashCode(t_SpanPositionRangeQuery *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.hashCode());
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(SpanPositionRangeQuery), (PyObject *) self, "hashCode", args, 2);
          }

          static PyObject *t_SpanPositionRangeQuery_toString(t_SpanPositionRangeQuery *self, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, "s", &a0))
            {
              OBJ_CALL(result = self->object.toString(a0));
              return j2p(result);
            }

            return callSuper(&PY_TYPE(SpanPositionRangeQuery), (PyObject *) self, "toString", args, 2);
          }

          static PyObject *t_SpanPositionRangeQuery_get__end(t_SpanPositionRangeQuery *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getEnd());
            return PyInt_FromLong((long) value);
          }

          static PyObject *t_SpanPositionRangeQuery_get__start(t_SpanPositionRangeQuery *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getStart());
            return PyInt_FromLong((long) value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/FieldsProducer.h"
#include "java/io/Closeable.h"
#include "org/apache/lucene/util/Accountable.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {

        ::java::lang::Class *FieldsProducer::class$ = NULL;
        jmethodID *FieldsProducer::mids$ = NULL;
        bool FieldsProducer::live$ = false;

        jclass FieldsProducer::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/FieldsProducer");

            mids$ = new jmethodID[max_mid];
            mids$[mid_checkIntegrity_54c6a166] = env->getMethodID(cls, "checkIntegrity", "()V");
            mids$[mid_close_54c6a166] = env->getMethodID(cls, "close", "()V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        void FieldsProducer::checkIntegrity() const
        {
          env->callVoidMethod(this$, mids$[mid_checkIntegrity_54c6a166]);
        }

        void FieldsProducer::close() const
        {
          env->callVoidMethod(this$, mids$[mid_close_54c6a166]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        static PyObject *t_FieldsProducer_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FieldsProducer_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FieldsProducer_checkIntegrity(t_FieldsProducer *self);
        static PyObject *t_FieldsProducer_close(t_FieldsProducer *self);

        static PyMethodDef t_FieldsProducer__methods_[] = {
          DECLARE_METHOD(t_FieldsProducer, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FieldsProducer, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FieldsProducer, checkIntegrity, METH_NOARGS),
          DECLARE_METHOD(t_FieldsProducer, close, METH_NOARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(FieldsProducer, t_FieldsProducer, ::org::apache::lucene::index::Fields, FieldsProducer, abstract_init, 0, 0, 0, 0, 0);

        void t_FieldsProducer::install(PyObject *module)
        {
          installType(&PY_TYPE(FieldsProducer), module, "FieldsProducer", 0);
        }

        void t_FieldsProducer::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(FieldsProducer).tp_dict, "class_", make_descriptor(FieldsProducer::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(FieldsProducer).tp_dict, "wrapfn_", make_descriptor(t_FieldsProducer::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(FieldsProducer).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_FieldsProducer_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, FieldsProducer::initializeClass, 1)))
            return NULL;
          return t_FieldsProducer::wrap_Object(FieldsProducer(((t_FieldsProducer *) arg)->object.this$));
        }
        static PyObject *t_FieldsProducer_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, FieldsProducer::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_FieldsProducer_checkIntegrity(t_FieldsProducer *self)
        {
          OBJ_CALL(self->object.checkIntegrity());
          Py_RETURN_NONE;
        }

        static PyObject *t_FieldsProducer_close(t_FieldsProducer *self)
        {
          OBJ_CALL(self->object.close());
          Py_RETURN_NONE;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/document/DerefBytesDocValuesField.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "org/apache/lucene/document/FieldType.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace document {

        ::java::lang::Class *DerefBytesDocValuesField::class$ = NULL;
        jmethodID *DerefBytesDocValuesField::mids$ = NULL;
        bool DerefBytesDocValuesField::live$ = false;
        ::org::apache::lucene::document::FieldType *DerefBytesDocValuesField::TYPE_FIXED_LEN = NULL;
        ::org::apache::lucene::document::FieldType *DerefBytesDocValuesField::TYPE_VAR_LEN = NULL;

        jclass DerefBytesDocValuesField::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/document/DerefBytesDocValuesField");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_43cce44e] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Lorg/apache/lucene/util/BytesRef;)V");
            mids$[mid_init$_6c8dc377] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Lorg/apache/lucene/util/BytesRef;Z)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            cls = (jclass) class$->this$;

            TYPE_FIXED_LEN = new ::org::apache::lucene::document::FieldType(env->getStaticObjectField(cls, "TYPE_FIXED_LEN", "Lorg/apache/lucene/document/FieldType;"));
            TYPE_VAR_LEN = new ::org::apache::lucene::document::FieldType(env->getStaticObjectField(cls, "TYPE_VAR_LEN", "Lorg/apache/lucene/document/FieldType;"));
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        DerefBytesDocValuesField::DerefBytesDocValuesField(const ::java::lang::String & a0, const ::org::apache::lucene::util::BytesRef & a1) : ::org::apache::lucene::document::BinaryDocValuesField(env->newObject(initializeClass, &mids$, mid_init$_43cce44e, a0.this$, a1.this$)) {}

        DerefBytesDocValuesField::DerefBytesDocValuesField(const ::java::lang::String & a0, const ::org::apache::lucene::util::BytesRef & a1, jboolean a2) : ::org::apache::lucene::document::BinaryDocValuesField(env->newObject(initializeClass, &mids$, mid_init$_6c8dc377, a0.this$, a1.this$, a2)) {}
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace document {
        static PyObject *t_DerefBytesDocValuesField_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_DerefBytesDocValuesField_instance_(PyTypeObject *type, PyObject *arg);
        static int t_DerefBytesDocValuesField_init_(t_DerefBytesDocValuesField *self, PyObject *args, PyObject *kwds);

        static PyMethodDef t_DerefBytesDocValuesField__methods_[] = {
          DECLARE_METHOD(t_DerefBytesDocValuesField, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_DerefBytesDocValuesField, instance_, METH_O | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(DerefBytesDocValuesField, t_DerefBytesDocValuesField, ::org::apache::lucene::document::BinaryDocValuesField, DerefBytesDocValuesField, t_DerefBytesDocValuesField_init_, 0, 0, 0, 0, 0);

        void t_DerefBytesDocValuesField::install(PyObject *module)
        {
          installType(&PY_TYPE(DerefBytesDocValuesField), module, "DerefBytesDocValuesField", 0);
        }

        void t_DerefBytesDocValuesField::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(DerefBytesDocValuesField).tp_dict, "class_", make_descriptor(DerefBytesDocValuesField::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(DerefBytesDocValuesField).tp_dict, "wrapfn_", make_descriptor(t_DerefBytesDocValuesField::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(DerefBytesDocValuesField).tp_dict, "boxfn_", make_descriptor(boxObject));
          env->getClass(DerefBytesDocValuesField::initializeClass);
          PyDict_SetItemString(PY_TYPE(DerefBytesDocValuesField).tp_dict, "TYPE_FIXED_LEN", make_descriptor(::org::apache::lucene::document::t_FieldType::wrap_Object(*DerefBytesDocValuesField::TYPE_FIXED_LEN)));
          PyDict_SetItemString(PY_TYPE(DerefBytesDocValuesField).tp_dict, "TYPE_VAR_LEN", make_descriptor(::org::apache::lucene::document::t_FieldType::wrap_Object(*DerefBytesDocValuesField::TYPE_VAR_LEN)));
        }

        static PyObject *t_DerefBytesDocValuesField_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, DerefBytesDocValuesField::initializeClass, 1)))
            return NULL;
          return t_DerefBytesDocValuesField::wrap_Object(DerefBytesDocValuesField(((t_DerefBytesDocValuesField *) arg)->object.this$));
        }
        static PyObject *t_DerefBytesDocValuesField_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, DerefBytesDocValuesField::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_DerefBytesDocValuesField_init_(t_DerefBytesDocValuesField *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 2:
            {
              ::java::lang::String a0((jobject) NULL);
              ::org::apache::lucene::util::BytesRef a1((jobject) NULL);
              DerefBytesDocValuesField object((jobject) NULL);

              if (!parseArgs(args, "sk", ::org::apache::lucene::util::BytesRef::initializeClass, &a0, &a1))
              {
                INT_CALL(object = DerefBytesDocValuesField(a0, a1));
                self->object = object;
                break;
              }
            }
            goto err;
           case 3:
            {
              ::java::lang::String a0((jobject) NULL);
              ::org::apache::lucene::util::BytesRef a1((jobject) NULL);
              jboolean a2;
              DerefBytesDocValuesField object((jobject) NULL);

              if (!parseArgs(args, "skZ", ::org::apache::lucene::util::BytesRef::initializeClass, &a0, &a1, &a2))
              {
                INT_CALL(object = DerefBytesDocValuesField(a0, a1, a2));
                self->object = object;
                break;
              }
            }
           default:
           err:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/Constants.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *Constants::class$ = NULL;
        jmethodID *Constants::mids$ = NULL;
        bool Constants::live$ = false;
        jboolean Constants::FREE_BSD = (jboolean) 0;
        ::java::lang::String *Constants::JAVA_VENDOR = NULL;
        ::java::lang::String *Constants::JAVA_VERSION = NULL;
        jboolean Constants::JRE_IS_64BIT = (jboolean) 0;
        jboolean Constants::JRE_IS_MINIMUM_JAVA6 = (jboolean) 0;
        jboolean Constants::JRE_IS_MINIMUM_JAVA7 = (jboolean) 0;
        jboolean Constants::JRE_IS_MINIMUM_JAVA8 = (jboolean) 0;
        ::java::lang::String *Constants::JVM_NAME = NULL;
        ::java::lang::String *Constants::JVM_VENDOR = NULL;
        ::java::lang::String *Constants::JVM_VERSION = NULL;
        jboolean Constants::LINUX = (jboolean) 0;
        ::java::lang::String *Constants::LUCENE_MAIN_VERSION = NULL;
        ::java::lang::String *Constants::LUCENE_VERSION = NULL;
        jboolean Constants::MAC_OS_X = (jboolean) 0;
        ::java::lang::String *Constants::OS_ARCH = NULL;
        ::java::lang::String *Constants::OS_NAME = NULL;
        ::java::lang::String *Constants::OS_VERSION = NULL;
        jboolean Constants::SUN_OS = (jboolean) 0;
        jboolean Constants::WINDOWS = (jboolean) 0;

        jclass Constants::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/Constants");

            class$ = (::java::lang::Class *) new JObject(cls);
            cls = (jclass) class$->this$;

            FREE_BSD = env->getStaticBooleanField(cls, "FREE_BSD");
            JAVA_VENDOR = new ::java::lang::String(env->getStaticObjectField(cls, "JAVA_VENDOR", "Ljava/lang/String;"));
            JAVA_VERSION = new ::java::lang::String(env->getStaticObjectField(cls, "JAVA_VERSION", "Ljava/lang/String;"));
            JRE_IS_64BIT = env->getStaticBooleanField(cls, "JRE_IS_64BIT");
            JRE_IS_MINIMUM_JAVA6 = env->getStaticBooleanField(cls, "JRE_IS_MINIMUM_JAVA6");
            JRE_IS_MINIMUM_JAVA7 = env->getStaticBooleanField(cls, "JRE_IS_MINIMUM_JAVA7");
            JRE_IS_MINIMUM_JAVA8 = env->getStaticBooleanField(cls, "JRE_IS_MINIMUM_JAVA8");
            JVM_NAME = new ::java::lang::String(env->getStaticObjectField(cls, "JVM_NAME", "Ljava/lang/String;"));
            JVM_VENDOR = new ::java::lang::String(env->getStaticObjectField(cls, "JVM_VENDOR", "Ljava/lang/String;"));
            JVM_VERSION = new ::java::lang::String(env->getStaticObjectField(cls, "JVM_VERSION", "Ljava/lang/String;"));
            LINUX = env->getStaticBooleanField(cls, "LINUX");
            LUCENE_MAIN_VERSION = new ::java::lang::String(env->getStaticObjectField(cls, "LUCENE_MAIN_VERSION", "Ljava/lang/String;"));
            LUCENE_VERSION = new ::java::lang::String(env->getStaticObjectField(cls, "LUCENE_VERSION", "Ljava/lang/String;"));
            MAC_OS_X = env->getStaticBooleanField(cls, "MAC_OS_X");
            OS_ARCH = new ::java::lang::String(env->getStaticObjectField(cls, "OS_ARCH", "Ljava/lang/String;"));
            OS_NAME = new ::java::lang::String(env->getStaticObjectField(cls, "OS_NAME", "Ljava/lang/String;"));
            OS_VERSION = new ::java::lang::String(env->getStaticObjectField(cls, "OS_VERSION", "Ljava/lang/String;"));
            SUN_OS = env->getStaticBooleanField(cls, "SUN_OS");
            WINDOWS = env->getStaticBooleanField(cls, "WINDOWS");
            live$ = true;
          }
          return (jclass) class$->this$;
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_Constants_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_Constants_instance_(PyTypeObject *type, PyObject *arg);

        static PyMethodDef t_Constants__methods_[] = {
          DECLARE_METHOD(t_Constants, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_Constants, instance_, METH_O | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(Constants, t_Constants, ::java::lang::Object, Constants, abstract_init, 0, 0, 0, 0, 0);

        void t_Constants::install(PyObject *module)
        {
          installType(&PY_TYPE(Constants), module, "Constants", 0);
        }

        void t_Constants::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(Constants).tp_dict, "class_", make_descriptor(Constants::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(Constants).tp_dict, "wrapfn_", make_descriptor(t_Constants::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(Constants).tp_dict, "boxfn_", make_descriptor(boxObject));
          env->getClass(Constants::initializeClass);
          PyDict_SetItemString(PY_TYPE(Constants).tp_dict, "FREE_BSD", make_descriptor(Constants::FREE_BSD));
          PyDict_SetItemString(PY_TYPE(Constants).tp_dict, "JAVA_VENDOR", make_descriptor(j2p(*Constants::JAVA_VENDOR)));
          PyDict_SetItemString(PY_TYPE(Constants).tp_dict, "JAVA_VERSION", make_descriptor(j2p(*Constants::JAVA_VERSION)));
          PyDict_SetItemString(PY_TYPE(Constants).tp_dict, "JRE_IS_64BIT", make_descriptor(Constants::JRE_IS_64BIT));
          PyDict_SetItemString(PY_TYPE(Constants).tp_dict, "JRE_IS_MINIMUM_JAVA6", make_descriptor(Constants::JRE_IS_MINIMUM_JAVA6));
          PyDict_SetItemString(PY_TYPE(Constants).tp_dict, "JRE_IS_MINIMUM_JAVA7", make_descriptor(Constants::JRE_IS_MINIMUM_JAVA7));
          PyDict_SetItemString(PY_TYPE(Constants).tp_dict, "JRE_IS_MINIMUM_JAVA8", make_descriptor(Constants::JRE_IS_MINIMUM_JAVA8));
          PyDict_SetItemString(PY_TYPE(Constants).tp_dict, "JVM_NAME", make_descriptor(j2p(*Constants::JVM_NAME)));
          PyDict_SetItemString(PY_TYPE(Constants).tp_dict, "JVM_VENDOR", make_descriptor(j2p(*Constants::JVM_VENDOR)));
          PyDict_SetItemString(PY_TYPE(Constants).tp_dict, "JVM_VERSION", make_descriptor(j2p(*Constants::JVM_VERSION)));
          PyDict_SetItemString(PY_TYPE(Constants).tp_dict, "LINUX", make_descriptor(Constants::LINUX));
          PyDict_SetItemString(PY_TYPE(Constants).tp_dict, "LUCENE_MAIN_VERSION", make_descriptor(j2p(*Constants::LUCENE_MAIN_VERSION)));
          PyDict_SetItemString(PY_TYPE(Constants).tp_dict, "LUCENE_VERSION", make_descriptor(j2p(*Constants::LUCENE_VERSION)));
          PyDict_SetItemString(PY_TYPE(Constants).tp_dict, "MAC_OS_X", make_descriptor(Constants::MAC_OS_X));
          PyDict_SetItemString(PY_TYPE(Constants).tp_dict, "OS_ARCH", make_descriptor(j2p(*Constants::OS_ARCH)));
          PyDict_SetItemString(PY_TYPE(Constants).tp_dict, "OS_NAME", make_descriptor(j2p(*Constants::OS_NAME)));
          PyDict_SetItemString(PY_TYPE(Constants).tp_dict, "OS_VERSION", make_descriptor(j2p(*Constants::OS_VERSION)));
          PyDict_SetItemString(PY_TYPE(Constants).tp_dict, "SUN_OS", make_descriptor(Constants::SUN_OS));
          PyDict_SetItemString(PY_TYPE(Constants).tp_dict, "WINDOWS", make_descriptor(Constants::WINDOWS));
        }

        static PyObject *t_Constants_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, Constants::initializeClass, 1)))
            return NULL;
          return t_Constants::wrap_Object(Constants(((t_Constants *) arg)->object.this$));
        }
        static PyObject *t_Constants_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, Constants::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/IndexCommit.h"
#include "java/lang/Comparable.h"
#include "java/lang/Class.h"
#include "java/util/Map.h"
#include "org/apache/lucene/store/Directory.h"
#include "java/lang/String.h"
#include "java/util/Collection.h"
#include "java/io/IOException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *IndexCommit::class$ = NULL;
        jmethodID *IndexCommit::mids$ = NULL;
        bool IndexCommit::live$ = false;

        jclass IndexCommit::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/IndexCommit");

            mids$ = new jmethodID[max_mid];
            mids$[mid_compareTo_fecc65cc] = env->getMethodID(cls, "compareTo", "(Lorg/apache/lucene/index/IndexCommit;)I");
            mids$[mid_delete_54c6a166] = env->getMethodID(cls, "delete", "()V");
            mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
            mids$[mid_getDirectory_1f3934bb] = env->getMethodID(cls, "getDirectory", "()Lorg/apache/lucene/store/Directory;");
            mids$[mid_getFileNames_2d2d7de4] = env->getMethodID(cls, "getFileNames", "()Ljava/util/Collection;");
            mids$[mid_getGeneration_54c6a17a] = env->getMethodID(cls, "getGeneration", "()J");
            mids$[mid_getSegmentCount_54c6a179] = env->getMethodID(cls, "getSegmentCount", "()I");
            mids$[mid_getSegmentsFileName_14c7b5c5] = env->getMethodID(cls, "getSegmentsFileName", "()Ljava/lang/String;");
            mids$[mid_getUserData_db60befd] = env->getMethodID(cls, "getUserData", "()Ljava/util/Map;");
            mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
            mids$[mid_isDeleted_54c6a16a] = env->getMethodID(cls, "isDeleted", "()Z");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        jint IndexCommit::compareTo(const IndexCommit & a0) const
        {
          return env->callIntMethod(this$, mids$[mid_compareTo_fecc65cc], a0.this$);
        }

        void IndexCommit::delete$() const
        {
          env->callVoidMethod(this$, mids$[mid_delete_54c6a166]);
        }

        jboolean IndexCommit::equals(const ::java::lang::Object & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
        }

        ::org::apache::lucene::store::Directory IndexCommit::getDirectory() const
        {
          return ::org::apache::lucene::store::Directory(env->callObjectMethod(this$, mids$[mid_getDirectory_1f3934bb]));
        }

        ::java::util::Collection IndexCommit::getFileNames() const
        {
          return ::java::util::Collection(env->callObjectMethod(this$, mids$[mid_getFileNames_2d2d7de4]));
        }

        jlong IndexCommit::getGeneration() const
        {
          return env->callLongMethod(this$, mids$[mid_getGeneration_54c6a17a]);
        }

        jint IndexCommit::getSegmentCount() const
        {
          return env->callIntMethod(this$, mids$[mid_getSegmentCount_54c6a179]);
        }

        ::java::lang::String IndexCommit::getSegmentsFileName() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getSegmentsFileName_14c7b5c5]));
        }

        ::java::util::Map IndexCommit::getUserData() const
        {
          return ::java::util::Map(env->callObjectMethod(this$, mids$[mid_getUserData_db60befd]));
        }

        jint IndexCommit::hashCode() const
        {
          return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
        }

        jboolean IndexCommit::isDeleted() const
        {
          return env->callBooleanMethod(this$, mids$[mid_isDeleted_54c6a16a]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_IndexCommit_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_IndexCommit_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_IndexCommit_compareTo(t_IndexCommit *self, PyObject *arg);
        static PyObject *t_IndexCommit_delete(t_IndexCommit *self);
        static PyObject *t_IndexCommit_equals(t_IndexCommit *self, PyObject *args);
        static PyObject *t_IndexCommit_getDirectory(t_IndexCommit *self);
        static PyObject *t_IndexCommit_getFileNames(t_IndexCommit *self);
        static PyObject *t_IndexCommit_getGeneration(t_IndexCommit *self);
        static PyObject *t_IndexCommit_getSegmentCount(t_IndexCommit *self);
        static PyObject *t_IndexCommit_getSegmentsFileName(t_IndexCommit *self);
        static PyObject *t_IndexCommit_getUserData(t_IndexCommit *self);
        static PyObject *t_IndexCommit_hashCode(t_IndexCommit *self, PyObject *args);
        static PyObject *t_IndexCommit_isDeleted(t_IndexCommit *self);
        static PyObject *t_IndexCommit_get__deleted(t_IndexCommit *self, void *data);
        static PyObject *t_IndexCommit_get__directory(t_IndexCommit *self, void *data);
        static PyObject *t_IndexCommit_get__fileNames(t_IndexCommit *self, void *data);
        static PyObject *t_IndexCommit_get__generation(t_IndexCommit *self, void *data);
        static PyObject *t_IndexCommit_get__segmentCount(t_IndexCommit *self, void *data);
        static PyObject *t_IndexCommit_get__segmentsFileName(t_IndexCommit *self, void *data);
        static PyObject *t_IndexCommit_get__userData(t_IndexCommit *self, void *data);
        static PyGetSetDef t_IndexCommit__fields_[] = {
          DECLARE_GET_FIELD(t_IndexCommit, deleted),
          DECLARE_GET_FIELD(t_IndexCommit, directory),
          DECLARE_GET_FIELD(t_IndexCommit, fileNames),
          DECLARE_GET_FIELD(t_IndexCommit, generation),
          DECLARE_GET_FIELD(t_IndexCommit, segmentCount),
          DECLARE_GET_FIELD(t_IndexCommit, segmentsFileName),
          DECLARE_GET_FIELD(t_IndexCommit, userData),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_IndexCommit__methods_[] = {
          DECLARE_METHOD(t_IndexCommit, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_IndexCommit, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_IndexCommit, compareTo, METH_O),
          DECLARE_METHOD(t_IndexCommit, delete, METH_NOARGS),
          DECLARE_METHOD(t_IndexCommit, equals, METH_VARARGS),
          DECLARE_METHOD(t_IndexCommit, getDirectory, METH_NOARGS),
          DECLARE_METHOD(t_IndexCommit, getFileNames, METH_NOARGS),
          DECLARE_METHOD(t_IndexCommit, getGeneration, METH_NOARGS),
          DECLARE_METHOD(t_IndexCommit, getSegmentCount, METH_NOARGS),
          DECLARE_METHOD(t_IndexCommit, getSegmentsFileName, METH_NOARGS),
          DECLARE_METHOD(t_IndexCommit, getUserData, METH_NOARGS),
          DECLARE_METHOD(t_IndexCommit, hashCode, METH_VARARGS),
          DECLARE_METHOD(t_IndexCommit, isDeleted, METH_NOARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(IndexCommit, t_IndexCommit, ::java::lang::Object, IndexCommit, abstract_init, 0, 0, t_IndexCommit__fields_, 0, 0);

        void t_IndexCommit::install(PyObject *module)
        {
          installType(&PY_TYPE(IndexCommit), module, "IndexCommit", 0);
        }

        void t_IndexCommit::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(IndexCommit).tp_dict, "class_", make_descriptor(IndexCommit::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(IndexCommit).tp_dict, "wrapfn_", make_descriptor(t_IndexCommit::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(IndexCommit).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_IndexCommit_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, IndexCommit::initializeClass, 1)))
            return NULL;
          return t_IndexCommit::wrap_Object(IndexCommit(((t_IndexCommit *) arg)->object.this$));
        }
        static PyObject *t_IndexCommit_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, IndexCommit::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_IndexCommit_compareTo(t_IndexCommit *self, PyObject *arg)
        {
          IndexCommit a0((jobject) NULL);
          jint result;

          if (!parseArg(arg, "k", IndexCommit::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.compareTo(a0));
            return PyInt_FromLong((long) result);
          }

          PyErr_SetArgsError((PyObject *) self, "compareTo", arg);
          return NULL;
        }

        static PyObject *t_IndexCommit_delete(t_IndexCommit *self)
        {
          OBJ_CALL(self->object.delete$());
          Py_RETURN_NONE;
        }

        static PyObject *t_IndexCommit_equals(t_IndexCommit *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.equals(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(IndexCommit), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_IndexCommit_getDirectory(t_IndexCommit *self)
        {
          ::org::apache::lucene::store::Directory result((jobject) NULL);
          OBJ_CALL(result = self->object.getDirectory());
          return ::org::apache::lucene::store::t_Directory::wrap_Object(result);
        }

        static PyObject *t_IndexCommit_getFileNames(t_IndexCommit *self)
        {
          ::java::util::Collection result((jobject) NULL);
          OBJ_CALL(result = self->object.getFileNames());
          return ::java::util::t_Collection::wrap_Object(result, &::java::lang::PY_TYPE(String));
        }

        static PyObject *t_IndexCommit_getGeneration(t_IndexCommit *self)
        {
          jlong result;
          OBJ_CALL(result = self->object.getGeneration());
          return PyLong_FromLongLong((PY_LONG_LONG) result);
        }

        static PyObject *t_IndexCommit_getSegmentCount(t_IndexCommit *self)
        {
          jint result;
          OBJ_CALL(result = self->object.getSegmentCount());
          return PyInt_FromLong((long) result);
        }

        static PyObject *t_IndexCommit_getSegmentsFileName(t_IndexCommit *self)
        {
          ::java::lang::String result((jobject) NULL);
          OBJ_CALL(result = self->object.getSegmentsFileName());
          return j2p(result);
        }

        static PyObject *t_IndexCommit_getUserData(t_IndexCommit *self)
        {
          ::java::util::Map result((jobject) NULL);
          OBJ_CALL(result = self->object.getUserData());
          return ::java::util::t_Map::wrap_Object(result, &::java::lang::PY_TYPE(String), &::java::lang::PY_TYPE(String));
        }

        static PyObject *t_IndexCommit_hashCode(t_IndexCommit *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hashCode());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(IndexCommit), (PyObject *) self, "hashCode", args, 2);
        }

        static PyObject *t_IndexCommit_isDeleted(t_IndexCommit *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.isDeleted());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_IndexCommit_get__deleted(t_IndexCommit *self, void *data)
        {
          jboolean value;
          OBJ_CALL(value = self->object.isDeleted());
          Py_RETURN_BOOL(value);
        }

        static PyObject *t_IndexCommit_get__directory(t_IndexCommit *self, void *data)
        {
          ::org::apache::lucene::store::Directory value((jobject) NULL);
          OBJ_CALL(value = self->object.getDirectory());
          return ::org::apache::lucene::store::t_Directory::wrap_Object(value);
        }

        static PyObject *t_IndexCommit_get__fileNames(t_IndexCommit *self, void *data)
        {
          ::java::util::Collection value((jobject) NULL);
          OBJ_CALL(value = self->object.getFileNames());
          return ::java::util::t_Collection::wrap_Object(value);
        }

        static PyObject *t_IndexCommit_get__generation(t_IndexCommit *self, void *data)
        {
          jlong value;
          OBJ_CALL(value = self->object.getGeneration());
          return PyLong_FromLongLong((PY_LONG_LONG) value);
        }

        static PyObject *t_IndexCommit_get__segmentCount(t_IndexCommit *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object.getSegmentCount());
          return PyInt_FromLong((long) value);
        }

        static PyObject *t_IndexCommit_get__segmentsFileName(t_IndexCommit *self, void *data)
        {
          ::java::lang::String value((jobject) NULL);
          OBJ_CALL(value = self->object.getSegmentsFileName());
          return j2p(value);
        }

        static PyObject *t_IndexCommit_get__userData(t_IndexCommit *self, void *data)
        {
          ::java::util::Map value((jobject) NULL);
          OBJ_CALL(value = self->object.getUserData());
          return ::java::util::t_Map::wrap_Object(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/spell/LevensteinDistance.h"
#include "java/lang/String.h"
#include "org/apache/lucene/search/spell/StringDistance.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace spell {

          ::java::lang::Class *LevensteinDistance::class$ = NULL;
          jmethodID *LevensteinDistance::mids$ = NULL;
          bool LevensteinDistance::live$ = false;

          jclass LevensteinDistance::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/spell/LevensteinDistance");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
              mids$[mid_getDistance_4a264752] = env->getMethodID(cls, "getDistance", "(Ljava/lang/String;Ljava/lang/String;)F");
              mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
              mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          LevensteinDistance::LevensteinDistance() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          jboolean LevensteinDistance::equals(const ::java::lang::Object & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
          }

          jfloat LevensteinDistance::getDistance(const ::java::lang::String & a0, const ::java::lang::String & a1) const
          {
            return env->callFloatMethod(this$, mids$[mid_getDistance_4a264752], a0.this$, a1.this$);
          }

          jint LevensteinDistance::hashCode() const
          {
            return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
          }

          ::java::lang::String LevensteinDistance::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace spell {
          static PyObject *t_LevensteinDistance_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_LevensteinDistance_instance_(PyTypeObject *type, PyObject *arg);
          static int t_LevensteinDistance_init_(t_LevensteinDistance *self, PyObject *args, PyObject *kwds);
          static PyObject *t_LevensteinDistance_equals(t_LevensteinDistance *self, PyObject *args);
          static PyObject *t_LevensteinDistance_getDistance(t_LevensteinDistance *self, PyObject *args);
          static PyObject *t_LevensteinDistance_hashCode(t_LevensteinDistance *self, PyObject *args);
          static PyObject *t_LevensteinDistance_toString(t_LevensteinDistance *self, PyObject *args);

          static PyMethodDef t_LevensteinDistance__methods_[] = {
            DECLARE_METHOD(t_LevensteinDistance, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_LevensteinDistance, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_LevensteinDistance, equals, METH_VARARGS),
            DECLARE_METHOD(t_LevensteinDistance, getDistance, METH_VARARGS),
            DECLARE_METHOD(t_LevensteinDistance, hashCode, METH_VARARGS),
            DECLARE_METHOD(t_LevensteinDistance, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(LevensteinDistance, t_LevensteinDistance, ::java::lang::Object, LevensteinDistance, t_LevensteinDistance_init_, 0, 0, 0, 0, 0);

          void t_LevensteinDistance::install(PyObject *module)
          {
            installType(&PY_TYPE(LevensteinDistance), module, "LevensteinDistance", 0);
          }

          void t_LevensteinDistance::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(LevensteinDistance).tp_dict, "class_", make_descriptor(LevensteinDistance::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(LevensteinDistance).tp_dict, "wrapfn_", make_descriptor(t_LevensteinDistance::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(LevensteinDistance).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_LevensteinDistance_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, LevensteinDistance::initializeClass, 1)))
              return NULL;
            return t_LevensteinDistance::wrap_Object(LevensteinDistance(((t_LevensteinDistance *) arg)->object.this$));
          }
          static PyObject *t_LevensteinDistance_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, LevensteinDistance::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_LevensteinDistance_init_(t_LevensteinDistance *self, PyObject *args, PyObject *kwds)
          {
            LevensteinDistance object((jobject) NULL);

            INT_CALL(object = LevensteinDistance());
            self->object = object;

            return 0;
          }

          static PyObject *t_LevensteinDistance_equals(t_LevensteinDistance *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            jboolean result;

            if (!parseArgs(args, "o", &a0))
            {
              OBJ_CALL(result = self->object.equals(a0));
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(LevensteinDistance), (PyObject *) self, "equals", args, 2);
          }

          static PyObject *t_LevensteinDistance_getDistance(t_LevensteinDistance *self, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            ::java::lang::String a1((jobject) NULL);
            jfloat result;

            if (!parseArgs(args, "ss", &a0, &a1))
            {
              OBJ_CALL(result = self->object.getDistance(a0, a1));
              return PyFloat_FromDouble((double) result);
            }

            PyErr_SetArgsError((PyObject *) self, "getDistance", args);
            return NULL;
          }

          static PyObject *t_LevensteinDistance_hashCode(t_LevensteinDistance *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.hashCode());
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(LevensteinDistance), (PyObject *) self, "hashCode", args, 2);
          }

          static PyObject *t_LevensteinDistance_toString(t_LevensteinDistance *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(&PY_TYPE(LevensteinDistance), (PyObject *) self, "toString", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/store/LockReleaseFailedException.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {

        ::java::lang::Class *LockReleaseFailedException::class$ = NULL;
        jmethodID *LockReleaseFailedException::mids$ = NULL;
        bool LockReleaseFailedException::live$ = false;

        jclass LockReleaseFailedException::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/store/LockReleaseFailedException");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_5fdc3f48] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        LockReleaseFailedException::LockReleaseFailedException(const ::java::lang::String & a0) : ::java::io::IOException(env->newObject(initializeClass, &mids$, mid_init$_5fdc3f48, a0.this$)) {}
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {
        static PyObject *t_LockReleaseFailedException_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_LockReleaseFailedException_instance_(PyTypeObject *type, PyObject *arg);
        static int t_LockReleaseFailedException_init_(t_LockReleaseFailedException *self, PyObject *args, PyObject *kwds);

        static PyMethodDef t_LockReleaseFailedException__methods_[] = {
          DECLARE_METHOD(t_LockReleaseFailedException, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_LockReleaseFailedException, instance_, METH_O | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(LockReleaseFailedException, t_LockReleaseFailedException, ::java::io::IOException, LockReleaseFailedException, t_LockReleaseFailedException_init_, 0, 0, 0, 0, 0);

        void t_LockReleaseFailedException::install(PyObject *module)
        {
          installType(&PY_TYPE(LockReleaseFailedException), module, "LockReleaseFailedException", 0);
        }

        void t_LockReleaseFailedException::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(LockReleaseFailedException).tp_dict, "class_", make_descriptor(LockReleaseFailedException::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(LockReleaseFailedException).tp_dict, "wrapfn_", make_descriptor(t_LockReleaseFailedException::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(LockReleaseFailedException).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_LockReleaseFailedException_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, LockReleaseFailedException::initializeClass, 1)))
            return NULL;
          return t_LockReleaseFailedException::wrap_Object(LockReleaseFailedException(((t_LockReleaseFailedException *) arg)->object.this$));
        }
        static PyObject *t_LockReleaseFailedException_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, LockReleaseFailedException::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_LockReleaseFailedException_init_(t_LockReleaseFailedException *self, PyObject *args, PyObject *kwds)
        {
          ::java::lang::String a0((jobject) NULL);
          LockReleaseFailedException object((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            INT_CALL(object = LockReleaseFailedException(a0));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/standard/parser/StandardSyntaxParserTokenManager.h"
#include "org/apache/lucene/queryparser/flexible/standard/parser/CharStream.h"
#include "org/apache/lucene/queryparser/flexible/standard/parser/Token.h"
#include "java/io/PrintStream.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "org/apache/lucene/queryparser/flexible/standard/parser/StandardSyntaxParserConstants.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace parser {

              ::java::lang::Class *StandardSyntaxParserTokenManager::class$ = NULL;
              jmethodID *StandardSyntaxParserTokenManager::mids$ = NULL;
              jfieldID *StandardSyntaxParserTokenManager::fids$ = NULL;
              bool StandardSyntaxParserTokenManager::live$ = false;
              JArray< jint > *StandardSyntaxParserTokenManager::jjnewLexState = NULL;
              JArray< ::java::lang::String > *StandardSyntaxParserTokenManager::jjstrLiteralImages = NULL;
              JArray< ::java::lang::String > *StandardSyntaxParserTokenManager::lexStateNames = NULL;

              jclass StandardSyntaxParserTokenManager::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/standard/parser/StandardSyntaxParserTokenManager");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_8af5fa89] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/queryparser/flexible/standard/parser/CharStream;)V");
                  mids$[mid_init$_954657e1] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/queryparser/flexible/standard/parser/CharStream;I)V");
                  mids$[mid_ReInit_8af5fa89] = env->getMethodID(cls, "ReInit", "(Lorg/apache/lucene/queryparser/flexible/standard/parser/CharStream;)V");
                  mids$[mid_ReInit_954657e1] = env->getMethodID(cls, "ReInit", "(Lorg/apache/lucene/queryparser/flexible/standard/parser/CharStream;I)V");
                  mids$[mid_SwitchTo_39c7bd3c] = env->getMethodID(cls, "SwitchTo", "(I)V");
                  mids$[mid_getNextToken_5eb4cff8] = env->getMethodID(cls, "getNextToken", "()Lorg/apache/lucene/queryparser/flexible/standard/parser/Token;");
                  mids$[mid_setDebugStream_1b7c898b] = env->getMethodID(cls, "setDebugStream", "(Ljava/io/PrintStream;)V");
                  mids$[mid_jjFillToken_5eb4cff8] = env->getMethodID(cls, "jjFillToken", "()Lorg/apache/lucene/queryparser/flexible/standard/parser/Token;");

                  fids$ = new jfieldID[max_fid];
                  fids$[fid_debugStream] = env->getFieldID(cls, "debugStream", "Ljava/io/PrintStream;");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  cls = (jclass) class$->this$;

                  jjnewLexState = new JArray< jint >(env->getStaticObjectField(cls, "jjnewLexState", "[I"));
                  jjstrLiteralImages = new JArray< ::java::lang::String >(env->getStaticObjectField(cls, "jjstrLiteralImages", "[Ljava/lang/String;"));
                  lexStateNames = new JArray< ::java::lang::String >(env->getStaticObjectField(cls, "lexStateNames", "[Ljava/lang/String;"));
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              StandardSyntaxParserTokenManager::StandardSyntaxParserTokenManager(const ::org::apache::lucene::queryparser::flexible::standard::parser::CharStream & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_8af5fa89, a0.this$)) {}

              StandardSyntaxParserTokenManager::StandardSyntaxParserTokenManager(const ::org::apache::lucene::queryparser::flexible::standard::parser::CharStream & a0, jint a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_954657e1, a0.this$, a1)) {}

              void StandardSyntaxParserTokenManager::ReInit(const ::org::apache::lucene::queryparser::flexible::standard::parser::CharStream & a0) const
              {
                env->callVoidMethod(this$, mids$[mid_ReInit_8af5fa89], a0.this$);
              }

              void StandardSyntaxParserTokenManager::ReInit(const ::org::apache::lucene::queryparser::flexible::standard::parser::CharStream & a0, jint a1) const
              {
                env->callVoidMethod(this$, mids$[mid_ReInit_954657e1], a0.this$, a1);
              }

              void StandardSyntaxParserTokenManager::SwitchTo(jint a0) const
              {
                env->callVoidMethod(this$, mids$[mid_SwitchTo_39c7bd3c], a0);
              }

              ::org::apache::lucene::queryparser::flexible::standard::parser::Token StandardSyntaxParserTokenManager::getNextToken() const
              {
                return ::org::apache::lucene::queryparser::flexible::standard::parser::Token(env->callObjectMethod(this$, mids$[mid_getNextToken_5eb4cff8]));
              }

              void StandardSyntaxParserTokenManager::setDebugStream(const ::java::io::PrintStream & a0) const
              {
                env->callVoidMethod(this$, mids$[mid_setDebugStream_1b7c898b], a0.this$);
              }

              ::java::io::PrintStream StandardSyntaxParserTokenManager::_get_debugStream() const
              {
                return ::java::io::PrintStream(env->getObjectField(this$, fids$[fid_debugStream]));
              }

              void StandardSyntaxParserTokenManager::_set_debugStream(const ::java::io::PrintStream & a0) const
              {
                env->setObjectField(this$, fids$[fid_debugStream], a0.this$);
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace parser {
              static PyObject *t_StandardSyntaxParserTokenManager_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_StandardSyntaxParserTokenManager_instance_(PyTypeObject *type, PyObject *arg);
              static int t_StandardSyntaxParserTokenManager_init_(t_StandardSyntaxParserTokenManager *self, PyObject *args, PyObject *kwds);
              static PyObject *t_StandardSyntaxParserTokenManager_ReInit(t_StandardSyntaxParserTokenManager *self, PyObject *args);
              static PyObject *t_StandardSyntaxParserTokenManager_SwitchTo(t_StandardSyntaxParserTokenManager *self, PyObject *arg);
              static PyObject *t_StandardSyntaxParserTokenManager_getNextToken(t_StandardSyntaxParserTokenManager *self);
              static PyObject *t_StandardSyntaxParserTokenManager_setDebugStream(t_StandardSyntaxParserTokenManager *self, PyObject *arg);

              static int t_StandardSyntaxParserTokenManager_set__debugStream(t_StandardSyntaxParserTokenManager *self, PyObject *arg, void *data);
              static PyObject *t_StandardSyntaxParserTokenManager_get__nextToken(t_StandardSyntaxParserTokenManager *self, void *data);
              static PyGetSetDef t_StandardSyntaxParserTokenManager__fields_[] = {
                DECLARE_SET_FIELD(t_StandardSyntaxParserTokenManager, debugStream),
                DECLARE_GET_FIELD(t_StandardSyntaxParserTokenManager, nextToken),
                { NULL, NULL, NULL, NULL, NULL }
              };

              static PyMethodDef t_StandardSyntaxParserTokenManager__methods_[] = {
                DECLARE_METHOD(t_StandardSyntaxParserTokenManager, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_StandardSyntaxParserTokenManager, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_StandardSyntaxParserTokenManager, ReInit, METH_VARARGS),
                DECLARE_METHOD(t_StandardSyntaxParserTokenManager, SwitchTo, METH_O),
                DECLARE_METHOD(t_StandardSyntaxParserTokenManager, getNextToken, METH_NOARGS),
                DECLARE_METHOD(t_StandardSyntaxParserTokenManager, setDebugStream, METH_O),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(StandardSyntaxParserTokenManager, t_StandardSyntaxParserTokenManager, ::java::lang::Object, StandardSyntaxParserTokenManager, t_StandardSyntaxParserTokenManager_init_, 0, 0, t_StandardSyntaxParserTokenManager__fields_, 0, 0);

              void t_StandardSyntaxParserTokenManager::install(PyObject *module)
              {
                installType(&PY_TYPE(StandardSyntaxParserTokenManager), module, "StandardSyntaxParserTokenManager", 0);
              }

              void t_StandardSyntaxParserTokenManager::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(StandardSyntaxParserTokenManager).tp_dict, "class_", make_descriptor(StandardSyntaxParserTokenManager::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(StandardSyntaxParserTokenManager).tp_dict, "wrapfn_", make_descriptor(t_StandardSyntaxParserTokenManager::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(StandardSyntaxParserTokenManager).tp_dict, "boxfn_", make_descriptor(boxObject));
                env->getClass(StandardSyntaxParserTokenManager::initializeClass);
                PyDict_SetItemString(PY_TYPE(StandardSyntaxParserTokenManager).tp_dict, "jjnewLexState", make_descriptor(StandardSyntaxParserTokenManager::jjnewLexState->wrap()));
                PyDict_SetItemString(PY_TYPE(StandardSyntaxParserTokenManager).tp_dict, "jjstrLiteralImages", make_descriptor(JArray<jstring>(StandardSyntaxParserTokenManager::jjstrLiteralImages->this$).wrap()));
                PyDict_SetItemString(PY_TYPE(StandardSyntaxParserTokenManager).tp_dict, "lexStateNames", make_descriptor(JArray<jstring>(StandardSyntaxParserTokenManager::lexStateNames->this$).wrap()));
              }

              static PyObject *t_StandardSyntaxParserTokenManager_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, StandardSyntaxParserTokenManager::initializeClass, 1)))
                  return NULL;
                return t_StandardSyntaxParserTokenManager::wrap_Object(StandardSyntaxParserTokenManager(((t_StandardSyntaxParserTokenManager *) arg)->object.this$));
              }
              static PyObject *t_StandardSyntaxParserTokenManager_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, StandardSyntaxParserTokenManager::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_StandardSyntaxParserTokenManager_init_(t_StandardSyntaxParserTokenManager *self, PyObject *args, PyObject *kwds)
              {
                switch (PyTuple_GET_SIZE(args)) {
                 case 1:
                  {
                    ::org::apache::lucene::queryparser::flexible::standard::parser::CharStream a0((jobject) NULL);
                    StandardSyntaxParserTokenManager object((jobject) NULL);

                    if (!parseArgs(args, "k", ::org::apache::lucene::queryparser::flexible::standard::parser::CharStream::initializeClass, &a0))
                    {
                      INT_CALL(object = StandardSyntaxParserTokenManager(a0));
                      self->object = object;
                      break;
                    }
                  }
                  goto err;
                 case 2:
                  {
                    ::org::apache::lucene::queryparser::flexible::standard::parser::CharStream a0((jobject) NULL);
                    jint a1;
                    StandardSyntaxParserTokenManager object((jobject) NULL);

                    if (!parseArgs(args, "kI", ::org::apache::lucene::queryparser::flexible::standard::parser::CharStream::initializeClass, &a0, &a1))
                    {
                      INT_CALL(object = StandardSyntaxParserTokenManager(a0, a1));
                      self->object = object;
                      break;
                    }
                  }
                 default:
                 err:
                  PyErr_SetArgsError((PyObject *) self, "__init__", args);
                  return -1;
                }

                return 0;
              }

              static PyObject *t_StandardSyntaxParserTokenManager_ReInit(t_StandardSyntaxParserTokenManager *self, PyObject *args)
              {
                switch (PyTuple_GET_SIZE(args)) {
                 case 1:
                  {
                    ::org::apache::lucene::queryparser::flexible::standard::parser::CharStream a0((jobject) NULL);

                    if (!parseArgs(args, "k", ::org::apache::lucene::queryparser::flexible::standard::parser::CharStream::initializeClass, &a0))
                    {
                      OBJ_CALL(self->object.ReInit(a0));
                      Py_RETURN_NONE;
                    }
                  }
                  break;
                 case 2:
                  {
                    ::org::apache::lucene::queryparser::flexible::standard::parser::CharStream a0((jobject) NULL);
                    jint a1;

                    if (!parseArgs(args, "kI", ::org::apache::lucene::queryparser::flexible::standard::parser::CharStream::initializeClass, &a0, &a1))
                    {
                      OBJ_CALL(self->object.ReInit(a0, a1));
                      Py_RETURN_NONE;
                    }
                  }
                }

                PyErr_SetArgsError((PyObject *) self, "ReInit", args);
                return NULL;
              }

              static PyObject *t_StandardSyntaxParserTokenManager_SwitchTo(t_StandardSyntaxParserTokenManager *self, PyObject *arg)
              {
                jint a0;

                if (!parseArg(arg, "I", &a0))
                {
                  OBJ_CALL(self->object.SwitchTo(a0));
                  Py_RETURN_NONE;
                }

                PyErr_SetArgsError((PyObject *) self, "SwitchTo", arg);
                return NULL;
              }

              static PyObject *t_StandardSyntaxParserTokenManager_getNextToken(t_StandardSyntaxParserTokenManager *self)
              {
                ::org::apache::lucene::queryparser::flexible::standard::parser::Token result((jobject) NULL);
                OBJ_CALL(result = self->object.getNextToken());
                return ::org::apache::lucene::queryparser::flexible::standard::parser::t_Token::wrap_Object(result);
              }

              static PyObject *t_StandardSyntaxParserTokenManager_setDebugStream(t_StandardSyntaxParserTokenManager *self, PyObject *arg)
              {
                ::java::io::PrintStream a0((jobject) NULL);

                if (!parseArg(arg, "k", ::java::io::PrintStream::initializeClass, &a0))
                {
                  OBJ_CALL(self->object.setDebugStream(a0));
                  Py_RETURN_NONE;
                }

                PyErr_SetArgsError((PyObject *) self, "setDebugStream", arg);
                return NULL;
              }

              static int t_StandardSyntaxParserTokenManager_set__debugStream(t_StandardSyntaxParserTokenManager *self, PyObject *arg, void *data)
              {
                {
                  ::java::io::PrintStream value((jobject) NULL);
                  if (!parseArg(arg, "k", ::java::io::PrintStream::initializeClass, &value))
                  {
                    INT_CALL(self->object.setDebugStream(value));
                    return 0;
                  }
                }
                PyErr_SetArgsError((PyObject *) self, "debugStream", arg);
                return -1;
              }

              static PyObject *t_StandardSyntaxParserTokenManager_get__nextToken(t_StandardSyntaxParserTokenManager *self, void *data)
              {
                ::org::apache::lucene::queryparser::flexible::standard::parser::Token value((jobject) NULL);
                OBJ_CALL(value = self->object.getNextToken());
                return ::org::apache::lucene::queryparser::flexible::standard::parser::t_Token::wrap_Object(value);
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/BulkScorer.h"
#include "org/apache/lucene/search/Collector.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *BulkScorer::class$ = NULL;
        jmethodID *BulkScorer::mids$ = NULL;
        bool BulkScorer::live$ = false;

        jclass BulkScorer::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/BulkScorer");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_score_77379ce0] = env->getMethodID(cls, "score", "(Lorg/apache/lucene/search/Collector;)V");
            mids$[mid_score_9527f6ba] = env->getMethodID(cls, "score", "(Lorg/apache/lucene/search/Collector;I)Z");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        BulkScorer::BulkScorer() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        void BulkScorer::score(const ::org::apache::lucene::search::Collector & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_score_77379ce0], a0.this$);
        }

        jboolean BulkScorer::score(const ::org::apache::lucene::search::Collector & a0, jint a1) const
        {
          return env->callBooleanMethod(this$, mids$[mid_score_9527f6ba], a0.this$, a1);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_BulkScorer_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_BulkScorer_instance_(PyTypeObject *type, PyObject *arg);
        static int t_BulkScorer_init_(t_BulkScorer *self, PyObject *args, PyObject *kwds);
        static PyObject *t_BulkScorer_score(t_BulkScorer *self, PyObject *args);

        static PyMethodDef t_BulkScorer__methods_[] = {
          DECLARE_METHOD(t_BulkScorer, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_BulkScorer, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_BulkScorer, score, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(BulkScorer, t_BulkScorer, ::java::lang::Object, BulkScorer, t_BulkScorer_init_, 0, 0, 0, 0, 0);

        void t_BulkScorer::install(PyObject *module)
        {
          installType(&PY_TYPE(BulkScorer), module, "BulkScorer", 0);
        }

        void t_BulkScorer::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(BulkScorer).tp_dict, "class_", make_descriptor(BulkScorer::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(BulkScorer).tp_dict, "wrapfn_", make_descriptor(t_BulkScorer::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(BulkScorer).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_BulkScorer_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, BulkScorer::initializeClass, 1)))
            return NULL;
          return t_BulkScorer::wrap_Object(BulkScorer(((t_BulkScorer *) arg)->object.this$));
        }
        static PyObject *t_BulkScorer_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, BulkScorer::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_BulkScorer_init_(t_BulkScorer *self, PyObject *args, PyObject *kwds)
        {
          BulkScorer object((jobject) NULL);

          INT_CALL(object = BulkScorer());
          self->object = object;

          return 0;
        }

        static PyObject *t_BulkScorer_score(t_BulkScorer *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              ::org::apache::lucene::search::Collector a0((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::search::Collector::initializeClass, &a0))
              {
                OBJ_CALL(self->object.score(a0));
                Py_RETURN_NONE;
              }
            }
            break;
           case 2:
            {
              ::org::apache::lucene::search::Collector a0((jobject) NULL);
              jint a1;
              jboolean result;

              if (!parseArgs(args, "kI", ::org::apache::lucene::search::Collector::initializeClass, &a0, &a1))
              {
                OBJ_CALL(result = self->object.score(a0, a1));
                Py_RETURN_BOOL(result);
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "score", args);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/similarities/LMDirichletSimilarity.h"
#include "java/lang/String.h"
#include "org/apache/lucene/search/similarities/LMSimilarity$CollectionModel.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace similarities {

          ::java::lang::Class *LMDirichletSimilarity::class$ = NULL;
          jmethodID *LMDirichletSimilarity::mids$ = NULL;
          bool LMDirichletSimilarity::live$ = false;

          jclass LMDirichletSimilarity::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/similarities/LMDirichletSimilarity");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_init$_fb5c3f12] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/similarities/LMSimilarity$CollectionModel;)V");
              mids$[mid_init$_06298cab] = env->getMethodID(cls, "<init>", "(F)V");
              mids$[mid_init$_75020b37] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/similarities/LMSimilarity$CollectionModel;F)V");
              mids$[mid_getMu_54c6a176] = env->getMethodID(cls, "getMu", "()F");
              mids$[mid_getName_14c7b5c5] = env->getMethodID(cls, "getName", "()Ljava/lang/String;");
              mids$[mid_score_63482206] = env->getMethodID(cls, "score", "(Lorg/apache/lucene/search/similarities/BasicStats;FF)F");
              mids$[mid_explain_347d95f8] = env->getMethodID(cls, "explain", "(Lorg/apache/lucene/search/Explanation;Lorg/apache/lucene/search/similarities/BasicStats;IFF)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          LMDirichletSimilarity::LMDirichletSimilarity() : ::org::apache::lucene::search::similarities::LMSimilarity(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          LMDirichletSimilarity::LMDirichletSimilarity(const ::org::apache::lucene::search::similarities::LMSimilarity$CollectionModel & a0) : ::org::apache::lucene::search::similarities::LMSimilarity(env->newObject(initializeClass, &mids$, mid_init$_fb5c3f12, a0.this$)) {}

          LMDirichletSimilarity::LMDirichletSimilarity(jfloat a0) : ::org::apache::lucene::search::similarities::LMSimilarity(env->newObject(initializeClass, &mids$, mid_init$_06298cab, a0)) {}

          LMDirichletSimilarity::LMDirichletSimilarity(const ::org::apache::lucene::search::similarities::LMSimilarity$CollectionModel & a0, jfloat a1) : ::org::apache::lucene::search::similarities::LMSimilarity(env->newObject(initializeClass, &mids$, mid_init$_75020b37, a0.this$, a1)) {}

          jfloat LMDirichletSimilarity::getMu() const
          {
            return env->callFloatMethod(this$, mids$[mid_getMu_54c6a176]);
          }

          ::java::lang::String LMDirichletSimilarity::getName() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getName_14c7b5c5]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace similarities {
          static PyObject *t_LMDirichletSimilarity_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_LMDirichletSimilarity_instance_(PyTypeObject *type, PyObject *arg);
          static int t_LMDirichletSimilarity_init_(t_LMDirichletSimilarity *self, PyObject *args, PyObject *kwds);
          static PyObject *t_LMDirichletSimilarity_getMu(t_LMDirichletSimilarity *self);
          static PyObject *t_LMDirichletSimilarity_getName(t_LMDirichletSimilarity *self, PyObject *args);
          static PyObject *t_LMDirichletSimilarity_get__mu(t_LMDirichletSimilarity *self, void *data);
          static PyObject *t_LMDirichletSimilarity_get__name(t_LMDirichletSimilarity *self, void *data);
          static PyGetSetDef t_LMDirichletSimilarity__fields_[] = {
            DECLARE_GET_FIELD(t_LMDirichletSimilarity, mu),
            DECLARE_GET_FIELD(t_LMDirichletSimilarity, name),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_LMDirichletSimilarity__methods_[] = {
            DECLARE_METHOD(t_LMDirichletSimilarity, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_LMDirichletSimilarity, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_LMDirichletSimilarity, getMu, METH_NOARGS),
            DECLARE_METHOD(t_LMDirichletSimilarity, getName, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(LMDirichletSimilarity, t_LMDirichletSimilarity, ::org::apache::lucene::search::similarities::LMSimilarity, LMDirichletSimilarity, t_LMDirichletSimilarity_init_, 0, 0, t_LMDirichletSimilarity__fields_, 0, 0);

          void t_LMDirichletSimilarity::install(PyObject *module)
          {
            installType(&PY_TYPE(LMDirichletSimilarity), module, "LMDirichletSimilarity", 0);
          }

          void t_LMDirichletSimilarity::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(LMDirichletSimilarity).tp_dict, "class_", make_descriptor(LMDirichletSimilarity::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(LMDirichletSimilarity).tp_dict, "wrapfn_", make_descriptor(t_LMDirichletSimilarity::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(LMDirichletSimilarity).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_LMDirichletSimilarity_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, LMDirichletSimilarity::initializeClass, 1)))
              return NULL;
            return t_LMDirichletSimilarity::wrap_Object(LMDirichletSimilarity(((t_LMDirichletSimilarity *) arg)->object.this$));
          }
          static PyObject *t_LMDirichletSimilarity_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, LMDirichletSimilarity::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_LMDirichletSimilarity_init_(t_LMDirichletSimilarity *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 0:
              {
                LMDirichletSimilarity object((jobject) NULL);

                INT_CALL(object = LMDirichletSimilarity());
                self->object = object;
                break;
              }
              goto err;
             case 1:
              {
                ::org::apache::lucene::search::similarities::LMSimilarity$CollectionModel a0((jobject) NULL);
                LMDirichletSimilarity object((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::search::similarities::LMSimilarity$CollectionModel::initializeClass, &a0))
                {
                  INT_CALL(object = LMDirichletSimilarity(a0));
                  self->object = object;
                  break;
                }
              }
              {
                jfloat a0;
                LMDirichletSimilarity object((jobject) NULL);

                if (!parseArgs(args, "F", &a0))
                {
                  INT_CALL(object = LMDirichletSimilarity(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 2:
              {
                ::org::apache::lucene::search::similarities::LMSimilarity$CollectionModel a0((jobject) NULL);
                jfloat a1;
                LMDirichletSimilarity object((jobject) NULL);

                if (!parseArgs(args, "kF", ::org::apache::lucene::search::similarities::LMSimilarity$CollectionModel::initializeClass, &a0, &a1))
                {
                  INT_CALL(object = LMDirichletSimilarity(a0, a1));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_LMDirichletSimilarity_getMu(t_LMDirichletSimilarity *self)
          {
            jfloat result;
            OBJ_CALL(result = self->object.getMu());
            return PyFloat_FromDouble((double) result);
          }

          static PyObject *t_LMDirichletSimilarity_getName(t_LMDirichletSimilarity *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.getName());
              return j2p(result);
            }

            return callSuper(&PY_TYPE(LMDirichletSimilarity), (PyObject *) self, "getName", args, 2);
          }

          static PyObject *t_LMDirichletSimilarity_get__mu(t_LMDirichletSimilarity *self, void *data)
          {
            jfloat value;
            OBJ_CALL(value = self->object.getMu());
            return PyFloat_FromDouble((double) value);
          }

          static PyObject *t_LMDirichletSimilarity_get__name(t_LMDirichletSimilarity *self, void *data)
          {
            ::java::lang::String value((jobject) NULL);
            OBJ_CALL(value = self->object.getName());
            return j2p(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/th/ThaiWordFilterFactory.h"
#include "org/apache/lucene/analysis/th/ThaiWordFilter.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/String.h"
#include "java/util/Map.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace th {

          ::java::lang::Class *ThaiWordFilterFactory::class$ = NULL;
          jmethodID *ThaiWordFilterFactory::mids$ = NULL;
          bool ThaiWordFilterFactory::live$ = false;

          jclass ThaiWordFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/th/ThaiWordFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4c9e2b1c] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_55090cc5] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/th/ThaiWordFilter;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ThaiWordFilterFactory::ThaiWordFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_4c9e2b1c, a0.this$)) {}

          ::org::apache::lucene::analysis::th::ThaiWordFilter ThaiWordFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::th::ThaiWordFilter(env->callObjectMethod(this$, mids$[mid_create_55090cc5], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace th {
          static PyObject *t_ThaiWordFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_ThaiWordFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_ThaiWordFilterFactory_init_(t_ThaiWordFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_ThaiWordFilterFactory_create(t_ThaiWordFilterFactory *self, PyObject *args);

          static PyMethodDef t_ThaiWordFilterFactory__methods_[] = {
            DECLARE_METHOD(t_ThaiWordFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ThaiWordFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ThaiWordFilterFactory, create, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(ThaiWordFilterFactory, t_ThaiWordFilterFactory, ::org::apache::lucene::analysis::util::TokenFilterFactory, ThaiWordFilterFactory, t_ThaiWordFilterFactory_init_, 0, 0, 0, 0, 0);

          void t_ThaiWordFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(ThaiWordFilterFactory), module, "ThaiWordFilterFactory", 0);
          }

          void t_ThaiWordFilterFactory::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(ThaiWordFilterFactory).tp_dict, "class_", make_descriptor(ThaiWordFilterFactory::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(ThaiWordFilterFactory).tp_dict, "wrapfn_", make_descriptor(t_ThaiWordFilterFactory::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(ThaiWordFilterFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_ThaiWordFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, ThaiWordFilterFactory::initializeClass, 1)))
              return NULL;
            return t_ThaiWordFilterFactory::wrap_Object(ThaiWordFilterFactory(((t_ThaiWordFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_ThaiWordFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, ThaiWordFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_ThaiWordFilterFactory_init_(t_ThaiWordFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            ThaiWordFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = ThaiWordFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_ThaiWordFilterFactory_create(t_ThaiWordFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::th::ThaiWordFilter result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::th::t_ThaiWordFilter::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(ThaiWordFilterFactory), (PyObject *) self, "create", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/de/GermanAnalyzer.h"
#include "org/apache/lucene/util/Version.h"
#include "java/lang/String.h"
#include "org/apache/lucene/analysis/util/CharArraySet.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace de {

          ::java::lang::Class *GermanAnalyzer::class$ = NULL;
          jmethodID *GermanAnalyzer::mids$ = NULL;
          bool GermanAnalyzer::live$ = false;
          ::java::lang::String *GermanAnalyzer::DEFAULT_STOPWORD_FILE = NULL;

          jclass GermanAnalyzer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/de/GermanAnalyzer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_0d96cf33] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;)V");
              mids$[mid_init$_83eafe28] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/analysis/util/CharArraySet;)V");
              mids$[mid_init$_c9d7e4a3] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/analysis/util/CharArraySet;Lorg/apache/lucene/analysis/util/CharArraySet;)V");
              mids$[mid_getDefaultStopSet_d2d3505c] = env->getStaticMethodID(cls, "getDefaultStopSet", "()Lorg/apache/lucene/analysis/util/CharArraySet;");
              mids$[mid_createComponents_1be39cae] = env->getMethodID(cls, "createComponents", "(Ljava/lang/String;Ljava/io/Reader;)Lorg/apache/lucene/analysis/Analyzer$TokenStreamComponents;");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              DEFAULT_STOPWORD_FILE = new ::java::lang::String(env->getStaticObjectField(cls, "DEFAULT_STOPWORD_FILE", "Ljava/lang/String;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          GermanAnalyzer::GermanAnalyzer(const ::org::apache::lucene::util::Version & a0) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_0d96cf33, a0.this$)) {}

          GermanAnalyzer::GermanAnalyzer(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::analysis::util::CharArraySet & a1) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_83eafe28, a0.this$, a1.this$)) {}

          GermanAnalyzer::GermanAnalyzer(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::analysis::util::CharArraySet & a1, const ::org::apache::lucene::analysis::util::CharArraySet & a2) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_c9d7e4a3, a0.this$, a1.this$, a2.this$)) {}

          ::org::apache::lucene::analysis::util::CharArraySet GermanAnalyzer::getDefaultStopSet()
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::analysis::util::CharArraySet(env->callStaticObjectMethod(cls, mids$[mid_getDefaultStopSet_d2d3505c]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace de {
          static PyObject *t_GermanAnalyzer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_GermanAnalyzer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_GermanAnalyzer_init_(t_GermanAnalyzer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_GermanAnalyzer_getDefaultStopSet(PyTypeObject *type);
          static PyObject *t_GermanAnalyzer_get__defaultStopSet(t_GermanAnalyzer *self, void *data);
          static PyGetSetDef t_GermanAnalyzer__fields_[] = {
            DECLARE_GET_FIELD(t_GermanAnalyzer, defaultStopSet),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_GermanAnalyzer__methods_[] = {
            DECLARE_METHOD(t_GermanAnalyzer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_GermanAnalyzer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_GermanAnalyzer, getDefaultStopSet, METH_NOARGS | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(GermanAnalyzer, t_GermanAnalyzer, ::org::apache::lucene::analysis::util::StopwordAnalyzerBase, GermanAnalyzer, t_GermanAnalyzer_init_, 0, 0, t_GermanAnalyzer__fields_, 0, 0);

          void t_GermanAnalyzer::install(PyObject *module)
          {
            installType(&PY_TYPE(GermanAnalyzer), module, "GermanAnalyzer", 0);
          }

          void t_GermanAnalyzer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(GermanAnalyzer).tp_dict, "class_", make_descriptor(GermanAnalyzer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(GermanAnalyzer).tp_dict, "wrapfn_", make_descriptor(t_GermanAnalyzer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(GermanAnalyzer).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(GermanAnalyzer::initializeClass);
            PyDict_SetItemString(PY_TYPE(GermanAnalyzer).tp_dict, "DEFAULT_STOPWORD_FILE", make_descriptor(j2p(*GermanAnalyzer::DEFAULT_STOPWORD_FILE)));
          }

          static PyObject *t_GermanAnalyzer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, GermanAnalyzer::initializeClass, 1)))
              return NULL;
            return t_GermanAnalyzer::wrap_Object(GermanAnalyzer(((t_GermanAnalyzer *) arg)->object.this$));
          }
          static PyObject *t_GermanAnalyzer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, GermanAnalyzer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_GermanAnalyzer_init_(t_GermanAnalyzer *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                GermanAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "K", ::org::apache::lucene::util::Version::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_))
                {
                  INT_CALL(object = GermanAnalyzer(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 2:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                ::org::apache::lucene::analysis::util::CharArraySet a1((jobject) NULL);
                PyTypeObject **p1;
                GermanAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "KK", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1, &p1, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_))
                {
                  INT_CALL(object = GermanAnalyzer(a0, a1));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 3:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                ::org::apache::lucene::analysis::util::CharArraySet a1((jobject) NULL);
                PyTypeObject **p1;
                ::org::apache::lucene::analysis::util::CharArraySet a2((jobject) NULL);
                PyTypeObject **p2;
                GermanAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "KKK", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1, &p1, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_, &a2, &p2, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_))
                {
                  INT_CALL(object = GermanAnalyzer(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_GermanAnalyzer_getDefaultStopSet(PyTypeObject *type)
          {
            ::org::apache::lucene::analysis::util::CharArraySet result((jobject) NULL);
            OBJ_CALL(result = ::org::apache::lucene::analysis::de::GermanAnalyzer::getDefaultStopSet());
            return ::org::apache::lucene::analysis::util::t_CharArraySet::wrap_Object(result);
          }

          static PyObject *t_GermanAnalyzer_get__defaultStopSet(t_GermanAnalyzer *self, void *data)
          {
            ::org::apache::lucene::analysis::util::CharArraySet value((jobject) NULL);
            OBJ_CALL(value = self->object.getDefaultStopSet());
            return ::org::apache::lucene::analysis::util::t_CharArraySet::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/similarities/BasicModelIF.h"
#include "org/apache/lucene/search/similarities/BasicStats.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace similarities {

          ::java::lang::Class *BasicModelIF::class$ = NULL;
          jmethodID *BasicModelIF::mids$ = NULL;
          bool BasicModelIF::live$ = false;

          jclass BasicModelIF::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/similarities/BasicModelIF");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_score_076760a9] = env->getMethodID(cls, "score", "(Lorg/apache/lucene/search/similarities/BasicStats;F)F");
              mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          BasicModelIF::BasicModelIF() : ::org::apache::lucene::search::similarities::BasicModel(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          jfloat BasicModelIF::score(const ::org::apache::lucene::search::similarities::BasicStats & a0, jfloat a1) const
          {
            return env->callFloatMethod(this$, mids$[mid_score_076760a9], a0.this$, a1);
          }

          ::java::lang::String BasicModelIF::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace similarities {
          static PyObject *t_BasicModelIF_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_BasicModelIF_instance_(PyTypeObject *type, PyObject *arg);
          static int t_BasicModelIF_init_(t_BasicModelIF *self, PyObject *args, PyObject *kwds);
          static PyObject *t_BasicModelIF_score(t_BasicModelIF *self, PyObject *args);
          static PyObject *t_BasicModelIF_toString(t_BasicModelIF *self, PyObject *args);

          static PyMethodDef t_BasicModelIF__methods_[] = {
            DECLARE_METHOD(t_BasicModelIF, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_BasicModelIF, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_BasicModelIF, score, METH_VARARGS),
            DECLARE_METHOD(t_BasicModelIF, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(BasicModelIF, t_BasicModelIF, ::org::apache::lucene::search::similarities::BasicModel, BasicModelIF, t_BasicModelIF_init_, 0, 0, 0, 0, 0);

          void t_BasicModelIF::install(PyObject *module)
          {
            installType(&PY_TYPE(BasicModelIF), module, "BasicModelIF", 0);
          }

          void t_BasicModelIF::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(BasicModelIF).tp_dict, "class_", make_descriptor(BasicModelIF::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(BasicModelIF).tp_dict, "wrapfn_", make_descriptor(t_BasicModelIF::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(BasicModelIF).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_BasicModelIF_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, BasicModelIF::initializeClass, 1)))
              return NULL;
            return t_BasicModelIF::wrap_Object(BasicModelIF(((t_BasicModelIF *) arg)->object.this$));
          }
          static PyObject *t_BasicModelIF_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, BasicModelIF::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_BasicModelIF_init_(t_BasicModelIF *self, PyObject *args, PyObject *kwds)
          {
            BasicModelIF object((jobject) NULL);

            INT_CALL(object = BasicModelIF());
            self->object = object;

            return 0;
          }

          static PyObject *t_BasicModelIF_score(t_BasicModelIF *self, PyObject *args)
          {
            ::org::apache::lucene::search::similarities::BasicStats a0((jobject) NULL);
            jfloat a1;
            jfloat result;

            if (!parseArgs(args, "kF", ::org::apache::lucene::search::similarities::BasicStats::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.score(a0, a1));
              return PyFloat_FromDouble((double) result);
            }

            return callSuper(&PY_TYPE(BasicModelIF), (PyObject *) self, "score", args, 2);
          }

          static PyObject *t_BasicModelIF_toString(t_BasicModelIF *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(&PY_TYPE(BasicModelIF), (PyObject *) self, "toString", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/store/OutputStreamIndexOutput.h"
#include "java/io/OutputStream.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {

        ::java::lang::Class *OutputStreamIndexOutput::class$ = NULL;
        jmethodID *OutputStreamIndexOutput::mids$ = NULL;
        bool OutputStreamIndexOutput::live$ = false;

        jclass OutputStreamIndexOutput::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/store/OutputStreamIndexOutput");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_20acd1f6] = env->getMethodID(cls, "<init>", "(Ljava/io/OutputStream;I)V");
            mids$[mid_close_54c6a166] = env->getMethodID(cls, "close", "()V");
            mids$[mid_flush_54c6a166] = env->getMethodID(cls, "flush", "()V");
            mids$[mid_getChecksum_54c6a17a] = env->getMethodID(cls, "getChecksum", "()J");
            mids$[mid_getFilePointer_54c6a17a] = env->getMethodID(cls, "getFilePointer", "()J");
            mids$[mid_writeByte_b2271687] = env->getMethodID(cls, "writeByte", "(B)V");
            mids$[mid_writeBytes_86f4435f] = env->getMethodID(cls, "writeBytes", "([BII)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        OutputStreamIndexOutput::OutputStreamIndexOutput(const ::java::io::OutputStream & a0, jint a1) : ::org::apache::lucene::store::IndexOutput(env->newObject(initializeClass, &mids$, mid_init$_20acd1f6, a0.this$, a1)) {}

        void OutputStreamIndexOutput::close() const
        {
          env->callVoidMethod(this$, mids$[mid_close_54c6a166]);
        }

        void OutputStreamIndexOutput::flush() const
        {
          env->callVoidMethod(this$, mids$[mid_flush_54c6a166]);
        }

        jlong OutputStreamIndexOutput::getChecksum() const
        {
          return env->callLongMethod(this$, mids$[mid_getChecksum_54c6a17a]);
        }

        jlong OutputStreamIndexOutput::getFilePointer() const
        {
          return env->callLongMethod(this$, mids$[mid_getFilePointer_54c6a17a]);
        }

        void OutputStreamIndexOutput::writeByte(jbyte a0) const
        {
          env->callVoidMethod(this$, mids$[mid_writeByte_b2271687], a0);
        }

        void OutputStreamIndexOutput::writeBytes(const JArray< jbyte > & a0, jint a1, jint a2) const
        {
          env->callVoidMethod(this$, mids$[mid_writeBytes_86f4435f], a0.this$, a1, a2);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {
        static PyObject *t_OutputStreamIndexOutput_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_OutputStreamIndexOutput_instance_(PyTypeObject *type, PyObject *arg);
        static int t_OutputStreamIndexOutput_init_(t_OutputStreamIndexOutput *self, PyObject *args, PyObject *kwds);
        static PyObject *t_OutputStreamIndexOutput_close(t_OutputStreamIndexOutput *self, PyObject *args);
        static PyObject *t_OutputStreamIndexOutput_flush(t_OutputStreamIndexOutput *self, PyObject *args);
        static PyObject *t_OutputStreamIndexOutput_getChecksum(t_OutputStreamIndexOutput *self, PyObject *args);
        static PyObject *t_OutputStreamIndexOutput_getFilePointer(t_OutputStreamIndexOutput *self, PyObject *args);
        static PyObject *t_OutputStreamIndexOutput_writeByte(t_OutputStreamIndexOutput *self, PyObject *args);
        static PyObject *t_OutputStreamIndexOutput_writeBytes(t_OutputStreamIndexOutput *self, PyObject *args);
        static PyObject *t_OutputStreamIndexOutput_get__checksum(t_OutputStreamIndexOutput *self, void *data);
        static PyObject *t_OutputStreamIndexOutput_get__filePointer(t_OutputStreamIndexOutput *self, void *data);
        static PyGetSetDef t_OutputStreamIndexOutput__fields_[] = {
          DECLARE_GET_FIELD(t_OutputStreamIndexOutput, checksum),
          DECLARE_GET_FIELD(t_OutputStreamIndexOutput, filePointer),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_OutputStreamIndexOutput__methods_[] = {
          DECLARE_METHOD(t_OutputStreamIndexOutput, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_OutputStreamIndexOutput, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_OutputStreamIndexOutput, close, METH_VARARGS),
          DECLARE_METHOD(t_OutputStreamIndexOutput, flush, METH_VARARGS),
          DECLARE_METHOD(t_OutputStreamIndexOutput, getChecksum, METH_VARARGS),
          DECLARE_METHOD(t_OutputStreamIndexOutput, getFilePointer, METH_VARARGS),
          DECLARE_METHOD(t_OutputStreamIndexOutput, writeByte, METH_VARARGS),
          DECLARE_METHOD(t_OutputStreamIndexOutput, writeBytes, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(OutputStreamIndexOutput, t_OutputStreamIndexOutput, ::org::apache::lucene::store::IndexOutput, OutputStreamIndexOutput, t_OutputStreamIndexOutput_init_, 0, 0, t_OutputStreamIndexOutput__fields_, 0, 0);

        void t_OutputStreamIndexOutput::install(PyObject *module)
        {
          installType(&PY_TYPE(OutputStreamIndexOutput), module, "OutputStreamIndexOutput", 0);
        }

        void t_OutputStreamIndexOutput::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(OutputStreamIndexOutput).tp_dict, "class_", make_descriptor(OutputStreamIndexOutput::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(OutputStreamIndexOutput).tp_dict, "wrapfn_", make_descriptor(t_OutputStreamIndexOutput::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(OutputStreamIndexOutput).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_OutputStreamIndexOutput_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, OutputStreamIndexOutput::initializeClass, 1)))
            return NULL;
          return t_OutputStreamIndexOutput::wrap_Object(OutputStreamIndexOutput(((t_OutputStreamIndexOutput *) arg)->object.this$));
        }
        static PyObject *t_OutputStreamIndexOutput_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, OutputStreamIndexOutput::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_OutputStreamIndexOutput_init_(t_OutputStreamIndexOutput *self, PyObject *args, PyObject *kwds)
        {
          ::java::io::OutputStream a0((jobject) NULL);
          jint a1;
          OutputStreamIndexOutput object((jobject) NULL);

          if (!parseArgs(args, "kI", ::java::io::OutputStream::initializeClass, &a0, &a1))
          {
            INT_CALL(object = OutputStreamIndexOutput(a0, a1));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_OutputStreamIndexOutput_close(t_OutputStreamIndexOutput *self, PyObject *args)
        {

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(self->object.close());
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(OutputStreamIndexOutput), (PyObject *) self, "close", args, 2);
        }

        static PyObject *t_OutputStreamIndexOutput_flush(t_OutputStreamIndexOutput *self, PyObject *args)
        {

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(self->object.flush());
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(OutputStreamIndexOutput), (PyObject *) self, "flush", args, 2);
        }

        static PyObject *t_OutputStreamIndexOutput_getChecksum(t_OutputStreamIndexOutput *self, PyObject *args)
        {
          jlong result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.getChecksum());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          return callSuper(&PY_TYPE(OutputStreamIndexOutput), (PyObject *) self, "getChecksum", args, 2);
        }

        static PyObject *t_OutputStreamIndexOutput_getFilePointer(t_OutputStreamIndexOutput *self, PyObject *args)
        {
          jlong result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.getFilePointer());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          return callSuper(&PY_TYPE(OutputStreamIndexOutput), (PyObject *) self, "getFilePointer", args, 2);
        }

        static PyObject *t_OutputStreamIndexOutput_writeByte(t_OutputStreamIndexOutput *self, PyObject *args)
        {
          jbyte a0;

          if (!parseArgs(args, "B", &a0))
          {
            OBJ_CALL(self->object.writeByte(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(OutputStreamIndexOutput), (PyObject *) self, "writeByte", args, 2);
        }

        static PyObject *t_OutputStreamIndexOutput_writeBytes(t_OutputStreamIndexOutput *self, PyObject *args)
        {
          JArray< jbyte > a0((jobject) NULL);
          jint a1;
          jint a2;

          if (!parseArgs(args, "[BII", &a0, &a1, &a2))
          {
            OBJ_CALL(self->object.writeBytes(a0, a1, a2));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(OutputStreamIndexOutput), (PyObject *) self, "writeBytes", args, 2);
        }

        static PyObject *t_OutputStreamIndexOutput_get__checksum(t_OutputStreamIndexOutput *self, void *data)
        {
          jlong value;
          OBJ_CALL(value = self->object.getChecksum());
          return PyLong_FromLongLong((PY_LONG_LONG) value);
        }

        static PyObject *t_OutputStreamIndexOutput_get__filePointer(t_OutputStreamIndexOutput *self, void *data)
        {
          jlong value;
          OBJ_CALL(value = self->object.getFilePointer());
          return PyLong_FromLongLong((PY_LONG_LONG) value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/fa/PersianCharFilter.h"
#include "java/io/IOException.h"
#include "java/io/Reader.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace fa {

          ::java::lang::Class *PersianCharFilter::class$ = NULL;
          jmethodID *PersianCharFilter::mids$ = NULL;
          bool PersianCharFilter::live$ = false;

          jclass PersianCharFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/fa/PersianCharFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_cf2e3c10] = env->getMethodID(cls, "<init>", "(Ljava/io/Reader;)V");
              mids$[mid_read_54c6a179] = env->getMethodID(cls, "read", "()I");
              mids$[mid_read_6f0bb349] = env->getMethodID(cls, "read", "([CII)I");
              mids$[mid_correct_39c7bd23] = env->getMethodID(cls, "correct", "(I)I");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          PersianCharFilter::PersianCharFilter(const ::java::io::Reader & a0) : ::org::apache::lucene::analysis::CharFilter(env->newObject(initializeClass, &mids$, mid_init$_cf2e3c10, a0.this$)) {}

          jint PersianCharFilter::read() const
          {
            return env->callIntMethod(this$, mids$[mid_read_54c6a179]);
          }

          jint PersianCharFilter::read(const JArray< jchar > & a0, jint a1, jint a2) const
          {
            return env->callIntMethod(this$, mids$[mid_read_6f0bb349], a0.this$, a1, a2);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace fa {
          static PyObject *t_PersianCharFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PersianCharFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_PersianCharFilter_init_(t_PersianCharFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_PersianCharFilter_read(t_PersianCharFilter *self, PyObject *args);

          static PyMethodDef t_PersianCharFilter__methods_[] = {
            DECLARE_METHOD(t_PersianCharFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PersianCharFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PersianCharFilter, read, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(PersianCharFilter, t_PersianCharFilter, ::org::apache::lucene::analysis::CharFilter, PersianCharFilter, t_PersianCharFilter_init_, 0, 0, 0, 0, 0);

          void t_PersianCharFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(PersianCharFilter), module, "PersianCharFilter", 0);
          }

          void t_PersianCharFilter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(PersianCharFilter).tp_dict, "class_", make_descriptor(PersianCharFilter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(PersianCharFilter).tp_dict, "wrapfn_", make_descriptor(t_PersianCharFilter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(PersianCharFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_PersianCharFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, PersianCharFilter::initializeClass, 1)))
              return NULL;
            return t_PersianCharFilter::wrap_Object(PersianCharFilter(((t_PersianCharFilter *) arg)->object.this$));
          }
          static PyObject *t_PersianCharFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, PersianCharFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_PersianCharFilter_init_(t_PersianCharFilter *self, PyObject *args, PyObject *kwds)
          {
            ::java::io::Reader a0((jobject) NULL);
            PersianCharFilter object((jobject) NULL);

            if (!parseArgs(args, "k", ::java::io::Reader::initializeClass, &a0))
            {
              INT_CALL(object = PersianCharFilter(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_PersianCharFilter_read(t_PersianCharFilter *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 0:
              {
                jint result;
                OBJ_CALL(result = self->object.read());
                return PyInt_FromLong((long) result);
              }
              break;
             case 3:
              {
                JArray< jchar > a0((jobject) NULL);
                jint a1;
                jint a2;
                jint result;

                if (!parseArgs(args, "[CII", &a0, &a1, &a2))
                {
                  OBJ_CALL(result = self->object.read(a0, a1, a2));
                  return PyInt_FromLong((long) result);
                }
              }
            }

            return callSuper(&PY_TYPE(PersianCharFilter), (PyObject *) self, "read", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/miscellaneous/LimitTokenPositionFilter.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {

          ::java::lang::Class *LimitTokenPositionFilter::class$ = NULL;
          jmethodID *LimitTokenPositionFilter::mids$ = NULL;
          bool LimitTokenPositionFilter::live$ = false;

          jclass LimitTokenPositionFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/miscellaneous/LimitTokenPositionFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_d53bcf42] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;I)V");
              mids$[mid_init$_4f7f61d3] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;IZ)V");
              mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");
              mids$[mid_reset_54c6a166] = env->getMethodID(cls, "reset", "()V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          LimitTokenPositionFilter::LimitTokenPositionFilter(const ::org::apache::lucene::analysis::TokenStream & a0, jint a1) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_d53bcf42, a0.this$, a1)) {}

          LimitTokenPositionFilter::LimitTokenPositionFilter(const ::org::apache::lucene::analysis::TokenStream & a0, jint a1, jboolean a2) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_4f7f61d3, a0.this$, a1, a2)) {}

          jboolean LimitTokenPositionFilter::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_54c6a16a]);
          }

          void LimitTokenPositionFilter::reset() const
          {
            env->callVoidMethod(this$, mids$[mid_reset_54c6a166]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {
          static PyObject *t_LimitTokenPositionFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_LimitTokenPositionFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_LimitTokenPositionFilter_init_(t_LimitTokenPositionFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_LimitTokenPositionFilter_incrementToken(t_LimitTokenPositionFilter *self, PyObject *args);
          static PyObject *t_LimitTokenPositionFilter_reset(t_LimitTokenPositionFilter *self, PyObject *args);

          static PyMethodDef t_LimitTokenPositionFilter__methods_[] = {
            DECLARE_METHOD(t_LimitTokenPositionFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_LimitTokenPositionFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_LimitTokenPositionFilter, incrementToken, METH_VARARGS),
            DECLARE_METHOD(t_LimitTokenPositionFilter, reset, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(LimitTokenPositionFilter, t_LimitTokenPositionFilter, ::org::apache::lucene::analysis::TokenFilter, LimitTokenPositionFilter, t_LimitTokenPositionFilter_init_, 0, 0, 0, 0, 0);

          void t_LimitTokenPositionFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(LimitTokenPositionFilter), module, "LimitTokenPositionFilter", 0);
          }

          void t_LimitTokenPositionFilter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(LimitTokenPositionFilter).tp_dict, "class_", make_descriptor(LimitTokenPositionFilter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(LimitTokenPositionFilter).tp_dict, "wrapfn_", make_descriptor(t_LimitTokenPositionFilter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(LimitTokenPositionFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_LimitTokenPositionFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, LimitTokenPositionFilter::initializeClass, 1)))
              return NULL;
            return t_LimitTokenPositionFilter::wrap_Object(LimitTokenPositionFilter(((t_LimitTokenPositionFilter *) arg)->object.this$));
          }
          static PyObject *t_LimitTokenPositionFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, LimitTokenPositionFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_LimitTokenPositionFilter_init_(t_LimitTokenPositionFilter *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 2:
              {
                ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
                jint a1;
                LimitTokenPositionFilter object((jobject) NULL);

                if (!parseArgs(args, "kI", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0, &a1))
                {
                  INT_CALL(object = LimitTokenPositionFilter(a0, a1));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 3:
              {
                ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
                jint a1;
                jboolean a2;
                LimitTokenPositionFilter object((jobject) NULL);

                if (!parseArgs(args, "kIZ", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0, &a1, &a2))
                {
                  INT_CALL(object = LimitTokenPositionFilter(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_LimitTokenPositionFilter_incrementToken(t_LimitTokenPositionFilter *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(LimitTokenPositionFilter), (PyObject *) self, "incrementToken", args, 2);
          }

          static PyObject *t_LimitTokenPositionFilter_reset(t_LimitTokenPositionFilter *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.reset());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(LimitTokenPositionFilter), (PyObject *) self, "reset", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/miscellaneous/WordDelimiterFilter.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "org/apache/lucene/util/Version.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/util/CharArraySet.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {

          ::java::lang::Class *WordDelimiterFilter::class$ = NULL;
          jmethodID *WordDelimiterFilter::mids$ = NULL;
          bool WordDelimiterFilter::live$ = false;
          jint WordDelimiterFilter::ALPHA = (jint) 0;
          jint WordDelimiterFilter::ALPHANUM = (jint) 0;
          jint WordDelimiterFilter::CATENATE_ALL = (jint) 0;
          jint WordDelimiterFilter::CATENATE_NUMBERS = (jint) 0;
          jint WordDelimiterFilter::CATENATE_WORDS = (jint) 0;
          jint WordDelimiterFilter::DIGIT = (jint) 0;
          jint WordDelimiterFilter::GENERATE_NUMBER_PARTS = (jint) 0;
          jint WordDelimiterFilter::GENERATE_WORD_PARTS = (jint) 0;
          jint WordDelimiterFilter::LOWER = (jint) 0;
          jint WordDelimiterFilter::PRESERVE_ORIGINAL = (jint) 0;
          jint WordDelimiterFilter::SPLIT_ON_CASE_CHANGE = (jint) 0;
          jint WordDelimiterFilter::SPLIT_ON_NUMERICS = (jint) 0;
          jint WordDelimiterFilter::STEM_ENGLISH_POSSESSIVE = (jint) 0;
          jint WordDelimiterFilter::SUBWORD_DELIM = (jint) 0;
          jint WordDelimiterFilter::UPPER = (jint) 0;

          jclass WordDelimiterFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/miscellaneous/WordDelimiterFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_635fa7aa] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/analysis/TokenStream;ILorg/apache/lucene/analysis/util/CharArraySet;)V");
              mids$[mid_init$_9bd98551] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/analysis/TokenStream;[BILorg/apache/lucene/analysis/util/CharArraySet;)V");
              mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");
              mids$[mid_reset_54c6a166] = env->getMethodID(cls, "reset", "()V");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              ALPHA = env->getStaticIntField(cls, "ALPHA");
              ALPHANUM = env->getStaticIntField(cls, "ALPHANUM");
              CATENATE_ALL = env->getStaticIntField(cls, "CATENATE_ALL");
              CATENATE_NUMBERS = env->getStaticIntField(cls, "CATENATE_NUMBERS");
              CATENATE_WORDS = env->getStaticIntField(cls, "CATENATE_WORDS");
              DIGIT = env->getStaticIntField(cls, "DIGIT");
              GENERATE_NUMBER_PARTS = env->getStaticIntField(cls, "GENERATE_NUMBER_PARTS");
              GENERATE_WORD_PARTS = env->getStaticIntField(cls, "GENERATE_WORD_PARTS");
              LOWER = env->getStaticIntField(cls, "LOWER");
              PRESERVE_ORIGINAL = env->getStaticIntField(cls, "PRESERVE_ORIGINAL");
              SPLIT_ON_CASE_CHANGE = env->getStaticIntField(cls, "SPLIT_ON_CASE_CHANGE");
              SPLIT_ON_NUMERICS = env->getStaticIntField(cls, "SPLIT_ON_NUMERICS");
              STEM_ENGLISH_POSSESSIVE = env->getStaticIntField(cls, "STEM_ENGLISH_POSSESSIVE");
              SUBWORD_DELIM = env->getStaticIntField(cls, "SUBWORD_DELIM");
              UPPER = env->getStaticIntField(cls, "UPPER");
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          WordDelimiterFilter::WordDelimiterFilter(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::analysis::TokenStream & a1, jint a2, const ::org::apache::lucene::analysis::util::CharArraySet & a3) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_635fa7aa, a0.this$, a1.this$, a2, a3.this$)) {}

          WordDelimiterFilter::WordDelimiterFilter(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::analysis::TokenStream & a1, const JArray< jbyte > & a2, jint a3, const ::org::apache::lucene::analysis::util::CharArraySet & a4) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_9bd98551, a0.this$, a1.this$, a2.this$, a3, a4.this$)) {}

          jboolean WordDelimiterFilter::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_54c6a16a]);
          }

          void WordDelimiterFilter::reset() const
          {
            env->callVoidMethod(this$, mids$[mid_reset_54c6a166]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {
          static PyObject *t_WordDelimiterFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_WordDelimiterFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_WordDelimiterFilter_init_(t_WordDelimiterFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_WordDelimiterFilter_incrementToken(t_WordDelimiterFilter *self, PyObject *args);
          static PyObject *t_WordDelimiterFilter_reset(t_WordDelimiterFilter *self, PyObject *args);

          static PyMethodDef t_WordDelimiterFilter__methods_[] = {
            DECLARE_METHOD(t_WordDelimiterFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_WordDelimiterFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_WordDelimiterFilter, incrementToken, METH_VARARGS),
            DECLARE_METHOD(t_WordDelimiterFilter, reset, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(WordDelimiterFilter, t_WordDelimiterFilter, ::org::apache::lucene::analysis::TokenFilter, WordDelimiterFilter, t_WordDelimiterFilter_init_, 0, 0, 0, 0, 0);

          void t_WordDelimiterFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(WordDelimiterFilter), module, "WordDelimiterFilter", 0);
          }

          void t_WordDelimiterFilter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(WordDelimiterFilter).tp_dict, "class_", make_descriptor(WordDelimiterFilter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(WordDelimiterFilter).tp_dict, "wrapfn_", make_descriptor(t_WordDelimiterFilter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(WordDelimiterFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(WordDelimiterFilter::initializeClass);
            PyDict_SetItemString(PY_TYPE(WordDelimiterFilter).tp_dict, "ALPHA", make_descriptor(WordDelimiterFilter::ALPHA));
            PyDict_SetItemString(PY_TYPE(WordDelimiterFilter).tp_dict, "ALPHANUM", make_descriptor(WordDelimiterFilter::ALPHANUM));
            PyDict_SetItemString(PY_TYPE(WordDelimiterFilter).tp_dict, "CATENATE_ALL", make_descriptor(WordDelimiterFilter::CATENATE_ALL));
            PyDict_SetItemString(PY_TYPE(WordDelimiterFilter).tp_dict, "CATENATE_NUMBERS", make_descriptor(WordDelimiterFilter::CATENATE_NUMBERS));
            PyDict_SetItemString(PY_TYPE(WordDelimiterFilter).tp_dict, "CATENATE_WORDS", make_descriptor(WordDelimiterFilter::CATENATE_WORDS));
            PyDict_SetItemString(PY_TYPE(WordDelimiterFilter).tp_dict, "DIGIT", make_descriptor(WordDelimiterFilter::DIGIT));
            PyDict_SetItemString(PY_TYPE(WordDelimiterFilter).tp_dict, "GENERATE_NUMBER_PARTS", make_descriptor(WordDelimiterFilter::GENERATE_NUMBER_PARTS));
            PyDict_SetItemString(PY_TYPE(WordDelimiterFilter).tp_dict, "GENERATE_WORD_PARTS", make_descriptor(WordDelimiterFilter::GENERATE_WORD_PARTS));
            PyDict_SetItemString(PY_TYPE(WordDelimiterFilter).tp_dict, "LOWER", make_descriptor(WordDelimiterFilter::LOWER));
            PyDict_SetItemString(PY_TYPE(WordDelimiterFilter).tp_dict, "PRESERVE_ORIGINAL", make_descriptor(WordDelimiterFilter::PRESERVE_ORIGINAL));
            PyDict_SetItemString(PY_TYPE(WordDelimiterFilter).tp_dict, "SPLIT_ON_CASE_CHANGE", make_descriptor(WordDelimiterFilter::SPLIT_ON_CASE_CHANGE));
            PyDict_SetItemString(PY_TYPE(WordDelimiterFilter).tp_dict, "SPLIT_ON_NUMERICS", make_descriptor(WordDelimiterFilter::SPLIT_ON_NUMERICS));
            PyDict_SetItemString(PY_TYPE(WordDelimiterFilter).tp_dict, "STEM_ENGLISH_POSSESSIVE", make_descriptor(WordDelimiterFilter::STEM_ENGLISH_POSSESSIVE));
            PyDict_SetItemString(PY_TYPE(WordDelimiterFilter).tp_dict, "SUBWORD_DELIM", make_descriptor(WordDelimiterFilter::SUBWORD_DELIM));
            PyDict_SetItemString(PY_TYPE(WordDelimiterFilter).tp_dict, "UPPER", make_descriptor(WordDelimiterFilter::UPPER));
          }

          static PyObject *t_WordDelimiterFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, WordDelimiterFilter::initializeClass, 1)))
              return NULL;
            return t_WordDelimiterFilter::wrap_Object(WordDelimiterFilter(((t_WordDelimiterFilter *) arg)->object.this$));
          }
          static PyObject *t_WordDelimiterFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, WordDelimiterFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_WordDelimiterFilter_init_(t_WordDelimiterFilter *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 4:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                ::org::apache::lucene::analysis::TokenStream a1((jobject) NULL);
                jint a2;
                ::org::apache::lucene::analysis::util::CharArraySet a3((jobject) NULL);
                PyTypeObject **p3;
                WordDelimiterFilter object((jobject) NULL);

                if (!parseArgs(args, "KkIK", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::TokenStream::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1, &a2, &a3, &p3, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_))
                {
                  INT_CALL(object = WordDelimiterFilter(a0, a1, a2, a3));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 5:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                ::org::apache::lucene::analysis::TokenStream a1((jobject) NULL);
                JArray< jbyte > a2((jobject) NULL);
                jint a3;
                ::org::apache::lucene::analysis::util::CharArraySet a4((jobject) NULL);
                PyTypeObject **p4;
                WordDelimiterFilter object((jobject) NULL);

                if (!parseArgs(args, "Kk[BIK", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::TokenStream::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1, &a2, &a3, &a4, &p4, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_))
                {
                  INT_CALL(object = WordDelimiterFilter(a0, a1, a2, a3, a4));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_WordDelimiterFilter_incrementToken(t_WordDelimiterFilter *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(WordDelimiterFilter), (PyObject *) self, "incrementToken", args, 2);
          }

          static PyObject *t_WordDelimiterFilter_reset(t_WordDelimiterFilter *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.reset());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(WordDelimiterFilter), (PyObject *) self, "reset", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/pattern/PatternCaptureGroupTokenFilter.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/util/regex/Pattern.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace pattern {

          ::java::lang::Class *PatternCaptureGroupTokenFilter::class$ = NULL;
          jmethodID *PatternCaptureGroupTokenFilter::mids$ = NULL;
          bool PatternCaptureGroupTokenFilter::live$ = false;

          jclass PatternCaptureGroupTokenFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/pattern/PatternCaptureGroupTokenFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_d6bd0c49] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;Z[Ljava/util/regex/Pattern;)V");
              mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");
              mids$[mid_reset_54c6a166] = env->getMethodID(cls, "reset", "()V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          PatternCaptureGroupTokenFilter::PatternCaptureGroupTokenFilter(const ::org::apache::lucene::analysis::TokenStream & a0, jboolean a1, const JArray< ::java::util::regex::Pattern > & a2) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_d6bd0c49, a0.this$, a1, a2.this$)) {}

          jboolean PatternCaptureGroupTokenFilter::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_54c6a16a]);
          }

          void PatternCaptureGroupTokenFilter::reset() const
          {
            env->callVoidMethod(this$, mids$[mid_reset_54c6a166]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace pattern {
          static PyObject *t_PatternCaptureGroupTokenFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PatternCaptureGroupTokenFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_PatternCaptureGroupTokenFilter_init_(t_PatternCaptureGroupTokenFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_PatternCaptureGroupTokenFilter_incrementToken(t_PatternCaptureGroupTokenFilter *self, PyObject *args);
          static PyObject *t_PatternCaptureGroupTokenFilter_reset(t_PatternCaptureGroupTokenFilter *self, PyObject *args);

          static PyMethodDef t_PatternCaptureGroupTokenFilter__methods_[] = {
            DECLARE_METHOD(t_PatternCaptureGroupTokenFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PatternCaptureGroupTokenFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PatternCaptureGroupTokenFilter, incrementToken, METH_VARARGS),
            DECLARE_METHOD(t_PatternCaptureGroupTokenFilter, reset, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(PatternCaptureGroupTokenFilter, t_PatternCaptureGroupTokenFilter, ::org::apache::lucene::analysis::TokenFilter, PatternCaptureGroupTokenFilter, t_PatternCaptureGroupTokenFilter_init_, 0, 0, 0, 0, 0);

          void t_PatternCaptureGroupTokenFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(PatternCaptureGroupTokenFilter), module, "PatternCaptureGroupTokenFilter", 0);
          }

          void t_PatternCaptureGroupTokenFilter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(PatternCaptureGroupTokenFilter).tp_dict, "class_", make_descriptor(PatternCaptureGroupTokenFilter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(PatternCaptureGroupTokenFilter).tp_dict, "wrapfn_", make_descriptor(t_PatternCaptureGroupTokenFilter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(PatternCaptureGroupTokenFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_PatternCaptureGroupTokenFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, PatternCaptureGroupTokenFilter::initializeClass, 1)))
              return NULL;
            return t_PatternCaptureGroupTokenFilter::wrap_Object(PatternCaptureGroupTokenFilter(((t_PatternCaptureGroupTokenFilter *) arg)->object.this$));
          }
          static PyObject *t_PatternCaptureGroupTokenFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, PatternCaptureGroupTokenFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_PatternCaptureGroupTokenFilter_init_(t_PatternCaptureGroupTokenFilter *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            jboolean a1;
            JArray< ::java::util::regex::Pattern > a2((jobject) NULL);
            PatternCaptureGroupTokenFilter object((jobject) NULL);

            if (!parseArgs(args, "kZ[k", ::org::apache::lucene::analysis::TokenStream::initializeClass, ::java::util::regex::Pattern::initializeClass, &a0, &a1, &a2))
            {
              INT_CALL(object = PatternCaptureGroupTokenFilter(a0, a1, a2));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_PatternCaptureGroupTokenFilter_incrementToken(t_PatternCaptureGroupTokenFilter *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(PatternCaptureGroupTokenFilter), (PyObject *) self, "incrementToken", args, 2);
          }

          static PyObject *t_PatternCaptureGroupTokenFilter_reset(t_PatternCaptureGroupTokenFilter *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.reset());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(PatternCaptureGroupTokenFilter), (PyObject *) self, "reset", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/spell/LuceneLevenshteinDistance.h"
#include "java/lang/String.h"
#include "org/apache/lucene/search/spell/StringDistance.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace spell {

          ::java::lang::Class *LuceneLevenshteinDistance::class$ = NULL;
          jmethodID *LuceneLevenshteinDistance::mids$ = NULL;
          bool LuceneLevenshteinDistance::live$ = false;

          jclass LuceneLevenshteinDistance::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/spell/LuceneLevenshteinDistance");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_getDistance_4a264752] = env->getMethodID(cls, "getDistance", "(Ljava/lang/String;Ljava/lang/String;)F");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          LuceneLevenshteinDistance::LuceneLevenshteinDistance() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          jfloat LuceneLevenshteinDistance::getDistance(const ::java::lang::String & a0, const ::java::lang::String & a1) const
          {
            return env->callFloatMethod(this$, mids$[mid_getDistance_4a264752], a0.this$, a1.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace spell {
          static PyObject *t_LuceneLevenshteinDistance_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_LuceneLevenshteinDistance_instance_(PyTypeObject *type, PyObject *arg);
          static int t_LuceneLevenshteinDistance_init_(t_LuceneLevenshteinDistance *self, PyObject *args, PyObject *kwds);
          static PyObject *t_LuceneLevenshteinDistance_getDistance(t_LuceneLevenshteinDistance *self, PyObject *args);

          static PyMethodDef t_LuceneLevenshteinDistance__methods_[] = {
            DECLARE_METHOD(t_LuceneLevenshteinDistance, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_LuceneLevenshteinDistance, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_LuceneLevenshteinDistance, getDistance, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(LuceneLevenshteinDistance, t_LuceneLevenshteinDistance, ::java::lang::Object, LuceneLevenshteinDistance, t_LuceneLevenshteinDistance_init_, 0, 0, 0, 0, 0);

          void t_LuceneLevenshteinDistance::install(PyObject *module)
          {
            installType(&PY_TYPE(LuceneLevenshteinDistance), module, "LuceneLevenshteinDistance", 0);
          }

          void t_LuceneLevenshteinDistance::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(LuceneLevenshteinDistance).tp_dict, "class_", make_descriptor(LuceneLevenshteinDistance::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(LuceneLevenshteinDistance).tp_dict, "wrapfn_", make_descriptor(t_LuceneLevenshteinDistance::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(LuceneLevenshteinDistance).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_LuceneLevenshteinDistance_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, LuceneLevenshteinDistance::initializeClass, 1)))
              return NULL;
            return t_LuceneLevenshteinDistance::wrap_Object(LuceneLevenshteinDistance(((t_LuceneLevenshteinDistance *) arg)->object.this$));
          }
          static PyObject *t_LuceneLevenshteinDistance_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, LuceneLevenshteinDistance::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_LuceneLevenshteinDistance_init_(t_LuceneLevenshteinDistance *self, PyObject *args, PyObject *kwds)
          {
            LuceneLevenshteinDistance object((jobject) NULL);

            INT_CALL(object = LuceneLevenshteinDistance());
            self->object = object;

            return 0;
          }

          static PyObject *t_LuceneLevenshteinDistance_getDistance(t_LuceneLevenshteinDistance *self, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            ::java::lang::String a1((jobject) NULL);
            jfloat result;

            if (!parseArgs(args, "ss", &a0, &a1))
            {
              OBJ_CALL(result = self->object.getDistance(a0, a1));
              return PyFloat_FromDouble((double) result);
            }

            PyErr_SetArgsError((PyObject *) self, "getDistance", args);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/el/GreekLowerCaseFilter.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "org/apache/lucene/util/Version.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace el {

          ::java::lang::Class *GreekLowerCaseFilter::class$ = NULL;
          jmethodID *GreekLowerCaseFilter::mids$ = NULL;
          bool GreekLowerCaseFilter::live$ = false;

          jclass GreekLowerCaseFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/el/GreekLowerCaseFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_8f50e725] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/analysis/TokenStream;)V");
              mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          GreekLowerCaseFilter::GreekLowerCaseFilter(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::analysis::TokenStream & a1) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_8f50e725, a0.this$, a1.this$)) {}

          jboolean GreekLowerCaseFilter::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_54c6a16a]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace el {
          static PyObject *t_GreekLowerCaseFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_GreekLowerCaseFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_GreekLowerCaseFilter_init_(t_GreekLowerCaseFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_GreekLowerCaseFilter_incrementToken(t_GreekLowerCaseFilter *self, PyObject *args);

          static PyMethodDef t_GreekLowerCaseFilter__methods_[] = {
            DECLARE_METHOD(t_GreekLowerCaseFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_GreekLowerCaseFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_GreekLowerCaseFilter, incrementToken, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(GreekLowerCaseFilter, t_GreekLowerCaseFilter, ::org::apache::lucene::analysis::TokenFilter, GreekLowerCaseFilter, t_GreekLowerCaseFilter_init_, 0, 0, 0, 0, 0);

          void t_GreekLowerCaseFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(GreekLowerCaseFilter), module, "GreekLowerCaseFilter", 0);
          }

          void t_GreekLowerCaseFilter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(GreekLowerCaseFilter).tp_dict, "class_", make_descriptor(GreekLowerCaseFilter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(GreekLowerCaseFilter).tp_dict, "wrapfn_", make_descriptor(t_GreekLowerCaseFilter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(GreekLowerCaseFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_GreekLowerCaseFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, GreekLowerCaseFilter::initializeClass, 1)))
              return NULL;
            return t_GreekLowerCaseFilter::wrap_Object(GreekLowerCaseFilter(((t_GreekLowerCaseFilter *) arg)->object.this$));
          }
          static PyObject *t_GreekLowerCaseFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, GreekLowerCaseFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_GreekLowerCaseFilter_init_(t_GreekLowerCaseFilter *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::util::Version a0((jobject) NULL);
            PyTypeObject **p0;
            ::org::apache::lucene::analysis::TokenStream a1((jobject) NULL);
            GreekLowerCaseFilter object((jobject) NULL);

            if (!parseArgs(args, "Kk", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1))
            {
              INT_CALL(object = GreekLowerCaseFilter(a0, a1));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_GreekLowerCaseFilter_incrementToken(t_GreekLowerCaseFilter *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(GreekLowerCaseFilter), (PyObject *) self, "incrementToken", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/vectorhighlight/FieldPhraseList$WeightedPhraseInfo.h"
#include "org/apache/lucene/search/vectorhighlight/FieldPhraseList$WeightedPhraseInfo$Toffs.h"
#include "java/util/LinkedList.h"
#include "java/lang/Comparable.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/search/vectorhighlight/FieldTermStack$TermInfo.h"
#include "java/lang/String.h"
#include "java/util/Collection.h"
#include "java/util/List.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace vectorhighlight {

          ::java::lang::Class *FieldPhraseList$WeightedPhraseInfo::class$ = NULL;
          jmethodID *FieldPhraseList$WeightedPhraseInfo::mids$ = NULL;
          bool FieldPhraseList$WeightedPhraseInfo::live$ = false;

          jclass FieldPhraseList$WeightedPhraseInfo::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/vectorhighlight/FieldPhraseList$WeightedPhraseInfo");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_9bfb370d] = env->getMethodID(cls, "<init>", "(Ljava/util/Collection;)V");
              mids$[mid_init$_0ffd9fa1] = env->getMethodID(cls, "<init>", "(Ljava/util/LinkedList;F)V");
              mids$[mid_init$_d318fc21] = env->getMethodID(cls, "<init>", "(Ljava/util/LinkedList;FI)V");
              mids$[mid_compareTo_3f58e096] = env->getMethodID(cls, "compareTo", "(Lorg/apache/lucene/search/vectorhighlight/FieldPhraseList$WeightedPhraseInfo;)I");
              mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
              mids$[mid_getBoost_54c6a176] = env->getMethodID(cls, "getBoost", "()F");
              mids$[mid_getEndOffset_54c6a179] = env->getMethodID(cls, "getEndOffset", "()I");
              mids$[mid_getSeqnum_54c6a179] = env->getMethodID(cls, "getSeqnum", "()I");
              mids$[mid_getStartOffset_54c6a179] = env->getMethodID(cls, "getStartOffset", "()I");
              mids$[mid_getTermsInfos_87851566] = env->getMethodID(cls, "getTermsInfos", "()Ljava/util/List;");
              mids$[mid_getTermsOffsets_87851566] = env->getMethodID(cls, "getTermsOffsets", "()Ljava/util/List;");
              mids$[mid_getText_14c7b5c5] = env->getMethodID(cls, "getText", "()Ljava/lang/String;");
              mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
              mids$[mid_isOffsetOverlap_3f58e085] = env->getMethodID(cls, "isOffsetOverlap", "(Lorg/apache/lucene/search/vectorhighlight/FieldPhraseList$WeightedPhraseInfo;)Z");
              mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          FieldPhraseList$WeightedPhraseInfo::FieldPhraseList$WeightedPhraseInfo(const ::java::util::Collection & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_9bfb370d, a0.this$)) {}

          FieldPhraseList$WeightedPhraseInfo::FieldPhraseList$WeightedPhraseInfo(const ::java::util::LinkedList & a0, jfloat a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_0ffd9fa1, a0.this$, a1)) {}

          FieldPhraseList$WeightedPhraseInfo::FieldPhraseList$WeightedPhraseInfo(const ::java::util::LinkedList & a0, jfloat a1, jint a2) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_d318fc21, a0.this$, a1, a2)) {}

          jint FieldPhraseList$WeightedPhraseInfo::compareTo(const FieldPhraseList$WeightedPhraseInfo & a0) const
          {
            return env->callIntMethod(this$, mids$[mid_compareTo_3f58e096], a0.this$);
          }

          jboolean FieldPhraseList$WeightedPhraseInfo::equals(const ::java::lang::Object & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
          }

          jfloat FieldPhraseList$WeightedPhraseInfo::getBoost() const
          {
            return env->callFloatMethod(this$, mids$[mid_getBoost_54c6a176]);
          }

          jint FieldPhraseList$WeightedPhraseInfo::getEndOffset() const
          {
            return env->callIntMethod(this$, mids$[mid_getEndOffset_54c6a179]);
          }

          jint FieldPhraseList$WeightedPhraseInfo::getSeqnum() const
          {
            return env->callIntMethod(this$, mids$[mid_getSeqnum_54c6a179]);
          }

          jint FieldPhraseList$WeightedPhraseInfo::getStartOffset() const
          {
            return env->callIntMethod(this$, mids$[mid_getStartOffset_54c6a179]);
          }

          ::java::util::List FieldPhraseList$WeightedPhraseInfo::getTermsInfos() const
          {
            return ::java::util::List(env->callObjectMethod(this$, mids$[mid_getTermsInfos_87851566]));
          }

          ::java::util::List FieldPhraseList$WeightedPhraseInfo::getTermsOffsets() const
          {
            return ::java::util::List(env->callObjectMethod(this$, mids$[mid_getTermsOffsets_87851566]));
          }

          ::java::lang::String FieldPhraseList$WeightedPhraseInfo::getText() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getText_14c7b5c5]));
          }

          jint FieldPhraseList$WeightedPhraseInfo::hashCode() const
          {
            return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
          }

          jboolean FieldPhraseList$WeightedPhraseInfo::isOffsetOverlap(const FieldPhraseList$WeightedPhraseInfo & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_isOffsetOverlap_3f58e085], a0.this$);
          }

          ::java::lang::String FieldPhraseList$WeightedPhraseInfo::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace vectorhighlight {
          static PyObject *t_FieldPhraseList$WeightedPhraseInfo_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_FieldPhraseList$WeightedPhraseInfo_instance_(PyTypeObject *type, PyObject *arg);
          static int t_FieldPhraseList$WeightedPhraseInfo_init_(t_FieldPhraseList$WeightedPhraseInfo *self, PyObject *args, PyObject *kwds);
          static PyObject *t_FieldPhraseList$WeightedPhraseInfo_compareTo(t_FieldPhraseList$WeightedPhraseInfo *self, PyObject *arg);
          static PyObject *t_FieldPhraseList$WeightedPhraseInfo_equals(t_FieldPhraseList$WeightedPhraseInfo *self, PyObject *args);
          static PyObject *t_FieldPhraseList$WeightedPhraseInfo_getBoost(t_FieldPhraseList$WeightedPhraseInfo *self);
          static PyObject *t_FieldPhraseList$WeightedPhraseInfo_getEndOffset(t_FieldPhraseList$WeightedPhraseInfo *self);
          static PyObject *t_FieldPhraseList$WeightedPhraseInfo_getSeqnum(t_FieldPhraseList$WeightedPhraseInfo *self);
          static PyObject *t_FieldPhraseList$WeightedPhraseInfo_getStartOffset(t_FieldPhraseList$WeightedPhraseInfo *self);
          static PyObject *t_FieldPhraseList$WeightedPhraseInfo_getTermsInfos(t_FieldPhraseList$WeightedPhraseInfo *self);
          static PyObject *t_FieldPhraseList$WeightedPhraseInfo_getTermsOffsets(t_FieldPhraseList$WeightedPhraseInfo *self);
          static PyObject *t_FieldPhraseList$WeightedPhraseInfo_getText(t_FieldPhraseList$WeightedPhraseInfo *self);
          static PyObject *t_FieldPhraseList$WeightedPhraseInfo_hashCode(t_FieldPhraseList$WeightedPhraseInfo *self, PyObject *args);
          static PyObject *t_FieldPhraseList$WeightedPhraseInfo_isOffsetOverlap(t_FieldPhraseList$WeightedPhraseInfo *self, PyObject *arg);
          static PyObject *t_FieldPhraseList$WeightedPhraseInfo_toString(t_FieldPhraseList$WeightedPhraseInfo *self, PyObject *args);
          static PyObject *t_FieldPhraseList$WeightedPhraseInfo_get__boost(t_FieldPhraseList$WeightedPhraseInfo *self, void *data);
          static PyObject *t_FieldPhraseList$WeightedPhraseInfo_get__endOffset(t_FieldPhraseList$WeightedPhraseInfo *self, void *data);
          static PyObject *t_FieldPhraseList$WeightedPhraseInfo_get__seqnum(t_FieldPhraseList$WeightedPhraseInfo *self, void *data);
          static PyObject *t_FieldPhraseList$WeightedPhraseInfo_get__startOffset(t_FieldPhraseList$WeightedPhraseInfo *self, void *data);
          static PyObject *t_FieldPhraseList$WeightedPhraseInfo_get__termsInfos(t_FieldPhraseList$WeightedPhraseInfo *self, void *data);
          static PyObject *t_FieldPhraseList$WeightedPhraseInfo_get__termsOffsets(t_FieldPhraseList$WeightedPhraseInfo *self, void *data);
          static PyObject *t_FieldPhraseList$WeightedPhraseInfo_get__text(t_FieldPhraseList$WeightedPhraseInfo *self, void *data);
          static PyGetSetDef t_FieldPhraseList$WeightedPhraseInfo__fields_[] = {
            DECLARE_GET_FIELD(t_FieldPhraseList$WeightedPhraseInfo, boost),
            DECLARE_GET_FIELD(t_FieldPhraseList$WeightedPhraseInfo, endOffset),
            DECLARE_GET_FIELD(t_FieldPhraseList$WeightedPhraseInfo, seqnum),
            DECLARE_GET_FIELD(t_FieldPhraseList$WeightedPhraseInfo, startOffset),
            DECLARE_GET_FIELD(t_FieldPhraseList$WeightedPhraseInfo, termsInfos),
            DECLARE_GET_FIELD(t_FieldPhraseList$WeightedPhraseInfo, termsOffsets),
            DECLARE_GET_FIELD(t_FieldPhraseList$WeightedPhraseInfo, text),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_FieldPhraseList$WeightedPhraseInfo__methods_[] = {
            DECLARE_METHOD(t_FieldPhraseList$WeightedPhraseInfo, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FieldPhraseList$WeightedPhraseInfo, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FieldPhraseList$WeightedPhraseInfo, compareTo, METH_O),
            DECLARE_METHOD(t_FieldPhraseList$WeightedPhraseInfo, equals, METH_VARARGS),
            DECLARE_METHOD(t_FieldPhraseList$WeightedPhraseInfo, getBoost, METH_NOARGS),
            DECLARE_METHOD(t_FieldPhraseList$WeightedPhraseInfo, getEndOffset, METH_NOARGS),
            DECLARE_METHOD(t_FieldPhraseList$WeightedPhraseInfo, getSeqnum, METH_NOARGS),
            DECLARE_METHOD(t_FieldPhraseList$WeightedPhraseInfo, getStartOffset, METH_NOARGS),
            DECLARE_METHOD(t_FieldPhraseList$WeightedPhraseInfo, getTermsInfos, METH_NOARGS),
            DECLARE_METHOD(t_FieldPhraseList$WeightedPhraseInfo, getTermsOffsets, METH_NOARGS),
            DECLARE_METHOD(t_FieldPhraseList$WeightedPhraseInfo, getText, METH_NOARGS),
            DECLARE_METHOD(t_FieldPhraseList$WeightedPhraseInfo, hashCode, METH_VARARGS),
            DECLARE_METHOD(t_FieldPhraseList$WeightedPhraseInfo, isOffsetOverlap, METH_O),
            DECLARE_METHOD(t_FieldPhraseList$WeightedPhraseInfo, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(FieldPhraseList$WeightedPhraseInfo, t_FieldPhraseList$WeightedPhraseInfo, ::java::lang::Object, FieldPhraseList$WeightedPhraseInfo, t_FieldPhraseList$WeightedPhraseInfo_init_, 0, 0, t_FieldPhraseList$WeightedPhraseInfo__fields_, 0, 0);

          void t_FieldPhraseList$WeightedPhraseInfo::install(PyObject *module)
          {
            installType(&PY_TYPE(FieldPhraseList$WeightedPhraseInfo), module, "FieldPhraseList$WeightedPhraseInfo", 0);
            PyDict_SetItemString(PY_TYPE(FieldPhraseList$WeightedPhraseInfo).tp_dict, "Toffs", make_descriptor(&PY_TYPE(FieldPhraseList$WeightedPhraseInfo$Toffs)));
          }

          void t_FieldPhraseList$WeightedPhraseInfo::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(FieldPhraseList$WeightedPhraseInfo).tp_dict, "class_", make_descriptor(FieldPhraseList$WeightedPhraseInfo::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(FieldPhraseList$WeightedPhraseInfo).tp_dict, "wrapfn_", make_descriptor(t_FieldPhraseList$WeightedPhraseInfo::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(FieldPhraseList$WeightedPhraseInfo).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_FieldPhraseList$WeightedPhraseInfo_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, FieldPhraseList$WeightedPhraseInfo::initializeClass, 1)))
              return NULL;
            return t_FieldPhraseList$WeightedPhraseInfo::wrap_Object(FieldPhraseList$WeightedPhraseInfo(((t_FieldPhraseList$WeightedPhraseInfo *) arg)->object.this$));
          }
          static PyObject *t_FieldPhraseList$WeightedPhraseInfo_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, FieldPhraseList$WeightedPhraseInfo::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_FieldPhraseList$WeightedPhraseInfo_init_(t_FieldPhraseList$WeightedPhraseInfo *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::java::util::Collection a0((jobject) NULL);
                PyTypeObject **p0;
                FieldPhraseList$WeightedPhraseInfo object((jobject) NULL);

                if (!parseArgs(args, "K", ::java::util::Collection::initializeClass, &a0, &p0, ::java::util::t_Collection::parameters_))
                {
                  INT_CALL(object = FieldPhraseList$WeightedPhraseInfo(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 2:
              {
                ::java::util::LinkedList a0((jobject) NULL);
                PyTypeObject **p0;
                jfloat a1;
                FieldPhraseList$WeightedPhraseInfo object((jobject) NULL);

                if (!parseArgs(args, "KF", ::java::util::LinkedList::initializeClass, &a0, &p0, ::java::util::t_LinkedList::parameters_, &a1))
                {
                  INT_CALL(object = FieldPhraseList$WeightedPhraseInfo(a0, a1));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 3:
              {
                ::java::util::LinkedList a0((jobject) NULL);
                PyTypeObject **p0;
                jfloat a1;
                jint a2;
                FieldPhraseList$WeightedPhraseInfo object((jobject) NULL);

                if (!parseArgs(args, "KFI", ::java::util::LinkedList::initializeClass, &a0, &p0, ::java::util::t_LinkedList::parameters_, &a1, &a2))
                {
                  INT_CALL(object = FieldPhraseList$WeightedPhraseInfo(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_FieldPhraseList$WeightedPhraseInfo_compareTo(t_FieldPhraseList$WeightedPhraseInfo *self, PyObject *arg)
          {
            FieldPhraseList$WeightedPhraseInfo a0((jobject) NULL);
            jint result;

            if (!parseArg(arg, "k", FieldPhraseList$WeightedPhraseInfo::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.compareTo(a0));
              return PyInt_FromLong((long) result);
            }

            PyErr_SetArgsError((PyObject *) self, "compareTo", arg);
            return NULL;
          }

          static PyObject *t_FieldPhraseList$WeightedPhraseInfo_equals(t_FieldPhraseList$WeightedPhraseInfo *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            jboolean result;

            if (!parseArgs(args, "o", &a0))
            {
              OBJ_CALL(result = self->object.equals(a0));
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(FieldPhraseList$WeightedPhraseInfo), (PyObject *) self, "equals", args, 2);
          }

          static PyObject *t_FieldPhraseList$WeightedPhraseInfo_getBoost(t_FieldPhraseList$WeightedPhraseInfo *self)
          {
            jfloat result;
            OBJ_CALL(result = self->object.getBoost());
            return PyFloat_FromDouble((double) result);
          }

          static PyObject *t_FieldPhraseList$WeightedPhraseInfo_getEndOffset(t_FieldPhraseList$WeightedPhraseInfo *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getEndOffset());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_FieldPhraseList$WeightedPhraseInfo_getSeqnum(t_FieldPhraseList$WeightedPhraseInfo *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getSeqnum());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_FieldPhraseList$WeightedPhraseInfo_getStartOffset(t_FieldPhraseList$WeightedPhraseInfo *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getStartOffset());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_FieldPhraseList$WeightedPhraseInfo_getTermsInfos(t_FieldPhraseList$WeightedPhraseInfo *self)
          {
            ::java::util::List result((jobject) NULL);
            OBJ_CALL(result = self->object.getTermsInfos());
            return ::java::util::t_List::wrap_Object(result, &::org::apache::lucene::search::vectorhighlight::PY_TYPE(FieldTermStack$TermInfo));
          }

          static PyObject *t_FieldPhraseList$WeightedPhraseInfo_getTermsOffsets(t_FieldPhraseList$WeightedPhraseInfo *self)
          {
            ::java::util::List result((jobject) NULL);
            OBJ_CALL(result = self->object.getTermsOffsets());
            return ::java::util::t_List::wrap_Object(result, &::org::apache::lucene::search::vectorhighlight::PY_TYPE(FieldPhraseList$WeightedPhraseInfo$Toffs));
          }

          static PyObject *t_FieldPhraseList$WeightedPhraseInfo_getText(t_FieldPhraseList$WeightedPhraseInfo *self)
          {
            ::java::lang::String result((jobject) NULL);
            OBJ_CALL(result = self->object.getText());
            return j2p(result);
          }

          static PyObject *t_FieldPhraseList$WeightedPhraseInfo_hashCode(t_FieldPhraseList$WeightedPhraseInfo *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.hashCode());
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(FieldPhraseList$WeightedPhraseInfo), (PyObject *) self, "hashCode", args, 2);
          }

          static PyObject *t_FieldPhraseList$WeightedPhraseInfo_isOffsetOverlap(t_FieldPhraseList$WeightedPhraseInfo *self, PyObject *arg)
          {
            FieldPhraseList$WeightedPhraseInfo a0((jobject) NULL);
            jboolean result;

            if (!parseArg(arg, "k", FieldPhraseList$WeightedPhraseInfo::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.isOffsetOverlap(a0));
              Py_RETURN_BOOL(result);
            }

            PyErr_SetArgsError((PyObject *) self, "isOffsetOverlap", arg);
            return NULL;
          }

          static PyObject *t_FieldPhraseList$WeightedPhraseInfo_toString(t_FieldPhraseList$WeightedPhraseInfo *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(&PY_TYPE(FieldPhraseList$WeightedPhraseInfo), (PyObject *) self, "toString", args, 2);
          }

          static PyObject *t_FieldPhraseList$WeightedPhraseInfo_get__boost(t_FieldPhraseList$WeightedPhraseInfo *self, void *data)
          {
            jfloat value;
            OBJ_CALL(value = self->object.getBoost());
            return PyFloat_FromDouble((double) value);
          }

          static PyObject *t_FieldPhraseList$WeightedPhraseInfo_get__endOffset(t_FieldPhraseList$WeightedPhraseInfo *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getEndOffset());
            return PyInt_FromLong((long) value);
          }

          static PyObject *t_FieldPhraseList$WeightedPhraseInfo_get__seqnum(t_FieldPhraseList$WeightedPhraseInfo *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getSeqnum());
            return PyInt_FromLong((long) value);
          }

          static PyObject *t_FieldPhraseList$WeightedPhraseInfo_get__startOffset(t_FieldPhraseList$WeightedPhraseInfo *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getStartOffset());
            return PyInt_FromLong((long) value);
          }

          static PyObject *t_FieldPhraseList$WeightedPhraseInfo_get__termsInfos(t_FieldPhraseList$WeightedPhraseInfo *self, void *data)
          {
            ::java::util::List value((jobject) NULL);
            OBJ_CALL(value = self->object.getTermsInfos());
            return ::java::util::t_List::wrap_Object(value);
          }

          static PyObject *t_FieldPhraseList$WeightedPhraseInfo_get__termsOffsets(t_FieldPhraseList$WeightedPhraseInfo *self, void *data)
          {
            ::java::util::List value((jobject) NULL);
            OBJ_CALL(value = self->object.getTermsOffsets());
            return ::java::util::t_List::wrap_Object(value);
          }

          static PyObject *t_FieldPhraseList$WeightedPhraseInfo_get__text(t_FieldPhraseList$WeightedPhraseInfo *self, void *data)
          {
            ::java::lang::String value((jobject) NULL);
            OBJ_CALL(value = self->object.getText());
            return j2p(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/FieldCache$Doubles.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *FieldCache$Doubles::class$ = NULL;
        jmethodID *FieldCache$Doubles::mids$ = NULL;
        bool FieldCache$Doubles::live$ = false;
        FieldCache$Doubles *FieldCache$Doubles::EMPTY = NULL;

        jclass FieldCache$Doubles::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/FieldCache$Doubles");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_get_39c7bd2e] = env->getMethodID(cls, "get", "(I)D");

            class$ = (::java::lang::Class *) new JObject(cls);
            cls = (jclass) class$->this$;

            EMPTY = new FieldCache$Doubles(env->getStaticObjectField(cls, "EMPTY", "Lorg/apache/lucene/search/FieldCache$Doubles;"));
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        FieldCache$Doubles::FieldCache$Doubles() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        jdouble FieldCache$Doubles::get(jint a0) const
        {
          return env->callDoubleMethod(this$, mids$[mid_get_39c7bd2e], a0);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_FieldCache$Doubles_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FieldCache$Doubles_instance_(PyTypeObject *type, PyObject *arg);
        static int t_FieldCache$Doubles_init_(t_FieldCache$Doubles *self, PyObject *args, PyObject *kwds);
        static PyObject *t_FieldCache$Doubles_get(t_FieldCache$Doubles *self, PyObject *arg);

        static PyMethodDef t_FieldCache$Doubles__methods_[] = {
          DECLARE_METHOD(t_FieldCache$Doubles, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FieldCache$Doubles, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FieldCache$Doubles, get, METH_O),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(FieldCache$Doubles, t_FieldCache$Doubles, ::java::lang::Object, FieldCache$Doubles, t_FieldCache$Doubles_init_, 0, 0, 0, 0, 0);

        void t_FieldCache$Doubles::install(PyObject *module)
        {
          installType(&PY_TYPE(FieldCache$Doubles), module, "FieldCache$Doubles", 0);
        }

        void t_FieldCache$Doubles::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(FieldCache$Doubles).tp_dict, "class_", make_descriptor(FieldCache$Doubles::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(FieldCache$Doubles).tp_dict, "wrapfn_", make_descriptor(t_FieldCache$Doubles::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(FieldCache$Doubles).tp_dict, "boxfn_", make_descriptor(boxObject));
          env->getClass(FieldCache$Doubles::initializeClass);
          PyDict_SetItemString(PY_TYPE(FieldCache$Doubles).tp_dict, "EMPTY", make_descriptor(t_FieldCache$Doubles::wrap_Object(*FieldCache$Doubles::EMPTY)));
        }

        static PyObject *t_FieldCache$Doubles_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, FieldCache$Doubles::initializeClass, 1)))
            return NULL;
          return t_FieldCache$Doubles::wrap_Object(FieldCache$Doubles(((t_FieldCache$Doubles *) arg)->object.this$));
        }
        static PyObject *t_FieldCache$Doubles_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, FieldCache$Doubles::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_FieldCache$Doubles_init_(t_FieldCache$Doubles *self, PyObject *args, PyObject *kwds)
        {
          FieldCache$Doubles object((jobject) NULL);

          INT_CALL(object = FieldCache$Doubles());
          self->object = object;

          return 0;
        }

        static PyObject *t_FieldCache$Doubles_get(t_FieldCache$Doubles *self, PyObject *arg)
        {
          jint a0;
          jdouble result;

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(result = self->object.get(a0));
            return PyFloat_FromDouble((double) result);
          }

          PyErr_SetArgsError((PyObject *) self, "get", arg);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/FilterAtomicReader$FilterTerms.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/index/TermsEnum.h"
#include "java/util/Comparator.h"
#include "java/io/IOException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *FilterAtomicReader$FilterTerms::class$ = NULL;
        jmethodID *FilterAtomicReader$FilterTerms::mids$ = NULL;
        bool FilterAtomicReader$FilterTerms::live$ = false;

        jclass FilterAtomicReader$FilterTerms::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/FilterAtomicReader$FilterTerms");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_d0b7bb17] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/Terms;)V");
            mids$[mid_getComparator_5a7ff2fc] = env->getMethodID(cls, "getComparator", "()Ljava/util/Comparator;");
            mids$[mid_getDocCount_54c6a179] = env->getMethodID(cls, "getDocCount", "()I");
            mids$[mid_getSumDocFreq_54c6a17a] = env->getMethodID(cls, "getSumDocFreq", "()J");
            mids$[mid_getSumTotalTermFreq_54c6a17a] = env->getMethodID(cls, "getSumTotalTermFreq", "()J");
            mids$[mid_hasFreqs_54c6a16a] = env->getMethodID(cls, "hasFreqs", "()Z");
            mids$[mid_hasOffsets_54c6a16a] = env->getMethodID(cls, "hasOffsets", "()Z");
            mids$[mid_hasPayloads_54c6a16a] = env->getMethodID(cls, "hasPayloads", "()Z");
            mids$[mid_hasPositions_54c6a16a] = env->getMethodID(cls, "hasPositions", "()Z");
            mids$[mid_iterator_d737078b] = env->getMethodID(cls, "iterator", "(Lorg/apache/lucene/index/TermsEnum;)Lorg/apache/lucene/index/TermsEnum;");
            mids$[mid_size_54c6a17a] = env->getMethodID(cls, "size", "()J");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        FilterAtomicReader$FilterTerms::FilterAtomicReader$FilterTerms(const ::org::apache::lucene::index::Terms & a0) : ::org::apache::lucene::index::Terms(env->newObject(initializeClass, &mids$, mid_init$_d0b7bb17, a0.this$)) {}

        ::java::util::Comparator FilterAtomicReader$FilterTerms::getComparator() const
        {
          return ::java::util::Comparator(env->callObjectMethod(this$, mids$[mid_getComparator_5a7ff2fc]));
        }

        jint FilterAtomicReader$FilterTerms::getDocCount() const
        {
          return env->callIntMethod(this$, mids$[mid_getDocCount_54c6a179]);
        }

        jlong FilterAtomicReader$FilterTerms::getSumDocFreq() const
        {
          return env->callLongMethod(this$, mids$[mid_getSumDocFreq_54c6a17a]);
        }

        jlong FilterAtomicReader$FilterTerms::getSumTotalTermFreq() const
        {
          return env->callLongMethod(this$, mids$[mid_getSumTotalTermFreq_54c6a17a]);
        }

        jboolean FilterAtomicReader$FilterTerms::hasFreqs() const
        {
          return env->callBooleanMethod(this$, mids$[mid_hasFreqs_54c6a16a]);
        }

        jboolean FilterAtomicReader$FilterTerms::hasOffsets() const
        {
          return env->callBooleanMethod(this$, mids$[mid_hasOffsets_54c6a16a]);
        }

        jboolean FilterAtomicReader$FilterTerms::hasPayloads() const
        {
          return env->callBooleanMethod(this$, mids$[mid_hasPayloads_54c6a16a]);
        }

        jboolean FilterAtomicReader$FilterTerms::hasPositions() const
        {
          return env->callBooleanMethod(this$, mids$[mid_hasPositions_54c6a16a]);
        }

        ::org::apache::lucene::index::TermsEnum FilterAtomicReader$FilterTerms::iterator(const ::org::apache::lucene::index::TermsEnum & a0) const
        {
          return ::org::apache::lucene::index::TermsEnum(env->callObjectMethod(this$, mids$[mid_iterator_d737078b], a0.this$));
        }

        jlong FilterAtomicReader$FilterTerms::size() const
        {
          return env->callLongMethod(this$, mids$[mid_size_54c6a17a]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_FilterAtomicReader$FilterTerms_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FilterAtomicReader$FilterTerms_instance_(PyTypeObject *type, PyObject *arg);
        static int t_FilterAtomicReader$FilterTerms_init_(t_FilterAtomicReader$FilterTerms *self, PyObject *args, PyObject *kwds);
        static PyObject *t_FilterAtomicReader$FilterTerms_getComparator(t_FilterAtomicReader$FilterTerms *self, PyObject *args);
        static PyObject *t_FilterAtomicReader$FilterTerms_getDocCount(t_FilterAtomicReader$FilterTerms *self, PyObject *args);
        static PyObject *t_FilterAtomicReader$FilterTerms_getSumDocFreq(t_FilterAtomicReader$FilterTerms *self, PyObject *args);
        static PyObject *t_FilterAtomicReader$FilterTerms_getSumTotalTermFreq(t_FilterAtomicReader$FilterTerms *self, PyObject *args);
        static PyObject *t_FilterAtomicReader$FilterTerms_hasFreqs(t_FilterAtomicReader$FilterTerms *self, PyObject *args);
        static PyObject *t_FilterAtomicReader$FilterTerms_hasOffsets(t_FilterAtomicReader$FilterTerms *self, PyObject *args);
        static PyObject *t_FilterAtomicReader$FilterTerms_hasPayloads(t_FilterAtomicReader$FilterTerms *self, PyObject *args);
        static PyObject *t_FilterAtomicReader$FilterTerms_hasPositions(t_FilterAtomicReader$FilterTerms *self, PyObject *args);
        static PyObject *t_FilterAtomicReader$FilterTerms_iterator(t_FilterAtomicReader$FilterTerms *self, PyObject *args);
        static PyObject *t_FilterAtomicReader$FilterTerms_size(t_FilterAtomicReader$FilterTerms *self, PyObject *args);
        static PyObject *t_FilterAtomicReader$FilterTerms_get__comparator(t_FilterAtomicReader$FilterTerms *self, void *data);
        static PyObject *t_FilterAtomicReader$FilterTerms_get__docCount(t_FilterAtomicReader$FilterTerms *self, void *data);
        static PyObject *t_FilterAtomicReader$FilterTerms_get__sumDocFreq(t_FilterAtomicReader$FilterTerms *self, void *data);
        static PyObject *t_FilterAtomicReader$FilterTerms_get__sumTotalTermFreq(t_FilterAtomicReader$FilterTerms *self, void *data);
        static PyGetSetDef t_FilterAtomicReader$FilterTerms__fields_[] = {
          DECLARE_GET_FIELD(t_FilterAtomicReader$FilterTerms, comparator),
          DECLARE_GET_FIELD(t_FilterAtomicReader$FilterTerms, docCount),
          DECLARE_GET_FIELD(t_FilterAtomicReader$FilterTerms, sumDocFreq),
          DECLARE_GET_FIELD(t_FilterAtomicReader$FilterTerms, sumTotalTermFreq),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_FilterAtomicReader$FilterTerms__methods_[] = {
          DECLARE_METHOD(t_FilterAtomicReader$FilterTerms, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FilterAtomicReader$FilterTerms, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FilterAtomicReader$FilterTerms, getComparator, METH_VARARGS),
          DECLARE_METHOD(t_FilterAtomicReader$FilterTerms, getDocCount, METH_VARARGS),
          DECLARE_METHOD(t_FilterAtomicReader$FilterTerms, getSumDocFreq, METH_VARARGS),
          DECLARE_METHOD(t_FilterAtomicReader$FilterTerms, getSumTotalTermFreq, METH_VARARGS),
          DECLARE_METHOD(t_FilterAtomicReader$FilterTerms, hasFreqs, METH_VARARGS),
          DECLARE_METHOD(t_FilterAtomicReader$FilterTerms, hasOffsets, METH_VARARGS),
          DECLARE_METHOD(t_FilterAtomicReader$FilterTerms, hasPayloads, METH_VARARGS),
          DECLARE_METHOD(t_FilterAtomicReader$FilterTerms, hasPositions, METH_VARARGS),
          DECLARE_METHOD(t_FilterAtomicReader$FilterTerms, iterator, METH_VARARGS),
          DECLARE_METHOD(t_FilterAtomicReader$FilterTerms, size, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(FilterAtomicReader$FilterTerms, t_FilterAtomicReader$FilterTerms, ::org::apache::lucene::index::Terms, FilterAtomicReader$FilterTerms, t_FilterAtomicReader$FilterTerms_init_, 0, 0, t_FilterAtomicReader$FilterTerms__fields_, 0, 0);

        void t_FilterAtomicReader$FilterTerms::install(PyObject *module)
        {
          installType(&PY_TYPE(FilterAtomicReader$FilterTerms), module, "FilterAtomicReader$FilterTerms", 0);
        }

        void t_FilterAtomicReader$FilterTerms::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(FilterAtomicReader$FilterTerms).tp_dict, "class_", make_descriptor(FilterAtomicReader$FilterTerms::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(FilterAtomicReader$FilterTerms).tp_dict, "wrapfn_", make_descriptor(t_FilterAtomicReader$FilterTerms::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(FilterAtomicReader$FilterTerms).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_FilterAtomicReader$FilterTerms_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, FilterAtomicReader$FilterTerms::initializeClass, 1)))
            return NULL;
          return t_FilterAtomicReader$FilterTerms::wrap_Object(FilterAtomicReader$FilterTerms(((t_FilterAtomicReader$FilterTerms *) arg)->object.this$));
        }
        static PyObject *t_FilterAtomicReader$FilterTerms_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, FilterAtomicReader$FilterTerms::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_FilterAtomicReader$FilterTerms_init_(t_FilterAtomicReader$FilterTerms *self, PyObject *args, PyObject *kwds)
        {
          ::org::apache::lucene::index::Terms a0((jobject) NULL);
          FilterAtomicReader$FilterTerms object((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::index::Terms::initializeClass, &a0))
          {
            INT_CALL(object = FilterAtomicReader$FilterTerms(a0));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_FilterAtomicReader$FilterTerms_getComparator(t_FilterAtomicReader$FilterTerms *self, PyObject *args)
        {
          ::java::util::Comparator result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.getComparator());
            return ::java::util::t_Comparator::wrap_Object(result, &::org::apache::lucene::util::PY_TYPE(BytesRef));
          }

          return callSuper(&PY_TYPE(FilterAtomicReader$FilterTerms), (PyObject *) self, "getComparator", args, 2);
        }

        static PyObject *t_FilterAtomicReader$FilterTerms_getDocCount(t_FilterAtomicReader$FilterTerms *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.getDocCount());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(FilterAtomicReader$FilterTerms), (PyObject *) self, "getDocCount", args, 2);
        }

        static PyObject *t_FilterAtomicReader$FilterTerms_getSumDocFreq(t_FilterAtomicReader$FilterTerms *self, PyObject *args)
        {
          jlong result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.getSumDocFreq());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          return callSuper(&PY_TYPE(FilterAtomicReader$FilterTerms), (PyObject *) self, "getSumDocFreq", args, 2);
        }

        static PyObject *t_FilterAtomicReader$FilterTerms_getSumTotalTermFreq(t_FilterAtomicReader$FilterTerms *self, PyObject *args)
        {
          jlong result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.getSumTotalTermFreq());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          return callSuper(&PY_TYPE(FilterAtomicReader$FilterTerms), (PyObject *) self, "getSumTotalTermFreq", args, 2);
        }

        static PyObject *t_FilterAtomicReader$FilterTerms_hasFreqs(t_FilterAtomicReader$FilterTerms *self, PyObject *args)
        {
          jboolean result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hasFreqs());
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(FilterAtomicReader$FilterTerms), (PyObject *) self, "hasFreqs", args, 2);
        }

        static PyObject *t_FilterAtomicReader$FilterTerms_hasOffsets(t_FilterAtomicReader$FilterTerms *self, PyObject *args)
        {
          jboolean result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hasOffsets());
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(FilterAtomicReader$FilterTerms), (PyObject *) self, "hasOffsets", args, 2);
        }

        static PyObject *t_FilterAtomicReader$FilterTerms_hasPayloads(t_FilterAtomicReader$FilterTerms *self, PyObject *args)
        {
          jboolean result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hasPayloads());
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(FilterAtomicReader$FilterTerms), (PyObject *) self, "hasPayloads", args, 2);
        }

        static PyObject *t_FilterAtomicReader$FilterTerms_hasPositions(t_FilterAtomicReader$FilterTerms *self, PyObject *args)
        {
          jboolean result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hasPositions());
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(FilterAtomicReader$FilterTerms), (PyObject *) self, "hasPositions", args, 2);
        }

        static PyObject *t_FilterAtomicReader$FilterTerms_iterator(t_FilterAtomicReader$FilterTerms *self, PyObject *args)
        {
          ::org::apache::lucene::index::TermsEnum a0((jobject) NULL);
          ::org::apache::lucene::index::TermsEnum result((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::index::TermsEnum::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.iterator(a0));
            return ::org::apache::lucene::index::t_TermsEnum::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(FilterAtomicReader$FilterTerms), (PyObject *) self, "iterator", args, 2);
        }

        static PyObject *t_FilterAtomicReader$FilterTerms_size(t_FilterAtomicReader$FilterTerms *self, PyObject *args)
        {
          jlong result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.size());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          return callSuper(&PY_TYPE(FilterAtomicReader$FilterTerms), (PyObject *) self, "size", args, 2);
        }

        static PyObject *t_FilterAtomicReader$FilterTerms_get__comparator(t_FilterAtomicReader$FilterTerms *self, void *data)
        {
          ::java::util::Comparator value((jobject) NULL);
          OBJ_CALL(value = self->object.getComparator());
          return ::java::util::t_Comparator::wrap_Object(value);
        }

        static PyObject *t_FilterAtomicReader$FilterTerms_get__docCount(t_FilterAtomicReader$FilterTerms *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object.getDocCount());
          return PyInt_FromLong((long) value);
        }

        static PyObject *t_FilterAtomicReader$FilterTerms_get__sumDocFreq(t_FilterAtomicReader$FilterTerms *self, void *data)
        {
          jlong value;
          OBJ_CALL(value = self->object.getSumDocFreq());
          return PyLong_FromLongLong((PY_LONG_LONG) value);
        }

        static PyObject *t_FilterAtomicReader$FilterTerms_get__sumTotalTermFreq(t_FilterAtomicReader$FilterTerms *self, void *data)
        {
          jlong value;
          OBJ_CALL(value = self->object.getSumTotalTermFreq());
          return PyLong_FromLongLong((PY_LONG_LONG) value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/highlight/Encoder.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace highlight {

          ::java::lang::Class *Encoder::class$ = NULL;
          jmethodID *Encoder::mids$ = NULL;
          bool Encoder::live$ = false;

          jclass Encoder::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/highlight/Encoder");

              mids$ = new jmethodID[max_mid];
              mids$[mid_encodeText_97a5258f] = env->getMethodID(cls, "encodeText", "(Ljava/lang/String;)Ljava/lang/String;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ::java::lang::String Encoder::encodeText(const ::java::lang::String & a0) const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_encodeText_97a5258f], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace highlight {
          static PyObject *t_Encoder_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Encoder_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Encoder_encodeText(t_Encoder *self, PyObject *arg);

          static PyMethodDef t_Encoder__methods_[] = {
            DECLARE_METHOD(t_Encoder, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Encoder, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Encoder, encodeText, METH_O),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(Encoder, t_Encoder, ::java::lang::Object, Encoder, abstract_init, 0, 0, 0, 0, 0);

          void t_Encoder::install(PyObject *module)
          {
            installType(&PY_TYPE(Encoder), module, "Encoder", 0);
          }

          void t_Encoder::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(Encoder).tp_dict, "class_", make_descriptor(Encoder::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(Encoder).tp_dict, "wrapfn_", make_descriptor(t_Encoder::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(Encoder).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_Encoder_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, Encoder::initializeClass, 1)))
              return NULL;
            return t_Encoder::wrap_Object(Encoder(((t_Encoder *) arg)->object.this$));
          }
          static PyObject *t_Encoder_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, Encoder::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_Encoder_encodeText(t_Encoder *self, PyObject *arg)
          {
            ::java::lang::String a0((jobject) NULL);
            ::java::lang::String result((jobject) NULL);

            if (!parseArg(arg, "s", &a0))
            {
              OBJ_CALL(result = self->object.encodeText(a0));
              return j2p(result);
            }

            PyErr_SetArgsError((PyObject *) self, "encodeText", arg);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/suggest/fst/FSTCompletionLookup.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "java/lang/Class.h"
#include "java/lang/Object.h"
#include "org/apache/lucene/search/suggest/Lookup$LookupResult.h"
#include "java/io/IOException.h"
#include "java/lang/CharSequence.h"
#include "org/apache/lucene/store/DataInput.h"
#include "org/apache/lucene/search/suggest/fst/FSTCompletion.h"
#include "java/util/Set.h"
#include "org/apache/lucene/store/DataOutput.h"
#include "org/apache/lucene/search/suggest/InputIterator.h"
#include "java/util/List.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace suggest {
          namespace fst {

            ::java::lang::Class *FSTCompletionLookup::class$ = NULL;
            jmethodID *FSTCompletionLookup::mids$ = NULL;
            bool FSTCompletionLookup::live$ = false;

            jclass FSTCompletionLookup::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/search/suggest/fst/FSTCompletionLookup");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
                mids$[mid_init$_7fee6a80] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/suggest/fst/FSTCompletion;Z)V");
                mids$[mid_init$_b3a85a05] = env->getMethodID(cls, "<init>", "(IZ)V");
                mids$[mid_build_1754a234] = env->getMethodID(cls, "build", "(Lorg/apache/lucene/search/suggest/InputIterator;)V");
                mids$[mid_get_a739ccff] = env->getMethodID(cls, "get", "(Ljava/lang/CharSequence;)Ljava/lang/Object;");
                mids$[mid_getCount_54c6a17a] = env->getMethodID(cls, "getCount", "()J");
                mids$[mid_load_f5d6a55d] = env->getMethodID(cls, "load", "(Lorg/apache/lucene/store/DataInput;)Z");
                mids$[mid_lookup_dd3e9f51] = env->getMethodID(cls, "lookup", "(Ljava/lang/CharSequence;Ljava/util/Set;ZI)Ljava/util/List;");
                mids$[mid_ramBytesUsed_54c6a17a] = env->getMethodID(cls, "ramBytesUsed", "()J");
                mids$[mid_store_27875f5b] = env->getMethodID(cls, "store", "(Lorg/apache/lucene/store/DataOutput;)Z");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            FSTCompletionLookup::FSTCompletionLookup() : ::org::apache::lucene::search::suggest::Lookup(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

            FSTCompletionLookup::FSTCompletionLookup(const ::org::apache::lucene::search::suggest::fst::FSTCompletion & a0, jboolean a1) : ::org::apache::lucene::search::suggest::Lookup(env->newObject(initializeClass, &mids$, mid_init$_7fee6a80, a0.this$, a1)) {}

            FSTCompletionLookup::FSTCompletionLookup(jint a0, jboolean a1) : ::org::apache::lucene::search::suggest::Lookup(env->newObject(initializeClass, &mids$, mid_init$_b3a85a05, a0, a1)) {}

            void FSTCompletionLookup::build(const ::org::apache::lucene::search::suggest::InputIterator & a0) const
            {
              env->callVoidMethod(this$, mids$[mid_build_1754a234], a0.this$);
            }

            ::java::lang::Object FSTCompletionLookup::get(const ::java::lang::CharSequence & a0) const
            {
              return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_get_a739ccff], a0.this$));
            }

            jlong FSTCompletionLookup::getCount() const
            {
              return env->callLongMethod(this$, mids$[mid_getCount_54c6a17a]);
            }

            jboolean FSTCompletionLookup::load(const ::org::apache::lucene::store::DataInput & a0) const
            {
              return env->callBooleanMethod(this$, mids$[mid_load_f5d6a55d], a0.this$);
            }

            ::java::util::List FSTCompletionLookup::lookup(const ::java::lang::CharSequence & a0, const ::java::util::Set & a1, jboolean a2, jint a3) const
            {
              return ::java::util::List(env->callObjectMethod(this$, mids$[mid_lookup_dd3e9f51], a0.this$, a1.this$, a2, a3));
            }

            jlong FSTCompletionLookup::ramBytesUsed() const
            {
              return env->callLongMethod(this$, mids$[mid_ramBytesUsed_54c6a17a]);
            }

            jboolean FSTCompletionLookup::store(const ::org::apache::lucene::store::DataOutput & a0) const
            {
              return env->callBooleanMethod(this$, mids$[mid_store_27875f5b], a0.this$);
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace suggest {
          namespace fst {
            static PyObject *t_FSTCompletionLookup_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_FSTCompletionLookup_instance_(PyTypeObject *type, PyObject *arg);
            static int t_FSTCompletionLookup_init_(t_FSTCompletionLookup *self, PyObject *args, PyObject *kwds);
            static PyObject *t_FSTCompletionLookup_build(t_FSTCompletionLookup *self, PyObject *args);
            static PyObject *t_FSTCompletionLookup_get(t_FSTCompletionLookup *self, PyObject *arg);
            static PyObject *t_FSTCompletionLookup_getCount(t_FSTCompletionLookup *self, PyObject *args);
            static PyObject *t_FSTCompletionLookup_load(t_FSTCompletionLookup *self, PyObject *args);
            static PyObject *t_FSTCompletionLookup_lookup(t_FSTCompletionLookup *self, PyObject *args);
            static PyObject *t_FSTCompletionLookup_ramBytesUsed(t_FSTCompletionLookup *self, PyObject *args);
            static PyObject *t_FSTCompletionLookup_store(t_FSTCompletionLookup *self, PyObject *args);
            static PyObject *t_FSTCompletionLookup_get__count(t_FSTCompletionLookup *self, void *data);
            static PyGetSetDef t_FSTCompletionLookup__fields_[] = {
              DECLARE_GET_FIELD(t_FSTCompletionLookup, count),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_FSTCompletionLookup__methods_[] = {
              DECLARE_METHOD(t_FSTCompletionLookup, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_FSTCompletionLookup, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_FSTCompletionLookup, build, METH_VARARGS),
              DECLARE_METHOD(t_FSTCompletionLookup, get, METH_O),
              DECLARE_METHOD(t_FSTCompletionLookup, getCount, METH_VARARGS),
              DECLARE_METHOD(t_FSTCompletionLookup, load, METH_VARARGS),
              DECLARE_METHOD(t_FSTCompletionLookup, lookup, METH_VARARGS),
              DECLARE_METHOD(t_FSTCompletionLookup, ramBytesUsed, METH_VARARGS),
              DECLARE_METHOD(t_FSTCompletionLookup, store, METH_VARARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(FSTCompletionLookup, t_FSTCompletionLookup, ::org::apache::lucene::search::suggest::Lookup, FSTCompletionLookup, t_FSTCompletionLookup_init_, 0, 0, t_FSTCompletionLookup__fields_, 0, 0);

            void t_FSTCompletionLookup::install(PyObject *module)
            {
              installType(&PY_TYPE(FSTCompletionLookup), module, "FSTCompletionLookup", 0);
            }

            void t_FSTCompletionLookup::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(FSTCompletionLookup).tp_dict, "class_", make_descriptor(FSTCompletionLookup::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(FSTCompletionLookup).tp_dict, "wrapfn_", make_descriptor(t_FSTCompletionLookup::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(FSTCompletionLookup).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_FSTCompletionLookup_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, FSTCompletionLookup::initializeClass, 1)))
                return NULL;
              return t_FSTCompletionLookup::wrap_Object(FSTCompletionLookup(((t_FSTCompletionLookup *) arg)->object.this$));
            }
            static PyObject *t_FSTCompletionLookup_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, FSTCompletionLookup::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_FSTCompletionLookup_init_(t_FSTCompletionLookup *self, PyObject *args, PyObject *kwds)
            {
              switch (PyTuple_GET_SIZE(args)) {
               case 0:
                {
                  FSTCompletionLookup object((jobject) NULL);

                  INT_CALL(object = FSTCompletionLookup());
                  self->object = object;
                  break;
                }
                goto err;
               case 2:
                {
                  ::org::apache::lucene::search::suggest::fst::FSTCompletion a0((jobject) NULL);
                  jboolean a1;
                  FSTCompletionLookup object((jobject) NULL);

                  if (!parseArgs(args, "kZ", ::org::apache::lucene::search::suggest::fst::FSTCompletion::initializeClass, &a0, &a1))
                  {
                    INT_CALL(object = FSTCompletionLookup(a0, a1));
                    self->object = object;
                    break;
                  }
                }
                {
                  jint a0;
                  jboolean a1;
                  FSTCompletionLookup object((jobject) NULL);

                  if (!parseArgs(args, "IZ", &a0, &a1))
                  {
                    INT_CALL(object = FSTCompletionLookup(a0, a1));
                    self->object = object;
                    break;
                  }
                }
               default:
               err:
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_FSTCompletionLookup_build(t_FSTCompletionLookup *self, PyObject *args)
            {
              ::org::apache::lucene::search::suggest::InputIterator a0((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::search::suggest::InputIterator::initializeClass, &a0))
              {
                OBJ_CALL(self->object.build(a0));
                Py_RETURN_NONE;
              }

              return callSuper(&PY_TYPE(FSTCompletionLookup), (PyObject *) self, "build", args, 2);
            }

            static PyObject *t_FSTCompletionLookup_get(t_FSTCompletionLookup *self, PyObject *arg)
            {
              ::java::lang::CharSequence a0((jobject) NULL);
              ::java::lang::Object result((jobject) NULL);

              if (!parseArg(arg, "O", &::java::lang::PY_TYPE(CharSequence), &a0))
              {
                OBJ_CALL(result = self->object.get(a0));
                return ::java::lang::t_Object::wrap_Object(result);
              }

              PyErr_SetArgsError((PyObject *) self, "get", arg);
              return NULL;
            }

            static PyObject *t_FSTCompletionLookup_getCount(t_FSTCompletionLookup *self, PyObject *args)
            {
              jlong result;

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.getCount());
                return PyLong_FromLongLong((PY_LONG_LONG) result);
              }

              return callSuper(&PY_TYPE(FSTCompletionLookup), (PyObject *) self, "getCount", args, 2);
            }

            static PyObject *t_FSTCompletionLookup_load(t_FSTCompletionLookup *self, PyObject *args)
            {
              ::org::apache::lucene::store::DataInput a0((jobject) NULL);
              jboolean result;

              if (!parseArgs(args, "k", ::org::apache::lucene::store::DataInput::initializeClass, &a0))
              {
                OBJ_CALL(result = self->object.load(a0));
                Py_RETURN_BOOL(result);
              }

              return callSuper(&PY_TYPE(FSTCompletionLookup), (PyObject *) self, "load", args, 2);
            }

            static PyObject *t_FSTCompletionLookup_lookup(t_FSTCompletionLookup *self, PyObject *args)
            {
              ::java::lang::CharSequence a0((jobject) NULL);
              ::java::util::Set a1((jobject) NULL);
              PyTypeObject **p1;
              jboolean a2;
              jint a3;
              ::java::util::List result((jobject) NULL);

              if (!parseArgs(args, "OKZI", &::java::lang::PY_TYPE(CharSequence), ::java::util::Set::initializeClass, &a0, &a1, &p1, ::java::util::t_Set::parameters_, &a2, &a3))
              {
                OBJ_CALL(result = self->object.lookup(a0, a1, a2, a3));
                return ::java::util::t_List::wrap_Object(result, &::org::apache::lucene::search::suggest::PY_TYPE(Lookup$LookupResult));
              }

              return callSuper(&PY_TYPE(FSTCompletionLookup), (PyObject *) self, "lookup", args, 2);
            }

            static PyObject *t_FSTCompletionLookup_ramBytesUsed(t_FSTCompletionLookup *self, PyObject *args)
            {
              jlong result;

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.ramBytesUsed());
                return PyLong_FromLongLong((PY_LONG_LONG) result);
              }

              return callSuper(&PY_TYPE(FSTCompletionLookup), (PyObject *) self, "ramBytesUsed", args, 2);
            }

            static PyObject *t_FSTCompletionLookup_store(t_FSTCompletionLookup *self, PyObject *args)
            {
              ::org::apache::lucene::store::DataOutput a0((jobject) NULL);
              jboolean result;

              if (!parseArgs(args, "k", ::org::apache::lucene::store::DataOutput::initializeClass, &a0))
              {
                OBJ_CALL(result = self->object.store(a0));
                Py_RETURN_BOOL(result);
              }

              return callSuper(&PY_TYPE(FSTCompletionLookup), (PyObject *) self, "store", args, 2);
            }

            static PyObject *t_FSTCompletionLookup_get__count(t_FSTCompletionLookup *self, void *data)
            {
              jlong value;
              OBJ_CALL(value = self->object.getCount());
              return PyLong_FromLongLong((PY_LONG_LONG) value);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/standard/nodes/NumericQueryNode.h"
#include "java/lang/Number.h"
#include "java/text/NumberFormat.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/FieldValuePairQueryNode.h"
#include "org/apache/lucene/queryparser/flexible/core/parser/EscapeQuerySyntax.h"
#include "java/lang/CharSequence.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace nodes {

              ::java::lang::Class *NumericQueryNode::class$ = NULL;
              jmethodID *NumericQueryNode::mids$ = NULL;
              bool NumericQueryNode::live$ = false;

              jclass NumericQueryNode::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/standard/nodes/NumericQueryNode");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_42c517e2] = env->getMethodID(cls, "<init>", "(Ljava/lang/CharSequence;Ljava/lang/Number;Ljava/text/NumberFormat;)V");
                  mids$[mid_getField_e0adba2f] = env->getMethodID(cls, "getField", "()Ljava/lang/CharSequence;");
                  mids$[mid_getNumberFormat_6b701965] = env->getMethodID(cls, "getNumberFormat", "()Ljava/text/NumberFormat;");
                  mids$[mid_getValue_ee47e3e1] = env->getMethodID(cls, "getValue", "()Ljava/lang/Number;");
                  mids$[mid_setField_a8afc64a] = env->getMethodID(cls, "setField", "(Ljava/lang/CharSequence;)V");
                  mids$[mid_setNumberFormat_d2d1ba24] = env->getMethodID(cls, "setNumberFormat", "(Ljava/text/NumberFormat;)V");
                  mids$[mid_setValue_948ebebc] = env->getMethodID(cls, "setValue", "(Ljava/lang/Number;)V");
                  mids$[mid_toQueryString_99b8dfe1] = env->getMethodID(cls, "toQueryString", "(Lorg/apache/lucene/queryparser/flexible/core/parser/EscapeQuerySyntax;)Ljava/lang/CharSequence;");
                  mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");
                  mids$[mid_getTermEscaped_99b8dfe1] = env->getMethodID(cls, "getTermEscaped", "(Lorg/apache/lucene/queryparser/flexible/core/parser/EscapeQuerySyntax;)Ljava/lang/CharSequence;");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              NumericQueryNode::NumericQueryNode(const ::java::lang::CharSequence & a0, const ::java::lang::Number & a1, const ::java::text::NumberFormat & a2) : ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNodeImpl(env->newObject(initializeClass, &mids$, mid_init$_42c517e2, a0.this$, a1.this$, a2.this$)) {}

              ::java::lang::CharSequence NumericQueryNode::getField() const
              {
                return ::java::lang::CharSequence(env->callObjectMethod(this$, mids$[mid_getField_e0adba2f]));
              }

              ::java::text::NumberFormat NumericQueryNode::getNumberFormat() const
              {
                return ::java::text::NumberFormat(env->callObjectMethod(this$, mids$[mid_getNumberFormat_6b701965]));
              }

              ::java::lang::Number NumericQueryNode::getValue() const
              {
                return ::java::lang::Number(env->callObjectMethod(this$, mids$[mid_getValue_ee47e3e1]));
              }

              void NumericQueryNode::setField(const ::java::lang::CharSequence & a0) const
              {
                env->callVoidMethod(this$, mids$[mid_setField_a8afc64a], a0.this$);
              }

              void NumericQueryNode::setNumberFormat(const ::java::text::NumberFormat & a0) const
              {
                env->callVoidMethod(this$, mids$[mid_setNumberFormat_d2d1ba24], a0.this$);
              }

              void NumericQueryNode::setValue(const ::java::lang::Number & a0) const
              {
                env->callVoidMethod(this$, mids$[mid_setValue_948ebebc], a0.this$);
              }

              ::java::lang::CharSequence NumericQueryNode::toQueryString(const ::org::apache::lucene::queryparser::flexible::core::parser::EscapeQuerySyntax & a0) const
              {
                return ::java::lang::CharSequence(env->callObjectMethod(this$, mids$[mid_toQueryString_99b8dfe1], a0.this$));
              }

              ::java::lang::String NumericQueryNode::toString() const
              {
                return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace nodes {
              static PyObject *t_NumericQueryNode_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_NumericQueryNode_instance_(PyTypeObject *type, PyObject *arg);
              static int t_NumericQueryNode_init_(t_NumericQueryNode *self, PyObject *args, PyObject *kwds);
              static PyObject *t_NumericQueryNode_getField(t_NumericQueryNode *self);
              static PyObject *t_NumericQueryNode_getNumberFormat(t_NumericQueryNode *self);
              static PyObject *t_NumericQueryNode_getValue(t_NumericQueryNode *self);
              static PyObject *t_NumericQueryNode_setField(t_NumericQueryNode *self, PyObject *arg);
              static PyObject *t_NumericQueryNode_setNumberFormat(t_NumericQueryNode *self, PyObject *arg);
              static PyObject *t_NumericQueryNode_setValue(t_NumericQueryNode *self, PyObject *arg);
              static PyObject *t_NumericQueryNode_toQueryString(t_NumericQueryNode *self, PyObject *args);
              static PyObject *t_NumericQueryNode_toString(t_NumericQueryNode *self, PyObject *args);
              static PyObject *t_NumericQueryNode_get__field(t_NumericQueryNode *self, void *data);
              static int t_NumericQueryNode_set__field(t_NumericQueryNode *self, PyObject *arg, void *data);
              static PyObject *t_NumericQueryNode_get__numberFormat(t_NumericQueryNode *self, void *data);
              static int t_NumericQueryNode_set__numberFormat(t_NumericQueryNode *self, PyObject *arg, void *data);
              static PyObject *t_NumericQueryNode_get__value(t_NumericQueryNode *self, void *data);
              static int t_NumericQueryNode_set__value(t_NumericQueryNode *self, PyObject *arg, void *data);
              static PyGetSetDef t_NumericQueryNode__fields_[] = {
                DECLARE_GETSET_FIELD(t_NumericQueryNode, field),
                DECLARE_GETSET_FIELD(t_NumericQueryNode, numberFormat),
                DECLARE_GETSET_FIELD(t_NumericQueryNode, value),
                { NULL, NULL, NULL, NULL, NULL }
              };

              static PyMethodDef t_NumericQueryNode__methods_[] = {
                DECLARE_METHOD(t_NumericQueryNode, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_NumericQueryNode, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_NumericQueryNode, getField, METH_NOARGS),
                DECLARE_METHOD(t_NumericQueryNode, getNumberFormat, METH_NOARGS),
                DECLARE_METHOD(t_NumericQueryNode, getValue, METH_NOARGS),
                DECLARE_METHOD(t_NumericQueryNode, setField, METH_O),
                DECLARE_METHOD(t_NumericQueryNode, setNumberFormat, METH_O),
                DECLARE_METHOD(t_NumericQueryNode, setValue, METH_O),
                DECLARE_METHOD(t_NumericQueryNode, toQueryString, METH_VARARGS),
                DECLARE_METHOD(t_NumericQueryNode, toString, METH_VARARGS),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(NumericQueryNode, t_NumericQueryNode, ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNodeImpl, NumericQueryNode, t_NumericQueryNode_init_, 0, 0, t_NumericQueryNode__fields_, 0, 0);

              void t_NumericQueryNode::install(PyObject *module)
              {
                installType(&PY_TYPE(NumericQueryNode), module, "NumericQueryNode", 0);
              }

              void t_NumericQueryNode::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(NumericQueryNode).tp_dict, "class_", make_descriptor(NumericQueryNode::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(NumericQueryNode).tp_dict, "wrapfn_", make_descriptor(t_NumericQueryNode::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(NumericQueryNode).tp_dict, "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_NumericQueryNode_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, NumericQueryNode::initializeClass, 1)))
                  return NULL;
                return t_NumericQueryNode::wrap_Object(NumericQueryNode(((t_NumericQueryNode *) arg)->object.this$));
              }
              static PyObject *t_NumericQueryNode_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, NumericQueryNode::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_NumericQueryNode_init_(t_NumericQueryNode *self, PyObject *args, PyObject *kwds)
              {
                ::java::lang::CharSequence a0((jobject) NULL);
                ::java::lang::Number a1((jobject) NULL);
                ::java::text::NumberFormat a2((jobject) NULL);
                NumericQueryNode object((jobject) NULL);

                if (!parseArgs(args, "OOk", &::java::lang::PY_TYPE(CharSequence), &::java::lang::PY_TYPE(Number), ::java::text::NumberFormat::initializeClass, &a0, &a1, &a2))
                {
                  INT_CALL(object = NumericQueryNode(a0, a1, a2));
                  self->object = object;
                }
                else
                {
                  PyErr_SetArgsError((PyObject *) self, "__init__", args);
                  return -1;
                }

                return 0;
              }

              static PyObject *t_NumericQueryNode_getField(t_NumericQueryNode *self)
              {
                ::java::lang::CharSequence result((jobject) NULL);
                OBJ_CALL(result = self->object.getField());
                return ::java::lang::t_CharSequence::wrap_Object(result);
              }

              static PyObject *t_NumericQueryNode_getNumberFormat(t_NumericQueryNode *self)
              {
                ::java::text::NumberFormat result((jobject) NULL);
                OBJ_CALL(result = self->object.getNumberFormat());
                return ::java::text::t_NumberFormat::wrap_Object(result);
              }

              static PyObject *t_NumericQueryNode_getValue(t_NumericQueryNode *self)
              {
                ::java::lang::Number result((jobject) NULL);
                OBJ_CALL(result = self->object.getValue());
                return ::java::lang::t_Number::wrap_Object(result);
              }

              static PyObject *t_NumericQueryNode_setField(t_NumericQueryNode *self, PyObject *arg)
              {
                ::java::lang::CharSequence a0((jobject) NULL);

                if (!parseArg(arg, "O", &::java::lang::PY_TYPE(CharSequence), &a0))
                {
                  OBJ_CALL(self->object.setField(a0));
                  Py_RETURN_NONE;
                }

                PyErr_SetArgsError((PyObject *) self, "setField", arg);
                return NULL;
              }

              static PyObject *t_NumericQueryNode_setNumberFormat(t_NumericQueryNode *self, PyObject *arg)
              {
                ::java::text::NumberFormat a0((jobject) NULL);

                if (!parseArg(arg, "k", ::java::text::NumberFormat::initializeClass, &a0))
                {
                  OBJ_CALL(self->object.setNumberFormat(a0));
                  Py_RETURN_NONE;
                }

                PyErr_SetArgsError((PyObject *) self, "setNumberFormat", arg);
                return NULL;
              }

              static PyObject *t_NumericQueryNode_setValue(t_NumericQueryNode *self, PyObject *arg)
              {
                ::java::lang::Number a0((jobject) NULL);

                if (!parseArg(arg, "O", &::java::lang::PY_TYPE(Number), &a0))
                {
                  OBJ_CALL(self->object.setValue(a0));
                  Py_RETURN_NONE;
                }

                PyErr_SetArgsError((PyObject *) self, "setValue", arg);
                return NULL;
              }

              static PyObject *t_NumericQueryNode_toQueryString(t_NumericQueryNode *self, PyObject *args)
              {
                ::org::apache::lucene::queryparser::flexible::core::parser::EscapeQuerySyntax a0((jobject) NULL);
                ::java::lang::CharSequence result((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::queryparser::flexible::core::parser::EscapeQuerySyntax::initializeClass, &a0))
                {
                  OBJ_CALL(result = self->object.toQueryString(a0));
                  return ::java::lang::t_CharSequence::wrap_Object(result);
                }

                return callSuper(&PY_TYPE(NumericQueryNode), (PyObject *) self, "toQueryString", args, 2);
              }

              static PyObject *t_NumericQueryNode_toString(t_NumericQueryNode *self, PyObject *args)
              {
                ::java::lang::String result((jobject) NULL);

                if (!parseArgs(args, ""))
                {
                  OBJ_CALL(result = self->object.toString());
                  return j2p(result);
                }

                return callSuper(&PY_TYPE(NumericQueryNode), (PyObject *) self, "toString", args, 2);
              }

              static PyObject *t_NumericQueryNode_get__field(t_NumericQueryNode *self, void *data)
              {
                ::java::lang::CharSequence value((jobject) NULL);
                OBJ_CALL(value = self->object.getField());
                return ::java::lang::t_CharSequence::wrap_Object(value);
              }
              static int t_NumericQueryNode_set__field(t_NumericQueryNode *self, PyObject *arg, void *data)
              {
                {
                  ::java::lang::CharSequence value((jobject) NULL);
                  if (!parseArg(arg, "O", &::java::lang::PY_TYPE(CharSequence), &value))
                  {
                    INT_CALL(self->object.setField(value));
                    return 0;
                  }
                }
                PyErr_SetArgsError((PyObject *) self, "field", arg);
                return -1;
              }

              static PyObject *t_NumericQueryNode_get__numberFormat(t_NumericQueryNode *self, void *data)
              {
                ::java::text::NumberFormat value((jobject) NULL);
                OBJ_CALL(value = self->object.getNumberFormat());
                return ::java::text::t_NumberFormat::wrap_Object(value);
              }
              static int t_NumericQueryNode_set__numberFormat(t_NumericQueryNode *self, PyObject *arg, void *data)
              {
                {
                  ::java::text::NumberFormat value((jobject) NULL);
                  if (!parseArg(arg, "k", ::java::text::NumberFormat::initializeClass, &value))
                  {
                    INT_CALL(self->object.setNumberFormat(value));
                    return 0;
                  }
                }
                PyErr_SetArgsError((PyObject *) self, "numberFormat", arg);
                return -1;
              }

              static PyObject *t_NumericQueryNode_get__value(t_NumericQueryNode *self, void *data)
              {
                ::java::lang::Number value((jobject) NULL);
                OBJ_CALL(value = self->object.getValue());
                return ::java::lang::t_Number::wrap_Object(value);
              }
              static int t_NumericQueryNode_set__value(t_NumericQueryNode *self, PyObject *arg, void *data)
              {
                {
                  ::java::lang::Number value((jobject) NULL);
                  if (!parseArg(arg, "O", &::java::lang::PY_TYPE(Number), &value))
                  {
                    INT_CALL(self->object.setValue(value));
                    return 0;
                  }
                }
                PyErr_SetArgsError((PyObject *) self, "value", arg);
                return -1;
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/sinks/TeeSinkTokenFilter.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/sinks/TeeSinkTokenFilter$SinkFilter.h"
#include "org/apache/lucene/analysis/sinks/TeeSinkTokenFilter$SinkTokenStream.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace sinks {

          ::java::lang::Class *TeeSinkTokenFilter::class$ = NULL;
          jmethodID *TeeSinkTokenFilter::mids$ = NULL;
          bool TeeSinkTokenFilter::live$ = false;

          jclass TeeSinkTokenFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/sinks/TeeSinkTokenFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_c7c794dc] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;)V");
              mids$[mid_addSinkTokenStream_4bcd0017] = env->getMethodID(cls, "addSinkTokenStream", "(Lorg/apache/lucene/analysis/sinks/TeeSinkTokenFilter$SinkTokenStream;)V");
              mids$[mid_consumeAllTokens_54c6a166] = env->getMethodID(cls, "consumeAllTokens", "()V");
              mids$[mid_end_54c6a166] = env->getMethodID(cls, "end", "()V");
              mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");
              mids$[mid_newSinkTokenStream_17f71d86] = env->getMethodID(cls, "newSinkTokenStream", "()Lorg/apache/lucene/analysis/sinks/TeeSinkTokenFilter$SinkTokenStream;");
              mids$[mid_newSinkTokenStream_714b7637] = env->getMethodID(cls, "newSinkTokenStream", "(Lorg/apache/lucene/analysis/sinks/TeeSinkTokenFilter$SinkFilter;)Lorg/apache/lucene/analysis/sinks/TeeSinkTokenFilter$SinkTokenStream;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          TeeSinkTokenFilter::TeeSinkTokenFilter(const ::org::apache::lucene::analysis::TokenStream & a0) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_c7c794dc, a0.this$)) {}

          void TeeSinkTokenFilter::addSinkTokenStream(const ::org::apache::lucene::analysis::sinks::TeeSinkTokenFilter$SinkTokenStream & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_addSinkTokenStream_4bcd0017], a0.this$);
          }

          void TeeSinkTokenFilter::consumeAllTokens() const
          {
            env->callVoidMethod(this$, mids$[mid_consumeAllTokens_54c6a166]);
          }

          void TeeSinkTokenFilter::end() const
          {
            env->callVoidMethod(this$, mids$[mid_end_54c6a166]);
          }

          jboolean TeeSinkTokenFilter::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_54c6a16a]);
          }

          ::org::apache::lucene::analysis::sinks::TeeSinkTokenFilter$SinkTokenStream TeeSinkTokenFilter::newSinkTokenStream() const
          {
            return ::org::apache::lucene::analysis::sinks::TeeSinkTokenFilter$SinkTokenStream(env->callObjectMethod(this$, mids$[mid_newSinkTokenStream_17f71d86]));
          }

          ::org::apache::lucene::analysis::sinks::TeeSinkTokenFilter$SinkTokenStream TeeSinkTokenFilter::newSinkTokenStream(const ::org::apache::lucene::analysis::sinks::TeeSinkTokenFilter$SinkFilter & a0) const
          {
            return ::org::apache::lucene::analysis::sinks::TeeSinkTokenFilter$SinkTokenStream(env->callObjectMethod(this$, mids$[mid_newSinkTokenStream_714b7637], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace sinks {
          static PyObject *t_TeeSinkTokenFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_TeeSinkTokenFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_TeeSinkTokenFilter_init_(t_TeeSinkTokenFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_TeeSinkTokenFilter_addSinkTokenStream(t_TeeSinkTokenFilter *self, PyObject *arg);
          static PyObject *t_TeeSinkTokenFilter_consumeAllTokens(t_TeeSinkTokenFilter *self);
          static PyObject *t_TeeSinkTokenFilter_end(t_TeeSinkTokenFilter *self, PyObject *args);
          static PyObject *t_TeeSinkTokenFilter_incrementToken(t_TeeSinkTokenFilter *self, PyObject *args);
          static PyObject *t_TeeSinkTokenFilter_newSinkTokenStream(t_TeeSinkTokenFilter *self, PyObject *args);

          static PyMethodDef t_TeeSinkTokenFilter__methods_[] = {
            DECLARE_METHOD(t_TeeSinkTokenFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_TeeSinkTokenFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_TeeSinkTokenFilter, addSinkTokenStream, METH_O),
            DECLARE_METHOD(t_TeeSinkTokenFilter, consumeAllTokens, METH_NOARGS),
            DECLARE_METHOD(t_TeeSinkTokenFilter, end, METH_VARARGS),
            DECLARE_METHOD(t_TeeSinkTokenFilter, incrementToken, METH_VARARGS),
            DECLARE_METHOD(t_TeeSinkTokenFilter, newSinkTokenStream, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(TeeSinkTokenFilter, t_TeeSinkTokenFilter, ::org::apache::lucene::analysis::TokenFilter, TeeSinkTokenFilter, t_TeeSinkTokenFilter_init_, 0, 0, 0, 0, 0);

          void t_TeeSinkTokenFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(TeeSinkTokenFilter), module, "TeeSinkTokenFilter", 0);
            PyDict_SetItemString(PY_TYPE(TeeSinkTokenFilter).tp_dict, "SinkTokenStream", make_descriptor(&PY_TYPE(TeeSinkTokenFilter$SinkTokenStream)));
            PyDict_SetItemString(PY_TYPE(TeeSinkTokenFilter).tp_dict, "SinkFilter", make_descriptor(&PY_TYPE(TeeSinkTokenFilter$SinkFilter)));
          }

          void t_TeeSinkTokenFilter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(TeeSinkTokenFilter).tp_dict, "class_", make_descriptor(TeeSinkTokenFilter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(TeeSinkTokenFilter).tp_dict, "wrapfn_", make_descriptor(t_TeeSinkTokenFilter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(TeeSinkTokenFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_TeeSinkTokenFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, TeeSinkTokenFilter::initializeClass, 1)))
              return NULL;
            return t_TeeSinkTokenFilter::wrap_Object(TeeSinkTokenFilter(((t_TeeSinkTokenFilter *) arg)->object.this$));
          }
          static PyObject *t_TeeSinkTokenFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, TeeSinkTokenFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_TeeSinkTokenFilter_init_(t_TeeSinkTokenFilter *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            TeeSinkTokenFilter object((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              INT_CALL(object = TeeSinkTokenFilter(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_TeeSinkTokenFilter_addSinkTokenStream(t_TeeSinkTokenFilter *self, PyObject *arg)
          {
            ::org::apache::lucene::analysis::sinks::TeeSinkTokenFilter$SinkTokenStream a0((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::analysis::sinks::TeeSinkTokenFilter$SinkTokenStream::initializeClass, &a0))
            {
              OBJ_CALL(self->object.addSinkTokenStream(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "addSinkTokenStream", arg);
            return NULL;
          }

          static PyObject *t_TeeSinkTokenFilter_consumeAllTokens(t_TeeSinkTokenFilter *self)
          {
            OBJ_CALL(self->object.consumeAllTokens());
            Py_RETURN_NONE;
          }

          static PyObject *t_TeeSinkTokenFilter_end(t_TeeSinkTokenFilter *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.end());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(TeeSinkTokenFilter), (PyObject *) self, "end", args, 2);
          }

          static PyObject *t_TeeSinkTokenFilter_incrementToken(t_TeeSinkTokenFilter *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(TeeSinkTokenFilter), (PyObject *) self, "incrementToken", args, 2);
          }

          static PyObject *t_TeeSinkTokenFilter_newSinkTokenStream(t_TeeSinkTokenFilter *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 0:
              {
                ::org::apache::lucene::analysis::sinks::TeeSinkTokenFilter$SinkTokenStream result((jobject) NULL);
                OBJ_CALL(result = self->object.newSinkTokenStream());
                return ::org::apache::lucene::analysis::sinks::t_TeeSinkTokenFilter$SinkTokenStream::wrap_Object(result);
              }
              break;
             case 1:
              {
                ::org::apache::lucene::analysis::sinks::TeeSinkTokenFilter$SinkFilter a0((jobject) NULL);
                ::org::apache::lucene::analysis::sinks::TeeSinkTokenFilter$SinkTokenStream result((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::analysis::sinks::TeeSinkTokenFilter$SinkFilter::initializeClass, &a0))
                {
                  OBJ_CALL(result = self->object.newSinkTokenStream(a0));
                  return ::org::apache::lucene::analysis::sinks::t_TeeSinkTokenFilter$SinkTokenStream::wrap_Object(result);
                }
              }
            }

            PyErr_SetArgsError((PyObject *) self, "newSinkTokenStream", args);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/standard/processors/MatchAllDocsQueryNodeProcessor.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace processors {

              ::java::lang::Class *MatchAllDocsQueryNodeProcessor::class$ = NULL;
              jmethodID *MatchAllDocsQueryNodeProcessor::mids$ = NULL;
              bool MatchAllDocsQueryNodeProcessor::live$ = false;

              jclass MatchAllDocsQueryNodeProcessor::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/standard/processors/MatchAllDocsQueryNodeProcessor");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
                  mids$[mid_preProcessNode_6705aed7] = env->getMethodID(cls, "preProcessNode", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;)Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;");
                  mids$[mid_setChildrenOrder_4f378251] = env->getMethodID(cls, "setChildrenOrder", "(Ljava/util/List;)Ljava/util/List;");
                  mids$[mid_postProcessNode_6705aed7] = env->getMethodID(cls, "postProcessNode", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;)Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              MatchAllDocsQueryNodeProcessor::MatchAllDocsQueryNodeProcessor() : ::org::apache::lucene::queryparser::flexible::core::processors::QueryNodeProcessorImpl(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace processors {
              static PyObject *t_MatchAllDocsQueryNodeProcessor_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_MatchAllDocsQueryNodeProcessor_instance_(PyTypeObject *type, PyObject *arg);
              static int t_MatchAllDocsQueryNodeProcessor_init_(t_MatchAllDocsQueryNodeProcessor *self, PyObject *args, PyObject *kwds);

              static PyMethodDef t_MatchAllDocsQueryNodeProcessor__methods_[] = {
                DECLARE_METHOD(t_MatchAllDocsQueryNodeProcessor, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_MatchAllDocsQueryNodeProcessor, instance_, METH_O | METH_CLASS),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(MatchAllDocsQueryNodeProcessor, t_MatchAllDocsQueryNodeProcessor, ::org::apache::lucene::queryparser::flexible::core::processors::QueryNodeProcessorImpl, MatchAllDocsQueryNodeProcessor, t_MatchAllDocsQueryNodeProcessor_init_, 0, 0, 0, 0, 0);

              void t_MatchAllDocsQueryNodeProcessor::install(PyObject *module)
              {
                installType(&PY_TYPE(MatchAllDocsQueryNodeProcessor), module, "MatchAllDocsQueryNodeProcessor", 0);
              }

              void t_MatchAllDocsQueryNodeProcessor::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(MatchAllDocsQueryNodeProcessor).tp_dict, "class_", make_descriptor(MatchAllDocsQueryNodeProcessor::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(MatchAllDocsQueryNodeProcessor).tp_dict, "wrapfn_", make_descriptor(t_MatchAllDocsQueryNodeProcessor::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(MatchAllDocsQueryNodeProcessor).tp_dict, "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_MatchAllDocsQueryNodeProcessor_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, MatchAllDocsQueryNodeProcessor::initializeClass, 1)))
                  return NULL;
                return t_MatchAllDocsQueryNodeProcessor::wrap_Object(MatchAllDocsQueryNodeProcessor(((t_MatchAllDocsQueryNodeProcessor *) arg)->object.this$));
              }
              static PyObject *t_MatchAllDocsQueryNodeProcessor_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, MatchAllDocsQueryNodeProcessor::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_MatchAllDocsQueryNodeProcessor_init_(t_MatchAllDocsQueryNodeProcessor *self, PyObject *args, PyObject *kwds)
              {
                MatchAllDocsQueryNodeProcessor object((jobject) NULL);

                INT_CALL(object = MatchAllDocsQueryNodeProcessor());
                self->object = object;

                return 0;
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/FieldValueHitQueue.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/search/FieldComparator.h"
#include "java/lang/Object.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/search/SortField.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *FieldValueHitQueue::class$ = NULL;
        jmethodID *FieldValueHitQueue::mids$ = NULL;
        bool FieldValueHitQueue::live$ = false;

        jclass FieldValueHitQueue::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/FieldValueHitQueue");

            mids$ = new jmethodID[max_mid];
            mids$[mid_create_c78d73c1] = env->getStaticMethodID(cls, "create", "([Lorg/apache/lucene/search/SortField;I)Lorg/apache/lucene/search/FieldValueHitQueue;");
            mids$[mid_getComparators_cbcbe6bc] = env->getMethodID(cls, "getComparators", "()[Lorg/apache/lucene/search/FieldComparator;");
            mids$[mid_getReverseMul_dab10e75] = env->getMethodID(cls, "getReverseMul", "()[I");
            mids$[mid_setComparator_205d9ea7] = env->getMethodID(cls, "setComparator", "(ILorg/apache/lucene/search/FieldComparator;)V");
            mids$[mid_lessThan_90234960] = env->getMethodID(cls, "lessThan", "(Lorg/apache/lucene/search/FieldValueHitQueue$Entry;Lorg/apache/lucene/search/FieldValueHitQueue$Entry;)Z");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        FieldValueHitQueue FieldValueHitQueue::create(const JArray< ::org::apache::lucene::search::SortField > & a0, jint a1)
        {
          jclass cls = env->getClass(initializeClass);
          return FieldValueHitQueue(env->callStaticObjectMethod(cls, mids$[mid_create_c78d73c1], a0.this$, a1));
        }

        JArray< ::org::apache::lucene::search::FieldComparator > FieldValueHitQueue::getComparators() const
        {
          return JArray< ::org::apache::lucene::search::FieldComparator >(env->callObjectMethod(this$, mids$[mid_getComparators_cbcbe6bc]));
        }

        JArray< jint > FieldValueHitQueue::getReverseMul() const
        {
          return JArray< jint >(env->callObjectMethod(this$, mids$[mid_getReverseMul_dab10e75]));
        }

        void FieldValueHitQueue::setComparator(jint a0, const ::org::apache::lucene::search::FieldComparator & a1) const
        {
          env->callVoidMethod(this$, mids$[mid_setComparator_205d9ea7], a0, a1.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"
#include "org/apache/lucene/search/FieldValueHitQueue$Entry.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_FieldValueHitQueue_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FieldValueHitQueue_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FieldValueHitQueue_of_(t_FieldValueHitQueue *self, PyObject *args);
        static PyObject *t_FieldValueHitQueue_create(PyTypeObject *type, PyObject *args);
        static PyObject *t_FieldValueHitQueue_getComparators(t_FieldValueHitQueue *self);
        static PyObject *t_FieldValueHitQueue_getReverseMul(t_FieldValueHitQueue *self);
        static PyObject *t_FieldValueHitQueue_setComparator(t_FieldValueHitQueue *self, PyObject *args);
        static PyObject *t_FieldValueHitQueue_get__comparators(t_FieldValueHitQueue *self, void *data);
        static PyObject *t_FieldValueHitQueue_get__reverseMul(t_FieldValueHitQueue *self, void *data);
        static PyObject *t_FieldValueHitQueue_get__parameters_(t_FieldValueHitQueue *self, void *data);
        static PyGetSetDef t_FieldValueHitQueue__fields_[] = {
          DECLARE_GET_FIELD(t_FieldValueHitQueue, comparators),
          DECLARE_GET_FIELD(t_FieldValueHitQueue, reverseMul),
          DECLARE_GET_FIELD(t_FieldValueHitQueue, parameters_),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_FieldValueHitQueue__methods_[] = {
          DECLARE_METHOD(t_FieldValueHitQueue, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FieldValueHitQueue, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FieldValueHitQueue, of_, METH_VARARGS),
          DECLARE_METHOD(t_FieldValueHitQueue, create, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_FieldValueHitQueue, getComparators, METH_NOARGS),
          DECLARE_METHOD(t_FieldValueHitQueue, getReverseMul, METH_NOARGS),
          DECLARE_METHOD(t_FieldValueHitQueue, setComparator, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(FieldValueHitQueue, t_FieldValueHitQueue, ::org::apache::lucene::util::PriorityQueue, FieldValueHitQueue, abstract_init, 0, 0, t_FieldValueHitQueue__fields_, 0, 0);
        PyObject *t_FieldValueHitQueue::wrap_Object(const FieldValueHitQueue& object, PyTypeObject *p0)
        {
          PyObject *obj = t_FieldValueHitQueue::wrap_Object(object);
          if (obj != NULL && obj != Py_None)
          {
            t_FieldValueHitQueue *self = (t_FieldValueHitQueue *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        PyObject *t_FieldValueHitQueue::wrap_jobject(const jobject& object, PyTypeObject *p0)
        {
          PyObject *obj = t_FieldValueHitQueue::wrap_jobject(object);
          if (obj != NULL && obj != Py_None)
          {
            t_FieldValueHitQueue *self = (t_FieldValueHitQueue *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        void t_FieldValueHitQueue::install(PyObject *module)
        {
          installType(&PY_TYPE(FieldValueHitQueue), module, "FieldValueHitQueue", 0);
          PyDict_SetItemString(PY_TYPE(FieldValueHitQueue).tp_dict, "Entry", make_descriptor(&PY_TYPE(FieldValueHitQueue$Entry)));
        }

        void t_FieldValueHitQueue::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(FieldValueHitQueue).tp_dict, "class_", make_descriptor(FieldValueHitQueue::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(FieldValueHitQueue).tp_dict, "wrapfn_", make_descriptor(t_FieldValueHitQueue::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(FieldValueHitQueue).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_FieldValueHitQueue_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, FieldValueHitQueue::initializeClass, 1)))
            return NULL;
          return t_FieldValueHitQueue::wrap_Object(FieldValueHitQueue(((t_FieldValueHitQueue *) arg)->object.this$));
        }
        static PyObject *t_FieldValueHitQueue_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, FieldValueHitQueue::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_FieldValueHitQueue_of_(t_FieldValueHitQueue *self, PyObject *args)
        {
          if (!parseArg(args, "T", 1, &(self->parameters)))
            Py_RETURN_SELF;
          return PyErr_SetArgsError((PyObject *) self, "of_", args);
        }

        static PyObject *t_FieldValueHitQueue_create(PyTypeObject *type, PyObject *args)
        {
          JArray< ::org::apache::lucene::search::SortField > a0((jobject) NULL);
          jint a1;
          FieldValueHitQueue result((jobject) NULL);

          if (!parseArgs(args, "[kI", ::org::apache::lucene::search::SortField::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = ::org::apache::lucene::search::FieldValueHitQueue::create(a0, a1));
            return t_FieldValueHitQueue::wrap_Object(result);
          }

          PyErr_SetArgsError(type, "create", args);
          return NULL;
        }

        static PyObject *t_FieldValueHitQueue_getComparators(t_FieldValueHitQueue *self)
        {
          JArray< ::org::apache::lucene::search::FieldComparator > result((jobject) NULL);
          OBJ_CALL(result = self->object.getComparators());
          return JArray<jobject>(result.this$).wrap(::org::apache::lucene::search::t_FieldComparator::wrap_jobject);
        }

        static PyObject *t_FieldValueHitQueue_getReverseMul(t_FieldValueHitQueue *self)
        {
          JArray< jint > result((jobject) NULL);
          OBJ_CALL(result = self->object.getReverseMul());
          return result.wrap();
        }

        static PyObject *t_FieldValueHitQueue_setComparator(t_FieldValueHitQueue *self, PyObject *args)
        {
          jint a0;
          ::org::apache::lucene::search::FieldComparator a1((jobject) NULL);
          PyTypeObject **p1;

          if (!parseArgs(args, "IK", ::org::apache::lucene::search::FieldComparator::initializeClass, &a0, &a1, &p1, ::org::apache::lucene::search::t_FieldComparator::parameters_))
          {
            OBJ_CALL(self->object.setComparator(a0, a1));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setComparator", args);
          return NULL;
        }
        static PyObject *t_FieldValueHitQueue_get__parameters_(t_FieldValueHitQueue *self, void *data)
        {
          return typeParameters(self->parameters, sizeof(self->parameters));
        }

        static PyObject *t_FieldValueHitQueue_get__comparators(t_FieldValueHitQueue *self, void *data)
        {
          JArray< ::org::apache::lucene::search::FieldComparator > value((jobject) NULL);
          OBJ_CALL(value = self->object.getComparators());
          return JArray<jobject>(value.this$).wrap(::org::apache::lucene::search::t_FieldComparator::wrap_jobject);
        }

        static PyObject *t_FieldValueHitQueue_get__reverseMul(t_FieldValueHitQueue *self, void *data)
        {
          JArray< jint > value((jobject) NULL);
          OBJ_CALL(value = self->object.getReverseMul());
          return value.wrap();
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/tartarus/snowball/ext/SpanishStemmer.h"
#include "java/lang/Object.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace tartarus {
    namespace snowball {
      namespace ext {

        ::java::lang::Class *SpanishStemmer::class$ = NULL;
        jmethodID *SpanishStemmer::mids$ = NULL;
        bool SpanishStemmer::live$ = false;

        jclass SpanishStemmer::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/tartarus/snowball/ext/SpanishStemmer");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
            mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
            mids$[mid_stem_54c6a16a] = env->getMethodID(cls, "stem", "()Z");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        SpanishStemmer::SpanishStemmer() : ::org::tartarus::snowball::SnowballProgram(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        jboolean SpanishStemmer::equals(const ::java::lang::Object & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
        }

        jint SpanishStemmer::hashCode() const
        {
          return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
        }

        jboolean SpanishStemmer::stem() const
        {
          return env->callBooleanMethod(this$, mids$[mid_stem_54c6a16a]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace tartarus {
    namespace snowball {
      namespace ext {
        static PyObject *t_SpanishStemmer_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_SpanishStemmer_instance_(PyTypeObject *type, PyObject *arg);
        static int t_SpanishStemmer_init_(t_SpanishStemmer *self, PyObject *args, PyObject *kwds);
        static PyObject *t_SpanishStemmer_equals(t_SpanishStemmer *self, PyObject *args);
        static PyObject *t_SpanishStemmer_hashCode(t_SpanishStemmer *self, PyObject *args);
        static PyObject *t_SpanishStemmer_stem(t_SpanishStemmer *self, PyObject *args);

        static PyMethodDef t_SpanishStemmer__methods_[] = {
          DECLARE_METHOD(t_SpanishStemmer, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SpanishStemmer, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SpanishStemmer, equals, METH_VARARGS),
          DECLARE_METHOD(t_SpanishStemmer, hashCode, METH_VARARGS),
          DECLARE_METHOD(t_SpanishStemmer, stem, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(SpanishStemmer, t_SpanishStemmer, ::org::tartarus::snowball::SnowballProgram, SpanishStemmer, t_SpanishStemmer_init_, 0, 0, 0, 0, 0);

        void t_SpanishStemmer::install(PyObject *module)
        {
          installType(&PY_TYPE(SpanishStemmer), module, "SpanishStemmer", 0);
        }

        void t_SpanishStemmer::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(SpanishStemmer).tp_dict, "class_", make_descriptor(SpanishStemmer::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(SpanishStemmer).tp_dict, "wrapfn_", make_descriptor(t_SpanishStemmer::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(SpanishStemmer).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_SpanishStemmer_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, SpanishStemmer::initializeClass, 1)))
            return NULL;
          return t_SpanishStemmer::wrap_Object(SpanishStemmer(((t_SpanishStemmer *) arg)->object.this$));
        }
        static PyObject *t_SpanishStemmer_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, SpanishStemmer::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_SpanishStemmer_init_(t_SpanishStemmer *self, PyObject *args, PyObject *kwds)
        {
          SpanishStemmer object((jobject) NULL);

          INT_CALL(object = SpanishStemmer());
          self->object = object;

          return 0;
        }

        static PyObject *t_SpanishStemmer_equals(t_SpanishStemmer *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.equals(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(SpanishStemmer), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_SpanishStemmer_hashCode(t_SpanishStemmer *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hashCode());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(SpanishStemmer), (PyObject *) self, "hashCode", args, 2);
        }

        static PyObject *t_SpanishStemmer_stem(t_SpanishStemmer *self, PyObject *args)
        {
          jboolean result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.stem());
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(SpanishStemmer), (PyObject *) self, "stem", args, 2);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/fst/Util$FSTPath.h"
#include "org/apache/lucene/util/IntsRef.h"
#include "org/apache/lucene/util/fst/FST$Arc.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace fst {

          ::java::lang::Class *Util$FSTPath::class$ = NULL;
          jmethodID *Util$FSTPath::mids$ = NULL;
          jfieldID *Util$FSTPath::fids$ = NULL;
          bool Util$FSTPath::live$ = false;

          jclass Util$FSTPath::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/util/fst/Util$FSTPath");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_24ce56ea] = env->getMethodID(cls, "<init>", "(Ljava/lang/Object;Lorg/apache/lucene/util/fst/FST$Arc;Lorg/apache/lucene/util/IntsRef;)V");
              mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

              fids$ = new jfieldID[max_fid];
              fids$[fid_arc] = env->getFieldID(cls, "arc", "Lorg/apache/lucene/util/fst/FST$Arc;");
              fids$[fid_cost] = env->getFieldID(cls, "cost", "Ljava/lang/Object;");
              fids$[fid_input] = env->getFieldID(cls, "input", "Lorg/apache/lucene/util/IntsRef;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          Util$FSTPath::Util$FSTPath(const ::java::lang::Object & a0, const ::org::apache::lucene::util::fst::FST$Arc & a1, const ::org::apache::lucene::util::IntsRef & a2) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_24ce56ea, a0.this$, a1.this$, a2.this$)) {}

          ::java::lang::String Util$FSTPath::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
          }

          ::org::apache::lucene::util::fst::FST$Arc Util$FSTPath::_get_arc() const
          {
            return ::org::apache::lucene::util::fst::FST$Arc(env->getObjectField(this$, fids$[fid_arc]));
          }

          void Util$FSTPath::_set_arc(const ::org::apache::lucene::util::fst::FST$Arc & a0) const
          {
            env->setObjectField(this$, fids$[fid_arc], a0.this$);
          }

          ::java::lang::Object Util$FSTPath::_get_cost() const
          {
            return ::java::lang::Object(env->getObjectField(this$, fids$[fid_cost]));
          }

          void Util$FSTPath::_set_cost(const ::java::lang::Object & a0) const
          {
            env->setObjectField(this$, fids$[fid_cost], a0.this$);
          }

          ::org::apache::lucene::util::IntsRef Util$FSTPath::_get_input() const
          {
            return ::org::apache::lucene::util::IntsRef(env->getObjectField(this$, fids$[fid_input]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace fst {
          static PyObject *t_Util$FSTPath_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Util$FSTPath_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Util$FSTPath_of_(t_Util$FSTPath *self, PyObject *args);
          static int t_Util$FSTPath_init_(t_Util$FSTPath *self, PyObject *args, PyObject *kwds);
          static PyObject *t_Util$FSTPath_toString(t_Util$FSTPath *self, PyObject *args);
          static PyObject *t_Util$FSTPath_get__arc(t_Util$FSTPath *self, void *data);
          static int t_Util$FSTPath_set__arc(t_Util$FSTPath *self, PyObject *arg, void *data);
          static PyObject *t_Util$FSTPath_get__cost(t_Util$FSTPath *self, void *data);
          static int t_Util$FSTPath_set__cost(t_Util$FSTPath *self, PyObject *arg, void *data);
          static PyObject *t_Util$FSTPath_get__input(t_Util$FSTPath *self, void *data);

          static PyObject *t_Util$FSTPath_get__parameters_(t_Util$FSTPath *self, void *data);
          static PyGetSetDef t_Util$FSTPath__fields_[] = {
            DECLARE_GETSET_FIELD(t_Util$FSTPath, arc),
            DECLARE_GETSET_FIELD(t_Util$FSTPath, cost),
            DECLARE_GET_FIELD(t_Util$FSTPath, input),
            DECLARE_GET_FIELD(t_Util$FSTPath, parameters_),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_Util$FSTPath__methods_[] = {
            DECLARE_METHOD(t_Util$FSTPath, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Util$FSTPath, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Util$FSTPath, of_, METH_VARARGS),
            DECLARE_METHOD(t_Util$FSTPath, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(Util$FSTPath, t_Util$FSTPath, ::java::lang::Object, Util$FSTPath, t_Util$FSTPath_init_, 0, 0, t_Util$FSTPath__fields_, 0, 0);
          PyObject *t_Util$FSTPath::wrap_Object(const Util$FSTPath& object, PyTypeObject *p0)
          {
            PyObject *obj = t_Util$FSTPath::wrap_Object(object);
            if (obj != NULL && obj != Py_None)
            {
              t_Util$FSTPath *self = (t_Util$FSTPath *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          PyObject *t_Util$FSTPath::wrap_jobject(const jobject& object, PyTypeObject *p0)
          {
            PyObject *obj = t_Util$FSTPath::wrap_jobject(object);
            if (obj != NULL && obj != Py_None)
            {
              t_Util$FSTPath *self = (t_Util$FSTPath *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          void t_Util$FSTPath::install(PyObject *module)
          {
            installType(&PY_TYPE(Util$FSTPath), module, "Util$FSTPath", 0);
          }

          void t_Util$FSTPath::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(Util$FSTPath).tp_dict, "class_", make_descriptor(Util$FSTPath::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(Util$FSTPath).tp_dict, "wrapfn_", make_descriptor(t_Util$FSTPath::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(Util$FSTPath).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_Util$FSTPath_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, Util$FSTPath::initializeClass, 1)))
              return NULL;
            return t_Util$FSTPath::wrap_Object(Util$FSTPath(((t_Util$FSTPath *) arg)->object.this$));
          }
          static PyObject *t_Util$FSTPath_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, Util$FSTPath::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_Util$FSTPath_of_(t_Util$FSTPath *self, PyObject *args)
          {
            if (!parseArg(args, "T", 1, &(self->parameters)))
              Py_RETURN_SELF;
            return PyErr_SetArgsError((PyObject *) self, "of_", args);
          }

          static int t_Util$FSTPath_init_(t_Util$FSTPath *self, PyObject *args, PyObject *kwds)
          {
            ::java::lang::Object a0((jobject) NULL);
            ::org::apache::lucene::util::fst::FST$Arc a1((jobject) NULL);
            PyTypeObject **p1;
            ::org::apache::lucene::util::IntsRef a2((jobject) NULL);
            Util$FSTPath object((jobject) NULL);

            if (!parseArgs(args, "oKk", ::org::apache::lucene::util::fst::FST$Arc::initializeClass, ::org::apache::lucene::util::IntsRef::initializeClass, &a0, &a1, &p1, ::org::apache::lucene::util::fst::t_FST$Arc::parameters_, &a2))
            {
              INT_CALL(object = Util$FSTPath(a0, a1, a2));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_Util$FSTPath_toString(t_Util$FSTPath *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(&PY_TYPE(Util$FSTPath), (PyObject *) self, "toString", args, 2);
          }
          static PyObject *t_Util$FSTPath_get__parameters_(t_Util$FSTPath *self, void *data)
          {
            return typeParameters(self->parameters, sizeof(self->parameters));
          }

          static PyObject *t_Util$FSTPath_get__arc(t_Util$FSTPath *self, void *data)
          {
            ::org::apache::lucene::util::fst::FST$Arc value((jobject) NULL);
            OBJ_CALL(value = self->object._get_arc());
            return ::org::apache::lucene::util::fst::t_FST$Arc::wrap_Object(value);
          }
          static int t_Util$FSTPath_set__arc(t_Util$FSTPath *self, PyObject *arg, void *data)
          {
            ::org::apache::lucene::util::fst::FST$Arc value((jobject) NULL);
            if (!parseArg(arg, "k", ::org::apache::lucene::util::fst::FST$Arc::initializeClass, &value))
            {
              INT_CALL(self->object._set_arc(value));
              return 0;
            }
            PyErr_SetArgsError((PyObject *) self, "arc", arg);
            return -1;
          }

          static PyObject *t_Util$FSTPath_get__cost(t_Util$FSTPath *self, void *data)
          {
            ::java::lang::Object value((jobject) NULL);
            OBJ_CALL(value = self->object._get_cost());
            return ::java::lang::t_Object::wrap_Object(value);
          }
          static int t_Util$FSTPath_set__cost(t_Util$FSTPath *self, PyObject *arg, void *data)
          {
            ::java::lang::Object value((jobject) NULL);
            if (!parseArg(arg, "o", &value))
            {
              INT_CALL(self->object._set_cost(value));
              return 0;
            }
            PyErr_SetArgsError((PyObject *) self, "cost", arg);
            return -1;
          }

          static PyObject *t_Util$FSTPath_get__input(t_Util$FSTPath *self, void *data)
          {
            ::org::apache::lucene::util::IntsRef value((jobject) NULL);
            OBJ_CALL(value = self->object._get_input());
            return ::org::apache::lucene::util::t_IntsRef::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/BlockTermState.h"
#include "org/apache/lucene/index/TermState.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {

        ::java::lang::Class *BlockTermState::class$ = NULL;
        jmethodID *BlockTermState::mids$ = NULL;
        jfieldID *BlockTermState::fids$ = NULL;
        bool BlockTermState::live$ = false;

        jclass BlockTermState::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/BlockTermState");

            mids$ = new jmethodID[max_mid];
            mids$[mid_copyFrom_d506ca07] = env->getMethodID(cls, "copyFrom", "(Lorg/apache/lucene/index/TermState;)V");
            mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

            fids$ = new jfieldID[max_fid];
            fids$[fid_blockFilePointer] = env->getFieldID(cls, "blockFilePointer", "J");
            fids$[fid_docFreq] = env->getFieldID(cls, "docFreq", "I");
            fids$[fid_termBlockOrd] = env->getFieldID(cls, "termBlockOrd", "I");
            fids$[fid_totalTermFreq] = env->getFieldID(cls, "totalTermFreq", "J");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        void BlockTermState::copyFrom(const ::org::apache::lucene::index::TermState & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_copyFrom_d506ca07], a0.this$);
        }

        ::java::lang::String BlockTermState::toString() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
        }

        jlong BlockTermState::_get_blockFilePointer() const
        {
          return env->getLongField(this$, fids$[fid_blockFilePointer]);
        }

        void BlockTermState::_set_blockFilePointer(jlong a0) const
        {
          env->setLongField(this$, fids$[fid_blockFilePointer], a0);
        }

        jint BlockTermState::_get_docFreq() const
        {
          return env->getIntField(this$, fids$[fid_docFreq]);
        }

        void BlockTermState::_set_docFreq(jint a0) const
        {
          env->setIntField(this$, fids$[fid_docFreq], a0);
        }

        jint BlockTermState::_get_termBlockOrd() const
        {
          return env->getIntField(this$, fids$[fid_termBlockOrd]);
        }

        void BlockTermState::_set_termBlockOrd(jint a0) const
        {
          env->setIntField(this$, fids$[fid_termBlockOrd], a0);
        }

        jlong BlockTermState::_get_totalTermFreq() const
        {
          return env->getLongField(this$, fids$[fid_totalTermFreq]);
        }

        void BlockTermState::_set_totalTermFreq(jlong a0) const
        {
          env->setLongField(this$, fids$[fid_totalTermFreq], a0);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        static PyObject *t_BlockTermState_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_BlockTermState_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_BlockTermState_copyFrom(t_BlockTermState *self, PyObject *args);
        static PyObject *t_BlockTermState_toString(t_BlockTermState *self, PyObject *args);
        static PyObject *t_BlockTermState_get__blockFilePointer(t_BlockTermState *self, void *data);
        static int t_BlockTermState_set__blockFilePointer(t_BlockTermState *self, PyObject *arg, void *data);
        static PyObject *t_BlockTermState_get__docFreq(t_BlockTermState *self, void *data);
        static int t_BlockTermState_set__docFreq(t_BlockTermState *self, PyObject *arg, void *data);
        static PyObject *t_BlockTermState_get__termBlockOrd(t_BlockTermState *self, void *data);
        static int t_BlockTermState_set__termBlockOrd(t_BlockTermState *self, PyObject *arg, void *data);
        static PyObject *t_BlockTermState_get__totalTermFreq(t_BlockTermState *self, void *data);
        static int t_BlockTermState_set__totalTermFreq(t_BlockTermState *self, PyObject *arg, void *data);

        static PyGetSetDef t_BlockTermState__fields_[] = {
          DECLARE_GETSET_FIELD(t_BlockTermState, blockFilePointer),
          DECLARE_GETSET_FIELD(t_BlockTermState, docFreq),
          DECLARE_GETSET_FIELD(t_BlockTermState, termBlockOrd),
          DECLARE_GETSET_FIELD(t_BlockTermState, totalTermFreq),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_BlockTermState__methods_[] = {
          DECLARE_METHOD(t_BlockTermState, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_BlockTermState, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_BlockTermState, copyFrom, METH_VARARGS),
          DECLARE_METHOD(t_BlockTermState, toString, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(BlockTermState, t_BlockTermState, ::org::apache::lucene::index::OrdTermState, BlockTermState, abstract_init, 0, 0, t_BlockTermState__fields_, 0, 0);

        void t_BlockTermState::install(PyObject *module)
        {
          installType(&PY_TYPE(BlockTermState), module, "BlockTermState", 0);
        }

        void t_BlockTermState::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(BlockTermState).tp_dict, "class_", make_descriptor(BlockTermState::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(BlockTermState).tp_dict, "wrapfn_", make_descriptor(t_BlockTermState::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(BlockTermState).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_BlockTermState_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, BlockTermState::initializeClass, 1)))
            return NULL;
          return t_BlockTermState::wrap_Object(BlockTermState(((t_BlockTermState *) arg)->object.this$));
        }
        static PyObject *t_BlockTermState_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, BlockTermState::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_BlockTermState_copyFrom(t_BlockTermState *self, PyObject *args)
        {
          ::org::apache::lucene::index::TermState a0((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::index::TermState::initializeClass, &a0))
          {
            OBJ_CALL(self->object.copyFrom(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(BlockTermState), (PyObject *) self, "copyFrom", args, 2);
        }

        static PyObject *t_BlockTermState_toString(t_BlockTermState *self, PyObject *args)
        {
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.toString());
            return j2p(result);
          }

          return callSuper(&PY_TYPE(BlockTermState), (PyObject *) self, "toString", args, 2);
        }

        static PyObject *t_BlockTermState_get__blockFilePointer(t_BlockTermState *self, void *data)
        {
          jlong value;
          OBJ_CALL(value = self->object._get_blockFilePointer());
          return PyLong_FromLongLong((PY_LONG_LONG) value);
        }
        static int t_BlockTermState_set__blockFilePointer(t_BlockTermState *self, PyObject *arg, void *data)
        {
          jlong value;
          if (!parseArg(arg, "J", &value))
          {
            INT_CALL(self->object._set_blockFilePointer(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "blockFilePointer", arg);
          return -1;
        }

        static PyObject *t_BlockTermState_get__docFreq(t_BlockTermState *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object._get_docFreq());
          return PyInt_FromLong((long) value);
        }
        static int t_BlockTermState_set__docFreq(t_BlockTermState *self, PyObject *arg, void *data)
        {
          jint value;
          if (!parseArg(arg, "I", &value))
          {
            INT_CALL(self->object._set_docFreq(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "docFreq", arg);
          return -1;
        }

        static PyObject *t_BlockTermState_get__termBlockOrd(t_BlockTermState *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object._get_termBlockOrd());
          return PyInt_FromLong((long) value);
        }
        static int t_BlockTermState_set__termBlockOrd(t_BlockTermState *self, PyObject *arg, void *data)
        {
          jint value;
          if (!parseArg(arg, "I", &value))
          {
            INT_CALL(self->object._set_termBlockOrd(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "termBlockOrd", arg);
          return -1;
        }

        static PyObject *t_BlockTermState_get__totalTermFreq(t_BlockTermState *self, void *data)
        {
          jlong value;
          OBJ_CALL(value = self->object._get_totalTermFreq());
          return PyLong_FromLongLong((PY_LONG_LONG) value);
        }
        static int t_BlockTermState_set__totalTermFreq(t_BlockTermState *self, PyObject *arg, void *data)
        {
          jlong value;
          if (!parseArg(arg, "J", &value))
          {
            INT_CALL(self->object._set_totalTermFreq(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "totalTermFreq", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/core/processors/QueryNodeProcessorImpl.h"
#include "org/apache/lucene/queryparser/flexible/core/config/QueryConfigHandler.h"
#include "org/apache/lucene/queryparser/flexible/core/QueryNodeException.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/QueryNode.h"
#include "org/apache/lucene/queryparser/flexible/core/processors/QueryNodeProcessor.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace processors {

              ::java::lang::Class *QueryNodeProcessorImpl::class$ = NULL;
              jmethodID *QueryNodeProcessorImpl::mids$ = NULL;
              bool QueryNodeProcessorImpl::live$ = false;

              jclass QueryNodeProcessorImpl::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/core/processors/QueryNodeProcessorImpl");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
                  mids$[mid_init$_0b1f7132] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/queryparser/flexible/core/config/QueryConfigHandler;)V");
                  mids$[mid_getQueryConfigHandler_3636d8c3] = env->getMethodID(cls, "getQueryConfigHandler", "()Lorg/apache/lucene/queryparser/flexible/core/config/QueryConfigHandler;");
                  mids$[mid_process_6705aed7] = env->getMethodID(cls, "process", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;)Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;");
                  mids$[mid_setQueryConfigHandler_0b1f7132] = env->getMethodID(cls, "setQueryConfigHandler", "(Lorg/apache/lucene/queryparser/flexible/core/config/QueryConfigHandler;)V");
                  mids$[mid_processChildren_cc04aeef] = env->getMethodID(cls, "processChildren", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;)V");
                  mids$[mid_preProcessNode_6705aed7] = env->getMethodID(cls, "preProcessNode", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;)Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;");
                  mids$[mid_setChildrenOrder_4f378251] = env->getMethodID(cls, "setChildrenOrder", "(Ljava/util/List;)Ljava/util/List;");
                  mids$[mid_postProcessNode_6705aed7] = env->getMethodID(cls, "postProcessNode", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;)Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              QueryNodeProcessorImpl::QueryNodeProcessorImpl() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

              QueryNodeProcessorImpl::QueryNodeProcessorImpl(const ::org::apache::lucene::queryparser::flexible::core::config::QueryConfigHandler & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_0b1f7132, a0.this$)) {}

              ::org::apache::lucene::queryparser::flexible::core::config::QueryConfigHandler QueryNodeProcessorImpl::getQueryConfigHandler() const
              {
                return ::org::apache::lucene::queryparser::flexible::core::config::QueryConfigHandler(env->callObjectMethod(this$, mids$[mid_getQueryConfigHandler_3636d8c3]));
              }

              ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode QueryNodeProcessorImpl::process(const ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode & a0) const
              {
                return ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode(env->callObjectMethod(this$, mids$[mid_process_6705aed7], a0.this$));
              }

              void QueryNodeProcessorImpl::setQueryConfigHandler(const ::org::apache::lucene::queryparser::flexible::core::config::QueryConfigHandler & a0) const
              {
                env->callVoidMethod(this$, mids$[mid_setQueryConfigHandler_0b1f7132], a0.this$);
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace processors {
              static PyObject *t_QueryNodeProcessorImpl_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_QueryNodeProcessorImpl_instance_(PyTypeObject *type, PyObject *arg);
              static int t_QueryNodeProcessorImpl_init_(t_QueryNodeProcessorImpl *self, PyObject *args, PyObject *kwds);
              static PyObject *t_QueryNodeProcessorImpl_getQueryConfigHandler(t_QueryNodeProcessorImpl *self);
              static PyObject *t_QueryNodeProcessorImpl_process(t_QueryNodeProcessorImpl *self, PyObject *arg);
              static PyObject *t_QueryNodeProcessorImpl_setQueryConfigHandler(t_QueryNodeProcessorImpl *self, PyObject *arg);
              static PyObject *t_QueryNodeProcessorImpl_get__queryConfigHandler(t_QueryNodeProcessorImpl *self, void *data);
              static int t_QueryNodeProcessorImpl_set__queryConfigHandler(t_QueryNodeProcessorImpl *self, PyObject *arg, void *data);
              static PyGetSetDef t_QueryNodeProcessorImpl__fields_[] = {
                DECLARE_GETSET_FIELD(t_QueryNodeProcessorImpl, queryConfigHandler),
                { NULL, NULL, NULL, NULL, NULL }
              };

              static PyMethodDef t_QueryNodeProcessorImpl__methods_[] = {
                DECLARE_METHOD(t_QueryNodeProcessorImpl, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_QueryNodeProcessorImpl, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_QueryNodeProcessorImpl, getQueryConfigHandler, METH_NOARGS),
                DECLARE_METHOD(t_QueryNodeProcessorImpl, process, METH_O),
                DECLARE_METHOD(t_QueryNodeProcessorImpl, setQueryConfigHandler, METH_O),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(QueryNodeProcessorImpl, t_QueryNodeProcessorImpl, ::java::lang::Object, QueryNodeProcessorImpl, t_QueryNodeProcessorImpl_init_, 0, 0, t_QueryNodeProcessorImpl__fields_, 0, 0);

              void t_QueryNodeProcessorImpl::install(PyObject *module)
              {
                installType(&PY_TYPE(QueryNodeProcessorImpl), module, "QueryNodeProcessorImpl", 0);
              }

              void t_QueryNodeProcessorImpl::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(QueryNodeProcessorImpl).tp_dict, "class_", make_descriptor(QueryNodeProcessorImpl::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(QueryNodeProcessorImpl).tp_dict, "wrapfn_", make_descriptor(t_QueryNodeProcessorImpl::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(QueryNodeProcessorImpl).tp_dict, "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_QueryNodeProcessorImpl_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, QueryNodeProcessorImpl::initializeClass, 1)))
                  return NULL;
                return t_QueryNodeProcessorImpl::wrap_Object(QueryNodeProcessorImpl(((t_QueryNodeProcessorImpl *) arg)->object.this$));
              }
              static PyObject *t_QueryNodeProcessorImpl_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, QueryNodeProcessorImpl::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_QueryNodeProcessorImpl_init_(t_QueryNodeProcessorImpl *self, PyObject *args, PyObject *kwds)
              {
                switch (PyTuple_GET_SIZE(args)) {
                 case 0:
                  {
                    QueryNodeProcessorImpl object((jobject) NULL);

                    INT_CALL(object = QueryNodeProcessorImpl());
                    self->object = object;
                    break;
                  }
                  goto err;
                 case 1:
                  {
                    ::org::apache::lucene::queryparser::flexible::core::config::QueryConfigHandler a0((jobject) NULL);
                    QueryNodeProcessorImpl object((jobject) NULL);

                    if (!parseArgs(args, "k", ::org::apache::lucene::queryparser::flexible::core::config::QueryConfigHandler::initializeClass, &a0))
                    {
                      INT_CALL(object = QueryNodeProcessorImpl(a0));
                      self->object = object;
                      break;
                    }
                  }
                 default:
                 err:
                  PyErr_SetArgsError((PyObject *) self, "__init__", args);
                  return -1;
                }

                return 0;
              }

              static PyObject *t_QueryNodeProcessorImpl_getQueryConfigHandler(t_QueryNodeProcessorImpl *self)
              {
                ::org::apache::lucene::queryparser::flexible::core::config::QueryConfigHandler result((jobject) NULL);
                OBJ_CALL(result = self->object.getQueryConfigHandler());
                return ::org::apache::lucene::queryparser::flexible::core::config::t_QueryConfigHandler::wrap_Object(result);
              }

              static PyObject *t_QueryNodeProcessorImpl_process(t_QueryNodeProcessorImpl *self, PyObject *arg)
              {
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode a0((jobject) NULL);
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode result((jobject) NULL);

                if (!parseArg(arg, "k", ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode::initializeClass, &a0))
                {
                  OBJ_CALL(result = self->object.process(a0));
                  return ::org::apache::lucene::queryparser::flexible::core::nodes::t_QueryNode::wrap_Object(result);
                }

                PyErr_SetArgsError((PyObject *) self, "process", arg);
                return NULL;
              }

              static PyObject *t_QueryNodeProcessorImpl_setQueryConfigHandler(t_QueryNodeProcessorImpl *self, PyObject *arg)
              {
                ::org::apache::lucene::queryparser::flexible::core::config::QueryConfigHandler a0((jobject) NULL);

                if (!parseArg(arg, "k", ::org::apache::lucene::queryparser::flexible::core::config::QueryConfigHandler::initializeClass, &a0))
                {
                  OBJ_CALL(self->object.setQueryConfigHandler(a0));
                  Py_RETURN_NONE;
                }

                PyErr_SetArgsError((PyObject *) self, "setQueryConfigHandler", arg);
                return NULL;
              }

              static PyObject *t_QueryNodeProcessorImpl_get__queryConfigHandler(t_QueryNodeProcessorImpl *self, void *data)
              {
                ::org::apache::lucene::queryparser::flexible::core::config::QueryConfigHandler value((jobject) NULL);
                OBJ_CALL(value = self->object.getQueryConfigHandler());
                return ::org::apache::lucene::queryparser::flexible::core::config::t_QueryConfigHandler::wrap_Object(value);
              }
              static int t_QueryNodeProcessorImpl_set__queryConfigHandler(t_QueryNodeProcessorImpl *self, PyObject *arg, void *data)
              {
                {
                  ::org::apache::lucene::queryparser::flexible::core::config::QueryConfigHandler value((jobject) NULL);
                  if (!parseArg(arg, "k", ::org::apache::lucene::queryparser::flexible::core::config::QueryConfigHandler::initializeClass, &value))
                  {
                    INT_CALL(self->object.setQueryConfigHandler(value));
                    return 0;
                  }
                }
                PyErr_SetArgsError((PyObject *) self, "queryConfigHandler", arg);
                return -1;
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/GroupQueryNode.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/queryparser/flexible/core/parser/EscapeQuerySyntax.h"
#include "java/lang/CloneNotSupportedException.h"
#include "java/lang/CharSequence.h"
#include "java/lang/String.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/QueryNode.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace nodes {

              ::java::lang::Class *GroupQueryNode::class$ = NULL;
              jmethodID *GroupQueryNode::mids$ = NULL;
              bool GroupQueryNode::live$ = false;

              jclass GroupQueryNode::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/core/nodes/GroupQueryNode");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_cc04aeef] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;)V");
                  mids$[mid_cloneTree_b387c5e6] = env->getMethodID(cls, "cloneTree", "()Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;");
                  mids$[mid_getChild_b387c5e6] = env->getMethodID(cls, "getChild", "()Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;");
                  mids$[mid_setChild_cc04aeef] = env->getMethodID(cls, "setChild", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;)V");
                  mids$[mid_toQueryString_99b8dfe1] = env->getMethodID(cls, "toQueryString", "(Lorg/apache/lucene/queryparser/flexible/core/parser/EscapeQuerySyntax;)Ljava/lang/CharSequence;");
                  mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              GroupQueryNode::GroupQueryNode(const ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode & a0) : ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNodeImpl(env->newObject(initializeClass, &mids$, mid_init$_cc04aeef, a0.this$)) {}

              ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode GroupQueryNode::cloneTree() const
              {
                return ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode(env->callObjectMethod(this$, mids$[mid_cloneTree_b387c5e6]));
              }

              ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode GroupQueryNode::getChild() const
              {
                return ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode(env->callObjectMethod(this$, mids$[mid_getChild_b387c5e6]));
              }

              void GroupQueryNode::setChild(const ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode & a0) const
              {
                env->callVoidMethod(this$, mids$[mid_setChild_cc04aeef], a0.this$);
              }

              ::java::lang::CharSequence GroupQueryNode::toQueryString(const ::org::apache::lucene::queryparser::flexible::core::parser::EscapeQuerySyntax & a0) const
              {
                return ::java::lang::CharSequence(env->callObjectMethod(this$, mids$[mid_toQueryString_99b8dfe1], a0.this$));
              }

              ::java::lang::String GroupQueryNode::toString() const
              {
                return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace nodes {
              static PyObject *t_GroupQueryNode_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_GroupQueryNode_instance_(PyTypeObject *type, PyObject *arg);
              static int t_GroupQueryNode_init_(t_GroupQueryNode *self, PyObject *args, PyObject *kwds);
              static PyObject *t_GroupQueryNode_cloneTree(t_GroupQueryNode *self, PyObject *args);
              static PyObject *t_GroupQueryNode_getChild(t_GroupQueryNode *self);
              static PyObject *t_GroupQueryNode_setChild(t_GroupQueryNode *self, PyObject *arg);
              static PyObject *t_GroupQueryNode_toQueryString(t_GroupQueryNode *self, PyObject *args);
              static PyObject *t_GroupQueryNode_toString(t_GroupQueryNode *self, PyObject *args);
              static PyObject *t_GroupQueryNode_get__child(t_GroupQueryNode *self, void *data);
              static int t_GroupQueryNode_set__child(t_GroupQueryNode *self, PyObject *arg, void *data);
              static PyGetSetDef t_GroupQueryNode__fields_[] = {
                DECLARE_GETSET_FIELD(t_GroupQueryNode, child),
                { NULL, NULL, NULL, NULL, NULL }
              };

              static PyMethodDef t_GroupQueryNode__methods_[] = {
                DECLARE_METHOD(t_GroupQueryNode, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_GroupQueryNode, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_GroupQueryNode, cloneTree, METH_VARARGS),
                DECLARE_METHOD(t_GroupQueryNode, getChild, METH_NOARGS),
                DECLARE_METHOD(t_GroupQueryNode, setChild, METH_O),
                DECLARE_METHOD(t_GroupQueryNode, toQueryString, METH_VARARGS),
                DECLARE_METHOD(t_GroupQueryNode, toString, METH_VARARGS),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(GroupQueryNode, t_GroupQueryNode, ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNodeImpl, GroupQueryNode, t_GroupQueryNode_init_, 0, 0, t_GroupQueryNode__fields_, 0, 0);

              void t_GroupQueryNode::install(PyObject *module)
              {
                installType(&PY_TYPE(GroupQueryNode), module, "GroupQueryNode", 0);
              }

              void t_GroupQueryNode::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(GroupQueryNode).tp_dict, "class_", make_descriptor(GroupQueryNode::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(GroupQueryNode).tp_dict, "wrapfn_", make_descriptor(t_GroupQueryNode::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(GroupQueryNode).tp_dict, "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_GroupQueryNode_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, GroupQueryNode::initializeClass, 1)))
                  return NULL;
                return t_GroupQueryNode::wrap_Object(GroupQueryNode(((t_GroupQueryNode *) arg)->object.this$));
              }
              static PyObject *t_GroupQueryNode_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, GroupQueryNode::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_GroupQueryNode_init_(t_GroupQueryNode *self, PyObject *args, PyObject *kwds)
              {
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode a0((jobject) NULL);
                GroupQueryNode object((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode::initializeClass, &a0))
                {
                  INT_CALL(object = GroupQueryNode(a0));
                  self->object = object;
                }
                else
                {
                  PyErr_SetArgsError((PyObject *) self, "__init__", args);
                  return -1;
                }

                return 0;
              }

              static PyObject *t_GroupQueryNode_cloneTree(t_GroupQueryNode *self, PyObject *args)
              {
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode result((jobject) NULL);

                if (!parseArgs(args, ""))
                {
                  OBJ_CALL(result = self->object.cloneTree());
                  return ::org::apache::lucene::queryparser::flexible::core::nodes::t_QueryNode::wrap_Object(result);
                }

                return callSuper(&PY_TYPE(GroupQueryNode), (PyObject *) self, "cloneTree", args, 2);
              }

              static PyObject *t_GroupQueryNode_getChild(t_GroupQueryNode *self)
              {
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode result((jobject) NULL);
                OBJ_CALL(result = self->object.getChild());
                return ::org::apache::lucene::queryparser::flexible::core::nodes::t_QueryNode::wrap_Object(result);
              }

              static PyObject *t_GroupQueryNode_setChild(t_GroupQueryNode *self, PyObject *arg)
              {
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode a0((jobject) NULL);

                if (!parseArg(arg, "k", ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode::initializeClass, &a0))
                {
                  OBJ_CALL(self->object.setChild(a0));
                  Py_RETURN_NONE;
                }

                PyErr_SetArgsError((PyObject *) self, "setChild", arg);
                return NULL;
              }

              static PyObject *t_GroupQueryNode_toQueryString(t_GroupQueryNode *self, PyObject *args)
              {
                ::org::apache::lucene::queryparser::flexible::core::parser::EscapeQuerySyntax a0((jobject) NULL);
                ::java::lang::CharSequence result((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::queryparser::flexible::core::parser::EscapeQuerySyntax::initializeClass, &a0))
                {
                  OBJ_CALL(result = self->object.toQueryString(a0));
                  return ::java::lang::t_CharSequence::wrap_Object(result);
                }

                return callSuper(&PY_TYPE(GroupQueryNode), (PyObject *) self, "toQueryString", args, 2);
              }

              static PyObject *t_GroupQueryNode_toString(t_GroupQueryNode *self, PyObject *args)
              {
                ::java::lang::String result((jobject) NULL);

                if (!parseArgs(args, ""))
                {
                  OBJ_CALL(result = self->object.toString());
                  return j2p(result);
                }

                return callSuper(&PY_TYPE(GroupQueryNode), (PyObject *) self, "toString", args, 2);
              }

              static PyObject *t_GroupQueryNode_get__child(t_GroupQueryNode *self, void *data)
              {
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode value((jobject) NULL);
                OBJ_CALL(value = self->object.getChild());
                return ::org::apache::lucene::queryparser::flexible::core::nodes::t_QueryNode::wrap_Object(value);
              }
              static int t_GroupQueryNode_set__child(t_GroupQueryNode *self, PyObject *arg, void *data)
              {
                {
                  ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode value((jobject) NULL);
                  if (!parseArg(arg, "k", ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode::initializeClass, &value))
                  {
                    INT_CALL(self->object.setChild(value));
                    return 0;
                  }
                }
                PyErr_SetArgsError((PyObject *) self, "child", arg);
                return -1;
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/NumericUtils$LongRangeBuilder.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *NumericUtils$LongRangeBuilder::class$ = NULL;
        jmethodID *NumericUtils$LongRangeBuilder::mids$ = NULL;
        bool NumericUtils$LongRangeBuilder::live$ = false;

        jclass NumericUtils$LongRangeBuilder::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/NumericUtils$LongRangeBuilder");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_addRange_594e5ee6] = env->getMethodID(cls, "addRange", "(Lorg/apache/lucene/util/BytesRef;Lorg/apache/lucene/util/BytesRef;)V");
            mids$[mid_addRange_42663baa] = env->getMethodID(cls, "addRange", "(JJI)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        NumericUtils$LongRangeBuilder::NumericUtils$LongRangeBuilder() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        void NumericUtils$LongRangeBuilder::addRange(const ::org::apache::lucene::util::BytesRef & a0, const ::org::apache::lucene::util::BytesRef & a1) const
        {
          env->callVoidMethod(this$, mids$[mid_addRange_594e5ee6], a0.this$, a1.this$);
        }

        void NumericUtils$LongRangeBuilder::addRange(jlong a0, jlong a1, jint a2) const
        {
          env->callVoidMethod(this$, mids$[mid_addRange_42663baa], a0, a1, a2);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_NumericUtils$LongRangeBuilder_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_NumericUtils$LongRangeBuilder_instance_(PyTypeObject *type, PyObject *arg);
        static int t_NumericUtils$LongRangeBuilder_init_(t_NumericUtils$LongRangeBuilder *self, PyObject *args, PyObject *kwds);
        static PyObject *t_NumericUtils$LongRangeBuilder_addRange(t_NumericUtils$LongRangeBuilder *self, PyObject *args);

        static PyMethodDef t_NumericUtils$LongRangeBuilder__methods_[] = {
          DECLARE_METHOD(t_NumericUtils$LongRangeBuilder, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_NumericUtils$LongRangeBuilder, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_NumericUtils$LongRangeBuilder, addRange, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(NumericUtils$LongRangeBuilder, t_NumericUtils$LongRangeBuilder, ::java::lang::Object, NumericUtils$LongRangeBuilder, t_NumericUtils$LongRangeBuilder_init_, 0, 0, 0, 0, 0);

        void t_NumericUtils$LongRangeBuilder::install(PyObject *module)
        {
          installType(&PY_TYPE(NumericUtils$LongRangeBuilder), module, "NumericUtils$LongRangeBuilder", 0);
        }

        void t_NumericUtils$LongRangeBuilder::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(NumericUtils$LongRangeBuilder).tp_dict, "class_", make_descriptor(NumericUtils$LongRangeBuilder::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(NumericUtils$LongRangeBuilder).tp_dict, "wrapfn_", make_descriptor(t_NumericUtils$LongRangeBuilder::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(NumericUtils$LongRangeBuilder).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_NumericUtils$LongRangeBuilder_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, NumericUtils$LongRangeBuilder::initializeClass, 1)))
            return NULL;
          return t_NumericUtils$LongRangeBuilder::wrap_Object(NumericUtils$LongRangeBuilder(((t_NumericUtils$LongRangeBuilder *) arg)->object.this$));
        }
        static PyObject *t_NumericUtils$LongRangeBuilder_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, NumericUtils$LongRangeBuilder::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_NumericUtils$LongRangeBuilder_init_(t_NumericUtils$LongRangeBuilder *self, PyObject *args, PyObject *kwds)
        {
          NumericUtils$LongRangeBuilder object((jobject) NULL);

          INT_CALL(object = NumericUtils$LongRangeBuilder());
          self->object = object;

          return 0;
        }

        static PyObject *t_NumericUtils$LongRangeBuilder_addRange(t_NumericUtils$LongRangeBuilder *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 2:
            {
              ::org::apache::lucene::util::BytesRef a0((jobject) NULL);
              ::org::apache::lucene::util::BytesRef a1((jobject) NULL);

              if (!parseArgs(args, "kk", ::org::apache::lucene::util::BytesRef::initializeClass, ::org::apache::lucene::util::BytesRef::initializeClass, &a0, &a1))
              {
                OBJ_CALL(self->object.addRange(a0, a1));
                Py_RETURN_NONE;
              }
            }
            break;
           case 3:
            {
              jlong a0;
              jlong a1;
              jint a2;

              if (!parseArgs(args, "JJI", &a0, &a1, &a2))
              {
                OBJ_CALL(self->object.addRange(a0, a1, a2));
                Py_RETURN_NONE;
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "addRange", args);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/suggest/fst/FSTCompletionBuilder.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "org/apache/lucene/search/suggest/fst/BytesRefSorter.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/search/suggest/fst/FSTCompletion.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace suggest {
          namespace fst {

            ::java::lang::Class *FSTCompletionBuilder::class$ = NULL;
            jmethodID *FSTCompletionBuilder::mids$ = NULL;
            bool FSTCompletionBuilder::live$ = false;
            jint FSTCompletionBuilder::DEFAULT_BUCKETS = (jint) 0;

            jclass FSTCompletionBuilder::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/search/suggest/fst/FSTCompletionBuilder");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
                mids$[mid_init$_4a786a26] = env->getMethodID(cls, "<init>", "(ILorg/apache/lucene/search/suggest/fst/BytesRefSorter;I)V");
                mids$[mid_add_738fc2ce] = env->getMethodID(cls, "add", "(Lorg/apache/lucene/util/BytesRef;I)V");
                mids$[mid_build_18e9287a] = env->getMethodID(cls, "build", "()Lorg/apache/lucene/search/suggest/fst/FSTCompletion;");

                class$ = (::java::lang::Class *) new JObject(cls);
                cls = (jclass) class$->this$;

                DEFAULT_BUCKETS = env->getStaticIntField(cls, "DEFAULT_BUCKETS");
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            FSTCompletionBuilder::FSTCompletionBuilder() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

            FSTCompletionBuilder::FSTCompletionBuilder(jint a0, const ::org::apache::lucene::search::suggest::fst::BytesRefSorter & a1, jint a2) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_4a786a26, a0, a1.this$, a2)) {}

            void FSTCompletionBuilder::add(const ::org::apache::lucene::util::BytesRef & a0, jint a1) const
            {
              env->callVoidMethod(this$, mids$[mid_add_738fc2ce], a0.this$, a1);
            }

            ::org::apache::lucene::search::suggest::fst::FSTCompletion FSTCompletionBuilder::build() const
            {
              return ::org::apache::lucene::search::suggest::fst::FSTCompletion(env->callObjectMethod(this$, mids$[mid_build_18e9287a]));
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace suggest {
          namespace fst {
            static PyObject *t_FSTCompletionBuilder_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_FSTCompletionBuilder_instance_(PyTypeObject *type, PyObject *arg);
            static int t_FSTCompletionBuilder_init_(t_FSTCompletionBuilder *self, PyObject *args, PyObject *kwds);
            static PyObject *t_FSTCompletionBuilder_add(t_FSTCompletionBuilder *self, PyObject *args);
            static PyObject *t_FSTCompletionBuilder_build(t_FSTCompletionBuilder *self);

            static PyMethodDef t_FSTCompletionBuilder__methods_[] = {
              DECLARE_METHOD(t_FSTCompletionBuilder, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_FSTCompletionBuilder, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_FSTCompletionBuilder, add, METH_VARARGS),
              DECLARE_METHOD(t_FSTCompletionBuilder, build, METH_NOARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(FSTCompletionBuilder, t_FSTCompletionBuilder, ::java::lang::Object, FSTCompletionBuilder, t_FSTCompletionBuilder_init_, 0, 0, 0, 0, 0);

            void t_FSTCompletionBuilder::install(PyObject *module)
            {
              installType(&PY_TYPE(FSTCompletionBuilder), module, "FSTCompletionBuilder", 0);
            }

            void t_FSTCompletionBuilder::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(FSTCompletionBuilder).tp_dict, "class_", make_descriptor(FSTCompletionBuilder::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(FSTCompletionBuilder).tp_dict, "wrapfn_", make_descriptor(t_FSTCompletionBuilder::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(FSTCompletionBuilder).tp_dict, "boxfn_", make_descriptor(boxObject));
              env->getClass(FSTCompletionBuilder::initializeClass);
              PyDict_SetItemString(PY_TYPE(FSTCompletionBuilder).tp_dict, "DEFAULT_BUCKETS", make_descriptor(FSTCompletionBuilder::DEFAULT_BUCKETS));
            }

            static PyObject *t_FSTCompletionBuilder_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, FSTCompletionBuilder::initializeClass, 1)))
                return NULL;
              return t_FSTCompletionBuilder::wrap_Object(FSTCompletionBuilder(((t_FSTCompletionBuilder *) arg)->object.this$));
            }
            static PyObject *t_FSTCompletionBuilder_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, FSTCompletionBuilder::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_FSTCompletionBuilder_init_(t_FSTCompletionBuilder *self, PyObject *args, PyObject *kwds)
            {
              switch (PyTuple_GET_SIZE(args)) {
               case 0:
                {
                  FSTCompletionBuilder object((jobject) NULL);

                  INT_CALL(object = FSTCompletionBuilder());
                  self->object = object;
                  break;
                }
                goto err;
               case 3:
                {
                  jint a0;
                  ::org::apache::lucene::search::suggest::fst::BytesRefSorter a1((jobject) NULL);
                  jint a2;
                  FSTCompletionBuilder object((jobject) NULL);

                  if (!parseArgs(args, "IkI", ::org::apache::lucene::search::suggest::fst::BytesRefSorter::initializeClass, &a0, &a1, &a2))
                  {
                    INT_CALL(object = FSTCompletionBuilder(a0, a1, a2));
                    self->object = object;
                    break;
                  }
                }
               default:
               err:
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_FSTCompletionBuilder_add(t_FSTCompletionBuilder *self, PyObject *args)
            {
              ::org::apache::lucene::util::BytesRef a0((jobject) NULL);
              jint a1;

              if (!parseArgs(args, "kI", ::org::apache::lucene::util::BytesRef::initializeClass, &a0, &a1))
              {
                OBJ_CALL(self->object.add(a0, a1));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "add", args);
              return NULL;
            }

            static PyObject *t_FSTCompletionBuilder_build(t_FSTCompletionBuilder *self)
            {
              ::org::apache::lucene::search::suggest::fst::FSTCompletion result((jobject) NULL);
              OBJ_CALL(result = self->object.build());
              return ::org::apache::lucene::search::suggest::fst::t_FSTCompletion::wrap_Object(result);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/core/StopFilterFactory.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "java/io/IOException.h"
#include "java/util/Map.h"
#include "java/lang/String.h"
#include "org/apache/lucene/analysis/util/ResourceLoader.h"
#include "org/apache/lucene/analysis/util/ResourceLoaderAware.h"
#include "org/apache/lucene/analysis/util/CharArraySet.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace core {

          ::java::lang::Class *StopFilterFactory::class$ = NULL;
          jmethodID *StopFilterFactory::mids$ = NULL;
          bool StopFilterFactory::live$ = false;
          ::java::lang::String *StopFilterFactory::FORMAT_SNOWBALL = NULL;
          ::java::lang::String *StopFilterFactory::FORMAT_WORDSET = NULL;

          jclass StopFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/core/StopFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4c9e2b1c] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_a65cd6ab] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/TokenStream;");
              mids$[mid_getStopWords_d2d3505c] = env->getMethodID(cls, "getStopWords", "()Lorg/apache/lucene/analysis/util/CharArraySet;");
              mids$[mid_inform_d6a4bc97] = env->getMethodID(cls, "inform", "(Lorg/apache/lucene/analysis/util/ResourceLoader;)V");
              mids$[mid_isEnablePositionIncrements_54c6a16a] = env->getMethodID(cls, "isEnablePositionIncrements", "()Z");
              mids$[mid_isIgnoreCase_54c6a16a] = env->getMethodID(cls, "isIgnoreCase", "()Z");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              FORMAT_SNOWBALL = new ::java::lang::String(env->getStaticObjectField(cls, "FORMAT_SNOWBALL", "Ljava/lang/String;"));
              FORMAT_WORDSET = new ::java::lang::String(env->getStaticObjectField(cls, "FORMAT_WORDSET", "Ljava/lang/String;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          StopFilterFactory::StopFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_4c9e2b1c, a0.this$)) {}

          ::org::apache::lucene::analysis::TokenStream StopFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::TokenStream(env->callObjectMethod(this$, mids$[mid_create_a65cd6ab], a0.this$));
          }

          ::org::apache::lucene::analysis::util::CharArraySet StopFilterFactory::getStopWords() const
          {
            return ::org::apache::lucene::analysis::util::CharArraySet(env->callObjectMethod(this$, mids$[mid_getStopWords_d2d3505c]));
          }

          void StopFilterFactory::inform(const ::org::apache::lucene::analysis::util::ResourceLoader & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_inform_d6a4bc97], a0.this$);
          }

          jboolean StopFilterFactory::isEnablePositionIncrements() const
          {
            return env->callBooleanMethod(this$, mids$[mid_isEnablePositionIncrements_54c6a16a]);
          }

          jboolean StopFilterFactory::isIgnoreCase() const
          {
            return env->callBooleanMethod(this$, mids$[mid_isIgnoreCase_54c6a16a]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace core {
          static PyObject *t_StopFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_StopFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_StopFilterFactory_init_(t_StopFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_StopFilterFactory_create(t_StopFilterFactory *self, PyObject *args);
          static PyObject *t_StopFilterFactory_getStopWords(t_StopFilterFactory *self);
          static PyObject *t_StopFilterFactory_inform(t_StopFilterFactory *self, PyObject *arg);
          static PyObject *t_StopFilterFactory_isEnablePositionIncrements(t_StopFilterFactory *self);
          static PyObject *t_StopFilterFactory_isIgnoreCase(t_StopFilterFactory *self);
          static PyObject *t_StopFilterFactory_get__enablePositionIncrements(t_StopFilterFactory *self, void *data);
          static PyObject *t_StopFilterFactory_get__ignoreCase(t_StopFilterFactory *self, void *data);
          static PyObject *t_StopFilterFactory_get__stopWords(t_StopFilterFactory *self, void *data);
          static PyGetSetDef t_StopFilterFactory__fields_[] = {
            DECLARE_GET_FIELD(t_StopFilterFactory, enablePositionIncrements),
            DECLARE_GET_FIELD(t_StopFilterFactory, ignoreCase),
            DECLARE_GET_FIELD(t_StopFilterFactory, stopWords),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_StopFilterFactory__methods_[] = {
            DECLARE_METHOD(t_StopFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_StopFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_StopFilterFactory, create, METH_VARARGS),
            DECLARE_METHOD(t_StopFilterFactory, getStopWords, METH_NOARGS),
            DECLARE_METHOD(t_StopFilterFactory, inform, METH_O),
            DECLARE_METHOD(t_StopFilterFactory, isEnablePositionIncrements, METH_NOARGS),
            DECLARE_METHOD(t_StopFilterFactory, isIgnoreCase, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(StopFilterFactory, t_StopFilterFactory, ::org::apache::lucene::analysis::util::TokenFilterFactory, StopFilterFactory, t_StopFilterFactory_init_, 0, 0, t_StopFilterFactory__fields_, 0, 0);

          void t_StopFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(StopFilterFactory), module, "StopFilterFactory", 0);
          }

          void t_StopFilterFactory::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(StopFilterFactory).tp_dict, "class_", make_descriptor(StopFilterFactory::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(StopFilterFactory).tp_dict, "wrapfn_", make_descriptor(t_StopFilterFactory::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(StopFilterFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(StopFilterFactory::initializeClass);
            PyDict_SetItemString(PY_TYPE(StopFilterFactory).tp_dict, "FORMAT_SNOWBALL", make_descriptor(j2p(*StopFilterFactory::FORMAT_SNOWBALL)));
            PyDict_SetItemString(PY_TYPE(StopFilterFactory).tp_dict, "FORMAT_WORDSET", make_descriptor(j2p(*StopFilterFactory::FORMAT_WORDSET)));
          }

          static PyObject *t_StopFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, StopFilterFactory::initializeClass, 1)))
              return NULL;
            return t_StopFilterFactory::wrap_Object(StopFilterFactory(((t_StopFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_StopFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, StopFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_StopFilterFactory_init_(t_StopFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            StopFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = StopFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_StopFilterFactory_create(t_StopFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::TokenStream result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::t_TokenStream::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(StopFilterFactory), (PyObject *) self, "create", args, 2);
          }

          static PyObject *t_StopFilterFactory_getStopWords(t_StopFilterFactory *self)
          {
            ::org::apache::lucene::analysis::util::CharArraySet result((jobject) NULL);
            OBJ_CALL(result = self->object.getStopWords());
            return ::org::apache::lucene::analysis::util::t_CharArraySet::wrap_Object(result);
          }

          static PyObject *t_StopFilterFactory_inform(t_StopFilterFactory *self, PyObject *arg)
          {
            ::org::apache::lucene::analysis::util::ResourceLoader a0((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::analysis::util::ResourceLoader::initializeClass, &a0))
            {
              OBJ_CALL(self->object.inform(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "inform", arg);
            return NULL;
          }

          static PyObject *t_StopFilterFactory_isEnablePositionIncrements(t_StopFilterFactory *self)
          {
            jboolean result;
            OBJ_CALL(result = self->object.isEnablePositionIncrements());
            Py_RETURN_BOOL(result);
          }

          static PyObject *t_StopFilterFactory_isIgnoreCase(t_StopFilterFactory *self)
          {
            jboolean result;
            OBJ_CALL(result = self->object.isIgnoreCase());
            Py_RETURN_BOOL(result);
          }

          static PyObject *t_StopFilterFactory_get__enablePositionIncrements(t_StopFilterFactory *self, void *data)
          {
            jboolean value;
            OBJ_CALL(value = self->object.isEnablePositionIncrements());
            Py_RETURN_BOOL(value);
          }

          static PyObject *t_StopFilterFactory_get__ignoreCase(t_StopFilterFactory *self, void *data)
          {
            jboolean value;
            OBJ_CALL(value = self->object.isIgnoreCase());
            Py_RETURN_BOOL(value);
          }

          static PyObject *t_StopFilterFactory_get__stopWords(t_StopFilterFactory *self, void *data)
          {
            ::org::apache::lucene::analysis::util::CharArraySet value((jobject) NULL);
            OBJ_CALL(value = self->object.getStopWords());
            return ::org::apache::lucene::analysis::util::t_CharArraySet::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queries/function/valuesource/ScaleFloatFunction.h"
#include "org/apache/lucene/queries/function/FunctionValues.h"
#include "java/lang/Class.h"
#include "java/lang/Object.h"
#include "java/io/IOException.h"
#include "java/util/Map.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "java/lang/String.h"
#include "org/apache/lucene/search/IndexSearcher.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {

            ::java::lang::Class *ScaleFloatFunction::class$ = NULL;
            jmethodID *ScaleFloatFunction::mids$ = NULL;
            bool ScaleFloatFunction::live$ = false;

            jclass ScaleFloatFunction::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queries/function/valuesource/ScaleFloatFunction");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_bdda54b0] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/queries/function/ValueSource;FF)V");
                mids$[mid_createWeight_1b6125ba] = env->getMethodID(cls, "createWeight", "(Ljava/util/Map;Lorg/apache/lucene/search/IndexSearcher;)V");
                mids$[mid_description_14c7b5c5] = env->getMethodID(cls, "description", "()Ljava/lang/String;");
                mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
                mids$[mid_getValues_4c566485] = env->getMethodID(cls, "getValues", "(Ljava/util/Map;Lorg/apache/lucene/index/AtomicReaderContext;)Lorg/apache/lucene/queries/function/FunctionValues;");
                mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            ScaleFloatFunction::ScaleFloatFunction(const ::org::apache::lucene::queries::function::ValueSource & a0, jfloat a1, jfloat a2) : ::org::apache::lucene::queries::function::ValueSource(env->newObject(initializeClass, &mids$, mid_init$_bdda54b0, a0.this$, a1, a2)) {}

            void ScaleFloatFunction::createWeight(const ::java::util::Map & a0, const ::org::apache::lucene::search::IndexSearcher & a1) const
            {
              env->callVoidMethod(this$, mids$[mid_createWeight_1b6125ba], a0.this$, a1.this$);
            }

            ::java::lang::String ScaleFloatFunction::description() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_description_14c7b5c5]));
            }

            jboolean ScaleFloatFunction::equals(const ::java::lang::Object & a0) const
            {
              return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
            }

            ::org::apache::lucene::queries::function::FunctionValues ScaleFloatFunction::getValues(const ::java::util::Map & a0, const ::org::apache::lucene::index::AtomicReaderContext & a1) const
            {
              return ::org::apache::lucene::queries::function::FunctionValues(env->callObjectMethod(this$, mids$[mid_getValues_4c566485], a0.this$, a1.this$));
            }

            jint ScaleFloatFunction::hashCode() const
            {
              return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {
            static PyObject *t_ScaleFloatFunction_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_ScaleFloatFunction_instance_(PyTypeObject *type, PyObject *arg);
            static int t_ScaleFloatFunction_init_(t_ScaleFloatFunction *self, PyObject *args, PyObject *kwds);
            static PyObject *t_ScaleFloatFunction_createWeight(t_ScaleFloatFunction *self, PyObject *args);
            static PyObject *t_ScaleFloatFunction_description(t_ScaleFloatFunction *self, PyObject *args);
            static PyObject *t_ScaleFloatFunction_equals(t_ScaleFloatFunction *self, PyObject *args);
            static PyObject *t_ScaleFloatFunction_getValues(t_ScaleFloatFunction *self, PyObject *args);
            static PyObject *t_ScaleFloatFunction_hashCode(t_ScaleFloatFunction *self, PyObject *args);

            static PyMethodDef t_ScaleFloatFunction__methods_[] = {
              DECLARE_METHOD(t_ScaleFloatFunction, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_ScaleFloatFunction, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_ScaleFloatFunction, createWeight, METH_VARARGS),
              DECLARE_METHOD(t_ScaleFloatFunction, description, METH_VARARGS),
              DECLARE_METHOD(t_ScaleFloatFunction, equals, METH_VARARGS),
              DECLARE_METHOD(t_ScaleFloatFunction, getValues, METH_VARARGS),
              DECLARE_METHOD(t_ScaleFloatFunction, hashCode, METH_VARARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(ScaleFloatFunction, t_ScaleFloatFunction, ::org::apache::lucene::queries::function::ValueSource, ScaleFloatFunction, t_ScaleFloatFunction_init_, 0, 0, 0, 0, 0);

            void t_ScaleFloatFunction::install(PyObject *module)
            {
              installType(&PY_TYPE(ScaleFloatFunction), module, "ScaleFloatFunction", 0);
            }

            void t_ScaleFloatFunction::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(ScaleFloatFunction).tp_dict, "class_", make_descriptor(ScaleFloatFunction::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(ScaleFloatFunction).tp_dict, "wrapfn_", make_descriptor(t_ScaleFloatFunction::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(ScaleFloatFunction).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_ScaleFloatFunction_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, ScaleFloatFunction::initializeClass, 1)))
                return NULL;
              return t_ScaleFloatFunction::wrap_Object(ScaleFloatFunction(((t_ScaleFloatFunction *) arg)->object.this$));
            }
            static PyObject *t_ScaleFloatFunction_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, ScaleFloatFunction::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_ScaleFloatFunction_init_(t_ScaleFloatFunction *self, PyObject *args, PyObject *kwds)
            {
              ::org::apache::lucene::queries::function::ValueSource a0((jobject) NULL);
              jfloat a1;
              jfloat a2;
              ScaleFloatFunction object((jobject) NULL);

              if (!parseArgs(args, "kFF", ::org::apache::lucene::queries::function::ValueSource::initializeClass, &a0, &a1, &a2))
              {
                INT_CALL(object = ScaleFloatFunction(a0, a1, a2));
                self->object = object;
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_ScaleFloatFunction_createWeight(t_ScaleFloatFunction *self, PyObject *args)
            {
              ::java::util::Map a0((jobject) NULL);
              PyTypeObject **p0;
              ::org::apache::lucene::search::IndexSearcher a1((jobject) NULL);

              if (!parseArgs(args, "Kk", ::java::util::Map::initializeClass, ::org::apache::lucene::search::IndexSearcher::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_, &a1))
              {
                OBJ_CALL(self->object.createWeight(a0, a1));
                Py_RETURN_NONE;
              }

              return callSuper(&PY_TYPE(ScaleFloatFunction), (PyObject *) self, "createWeight", args, 2);
            }

            static PyObject *t_ScaleFloatFunction_description(t_ScaleFloatFunction *self, PyObject *args)
            {
              ::java::lang::String result((jobject) NULL);

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.description());
                return j2p(result);
              }

              return callSuper(&PY_TYPE(ScaleFloatFunction), (PyObject *) self, "description", args, 2);
            }

            static PyObject *t_ScaleFloatFunction_equals(t_ScaleFloatFunction *self, PyObject *args)
            {
              ::java::lang::Object a0((jobject) NULL);
              jboolean result;

              if (!parseArgs(args, "o", &a0))
              {
                OBJ_CALL(result = self->object.equals(a0));
                Py_RETURN_BOOL(result);
              }

              return callSuper(&PY_TYPE(ScaleFloatFunction), (PyObject *) self, "equals", args, 2);
            }

            static PyObject *t_ScaleFloatFunction_getValues(t_ScaleFloatFunction *self, PyObject *args)
            {
              ::java::util::Map a0((jobject) NULL);
              PyTypeObject **p0;
              ::org::apache::lucene::index::AtomicReaderContext a1((jobject) NULL);
              ::org::apache::lucene::queries::function::FunctionValues result((jobject) NULL);

              if (!parseArgs(args, "Kk", ::java::util::Map::initializeClass, ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_, &a1))
              {
                OBJ_CALL(result = self->object.getValues(a0, a1));
                return ::org::apache::lucene::queries::function::t_FunctionValues::wrap_Object(result);
              }

              return callSuper(&PY_TYPE(ScaleFloatFunction), (PyObject *) self, "getValues", args, 2);
            }

            static PyObject *t_ScaleFloatFunction_hashCode(t_ScaleFloatFunction *self, PyObject *args)
            {
              jint result;

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.hashCode());
                return PyInt_FromLong((long) result);
              }

              return callSuper(&PY_TYPE(ScaleFloatFunction), (PyObject *) self, "hashCode", args, 2);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/SortedNumericSelector.h"
#include "org/apache/lucene/index/NumericDocValues.h"
#include "org/apache/lucene/search/SortedNumericSelector$Type.h"
#include "org/apache/lucene/search/SortField$Type.h"
#include "org/apache/lucene/index/SortedNumericDocValues.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *SortedNumericSelector::class$ = NULL;
        jmethodID *SortedNumericSelector::mids$ = NULL;
        bool SortedNumericSelector::live$ = false;

        jclass SortedNumericSelector::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/SortedNumericSelector");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_wrap_d573c861] = env->getStaticMethodID(cls, "wrap", "(Lorg/apache/lucene/index/SortedNumericDocValues;Lorg/apache/lucene/search/SortedNumericSelector$Type;Lorg/apache/lucene/search/SortField$Type;)Lorg/apache/lucene/index/NumericDocValues;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        SortedNumericSelector::SortedNumericSelector() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        ::org::apache::lucene::index::NumericDocValues SortedNumericSelector::wrap(const ::org::apache::lucene::index::SortedNumericDocValues & a0, const ::org::apache::lucene::search::SortedNumericSelector$Type & a1, const ::org::apache::lucene::search::SortField$Type & a2)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::index::NumericDocValues(env->callStaticObjectMethod(cls, mids$[mid_wrap_d573c861], a0.this$, a1.this$, a2.this$));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_SortedNumericSelector_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_SortedNumericSelector_instance_(PyTypeObject *type, PyObject *arg);
        static int t_SortedNumericSelector_init_(t_SortedNumericSelector *self, PyObject *args, PyObject *kwds);
        static PyObject *t_SortedNumericSelector_wrap(PyTypeObject *type, PyObject *args);

        static PyMethodDef t_SortedNumericSelector__methods_[] = {
          DECLARE_METHOD(t_SortedNumericSelector, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SortedNumericSelector, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SortedNumericSelector, wrap, METH_VARARGS | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(SortedNumericSelector, t_SortedNumericSelector, ::java::lang::Object, SortedNumericSelector, t_SortedNumericSelector_init_, 0, 0, 0, 0, 0);

        void t_SortedNumericSelector::install(PyObject *module)
        {
          installType(&PY_TYPE(SortedNumericSelector), module, "SortedNumericSelector", 0);
          PyDict_SetItemString(PY_TYPE(SortedNumericSelector).tp_dict, "Type", make_descriptor(&PY_TYPE(SortedNumericSelector$Type)));
        }

        void t_SortedNumericSelector::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(SortedNumericSelector).tp_dict, "class_", make_descriptor(SortedNumericSelector::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(SortedNumericSelector).tp_dict, "wrapfn_", make_descriptor(t_SortedNumericSelector::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(SortedNumericSelector).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_SortedNumericSelector_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, SortedNumericSelector::initializeClass, 1)))
            return NULL;
          return t_SortedNumericSelector::wrap_Object(SortedNumericSelector(((t_SortedNumericSelector *) arg)->object.this$));
        }
        static PyObject *t_SortedNumericSelector_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, SortedNumericSelector::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_SortedNumericSelector_init_(t_SortedNumericSelector *self, PyObject *args, PyObject *kwds)
        {
          SortedNumericSelector object((jobject) NULL);

          INT_CALL(object = SortedNumericSelector());
          self->object = object;

          return 0;
        }

        static PyObject *t_SortedNumericSelector_wrap(PyTypeObject *type, PyObject *args)
        {
          ::org::apache::lucene::index::SortedNumericDocValues a0((jobject) NULL);
          ::org::apache::lucene::search::SortedNumericSelector$Type a1((jobject) NULL);
          PyTypeObject **p1;
          ::org::apache::lucene::search::SortField$Type a2((jobject) NULL);
          PyTypeObject **p2;
          ::org::apache::lucene::index::NumericDocValues result((jobject) NULL);

          if (!parseArgs(args, "kKK", ::org::apache::lucene::index::SortedNumericDocValues::initializeClass, ::org::apache::lucene::search::SortedNumericSelector$Type::initializeClass, ::org::apache::lucene::search::SortField$Type::initializeClass, &a0, &a1, &p1, ::org::apache::lucene::search::t_SortedNumericSelector$Type::parameters_, &a2, &p2, ::org::apache::lucene::search::t_SortField$Type::parameters_))
          {
            OBJ_CALL(result = ::org::apache::lucene::search::SortedNumericSelector::wrap(a0, a1, a2));
            return ::org::apache::lucene::index::t_NumericDocValues::wrap_Object(result);
          }

          PyErr_SetArgsError(type, "wrap", args);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/similarities/Distribution.h"
#include "org/apache/lucene/search/similarities/BasicStats.h"
#include "java/lang/String.h"
#include "org/apache/lucene/search/Explanation.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace similarities {

          ::java::lang::Class *Distribution::class$ = NULL;
          jmethodID *Distribution::mids$ = NULL;
          bool Distribution::live$ = false;

          jclass Distribution::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/similarities/Distribution");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_explain_aa9c2b5b] = env->getMethodID(cls, "explain", "(Lorg/apache/lucene/search/similarities/BasicStats;FF)Lorg/apache/lucene/search/Explanation;");
              mids$[mid_score_63482206] = env->getMethodID(cls, "score", "(Lorg/apache/lucene/search/similarities/BasicStats;FF)F");
              mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          Distribution::Distribution() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          ::org::apache::lucene::search::Explanation Distribution::explain(const ::org::apache::lucene::search::similarities::BasicStats & a0, jfloat a1, jfloat a2) const
          {
            return ::org::apache::lucene::search::Explanation(env->callObjectMethod(this$, mids$[mid_explain_aa9c2b5b], a0.this$, a1, a2));
          }

          jfloat Distribution::score(const ::org::apache::lucene::search::similarities::BasicStats & a0, jfloat a1, jfloat a2) const
          {
            return env->callFloatMethod(this$, mids$[mid_score_63482206], a0.this$, a1, a2);
          }

          ::java::lang::String Distribution::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace similarities {
          static PyObject *t_Distribution_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Distribution_instance_(PyTypeObject *type, PyObject *arg);
          static int t_Distribution_init_(t_Distribution *self, PyObject *args, PyObject *kwds);
          static PyObject *t_Distribution_explain(t_Distribution *self, PyObject *args);
          static PyObject *t_Distribution_score(t_Distribution *self, PyObject *args);
          static PyObject *t_Distribution_toString(t_Distribution *self, PyObject *args);

          static PyMethodDef t_Distribution__methods_[] = {
            DECLARE_METHOD(t_Distribution, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Distribution, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Distribution, explain, METH_VARARGS),
            DECLARE_METHOD(t_Distribution, score, METH_VARARGS),
            DECLARE_METHOD(t_Distribution, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(Distribution, t_Distribution, ::java::lang::Object, Distribution, t_Distribution_init_, 0, 0, 0, 0, 0);

          void t_Distribution::install(PyObject *module)
          {
            installType(&PY_TYPE(Distribution), module, "Distribution", 0);
          }

          void t_Distribution::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(Distribution).tp_dict, "class_", make_descriptor(Distribution::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(Distribution).tp_dict, "wrapfn_", make_descriptor(t_Distribution::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(Distribution).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_Distribution_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, Distribution::initializeClass, 1)))
              return NULL;
            return t_Distribution::wrap_Object(Distribution(((t_Distribution *) arg)->object.this$));
          }
          static PyObject *t_Distribution_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, Distribution::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_Distribution_init_(t_Distribution *self, PyObject *args, PyObject *kwds)
          {
            Distribution object((jobject) NULL);

            INT_CALL(object = Distribution());
            self->object = object;

            return 0;
          }

          static PyObject *t_Distribution_explain(t_Distribution *self, PyObject *args)
          {
            ::org::apache::lucene::search::similarities::BasicStats a0((jobject) NULL);
            jfloat a1;
            jfloat a2;
            ::org::apache::lucene::search::Explanation result((jobject) NULL);

            if (!parseArgs(args, "kFF", ::org::apache::lucene::search::similarities::BasicStats::initializeClass, &a0, &a1, &a2))
            {
              OBJ_CALL(result = self->object.explain(a0, a1, a2));
              return ::org::apache::lucene::search::t_Explanation::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "explain", args);
            return NULL;
          }

          static PyObject *t_Distribution_score(t_Distribution *self, PyObject *args)
          {
            ::org::apache::lucene::search::similarities::BasicStats a0((jobject) NULL);
            jfloat a1;
            jfloat a2;
            jfloat result;

            if (!parseArgs(args, "kFF", ::org::apache::lucene::search::similarities::BasicStats::initializeClass, &a0, &a1, &a2))
            {
              OBJ_CALL(result = self->object.score(a0, a1, a2));
              return PyFloat_FromDouble((double) result);
            }

            PyErr_SetArgsError((PyObject *) self, "score", args);
            return NULL;
          }

          static PyObject *t_Distribution_toString(t_Distribution *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(&PY_TYPE(Distribution), (PyObject *) self, "toString", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/SearcherFactory.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "org/apache/lucene/search/IndexSearcher.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *SearcherFactory::class$ = NULL;
        jmethodID *SearcherFactory::mids$ = NULL;
        bool SearcherFactory::live$ = false;

        jclass SearcherFactory::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/SearcherFactory");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_newSearcher_bd3e99c0] = env->getMethodID(cls, "newSearcher", "(Lorg/apache/lucene/index/IndexReader;)Lorg/apache/lucene/search/IndexSearcher;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        SearcherFactory::SearcherFactory() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        ::org::apache::lucene::search::IndexSearcher SearcherFactory::newSearcher(const ::org::apache::lucene::index::IndexReader & a0) const
        {
          return ::org::apache::lucene::search::IndexSearcher(env->callObjectMethod(this$, mids$[mid_newSearcher_bd3e99c0], a0.this$));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_SearcherFactory_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_SearcherFactory_instance_(PyTypeObject *type, PyObject *arg);
        static int t_SearcherFactory_init_(t_SearcherFactory *self, PyObject *args, PyObject *kwds);
        static PyObject *t_SearcherFactory_newSearcher(t_SearcherFactory *self, PyObject *arg);

        static PyMethodDef t_SearcherFactory__methods_[] = {
          DECLARE_METHOD(t_SearcherFactory, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SearcherFactory, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SearcherFactory, newSearcher, METH_O),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(SearcherFactory, t_SearcherFactory, ::java::lang::Object, SearcherFactory, t_SearcherFactory_init_, 0, 0, 0, 0, 0);

        void t_SearcherFactory::install(PyObject *module)
        {
          installType(&PY_TYPE(SearcherFactory), module, "SearcherFactory", 0);
        }

        void t_SearcherFactory::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(SearcherFactory).tp_dict, "class_", make_descriptor(SearcherFactory::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(SearcherFactory).tp_dict, "wrapfn_", make_descriptor(t_SearcherFactory::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(SearcherFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_SearcherFactory_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, SearcherFactory::initializeClass, 1)))
            return NULL;
          return t_SearcherFactory::wrap_Object(SearcherFactory(((t_SearcherFactory *) arg)->object.this$));
        }
        static PyObject *t_SearcherFactory_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, SearcherFactory::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_SearcherFactory_init_(t_SearcherFactory *self, PyObject *args, PyObject *kwds)
        {
          SearcherFactory object((jobject) NULL);

          INT_CALL(object = SearcherFactory());
          self->object = object;

          return 0;
        }

        static PyObject *t_SearcherFactory_newSearcher(t_SearcherFactory *self, PyObject *arg)
        {
          ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
          ::org::apache::lucene::search::IndexSearcher result((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::index::IndexReader::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.newSearcher(a0));
            return ::org::apache::lucene::search::t_IndexSearcher::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "newSearcher", arg);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/postingshighlight/PassageFormatter.h"
#include "org/apache/lucene/search/postingshighlight/Passage.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace postingshighlight {

          ::java::lang::Class *PassageFormatter::class$ = NULL;
          jmethodID *PassageFormatter::mids$ = NULL;
          bool PassageFormatter::live$ = false;

          jclass PassageFormatter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/postingshighlight/PassageFormatter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_format_2ef5b250] = env->getMethodID(cls, "format", "([Lorg/apache/lucene/search/postingshighlight/Passage;Ljava/lang/String;)Ljava/lang/Object;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          PassageFormatter::PassageFormatter() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          ::java::lang::Object PassageFormatter::format(const JArray< ::org::apache::lucene::search::postingshighlight::Passage > & a0, const ::java::lang::String & a1) const
          {
            return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_format_2ef5b250], a0.this$, a1.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace postingshighlight {
          static PyObject *t_PassageFormatter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PassageFormatter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_PassageFormatter_init_(t_PassageFormatter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_PassageFormatter_format(t_PassageFormatter *self, PyObject *args);

          static PyMethodDef t_PassageFormatter__methods_[] = {
            DECLARE_METHOD(t_PassageFormatter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PassageFormatter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PassageFormatter, format, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(PassageFormatter, t_PassageFormatter, ::java::lang::Object, PassageFormatter, t_PassageFormatter_init_, 0, 0, 0, 0, 0);

          void t_PassageFormatter::install(PyObject *module)
          {
            installType(&PY_TYPE(PassageFormatter), module, "PassageFormatter", 0);
          }

          void t_PassageFormatter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(PassageFormatter).tp_dict, "class_", make_descriptor(PassageFormatter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(PassageFormatter).tp_dict, "wrapfn_", make_descriptor(t_PassageFormatter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(PassageFormatter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_PassageFormatter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, PassageFormatter::initializeClass, 1)))
              return NULL;
            return t_PassageFormatter::wrap_Object(PassageFormatter(((t_PassageFormatter *) arg)->object.this$));
          }
          static PyObject *t_PassageFormatter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, PassageFormatter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_PassageFormatter_init_(t_PassageFormatter *self, PyObject *args, PyObject *kwds)
          {
            PassageFormatter object((jobject) NULL);

            INT_CALL(object = PassageFormatter());
            self->object = object;

            return 0;
          }

          static PyObject *t_PassageFormatter_format(t_PassageFormatter *self, PyObject *args)
          {
            JArray< ::org::apache::lucene::search::postingshighlight::Passage > a0((jobject) NULL);
            ::java::lang::String a1((jobject) NULL);
            ::java::lang::Object result((jobject) NULL);

            if (!parseArgs(args, "[ks", ::org::apache::lucene::search::postingshighlight::Passage::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.format(a0, a1));
              return ::java::lang::t_Object::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "format", args);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/lucene41/Lucene41StoredFieldsFormat.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace lucene41 {

          ::java::lang::Class *Lucene41StoredFieldsFormat::class$ = NULL;
          jmethodID *Lucene41StoredFieldsFormat::mids$ = NULL;
          bool Lucene41StoredFieldsFormat::live$ = false;

          jclass Lucene41StoredFieldsFormat::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/lucene41/Lucene41StoredFieldsFormat");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          Lucene41StoredFieldsFormat::Lucene41StoredFieldsFormat() : ::org::apache::lucene::codecs::compressing::CompressingStoredFieldsFormat(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace lucene41 {
          static PyObject *t_Lucene41StoredFieldsFormat_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Lucene41StoredFieldsFormat_instance_(PyTypeObject *type, PyObject *arg);
          static int t_Lucene41StoredFieldsFormat_init_(t_Lucene41StoredFieldsFormat *self, PyObject *args, PyObject *kwds);

          static PyMethodDef t_Lucene41StoredFieldsFormat__methods_[] = {
            DECLARE_METHOD(t_Lucene41StoredFieldsFormat, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lucene41StoredFieldsFormat, instance_, METH_O | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(Lucene41StoredFieldsFormat, t_Lucene41StoredFieldsFormat, ::org::apache::lucene::codecs::compressing::CompressingStoredFieldsFormat, Lucene41StoredFieldsFormat, t_Lucene41StoredFieldsFormat_init_, 0, 0, 0, 0, 0);

          void t_Lucene41StoredFieldsFormat::install(PyObject *module)
          {
            installType(&PY_TYPE(Lucene41StoredFieldsFormat), module, "Lucene41StoredFieldsFormat", 0);
          }

          void t_Lucene41StoredFieldsFormat::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(Lucene41StoredFieldsFormat).tp_dict, "class_", make_descriptor(Lucene41StoredFieldsFormat::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(Lucene41StoredFieldsFormat).tp_dict, "wrapfn_", make_descriptor(t_Lucene41StoredFieldsFormat::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(Lucene41StoredFieldsFormat).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_Lucene41StoredFieldsFormat_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, Lucene41StoredFieldsFormat::initializeClass, 1)))
              return NULL;
            return t_Lucene41StoredFieldsFormat::wrap_Object(Lucene41StoredFieldsFormat(((t_Lucene41StoredFieldsFormat *) arg)->object.this$));
          }
          static PyObject *t_Lucene41StoredFieldsFormat_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, Lucene41StoredFieldsFormat::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_Lucene41StoredFieldsFormat_init_(t_Lucene41StoredFieldsFormat *self, PyObject *args, PyObject *kwds)
          {
            Lucene41StoredFieldsFormat object((jobject) NULL);

            INT_CALL(object = Lucene41StoredFieldsFormat());
            self->object = object;

            return 0;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/lucene40/Lucene40TermVectorsWriter.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/index/FieldInfo.h"
#include "org/apache/lucene/store/DataInput.h"
#include "org/apache/lucene/store/IOContext.h"
#include "java/util/Comparator.h"
#include "org/apache/lucene/index/MergeState.h"
#include "java/lang/String.h"
#include "org/apache/lucene/index/FieldInfos.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/store/Directory.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace lucene40 {

          ::java::lang::Class *Lucene40TermVectorsWriter::class$ = NULL;
          jmethodID *Lucene40TermVectorsWriter::mids$ = NULL;
          bool Lucene40TermVectorsWriter::live$ = false;

          jclass Lucene40TermVectorsWriter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/lucene40/Lucene40TermVectorsWriter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_1962ccd4] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/store/Directory;Ljava/lang/String;Lorg/apache/lucene/store/IOContext;)V");
              mids$[mid_abort_54c6a166] = env->getMethodID(cls, "abort", "()V");
              mids$[mid_addPosition_ffd34a92] = env->getMethodID(cls, "addPosition", "(IIILorg/apache/lucene/util/BytesRef;)V");
              mids$[mid_addProx_395d0aa2] = env->getMethodID(cls, "addProx", "(ILorg/apache/lucene/store/DataInput;Lorg/apache/lucene/store/DataInput;)V");
              mids$[mid_close_54c6a166] = env->getMethodID(cls, "close", "()V");
              mids$[mid_finish_48f050c2] = env->getMethodID(cls, "finish", "(Lorg/apache/lucene/index/FieldInfos;I)V");
              mids$[mid_finishDocument_54c6a166] = env->getMethodID(cls, "finishDocument", "()V");
              mids$[mid_finishTerm_54c6a166] = env->getMethodID(cls, "finishTerm", "()V");
              mids$[mid_getComparator_5a7ff2fc] = env->getMethodID(cls, "getComparator", "()Ljava/util/Comparator;");
              mids$[mid_merge_fd0cfdeb] = env->getMethodID(cls, "merge", "(Lorg/apache/lucene/index/MergeState;)I");
              mids$[mid_startDocument_39c7bd3c] = env->getMethodID(cls, "startDocument", "(I)V");
              mids$[mid_startField_07c4def5] = env->getMethodID(cls, "startField", "(Lorg/apache/lucene/index/FieldInfo;IZZZ)V");
              mids$[mid_startTerm_738fc2ce] = env->getMethodID(cls, "startTerm", "(Lorg/apache/lucene/util/BytesRef;I)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          Lucene40TermVectorsWriter::Lucene40TermVectorsWriter(const ::org::apache::lucene::store::Directory & a0, const ::java::lang::String & a1, const ::org::apache::lucene::store::IOContext & a2) : ::org::apache::lucene::codecs::TermVectorsWriter(env->newObject(initializeClass, &mids$, mid_init$_1962ccd4, a0.this$, a1.this$, a2.this$)) {}

          void Lucene40TermVectorsWriter::abort() const
          {
            env->callVoidMethod(this$, mids$[mid_abort_54c6a166]);
          }

          void Lucene40TermVectorsWriter::addPosition(jint a0, jint a1, jint a2, const ::org::apache::lucene::util::BytesRef & a3) const
          {
            env->callVoidMethod(this$, mids$[mid_addPosition_ffd34a92], a0, a1, a2, a3.this$);
          }

          void Lucene40TermVectorsWriter::addProx(jint a0, const ::org::apache::lucene::store::DataInput & a1, const ::org::apache::lucene::store::DataInput & a2) const
          {
            env->callVoidMethod(this$, mids$[mid_addProx_395d0aa2], a0, a1.this$, a2.this$);
          }

          void Lucene40TermVectorsWriter::close() const
          {
            env->callVoidMethod(this$, mids$[mid_close_54c6a166]);
          }

          void Lucene40TermVectorsWriter::finish(const ::org::apache::lucene::index::FieldInfos & a0, jint a1) const
          {
            env->callVoidMethod(this$, mids$[mid_finish_48f050c2], a0.this$, a1);
          }

          void Lucene40TermVectorsWriter::finishDocument() const
          {
            env->callVoidMethod(this$, mids$[mid_finishDocument_54c6a166]);
          }

          void Lucene40TermVectorsWriter::finishTerm() const
          {
            env->callVoidMethod(this$, mids$[mid_finishTerm_54c6a166]);
          }

          ::java::util::Comparator Lucene40TermVectorsWriter::getComparator() const
          {
            return ::java::util::Comparator(env->callObjectMethod(this$, mids$[mid_getComparator_5a7ff2fc]));
          }

          jint Lucene40TermVectorsWriter::merge(const ::org::apache::lucene::index::MergeState & a0) const
          {
            return env->callIntMethod(this$, mids$[mid_merge_fd0cfdeb], a0.this$);
          }

          void Lucene40TermVectorsWriter::startDocument(jint a0) const
          {
            env->callVoidMethod(this$, mids$[mid_startDocument_39c7bd3c], a0);
          }

          void Lucene40TermVectorsWriter::startField(const ::org::apache::lucene::index::FieldInfo & a0, jint a1, jboolean a2, jboolean a3, jboolean a4) const
          {
            env->callVoidMethod(this$, mids$[mid_startField_07c4def5], a0.this$, a1, a2, a3, a4);
          }

          void Lucene40TermVectorsWriter::startTerm(const ::org::apache::lucene::util::BytesRef & a0, jint a1) const
          {
            env->callVoidMethod(this$, mids$[mid_startTerm_738fc2ce], a0.this$, a1);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace lucene40 {
          static PyObject *t_Lucene40TermVectorsWriter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Lucene40TermVectorsWriter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_Lucene40TermVectorsWriter_init_(t_Lucene40TermVectorsWriter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_Lucene40TermVectorsWriter_abort(t_Lucene40TermVectorsWriter *self, PyObject *args);
          static PyObject *t_Lucene40TermVectorsWriter_addPosition(t_Lucene40TermVectorsWriter *self, PyObject *args);
          static PyObject *t_Lucene40TermVectorsWriter_addProx(t_Lucene40TermVectorsWriter *self, PyObject *args);
          static PyObject *t_Lucene40TermVectorsWriter_close(t_Lucene40TermVectorsWriter *self, PyObject *args);
          static PyObject *t_Lucene40TermVectorsWriter_finish(t_Lucene40TermVectorsWriter *self, PyObject *args);
          static PyObject *t_Lucene40TermVectorsWriter_finishDocument(t_Lucene40TermVectorsWriter *self, PyObject *args);
          static PyObject *t_Lucene40TermVectorsWriter_finishTerm(t_Lucene40TermVectorsWriter *self, PyObject *args);
          static PyObject *t_Lucene40TermVectorsWriter_getComparator(t_Lucene40TermVectorsWriter *self, PyObject *args);
          static PyObject *t_Lucene40TermVectorsWriter_merge(t_Lucene40TermVectorsWriter *self, PyObject *args);
          static PyObject *t_Lucene40TermVectorsWriter_startDocument(t_Lucene40TermVectorsWriter *self, PyObject *args);
          static PyObject *t_Lucene40TermVectorsWriter_startField(t_Lucene40TermVectorsWriter *self, PyObject *args);
          static PyObject *t_Lucene40TermVectorsWriter_startTerm(t_Lucene40TermVectorsWriter *self, PyObject *args);
          static PyObject *t_Lucene40TermVectorsWriter_get__comparator(t_Lucene40TermVectorsWriter *self, void *data);
          static PyGetSetDef t_Lucene40TermVectorsWriter__fields_[] = {
            DECLARE_GET_FIELD(t_Lucene40TermVectorsWriter, comparator),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_Lucene40TermVectorsWriter__methods_[] = {
            DECLARE_METHOD(t_Lucene40TermVectorsWriter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lucene40TermVectorsWriter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lucene40TermVectorsWriter, abort, METH_VARARGS),
            DECLARE_METHOD(t_Lucene40TermVectorsWriter, addPosition, METH_VARARGS),
            DECLARE_METHOD(t_Lucene40TermVectorsWriter, addProx, METH_VARARGS),
            DECLARE_METHOD(t_Lucene40TermVectorsWriter, close, METH_VARARGS),
            DECLARE_METHOD(t_Lucene40TermVectorsWriter, finish, METH_VARARGS),
            DECLARE_METHOD(t_Lucene40TermVectorsWriter, finishDocument, METH_VARARGS),
            DECLARE_METHOD(t_Lucene40TermVectorsWriter, finishTerm, METH_VARARGS),
            DECLARE_METHOD(t_Lucene40TermVectorsWriter, getComparator, METH_VARARGS),
            DECLARE_METHOD(t_Lucene40TermVectorsWriter, merge, METH_VARARGS),
            DECLARE_METHOD(t_Lucene40TermVectorsWriter, startDocument, METH_VARARGS),
            DECLARE_METHOD(t_Lucene40TermVectorsWriter, startField, METH_VARARGS),
            DECLARE_METHOD(t_Lucene40TermVectorsWriter, startTerm, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(Lucene40TermVectorsWriter, t_Lucene40TermVectorsWriter, ::org::apache::lucene::codecs::TermVectorsWriter, Lucene40TermVectorsWriter, t_Lucene40TermVectorsWriter_init_, 0, 0, t_Lucene40TermVectorsWriter__fields_, 0, 0);

          void t_Lucene40TermVectorsWriter::install(PyObject *module)
          {
            installType(&PY_TYPE(Lucene40TermVectorsWriter), module, "Lucene40TermVectorsWriter", 0);
          }

          void t_Lucene40TermVectorsWriter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(Lucene40TermVectorsWriter).tp_dict, "class_", make_descriptor(Lucene40TermVectorsWriter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(Lucene40TermVectorsWriter).tp_dict, "wrapfn_", make_descriptor(t_Lucene40TermVectorsWriter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(Lucene40TermVectorsWriter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_Lucene40TermVectorsWriter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, Lucene40TermVectorsWriter::initializeClass, 1)))
              return NULL;
            return t_Lucene40TermVectorsWriter::wrap_Object(Lucene40TermVectorsWriter(((t_Lucene40TermVectorsWriter *) arg)->object.this$));
          }
          static PyObject *t_Lucene40TermVectorsWriter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, Lucene40TermVectorsWriter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_Lucene40TermVectorsWriter_init_(t_Lucene40TermVectorsWriter *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::store::Directory a0((jobject) NULL);
            ::java::lang::String a1((jobject) NULL);
            ::org::apache::lucene::store::IOContext a2((jobject) NULL);
            Lucene40TermVectorsWriter object((jobject) NULL);

            if (!parseArgs(args, "ksk", ::org::apache::lucene::store::Directory::initializeClass, ::org::apache::lucene::store::IOContext::initializeClass, &a0, &a1, &a2))
            {
              INT_CALL(object = Lucene40TermVectorsWriter(a0, a1, a2));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_Lucene40TermVectorsWriter_abort(t_Lucene40TermVectorsWriter *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.abort());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(Lucene40TermVectorsWriter), (PyObject *) self, "abort", args, 2);
          }

          static PyObject *t_Lucene40TermVectorsWriter_addPosition(t_Lucene40TermVectorsWriter *self, PyObject *args)
          {
            jint a0;
            jint a1;
            jint a2;
            ::org::apache::lucene::util::BytesRef a3((jobject) NULL);

            if (!parseArgs(args, "IIIk", ::org::apache::lucene::util::BytesRef::initializeClass, &a0, &a1, &a2, &a3))
            {
              OBJ_CALL(self->object.addPosition(a0, a1, a2, a3));
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(Lucene40TermVectorsWriter), (PyObject *) self, "addPosition", args, 2);
          }

          static PyObject *t_Lucene40TermVectorsWriter_addProx(t_Lucene40TermVectorsWriter *self, PyObject *args)
          {
            jint a0;
            ::org::apache::lucene::store::DataInput a1((jobject) NULL);
            ::org::apache::lucene::store::DataInput a2((jobject) NULL);

            if (!parseArgs(args, "Ikk", ::org::apache::lucene::store::DataInput::initializeClass, ::org::apache::lucene::store::DataInput::initializeClass, &a0, &a1, &a2))
            {
              OBJ_CALL(self->object.addProx(a0, a1, a2));
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(Lucene40TermVectorsWriter), (PyObject *) self, "addProx", args, 2);
          }

          static PyObject *t_Lucene40TermVectorsWriter_close(t_Lucene40TermVectorsWriter *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.close());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(Lucene40TermVectorsWriter), (PyObject *) self, "close", args, 2);
          }

          static PyObject *t_Lucene40TermVectorsWriter_finish(t_Lucene40TermVectorsWriter *self, PyObject *args)
          {
            ::org::apache::lucene::index::FieldInfos a0((jobject) NULL);
            jint a1;

            if (!parseArgs(args, "kI", ::org::apache::lucene::index::FieldInfos::initializeClass, &a0, &a1))
            {
              OBJ_CALL(self->object.finish(a0, a1));
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(Lucene40TermVectorsWriter), (PyObject *) self, "finish", args, 2);
          }

          static PyObject *t_Lucene40TermVectorsWriter_finishDocument(t_Lucene40TermVectorsWriter *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.finishDocument());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(Lucene40TermVectorsWriter), (PyObject *) self, "finishDocument", args, 2);
          }

          static PyObject *t_Lucene40TermVectorsWriter_finishTerm(t_Lucene40TermVectorsWriter *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.finishTerm());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(Lucene40TermVectorsWriter), (PyObject *) self, "finishTerm", args, 2);
          }

          static PyObject *t_Lucene40TermVectorsWriter_getComparator(t_Lucene40TermVectorsWriter *self, PyObject *args)
          {
            ::java::util::Comparator result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.getComparator());
              return ::java::util::t_Comparator::wrap_Object(result, &::org::apache::lucene::util::PY_TYPE(BytesRef));
            }

            return callSuper(&PY_TYPE(Lucene40TermVectorsWriter), (PyObject *) self, "getComparator", args, 2);
          }

          static PyObject *t_Lucene40TermVectorsWriter_merge(t_Lucene40TermVectorsWriter *self, PyObject *args)
          {
            ::org::apache::lucene::index::MergeState a0((jobject) NULL);
            jint result;

            if (!parseArgs(args, "k", ::org::apache::lucene::index::MergeState::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.merge(a0));
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(Lucene40TermVectorsWriter), (PyObject *) self, "merge", args, 2);
          }

          static PyObject *t_Lucene40TermVectorsWriter_startDocument(t_Lucene40TermVectorsWriter *self, PyObject *args)
          {
            jint a0;

            if (!parseArgs(args, "I", &a0))
            {
              OBJ_CALL(self->object.startDocument(a0));
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(Lucene40TermVectorsWriter), (PyObject *) self, "startDocument", args, 2);
          }

          static PyObject *t_Lucene40TermVectorsWriter_startField(t_Lucene40TermVectorsWriter *self, PyObject *args)
          {
            ::org::apache::lucene::index::FieldInfo a0((jobject) NULL);
            jint a1;
            jboolean a2;
            jboolean a3;
            jboolean a4;

            if (!parseArgs(args, "kIZZZ", ::org::apache::lucene::index::FieldInfo::initializeClass, &a0, &a1, &a2, &a3, &a4))
            {
              OBJ_CALL(self->object.startField(a0, a1, a2, a3, a4));
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(Lucene40TermVectorsWriter), (PyObject *) self, "startField", args, 2);
          }

          static PyObject *t_Lucene40TermVectorsWriter_startTerm(t_Lucene40TermVectorsWriter *self, PyObject *args)
          {
            ::org::apache::lucene::util::BytesRef a0((jobject) NULL);
            jint a1;

            if (!parseArgs(args, "kI", ::org::apache::lucene::util::BytesRef::initializeClass, &a0, &a1))
            {
              OBJ_CALL(self->object.startTerm(a0, a1));
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(Lucene40TermVectorsWriter), (PyObject *) self, "startTerm", args, 2);
          }

          static PyObject *t_Lucene40TermVectorsWriter_get__comparator(t_Lucene40TermVectorsWriter *self, void *data)
          {
            ::java::util::Comparator value((jobject) NULL);
            OBJ_CALL(value = self->object.getComparator());
            return ::java::util::t_Comparator::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/suggest/SortedTermFreqIteratorWrapper.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "java/util/Comparator.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/search/spell/TermFreqIterator.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace suggest {

          ::java::lang::Class *SortedTermFreqIteratorWrapper::class$ = NULL;
          jmethodID *SortedTermFreqIteratorWrapper::mids$ = NULL;
          bool SortedTermFreqIteratorWrapper::live$ = false;

          jclass SortedTermFreqIteratorWrapper::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/suggest/SortedTermFreqIteratorWrapper");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_b57afdd1] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/spell/TermFreqIterator;)V");
              mids$[mid_init$_dbfb1d96] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/spell/TermFreqIterator;Ljava/util/Comparator;)V");
              mids$[mid_getComparator_5a7ff2fc] = env->getMethodID(cls, "getComparator", "()Ljava/util/Comparator;");
              mids$[mid_next_4ae19461] = env->getMethodID(cls, "next", "()Lorg/apache/lucene/util/BytesRef;");
              mids$[mid_weight_54c6a17a] = env->getMethodID(cls, "weight", "()J");
              mids$[mid_decode_b368866d] = env->getMethodID(cls, "decode", "(Lorg/apache/lucene/util/BytesRef;Lorg/apache/lucene/store/ByteArrayDataInput;)J");
              mids$[mid_encode_d3114f43] = env->getMethodID(cls, "encode", "(Lorg/apache/lucene/util/OfflineSorter$ByteSequencesWriter;Lorg/apache/lucene/store/ByteArrayDataOutput;[BLorg/apache/lucene/util/BytesRef;J)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          SortedTermFreqIteratorWrapper::SortedTermFreqIteratorWrapper(const ::org::apache::lucene::search::spell::TermFreqIterator & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_b57afdd1, a0.this$)) {}

          SortedTermFreqIteratorWrapper::SortedTermFreqIteratorWrapper(const ::org::apache::lucene::search::spell::TermFreqIterator & a0, const ::java::util::Comparator & a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_dbfb1d96, a0.this$, a1.this$)) {}

          ::java::util::Comparator SortedTermFreqIteratorWrapper::getComparator() const
          {
            return ::java::util::Comparator(env->callObjectMethod(this$, mids$[mid_getComparator_5a7ff2fc]));
          }

          ::org::apache::lucene::util::BytesRef SortedTermFreqIteratorWrapper::next() const
          {
            return ::org::apache::lucene::util::BytesRef(env->callObjectMethod(this$, mids$[mid_next_4ae19461]));
          }

          jlong SortedTermFreqIteratorWrapper::weight() const
          {
            return env->callLongMethod(this$, mids$[mid_weight_54c6a17a]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace suggest {
          static PyObject *t_SortedTermFreqIteratorWrapper_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SortedTermFreqIteratorWrapper_instance_(PyTypeObject *type, PyObject *arg);
          static int t_SortedTermFreqIteratorWrapper_init_(t_SortedTermFreqIteratorWrapper *self, PyObject *args, PyObject *kwds);
          static PyObject *t_SortedTermFreqIteratorWrapper_getComparator(t_SortedTermFreqIteratorWrapper *self);
          static PyObject *t_SortedTermFreqIteratorWrapper_next(t_SortedTermFreqIteratorWrapper *self);
          static PyObject *t_SortedTermFreqIteratorWrapper_weight(t_SortedTermFreqIteratorWrapper *self);
          static PyObject *t_SortedTermFreqIteratorWrapper_get__comparator(t_SortedTermFreqIteratorWrapper *self, void *data);
          static PyGetSetDef t_SortedTermFreqIteratorWrapper__fields_[] = {
            DECLARE_GET_FIELD(t_SortedTermFreqIteratorWrapper, comparator),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_SortedTermFreqIteratorWrapper__methods_[] = {
            DECLARE_METHOD(t_SortedTermFreqIteratorWrapper, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SortedTermFreqIteratorWrapper, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SortedTermFreqIteratorWrapper, getComparator, METH_NOARGS),
            DECLARE_METHOD(t_SortedTermFreqIteratorWrapper, next, METH_NOARGS),
            DECLARE_METHOD(t_SortedTermFreqIteratorWrapper, weight, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(SortedTermFreqIteratorWrapper, t_SortedTermFreqIteratorWrapper, ::java::lang::Object, SortedTermFreqIteratorWrapper, t_SortedTermFreqIteratorWrapper_init_, PyObject_SelfIter, ((PyObject *(*)(t_SortedTermFreqIteratorWrapper *)) get_next< t_SortedTermFreqIteratorWrapper,::org::apache::lucene::util::t_BytesRef,::org::apache::lucene::util::BytesRef >), t_SortedTermFreqIteratorWrapper__fields_, 0, 0);

          void t_SortedTermFreqIteratorWrapper::install(PyObject *module)
          {
            installType(&PY_TYPE(SortedTermFreqIteratorWrapper), module, "SortedTermFreqIteratorWrapper", 0);
          }

          void t_SortedTermFreqIteratorWrapper::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(SortedTermFreqIteratorWrapper).tp_dict, "class_", make_descriptor(SortedTermFreqIteratorWrapper::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(SortedTermFreqIteratorWrapper).tp_dict, "wrapfn_", make_descriptor(t_SortedTermFreqIteratorWrapper::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(SortedTermFreqIteratorWrapper).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_SortedTermFreqIteratorWrapper_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, SortedTermFreqIteratorWrapper::initializeClass, 1)))
              return NULL;
            return t_SortedTermFreqIteratorWrapper::wrap_Object(SortedTermFreqIteratorWrapper(((t_SortedTermFreqIteratorWrapper *) arg)->object.this$));
          }
          static PyObject *t_SortedTermFreqIteratorWrapper_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, SortedTermFreqIteratorWrapper::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_SortedTermFreqIteratorWrapper_init_(t_SortedTermFreqIteratorWrapper *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::org::apache::lucene::search::spell::TermFreqIterator a0((jobject) NULL);
                SortedTermFreqIteratorWrapper object((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::search::spell::TermFreqIterator::initializeClass, &a0))
                {
                  INT_CALL(object = SortedTermFreqIteratorWrapper(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 2:
              {
                ::org::apache::lucene::search::spell::TermFreqIterator a0((jobject) NULL);
                ::java::util::Comparator a1((jobject) NULL);
                PyTypeObject **p1;
                SortedTermFreqIteratorWrapper object((jobject) NULL);

                if (!parseArgs(args, "kK", ::org::apache::lucene::search::spell::TermFreqIterator::initializeClass, ::java::util::Comparator::initializeClass, &a0, &a1, &p1, ::java::util::t_Comparator::parameters_))
                {
                  INT_CALL(object = SortedTermFreqIteratorWrapper(a0, a1));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_SortedTermFreqIteratorWrapper_getComparator(t_SortedTermFreqIteratorWrapper *self)
          {
            ::java::util::Comparator result((jobject) NULL);
            OBJ_CALL(result = self->object.getComparator());
            return ::java::util::t_Comparator::wrap_Object(result, &::org::apache::lucene::util::PY_TYPE(BytesRef));
          }

          static PyObject *t_SortedTermFreqIteratorWrapper_next(t_SortedTermFreqIteratorWrapper *self)
          {
            ::org::apache::lucene::util::BytesRef result((jobject) NULL);
            OBJ_CALL(result = self->object.next());
            return ::org::apache::lucene::util::t_BytesRef::wrap_Object(result);
          }

          static PyObject *t_SortedTermFreqIteratorWrapper_weight(t_SortedTermFreqIteratorWrapper *self)
          {
            jlong result;
            OBJ_CALL(result = self->object.weight());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          static PyObject *t_SortedTermFreqIteratorWrapper_get__comparator(t_SortedTermFreqIteratorWrapper *self, void *data)
          {
            ::java::util::Comparator value((jobject) NULL);
            OBJ_CALL(value = self->object.getComparator());
            return ::java::util::t_Comparator::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/DeletedQueryNode.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/queryparser/flexible/core/parser/EscapeQuerySyntax.h"
#include "java/lang/CloneNotSupportedException.h"
#include "java/lang/CharSequence.h"
#include "java/lang/String.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/QueryNode.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace nodes {

              ::java::lang::Class *DeletedQueryNode::class$ = NULL;
              jmethodID *DeletedQueryNode::mids$ = NULL;
              bool DeletedQueryNode::live$ = false;

              jclass DeletedQueryNode::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/core/nodes/DeletedQueryNode");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
                  mids$[mid_cloneTree_b387c5e6] = env->getMethodID(cls, "cloneTree", "()Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;");
                  mids$[mid_toQueryString_99b8dfe1] = env->getMethodID(cls, "toQueryString", "(Lorg/apache/lucene/queryparser/flexible/core/parser/EscapeQuerySyntax;)Ljava/lang/CharSequence;");
                  mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              DeletedQueryNode::DeletedQueryNode() : ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNodeImpl(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

              ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode DeletedQueryNode::cloneTree() const
              {
                return ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode(env->callObjectMethod(this$, mids$[mid_cloneTree_b387c5e6]));
              }

              ::java::lang::CharSequence DeletedQueryNode::toQueryString(const ::org::apache::lucene::queryparser::flexible::core::parser::EscapeQuerySyntax & a0) const
              {
                return ::java::lang::CharSequence(env->callObjectMethod(this$, mids$[mid_toQueryString_99b8dfe1], a0.this$));
              }

              ::java::lang::String DeletedQueryNode::toString() const
              {
                return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace nodes {
              static PyObject *t_DeletedQueryNode_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_DeletedQueryNode_instance_(PyTypeObject *type, PyObject *arg);
              static int t_DeletedQueryNode_init_(t_DeletedQueryNode *self, PyObject *args, PyObject *kwds);
              static PyObject *t_DeletedQueryNode_cloneTree(t_DeletedQueryNode *self, PyObject *args);
              static PyObject *t_DeletedQueryNode_toQueryString(t_DeletedQueryNode *self, PyObject *args);
              static PyObject *t_DeletedQueryNode_toString(t_DeletedQueryNode *self, PyObject *args);

              static PyMethodDef t_DeletedQueryNode__methods_[] = {
                DECLARE_METHOD(t_DeletedQueryNode, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_DeletedQueryNode, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_DeletedQueryNode, cloneTree, METH_VARARGS),
                DECLARE_METHOD(t_DeletedQueryNode, toQueryString, METH_VARARGS),
                DECLARE_METHOD(t_DeletedQueryNode, toString, METH_VARARGS),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(DeletedQueryNode, t_DeletedQueryNode, ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNodeImpl, DeletedQueryNode, t_DeletedQueryNode_init_, 0, 0, 0, 0, 0);

              void t_DeletedQueryNode::install(PyObject *module)
              {
                installType(&PY_TYPE(DeletedQueryNode), module, "DeletedQueryNode", 0);
              }

              void t_DeletedQueryNode::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(DeletedQueryNode).tp_dict, "class_", make_descriptor(DeletedQueryNode::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(DeletedQueryNode).tp_dict, "wrapfn_", make_descriptor(t_DeletedQueryNode::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(DeletedQueryNode).tp_dict, "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_DeletedQueryNode_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, DeletedQueryNode::initializeClass, 1)))
                  return NULL;
                return t_DeletedQueryNode::wrap_Object(DeletedQueryNode(((t_DeletedQueryNode *) arg)->object.this$));
              }
              static PyObject *t_DeletedQueryNode_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, DeletedQueryNode::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_DeletedQueryNode_init_(t_DeletedQueryNode *self, PyObject *args, PyObject *kwds)
              {
                DeletedQueryNode object((jobject) NULL);

                INT_CALL(object = DeletedQueryNode());
                self->object = object;

                return 0;
              }

              static PyObject *t_DeletedQueryNode_cloneTree(t_DeletedQueryNode *self, PyObject *args)
              {
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode result((jobject) NULL);

                if (!parseArgs(args, ""))
                {
                  OBJ_CALL(result = self->object.cloneTree());
                  return ::org::apache::lucene::queryparser::flexible::core::nodes::t_QueryNode::wrap_Object(result);
                }

                return callSuper(&PY_TYPE(DeletedQueryNode), (PyObject *) self, "cloneTree", args, 2);
              }

              static PyObject *t_DeletedQueryNode_toQueryString(t_DeletedQueryNode *self, PyObject *args)
              {
                ::org::apache::lucene::queryparser::flexible::core::parser::EscapeQuerySyntax a0((jobject) NULL);
                ::java::lang::CharSequence result((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::queryparser::flexible::core::parser::EscapeQuerySyntax::initializeClass, &a0))
                {
                  OBJ_CALL(result = self->object.toQueryString(a0));
                  return ::java::lang::t_CharSequence::wrap_Object(result);
                }

                return callSuper(&PY_TYPE(DeletedQueryNode), (PyObject *) self, "toQueryString", args, 2);
              }

              static PyObject *t_DeletedQueryNode_toString(t_DeletedQueryNode *self, PyObject *args)
              {
                ::java::lang::String result((jobject) NULL);

                if (!parseArgs(args, ""))
                {
                  OBJ_CALL(result = self->object.toString());
                  return j2p(result);
                }

                return callSuper(&PY_TYPE(DeletedQueryNode), (PyObject *) self, "toString", args, 2);
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/suggest/DocumentDictionary.h"
#include "org/apache/lucene/search/spell/Dictionary.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/search/suggest/InputIterator.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace suggest {

          ::java::lang::Class *DocumentDictionary::class$ = NULL;
          jmethodID *DocumentDictionary::mids$ = NULL;
          bool DocumentDictionary::live$ = false;

          jclass DocumentDictionary::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/suggest/DocumentDictionary");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_d188be8d] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/IndexReader;Ljava/lang/String;Ljava/lang/String;)V");
              mids$[mid_init$_d5472fa7] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/IndexReader;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V");
              mids$[mid_init$_087c6971] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/IndexReader;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V");
              mids$[mid_getEntryIterator_23dc46b1] = env->getMethodID(cls, "getEntryIterator", "()Lorg/apache/lucene/search/suggest/InputIterator;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          DocumentDictionary::DocumentDictionary(const ::org::apache::lucene::index::IndexReader & a0, const ::java::lang::String & a1, const ::java::lang::String & a2) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_d188be8d, a0.this$, a1.this$, a2.this$)) {}

          DocumentDictionary::DocumentDictionary(const ::org::apache::lucene::index::IndexReader & a0, const ::java::lang::String & a1, const ::java::lang::String & a2, const ::java::lang::String & a3) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_d5472fa7, a0.this$, a1.this$, a2.this$, a3.this$)) {}

          DocumentDictionary::DocumentDictionary(const ::org::apache::lucene::index::IndexReader & a0, const ::java::lang::String & a1, const ::java::lang::String & a2, const ::java::lang::String & a3, const ::java::lang::String & a4) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_087c6971, a0.this$, a1.this$, a2.this$, a3.this$, a4.this$)) {}

          ::org::apache::lucene::search::suggest::InputIterator DocumentDictionary::getEntryIterator() const
          {
            return ::org::apache::lucene::search::suggest::InputIterator(env->callObjectMethod(this$, mids$[mid_getEntryIterator_23dc46b1]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace suggest {
          static PyObject *t_DocumentDictionary_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_DocumentDictionary_instance_(PyTypeObject *type, PyObject *arg);
          static int t_DocumentDictionary_init_(t_DocumentDictionary *self, PyObject *args, PyObject *kwds);
          static PyObject *t_DocumentDictionary_getEntryIterator(t_DocumentDictionary *self);
          static PyObject *t_DocumentDictionary_get__entryIterator(t_DocumentDictionary *self, void *data);
          static PyGetSetDef t_DocumentDictionary__fields_[] = {
            DECLARE_GET_FIELD(t_DocumentDictionary, entryIterator),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_DocumentDictionary__methods_[] = {
            DECLARE_METHOD(t_DocumentDictionary, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_DocumentDictionary, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_DocumentDictionary, getEntryIterator, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(DocumentDictionary, t_DocumentDictionary, ::java::lang::Object, DocumentDictionary, t_DocumentDictionary_init_, 0, 0, t_DocumentDictionary__fields_, 0, 0);

          void t_DocumentDictionary::install(PyObject *module)
          {
            installType(&PY_TYPE(DocumentDictionary), module, "DocumentDictionary", 0);
          }

          void t_DocumentDictionary::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(DocumentDictionary).tp_dict, "class_", make_descriptor(DocumentDictionary::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(DocumentDictionary).tp_dict, "wrapfn_", make_descriptor(t_DocumentDictionary::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(DocumentDictionary).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_DocumentDictionary_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, DocumentDictionary::initializeClass, 1)))
              return NULL;
            return t_DocumentDictionary::wrap_Object(DocumentDictionary(((t_DocumentDictionary *) arg)->object.this$));
          }
          static PyObject *t_DocumentDictionary_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, DocumentDictionary::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_DocumentDictionary_init_(t_DocumentDictionary *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 3:
              {
                ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
                ::java::lang::String a1((jobject) NULL);
                ::java::lang::String a2((jobject) NULL);
                DocumentDictionary object((jobject) NULL);

                if (!parseArgs(args, "kss", ::org::apache::lucene::index::IndexReader::initializeClass, &a0, &a1, &a2))
                {
                  INT_CALL(object = DocumentDictionary(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 4:
              {
                ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
                ::java::lang::String a1((jobject) NULL);
                ::java::lang::String a2((jobject) NULL);
                ::java::lang::String a3((jobject) NULL);
                DocumentDictionary object((jobject) NULL);

                if (!parseArgs(args, "ksss", ::org::apache::lucene::index::IndexReader::initializeClass, &a0, &a1, &a2, &a3))
                {
                  INT_CALL(object = DocumentDictionary(a0, a1, a2, a3));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 5:
              {
                ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
                ::java::lang::String a1((jobject) NULL);
                ::java::lang::String a2((jobject) NULL);
                ::java::lang::String a3((jobject) NULL);
                ::java::lang::String a4((jobject) NULL);
                DocumentDictionary object((jobject) NULL);

                if (!parseArgs(args, "kssss", ::org::apache::lucene::index::IndexReader::initializeClass, &a0, &a1, &a2, &a3, &a4))
                {
                  INT_CALL(object = DocumentDictionary(a0, a1, a2, a3, a4));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_DocumentDictionary_getEntryIterator(t_DocumentDictionary *self)
          {
            ::org::apache::lucene::search::suggest::InputIterator result((jobject) NULL);
            OBJ_CALL(result = self->object.getEntryIterator());
            return ::org::apache::lucene::search::suggest::t_InputIterator::wrap_Object(result);
          }

          static PyObject *t_DocumentDictionary_get__entryIterator(t_DocumentDictionary *self, void *data)
          {
            ::org::apache::lucene::search::suggest::InputIterator value((jobject) NULL);
            OBJ_CALL(value = self->object.getEntryIterator());
            return ::org::apache::lucene::search::suggest::t_InputIterator::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/ext/ExtensionQuery.h"
#include "java/lang/String.h"
#include "org/apache/lucene/queryparser/classic/QueryParser.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace ext {

          ::java::lang::Class *ExtensionQuery::class$ = NULL;
          jmethodID *ExtensionQuery::mids$ = NULL;
          bool ExtensionQuery::live$ = false;

          jclass ExtensionQuery::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/ext/ExtensionQuery");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_a24cebd3] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/queryparser/classic/QueryParser;Ljava/lang/String;Ljava/lang/String;)V");
              mids$[mid_getField_14c7b5c5] = env->getMethodID(cls, "getField", "()Ljava/lang/String;");
              mids$[mid_getRawQueryString_14c7b5c5] = env->getMethodID(cls, "getRawQueryString", "()Ljava/lang/String;");
              mids$[mid_getTopLevelParser_f96fcc72] = env->getMethodID(cls, "getTopLevelParser", "()Lorg/apache/lucene/queryparser/classic/QueryParser;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ExtensionQuery::ExtensionQuery(const ::org::apache::lucene::queryparser::classic::QueryParser & a0, const ::java::lang::String & a1, const ::java::lang::String & a2) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_a24cebd3, a0.this$, a1.this$, a2.this$)) {}

          ::java::lang::String ExtensionQuery::getField() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getField_14c7b5c5]));
          }

          ::java::lang::String ExtensionQuery::getRawQueryString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getRawQueryString_14c7b5c5]));
          }

          ::org::apache::lucene::queryparser::classic::QueryParser ExtensionQuery::getTopLevelParser() const
          {
            return ::org::apache::lucene::queryparser::classic::QueryParser(env->callObjectMethod(this$, mids$[mid_getTopLevelParser_f96fcc72]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace ext {
          static PyObject *t_ExtensionQuery_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_ExtensionQuery_instance_(PyTypeObject *type, PyObject *arg);
          static int t_ExtensionQuery_init_(t_ExtensionQuery *self, PyObject *args, PyObject *kwds);
          static PyObject *t_ExtensionQuery_getField(t_ExtensionQuery *self);
          static PyObject *t_ExtensionQuery_getRawQueryString(t_ExtensionQuery *self);
          static PyObject *t_ExtensionQuery_getTopLevelParser(t_ExtensionQuery *self);
          static PyObject *t_ExtensionQuery_get__field(t_ExtensionQuery *self, void *data);
          static PyObject *t_ExtensionQuery_get__rawQueryString(t_ExtensionQuery *self, void *data);
          static PyObject *t_ExtensionQuery_get__topLevelParser(t_ExtensionQuery *self, void *data);
          static PyGetSetDef t_ExtensionQuery__fields_[] = {
            DECLARE_GET_FIELD(t_ExtensionQuery, field),
            DECLARE_GET_FIELD(t_ExtensionQuery, rawQueryString),
            DECLARE_GET_FIELD(t_ExtensionQuery, topLevelParser),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_ExtensionQuery__methods_[] = {
            DECLARE_METHOD(t_ExtensionQuery, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ExtensionQuery, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ExtensionQuery, getField, METH_NOARGS),
            DECLARE_METHOD(t_ExtensionQuery, getRawQueryString, METH_NOARGS),
            DECLARE_METHOD(t_ExtensionQuery, getTopLevelParser, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(ExtensionQuery, t_ExtensionQuery, ::java::lang::Object, ExtensionQuery, t_ExtensionQuery_init_, 0, 0, t_ExtensionQuery__fields_, 0, 0);

          void t_ExtensionQuery::install(PyObject *module)
          {
            installType(&PY_TYPE(ExtensionQuery), module, "ExtensionQuery", 0);
          }

          void t_ExtensionQuery::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(ExtensionQuery).tp_dict, "class_", make_descriptor(ExtensionQuery::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(ExtensionQuery).tp_dict, "wrapfn_", make_descriptor(t_ExtensionQuery::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(ExtensionQuery).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_ExtensionQuery_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, ExtensionQuery::initializeClass, 1)))
              return NULL;
            return t_ExtensionQuery::wrap_Object(ExtensionQuery(((t_ExtensionQuery *) arg)->object.this$));
          }
          static PyObject *t_ExtensionQuery_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, ExtensionQuery::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_ExtensionQuery_init_(t_ExtensionQuery *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::queryparser::classic::QueryParser a0((jobject) NULL);
            ::java::lang::String a1((jobject) NULL);
            ::java::lang::String a2((jobject) NULL);
            ExtensionQuery object((jobject) NULL);

            if (!parseArgs(args, "kss", ::org::apache::lucene::queryparser::classic::QueryParser::initializeClass, &a0, &a1, &a2))
            {
              INT_CALL(object = ExtensionQuery(a0, a1, a2));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_ExtensionQuery_getField(t_ExtensionQuery *self)
          {
            ::java::lang::String result((jobject) NULL);
            OBJ_CALL(result = self->object.getField());
            return j2p(result);
          }

          static PyObject *t_ExtensionQuery_getRawQueryString(t_ExtensionQuery *self)
          {
            ::java::lang::String result((jobject) NULL);
            OBJ_CALL(result = self->object.getRawQueryString());
            return j2p(result);
          }

          static PyObject *t_ExtensionQuery_getTopLevelParser(t_ExtensionQuery *self)
          {
            ::org::apache::lucene::queryparser::classic::QueryParser result((jobject) NULL);
            OBJ_CALL(result = self->object.getTopLevelParser());
            return ::org::apache::lucene::queryparser::classic::t_QueryParser::wrap_Object(result);
          }

          static PyObject *t_ExtensionQuery_get__field(t_ExtensionQuery *self, void *data)
          {
            ::java::lang::String value((jobject) NULL);
            OBJ_CALL(value = self->object.getField());
            return j2p(value);
          }

          static PyObject *t_ExtensionQuery_get__rawQueryString(t_ExtensionQuery *self, void *data)
          {
            ::java::lang::String value((jobject) NULL);
            OBJ_CALL(value = self->object.getRawQueryString());
            return j2p(value);
          }

          static PyObject *t_ExtensionQuery_get__topLevelParser(t_ExtensionQuery *self, void *data)
          {
            ::org::apache::lucene::queryparser::classic::QueryParser value((jobject) NULL);
            OBJ_CALL(value = self->object.getTopLevelParser());
            return ::org::apache::lucene::queryparser::classic::t_QueryParser::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/util/AbstractAnalysisFactory.h"
#include "java/lang/Class.h"
#include "java/util/Map.h"
#include "java/lang/String.h"
#include "java/util/Collection.h"
#include "java/util/Set.h"
#include "org/apache/lucene/util/Version.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace util {

          ::java::lang::Class *AbstractAnalysisFactory::class$ = NULL;
          jmethodID *AbstractAnalysisFactory::mids$ = NULL;
          bool AbstractAnalysisFactory::live$ = false;
          ::java::lang::String *AbstractAnalysisFactory::LUCENE_MATCH_VERSION_PARAM = NULL;

          jclass AbstractAnalysisFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/util/AbstractAnalysisFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_get_4630d771] = env->getMethodID(cls, "get", "(Ljava/util/Map;Ljava/lang/String;)Ljava/lang/String;");
              mids$[mid_get_4be9e858] = env->getMethodID(cls, "get", "(Ljava/util/Map;Ljava/lang/String;Ljava/util/Collection;)Ljava/lang/String;");
              mids$[mid_get_c717d02f] = env->getMethodID(cls, "get", "(Ljava/util/Map;Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;");
              mids$[mid_get_bc17366a] = env->getMethodID(cls, "get", "(Ljava/util/Map;Ljava/lang/String;Ljava/util/Collection;Ljava/lang/String;)Ljava/lang/String;");
              mids$[mid_get_7fb22fcf] = env->getMethodID(cls, "get", "(Ljava/util/Map;Ljava/lang/String;Ljava/util/Collection;Ljava/lang/String;Z)Ljava/lang/String;");
              mids$[mid_getChar_2bcf84e7] = env->getMethodID(cls, "getChar", "(Ljava/util/Map;Ljava/lang/String;C)C");
              mids$[mid_getClassArg_14c7b5c5] = env->getMethodID(cls, "getClassArg", "()Ljava/lang/String;");
              mids$[mid_getLuceneMatchVersion_a83d688e] = env->getMethodID(cls, "getLuceneMatchVersion", "()Lorg/apache/lucene/util/Version;");
              mids$[mid_getOriginalArgs_db60befd] = env->getMethodID(cls, "getOriginalArgs", "()Ljava/util/Map;");
              mids$[mid_getSet_3ddefc5b] = env->getMethodID(cls, "getSet", "(Ljava/util/Map;Ljava/lang/String;)Ljava/util/Set;");
              mids$[mid_isExplicitLuceneMatchVersion_54c6a16a] = env->getMethodID(cls, "isExplicitLuceneMatchVersion", "()Z");
              mids$[mid_require_4630d771] = env->getMethodID(cls, "require", "(Ljava/util/Map;Ljava/lang/String;)Ljava/lang/String;");
              mids$[mid_require_4be9e858] = env->getMethodID(cls, "require", "(Ljava/util/Map;Ljava/lang/String;Ljava/util/Collection;)Ljava/lang/String;");
              mids$[mid_require_203fb939] = env->getMethodID(cls, "require", "(Ljava/util/Map;Ljava/lang/String;Ljava/util/Collection;Z)Ljava/lang/String;");
              mids$[mid_requireChar_68876213] = env->getMethodID(cls, "requireChar", "(Ljava/util/Map;Ljava/lang/String;)C");
              mids$[mid_setExplicitLuceneMatchVersion_bb0c767f] = env->getMethodID(cls, "setExplicitLuceneMatchVersion", "(Z)V");
              mids$[mid_getBoolean_53e7fc33] = env->getMethodID(cls, "getBoolean", "(Ljava/util/Map;Ljava/lang/String;Z)Z");
              mids$[mid_getInt_29d335db] = env->getMethodID(cls, "getInt", "(Ljava/util/Map;Ljava/lang/String;I)I");
              mids$[mid_getFloat_a7ea7213] = env->getMethodID(cls, "getFloat", "(Ljava/util/Map;Ljava/lang/String;F)F");
              mids$[mid_getWordSet_94dc101c] = env->getMethodID(cls, "getWordSet", "(Lorg/apache/lucene/analysis/util/ResourceLoader;Ljava/lang/String;Z)Lorg/apache/lucene/analysis/util/CharArraySet;");
              mids$[mid_assureMatchVersion_54c6a166] = env->getMethodID(cls, "assureMatchVersion", "()V");
              mids$[mid_requireInt_68876219] = env->getMethodID(cls, "requireInt", "(Ljava/util/Map;Ljava/lang/String;)I");
              mids$[mid_requireBoolean_6887620a] = env->getMethodID(cls, "requireBoolean", "(Ljava/util/Map;Ljava/lang/String;)Z");
              mids$[mid_requireFloat_68876216] = env->getMethodID(cls, "requireFloat", "(Ljava/util/Map;Ljava/lang/String;)F");
              mids$[mid_getPattern_222e4d23] = env->getMethodID(cls, "getPattern", "(Ljava/util/Map;Ljava/lang/String;)Ljava/util/regex/Pattern;");
              mids$[mid_getLines_161f664b] = env->getMethodID(cls, "getLines", "(Lorg/apache/lucene/analysis/util/ResourceLoader;Ljava/lang/String;)Ljava/util/List;");
              mids$[mid_getSnowballWordSet_94dc101c] = env->getMethodID(cls, "getSnowballWordSet", "(Lorg/apache/lucene/analysis/util/ResourceLoader;Ljava/lang/String;Z)Lorg/apache/lucene/analysis/util/CharArraySet;");
              mids$[mid_splitFileNames_0feb8f08] = env->getMethodID(cls, "splitFileNames", "(Ljava/lang/String;)Ljava/util/List;");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              LUCENE_MATCH_VERSION_PARAM = new ::java::lang::String(env->getStaticObjectField(cls, "LUCENE_MATCH_VERSION_PARAM", "Ljava/lang/String;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ::java::lang::String AbstractAnalysisFactory::get(const ::java::util::Map & a0, const ::java::lang::String & a1) const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_get_4630d771], a0.this$, a1.this$));
          }

          ::java::lang::String AbstractAnalysisFactory::get(const ::java::util::Map & a0, const ::java::lang::String & a1, const ::java::util::Collection & a2) const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_get_4be9e858], a0.this$, a1.this$, a2.this$));
          }

          ::java::lang::String AbstractAnalysisFactory::get(const ::java::util::Map & a0, const ::java::lang::String & a1, const ::java::lang::String & a2) const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_get_c717d02f], a0.this$, a1.this$, a2.this$));
          }

          ::java::lang::String AbstractAnalysisFactory::get(const ::java::util::Map & a0, const ::java::lang::String & a1, const ::java::util::Collection & a2, const ::java::lang::String & a3) const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_get_bc17366a], a0.this$, a1.this$, a2.this$, a3.this$));
          }

          ::java::lang::String AbstractAnalysisFactory::get(const ::java::util::Map & a0, const ::java::lang::String & a1, const ::java::util::Collection & a2, const ::java::lang::String & a3, jboolean a4) const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_get_7fb22fcf], a0.this$, a1.this$, a2.this$, a3.this$, a4));
          }

          jchar AbstractAnalysisFactory::getChar(const ::java::util::Map & a0, const ::java::lang::String & a1, jchar a2) const
          {
            return env->callCharMethod(this$, mids$[mid_getChar_2bcf84e7], a0.this$, a1.this$, a2);
          }

          ::java::lang::String AbstractAnalysisFactory::getClassArg() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getClassArg_14c7b5c5]));
          }

          ::org::apache::lucene::util::Version AbstractAnalysisFactory::getLuceneMatchVersion() const
          {
            return ::org::apache::lucene::util::Version(env->callObjectMethod(this$, mids$[mid_getLuceneMatchVersion_a83d688e]));
          }

          ::java::util::Map AbstractAnalysisFactory::getOriginalArgs() const
          {
            return ::java::util::Map(env->callObjectMethod(this$, mids$[mid_getOriginalArgs_db60befd]));
          }

          ::java::util::Set AbstractAnalysisFactory::getSet(const ::java::util::Map & a0, const ::java::lang::String & a1) const
          {
            return ::java::util::Set(env->callObjectMethod(this$, mids$[mid_getSet_3ddefc5b], a0.this$, a1.this$));
          }

          jboolean AbstractAnalysisFactory::isExplicitLuceneMatchVersion() const
          {
            return env->callBooleanMethod(this$, mids$[mid_isExplicitLuceneMatchVersion_54c6a16a]);
          }

          ::java::lang::String AbstractAnalysisFactory::require(const ::java::util::Map & a0, const ::java::lang::String & a1) const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_require_4630d771], a0.this$, a1.this$));
          }

          ::java::lang::String AbstractAnalysisFactory::require(const ::java::util::Map & a0, const ::java::lang::String & a1, const ::java::util::Collection & a2) const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_require_4be9e858], a0.this$, a1.this$, a2.this$));
          }

          ::java::lang::String AbstractAnalysisFactory::require(const ::java::util::Map & a0, const ::java::lang::String & a1, const ::java::util::Collection & a2, jboolean a3) const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_require_203fb939], a0.this$, a1.this$, a2.this$, a3));
          }

          jchar AbstractAnalysisFactory::requireChar(const ::java::util::Map & a0, const ::java::lang::String & a1) const
          {
            return env->callCharMethod(this$, mids$[mid_requireChar_68876213], a0.this$, a1.this$);
          }

          void AbstractAnalysisFactory::setExplicitLuceneMatchVersion(jboolean a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setExplicitLuceneMatchVersion_bb0c767f], a0);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace util {
          static PyObject *t_AbstractAnalysisFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_AbstractAnalysisFactory_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_AbstractAnalysisFactory_get(t_AbstractAnalysisFactory *self, PyObject *args);
          static PyObject *t_AbstractAnalysisFactory_getChar(t_AbstractAnalysisFactory *self, PyObject *args);
          static PyObject *t_AbstractAnalysisFactory_getClassArg(t_AbstractAnalysisFactory *self);
          static PyObject *t_AbstractAnalysisFactory_getLuceneMatchVersion(t_AbstractAnalysisFactory *self);
          static PyObject *t_AbstractAnalysisFactory_getOriginalArgs(t_AbstractAnalysisFactory *self);
          static PyObject *t_AbstractAnalysisFactory_getSet(t_AbstractAnalysisFactory *self, PyObject *args);
          static PyObject *t_AbstractAnalysisFactory_isExplicitLuceneMatchVersion(t_AbstractAnalysisFactory *self);
          static PyObject *t_AbstractAnalysisFactory_require(t_AbstractAnalysisFactory *self, PyObject *args);
          static PyObject *t_AbstractAnalysisFactory_requireChar(t_AbstractAnalysisFactory *self, PyObject *args);
          static PyObject *t_AbstractAnalysisFactory_setExplicitLuceneMatchVersion(t_AbstractAnalysisFactory *self, PyObject *arg);
          static PyObject *t_AbstractAnalysisFactory_get__classArg(t_AbstractAnalysisFactory *self, void *data);
          static PyObject *t_AbstractAnalysisFactory_get__explicitLuceneMatchVersion(t_AbstractAnalysisFactory *self, void *data);
          static int t_AbstractAnalysisFactory_set__explicitLuceneMatchVersion(t_AbstractAnalysisFactory *self, PyObject *arg, void *data);
          static PyObject *t_AbstractAnalysisFactory_get__luceneMatchVersion(t_AbstractAnalysisFactory *self, void *data);
          static PyObject *t_AbstractAnalysisFactory_get__originalArgs(t_AbstractAnalysisFactory *self, void *data);
          static PyGetSetDef t_AbstractAnalysisFactory__fields_[] = {
            DECLARE_GET_FIELD(t_AbstractAnalysisFactory, classArg),
            DECLARE_GETSET_FIELD(t_AbstractAnalysisFactory, explicitLuceneMatchVersion),
            DECLARE_GET_FIELD(t_AbstractAnalysisFactory, luceneMatchVersion),
            DECLARE_GET_FIELD(t_AbstractAnalysisFactory, originalArgs),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_AbstractAnalysisFactory__methods_[] = {
            DECLARE_METHOD(t_AbstractAnalysisFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_AbstractAnalysisFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_AbstractAnalysisFactory, get, METH_VARARGS),
            DECLARE_METHOD(t_AbstractAnalysisFactory, getChar, METH_VARARGS),
            DECLARE_METHOD(t_AbstractAnalysisFactory, getClassArg, METH_NOARGS),
            DECLARE_METHOD(t_AbstractAnalysisFactory, getLuceneMatchVersion, METH_NOARGS),
            DECLARE_METHOD(t_AbstractAnalysisFactory, getOriginalArgs, METH_NOARGS),
            DECLARE_METHOD(t_AbstractAnalysisFactory, getSet, METH_VARARGS),
            DECLARE_METHOD(t_AbstractAnalysisFactory, isExplicitLuceneMatchVersion, METH_NOARGS),
            DECLARE_METHOD(t_AbstractAnalysisFactory, require, METH_VARARGS),
            DECLARE_METHOD(t_AbstractAnalysisFactory, requireChar, METH_VARARGS),
            DECLARE_METHOD(t_AbstractAnalysisFactory, setExplicitLuceneMatchVersion, METH_O),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(AbstractAnalysisFactory, t_AbstractAnalysisFactory, ::java::lang::Object, AbstractAnalysisFactory, abstract_init, 0, 0, t_AbstractAnalysisFactory__fields_, 0, 0);

          void t_AbstractAnalysisFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(AbstractAnalysisFactory), module, "AbstractAnalysisFactory", 0);
          }

          void t_AbstractAnalysisFactory::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(AbstractAnalysisFactory).tp_dict, "class_", make_descriptor(AbstractAnalysisFactory::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(AbstractAnalysisFactory).tp_dict, "wrapfn_", make_descriptor(t_AbstractAnalysisFactory::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(AbstractAnalysisFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(AbstractAnalysisFactory::initializeClass);
            PyDict_SetItemString(PY_TYPE(AbstractAnalysisFactory).tp_dict, "LUCENE_MATCH_VERSION_PARAM", make_descriptor(j2p(*AbstractAnalysisFactory::LUCENE_MATCH_VERSION_PARAM)));
          }

          static PyObject *t_AbstractAnalysisFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, AbstractAnalysisFactory::initializeClass, 1)))
              return NULL;
            return t_AbstractAnalysisFactory::wrap_Object(AbstractAnalysisFactory(((t_AbstractAnalysisFactory *) arg)->object.this$));
          }
          static PyObject *t_AbstractAnalysisFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, AbstractAnalysisFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_AbstractAnalysisFactory_get(t_AbstractAnalysisFactory *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 2:
              {
                ::java::util::Map a0((jobject) NULL);
                PyTypeObject **p0;
                ::java::lang::String a1((jobject) NULL);
                ::java::lang::String result((jobject) NULL);

                if (!parseArgs(args, "Ks", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_, &a1))
                {
                  OBJ_CALL(result = self->object.get(a0, a1));
                  return j2p(result);
                }
              }
              break;
             case 3:
              {
                ::java::util::Map a0((jobject) NULL);
                PyTypeObject **p0;
                ::java::lang::String a1((jobject) NULL);
                ::java::util::Collection a2((jobject) NULL);
                PyTypeObject **p2;
                ::java::lang::String result((jobject) NULL);

                if (!parseArgs(args, "KsK", ::java::util::Map::initializeClass, ::java::util::Collection::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_, &a1, &a2, &p2, ::java::util::t_Collection::parameters_))
                {
                  OBJ_CALL(result = self->object.get(a0, a1, a2));
                  return j2p(result);
                }
              }
              {
                ::java::util::Map a0((jobject) NULL);
                PyTypeObject **p0;
                ::java::lang::String a1((jobject) NULL);
                ::java::lang::String a2((jobject) NULL);
                ::java::lang::String result((jobject) NULL);

                if (!parseArgs(args, "Kss", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_, &a1, &a2))
                {
                  OBJ_CALL(result = self->object.get(a0, a1, a2));
                  return j2p(result);
                }
              }
              break;
             case 4:
              {
                ::java::util::Map a0((jobject) NULL);
                PyTypeObject **p0;
                ::java::lang::String a1((jobject) NULL);
                ::java::util::Collection a2((jobject) NULL);
                PyTypeObject **p2;
                ::java::lang::String a3((jobject) NULL);
                ::java::lang::String result((jobject) NULL);

                if (!parseArgs(args, "KsKs", ::java::util::Map::initializeClass, ::java::util::Collection::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_, &a1, &a2, &p2, ::java::util::t_Collection::parameters_, &a3))
                {
                  OBJ_CALL(result = self->object.get(a0, a1, a2, a3));
                  return j2p(result);
                }
              }
              break;
             case 5:
              {
                ::java::util::Map a0((jobject) NULL);
                PyTypeObject **p0;
                ::java::lang::String a1((jobject) NULL);
                ::java::util::Collection a2((jobject) NULL);
                PyTypeObject **p2;
                ::java::lang::String a3((jobject) NULL);
                jboolean a4;
                ::java::lang::String result((jobject) NULL);

                if (!parseArgs(args, "KsKsZ", ::java::util::Map::initializeClass, ::java::util::Collection::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_, &a1, &a2, &p2, ::java::util::t_Collection::parameters_, &a3, &a4))
                {
                  OBJ_CALL(result = self->object.get(a0, a1, a2, a3, a4));
                  return j2p(result);
                }
              }
            }

            PyErr_SetArgsError((PyObject *) self, "get", args);
            return NULL;
          }

          static PyObject *t_AbstractAnalysisFactory_getChar(t_AbstractAnalysisFactory *self, PyObject *args)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            ::java::lang::String a1((jobject) NULL);
            jchar a2;
            jchar result;

            if (!parseArgs(args, "KsC", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_, &a1, &a2))
            {
              OBJ_CALL(result = self->object.getChar(a0, a1, a2));
              return PyUnicode_FromUnicode((Py_UNICODE *) &result, 1);
            }

            PyErr_SetArgsError((PyObject *) self, "getChar", args);
            return NULL;
          }

          static PyObject *t_AbstractAnalysisFactory_getClassArg(t_AbstractAnalysisFactory *self)
          {
            ::java::lang::String result((jobject) NULL);
            OBJ_CALL(result = self->object.getClassArg());
            return j2p(result);
          }

          static PyObject *t_AbstractAnalysisFactory_getLuceneMatchVersion(t_AbstractAnalysisFactory *self)
          {
            ::org::apache::lucene::util::Version result((jobject) NULL);
            OBJ_CALL(result = self->object.getLuceneMatchVersion());
            return ::org::apache::lucene::util::t_Version::wrap_Object(result);
          }

          static PyObject *t_AbstractAnalysisFactory_getOriginalArgs(t_AbstractAnalysisFactory *self)
          {
            ::java::util::Map result((jobject) NULL);
            OBJ_CALL(result = self->object.getOriginalArgs());
            return ::java::util::t_Map::wrap_Object(result, &::java::lang::PY_TYPE(String), &::java::lang::PY_TYPE(String));
          }

          static PyObject *t_AbstractAnalysisFactory_getSet(t_AbstractAnalysisFactory *self, PyObject *args)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            ::java::lang::String a1((jobject) NULL);
            ::java::util::Set result((jobject) NULL);

            if (!parseArgs(args, "Ks", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_, &a1))
            {
              OBJ_CALL(result = self->object.getSet(a0, a1));
              return ::java::util::t_Set::wrap_Object(result, &::java::lang::PY_TYPE(String));
            }

            PyErr_SetArgsError((PyObject *) self, "getSet", args);
            return NULL;
          }

          static PyObject *t_AbstractAnalysisFactory_isExplicitLuceneMatchVersion(t_AbstractAnalysisFactory *self)
          {
            jboolean result;
            OBJ_CALL(result = self->object.isExplicitLuceneMatchVersion());
            Py_RETURN_BOOL(result);
          }

          static PyObject *t_AbstractAnalysisFactory_require(t_AbstractAnalysisFactory *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 2:
              {
                ::java::util::Map a0((jobject) NULL);
                PyTypeObject **p0;
                ::java::lang::String a1((jobject) NULL);
                ::java::lang::String result((jobject) NULL);

                if (!parseArgs(args, "Ks", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_, &a1))
                {
                  OBJ_CALL(result = self->object.require(a0, a1));
                  return j2p(result);
                }
              }
              break;
             case 3:
              {
                ::java::util::Map a0((jobject) NULL);
                PyTypeObject **p0;
                ::java::lang::String a1((jobject) NULL);
                ::java::util::Collection a2((jobject) NULL);
                PyTypeObject **p2;
                ::java::lang::String result((jobject) NULL);

                if (!parseArgs(args, "KsK", ::java::util::Map::initializeClass, ::java::util::Collection::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_, &a1, &a2, &p2, ::java::util::t_Collection::parameters_))
                {
                  OBJ_CALL(result = self->object.require(a0, a1, a2));
                  return j2p(result);
                }
              }
              break;
             case 4:
              {
                ::java::util::Map a0((jobject) NULL);
                PyTypeObject **p0;
                ::java::lang::String a1((jobject) NULL);
                ::java::util::Collection a2((jobject) NULL);
                PyTypeObject **p2;
                jboolean a3;
                ::java::lang::String result((jobject) NULL);

                if (!parseArgs(args, "KsKZ", ::java::util::Map::initializeClass, ::java::util::Collection::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_, &a1, &a2, &p2, ::java::util::t_Collection::parameters_, &a3))
                {
                  OBJ_CALL(result = self->object.require(a0, a1, a2, a3));
                  return j2p(result);
                }
              }
            }

            PyErr_SetArgsError((PyObject *) self, "require", args);
            return NULL;
          }

          static PyObject *t_AbstractAnalysisFactory_requireChar(t_AbstractAnalysisFactory *self, PyObject *args)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            ::java::lang::String a1((jobject) NULL);
            jchar result;

            if (!parseArgs(args, "Ks", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_, &a1))
            {
              OBJ_CALL(result = self->object.requireChar(a0, a1));
              return PyUnicode_FromUnicode((Py_UNICODE *) &result, 1);
            }

            PyErr_SetArgsError((PyObject *) self, "requireChar", args);
            return NULL;
          }

          static PyObject *t_AbstractAnalysisFactory_setExplicitLuceneMatchVersion(t_AbstractAnalysisFactory *self, PyObject *arg)
          {
            jboolean a0;

            if (!parseArg(arg, "Z", &a0))
            {
              OBJ_CALL(self->object.setExplicitLuceneMatchVersion(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setExplicitLuceneMatchVersion", arg);
            return NULL;
          }

          static PyObject *t_AbstractAnalysisFactory_get__classArg(t_AbstractAnalysisFactory *self, void *data)
          {
            ::java::lang::String value((jobject) NULL);
            OBJ_CALL(value = self->object.getClassArg());
            return j2p(value);
          }

          static PyObject *t_AbstractAnalysisFactory_get__explicitLuceneMatchVersion(t_AbstractAnalysisFactory *self, void *data)
          {
            jboolean value;
            OBJ_CALL(value = self->object.isExplicitLuceneMatchVersion());
            Py_RETURN_BOOL(value);
          }
          static int t_AbstractAnalysisFactory_set__explicitLuceneMatchVersion(t_AbstractAnalysisFactory *self, PyObject *arg, void *data)
          {
            {
              jboolean value;
              if (!parseArg(arg, "Z", &value))
              {
                INT_CALL(self->object.setExplicitLuceneMatchVersion(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "explicitLuceneMatchVersion", arg);
            return -1;
          }

          static PyObject *t_AbstractAnalysisFactory_get__luceneMatchVersion(t_AbstractAnalysisFactory *self, void *data)
          {
            ::org::apache::lucene::util::Version value((jobject) NULL);
            OBJ_CALL(value = self->object.getLuceneMatchVersion());
            return ::org::apache::lucene::util::t_Version::wrap_Object(value);
          }

          static PyObject *t_AbstractAnalysisFactory_get__originalArgs(t_AbstractAnalysisFactory *self, void *data)
          {
            ::java::util::Map value((jobject) NULL);
            OBJ_CALL(value = self->object.getOriginalArgs());
            return ::java::util::t_Map::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/pylucene/index/PythonIndexDeletionPolicy.h"
#include "org/apache/lucene/index/IndexCommit.h"
#include "java/io/IOException.h"
#include "java/lang/Throwable.h"
#include "java/util/List.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace pylucene {
      namespace index {

        ::java::lang::Class *PythonIndexDeletionPolicy::class$ = NULL;
        jmethodID *PythonIndexDeletionPolicy::mids$ = NULL;
        bool PythonIndexDeletionPolicy::live$ = false;

        jclass PythonIndexDeletionPolicy::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/pylucene/index/PythonIndexDeletionPolicy");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_finalize_54c6a166] = env->getMethodID(cls, "finalize", "()V");
            mids$[mid_onCommit_1fde8fc3] = env->getMethodID(cls, "onCommit", "(Ljava/util/List;)V");
            mids$[mid_onInit_1fde8fc3] = env->getMethodID(cls, "onInit", "(Ljava/util/List;)V");
            mids$[mid_pythonDecRef_54c6a166] = env->getMethodID(cls, "pythonDecRef", "()V");
            mids$[mid_pythonExtension_54c6a17a] = env->getMethodID(cls, "pythonExtension", "()J");
            mids$[mid_pythonExtension_0ee6df2f] = env->getMethodID(cls, "pythonExtension", "(J)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        PythonIndexDeletionPolicy::PythonIndexDeletionPolicy() : ::org::apache::lucene::index::IndexDeletionPolicy(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        void PythonIndexDeletionPolicy::finalize() const
        {
          env->callVoidMethod(this$, mids$[mid_finalize_54c6a166]);
        }

        jlong PythonIndexDeletionPolicy::pythonExtension() const
        {
          return env->callLongMethod(this$, mids$[mid_pythonExtension_54c6a17a]);
        }

        void PythonIndexDeletionPolicy::pythonExtension(jlong a0) const
        {
          env->callVoidMethod(this$, mids$[mid_pythonExtension_0ee6df2f], a0);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace pylucene {
      namespace index {
        static PyObject *t_PythonIndexDeletionPolicy_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_PythonIndexDeletionPolicy_instance_(PyTypeObject *type, PyObject *arg);
        static int t_PythonIndexDeletionPolicy_init_(t_PythonIndexDeletionPolicy *self, PyObject *args, PyObject *kwds);
        static PyObject *t_PythonIndexDeletionPolicy_finalize(t_PythonIndexDeletionPolicy *self);
        static PyObject *t_PythonIndexDeletionPolicy_pythonExtension(t_PythonIndexDeletionPolicy *self, PyObject *args);
        static void JNICALL t_PythonIndexDeletionPolicy_onCommit0(JNIEnv *jenv, jobject jobj, jobject a0);
        static void JNICALL t_PythonIndexDeletionPolicy_onInit1(JNIEnv *jenv, jobject jobj, jobject a0);
        static void JNICALL t_PythonIndexDeletionPolicy_pythonDecRef2(JNIEnv *jenv, jobject jobj);
        static PyObject *t_PythonIndexDeletionPolicy_get__self(t_PythonIndexDeletionPolicy *self, void *data);
        static PyGetSetDef t_PythonIndexDeletionPolicy__fields_[] = {
          DECLARE_GET_FIELD(t_PythonIndexDeletionPolicy, self),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_PythonIndexDeletionPolicy__methods_[] = {
          DECLARE_METHOD(t_PythonIndexDeletionPolicy, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PythonIndexDeletionPolicy, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PythonIndexDeletionPolicy, finalize, METH_NOARGS),
          DECLARE_METHOD(t_PythonIndexDeletionPolicy, pythonExtension, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(PythonIndexDeletionPolicy, t_PythonIndexDeletionPolicy, ::org::apache::lucene::index::IndexDeletionPolicy, PythonIndexDeletionPolicy, t_PythonIndexDeletionPolicy_init_, 0, 0, t_PythonIndexDeletionPolicy__fields_, 0, 0);

        void t_PythonIndexDeletionPolicy::install(PyObject *module)
        {
          installType(&PY_TYPE(PythonIndexDeletionPolicy), module, "PythonIndexDeletionPolicy", 1);
        }

        void t_PythonIndexDeletionPolicy::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(PythonIndexDeletionPolicy).tp_dict, "class_", make_descriptor(PythonIndexDeletionPolicy::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(PythonIndexDeletionPolicy).tp_dict, "wrapfn_", make_descriptor(t_PythonIndexDeletionPolicy::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(PythonIndexDeletionPolicy).tp_dict, "boxfn_", make_descriptor(boxObject));
          jclass cls = env->getClass(PythonIndexDeletionPolicy::initializeClass);
          JNINativeMethod methods[] = {
            { "onCommit", "(Ljava/util/List;)V", (void *) t_PythonIndexDeletionPolicy_onCommit0 },
            { "onInit", "(Ljava/util/List;)V", (void *) t_PythonIndexDeletionPolicy_onInit1 },
            { "pythonDecRef", "()V", (void *) t_PythonIndexDeletionPolicy_pythonDecRef2 },
          };
          env->registerNatives(cls, methods, 3);
        }

        static PyObject *t_PythonIndexDeletionPolicy_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, PythonIndexDeletionPolicy::initializeClass, 1)))
            return NULL;
          return t_PythonIndexDeletionPolicy::wrap_Object(PythonIndexDeletionPolicy(((t_PythonIndexDeletionPolicy *) arg)->object.this$));
        }
        static PyObject *t_PythonIndexDeletionPolicy_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, PythonIndexDeletionPolicy::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_PythonIndexDeletionPolicy_init_(t_PythonIndexDeletionPolicy *self, PyObject *args, PyObject *kwds)
        {
          PythonIndexDeletionPolicy object((jobject) NULL);

          INT_CALL(object = PythonIndexDeletionPolicy());
          self->object = object;

          Py_INCREF((PyObject *) self);
          self->object.pythonExtension((jlong) (Py_intptr_t) (void *) self);

          return 0;
        }

        static PyObject *t_PythonIndexDeletionPolicy_finalize(t_PythonIndexDeletionPolicy *self)
        {
          OBJ_CALL(self->object.finalize());
          Py_RETURN_NONE;
        }

        static PyObject *t_PythonIndexDeletionPolicy_pythonExtension(t_PythonIndexDeletionPolicy *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 0:
            {
              jlong result;
              OBJ_CALL(result = self->object.pythonExtension());
              return PyLong_FromLongLong((PY_LONG_LONG) result);
            }
            break;
           case 1:
            {
              jlong a0;

              if (!parseArgs(args, "J", &a0))
              {
                OBJ_CALL(self->object.pythonExtension(a0));
                Py_RETURN_NONE;
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "pythonExtension", args);
          return NULL;
        }

        static void JNICALL t_PythonIndexDeletionPolicy_onCommit0(JNIEnv *jenv, jobject jobj, jobject a0)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonIndexDeletionPolicy::mids$[PythonIndexDeletionPolicy::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          PyObject *o0 = ::java::util::t_List::wrap_Object(::java::util::List(a0));
          PyObject *result = PyObject_CallMethod(obj, "onCommit", "O", o0);
          Py_DECREF(o0);
          if (!result)
            throwPythonError();
          else
            Py_DECREF(result);
        }

        static void JNICALL t_PythonIndexDeletionPolicy_onInit1(JNIEnv *jenv, jobject jobj, jobject a0)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonIndexDeletionPolicy::mids$[PythonIndexDeletionPolicy::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          PyObject *o0 = ::java::util::t_List::wrap_Object(::java::util::List(a0));
          PyObject *result = PyObject_CallMethod(obj, "onInit", "O", o0);
          Py_DECREF(o0);
          if (!result)
            throwPythonError();
          else
            Py_DECREF(result);
        }

        static void JNICALL t_PythonIndexDeletionPolicy_pythonDecRef2(JNIEnv *jenv, jobject jobj)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonIndexDeletionPolicy::mids$[PythonIndexDeletionPolicy::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;

          if (obj != NULL)
          {
            jenv->CallVoidMethod(jobj, PythonIndexDeletionPolicy::mids$[PythonIndexDeletionPolicy::mid_pythonExtension_0ee6df2f], (jlong) 0);
            env->finalizeObject(jenv, obj);
          }
        }

        static PyObject *t_PythonIndexDeletionPolicy_get__self(t_PythonIndexDeletionPolicy *self, void *data)
        {
          jlong ptr;
          OBJ_CALL(ptr = self->object.pythonExtension());
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;

          if (obj != NULL)
          {
            Py_INCREF(obj);
            return obj;
          }
          else
            Py_RETURN_NONE;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/tr/ApostropheFilter.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace tr {

          ::java::lang::Class *ApostropheFilter::class$ = NULL;
          jmethodID *ApostropheFilter::mids$ = NULL;
          bool ApostropheFilter::live$ = false;

          jclass ApostropheFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/tr/ApostropheFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_c7c794dc] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;)V");
              mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ApostropheFilter::ApostropheFilter(const ::org::apache::lucene::analysis::TokenStream & a0) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_c7c794dc, a0.this$)) {}

          jboolean ApostropheFilter::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_54c6a16a]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace tr {
          static PyObject *t_ApostropheFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_ApostropheFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_ApostropheFilter_init_(t_ApostropheFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_ApostropheFilter_incrementToken(t_ApostropheFilter *self, PyObject *args);

          static PyMethodDef t_ApostropheFilter__methods_[] = {
            DECLARE_METHOD(t_ApostropheFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ApostropheFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ApostropheFilter, incrementToken, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(ApostropheFilter, t_ApostropheFilter, ::org::apache::lucene::analysis::TokenFilter, ApostropheFilter, t_ApostropheFilter_init_, 0, 0, 0, 0, 0);

          void t_ApostropheFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(ApostropheFilter), module, "ApostropheFilter", 0);
          }

          void t_ApostropheFilter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(ApostropheFilter).tp_dict, "class_", make_descriptor(ApostropheFilter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(ApostropheFilter).tp_dict, "wrapfn_", make_descriptor(t_ApostropheFilter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(ApostropheFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_ApostropheFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, ApostropheFilter::initializeClass, 1)))
              return NULL;
            return t_ApostropheFilter::wrap_Object(ApostropheFilter(((t_ApostropheFilter *) arg)->object.this$));
          }
          static PyObject *t_ApostropheFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, ApostropheFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_ApostropheFilter_init_(t_ApostropheFilter *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ApostropheFilter object((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              INT_CALL(object = ApostropheFilter(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_ApostropheFilter_incrementToken(t_ApostropheFilter *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(ApostropheFilter), (PyObject *) self, "incrementToken", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/FuzzyTermsEnum.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "org/apache/lucene/util/Bits.h"
#include "org/apache/lucene/index/TermsEnum$SeekStatus.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/index/Terms.h"
#include "java/util/Comparator.h"
#include "org/apache/lucene/index/Term.h"
#include "org/apache/lucene/util/AttributeSource.h"
#include "org/apache/lucene/index/DocsEnum.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/index/TermState.h"
#include "org/apache/lucene/index/DocsAndPositionsEnum.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *FuzzyTermsEnum::class$ = NULL;
        jmethodID *FuzzyTermsEnum::mids$ = NULL;
        bool FuzzyTermsEnum::live$ = false;

        jclass FuzzyTermsEnum::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/FuzzyTermsEnum");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_538f73aa] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/Terms;Lorg/apache/lucene/util/AttributeSource;Lorg/apache/lucene/index/Term;FIZ)V");
            mids$[mid_docFreq_54c6a179] = env->getMethodID(cls, "docFreq", "()I");
            mids$[mid_docs_e6d4c3ef] = env->getMethodID(cls, "docs", "(Lorg/apache/lucene/util/Bits;Lorg/apache/lucene/index/DocsEnum;I)Lorg/apache/lucene/index/DocsEnum;");
            mids$[mid_docsAndPositions_b5d9c11b] = env->getMethodID(cls, "docsAndPositions", "(Lorg/apache/lucene/util/Bits;Lorg/apache/lucene/index/DocsAndPositionsEnum;I)Lorg/apache/lucene/index/DocsAndPositionsEnum;");
            mids$[mid_getComparator_5a7ff2fc] = env->getMethodID(cls, "getComparator", "()Ljava/util/Comparator;");
            mids$[mid_getMinSimilarity_54c6a176] = env->getMethodID(cls, "getMinSimilarity", "()F");
            mids$[mid_getScaleFactor_54c6a176] = env->getMethodID(cls, "getScaleFactor", "()F");
            mids$[mid_next_4ae19461] = env->getMethodID(cls, "next", "()Lorg/apache/lucene/util/BytesRef;");
            mids$[mid_ord_54c6a17a] = env->getMethodID(cls, "ord", "()J");
            mids$[mid_seekCeil_fa9d72c4] = env->getMethodID(cls, "seekCeil", "(Lorg/apache/lucene/util/BytesRef;)Lorg/apache/lucene/index/TermsEnum$SeekStatus;");
            mids$[mid_seekExact_7bc03dc8] = env->getMethodID(cls, "seekExact", "(Lorg/apache/lucene/util/BytesRef;)Z");
            mids$[mid_seekExact_0ee6df2f] = env->getMethodID(cls, "seekExact", "(J)V");
            mids$[mid_seekExact_fe46da51] = env->getMethodID(cls, "seekExact", "(Lorg/apache/lucene/util/BytesRef;Lorg/apache/lucene/index/TermState;)V");
            mids$[mid_term_4ae19461] = env->getMethodID(cls, "term", "()Lorg/apache/lucene/util/BytesRef;");
            mids$[mid_termState_3e41fede] = env->getMethodID(cls, "termState", "()Lorg/apache/lucene/index/TermState;");
            mids$[mid_totalTermFreq_54c6a17a] = env->getMethodID(cls, "totalTermFreq", "()J");
            mids$[mid_setEnum_0f660bfe] = env->getMethodID(cls, "setEnum", "(Lorg/apache/lucene/index/TermsEnum;)V");
            mids$[mid_getAutomatonEnum_6dd5cb2f] = env->getMethodID(cls, "getAutomatonEnum", "(ILorg/apache/lucene/util/BytesRef;)Lorg/apache/lucene/index/TermsEnum;");
            mids$[mid_maxEditDistanceChanged_0741f897] = env->getMethodID(cls, "maxEditDistanceChanged", "(Lorg/apache/lucene/util/BytesRef;IZ)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        FuzzyTermsEnum::FuzzyTermsEnum(const ::org::apache::lucene::index::Terms & a0, const ::org::apache::lucene::util::AttributeSource & a1, const ::org::apache::lucene::index::Term & a2, jfloat a3, jint a4, jboolean a5) : ::org::apache::lucene::index::TermsEnum(env->newObject(initializeClass, &mids$, mid_init$_538f73aa, a0.this$, a1.this$, a2.this$, a3, a4, a5)) {}

        jint FuzzyTermsEnum::docFreq() const
        {
          return env->callIntMethod(this$, mids$[mid_docFreq_54c6a179]);
        }

        ::org::apache::lucene::index::DocsEnum FuzzyTermsEnum::docs(const ::org::apache::lucene::util::Bits & a0, const ::org::apache::lucene::index::DocsEnum & a1, jint a2) const
        {
          return ::org::apache::lucene::index::DocsEnum(env->callObjectMethod(this$, mids$[mid_docs_e6d4c3ef], a0.this$, a1.this$, a2));
        }

        ::org::apache::lucene::index::DocsAndPositionsEnum FuzzyTermsEnum::docsAndPositions(const ::org::apache::lucene::util::Bits & a0, const ::org::apache::lucene::index::DocsAndPositionsEnum & a1, jint a2) const
        {
          return ::org::apache::lucene::index::DocsAndPositionsEnum(env->callObjectMethod(this$, mids$[mid_docsAndPositions_b5d9c11b], a0.this$, a1.this$, a2));
        }

        ::java::util::Comparator FuzzyTermsEnum::getComparator() const
        {
          return ::java::util::Comparator(env->callObjectMethod(this$, mids$[mid_getComparator_5a7ff2fc]));
        }

        jfloat FuzzyTermsEnum::getMinSimilarity() const
        {
          return env->callFloatMethod(this$, mids$[mid_getMinSimilarity_54c6a176]);
        }

        jfloat FuzzyTermsEnum::getScaleFactor() const
        {
          return env->callFloatMethod(this$, mids$[mid_getScaleFactor_54c6a176]);
        }

        ::org::apache::lucene::util::BytesRef FuzzyTermsEnum::next() const
        {
          return ::org::apache::lucene::util::BytesRef(env->callObjectMethod(this$, mids$[mid_next_4ae19461]));
        }

        jlong FuzzyTermsEnum::ord() const
        {
          return env->callLongMethod(this$, mids$[mid_ord_54c6a17a]);
        }

        ::org::apache::lucene::index::TermsEnum$SeekStatus FuzzyTermsEnum::seekCeil(const ::org::apache::lucene::util::BytesRef & a0) const
        {
          return ::org::apache::lucene::index::TermsEnum$SeekStatus(env->callObjectMethod(this$, mids$[mid_seekCeil_fa9d72c4], a0.this$));
        }

        jboolean FuzzyTermsEnum::seekExact(const ::org::apache::lucene::util::BytesRef & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_seekExact_7bc03dc8], a0.this$);
        }

        void FuzzyTermsEnum::seekExact(jlong a0) const
        {
          env->callVoidMethod(this$, mids$[mid_seekExact_0ee6df2f], a0);
        }

        void FuzzyTermsEnum::seekExact(const ::org::apache::lucene::util::BytesRef & a0, const ::org::apache::lucene::index::TermState & a1) const
        {
          env->callVoidMethod(this$, mids$[mid_seekExact_fe46da51], a0.this$, a1.this$);
        }

        ::org::apache::lucene::util::BytesRef FuzzyTermsEnum::term() const
        {
          return ::org::apache::lucene::util::BytesRef(env->callObjectMethod(this$, mids$[mid_term_4ae19461]));
        }

        ::org::apache::lucene::index::TermState FuzzyTermsEnum::termState() const
        {
          return ::org::apache::lucene::index::TermState(env->callObjectMethod(this$, mids$[mid_termState_3e41fede]));
        }

        jlong FuzzyTermsEnum::totalTermFreq() const
        {
          return env->callLongMethod(this$, mids$[mid_totalTermFreq_54c6a17a]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"
#include "org/apache/lucene/search/FuzzyTermsEnum$LevenshteinAutomataAttributeImpl.h"
#include "org/apache/lucene/search/FuzzyTermsEnum$LevenshteinAutomataAttribute.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_FuzzyTermsEnum_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FuzzyTermsEnum_instance_(PyTypeObject *type, PyObject *arg);
        static int t_FuzzyTermsEnum_init_(t_FuzzyTermsEnum *self, PyObject *args, PyObject *kwds);
        static PyObject *t_FuzzyTermsEnum_docFreq(t_FuzzyTermsEnum *self, PyObject *args);
        static PyObject *t_FuzzyTermsEnum_docs(t_FuzzyTermsEnum *self, PyObject *args);
        static PyObject *t_FuzzyTermsEnum_docsAndPositions(t_FuzzyTermsEnum *self, PyObject *args);
        static PyObject *t_FuzzyTermsEnum_getComparator(t_FuzzyTermsEnum *self, PyObject *args);
        static PyObject *t_FuzzyTermsEnum_getMinSimilarity(t_FuzzyTermsEnum *self);
        static PyObject *t_FuzzyTermsEnum_getScaleFactor(t_FuzzyTermsEnum *self);
        static PyObject *t_FuzzyTermsEnum_next(t_FuzzyTermsEnum *self, PyObject *args);
        static PyObject *t_FuzzyTermsEnum_ord(t_FuzzyTermsEnum *self, PyObject *args);
        static PyObject *t_FuzzyTermsEnum_seekCeil(t_FuzzyTermsEnum *self, PyObject *args);
        static PyObject *t_FuzzyTermsEnum_seekExact(t_FuzzyTermsEnum *self, PyObject *args);
        static PyObject *t_FuzzyTermsEnum_term(t_FuzzyTermsEnum *self, PyObject *args);
        static PyObject *t_FuzzyTermsEnum_termState(t_FuzzyTermsEnum *self, PyObject *args);
        static PyObject *t_FuzzyTermsEnum_totalTermFreq(t_FuzzyTermsEnum *self, PyObject *args);
        static PyObject *t_FuzzyTermsEnum_get__comparator(t_FuzzyTermsEnum *self, void *data);
        static PyObject *t_FuzzyTermsEnum_get__minSimilarity(t_FuzzyTermsEnum *self, void *data);
        static PyObject *t_FuzzyTermsEnum_get__scaleFactor(t_FuzzyTermsEnum *self, void *data);
        static PyGetSetDef t_FuzzyTermsEnum__fields_[] = {
          DECLARE_GET_FIELD(t_FuzzyTermsEnum, comparator),
          DECLARE_GET_FIELD(t_FuzzyTermsEnum, minSimilarity),
          DECLARE_GET_FIELD(t_FuzzyTermsEnum, scaleFactor),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_FuzzyTermsEnum__methods_[] = {
          DECLARE_METHOD(t_FuzzyTermsEnum, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FuzzyTermsEnum, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FuzzyTermsEnum, docFreq, METH_VARARGS),
          DECLARE_METHOD(t_FuzzyTermsEnum, docs, METH_VARARGS),
          DECLARE_METHOD(t_FuzzyTermsEnum, docsAndPositions, METH_VARARGS),
          DECLARE_METHOD(t_FuzzyTermsEnum, getComparator, METH_VARARGS),
          DECLARE_METHOD(t_FuzzyTermsEnum, getMinSimilarity, METH_NOARGS),
          DECLARE_METHOD(t_FuzzyTermsEnum, getScaleFactor, METH_NOARGS),
          DECLARE_METHOD(t_FuzzyTermsEnum, next, METH_VARARGS),
          DECLARE_METHOD(t_FuzzyTermsEnum, ord, METH_VARARGS),
          DECLARE_METHOD(t_FuzzyTermsEnum, seekCeil, METH_VARARGS),
          DECLARE_METHOD(t_FuzzyTermsEnum, seekExact, METH_VARARGS),
          DECLARE_METHOD(t_FuzzyTermsEnum, term, METH_VARARGS),
          DECLARE_METHOD(t_FuzzyTermsEnum, termState, METH_VARARGS),
          DECLARE_METHOD(t_FuzzyTermsEnum, totalTermFreq, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(FuzzyTermsEnum, t_FuzzyTermsEnum, ::org::apache::lucene::index::TermsEnum, FuzzyTermsEnum, t_FuzzyTermsEnum_init_, PyObject_SelfIter, ((PyObject *(*)(t_FuzzyTermsEnum *)) get_next< t_FuzzyTermsEnum,::org::apache::lucene::util::t_BytesRef,::org::apache::lucene::util::BytesRef >), t_FuzzyTermsEnum__fields_, 0, 0);

        void t_FuzzyTermsEnum::install(PyObject *module)
        {
          installType(&PY_TYPE(FuzzyTermsEnum), module, "FuzzyTermsEnum", 0);
          PyDict_SetItemString(PY_TYPE(FuzzyTermsEnum).tp_dict, "LevenshteinAutomataAttributeImpl", make_descriptor(&PY_TYPE(FuzzyTermsEnum$LevenshteinAutomataAttributeImpl)));
          PyDict_SetItemString(PY_TYPE(FuzzyTermsEnum).tp_dict, "LevenshteinAutomataAttribute", make_descriptor(&PY_TYPE(FuzzyTermsEnum$LevenshteinAutomataAttribute)));
        }

        void t_FuzzyTermsEnum::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(FuzzyTermsEnum).tp_dict, "class_", make_descriptor(FuzzyTermsEnum::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(FuzzyTermsEnum).tp_dict, "wrapfn_", make_descriptor(t_FuzzyTermsEnum::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(FuzzyTermsEnum).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_FuzzyTermsEnum_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, FuzzyTermsEnum::initializeClass, 1)))
            return NULL;
          return t_FuzzyTermsEnum::wrap_Object(FuzzyTermsEnum(((t_FuzzyTermsEnum *) arg)->object.this$));
        }
        static PyObject *t_FuzzyTermsEnum_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, FuzzyTermsEnum::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_FuzzyTermsEnum_init_(t_FuzzyTermsEnum *self, PyObject *args, PyObject *kwds)
        {
          ::org::apache::lucene::index::Terms a0((jobject) NULL);
          ::org::apache::lucene::util::AttributeSource a1((jobject) NULL);
          ::org::apache::lucene::index::Term a2((jobject) NULL);
          jfloat a3;
          jint a4;
          jboolean a5;
          FuzzyTermsEnum object((jobject) NULL);

          if (!parseArgs(args, "kkkFIZ", ::org::apache::lucene::index::Terms::initializeClass, ::org::apache::lucene::util::AttributeSource::initializeClass, ::org::apache::lucene::index::Term::initializeClass, &a0, &a1, &a2, &a3, &a4, &a5))
          {
            INT_CALL(object = FuzzyTermsEnum(a0, a1, a2, a3, a4, a5));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_FuzzyTermsEnum_docFreq(t_FuzzyTermsEnum *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.docFreq());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(FuzzyTermsEnum), (PyObject *) self, "docFreq", args, 2);
        }

        static PyObject *t_FuzzyTermsEnum_docs(t_FuzzyTermsEnum *self, PyObject *args)
        {
          ::org::apache::lucene::util::Bits a0((jobject) NULL);
          ::org::apache::lucene::index::DocsEnum a1((jobject) NULL);
          jint a2;
          ::org::apache::lucene::index::DocsEnum result((jobject) NULL);

          if (!parseArgs(args, "kkI", ::org::apache::lucene::util::Bits::initializeClass, ::org::apache::lucene::index::DocsEnum::initializeClass, &a0, &a1, &a2))
          {
            OBJ_CALL(result = self->object.docs(a0, a1, a2));
            return ::org::apache::lucene::index::t_DocsEnum::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(FuzzyTermsEnum), (PyObject *) self, "docs", args, 2);
        }

        static PyObject *t_FuzzyTermsEnum_docsAndPositions(t_FuzzyTermsEnum *self, PyObject *args)
        {
          ::org::apache::lucene::util::Bits a0((jobject) NULL);
          ::org::apache::lucene::index::DocsAndPositionsEnum a1((jobject) NULL);
          jint a2;
          ::org::apache::lucene::index::DocsAndPositionsEnum result((jobject) NULL);

          if (!parseArgs(args, "kkI", ::org::apache::lucene::util::Bits::initializeClass, ::org::apache::lucene::index::DocsAndPositionsEnum::initializeClass, &a0, &a1, &a2))
          {
            OBJ_CALL(result = self->object.docsAndPositions(a0, a1, a2));
            return ::org::apache::lucene::index::t_DocsAndPositionsEnum::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(FuzzyTermsEnum), (PyObject *) self, "docsAndPositions", args, 2);
        }

        static PyObject *t_FuzzyTermsEnum_getComparator(t_FuzzyTermsEnum *self, PyObject *args)
        {
          ::java::util::Comparator result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.getComparator());
            return ::java::util::t_Comparator::wrap_Object(result, &::org::apache::lucene::util::PY_TYPE(BytesRef));
          }

          return callSuper(&PY_TYPE(FuzzyTermsEnum), (PyObject *) self, "getComparator", args, 2);
        }

        static PyObject *t_FuzzyTermsEnum_getMinSimilarity(t_FuzzyTermsEnum *self)
        {
          jfloat result;
          OBJ_CALL(result = self->object.getMinSimilarity());
          return PyFloat_FromDouble((double) result);
        }

        static PyObject *t_FuzzyTermsEnum_getScaleFactor(t_FuzzyTermsEnum *self)
        {
          jfloat result;
          OBJ_CALL(result = self->object.getScaleFactor());
          return PyFloat_FromDouble((double) result);
        }

        static PyObject *t_FuzzyTermsEnum_next(t_FuzzyTermsEnum *self, PyObject *args)
        {
          ::org::apache::lucene::util::BytesRef result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.next());
            return ::org::apache::lucene::util::t_BytesRef::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(FuzzyTermsEnum), (PyObject *) self, "next", args, 2);
        }

        static PyObject *t_FuzzyTermsEnum_ord(t_FuzzyTermsEnum *self, PyObject *args)
        {
          jlong result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.ord());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          return callSuper(&PY_TYPE(FuzzyTermsEnum), (PyObject *) self, "ord", args, 2);
        }

        static PyObject *t_FuzzyTermsEnum_seekCeil(t_FuzzyTermsEnum *self, PyObject *args)
        {
          ::org::apache::lucene::util::BytesRef a0((jobject) NULL);
          ::org::apache::lucene::index::TermsEnum$SeekStatus result((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::util::BytesRef::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.seekCeil(a0));
            return ::org::apache::lucene::index::t_TermsEnum$SeekStatus::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(FuzzyTermsEnum), (PyObject *) self, "seekCeil", args, 2);
        }

        static PyObject *t_FuzzyTermsEnum_seekExact(t_FuzzyTermsEnum *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              ::org::apache::lucene::util::BytesRef a0((jobject) NULL);
              jboolean result;

              if (!parseArgs(args, "k", ::org::apache::lucene::util::BytesRef::initializeClass, &a0))
              {
                OBJ_CALL(result = self->object.seekExact(a0));
                Py_RETURN_BOOL(result);
              }
            }
            {
              jlong a0;

              if (!parseArgs(args, "J", &a0))
              {
                OBJ_CALL(self->object.seekExact(a0));
                Py_RETURN_NONE;
              }
            }
            break;
           case 2:
            {
              ::org::apache::lucene::util::BytesRef a0((jobject) NULL);
              ::org::apache::lucene::index::TermState a1((jobject) NULL);

              if (!parseArgs(args, "kk", ::org::apache::lucene::util::BytesRef::initializeClass, ::org::apache::lucene::index::TermState::initializeClass, &a0, &a1))
              {
                OBJ_CALL(self->object.seekExact(a0, a1));
                Py_RETURN_NONE;
              }
            }
          }

          return callSuper(&PY_TYPE(FuzzyTermsEnum), (PyObject *) self, "seekExact", args, 2);
        }

        static PyObject *t_FuzzyTermsEnum_term(t_FuzzyTermsEnum *self, PyObject *args)
        {
          ::org::apache::lucene::util::BytesRef result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.term());
            return ::org::apache::lucene::util::t_BytesRef::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(FuzzyTermsEnum), (PyObject *) self, "term", args, 2);
        }

        static PyObject *t_FuzzyTermsEnum_termState(t_FuzzyTermsEnum *self, PyObject *args)
        {
          ::org::apache::lucene::index::TermState result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.termState());
            return ::org::apache::lucene::index::t_TermState::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(FuzzyTermsEnum), (PyObject *) self, "termState", args, 2);
        }

        static PyObject *t_FuzzyTermsEnum_totalTermFreq(t_FuzzyTermsEnum *self, PyObject *args)
        {
          jlong result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.totalTermFreq());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          return callSuper(&PY_TYPE(FuzzyTermsEnum), (PyObject *) self, "totalTermFreq", args, 2);
        }

        static PyObject *t_FuzzyTermsEnum_get__comparator(t_FuzzyTermsEnum *self, void *data)
        {
          ::java::util::Comparator value((jobject) NULL);
          OBJ_CALL(value = self->object.getComparator());
          return ::java::util::t_Comparator::wrap_Object(value);
        }

        static PyObject *t_FuzzyTermsEnum_get__minSimilarity(t_FuzzyTermsEnum *self, void *data)
        {
          jfloat value;
          OBJ_CALL(value = self->object.getMinSimilarity());
          return PyFloat_FromDouble((double) value);
        }

        static PyObject *t_FuzzyTermsEnum_get__scaleFactor(t_FuzzyTermsEnum *self, void *data)
        {
          jfloat value;
          OBJ_CALL(value = self->object.getScaleFactor());
          return PyFloat_FromDouble((double) value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queries/function/valuesource/IntFieldSource.h"
#include "org/apache/lucene/queries/function/FunctionValues.h"
#include "java/lang/Class.h"
#include "java/lang/Object.h"
#include "java/util/Map.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/search/FieldCache$IntParser.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {

            ::java::lang::Class *IntFieldSource::class$ = NULL;
            jmethodID *IntFieldSource::mids$ = NULL;
            bool IntFieldSource::live$ = false;

            jclass IntFieldSource::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queries/function/valuesource/IntFieldSource");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_5fdc3f48] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;)V");
                mids$[mid_init$_6da5ba0c] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Lorg/apache/lucene/search/FieldCache$IntParser;)V");
                mids$[mid_description_14c7b5c5] = env->getMethodID(cls, "description", "()Ljava/lang/String;");
                mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
                mids$[mid_getValues_4c566485] = env->getMethodID(cls, "getValues", "(Ljava/util/Map;Lorg/apache/lucene/index/AtomicReaderContext;)Lorg/apache/lucene/queries/function/FunctionValues;");
                mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            IntFieldSource::IntFieldSource(const ::java::lang::String & a0) : ::org::apache::lucene::queries::function::valuesource::FieldCacheSource(env->newObject(initializeClass, &mids$, mid_init$_5fdc3f48, a0.this$)) {}

            IntFieldSource::IntFieldSource(const ::java::lang::String & a0, const ::org::apache::lucene::search::FieldCache$IntParser & a1) : ::org::apache::lucene::queries::function::valuesource::FieldCacheSource(env->newObject(initializeClass, &mids$, mid_init$_6da5ba0c, a0.this$, a1.this$)) {}

            ::java::lang::String IntFieldSource::description() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_description_14c7b5c5]));
            }

            jboolean IntFieldSource::equals(const ::java::lang::Object & a0) const
            {
              return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
            }

            ::org::apache::lucene::queries::function::FunctionValues IntFieldSource::getValues(const ::java::util::Map & a0, const ::org::apache::lucene::index::AtomicReaderContext & a1) const
            {
              return ::org::apache::lucene::queries::function::FunctionValues(env->callObjectMethod(this$, mids$[mid_getValues_4c566485], a0.this$, a1.this$));
            }

            jint IntFieldSource::hashCode() const
            {
              return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {
            static PyObject *t_IntFieldSource_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_IntFieldSource_instance_(PyTypeObject *type, PyObject *arg);
            static int t_IntFieldSource_init_(t_IntFieldSource *self, PyObject *args, PyObject *kwds);
            static PyObject *t_IntFieldSource_description(t_IntFieldSource *self, PyObject *args);
            static PyObject *t_IntFieldSource_equals(t_IntFieldSource *self, PyObject *args);
            static PyObject *t_IntFieldSource_getValues(t_IntFieldSource *self, PyObject *args);
            static PyObject *t_IntFieldSource_hashCode(t_IntFieldSource *self, PyObject *args);

            static PyMethodDef t_IntFieldSource__methods_[] = {
              DECLARE_METHOD(t_IntFieldSource, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_IntFieldSource, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_IntFieldSource, description, METH_VARARGS),
              DECLARE_METHOD(t_IntFieldSource, equals, METH_VARARGS),
              DECLARE_METHOD(t_IntFieldSource, getValues, METH_VARARGS),
              DECLARE_METHOD(t_IntFieldSource, hashCode, METH_VARARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(IntFieldSource, t_IntFieldSource, ::org::apache::lucene::queries::function::valuesource::FieldCacheSource, IntFieldSource, t_IntFieldSource_init_, 0, 0, 0, 0, 0);

            void t_IntFieldSource::install(PyObject *module)
            {
              installType(&PY_TYPE(IntFieldSource), module, "IntFieldSource", 0);
            }

            void t_IntFieldSource::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(IntFieldSource).tp_dict, "class_", make_descriptor(IntFieldSource::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(IntFieldSource).tp_dict, "wrapfn_", make_descriptor(t_IntFieldSource::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(IntFieldSource).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_IntFieldSource_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, IntFieldSource::initializeClass, 1)))
                return NULL;
              return t_IntFieldSource::wrap_Object(IntFieldSource(((t_IntFieldSource *) arg)->object.this$));
            }
            static PyObject *t_IntFieldSource_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, IntFieldSource::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_IntFieldSource_init_(t_IntFieldSource *self, PyObject *args, PyObject *kwds)
            {
              switch (PyTuple_GET_SIZE(args)) {
               case 1:
                {
                  ::java::lang::String a0((jobject) NULL);
                  IntFieldSource object((jobject) NULL);

                  if (!parseArgs(args, "s", &a0))
                  {
                    INT_CALL(object = IntFieldSource(a0));
                    self->object = object;
                    break;
                  }
                }
                goto err;
               case 2:
                {
                  ::java::lang::String a0((jobject) NULL);
                  ::org::apache::lucene::search::FieldCache$IntParser a1((jobject) NULL);
                  IntFieldSource object((jobject) NULL);

                  if (!parseArgs(args, "sk", ::org::apache::lucene::search::FieldCache$IntParser::initializeClass, &a0, &a1))
                  {
                    INT_CALL(object = IntFieldSource(a0, a1));
                    self->object = object;
                    break;
                  }
                }
               default:
               err:
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_IntFieldSource_description(t_IntFieldSource *self, PyObject *args)
            {
              ::java::lang::String result((jobject) NULL);

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.description());
                return j2p(result);
              }

              return callSuper(&PY_TYPE(IntFieldSource), (PyObject *) self, "description", args, 2);
            }

            static PyObject *t_IntFieldSource_equals(t_IntFieldSource *self, PyObject *args)
            {
              ::java::lang::Object a0((jobject) NULL);
              jboolean result;

              if (!parseArgs(args, "o", &a0))
              {
                OBJ_CALL(result = self->object.equals(a0));
                Py_RETURN_BOOL(result);
              }

              return callSuper(&PY_TYPE(IntFieldSource), (PyObject *) self, "equals", args, 2);
            }

            static PyObject *t_IntFieldSource_getValues(t_IntFieldSource *self, PyObject *args)
            {
              ::java::util::Map a0((jobject) NULL);
              PyTypeObject **p0;
              ::org::apache::lucene::index::AtomicReaderContext a1((jobject) NULL);
              ::org::apache::lucene::queries::function::FunctionValues result((jobject) NULL);

              if (!parseArgs(args, "Kk", ::java::util::Map::initializeClass, ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_, &a1))
              {
                OBJ_CALL(result = self->object.getValues(a0, a1));
                return ::org::apache::lucene::queries::function::t_FunctionValues::wrap_Object(result);
              }

              return callSuper(&PY_TYPE(IntFieldSource), (PyObject *) self, "getValues", args, 2);
            }

            static PyObject *t_IntFieldSource_hashCode(t_IntFieldSource *self, PyObject *args)
            {
              jint result;

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.hashCode());
                return PyInt_FromLong((long) result);
              }

              return callSuper(&PY_TYPE(IntFieldSource), (PyObject *) self, "hashCode", args, 2);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/br/BrazilianAnalyzer.h"
#include "org/apache/lucene/util/Version.h"
#include "java/lang/String.h"
#include "org/apache/lucene/analysis/util/CharArraySet.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace br {

          ::java::lang::Class *BrazilianAnalyzer::class$ = NULL;
          jmethodID *BrazilianAnalyzer::mids$ = NULL;
          bool BrazilianAnalyzer::live$ = false;
          ::java::lang::String *BrazilianAnalyzer::DEFAULT_STOPWORD_FILE = NULL;

          jclass BrazilianAnalyzer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/br/BrazilianAnalyzer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_0d96cf33] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;)V");
              mids$[mid_init$_83eafe28] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/analysis/util/CharArraySet;)V");
              mids$[mid_init$_c9d7e4a3] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/analysis/util/CharArraySet;Lorg/apache/lucene/analysis/util/CharArraySet;)V");
              mids$[mid_getDefaultStopSet_d2d3505c] = env->getStaticMethodID(cls, "getDefaultStopSet", "()Lorg/apache/lucene/analysis/util/CharArraySet;");
              mids$[mid_createComponents_1be39cae] = env->getMethodID(cls, "createComponents", "(Ljava/lang/String;Ljava/io/Reader;)Lorg/apache/lucene/analysis/Analyzer$TokenStreamComponents;");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              DEFAULT_STOPWORD_FILE = new ::java::lang::String(env->getStaticObjectField(cls, "DEFAULT_STOPWORD_FILE", "Ljava/lang/String;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          BrazilianAnalyzer::BrazilianAnalyzer(const ::org::apache::lucene::util::Version & a0) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_0d96cf33, a0.this$)) {}

          BrazilianAnalyzer::BrazilianAnalyzer(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::analysis::util::CharArraySet & a1) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_83eafe28, a0.this$, a1.this$)) {}

          BrazilianAnalyzer::BrazilianAnalyzer(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::analysis::util::CharArraySet & a1, const ::org::apache::lucene::analysis::util::CharArraySet & a2) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_c9d7e4a3, a0.this$, a1.this$, a2.this$)) {}

          ::org::apache::lucene::analysis::util::CharArraySet BrazilianAnalyzer::getDefaultStopSet()
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::analysis::util::CharArraySet(env->callStaticObjectMethod(cls, mids$[mid_getDefaultStopSet_d2d3505c]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace br {
          static PyObject *t_BrazilianAnalyzer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_BrazilianAnalyzer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_BrazilianAnalyzer_init_(t_BrazilianAnalyzer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_BrazilianAnalyzer_getDefaultStopSet(PyTypeObject *type);
          static PyObject *t_BrazilianAnalyzer_get__defaultStopSet(t_BrazilianAnalyzer *self, void *data);
          static PyGetSetDef t_BrazilianAnalyzer__fields_[] = {
            DECLARE_GET_FIELD(t_BrazilianAnalyzer, defaultStopSet),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_BrazilianAnalyzer__methods_[] = {
            DECLARE_METHOD(t_BrazilianAnalyzer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_BrazilianAnalyzer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_BrazilianAnalyzer, getDefaultStopSet, METH_NOARGS | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(BrazilianAnalyzer, t_BrazilianAnalyzer, ::org::apache::lucene::analysis::util::StopwordAnalyzerBase, BrazilianAnalyzer, t_BrazilianAnalyzer_init_, 0, 0, t_BrazilianAnalyzer__fields_, 0, 0);

          void t_BrazilianAnalyzer::install(PyObject *module)
          {
            installType(&PY_TYPE(BrazilianAnalyzer), module, "BrazilianAnalyzer", 0);
          }

          void t_BrazilianAnalyzer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(BrazilianAnalyzer).tp_dict, "class_", make_descriptor(BrazilianAnalyzer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(BrazilianAnalyzer).tp_dict, "wrapfn_", make_descriptor(t_BrazilianAnalyzer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(BrazilianAnalyzer).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(BrazilianAnalyzer::initializeClass);
            PyDict_SetItemString(PY_TYPE(BrazilianAnalyzer).tp_dict, "DEFAULT_STOPWORD_FILE", make_descriptor(j2p(*BrazilianAnalyzer::DEFAULT_STOPWORD_FILE)));
          }

          static PyObject *t_BrazilianAnalyzer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, BrazilianAnalyzer::initializeClass, 1)))
              return NULL;
            return t_BrazilianAnalyzer::wrap_Object(BrazilianAnalyzer(((t_BrazilianAnalyzer *) arg)->object.this$));
          }
          static PyObject *t_BrazilianAnalyzer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, BrazilianAnalyzer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_BrazilianAnalyzer_init_(t_BrazilianAnalyzer *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                BrazilianAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "K", ::org::apache::lucene::util::Version::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_))
                {
                  INT_CALL(object = BrazilianAnalyzer(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 2:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                ::org::apache::lucene::analysis::util::CharArraySet a1((jobject) NULL);
                PyTypeObject **p1;
                BrazilianAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "KK", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1, &p1, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_))
                {
                  INT_CALL(object = BrazilianAnalyzer(a0, a1));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 3:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                ::org::apache::lucene::analysis::util::CharArraySet a1((jobject) NULL);
                PyTypeObject **p1;
                ::org::apache::lucene::analysis::util::CharArraySet a2((jobject) NULL);
                PyTypeObject **p2;
                BrazilianAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "KKK", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1, &p1, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_, &a2, &p2, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_))
                {
                  INT_CALL(object = BrazilianAnalyzer(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_BrazilianAnalyzer_getDefaultStopSet(PyTypeObject *type)
          {
            ::org::apache::lucene::analysis::util::CharArraySet result((jobject) NULL);
            OBJ_CALL(result = ::org::apache::lucene::analysis::br::BrazilianAnalyzer::getDefaultStopSet());
            return ::org::apache::lucene::analysis::util::t_CharArraySet::wrap_Object(result);
          }

          static PyObject *t_BrazilianAnalyzer_get__defaultStopSet(t_BrazilianAnalyzer *self, void *data)
          {
            ::org::apache::lucene::analysis::util::CharArraySet value((jobject) NULL);
            OBJ_CALL(value = self->object.getDefaultStopSet());
            return ::org::apache::lucene::analysis::util::t_CharArraySet::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/core/TypeTokenFilter.h"
#include "java/util/Set.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "org/apache/lucene/util/Version.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace core {

          ::java::lang::Class *TypeTokenFilter::class$ = NULL;
          jmethodID *TypeTokenFilter::mids$ = NULL;
          bool TypeTokenFilter::live$ = false;

          jclass TypeTokenFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/core/TypeTokenFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_ecce6e0b] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/analysis/TokenStream;Ljava/util/Set;)V");
              mids$[mid_init$_eb1a7514] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/analysis/TokenStream;Ljava/util/Set;Z)V");
              mids$[mid_init$_bac183a2] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;ZLorg/apache/lucene/analysis/TokenStream;Ljava/util/Set;)V");
              mids$[mid_init$_436958cb] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;ZLorg/apache/lucene/analysis/TokenStream;Ljava/util/Set;Z)V");
              mids$[mid_accept_54c6a16a] = env->getMethodID(cls, "accept", "()Z");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          TypeTokenFilter::TypeTokenFilter(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::analysis::TokenStream & a1, const ::java::util::Set & a2) : ::org::apache::lucene::analysis::util::FilteringTokenFilter(env->newObject(initializeClass, &mids$, mid_init$_ecce6e0b, a0.this$, a1.this$, a2.this$)) {}

          TypeTokenFilter::TypeTokenFilter(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::analysis::TokenStream & a1, const ::java::util::Set & a2, jboolean a3) : ::org::apache::lucene::analysis::util::FilteringTokenFilter(env->newObject(initializeClass, &mids$, mid_init$_eb1a7514, a0.this$, a1.this$, a2.this$, a3)) {}

          TypeTokenFilter::TypeTokenFilter(const ::org::apache::lucene::util::Version & a0, jboolean a1, const ::org::apache::lucene::analysis::TokenStream & a2, const ::java::util::Set & a3) : ::org::apache::lucene::analysis::util::FilteringTokenFilter(env->newObject(initializeClass, &mids$, mid_init$_bac183a2, a0.this$, a1, a2.this$, a3.this$)) {}

          TypeTokenFilter::TypeTokenFilter(const ::org::apache::lucene::util::Version & a0, jboolean a1, const ::org::apache::lucene::analysis::TokenStream & a2, const ::java::util::Set & a3, jboolean a4) : ::org::apache::lucene::analysis::util::FilteringTokenFilter(env->newObject(initializeClass, &mids$, mid_init$_436958cb, a0.this$, a1, a2.this$, a3.this$, a4)) {}
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace core {
          static PyObject *t_TypeTokenFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_TypeTokenFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_TypeTokenFilter_init_(t_TypeTokenFilter *self, PyObject *args, PyObject *kwds);

          static PyMethodDef t_TypeTokenFilter__methods_[] = {
            DECLARE_METHOD(t_TypeTokenFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_TypeTokenFilter, instance_, METH_O | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(TypeTokenFilter, t_TypeTokenFilter, ::org::apache::lucene::analysis::util::FilteringTokenFilter, TypeTokenFilter, t_TypeTokenFilter_init_, 0, 0, 0, 0, 0);

          void t_TypeTokenFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(TypeTokenFilter), module, "TypeTokenFilter", 0);
          }

          void t_TypeTokenFilter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(TypeTokenFilter).tp_dict, "class_", make_descriptor(TypeTokenFilter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(TypeTokenFilter).tp_dict, "wrapfn_", make_descriptor(t_TypeTokenFilter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(TypeTokenFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_TypeTokenFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, TypeTokenFilter::initializeClass, 1)))
              return NULL;
            return t_TypeTokenFilter::wrap_Object(TypeTokenFilter(((t_TypeTokenFilter *) arg)->object.this$));
          }
          static PyObject *t_TypeTokenFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, TypeTokenFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_TypeTokenFilter_init_(t_TypeTokenFilter *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 3:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                ::org::apache::lucene::analysis::TokenStream a1((jobject) NULL);
                ::java::util::Set a2((jobject) NULL);
                PyTypeObject **p2;
                TypeTokenFilter object((jobject) NULL);

                if (!parseArgs(args, "KkK", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::TokenStream::initializeClass, ::java::util::Set::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1, &a2, &p2, ::java::util::t_Set::parameters_))
                {
                  INT_CALL(object = TypeTokenFilter(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 4:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                ::org::apache::lucene::analysis::TokenStream a1((jobject) NULL);
                ::java::util::Set a2((jobject) NULL);
                PyTypeObject **p2;
                jboolean a3;
                TypeTokenFilter object((jobject) NULL);

                if (!parseArgs(args, "KkKZ", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::TokenStream::initializeClass, ::java::util::Set::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1, &a2, &p2, ::java::util::t_Set::parameters_, &a3))
                {
                  INT_CALL(object = TypeTokenFilter(a0, a1, a2, a3));
                  self->object = object;
                  break;
                }
              }
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                jboolean a1;
                ::org::apache::lucene::analysis::TokenStream a2((jobject) NULL);
                ::java::util::Set a3((jobject) NULL);
                PyTypeObject **p3;
                TypeTokenFilter object((jobject) NULL);

                if (!parseArgs(args, "KZkK", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::TokenStream::initializeClass, ::java::util::Set::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1, &a2, &a3, &p3, ::java::util::t_Set::parameters_))
                {
                  INT_CALL(object = TypeTokenFilter(a0, a1, a2, a3));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 5:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                jboolean a1;
                ::org::apache::lucene::analysis::TokenStream a2((jobject) NULL);
                ::java::util::Set a3((jobject) NULL);
                PyTypeObject **p3;
                jboolean a4;
                TypeTokenFilter object((jobject) NULL);

                if (!parseArgs(args, "KZkKZ", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::TokenStream::initializeClass, ::java::util::Set::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1, &a2, &a3, &p3, ::java::util::t_Set::parameters_, &a4))
                {
                  INT_CALL(object = TypeTokenFilter(a0, a1, a2, a3, a4));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "java/text/SimpleDateFormat.h"
#include "java/util/Locale.h"
#include "java/lang/Class.h"
#include "java/lang/Object.h"
#include "java/lang/StringBuffer.h"
#include "java/lang/String.h"
#include "java/util/Date.h"
#include "JArray.h"

namespace java {
  namespace text {

    ::java::lang::Class *SimpleDateFormat::class$ = NULL;
    jmethodID *SimpleDateFormat::mids$ = NULL;
    bool SimpleDateFormat::live$ = false;

    jclass SimpleDateFormat::initializeClass(bool getOnly)
    {
      if (getOnly)
        return (jclass) (live$ ? class$->this$ : NULL);
      if (class$ == NULL)
      {
        jclass cls = (jclass) env->findClass("java/text/SimpleDateFormat");

        mids$ = new jmethodID[max_mid];
        mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
        mids$[mid_init$_5fdc3f48] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;)V");
        mids$[mid_init$_f32a91b9] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Ljava/util/Locale;)V");
        mids$[mid_applyLocalizedPattern_5fdc3f48] = env->getMethodID(cls, "applyLocalizedPattern", "(Ljava/lang/String;)V");
        mids$[mid_applyPattern_5fdc3f48] = env->getMethodID(cls, "applyPattern", "(Ljava/lang/String;)V");
        mids$[mid_clone_846352c3] = env->getMethodID(cls, "clone", "()Ljava/lang/Object;");
        mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
        mids$[mid_get2DigitYearStart_6e14513a] = env->getMethodID(cls, "get2DigitYearStart", "()Ljava/util/Date;");
        mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
        mids$[mid_set2DigitYearStart_aa83a4b3] = env->getMethodID(cls, "set2DigitYearStart", "(Ljava/util/Date;)V");
        mids$[mid_toLocalizedPattern_14c7b5c5] = env->getMethodID(cls, "toLocalizedPattern", "()Ljava/lang/String;");
        mids$[mid_toPattern_14c7b5c5] = env->getMethodID(cls, "toPattern", "()Ljava/lang/String;");

        class$ = (::java::lang::Class *) new JObject(cls);
        live$ = true;
      }
      return (jclass) class$->this$;
    }

    SimpleDateFormat::SimpleDateFormat() : ::java::text::DateFormat(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

    SimpleDateFormat::SimpleDateFormat(const ::java::lang::String & a0) : ::java::text::DateFormat(env->newObject(initializeClass, &mids$, mid_init$_5fdc3f48, a0.this$)) {}

    SimpleDateFormat::SimpleDateFormat(const ::java::lang::String & a0, const ::java::util::Locale & a1) : ::java::text::DateFormat(env->newObject(initializeClass, &mids$, mid_init$_f32a91b9, a0.this$, a1.this$)) {}

    void SimpleDateFormat::applyLocalizedPattern(const ::java::lang::String & a0) const
    {
      env->callVoidMethod(this$, mids$[mid_applyLocalizedPattern_5fdc3f48], a0.this$);
    }

    void SimpleDateFormat::applyPattern(const ::java::lang::String & a0) const
    {
      env->callVoidMethod(this$, mids$[mid_applyPattern_5fdc3f48], a0.this$);
    }

    ::java::lang::Object SimpleDateFormat::clone() const
    {
      return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_clone_846352c3]));
    }

    jboolean SimpleDateFormat::equals(const ::java::lang::Object & a0) const
    {
      return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
    }

    ::java::util::Date SimpleDateFormat::get2DigitYearStart() const
    {
      return ::java::util::Date(env->callObjectMethod(this$, mids$[mid_get2DigitYearStart_6e14513a]));
    }

    jint SimpleDateFormat::hashCode() const
    {
      return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
    }

    void SimpleDateFormat::set2DigitYearStart(const ::java::util::Date & a0) const
    {
      env->callVoidMethod(this$, mids$[mid_set2DigitYearStart_aa83a4b3], a0.this$);
    }

    ::java::lang::String SimpleDateFormat::toLocalizedPattern() const
    {
      return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toLocalizedPattern_14c7b5c5]));
    }

    ::java::lang::String SimpleDateFormat::toPattern() const
    {
      return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toPattern_14c7b5c5]));
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace java {
  namespace text {
    static PyObject *t_SimpleDateFormat_cast_(PyTypeObject *type, PyObject *arg);
    static PyObject *t_SimpleDateFormat_instance_(PyTypeObject *type, PyObject *arg);
    static int t_SimpleDateFormat_init_(t_SimpleDateFormat *self, PyObject *args, PyObject *kwds);
    static PyObject *t_SimpleDateFormat_applyLocalizedPattern(t_SimpleDateFormat *self, PyObject *arg);
    static PyObject *t_SimpleDateFormat_applyPattern(t_SimpleDateFormat *self, PyObject *arg);
    static PyObject *t_SimpleDateFormat_clone(t_SimpleDateFormat *self, PyObject *args);
    static PyObject *t_SimpleDateFormat_equals(t_SimpleDateFormat *self, PyObject *args);
    static PyObject *t_SimpleDateFormat_get2DigitYearStart(t_SimpleDateFormat *self);
    static PyObject *t_SimpleDateFormat_hashCode(t_SimpleDateFormat *self, PyObject *args);
    static PyObject *t_SimpleDateFormat_set2DigitYearStart(t_SimpleDateFormat *self, PyObject *arg);
    static PyObject *t_SimpleDateFormat_toLocalizedPattern(t_SimpleDateFormat *self);
    static PyObject *t_SimpleDateFormat_toPattern(t_SimpleDateFormat *self);
    static PyObject *t_SimpleDateFormat_get__2DigitYearStart(t_SimpleDateFormat *self, void *data);
    static int t_SimpleDateFormat_set__2DigitYearStart(t_SimpleDateFormat *self, PyObject *arg, void *data);
    static PyGetSetDef t_SimpleDateFormat__fields_[] = {
      DECLARE_GETSET_FIELD(t_SimpleDateFormat, 2DigitYearStart),
      { NULL, NULL, NULL, NULL, NULL }
    };

    static PyMethodDef t_SimpleDateFormat__methods_[] = {
      DECLARE_METHOD(t_SimpleDateFormat, cast_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_SimpleDateFormat, instance_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_SimpleDateFormat, applyLocalizedPattern, METH_O),
      DECLARE_METHOD(t_SimpleDateFormat, applyPattern, METH_O),
      DECLARE_METHOD(t_SimpleDateFormat, clone, METH_VARARGS),
      DECLARE_METHOD(t_SimpleDateFormat, equals, METH_VARARGS),
      DECLARE_METHOD(t_SimpleDateFormat, get2DigitYearStart, METH_NOARGS),
      DECLARE_METHOD(t_SimpleDateFormat, hashCode, METH_VARARGS),
      DECLARE_METHOD(t_SimpleDateFormat, set2DigitYearStart, METH_O),
      DECLARE_METHOD(t_SimpleDateFormat, toLocalizedPattern, METH_NOARGS),
      DECLARE_METHOD(t_SimpleDateFormat, toPattern, METH_NOARGS),
      { NULL, NULL, 0, NULL }
    };

    DECLARE_TYPE(SimpleDateFormat, t_SimpleDateFormat, ::java::text::DateFormat, SimpleDateFormat, t_SimpleDateFormat_init_, 0, 0, t_SimpleDateFormat__fields_, 0, 0);

    void t_SimpleDateFormat::install(PyObject *module)
    {
      installType(&PY_TYPE(SimpleDateFormat), module, "SimpleDateFormat", 0);
    }

    void t_SimpleDateFormat::initialize(PyObject *module)
    {
      PyDict_SetItemString(PY_TYPE(SimpleDateFormat).tp_dict, "class_", make_descriptor(SimpleDateFormat::initializeClass, 1));
      PyDict_SetItemString(PY_TYPE(SimpleDateFormat).tp_dict, "wrapfn_", make_descriptor(t_SimpleDateFormat::wrap_jobject));
      PyDict_SetItemString(PY_TYPE(SimpleDateFormat).tp_dict, "boxfn_", make_descriptor(boxObject));
    }

    static PyObject *t_SimpleDateFormat_cast_(PyTypeObject *type, PyObject *arg)
    {
      if (!(arg = castCheck(arg, SimpleDateFormat::initializeClass, 1)))
        return NULL;
      return t_SimpleDateFormat::wrap_Object(SimpleDateFormat(((t_SimpleDateFormat *) arg)->object.this$));
    }
    static PyObject *t_SimpleDateFormat_instance_(PyTypeObject *type, PyObject *arg)
    {
      if (!castCheck(arg, SimpleDateFormat::initializeClass, 0))
        Py_RETURN_FALSE;
      Py_RETURN_TRUE;
    }

    static int t_SimpleDateFormat_init_(t_SimpleDateFormat *self, PyObject *args, PyObject *kwds)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 0:
        {
          SimpleDateFormat object((jobject) NULL);

          INT_CALL(object = SimpleDateFormat());
          self->object = object;
          break;
        }
        goto err;
       case 1:
        {
          ::java::lang::String a0((jobject) NULL);
          SimpleDateFormat object((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            INT_CALL(object = SimpleDateFormat(a0));
            self->object = object;
            break;
          }
        }
        goto err;
       case 2:
        {
          ::java::lang::String a0((jobject) NULL);
          ::java::util::Locale a1((jobject) NULL);
          SimpleDateFormat object((jobject) NULL);

          if (!parseArgs(args, "sk", ::java::util::Locale::initializeClass, &a0, &a1))
          {
            INT_CALL(object = SimpleDateFormat(a0, a1));
            self->object = object;
            break;
          }
        }
       default:
       err:
        PyErr_SetArgsError((PyObject *) self, "__init__", args);
        return -1;
      }

      return 0;
    }

    static PyObject *t_SimpleDateFormat_applyLocalizedPattern(t_SimpleDateFormat *self, PyObject *arg)
    {
      ::java::lang::String a0((jobject) NULL);

      if (!parseArg(arg, "s", &a0))
      {
        OBJ_CALL(self->object.applyLocalizedPattern(a0));
        Py_RETURN_NONE;
      }

      PyErr_SetArgsError((PyObject *) self, "applyLocalizedPattern", arg);
      return NULL;
    }

    static PyObject *t_SimpleDateFormat_applyPattern(t_SimpleDateFormat *self, PyObject *arg)
    {
      ::java::lang::String a0((jobject) NULL);

      if (!parseArg(arg, "s", &a0))
      {
        OBJ_CALL(self->object.applyPattern(a0));
        Py_RETURN_NONE;
      }

      PyErr_SetArgsError((PyObject *) self, "applyPattern", arg);
      return NULL;
    }

    static PyObject *t_SimpleDateFormat_clone(t_SimpleDateFormat *self, PyObject *args)
    {
      ::java::lang::Object result((jobject) NULL);

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.clone());
        return ::java::lang::t_Object::wrap_Object(result);
      }

      return callSuper(&PY_TYPE(SimpleDateFormat), (PyObject *) self, "clone", args, 2);
    }

    static PyObject *t_SimpleDateFormat_equals(t_SimpleDateFormat *self, PyObject *args)
    {
      ::java::lang::Object a0((jobject) NULL);
      jboolean result;

      if (!parseArgs(args, "o", &a0))
      {
        OBJ_CALL(result = self->object.equals(a0));
        Py_RETURN_BOOL(result);
      }

      return callSuper(&PY_TYPE(SimpleDateFormat), (PyObject *) self, "equals", args, 2);
    }

    static PyObject *t_SimpleDateFormat_get2DigitYearStart(t_SimpleDateFormat *self)
    {
      ::java::util::Date result((jobject) NULL);
      OBJ_CALL(result = self->object.get2DigitYearStart());
      return ::java::util::t_Date::wrap_Object(result);
    }

    static PyObject *t_SimpleDateFormat_hashCode(t_SimpleDateFormat *self, PyObject *args)
    {
      jint result;

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.hashCode());
        return PyInt_FromLong((long) result);
      }

      return callSuper(&PY_TYPE(SimpleDateFormat), (PyObject *) self, "hashCode", args, 2);
    }

    static PyObject *t_SimpleDateFormat_set2DigitYearStart(t_SimpleDateFormat *self, PyObject *arg)
    {
      ::java::util::Date a0((jobject) NULL);

      if (!parseArg(arg, "k", ::java::util::Date::initializeClass, &a0))
      {
        OBJ_CALL(self->object.set2DigitYearStart(a0));
        Py_RETURN_NONE;
      }

      PyErr_SetArgsError((PyObject *) self, "set2DigitYearStart", arg);
      return NULL;
    }

    static PyObject *t_SimpleDateFormat_toLocalizedPattern(t_SimpleDateFormat *self)
    {
      ::java::lang::String result((jobject) NULL);
      OBJ_CALL(result = self->object.toLocalizedPattern());
      return j2p(result);
    }

    static PyObject *t_SimpleDateFormat_toPattern(t_SimpleDateFormat *self)
    {
      ::java::lang::String result((jobject) NULL);
      OBJ_CALL(result = self->object.toPattern());
      return j2p(result);
    }

    static PyObject *t_SimpleDateFormat_get__2DigitYearStart(t_SimpleDateFormat *self, void *data)
    {
      ::java::util::Date value((jobject) NULL);
      OBJ_CALL(value = self->object.get2DigitYearStart());
      return ::java::util::t_Date::wrap_Object(value);
    }
    static int t_SimpleDateFormat_set__2DigitYearStart(t_SimpleDateFormat *self, PyObject *arg, void *data)
    {
      {
        ::java::util::Date value((jobject) NULL);
        if (!parseArg(arg, "k", ::java::util::Date::initializeClass, &value))
        {
          INT_CALL(self->object.set2DigitYearStart(value));
          return 0;
        }
      }
      PyErr_SetArgsError((PyObject *) self, "2DigitYearStart", arg);
      return -1;
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "java/io/Closeable.h"
#include "org/apache/lucene/index/IndexWriter.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/index/IndexReaderContext.h"
#include "org/apache/lucene/index/Fields.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/store/Directory.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "org/apache/lucene/index/IndexCommit.h"
#include "org/apache/lucene/index/IndexReader$ReaderClosedListener.h"
#include "org/apache/lucene/index/Term.h"
#include "java/lang/String.h"
#include "org/apache/lucene/index/StoredFieldVisitor.h"
#include "org/apache/lucene/index/DirectoryReader.h"
#include "org/apache/lucene/index/Terms.h"
#include "java/util/Set.h"
#include "org/apache/lucene/document/Document.h"
#include "java/util/List.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *IndexReader::class$ = NULL;
        jmethodID *IndexReader::mids$ = NULL;
        bool IndexReader::live$ = false;

        jclass IndexReader::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/IndexReader");

            mids$ = new jmethodID[max_mid];
            mids$[mid_addReaderClosedListener_60172ded] = env->getMethodID(cls, "addReaderClosedListener", "(Lorg/apache/lucene/index/IndexReader$ReaderClosedListener;)V");
            mids$[mid_close_54c6a166] = env->getMethodID(cls, "close", "()V");
            mids$[mid_decRef_54c6a166] = env->getMethodID(cls, "decRef", "()V");
            mids$[mid_docFreq_7eca6a9e] = env->getMethodID(cls, "docFreq", "(Lorg/apache/lucene/index/Term;)I");
            mids$[mid_document_9c2cfcf9] = env->getMethodID(cls, "document", "(I)Lorg/apache/lucene/document/Document;");
            mids$[mid_document_f65cb155] = env->getMethodID(cls, "document", "(ILjava/util/Set;)Lorg/apache/lucene/document/Document;");
            mids$[mid_document_a2ea3ebe] = env->getMethodID(cls, "document", "(ILorg/apache/lucene/index/StoredFieldVisitor;)V");
            mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
            mids$[mid_getCombinedCoreAndDeletesKey_846352c3] = env->getMethodID(cls, "getCombinedCoreAndDeletesKey", "()Ljava/lang/Object;");
            mids$[mid_getContext_5823c99a] = env->getMethodID(cls, "getContext", "()Lorg/apache/lucene/index/IndexReaderContext;");
            mids$[mid_getCoreCacheKey_846352c3] = env->getMethodID(cls, "getCoreCacheKey", "()Ljava/lang/Object;");
            mids$[mid_getDocCount_5fdc3f57] = env->getMethodID(cls, "getDocCount", "(Ljava/lang/String;)I");
            mids$[mid_getRefCount_54c6a179] = env->getMethodID(cls, "getRefCount", "()I");
            mids$[mid_getSumDocFreq_5fdc3f54] = env->getMethodID(cls, "getSumDocFreq", "(Ljava/lang/String;)J");
            mids$[mid_getSumTotalTermFreq_5fdc3f54] = env->getMethodID(cls, "getSumTotalTermFreq", "(Ljava/lang/String;)J");
            mids$[mid_getTermVector_ffaa1be2] = env->getMethodID(cls, "getTermVector", "(ILjava/lang/String;)Lorg/apache/lucene/index/Terms;");
            mids$[mid_getTermVectors_ef1c9c73] = env->getMethodID(cls, "getTermVectors", "(I)Lorg/apache/lucene/index/Fields;");
            mids$[mid_hasDeletions_54c6a16a] = env->getMethodID(cls, "hasDeletions", "()Z");
            mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
            mids$[mid_incRef_54c6a166] = env->getMethodID(cls, "incRef", "()V");
            mids$[mid_leaves_87851566] = env->getMethodID(cls, "leaves", "()Ljava/util/List;");
            mids$[mid_maxDoc_54c6a179] = env->getMethodID(cls, "maxDoc", "()I");
            mids$[mid_numDeletedDocs_54c6a179] = env->getMethodID(cls, "numDeletedDocs", "()I");
            mids$[mid_numDocs_54c6a179] = env->getMethodID(cls, "numDocs", "()I");
            mids$[mid_open_26fd6272] = env->getStaticMethodID(cls, "open", "(Lorg/apache/lucene/index/IndexCommit;)Lorg/apache/lucene/index/DirectoryReader;");
            mids$[mid_open_109b8ac7] = env->getStaticMethodID(cls, "open", "(Lorg/apache/lucene/store/Directory;)Lorg/apache/lucene/index/DirectoryReader;");
            mids$[mid_open_d7b74111] = env->getStaticMethodID(cls, "open", "(Lorg/apache/lucene/store/Directory;I)Lorg/apache/lucene/index/DirectoryReader;");
            mids$[mid_open_13bade12] = env->getStaticMethodID(cls, "open", "(Lorg/apache/lucene/index/IndexCommit;I)Lorg/apache/lucene/index/DirectoryReader;");
            mids$[mid_open_e4ee522b] = env->getStaticMethodID(cls, "open", "(Lorg/apache/lucene/index/IndexWriter;Z)Lorg/apache/lucene/index/DirectoryReader;");
            mids$[mid_registerParentReader_7d7eaea9] = env->getMethodID(cls, "registerParentReader", "(Lorg/apache/lucene/index/IndexReader;)V");
            mids$[mid_removeReaderClosedListener_60172ded] = env->getMethodID(cls, "removeReaderClosedListener", "(Lorg/apache/lucene/index/IndexReader$ReaderClosedListener;)V");
            mids$[mid_totalTermFreq_7eca6a9d] = env->getMethodID(cls, "totalTermFreq", "(Lorg/apache/lucene/index/Term;)J");
            mids$[mid_tryIncRef_54c6a16a] = env->getMethodID(cls, "tryIncRef", "()Z");
            mids$[mid_ensureOpen_54c6a166] = env->getMethodID(cls, "ensureOpen", "()V");
            mids$[mid_doClose_54c6a166] = env->getMethodID(cls, "doClose", "()V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        void IndexReader::addReaderClosedListener(const ::org::apache::lucene::index::IndexReader$ReaderClosedListener & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_addReaderClosedListener_60172ded], a0.this$);
        }

        void IndexReader::close() const
        {
          env->callVoidMethod(this$, mids$[mid_close_54c6a166]);
        }

        void IndexReader::decRef() const
        {
          env->callVoidMethod(this$, mids$[mid_decRef_54c6a166]);
        }

        jint IndexReader::docFreq(const ::org::apache::lucene::index::Term & a0) const
        {
          return env->callIntMethod(this$, mids$[mid_docFreq_7eca6a9e], a0.this$);
        }

        ::org::apache::lucene::document::Document IndexReader::document(jint a0) const
        {
          return ::org::apache::lucene::document::Document(env->callObjectMethod(this$, mids$[mid_document_9c2cfcf9], a0));
        }

        ::org::apache::lucene::document::Document IndexReader::document(jint a0, const ::java::util::Set & a1) const
        {
          return ::org::apache::lucene::document::Document(env->callObjectMethod(this$, mids$[mid_document_f65cb155], a0, a1.this$));
        }

        void IndexReader::document(jint a0, const ::org::apache::lucene::index::StoredFieldVisitor & a1) const
        {
          env->callVoidMethod(this$, mids$[mid_document_a2ea3ebe], a0, a1.this$);
        }

        jboolean IndexReader::equals(const ::java::lang::Object & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
        }

        ::java::lang::Object IndexReader::getCombinedCoreAndDeletesKey() const
        {
          return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_getCombinedCoreAndDeletesKey_846352c3]));
        }

        ::org::apache::lucene::index::IndexReaderContext IndexReader::getContext() const
        {
          return ::org::apache::lucene::index::IndexReaderContext(env->callObjectMethod(this$, mids$[mid_getContext_5823c99a]));
        }

        ::java::lang::Object IndexReader::getCoreCacheKey() const
        {
          return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_getCoreCacheKey_846352c3]));
        }

        jint IndexReader::getDocCount(const ::java::lang::String & a0) const
        {
          return env->callIntMethod(this$, mids$[mid_getDocCount_5fdc3f57], a0.this$);
        }

        jint IndexReader::getRefCount() const
        {
          return env->callIntMethod(this$, mids$[mid_getRefCount_54c6a179]);
        }

        jlong IndexReader::getSumDocFreq(const ::java::lang::String & a0) const
        {
          return env->callLongMethod(this$, mids$[mid_getSumDocFreq_5fdc3f54], a0.this$);
        }

        jlong IndexReader::getSumTotalTermFreq(const ::java::lang::String & a0) const
        {
          return env->callLongMethod(this$, mids$[mid_getSumTotalTermFreq_5fdc3f54], a0.this$);
        }

        ::org::apache::lucene::index::Terms IndexReader::getTermVector(jint a0, const ::java::lang::String & a1) const
        {
          return ::org::apache::lucene::index::Terms(env->callObjectMethod(this$, mids$[mid_getTermVector_ffaa1be2], a0, a1.this$));
        }

        ::org::apache::lucene::index::Fields IndexReader::getTermVectors(jint a0) const
        {
          return ::org::apache::lucene::index::Fields(env->callObjectMethod(this$, mids$[mid_getTermVectors_ef1c9c73], a0));
        }

        jboolean IndexReader::hasDeletions() const
        {
          return env->callBooleanMethod(this$, mids$[mid_hasDeletions_54c6a16a]);
        }

        jint IndexReader::hashCode() const
        {
          return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
        }

        void IndexReader::incRef() const
        {
          env->callVoidMethod(this$, mids$[mid_incRef_54c6a166]);
        }

        ::java::util::List IndexReader::leaves() const
        {
          return ::java::util::List(env->callObjectMethod(this$, mids$[mid_leaves_87851566]));
        }

        jint IndexReader::maxDoc() const
        {
          return env->callIntMethod(this$, mids$[mid_maxDoc_54c6a179]);
        }

        jint IndexReader::numDeletedDocs() const
        {
          return env->callIntMethod(this$, mids$[mid_numDeletedDocs_54c6a179]);
        }

        jint IndexReader::numDocs() const
        {
          return env->callIntMethod(this$, mids$[mid_numDocs_54c6a179]);
        }

        ::org::apache::lucene::index::DirectoryReader IndexReader::open(const ::org::apache::lucene::index::IndexCommit & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::index::DirectoryReader(env->callStaticObjectMethod(cls, mids$[mid_open_26fd6272], a0.this$));
        }

        ::org::apache::lucene::index::DirectoryReader IndexReader::open(const ::org::apache::lucene::store::Directory & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::index::DirectoryReader(env->callStaticObjectMethod(cls, mids$[mid_open_109b8ac7], a0.this$));
        }

        ::org::apache::lucene::index::DirectoryReader IndexReader::open(const ::org::apache::lucene::store::Directory & a0, jint a1)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::index::DirectoryReader(env->callStaticObjectMethod(cls, mids$[mid_open_d7b74111], a0.this$, a1));
        }

        ::org::apache::lucene::index::DirectoryReader IndexReader::open(const ::org::apache::lucene::index::IndexCommit & a0, jint a1)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::index::DirectoryReader(env->callStaticObjectMethod(cls, mids$[mid_open_13bade12], a0.this$, a1));
        }

        ::org::apache::lucene::index::DirectoryReader IndexReader::open(const ::org::apache::lucene::index::IndexWriter & a0, jboolean a1)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::index::DirectoryReader(env->callStaticObjectMethod(cls, mids$[mid_open_e4ee522b], a0.this$, a1));
        }

        void IndexReader::registerParentReader(const IndexReader & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_registerParentReader_7d7eaea9], a0.this$);
        }

        void IndexReader::removeReaderClosedListener(const ::org::apache::lucene::index::IndexReader$ReaderClosedListener & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_removeReaderClosedListener_60172ded], a0.this$);
        }

        jlong IndexReader::totalTermFreq(const ::org::apache::lucene::index::Term & a0) const
        {
          return env->callLongMethod(this$, mids$[mid_totalTermFreq_7eca6a9d], a0.this$);
        }

        jboolean IndexReader::tryIncRef() const
        {
          return env->callBooleanMethod(this$, mids$[mid_tryIncRef_54c6a16a]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_IndexReader_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_IndexReader_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_IndexReader_addReaderClosedListener(t_IndexReader *self, PyObject *arg);
        static PyObject *t_IndexReader_close(t_IndexReader *self);
        static PyObject *t_IndexReader_decRef(t_IndexReader *self);
        static PyObject *t_IndexReader_docFreq(t_IndexReader *self, PyObject *arg);
        static PyObject *t_IndexReader_document(t_IndexReader *self, PyObject *args);
        static PyObject *t_IndexReader_equals(t_IndexReader *self, PyObject *args);
        static PyObject *t_IndexReader_getCombinedCoreAndDeletesKey(t_IndexReader *self);
        static PyObject *t_IndexReader_getContext(t_IndexReader *self);
        static PyObject *t_IndexReader_getCoreCacheKey(t_IndexReader *self);
        static PyObject *t_IndexReader_getDocCount(t_IndexReader *self, PyObject *arg);
        static PyObject *t_IndexReader_getRefCount(t_IndexReader *self);
        static PyObject *t_IndexReader_getSumDocFreq(t_IndexReader *self, PyObject *arg);
        static PyObject *t_IndexReader_getSumTotalTermFreq(t_IndexReader *self, PyObject *arg);
        static PyObject *t_IndexReader_getTermVector(t_IndexReader *self, PyObject *args);
        static PyObject *t_IndexReader_getTermVectors(t_IndexReader *self, PyObject *arg);
        static PyObject *t_IndexReader_hasDeletions(t_IndexReader *self);
        static PyObject *t_IndexReader_hashCode(t_IndexReader *self, PyObject *args);
        static PyObject *t_IndexReader_incRef(t_IndexReader *self);
        static PyObject *t_IndexReader_leaves(t_IndexReader *self);
        static PyObject *t_IndexReader_maxDoc(t_IndexReader *self);
        static PyObject *t_IndexReader_numDeletedDocs(t_IndexReader *self);
        static PyObject *t_IndexReader_numDocs(t_IndexReader *self);
        static PyObject *t_IndexReader_open(PyTypeObject *type, PyObject *args);
        static PyObject *t_IndexReader_registerParentReader(t_IndexReader *self, PyObject *arg);
        static PyObject *t_IndexReader_removeReaderClosedListener(t_IndexReader *self, PyObject *arg);
        static PyObject *t_IndexReader_totalTermFreq(t_IndexReader *self, PyObject *arg);
        static PyObject *t_IndexReader_tryIncRef(t_IndexReader *self);
        static PyObject *t_IndexReader_get__combinedCoreAndDeletesKey(t_IndexReader *self, void *data);
        static PyObject *t_IndexReader_get__context(t_IndexReader *self, void *data);
        static PyObject *t_IndexReader_get__coreCacheKey(t_IndexReader *self, void *data);
        static PyObject *t_IndexReader_get__refCount(t_IndexReader *self, void *data);
        static PyGetSetDef t_IndexReader__fields_[] = {
          DECLARE_GET_FIELD(t_IndexReader, combinedCoreAndDeletesKey),
          DECLARE_GET_FIELD(t_IndexReader, context),
          DECLARE_GET_FIELD(t_IndexReader, coreCacheKey),
          DECLARE_GET_FIELD(t_IndexReader, refCount),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_IndexReader__methods_[] = {
          DECLARE_METHOD(t_IndexReader, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_IndexReader, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_IndexReader, addReaderClosedListener, METH_O),
          DECLARE_METHOD(t_IndexReader, close, METH_NOARGS),
          DECLARE_METHOD(t_IndexReader, decRef, METH_NOARGS),
          DECLARE_METHOD(t_IndexReader, docFreq, METH_O),
          DECLARE_METHOD(t_IndexReader, document, METH_VARARGS),
          DECLARE_METHOD(t_IndexReader, equals, METH_VARARGS),
          DECLARE_METHOD(t_IndexReader, getCombinedCoreAndDeletesKey, METH_NOARGS),
          DECLARE_METHOD(t_IndexReader, getContext, METH_NOARGS),
          DECLARE_METHOD(t_IndexReader, getCoreCacheKey, METH_NOARGS),
          DECLARE_METHOD(t_IndexReader, getDocCount, METH_O),
          DECLARE_METHOD(t_IndexReader, getRefCount, METH_NOARGS),
          DECLARE_METHOD(t_IndexReader, getSumDocFreq, METH_O),
          DECLARE_METHOD(t_IndexReader, getSumTotalTermFreq, METH_O),
          DECLARE_METHOD(t_IndexReader, getTermVector, METH_VARARGS),
          DECLARE_METHOD(t_IndexReader, getTermVectors, METH_O),
          DECLARE_METHOD(t_IndexReader, hasDeletions, METH_NOARGS),
          DECLARE_METHOD(t_IndexReader, hashCode, METH_VARARGS),
          DECLARE_METHOD(t_IndexReader, incRef, METH_NOARGS),
          DECLARE_METHOD(t_IndexReader, leaves, METH_NOARGS),
          DECLARE_METHOD(t_IndexReader, maxDoc, METH_NOARGS),
          DECLARE_METHOD(t_IndexReader, numDeletedDocs, METH_NOARGS),
          DECLARE_METHOD(t_IndexReader, numDocs, METH_NOARGS),
          DECLARE_METHOD(t_IndexReader, open, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_IndexReader, registerParentReader, METH_O),
          DECLARE_METHOD(t_IndexReader, removeReaderClosedListener, METH_O),
          DECLARE_METHOD(t_IndexReader, totalTermFreq, METH_O),
          DECLARE_METHOD(t_IndexReader, tryIncRef, METH_NOARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(IndexReader, t_IndexReader, ::java::lang::Object, IndexReader, abstract_init, 0, 0, t_IndexReader__fields_, 0, 0);

        void t_IndexReader::install(PyObject *module)
        {
          installType(&PY_TYPE(IndexReader), module, "IndexReader", 0);
          PyDict_SetItemString(PY_TYPE(IndexReader).tp_dict, "ReaderClosedListener", make_descriptor(&PY_TYPE(IndexReader$ReaderClosedListener)));
        }

        void t_IndexReader::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(IndexReader).tp_dict, "class_", make_descriptor(IndexReader::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(IndexReader).tp_dict, "wrapfn_", make_descriptor(t_IndexReader::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(IndexReader).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_IndexReader_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, IndexReader::initializeClass, 1)))
            return NULL;
          return t_IndexReader::wrap_Object(IndexReader(((t_IndexReader *) arg)->object.this$));
        }
        static PyObject *t_IndexReader_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, IndexReader::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_IndexReader_addReaderClosedListener(t_IndexReader *self, PyObject *arg)
        {
          ::org::apache::lucene::index::IndexReader$ReaderClosedListener a0((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::index::IndexReader$ReaderClosedListener::initializeClass, &a0))
          {
            OBJ_CALL(self->object.addReaderClosedListener(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "addReaderClosedListener", arg);
          return NULL;
        }

        static PyObject *t_IndexReader_close(t_IndexReader *self)
        {
          OBJ_CALL(self->object.close());
          Py_RETURN_NONE;
        }

        static PyObject *t_IndexReader_decRef(t_IndexReader *self)
        {
          OBJ_CALL(self->object.decRef());
          Py_RETURN_NONE;
        }

        static PyObject *t_IndexReader_docFreq(t_IndexReader *self, PyObject *arg)
        {
          ::org::apache::lucene::index::Term a0((jobject) NULL);
          jint result;

          if (!parseArg(arg, "k", ::org::apache::lucene::index::Term::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.docFreq(a0));
            return PyInt_FromLong((long) result);
          }

          PyErr_SetArgsError((PyObject *) self, "docFreq", arg);
          return NULL;
        }

        static PyObject *t_IndexReader_document(t_IndexReader *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              jint a0;
              ::org::apache::lucene::document::Document result((jobject) NULL);

              if (!parseArgs(args, "I", &a0))
              {
                OBJ_CALL(result = self->object.document(a0));
                return ::org::apache::lucene::document::t_Document::wrap_Object(result);
              }
            }
            break;
           case 2:
            {
              jint a0;
              ::java::util::Set a1((jobject) NULL);
              PyTypeObject **p1;
              ::org::apache::lucene::document::Document result((jobject) NULL);

              if (!parseArgs(args, "IK", ::java::util::Set::initializeClass, &a0, &a1, &p1, ::java::util::t_Set::parameters_))
              {
                OBJ_CALL(result = self->object.document(a0, a1));
                return ::org::apache::lucene::document::t_Document::wrap_Object(result);
              }
            }
            {
              jint a0;
              ::org::apache::lucene::index::StoredFieldVisitor a1((jobject) NULL);

              if (!parseArgs(args, "Ik", ::org::apache::lucene::index::StoredFieldVisitor::initializeClass, &a0, &a1))
              {
                OBJ_CALL(self->object.document(a0, a1));
                Py_RETURN_NONE;
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "document", args);
          return NULL;
        }

        static PyObject *t_IndexReader_equals(t_IndexReader *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.equals(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(IndexReader), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_IndexReader_getCombinedCoreAndDeletesKey(t_IndexReader *self)
        {
          ::java::lang::Object result((jobject) NULL);
          OBJ_CALL(result = self->object.getCombinedCoreAndDeletesKey());
          return ::java::lang::t_Object::wrap_Object(result);
        }

        static PyObject *t_IndexReader_getContext(t_IndexReader *self)
        {
          ::org::apache::lucene::index::IndexReaderContext result((jobject) NULL);
          OBJ_CALL(result = self->object.getContext());
          return ::org::apache::lucene::index::t_IndexReaderContext::wrap_Object(result);
        }

        static PyObject *t_IndexReader_getCoreCacheKey(t_IndexReader *self)
        {
          ::java::lang::Object result((jobject) NULL);
          OBJ_CALL(result = self->object.getCoreCacheKey());
          return ::java::lang::t_Object::wrap_Object(result);
        }

        static PyObject *t_IndexReader_getDocCount(t_IndexReader *self, PyObject *arg)
        {
          ::java::lang::String a0((jobject) NULL);
          jint result;

          if (!parseArg(arg, "s", &a0))
          {
            OBJ_CALL(result = self->object.getDocCount(a0));
            return PyInt_FromLong((long) result);
          }

          PyErr_SetArgsError((PyObject *) self, "getDocCount", arg);
          return NULL;
        }

        static PyObject *t_IndexReader_getRefCount(t_IndexReader *self)
        {
          jint result;
          OBJ_CALL(result = self->object.getRefCount());
          return PyInt_FromLong((long) result);
        }

        static PyObject *t_IndexReader_getSumDocFreq(t_IndexReader *self, PyObject *arg)
        {
          ::java::lang::String a0((jobject) NULL);
          jlong result;

          if (!parseArg(arg, "s", &a0))
          {
            OBJ_CALL(result = self->object.getSumDocFreq(a0));
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          PyErr_SetArgsError((PyObject *) self, "getSumDocFreq", arg);
          return NULL;
        }

        static PyObject *t_IndexReader_getSumTotalTermFreq(t_IndexReader *self, PyObject *arg)
        {
          ::java::lang::String a0((jobject) NULL);
          jlong result;

          if (!parseArg(arg, "s", &a0))
          {
            OBJ_CALL(result = self->object.getSumTotalTermFreq(a0));
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          PyErr_SetArgsError((PyObject *) self, "getSumTotalTermFreq", arg);
          return NULL;
        }

        static PyObject *t_IndexReader_getTermVector(t_IndexReader *self, PyObject *args)
        {
          jint a0;
          ::java::lang::String a1((jobject) NULL);
          ::org::apache::lucene::index::Terms result((jobject) NULL);

          if (!parseArgs(args, "Is", &a0, &a1))
          {
            OBJ_CALL(result = self->object.getTermVector(a0, a1));
            return ::org::apache::lucene::index::t_Terms::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "getTermVector", args);
          return NULL;
        }

        static PyObject *t_IndexReader_getTermVectors(t_IndexReader *self, PyObject *arg)
        {
          jint a0;
          ::org::apache::lucene::index::Fields result((jobject) NULL);

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(result = self->object.getTermVectors(a0));
            return ::org::apache::lucene::index::t_Fields::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "getTermVectors", arg);
          return NULL;
        }

        static PyObject *t_IndexReader_hasDeletions(t_IndexReader *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.hasDeletions());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_IndexReader_hashCode(t_IndexReader *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hashCode());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(IndexReader), (PyObject *) self, "hashCode", args, 2);
        }

        static PyObject *t_IndexReader_incRef(t_IndexReader *self)
        {
          OBJ_CALL(self->object.incRef());
          Py_RETURN_NONE;
        }

        static PyObject *t_IndexReader_leaves(t_IndexReader *self)
        {
          ::java::util::List result((jobject) NULL);
          OBJ_CALL(result = self->object.leaves());
          return ::java::util::t_List::wrap_Object(result, &::org::apache::lucene::index::PY_TYPE(AtomicReaderContext));
        }

        static PyObject *t_IndexReader_maxDoc(t_IndexReader *self)
        {
          jint result;
          OBJ_CALL(result = self->object.maxDoc());
          return PyInt_FromLong((long) result);
        }

        static PyObject *t_IndexReader_numDeletedDocs(t_IndexReader *self)
        {
          jint result;
          OBJ_CALL(result = self->object.numDeletedDocs());
          return PyInt_FromLong((long) result);
        }

        static PyObject *t_IndexReader_numDocs(t_IndexReader *self)
        {
          jint result;
          OBJ_CALL(result = self->object.numDocs());
          return PyInt_FromLong((long) result);
        }

        static PyObject *t_IndexReader_open(PyTypeObject *type, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              ::org::apache::lucene::index::IndexCommit a0((jobject) NULL);
              ::org::apache::lucene::index::DirectoryReader result((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::index::IndexCommit::initializeClass, &a0))
              {
                OBJ_CALL(result = ::org::apache::lucene::index::IndexReader::open(a0));
                return ::org::apache::lucene::index::t_DirectoryReader::wrap_Object(result);
              }
            }
            {
              ::org::apache::lucene::store::Directory a0((jobject) NULL);
              ::org::apache::lucene::index::DirectoryReader result((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::store::Directory::initializeClass, &a0))
              {
                OBJ_CALL(result = ::org::apache::lucene::index::IndexReader::open(a0));
                return ::org::apache::lucene::index::t_DirectoryReader::wrap_Object(result);
              }
            }
            break;
           case 2:
            {
              ::org::apache::lucene::store::Directory a0((jobject) NULL);
              jint a1;
              ::org::apache::lucene::index::DirectoryReader result((jobject) NULL);

              if (!parseArgs(args, "kI", ::org::apache::lucene::store::Directory::initializeClass, &a0, &a1))
              {
                OBJ_CALL(result = ::org::apache::lucene::index::IndexReader::open(a0, a1));
                return ::org::apache::lucene::index::t_DirectoryReader::wrap_Object(result);
              }
            }
            {
              ::org::apache::lucene::index::IndexCommit a0((jobject) NULL);
              jint a1;
              ::org::apache::lucene::index::DirectoryReader result((jobject) NULL);

              if (!parseArgs(args, "kI", ::org::apache::lucene::index::IndexCommit::initializeClass, &a0, &a1))
              {
                OBJ_CALL(result = ::org::apache::lucene::index::IndexReader::open(a0, a1));
                return ::org::apache::lucene::index::t_DirectoryReader::wrap_Object(result);
              }
            }
            {
              ::org::apache::lucene::index::IndexWriter a0((jobject) NULL);
              jboolean a1;
              ::org::apache::lucene::index::DirectoryReader result((jobject) NULL);

              if (!parseArgs(args, "kZ", ::org::apache::lucene::index::IndexWriter::initializeClass, &a0, &a1))
              {
                OBJ_CALL(result = ::org::apache::lucene::index::IndexReader::open(a0, a1));
                return ::org::apache::lucene::index::t_DirectoryReader::wrap_Object(result);
              }
            }
          }

          PyErr_SetArgsError(type, "open", args);
          return NULL;
        }

        static PyObject *t_IndexReader_registerParentReader(t_IndexReader *self, PyObject *arg)
        {
          IndexReader a0((jobject) NULL);

          if (!parseArg(arg, "k", IndexReader::initializeClass, &a0))
          {
            OBJ_CALL(self->object.registerParentReader(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "registerParentReader", arg);
          return NULL;
        }

        static PyObject *t_IndexReader_removeReaderClosedListener(t_IndexReader *self, PyObject *arg)
        {
          ::org::apache::lucene::index::IndexReader$ReaderClosedListener a0((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::index::IndexReader$ReaderClosedListener::initializeClass, &a0))
          {
            OBJ_CALL(self->object.removeReaderClosedListener(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "removeReaderClosedListener", arg);
          return NULL;
        }

        static PyObject *t_IndexReader_totalTermFreq(t_IndexReader *self, PyObject *arg)
        {
          ::org::apache::lucene::index::Term a0((jobject) NULL);
          jlong result;

          if (!parseArg(arg, "k", ::org::apache::lucene::index::Term::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.totalTermFreq(a0));
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          PyErr_SetArgsError((PyObject *) self, "totalTermFreq", arg);
          return NULL;
        }

        static PyObject *t_IndexReader_tryIncRef(t_IndexReader *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.tryIncRef());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_IndexReader_get__combinedCoreAndDeletesKey(t_IndexReader *self, void *data)
        {
          ::java::lang::Object value((jobject) NULL);
          OBJ_CALL(value = self->object.getCombinedCoreAndDeletesKey());
          return ::java::lang::t_Object::wrap_Object(value);
        }

        static PyObject *t_IndexReader_get__context(t_IndexReader *self, void *data)
        {
          ::org::apache::lucene::index::IndexReaderContext value((jobject) NULL);
          OBJ_CALL(value = self->object.getContext());
          return ::org::apache::lucene::index::t_IndexReaderContext::wrap_Object(value);
        }

        static PyObject *t_IndexReader_get__coreCacheKey(t_IndexReader *self, void *data)
        {
          ::java::lang::Object value((jobject) NULL);
          OBJ_CALL(value = self->object.getCoreCacheKey());
          return ::java::lang::t_Object::wrap_Object(value);
        }

        static PyObject *t_IndexReader_get__refCount(t_IndexReader *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object.getRefCount());
          return PyInt_FromLong((long) value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/miscellaneous/PatternKeywordMarkerFilter.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/util/regex/Pattern.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {

          ::java::lang::Class *PatternKeywordMarkerFilter::class$ = NULL;
          jmethodID *PatternKeywordMarkerFilter::mids$ = NULL;
          bool PatternKeywordMarkerFilter::live$ = false;

          jclass PatternKeywordMarkerFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/miscellaneous/PatternKeywordMarkerFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_df7fd280] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;Ljava/util/regex/Pattern;)V");
              mids$[mid_isKeyword_54c6a16a] = env->getMethodID(cls, "isKeyword", "()Z");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          PatternKeywordMarkerFilter::PatternKeywordMarkerFilter(const ::org::apache::lucene::analysis::TokenStream & a0, const ::java::util::regex::Pattern & a1) : ::org::apache::lucene::analysis::miscellaneous::KeywordMarkerFilter(env->newObject(initializeClass, &mids$, mid_init$_df7fd280, a0.this$, a1.this$)) {}
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {
          static PyObject *t_PatternKeywordMarkerFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PatternKeywordMarkerFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_PatternKeywordMarkerFilter_init_(t_PatternKeywordMarkerFilter *self, PyObject *args, PyObject *kwds);

          static PyMethodDef t_PatternKeywordMarkerFilter__methods_[] = {
            DECLARE_METHOD(t_PatternKeywordMarkerFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PatternKeywordMarkerFilter, instance_, METH_O | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(PatternKeywordMarkerFilter, t_PatternKeywordMarkerFilter, ::org::apache::lucene::analysis::miscellaneous::KeywordMarkerFilter, PatternKeywordMarkerFilter, t_PatternKeywordMarkerFilter_init_, 0, 0, 0, 0, 0);

          void t_PatternKeywordMarkerFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(PatternKeywordMarkerFilter), module, "PatternKeywordMarkerFilter", 0);
          }

          void t_PatternKeywordMarkerFilter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(PatternKeywordMarkerFilter).tp_dict, "class_", make_descriptor(PatternKeywordMarkerFilter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(PatternKeywordMarkerFilter).tp_dict, "wrapfn_", make_descriptor(t_PatternKeywordMarkerFilter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(PatternKeywordMarkerFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_PatternKeywordMarkerFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, PatternKeywordMarkerFilter::initializeClass, 1)))
              return NULL;
            return t_PatternKeywordMarkerFilter::wrap_Object(PatternKeywordMarkerFilter(((t_PatternKeywordMarkerFilter *) arg)->object.this$));
          }
          static PyObject *t_PatternKeywordMarkerFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, PatternKeywordMarkerFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_PatternKeywordMarkerFilter_init_(t_PatternKeywordMarkerFilter *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::java::util::regex::Pattern a1((jobject) NULL);
            PatternKeywordMarkerFilter object((jobject) NULL);

            if (!parseArgs(args, "kk", ::org::apache::lucene::analysis::TokenStream::initializeClass, ::java::util::regex::Pattern::initializeClass, &a0, &a1))
            {
              INT_CALL(object = PatternKeywordMarkerFilter(a0, a1));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queries/function/valuesource/MaxFloatFunction.h"
#include "org/apache/lucene/queries/function/ValueSource.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {

            ::java::lang::Class *MaxFloatFunction::class$ = NULL;
            jmethodID *MaxFloatFunction::mids$ = NULL;
            bool MaxFloatFunction::live$ = false;

            jclass MaxFloatFunction::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queries/function/valuesource/MaxFloatFunction");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_ee9922ca] = env->getMethodID(cls, "<init>", "([Lorg/apache/lucene/queries/function/ValueSource;)V");
                mids$[mid_name_14c7b5c5] = env->getMethodID(cls, "name", "()Ljava/lang/String;");
                mids$[mid_func_d2e34bb9] = env->getMethodID(cls, "func", "(I[Lorg/apache/lucene/queries/function/FunctionValues;)F");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            MaxFloatFunction::MaxFloatFunction(const JArray< ::org::apache::lucene::queries::function::ValueSource > & a0) : ::org::apache::lucene::queries::function::valuesource::MultiFloatFunction(env->newObject(initializeClass, &mids$, mid_init$_ee9922ca, a0.this$)) {}
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {
            static PyObject *t_MaxFloatFunction_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_MaxFloatFunction_instance_(PyTypeObject *type, PyObject *arg);
            static int t_MaxFloatFunction_init_(t_MaxFloatFunction *self, PyObject *args, PyObject *kwds);

            static PyMethodDef t_MaxFloatFunction__methods_[] = {
              DECLARE_METHOD(t_MaxFloatFunction, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_MaxFloatFunction, instance_, METH_O | METH_CLASS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(MaxFloatFunction, t_MaxFloatFunction, ::org::apache::lucene::queries::function::valuesource::MultiFloatFunction, MaxFloatFunction, t_MaxFloatFunction_init_, 0, 0, 0, 0, 0);

            void t_MaxFloatFunction::install(PyObject *module)
            {
              installType(&PY_TYPE(MaxFloatFunction), module, "MaxFloatFunction", 0);
            }

            void t_MaxFloatFunction::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(MaxFloatFunction).tp_dict, "class_", make_descriptor(MaxFloatFunction::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(MaxFloatFunction).tp_dict, "wrapfn_", make_descriptor(t_MaxFloatFunction::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(MaxFloatFunction).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_MaxFloatFunction_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, MaxFloatFunction::initializeClass, 1)))
                return NULL;
              return t_MaxFloatFunction::wrap_Object(MaxFloatFunction(((t_MaxFloatFunction *) arg)->object.this$));
            }
            static PyObject *t_MaxFloatFunction_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, MaxFloatFunction::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_MaxFloatFunction_init_(t_MaxFloatFunction *self, PyObject *args, PyObject *kwds)
            {
              JArray< ::org::apache::lucene::queries::function::ValueSource > a0((jobject) NULL);
              MaxFloatFunction object((jobject) NULL);

              if (!parseArgs(args, "[k", ::org::apache::lucene::queries::function::ValueSource::initializeClass, &a0))
              {
                INT_CALL(object = MaxFloatFunction(a0));
                self->object = object;
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/en/EnglishPossessiveFilterFactory.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/String.h"
#include "java/util/Map.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace en {

          ::java::lang::Class *EnglishPossessiveFilterFactory::class$ = NULL;
          jmethodID *EnglishPossessiveFilterFactory::mids$ = NULL;
          bool EnglishPossessiveFilterFactory::live$ = false;

          jclass EnglishPossessiveFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/en/EnglishPossessiveFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4c9e2b1c] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_a65cd6ab] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/TokenStream;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          EnglishPossessiveFilterFactory::EnglishPossessiveFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_4c9e2b1c, a0.this$)) {}

          ::org::apache::lucene::analysis::TokenStream EnglishPossessiveFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::TokenStream(env->callObjectMethod(this$, mids$[mid_create_a65cd6ab], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace en {
          static PyObject *t_EnglishPossessiveFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_EnglishPossessiveFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_EnglishPossessiveFilterFactory_init_(t_EnglishPossessiveFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_EnglishPossessiveFilterFactory_create(t_EnglishPossessiveFilterFactory *self, PyObject *args);

          static PyMethodDef t_EnglishPossessiveFilterFactory__methods_[] = {
            DECLARE_METHOD(t_EnglishPossessiveFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_EnglishPossessiveFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_EnglishPossessiveFilterFactory, create, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(EnglishPossessiveFilterFactory, t_EnglishPossessiveFilterFactory, ::org::apache::lucene::analysis::util::TokenFilterFactory, EnglishPossessiveFilterFactory, t_EnglishPossessiveFilterFactory_init_, 0, 0, 0, 0, 0);

          void t_EnglishPossessiveFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(EnglishPossessiveFilterFactory), module, "EnglishPossessiveFilterFactory", 0);
          }

          void t_EnglishPossessiveFilterFactory::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(EnglishPossessiveFilterFactory).tp_dict, "class_", make_descriptor(EnglishPossessiveFilterFactory::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(EnglishPossessiveFilterFactory).tp_dict, "wrapfn_", make_descriptor(t_EnglishPossessiveFilterFactory::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(EnglishPossessiveFilterFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_EnglishPossessiveFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, EnglishPossessiveFilterFactory::initializeClass, 1)))
              return NULL;
            return t_EnglishPossessiveFilterFactory::wrap_Object(EnglishPossessiveFilterFactory(((t_EnglishPossessiveFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_EnglishPossessiveFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, EnglishPossessiveFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_EnglishPossessiveFilterFactory_init_(t_EnglishPossessiveFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            EnglishPossessiveFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = EnglishPossessiveFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_EnglishPossessiveFilterFactory_create(t_EnglishPossessiveFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::TokenStream result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::t_TokenStream::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(EnglishPossessiveFilterFactory), (PyObject *) self, "create", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/facet/FacetsCollector$MatchingDocs.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "org/apache/lucene/search/DocIdSet.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {

        ::java::lang::Class *FacetsCollector$MatchingDocs::class$ = NULL;
        jmethodID *FacetsCollector$MatchingDocs::mids$ = NULL;
        jfieldID *FacetsCollector$MatchingDocs::fids$ = NULL;
        bool FacetsCollector$MatchingDocs::live$ = false;

        jclass FacetsCollector$MatchingDocs::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/facet/FacetsCollector$MatchingDocs");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_9edc9b13] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/AtomicReaderContext;Lorg/apache/lucene/search/DocIdSet;I[F)V");

            fids$ = new jfieldID[max_fid];
            fids$[fid_bits] = env->getFieldID(cls, "bits", "Lorg/apache/lucene/search/DocIdSet;");
            fids$[fid_context] = env->getFieldID(cls, "context", "Lorg/apache/lucene/index/AtomicReaderContext;");
            fids$[fid_scores] = env->getFieldID(cls, "scores", "[F");
            fids$[fid_totalHits] = env->getFieldID(cls, "totalHits", "I");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        FacetsCollector$MatchingDocs::FacetsCollector$MatchingDocs(const ::org::apache::lucene::index::AtomicReaderContext & a0, const ::org::apache::lucene::search::DocIdSet & a1, jint a2, const JArray< jfloat > & a3) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_9edc9b13, a0.this$, a1.this$, a2, a3.this$)) {}

        ::org::apache::lucene::search::DocIdSet FacetsCollector$MatchingDocs::_get_bits() const
        {
          return ::org::apache::lucene::search::DocIdSet(env->getObjectField(this$, fids$[fid_bits]));
        }

        ::org::apache::lucene::index::AtomicReaderContext FacetsCollector$MatchingDocs::_get_context() const
        {
          return ::org::apache::lucene::index::AtomicReaderContext(env->getObjectField(this$, fids$[fid_context]));
        }

        JArray< jfloat > FacetsCollector$MatchingDocs::_get_scores() const
        {
          return JArray< jfloat >(env->getObjectField(this$, fids$[fid_scores]));
        }

        jint FacetsCollector$MatchingDocs::_get_totalHits() const
        {
          return env->getIntField(this$, fids$[fid_totalHits]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        static PyObject *t_FacetsCollector$MatchingDocs_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FacetsCollector$MatchingDocs_instance_(PyTypeObject *type, PyObject *arg);
        static int t_FacetsCollector$MatchingDocs_init_(t_FacetsCollector$MatchingDocs *self, PyObject *args, PyObject *kwds);
        static PyObject *t_FacetsCollector$MatchingDocs_get__bits(t_FacetsCollector$MatchingDocs *self, void *data);
        static PyObject *t_FacetsCollector$MatchingDocs_get__context(t_FacetsCollector$MatchingDocs *self, void *data);
        static PyObject *t_FacetsCollector$MatchingDocs_get__scores(t_FacetsCollector$MatchingDocs *self, void *data);
        static PyObject *t_FacetsCollector$MatchingDocs_get__totalHits(t_FacetsCollector$MatchingDocs *self, void *data);

        static PyGetSetDef t_FacetsCollector$MatchingDocs__fields_[] = {
          DECLARE_GET_FIELD(t_FacetsCollector$MatchingDocs, bits),
          DECLARE_GET_FIELD(t_FacetsCollector$MatchingDocs, context),
          DECLARE_GET_FIELD(t_FacetsCollector$MatchingDocs, scores),
          DECLARE_GET_FIELD(t_FacetsCollector$MatchingDocs, totalHits),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_FacetsCollector$MatchingDocs__methods_[] = {
          DECLARE_METHOD(t_FacetsCollector$MatchingDocs, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FacetsCollector$MatchingDocs, instance_, METH_O | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(FacetsCollector$MatchingDocs, t_FacetsCollector$MatchingDocs, ::java::lang::Object, FacetsCollector$MatchingDocs, t_FacetsCollector$MatchingDocs_init_, 0, 0, t_FacetsCollector$MatchingDocs__fields_, 0, 0);

        void t_FacetsCollector$MatchingDocs::install(PyObject *module)
        {
          installType(&PY_TYPE(FacetsCollector$MatchingDocs), module, "FacetsCollector$MatchingDocs", 0);
        }

        void t_FacetsCollector$MatchingDocs::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(FacetsCollector$MatchingDocs).tp_dict, "class_", make_descriptor(FacetsCollector$MatchingDocs::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(FacetsCollector$MatchingDocs).tp_dict, "wrapfn_", make_descriptor(t_FacetsCollector$MatchingDocs::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(FacetsCollector$MatchingDocs).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_FacetsCollector$MatchingDocs_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, FacetsCollector$MatchingDocs::initializeClass, 1)))
            return NULL;
          return t_FacetsCollector$MatchingDocs::wrap_Object(FacetsCollector$MatchingDocs(((t_FacetsCollector$MatchingDocs *) arg)->object.this$));
        }
        static PyObject *t_FacetsCollector$MatchingDocs_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, FacetsCollector$MatchingDocs::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_FacetsCollector$MatchingDocs_init_(t_FacetsCollector$MatchingDocs *self, PyObject *args, PyObject *kwds)
        {
          ::org::apache::lucene::index::AtomicReaderContext a0((jobject) NULL);
          ::org::apache::lucene::search::DocIdSet a1((jobject) NULL);
          jint a2;
          JArray< jfloat > a3((jobject) NULL);
          FacetsCollector$MatchingDocs object((jobject) NULL);

          if (!parseArgs(args, "kkI[F", ::org::apache::lucene::index::AtomicReaderContext::initializeClass, ::org::apache::lucene::search::DocIdSet::initializeClass, &a0, &a1, &a2, &a3))
          {
            INT_CALL(object = FacetsCollector$MatchingDocs(a0, a1, a2, a3));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_FacetsCollector$MatchingDocs_get__bits(t_FacetsCollector$MatchingDocs *self, void *data)
        {
          ::org::apache::lucene::search::DocIdSet value((jobject) NULL);
          OBJ_CALL(value = self->object._get_bits());
          return ::org::apache::lucene::search::t_DocIdSet::wrap_Object(value);
        }

        static PyObject *t_FacetsCollector$MatchingDocs_get__context(t_FacetsCollector$MatchingDocs *self, void *data)
        {
          ::org::apache::lucene::index::AtomicReaderContext value((jobject) NULL);
          OBJ_CALL(value = self->object._get_context());
          return ::org::apache::lucene::index::t_AtomicReaderContext::wrap_Object(value);
        }

        static PyObject *t_FacetsCollector$MatchingDocs_get__scores(t_FacetsCollector$MatchingDocs *self, void *data)
        {
          JArray< jfloat > value((jobject) NULL);
          OBJ_CALL(value = self->object._get_scores());
          return value.wrap();
        }

        static PyObject *t_FacetsCollector$MatchingDocs_get__totalHits(t_FacetsCollector$MatchingDocs *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object._get_totalHits());
          return PyInt_FromLong((long) value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/DisjunctionMaxQuery.h"
#include "java/lang/Class.h"
#include "java/lang/Object.h"
#include "org/apache/lucene/search/Weight.h"
#include "java/util/Iterator.h"
#include "java/util/Set.h"
#include "java/util/ArrayList.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "java/util/Collection.h"
#include "org/apache/lucene/search/IndexSearcher.h"
#include "java/lang/Iterable.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "org/apache/lucene/index/Term.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *DisjunctionMaxQuery::class$ = NULL;
        jmethodID *DisjunctionMaxQuery::mids$ = NULL;
        bool DisjunctionMaxQuery::live$ = false;

        jclass DisjunctionMaxQuery::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/DisjunctionMaxQuery");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_06298cab] = env->getMethodID(cls, "<init>", "(F)V");
            mids$[mid_init$_30a7c9ca] = env->getMethodID(cls, "<init>", "(Ljava/util/Collection;F)V");
            mids$[mid_add_9bfb370d] = env->getMethodID(cls, "add", "(Ljava/util/Collection;)V");
            mids$[mid_add_6e301113] = env->getMethodID(cls, "add", "(Lorg/apache/lucene/search/Query;)V");
            mids$[mid_clone_ca9043ca] = env->getMethodID(cls, "clone", "()Lorg/apache/lucene/search/DisjunctionMaxQuery;");
            mids$[mid_createWeight_367763cb] = env->getMethodID(cls, "createWeight", "(Lorg/apache/lucene/search/IndexSearcher;)Lorg/apache/lucene/search/Weight;");
            mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
            mids$[mid_extractTerms_fb4f2b26] = env->getMethodID(cls, "extractTerms", "(Ljava/util/Set;)V");
            mids$[mid_getDisjuncts_21eb51b0] = env->getMethodID(cls, "getDisjuncts", "()Ljava/util/ArrayList;");
            mids$[mid_getTieBreakerMultiplier_54c6a176] = env->getMethodID(cls, "getTieBreakerMultiplier", "()F");
            mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
            mids$[mid_iterator_40858c90] = env->getMethodID(cls, "iterator", "()Ljava/util/Iterator;");
            mids$[mid_rewrite_7edcaa43] = env->getMethodID(cls, "rewrite", "(Lorg/apache/lucene/index/IndexReader;)Lorg/apache/lucene/search/Query;");
            mids$[mid_toString_97a5258f] = env->getMethodID(cls, "toString", "(Ljava/lang/String;)Ljava/lang/String;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        DisjunctionMaxQuery::DisjunctionMaxQuery(jfloat a0) : ::org::apache::lucene::search::Query(env->newObject(initializeClass, &mids$, mid_init$_06298cab, a0)) {}

        DisjunctionMaxQuery::DisjunctionMaxQuery(const ::java::util::Collection & a0, jfloat a1) : ::org::apache::lucene::search::Query(env->newObject(initializeClass, &mids$, mid_init$_30a7c9ca, a0.this$, a1)) {}

        void DisjunctionMaxQuery::add(const ::java::util::Collection & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_add_9bfb370d], a0.this$);
        }

        void DisjunctionMaxQuery::add(const ::org::apache::lucene::search::Query & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_add_6e301113], a0.this$);
        }

        DisjunctionMaxQuery DisjunctionMaxQuery::clone() const
        {
          return DisjunctionMaxQuery(env->callObjectMethod(this$, mids$[mid_clone_ca9043ca]));
        }

        ::org::apache::lucene::search::Weight DisjunctionMaxQuery::createWeight(const ::org::apache::lucene::search::IndexSearcher & a0) const
        {
          return ::org::apache::lucene::search::Weight(env->callObjectMethod(this$, mids$[mid_createWeight_367763cb], a0.this$));
        }

        jboolean DisjunctionMaxQuery::equals(const ::java::lang::Object & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
        }

        void DisjunctionMaxQuery::extractTerms(const ::java::util::Set & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_extractTerms_fb4f2b26], a0.this$);
        }

        ::java::util::ArrayList DisjunctionMaxQuery::getDisjuncts() const
        {
          return ::java::util::ArrayList(env->callObjectMethod(this$, mids$[mid_getDisjuncts_21eb51b0]));
        }

        jfloat DisjunctionMaxQuery::getTieBreakerMultiplier() const
        {
          return env->callFloatMethod(this$, mids$[mid_getTieBreakerMultiplier_54c6a176]);
        }

        jint DisjunctionMaxQuery::hashCode() const
        {
          return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
        }

        ::java::util::Iterator DisjunctionMaxQuery::iterator() const
        {
          return ::java::util::Iterator(env->callObjectMethod(this$, mids$[mid_iterator_40858c90]));
        }

        ::org::apache::lucene::search::Query DisjunctionMaxQuery::rewrite(const ::org::apache::lucene::index::IndexReader & a0) const
        {
          return ::org::apache::lucene::search::Query(env->callObjectMethod(this$, mids$[mid_rewrite_7edcaa43], a0.this$));
        }

        ::java::lang::String DisjunctionMaxQuery::toString(const ::java::lang::String & a0) const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_97a5258f], a0.this$));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_DisjunctionMaxQuery_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_DisjunctionMaxQuery_instance_(PyTypeObject *type, PyObject *arg);
        static int t_DisjunctionMaxQuery_init_(t_DisjunctionMaxQuery *self, PyObject *args, PyObject *kwds);
        static PyObject *t_DisjunctionMaxQuery_add(t_DisjunctionMaxQuery *self, PyObject *args);
        static PyObject *t_DisjunctionMaxQuery_clone(t_DisjunctionMaxQuery *self, PyObject *args);
        static PyObject *t_DisjunctionMaxQuery_createWeight(t_DisjunctionMaxQuery *self, PyObject *args);
        static PyObject *t_DisjunctionMaxQuery_equals(t_DisjunctionMaxQuery *self, PyObject *args);
        static PyObject *t_DisjunctionMaxQuery_extractTerms(t_DisjunctionMaxQuery *self, PyObject *args);
        static PyObject *t_DisjunctionMaxQuery_getDisjuncts(t_DisjunctionMaxQuery *self);
        static PyObject *t_DisjunctionMaxQuery_getTieBreakerMultiplier(t_DisjunctionMaxQuery *self);
        static PyObject *t_DisjunctionMaxQuery_hashCode(t_DisjunctionMaxQuery *self, PyObject *args);
        static PyObject *t_DisjunctionMaxQuery_iterator(t_DisjunctionMaxQuery *self);
        static PyObject *t_DisjunctionMaxQuery_rewrite(t_DisjunctionMaxQuery *self, PyObject *args);
        static PyObject *t_DisjunctionMaxQuery_toString(t_DisjunctionMaxQuery *self, PyObject *args);
        static PyObject *t_DisjunctionMaxQuery_get__disjuncts(t_DisjunctionMaxQuery *self, void *data);
        static PyObject *t_DisjunctionMaxQuery_get__tieBreakerMultiplier(t_DisjunctionMaxQuery *self, void *data);
        static PyGetSetDef t_DisjunctionMaxQuery__fields_[] = {
          DECLARE_GET_FIELD(t_DisjunctionMaxQuery, disjuncts),
          DECLARE_GET_FIELD(t_DisjunctionMaxQuery, tieBreakerMultiplier),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_DisjunctionMaxQuery__methods_[] = {
          DECLARE_METHOD(t_DisjunctionMaxQuery, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_DisjunctionMaxQuery, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_DisjunctionMaxQuery, add, METH_VARARGS),
          DECLARE_METHOD(t_DisjunctionMaxQuery, clone, METH_VARARGS),
          DECLARE_METHOD(t_DisjunctionMaxQuery, createWeight, METH_VARARGS),
          DECLARE_METHOD(t_DisjunctionMaxQuery, equals, METH_VARARGS),
          DECLARE_METHOD(t_DisjunctionMaxQuery, extractTerms, METH_VARARGS),
          DECLARE_METHOD(t_DisjunctionMaxQuery, getDisjuncts, METH_NOARGS),
          DECLARE_METHOD(t_DisjunctionMaxQuery, getTieBreakerMultiplier, METH_NOARGS),
          DECLARE_METHOD(t_DisjunctionMaxQuery, hashCode, METH_VARARGS),
          DECLARE_METHOD(t_DisjunctionMaxQuery, iterator, METH_NOARGS),
          DECLARE_METHOD(t_DisjunctionMaxQuery, rewrite, METH_VARARGS),
          DECLARE_METHOD(t_DisjunctionMaxQuery, toString, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(DisjunctionMaxQuery, t_DisjunctionMaxQuery, ::org::apache::lucene::search::Query, DisjunctionMaxQuery, t_DisjunctionMaxQuery_init_, ((PyObject *(*)(t_DisjunctionMaxQuery *)) get_iterator< t_DisjunctionMaxQuery >), 0, t_DisjunctionMaxQuery__fields_, 0, 0);

        void t_DisjunctionMaxQuery::install(PyObject *module)
        {
          installType(&PY_TYPE(DisjunctionMaxQuery), module, "DisjunctionMaxQuery", 0);
        }

        void t_DisjunctionMaxQuery::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(DisjunctionMaxQuery).tp_dict, "class_", make_descriptor(DisjunctionMaxQuery::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(DisjunctionMaxQuery).tp_dict, "wrapfn_", make_descriptor(t_DisjunctionMaxQuery::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(DisjunctionMaxQuery).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_DisjunctionMaxQuery_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, DisjunctionMaxQuery::initializeClass, 1)))
            return NULL;
          return t_DisjunctionMaxQuery::wrap_Object(DisjunctionMaxQuery(((t_DisjunctionMaxQuery *) arg)->object.this$));
        }
        static PyObject *t_DisjunctionMaxQuery_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, DisjunctionMaxQuery::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_DisjunctionMaxQuery_init_(t_DisjunctionMaxQuery *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              jfloat a0;
              DisjunctionMaxQuery object((jobject) NULL);

              if (!parseArgs(args, "F", &a0))
              {
                INT_CALL(object = DisjunctionMaxQuery(a0));
                self->object = object;
                break;
              }
            }
            goto err;
           case 2:
            {
              ::java::util::Collection a0((jobject) NULL);
              PyTypeObject **p0;
              jfloat a1;
              DisjunctionMaxQuery object((jobject) NULL);

              if (!parseArgs(args, "KF", ::java::util::Collection::initializeClass, &a0, &p0, ::java::util::t_Collection::parameters_, &a1))
              {
                INT_CALL(object = DisjunctionMaxQuery(a0, a1));
                self->object = object;
                break;
              }
            }
           default:
           err:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_DisjunctionMaxQuery_add(t_DisjunctionMaxQuery *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              ::java::util::Collection a0((jobject) NULL);
              PyTypeObject **p0;

              if (!parseArgs(args, "K", ::java::util::Collection::initializeClass, &a0, &p0, ::java::util::t_Collection::parameters_))
              {
                OBJ_CALL(self->object.add(a0));
                Py_RETURN_NONE;
              }
            }
            {
              ::org::apache::lucene::search::Query a0((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::search::Query::initializeClass, &a0))
              {
                OBJ_CALL(self->object.add(a0));
                Py_RETURN_NONE;
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "add", args);
          return NULL;
        }

        static PyObject *t_DisjunctionMaxQuery_clone(t_DisjunctionMaxQuery *self, PyObject *args)
        {
          DisjunctionMaxQuery result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.clone());
            return t_DisjunctionMaxQuery::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(DisjunctionMaxQuery), (PyObject *) self, "clone", args, 2);
        }

        static PyObject *t_DisjunctionMaxQuery_createWeight(t_DisjunctionMaxQuery *self, PyObject *args)
        {
          ::org::apache::lucene::search::IndexSearcher a0((jobject) NULL);
          ::org::apache::lucene::search::Weight result((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::search::IndexSearcher::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.createWeight(a0));
            return ::org::apache::lucene::search::t_Weight::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(DisjunctionMaxQuery), (PyObject *) self, "createWeight", args, 2);
        }

        static PyObject *t_DisjunctionMaxQuery_equals(t_DisjunctionMaxQuery *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.equals(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(DisjunctionMaxQuery), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_DisjunctionMaxQuery_extractTerms(t_DisjunctionMaxQuery *self, PyObject *args)
        {
          ::java::util::Set a0((jobject) NULL);
          PyTypeObject **p0;

          if (!parseArgs(args, "K", ::java::util::Set::initializeClass, &a0, &p0, ::java::util::t_Set::parameters_))
          {
            OBJ_CALL(self->object.extractTerms(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(DisjunctionMaxQuery), (PyObject *) self, "extractTerms", args, 2);
        }

        static PyObject *t_DisjunctionMaxQuery_getDisjuncts(t_DisjunctionMaxQuery *self)
        {
          ::java::util::ArrayList result((jobject) NULL);
          OBJ_CALL(result = self->object.getDisjuncts());
          return ::java::util::t_ArrayList::wrap_Object(result, &::org::apache::lucene::search::PY_TYPE(Query));
        }

        static PyObject *t_DisjunctionMaxQuery_getTieBreakerMultiplier(t_DisjunctionMaxQuery *self)
        {
          jfloat result;
          OBJ_CALL(result = self->object.getTieBreakerMultiplier());
          return PyFloat_FromDouble((double) result);
        }

        static PyObject *t_DisjunctionMaxQuery_hashCode(t_DisjunctionMaxQuery *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hashCode());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(DisjunctionMaxQuery), (PyObject *) self, "hashCode", args, 2);
        }

        static PyObject *t_DisjunctionMaxQuery_iterator(t_DisjunctionMaxQuery *self)
        {
          ::java::util::Iterator result((jobject) NULL);
          OBJ_CALL(result = self->object.iterator());
          return ::java::util::t_Iterator::wrap_Object(result, &::org::apache::lucene::search::PY_TYPE(Query));
        }

        static PyObject *t_DisjunctionMaxQuery_rewrite(t_DisjunctionMaxQuery *self, PyObject *args)
        {
          ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
          ::org::apache::lucene::search::Query result((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::index::IndexReader::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.rewrite(a0));
            return ::org::apache::lucene::search::t_Query::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(DisjunctionMaxQuery), (PyObject *) self, "rewrite", args, 2);
        }

        static PyObject *t_DisjunctionMaxQuery_toString(t_DisjunctionMaxQuery *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = self->object.toString(a0));
            return j2p(result);
          }

          return callSuper(&PY_TYPE(DisjunctionMaxQuery), (PyObject *) self, "toString", args, 2);
        }

        static PyObject *t_DisjunctionMaxQuery_get__disjuncts(t_DisjunctionMaxQuery *self, void *data)
        {
          ::java::util::ArrayList value((jobject) NULL);
          OBJ_CALL(value = self->object.getDisjuncts());
          return ::java::util::t_ArrayList::wrap_Object(value);
        }

        static PyObject *t_DisjunctionMaxQuery_get__tieBreakerMultiplier(t_DisjunctionMaxQuery *self, void *data)
        {
          jfloat value;
          OBJ_CALL(value = self->object.getTieBreakerMultiplier());
          return PyFloat_FromDouble((double) value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "java/io/FileInputStream.h"
#include "java/io/FileNotFoundException.h"
#include "java/lang/Class.h"
#include "java/io/FileDescriptor.h"
#include "java/io/File.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "JArray.h"

namespace java {
  namespace io {

    ::java::lang::Class *FileInputStream::class$ = NULL;
    jmethodID *FileInputStream::mids$ = NULL;
    bool FileInputStream::live$ = false;

    jclass FileInputStream::initializeClass(bool getOnly)
    {
      if (getOnly)
        return (jclass) (live$ ? class$->this$ : NULL);
      if (class$ == NULL)
      {
        jclass cls = (jclass) env->findClass("java/io/FileInputStream");

        mids$ = new jmethodID[max_mid];
        mids$[mid_init$_698067a0] = env->getMethodID(cls, "<init>", "(Ljava/io/FileDescriptor;)V");
        mids$[mid_init$_c3dacf57] = env->getMethodID(cls, "<init>", "(Ljava/io/File;)V");
        mids$[mid_init$_5fdc3f48] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;)V");
        mids$[mid_available_54c6a179] = env->getMethodID(cls, "available", "()I");
        mids$[mid_close_54c6a166] = env->getMethodID(cls, "close", "()V");
        mids$[mid_getFD_94738b01] = env->getMethodID(cls, "getFD", "()Ljava/io/FileDescriptor;");
        mids$[mid_read_54c6a179] = env->getMethodID(cls, "read", "()I");
        mids$[mid_read_49b4f134] = env->getMethodID(cls, "read", "([B)I");
        mids$[mid_read_86f44340] = env->getMethodID(cls, "read", "([BII)I");
        mids$[mid_skip_0ee6df33] = env->getMethodID(cls, "skip", "(J)J");
        mids$[mid_finalize_54c6a166] = env->getMethodID(cls, "finalize", "()V");

        class$ = (::java::lang::Class *) new JObject(cls);
        live$ = true;
      }
      return (jclass) class$->this$;
    }

    FileInputStream::FileInputStream(const ::java::io::FileDescriptor & a0) : ::java::io::InputStream(env->newObject(initializeClass, &mids$, mid_init$_698067a0, a0.this$)) {}

    FileInputStream::FileInputStream(const ::java::io::File & a0) : ::java::io::InputStream(env->newObject(initializeClass, &mids$, mid_init$_c3dacf57, a0.this$)) {}

    FileInputStream::FileInputStream(const ::java::lang::String & a0) : ::java::io::InputStream(env->newObject(initializeClass, &mids$, mid_init$_5fdc3f48, a0.this$)) {}

    jint FileInputStream::available() const
    {
      return env->callIntMethod(this$, mids$[mid_available_54c6a179]);
    }

    void FileInputStream::close() const
    {
      env->callVoidMethod(this$, mids$[mid_close_54c6a166]);
    }

    ::java::io::FileDescriptor FileInputStream::getFD() const
    {
      return ::java::io::FileDescriptor(env->callObjectMethod(this$, mids$[mid_getFD_94738b01]));
    }

    jint FileInputStream::read() const
    {
      return env->callIntMethod(this$, mids$[mid_read_54c6a179]);
    }

    jint FileInputStream::read(const JArray< jbyte > & a0) const
    {
      return env->callIntMethod(this$, mids$[mid_read_49b4f134], a0.this$);
    }

    jint FileInputStream::read(const JArray< jbyte > & a0, jint a1, jint a2) const
    {
      return env->callIntMethod(this$, mids$[mid_read_86f44340], a0.this$, a1, a2);
    }

    jlong FileInputStream::skip(jlong a0) const
    {
      return env->callLongMethod(this$, mids$[mid_skip_0ee6df33], a0);
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace java {
  namespace io {
    static PyObject *t_FileInputStream_cast_(PyTypeObject *type, PyObject *arg);
    static PyObject *t_FileInputStream_instance_(PyTypeObject *type, PyObject *arg);
    static int t_FileInputStream_init_(t_FileInputStream *self, PyObject *args, PyObject *kwds);
    static PyObject *t_FileInputStream_available(t_FileInputStream *self, PyObject *args);
    static PyObject *t_FileInputStream_close(t_FileInputStream *self, PyObject *args);
    static PyObject *t_FileInputStream_getFD(t_FileInputStream *self);
    static PyObject *t_FileInputStream_read(t_FileInputStream *self, PyObject *args);
    static PyObject *t_FileInputStream_skip(t_FileInputStream *self, PyObject *args);
    static PyObject *t_FileInputStream_get__fD(t_FileInputStream *self, void *data);
    static PyGetSetDef t_FileInputStream__fields_[] = {
      DECLARE_GET_FIELD(t_FileInputStream, fD),
      { NULL, NULL, NULL, NULL, NULL }
    };

    static PyMethodDef t_FileInputStream__methods_[] = {
      DECLARE_METHOD(t_FileInputStream, cast_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_FileInputStream, instance_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_FileInputStream, available, METH_VARARGS),
      DECLARE_METHOD(t_FileInputStream, close, METH_VARARGS),
      DECLARE_METHOD(t_FileInputStream, getFD, METH_NOARGS),
      DECLARE_METHOD(t_FileInputStream, read, METH_VARARGS),
      DECLARE_METHOD(t_FileInputStream, skip, METH_VARARGS),
      { NULL, NULL, 0, NULL }
    };

    DECLARE_TYPE(FileInputStream, t_FileInputStream, ::java::io::InputStream, FileInputStream, t_FileInputStream_init_, 0, 0, t_FileInputStream__fields_, 0, 0);

    void t_FileInputStream::install(PyObject *module)
    {
      installType(&PY_TYPE(FileInputStream), module, "FileInputStream", 0);
    }

    void t_FileInputStream::initialize(PyObject *module)
    {
      PyDict_SetItemString(PY_TYPE(FileInputStream).tp_dict, "class_", make_descriptor(FileInputStream::initializeClass, 1));
      PyDict_SetItemString(PY_TYPE(FileInputStream).tp_dict, "wrapfn_", make_descriptor(t_FileInputStream::wrap_jobject));
      PyDict_SetItemString(PY_TYPE(FileInputStream).tp_dict, "boxfn_", make_descriptor(boxObject));
    }

    static PyObject *t_FileInputStream_cast_(PyTypeObject *type, PyObject *arg)
    {
      if (!(arg = castCheck(arg, FileInputStream::initializeClass, 1)))
        return NULL;
      return t_FileInputStream::wrap_Object(FileInputStream(((t_FileInputStream *) arg)->object.this$));
    }
    static PyObject *t_FileInputStream_instance_(PyTypeObject *type, PyObject *arg)
    {
      if (!castCheck(arg, FileInputStream::initializeClass, 0))
        Py_RETURN_FALSE;
      Py_RETURN_TRUE;
    }

    static int t_FileInputStream_init_(t_FileInputStream *self, PyObject *args, PyObject *kwds)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 1:
        {
          ::java::io::FileDescriptor a0((jobject) NULL);
          FileInputStream object((jobject) NULL);

          if (!parseArgs(args, "k", ::java::io::FileDescriptor::initializeClass, &a0))
          {
            INT_CALL(object = FileInputStream(a0));
            self->object = object;
            break;
          }
        }
        {
          ::java::io::File a0((jobject) NULL);
          FileInputStream object((jobject) NULL);

          if (!parseArgs(args, "k", ::java::io::File::initializeClass, &a0))
          {
            INT_CALL(object = FileInputStream(a0));
            self->object = object;
            break;
          }
        }
        {
          ::java::lang::String a0((jobject) NULL);
          FileInputStream object((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            INT_CALL(object = FileInputStream(a0));
            self->object = object;
            break;
          }
        }
       default:
        PyErr_SetArgsError((PyObject *) self, "__init__", args);
        return -1;
      }

      return 0;
    }

    static PyObject *t_FileInputStream_available(t_FileInputStream *self, PyObject *args)
    {
      jint result;

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.available());
        return PyInt_FromLong((long) result);
      }

      return callSuper(&PY_TYPE(FileInputStream), (PyObject *) self, "available", args, 2);
    }

    static PyObject *t_FileInputStream_close(t_FileInputStream *self, PyObject *args)
    {

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(self->object.close());
        Py_RETURN_NONE;
      }

      return callSuper(&PY_TYPE(FileInputStream), (PyObject *) self, "close", args, 2);
    }

    static PyObject *t_FileInputStream_getFD(t_FileInputStream *self)
    {
      ::java::io::FileDescriptor result((jobject) NULL);
      OBJ_CALL(result = self->object.getFD());
      return ::java::io::t_FileDescriptor::wrap_Object(result);
    }

    static PyObject *t_FileInputStream_read(t_FileInputStream *self, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 0:
        {
          jint result;
          OBJ_CALL(result = self->object.read());
          return PyInt_FromLong((long) result);
        }
        break;
       case 1:
        {
          JArray< jbyte > a0((jobject) NULL);
          jint result;

          if (!parseArgs(args, "[B", &a0))
          {
            OBJ_CALL(result = self->object.read(a0));
            return PyInt_FromLong((long) result);
          }
        }
        break;
       case 3:
        {
          JArray< jbyte > a0((jobject) NULL);
          jint a1;
          jint a2;
          jint result;

          if (!parseArgs(args, "[BII", &a0, &a1, &a2))
          {
            OBJ_CALL(result = self->object.read(a0, a1, a2));
            return PyInt_FromLong((long) result);
          }
        }
      }

      return callSuper(&PY_TYPE(FileInputStream), (PyObject *) self, "read", args, 2);
    }

    static PyObject *t_FileInputStream_skip(t_FileInputStream *self, PyObject *args)
    {
      jlong a0;
      jlong result;

      if (!parseArgs(args, "J", &a0))
      {
        OBJ_CALL(result = self->object.skip(a0));
        return PyLong_FromLongLong((PY_LONG_LONG) result);
      }

      return callSuper(&PY_TYPE(FileInputStream), (PyObject *) self, "skip", args, 2);
    }

    static PyObject *t_FileInputStream_get__fD(t_FileInputStream *self, void *data)
    {
      ::java::io::FileDescriptor value((jobject) NULL);
      OBJ_CALL(value = self->object.getFD());
      return ::java::io::t_FileDescriptor::wrap_Object(value);
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/fst/NoOutputs.h"
#include "java/lang/Class.h"
#include "java/lang/Object.h"
#include "org/apache/lucene/store/DataInput.h"
#include "java/lang/String.h"
#include "org/apache/lucene/store/DataOutput.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace fst {

          ::java::lang::Class *NoOutputs::class$ = NULL;
          jmethodID *NoOutputs::mids$ = NULL;
          bool NoOutputs::live$ = false;

          jclass NoOutputs::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/util/fst/NoOutputs");

              mids$ = new jmethodID[max_mid];
              mids$[mid_add_537d5bdf] = env->getMethodID(cls, "add", "(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;");
              mids$[mid_common_537d5bdf] = env->getMethodID(cls, "common", "(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;");
              mids$[mid_getNoOutput_846352c3] = env->getMethodID(cls, "getNoOutput", "()Ljava/lang/Object;");
              mids$[mid_getSingleton_99c00e31] = env->getStaticMethodID(cls, "getSingleton", "()Lorg/apache/lucene/util/fst/NoOutputs;");
              mids$[mid_merge_537d5bdf] = env->getMethodID(cls, "merge", "(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;");
              mids$[mid_outputToString_c9db4eed] = env->getMethodID(cls, "outputToString", "(Ljava/lang/Object;)Ljava/lang/String;");
              mids$[mid_read_7d5f44e2] = env->getMethodID(cls, "read", "(Lorg/apache/lucene/store/DataInput;)Ljava/lang/Object;");
              mids$[mid_subtract_537d5bdf] = env->getMethodID(cls, "subtract", "(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;");
              mids$[mid_write_208ac1fb] = env->getMethodID(cls, "write", "(Ljava/lang/Object;Lorg/apache/lucene/store/DataOutput;)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ::java::lang::Object NoOutputs::add(const ::java::lang::Object & a0, const ::java::lang::Object & a1) const
          {
            return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_add_537d5bdf], a0.this$, a1.this$));
          }

          ::java::lang::Object NoOutputs::common(const ::java::lang::Object & a0, const ::java::lang::Object & a1) const
          {
            return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_common_537d5bdf], a0.this$, a1.this$));
          }

          ::java::lang::Object NoOutputs::getNoOutput() const
          {
            return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_getNoOutput_846352c3]));
          }

          NoOutputs NoOutputs::getSingleton()
          {
            jclass cls = env->getClass(initializeClass);
            return NoOutputs(env->callStaticObjectMethod(cls, mids$[mid_getSingleton_99c00e31]));
          }

          ::java::lang::Object NoOutputs::merge(const ::java::lang::Object & a0, const ::java::lang::Object & a1) const
          {
            return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_merge_537d5bdf], a0.this$, a1.this$));
          }

          ::java::lang::String NoOutputs::outputToString(const ::java::lang::Object & a0) const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_outputToString_c9db4eed], a0.this$));
          }

          ::java::lang::Object NoOutputs::read(const ::org::apache::lucene::store::DataInput & a0) const
          {
            return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_read_7d5f44e2], a0.this$));
          }

          ::java::lang::Object NoOutputs::subtract(const ::java::lang::Object & a0, const ::java::lang::Object & a1) const
          {
            return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_subtract_537d5bdf], a0.this$, a1.this$));
          }

          void NoOutputs::write(const ::java::lang::Object & a0, const ::org::apache::lucene::store::DataOutput & a1) const
          {
            env->callVoidMethod(this$, mids$[mid_write_208ac1fb], a0.this$, a1.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace fst {
          static PyObject *t_NoOutputs_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_NoOutputs_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_NoOutputs_of_(t_NoOutputs *self, PyObject *args);
          static PyObject *t_NoOutputs_add(t_NoOutputs *self, PyObject *args);
          static PyObject *t_NoOutputs_common(t_NoOutputs *self, PyObject *args);
          static PyObject *t_NoOutputs_getNoOutput(t_NoOutputs *self, PyObject *args);
          static PyObject *t_NoOutputs_getSingleton(PyTypeObject *type);
          static PyObject *t_NoOutputs_merge(t_NoOutputs *self, PyObject *args);
          static PyObject *t_NoOutputs_outputToString(t_NoOutputs *self, PyObject *args);
          static PyObject *t_NoOutputs_read(t_NoOutputs *self, PyObject *args);
          static PyObject *t_NoOutputs_subtract(t_NoOutputs *self, PyObject *args);
          static PyObject *t_NoOutputs_write(t_NoOutputs *self, PyObject *args);
          static PyObject *t_NoOutputs_get__noOutput(t_NoOutputs *self, void *data);
          static PyObject *t_NoOutputs_get__singleton(t_NoOutputs *self, void *data);
          static PyObject *t_NoOutputs_get__parameters_(t_NoOutputs *self, void *data);
          static PyGetSetDef t_NoOutputs__fields_[] = {
            DECLARE_GET_FIELD(t_NoOutputs, noOutput),
            DECLARE_GET_FIELD(t_NoOutputs, singleton),
            DECLARE_GET_FIELD(t_NoOutputs, parameters_),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_NoOutputs__methods_[] = {
            DECLARE_METHOD(t_NoOutputs, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_NoOutputs, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_NoOutputs, of_, METH_VARARGS),
            DECLARE_METHOD(t_NoOutputs, add, METH_VARARGS),
            DECLARE_METHOD(t_NoOutputs, common, METH_VARARGS),
            DECLARE_METHOD(t_NoOutputs, getNoOutput, METH_VARARGS),
            DECLARE_METHOD(t_NoOutputs, getSingleton, METH_NOARGS | METH_CLASS),
            DECLARE_METHOD(t_NoOutputs, merge, METH_VARARGS),
            DECLARE_METHOD(t_NoOutputs, outputToString, METH_VARARGS),
            DECLARE_METHOD(t_NoOutputs, read, METH_VARARGS),
            DECLARE_METHOD(t_NoOutputs, subtract, METH_VARARGS),
            DECLARE_METHOD(t_NoOutputs, write, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(NoOutputs, t_NoOutputs, ::org::apache::lucene::util::fst::Outputs, NoOutputs, abstract_init, 0, 0, t_NoOutputs__fields_, 0, 0);
          PyObject *t_NoOutputs::wrap_Object(const NoOutputs& object, PyTypeObject *p0)
          {
            PyObject *obj = t_NoOutputs::wrap_Object(object);
            if (obj != NULL && obj != Py_None)
            {
              t_NoOutputs *self = (t_NoOutputs *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          PyObject *t_NoOutputs::wrap_jobject(const jobject& object, PyTypeObject *p0)
          {
            PyObject *obj = t_NoOutputs::wrap_jobject(object);
            if (obj != NULL && obj != Py_None)
            {
              t_NoOutputs *self = (t_NoOutputs *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          void t_NoOutputs::install(PyObject *module)
          {
            installType(&PY_TYPE(NoOutputs), module, "NoOutputs", 0);
          }

          void t_NoOutputs::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(NoOutputs).tp_dict, "class_", make_descriptor(NoOutputs::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(NoOutputs).tp_dict, "wrapfn_", make_descriptor(t_NoOutputs::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(NoOutputs).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_NoOutputs_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, NoOutputs::initializeClass, 1)))
              return NULL;
            return t_NoOutputs::wrap_Object(NoOutputs(((t_NoOutputs *) arg)->object.this$));
          }
          static PyObject *t_NoOutputs_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, NoOutputs::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_NoOutputs_of_(t_NoOutputs *self, PyObject *args)
          {
            if (!parseArg(args, "T", 1, &(self->parameters)))
              Py_RETURN_SELF;
            return PyErr_SetArgsError((PyObject *) self, "of_", args);
          }

          static PyObject *t_NoOutputs_add(t_NoOutputs *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            ::java::lang::Object a1((jobject) NULL);
            ::java::lang::Object result((jobject) NULL);

            if (!parseArgs(args, "oo", &a0, &a1))
            {
              OBJ_CALL(result = self->object.add(a0, a1));
              return ::java::lang::t_Object::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(NoOutputs), (PyObject *) self, "add", args, 2);
          }

          static PyObject *t_NoOutputs_common(t_NoOutputs *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            ::java::lang::Object a1((jobject) NULL);
            ::java::lang::Object result((jobject) NULL);

            if (!parseArgs(args, "oo", &a0, &a1))
            {
              OBJ_CALL(result = self->object.common(a0, a1));
              return ::java::lang::t_Object::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(NoOutputs), (PyObject *) self, "common", args, 2);
          }

          static PyObject *t_NoOutputs_getNoOutput(t_NoOutputs *self, PyObject *args)
          {
            ::java::lang::Object result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.getNoOutput());
              return ::java::lang::t_Object::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(NoOutputs), (PyObject *) self, "getNoOutput", args, 2);
          }

          static PyObject *t_NoOutputs_getSingleton(PyTypeObject *type)
          {
            NoOutputs result((jobject) NULL);
            OBJ_CALL(result = ::org::apache::lucene::util::fst::NoOutputs::getSingleton());
            return t_NoOutputs::wrap_Object(result);
          }

          static PyObject *t_NoOutputs_merge(t_NoOutputs *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            ::java::lang::Object a1((jobject) NULL);
            ::java::lang::Object result((jobject) NULL);

            if (!parseArgs(args, "oo", &a0, &a1))
            {
              OBJ_CALL(result = self->object.merge(a0, a1));
              return ::java::lang::t_Object::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(NoOutputs), (PyObject *) self, "merge", args, 2);
          }

          static PyObject *t_NoOutputs_outputToString(t_NoOutputs *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, "o", &a0))
            {
              OBJ_CALL(result = self->object.outputToString(a0));
              return j2p(result);
            }

            return callSuper(&PY_TYPE(NoOutputs), (PyObject *) self, "outputToString", args, 2);
          }

          static PyObject *t_NoOutputs_read(t_NoOutputs *self, PyObject *args)
          {
            ::org::apache::lucene::store::DataInput a0((jobject) NULL);
            ::java::lang::Object result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::store::DataInput::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.read(a0));
              return ::java::lang::t_Object::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(NoOutputs), (PyObject *) self, "read", args, 2);
          }

          static PyObject *t_NoOutputs_subtract(t_NoOutputs *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            ::java::lang::Object a1((jobject) NULL);
            ::java::lang::Object result((jobject) NULL);

            if (!parseArgs(args, "oo", &a0, &a1))
            {
              OBJ_CALL(result = self->object.subtract(a0, a1));
              return ::java::lang::t_Object::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(NoOutputs), (PyObject *) self, "subtract", args, 2);
          }

          static PyObject *t_NoOutputs_write(t_NoOutputs *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            ::org::apache::lucene::store::DataOutput a1((jobject) NULL);

            if (!parseArgs(args, "ok", ::org::apache::lucene::store::DataOutput::initializeClass, &a0, &a1))
            {
              OBJ_CALL(self->object.write(a0, a1));
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(NoOutputs), (PyObject *) self, "write", args, 2);
          }
          static PyObject *t_NoOutputs_get__parameters_(t_NoOutputs *self, void *data)
          {
            return typeParameters(self->parameters, sizeof(self->parameters));
          }

          static PyObject *t_NoOutputs_get__noOutput(t_NoOutputs *self, void *data)
          {
            ::java::lang::Object value((jobject) NULL);
            OBJ_CALL(value = self->object.getNoOutput());
            return ::java::lang::t_Object::wrap_Object(value);
          }

          static PyObject *t_NoOutputs_get__singleton(t_NoOutputs *self, void *data)
          {
            NoOutputs value((jobject) NULL);
            OBJ_CALL(value = self->object.getSingleton());
            return t_NoOutputs::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/similarities/LMSimilarity$CollectionModel.h"
#include "org/apache/lucene/search/similarities/BasicStats.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace similarities {

          ::java::lang::Class *LMSimilarity$CollectionModel::class$ = NULL;
          jmethodID *LMSimilarity$CollectionModel::mids$ = NULL;
          bool LMSimilarity$CollectionModel::live$ = false;

          jclass LMSimilarity$CollectionModel::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/similarities/LMSimilarity$CollectionModel");

              mids$ = new jmethodID[max_mid];
              mids$[mid_computeProbability_cb225ea0] = env->getMethodID(cls, "computeProbability", "(Lorg/apache/lucene/search/similarities/BasicStats;)F");
              mids$[mid_getName_14c7b5c5] = env->getMethodID(cls, "getName", "()Ljava/lang/String;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          jfloat LMSimilarity$CollectionModel::computeProbability(const ::org::apache::lucene::search::similarities::BasicStats & a0) const
          {
            return env->callFloatMethod(this$, mids$[mid_computeProbability_cb225ea0], a0.this$);
          }

          ::java::lang::String LMSimilarity$CollectionModel::getName() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getName_14c7b5c5]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace similarities {
          static PyObject *t_LMSimilarity$CollectionModel_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_LMSimilarity$CollectionModel_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_LMSimilarity$CollectionModel_computeProbability(t_LMSimilarity$CollectionModel *self, PyObject *arg);
          static PyObject *t_LMSimilarity$CollectionModel_getName(t_LMSimilarity$CollectionModel *self);
          static PyObject *t_LMSimilarity$CollectionModel_get__name(t_LMSimilarity$CollectionModel *self, void *data);
          static PyGetSetDef t_LMSimilarity$CollectionModel__fields_[] = {
            DECLARE_GET_FIELD(t_LMSimilarity$CollectionModel, name),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_LMSimilarity$CollectionModel__methods_[] = {
            DECLARE_METHOD(t_LMSimilarity$CollectionModel, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_LMSimilarity$CollectionModel, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_LMSimilarity$CollectionModel, computeProbability, METH_O),
            DECLARE_METHOD(t_LMSimilarity$CollectionModel, getName, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(LMSimilarity$CollectionModel, t_LMSimilarity$CollectionModel, ::java::lang::Object, LMSimilarity$CollectionModel, abstract_init, 0, 0, t_LMSimilarity$CollectionModel__fields_, 0, 0);

          void t_LMSimilarity$CollectionModel::install(PyObject *module)
          {
            installType(&PY_TYPE(LMSimilarity$CollectionModel), module, "LMSimilarity$CollectionModel", 0);
          }

          void t_LMSimilarity$CollectionModel::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(LMSimilarity$CollectionModel).tp_dict, "class_", make_descriptor(LMSimilarity$CollectionModel::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(LMSimilarity$CollectionModel).tp_dict, "wrapfn_", make_descriptor(t_LMSimilarity$CollectionModel::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(LMSimilarity$CollectionModel).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_LMSimilarity$CollectionModel_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, LMSimilarity$CollectionModel::initializeClass, 1)))
              return NULL;
            return t_LMSimilarity$CollectionModel::wrap_Object(LMSimilarity$CollectionModel(((t_LMSimilarity$CollectionModel *) arg)->object.this$));
          }
          static PyObject *t_LMSimilarity$CollectionModel_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, LMSimilarity$CollectionModel::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_LMSimilarity$CollectionModel_computeProbability(t_LMSimilarity$CollectionModel *self, PyObject *arg)
          {
            ::org::apache::lucene::search::similarities::BasicStats a0((jobject) NULL);
            jfloat result;

            if (!parseArg(arg, "k", ::org::apache::lucene::search::similarities::BasicStats::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.computeProbability(a0));
              return PyFloat_FromDouble((double) result);
            }

            PyErr_SetArgsError((PyObject *) self, "computeProbability", arg);
            return NULL;
          }

          static PyObject *t_LMSimilarity$CollectionModel_getName(t_LMSimilarity$CollectionModel *self)
          {
            ::java::lang::String result((jobject) NULL);
            OBJ_CALL(result = self->object.getName());
            return j2p(result);
          }

          static PyObject *t_LMSimilarity$CollectionModel_get__name(t_LMSimilarity$CollectionModel *self, void *data)
          {
            ::java::lang::String value((jobject) NULL);
            OBJ_CALL(value = self->object.getName());
            return j2p(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/NamedSPILoader$NamedSPI.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *NamedSPILoader$NamedSPI::class$ = NULL;
        jmethodID *NamedSPILoader$NamedSPI::mids$ = NULL;
        bool NamedSPILoader$NamedSPI::live$ = false;

        jclass NamedSPILoader$NamedSPI::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/NamedSPILoader$NamedSPI");

            mids$ = new jmethodID[max_mid];
            mids$[mid_getName_14c7b5c5] = env->getMethodID(cls, "getName", "()Ljava/lang/String;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        ::java::lang::String NamedSPILoader$NamedSPI::getName() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getName_14c7b5c5]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_NamedSPILoader$NamedSPI_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_NamedSPILoader$NamedSPI_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_NamedSPILoader$NamedSPI_of_(t_NamedSPILoader$NamedSPI *self, PyObject *args);
        static PyObject *t_NamedSPILoader$NamedSPI_getName(t_NamedSPILoader$NamedSPI *self);
        static PyObject *t_NamedSPILoader$NamedSPI_get__name(t_NamedSPILoader$NamedSPI *self, void *data);
        static PyObject *t_NamedSPILoader$NamedSPI_get__parameters_(t_NamedSPILoader$NamedSPI *self, void *data);
        static PyGetSetDef t_NamedSPILoader$NamedSPI__fields_[] = {
          DECLARE_GET_FIELD(t_NamedSPILoader$NamedSPI, name),
          DECLARE_GET_FIELD(t_NamedSPILoader$NamedSPI, parameters_),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_NamedSPILoader$NamedSPI__methods_[] = {
          DECLARE_METHOD(t_NamedSPILoader$NamedSPI, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_NamedSPILoader$NamedSPI, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_NamedSPILoader$NamedSPI, of_, METH_VARARGS),
          DECLARE_METHOD(t_NamedSPILoader$NamedSPI, getName, METH_NOARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(NamedSPILoader$NamedSPI, t_NamedSPILoader$NamedSPI, ::java::lang::Object, NamedSPILoader$NamedSPI, abstract_init, 0, 0, t_NamedSPILoader$NamedSPI__fields_, 0, 0);
        PyObject *t_NamedSPILoader$NamedSPI::wrap_Object(const NamedSPILoader$NamedSPI& object, PyTypeObject *p0)
        {
          PyObject *obj = t_NamedSPILoader$NamedSPI::wrap_Object(object);
          if (obj != NULL && obj != Py_None)
          {
            t_NamedSPILoader$NamedSPI *self = (t_NamedSPILoader$NamedSPI *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        PyObject *t_NamedSPILoader$NamedSPI::wrap_jobject(const jobject& object, PyTypeObject *p0)
        {
          PyObject *obj = t_NamedSPILoader$NamedSPI::wrap_jobject(object);
          if (obj != NULL && obj != Py_None)
          {
            t_NamedSPILoader$NamedSPI *self = (t_NamedSPILoader$NamedSPI *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        void t_NamedSPILoader$NamedSPI::install(PyObject *module)
        {
          installType(&PY_TYPE(NamedSPILoader$NamedSPI), module, "NamedSPILoader$NamedSPI", 0);
        }

        void t_NamedSPILoader$NamedSPI::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(NamedSPILoader$NamedSPI).tp_dict, "class_", make_descriptor(NamedSPILoader$NamedSPI::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(NamedSPILoader$NamedSPI).tp_dict, "wrapfn_", make_descriptor(t_NamedSPILoader$NamedSPI::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(NamedSPILoader$NamedSPI).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_NamedSPILoader$NamedSPI_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, NamedSPILoader$NamedSPI::initializeClass, 1)))
            return NULL;
          return t_NamedSPILoader$NamedSPI::wrap_Object(NamedSPILoader$NamedSPI(((t_NamedSPILoader$NamedSPI *) arg)->object.this$));
        }
        static PyObject *t_NamedSPILoader$NamedSPI_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, NamedSPILoader$NamedSPI::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_NamedSPILoader$NamedSPI_of_(t_NamedSPILoader$NamedSPI *self, PyObject *args)
        {
          if (!parseArg(args, "T", 1, &(self->parameters)))
            Py_RETURN_SELF;
          return PyErr_SetArgsError((PyObject *) self, "of_", args);
        }

        static PyObject *t_NamedSPILoader$NamedSPI_getName(t_NamedSPILoader$NamedSPI *self)
        {
          ::java::lang::String result((jobject) NULL);
          OBJ_CALL(result = self->object.getName());
          return j2p(result);
        }
        static PyObject *t_NamedSPILoader$NamedSPI_get__parameters_(t_NamedSPILoader$NamedSPI *self, void *data)
        {
          return typeParameters(self->parameters, sizeof(self->parameters));
        }

        static PyObject *t_NamedSPILoader$NamedSPI_get__name(t_NamedSPILoader$NamedSPI *self, void *data)
        {
          ::java::lang::String value((jobject) NULL);
          OBJ_CALL(value = self->object.getName());
          return j2p(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/compressing/CompressionMode.h"
#include "org/apache/lucene/codecs/compressing/Decompressor.h"
#include "org/apache/lucene/codecs/compressing/Compressor.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace compressing {

          ::java::lang::Class *CompressionMode::class$ = NULL;
          jmethodID *CompressionMode::mids$ = NULL;
          bool CompressionMode::live$ = false;
          CompressionMode *CompressionMode::FAST = NULL;
          CompressionMode *CompressionMode::FAST_DECOMPRESSION = NULL;
          CompressionMode *CompressionMode::HIGH_COMPRESSION = NULL;

          jclass CompressionMode::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/compressing/CompressionMode");

              mids$ = new jmethodID[max_mid];
              mids$[mid_newCompressor_eb04ef38] = env->getMethodID(cls, "newCompressor", "()Lorg/apache/lucene/codecs/compressing/Compressor;");
              mids$[mid_newDecompressor_7b8f1b1d] = env->getMethodID(cls, "newDecompressor", "()Lorg/apache/lucene/codecs/compressing/Decompressor;");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              FAST = new CompressionMode(env->getStaticObjectField(cls, "FAST", "Lorg/apache/lucene/codecs/compressing/CompressionMode;"));
              FAST_DECOMPRESSION = new CompressionMode(env->getStaticObjectField(cls, "FAST_DECOMPRESSION", "Lorg/apache/lucene/codecs/compressing/CompressionMode;"));
              HIGH_COMPRESSION = new CompressionMode(env->getStaticObjectField(cls, "HIGH_COMPRESSION", "Lorg/apache/lucene/codecs/compressing/CompressionMode;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ::org::apache::lucene::codecs::compressing::Compressor CompressionMode::newCompressor() const
          {
            return ::org::apache::lucene::codecs::compressing::Compressor(env->callObjectMethod(this$, mids$[mid_newCompressor_eb04ef38]));
          }

          ::org::apache::lucene::codecs::compressing::Decompressor CompressionMode::newDecompressor() const
          {
            return ::org::apache::lucene::codecs::compressing::Decompressor(env->callObjectMethod(this$, mids$[mid_newDecompressor_7b8f1b1d]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace compressing {
          static PyObject *t_CompressionMode_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_CompressionMode_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_CompressionMode_newCompressor(t_CompressionMode *self);
          static PyObject *t_CompressionMode_newDecompressor(t_CompressionMode *self);

          static PyMethodDef t_CompressionMode__methods_[] = {
            DECLARE_METHOD(t_CompressionMode, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CompressionMode, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CompressionMode, newCompressor, METH_NOARGS),
            DECLARE_METHOD(t_CompressionMode, newDecompressor, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(CompressionMode, t_CompressionMode, ::java::lang::Object, CompressionMode, abstract_init, 0, 0, 0, 0, 0);

          void t_CompressionMode::install(PyObject *module)
          {
            installType(&PY_TYPE(CompressionMode), module, "CompressionMode", 0);
          }

          void t_CompressionMode::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(CompressionMode).tp_dict, "class_", make_descriptor(CompressionMode::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(CompressionMode).tp_dict, "wrapfn_", make_descriptor(t_CompressionMode::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(CompressionMode).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(CompressionMode::initializeClass);
            PyDict_SetItemString(PY_TYPE(CompressionMode).tp_dict, "FAST", make_descriptor(t_CompressionMode::wrap_Object(*CompressionMode::FAST)));
            PyDict_SetItemString(PY_TYPE(CompressionMode).tp_dict, "FAST_DECOMPRESSION", make_descriptor(t_CompressionMode::wrap_Object(*CompressionMode::FAST_DECOMPRESSION)));
            PyDict_SetItemString(PY_TYPE(CompressionMode).tp_dict, "HIGH_COMPRESSION", make_descriptor(t_CompressionMode::wrap_Object(*CompressionMode::HIGH_COMPRESSION)));
          }

          static PyObject *t_CompressionMode_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, CompressionMode::initializeClass, 1)))
              return NULL;
            return t_CompressionMode::wrap_Object(CompressionMode(((t_CompressionMode *) arg)->object.this$));
          }
          static PyObject *t_CompressionMode_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, CompressionMode::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_CompressionMode_newCompressor(t_CompressionMode *self)
          {
            ::org::apache::lucene::codecs::compressing::Compressor result((jobject) NULL);
            OBJ_CALL(result = self->object.newCompressor());
            return ::org::apache::lucene::codecs::compressing::t_Compressor::wrap_Object(result);
          }

          static PyObject *t_CompressionMode_newDecompressor(t_CompressionMode *self)
          {
            ::org::apache::lucene::codecs::compressing::Decompressor result((jobject) NULL);
            OBJ_CALL(result = self->object.newDecompressor());
            return ::org::apache::lucene::codecs::compressing::t_Decompressor::wrap_Object(result);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/sandbox/queries/regex/RegexCapabilities$RegexMatcher.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace sandbox {
        namespace queries {
          namespace regex {

            ::java::lang::Class *RegexCapabilities$RegexMatcher::class$ = NULL;
            jmethodID *RegexCapabilities$RegexMatcher::mids$ = NULL;
            bool RegexCapabilities$RegexMatcher::live$ = false;

            jclass RegexCapabilities$RegexMatcher::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/sandbox/queries/regex/RegexCapabilities$RegexMatcher");

                mids$ = new jmethodID[max_mid];
                mids$[mid_match_7bc03dc8] = env->getMethodID(cls, "match", "(Lorg/apache/lucene/util/BytesRef;)Z");
                mids$[mid_prefix_14c7b5c5] = env->getMethodID(cls, "prefix", "()Ljava/lang/String;");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            jboolean RegexCapabilities$RegexMatcher::match(const ::org::apache::lucene::util::BytesRef & a0) const
            {
              return env->callBooleanMethod(this$, mids$[mid_match_7bc03dc8], a0.this$);
            }

            ::java::lang::String RegexCapabilities$RegexMatcher::prefix() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_prefix_14c7b5c5]));
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace sandbox {
        namespace queries {
          namespace regex {
            static PyObject *t_RegexCapabilities$RegexMatcher_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_RegexCapabilities$RegexMatcher_instance_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_RegexCapabilities$RegexMatcher_match(t_RegexCapabilities$RegexMatcher *self, PyObject *arg);
            static PyObject *t_RegexCapabilities$RegexMatcher_prefix(t_RegexCapabilities$RegexMatcher *self);

            static PyMethodDef t_RegexCapabilities$RegexMatcher__methods_[] = {
              DECLARE_METHOD(t_RegexCapabilities$RegexMatcher, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_RegexCapabilities$RegexMatcher, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_RegexCapabilities$RegexMatcher, match, METH_O),
              DECLARE_METHOD(t_RegexCapabilities$RegexMatcher, prefix, METH_NOARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(RegexCapabilities$RegexMatcher, t_RegexCapabilities$RegexMatcher, ::java::lang::Object, RegexCapabilities$RegexMatcher, abstract_init, 0, 0, 0, 0, 0);

            void t_RegexCapabilities$RegexMatcher::install(PyObject *module)
            {
              installType(&PY_TYPE(RegexCapabilities$RegexMatcher), module, "RegexCapabilities$RegexMatcher", 0);
            }

            void t_RegexCapabilities$RegexMatcher::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(RegexCapabilities$RegexMatcher).tp_dict, "class_", make_descriptor(RegexCapabilities$RegexMatcher::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(RegexCapabilities$RegexMatcher).tp_dict, "wrapfn_", make_descriptor(t_RegexCapabilities$RegexMatcher::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(RegexCapabilities$RegexMatcher).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_RegexCapabilities$RegexMatcher_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, RegexCapabilities$RegexMatcher::initializeClass, 1)))
                return NULL;
              return t_RegexCapabilities$RegexMatcher::wrap_Object(RegexCapabilities$RegexMatcher(((t_RegexCapabilities$RegexMatcher *) arg)->object.this$));
            }
            static PyObject *t_RegexCapabilities$RegexMatcher_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, RegexCapabilities$RegexMatcher::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static PyObject *t_RegexCapabilities$RegexMatcher_match(t_RegexCapabilities$RegexMatcher *self, PyObject *arg)
            {
              ::org::apache::lucene::util::BytesRef a0((jobject) NULL);
              jboolean result;

              if (!parseArg(arg, "k", ::org::apache::lucene::util::BytesRef::initializeClass, &a0))
              {
                OBJ_CALL(result = self->object.match(a0));
                Py_RETURN_BOOL(result);
              }

              PyErr_SetArgsError((PyObject *) self, "match", arg);
              return NULL;
            }

            static PyObject *t_RegexCapabilities$RegexMatcher_prefix(t_RegexCapabilities$RegexMatcher *self)
            {
              ::java::lang::String result((jobject) NULL);
              OBJ_CALL(result = self->object.prefix());
              return j2p(result);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/compressing/CompressingStoredFieldsWriter.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/index/MergeState.h"
#include "org/apache/lucene/index/FieldInfo.h"
#include "org/apache/lucene/index/IndexableField.h"
#include "org/apache/lucene/store/IOContext.h"
#include "org/apache/lucene/store/Directory.h"
#include "org/apache/lucene/index/SegmentInfo.h"
#include "org/apache/lucene/codecs/compressing/CompressionMode.h"
#include "java/lang/String.h"
#include "org/apache/lucene/index/FieldInfos.h"
#include "java/io/IOException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace compressing {

          ::java::lang::Class *CompressingStoredFieldsWriter::class$ = NULL;
          jmethodID *CompressingStoredFieldsWriter::mids$ = NULL;
          bool CompressingStoredFieldsWriter::live$ = false;

          jclass CompressingStoredFieldsWriter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/compressing/CompressingStoredFieldsWriter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_999e6287] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/store/Directory;Lorg/apache/lucene/index/SegmentInfo;Ljava/lang/String;Lorg/apache/lucene/store/IOContext;Ljava/lang/String;Lorg/apache/lucene/codecs/compressing/CompressionMode;I)V");
              mids$[mid_abort_54c6a166] = env->getMethodID(cls, "abort", "()V");
              mids$[mid_close_54c6a166] = env->getMethodID(cls, "close", "()V");
              mids$[mid_finish_48f050c2] = env->getMethodID(cls, "finish", "(Lorg/apache/lucene/index/FieldInfos;I)V");
              mids$[mid_finishDocument_54c6a166] = env->getMethodID(cls, "finishDocument", "()V");
              mids$[mid_merge_fd0cfdeb] = env->getMethodID(cls, "merge", "(Lorg/apache/lucene/index/MergeState;)I");
              mids$[mid_startDocument_54c6a166] = env->getMethodID(cls, "startDocument", "()V");
              mids$[mid_writeField_0de3c993] = env->getMethodID(cls, "writeField", "(Lorg/apache/lucene/index/FieldInfo;Lorg/apache/lucene/index/IndexableField;)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          CompressingStoredFieldsWriter::CompressingStoredFieldsWriter(const ::org::apache::lucene::store::Directory & a0, const ::org::apache::lucene::index::SegmentInfo & a1, const ::java::lang::String & a2, const ::org::apache::lucene::store::IOContext & a3, const ::java::lang::String & a4, const ::org::apache::lucene::codecs::compressing::CompressionMode & a5, jint a6) : ::org::apache::lucene::codecs::StoredFieldsWriter(env->newObject(initializeClass, &mids$, mid_init$_999e6287, a0.this$, a1.this$, a2.this$, a3.this$, a4.this$, a5.this$, a6)) {}

          void CompressingStoredFieldsWriter::abort() const
          {
            env->callVoidMethod(this$, mids$[mid_abort_54c6a166]);
          }

          void CompressingStoredFieldsWriter::close() const
          {
            env->callVoidMethod(this$, mids$[mid_close_54c6a166]);
          }

          void CompressingStoredFieldsWriter::finish(const ::org::apache::lucene::index::FieldInfos & a0, jint a1) const
          {
            env->callVoidMethod(this$, mids$[mid_finish_48f050c2], a0.this$, a1);
          }

          void CompressingStoredFieldsWriter::finishDocument() const
          {
            env->callVoidMethod(this$, mids$[mid_finishDocument_54c6a166]);
          }

          jint CompressingStoredFieldsWriter::merge(const ::org::apache::lucene::index::MergeState & a0) const
          {
            return env->callIntMethod(this$, mids$[mid_merge_fd0cfdeb], a0.this$);
          }

          void CompressingStoredFieldsWriter::startDocument() const
          {
            env->callVoidMethod(this$, mids$[mid_startDocument_54c6a166]);
          }

          void CompressingStoredFieldsWriter::writeField(const ::org::apache::lucene::index::FieldInfo & a0, const ::org::apache::lucene::index::IndexableField & a1) const
          {
            env->callVoidMethod(this$, mids$[mid_writeField_0de3c993], a0.this$, a1.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace compressing {
          static PyObject *t_CompressingStoredFieldsWriter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_CompressingStoredFieldsWriter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_CompressingStoredFieldsWriter_init_(t_CompressingStoredFieldsWriter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_CompressingStoredFieldsWriter_abort(t_CompressingStoredFieldsWriter *self, PyObject *args);
          static PyObject *t_CompressingStoredFieldsWriter_close(t_CompressingStoredFieldsWriter *self, PyObject *args);
          static PyObject *t_CompressingStoredFieldsWriter_finish(t_CompressingStoredFieldsWriter *self, PyObject *args);
          static PyObject *t_CompressingStoredFieldsWriter_finishDocument(t_CompressingStoredFieldsWriter *self, PyObject *args);
          static PyObject *t_CompressingStoredFieldsWriter_merge(t_CompressingStoredFieldsWriter *self, PyObject *args);
          static PyObject *t_CompressingStoredFieldsWriter_startDocument(t_CompressingStoredFieldsWriter *self, PyObject *args);
          static PyObject *t_CompressingStoredFieldsWriter_writeField(t_CompressingStoredFieldsWriter *self, PyObject *args);

          static PyMethodDef t_CompressingStoredFieldsWriter__methods_[] = {
            DECLARE_METHOD(t_CompressingStoredFieldsWriter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CompressingStoredFieldsWriter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CompressingStoredFieldsWriter, abort, METH_VARARGS),
            DECLARE_METHOD(t_CompressingStoredFieldsWriter, close, METH_VARARGS),
            DECLARE_METHOD(t_CompressingStoredFieldsWriter, finish, METH_VARARGS),
            DECLARE_METHOD(t_CompressingStoredFieldsWriter, finishDocument, METH_VARARGS),
            DECLARE_METHOD(t_CompressingStoredFieldsWriter, merge, METH_VARARGS),
            DECLARE_METHOD(t_CompressingStoredFieldsWriter, startDocument, METH_VARARGS),
            DECLARE_METHOD(t_CompressingStoredFieldsWriter, writeField, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(CompressingStoredFieldsWriter, t_CompressingStoredFieldsWriter, ::org::apache::lucene::codecs::StoredFieldsWriter, CompressingStoredFieldsWriter, t_CompressingStoredFieldsWriter_init_, 0, 0, 0, 0, 0);

          void t_CompressingStoredFieldsWriter::install(PyObject *module)
          {
            installType(&PY_TYPE(CompressingStoredFieldsWriter), module, "CompressingStoredFieldsWriter", 0);
          }

          void t_CompressingStoredFieldsWriter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(CompressingStoredFieldsWriter).tp_dict, "class_", make_descriptor(CompressingStoredFieldsWriter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(CompressingStoredFieldsWriter).tp_dict, "wrapfn_", make_descriptor(t_CompressingStoredFieldsWriter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(CompressingStoredFieldsWriter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_CompressingStoredFieldsWriter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, CompressingStoredFieldsWriter::initializeClass, 1)))
              return NULL;
            return t_CompressingStoredFieldsWriter::wrap_Object(CompressingStoredFieldsWriter(((t_CompressingStoredFieldsWriter *) arg)->object.this$));
          }
          static PyObject *t_CompressingStoredFieldsWriter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, CompressingStoredFieldsWriter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_CompressingStoredFieldsWriter_init_(t_CompressingStoredFieldsWriter *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::store::Directory a0((jobject) NULL);
            ::org::apache::lucene::index::SegmentInfo a1((jobject) NULL);
            ::java::lang::String a2((jobject) NULL);
            ::org::apache::lucene::store::IOContext a3((jobject) NULL);
            ::java::lang::String a4((jobject) NULL);
            ::org::apache::lucene::codecs::compressing::CompressionMode a5((jobject) NULL);
            jint a6;
            CompressingStoredFieldsWriter object((jobject) NULL);

            if (!parseArgs(args, "kkskskI", ::org::apache::lucene::store::Directory::initializeClass, ::org::apache::lucene::index::SegmentInfo::initializeClass, ::org::apache::lucene::store::IOContext::initializeClass, ::org::apache::lucene::codecs::compressing::CompressionMode::initializeClass, &a0, &a1, &a2, &a3, &a4, &a5, &a6))
            {
              INT_CALL(object = CompressingStoredFieldsWriter(a0, a1, a2, a3, a4, a5, a6));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_CompressingStoredFieldsWriter_abort(t_CompressingStoredFieldsWriter *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.abort());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(CompressingStoredFieldsWriter), (PyObject *) self, "abort", args, 2);
          }

          static PyObject *t_CompressingStoredFieldsWriter_close(t_CompressingStoredFieldsWriter *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.close());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(CompressingStoredFieldsWriter), (PyObject *) self, "close", args, 2);
          }

          static PyObject *t_CompressingStoredFieldsWriter_finish(t_CompressingStoredFieldsWriter *self, PyObject *args)
          {
            ::org::apache::lucene::index::FieldInfos a0((jobject) NULL);
            jint a1;

            if (!parseArgs(args, "kI", ::org::apache::lucene::index::FieldInfos::initializeClass, &a0, &a1))
            {
              OBJ_CALL(self->object.finish(a0, a1));
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(CompressingStoredFieldsWriter), (PyObject *) self, "finish", args, 2);
          }

          static PyObject *t_CompressingStoredFieldsWriter_finishDocument(t_CompressingStoredFieldsWriter *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.finishDocument());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(CompressingStoredFieldsWriter), (PyObject *) self, "finishDocument", args, 2);
          }

          static PyObject *t_CompressingStoredFieldsWriter_merge(t_CompressingStoredFieldsWriter *self, PyObject *args)
          {
            ::org::apache::lucene::index::MergeState a0((jobject) NULL);
            jint result;

            if (!parseArgs(args, "k", ::org::apache::lucene::index::MergeState::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.merge(a0));
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(CompressingStoredFieldsWriter), (PyObject *) self, "merge", args, 2);
          }

          static PyObject *t_CompressingStoredFieldsWriter_startDocument(t_CompressingStoredFieldsWriter *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.startDocument());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(CompressingStoredFieldsWriter), (PyObject *) self, "startDocument", args, 2);
          }

          static PyObject *t_CompressingStoredFieldsWriter_writeField(t_CompressingStoredFieldsWriter *self, PyObject *args)
          {
            ::org::apache::lucene::index::FieldInfo a0((jobject) NULL);
            ::org::apache::lucene::index::IndexableField a1((jobject) NULL);

            if (!parseArgs(args, "kk", ::org::apache::lucene::index::FieldInfo::initializeClass, ::org::apache::lucene::index::IndexableField::initializeClass, &a0, &a1))
            {
              OBJ_CALL(self->object.writeField(a0, a1));
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(CompressingStoredFieldsWriter), (PyObject *) self, "writeField", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/store/SimpleFSLockFactory.h"
#include "java/lang/String.h"
#include "java/io/File.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/store/Lock.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {

        ::java::lang::Class *SimpleFSLockFactory::class$ = NULL;
        jmethodID *SimpleFSLockFactory::mids$ = NULL;
        bool SimpleFSLockFactory::live$ = false;

        jclass SimpleFSLockFactory::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/store/SimpleFSLockFactory");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_init$_5fdc3f48] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;)V");
            mids$[mid_init$_c3dacf57] = env->getMethodID(cls, "<init>", "(Ljava/io/File;)V");
            mids$[mid_clearLock_5fdc3f48] = env->getMethodID(cls, "clearLock", "(Ljava/lang/String;)V");
            mids$[mid_makeLock_f26bb9a8] = env->getMethodID(cls, "makeLock", "(Ljava/lang/String;)Lorg/apache/lucene/store/Lock;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        SimpleFSLockFactory::SimpleFSLockFactory() : ::org::apache::lucene::store::FSLockFactory(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        SimpleFSLockFactory::SimpleFSLockFactory(const ::java::lang::String & a0) : ::org::apache::lucene::store::FSLockFactory(env->newObject(initializeClass, &mids$, mid_init$_5fdc3f48, a0.this$)) {}

        SimpleFSLockFactory::SimpleFSLockFactory(const ::java::io::File & a0) : ::org::apache::lucene::store::FSLockFactory(env->newObject(initializeClass, &mids$, mid_init$_c3dacf57, a0.this$)) {}

        void SimpleFSLockFactory::clearLock(const ::java::lang::String & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_clearLock_5fdc3f48], a0.this$);
        }

        ::org::apache::lucene::store::Lock SimpleFSLockFactory::makeLock(const ::java::lang::String & a0) const
        {
          return ::org::apache::lucene::store::Lock(env->callObjectMethod(this$, mids$[mid_makeLock_f26bb9a8], a0.this$));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {
        static PyObject *t_SimpleFSLockFactory_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_SimpleFSLockFactory_instance_(PyTypeObject *type, PyObject *arg);
        static int t_SimpleFSLockFactory_init_(t_SimpleFSLockFactory *self, PyObject *args, PyObject *kwds);
        static PyObject *t_SimpleFSLockFactory_clearLock(t_SimpleFSLockFactory *self, PyObject *args);
        static PyObject *t_SimpleFSLockFactory_makeLock(t_SimpleFSLockFactory *self, PyObject *args);

        static PyMethodDef t_SimpleFSLockFactory__methods_[] = {
          DECLARE_METHOD(t_SimpleFSLockFactory, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SimpleFSLockFactory, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SimpleFSLockFactory, clearLock, METH_VARARGS),
          DECLARE_METHOD(t_SimpleFSLockFactory, makeLock, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(SimpleFSLockFactory, t_SimpleFSLockFactory, ::org::apache::lucene::store::FSLockFactory, SimpleFSLockFactory, t_SimpleFSLockFactory_init_, 0, 0, 0, 0, 0);

        void t_SimpleFSLockFactory::install(PyObject *module)
        {
          installType(&PY_TYPE(SimpleFSLockFactory), module, "SimpleFSLockFactory", 0);
        }

        void t_SimpleFSLockFactory::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(SimpleFSLockFactory).tp_dict, "class_", make_descriptor(SimpleFSLockFactory::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(SimpleFSLockFactory).tp_dict, "wrapfn_", make_descriptor(t_SimpleFSLockFactory::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(SimpleFSLockFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_SimpleFSLockFactory_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, SimpleFSLockFactory::initializeClass, 1)))
            return NULL;
          return t_SimpleFSLockFactory::wrap_Object(SimpleFSLockFactory(((t_SimpleFSLockFactory *) arg)->object.this$));
        }
        static PyObject *t_SimpleFSLockFactory_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, SimpleFSLockFactory::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_SimpleFSLockFactory_init_(t_SimpleFSLockFactory *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 0:
            {
              SimpleFSLockFactory object((jobject) NULL);

              INT_CALL(object = SimpleFSLockFactory());
              self->object = object;
              break;
            }
            goto err;
           case 1:
            {
              ::java::lang::String a0((jobject) NULL);
              SimpleFSLockFactory object((jobject) NULL);

              if (!parseArgs(args, "s", &a0))
              {
                INT_CALL(object = SimpleFSLockFactory(a0));
                self->object = object;
                break;
              }
            }
            {
              ::java::io::File a0((jobject) NULL);
              SimpleFSLockFactory object((jobject) NULL);

              if (!parseArgs(args, "k", ::java::io::File::initializeClass, &a0))
              {
                INT_CALL(object = SimpleFSLockFactory(a0));
                self->object = object;
                break;
              }
            }
           default:
           err:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_SimpleFSLockFactory_clearLock(t_SimpleFSLockFactory *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(self->object.clearLock(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(SimpleFSLockFactory), (PyObject *) self, "clearLock", args, 2);
        }

        static PyObject *t_SimpleFSLockFactory_makeLock(t_SimpleFSLockFactory *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::store::Lock result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = self->object.makeLock(a0));
            return ::org::apache::lucene::store::t_Lock::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(SimpleFSLockFactory), (PyObject *) self, "makeLock", args, 2);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/highlight/QueryScorer.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/search/highlight/TextFragment.h"
#include "org/apache/lucene/search/highlight/Scorer.h"
#include "java/lang/String.h"
#include "org/apache/lucene/search/highlight/WeightedSpanTerm.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "org/apache/lucene/search/Query.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace highlight {

          ::java::lang::Class *QueryScorer::class$ = NULL;
          jmethodID *QueryScorer::mids$ = NULL;
          bool QueryScorer::live$ = false;

          jclass QueryScorer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/highlight/QueryScorer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_848b72aa] = env->getMethodID(cls, "<init>", "([Lorg/apache/lucene/search/highlight/WeightedSpanTerm;)V");
              mids$[mid_init$_6e301113] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/Query;)V");
              mids$[mid_init$_036dd355] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/Query;Ljava/lang/String;)V");
              mids$[mid_init$_19eb1b37] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/Query;Ljava/lang/String;Ljava/lang/String;)V");
              mids$[mid_init$_2e1f8bd4] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/Query;Lorg/apache/lucene/index/IndexReader;Ljava/lang/String;)V");
              mids$[mid_init$_b85926ce] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/Query;Lorg/apache/lucene/index/IndexReader;Ljava/lang/String;Ljava/lang/String;)V");
              mids$[mid_getFragmentScore_54c6a176] = env->getMethodID(cls, "getFragmentScore", "()F");
              mids$[mid_getMaxTermWeight_54c6a176] = env->getMethodID(cls, "getMaxTermWeight", "()F");
              mids$[mid_getTokenScore_54c6a176] = env->getMethodID(cls, "getTokenScore", "()F");
              mids$[mid_getWeightedSpanTerm_0ac17355] = env->getMethodID(cls, "getWeightedSpanTerm", "(Ljava/lang/String;)Lorg/apache/lucene/search/highlight/WeightedSpanTerm;");
              mids$[mid_init_a65cd6ab] = env->getMethodID(cls, "init", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/TokenStream;");
              mids$[mid_isExpandMultiTermQuery_54c6a16a] = env->getMethodID(cls, "isExpandMultiTermQuery", "()Z");
              mids$[mid_setExpandMultiTermQuery_bb0c767f] = env->getMethodID(cls, "setExpandMultiTermQuery", "(Z)V");
              mids$[mid_setMaxDocCharsToAnalyze_39c7bd3c] = env->getMethodID(cls, "setMaxDocCharsToAnalyze", "(I)V");
              mids$[mid_setWrapIfNotCachingTokenFilter_bb0c767f] = env->getMethodID(cls, "setWrapIfNotCachingTokenFilter", "(Z)V");
              mids$[mid_startFragment_0335a78a] = env->getMethodID(cls, "startFragment", "(Lorg/apache/lucene/search/highlight/TextFragment;)V");
              mids$[mid_newTermExtractor_109a36a0] = env->getMethodID(cls, "newTermExtractor", "(Ljava/lang/String;)Lorg/apache/lucene/search/highlight/WeightedSpanTermExtractor;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          QueryScorer::QueryScorer(const JArray< ::org::apache::lucene::search::highlight::WeightedSpanTerm > & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_848b72aa, a0.this$)) {}

          QueryScorer::QueryScorer(const ::org::apache::lucene::search::Query & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_6e301113, a0.this$)) {}

          QueryScorer::QueryScorer(const ::org::apache::lucene::search::Query & a0, const ::java::lang::String & a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_036dd355, a0.this$, a1.this$)) {}

          QueryScorer::QueryScorer(const ::org::apache::lucene::search::Query & a0, const ::java::lang::String & a1, const ::java::lang::String & a2) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_19eb1b37, a0.this$, a1.this$, a2.this$)) {}

          QueryScorer::QueryScorer(const ::org::apache::lucene::search::Query & a0, const ::org::apache::lucene::index::IndexReader & a1, const ::java::lang::String & a2) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_2e1f8bd4, a0.this$, a1.this$, a2.this$)) {}

          QueryScorer::QueryScorer(const ::org::apache::lucene::search::Query & a0, const ::org::apache::lucene::index::IndexReader & a1, const ::java::lang::String & a2, const ::java::lang::String & a3) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_b85926ce, a0.this$, a1.this$, a2.this$, a3.this$)) {}

          jfloat QueryScorer::getFragmentScore() const
          {
            return env->callFloatMethod(this$, mids$[mid_getFragmentScore_54c6a176]);
          }

          jfloat QueryScorer::getMaxTermWeight() const
          {
            return env->callFloatMethod(this$, mids$[mid_getMaxTermWeight_54c6a176]);
          }

          jfloat QueryScorer::getTokenScore() const
          {
            return env->callFloatMethod(this$, mids$[mid_getTokenScore_54c6a176]);
          }

          ::org::apache::lucene::search::highlight::WeightedSpanTerm QueryScorer::getWeightedSpanTerm(const ::java::lang::String & a0) const
          {
            return ::org::apache::lucene::search::highlight::WeightedSpanTerm(env->callObjectMethod(this$, mids$[mid_getWeightedSpanTerm_0ac17355], a0.this$));
          }

          ::org::apache::lucene::analysis::TokenStream QueryScorer::init(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::TokenStream(env->callObjectMethod(this$, mids$[mid_init_a65cd6ab], a0.this$));
          }

          jboolean QueryScorer::isExpandMultiTermQuery() const
          {
            return env->callBooleanMethod(this$, mids$[mid_isExpandMultiTermQuery_54c6a16a]);
          }

          void QueryScorer::setExpandMultiTermQuery(jboolean a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setExpandMultiTermQuery_bb0c767f], a0);
          }

          void QueryScorer::setMaxDocCharsToAnalyze(jint a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setMaxDocCharsToAnalyze_39c7bd3c], a0);
          }

          void QueryScorer::setWrapIfNotCachingTokenFilter(jboolean a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setWrapIfNotCachingTokenFilter_bb0c767f], a0);
          }

          void QueryScorer::startFragment(const ::org::apache::lucene::search::highlight::TextFragment & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_startFragment_0335a78a], a0.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace highlight {
          static PyObject *t_QueryScorer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_QueryScorer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_QueryScorer_init_(t_QueryScorer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_QueryScorer_getFragmentScore(t_QueryScorer *self);
          static PyObject *t_QueryScorer_getMaxTermWeight(t_QueryScorer *self);
          static PyObject *t_QueryScorer_getTokenScore(t_QueryScorer *self);
          static PyObject *t_QueryScorer_getWeightedSpanTerm(t_QueryScorer *self, PyObject *arg);
          static PyObject *t_QueryScorer_init(t_QueryScorer *self, PyObject *arg);
          static PyObject *t_QueryScorer_isExpandMultiTermQuery(t_QueryScorer *self);
          static PyObject *t_QueryScorer_setExpandMultiTermQuery(t_QueryScorer *self, PyObject *arg);
          static PyObject *t_QueryScorer_setMaxDocCharsToAnalyze(t_QueryScorer *self, PyObject *arg);
          static PyObject *t_QueryScorer_setWrapIfNotCachingTokenFilter(t_QueryScorer *self, PyObject *arg);
          static PyObject *t_QueryScorer_startFragment(t_QueryScorer *self, PyObject *arg);
          static PyObject *t_QueryScorer_get__expandMultiTermQuery(t_QueryScorer *self, void *data);
          static int t_QueryScorer_set__expandMultiTermQuery(t_QueryScorer *self, PyObject *arg, void *data);
          static PyObject *t_QueryScorer_get__fragmentScore(t_QueryScorer *self, void *data);
          static int t_QueryScorer_set__maxDocCharsToAnalyze(t_QueryScorer *self, PyObject *arg, void *data);
          static PyObject *t_QueryScorer_get__maxTermWeight(t_QueryScorer *self, void *data);
          static PyObject *t_QueryScorer_get__tokenScore(t_QueryScorer *self, void *data);
          static int t_QueryScorer_set__wrapIfNotCachingTokenFilter(t_QueryScorer *self, PyObject *arg, void *data);
          static PyGetSetDef t_QueryScorer__fields_[] = {
            DECLARE_GETSET_FIELD(t_QueryScorer, expandMultiTermQuery),
            DECLARE_GET_FIELD(t_QueryScorer, fragmentScore),
            DECLARE_SET_FIELD(t_QueryScorer, maxDocCharsToAnalyze),
            DECLARE_GET_FIELD(t_QueryScorer, maxTermWeight),
            DECLARE_GET_FIELD(t_QueryScorer, tokenScore),
            DECLARE_SET_FIELD(t_QueryScorer, wrapIfNotCachingTokenFilter),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_QueryScorer__methods_[] = {
            DECLARE_METHOD(t_QueryScorer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_QueryScorer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_QueryScorer, getFragmentScore, METH_NOARGS),
            DECLARE_METHOD(t_QueryScorer, getMaxTermWeight, METH_NOARGS),
            DECLARE_METHOD(t_QueryScorer, getTokenScore, METH_NOARGS),
            DECLARE_METHOD(t_QueryScorer, getWeightedSpanTerm, METH_O),
            DECLARE_METHOD(t_QueryScorer, init, METH_O),
            DECLARE_METHOD(t_QueryScorer, isExpandMultiTermQuery, METH_NOARGS),
            DECLARE_METHOD(t_QueryScorer, setExpandMultiTermQuery, METH_O),
            DECLARE_METHOD(t_QueryScorer, setMaxDocCharsToAnalyze, METH_O),
            DECLARE_METHOD(t_QueryScorer, setWrapIfNotCachingTokenFilter, METH_O),
            DECLARE_METHOD(t_QueryScorer, startFragment, METH_O),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(QueryScorer, t_QueryScorer, ::java::lang::Object, QueryScorer, t_QueryScorer_init_, 0, 0, t_QueryScorer__fields_, 0, 0);

          void t_QueryScorer::install(PyObject *module)
          {
            installType(&PY_TYPE(QueryScorer), module, "QueryScorer", 0);
          }

          void t_QueryScorer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(QueryScorer).tp_dict, "class_", make_descriptor(QueryScorer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(QueryScorer).tp_dict, "wrapfn_", make_descriptor(t_QueryScorer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(QueryScorer).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_QueryScorer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, QueryScorer::initializeClass, 1)))
              return NULL;
            return t_QueryScorer::wrap_Object(QueryScorer(((t_QueryScorer *) arg)->object.this$));
          }
          static PyObject *t_QueryScorer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, QueryScorer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_QueryScorer_init_(t_QueryScorer *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                JArray< ::org::apache::lucene::search::highlight::WeightedSpanTerm > a0((jobject) NULL);
                QueryScorer object((jobject) NULL);

                if (!parseArgs(args, "[k", ::org::apache::lucene::search::highlight::WeightedSpanTerm::initializeClass, &a0))
                {
                  INT_CALL(object = QueryScorer(a0));
                  self->object = object;
                  break;
                }
              }
              {
                ::org::apache::lucene::search::Query a0((jobject) NULL);
                QueryScorer object((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::search::Query::initializeClass, &a0))
                {
                  INT_CALL(object = QueryScorer(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 2:
              {
                ::org::apache::lucene::search::Query a0((jobject) NULL);
                ::java::lang::String a1((jobject) NULL);
                QueryScorer object((jobject) NULL);

                if (!parseArgs(args, "ks", ::org::apache::lucene::search::Query::initializeClass, &a0, &a1))
                {
                  INT_CALL(object = QueryScorer(a0, a1));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 3:
              {
                ::org::apache::lucene::search::Query a0((jobject) NULL);
                ::java::lang::String a1((jobject) NULL);
                ::java::lang::String a2((jobject) NULL);
                QueryScorer object((jobject) NULL);

                if (!parseArgs(args, "kss", ::org::apache::lucene::search::Query::initializeClass, &a0, &a1, &a2))
                {
                  INT_CALL(object = QueryScorer(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
              {
                ::org::apache::lucene::search::Query a0((jobject) NULL);
                ::org::apache::lucene::index::IndexReader a1((jobject) NULL);
                ::java::lang::String a2((jobject) NULL);
                QueryScorer object((jobject) NULL);

                if (!parseArgs(args, "kks", ::org::apache::lucene::search::Query::initializeClass, ::org::apache::lucene::index::IndexReader::initializeClass, &a0, &a1, &a2))
                {
                  INT_CALL(object = QueryScorer(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 4:
              {
                ::org::apache::lucene::search::Query a0((jobject) NULL);
                ::org::apache::lucene::index::IndexReader a1((jobject) NULL);
                ::java::lang::String a2((jobject) NULL);
                ::java::lang::String a3((jobject) NULL);
                QueryScorer object((jobject) NULL);

                if (!parseArgs(args, "kkss", ::org::apache::lucene::search::Query::initializeClass, ::org::apache::lucene::index::IndexReader::initializeClass, &a0, &a1, &a2, &a3))
                {
                  INT_CALL(object = QueryScorer(a0, a1, a2, a3));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_QueryScorer_getFragmentScore(t_QueryScorer *self)
          {
            jfloat result;
            OBJ_CALL(result = self->object.getFragmentScore());
            return PyFloat_FromDouble((double) result);
          }

          static PyObject *t_QueryScorer_getMaxTermWeight(t_QueryScorer *self)
          {
            jfloat result;
            OBJ_CALL(result = self->object.getMaxTermWeight());
            return PyFloat_FromDouble((double) result);
          }

          static PyObject *t_QueryScorer_getTokenScore(t_QueryScorer *self)
          {
            jfloat result;
            OBJ_CALL(result = self->object.getTokenScore());
            return PyFloat_FromDouble((double) result);
          }

          static PyObject *t_QueryScorer_getWeightedSpanTerm(t_QueryScorer *self, PyObject *arg)
          {
            ::java::lang::String a0((jobject) NULL);
            ::org::apache::lucene::search::highlight::WeightedSpanTerm result((jobject) NULL);

            if (!parseArg(arg, "s", &a0))
            {
              OBJ_CALL(result = self->object.getWeightedSpanTerm(a0));
              return ::org::apache::lucene::search::highlight::t_WeightedSpanTerm::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "getWeightedSpanTerm", arg);
            return NULL;
          }

          static PyObject *t_QueryScorer_init(t_QueryScorer *self, PyObject *arg)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::TokenStream result((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.init(a0));
              return ::org::apache::lucene::analysis::t_TokenStream::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "init", arg);
            return NULL;
          }

          static PyObject *t_QueryScorer_isExpandMultiTermQuery(t_QueryScorer *self)
          {
            jboolean result;
            OBJ_CALL(result = self->object.isExpandMultiTermQuery());
            Py_RETURN_BOOL(result);
          }

          static PyObject *t_QueryScorer_setExpandMultiTermQuery(t_QueryScorer *self, PyObject *arg)
          {
            jboolean a0;

            if (!parseArg(arg, "Z", &a0))
            {
              OBJ_CALL(self->object.setExpandMultiTermQuery(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setExpandMultiTermQuery", arg);
            return NULL;
          }

          static PyObject *t_QueryScorer_setMaxDocCharsToAnalyze(t_QueryScorer *self, PyObject *arg)
          {
            jint a0;

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(self->object.setMaxDocCharsToAnalyze(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setMaxDocCharsToAnalyze", arg);
            return NULL;
          }

          static PyObject *t_QueryScorer_setWrapIfNotCachingTokenFilter(t_QueryScorer *self, PyObject *arg)
          {
            jboolean a0;

            if (!parseArg(arg, "Z", &a0))
            {
              OBJ_CALL(self->object.setWrapIfNotCachingTokenFilter(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setWrapIfNotCachingTokenFilter", arg);
            return NULL;
          }

          static PyObject *t_QueryScorer_startFragment(t_QueryScorer *self, PyObject *arg)
          {
            ::org::apache::lucene::search::highlight::TextFragment a0((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::search::highlight::TextFragment::initializeClass, &a0))
            {
              OBJ_CALL(self->object.startFragment(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "startFragment", arg);
            return NULL;
          }

          static PyObject *t_QueryScorer_get__expandMultiTermQuery(t_QueryScorer *self, void *data)
          {
            jboolean value;
            OBJ_CALL(value = self->object.isExpandMultiTermQuery());
            Py_RETURN_BOOL(value);
          }
          static int t_QueryScorer_set__expandMultiTermQuery(t_QueryScorer *self, PyObject *arg, void *data)
          {
            {
              jboolean value;
              if (!parseArg(arg, "Z", &value))
              {
                INT_CALL(self->object.setExpandMultiTermQuery(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "expandMultiTermQuery", arg);
            return -1;
          }

          static PyObject *t_QueryScorer_get__fragmentScore(t_QueryScorer *self, void *data)
          {
            jfloat value;
            OBJ_CALL(value = self->object.getFragmentScore());
            return PyFloat_FromDouble((double) value);
          }

          static int t_QueryScorer_set__maxDocCharsToAnalyze(t_QueryScorer *self, PyObject *arg, void *data)
          {
            {
              jint value;
              if (!parseArg(arg, "I", &value))
              {
                INT_CALL(self->object.setMaxDocCharsToAnalyze(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "maxDocCharsToAnalyze", arg);
            return -1;
          }

          static PyObject *t_QueryScorer_get__maxTermWeight(t_QueryScorer *self, void *data)
          {
            jfloat value;
            OBJ_CALL(value = self->object.getMaxTermWeight());
            return PyFloat_FromDouble((double) value);
          }

          static PyObject *t_QueryScorer_get__tokenScore(t_QueryScorer *self, void *data)
          {
            jfloat value;
            OBJ_CALL(value = self->object.getTokenScore());
            return PyFloat_FromDouble((double) value);
          }

          static int t_QueryScorer_set__wrapIfNotCachingTokenFilter(t_QueryScorer *self, PyObject *arg, void *data)
          {
            {
              jboolean value;
              if (!parseArg(arg, "Z", &value))
              {
                INT_CALL(self->object.setWrapIfNotCachingTokenFilter(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "wrapIfNotCachingTokenFilter", arg);
            return -1;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/AttributeReflector.h"
#include "org/apache/lucene/util/Attribute.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *AttributeReflector::class$ = NULL;
        jmethodID *AttributeReflector::mids$ = NULL;
        bool AttributeReflector::live$ = false;

        jclass AttributeReflector::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/AttributeReflector");

            mids$ = new jmethodID[max_mid];
            mids$[mid_reflect_6dbf9802] = env->getMethodID(cls, "reflect", "(Ljava/lang/Class;Ljava/lang/String;Ljava/lang/Object;)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        void AttributeReflector::reflect(const ::java::lang::Class & a0, const ::java::lang::String & a1, const ::java::lang::Object & a2) const
        {
          env->callVoidMethod(this$, mids$[mid_reflect_6dbf9802], a0.this$, a1.this$, a2.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_AttributeReflector_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_AttributeReflector_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_AttributeReflector_reflect(t_AttributeReflector *self, PyObject *args);

        static PyMethodDef t_AttributeReflector__methods_[] = {
          DECLARE_METHOD(t_AttributeReflector, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_AttributeReflector, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_AttributeReflector, reflect, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(AttributeReflector, t_AttributeReflector, ::java::lang::Object, AttributeReflector, abstract_init, 0, 0, 0, 0, 0);

        void t_AttributeReflector::install(PyObject *module)
        {
          installType(&PY_TYPE(AttributeReflector), module, "AttributeReflector", 0);
        }

        void t_AttributeReflector::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(AttributeReflector).tp_dict, "class_", make_descriptor(AttributeReflector::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(AttributeReflector).tp_dict, "wrapfn_", make_descriptor(t_AttributeReflector::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(AttributeReflector).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_AttributeReflector_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, AttributeReflector::initializeClass, 1)))
            return NULL;
          return t_AttributeReflector::wrap_Object(AttributeReflector(((t_AttributeReflector *) arg)->object.this$));
        }
        static PyObject *t_AttributeReflector_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, AttributeReflector::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_AttributeReflector_reflect(t_AttributeReflector *self, PyObject *args)
        {
          ::java::lang::Class a0((jobject) NULL);
          PyTypeObject **p0;
          ::java::lang::String a1((jobject) NULL);
          ::java::lang::Object a2((jobject) NULL);

          if (!parseArgs(args, "Kso", ::java::lang::Class::initializeClass, &a0, &p0, ::java::lang::t_Class::parameters_, &a1, &a2))
          {
            OBJ_CALL(self->object.reflect(a0, a1, a2));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "reflect", args);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/cz/CzechStemmer.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace cz {

          ::java::lang::Class *CzechStemmer::class$ = NULL;
          jmethodID *CzechStemmer::mids$ = NULL;
          bool CzechStemmer::live$ = false;

          jclass CzechStemmer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/cz/CzechStemmer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_stem_ec6430eb] = env->getMethodID(cls, "stem", "([CI)I");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          CzechStemmer::CzechStemmer() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          jint CzechStemmer::stem(const JArray< jchar > & a0, jint a1) const
          {
            return env->callIntMethod(this$, mids$[mid_stem_ec6430eb], a0.this$, a1);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace cz {
          static PyObject *t_CzechStemmer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_CzechStemmer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_CzechStemmer_init_(t_CzechStemmer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_CzechStemmer_stem(t_CzechStemmer *self, PyObject *args);

          static PyMethodDef t_CzechStemmer__methods_[] = {
            DECLARE_METHOD(t_CzechStemmer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CzechStemmer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CzechStemmer, stem, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(CzechStemmer, t_CzechStemmer, ::java::lang::Object, CzechStemmer, t_CzechStemmer_init_, 0, 0, 0, 0, 0);

          void t_CzechStemmer::install(PyObject *module)
          {
            installType(&PY_TYPE(CzechStemmer), module, "CzechStemmer", 0);
          }

          void t_CzechStemmer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(CzechStemmer).tp_dict, "class_", make_descriptor(CzechStemmer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(CzechStemmer).tp_dict, "wrapfn_", make_descriptor(t_CzechStemmer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(CzechStemmer).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_CzechStemmer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, CzechStemmer::initializeClass, 1)))
              return NULL;
            return t_CzechStemmer::wrap_Object(CzechStemmer(((t_CzechStemmer *) arg)->object.this$));
          }
          static PyObject *t_CzechStemmer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, CzechStemmer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_CzechStemmer_init_(t_CzechStemmer *self, PyObject *args, PyObject *kwds)
          {
            CzechStemmer object((jobject) NULL);

            INT_CALL(object = CzechStemmer());
            self->object = object;

            return 0;
          }

          static PyObject *t_CzechStemmer_stem(t_CzechStemmer *self, PyObject *args)
          {
            JArray< jchar > a0((jobject) NULL);
            jint a1;
            jint result;

            if (!parseArgs(args, "[CI", &a0, &a1))
            {
              OBJ_CALL(result = self->object.stem(a0, a1));
              return PyInt_FromLong((long) result);
            }

            PyErr_SetArgsError((PyObject *) self, "stem", args);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/tartarus/snowball/ext/FrenchStemmer.h"
#include "java/lang/Object.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace tartarus {
    namespace snowball {
      namespace ext {

        ::java::lang::Class *FrenchStemmer::class$ = NULL;
        jmethodID *FrenchStemmer::mids$ = NULL;
        bool FrenchStemmer::live$ = false;

        jclass FrenchStemmer::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/tartarus/snowball/ext/FrenchStemmer");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
            mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
            mids$[mid_stem_54c6a16a] = env->getMethodID(cls, "stem", "()Z");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        FrenchStemmer::FrenchStemmer() : ::org::tartarus::snowball::SnowballProgram(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        jboolean FrenchStemmer::equals(const ::java::lang::Object & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
        }

        jint FrenchStemmer::hashCode() const
        {
          return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
        }

        jboolean FrenchStemmer::stem() const
        {
          return env->callBooleanMethod(this$, mids$[mid_stem_54c6a16a]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace tartarus {
    namespace snowball {
      namespace ext {
        static PyObject *t_FrenchStemmer_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FrenchStemmer_instance_(PyTypeObject *type, PyObject *arg);
        static int t_FrenchStemmer_init_(t_FrenchStemmer *self, PyObject *args, PyObject *kwds);
        static PyObject *t_FrenchStemmer_equals(t_FrenchStemmer *self, PyObject *args);
        static PyObject *t_FrenchStemmer_hashCode(t_FrenchStemmer *self, PyObject *args);
        static PyObject *t_FrenchStemmer_stem(t_FrenchStemmer *self, PyObject *args);

        static PyMethodDef t_FrenchStemmer__methods_[] = {
          DECLARE_METHOD(t_FrenchStemmer, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FrenchStemmer, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FrenchStemmer, equals, METH_VARARGS),
          DECLARE_METHOD(t_FrenchStemmer, hashCode, METH_VARARGS),
          DECLARE_METHOD(t_FrenchStemmer, stem, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(FrenchStemmer, t_FrenchStemmer, ::org::tartarus::snowball::SnowballProgram, FrenchStemmer, t_FrenchStemmer_init_, 0, 0, 0, 0, 0);

        void t_FrenchStemmer::install(PyObject *module)
        {
          installType(&PY_TYPE(FrenchStemmer), module, "FrenchStemmer", 0);
        }

        void t_FrenchStemmer::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(FrenchStemmer).tp_dict, "class_", make_descriptor(FrenchStemmer::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(FrenchStemmer).tp_dict, "wrapfn_", make_descriptor(t_FrenchStemmer::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(FrenchStemmer).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_FrenchStemmer_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, FrenchStemmer::initializeClass, 1)))
            return NULL;
          return t_FrenchStemmer::wrap_Object(FrenchStemmer(((t_FrenchStemmer *) arg)->object.this$));
        }
        static PyObject *t_FrenchStemmer_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, FrenchStemmer::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_FrenchStemmer_init_(t_FrenchStemmer *self, PyObject *args, PyObject *kwds)
        {
          FrenchStemmer object((jobject) NULL);

          INT_CALL(object = FrenchStemmer());
          self->object = object;

          return 0;
        }

        static PyObject *t_FrenchStemmer_equals(t_FrenchStemmer *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.equals(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(FrenchStemmer), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_FrenchStemmer_hashCode(t_FrenchStemmer *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hashCode());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(FrenchStemmer), (PyObject *) self, "hashCode", args, 2);
        }

        static PyObject *t_FrenchStemmer_stem(t_FrenchStemmer *self, PyObject *args)
        {
          jboolean result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.stem());
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(FrenchStemmer), (PyObject *) self, "stem", args, 2);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/facet/taxonomy/TaxonomyWriter.h"
#include "java/lang/Class.h"
#include "java/util/Map.h"
#include "org/apache/lucene/facet/taxonomy/FacetLabel.h"
#include "java/lang/String.h"
#include "org/apache/lucene/index/TwoPhaseCommit.h"
#include "java/io/IOException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace taxonomy {

          ::java::lang::Class *TaxonomyWriter::class$ = NULL;
          jmethodID *TaxonomyWriter::mids$ = NULL;
          bool TaxonomyWriter::live$ = false;

          jclass TaxonomyWriter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/facet/taxonomy/TaxonomyWriter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_addCategory_283f83f5] = env->getMethodID(cls, "addCategory", "(Lorg/apache/lucene/facet/taxonomy/FacetLabel;)I");
              mids$[mid_getCommitData_db60befd] = env->getMethodID(cls, "getCommitData", "()Ljava/util/Map;");
              mids$[mid_getParent_39c7bd23] = env->getMethodID(cls, "getParent", "(I)I");
              mids$[mid_getSize_54c6a179] = env->getMethodID(cls, "getSize", "()I");
              mids$[mid_setCommitData_4c9e2b1c] = env->getMethodID(cls, "setCommitData", "(Ljava/util/Map;)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          jint TaxonomyWriter::addCategory(const ::org::apache::lucene::facet::taxonomy::FacetLabel & a0) const
          {
            return env->callIntMethod(this$, mids$[mid_addCategory_283f83f5], a0.this$);
          }

          ::java::util::Map TaxonomyWriter::getCommitData() const
          {
            return ::java::util::Map(env->callObjectMethod(this$, mids$[mid_getCommitData_db60befd]));
          }

          jint TaxonomyWriter::getParent(jint a0) const
          {
            return env->callIntMethod(this$, mids$[mid_getParent_39c7bd23], a0);
          }

          jint TaxonomyWriter::getSize() const
          {
            return env->callIntMethod(this$, mids$[mid_getSize_54c6a179]);
          }

          void TaxonomyWriter::setCommitData(const ::java::util::Map & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setCommitData_4c9e2b1c], a0.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace taxonomy {
          static PyObject *t_TaxonomyWriter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_TaxonomyWriter_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_TaxonomyWriter_addCategory(t_TaxonomyWriter *self, PyObject *arg);
          static PyObject *t_TaxonomyWriter_getCommitData(t_TaxonomyWriter *self);
          static PyObject *t_TaxonomyWriter_getParent(t_TaxonomyWriter *self, PyObject *arg);
          static PyObject *t_TaxonomyWriter_getSize(t_TaxonomyWriter *self);
          static PyObject *t_TaxonomyWriter_setCommitData(t_TaxonomyWriter *self, PyObject *arg);
          static PyObject *t_TaxonomyWriter_get__commitData(t_TaxonomyWriter *self, void *data);
          static int t_TaxonomyWriter_set__commitData(t_TaxonomyWriter *self, PyObject *arg, void *data);
          static PyObject *t_TaxonomyWriter_get__size(t_TaxonomyWriter *self, void *data);
          static PyGetSetDef t_TaxonomyWriter__fields_[] = {
            DECLARE_GETSET_FIELD(t_TaxonomyWriter, commitData),
            DECLARE_GET_FIELD(t_TaxonomyWriter, size),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_TaxonomyWriter__methods_[] = {
            DECLARE_METHOD(t_TaxonomyWriter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_TaxonomyWriter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_TaxonomyWriter, addCategory, METH_O),
            DECLARE_METHOD(t_TaxonomyWriter, getCommitData, METH_NOARGS),
            DECLARE_METHOD(t_TaxonomyWriter, getParent, METH_O),
            DECLARE_METHOD(t_TaxonomyWriter, getSize, METH_NOARGS),
            DECLARE_METHOD(t_TaxonomyWriter, setCommitData, METH_O),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(TaxonomyWriter, t_TaxonomyWriter, ::java::io::Closeable, TaxonomyWriter, abstract_init, 0, 0, t_TaxonomyWriter__fields_, 0, 0);

          void t_TaxonomyWriter::install(PyObject *module)
          {
            installType(&PY_TYPE(TaxonomyWriter), module, "TaxonomyWriter", 0);
          }

          void t_TaxonomyWriter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(TaxonomyWriter).tp_dict, "class_", make_descriptor(TaxonomyWriter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(TaxonomyWriter).tp_dict, "wrapfn_", make_descriptor(t_TaxonomyWriter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(TaxonomyWriter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_TaxonomyWriter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, TaxonomyWriter::initializeClass, 1)))
              return NULL;
            return t_TaxonomyWriter::wrap_Object(TaxonomyWriter(((t_TaxonomyWriter *) arg)->object.this$));
          }
          static PyObject *t_TaxonomyWriter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, TaxonomyWriter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_TaxonomyWriter_addCategory(t_TaxonomyWriter *self, PyObject *arg)
          {
            ::org::apache::lucene::facet::taxonomy::FacetLabel a0((jobject) NULL);
            jint result;

            if (!parseArg(arg, "k", ::org::apache::lucene::facet::taxonomy::FacetLabel::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.addCategory(a0));
              return PyInt_FromLong((long) result);
            }

            PyErr_SetArgsError((PyObject *) self, "addCategory", arg);
            return NULL;
          }

          static PyObject *t_TaxonomyWriter_getCommitData(t_TaxonomyWriter *self)
          {
            ::java::util::Map result((jobject) NULL);
            OBJ_CALL(result = self->object.getCommitData());
            return ::java::util::t_Map::wrap_Object(result, &::java::lang::PY_TYPE(String), &::java::lang::PY_TYPE(String));
          }

          static PyObject *t_TaxonomyWriter_getParent(t_TaxonomyWriter *self, PyObject *arg)
          {
            jint a0;
            jint result;

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(result = self->object.getParent(a0));
              return PyInt_FromLong((long) result);
            }

            PyErr_SetArgsError((PyObject *) self, "getParent", arg);
            return NULL;
          }

          static PyObject *t_TaxonomyWriter_getSize(t_TaxonomyWriter *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getSize());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_TaxonomyWriter_setCommitData(t_TaxonomyWriter *self, PyObject *arg)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;

            if (!parseArg(arg, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              OBJ_CALL(self->object.setCommitData(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setCommitData", arg);
            return NULL;
          }

          static PyObject *t_TaxonomyWriter_get__commitData(t_TaxonomyWriter *self, void *data)
          {
            ::java::util::Map value((jobject) NULL);
            OBJ_CALL(value = self->object.getCommitData());
            return ::java::util::t_Map::wrap_Object(value);
          }
          static int t_TaxonomyWriter_set__commitData(t_TaxonomyWriter *self, PyObject *arg, void *data)
          {
            {
              ::java::util::Map value((jobject) NULL);
              if (!parseArg(arg, "k", ::java::util::Map::initializeClass, &value))
              {
                INT_CALL(self->object.setCommitData(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "commitData", arg);
            return -1;
          }

          static PyObject *t_TaxonomyWriter_get__size(t_TaxonomyWriter *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getSize());
            return PyInt_FromLong((long) value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/FilteredTermsEnum.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "org/apache/lucene/util/Bits.h"
#include "org/apache/lucene/index/TermsEnum$SeekStatus.h"
#include "java/lang/Class.h"
#include "java/util/Comparator.h"
#include "org/apache/lucene/util/AttributeSource.h"
#include "org/apache/lucene/index/DocsAndPositionsEnum.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/index/TermState.h"
#include "org/apache/lucene/index/DocsEnum.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *FilteredTermsEnum::class$ = NULL;
        jmethodID *FilteredTermsEnum::mids$ = NULL;
        bool FilteredTermsEnum::live$ = false;

        jclass FilteredTermsEnum::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/FilteredTermsEnum");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_0f660bfe] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/TermsEnum;)V");
            mids$[mid_init$_3c71de47] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/TermsEnum;Z)V");
            mids$[mid_attributes_f901022b] = env->getMethodID(cls, "attributes", "()Lorg/apache/lucene/util/AttributeSource;");
            mids$[mid_docFreq_54c6a179] = env->getMethodID(cls, "docFreq", "()I");
            mids$[mid_docs_e6d4c3ef] = env->getMethodID(cls, "docs", "(Lorg/apache/lucene/util/Bits;Lorg/apache/lucene/index/DocsEnum;I)Lorg/apache/lucene/index/DocsEnum;");
            mids$[mid_docsAndPositions_b5d9c11b] = env->getMethodID(cls, "docsAndPositions", "(Lorg/apache/lucene/util/Bits;Lorg/apache/lucene/index/DocsAndPositionsEnum;I)Lorg/apache/lucene/index/DocsAndPositionsEnum;");
            mids$[mid_getComparator_5a7ff2fc] = env->getMethodID(cls, "getComparator", "()Ljava/util/Comparator;");
            mids$[mid_next_4ae19461] = env->getMethodID(cls, "next", "()Lorg/apache/lucene/util/BytesRef;");
            mids$[mid_ord_54c6a17a] = env->getMethodID(cls, "ord", "()J");
            mids$[mid_seekCeil_fa9d72c4] = env->getMethodID(cls, "seekCeil", "(Lorg/apache/lucene/util/BytesRef;)Lorg/apache/lucene/index/TermsEnum$SeekStatus;");
            mids$[mid_seekExact_7bc03dc8] = env->getMethodID(cls, "seekExact", "(Lorg/apache/lucene/util/BytesRef;)Z");
            mids$[mid_seekExact_0ee6df2f] = env->getMethodID(cls, "seekExact", "(J)V");
            mids$[mid_seekExact_fe46da51] = env->getMethodID(cls, "seekExact", "(Lorg/apache/lucene/util/BytesRef;Lorg/apache/lucene/index/TermState;)V");
            mids$[mid_term_4ae19461] = env->getMethodID(cls, "term", "()Lorg/apache/lucene/util/BytesRef;");
            mids$[mid_termState_3e41fede] = env->getMethodID(cls, "termState", "()Lorg/apache/lucene/index/TermState;");
            mids$[mid_totalTermFreq_54c6a17a] = env->getMethodID(cls, "totalTermFreq", "()J");
            mids$[mid_accept_30bc08e1] = env->getMethodID(cls, "accept", "(Lorg/apache/lucene/util/BytesRef;)Lorg/apache/lucene/index/FilteredTermsEnum$AcceptStatus;");
            mids$[mid_nextSeekTerm_21e43cb7] = env->getMethodID(cls, "nextSeekTerm", "(Lorg/apache/lucene/util/BytesRef;)Lorg/apache/lucene/util/BytesRef;");
            mids$[mid_setInitialSeekTerm_7bc03dc4] = env->getMethodID(cls, "setInitialSeekTerm", "(Lorg/apache/lucene/util/BytesRef;)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        FilteredTermsEnum::FilteredTermsEnum(const ::org::apache::lucene::index::TermsEnum & a0) : ::org::apache::lucene::index::TermsEnum(env->newObject(initializeClass, &mids$, mid_init$_0f660bfe, a0.this$)) {}

        FilteredTermsEnum::FilteredTermsEnum(const ::org::apache::lucene::index::TermsEnum & a0, jboolean a1) : ::org::apache::lucene::index::TermsEnum(env->newObject(initializeClass, &mids$, mid_init$_3c71de47, a0.this$, a1)) {}

        ::org::apache::lucene::util::AttributeSource FilteredTermsEnum::attributes() const
        {
          return ::org::apache::lucene::util::AttributeSource(env->callObjectMethod(this$, mids$[mid_attributes_f901022b]));
        }

        jint FilteredTermsEnum::docFreq() const
        {
          return env->callIntMethod(this$, mids$[mid_docFreq_54c6a179]);
        }

        ::org::apache::lucene::index::DocsEnum FilteredTermsEnum::docs(const ::org::apache::lucene::util::Bits & a0, const ::org::apache::lucene::index::DocsEnum & a1, jint a2) const
        {
          return ::org::apache::lucene::index::DocsEnum(env->callObjectMethod(this$, mids$[mid_docs_e6d4c3ef], a0.this$, a1.this$, a2));
        }

        ::org::apache::lucene::index::DocsAndPositionsEnum FilteredTermsEnum::docsAndPositions(const ::org::apache::lucene::util::Bits & a0, const ::org::apache::lucene::index::DocsAndPositionsEnum & a1, jint a2) const
        {
          return ::org::apache::lucene::index::DocsAndPositionsEnum(env->callObjectMethod(this$, mids$[mid_docsAndPositions_b5d9c11b], a0.this$, a1.this$, a2));
        }

        ::java::util::Comparator FilteredTermsEnum::getComparator() const
        {
          return ::java::util::Comparator(env->callObjectMethod(this$, mids$[mid_getComparator_5a7ff2fc]));
        }

        ::org::apache::lucene::util::BytesRef FilteredTermsEnum::next() const
        {
          return ::org::apache::lucene::util::BytesRef(env->callObjectMethod(this$, mids$[mid_next_4ae19461]));
        }

        jlong FilteredTermsEnum::ord() const
        {
          return env->callLongMethod(this$, mids$[mid_ord_54c6a17a]);
        }

        ::org::apache::lucene::index::TermsEnum$SeekStatus FilteredTermsEnum::seekCeil(const ::org::apache::lucene::util::BytesRef & a0) const
        {
          return ::org::apache::lucene::index::TermsEnum$SeekStatus(env->callObjectMethod(this$, mids$[mid_seekCeil_fa9d72c4], a0.this$));
        }

        jboolean FilteredTermsEnum::seekExact(const ::org::apache::lucene::util::BytesRef & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_seekExact_7bc03dc8], a0.this$);
        }

        void FilteredTermsEnum::seekExact(jlong a0) const
        {
          env->callVoidMethod(this$, mids$[mid_seekExact_0ee6df2f], a0);
        }

        void FilteredTermsEnum::seekExact(const ::org::apache::lucene::util::BytesRef & a0, const ::org::apache::lucene::index::TermState & a1) const
        {
          env->callVoidMethod(this$, mids$[mid_seekExact_fe46da51], a0.this$, a1.this$);
        }

        ::org::apache::lucene::util::BytesRef FilteredTermsEnum::term() const
        {
          return ::org::apache::lucene::util::BytesRef(env->callObjectMethod(this$, mids$[mid_term_4ae19461]));
        }

        ::org::apache::lucene::index::TermState FilteredTermsEnum::termState() const
        {
          return ::org::apache::lucene::index::TermState(env->callObjectMethod(this$, mids$[mid_termState_3e41fede]));
        }

        jlong FilteredTermsEnum::totalTermFreq() const
        {
          return env->callLongMethod(this$, mids$[mid_totalTermFreq_54c6a17a]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_FilteredTermsEnum_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FilteredTermsEnum_instance_(PyTypeObject *type, PyObject *arg);
        static int t_FilteredTermsEnum_init_(t_FilteredTermsEnum *self, PyObject *args, PyObject *kwds);
        static PyObject *t_FilteredTermsEnum_attributes(t_FilteredTermsEnum *self, PyObject *args);
        static PyObject *t_FilteredTermsEnum_docFreq(t_FilteredTermsEnum *self, PyObject *args);
        static PyObject *t_FilteredTermsEnum_docs(t_FilteredTermsEnum *self, PyObject *args);
        static PyObject *t_FilteredTermsEnum_docsAndPositions(t_FilteredTermsEnum *self, PyObject *args);
        static PyObject *t_FilteredTermsEnum_getComparator(t_FilteredTermsEnum *self, PyObject *args);
        static PyObject *t_FilteredTermsEnum_next(t_FilteredTermsEnum *self, PyObject *args);
        static PyObject *t_FilteredTermsEnum_ord(t_FilteredTermsEnum *self, PyObject *args);
        static PyObject *t_FilteredTermsEnum_seekCeil(t_FilteredTermsEnum *self, PyObject *args);
        static PyObject *t_FilteredTermsEnum_seekExact(t_FilteredTermsEnum *self, PyObject *args);
        static PyObject *t_FilteredTermsEnum_term(t_FilteredTermsEnum *self, PyObject *args);
        static PyObject *t_FilteredTermsEnum_termState(t_FilteredTermsEnum *self, PyObject *args);
        static PyObject *t_FilteredTermsEnum_totalTermFreq(t_FilteredTermsEnum *self, PyObject *args);
        static PyObject *t_FilteredTermsEnum_get__comparator(t_FilteredTermsEnum *self, void *data);
        static PyGetSetDef t_FilteredTermsEnum__fields_[] = {
          DECLARE_GET_FIELD(t_FilteredTermsEnum, comparator),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_FilteredTermsEnum__methods_[] = {
          DECLARE_METHOD(t_FilteredTermsEnum, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FilteredTermsEnum, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FilteredTermsEnum, attributes, METH_VARARGS),
          DECLARE_METHOD(t_FilteredTermsEnum, docFreq, METH_VARARGS),
          DECLARE_METHOD(t_FilteredTermsEnum, docs, METH_VARARGS),
          DECLARE_METHOD(t_FilteredTermsEnum, docsAndPositions, METH_VARARGS),
          DECLARE_METHOD(t_FilteredTermsEnum, getComparator, METH_VARARGS),
          DECLARE_METHOD(t_FilteredTermsEnum, next, METH_VARARGS),
          DECLARE_METHOD(t_FilteredTermsEnum, ord, METH_VARARGS),
          DECLARE_METHOD(t_FilteredTermsEnum, seekCeil, METH_VARARGS),
          DECLARE_METHOD(t_FilteredTermsEnum, seekExact, METH_VARARGS),
          DECLARE_METHOD(t_FilteredTermsEnum, term, METH_VARARGS),
          DECLARE_METHOD(t_FilteredTermsEnum, termState, METH_VARARGS),
          DECLARE_METHOD(t_FilteredTermsEnum, totalTermFreq, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(FilteredTermsEnum, t_FilteredTermsEnum, ::org::apache::lucene::index::TermsEnum, FilteredTermsEnum, t_FilteredTermsEnum_init_, PyObject_SelfIter, ((PyObject *(*)(t_FilteredTermsEnum *)) get_next< t_FilteredTermsEnum,::org::apache::lucene::util::t_BytesRef,::org::apache::lucene::util::BytesRef >), t_FilteredTermsEnum__fields_, 0, 0);

        void t_FilteredTermsEnum::install(PyObject *module)
        {
          installType(&PY_TYPE(FilteredTermsEnum), module, "FilteredTermsEnum", 0);
        }

        void t_FilteredTermsEnum::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(FilteredTermsEnum).tp_dict, "class_", make_descriptor(FilteredTermsEnum::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(FilteredTermsEnum).tp_dict, "wrapfn_", make_descriptor(t_FilteredTermsEnum::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(FilteredTermsEnum).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_FilteredTermsEnum_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, FilteredTermsEnum::initializeClass, 1)))
            return NULL;
          return t_FilteredTermsEnum::wrap_Object(FilteredTermsEnum(((t_FilteredTermsEnum *) arg)->object.this$));
        }
        static PyObject *t_FilteredTermsEnum_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, FilteredTermsEnum::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_FilteredTermsEnum_init_(t_FilteredTermsEnum *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              ::org::apache::lucene::index::TermsEnum a0((jobject) NULL);
              FilteredTermsEnum object((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::index::TermsEnum::initializeClass, &a0))
              {
                INT_CALL(object = FilteredTermsEnum(a0));
                self->object = object;
                break;
              }
            }
            goto err;
           case 2:
            {
              ::org::apache::lucene::index::TermsEnum a0((jobject) NULL);
              jboolean a1;
              FilteredTermsEnum object((jobject) NULL);

              if (!parseArgs(args, "kZ", ::org::apache::lucene::index::TermsEnum::initializeClass, &a0, &a1))
              {
                INT_CALL(object = FilteredTermsEnum(a0, a1));
                self->object = object;
                break;
              }
            }
           default:
           err:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_FilteredTermsEnum_attributes(t_FilteredTermsEnum *self, PyObject *args)
        {
          ::org::apache::lucene::util::AttributeSource result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.attributes());
            return ::org::apache::lucene::util::t_AttributeSource::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(FilteredTermsEnum), (PyObject *) self, "attributes", args, 2);
        }

        static PyObject *t_FilteredTermsEnum_docFreq(t_FilteredTermsEnum *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.docFreq());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(FilteredTermsEnum), (PyObject *) self, "docFreq", args, 2);
        }

        static PyObject *t_FilteredTermsEnum_docs(t_FilteredTermsEnum *self, PyObject *args)
        {
          ::org::apache::lucene::util::Bits a0((jobject) NULL);
          ::org::apache::lucene::index::DocsEnum a1((jobject) NULL);
          jint a2;
          ::org::apache::lucene::index::DocsEnum result((jobject) NULL);

          if (!parseArgs(args, "kkI", ::org::apache::lucene::util::Bits::initializeClass, ::org::apache::lucene::index::DocsEnum::initializeClass, &a0, &a1, &a2))
          {
            OBJ_CALL(result = self->object.docs(a0, a1, a2));
            return ::org::apache::lucene::index::t_DocsEnum::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(FilteredTermsEnum), (PyObject *) self, "docs", args, 2);
        }

        static PyObject *t_FilteredTermsEnum_docsAndPositions(t_FilteredTermsEnum *self, PyObject *args)
        {
          ::org::apache::lucene::util::Bits a0((jobject) NULL);
          ::org::apache::lucene::index::DocsAndPositionsEnum a1((jobject) NULL);
          jint a2;
          ::org::apache::lucene::index::DocsAndPositionsEnum result((jobject) NULL);

          if (!parseArgs(args, "kkI", ::org::apache::lucene::util::Bits::initializeClass, ::org::apache::lucene::index::DocsAndPositionsEnum::initializeClass, &a0, &a1, &a2))
          {
            OBJ_CALL(result = self->object.docsAndPositions(a0, a1, a2));
            return ::org::apache::lucene::index::t_DocsAndPositionsEnum::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(FilteredTermsEnum), (PyObject *) self, "docsAndPositions", args, 2);
        }

        static PyObject *t_FilteredTermsEnum_getComparator(t_FilteredTermsEnum *self, PyObject *args)
        {
          ::java::util::Comparator result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.getComparator());
            return ::java::util::t_Comparator::wrap_Object(result, &::org::apache::lucene::util::PY_TYPE(BytesRef));
          }

          return callSuper(&PY_TYPE(FilteredTermsEnum), (PyObject *) self, "getComparator", args, 2);
        }

        static PyObject *t_FilteredTermsEnum_next(t_FilteredTermsEnum *self, PyObject *args)
        {
          ::org::apache::lucene::util::BytesRef result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.next());
            return ::org::apache::lucene::util::t_BytesRef::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(FilteredTermsEnum), (PyObject *) self, "next", args, 2);
        }

        static PyObject *t_FilteredTermsEnum_ord(t_FilteredTermsEnum *self, PyObject *args)
        {
          jlong result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.ord());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          return callSuper(&PY_TYPE(FilteredTermsEnum), (PyObject *) self, "ord", args, 2);
        }

        static PyObject *t_FilteredTermsEnum_seekCeil(t_FilteredTermsEnum *self, PyObject *args)
        {
          ::org::apache::lucene::util::BytesRef a0((jobject) NULL);
          ::org::apache::lucene::index::TermsEnum$SeekStatus result((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::util::BytesRef::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.seekCeil(a0));
            return ::org::apache::lucene::index::t_TermsEnum$SeekStatus::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(FilteredTermsEnum), (PyObject *) self, "seekCeil", args, 2);
        }

        static PyObject *t_FilteredTermsEnum_seekExact(t_FilteredTermsEnum *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              ::org::apache::lucene::util::BytesRef a0((jobject) NULL);
              jboolean result;

              if (!parseArgs(args, "k", ::org::apache::lucene::util::BytesRef::initializeClass, &a0))
              {
                OBJ_CALL(result = self->object.seekExact(a0));
                Py_RETURN_BOOL(result);
              }
            }
            {
              jlong a0;

              if (!parseArgs(args, "J", &a0))
              {
                OBJ_CALL(self->object.seekExact(a0));
                Py_RETURN_NONE;
              }
            }
            break;
           case 2:
            {
              ::org::apache::lucene::util::BytesRef a0((jobject) NULL);
              ::org::apache::lucene::index::TermState a1((jobject) NULL);

              if (!parseArgs(args, "kk", ::org::apache::lucene::util::BytesRef::initializeClass, ::org::apache::lucene::index::TermState::initializeClass, &a0, &a1))
              {
                OBJ_CALL(self->object.seekExact(a0, a1));
                Py_RETURN_NONE;
              }
            }
          }

          return callSuper(&PY_TYPE(FilteredTermsEnum), (PyObject *) self, "seekExact", args, 2);
        }

        static PyObject *t_FilteredTermsEnum_term(t_FilteredTermsEnum *self, PyObject *args)
        {
          ::org::apache::lucene::util::BytesRef result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.term());
            return ::org::apache::lucene::util::t_BytesRef::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(FilteredTermsEnum), (PyObject *) self, "term", args, 2);
        }

        static PyObject *t_FilteredTermsEnum_termState(t_FilteredTermsEnum *self, PyObject *args)
        {
          ::org::apache::lucene::index::TermState result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.termState());
            return ::org::apache::lucene::index::t_TermState::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(FilteredTermsEnum), (PyObject *) self, "termState", args, 2);
        }

        static PyObject *t_FilteredTermsEnum_totalTermFreq(t_FilteredTermsEnum *self, PyObject *args)
        {
          jlong result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.totalTermFreq());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          return callSuper(&PY_TYPE(FilteredTermsEnum), (PyObject *) self, "totalTermFreq", args, 2);
        }

        static PyObject *t_FilteredTermsEnum_get__comparator(t_FilteredTermsEnum *self, void *data)
        {
          ::java::util::Comparator value((jobject) NULL);
          OBJ_CALL(value = self->object.getComparator());
          return ::java::util::t_Comparator::wrap_Object(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/xml/CoreParser.h"
#include "org/apache/lucene/queryparser/xml/QueryBuilder.h"
#include "java/lang/Class.h"
#include "java/io/InputStream.h"
#include "org/apache/lucene/queryparser/xml/FilterBuilder.h"
#include "org/apache/lucene/analysis/Analyzer.h"
#include "java/lang/String.h"
#include "org/apache/lucene/queryparser/classic/QueryParser.h"
#include "org/apache/lucene/queryparser/xml/ParserException.h"
#include "org/apache/lucene/search/Query.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace xml {

          ::java::lang::Class *CoreParser::class$ = NULL;
          jmethodID *CoreParser::mids$ = NULL;
          bool CoreParser::live$ = false;
          jint CoreParser::maxNumCachedFilters = (jint) 0;

          jclass CoreParser::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/xml/CoreParser");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_d77cc89a] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Lorg/apache/lucene/analysis/Analyzer;)V");
              mids$[mid_init$_64322899] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/Analyzer;Lorg/apache/lucene/queryparser/classic/QueryParser;)V");
              mids$[mid_addFilterBuilder_a961e918] = env->getMethodID(cls, "addFilterBuilder", "(Ljava/lang/String;Lorg/apache/lucene/queryparser/xml/FilterBuilder;)V");
              mids$[mid_addQueryBuilder_155f2547] = env->getMethodID(cls, "addQueryBuilder", "(Ljava/lang/String;Lorg/apache/lucene/queryparser/xml/QueryBuilder;)V");
              mids$[mid_parse_2700f308] = env->getMethodID(cls, "parse", "(Ljava/io/InputStream;)Lorg/apache/lucene/search/Query;");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              maxNumCachedFilters = env->getStaticIntField(cls, "maxNumCachedFilters");
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          CoreParser::CoreParser(const ::java::lang::String & a0, const ::org::apache::lucene::analysis::Analyzer & a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_d77cc89a, a0.this$, a1.this$)) {}

          CoreParser::CoreParser(const ::org::apache::lucene::analysis::Analyzer & a0, const ::org::apache::lucene::queryparser::classic::QueryParser & a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_64322899, a0.this$, a1.this$)) {}

          void CoreParser::addFilterBuilder(const ::java::lang::String & a0, const ::org::apache::lucene::queryparser::xml::FilterBuilder & a1) const
          {
            env->callVoidMethod(this$, mids$[mid_addFilterBuilder_a961e918], a0.this$, a1.this$);
          }

          void CoreParser::addQueryBuilder(const ::java::lang::String & a0, const ::org::apache::lucene::queryparser::xml::QueryBuilder & a1) const
          {
            env->callVoidMethod(this$, mids$[mid_addQueryBuilder_155f2547], a0.this$, a1.this$);
          }

          ::org::apache::lucene::search::Query CoreParser::parse(const ::java::io::InputStream & a0) const
          {
            return ::org::apache::lucene::search::Query(env->callObjectMethod(this$, mids$[mid_parse_2700f308], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace xml {
          static PyObject *t_CoreParser_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_CoreParser_instance_(PyTypeObject *type, PyObject *arg);
          static int t_CoreParser_init_(t_CoreParser *self, PyObject *args, PyObject *kwds);
          static PyObject *t_CoreParser_addFilterBuilder(t_CoreParser *self, PyObject *args);
          static PyObject *t_CoreParser_addQueryBuilder(t_CoreParser *self, PyObject *args);
          static PyObject *t_CoreParser_parse(t_CoreParser *self, PyObject *arg);

          static PyMethodDef t_CoreParser__methods_[] = {
            DECLARE_METHOD(t_CoreParser, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CoreParser, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CoreParser, addFilterBuilder, METH_VARARGS),
            DECLARE_METHOD(t_CoreParser, addQueryBuilder, METH_VARARGS),
            DECLARE_METHOD(t_CoreParser, parse, METH_O),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(CoreParser, t_CoreParser, ::java::lang::Object, CoreParser, t_CoreParser_init_, 0, 0, 0, 0, 0);

          void t_CoreParser::install(PyObject *module)
          {
            installType(&PY_TYPE(CoreParser), module, "CoreParser", 0);
          }

          void t_CoreParser::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(CoreParser).tp_dict, "class_", make_descriptor(CoreParser::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(CoreParser).tp_dict, "wrapfn_", make_descriptor(t_CoreParser::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(CoreParser).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(CoreParser::initializeClass);
            PyDict_SetItemString(PY_TYPE(CoreParser).tp_dict, "maxNumCachedFilters", make_descriptor(CoreParser::maxNumCachedFilters));
          }

          static PyObject *t_CoreParser_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, CoreParser::initializeClass, 1)))
              return NULL;
            return t_CoreParser::wrap_Object(CoreParser(((t_CoreParser *) arg)->object.this$));
          }
          static PyObject *t_CoreParser_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, CoreParser::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_CoreParser_init_(t_CoreParser *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 2:
              {
                ::java::lang::String a0((jobject) NULL);
                ::org::apache::lucene::analysis::Analyzer a1((jobject) NULL);
                CoreParser object((jobject) NULL);

                if (!parseArgs(args, "sk", ::org::apache::lucene::analysis::Analyzer::initializeClass, &a0, &a1))
                {
                  INT_CALL(object = CoreParser(a0, a1));
                  self->object = object;
                  break;
                }
              }
              {
                ::org::apache::lucene::analysis::Analyzer a0((jobject) NULL);
                ::org::apache::lucene::queryparser::classic::QueryParser a1((jobject) NULL);
                CoreParser object((jobject) NULL);

                if (!parseArgs(args, "kk", ::org::apache::lucene::analysis::Analyzer::initializeClass, ::org::apache::lucene::queryparser::classic::QueryParser::initializeClass, &a0, &a1))
                {
                  INT_CALL(object = CoreParser(a0, a1));
                  self->object = object;
                  break;
                }
              }
             default:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_CoreParser_addFilterBuilder(t_CoreParser *self, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            ::org::apache::lucene::queryparser::xml::FilterBuilder a1((jobject) NULL);

            if (!parseArgs(args, "sk", ::org::apache::lucene::queryparser::xml::FilterBuilder::initializeClass, &a0, &a1))
            {
              OBJ_CALL(self->object.addFilterBuilder(a0, a1));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "addFilterBuilder", args);
            return NULL;
          }

          static PyObject *t_CoreParser_addQueryBuilder(t_CoreParser *self, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            ::org::apache::lucene::queryparser::xml::QueryBuilder a1((jobject) NULL);

            if (!parseArgs(args, "sk", ::org::apache::lucene::queryparser::xml::QueryBuilder::initializeClass, &a0, &a1))
            {
              OBJ_CALL(self->object.addQueryBuilder(a0, a1));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "addQueryBuilder", args);
            return NULL;
          }

          static PyObject *t_CoreParser_parse(t_CoreParser *self, PyObject *arg)
          {
            ::java::io::InputStream a0((jobject) NULL);
            ::org::apache::lucene::search::Query result((jobject) NULL);

            if (!parseArg(arg, "k", ::java::io::InputStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.parse(a0));
              return ::org::apache::lucene::search::t_Query::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "parse", arg);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/classic/QueryParser.h"
#include "org/apache/lucene/queryparser/classic/ParseException.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/queryparser/classic/Token.h"
#include "org/apache/lucene/queryparser/classic/QueryParserConstants.h"
#include "org/apache/lucene/queryparser/classic/QueryParserTokenManager.h"
#include "org/apache/lucene/analysis/Analyzer.h"
#include "java/lang/String.h"
#include "org/apache/lucene/queryparser/classic/CharStream.h"
#include "org/apache/lucene/util/Version.h"
#include "org/apache/lucene/search/Query.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace classic {

          ::java::lang::Class *QueryParser::class$ = NULL;
          jmethodID *QueryParser::mids$ = NULL;
          jfieldID *QueryParser::fids$ = NULL;
          bool QueryParser::live$ = false;

          jclass QueryParser::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/classic/QueryParser");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_504c192d] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Ljava/lang/String;Lorg/apache/lucene/analysis/Analyzer;)V");
              mids$[mid_Clause_fbed2634] = env->getMethodID(cls, "Clause", "(Ljava/lang/String;)Lorg/apache/lucene/search/Query;");
              mids$[mid_Conjunction_54c6a179] = env->getMethodID(cls, "Conjunction", "()I");
              mids$[mid_Modifiers_54c6a179] = env->getMethodID(cls, "Modifiers", "()I");
              mids$[mid_Query_fbed2634] = env->getMethodID(cls, "Query", "(Ljava/lang/String;)Lorg/apache/lucene/search/Query;");
              mids$[mid_ReInit_52865dcf] = env->getMethodID(cls, "ReInit", "(Lorg/apache/lucene/queryparser/classic/QueryParserTokenManager;)V");
              mids$[mid_ReInit_24bde9d3] = env->getMethodID(cls, "ReInit", "(Lorg/apache/lucene/queryparser/classic/CharStream;)V");
              mids$[mid_Term_fbed2634] = env->getMethodID(cls, "Term", "(Ljava/lang/String;)Lorg/apache/lucene/search/Query;");
              mids$[mid_TopLevelQuery_fbed2634] = env->getMethodID(cls, "TopLevelQuery", "(Ljava/lang/String;)Lorg/apache/lucene/search/Query;");
              mids$[mid_disable_tracing_54c6a166] = env->getMethodID(cls, "disable_tracing", "()V");
              mids$[mid_enable_tracing_54c6a166] = env->getMethodID(cls, "enable_tracing", "()V");
              mids$[mid_generateParseException_3c5b7efe] = env->getMethodID(cls, "generateParseException", "()Lorg/apache/lucene/queryparser/classic/ParseException;");
              mids$[mid_getNextToken_1983cf96] = env->getMethodID(cls, "getNextToken", "()Lorg/apache/lucene/queryparser/classic/Token;");
              mids$[mid_getToken_61c98f04] = env->getMethodID(cls, "getToken", "(I)Lorg/apache/lucene/queryparser/classic/Token;");

              fids$ = new jfieldID[max_fid];
              fids$[fid_jj_nt] = env->getFieldID(cls, "jj_nt", "Lorg/apache/lucene/queryparser/classic/Token;");
              fids$[fid_token] = env->getFieldID(cls, "token", "Lorg/apache/lucene/queryparser/classic/Token;");
              fids$[fid_token_source] = env->getFieldID(cls, "token_source", "Lorg/apache/lucene/queryparser/classic/QueryParserTokenManager;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          QueryParser::QueryParser(const ::org::apache::lucene::util::Version & a0, const ::java::lang::String & a1, const ::org::apache::lucene::analysis::Analyzer & a2) : ::org::apache::lucene::queryparser::classic::QueryParserBase(env->newObject(initializeClass, &mids$, mid_init$_504c192d, a0.this$, a1.this$, a2.this$)) {}

          ::org::apache::lucene::search::Query QueryParser::Clause(const ::java::lang::String & a0) const
          {
            return ::org::apache::lucene::search::Query(env->callObjectMethod(this$, mids$[mid_Clause_fbed2634], a0.this$));
          }

          jint QueryParser::Conjunction() const
          {
            return env->callIntMethod(this$, mids$[mid_Conjunction_54c6a179]);
          }

          jint QueryParser::Modifiers() const
          {
            return env->callIntMethod(this$, mids$[mid_Modifiers_54c6a179]);
          }

          ::org::apache::lucene::search::Query QueryParser::Query(const ::java::lang::String & a0) const
          {
            return ::org::apache::lucene::search::Query(env->callObjectMethod(this$, mids$[mid_Query_fbed2634], a0.this$));
          }

          void QueryParser::ReInit(const ::org::apache::lucene::queryparser::classic::QueryParserTokenManager & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_ReInit_52865dcf], a0.this$);
          }

          void QueryParser::ReInit(const ::org::apache::lucene::queryparser::classic::CharStream & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_ReInit_24bde9d3], a0.this$);
          }

          ::org::apache::lucene::search::Query QueryParser::Term(const ::java::lang::String & a0) const
          {
            return ::org::apache::lucene::search::Query(env->callObjectMethod(this$, mids$[mid_Term_fbed2634], a0.this$));
          }

          ::org::apache::lucene::search::Query QueryParser::TopLevelQuery(const ::java::lang::String & a0) const
          {
            return ::org::apache::lucene::search::Query(env->callObjectMethod(this$, mids$[mid_TopLevelQuery_fbed2634], a0.this$));
          }

          void QueryParser::disable_tracing() const
          {
            env->callVoidMethod(this$, mids$[mid_disable_tracing_54c6a166]);
          }

          void QueryParser::enable_tracing() const
          {
            env->callVoidMethod(this$, mids$[mid_enable_tracing_54c6a166]);
          }

          ::org::apache::lucene::queryparser::classic::ParseException QueryParser::generateParseException() const
          {
            return ::org::apache::lucene::queryparser::classic::ParseException(env->callObjectMethod(this$, mids$[mid_generateParseException_3c5b7efe]));
          }

          ::org::apache::lucene::queryparser::classic::Token QueryParser::getNextToken() const
          {
            return ::org::apache::lucene::queryparser::classic::Token(env->callObjectMethod(this$, mids$[mid_getNextToken_1983cf96]));
          }

          ::org::apache::lucene::queryparser::classic::Token QueryParser::getToken(jint a0) const
          {
            return ::org::apache::lucene::queryparser::classic::Token(env->callObjectMethod(this$, mids$[mid_getToken_61c98f04], a0));
          }

          ::org::apache::lucene::queryparser::classic::Token QueryParser::_get_jj_nt() const
          {
            return ::org::apache::lucene::queryparser::classic::Token(env->getObjectField(this$, fids$[fid_jj_nt]));
          }

          void QueryParser::_set_jj_nt(const ::org::apache::lucene::queryparser::classic::Token & a0) const
          {
            env->setObjectField(this$, fids$[fid_jj_nt], a0.this$);
          }

          ::org::apache::lucene::queryparser::classic::Token QueryParser::_get_token() const
          {
            return ::org::apache::lucene::queryparser::classic::Token(env->getObjectField(this$, fids$[fid_token]));
          }

          void QueryParser::_set_token(const ::org::apache::lucene::queryparser::classic::Token & a0) const
          {
            env->setObjectField(this$, fids$[fid_token], a0.this$);
          }

          ::org::apache::lucene::queryparser::classic::QueryParserTokenManager QueryParser::_get_token_source() const
          {
            return ::org::apache::lucene::queryparser::classic::QueryParserTokenManager(env->getObjectField(this$, fids$[fid_token_source]));
          }

          void QueryParser::_set_token_source(const ::org::apache::lucene::queryparser::classic::QueryParserTokenManager & a0) const
          {
            env->setObjectField(this$, fids$[fid_token_source], a0.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"
#include "org/apache/lucene/queryparser/classic/QueryParser$Operator.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace classic {
          static PyObject *t_QueryParser_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_QueryParser_instance_(PyTypeObject *type, PyObject *arg);
          static int t_QueryParser_init_(t_QueryParser *self, PyObject *args, PyObject *kwds);
          static PyObject *t_QueryParser_Clause(t_QueryParser *self, PyObject *arg);
          static PyObject *t_QueryParser_Conjunction(t_QueryParser *self);
          static PyObject *t_QueryParser_Modifiers(t_QueryParser *self);
          static PyObject *t_QueryParser_Query(t_QueryParser *self, PyObject *arg);
          static PyObject *t_QueryParser_ReInit(t_QueryParser *self, PyObject *args);
          static PyObject *t_QueryParser_Term(t_QueryParser *self, PyObject *arg);
          static PyObject *t_QueryParser_TopLevelQuery(t_QueryParser *self, PyObject *args);
          static PyObject *t_QueryParser_disable_tracing(t_QueryParser *self);
          static PyObject *t_QueryParser_enable_tracing(t_QueryParser *self);
          static PyObject *t_QueryParser_generateParseException(t_QueryParser *self);
          static PyObject *t_QueryParser_getNextToken(t_QueryParser *self);
          static PyObject *t_QueryParser_getToken(t_QueryParser *self, PyObject *arg);
          static PyObject *t_QueryParser_get__jj_nt(t_QueryParser *self, void *data);
          static int t_QueryParser_set__jj_nt(t_QueryParser *self, PyObject *arg, void *data);
          static PyObject *t_QueryParser_get__token(t_QueryParser *self, void *data);
          static int t_QueryParser_set__token(t_QueryParser *self, PyObject *arg, void *data);
          static PyObject *t_QueryParser_get__token_source(t_QueryParser *self, void *data);
          static int t_QueryParser_set__token_source(t_QueryParser *self, PyObject *arg, void *data);

          static PyObject *t_QueryParser_get__nextToken(t_QueryParser *self, void *data);
          static PyGetSetDef t_QueryParser__fields_[] = {
            DECLARE_GETSET_FIELD(t_QueryParser, jj_nt),
            DECLARE_GETSET_FIELD(t_QueryParser, token),
            DECLARE_GETSET_FIELD(t_QueryParser, token_source),
            DECLARE_GET_FIELD(t_QueryParser, nextToken),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_QueryParser__methods_[] = {
            DECLARE_METHOD(t_QueryParser, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_QueryParser, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_QueryParser, Clause, METH_O),
            DECLARE_METHOD(t_QueryParser, Conjunction, METH_NOARGS),
            DECLARE_METHOD(t_QueryParser, Modifiers, METH_NOARGS),
            DECLARE_METHOD(t_QueryParser, Query, METH_O),
            DECLARE_METHOD(t_QueryParser, ReInit, METH_VARARGS),
            DECLARE_METHOD(t_QueryParser, Term, METH_O),
            DECLARE_METHOD(t_QueryParser, TopLevelQuery, METH_VARARGS),
            DECLARE_METHOD(t_QueryParser, disable_tracing, METH_NOARGS),
            DECLARE_METHOD(t_QueryParser, enable_tracing, METH_NOARGS),
            DECLARE_METHOD(t_QueryParser, generateParseException, METH_NOARGS),
            DECLARE_METHOD(t_QueryParser, getNextToken, METH_NOARGS),
            DECLARE_METHOD(t_QueryParser, getToken, METH_O),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(QueryParser, t_QueryParser, ::org::apache::lucene::queryparser::classic::QueryParserBase, QueryParser, t_QueryParser_init_, 0, 0, t_QueryParser__fields_, 0, 0);

          void t_QueryParser::install(PyObject *module)
          {
            installType(&PY_TYPE(QueryParser), module, "QueryParser", 0);
            PyDict_SetItemString(PY_TYPE(QueryParser).tp_dict, "Operator", make_descriptor(&PY_TYPE(QueryParser$Operator)));
          }

          void t_QueryParser::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(QueryParser).tp_dict, "class_", make_descriptor(QueryParser::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(QueryParser).tp_dict, "wrapfn_", make_descriptor(t_QueryParser::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(QueryParser).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_QueryParser_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, QueryParser::initializeClass, 1)))
              return NULL;
            return t_QueryParser::wrap_Object(QueryParser(((t_QueryParser *) arg)->object.this$));
          }
          static PyObject *t_QueryParser_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, QueryParser::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_QueryParser_init_(t_QueryParser *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::util::Version a0((jobject) NULL);
            PyTypeObject **p0;
            ::java::lang::String a1((jobject) NULL);
            ::org::apache::lucene::analysis::Analyzer a2((jobject) NULL);
            QueryParser object((jobject) NULL);

            if (!parseArgs(args, "Ksk", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::Analyzer::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1, &a2))
            {
              INT_CALL(object = QueryParser(a0, a1, a2));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_QueryParser_Clause(t_QueryParser *self, PyObject *arg)
          {
            ::java::lang::String a0((jobject) NULL);
            ::org::apache::lucene::search::Query result((jobject) NULL);

            if (!parseArg(arg, "s", &a0))
            {
              OBJ_CALL(result = self->object.Clause(a0));
              return ::org::apache::lucene::search::t_Query::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "Clause", arg);
            return NULL;
          }

          static PyObject *t_QueryParser_Conjunction(t_QueryParser *self)
          {
            jint result;
            OBJ_CALL(result = self->object.Conjunction());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_QueryParser_Modifiers(t_QueryParser *self)
          {
            jint result;
            OBJ_CALL(result = self->object.Modifiers());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_QueryParser_Query(t_QueryParser *self, PyObject *arg)
          {
            ::java::lang::String a0((jobject) NULL);
            ::org::apache::lucene::search::Query result((jobject) NULL);

            if (!parseArg(arg, "s", &a0))
            {
              OBJ_CALL(result = self->object.Query(a0));
              return ::org::apache::lucene::search::t_Query::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "Query", arg);
            return NULL;
          }

          static PyObject *t_QueryParser_ReInit(t_QueryParser *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::org::apache::lucene::queryparser::classic::QueryParserTokenManager a0((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::queryparser::classic::QueryParserTokenManager::initializeClass, &a0))
                {
                  OBJ_CALL(self->object.ReInit(a0));
                  Py_RETURN_NONE;
                }
              }
              {
                ::org::apache::lucene::queryparser::classic::CharStream a0((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::queryparser::classic::CharStream::initializeClass, &a0))
                {
                  OBJ_CALL(self->object.ReInit(a0));
                  Py_RETURN_NONE;
                }
              }
            }

            return callSuper(&PY_TYPE(QueryParser), (PyObject *) self, "ReInit", args, 2);
          }

          static PyObject *t_QueryParser_Term(t_QueryParser *self, PyObject *arg)
          {
            ::java::lang::String a0((jobject) NULL);
            ::org::apache::lucene::search::Query result((jobject) NULL);

            if (!parseArg(arg, "s", &a0))
            {
              OBJ_CALL(result = self->object.Term(a0));
              return ::org::apache::lucene::search::t_Query::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "Term", arg);
            return NULL;
          }

          static PyObject *t_QueryParser_TopLevelQuery(t_QueryParser *self, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            ::org::apache::lucene::search::Query result((jobject) NULL);

            if (!parseArgs(args, "s", &a0))
            {
              OBJ_CALL(result = self->object.TopLevelQuery(a0));
              return ::org::apache::lucene::search::t_Query::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(QueryParser), (PyObject *) self, "TopLevelQuery", args, 2);
          }

          static PyObject *t_QueryParser_disable_tracing(t_QueryParser *self)
          {
            OBJ_CALL(self->object.disable_tracing());
            Py_RETURN_NONE;
          }

          static PyObject *t_QueryParser_enable_tracing(t_QueryParser *self)
          {
            OBJ_CALL(self->object.enable_tracing());
            Py_RETURN_NONE;
          }

          static PyObject *t_QueryParser_generateParseException(t_QueryParser *self)
          {
            ::org::apache::lucene::queryparser::classic::ParseException result((jobject) NULL);
            OBJ_CALL(result = self->object.generateParseException());
            return ::org::apache::lucene::queryparser::classic::t_ParseException::wrap_Object(result);
          }

          static PyObject *t_QueryParser_getNextToken(t_QueryParser *self)
          {
            ::org::apache::lucene::queryparser::classic::Token result((jobject) NULL);
            OBJ_CALL(result = self->object.getNextToken());
            return ::org::apache::lucene::queryparser::classic::t_Token::wrap_Object(result);
          }

          static PyObject *t_QueryParser_getToken(t_QueryParser *self, PyObject *arg)
          {
            jint a0;
            ::org::apache::lucene::queryparser::classic::Token result((jobject) NULL);

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(result = self->object.getToken(a0));
              return ::org::apache::lucene::queryparser::classic::t_Token::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "getToken", arg);
            return NULL;
          }

          static PyObject *t_QueryParser_get__jj_nt(t_QueryParser *self, void *data)
          {
            ::org::apache::lucene::queryparser::classic::Token value((jobject) NULL);
            OBJ_CALL(value = self->object._get_jj_nt());
            return ::org::apache::lucene::queryparser::classic::t_Token::wrap_Object(value);
          }
          static int t_QueryParser_set__jj_nt(t_QueryParser *self, PyObject *arg, void *data)
          {
            ::org::apache::lucene::queryparser::classic::Token value((jobject) NULL);
            if (!parseArg(arg, "k", ::org::apache::lucene::queryparser::classic::Token::initializeClass, &value))
            {
              INT_CALL(self->object._set_jj_nt(value));
              return 0;
            }
            PyErr_SetArgsError((PyObject *) self, "jj_nt", arg);
            return -1;
          }

          static PyObject *t_QueryParser_get__token(t_QueryParser *self, void *data)
          {
            ::org::apache::lucene::queryparser::classic::Token value((jobject) NULL);
            OBJ_CALL(value = self->object._get_token());
            return ::org::apache::lucene::queryparser::classic::t_Token::wrap_Object(value);
          }
          static int t_QueryParser_set__token(t_QueryParser *self, PyObject *arg, void *data)
          {
            ::org::apache::lucene::queryparser::classic::Token value((jobject) NULL);
            if (!parseArg(arg, "k", ::org::apache::lucene::queryparser::classic::Token::initializeClass, &value))
            {
              INT_CALL(self->object._set_token(value));
              return 0;
            }
            PyErr_SetArgsError((PyObject *) self, "token", arg);
            return -1;
          }

          static PyObject *t_QueryParser_get__token_source(t_QueryParser *self, void *data)
          {
            ::org::apache::lucene::queryparser::classic::QueryParserTokenManager value((jobject) NULL);
            OBJ_CALL(value = self->object._get_token_source());
            return ::org::apache::lucene::queryparser::classic::t_QueryParserTokenManager::wrap_Object(value);
          }
          static int t_QueryParser_set__token_source(t_QueryParser *self, PyObject *arg, void *data)
          {
            ::org::apache::lucene::queryparser::classic::QueryParserTokenManager value((jobject) NULL);
            if (!parseArg(arg, "k", ::org::apache::lucene::queryparser::classic::QueryParserTokenManager::initializeClass, &value))
            {
              INT_CALL(self->object._set_token_source(value));
              return 0;
            }
            PyErr_SetArgsError((PyObject *) self, "token_source", arg);
            return -1;
          }

          static PyObject *t_QueryParser_get__nextToken(t_QueryParser *self, void *data)
          {
            ::org::apache::lucene::queryparser::classic::Token value((jobject) NULL);
            OBJ_CALL(value = self->object.getNextToken());
            return ::org::apache::lucene::queryparser::classic::t_Token::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/Scorer$ChildScorer.h"
#include "java/lang/String.h"
#include "org/apache/lucene/search/Scorer.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *Scorer$ChildScorer::class$ = NULL;
        jmethodID *Scorer$ChildScorer::mids$ = NULL;
        jfieldID *Scorer$ChildScorer::fids$ = NULL;
        bool Scorer$ChildScorer::live$ = false;

        jclass Scorer$ChildScorer::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/Scorer$ChildScorer");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_9c8e8bbe] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/Scorer;Ljava/lang/String;)V");

            fids$ = new jfieldID[max_fid];
            fids$[fid_child] = env->getFieldID(cls, "child", "Lorg/apache/lucene/search/Scorer;");
            fids$[fid_relationship] = env->getFieldID(cls, "relationship", "Ljava/lang/String;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        Scorer$ChildScorer::Scorer$ChildScorer(const ::org::apache::lucene::search::Scorer & a0, const ::java::lang::String & a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_9c8e8bbe, a0.this$, a1.this$)) {}

        ::org::apache::lucene::search::Scorer Scorer$ChildScorer::_get_child() const
        {
          return ::org::apache::lucene::search::Scorer(env->getObjectField(this$, fids$[fid_child]));
        }

        ::java::lang::String Scorer$ChildScorer::_get_relationship() const
        {
          return ::java::lang::String(env->getObjectField(this$, fids$[fid_relationship]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_Scorer$ChildScorer_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_Scorer$ChildScorer_instance_(PyTypeObject *type, PyObject *arg);
        static int t_Scorer$ChildScorer_init_(t_Scorer$ChildScorer *self, PyObject *args, PyObject *kwds);
        static PyObject *t_Scorer$ChildScorer_get__child(t_Scorer$ChildScorer *self, void *data);
        static PyObject *t_Scorer$ChildScorer_get__relationship(t_Scorer$ChildScorer *self, void *data);

        static PyGetSetDef t_Scorer$ChildScorer__fields_[] = {
          DECLARE_GET_FIELD(t_Scorer$ChildScorer, child),
          DECLARE_GET_FIELD(t_Scorer$ChildScorer, relationship),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_Scorer$ChildScorer__methods_[] = {
          DECLARE_METHOD(t_Scorer$ChildScorer, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_Scorer$ChildScorer, instance_, METH_O | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(Scorer$ChildScorer, t_Scorer$ChildScorer, ::java::lang::Object, Scorer$ChildScorer, t_Scorer$ChildScorer_init_, 0, 0, t_Scorer$ChildScorer__fields_, 0, 0);

        void t_Scorer$ChildScorer::install(PyObject *module)
        {
          installType(&PY_TYPE(Scorer$ChildScorer), module, "Scorer$ChildScorer", 0);
        }

        void t_Scorer$ChildScorer::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(Scorer$ChildScorer).tp_dict, "class_", make_descriptor(Scorer$ChildScorer::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(Scorer$ChildScorer).tp_dict, "wrapfn_", make_descriptor(t_Scorer$ChildScorer::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(Scorer$ChildScorer).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_Scorer$ChildScorer_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, Scorer$ChildScorer::initializeClass, 1)))
            return NULL;
          return t_Scorer$ChildScorer::wrap_Object(Scorer$ChildScorer(((t_Scorer$ChildScorer *) arg)->object.this$));
        }
        static PyObject *t_Scorer$ChildScorer_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, Scorer$ChildScorer::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_Scorer$ChildScorer_init_(t_Scorer$ChildScorer *self, PyObject *args, PyObject *kwds)
        {
          ::org::apache::lucene::search::Scorer a0((jobject) NULL);
          ::java::lang::String a1((jobject) NULL);
          Scorer$ChildScorer object((jobject) NULL);

          if (!parseArgs(args, "ks", ::org::apache::lucene::search::Scorer::initializeClass, &a0, &a1))
          {
            INT_CALL(object = Scorer$ChildScorer(a0, a1));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_Scorer$ChildScorer_get__child(t_Scorer$ChildScorer *self, void *data)
        {
          ::org::apache::lucene::search::Scorer value((jobject) NULL);
          OBJ_CALL(value = self->object._get_child());
          return ::org::apache::lucene::search::t_Scorer::wrap_Object(value);
        }

        static PyObject *t_Scorer$ChildScorer_get__relationship(t_Scorer$ChildScorer *self, void *data)
        {
          ::java::lang::String value((jobject) NULL);
          OBJ_CALL(value = self->object._get_relationship());
          return j2p(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/spans/SpanQuery.h"
#include "org/apache/lucene/util/Bits.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/index/TermContext.h"
#include "org/apache/lucene/search/Weight.h"
#include "java/io/IOException.h"
#include "java/util/Map.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "java/lang/String.h"
#include "org/apache/lucene/search/IndexSearcher.h"
#include "org/apache/lucene/search/spans/Spans.h"
#include "org/apache/lucene/index/Term.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace spans {

          ::java::lang::Class *SpanQuery::class$ = NULL;
          jmethodID *SpanQuery::mids$ = NULL;
          bool SpanQuery::live$ = false;

          jclass SpanQuery::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/spans/SpanQuery");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_createWeight_367763cb] = env->getMethodID(cls, "createWeight", "(Lorg/apache/lucene/search/IndexSearcher;)Lorg/apache/lucene/search/Weight;");
              mids$[mid_getField_14c7b5c5] = env->getMethodID(cls, "getField", "()Ljava/lang/String;");
              mids$[mid_getSpans_f003cb44] = env->getMethodID(cls, "getSpans", "(Lorg/apache/lucene/index/AtomicReaderContext;Lorg/apache/lucene/util/Bits;Ljava/util/Map;)Lorg/apache/lucene/search/spans/Spans;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          SpanQuery::SpanQuery() : ::org::apache::lucene::search::Query(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          ::org::apache::lucene::search::Weight SpanQuery::createWeight(const ::org::apache::lucene::search::IndexSearcher & a0) const
          {
            return ::org::apache::lucene::search::Weight(env->callObjectMethod(this$, mids$[mid_createWeight_367763cb], a0.this$));
          }

          ::java::lang::String SpanQuery::getField() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getField_14c7b5c5]));
          }

          ::org::apache::lucene::search::spans::Spans SpanQuery::getSpans(const ::org::apache::lucene::index::AtomicReaderContext & a0, const ::org::apache::lucene::util::Bits & a1, const ::java::util::Map & a2) const
          {
            return ::org::apache::lucene::search::spans::Spans(env->callObjectMethod(this$, mids$[mid_getSpans_f003cb44], a0.this$, a1.this$, a2.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace spans {
          static PyObject *t_SpanQuery_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SpanQuery_instance_(PyTypeObject *type, PyObject *arg);
          static int t_SpanQuery_init_(t_SpanQuery *self, PyObject *args, PyObject *kwds);
          static PyObject *t_SpanQuery_createWeight(t_SpanQuery *self, PyObject *args);
          static PyObject *t_SpanQuery_getField(t_SpanQuery *self);
          static PyObject *t_SpanQuery_getSpans(t_SpanQuery *self, PyObject *args);
          static PyObject *t_SpanQuery_get__field(t_SpanQuery *self, void *data);
          static PyGetSetDef t_SpanQuery__fields_[] = {
            DECLARE_GET_FIELD(t_SpanQuery, field),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_SpanQuery__methods_[] = {
            DECLARE_METHOD(t_SpanQuery, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SpanQuery, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SpanQuery, createWeight, METH_VARARGS),
            DECLARE_METHOD(t_SpanQuery, getField, METH_NOARGS),
            DECLARE_METHOD(t_SpanQuery, getSpans, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(SpanQuery, t_SpanQuery, ::org::apache::lucene::search::Query, SpanQuery, t_SpanQuery_init_, 0, 0, t_SpanQuery__fields_, 0, 0);

          void t_SpanQuery::install(PyObject *module)
          {
            installType(&PY_TYPE(SpanQuery), module, "SpanQuery", 0);
          }

          void t_SpanQuery::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(SpanQuery).tp_dict, "class_", make_descriptor(SpanQuery::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(SpanQuery).tp_dict, "wrapfn_", make_descriptor(t_SpanQuery::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(SpanQuery).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_SpanQuery_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, SpanQuery::initializeClass, 1)))
              return NULL;
            return t_SpanQuery::wrap_Object(SpanQuery(((t_SpanQuery *) arg)->object.this$));
          }
          static PyObject *t_SpanQuery_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, SpanQuery::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_SpanQuery_init_(t_SpanQuery *self, PyObject *args, PyObject *kwds)
          {
            SpanQuery object((jobject) NULL);

            INT_CALL(object = SpanQuery());
            self->object = object;

            return 0;
          }

          static PyObject *t_SpanQuery_createWeight(t_SpanQuery *self, PyObject *args)
          {
            ::org::apache::lucene::search::IndexSearcher a0((jobject) NULL);
            ::org::apache::lucene::search::Weight result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::search::IndexSearcher::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.createWeight(a0));
              return ::org::apache::lucene::search::t_Weight::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(SpanQuery), (PyObject *) self, "createWeight", args, 2);
          }

          static PyObject *t_SpanQuery_getField(t_SpanQuery *self)
          {
            ::java::lang::String result((jobject) NULL);
            OBJ_CALL(result = self->object.getField());
            return j2p(result);
          }

          static PyObject *t_SpanQuery_getSpans(t_SpanQuery *self, PyObject *args)
          {
            ::org::apache::lucene::index::AtomicReaderContext a0((jobject) NULL);
            ::org::apache::lucene::util::Bits a1((jobject) NULL);
            ::java::util::Map a2((jobject) NULL);
            PyTypeObject **p2;
            ::org::apache::lucene::search::spans::Spans result((jobject) NULL);

            if (!parseArgs(args, "kkK", ::org::apache::lucene::index::AtomicReaderContext::initializeClass, ::org::apache::lucene::util::Bits::initializeClass, ::java::util::Map::initializeClass, &a0, &a1, &a2, &p2, ::java::util::t_Map::parameters_))
            {
              OBJ_CALL(result = self->object.getSpans(a0, a1, a2));
              return ::org::apache::lucene::search::spans::t_Spans::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "getSpans", args);
            return NULL;
          }

          static PyObject *t_SpanQuery_get__field(t_SpanQuery *self, void *data)
          {
            ::java::lang::String value((jobject) NULL);
            OBJ_CALL(value = self->object.getField());
            return j2p(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/de/GermanStemmer.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace de {

          ::java::lang::Class *GermanStemmer::class$ = NULL;
          jmethodID *GermanStemmer::mids$ = NULL;
          bool GermanStemmer::live$ = false;

          jclass GermanStemmer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/de/GermanStemmer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_stem_97a5258f] = env->getMethodID(cls, "stem", "(Ljava/lang/String;)Ljava/lang/String;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          GermanStemmer::GermanStemmer() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace de {
          static PyObject *t_GermanStemmer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_GermanStemmer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_GermanStemmer_init_(t_GermanStemmer *self, PyObject *args, PyObject *kwds);

          static PyMethodDef t_GermanStemmer__methods_[] = {
            DECLARE_METHOD(t_GermanStemmer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_GermanStemmer, instance_, METH_O | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(GermanStemmer, t_GermanStemmer, ::java::lang::Object, GermanStemmer, t_GermanStemmer_init_, 0, 0, 0, 0, 0);

          void t_GermanStemmer::install(PyObject *module)
          {
            installType(&PY_TYPE(GermanStemmer), module, "GermanStemmer", 0);
          }

          void t_GermanStemmer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(GermanStemmer).tp_dict, "class_", make_descriptor(GermanStemmer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(GermanStemmer).tp_dict, "wrapfn_", make_descriptor(t_GermanStemmer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(GermanStemmer).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_GermanStemmer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, GermanStemmer::initializeClass, 1)))
              return NULL;
            return t_GermanStemmer::wrap_Object(GermanStemmer(((t_GermanStemmer *) arg)->object.this$));
          }
          static PyObject *t_GermanStemmer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, GermanStemmer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_GermanStemmer_init_(t_GermanStemmer *self, PyObject *args, PyObject *kwds)
          {
            GermanStemmer object((jobject) NULL);

            INT_CALL(object = GermanStemmer());
            self->object = object;

            return 0;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/QuotedFieldQueryNode.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/queryparser/flexible/core/parser/EscapeQuerySyntax.h"
#include "java/lang/CloneNotSupportedException.h"
#include "java/lang/CharSequence.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace nodes {

              ::java::lang::Class *QuotedFieldQueryNode::class$ = NULL;
              jmethodID *QuotedFieldQueryNode::mids$ = NULL;
              bool QuotedFieldQueryNode::live$ = false;

              jclass QuotedFieldQueryNode::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/core/nodes/QuotedFieldQueryNode");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_ddd81d4e] = env->getMethodID(cls, "<init>", "(Ljava/lang/CharSequence;Ljava/lang/CharSequence;II)V");
                  mids$[mid_cloneTree_e948922b] = env->getMethodID(cls, "cloneTree", "()Lorg/apache/lucene/queryparser/flexible/core/nodes/QuotedFieldQueryNode;");
                  mids$[mid_toQueryString_99b8dfe1] = env->getMethodID(cls, "toQueryString", "(Lorg/apache/lucene/queryparser/flexible/core/parser/EscapeQuerySyntax;)Ljava/lang/CharSequence;");
                  mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              QuotedFieldQueryNode::QuotedFieldQueryNode(const ::java::lang::CharSequence & a0, const ::java::lang::CharSequence & a1, jint a2, jint a3) : ::org::apache::lucene::queryparser::flexible::core::nodes::FieldQueryNode(env->newObject(initializeClass, &mids$, mid_init$_ddd81d4e, a0.this$, a1.this$, a2, a3)) {}

              QuotedFieldQueryNode QuotedFieldQueryNode::cloneTree() const
              {
                return QuotedFieldQueryNode(env->callObjectMethod(this$, mids$[mid_cloneTree_e948922b]));
              }

              ::java::lang::CharSequence QuotedFieldQueryNode::toQueryString(const ::org::apache::lucene::queryparser::flexible::core::parser::EscapeQuerySyntax & a0) const
              {
                return ::java::lang::CharSequence(env->callObjectMethod(this$, mids$[mid_toQueryString_99b8dfe1], a0.this$));
              }

              ::java::lang::String QuotedFieldQueryNode::toString() const
              {
                return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace nodes {
              static PyObject *t_QuotedFieldQueryNode_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_QuotedFieldQueryNode_instance_(PyTypeObject *type, PyObject *arg);
              static int t_QuotedFieldQueryNode_init_(t_QuotedFieldQueryNode *self, PyObject *args, PyObject *kwds);
              static PyObject *t_QuotedFieldQueryNode_cloneTree(t_QuotedFieldQueryNode *self, PyObject *args);
              static PyObject *t_QuotedFieldQueryNode_toQueryString(t_QuotedFieldQueryNode *self, PyObject *args);
              static PyObject *t_QuotedFieldQueryNode_toString(t_QuotedFieldQueryNode *self, PyObject *args);

              static PyMethodDef t_QuotedFieldQueryNode__methods_[] = {
                DECLARE_METHOD(t_QuotedFieldQueryNode, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_QuotedFieldQueryNode, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_QuotedFieldQueryNode, cloneTree, METH_VARARGS),
                DECLARE_METHOD(t_QuotedFieldQueryNode, toQueryString, METH_VARARGS),
                DECLARE_METHOD(t_QuotedFieldQueryNode, toString, METH_VARARGS),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(QuotedFieldQueryNode, t_QuotedFieldQueryNode, ::org::apache::lucene::queryparser::flexible::core::nodes::FieldQueryNode, QuotedFieldQueryNode, t_QuotedFieldQueryNode_init_, 0, 0, 0, 0, 0);

              void t_QuotedFieldQueryNode::install(PyObject *module)
              {
                installType(&PY_TYPE(QuotedFieldQueryNode), module, "QuotedFieldQueryNode", 0);
              }

              void t_QuotedFieldQueryNode::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(QuotedFieldQueryNode).tp_dict, "class_", make_descriptor(QuotedFieldQueryNode::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(QuotedFieldQueryNode).tp_dict, "wrapfn_", make_descriptor(t_QuotedFieldQueryNode::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(QuotedFieldQueryNode).tp_dict, "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_QuotedFieldQueryNode_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, QuotedFieldQueryNode::initializeClass, 1)))
                  return NULL;
                return t_QuotedFieldQueryNode::wrap_Object(QuotedFieldQueryNode(((t_QuotedFieldQueryNode *) arg)->object.this$));
              }
              static PyObject *t_QuotedFieldQueryNode_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, QuotedFieldQueryNode::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_QuotedFieldQueryNode_init_(t_QuotedFieldQueryNode *self, PyObject *args, PyObject *kwds)
              {
                ::java::lang::CharSequence a0((jobject) NULL);
                ::java::lang::CharSequence a1((jobject) NULL);
                jint a2;
                jint a3;
                QuotedFieldQueryNode object((jobject) NULL);

                if (!parseArgs(args, "OOII", &::java::lang::PY_TYPE(CharSequence), &::java::lang::PY_TYPE(CharSequence), &a0, &a1, &a2, &a3))
                {
                  INT_CALL(object = QuotedFieldQueryNode(a0, a1, a2, a3));
                  self->object = object;
                }
                else
                {
                  PyErr_SetArgsError((PyObject *) self, "__init__", args);
                  return -1;
                }

                return 0;
              }

              static PyObject *t_QuotedFieldQueryNode_cloneTree(t_QuotedFieldQueryNode *self, PyObject *args)
              {
                QuotedFieldQueryNode result((jobject) NULL);

                if (!parseArgs(args, ""))
                {
                  OBJ_CALL(result = self->object.cloneTree());
                  return t_QuotedFieldQueryNode::wrap_Object(result);
                }

                return callSuper(&PY_TYPE(QuotedFieldQueryNode), (PyObject *) self, "cloneTree", args, 2);
              }

              static PyObject *t_QuotedFieldQueryNode_toQueryString(t_QuotedFieldQueryNode *self, PyObject *args)
              {
                ::org::apache::lucene::queryparser::flexible::core::parser::EscapeQuerySyntax a0((jobject) NULL);
                ::java::lang::CharSequence result((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::queryparser::flexible::core::parser::EscapeQuerySyntax::initializeClass, &a0))
                {
                  OBJ_CALL(result = self->object.toQueryString(a0));
                  return ::java::lang::t_CharSequence::wrap_Object(result);
                }

                return callSuper(&PY_TYPE(QuotedFieldQueryNode), (PyObject *) self, "toQueryString", args, 2);
              }

              static PyObject *t_QuotedFieldQueryNode_toString(t_QuotedFieldQueryNode *self, PyObject *args)
              {
                ::java::lang::String result((jobject) NULL);

                if (!parseArgs(args, ""))
                {
                  OBJ_CALL(result = self->object.toString());
                  return j2p(result);
                }

                return callSuper(&PY_TYPE(QuotedFieldQueryNode), (PyObject *) self, "toString", args, 2);
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/vectorhighlight/FieldPhraseList.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/search/vectorhighlight/FieldQuery.h"
#include "org/apache/lucene/search/vectorhighlight/FieldTermStack.h"
#include "org/apache/lucene/search/vectorhighlight/FieldPhraseList$WeightedPhraseInfo.h"
#include "java/util/List.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace vectorhighlight {

          ::java::lang::Class *FieldPhraseList::class$ = NULL;
          jmethodID *FieldPhraseList::mids$ = NULL;
          bool FieldPhraseList::live$ = false;

          jclass FieldPhraseList::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/vectorhighlight/FieldPhraseList");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_e0573fb6] = env->getMethodID(cls, "<init>", "([Lorg/apache/lucene/search/vectorhighlight/FieldPhraseList;)V");
              mids$[mid_init$_ed2eefc8] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/vectorhighlight/FieldTermStack;Lorg/apache/lucene/search/vectorhighlight/FieldQuery;)V");
              mids$[mid_init$_5d494a16] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/vectorhighlight/FieldTermStack;Lorg/apache/lucene/search/vectorhighlight/FieldQuery;I)V");
              mids$[mid_addIfNoOverlap_3f58e089] = env->getMethodID(cls, "addIfNoOverlap", "(Lorg/apache/lucene/search/vectorhighlight/FieldPhraseList$WeightedPhraseInfo;)V");
              mids$[mid_getPhraseList_87851566] = env->getMethodID(cls, "getPhraseList", "()Ljava/util/List;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          FieldPhraseList::FieldPhraseList(const JArray< FieldPhraseList > & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_e0573fb6, a0.this$)) {}

          FieldPhraseList::FieldPhraseList(const ::org::apache::lucene::search::vectorhighlight::FieldTermStack & a0, const ::org::apache::lucene::search::vectorhighlight::FieldQuery & a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_ed2eefc8, a0.this$, a1.this$)) {}

          FieldPhraseList::FieldPhraseList(const ::org::apache::lucene::search::vectorhighlight::FieldTermStack & a0, const ::org::apache::lucene::search::vectorhighlight::FieldQuery & a1, jint a2) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_5d494a16, a0.this$, a1.this$, a2)) {}

          void FieldPhraseList::addIfNoOverlap(const ::org::apache::lucene::search::vectorhighlight::FieldPhraseList$WeightedPhraseInfo & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_addIfNoOverlap_3f58e089], a0.this$);
          }

          ::java::util::List FieldPhraseList::getPhraseList() const
          {
            return ::java::util::List(env->callObjectMethod(this$, mids$[mid_getPhraseList_87851566]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace vectorhighlight {
          static PyObject *t_FieldPhraseList_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_FieldPhraseList_instance_(PyTypeObject *type, PyObject *arg);
          static int t_FieldPhraseList_init_(t_FieldPhraseList *self, PyObject *args, PyObject *kwds);
          static PyObject *t_FieldPhraseList_addIfNoOverlap(t_FieldPhraseList *self, PyObject *arg);
          static PyObject *t_FieldPhraseList_getPhraseList(t_FieldPhraseList *self);
          static PyObject *t_FieldPhraseList_get__phraseList(t_FieldPhraseList *self, void *data);
          static PyGetSetDef t_FieldPhraseList__fields_[] = {
            DECLARE_GET_FIELD(t_FieldPhraseList, phraseList),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_FieldPhraseList__methods_[] = {
            DECLARE_METHOD(t_FieldPhraseList, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FieldPhraseList, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FieldPhraseList, addIfNoOverlap, METH_O),
            DECLARE_METHOD(t_FieldPhraseList, getPhraseList, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(FieldPhraseList, t_FieldPhraseList, ::java::lang::Object, FieldPhraseList, t_FieldPhraseList_init_, 0, 0, t_FieldPhraseList__fields_, 0, 0);

          void t_FieldPhraseList::install(PyObject *module)
          {
            installType(&PY_TYPE(FieldPhraseList), module, "FieldPhraseList", 0);
            PyDict_SetItemString(PY_TYPE(FieldPhraseList).tp_dict, "WeightedPhraseInfo", make_descriptor(&PY_TYPE(FieldPhraseList$WeightedPhraseInfo)));
          }

          void t_FieldPhraseList::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(FieldPhraseList).tp_dict, "class_", make_descriptor(FieldPhraseList::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(FieldPhraseList).tp_dict, "wrapfn_", make_descriptor(t_FieldPhraseList::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(FieldPhraseList).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_FieldPhraseList_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, FieldPhraseList::initializeClass, 1)))
              return NULL;
            return t_FieldPhraseList::wrap_Object(FieldPhraseList(((t_FieldPhraseList *) arg)->object.this$));
          }
          static PyObject *t_FieldPhraseList_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, FieldPhraseList::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_FieldPhraseList_init_(t_FieldPhraseList *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                JArray< FieldPhraseList > a0((jobject) NULL);
                FieldPhraseList object((jobject) NULL);

                if (!parseArgs(args, "[k", FieldPhraseList::initializeClass, &a0))
                {
                  INT_CALL(object = FieldPhraseList(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 2:
              {
                ::org::apache::lucene::search::vectorhighlight::FieldTermStack a0((jobject) NULL);
                ::org::apache::lucene::search::vectorhighlight::FieldQuery a1((jobject) NULL);
                FieldPhraseList object((jobject) NULL);

                if (!parseArgs(args, "kk", ::org::apache::lucene::search::vectorhighlight::FieldTermStack::initializeClass, ::org::apache::lucene::search::vectorhighlight::FieldQuery::initializeClass, &a0, &a1))
                {
                  INT_CALL(object = FieldPhraseList(a0, a1));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 3:
              {
                ::org::apache::lucene::search::vectorhighlight::FieldTermStack a0((jobject) NULL);
                ::org::apache::lucene::search::vectorhighlight::FieldQuery a1((jobject) NULL);
                jint a2;
                FieldPhraseList object((jobject) NULL);

                if (!parseArgs(args, "kkI", ::org::apache::lucene::search::vectorhighlight::FieldTermStack::initializeClass, ::org::apache::lucene::search::vectorhighlight::FieldQuery::initializeClass, &a0, &a1, &a2))
                {
                  INT_CALL(object = FieldPhraseList(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_FieldPhraseList_addIfNoOverlap(t_FieldPhraseList *self, PyObject *arg)
          {
            ::org::apache::lucene::search::vectorhighlight::FieldPhraseList$WeightedPhraseInfo a0((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::search::vectorhighlight::FieldPhraseList$WeightedPhraseInfo::initializeClass, &a0))
            {
              OBJ_CALL(self->object.addIfNoOverlap(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "addIfNoOverlap", arg);
            return NULL;
          }

          static PyObject *t_FieldPhraseList_getPhraseList(t_FieldPhraseList *self)
          {
            ::java::util::List result((jobject) NULL);
            OBJ_CALL(result = self->object.getPhraseList());
            return ::java::util::t_List::wrap_Object(result, &::org::apache::lucene::search::vectorhighlight::PY_TYPE(FieldPhraseList$WeightedPhraseInfo));
          }

          static PyObject *t_FieldPhraseList_get__phraseList(t_FieldPhraseList *self, void *data)
          {
            ::java::util::List value((jobject) NULL);
            OBJ_CALL(value = self->object.getPhraseList());
            return ::java::util::t_List::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/sandbox/queries/regex/RegexCapabilities.h"
#include "org/apache/lucene/sandbox/queries/regex/RegexCapabilities$RegexMatcher.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace sandbox {
        namespace queries {
          namespace regex {

            ::java::lang::Class *RegexCapabilities::class$ = NULL;
            jmethodID *RegexCapabilities::mids$ = NULL;
            bool RegexCapabilities::live$ = false;

            jclass RegexCapabilities::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/sandbox/queries/regex/RegexCapabilities");

                mids$ = new jmethodID[max_mid];
                mids$[mid_compile_3b00aa76] = env->getMethodID(cls, "compile", "(Ljava/lang/String;)Lorg/apache/lucene/sandbox/queries/regex/RegexCapabilities$RegexMatcher;");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            ::org::apache::lucene::sandbox::queries::regex::RegexCapabilities$RegexMatcher RegexCapabilities::compile(const ::java::lang::String & a0) const
            {
              return ::org::apache::lucene::sandbox::queries::regex::RegexCapabilities$RegexMatcher(env->callObjectMethod(this$, mids$[mid_compile_3b00aa76], a0.this$));
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace sandbox {
        namespace queries {
          namespace regex {
            static PyObject *t_RegexCapabilities_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_RegexCapabilities_instance_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_RegexCapabilities_compile(t_RegexCapabilities *self, PyObject *arg);

            static PyMethodDef t_RegexCapabilities__methods_[] = {
              DECLARE_METHOD(t_RegexCapabilities, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_RegexCapabilities, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_RegexCapabilities, compile, METH_O),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(RegexCapabilities, t_RegexCapabilities, ::java::lang::Object, RegexCapabilities, abstract_init, 0, 0, 0, 0, 0);

            void t_RegexCapabilities::install(PyObject *module)
            {
              installType(&PY_TYPE(RegexCapabilities), module, "RegexCapabilities", 0);
              PyDict_SetItemString(PY_TYPE(RegexCapabilities).tp_dict, "RegexMatcher", make_descriptor(&PY_TYPE(RegexCapabilities$RegexMatcher)));
            }

            void t_RegexCapabilities::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(RegexCapabilities).tp_dict, "class_", make_descriptor(RegexCapabilities::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(RegexCapabilities).tp_dict, "wrapfn_", make_descriptor(t_RegexCapabilities::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(RegexCapabilities).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_RegexCapabilities_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, RegexCapabilities::initializeClass, 1)))
                return NULL;
              return t_RegexCapabilities::wrap_Object(RegexCapabilities(((t_RegexCapabilities *) arg)->object.this$));
            }
            static PyObject *t_RegexCapabilities_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, RegexCapabilities::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static PyObject *t_RegexCapabilities_compile(t_RegexCapabilities *self, PyObject *arg)
            {
              ::java::lang::String a0((jobject) NULL);
              ::org::apache::lucene::sandbox::queries::regex::RegexCapabilities$RegexMatcher result((jobject) NULL);

              if (!parseArg(arg, "s", &a0))
              {
                OBJ_CALL(result = self->object.compile(a0));
                return ::org::apache::lucene::sandbox::queries::regex::t_RegexCapabilities$RegexMatcher::wrap_Object(result);
              }

              PyErr_SetArgsError((PyObject *) self, "compile", arg);
              return NULL;
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/path/PathHierarchyTokenizer.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/util/AttributeFactory.h"
#include "java/io/Reader.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace path {

          ::java::lang::Class *PathHierarchyTokenizer::class$ = NULL;
          jmethodID *PathHierarchyTokenizer::mids$ = NULL;
          bool PathHierarchyTokenizer::live$ = false;
          jchar PathHierarchyTokenizer::DEFAULT_DELIMITER = (jchar) 0;
          jint PathHierarchyTokenizer::DEFAULT_SKIP = (jint) 0;

          jclass PathHierarchyTokenizer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/path/PathHierarchyTokenizer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_cf2e3c10] = env->getMethodID(cls, "<init>", "(Ljava/io/Reader;)V");
              mids$[mid_init$_8c604f56] = env->getMethodID(cls, "<init>", "(Ljava/io/Reader;I)V");
              mids$[mid_init$_944d83a2] = env->getMethodID(cls, "<init>", "(Ljava/io/Reader;IC)V");
              mids$[mid_init$_94478bac] = env->getMethodID(cls, "<init>", "(Ljava/io/Reader;CC)V");
              mids$[mid_init$_94f21e72] = env->getMethodID(cls, "<init>", "(Ljava/io/Reader;CCI)V");
              mids$[mid_init$_df655116] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/AttributeFactory;Ljava/io/Reader;CCI)V");
              mids$[mid_init$_5df3b604] = env->getMethodID(cls, "<init>", "(Ljava/io/Reader;ICCI)V");
              mids$[mid_init$_0b338d38] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/AttributeFactory;Ljava/io/Reader;ICCI)V");
              mids$[mid_end_54c6a166] = env->getMethodID(cls, "end", "()V");
              mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");
              mids$[mid_reset_54c6a166] = env->getMethodID(cls, "reset", "()V");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              DEFAULT_DELIMITER = env->getStaticCharField(cls, "DEFAULT_DELIMITER");
              DEFAULT_SKIP = env->getStaticIntField(cls, "DEFAULT_SKIP");
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          PathHierarchyTokenizer::PathHierarchyTokenizer(const ::java::io::Reader & a0) : ::org::apache::lucene::analysis::Tokenizer(env->newObject(initializeClass, &mids$, mid_init$_cf2e3c10, a0.this$)) {}

          PathHierarchyTokenizer::PathHierarchyTokenizer(const ::java::io::Reader & a0, jint a1) : ::org::apache::lucene::analysis::Tokenizer(env->newObject(initializeClass, &mids$, mid_init$_8c604f56, a0.this$, a1)) {}

          PathHierarchyTokenizer::PathHierarchyTokenizer(const ::java::io::Reader & a0, jint a1, jchar a2) : ::org::apache::lucene::analysis::Tokenizer(env->newObject(initializeClass, &mids$, mid_init$_944d83a2, a0.this$, a1, a2)) {}

          PathHierarchyTokenizer::PathHierarchyTokenizer(const ::java::io::Reader & a0, jchar a1, jchar a2) : ::org::apache::lucene::analysis::Tokenizer(env->newObject(initializeClass, &mids$, mid_init$_94478bac, a0.this$, a1, a2)) {}

          PathHierarchyTokenizer::PathHierarchyTokenizer(const ::java::io::Reader & a0, jchar a1, jchar a2, jint a3) : ::org::apache::lucene::analysis::Tokenizer(env->newObject(initializeClass, &mids$, mid_init$_94f21e72, a0.this$, a1, a2, a3)) {}

          PathHierarchyTokenizer::PathHierarchyTokenizer(const ::org::apache::lucene::util::AttributeFactory & a0, const ::java::io::Reader & a1, jchar a2, jchar a3, jint a4) : ::org::apache::lucene::analysis::Tokenizer(env->newObject(initializeClass, &mids$, mid_init$_df655116, a0.this$, a1.this$, a2, a3, a4)) {}

          PathHierarchyTokenizer::PathHierarchyTokenizer(const ::java::io::Reader & a0, jint a1, jchar a2, jchar a3, jint a4) : ::org::apache::lucene::analysis::Tokenizer(env->newObject(initializeClass, &mids$, mid_init$_5df3b604, a0.this$, a1, a2, a3, a4)) {}

          PathHierarchyTokenizer::PathHierarchyTokenizer(const ::org::apache::lucene::util::AttributeFactory & a0, const ::java::io::Reader & a1, jint a2, jchar a3, jchar a4, jint a5) : ::org::apache::lucene::analysis::Tokenizer(env->newObject(initializeClass, &mids$, mid_init$_0b338d38, a0.this$, a1.this$, a2, a3, a4, a5)) {}

          void PathHierarchyTokenizer::end() const
          {
            env->callVoidMethod(this$, mids$[mid_end_54c6a166]);
          }

          jboolean PathHierarchyTokenizer::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_54c6a16a]);
          }

          void PathHierarchyTokenizer::reset() const
          {
            env->callVoidMethod(this$, mids$[mid_reset_54c6a166]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace path {
          static PyObject *t_PathHierarchyTokenizer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PathHierarchyTokenizer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_PathHierarchyTokenizer_init_(t_PathHierarchyTokenizer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_PathHierarchyTokenizer_end(t_PathHierarchyTokenizer *self, PyObject *args);
          static PyObject *t_PathHierarchyTokenizer_incrementToken(t_PathHierarchyTokenizer *self, PyObject *args);
          static PyObject *t_PathHierarchyTokenizer_reset(t_PathHierarchyTokenizer *self, PyObject *args);

          static PyMethodDef t_PathHierarchyTokenizer__methods_[] = {
            DECLARE_METHOD(t_PathHierarchyTokenizer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PathHierarchyTokenizer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PathHierarchyTokenizer, end, METH_VARARGS),
            DECLARE_METHOD(t_PathHierarchyTokenizer, incrementToken, METH_VARARGS),
            DECLARE_METHOD(t_PathHierarchyTokenizer, reset, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(PathHierarchyTokenizer, t_PathHierarchyTokenizer, ::org::apache::lucene::analysis::Tokenizer, PathHierarchyTokenizer, t_PathHierarchyTokenizer_init_, 0, 0, 0, 0, 0);

          void t_PathHierarchyTokenizer::install(PyObject *module)
          {
            installType(&PY_TYPE(PathHierarchyTokenizer), module, "PathHierarchyTokenizer", 0);
          }

          void t_PathHierarchyTokenizer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(PathHierarchyTokenizer).tp_dict, "class_", make_descriptor(PathHierarchyTokenizer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(PathHierarchyTokenizer).tp_dict, "wrapfn_", make_descriptor(t_PathHierarchyTokenizer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(PathHierarchyTokenizer).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(PathHierarchyTokenizer::initializeClass);
            PyDict_SetItemString(PY_TYPE(PathHierarchyTokenizer).tp_dict, "DEFAULT_DELIMITER", make_descriptor(PathHierarchyTokenizer::DEFAULT_DELIMITER));
            PyDict_SetItemString(PY_TYPE(PathHierarchyTokenizer).tp_dict, "DEFAULT_SKIP", make_descriptor(PathHierarchyTokenizer::DEFAULT_SKIP));
          }

          static PyObject *t_PathHierarchyTokenizer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, PathHierarchyTokenizer::initializeClass, 1)))
              return NULL;
            return t_PathHierarchyTokenizer::wrap_Object(PathHierarchyTokenizer(((t_PathHierarchyTokenizer *) arg)->object.this$));
          }
          static PyObject *t_PathHierarchyTokenizer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, PathHierarchyTokenizer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_PathHierarchyTokenizer_init_(t_PathHierarchyTokenizer *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::java::io::Reader a0((jobject) NULL);
                PathHierarchyTokenizer object((jobject) NULL);

                if (!parseArgs(args, "k", ::java::io::Reader::initializeClass, &a0))
                {
                  INT_CALL(object = PathHierarchyTokenizer(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 2:
              {
                ::java::io::Reader a0((jobject) NULL);
                jint a1;
                PathHierarchyTokenizer object((jobject) NULL);

                if (!parseArgs(args, "kI", ::java::io::Reader::initializeClass, &a0, &a1))
                {
                  INT_CALL(object = PathHierarchyTokenizer(a0, a1));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 3:
              {
                ::java::io::Reader a0((jobject) NULL);
                jint a1;
                jchar a2;
                PathHierarchyTokenizer object((jobject) NULL);

                if (!parseArgs(args, "kIC", ::java::io::Reader::initializeClass, &a0, &a1, &a2))
                {
                  INT_CALL(object = PathHierarchyTokenizer(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
              {
                ::java::io::Reader a0((jobject) NULL);
                jchar a1;
                jchar a2;
                PathHierarchyTokenizer object((jobject) NULL);

                if (!parseArgs(args, "kCC", ::java::io::Reader::initializeClass, &a0, &a1, &a2))
                {
                  INT_CALL(object = PathHierarchyTokenizer(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 4:
              {
                ::java::io::Reader a0((jobject) NULL);
                jchar a1;
                jchar a2;
                jint a3;
                PathHierarchyTokenizer object((jobject) NULL);

                if (!parseArgs(args, "kCCI", ::java::io::Reader::initializeClass, &a0, &a1, &a2, &a3))
                {
                  INT_CALL(object = PathHierarchyTokenizer(a0, a1, a2, a3));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 5:
              {
                ::org::apache::lucene::util::AttributeFactory a0((jobject) NULL);
                ::java::io::Reader a1((jobject) NULL);
                jchar a2;
                jchar a3;
                jint a4;
                PathHierarchyTokenizer object((jobject) NULL);

                if (!parseArgs(args, "kkCCI", ::org::apache::lucene::util::AttributeFactory::initializeClass, ::java::io::Reader::initializeClass, &a0, &a1, &a2, &a3, &a4))
                {
                  INT_CALL(object = PathHierarchyTokenizer(a0, a1, a2, a3, a4));
                  self->object = object;
                  break;
                }
              }
              {
                ::java::io::Reader a0((jobject) NULL);
                jint a1;
                jchar a2;
                jchar a3;
                jint a4;
                PathHierarchyTokenizer object((jobject) NULL);

                if (!parseArgs(args, "kICCI", ::java::io::Reader::initializeClass, &a0, &a1, &a2, &a3, &a4))
                {
                  INT_CALL(object = PathHierarchyTokenizer(a0, a1, a2, a3, a4));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 6:
              {
                ::org::apache::lucene::util::AttributeFactory a0((jobject) NULL);
                ::java::io::Reader a1((jobject) NULL);
                jint a2;
                jchar a3;
                jchar a4;
                jint a5;
                PathHierarchyTokenizer object((jobject) NULL);

                if (!parseArgs(args, "kkICCI", ::org::apache::lucene::util::AttributeFactory::initializeClass, ::java::io::Reader::initializeClass, &a0, &a1, &a2, &a3, &a4, &a5))
                {
                  INT_CALL(object = PathHierarchyTokenizer(a0, a1, a2, a3, a4, a5));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_PathHierarchyTokenizer_end(t_PathHierarchyTokenizer *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.end());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(PathHierarchyTokenizer), (PyObject *) self, "end", args, 2);
          }

          static PyObject *t_PathHierarchyTokenizer_incrementToken(t_PathHierarchyTokenizer *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(PathHierarchyTokenizer), (PyObject *) self, "incrementToken", args, 2);
          }

          static PyObject *t_PathHierarchyTokenizer_reset(t_PathHierarchyTokenizer *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.reset());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(PathHierarchyTokenizer), (PyObject *) self, "reset", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/FieldCache$CacheEntry.h"
#include "org/apache/lucene/util/Accountable.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *FieldCache$CacheEntry::class$ = NULL;
        jmethodID *FieldCache$CacheEntry::mids$ = NULL;
        bool FieldCache$CacheEntry::live$ = false;

        jclass FieldCache$CacheEntry::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/FieldCache$CacheEntry");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_6f799b58] = env->getMethodID(cls, "<init>", "(Ljava/lang/Object;Ljava/lang/String;Ljava/lang/Class;Ljava/lang/Object;Lorg/apache/lucene/util/Accountable;)V");
            mids$[mid_getCacheType_44a5f2c9] = env->getMethodID(cls, "getCacheType", "()Ljava/lang/Class;");
            mids$[mid_getCustom_846352c3] = env->getMethodID(cls, "getCustom", "()Ljava/lang/Object;");
            mids$[mid_getEstimatedSize_14c7b5c5] = env->getMethodID(cls, "getEstimatedSize", "()Ljava/lang/String;");
            mids$[mid_getFieldName_14c7b5c5] = env->getMethodID(cls, "getFieldName", "()Ljava/lang/String;");
            mids$[mid_getReaderKey_846352c3] = env->getMethodID(cls, "getReaderKey", "()Ljava/lang/Object;");
            mids$[mid_getValue_846352c3] = env->getMethodID(cls, "getValue", "()Ljava/lang/Object;");
            mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        FieldCache$CacheEntry::FieldCache$CacheEntry(const ::java::lang::Object & a0, const ::java::lang::String & a1, const ::java::lang::Class & a2, const ::java::lang::Object & a3, const ::org::apache::lucene::util::Accountable & a4) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_6f799b58, a0.this$, a1.this$, a2.this$, a3.this$, a4.this$)) {}

        ::java::lang::Class FieldCache$CacheEntry::getCacheType() const
        {
          return ::java::lang::Class(env->callObjectMethod(this$, mids$[mid_getCacheType_44a5f2c9]));
        }

        ::java::lang::Object FieldCache$CacheEntry::getCustom() const
        {
          return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_getCustom_846352c3]));
        }

        ::java::lang::String FieldCache$CacheEntry::getEstimatedSize() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getEstimatedSize_14c7b5c5]));
        }

        ::java::lang::String FieldCache$CacheEntry::getFieldName() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getFieldName_14c7b5c5]));
        }

        ::java::lang::Object FieldCache$CacheEntry::getReaderKey() const
        {
          return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_getReaderKey_846352c3]));
        }

        ::java::lang::Object FieldCache$CacheEntry::getValue() const
        {
          return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_getValue_846352c3]));
        }

        ::java::lang::String FieldCache$CacheEntry::toString() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_FieldCache$CacheEntry_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FieldCache$CacheEntry_instance_(PyTypeObject *type, PyObject *arg);
        static int t_FieldCache$CacheEntry_init_(t_FieldCache$CacheEntry *self, PyObject *args, PyObject *kwds);
        static PyObject *t_FieldCache$CacheEntry_getCacheType(t_FieldCache$CacheEntry *self);
        static PyObject *t_FieldCache$CacheEntry_getCustom(t_FieldCache$CacheEntry *self);
        static PyObject *t_FieldCache$CacheEntry_getEstimatedSize(t_FieldCache$CacheEntry *self);
        static PyObject *t_FieldCache$CacheEntry_getFieldName(t_FieldCache$CacheEntry *self);
        static PyObject *t_FieldCache$CacheEntry_getReaderKey(t_FieldCache$CacheEntry *self);
        static PyObject *t_FieldCache$CacheEntry_getValue(t_FieldCache$CacheEntry *self);
        static PyObject *t_FieldCache$CacheEntry_toString(t_FieldCache$CacheEntry *self, PyObject *args);
        static PyObject *t_FieldCache$CacheEntry_get__cacheType(t_FieldCache$CacheEntry *self, void *data);
        static PyObject *t_FieldCache$CacheEntry_get__custom(t_FieldCache$CacheEntry *self, void *data);
        static PyObject *t_FieldCache$CacheEntry_get__estimatedSize(t_FieldCache$CacheEntry *self, void *data);
        static PyObject *t_FieldCache$CacheEntry_get__fieldName(t_FieldCache$CacheEntry *self, void *data);
        static PyObject *t_FieldCache$CacheEntry_get__readerKey(t_FieldCache$CacheEntry *self, void *data);
        static PyObject *t_FieldCache$CacheEntry_get__value(t_FieldCache$CacheEntry *self, void *data);
        static PyGetSetDef t_FieldCache$CacheEntry__fields_[] = {
          DECLARE_GET_FIELD(t_FieldCache$CacheEntry, cacheType),
          DECLARE_GET_FIELD(t_FieldCache$CacheEntry, custom),
          DECLARE_GET_FIELD(t_FieldCache$CacheEntry, estimatedSize),
          DECLARE_GET_FIELD(t_FieldCache$CacheEntry, fieldName),
          DECLARE_GET_FIELD(t_FieldCache$CacheEntry, readerKey),
          DECLARE_GET_FIELD(t_FieldCache$CacheEntry, value),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_FieldCache$CacheEntry__methods_[] = {
          DECLARE_METHOD(t_FieldCache$CacheEntry, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FieldCache$CacheEntry, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FieldCache$CacheEntry, getCacheType, METH_NOARGS),
          DECLARE_METHOD(t_FieldCache$CacheEntry, getCustom, METH_NOARGS),
          DECLARE_METHOD(t_FieldCache$CacheEntry, getEstimatedSize, METH_NOARGS),
          DECLARE_METHOD(t_FieldCache$CacheEntry, getFieldName, METH_NOARGS),
          DECLARE_METHOD(t_FieldCache$CacheEntry, getReaderKey, METH_NOARGS),
          DECLARE_METHOD(t_FieldCache$CacheEntry, getValue, METH_NOARGS),
          DECLARE_METHOD(t_FieldCache$CacheEntry, toString, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(FieldCache$CacheEntry, t_FieldCache$CacheEntry, ::java::lang::Object, FieldCache$CacheEntry, t_FieldCache$CacheEntry_init_, 0, 0, t_FieldCache$CacheEntry__fields_, 0, 0);

        void t_FieldCache$CacheEntry::install(PyObject *module)
        {
          installType(&PY_TYPE(FieldCache$CacheEntry), module, "FieldCache$CacheEntry", 0);
        }

        void t_FieldCache$CacheEntry::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(FieldCache$CacheEntry).tp_dict, "class_", make_descriptor(FieldCache$CacheEntry::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(FieldCache$CacheEntry).tp_dict, "wrapfn_", make_descriptor(t_FieldCache$CacheEntry::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(FieldCache$CacheEntry).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_FieldCache$CacheEntry_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, FieldCache$CacheEntry::initializeClass, 1)))
            return NULL;
          return t_FieldCache$CacheEntry::wrap_Object(FieldCache$CacheEntry(((t_FieldCache$CacheEntry *) arg)->object.this$));
        }
        static PyObject *t_FieldCache$CacheEntry_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, FieldCache$CacheEntry::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_FieldCache$CacheEntry_init_(t_FieldCache$CacheEntry *self, PyObject *args, PyObject *kwds)
        {
          ::java::lang::Object a0((jobject) NULL);
          ::java::lang::String a1((jobject) NULL);
          ::java::lang::Class a2((jobject) NULL);
          PyTypeObject **p2;
          ::java::lang::Object a3((jobject) NULL);
          ::org::apache::lucene::util::Accountable a4((jobject) NULL);
          FieldCache$CacheEntry object((jobject) NULL);

          if (!parseArgs(args, "osKok", ::java::lang::Class::initializeClass, ::org::apache::lucene::util::Accountable::initializeClass, &a0, &a1, &a2, &p2, ::java::lang::t_Class::parameters_, &a3, &a4))
          {
            INT_CALL(object = FieldCache$CacheEntry(a0, a1, a2, a3, a4));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_FieldCache$CacheEntry_getCacheType(t_FieldCache$CacheEntry *self)
        {
          ::java::lang::Class result((jobject) NULL);
          OBJ_CALL(result = self->object.getCacheType());
          return ::java::lang::t_Class::wrap_Object(result);
        }

        static PyObject *t_FieldCache$CacheEntry_getCustom(t_FieldCache$CacheEntry *self)
        {
          ::java::lang::Object result((jobject) NULL);
          OBJ_CALL(result = self->object.getCustom());
          return ::java::lang::t_Object::wrap_Object(result);
        }

        static PyObject *t_FieldCache$CacheEntry_getEstimatedSize(t_FieldCache$CacheEntry *self)
        {
          ::java::lang::String result((jobject) NULL);
          OBJ_CALL(result = self->object.getEstimatedSize());
          return j2p(result);
        }

        static PyObject *t_FieldCache$CacheEntry_getFieldName(t_FieldCache$CacheEntry *self)
        {
          ::java::lang::String result((jobject) NULL);
          OBJ_CALL(result = self->object.getFieldName());
          return j2p(result);
        }

        static PyObject *t_FieldCache$CacheEntry_getReaderKey(t_FieldCache$CacheEntry *self)
        {
          ::java::lang::Object result((jobject) NULL);
          OBJ_CALL(result = self->object.getReaderKey());
          return ::java::lang::t_Object::wrap_Object(result);
        }

        static PyObject *t_FieldCache$CacheEntry_getValue(t_FieldCache$CacheEntry *self)
        {
          ::java::lang::Object result((jobject) NULL);
          OBJ_CALL(result = self->object.getValue());
          return ::java::lang::t_Object::wrap_Object(result);
        }

        static PyObject *t_FieldCache$CacheEntry_toString(t_FieldCache$CacheEntry *self, PyObject *args)
        {
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.toString());
            return j2p(result);
          }

          return callSuper(&PY_TYPE(FieldCache$CacheEntry), (PyObject *) self, "toString", args, 2);
        }

        static PyObject *t_FieldCache$CacheEntry_get__cacheType(t_FieldCache$CacheEntry *self, void *data)
        {
          ::java::lang::Class value((jobject) NULL);
          OBJ_CALL(value = self->object.getCacheType());
          return ::java::lang::t_Class::wrap_Object(value);
        }

        static PyObject *t_FieldCache$CacheEntry_get__custom(t_FieldCache$CacheEntry *self, void *data)
        {
          ::java::lang::Object value((jobject) NULL);
          OBJ_CALL(value = self->object.getCustom());
          return ::java::lang::t_Object::wrap_Object(value);
        }

        static PyObject *t_FieldCache$CacheEntry_get__estimatedSize(t_FieldCache$CacheEntry *self, void *data)
        {
          ::java::lang::String value((jobject) NULL);
          OBJ_CALL(value = self->object.getEstimatedSize());
          return j2p(value);
        }

        static PyObject *t_FieldCache$CacheEntry_get__fieldName(t_FieldCache$CacheEntry *self, void *data)
        {
          ::java::lang::String value((jobject) NULL);
          OBJ_CALL(value = self->object.getFieldName());
          return j2p(value);
        }

        static PyObject *t_FieldCache$CacheEntry_get__readerKey(t_FieldCache$CacheEntry *self, void *data)
        {
          ::java::lang::Object value((jobject) NULL);
          OBJ_CALL(value = self->object.getReaderKey());
          return ::java::lang::t_Object::wrap_Object(value);
        }

        static PyObject *t_FieldCache$CacheEntry_get__value(t_FieldCache$CacheEntry *self, void *data)
        {
          ::java::lang::Object value((jobject) NULL);
          OBJ_CALL(value = self->object.getValue());
          return ::java::lang::t_Object::wrap_Object(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/pylucene/util/PythonList.h"
#include "java/lang/IndexOutOfBoundsException.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Class.h"
#include "java/util/ListIterator.h"
#include "java/util/Iterator.h"
#include "java/util/Collection.h"
#include "java/lang/Throwable.h"
#include "java/util/List.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace pylucene {
      namespace util {

        ::java::lang::Class *PythonList::class$ = NULL;
        jmethodID *PythonList::mids$ = NULL;
        bool PythonList::live$ = false;

        jclass PythonList::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/pylucene/util/PythonList");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_add_290588e2] = env->getMethodID(cls, "add", "(Ljava/lang/Object;)Z");
            mids$[mid_add_f7cd74a4] = env->getMethodID(cls, "add", "(ILjava/lang/Object;)V");
            mids$[mid_addAll_9bfb3701] = env->getMethodID(cls, "addAll", "(Ljava/util/Collection;)Z");
            mids$[mid_addAll_006cd2b7] = env->getMethodID(cls, "addAll", "(ILjava/util/Collection;)Z");
            mids$[mid_clear_54c6a166] = env->getMethodID(cls, "clear", "()V");
            mids$[mid_contains_290588e2] = env->getMethodID(cls, "contains", "(Ljava/lang/Object;)Z");
            mids$[mid_containsAll_9bfb3701] = env->getMethodID(cls, "containsAll", "(Ljava/util/Collection;)Z");
            mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
            mids$[mid_finalize_54c6a166] = env->getMethodID(cls, "finalize", "()V");
            mids$[mid_get_29be6a55] = env->getMethodID(cls, "get", "(I)Ljava/lang/Object;");
            mids$[mid_indexOf_290588f1] = env->getMethodID(cls, "indexOf", "(Ljava/lang/Object;)I");
            mids$[mid_isEmpty_54c6a16a] = env->getMethodID(cls, "isEmpty", "()Z");
            mids$[mid_iterator_40858c90] = env->getMethodID(cls, "iterator", "()Ljava/util/Iterator;");
            mids$[mid_lastIndexOf_290588f1] = env->getMethodID(cls, "lastIndexOf", "(Ljava/lang/Object;)I");
            mids$[mid_listIterator_b5be4e14] = env->getMethodID(cls, "listIterator", "()Ljava/util/ListIterator;");
            mids$[mid_listIterator_4145ee6a] = env->getMethodID(cls, "listIterator", "(I)Ljava/util/ListIterator;");
            mids$[mid_pythonDecRef_54c6a166] = env->getMethodID(cls, "pythonDecRef", "()V");
            mids$[mid_pythonExtension_54c6a17a] = env->getMethodID(cls, "pythonExtension", "()J");
            mids$[mid_pythonExtension_0ee6df2f] = env->getMethodID(cls, "pythonExtension", "(J)V");
            mids$[mid_remove_29be6a55] = env->getMethodID(cls, "remove", "(I)Ljava/lang/Object;");
            mids$[mid_remove_290588e2] = env->getMethodID(cls, "remove", "(Ljava/lang/Object;)Z");
            mids$[mid_removeAll_9bfb3701] = env->getMethodID(cls, "removeAll", "(Ljava/util/Collection;)Z");
            mids$[mid_retainAll_9bfb3701] = env->getMethodID(cls, "retainAll", "(Ljava/util/Collection;)Z");
            mids$[mid_set_211591b1] = env->getMethodID(cls, "set", "(ILjava/lang/Object;)Ljava/lang/Object;");
            mids$[mid_size_54c6a179] = env->getMethodID(cls, "size", "()I");
            mids$[mid_subList_6bc635fe] = env->getMethodID(cls, "subList", "(II)Ljava/util/List;");
            mids$[mid_toArray_94e49c77] = env->getMethodID(cls, "toArray", "()[Ljava/lang/Object;");
            mids$[mid_toArray_ae67dbcf] = env->getMethodID(cls, "toArray", "([Ljava/lang/Object;)[Ljava/lang/Object;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        PythonList::PythonList() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        jboolean PythonList::equals(const ::java::lang::Object & a0) const
        {
          return env->callNonvirtualBooleanMethod(this$, (jclass) ::java::lang::Object::class$->this$, ::java::lang::Object::mids$[::java::lang::Object::mid_equals_290588e2], a0.this$);
        }

        void PythonList::finalize() const
        {
          env->callVoidMethod(this$, mids$[mid_finalize_54c6a166]);
        }

        ::java::util::ListIterator PythonList::listIterator() const
        {
          return ::java::util::ListIterator(env->callObjectMethod(this$, mids$[mid_listIterator_b5be4e14]));
        }

        jlong PythonList::pythonExtension() const
        {
          return env->callLongMethod(this$, mids$[mid_pythonExtension_54c6a17a]);
        }

        void PythonList::pythonExtension(jlong a0) const
        {
          env->callVoidMethod(this$, mids$[mid_pythonExtension_0ee6df2f], a0);
        }

        ::java::lang::Object PythonList::remove(jint a0) const
        {
          return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_remove_29be6a55], a0));
        }

        jboolean PythonList::remove(const ::java::lang::Object & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_remove_290588e2], a0.this$);
        }

        ::java::util::List PythonList::subList(jint a0, jint a1) const
        {
          return ::java::util::List(env->callObjectMethod(this$, mids$[mid_subList_6bc635fe], a0, a1));
        }

        JArray< ::java::lang::Object > PythonList::toArray(const JArray< ::java::lang::Object > & a0) const
        {
          return JArray< ::java::lang::Object >(env->callObjectMethod(this$, mids$[mid_toArray_ae67dbcf], a0.this$));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace pylucene {
      namespace util {
        static PyObject *t_PythonList_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_PythonList_instance_(PyTypeObject *type, PyObject *arg);
        static int t_PythonList_init_(t_PythonList *self, PyObject *args, PyObject *kwds);
        static PyObject *t_PythonList_equals(t_PythonList *self, PyObject *args);
        static PyObject *t_PythonList_finalize(t_PythonList *self);
        static PyObject *t_PythonList_listIterator(t_PythonList *self);
        static PyObject *t_PythonList_pythonExtension(t_PythonList *self, PyObject *args);
        static PyObject *t_PythonList_remove(t_PythonList *self, PyObject *args);
        static PyObject *t_PythonList_subList(t_PythonList *self, PyObject *args);
        static PyObject *t_PythonList_toArray(t_PythonList *self, PyObject *arg);
        static jboolean JNICALL t_PythonList_add0(JNIEnv *jenv, jobject jobj, jobject a0);
        static void JNICALL t_PythonList_add1(JNIEnv *jenv, jobject jobj, jint a0, jobject a1);
        static jboolean JNICALL t_PythonList_addAll2(JNIEnv *jenv, jobject jobj, jobject a0);
        static jboolean JNICALL t_PythonList_addAll3(JNIEnv *jenv, jobject jobj, jint a0, jobject a1);
        static void JNICALL t_PythonList_clear4(JNIEnv *jenv, jobject jobj);
        static jboolean JNICALL t_PythonList_contains5(JNIEnv *jenv, jobject jobj, jobject a0);
        static jboolean JNICALL t_PythonList_containsAll6(JNIEnv *jenv, jobject jobj, jobject a0);
        static jboolean JNICALL t_PythonList_equals7(JNIEnv *jenv, jobject jobj, jobject a0);
        static jobject JNICALL t_PythonList_get8(JNIEnv *jenv, jobject jobj, jint a0);
        static jint JNICALL t_PythonList_indexOf9(JNIEnv *jenv, jobject jobj, jobject a0);
        static jboolean JNICALL t_PythonList_isEmpty10(JNIEnv *jenv, jobject jobj);
        static jobject JNICALL t_PythonList_iterator11(JNIEnv *jenv, jobject jobj);
        static jint JNICALL t_PythonList_lastIndexOf12(JNIEnv *jenv, jobject jobj, jobject a0);
        static jobject JNICALL t_PythonList_listIterator13(JNIEnv *jenv, jobject jobj, jint a0);
        static void JNICALL t_PythonList_pythonDecRef14(JNIEnv *jenv, jobject jobj);
        static jboolean JNICALL t_PythonList_removeAll15(JNIEnv *jenv, jobject jobj, jobject a0);
        static jboolean JNICALL t_PythonList_retainAll16(JNIEnv *jenv, jobject jobj, jobject a0);
        static jobject JNICALL t_PythonList_set17(JNIEnv *jenv, jobject jobj, jint a0, jobject a1);
        static jint JNICALL t_PythonList_size18(JNIEnv *jenv, jobject jobj);
        static jobject JNICALL t_PythonList_toArray19(JNIEnv *jenv, jobject jobj);
        static PyObject *t_PythonList_get__self(t_PythonList *self, void *data);
        static PyGetSetDef t_PythonList__fields_[] = {
          DECLARE_GET_FIELD(t_PythonList, self),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_PythonList__methods_[] = {
          DECLARE_METHOD(t_PythonList, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PythonList, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PythonList, equals, METH_VARARGS),
          DECLARE_METHOD(t_PythonList, finalize, METH_NOARGS),
          DECLARE_METHOD(t_PythonList, listIterator, METH_NOARGS),
          DECLARE_METHOD(t_PythonList, pythonExtension, METH_VARARGS),
          DECLARE_METHOD(t_PythonList, remove, METH_VARARGS),
          DECLARE_METHOD(t_PythonList, subList, METH_VARARGS),
          DECLARE_METHOD(t_PythonList, toArray, METH_O),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(PythonList, t_PythonList, ::java::lang::Object, PythonList, t_PythonList_init_, get_extension_iterator, 0, t_PythonList__fields_, 0, 0);

        void t_PythonList::install(PyObject *module)
        {
          installType(&PY_TYPE(PythonList), module, "PythonList", 1);
        }

        void t_PythonList::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(PythonList).tp_dict, "class_", make_descriptor(PythonList::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(PythonList).tp_dict, "wrapfn_", make_descriptor(t_PythonList::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(PythonList).tp_dict, "boxfn_", make_descriptor(boxObject));
          jclass cls = env->getClass(PythonList::initializeClass);
          JNINativeMethod methods[] = {
            { "add", "(Ljava/lang/Object;)Z", (void *) t_PythonList_add0 },
            { "add", "(ILjava/lang/Object;)V", (void *) t_PythonList_add1 },
            { "addAll", "(Ljava/util/Collection;)Z", (void *) t_PythonList_addAll2 },
            { "addAll", "(ILjava/util/Collection;)Z", (void *) t_PythonList_addAll3 },
            { "clear", "()V", (void *) t_PythonList_clear4 },
            { "contains", "(Ljava/lang/Object;)Z", (void *) t_PythonList_contains5 },
            { "containsAll", "(Ljava/util/Collection;)Z", (void *) t_PythonList_containsAll6 },
            { "equals", "(Ljava/lang/Object;)Z", (void *) t_PythonList_equals7 },
            { "get", "(I)Ljava/lang/Object;", (void *) t_PythonList_get8 },
            { "indexOf", "(Ljava/lang/Object;)I", (void *) t_PythonList_indexOf9 },
            { "isEmpty", "()Z", (void *) t_PythonList_isEmpty10 },
            { "iterator", "()Ljava/util/Iterator;", (void *) t_PythonList_iterator11 },
            { "lastIndexOf", "(Ljava/lang/Object;)I", (void *) t_PythonList_lastIndexOf12 },
            { "listIterator", "(I)Ljava/util/ListIterator;", (void *) t_PythonList_listIterator13 },
            { "pythonDecRef", "()V", (void *) t_PythonList_pythonDecRef14 },
            { "removeAll", "(Ljava/util/Collection;)Z", (void *) t_PythonList_removeAll15 },
            { "retainAll", "(Ljava/util/Collection;)Z", (void *) t_PythonList_retainAll16 },
            { "set", "(ILjava/lang/Object;)Ljava/lang/Object;", (void *) t_PythonList_set17 },
            { "size", "()I", (void *) t_PythonList_size18 },
            { "toArray", "()[Ljava/lang/Object;", (void *) t_PythonList_toArray19 },
          };
          env->registerNatives(cls, methods, 20);
        }

        static PyObject *t_PythonList_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, PythonList::initializeClass, 1)))
            return NULL;
          return t_PythonList::wrap_Object(PythonList(((t_PythonList *) arg)->object.this$));
        }
        static PyObject *t_PythonList_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, PythonList::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_PythonList_init_(t_PythonList *self, PyObject *args, PyObject *kwds)
        {
          PythonList object((jobject) NULL);

          INT_CALL(object = PythonList());
          self->object = object;

          Py_INCREF((PyObject *) self);
          self->object.pythonExtension((jlong) (Py_intptr_t) (void *) self);

          return 0;
        }

        static PyObject *t_PythonList_equals(t_PythonList *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.equals(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(PythonList), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_PythonList_finalize(t_PythonList *self)
        {
          OBJ_CALL(self->object.finalize());
          Py_RETURN_NONE;
        }

        static PyObject *t_PythonList_listIterator(t_PythonList *self)
        {
          ::java::util::ListIterator result((jobject) NULL);
          OBJ_CALL(result = self->object.listIterator());
          return ::java::util::t_ListIterator::wrap_Object(result);
        }

        static PyObject *t_PythonList_pythonExtension(t_PythonList *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 0:
            {
              jlong result;
              OBJ_CALL(result = self->object.pythonExtension());
              return PyLong_FromLongLong((PY_LONG_LONG) result);
            }
            break;
           case 1:
            {
              jlong a0;

              if (!parseArgs(args, "J", &a0))
              {
                OBJ_CALL(self->object.pythonExtension(a0));
                Py_RETURN_NONE;
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "pythonExtension", args);
          return NULL;
        }

        static PyObject *t_PythonList_remove(t_PythonList *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              jint a0;
              ::java::lang::Object result((jobject) NULL);

              if (!parseArgs(args, "I", &a0))
              {
                OBJ_CALL(result = self->object.remove(a0));
                return ::java::lang::t_Object::wrap_Object(result);
              }
            }
            {
              ::java::lang::Object a0((jobject) NULL);
              jboolean result;

              if (!parseArgs(args, "o", &a0))
              {
                OBJ_CALL(result = self->object.remove(a0));
                Py_RETURN_BOOL(result);
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "remove", args);
          return NULL;
        }

        static PyObject *t_PythonList_subList(t_PythonList *self, PyObject *args)
        {
          jint a0;
          jint a1;
          ::java::util::List result((jobject) NULL);

          if (!parseArgs(args, "II", &a0, &a1))
          {
            OBJ_CALL(result = self->object.subList(a0, a1));
            return ::java::util::t_List::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "subList", args);
          return NULL;
        }

        static PyObject *t_PythonList_toArray(t_PythonList *self, PyObject *arg)
        {
          JArray< ::java::lang::Object > a0((jobject) NULL);
          JArray< ::java::lang::Object > result((jobject) NULL);

          if (!parseArg(arg, "[o", &a0))
          {
            OBJ_CALL(result = self->object.toArray(a0));
            return JArray<jobject>(result.this$).wrap(::java::lang::t_Object::wrap_jobject);
          }

          PyErr_SetArgsError((PyObject *) self, "toArray", arg);
          return NULL;
        }

        static jboolean JNICALL t_PythonList_add0(JNIEnv *jenv, jobject jobj, jobject a0)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonList::mids$[PythonList::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          jboolean value;
          PyObject *o0 = ::java::lang::t_Object::wrap_Object(::java::lang::Object(a0));
          PyObject *result = PyObject_CallMethod(obj, "add", "O", o0);
          Py_DECREF(o0);
          if (!result)
            throwPythonError();
          else if (parseArg(result, "Z", &value))
          {
            throwTypeError("add", result);
            Py_DECREF(result);
          }
          else
          {
            Py_DECREF(result);
            return value;
          }

          return (jboolean) 0;
        }

        static void JNICALL t_PythonList_add1(JNIEnv *jenv, jobject jobj, jint a0, jobject a1)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonList::mids$[PythonList::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          PyObject *o1 = ::java::lang::t_Object::wrap_Object(::java::lang::Object(a1));
          PyObject *result = PyObject_CallMethod(obj, "add", "iO", (int) a0, o1);
          Py_DECREF(o1);
          if (!result)
            throwPythonError();
          else
            Py_DECREF(result);
        }

        static jboolean JNICALL t_PythonList_addAll2(JNIEnv *jenv, jobject jobj, jobject a0)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonList::mids$[PythonList::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          jboolean value;
          PyObject *o0 = ::java::util::t_Collection::wrap_Object(::java::util::Collection(a0));
          PyObject *result = PyObject_CallMethod(obj, "addAll", "O", o0);
          Py_DECREF(o0);
          if (!result)
            throwPythonError();
          else if (parseArg(result, "Z", &value))
          {
            throwTypeError("addAll", result);
            Py_DECREF(result);
          }
          else
          {
            Py_DECREF(result);
            return value;
          }

          return (jboolean) 0;
        }

        static jboolean JNICALL t_PythonList_addAll3(JNIEnv *jenv, jobject jobj, jint a0, jobject a1)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonList::mids$[PythonList::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          jboolean value;
          PyObject *o1 = ::java::util::t_Collection::wrap_Object(::java::util::Collection(a1));
          PyObject *result = PyObject_CallMethod(obj, "addAll", "iO", (int) a0, o1);
          Py_DECREF(o1);
          if (!result)
            throwPythonError();
          else if (parseArg(result, "Z", &value))
          {
            throwTypeError("addAll", result);
            Py_DECREF(result);
          }
          else
          {
            Py_DECREF(result);
            return value;
          }

          return (jboolean) 0;
        }

        static void JNICALL t_PythonList_clear4(JNIEnv *jenv, jobject jobj)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonList::mids$[PythonList::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          PyObject *result = PyObject_CallMethod(obj, "clear", "");
          if (!result)
            throwPythonError();
          else
            Py_DECREF(result);
        }

        static jboolean JNICALL t_PythonList_contains5(JNIEnv *jenv, jobject jobj, jobject a0)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonList::mids$[PythonList::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          jboolean value;
          PyObject *o0 = ::java::lang::t_Object::wrap_Object(::java::lang::Object(a0));
          PyObject *result = PyObject_CallMethod(obj, "contains", "O", o0);
          Py_DECREF(o0);
          if (!result)
            throwPythonError();
          else if (parseArg(result, "Z", &value))
          {
            throwTypeError("contains", result);
            Py_DECREF(result);
          }
          else
          {
            Py_DECREF(result);
            return value;
          }

          return (jboolean) 0;
        }

        static jboolean JNICALL t_PythonList_containsAll6(JNIEnv *jenv, jobject jobj, jobject a0)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonList::mids$[PythonList::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          jboolean value;
          PyObject *o0 = ::java::util::t_Collection::wrap_Object(::java::util::Collection(a0));
          PyObject *result = PyObject_CallMethod(obj, "containsAll", "O", o0);
          Py_DECREF(o0);
          if (!result)
            throwPythonError();
          else if (parseArg(result, "Z", &value))
          {
            throwTypeError("containsAll", result);
            Py_DECREF(result);
          }
          else
          {
            Py_DECREF(result);
            return value;
          }

          return (jboolean) 0;
        }

        static jboolean JNICALL t_PythonList_equals7(JNIEnv *jenv, jobject jobj, jobject a0)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonList::mids$[PythonList::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          jboolean value;
          PyObject *o0 = ::java::lang::t_Object::wrap_Object(::java::lang::Object(a0));
          PyObject *result = PyObject_CallMethod(obj, "equals", "O", o0);
          Py_DECREF(o0);
          if (!result)
            throwPythonError();
          else if (parseArg(result, "Z", &value))
          {
            throwTypeError("equals", result);
            Py_DECREF(result);
          }
          else
          {
            Py_DECREF(result);
            return value;
          }

          return (jboolean) 0;
        }

        static jobject JNICALL t_PythonList_get8(JNIEnv *jenv, jobject jobj, jint a0)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonList::mids$[PythonList::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          ::java::lang::Object value((jobject) NULL);
          PyObject *result = PyObject_CallMethod(obj, "get", "i", (int) a0);
          if (!result)
            throwPythonError();
          else if (parseArg(result, "o", &value))
          {
            throwTypeError("get", result);
            Py_DECREF(result);
          }
          else
          {
            jobj = jenv->NewLocalRef(value.this$);
            Py_DECREF(result);
            return jobj;
          }

          return (jobject) NULL;
        }

        static jint JNICALL t_PythonList_indexOf9(JNIEnv *jenv, jobject jobj, jobject a0)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonList::mids$[PythonList::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          jint value;
          PyObject *o0 = ::java::lang::t_Object::wrap_Object(::java::lang::Object(a0));
          PyObject *result = PyObject_CallMethod(obj, "indexOf", "O", o0);
          Py_DECREF(o0);
          if (!result)
            throwPythonError();
          else if (parseArg(result, "I", &value))
          {
            throwTypeError("indexOf", result);
            Py_DECREF(result);
          }
          else
          {
            Py_DECREF(result);
            return value;
          }

          return (jint) 0;
        }

        static jboolean JNICALL t_PythonList_isEmpty10(JNIEnv *jenv, jobject jobj)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonList::mids$[PythonList::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          jboolean value;
          PyObject *result = PyObject_CallMethod(obj, "isEmpty", "");
          if (!result)
            throwPythonError();
          else if (parseArg(result, "Z", &value))
          {
            throwTypeError("isEmpty", result);
            Py_DECREF(result);
          }
          else
          {
            Py_DECREF(result);
            return value;
          }

          return (jboolean) 0;
        }

        static jobject JNICALL t_PythonList_iterator11(JNIEnv *jenv, jobject jobj)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonList::mids$[PythonList::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          ::java::util::Iterator value((jobject) NULL);
          PyObject *result = PyObject_CallMethod(obj, "iterator", "");
          if (!result)
            throwPythonError();
          else if (parseArg(result, "k", ::java::util::Iterator::initializeClass, &value))
          {
            throwTypeError("iterator", result);
            Py_DECREF(result);
          }
          else
          {
            jobj = jenv->NewLocalRef(value.this$);
            Py_DECREF(result);
            return jobj;
          }

          return (jobject) NULL;
        }

        static jint JNICALL t_PythonList_lastIndexOf12(JNIEnv *jenv, jobject jobj, jobject a0)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonList::mids$[PythonList::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          jint value;
          PyObject *o0 = ::java::lang::t_Object::wrap_Object(::java::lang::Object(a0));
          PyObject *result = PyObject_CallMethod(obj, "lastIndexOf", "O", o0);
          Py_DECREF(o0);
          if (!result)
            throwPythonError();
          else if (parseArg(result, "I", &value))
          {
            throwTypeError("lastIndexOf", result);
            Py_DECREF(result);
          }
          else
          {
            Py_DECREF(result);
            return value;
          }

          return (jint) 0;
        }

        static jobject JNICALL t_PythonList_listIterator13(JNIEnv *jenv, jobject jobj, jint a0)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonList::mids$[PythonList::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          ::java::util::ListIterator value((jobject) NULL);
          PyObject *result = PyObject_CallMethod(obj, "listIterator", "i", (int) a0);
          if (!result)
            throwPythonError();
          else if (parseArg(result, "k", ::java::util::ListIterator::initializeClass, &value))
          {
            throwTypeError("listIterator", result);
            Py_DECREF(result);
          }
          else
          {
            jobj = jenv->NewLocalRef(value.this$);
            Py_DECREF(result);
            return jobj;
          }

          return (jobject) NULL;
        }

        static void JNICALL t_PythonList_pythonDecRef14(JNIEnv *jenv, jobject jobj)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonList::mids$[PythonList::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;

          if (obj != NULL)
          {
            jenv->CallVoidMethod(jobj, PythonList::mids$[PythonList::mid_pythonExtension_0ee6df2f], (jlong) 0);
            env->finalizeObject(jenv, obj);
          }
        }

        static jboolean JNICALL t_PythonList_removeAll15(JNIEnv *jenv, jobject jobj, jobject a0)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonList::mids$[PythonList::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          jboolean value;
          PyObject *o0 = ::java::util::t_Collection::wrap_Object(::java::util::Collection(a0));
          PyObject *result = PyObject_CallMethod(obj, "removeAll", "O", o0);
          Py_DECREF(o0);
          if (!result)
            throwPythonError();
          else if (parseArg(result, "Z", &value))
          {
            throwTypeError("removeAll", result);
            Py_DECREF(result);
          }
          else
          {
            Py_DECREF(result);
            return value;
          }

          return (jboolean) 0;
        }

        static jboolean JNICALL t_PythonList_retainAll16(JNIEnv *jenv, jobject jobj, jobject a0)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonList::mids$[PythonList::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          jboolean value;
          PyObject *o0 = ::java::util::t_Collection::wrap_Object(::java::util::Collection(a0));
          PyObject *result = PyObject_CallMethod(obj, "retainAll", "O", o0);
          Py_DECREF(o0);
          if (!result)
            throwPythonError();
          else if (parseArg(result, "Z", &value))
          {
            throwTypeError("retainAll", result);
            Py_DECREF(result);
          }
          else
          {
            Py_DECREF(result);
            return value;
          }

          return (jboolean) 0;
        }

        static jobject JNICALL t_PythonList_set17(JNIEnv *jenv, jobject jobj, jint a0, jobject a1)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonList::mids$[PythonList::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          ::java::lang::Object value((jobject) NULL);
          PyObject *o1 = ::java::lang::t_Object::wrap_Object(::java::lang::Object(a1));
          PyObject *result = PyObject_CallMethod(obj, "set", "iO", (int) a0, o1);
          Py_DECREF(o1);
          if (!result)
            throwPythonError();
          else if (parseArg(result, "o", &value))
          {
            throwTypeError("set", result);
            Py_DECREF(result);
          }
          else
          {
            jobj = jenv->NewLocalRef(value.this$);
            Py_DECREF(result);
            return jobj;
          }

          return (jobject) NULL;
        }

        static jint JNICALL t_PythonList_size18(JNIEnv *jenv, jobject jobj)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonList::mids$[PythonList::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          jint value;
          PyObject *result = PyObject_CallMethod(obj, "size", "");
          if (!result)
            throwPythonError();
          else if (parseArg(result, "I", &value))
          {
            throwTypeError("size", result);
            Py_DECREF(result);
          }
          else
          {
            Py_DECREF(result);
            return value;
          }

          return (jint) 0;
        }

        static jobject JNICALL t_PythonList_toArray19(JNIEnv *jenv, jobject jobj)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonList::mids$[PythonList::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          JArray< ::java::lang::Object > value((jobject) NULL);
          PyObject *result = PyObject_CallMethod(obj, "toArray", "");
          if (!result)
            throwPythonError();
          else if (parseArg(result, "[o", &value))
          {
            throwTypeError("toArray", result);
            Py_DECREF(result);
          }
          else
          {
            jobj = jenv->NewLocalRef(value.this$);
            Py_DECREF(result);
            return jobj;
          }

          return (jobject) NULL;
        }

        static PyObject *t_PythonList_get__self(t_PythonList *self, void *data)
        {
          jlong ptr;
          OBJ_CALL(ptr = self->object.pythonExtension());
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;

          if (obj != NULL)
          {
            Py_INCREF(obj);
            return obj;
          }
          else
            Py_RETURN_NONE;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queries/function/valuesource/TFValueSource.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "org/apache/lucene/queries/function/FunctionValues.h"
#include "java/lang/Class.h"
#include "java/util/Map.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {

            ::java::lang::Class *TFValueSource::class$ = NULL;
            jmethodID *TFValueSource::mids$ = NULL;
            bool TFValueSource::live$ = false;

            jclass TFValueSource::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queries/function/valuesource/TFValueSource");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_b45b6622] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Lorg/apache/lucene/util/BytesRef;)V");
                mids$[mid_getValues_4c566485] = env->getMethodID(cls, "getValues", "(Ljava/util/Map;Lorg/apache/lucene/index/AtomicReaderContext;)Lorg/apache/lucene/queries/function/FunctionValues;");
                mids$[mid_name_14c7b5c5] = env->getMethodID(cls, "name", "()Ljava/lang/String;");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            TFValueSource::TFValueSource(const ::java::lang::String & a0, const ::java::lang::String & a1, const ::java::lang::String & a2, const ::org::apache::lucene::util::BytesRef & a3) : ::org::apache::lucene::queries::function::valuesource::TermFreqValueSource(env->newObject(initializeClass, &mids$, mid_init$_b45b6622, a0.this$, a1.this$, a2.this$, a3.this$)) {}

            ::org::apache::lucene::queries::function::FunctionValues TFValueSource::getValues(const ::java::util::Map & a0, const ::org::apache::lucene::index::AtomicReaderContext & a1) const
            {
              return ::org::apache::lucene::queries::function::FunctionValues(env->callObjectMethod(this$, mids$[mid_getValues_4c566485], a0.this$, a1.this$));
            }

            ::java::lang::String TFValueSource::name() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_name_14c7b5c5]));
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {
            static PyObject *t_TFValueSource_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_TFValueSource_instance_(PyTypeObject *type, PyObject *arg);
            static int t_TFValueSource_init_(t_TFValueSource *self, PyObject *args, PyObject *kwds);
            static PyObject *t_TFValueSource_getValues(t_TFValueSource *self, PyObject *args);
            static PyObject *t_TFValueSource_name(t_TFValueSource *self, PyObject *args);

            static PyMethodDef t_TFValueSource__methods_[] = {
              DECLARE_METHOD(t_TFValueSource, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_TFValueSource, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_TFValueSource, getValues, METH_VARARGS),
              DECLARE_METHOD(t_TFValueSource, name, METH_VARARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(TFValueSource, t_TFValueSource, ::org::apache::lucene::queries::function::valuesource::TermFreqValueSource, TFValueSource, t_TFValueSource_init_, 0, 0, 0, 0, 0);

            void t_TFValueSource::install(PyObject *module)
            {
              installType(&PY_TYPE(TFValueSource), module, "TFValueSource", 0);
            }

            void t_TFValueSource::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(TFValueSource).tp_dict, "class_", make_descriptor(TFValueSource::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(TFValueSource).tp_dict, "wrapfn_", make_descriptor(t_TFValueSource::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(TFValueSource).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_TFValueSource_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, TFValueSource::initializeClass, 1)))
                return NULL;
              return t_TFValueSource::wrap_Object(TFValueSource(((t_TFValueSource *) arg)->object.this$));
            }
            static PyObject *t_TFValueSource_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, TFValueSource::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_TFValueSource_init_(t_TFValueSource *self, PyObject *args, PyObject *kwds)
            {
              ::java::lang::String a0((jobject) NULL);
              ::java::lang::String a1((jobject) NULL);
              ::java::lang::String a2((jobject) NULL);
              ::org::apache::lucene::util::BytesRef a3((jobject) NULL);
              TFValueSource object((jobject) NULL);

              if (!parseArgs(args, "sssk", ::org::apache::lucene::util::BytesRef::initializeClass, &a0, &a1, &a2, &a3))
              {
                INT_CALL(object = TFValueSource(a0, a1, a2, a3));
                self->object = object;
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_TFValueSource_getValues(t_TFValueSource *self, PyObject *args)
            {
              ::java::util::Map a0((jobject) NULL);
              PyTypeObject **p0;
              ::org::apache::lucene::index::AtomicReaderContext a1((jobject) NULL);
              ::org::apache::lucene::queries::function::FunctionValues result((jobject) NULL);

              if (!parseArgs(args, "Kk", ::java::util::Map::initializeClass, ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_, &a1))
              {
                OBJ_CALL(result = self->object.getValues(a0, a1));
                return ::org::apache::lucene::queries::function::t_FunctionValues::wrap_Object(result);
              }

              return callSuper(&PY_TYPE(TFValueSource), (PyObject *) self, "getValues", args, 2);
            }

            static PyObject *t_TFValueSource_name(t_TFValueSource *self, PyObject *args)
            {
              ::java::lang::String result((jobject) NULL);

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.name());
                return j2p(result);
              }

              return callSuper(&PY_TYPE(TFValueSource), (PyObject *) self, "name", args, 2);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/fa/PersianNormalizer.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace fa {

          ::java::lang::Class *PersianNormalizer::class$ = NULL;
          jmethodID *PersianNormalizer::mids$ = NULL;
          bool PersianNormalizer::live$ = false;
          jchar PersianNormalizer::FARSI_YEH = (jchar) 0;
          jchar PersianNormalizer::HAMZA_ABOVE = (jchar) 0;
          jchar PersianNormalizer::HEH = (jchar) 0;
          jchar PersianNormalizer::HEH_GOAL = (jchar) 0;
          jchar PersianNormalizer::HEH_YEH = (jchar) 0;
          jchar PersianNormalizer::KAF = (jchar) 0;
          jchar PersianNormalizer::KEHEH = (jchar) 0;
          jchar PersianNormalizer::YEH = (jchar) 0;
          jchar PersianNormalizer::YEH_BARREE = (jchar) 0;

          jclass PersianNormalizer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/fa/PersianNormalizer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_normalize_ec6430eb] = env->getMethodID(cls, "normalize", "([CI)I");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              FARSI_YEH = env->getStaticCharField(cls, "FARSI_YEH");
              HAMZA_ABOVE = env->getStaticCharField(cls, "HAMZA_ABOVE");
              HEH = env->getStaticCharField(cls, "HEH");
              HEH_GOAL = env->getStaticCharField(cls, "HEH_GOAL");
              HEH_YEH = env->getStaticCharField(cls, "HEH_YEH");
              KAF = env->getStaticCharField(cls, "KAF");
              KEHEH = env->getStaticCharField(cls, "KEHEH");
              YEH = env->getStaticCharField(cls, "YEH");
              YEH_BARREE = env->getStaticCharField(cls, "YEH_BARREE");
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          PersianNormalizer::PersianNormalizer() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          jint PersianNormalizer::normalize(const JArray< jchar > & a0, jint a1) const
          {
            return env->callIntMethod(this$, mids$[mid_normalize_ec6430eb], a0.this$, a1);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace fa {
          static PyObject *t_PersianNormalizer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PersianNormalizer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_PersianNormalizer_init_(t_PersianNormalizer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_PersianNormalizer_normalize(t_PersianNormalizer *self, PyObject *args);

          static PyMethodDef t_PersianNormalizer__methods_[] = {
            DECLARE_METHOD(t_PersianNormalizer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PersianNormalizer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PersianNormalizer, normalize, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(PersianNormalizer, t_PersianNormalizer, ::java::lang::Object, PersianNormalizer, t_PersianNormalizer_init_, 0, 0, 0, 0, 0);

          void t_PersianNormalizer::install(PyObject *module)
          {
            installType(&PY_TYPE(PersianNormalizer), module, "PersianNormalizer", 0);
          }

          void t_PersianNormalizer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(PersianNormalizer).tp_dict, "class_", make_descriptor(PersianNormalizer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(PersianNormalizer).tp_dict, "wrapfn_", make_descriptor(t_PersianNormalizer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(PersianNormalizer).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(PersianNormalizer::initializeClass);
            PyDict_SetItemString(PY_TYPE(PersianNormalizer).tp_dict, "FARSI_YEH", make_descriptor(PersianNormalizer::FARSI_YEH));
            PyDict_SetItemString(PY_TYPE(PersianNormalizer).tp_dict, "HAMZA_ABOVE", make_descriptor(PersianNormalizer::HAMZA_ABOVE));
            PyDict_SetItemString(PY_TYPE(PersianNormalizer).tp_dict, "HEH", make_descriptor(PersianNormalizer::HEH));
            PyDict_SetItemString(PY_TYPE(PersianNormalizer).tp_dict, "HEH_GOAL", make_descriptor(PersianNormalizer::HEH_GOAL));
            PyDict_SetItemString(PY_TYPE(PersianNormalizer).tp_dict, "HEH_YEH", make_descriptor(PersianNormalizer::HEH_YEH));
            PyDict_SetItemString(PY_TYPE(PersianNormalizer).tp_dict, "KAF", make_descriptor(PersianNormalizer::KAF));
            PyDict_SetItemString(PY_TYPE(PersianNormalizer).tp_dict, "KEHEH", make_descriptor(PersianNormalizer::KEHEH));
            PyDict_SetItemString(PY_TYPE(PersianNormalizer).tp_dict, "YEH", make_descriptor(PersianNormalizer::YEH));
            PyDict_SetItemString(PY_TYPE(PersianNormalizer).tp_dict, "YEH_BARREE", make_descriptor(PersianNormalizer::YEH_BARREE));
          }

          static PyObject *t_PersianNormalizer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, PersianNormalizer::initializeClass, 1)))
              return NULL;
            return t_PersianNormalizer::wrap_Object(PersianNormalizer(((t_PersianNormalizer *) arg)->object.this$));
          }
          static PyObject *t_PersianNormalizer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, PersianNormalizer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_PersianNormalizer_init_(t_PersianNormalizer *self, PyObject *args, PyObject *kwds)
          {
            PersianNormalizer object((jobject) NULL);

            INT_CALL(object = PersianNormalizer());
            self->object = object;

            return 0;
          }

          static PyObject *t_PersianNormalizer_normalize(t_PersianNormalizer *self, PyObject *args)
          {
            JArray< jchar > a0((jobject) NULL);
            jint a1;
            jint result;

            if (!parseArgs(args, "[CI", &a0, &a1))
            {
              OBJ_CALL(result = self->object.normalize(a0, a1));
              return PyInt_FromLong((long) result);
            }

            PyErr_SetArgsError((PyObject *) self, "normalize", args);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "java/io/IOException.h"
#include "java/lang/String.h"
#include "java/lang/Throwable.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace java {
  namespace io {

    ::java::lang::Class *IOException::class$ = NULL;
    jmethodID *IOException::mids$ = NULL;
    bool IOException::live$ = false;

    jclass IOException::initializeClass(bool getOnly)
    {
      if (getOnly)
        return (jclass) (live$ ? class$->this$ : NULL);
      if (class$ == NULL)
      {
        jclass cls = (jclass) env->findClass("java/io/IOException");

        mids$ = new jmethodID[max_mid];
        mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
        mids$[mid_init$_c5ec8ca4] = env->getMethodID(cls, "<init>", "(Ljava/lang/Throwable;)V");
        mids$[mid_init$_5fdc3f48] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;)V");
        mids$[mid_init$_01646a2e] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Ljava/lang/Throwable;)V");

        class$ = (::java::lang::Class *) new JObject(cls);
        live$ = true;
      }
      return (jclass) class$->this$;
    }

    IOException::IOException() : ::java::lang::Exception(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

    IOException::IOException(const ::java::lang::Throwable & a0) : ::java::lang::Exception(env->newObject(initializeClass, &mids$, mid_init$_c5ec8ca4, a0.this$)) {}

    IOException::IOException(const ::java::lang::String & a0) : ::java::lang::Exception(env->newObject(initializeClass, &mids$, mid_init$_5fdc3f48, a0.this$)) {}

    IOException::IOException(const ::java::lang::String & a0, const ::java::lang::Throwable & a1) : ::java::lang::Exception(env->newObject(initializeClass, &mids$, mid_init$_01646a2e, a0.this$, a1.this$)) {}
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace java {
  namespace io {
    static PyObject *t_IOException_cast_(PyTypeObject *type, PyObject *arg);
    static PyObject *t_IOException_instance_(PyTypeObject *type, PyObject *arg);
    static int t_IOException_init_(t_IOException *self, PyObject *args, PyObject *kwds);

    static PyMethodDef t_IOException__methods_[] = {
      DECLARE_METHOD(t_IOException, cast_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_IOException, instance_, METH_O | METH_CLASS),
      { NULL, NULL, 0, NULL }
    };

    DECLARE_TYPE(IOException, t_IOException, ::java::lang::Exception, IOException, t_IOException_init_, 0, 0, 0, 0, 0);

    void t_IOException::install(PyObject *module)
    {
      installType(&PY_TYPE(IOException), module, "IOException", 0);
    }

    void t_IOException::initialize(PyObject *module)
    {
      PyDict_SetItemString(PY_TYPE(IOException).tp_dict, "class_", make_descriptor(IOException::initializeClass, 1));
      PyDict_SetItemString(PY_TYPE(IOException).tp_dict, "wrapfn_", make_descriptor(t_IOException::wrap_jobject));
      PyDict_SetItemString(PY_TYPE(IOException).tp_dict, "boxfn_", make_descriptor(boxObject));
    }

    static PyObject *t_IOException_cast_(PyTypeObject *type, PyObject *arg)
    {
      if (!(arg = castCheck(arg, IOException::initializeClass, 1)))
        return NULL;
      return t_IOException::wrap_Object(IOException(((t_IOException *) arg)->object.this$));
    }
    static PyObject *t_IOException_instance_(PyTypeObject *type, PyObject *arg)
    {
      if (!castCheck(arg, IOException::initializeClass, 0))
        Py_RETURN_FALSE;
      Py_RETURN_TRUE;
    }

    static int t_IOException_init_(t_IOException *self, PyObject *args, PyObject *kwds)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 0:
        {
          IOException object((jobject) NULL);

          INT_CALL(object = IOException());
          self->object = object;
          break;
        }
        goto err;
       case 1:
        {
          ::java::lang::Throwable a0((jobject) NULL);
          IOException object((jobject) NULL);

          if (!parseArgs(args, "k", ::java::lang::Throwable::initializeClass, &a0))
          {
            INT_CALL(object = IOException(a0));
            self->object = object;
            break;
          }
        }
        {
          ::java::lang::String a0((jobject) NULL);
          IOException object((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            INT_CALL(object = IOException(a0));
            self->object = object;
            break;
          }
        }
        goto err;
       case 2:
        {
          ::java::lang::String a0((jobject) NULL);
          ::java::lang::Throwable a1((jobject) NULL);
          IOException object((jobject) NULL);

          if (!parseArgs(args, "sk", ::java::lang::Throwable::initializeClass, &a0, &a1))
          {
            INT_CALL(object = IOException(a0, a1));
            self->object = object;
            break;
          }
        }
       default:
       err:
        PyErr_SetArgsError((PyObject *) self, "__init__", args);
        return -1;
      }

      return 0;
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/packed/PackedInts$Writer.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace packed {

          ::java::lang::Class *PackedInts$Writer::class$ = NULL;
          jmethodID *PackedInts$Writer::mids$ = NULL;
          bool PackedInts$Writer::live$ = false;

          jclass PackedInts$Writer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/util/packed/PackedInts$Writer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_add_0ee6df2f] = env->getMethodID(cls, "add", "(J)V");
              mids$[mid_bitsPerValue_54c6a179] = env->getMethodID(cls, "bitsPerValue", "()I");
              mids$[mid_finish_54c6a166] = env->getMethodID(cls, "finish", "()V");
              mids$[mid_ord_54c6a179] = env->getMethodID(cls, "ord", "()I");
              mids$[mid_getFormat_2580793f] = env->getMethodID(cls, "getFormat", "()Lorg/apache/lucene/util/packed/PackedInts$Format;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          void PackedInts$Writer::add(jlong a0) const
          {
            env->callVoidMethod(this$, mids$[mid_add_0ee6df2f], a0);
          }

          jint PackedInts$Writer::bitsPerValue() const
          {
            return env->callIntMethod(this$, mids$[mid_bitsPerValue_54c6a179]);
          }

          void PackedInts$Writer::finish() const
          {
            env->callVoidMethod(this$, mids$[mid_finish_54c6a166]);
          }

          jint PackedInts$Writer::ord() const
          {
            return env->callIntMethod(this$, mids$[mid_ord_54c6a179]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace packed {
          static PyObject *t_PackedInts$Writer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PackedInts$Writer_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PackedInts$Writer_add(t_PackedInts$Writer *self, PyObject *arg);
          static PyObject *t_PackedInts$Writer_bitsPerValue(t_PackedInts$Writer *self);
          static PyObject *t_PackedInts$Writer_finish(t_PackedInts$Writer *self);
          static PyObject *t_PackedInts$Writer_ord(t_PackedInts$Writer *self);

          static PyMethodDef t_PackedInts$Writer__methods_[] = {
            DECLARE_METHOD(t_PackedInts$Writer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PackedInts$Writer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PackedInts$Writer, add, METH_O),
            DECLARE_METHOD(t_PackedInts$Writer, bitsPerValue, METH_NOARGS),
            DECLARE_METHOD(t_PackedInts$Writer, finish, METH_NOARGS),
            DECLARE_METHOD(t_PackedInts$Writer, ord, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(PackedInts$Writer, t_PackedInts$Writer, ::java::lang::Object, PackedInts$Writer, abstract_init, 0, 0, 0, 0, 0);

          void t_PackedInts$Writer::install(PyObject *module)
          {
            installType(&PY_TYPE(PackedInts$Writer), module, "PackedInts$Writer", 0);
          }

          void t_PackedInts$Writer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(PackedInts$Writer).tp_dict, "class_", make_descriptor(PackedInts$Writer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(PackedInts$Writer).tp_dict, "wrapfn_", make_descriptor(t_PackedInts$Writer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(PackedInts$Writer).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_PackedInts$Writer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, PackedInts$Writer::initializeClass, 1)))
              return NULL;
            return t_PackedInts$Writer::wrap_Object(PackedInts$Writer(((t_PackedInts$Writer *) arg)->object.this$));
          }
          static PyObject *t_PackedInts$Writer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, PackedInts$Writer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_PackedInts$Writer_add(t_PackedInts$Writer *self, PyObject *arg)
          {
            jlong a0;

            if (!parseArg(arg, "J", &a0))
            {
              OBJ_CALL(self->object.add(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "add", arg);
            return NULL;
          }

          static PyObject *t_PackedInts$Writer_bitsPerValue(t_PackedInts$Writer *self)
          {
            jint result;
            OBJ_CALL(result = self->object.bitsPerValue());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_PackedInts$Writer_finish(t_PackedInts$Writer *self)
          {
            OBJ_CALL(self->object.finish());
            Py_RETURN_NONE;
          }

          static PyObject *t_PackedInts$Writer_ord(t_PackedInts$Writer *self)
          {
            jint result;
            OBJ_CALL(result = self->object.ord());
            return PyInt_FromLong((long) result);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/fst/FST$INPUT_TYPE.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace fst {

          ::java::lang::Class *FST$INPUT_TYPE::class$ = NULL;
          jmethodID *FST$INPUT_TYPE::mids$ = NULL;
          bool FST$INPUT_TYPE::live$ = false;
          FST$INPUT_TYPE *FST$INPUT_TYPE::BYTE1 = NULL;
          FST$INPUT_TYPE *FST$INPUT_TYPE::BYTE2 = NULL;
          FST$INPUT_TYPE *FST$INPUT_TYPE::BYTE4 = NULL;

          jclass FST$INPUT_TYPE::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/util/fst/FST$INPUT_TYPE");

              mids$ = new jmethodID[max_mid];
              mids$[mid_valueOf_06b999b9] = env->getStaticMethodID(cls, "valueOf", "(Ljava/lang/String;)Lorg/apache/lucene/util/fst/FST$INPUT_TYPE;");
              mids$[mid_values_da3dc83f] = env->getStaticMethodID(cls, "values", "()[Lorg/apache/lucene/util/fst/FST$INPUT_TYPE;");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              BYTE1 = new FST$INPUT_TYPE(env->getStaticObjectField(cls, "BYTE1", "Lorg/apache/lucene/util/fst/FST$INPUT_TYPE;"));
              BYTE2 = new FST$INPUT_TYPE(env->getStaticObjectField(cls, "BYTE2", "Lorg/apache/lucene/util/fst/FST$INPUT_TYPE;"));
              BYTE4 = new FST$INPUT_TYPE(env->getStaticObjectField(cls, "BYTE4", "Lorg/apache/lucene/util/fst/FST$INPUT_TYPE;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          FST$INPUT_TYPE FST$INPUT_TYPE::valueOf(const ::java::lang::String & a0)
          {
            jclass cls = env->getClass(initializeClass);
            return FST$INPUT_TYPE(env->callStaticObjectMethod(cls, mids$[mid_valueOf_06b999b9], a0.this$));
          }

          JArray< FST$INPUT_TYPE > FST$INPUT_TYPE::values()
          {
            jclass cls = env->getClass(initializeClass);
            return JArray< FST$INPUT_TYPE >(env->callStaticObjectMethod(cls, mids$[mid_values_da3dc83f]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace fst {
          static PyObject *t_FST$INPUT_TYPE_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_FST$INPUT_TYPE_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_FST$INPUT_TYPE_of_(t_FST$INPUT_TYPE *self, PyObject *args);
          static PyObject *t_FST$INPUT_TYPE_valueOf(PyTypeObject *type, PyObject *args);
          static PyObject *t_FST$INPUT_TYPE_values(PyTypeObject *type);
          static PyObject *t_FST$INPUT_TYPE_get__parameters_(t_FST$INPUT_TYPE *self, void *data);
          static PyGetSetDef t_FST$INPUT_TYPE__fields_[] = {
            DECLARE_GET_FIELD(t_FST$INPUT_TYPE, parameters_),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_FST$INPUT_TYPE__methods_[] = {
            DECLARE_METHOD(t_FST$INPUT_TYPE, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FST$INPUT_TYPE, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FST$INPUT_TYPE, of_, METH_VARARGS),
            DECLARE_METHOD(t_FST$INPUT_TYPE, valueOf, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_FST$INPUT_TYPE, values, METH_NOARGS | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(FST$INPUT_TYPE, t_FST$INPUT_TYPE, ::java::lang::Enum, FST$INPUT_TYPE, abstract_init, 0, 0, t_FST$INPUT_TYPE__fields_, 0, 0);
          PyObject *t_FST$INPUT_TYPE::wrap_Object(const FST$INPUT_TYPE& object, PyTypeObject *p0)
          {
            PyObject *obj = t_FST$INPUT_TYPE::wrap_Object(object);
            if (obj != NULL && obj != Py_None)
            {
              t_FST$INPUT_TYPE *self = (t_FST$INPUT_TYPE *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          PyObject *t_FST$INPUT_TYPE::wrap_jobject(const jobject& object, PyTypeObject *p0)
          {
            PyObject *obj = t_FST$INPUT_TYPE::wrap_jobject(object);
            if (obj != NULL && obj != Py_None)
            {
              t_FST$INPUT_TYPE *self = (t_FST$INPUT_TYPE *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          void t_FST$INPUT_TYPE::install(PyObject *module)
          {
            installType(&PY_TYPE(FST$INPUT_TYPE), module, "FST$INPUT_TYPE", 0);
          }

          void t_FST$INPUT_TYPE::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(FST$INPUT_TYPE).tp_dict, "class_", make_descriptor(FST$INPUT_TYPE::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(FST$INPUT_TYPE).tp_dict, "wrapfn_", make_descriptor(t_FST$INPUT_TYPE::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(FST$INPUT_TYPE).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(FST$INPUT_TYPE::initializeClass);
            PyDict_SetItemString(PY_TYPE(FST$INPUT_TYPE).tp_dict, "BYTE1", make_descriptor(t_FST$INPUT_TYPE::wrap_Object(*FST$INPUT_TYPE::BYTE1)));
            PyDict_SetItemString(PY_TYPE(FST$INPUT_TYPE).tp_dict, "BYTE2", make_descriptor(t_FST$INPUT_TYPE::wrap_Object(*FST$INPUT_TYPE::BYTE2)));
            PyDict_SetItemString(PY_TYPE(FST$INPUT_TYPE).tp_dict, "BYTE4", make_descriptor(t_FST$INPUT_TYPE::wrap_Object(*FST$INPUT_TYPE::BYTE4)));
          }

          static PyObject *t_FST$INPUT_TYPE_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, FST$INPUT_TYPE::initializeClass, 1)))
              return NULL;
            return t_FST$INPUT_TYPE::wrap_Object(FST$INPUT_TYPE(((t_FST$INPUT_TYPE *) arg)->object.this$));
          }
          static PyObject *t_FST$INPUT_TYPE_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, FST$INPUT_TYPE::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_FST$INPUT_TYPE_of_(t_FST$INPUT_TYPE *self, PyObject *args)
          {
            if (!parseArg(args, "T", 1, &(self->parameters)))
              Py_RETURN_SELF;
            return PyErr_SetArgsError((PyObject *) self, "of_", args);
          }

          static PyObject *t_FST$INPUT_TYPE_valueOf(PyTypeObject *type, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            FST$INPUT_TYPE result((jobject) NULL);

            if (!parseArgs(args, "s", &a0))
            {
              OBJ_CALL(result = ::org::apache::lucene::util::fst::FST$INPUT_TYPE::valueOf(a0));
              return t_FST$INPUT_TYPE::wrap_Object(result);
            }

            return callSuper(type, "valueOf", args, 2);
          }

          static PyObject *t_FST$INPUT_TYPE_values(PyTypeObject *type)
          {
            JArray< FST$INPUT_TYPE > result((jobject) NULL);
            OBJ_CALL(result = ::org::apache::lucene::util::fst::FST$INPUT_TYPE::values());
            return JArray<jobject>(result.this$).wrap(t_FST$INPUT_TYPE::wrap_jobject);
          }
          static PyObject *t_FST$INPUT_TYPE_get__parameters_(t_FST$INPUT_TYPE *self, void *data)
          {
            return typeParameters(self->parameters, sizeof(self->parameters));
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/QueryRescorer.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/search/IndexSearcher.h"
#include "org/apache/lucene/search/Explanation.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/search/Query.h"
#include "org/apache/lucene/search/TopDocs.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *QueryRescorer::class$ = NULL;
        jmethodID *QueryRescorer::mids$ = NULL;
        bool QueryRescorer::live$ = false;

        jclass QueryRescorer::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/QueryRescorer");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_6e301113] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/Query;)V");
            mids$[mid_explain_2b38e623] = env->getMethodID(cls, "explain", "(Lorg/apache/lucene/search/IndexSearcher;Lorg/apache/lucene/search/Explanation;I)Lorg/apache/lucene/search/Explanation;");
            mids$[mid_rescore_bd3343d7] = env->getMethodID(cls, "rescore", "(Lorg/apache/lucene/search/IndexSearcher;Lorg/apache/lucene/search/TopDocs;I)Lorg/apache/lucene/search/TopDocs;");
            mids$[mid_rescore_93dee955] = env->getStaticMethodID(cls, "rescore", "(Lorg/apache/lucene/search/IndexSearcher;Lorg/apache/lucene/search/TopDocs;Lorg/apache/lucene/search/Query;DI)Lorg/apache/lucene/search/TopDocs;");
            mids$[mid_combine_a950a3d1] = env->getMethodID(cls, "combine", "(FZF)F");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        QueryRescorer::QueryRescorer(const ::org::apache::lucene::search::Query & a0) : ::org::apache::lucene::search::Rescorer(env->newObject(initializeClass, &mids$, mid_init$_6e301113, a0.this$)) {}

        ::org::apache::lucene::search::Explanation QueryRescorer::explain(const ::org::apache::lucene::search::IndexSearcher & a0, const ::org::apache::lucene::search::Explanation & a1, jint a2) const
        {
          return ::org::apache::lucene::search::Explanation(env->callObjectMethod(this$, mids$[mid_explain_2b38e623], a0.this$, a1.this$, a2));
        }

        ::org::apache::lucene::search::TopDocs QueryRescorer::rescore(const ::org::apache::lucene::search::IndexSearcher & a0, const ::org::apache::lucene::search::TopDocs & a1, jint a2) const
        {
          return ::org::apache::lucene::search::TopDocs(env->callObjectMethod(this$, mids$[mid_rescore_bd3343d7], a0.this$, a1.this$, a2));
        }

        ::org::apache::lucene::search::TopDocs QueryRescorer::rescore(const ::org::apache::lucene::search::IndexSearcher & a0, const ::org::apache::lucene::search::TopDocs & a1, const ::org::apache::lucene::search::Query & a2, jdouble a3, jint a4)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::search::TopDocs(env->callStaticObjectMethod(cls, mids$[mid_rescore_93dee955], a0.this$, a1.this$, a2.this$, a3, a4));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_QueryRescorer_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_QueryRescorer_instance_(PyTypeObject *type, PyObject *arg);
        static int t_QueryRescorer_init_(t_QueryRescorer *self, PyObject *args, PyObject *kwds);
        static PyObject *t_QueryRescorer_explain(t_QueryRescorer *self, PyObject *args);
        static PyObject *t_QueryRescorer_rescore(t_QueryRescorer *self, PyObject *args);
        static PyObject *t_QueryRescorer_rescore_(PyTypeObject *type, PyObject *args);

        static PyMethodDef t_QueryRescorer__methods_[] = {
          DECLARE_METHOD(t_QueryRescorer, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_QueryRescorer, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_QueryRescorer, explain, METH_VARARGS),
          DECLARE_METHOD(t_QueryRescorer, rescore, METH_VARARGS),
          DECLARE_METHOD(t_QueryRescorer, rescore_, METH_VARARGS | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(QueryRescorer, t_QueryRescorer, ::org::apache::lucene::search::Rescorer, QueryRescorer, t_QueryRescorer_init_, 0, 0, 0, 0, 0);

        void t_QueryRescorer::install(PyObject *module)
        {
          installType(&PY_TYPE(QueryRescorer), module, "QueryRescorer", 0);
        }

        void t_QueryRescorer::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(QueryRescorer).tp_dict, "class_", make_descriptor(QueryRescorer::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(QueryRescorer).tp_dict, "wrapfn_", make_descriptor(t_QueryRescorer::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(QueryRescorer).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_QueryRescorer_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, QueryRescorer::initializeClass, 1)))
            return NULL;
          return t_QueryRescorer::wrap_Object(QueryRescorer(((t_QueryRescorer *) arg)->object.this$));
        }
        static PyObject *t_QueryRescorer_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, QueryRescorer::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_QueryRescorer_init_(t_QueryRescorer *self, PyObject *args, PyObject *kwds)
        {
          ::org::apache::lucene::search::Query a0((jobject) NULL);
          QueryRescorer object((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::search::Query::initializeClass, &a0))
          {
            INT_CALL(object = QueryRescorer(a0));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_QueryRescorer_explain(t_QueryRescorer *self, PyObject *args)
        {
          ::org::apache::lucene::search::IndexSearcher a0((jobject) NULL);
          ::org::apache::lucene::search::Explanation a1((jobject) NULL);
          jint a2;
          ::org::apache::lucene::search::Explanation result((jobject) NULL);

          if (!parseArgs(args, "kkI", ::org::apache::lucene::search::IndexSearcher::initializeClass, ::org::apache::lucene::search::Explanation::initializeClass, &a0, &a1, &a2))
          {
            OBJ_CALL(result = self->object.explain(a0, a1, a2));
            return ::org::apache::lucene::search::t_Explanation::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(QueryRescorer), (PyObject *) self, "explain", args, 2);
        }

        static PyObject *t_QueryRescorer_rescore(t_QueryRescorer *self, PyObject *args)
        {
          ::org::apache::lucene::search::IndexSearcher a0((jobject) NULL);
          ::org::apache::lucene::search::TopDocs a1((jobject) NULL);
          jint a2;
          ::org::apache::lucene::search::TopDocs result((jobject) NULL);

          if (!parseArgs(args, "kkI", ::org::apache::lucene::search::IndexSearcher::initializeClass, ::org::apache::lucene::search::TopDocs::initializeClass, &a0, &a1, &a2))
          {
            OBJ_CALL(result = self->object.rescore(a0, a1, a2));
            return ::org::apache::lucene::search::t_TopDocs::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(QueryRescorer), (PyObject *) self, "rescore", args, 2);
        }

        static PyObject *t_QueryRescorer_rescore_(PyTypeObject *type, PyObject *args)
        {
          ::org::apache::lucene::search::IndexSearcher a0((jobject) NULL);
          ::org::apache::lucene::search::TopDocs a1((jobject) NULL);
          ::org::apache::lucene::search::Query a2((jobject) NULL);
          jdouble a3;
          jint a4;
          ::org::apache::lucene::search::TopDocs result((jobject) NULL);

          if (!parseArgs(args, "kkkDI", ::org::apache::lucene::search::IndexSearcher::initializeClass, ::org::apache::lucene::search::TopDocs::initializeClass, ::org::apache::lucene::search::Query::initializeClass, &a0, &a1, &a2, &a3, &a4))
          {
            OBJ_CALL(result = ::org::apache::lucene::search::QueryRescorer::rescore(a0, a1, a2, a3, a4));
            return ::org::apache::lucene::search::t_TopDocs::wrap_Object(result);
          }

          PyErr_SetArgsError(type, "rescore_", args);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/similarities/LMJelinekMercerSimilarity.h"
#include "java/lang/String.h"
#include "org/apache/lucene/search/similarities/LMSimilarity$CollectionModel.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace similarities {

          ::java::lang::Class *LMJelinekMercerSimilarity::class$ = NULL;
          jmethodID *LMJelinekMercerSimilarity::mids$ = NULL;
          bool LMJelinekMercerSimilarity::live$ = false;

          jclass LMJelinekMercerSimilarity::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/similarities/LMJelinekMercerSimilarity");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_06298cab] = env->getMethodID(cls, "<init>", "(F)V");
              mids$[mid_init$_75020b37] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/similarities/LMSimilarity$CollectionModel;F)V");
              mids$[mid_getLambda_54c6a176] = env->getMethodID(cls, "getLambda", "()F");
              mids$[mid_getName_14c7b5c5] = env->getMethodID(cls, "getName", "()Ljava/lang/String;");
              mids$[mid_score_63482206] = env->getMethodID(cls, "score", "(Lorg/apache/lucene/search/similarities/BasicStats;FF)F");
              mids$[mid_explain_347d95f8] = env->getMethodID(cls, "explain", "(Lorg/apache/lucene/search/Explanation;Lorg/apache/lucene/search/similarities/BasicStats;IFF)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          LMJelinekMercerSimilarity::LMJelinekMercerSimilarity(jfloat a0) : ::org::apache::lucene::search::similarities::LMSimilarity(env->newObject(initializeClass, &mids$, mid_init$_06298cab, a0)) {}

          LMJelinekMercerSimilarity::LMJelinekMercerSimilarity(const ::org::apache::lucene::search::similarities::LMSimilarity$CollectionModel & a0, jfloat a1) : ::org::apache::lucene::search::similarities::LMSimilarity(env->newObject(initializeClass, &mids$, mid_init$_75020b37, a0.this$, a1)) {}

          jfloat LMJelinekMercerSimilarity::getLambda() const
          {
            return env->callFloatMethod(this$, mids$[mid_getLambda_54c6a176]);
          }

          ::java::lang::String LMJelinekMercerSimilarity::getName() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getName_14c7b5c5]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace similarities {
          static PyObject *t_LMJelinekMercerSimilarity_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_LMJelinekMercerSimilarity_instance_(PyTypeObject *type, PyObject *arg);
          static int t_LMJelinekMercerSimilarity_init_(t_LMJelinekMercerSimilarity *self, PyObject *args, PyObject *kwds);
          static PyObject *t_LMJelinekMercerSimilarity_getLambda(t_LMJelinekMercerSimilarity *self);
          static PyObject *t_LMJelinekMercerSimilarity_getName(t_LMJelinekMercerSimilarity *self, PyObject *args);
          static PyObject *t_LMJelinekMercerSimilarity_get__lambda(t_LMJelinekMercerSimilarity *self, void *data);
          static PyObject *t_LMJelinekMercerSimilarity_get__name(t_LMJelinekMercerSimilarity *self, void *data);
          static PyGetSetDef t_LMJelinekMercerSimilarity__fields_[] = {
            DECLARE_GET_FIELD(t_LMJelinekMercerSimilarity, lambda),
            DECLARE_GET_FIELD(t_LMJelinekMercerSimilarity, name),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_LMJelinekMercerSimilarity__methods_[] = {
            DECLARE_METHOD(t_LMJelinekMercerSimilarity, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_LMJelinekMercerSimilarity, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_LMJelinekMercerSimilarity, getLambda, METH_NOARGS),
            DECLARE_METHOD(t_LMJelinekMercerSimilarity, getName, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(LMJelinekMercerSimilarity, t_LMJelinekMercerSimilarity, ::org::apache::lucene::search::similarities::LMSimilarity, LMJelinekMercerSimilarity, t_LMJelinekMercerSimilarity_init_, 0, 0, t_LMJelinekMercerSimilarity__fields_, 0, 0);

          void t_LMJelinekMercerSimilarity::install(PyObject *module)
          {
            installType(&PY_TYPE(LMJelinekMercerSimilarity), module, "LMJelinekMercerSimilarity", 0);
          }

          void t_LMJelinekMercerSimilarity::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(LMJelinekMercerSimilarity).tp_dict, "class_", make_descriptor(LMJelinekMercerSimilarity::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(LMJelinekMercerSimilarity).tp_dict, "wrapfn_", make_descriptor(t_LMJelinekMercerSimilarity::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(LMJelinekMercerSimilarity).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_LMJelinekMercerSimilarity_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, LMJelinekMercerSimilarity::initializeClass, 1)))
              return NULL;
            return t_LMJelinekMercerSimilarity::wrap_Object(LMJelinekMercerSimilarity(((t_LMJelinekMercerSimilarity *) arg)->object.this$));
          }
          static PyObject *t_LMJelinekMercerSimilarity_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, LMJelinekMercerSimilarity::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_LMJelinekMercerSimilarity_init_(t_LMJelinekMercerSimilarity *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                jfloat a0;
                LMJelinekMercerSimilarity object((jobject) NULL);

                if (!parseArgs(args, "F", &a0))
                {
                  INT_CALL(object = LMJelinekMercerSimilarity(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 2:
              {
                ::org::apache::lucene::search::similarities::LMSimilarity$CollectionModel a0((jobject) NULL);
                jfloat a1;
                LMJelinekMercerSimilarity object((jobject) NULL);

                if (!parseArgs(args, "kF", ::org::apache::lucene::search::similarities::LMSimilarity$CollectionModel::initializeClass, &a0, &a1))
                {
                  INT_CALL(object = LMJelinekMercerSimilarity(a0, a1));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_LMJelinekMercerSimilarity_getLambda(t_LMJelinekMercerSimilarity *self)
          {
            jfloat result;
            OBJ_CALL(result = self->object.getLambda());
            return PyFloat_FromDouble((double) result);
          }

          static PyObject *t_LMJelinekMercerSimilarity_getName(t_LMJelinekMercerSimilarity *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.getName());
              return j2p(result);
            }

            return callSuper(&PY_TYPE(LMJelinekMercerSimilarity), (PyObject *) self, "getName", args, 2);
          }

          static PyObject *t_LMJelinekMercerSimilarity_get__lambda(t_LMJelinekMercerSimilarity *self, void *data)
          {
            jfloat value;
            OBJ_CALL(value = self->object.getLambda());
            return PyFloat_FromDouble((double) value);
          }

          static PyObject *t_LMJelinekMercerSimilarity_get__name(t_LMJelinekMercerSimilarity *self, void *data)
          {
            ::java::lang::String value((jobject) NULL);
            OBJ_CALL(value = self->object.getName());
            return j2p(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/SlopQueryNode.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/queryparser/flexible/core/parser/EscapeQuerySyntax.h"
#include "java/lang/CloneNotSupportedException.h"
#include "java/lang/CharSequence.h"
#include "java/lang/String.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/FieldableNode.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/QueryNode.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace nodes {

              ::java::lang::Class *SlopQueryNode::class$ = NULL;
              jmethodID *SlopQueryNode::mids$ = NULL;
              bool SlopQueryNode::live$ = false;

              jclass SlopQueryNode::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/core/nodes/SlopQueryNode");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_bc870487] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;I)V");
                  mids$[mid_cloneTree_b387c5e6] = env->getMethodID(cls, "cloneTree", "()Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;");
                  mids$[mid_getChild_b387c5e6] = env->getMethodID(cls, "getChild", "()Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;");
                  mids$[mid_getField_e0adba2f] = env->getMethodID(cls, "getField", "()Ljava/lang/CharSequence;");
                  mids$[mid_getValue_54c6a179] = env->getMethodID(cls, "getValue", "()I");
                  mids$[mid_setField_a8afc64a] = env->getMethodID(cls, "setField", "(Ljava/lang/CharSequence;)V");
                  mids$[mid_toQueryString_99b8dfe1] = env->getMethodID(cls, "toQueryString", "(Lorg/apache/lucene/queryparser/flexible/core/parser/EscapeQuerySyntax;)Ljava/lang/CharSequence;");
                  mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              SlopQueryNode::SlopQueryNode(const ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode & a0, jint a1) : ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNodeImpl(env->newObject(initializeClass, &mids$, mid_init$_bc870487, a0.this$, a1)) {}

              ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode SlopQueryNode::cloneTree() const
              {
                return ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode(env->callObjectMethod(this$, mids$[mid_cloneTree_b387c5e6]));
              }

              ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode SlopQueryNode::getChild() const
              {
                return ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode(env->callObjectMethod(this$, mids$[mid_getChild_b387c5e6]));
              }

              ::java::lang::CharSequence SlopQueryNode::getField() const
              {
                return ::java::lang::CharSequence(env->callObjectMethod(this$, mids$[mid_getField_e0adba2f]));
              }

              jint SlopQueryNode::getValue() const
              {
                return env->callIntMethod(this$, mids$[mid_getValue_54c6a179]);
              }

              void SlopQueryNode::setField(const ::java::lang::CharSequence & a0) const
              {
                env->callVoidMethod(this$, mids$[mid_setField_a8afc64a], a0.this$);
              }

              ::java::lang::CharSequence SlopQueryNode::toQueryString(const ::org::apache::lucene::queryparser::flexible::core::parser::EscapeQuerySyntax & a0) const
              {
                return ::java::lang::CharSequence(env->callObjectMethod(this$, mids$[mid_toQueryString_99b8dfe1], a0.this$));
              }

              ::java::lang::String SlopQueryNode::toString() const
              {
                return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace nodes {
              static PyObject *t_SlopQueryNode_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_SlopQueryNode_instance_(PyTypeObject *type, PyObject *arg);
              static int t_SlopQueryNode_init_(t_SlopQueryNode *self, PyObject *args, PyObject *kwds);
              static PyObject *t_SlopQueryNode_cloneTree(t_SlopQueryNode *self, PyObject *args);
              static PyObject *t_SlopQueryNode_getChild(t_SlopQueryNode *self);
              static PyObject *t_SlopQueryNode_getField(t_SlopQueryNode *self);
              static PyObject *t_SlopQueryNode_getValue(t_SlopQueryNode *self);
              static PyObject *t_SlopQueryNode_setField(t_SlopQueryNode *self, PyObject *arg);
              static PyObject *t_SlopQueryNode_toQueryString(t_SlopQueryNode *self, PyObject *args);
              static PyObject *t_SlopQueryNode_toString(t_SlopQueryNode *self, PyObject *args);
              static PyObject *t_SlopQueryNode_get__child(t_SlopQueryNode *self, void *data);
              static PyObject *t_SlopQueryNode_get__field(t_SlopQueryNode *self, void *data);
              static int t_SlopQueryNode_set__field(t_SlopQueryNode *self, PyObject *arg, void *data);
              static PyObject *t_SlopQueryNode_get__value(t_SlopQueryNode *self, void *data);
              static PyGetSetDef t_SlopQueryNode__fields_[] = {
                DECLARE_GET_FIELD(t_SlopQueryNode, child),
                DECLARE_GETSET_FIELD(t_SlopQueryNode, field),
                DECLARE_GET_FIELD(t_SlopQueryNode, value),
                { NULL, NULL, NULL, NULL, NULL }
              };

              static PyMethodDef t_SlopQueryNode__methods_[] = {
                DECLARE_METHOD(t_SlopQueryNode, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_SlopQueryNode, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_SlopQueryNode, cloneTree, METH_VARARGS),
                DECLARE_METHOD(t_SlopQueryNode, getChild, METH_NOARGS),
                DECLARE_METHOD(t_SlopQueryNode, getField, METH_NOARGS),
                DECLARE_METHOD(t_SlopQueryNode, getValue, METH_NOARGS),
                DECLARE_METHOD(t_SlopQueryNode, setField, METH_O),
                DECLARE_METHOD(t_SlopQueryNode, toQueryString, METH_VARARGS),
                DECLARE_METHOD(t_SlopQueryNode, toString, METH_VARARGS),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(SlopQueryNode, t_SlopQueryNode, ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNodeImpl, SlopQueryNode, t_SlopQueryNode_init_, 0, 0, t_SlopQueryNode__fields_, 0, 0);

              void t_SlopQueryNode::install(PyObject *module)
              {
                installType(&PY_TYPE(SlopQueryNode), module, "SlopQueryNode", 0);
              }

              void t_SlopQueryNode::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(SlopQueryNode).tp_dict, "class_", make_descriptor(SlopQueryNode::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(SlopQueryNode).tp_dict, "wrapfn_", make_descriptor(t_SlopQueryNode::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(SlopQueryNode).tp_dict, "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_SlopQueryNode_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, SlopQueryNode::initializeClass, 1)))
                  return NULL;
                return t_SlopQueryNode::wrap_Object(SlopQueryNode(((t_SlopQueryNode *) arg)->object.this$));
              }
              static PyObject *t_SlopQueryNode_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, SlopQueryNode::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_SlopQueryNode_init_(t_SlopQueryNode *self, PyObject *args, PyObject *kwds)
              {
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode a0((jobject) NULL);
                jint a1;
                SlopQueryNode object((jobject) NULL);

                if (!parseArgs(args, "kI", ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode::initializeClass, &a0, &a1))
                {
                  INT_CALL(object = SlopQueryNode(a0, a1));
                  self->object = object;
                }
                else
                {
                  PyErr_SetArgsError((PyObject *) self, "__init__", args);
                  return -1;
                }

                return 0;
              }

              static PyObject *t_SlopQueryNode_cloneTree(t_SlopQueryNode *self, PyObject *args)
              {
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode result((jobject) NULL);

                if (!parseArgs(args, ""))
                {
                  OBJ_CALL(result = self->object.cloneTree());
                  return ::org::apache::lucene::queryparser::flexible::core::nodes::t_QueryNode::wrap_Object(result);
                }

                return callSuper(&PY_TYPE(SlopQueryNode), (PyObject *) self, "cloneTree", args, 2);
              }

              static PyObject *t_SlopQueryNode_getChild(t_SlopQueryNode *self)
              {
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode result((jobject) NULL);
                OBJ_CALL(result = self->object.getChild());
                return ::org::apache::lucene::queryparser::flexible::core::nodes::t_QueryNode::wrap_Object(result);
              }

              static PyObject *t_SlopQueryNode_getField(t_SlopQueryNode *self)
              {
                ::java::lang::CharSequence result((jobject) NULL);
                OBJ_CALL(result = self->object.getField());
                return ::java::lang::t_CharSequence::wrap_Object(result);
              }

              static PyObject *t_SlopQueryNode_getValue(t_SlopQueryNode *self)
              {
                jint result;
                OBJ_CALL(result = self->object.getValue());
                return PyInt_FromLong((long) result);
              }

              static PyObject *t_SlopQueryNode_setField(t_SlopQueryNode *self, PyObject *arg)
              {
                ::java::lang::CharSequence a0((jobject) NULL);

                if (!parseArg(arg, "O", &::java::lang::PY_TYPE(CharSequence), &a0))
                {
                  OBJ_CALL(self->object.setField(a0));
                  Py_RETURN_NONE;
                }

                PyErr_SetArgsError((PyObject *) self, "setField", arg);
                return NULL;
              }

              static PyObject *t_SlopQueryNode_toQueryString(t_SlopQueryNode *self, PyObject *args)
              {
                ::org::apache::lucene::queryparser::flexible::core::parser::EscapeQuerySyntax a0((jobject) NULL);
                ::java::lang::CharSequence result((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::queryparser::flexible::core::parser::EscapeQuerySyntax::initializeClass, &a0))
                {
                  OBJ_CALL(result = self->object.toQueryString(a0));
                  return ::java::lang::t_CharSequence::wrap_Object(result);
                }

                return callSuper(&PY_TYPE(SlopQueryNode), (PyObject *) self, "toQueryString", args, 2);
              }

              static PyObject *t_SlopQueryNode_toString(t_SlopQueryNode *self, PyObject *args)
              {
                ::java::lang::String result((jobject) NULL);

                if (!parseArgs(args, ""))
                {
                  OBJ_CALL(result = self->object.toString());
                  return j2p(result);
                }

                return callSuper(&PY_TYPE(SlopQueryNode), (PyObject *) self, "toString", args, 2);
              }

              static PyObject *t_SlopQueryNode_get__child(t_SlopQueryNode *self, void *data)
              {
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode value((jobject) NULL);
                OBJ_CALL(value = self->object.getChild());
                return ::org::apache::lucene::queryparser::flexible::core::nodes::t_QueryNode::wrap_Object(value);
              }

              static PyObject *t_SlopQueryNode_get__field(t_SlopQueryNode *self, void *data)
              {
                ::java::lang::CharSequence value((jobject) NULL);
                OBJ_CALL(value = self->object.getField());
                return ::java::lang::t_CharSequence::wrap_Object(value);
              }
              static int t_SlopQueryNode_set__field(t_SlopQueryNode *self, PyObject *arg, void *data)
              {
                {
                  ::java::lang::CharSequence value((jobject) NULL);
                  if (!parseArg(arg, "O", &::java::lang::PY_TYPE(CharSequence), &value))
                  {
                    INT_CALL(self->object.setField(value));
                    return 0;
                  }
                }
                PyErr_SetArgsError((PyObject *) self, "field", arg);
                return -1;
              }

              static PyObject *t_SlopQueryNode_get__value(t_SlopQueryNode *self, void *data)
              {
                jint value;
                OBJ_CALL(value = self->object.getValue());
                return PyInt_FromLong((long) value);
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/ProximityQueryNode$ProximityType.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/ProximityQueryNode$Type.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace nodes {

              ::java::lang::Class *ProximityQueryNode$ProximityType::class$ = NULL;
              jmethodID *ProximityQueryNode$ProximityType::mids$ = NULL;
              bool ProximityQueryNode$ProximityType::live$ = false;

              jclass ProximityQueryNode$ProximityType::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/core/nodes/ProximityQueryNode$ProximityType");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_f6618874] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/ProximityQueryNode$Type;)V");
                  mids$[mid_init$_4097b5f6] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/ProximityQueryNode$Type;I)V");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              ProximityQueryNode$ProximityType::ProximityQueryNode$ProximityType(const ::org::apache::lucene::queryparser::flexible::core::nodes::ProximityQueryNode$Type & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_f6618874, a0.this$)) {}

              ProximityQueryNode$ProximityType::ProximityQueryNode$ProximityType(const ::org::apache::lucene::queryparser::flexible::core::nodes::ProximityQueryNode$Type & a0, jint a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_4097b5f6, a0.this$, a1)) {}
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace nodes {
              static PyObject *t_ProximityQueryNode$ProximityType_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_ProximityQueryNode$ProximityType_instance_(PyTypeObject *type, PyObject *arg);
              static int t_ProximityQueryNode$ProximityType_init_(t_ProximityQueryNode$ProximityType *self, PyObject *args, PyObject *kwds);

              static PyMethodDef t_ProximityQueryNode$ProximityType__methods_[] = {
                DECLARE_METHOD(t_ProximityQueryNode$ProximityType, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_ProximityQueryNode$ProximityType, instance_, METH_O | METH_CLASS),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(ProximityQueryNode$ProximityType, t_ProximityQueryNode$ProximityType, ::java::lang::Object, ProximityQueryNode$ProximityType, t_ProximityQueryNode$ProximityType_init_, 0, 0, 0, 0, 0);

              void t_ProximityQueryNode$ProximityType::install(PyObject *module)
              {
                installType(&PY_TYPE(ProximityQueryNode$ProximityType), module, "ProximityQueryNode$ProximityType", 0);
              }

              void t_ProximityQueryNode$ProximityType::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(ProximityQueryNode$ProximityType).tp_dict, "class_", make_descriptor(ProximityQueryNode$ProximityType::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(ProximityQueryNode$ProximityType).tp_dict, "wrapfn_", make_descriptor(t_ProximityQueryNode$ProximityType::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(ProximityQueryNode$ProximityType).tp_dict, "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_ProximityQueryNode$ProximityType_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, ProximityQueryNode$ProximityType::initializeClass, 1)))
                  return NULL;
                return t_ProximityQueryNode$ProximityType::wrap_Object(ProximityQueryNode$ProximityType(((t_ProximityQueryNode$ProximityType *) arg)->object.this$));
              }
              static PyObject *t_ProximityQueryNode$ProximityType_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, ProximityQueryNode$ProximityType::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_ProximityQueryNode$ProximityType_init_(t_ProximityQueryNode$ProximityType *self, PyObject *args, PyObject *kwds)
              {
                switch (PyTuple_GET_SIZE(args)) {
                 case 1:
                  {
                    ::org::apache::lucene::queryparser::flexible::core::nodes::ProximityQueryNode$Type a0((jobject) NULL);
                    PyTypeObject **p0;
                    ProximityQueryNode$ProximityType object((jobject) NULL);

                    if (!parseArgs(args, "K", ::org::apache::lucene::queryparser::flexible::core::nodes::ProximityQueryNode$Type::initializeClass, &a0, &p0, ::org::apache::lucene::queryparser::flexible::core::nodes::t_ProximityQueryNode$Type::parameters_))
                    {
                      INT_CALL(object = ProximityQueryNode$ProximityType(a0));
                      self->object = object;
                      break;
                    }
                  }
                  goto err;
                 case 2:
                  {
                    ::org::apache::lucene::queryparser::flexible::core::nodes::ProximityQueryNode$Type a0((jobject) NULL);
                    PyTypeObject **p0;
                    jint a1;
                    ProximityQueryNode$ProximityType object((jobject) NULL);

                    if (!parseArgs(args, "KI", ::org::apache::lucene::queryparser::flexible::core::nodes::ProximityQueryNode$Type::initializeClass, &a0, &p0, ::org::apache::lucene::queryparser::flexible::core::nodes::t_ProximityQueryNode$Type::parameters_, &a1))
                    {
                      INT_CALL(object = ProximityQueryNode$ProximityType(a0, a1));
                      self->object = object;
                      break;
                    }
                  }
                 default:
                 err:
                  PyErr_SetArgsError((PyObject *) self, "__init__", args);
                  return -1;
                }

                return 0;
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/suggest/Lookup.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "org/apache/lucene/search/spell/Dictionary.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/search/suggest/Lookup$LookupResult.h"
#include "java/io/InputStream.h"
#include "java/util/Comparator.h"
#include "org/apache/lucene/util/Accountable.h"
#include "java/lang/CharSequence.h"
#include "org/apache/lucene/store/DataInput.h"
#include "java/io/IOException.h"
#include "java/io/OutputStream.h"
#include "org/apache/lucene/store/DataOutput.h"
#include "org/apache/lucene/search/suggest/InputIterator.h"
#include "java/util/Set.h"
#include "java/util/List.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace suggest {

          ::java::lang::Class *Lookup::class$ = NULL;
          jmethodID *Lookup::mids$ = NULL;
          bool Lookup::live$ = false;
          ::java::util::Comparator *Lookup::CHARSEQUENCE_COMPARATOR = NULL;

          jclass Lookup::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/suggest/Lookup");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_build_1754a234] = env->getMethodID(cls, "build", "(Lorg/apache/lucene/search/suggest/InputIterator;)V");
              mids$[mid_build_a0504881] = env->getMethodID(cls, "build", "(Lorg/apache/lucene/search/spell/Dictionary;)V");
              mids$[mid_getCount_54c6a17a] = env->getMethodID(cls, "getCount", "()J");
              mids$[mid_load_f5d6a55d] = env->getMethodID(cls, "load", "(Lorg/apache/lucene/store/DataInput;)Z");
              mids$[mid_load_be2e4f9c] = env->getMethodID(cls, "load", "(Ljava/io/InputStream;)Z");
              mids$[mid_lookup_8aa7b45d] = env->getMethodID(cls, "lookup", "(Ljava/lang/CharSequence;ZI)Ljava/util/List;");
              mids$[mid_lookup_dd3e9f51] = env->getMethodID(cls, "lookup", "(Ljava/lang/CharSequence;Ljava/util/Set;ZI)Ljava/util/List;");
              mids$[mid_store_27875f5b] = env->getMethodID(cls, "store", "(Lorg/apache/lucene/store/DataOutput;)Z");
              mids$[mid_store_82d865f4] = env->getMethodID(cls, "store", "(Ljava/io/OutputStream;)Z");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              CHARSEQUENCE_COMPARATOR = new ::java::util::Comparator(env->getStaticObjectField(cls, "CHARSEQUENCE_COMPARATOR", "Ljava/util/Comparator;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          Lookup::Lookup() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          void Lookup::build(const ::org::apache::lucene::search::suggest::InputIterator & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_build_1754a234], a0.this$);
          }

          void Lookup::build(const ::org::apache::lucene::search::spell::Dictionary & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_build_a0504881], a0.this$);
          }

          jlong Lookup::getCount() const
          {
            return env->callLongMethod(this$, mids$[mid_getCount_54c6a17a]);
          }

          jboolean Lookup::load(const ::org::apache::lucene::store::DataInput & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_load_f5d6a55d], a0.this$);
          }

          jboolean Lookup::load(const ::java::io::InputStream & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_load_be2e4f9c], a0.this$);
          }

          ::java::util::List Lookup::lookup(const ::java::lang::CharSequence & a0, jboolean a1, jint a2) const
          {
            return ::java::util::List(env->callObjectMethod(this$, mids$[mid_lookup_8aa7b45d], a0.this$, a1, a2));
          }

          ::java::util::List Lookup::lookup(const ::java::lang::CharSequence & a0, const ::java::util::Set & a1, jboolean a2, jint a3) const
          {
            return ::java::util::List(env->callObjectMethod(this$, mids$[mid_lookup_dd3e9f51], a0.this$, a1.this$, a2, a3));
          }

          jboolean Lookup::store(const ::org::apache::lucene::store::DataOutput & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_store_27875f5b], a0.this$);
          }

          jboolean Lookup::store(const ::java::io::OutputStream & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_store_82d865f4], a0.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"
#include "org/apache/lucene/search/suggest/Lookup$LookupPriorityQueue.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace suggest {
          static PyObject *t_Lookup_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Lookup_instance_(PyTypeObject *type, PyObject *arg);
          static int t_Lookup_init_(t_Lookup *self, PyObject *args, PyObject *kwds);
          static PyObject *t_Lookup_build(t_Lookup *self, PyObject *args);
          static PyObject *t_Lookup_getCount(t_Lookup *self);
          static PyObject *t_Lookup_load(t_Lookup *self, PyObject *args);
          static PyObject *t_Lookup_lookup(t_Lookup *self, PyObject *args);
          static PyObject *t_Lookup_store(t_Lookup *self, PyObject *args);
          static PyObject *t_Lookup_get__count(t_Lookup *self, void *data);
          static PyGetSetDef t_Lookup__fields_[] = {
            DECLARE_GET_FIELD(t_Lookup, count),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_Lookup__methods_[] = {
            DECLARE_METHOD(t_Lookup, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lookup, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lookup, build, METH_VARARGS),
            DECLARE_METHOD(t_Lookup, getCount, METH_NOARGS),
            DECLARE_METHOD(t_Lookup, load, METH_VARARGS),
            DECLARE_METHOD(t_Lookup, lookup, METH_VARARGS),
            DECLARE_METHOD(t_Lookup, store, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(Lookup, t_Lookup, ::java::lang::Object, Lookup, t_Lookup_init_, 0, 0, t_Lookup__fields_, 0, 0);

          void t_Lookup::install(PyObject *module)
          {
            installType(&PY_TYPE(Lookup), module, "Lookup", 0);
            PyDict_SetItemString(PY_TYPE(Lookup).tp_dict, "LookupPriorityQueue", make_descriptor(&PY_TYPE(Lookup$LookupPriorityQueue)));
            PyDict_SetItemString(PY_TYPE(Lookup).tp_dict, "LookupResult", make_descriptor(&PY_TYPE(Lookup$LookupResult)));
          }

          void t_Lookup::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(Lookup).tp_dict, "class_", make_descriptor(Lookup::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(Lookup).tp_dict, "wrapfn_", make_descriptor(t_Lookup::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(Lookup).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(Lookup::initializeClass);
            PyDict_SetItemString(PY_TYPE(Lookup).tp_dict, "CHARSEQUENCE_COMPARATOR", make_descriptor(::java::util::t_Comparator::wrap_Object(*Lookup::CHARSEQUENCE_COMPARATOR)));
          }

          static PyObject *t_Lookup_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, Lookup::initializeClass, 1)))
              return NULL;
            return t_Lookup::wrap_Object(Lookup(((t_Lookup *) arg)->object.this$));
          }
          static PyObject *t_Lookup_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, Lookup::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_Lookup_init_(t_Lookup *self, PyObject *args, PyObject *kwds)
          {
            Lookup object((jobject) NULL);

            INT_CALL(object = Lookup());
            self->object = object;

            return 0;
          }

          static PyObject *t_Lookup_build(t_Lookup *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::org::apache::lucene::search::suggest::InputIterator a0((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::search::suggest::InputIterator::initializeClass, &a0))
                {
                  OBJ_CALL(self->object.build(a0));
                  Py_RETURN_NONE;
                }
              }
              {
                ::org::apache::lucene::search::spell::Dictionary a0((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::search::spell::Dictionary::initializeClass, &a0))
                {
                  OBJ_CALL(self->object.build(a0));
                  Py_RETURN_NONE;
                }
              }
            }

            PyErr_SetArgsError((PyObject *) self, "build", args);
            return NULL;
          }

          static PyObject *t_Lookup_getCount(t_Lookup *self)
          {
            jlong result;
            OBJ_CALL(result = self->object.getCount());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          static PyObject *t_Lookup_load(t_Lookup *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::org::apache::lucene::store::DataInput a0((jobject) NULL);
                jboolean result;

                if (!parseArgs(args, "k", ::org::apache::lucene::store::DataInput::initializeClass, &a0))
                {
                  OBJ_CALL(result = self->object.load(a0));
                  Py_RETURN_BOOL(result);
                }
              }
              {
                ::java::io::InputStream a0((jobject) NULL);
                jboolean result;

                if (!parseArgs(args, "k", ::java::io::InputStream::initializeClass, &a0))
                {
                  OBJ_CALL(result = self->object.load(a0));
                  Py_RETURN_BOOL(result);
                }
              }
            }

            PyErr_SetArgsError((PyObject *) self, "load", args);
            return NULL;
          }

          static PyObject *t_Lookup_lookup(t_Lookup *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 3:
              {
                ::java::lang::CharSequence a0((jobject) NULL);
                jboolean a1;
                jint a2;
                ::java::util::List result((jobject) NULL);

                if (!parseArgs(args, "OZI", &::java::lang::PY_TYPE(CharSequence), &a0, &a1, &a2))
                {
                  OBJ_CALL(result = self->object.lookup(a0, a1, a2));
                  return ::java::util::t_List::wrap_Object(result, &::org::apache::lucene::search::suggest::PY_TYPE(Lookup$LookupResult));
                }
              }
              break;
             case 4:
              {
                ::java::lang::CharSequence a0((jobject) NULL);
                ::java::util::Set a1((jobject) NULL);
                PyTypeObject **p1;
                jboolean a2;
                jint a3;
                ::java::util::List result((jobject) NULL);

                if (!parseArgs(args, "OKZI", &::java::lang::PY_TYPE(CharSequence), ::java::util::Set::initializeClass, &a0, &a1, &p1, ::java::util::t_Set::parameters_, &a2, &a3))
                {
                  OBJ_CALL(result = self->object.lookup(a0, a1, a2, a3));
                  return ::java::util::t_List::wrap_Object(result, &::org::apache::lucene::search::suggest::PY_TYPE(Lookup$LookupResult));
                }
              }
            }

            PyErr_SetArgsError((PyObject *) self, "lookup", args);
            return NULL;
          }

          static PyObject *t_Lookup_store(t_Lookup *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::org::apache::lucene::store::DataOutput a0((jobject) NULL);
                jboolean result;

                if (!parseArgs(args, "k", ::org::apache::lucene::store::DataOutput::initializeClass, &a0))
                {
                  OBJ_CALL(result = self->object.store(a0));
                  Py_RETURN_BOOL(result);
                }
              }
              {
                ::java::io::OutputStream a0((jobject) NULL);
                jboolean result;

                if (!parseArgs(args, "k", ::java::io::OutputStream::initializeClass, &a0))
                {
                  OBJ_CALL(result = self->object.store(a0));
                  Py_RETURN_BOOL(result);
                }
              }
            }

            PyErr_SetArgsError((PyObject *) self, "store", args);
            return NULL;
          }

          static PyObject *t_Lookup_get__count(t_Lookup *self, void *data)
          {
            jlong value;
            OBJ_CALL(value = self->object.getCount());
            return PyLong_FromLongLong((PY_LONG_LONG) value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/compressing/Decompressor.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "java/lang/Class.h"
#include "java/lang/Cloneable.h"
#include "org/apache/lucene/store/DataInput.h"
#include "java/io/IOException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace compressing {

          ::java::lang::Class *Decompressor::class$ = NULL;
          jmethodID *Decompressor::mids$ = NULL;
          bool Decompressor::live$ = false;

          jclass Decompressor::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/compressing/Decompressor");

              mids$ = new jmethodID[max_mid];
              mids$[mid_clone_7b8f1b1d] = env->getMethodID(cls, "clone", "()Lorg/apache/lucene/codecs/compressing/Decompressor;");
              mids$[mid_decompress_3188de91] = env->getMethodID(cls, "decompress", "(Lorg/apache/lucene/store/DataInput;IIILorg/apache/lucene/util/BytesRef;)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          Decompressor Decompressor::clone() const
          {
            return Decompressor(env->callObjectMethod(this$, mids$[mid_clone_7b8f1b1d]));
          }

          void Decompressor::decompress(const ::org::apache::lucene::store::DataInput & a0, jint a1, jint a2, jint a3, const ::org::apache::lucene::util::BytesRef & a4) const
          {
            env->callVoidMethod(this$, mids$[mid_decompress_3188de91], a0.this$, a1, a2, a3, a4.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace compressing {
          static PyObject *t_Decompressor_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Decompressor_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Decompressor_clone(t_Decompressor *self);
          static PyObject *t_Decompressor_decompress(t_Decompressor *self, PyObject *args);

          static PyMethodDef t_Decompressor__methods_[] = {
            DECLARE_METHOD(t_Decompressor, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Decompressor, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Decompressor, clone, METH_NOARGS),
            DECLARE_METHOD(t_Decompressor, decompress, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(Decompressor, t_Decompressor, ::java::lang::Object, Decompressor, abstract_init, 0, 0, 0, 0, 0);

          void t_Decompressor::install(PyObject *module)
          {
            installType(&PY_TYPE(Decompressor), module, "Decompressor", 0);
          }

          void t_Decompressor::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(Decompressor).tp_dict, "class_", make_descriptor(Decompressor::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(Decompressor).tp_dict, "wrapfn_", make_descriptor(t_Decompressor::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(Decompressor).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_Decompressor_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, Decompressor::initializeClass, 1)))
              return NULL;
            return t_Decompressor::wrap_Object(Decompressor(((t_Decompressor *) arg)->object.this$));
          }
          static PyObject *t_Decompressor_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, Decompressor::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_Decompressor_clone(t_Decompressor *self)
          {
            Decompressor result((jobject) NULL);
            OBJ_CALL(result = self->object.clone());
            return t_Decompressor::wrap_Object(result);
          }

          static PyObject *t_Decompressor_decompress(t_Decompressor *self, PyObject *args)
          {
            ::org::apache::lucene::store::DataInput a0((jobject) NULL);
            jint a1;
            jint a2;
            jint a3;
            ::org::apache::lucene::util::BytesRef a4((jobject) NULL);

            if (!parseArgs(args, "kIIIk", ::org::apache::lucene::store::DataInput::initializeClass, ::org::apache::lucene::util::BytesRef::initializeClass, &a0, &a1, &a2, &a3, &a4))
            {
              OBJ_CALL(self->object.decompress(a0, a1, a2, a3, a4));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "decompress", args);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/tartarus/snowball/ext/LovinsStemmer.h"
#include "java/lang/Object.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace tartarus {
    namespace snowball {
      namespace ext {

        ::java::lang::Class *LovinsStemmer::class$ = NULL;
        jmethodID *LovinsStemmer::mids$ = NULL;
        bool LovinsStemmer::live$ = false;

        jclass LovinsStemmer::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/tartarus/snowball/ext/LovinsStemmer");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
            mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
            mids$[mid_stem_54c6a16a] = env->getMethodID(cls, "stem", "()Z");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        LovinsStemmer::LovinsStemmer() : ::org::tartarus::snowball::SnowballProgram(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        jboolean LovinsStemmer::equals(const ::java::lang::Object & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
        }

        jint LovinsStemmer::hashCode() const
        {
          return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
        }

        jboolean LovinsStemmer::stem() const
        {
          return env->callBooleanMethod(this$, mids$[mid_stem_54c6a16a]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace tartarus {
    namespace snowball {
      namespace ext {
        static PyObject *t_LovinsStemmer_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_LovinsStemmer_instance_(PyTypeObject *type, PyObject *arg);
        static int t_LovinsStemmer_init_(t_LovinsStemmer *self, PyObject *args, PyObject *kwds);
        static PyObject *t_LovinsStemmer_equals(t_LovinsStemmer *self, PyObject *args);
        static PyObject *t_LovinsStemmer_hashCode(t_LovinsStemmer *self, PyObject *args);
        static PyObject *t_LovinsStemmer_stem(t_LovinsStemmer *self, PyObject *args);

        static PyMethodDef t_LovinsStemmer__methods_[] = {
          DECLARE_METHOD(t_LovinsStemmer, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_LovinsStemmer, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_LovinsStemmer, equals, METH_VARARGS),
          DECLARE_METHOD(t_LovinsStemmer, hashCode, METH_VARARGS),
          DECLARE_METHOD(t_LovinsStemmer, stem, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(LovinsStemmer, t_LovinsStemmer, ::org::tartarus::snowball::SnowballProgram, LovinsStemmer, t_LovinsStemmer_init_, 0, 0, 0, 0, 0);

        void t_LovinsStemmer::install(PyObject *module)
        {
          installType(&PY_TYPE(LovinsStemmer), module, "LovinsStemmer", 0);
        }

        void t_LovinsStemmer::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(LovinsStemmer).tp_dict, "class_", make_descriptor(LovinsStemmer::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(LovinsStemmer).tp_dict, "wrapfn_", make_descriptor(t_LovinsStemmer::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(LovinsStemmer).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_LovinsStemmer_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, LovinsStemmer::initializeClass, 1)))
            return NULL;
          return t_LovinsStemmer::wrap_Object(LovinsStemmer(((t_LovinsStemmer *) arg)->object.this$));
        }
        static PyObject *t_LovinsStemmer_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, LovinsStemmer::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_LovinsStemmer_init_(t_LovinsStemmer *self, PyObject *args, PyObject *kwds)
        {
          LovinsStemmer object((jobject) NULL);

          INT_CALL(object = LovinsStemmer());
          self->object = object;

          return 0;
        }

        static PyObject *t_LovinsStemmer_equals(t_LovinsStemmer *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.equals(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(LovinsStemmer), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_LovinsStemmer_hashCode(t_LovinsStemmer *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hashCode());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(LovinsStemmer), (PyObject *) self, "hashCode", args, 2);
        }

        static PyObject *t_LovinsStemmer_stem(t_LovinsStemmer *self, PyObject *args)
        {
          jboolean result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.stem());
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(LovinsStemmer), (PyObject *) self, "stem", args, 2);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/facet/taxonomy/TaxonomyFacetCounts.h"
#include "org/apache/lucene/facet/taxonomy/OrdinalsReader.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/facet/FacetsCollector.h"
#include "org/apache/lucene/facet/taxonomy/TaxonomyReader.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/facet/FacetsConfig.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace taxonomy {

          ::java::lang::Class *TaxonomyFacetCounts::class$ = NULL;
          jmethodID *TaxonomyFacetCounts::mids$ = NULL;
          bool TaxonomyFacetCounts::live$ = false;

          jclass TaxonomyFacetCounts::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/facet/taxonomy/TaxonomyFacetCounts");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_50be664b] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/facet/taxonomy/OrdinalsReader;Lorg/apache/lucene/facet/taxonomy/TaxonomyReader;Lorg/apache/lucene/facet/FacetsConfig;Lorg/apache/lucene/facet/FacetsCollector;)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          TaxonomyFacetCounts::TaxonomyFacetCounts(const ::org::apache::lucene::facet::taxonomy::OrdinalsReader & a0, const ::org::apache::lucene::facet::taxonomy::TaxonomyReader & a1, const ::org::apache::lucene::facet::FacetsConfig & a2, const ::org::apache::lucene::facet::FacetsCollector & a3) : ::org::apache::lucene::facet::taxonomy::IntTaxonomyFacets(env->newObject(initializeClass, &mids$, mid_init$_50be664b, a0.this$, a1.this$, a2.this$, a3.this$)) {}
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace taxonomy {
          static PyObject *t_TaxonomyFacetCounts_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_TaxonomyFacetCounts_instance_(PyTypeObject *type, PyObject *arg);
          static int t_TaxonomyFacetCounts_init_(t_TaxonomyFacetCounts *self, PyObject *args, PyObject *kwds);

          static PyMethodDef t_TaxonomyFacetCounts__methods_[] = {
            DECLARE_METHOD(t_TaxonomyFacetCounts, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_TaxonomyFacetCounts, instance_, METH_O | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(TaxonomyFacetCounts, t_TaxonomyFacetCounts, ::org::apache::lucene::facet::taxonomy::IntTaxonomyFacets, TaxonomyFacetCounts, t_TaxonomyFacetCounts_init_, 0, 0, 0, 0, 0);

          void t_TaxonomyFacetCounts::install(PyObject *module)
          {
            installType(&PY_TYPE(TaxonomyFacetCounts), module, "TaxonomyFacetCounts", 0);
          }

          void t_TaxonomyFacetCounts::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(TaxonomyFacetCounts).tp_dict, "class_", make_descriptor(TaxonomyFacetCounts::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(TaxonomyFacetCounts).tp_dict, "wrapfn_", make_descriptor(t_TaxonomyFacetCounts::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(TaxonomyFacetCounts).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_TaxonomyFacetCounts_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, TaxonomyFacetCounts::initializeClass, 1)))
              return NULL;
            return t_TaxonomyFacetCounts::wrap_Object(TaxonomyFacetCounts(((t_TaxonomyFacetCounts *) arg)->object.this$));
          }
          static PyObject *t_TaxonomyFacetCounts_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, TaxonomyFacetCounts::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_TaxonomyFacetCounts_init_(t_TaxonomyFacetCounts *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::facet::taxonomy::OrdinalsReader a0((jobject) NULL);
            ::org::apache::lucene::facet::taxonomy::TaxonomyReader a1((jobject) NULL);
            ::org::apache::lucene::facet::FacetsConfig a2((jobject) NULL);
            ::org::apache::lucene::facet::FacetsCollector a3((jobject) NULL);
            TaxonomyFacetCounts object((jobject) NULL);

            if (!parseArgs(args, "kkkk", ::org::apache::lucene::facet::taxonomy::OrdinalsReader::initializeClass, ::org::apache::lucene::facet::taxonomy::TaxonomyReader::initializeClass, ::org::apache::lucene::facet::FacetsConfig::initializeClass, ::org::apache::lucene::facet::FacetsCollector::initializeClass, &a0, &a1, &a2, &a3))
            {
              INT_CALL(object = TaxonomyFacetCounts(a0, a1, a2, a3));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/standard/config/NumericConfig.h"
#include "org/apache/lucene/document/FieldType$NumericType.h"
#include "java/text/NumberFormat.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace config {

              ::java::lang::Class *NumericConfig::class$ = NULL;
              jmethodID *NumericConfig::mids$ = NULL;
              bool NumericConfig::live$ = false;

              jclass NumericConfig::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/standard/config/NumericConfig");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_09c28ef7] = env->getMethodID(cls, "<init>", "(ILjava/text/NumberFormat;Lorg/apache/lucene/document/FieldType$NumericType;)V");
                  mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
                  mids$[mid_getNumberFormat_6b701965] = env->getMethodID(cls, "getNumberFormat", "()Ljava/text/NumberFormat;");
                  mids$[mid_getPrecisionStep_54c6a179] = env->getMethodID(cls, "getPrecisionStep", "()I");
                  mids$[mid_getType_81bd17c2] = env->getMethodID(cls, "getType", "()Lorg/apache/lucene/document/FieldType$NumericType;");
                  mids$[mid_setNumberFormat_d2d1ba24] = env->getMethodID(cls, "setNumberFormat", "(Ljava/text/NumberFormat;)V");
                  mids$[mid_setPrecisionStep_39c7bd3c] = env->getMethodID(cls, "setPrecisionStep", "(I)V");
                  mids$[mid_setType_d9029e47] = env->getMethodID(cls, "setType", "(Lorg/apache/lucene/document/FieldType$NumericType;)V");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              NumericConfig::NumericConfig(jint a0, const ::java::text::NumberFormat & a1, const ::org::apache::lucene::document::FieldType$NumericType & a2) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_09c28ef7, a0, a1.this$, a2.this$)) {}

              jboolean NumericConfig::equals(const ::java::lang::Object & a0) const
              {
                return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
              }

              ::java::text::NumberFormat NumericConfig::getNumberFormat() const
              {
                return ::java::text::NumberFormat(env->callObjectMethod(this$, mids$[mid_getNumberFormat_6b701965]));
              }

              jint NumericConfig::getPrecisionStep() const
              {
                return env->callIntMethod(this$, mids$[mid_getPrecisionStep_54c6a179]);
              }

              ::org::apache::lucene::document::FieldType$NumericType NumericConfig::getType() const
              {
                return ::org::apache::lucene::document::FieldType$NumericType(env->callObjectMethod(this$, mids$[mid_getType_81bd17c2]));
              }

              void NumericConfig::setNumberFormat(const ::java::text::NumberFormat & a0) const
              {
                env->callVoidMethod(this$, mids$[mid_setNumberFormat_d2d1ba24], a0.this$);
              }

              void NumericConfig::setPrecisionStep(jint a0) const
              {
                env->callVoidMethod(this$, mids$[mid_setPrecisionStep_39c7bd3c], a0);
              }

              void NumericConfig::setType(const ::org::apache::lucene::document::FieldType$NumericType & a0) const
              {
                env->callVoidMethod(this$, mids$[mid_setType_d9029e47], a0.this$);
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace config {
              static PyObject *t_NumericConfig_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_NumericConfig_instance_(PyTypeObject *type, PyObject *arg);
              static int t_NumericConfig_init_(t_NumericConfig *self, PyObject *args, PyObject *kwds);
              static PyObject *t_NumericConfig_equals(t_NumericConfig *self, PyObject *args);
              static PyObject *t_NumericConfig_getNumberFormat(t_NumericConfig *self);
              static PyObject *t_NumericConfig_getPrecisionStep(t_NumericConfig *self);
              static PyObject *t_NumericConfig_getType(t_NumericConfig *self);
              static PyObject *t_NumericConfig_setNumberFormat(t_NumericConfig *self, PyObject *arg);
              static PyObject *t_NumericConfig_setPrecisionStep(t_NumericConfig *self, PyObject *arg);
              static PyObject *t_NumericConfig_setType(t_NumericConfig *self, PyObject *arg);
              static PyObject *t_NumericConfig_get__numberFormat(t_NumericConfig *self, void *data);
              static int t_NumericConfig_set__numberFormat(t_NumericConfig *self, PyObject *arg, void *data);
              static PyObject *t_NumericConfig_get__precisionStep(t_NumericConfig *self, void *data);
              static int t_NumericConfig_set__precisionStep(t_NumericConfig *self, PyObject *arg, void *data);
              static PyObject *t_NumericConfig_get__type(t_NumericConfig *self, void *data);
              static int t_NumericConfig_set__type(t_NumericConfig *self, PyObject *arg, void *data);
              static PyGetSetDef t_NumericConfig__fields_[] = {
                DECLARE_GETSET_FIELD(t_NumericConfig, numberFormat),
                DECLARE_GETSET_FIELD(t_NumericConfig, precisionStep),
                DECLARE_GETSET_FIELD(t_NumericConfig, type),
                { NULL, NULL, NULL, NULL, NULL }
              };

              static PyMethodDef t_NumericConfig__methods_[] = {
                DECLARE_METHOD(t_NumericConfig, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_NumericConfig, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_NumericConfig, equals, METH_VARARGS),
                DECLARE_METHOD(t_NumericConfig, getNumberFormat, METH_NOARGS),
                DECLARE_METHOD(t_NumericConfig, getPrecisionStep, METH_NOARGS),
                DECLARE_METHOD(t_NumericConfig, getType, METH_NOARGS),
                DECLARE_METHOD(t_NumericConfig, setNumberFormat, METH_O),
                DECLARE_METHOD(t_NumericConfig, setPrecisionStep, METH_O),
                DECLARE_METHOD(t_NumericConfig, setType, METH_O),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(NumericConfig, t_NumericConfig, ::java::lang::Object, NumericConfig, t_NumericConfig_init_, 0, 0, t_NumericConfig__fields_, 0, 0);

              void t_NumericConfig::install(PyObject *module)
              {
                installType(&PY_TYPE(NumericConfig), module, "NumericConfig", 0);
              }

              void t_NumericConfig::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(NumericConfig).tp_dict, "class_", make_descriptor(NumericConfig::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(NumericConfig).tp_dict, "wrapfn_", make_descriptor(t_NumericConfig::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(NumericConfig).tp_dict, "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_NumericConfig_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, NumericConfig::initializeClass, 1)))
                  return NULL;
                return t_NumericConfig::wrap_Object(NumericConfig(((t_NumericConfig *) arg)->object.this$));
              }
              static PyObject *t_NumericConfig_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, NumericConfig::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_NumericConfig_init_(t_NumericConfig *self, PyObject *args, PyObject *kwds)
              {
                jint a0;
                ::java::text::NumberFormat a1((jobject) NULL);
                ::org::apache::lucene::document::FieldType$NumericType a2((jobject) NULL);
                PyTypeObject **p2;
                NumericConfig object((jobject) NULL);

                if (!parseArgs(args, "IkK", ::java::text::NumberFormat::initializeClass, ::org::apache::lucene::document::FieldType$NumericType::initializeClass, &a0, &a1, &a2, &p2, ::org::apache::lucene::document::t_FieldType$NumericType::parameters_))
                {
                  INT_CALL(object = NumericConfig(a0, a1, a2));
                  self->object = object;
                }
                else
                {
                  PyErr_SetArgsError((PyObject *) self, "__init__", args);
                  return -1;
                }

                return 0;
              }

              static PyObject *t_NumericConfig_equals(t_NumericConfig *self, PyObject *args)
              {
                ::java::lang::Object a0((jobject) NULL);
                jboolean result;

                if (!parseArgs(args, "o", &a0))
                {
                  OBJ_CALL(result = self->object.equals(a0));
                  Py_RETURN_BOOL(result);
                }

                return callSuper(&PY_TYPE(NumericConfig), (PyObject *) self, "equals", args, 2);
              }

              static PyObject *t_NumericConfig_getNumberFormat(t_NumericConfig *self)
              {
                ::java::text::NumberFormat result((jobject) NULL);
                OBJ_CALL(result = self->object.getNumberFormat());
                return ::java::text::t_NumberFormat::wrap_Object(result);
              }

              static PyObject *t_NumericConfig_getPrecisionStep(t_NumericConfig *self)
              {
                jint result;
                OBJ_CALL(result = self->object.getPrecisionStep());
                return PyInt_FromLong((long) result);
              }

              static PyObject *t_NumericConfig_getType(t_NumericConfig *self)
              {
                ::org::apache::lucene::document::FieldType$NumericType result((jobject) NULL);
                OBJ_CALL(result = self->object.getType());
                return ::org::apache::lucene::document::t_FieldType$NumericType::wrap_Object(result);
              }

              static PyObject *t_NumericConfig_setNumberFormat(t_NumericConfig *self, PyObject *arg)
              {
                ::java::text::NumberFormat a0((jobject) NULL);

                if (!parseArg(arg, "k", ::java::text::NumberFormat::initializeClass, &a0))
                {
                  OBJ_CALL(self->object.setNumberFormat(a0));
                  Py_RETURN_NONE;
                }

                PyErr_SetArgsError((PyObject *) self, "setNumberFormat", arg);
                return NULL;
              }

              static PyObject *t_NumericConfig_setPrecisionStep(t_NumericConfig *self, PyObject *arg)
              {
                jint a0;

                if (!parseArg(arg, "I", &a0))
                {
                  OBJ_CALL(self->object.setPrecisionStep(a0));
                  Py_RETURN_NONE;
                }

                PyErr_SetArgsError((PyObject *) self, "setPrecisionStep", arg);
                return NULL;
              }

              static PyObject *t_NumericConfig_setType(t_NumericConfig *self, PyObject *arg)
              {
                ::org::apache::lucene::document::FieldType$NumericType a0((jobject) NULL);
                PyTypeObject **p0;

                if (!parseArg(arg, "K", ::org::apache::lucene::document::FieldType$NumericType::initializeClass, &a0, &p0, ::org::apache::lucene::document::t_FieldType$NumericType::parameters_))
                {
                  OBJ_CALL(self->object.setType(a0));
                  Py_RETURN_NONE;
                }

                PyErr_SetArgsError((PyObject *) self, "setType", arg);
                return NULL;
              }

              static PyObject *t_NumericConfig_get__numberFormat(t_NumericConfig *self, void *data)
              {
                ::java::text::NumberFormat value((jobject) NULL);
                OBJ_CALL(value = self->object.getNumberFormat());
                return ::java::text::t_NumberFormat::wrap_Object(value);
              }
              static int t_NumericConfig_set__numberFormat(t_NumericConfig *self, PyObject *arg, void *data)
              {
                {
                  ::java::text::NumberFormat value((jobject) NULL);
                  if (!parseArg(arg, "k", ::java::text::NumberFormat::initializeClass, &value))
                  {
                    INT_CALL(self->object.setNumberFormat(value));
                    return 0;
                  }
                }
                PyErr_SetArgsError((PyObject *) self, "numberFormat", arg);
                return -1;
              }

              static PyObject *t_NumericConfig_get__precisionStep(t_NumericConfig *self, void *data)
              {
                jint value;
                OBJ_CALL(value = self->object.getPrecisionStep());
                return PyInt_FromLong((long) value);
              }
              static int t_NumericConfig_set__precisionStep(t_NumericConfig *self, PyObject *arg, void *data)
              {
                {
                  jint value;
                  if (!parseArg(arg, "I", &value))
                  {
                    INT_CALL(self->object.setPrecisionStep(value));
                    return 0;
                  }
                }
                PyErr_SetArgsError((PyObject *) self, "precisionStep", arg);
                return -1;
              }

              static PyObject *t_NumericConfig_get__type(t_NumericConfig *self, void *data)
              {
                ::org::apache::lucene::document::FieldType$NumericType value((jobject) NULL);
                OBJ_CALL(value = self->object.getType());
                return ::org::apache::lucene::document::t_FieldType$NumericType::wrap_Object(value);
              }
              static int t_NumericConfig_set__type(t_NumericConfig *self, PyObject *arg, void *data)
              {
                {
                  ::org::apache::lucene::document::FieldType$NumericType value((jobject) NULL);
                  if (!parseArg(arg, "k", ::org::apache::lucene::document::FieldType$NumericType::initializeClass, &value))
                  {
                    INT_CALL(self->object.setType(value));
                    return 0;
                  }
                }
                PyErr_SetArgsError((PyObject *) self, "type", arg);
                return -1;
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/ngram/Lucene43EdgeNGramTokenizer$Side.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ngram {

          ::java::lang::Class *Lucene43EdgeNGramTokenizer$Side::class$ = NULL;
          jmethodID *Lucene43EdgeNGramTokenizer$Side::mids$ = NULL;
          bool Lucene43EdgeNGramTokenizer$Side::live$ = false;
          Lucene43EdgeNGramTokenizer$Side *Lucene43EdgeNGramTokenizer$Side::BACK = NULL;
          Lucene43EdgeNGramTokenizer$Side *Lucene43EdgeNGramTokenizer$Side::FRONT = NULL;

          jclass Lucene43EdgeNGramTokenizer$Side::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/ngram/Lucene43EdgeNGramTokenizer$Side");

              mids$ = new jmethodID[max_mid];
              mids$[mid_getLabel_14c7b5c5] = env->getMethodID(cls, "getLabel", "()Ljava/lang/String;");
              mids$[mid_getSide_2ac44635] = env->getStaticMethodID(cls, "getSide", "(Ljava/lang/String;)Lorg/apache/lucene/analysis/ngram/Lucene43EdgeNGramTokenizer$Side;");
              mids$[mid_valueOf_2ac44635] = env->getStaticMethodID(cls, "valueOf", "(Ljava/lang/String;)Lorg/apache/lucene/analysis/ngram/Lucene43EdgeNGramTokenizer$Side;");
              mids$[mid_values_0033eb83] = env->getStaticMethodID(cls, "values", "()[Lorg/apache/lucene/analysis/ngram/Lucene43EdgeNGramTokenizer$Side;");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              BACK = new Lucene43EdgeNGramTokenizer$Side(env->getStaticObjectField(cls, "BACK", "Lorg/apache/lucene/analysis/ngram/Lucene43EdgeNGramTokenizer$Side;"));
              FRONT = new Lucene43EdgeNGramTokenizer$Side(env->getStaticObjectField(cls, "FRONT", "Lorg/apache/lucene/analysis/ngram/Lucene43EdgeNGramTokenizer$Side;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ::java::lang::String Lucene43EdgeNGramTokenizer$Side::getLabel() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getLabel_14c7b5c5]));
          }

          Lucene43EdgeNGramTokenizer$Side Lucene43EdgeNGramTokenizer$Side::getSide(const ::java::lang::String & a0)
          {
            jclass cls = env->getClass(initializeClass);
            return Lucene43EdgeNGramTokenizer$Side(env->callStaticObjectMethod(cls, mids$[mid_getSide_2ac44635], a0.this$));
          }

          Lucene43EdgeNGramTokenizer$Side Lucene43EdgeNGramTokenizer$Side::valueOf(const ::java::lang::String & a0)
          {
            jclass cls = env->getClass(initializeClass);
            return Lucene43EdgeNGramTokenizer$Side(env->callStaticObjectMethod(cls, mids$[mid_valueOf_2ac44635], a0.this$));
          }

          JArray< Lucene43EdgeNGramTokenizer$Side > Lucene43EdgeNGramTokenizer$Side::values()
          {
            jclass cls = env->getClass(initializeClass);
            return JArray< Lucene43EdgeNGramTokenizer$Side >(env->callStaticObjectMethod(cls, mids$[mid_values_0033eb83]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ngram {
          static PyObject *t_Lucene43EdgeNGramTokenizer$Side_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Lucene43EdgeNGramTokenizer$Side_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Lucene43EdgeNGramTokenizer$Side_of_(t_Lucene43EdgeNGramTokenizer$Side *self, PyObject *args);
          static PyObject *t_Lucene43EdgeNGramTokenizer$Side_getLabel(t_Lucene43EdgeNGramTokenizer$Side *self);
          static PyObject *t_Lucene43EdgeNGramTokenizer$Side_getSide(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Lucene43EdgeNGramTokenizer$Side_valueOf(PyTypeObject *type, PyObject *args);
          static PyObject *t_Lucene43EdgeNGramTokenizer$Side_values(PyTypeObject *type);
          static PyObject *t_Lucene43EdgeNGramTokenizer$Side_get__label(t_Lucene43EdgeNGramTokenizer$Side *self, void *data);
          static PyObject *t_Lucene43EdgeNGramTokenizer$Side_get__parameters_(t_Lucene43EdgeNGramTokenizer$Side *self, void *data);
          static PyGetSetDef t_Lucene43EdgeNGramTokenizer$Side__fields_[] = {
            DECLARE_GET_FIELD(t_Lucene43EdgeNGramTokenizer$Side, label),
            DECLARE_GET_FIELD(t_Lucene43EdgeNGramTokenizer$Side, parameters_),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_Lucene43EdgeNGramTokenizer$Side__methods_[] = {
            DECLARE_METHOD(t_Lucene43EdgeNGramTokenizer$Side, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lucene43EdgeNGramTokenizer$Side, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lucene43EdgeNGramTokenizer$Side, of_, METH_VARARGS),
            DECLARE_METHOD(t_Lucene43EdgeNGramTokenizer$Side, getLabel, METH_NOARGS),
            DECLARE_METHOD(t_Lucene43EdgeNGramTokenizer$Side, getSide, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lucene43EdgeNGramTokenizer$Side, valueOf, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_Lucene43EdgeNGramTokenizer$Side, values, METH_NOARGS | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(Lucene43EdgeNGramTokenizer$Side, t_Lucene43EdgeNGramTokenizer$Side, ::java::lang::Enum, Lucene43EdgeNGramTokenizer$Side, abstract_init, 0, 0, t_Lucene43EdgeNGramTokenizer$Side__fields_, 0, 0);
          PyObject *t_Lucene43EdgeNGramTokenizer$Side::wrap_Object(const Lucene43EdgeNGramTokenizer$Side& object, PyTypeObject *p0)
          {
            PyObject *obj = t_Lucene43EdgeNGramTokenizer$Side::wrap_Object(object);
            if (obj != NULL && obj != Py_None)
            {
              t_Lucene43EdgeNGramTokenizer$Side *self = (t_Lucene43EdgeNGramTokenizer$Side *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          PyObject *t_Lucene43EdgeNGramTokenizer$Side::wrap_jobject(const jobject& object, PyTypeObject *p0)
          {
            PyObject *obj = t_Lucene43EdgeNGramTokenizer$Side::wrap_jobject(object);
            if (obj != NULL && obj != Py_None)
            {
              t_Lucene43EdgeNGramTokenizer$Side *self = (t_Lucene43EdgeNGramTokenizer$Side *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          void t_Lucene43EdgeNGramTokenizer$Side::install(PyObject *module)
          {
            installType(&PY_TYPE(Lucene43EdgeNGramTokenizer$Side), module, "Lucene43EdgeNGramTokenizer$Side", 0);
          }

          void t_Lucene43EdgeNGramTokenizer$Side::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(Lucene43EdgeNGramTokenizer$Side).tp_dict, "class_", make_descriptor(Lucene43EdgeNGramTokenizer$Side::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(Lucene43EdgeNGramTokenizer$Side).tp_dict, "wrapfn_", make_descriptor(t_Lucene43EdgeNGramTokenizer$Side::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(Lucene43EdgeNGramTokenizer$Side).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(Lucene43EdgeNGramTokenizer$Side::initializeClass);
            PyDict_SetItemString(PY_TYPE(Lucene43EdgeNGramTokenizer$Side).tp_dict, "BACK", make_descriptor(t_Lucene43EdgeNGramTokenizer$Side::wrap_Object(*Lucene43EdgeNGramTokenizer$Side::BACK)));
            PyDict_SetItemString(PY_TYPE(Lucene43EdgeNGramTokenizer$Side).tp_dict, "FRONT", make_descriptor(t_Lucene43EdgeNGramTokenizer$Side::wrap_Object(*Lucene43EdgeNGramTokenizer$Side::FRONT)));
          }

          static PyObject *t_Lucene43EdgeNGramTokenizer$Side_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, Lucene43EdgeNGramTokenizer$Side::initializeClass, 1)))
              return NULL;
            return t_Lucene43EdgeNGramTokenizer$Side::wrap_Object(Lucene43EdgeNGramTokenizer$Side(((t_Lucene43EdgeNGramTokenizer$Side *) arg)->object.this$));
          }
          static PyObject *t_Lucene43EdgeNGramTokenizer$Side_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, Lucene43EdgeNGramTokenizer$Side::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_Lucene43EdgeNGramTokenizer$Side_of_(t_Lucene43EdgeNGramTokenizer$Side *self, PyObject *args)
          {
            if (!parseArg(args, "T", 1, &(self->parameters)))
              Py_RETURN_SELF;
            return PyErr_SetArgsError((PyObject *) self, "of_", args);
          }

          static PyObject *t_Lucene43EdgeNGramTokenizer$Side_getLabel(t_Lucene43EdgeNGramTokenizer$Side *self)
          {
            ::java::lang::String result((jobject) NULL);
            OBJ_CALL(result = self->object.getLabel());
            return j2p(result);
          }

          static PyObject *t_Lucene43EdgeNGramTokenizer$Side_getSide(PyTypeObject *type, PyObject *arg)
          {
            ::java::lang::String a0((jobject) NULL);
            Lucene43EdgeNGramTokenizer$Side result((jobject) NULL);

            if (!parseArg(arg, "s", &a0))
            {
              OBJ_CALL(result = ::org::apache::lucene::analysis::ngram::Lucene43EdgeNGramTokenizer$Side::getSide(a0));
              return t_Lucene43EdgeNGramTokenizer$Side::wrap_Object(result);
            }

            PyErr_SetArgsError(type, "getSide", arg);
            return NULL;
          }

          static PyObject *t_Lucene43EdgeNGramTokenizer$Side_valueOf(PyTypeObject *type, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            Lucene43EdgeNGramTokenizer$Side result((jobject) NULL);

            if (!parseArgs(args, "s", &a0))
            {
              OBJ_CALL(result = ::org::apache::lucene::analysis::ngram::Lucene43EdgeNGramTokenizer$Side::valueOf(a0));
              return t_Lucene43EdgeNGramTokenizer$Side::wrap_Object(result);
            }

            return callSuper(type, "valueOf", args, 2);
          }

          static PyObject *t_Lucene43EdgeNGramTokenizer$Side_values(PyTypeObject *type)
          {
            JArray< Lucene43EdgeNGramTokenizer$Side > result((jobject) NULL);
            OBJ_CALL(result = ::org::apache::lucene::analysis::ngram::Lucene43EdgeNGramTokenizer$Side::values());
            return JArray<jobject>(result.this$).wrap(t_Lucene43EdgeNGramTokenizer$Side::wrap_jobject);
          }
          static PyObject *t_Lucene43EdgeNGramTokenizer$Side_get__parameters_(t_Lucene43EdgeNGramTokenizer$Side *self, void *data)
          {
            return typeParameters(self->parameters, sizeof(self->parameters));
          }

          static PyObject *t_Lucene43EdgeNGramTokenizer$Side_get__label(t_Lucene43EdgeNGramTokenizer$Side *self, void *data)
          {
            ::java::lang::String value((jobject) NULL);
            OBJ_CALL(value = self->object.getLabel());
            return j2p(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/ControlledRealTimeReopenThread.h"
#include "java/io/Closeable.h"
#include "java/lang/InterruptedException.h"
#include "org/apache/lucene/search/ReferenceManager.h"
#include "org/apache/lucene/index/TrackingIndexWriter.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *ControlledRealTimeReopenThread::class$ = NULL;
        jmethodID *ControlledRealTimeReopenThread::mids$ = NULL;
        bool ControlledRealTimeReopenThread::live$ = false;

        jclass ControlledRealTimeReopenThread::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/ControlledRealTimeReopenThread");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_a0c538a8] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/TrackingIndexWriter;Lorg/apache/lucene/search/ReferenceManager;DD)V");
            mids$[mid_close_54c6a166] = env->getMethodID(cls, "close", "()V");
            mids$[mid_run_54c6a166] = env->getMethodID(cls, "run", "()V");
            mids$[mid_waitForGeneration_0ee6df2f] = env->getMethodID(cls, "waitForGeneration", "(J)V");
            mids$[mid_waitForGeneration_25d05c83] = env->getMethodID(cls, "waitForGeneration", "(JI)Z");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        ControlledRealTimeReopenThread::ControlledRealTimeReopenThread(const ::org::apache::lucene::index::TrackingIndexWriter & a0, const ::org::apache::lucene::search::ReferenceManager & a1, jdouble a2, jdouble a3) : ::java::lang::Thread(env->newObject(initializeClass, &mids$, mid_init$_a0c538a8, a0.this$, a1.this$, a2, a3)) {}

        void ControlledRealTimeReopenThread::close() const
        {
          env->callVoidMethod(this$, mids$[mid_close_54c6a166]);
        }

        void ControlledRealTimeReopenThread::run() const
        {
          env->callVoidMethod(this$, mids$[mid_run_54c6a166]);
        }

        void ControlledRealTimeReopenThread::waitForGeneration(jlong a0) const
        {
          env->callVoidMethod(this$, mids$[mid_waitForGeneration_0ee6df2f], a0);
        }

        jboolean ControlledRealTimeReopenThread::waitForGeneration(jlong a0, jint a1) const
        {
          return env->callBooleanMethod(this$, mids$[mid_waitForGeneration_25d05c83], a0, a1);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_ControlledRealTimeReopenThread_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_ControlledRealTimeReopenThread_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_ControlledRealTimeReopenThread_of_(t_ControlledRealTimeReopenThread *self, PyObject *args);
        static int t_ControlledRealTimeReopenThread_init_(t_ControlledRealTimeReopenThread *self, PyObject *args, PyObject *kwds);
        static PyObject *t_ControlledRealTimeReopenThread_close(t_ControlledRealTimeReopenThread *self);
        static PyObject *t_ControlledRealTimeReopenThread_run(t_ControlledRealTimeReopenThread *self, PyObject *args);
        static PyObject *t_ControlledRealTimeReopenThread_waitForGeneration(t_ControlledRealTimeReopenThread *self, PyObject *args);
        static PyObject *t_ControlledRealTimeReopenThread_get__parameters_(t_ControlledRealTimeReopenThread *self, void *data);
        static PyGetSetDef t_ControlledRealTimeReopenThread__fields_[] = {
          DECLARE_GET_FIELD(t_ControlledRealTimeReopenThread, parameters_),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_ControlledRealTimeReopenThread__methods_[] = {
          DECLARE_METHOD(t_ControlledRealTimeReopenThread, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_ControlledRealTimeReopenThread, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_ControlledRealTimeReopenThread, of_, METH_VARARGS),
          DECLARE_METHOD(t_ControlledRealTimeReopenThread, close, METH_NOARGS),
          DECLARE_METHOD(t_ControlledRealTimeReopenThread, run, METH_VARARGS),
          DECLARE_METHOD(t_ControlledRealTimeReopenThread, waitForGeneration, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(ControlledRealTimeReopenThread, t_ControlledRealTimeReopenThread, ::java::lang::Thread, ControlledRealTimeReopenThread, t_ControlledRealTimeReopenThread_init_, 0, 0, t_ControlledRealTimeReopenThread__fields_, 0, 0);
        PyObject *t_ControlledRealTimeReopenThread::wrap_Object(const ControlledRealTimeReopenThread& object, PyTypeObject *p0)
        {
          PyObject *obj = t_ControlledRealTimeReopenThread::wrap_Object(object);
          if (obj != NULL && obj != Py_None)
          {
            t_ControlledRealTimeReopenThread *self = (t_ControlledRealTimeReopenThread *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        PyObject *t_ControlledRealTimeReopenThread::wrap_jobject(const jobject& object, PyTypeObject *p0)
        {
          PyObject *obj = t_ControlledRealTimeReopenThread::wrap_jobject(object);
          if (obj != NULL && obj != Py_None)
          {
            t_ControlledRealTimeReopenThread *self = (t_ControlledRealTimeReopenThread *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        void t_ControlledRealTimeReopenThread::install(PyObject *module)
        {
          installType(&PY_TYPE(ControlledRealTimeReopenThread), module, "ControlledRealTimeReopenThread", 0);
        }

        void t_ControlledRealTimeReopenThread::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(ControlledRealTimeReopenThread).tp_dict, "class_", make_descriptor(ControlledRealTimeReopenThread::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(ControlledRealTimeReopenThread).tp_dict, "wrapfn_", make_descriptor(t_ControlledRealTimeReopenThread::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(ControlledRealTimeReopenThread).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_ControlledRealTimeReopenThread_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, ControlledRealTimeReopenThread::initializeClass, 1)))
            return NULL;
          return t_ControlledRealTimeReopenThread::wrap_Object(ControlledRealTimeReopenThread(((t_ControlledRealTimeReopenThread *) arg)->object.this$));
        }
        static PyObject *t_ControlledRealTimeReopenThread_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, ControlledRealTimeReopenThread::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_ControlledRealTimeReopenThread_of_(t_ControlledRealTimeReopenThread *self, PyObject *args)
        {
          if (!parseArg(args, "T", 1, &(self->parameters)))
            Py_RETURN_SELF;
          return PyErr_SetArgsError((PyObject *) self, "of_", args);
        }

        static int t_ControlledRealTimeReopenThread_init_(t_ControlledRealTimeReopenThread *self, PyObject *args, PyObject *kwds)
        {
          ::org::apache::lucene::index::TrackingIndexWriter a0((jobject) NULL);
          ::org::apache::lucene::search::ReferenceManager a1((jobject) NULL);
          PyTypeObject **p1;
          jdouble a2;
          jdouble a3;
          ControlledRealTimeReopenThread object((jobject) NULL);

          if (!parseArgs(args, "kKDD", ::org::apache::lucene::index::TrackingIndexWriter::initializeClass, ::org::apache::lucene::search::ReferenceManager::initializeClass, &a0, &a1, &p1, ::org::apache::lucene::search::t_ReferenceManager::parameters_, &a2, &a3))
          {
            INT_CALL(object = ControlledRealTimeReopenThread(a0, a1, a2, a3));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_ControlledRealTimeReopenThread_close(t_ControlledRealTimeReopenThread *self)
        {
          OBJ_CALL(self->object.close());
          Py_RETURN_NONE;
        }

        static PyObject *t_ControlledRealTimeReopenThread_run(t_ControlledRealTimeReopenThread *self, PyObject *args)
        {

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(self->object.run());
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(ControlledRealTimeReopenThread), (PyObject *) self, "run", args, 2);
        }

        static PyObject *t_ControlledRealTimeReopenThread_waitForGeneration(t_ControlledRealTimeReopenThread *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              jlong a0;

              if (!parseArgs(args, "J", &a0))
              {
                OBJ_CALL(self->object.waitForGeneration(a0));
                Py_RETURN_NONE;
              }
            }
            break;
           case 2:
            {
              jlong a0;
              jint a1;
              jboolean result;

              if (!parseArgs(args, "JI", &a0, &a1))
              {
                OBJ_CALL(result = self->object.waitForGeneration(a0, a1));
                Py_RETURN_BOOL(result);
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "waitForGeneration", args);
          return NULL;
        }
        static PyObject *t_ControlledRealTimeReopenThread_get__parameters_(t_ControlledRealTimeReopenThread *self, void *data)
        {
          return typeParameters(self->parameters, sizeof(self->parameters));
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/ca/CatalanAnalyzer.h"
#include "org/apache/lucene/util/Version.h"
#include "java/lang/String.h"
#include "org/apache/lucene/analysis/util/CharArraySet.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ca {

          ::java::lang::Class *CatalanAnalyzer::class$ = NULL;
          jmethodID *CatalanAnalyzer::mids$ = NULL;
          bool CatalanAnalyzer::live$ = false;
          ::java::lang::String *CatalanAnalyzer::DEFAULT_STOPWORD_FILE = NULL;

          jclass CatalanAnalyzer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/ca/CatalanAnalyzer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_0d96cf33] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;)V");
              mids$[mid_init$_83eafe28] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/analysis/util/CharArraySet;)V");
              mids$[mid_init$_c9d7e4a3] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/analysis/util/CharArraySet;Lorg/apache/lucene/analysis/util/CharArraySet;)V");
              mids$[mid_getDefaultStopSet_d2d3505c] = env->getStaticMethodID(cls, "getDefaultStopSet", "()Lorg/apache/lucene/analysis/util/CharArraySet;");
              mids$[mid_createComponents_1be39cae] = env->getMethodID(cls, "createComponents", "(Ljava/lang/String;Ljava/io/Reader;)Lorg/apache/lucene/analysis/Analyzer$TokenStreamComponents;");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              DEFAULT_STOPWORD_FILE = new ::java::lang::String(env->getStaticObjectField(cls, "DEFAULT_STOPWORD_FILE", "Ljava/lang/String;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          CatalanAnalyzer::CatalanAnalyzer(const ::org::apache::lucene::util::Version & a0) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_0d96cf33, a0.this$)) {}

          CatalanAnalyzer::CatalanAnalyzer(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::analysis::util::CharArraySet & a1) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_83eafe28, a0.this$, a1.this$)) {}

          CatalanAnalyzer::CatalanAnalyzer(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::analysis::util::CharArraySet & a1, const ::org::apache::lucene::analysis::util::CharArraySet & a2) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_c9d7e4a3, a0.this$, a1.this$, a2.this$)) {}

          ::org::apache::lucene::analysis::util::CharArraySet CatalanAnalyzer::getDefaultStopSet()
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::analysis::util::CharArraySet(env->callStaticObjectMethod(cls, mids$[mid_getDefaultStopSet_d2d3505c]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ca {
          static PyObject *t_CatalanAnalyzer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_CatalanAnalyzer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_CatalanAnalyzer_init_(t_CatalanAnalyzer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_CatalanAnalyzer_getDefaultStopSet(PyTypeObject *type);
          static PyObject *t_CatalanAnalyzer_get__defaultStopSet(t_CatalanAnalyzer *self, void *data);
          static PyGetSetDef t_CatalanAnalyzer__fields_[] = {
            DECLARE_GET_FIELD(t_CatalanAnalyzer, defaultStopSet),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_CatalanAnalyzer__methods_[] = {
            DECLARE_METHOD(t_CatalanAnalyzer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CatalanAnalyzer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CatalanAnalyzer, getDefaultStopSet, METH_NOARGS | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(CatalanAnalyzer, t_CatalanAnalyzer, ::org::apache::lucene::analysis::util::StopwordAnalyzerBase, CatalanAnalyzer, t_CatalanAnalyzer_init_, 0, 0, t_CatalanAnalyzer__fields_, 0, 0);

          void t_CatalanAnalyzer::install(PyObject *module)
          {
            installType(&PY_TYPE(CatalanAnalyzer), module, "CatalanAnalyzer", 0);
          }

          void t_CatalanAnalyzer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(CatalanAnalyzer).tp_dict, "class_", make_descriptor(CatalanAnalyzer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(CatalanAnalyzer).tp_dict, "wrapfn_", make_descriptor(t_CatalanAnalyzer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(CatalanAnalyzer).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(CatalanAnalyzer::initializeClass);
            PyDict_SetItemString(PY_TYPE(CatalanAnalyzer).tp_dict, "DEFAULT_STOPWORD_FILE", make_descriptor(j2p(*CatalanAnalyzer::DEFAULT_STOPWORD_FILE)));
          }

          static PyObject *t_CatalanAnalyzer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, CatalanAnalyzer::initializeClass, 1)))
              return NULL;
            return t_CatalanAnalyzer::wrap_Object(CatalanAnalyzer(((t_CatalanAnalyzer *) arg)->object.this$));
          }
          static PyObject *t_CatalanAnalyzer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, CatalanAnalyzer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_CatalanAnalyzer_init_(t_CatalanAnalyzer *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                CatalanAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "K", ::org::apache::lucene::util::Version::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_))
                {
                  INT_CALL(object = CatalanAnalyzer(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 2:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                ::org::apache::lucene::analysis::util::CharArraySet a1((jobject) NULL);
                PyTypeObject **p1;
                CatalanAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "KK", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1, &p1, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_))
                {
                  INT_CALL(object = CatalanAnalyzer(a0, a1));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 3:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                ::org::apache::lucene::analysis::util::CharArraySet a1((jobject) NULL);
                PyTypeObject **p1;
                ::org::apache::lucene::analysis::util::CharArraySet a2((jobject) NULL);
                PyTypeObject **p2;
                CatalanAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "KKK", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1, &p1, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_, &a2, &p2, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_))
                {
                  INT_CALL(object = CatalanAnalyzer(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_CatalanAnalyzer_getDefaultStopSet(PyTypeObject *type)
          {
            ::org::apache::lucene::analysis::util::CharArraySet result((jobject) NULL);
            OBJ_CALL(result = ::org::apache::lucene::analysis::ca::CatalanAnalyzer::getDefaultStopSet());
            return ::org::apache::lucene::analysis::util::t_CharArraySet::wrap_Object(result);
          }

          static PyObject *t_CatalanAnalyzer_get__defaultStopSet(t_CatalanAnalyzer *self, void *data)
          {
            ::org::apache::lucene::analysis::util::CharArraySet value((jobject) NULL);
            OBJ_CALL(value = self->object.getDefaultStopSet());
            return ::org::apache::lucene::analysis::util::t_CharArraySet::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/store/FSDirectory.h"
#include "java/lang/Class.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/store/IOContext.h"
#include "java/io/File.h"
#include "java/lang/String.h"
#include "java/util/Collection.h"
#include "org/apache/lucene/store/LockFactory.h"
#include "org/apache/lucene/store/IndexOutput.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {

        ::java::lang::Class *FSDirectory::class$ = NULL;
        jmethodID *FSDirectory::mids$ = NULL;
        bool FSDirectory::live$ = false;
        jint FSDirectory::DEFAULT_READ_CHUNK_SIZE = (jint) 0;

        jclass FSDirectory::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/store/FSDirectory");

            mids$ = new jmethodID[max_mid];
            mids$[mid_close_54c6a166] = env->getMethodID(cls, "close", "()V");
            mids$[mid_createOutput_5ad5358d] = env->getMethodID(cls, "createOutput", "(Ljava/lang/String;Lorg/apache/lucene/store/IOContext;)Lorg/apache/lucene/store/IndexOutput;");
            mids$[mid_deleteFile_5fdc3f48] = env->getMethodID(cls, "deleteFile", "(Ljava/lang/String;)V");
            mids$[mid_fileExists_5fdc3f44] = env->getMethodID(cls, "fileExists", "(Ljava/lang/String;)Z");
            mids$[mid_fileLength_5fdc3f54] = env->getMethodID(cls, "fileLength", "(Ljava/lang/String;)J");
            mids$[mid_getDirectory_a8eb7bbe] = env->getMethodID(cls, "getDirectory", "()Ljava/io/File;");
            mids$[mid_getLockID_14c7b5c5] = env->getMethodID(cls, "getLockID", "()Ljava/lang/String;");
            mids$[mid_getReadChunkSize_54c6a179] = env->getMethodID(cls, "getReadChunkSize", "()I");
            mids$[mid_listAll_2e6d5245] = env->getMethodID(cls, "listAll", "()[Ljava/lang/String;");
            mids$[mid_listAll_10b06d64] = env->getStaticMethodID(cls, "listAll", "(Ljava/io/File;)[Ljava/lang/String;");
            mids$[mid_open_89cf4235] = env->getStaticMethodID(cls, "open", "(Ljava/io/File;)Lorg/apache/lucene/store/FSDirectory;");
            mids$[mid_open_588132c1] = env->getStaticMethodID(cls, "open", "(Ljava/io/File;Lorg/apache/lucene/store/LockFactory;)Lorg/apache/lucene/store/FSDirectory;");
            mids$[mid_setLockFactory_9892eb8c] = env->getMethodID(cls, "setLockFactory", "(Lorg/apache/lucene/store/LockFactory;)V");
            mids$[mid_setReadChunkSize_39c7bd3c] = env->getMethodID(cls, "setReadChunkSize", "(I)V");
            mids$[mid_sync_9bfb370d] = env->getMethodID(cls, "sync", "(Ljava/util/Collection;)V");
            mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");
            mids$[mid_ensureCanWrite_5fdc3f48] = env->getMethodID(cls, "ensureCanWrite", "(Ljava/lang/String;)V");
            mids$[mid_onIndexOutputClosed_5fdc3f48] = env->getMethodID(cls, "onIndexOutputClosed", "(Ljava/lang/String;)V");
            mids$[mid_fsync_5fdc3f48] = env->getMethodID(cls, "fsync", "(Ljava/lang/String;)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            cls = (jclass) class$->this$;

            DEFAULT_READ_CHUNK_SIZE = env->getStaticIntField(cls, "DEFAULT_READ_CHUNK_SIZE");
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        void FSDirectory::close() const
        {
          env->callVoidMethod(this$, mids$[mid_close_54c6a166]);
        }

        ::org::apache::lucene::store::IndexOutput FSDirectory::createOutput(const ::java::lang::String & a0, const ::org::apache::lucene::store::IOContext & a1) const
        {
          return ::org::apache::lucene::store::IndexOutput(env->callObjectMethod(this$, mids$[mid_createOutput_5ad5358d], a0.this$, a1.this$));
        }

        void FSDirectory::deleteFile(const ::java::lang::String & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_deleteFile_5fdc3f48], a0.this$);
        }

        jboolean FSDirectory::fileExists(const ::java::lang::String & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_fileExists_5fdc3f44], a0.this$);
        }

        jlong FSDirectory::fileLength(const ::java::lang::String & a0) const
        {
          return env->callLongMethod(this$, mids$[mid_fileLength_5fdc3f54], a0.this$);
        }

        ::java::io::File FSDirectory::getDirectory() const
        {
          return ::java::io::File(env->callObjectMethod(this$, mids$[mid_getDirectory_a8eb7bbe]));
        }

        ::java::lang::String FSDirectory::getLockID() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getLockID_14c7b5c5]));
        }

        jint FSDirectory::getReadChunkSize() const
        {
          return env->callIntMethod(this$, mids$[mid_getReadChunkSize_54c6a179]);
        }

        JArray< ::java::lang::String > FSDirectory::listAll() const
        {
          return JArray< ::java::lang::String >(env->callObjectMethod(this$, mids$[mid_listAll_2e6d5245]));
        }

        JArray< ::java::lang::String > FSDirectory::listAll(const ::java::io::File & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return JArray< ::java::lang::String >(env->callStaticObjectMethod(cls, mids$[mid_listAll_10b06d64], a0.this$));
        }

        FSDirectory FSDirectory::open(const ::java::io::File & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return FSDirectory(env->callStaticObjectMethod(cls, mids$[mid_open_89cf4235], a0.this$));
        }

        FSDirectory FSDirectory::open(const ::java::io::File & a0, const ::org::apache::lucene::store::LockFactory & a1)
        {
          jclass cls = env->getClass(initializeClass);
          return FSDirectory(env->callStaticObjectMethod(cls, mids$[mid_open_588132c1], a0.this$, a1.this$));
        }

        void FSDirectory::setLockFactory(const ::org::apache::lucene::store::LockFactory & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setLockFactory_9892eb8c], a0.this$);
        }

        void FSDirectory::setReadChunkSize(jint a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setReadChunkSize_39c7bd3c], a0);
        }

        void FSDirectory::sync(const ::java::util::Collection & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_sync_9bfb370d], a0.this$);
        }

        ::java::lang::String FSDirectory::toString() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {
        static PyObject *t_FSDirectory_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FSDirectory_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FSDirectory_close(t_FSDirectory *self, PyObject *args);
        static PyObject *t_FSDirectory_createOutput(t_FSDirectory *self, PyObject *args);
        static PyObject *t_FSDirectory_deleteFile(t_FSDirectory *self, PyObject *args);
        static PyObject *t_FSDirectory_fileExists(t_FSDirectory *self, PyObject *args);
        static PyObject *t_FSDirectory_fileLength(t_FSDirectory *self, PyObject *args);
        static PyObject *t_FSDirectory_getDirectory(t_FSDirectory *self);
        static PyObject *t_FSDirectory_getLockID(t_FSDirectory *self, PyObject *args);
        static PyObject *t_FSDirectory_getReadChunkSize(t_FSDirectory *self);
        static PyObject *t_FSDirectory_listAll(t_FSDirectory *self, PyObject *args);
        static PyObject *t_FSDirectory_listAll_(PyTypeObject *type, PyObject *args);
        static PyObject *t_FSDirectory_open(PyTypeObject *type, PyObject *args);
        static PyObject *t_FSDirectory_setLockFactory(t_FSDirectory *self, PyObject *args);
        static PyObject *t_FSDirectory_setReadChunkSize(t_FSDirectory *self, PyObject *arg);
        static PyObject *t_FSDirectory_sync(t_FSDirectory *self, PyObject *args);
        static PyObject *t_FSDirectory_toString(t_FSDirectory *self, PyObject *args);
        static PyObject *t_FSDirectory_get__directory(t_FSDirectory *self, void *data);
        static int t_FSDirectory_set__lockFactory(t_FSDirectory *self, PyObject *arg, void *data);
        static PyObject *t_FSDirectory_get__lockID(t_FSDirectory *self, void *data);
        static PyObject *t_FSDirectory_get__readChunkSize(t_FSDirectory *self, void *data);
        static int t_FSDirectory_set__readChunkSize(t_FSDirectory *self, PyObject *arg, void *data);
        static PyGetSetDef t_FSDirectory__fields_[] = {
          DECLARE_GET_FIELD(t_FSDirectory, directory),
          DECLARE_SET_FIELD(t_FSDirectory, lockFactory),
          DECLARE_GET_FIELD(t_FSDirectory, lockID),
          DECLARE_GETSET_FIELD(t_FSDirectory, readChunkSize),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_FSDirectory__methods_[] = {
          DECLARE_METHOD(t_FSDirectory, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FSDirectory, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FSDirectory, close, METH_VARARGS),
          DECLARE_METHOD(t_FSDirectory, createOutput, METH_VARARGS),
          DECLARE_METHOD(t_FSDirectory, deleteFile, METH_VARARGS),
          DECLARE_METHOD(t_FSDirectory, fileExists, METH_VARARGS),
          DECLARE_METHOD(t_FSDirectory, fileLength, METH_VARARGS),
          DECLARE_METHOD(t_FSDirectory, getDirectory, METH_NOARGS),
          DECLARE_METHOD(t_FSDirectory, getLockID, METH_VARARGS),
          DECLARE_METHOD(t_FSDirectory, getReadChunkSize, METH_NOARGS),
          DECLARE_METHOD(t_FSDirectory, listAll, METH_VARARGS),
          DECLARE_METHOD(t_FSDirectory, listAll_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FSDirectory, open, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_FSDirectory, setLockFactory, METH_VARARGS),
          DECLARE_METHOD(t_FSDirectory, setReadChunkSize, METH_O),
          DECLARE_METHOD(t_FSDirectory, sync, METH_VARARGS),
          DECLARE_METHOD(t_FSDirectory, toString, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(FSDirectory, t_FSDirectory, ::org::apache::lucene::store::BaseDirectory, FSDirectory, abstract_init, 0, 0, t_FSDirectory__fields_, 0, 0);

        void t_FSDirectory::install(PyObject *module)
        {
          installType(&PY_TYPE(FSDirectory), module, "FSDirectory", 0);
        }

        void t_FSDirectory::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(FSDirectory).tp_dict, "class_", make_descriptor(FSDirectory::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(FSDirectory).tp_dict, "wrapfn_", make_descriptor(t_FSDirectory::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(FSDirectory).tp_dict, "boxfn_", make_descriptor(boxObject));
          env->getClass(FSDirectory::initializeClass);
          PyDict_SetItemString(PY_TYPE(FSDirectory).tp_dict, "DEFAULT_READ_CHUNK_SIZE", make_descriptor(FSDirectory::DEFAULT_READ_CHUNK_SIZE));
        }

        static PyObject *t_FSDirectory_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, FSDirectory::initializeClass, 1)))
            return NULL;
          return t_FSDirectory::wrap_Object(FSDirectory(((t_FSDirectory *) arg)->object.this$));
        }
        static PyObject *t_FSDirectory_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, FSDirectory::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_FSDirectory_close(t_FSDirectory *self, PyObject *args)
        {

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(self->object.close());
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(FSDirectory), (PyObject *) self, "close", args, 2);
        }

        static PyObject *t_FSDirectory_createOutput(t_FSDirectory *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::store::IOContext a1((jobject) NULL);
          ::org::apache::lucene::store::IndexOutput result((jobject) NULL);

          if (!parseArgs(args, "sk", ::org::apache::lucene::store::IOContext::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = self->object.createOutput(a0, a1));
            return ::org::apache::lucene::store::t_IndexOutput::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(FSDirectory), (PyObject *) self, "createOutput", args, 2);
        }

        static PyObject *t_FSDirectory_deleteFile(t_FSDirectory *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(self->object.deleteFile(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(FSDirectory), (PyObject *) self, "deleteFile", args, 2);
        }

        static PyObject *t_FSDirectory_fileExists(t_FSDirectory *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = self->object.fileExists(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(FSDirectory), (PyObject *) self, "fileExists", args, 2);
        }

        static PyObject *t_FSDirectory_fileLength(t_FSDirectory *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          jlong result;

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = self->object.fileLength(a0));
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          return callSuper(&PY_TYPE(FSDirectory), (PyObject *) self, "fileLength", args, 2);
        }

        static PyObject *t_FSDirectory_getDirectory(t_FSDirectory *self)
        {
          ::java::io::File result((jobject) NULL);
          OBJ_CALL(result = self->object.getDirectory());
          return ::java::io::t_File::wrap_Object(result);
        }

        static PyObject *t_FSDirectory_getLockID(t_FSDirectory *self, PyObject *args)
        {
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.getLockID());
            return j2p(result);
          }

          return callSuper(&PY_TYPE(FSDirectory), (PyObject *) self, "getLockID", args, 2);
        }

        static PyObject *t_FSDirectory_getReadChunkSize(t_FSDirectory *self)
        {
          jint result;
          OBJ_CALL(result = self->object.getReadChunkSize());
          return PyInt_FromLong((long) result);
        }

        static PyObject *t_FSDirectory_listAll(t_FSDirectory *self, PyObject *args)
        {
          JArray< ::java::lang::String > result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.listAll());
            return JArray<jstring>(result.this$).wrap();
          }

          return callSuper(&PY_TYPE(FSDirectory), (PyObject *) self, "listAll", args, 2);
        }

        static PyObject *t_FSDirectory_listAll_(PyTypeObject *type, PyObject *args)
        {
          ::java::io::File a0((jobject) NULL);
          JArray< ::java::lang::String > result((jobject) NULL);

          if (!parseArgs(args, "k", ::java::io::File::initializeClass, &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::store::FSDirectory::listAll(a0));
            return JArray<jstring>(result.this$).wrap();
          }

          PyErr_SetArgsError(type, "listAll_", args);
          return NULL;
        }

        static PyObject *t_FSDirectory_open(PyTypeObject *type, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              ::java::io::File a0((jobject) NULL);
              FSDirectory result((jobject) NULL);

              if (!parseArgs(args, "k", ::java::io::File::initializeClass, &a0))
              {
                OBJ_CALL(result = ::org::apache::lucene::store::FSDirectory::open(a0));
                return t_FSDirectory::wrap_Object(result);
              }
            }
            break;
           case 2:
            {
              ::java::io::File a0((jobject) NULL);
              ::org::apache::lucene::store::LockFactory a1((jobject) NULL);
              FSDirectory result((jobject) NULL);

              if (!parseArgs(args, "kk", ::java::io::File::initializeClass, ::org::apache::lucene::store::LockFactory::initializeClass, &a0, &a1))
              {
                OBJ_CALL(result = ::org::apache::lucene::store::FSDirectory::open(a0, a1));
                return t_FSDirectory::wrap_Object(result);
              }
            }
          }

          PyErr_SetArgsError(type, "open", args);
          return NULL;
        }

        static PyObject *t_FSDirectory_setLockFactory(t_FSDirectory *self, PyObject *args)
        {
          ::org::apache::lucene::store::LockFactory a0((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::store::LockFactory::initializeClass, &a0))
          {
            OBJ_CALL(self->object.setLockFactory(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(FSDirectory), (PyObject *) self, "setLockFactory", args, 2);
        }

        static PyObject *t_FSDirectory_setReadChunkSize(t_FSDirectory *self, PyObject *arg)
        {
          jint a0;

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(self->object.setReadChunkSize(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setReadChunkSize", arg);
          return NULL;
        }

        static PyObject *t_FSDirectory_sync(t_FSDirectory *self, PyObject *args)
        {
          ::java::util::Collection a0((jobject) NULL);
          PyTypeObject **p0;

          if (!parseArgs(args, "K", ::java::util::Collection::initializeClass, &a0, &p0, ::java::util::t_Collection::parameters_))
          {
            OBJ_CALL(self->object.sync(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(FSDirectory), (PyObject *) self, "sync", args, 2);
        }

        static PyObject *t_FSDirectory_toString(t_FSDirectory *self, PyObject *args)
        {
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.toString());
            return j2p(result);
          }

          return callSuper(&PY_TYPE(FSDirectory), (PyObject *) self, "toString", args, 2);
        }

        static PyObject *t_FSDirectory_get__directory(t_FSDirectory *self, void *data)
        {
          ::java::io::File value((jobject) NULL);
          OBJ_CALL(value = self->object.getDirectory());
          return ::java::io::t_File::wrap_Object(value);
        }

        static int t_FSDirectory_set__lockFactory(t_FSDirectory *self, PyObject *arg, void *data)
        {
          {
            ::org::apache::lucene::store::LockFactory value((jobject) NULL);
            if (!parseArg(arg, "k", ::org::apache::lucene::store::LockFactory::initializeClass, &value))
            {
              INT_CALL(self->object.setLockFactory(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "lockFactory", arg);
          return -1;
        }

        static PyObject *t_FSDirectory_get__lockID(t_FSDirectory *self, void *data)
        {
          ::java::lang::String value((jobject) NULL);
          OBJ_CALL(value = self->object.getLockID());
          return j2p(value);
        }

        static PyObject *t_FSDirectory_get__readChunkSize(t_FSDirectory *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object.getReadChunkSize());
          return PyInt_FromLong((long) value);
        }
        static int t_FSDirectory_set__readChunkSize(t_FSDirectory *self, PyObject *arg, void *data)
        {
          {
            jint value;
            if (!parseArg(arg, "I", &value))
            {
              INT_CALL(self->object.setReadChunkSize(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "readChunkSize", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "java/text/DateFormat.h"
#include "java/util/Locale.h"
#include "java/util/TimeZone.h"
#include "java/text/NumberFormat.h"
#include "java/lang/Class.h"
#include "java/lang/Object.h"
#include "java/util/Calendar.h"
#include "java/lang/StringBuffer.h"
#include "java/lang/String.h"
#include "java/util/Date.h"
#include "JArray.h"

namespace java {
  namespace text {

    ::java::lang::Class *DateFormat::class$ = NULL;
    jmethodID *DateFormat::mids$ = NULL;
    bool DateFormat::live$ = false;
    jint DateFormat::AM_PM_FIELD = (jint) 0;
    jint DateFormat::DATE_FIELD = (jint) 0;
    jint DateFormat::DAY_OF_WEEK_FIELD = (jint) 0;
    jint DateFormat::DAY_OF_WEEK_IN_MONTH_FIELD = (jint) 0;
    jint DateFormat::DAY_OF_YEAR_FIELD = (jint) 0;
    jint DateFormat::DEFAULT = (jint) 0;
    jint DateFormat::ERA_FIELD = (jint) 0;
    jint DateFormat::FULL = (jint) 0;
    jint DateFormat::HOUR0_FIELD = (jint) 0;
    jint DateFormat::HOUR1_FIELD = (jint) 0;
    jint DateFormat::HOUR_OF_DAY0_FIELD = (jint) 0;
    jint DateFormat::HOUR_OF_DAY1_FIELD = (jint) 0;
    jint DateFormat::LONG = (jint) 0;
    jint DateFormat::MEDIUM = (jint) 0;
    jint DateFormat::MILLISECOND_FIELD = (jint) 0;
    jint DateFormat::MINUTE_FIELD = (jint) 0;
    jint DateFormat::MONTH_FIELD = (jint) 0;
    jint DateFormat::SECOND_FIELD = (jint) 0;
    jint DateFormat::SHORT = (jint) 0;
    jint DateFormat::TIMEZONE_FIELD = (jint) 0;
    jint DateFormat::WEEK_OF_MONTH_FIELD = (jint) 0;
    jint DateFormat::WEEK_OF_YEAR_FIELD = (jint) 0;
    jint DateFormat::YEAR_FIELD = (jint) 0;

    jclass DateFormat::initializeClass(bool getOnly)
    {
      if (getOnly)
        return (jclass) (live$ ? class$->this$ : NULL);
      if (class$ == NULL)
      {
        jclass cls = (jclass) env->findClass("java/text/DateFormat");

        mids$ = new jmethodID[max_mid];
        mids$[mid_clone_846352c3] = env->getMethodID(cls, "clone", "()Ljava/lang/Object;");
        mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
        mids$[mid_format_60ff0f6a] = env->getMethodID(cls, "format", "(Ljava/util/Date;)Ljava/lang/String;");
        mids$[mid_getAvailableLocales_59cb5b46] = env->getStaticMethodID(cls, "getAvailableLocales", "()[Ljava/util/Locale;");
        mids$[mid_getCalendar_5a365c68] = env->getMethodID(cls, "getCalendar", "()Ljava/util/Calendar;");
        mids$[mid_getDateInstance_5b76e92a] = env->getStaticMethodID(cls, "getDateInstance", "()Ljava/text/DateFormat;");
        mids$[mid_getDateInstance_f487f948] = env->getStaticMethodID(cls, "getDateInstance", "(I)Ljava/text/DateFormat;");
        mids$[mid_getDateInstance_0c1a225b] = env->getStaticMethodID(cls, "getDateInstance", "(ILjava/util/Locale;)Ljava/text/DateFormat;");
        mids$[mid_getDateTimeInstance_5b76e92a] = env->getStaticMethodID(cls, "getDateTimeInstance", "()Ljava/text/DateFormat;");
        mids$[mid_getDateTimeInstance_47ab2552] = env->getStaticMethodID(cls, "getDateTimeInstance", "(II)Ljava/text/DateFormat;");
        mids$[mid_getDateTimeInstance_32c76395] = env->getStaticMethodID(cls, "getDateTimeInstance", "(IILjava/util/Locale;)Ljava/text/DateFormat;");
        mids$[mid_getInstance_5b76e92a] = env->getStaticMethodID(cls, "getInstance", "()Ljava/text/DateFormat;");
        mids$[mid_getNumberFormat_6b701965] = env->getMethodID(cls, "getNumberFormat", "()Ljava/text/NumberFormat;");
        mids$[mid_getTimeInstance_5b76e92a] = env->getStaticMethodID(cls, "getTimeInstance", "()Ljava/text/DateFormat;");
        mids$[mid_getTimeInstance_f487f948] = env->getStaticMethodID(cls, "getTimeInstance", "(I)Ljava/text/DateFormat;");
        mids$[mid_getTimeInstance_0c1a225b] = env->getStaticMethodID(cls, "getTimeInstance", "(ILjava/util/Locale;)Ljava/text/DateFormat;");
        mids$[mid_getTimeZone_6cce40e5] = env->getMethodID(cls, "getTimeZone", "()Ljava/util/TimeZone;");
        mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
        mids$[mid_isLenient_54c6a16a] = env->getMethodID(cls, "isLenient", "()Z");
        mids$[mid_parse_e1ca31a4] = env->getMethodID(cls, "parse", "(Ljava/lang/String;)Ljava/util/Date;");
        mids$[mid_setCalendar_3b3fa6b1] = env->getMethodID(cls, "setCalendar", "(Ljava/util/Calendar;)V");
        mids$[mid_setLenient_bb0c767f] = env->getMethodID(cls, "setLenient", "(Z)V");
        mids$[mid_setNumberFormat_d2d1ba24] = env->getMethodID(cls, "setNumberFormat", "(Ljava/text/NumberFormat;)V");
        mids$[mid_setTimeZone_f7b32d20] = env->getMethodID(cls, "setTimeZone", "(Ljava/util/TimeZone;)V");

        class$ = (::java::lang::Class *) new JObject(cls);
        cls = (jclass) class$->this$;

        AM_PM_FIELD = env->getStaticIntField(cls, "AM_PM_FIELD");
        DATE_FIELD = env->getStaticIntField(cls, "DATE_FIELD");
        DAY_OF_WEEK_FIELD = env->getStaticIntField(cls, "DAY_OF_WEEK_FIELD");
        DAY_OF_WEEK_IN_MONTH_FIELD = env->getStaticIntField(cls, "DAY_OF_WEEK_IN_MONTH_FIELD");
        DAY_OF_YEAR_FIELD = env->getStaticIntField(cls, "DAY_OF_YEAR_FIELD");
        DEFAULT = env->getStaticIntField(cls, "DEFAULT");
        ERA_FIELD = env->getStaticIntField(cls, "ERA_FIELD");
        FULL = env->getStaticIntField(cls, "FULL");
        HOUR0_FIELD = env->getStaticIntField(cls, "HOUR0_FIELD");
        HOUR1_FIELD = env->getStaticIntField(cls, "HOUR1_FIELD");
        HOUR_OF_DAY0_FIELD = env->getStaticIntField(cls, "HOUR_OF_DAY0_FIELD");
        HOUR_OF_DAY1_FIELD = env->getStaticIntField(cls, "HOUR_OF_DAY1_FIELD");
        LONG = env->getStaticIntField(cls, "LONG");
        MEDIUM = env->getStaticIntField(cls, "MEDIUM");
        MILLISECOND_FIELD = env->getStaticIntField(cls, "MILLISECOND_FIELD");
        MINUTE_FIELD = env->getStaticIntField(cls, "MINUTE_FIELD");
        MONTH_FIELD = env->getStaticIntField(cls, "MONTH_FIELD");
        SECOND_FIELD = env->getStaticIntField(cls, "SECOND_FIELD");
        SHORT = env->getStaticIntField(cls, "SHORT");
        TIMEZONE_FIELD = env->getStaticIntField(cls, "TIMEZONE_FIELD");
        WEEK_OF_MONTH_FIELD = env->getStaticIntField(cls, "WEEK_OF_MONTH_FIELD");
        WEEK_OF_YEAR_FIELD = env->getStaticIntField(cls, "WEEK_OF_YEAR_FIELD");
        YEAR_FIELD = env->getStaticIntField(cls, "YEAR_FIELD");
        live$ = true;
      }
      return (jclass) class$->this$;
    }

    ::java::lang::Object DateFormat::clone() const
    {
      return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_clone_846352c3]));
    }

    jboolean DateFormat::equals(const ::java::lang::Object & a0) const
    {
      return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
    }

    ::java::lang::String DateFormat::format(const ::java::util::Date & a0) const
    {
      return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_format_60ff0f6a], a0.this$));
    }

    JArray< ::java::util::Locale > DateFormat::getAvailableLocales()
    {
      jclass cls = env->getClass(initializeClass);
      return JArray< ::java::util::Locale >(env->callStaticObjectMethod(cls, mids$[mid_getAvailableLocales_59cb5b46]));
    }

    ::java::util::Calendar DateFormat::getCalendar() const
    {
      return ::java::util::Calendar(env->callObjectMethod(this$, mids$[mid_getCalendar_5a365c68]));
    }

    DateFormat DateFormat::getDateInstance()
    {
      jclass cls = env->getClass(initializeClass);
      return DateFormat(env->callStaticObjectMethod(cls, mids$[mid_getDateInstance_5b76e92a]));
    }

    DateFormat DateFormat::getDateInstance(jint a0)
    {
      jclass cls = env->getClass(initializeClass);
      return DateFormat(env->callStaticObjectMethod(cls, mids$[mid_getDateInstance_f487f948], a0));
    }

    DateFormat DateFormat::getDateInstance(jint a0, const ::java::util::Locale & a1)
    {
      jclass cls = env->getClass(initializeClass);
      return DateFormat(env->callStaticObjectMethod(cls, mids$[mid_getDateInstance_0c1a225b], a0, a1.this$));
    }

    DateFormat DateFormat::getDateTimeInstance()
    {
      jclass cls = env->getClass(initializeClass);
      return DateFormat(env->callStaticObjectMethod(cls, mids$[mid_getDateTimeInstance_5b76e92a]));
    }

    DateFormat DateFormat::getDateTimeInstance(jint a0, jint a1)
    {
      jclass cls = env->getClass(initializeClass);
      return DateFormat(env->callStaticObjectMethod(cls, mids$[mid_getDateTimeInstance_47ab2552], a0, a1));
    }

    DateFormat DateFormat::getDateTimeInstance(jint a0, jint a1, const ::java::util::Locale & a2)
    {
      jclass cls = env->getClass(initializeClass);
      return DateFormat(env->callStaticObjectMethod(cls, mids$[mid_getDateTimeInstance_32c76395], a0, a1, a2.this$));
    }

    DateFormat DateFormat::getInstance()
    {
      jclass cls = env->getClass(initializeClass);
      return DateFormat(env->callStaticObjectMethod(cls, mids$[mid_getInstance_5b76e92a]));
    }

    ::java::text::NumberFormat DateFormat::getNumberFormat() const
    {
      return ::java::text::NumberFormat(env->callObjectMethod(this$, mids$[mid_getNumberFormat_6b701965]));
    }

    DateFormat DateFormat::getTimeInstance()
    {
      jclass cls = env->getClass(initializeClass);
      return DateFormat(env->callStaticObjectMethod(cls, mids$[mid_getTimeInstance_5b76e92a]));
    }

    DateFormat DateFormat::getTimeInstance(jint a0)
    {
      jclass cls = env->getClass(initializeClass);
      return DateFormat(env->callStaticObjectMethod(cls, mids$[mid_getTimeInstance_f487f948], a0));
    }

    DateFormat DateFormat::getTimeInstance(jint a0, const ::java::util::Locale & a1)
    {
      jclass cls = env->getClass(initializeClass);
      return DateFormat(env->callStaticObjectMethod(cls, mids$[mid_getTimeInstance_0c1a225b], a0, a1.this$));
    }

    ::java::util::TimeZone DateFormat::getTimeZone() const
    {
      return ::java::util::TimeZone(env->callObjectMethod(this$, mids$[mid_getTimeZone_6cce40e5]));
    }

    jint DateFormat::hashCode() const
    {
      return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
    }

    jboolean DateFormat::isLenient() const
    {
      return env->callBooleanMethod(this$, mids$[mid_isLenient_54c6a16a]);
    }

    ::java::util::Date DateFormat::parse(const ::java::lang::String & a0) const
    {
      return ::java::util::Date(env->callObjectMethod(this$, mids$[mid_parse_e1ca31a4], a0.this$));
    }

    void DateFormat::setCalendar(const ::java::util::Calendar & a0) const
    {
      env->callVoidMethod(this$, mids$[mid_setCalendar_3b3fa6b1], a0.this$);
    }

    void DateFormat::setLenient(jboolean a0) const
    {
      env->callVoidMethod(this$, mids$[mid_setLenient_bb0c767f], a0);
    }

    void DateFormat::setNumberFormat(const ::java::text::NumberFormat & a0) const
    {
      env->callVoidMethod(this$, mids$[mid_setNumberFormat_d2d1ba24], a0.this$);
    }

    void DateFormat::setTimeZone(const ::java::util::TimeZone & a0) const
    {
      env->callVoidMethod(this$, mids$[mid_setTimeZone_f7b32d20], a0.this$);
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace java {
  namespace text {
    static PyObject *t_DateFormat_cast_(PyTypeObject *type, PyObject *arg);
    static PyObject *t_DateFormat_instance_(PyTypeObject *type, PyObject *arg);
    static PyObject *t_DateFormat_clone(t_DateFormat *self, PyObject *args);
    static PyObject *t_DateFormat_equals(t_DateFormat *self, PyObject *args);
    static PyObject *t_DateFormat_format(t_DateFormat *self, PyObject *args);
    static PyObject *t_DateFormat_getAvailableLocales(PyTypeObject *type);
    static PyObject *t_DateFormat_getCalendar(t_DateFormat *self);
    static PyObject *t_DateFormat_getDateInstance(PyTypeObject *type, PyObject *args);
    static PyObject *t_DateFormat_getDateTimeInstance(PyTypeObject *type, PyObject *args);
    static PyObject *t_DateFormat_getInstance(PyTypeObject *type);
    static PyObject *t_DateFormat_getNumberFormat(t_DateFormat *self);
    static PyObject *t_DateFormat_getTimeInstance(PyTypeObject *type, PyObject *args);
    static PyObject *t_DateFormat_getTimeZone(t_DateFormat *self);
    static PyObject *t_DateFormat_hashCode(t_DateFormat *self, PyObject *args);
    static PyObject *t_DateFormat_isLenient(t_DateFormat *self);
    static PyObject *t_DateFormat_parse(t_DateFormat *self, PyObject *arg);
    static PyObject *t_DateFormat_setCalendar(t_DateFormat *self, PyObject *arg);
    static PyObject *t_DateFormat_setLenient(t_DateFormat *self, PyObject *arg);
    static PyObject *t_DateFormat_setNumberFormat(t_DateFormat *self, PyObject *arg);
    static PyObject *t_DateFormat_setTimeZone(t_DateFormat *self, PyObject *arg);
    static PyObject *t_DateFormat_get__availableLocales(t_DateFormat *self, void *data);
    static PyObject *t_DateFormat_get__calendar(t_DateFormat *self, void *data);
    static int t_DateFormat_set__calendar(t_DateFormat *self, PyObject *arg, void *data);
    static PyObject *t_DateFormat_get__dateInstance(t_DateFormat *self, void *data);
    static PyObject *t_DateFormat_get__dateTimeInstance(t_DateFormat *self, void *data);
    static PyObject *t_DateFormat_get__instance(t_DateFormat *self, void *data);
    static PyObject *t_DateFormat_get__lenient(t_DateFormat *self, void *data);
    static int t_DateFormat_set__lenient(t_DateFormat *self, PyObject *arg, void *data);
    static PyObject *t_DateFormat_get__numberFormat(t_DateFormat *self, void *data);
    static int t_DateFormat_set__numberFormat(t_DateFormat *self, PyObject *arg, void *data);
    static PyObject *t_DateFormat_get__timeInstance(t_DateFormat *self, void *data);
    static PyObject *t_DateFormat_get__timeZone(t_DateFormat *self, void *data);
    static int t_DateFormat_set__timeZone(t_DateFormat *self, PyObject *arg, void *data);
    static PyGetSetDef t_DateFormat__fields_[] = {
      DECLARE_GET_FIELD(t_DateFormat, availableLocales),
      DECLARE_GETSET_FIELD(t_DateFormat, calendar),
      DECLARE_GET_FIELD(t_DateFormat, dateInstance),
      DECLARE_GET_FIELD(t_DateFormat, dateTimeInstance),
      DECLARE_GET_FIELD(t_DateFormat, instance),
      DECLARE_GETSET_FIELD(t_DateFormat, lenient),
      DECLARE_GETSET_FIELD(t_DateFormat, numberFormat),
      DECLARE_GET_FIELD(t_DateFormat, timeInstance),
      DECLARE_GETSET_FIELD(t_DateFormat, timeZone),
      { NULL, NULL, NULL, NULL, NULL }
    };

    static PyMethodDef t_DateFormat__methods_[] = {
      DECLARE_METHOD(t_DateFormat, cast_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_DateFormat, instance_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_DateFormat, clone, METH_VARARGS),
      DECLARE_METHOD(t_DateFormat, equals, METH_VARARGS),
      DECLARE_METHOD(t_DateFormat, format, METH_VARARGS),
      DECLARE_METHOD(t_DateFormat, getAvailableLocales, METH_NOARGS | METH_CLASS),
      DECLARE_METHOD(t_DateFormat, getCalendar, METH_NOARGS),
      DECLARE_METHOD(t_DateFormat, getDateInstance, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_DateFormat, getDateTimeInstance, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_DateFormat, getInstance, METH_NOARGS | METH_CLASS),
      DECLARE_METHOD(t_DateFormat, getNumberFormat, METH_NOARGS),
      DECLARE_METHOD(t_DateFormat, getTimeInstance, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_DateFormat, getTimeZone, METH_NOARGS),
      DECLARE_METHOD(t_DateFormat, hashCode, METH_VARARGS),
      DECLARE_METHOD(t_DateFormat, isLenient, METH_NOARGS),
      DECLARE_METHOD(t_DateFormat, parse, METH_O),
      DECLARE_METHOD(t_DateFormat, setCalendar, METH_O),
      DECLARE_METHOD(t_DateFormat, setLenient, METH_O),
      DECLARE_METHOD(t_DateFormat, setNumberFormat, METH_O),
      DECLARE_METHOD(t_DateFormat, setTimeZone, METH_O),
      { NULL, NULL, 0, NULL }
    };

    DECLARE_TYPE(DateFormat, t_DateFormat, ::java::text::Format, DateFormat, abstract_init, 0, 0, t_DateFormat__fields_, 0, 0);

    void t_DateFormat::install(PyObject *module)
    {
      installType(&PY_TYPE(DateFormat), module, "DateFormat", 0);
    }

    void t_DateFormat::initialize(PyObject *module)
    {
      PyDict_SetItemString(PY_TYPE(DateFormat).tp_dict, "class_", make_descriptor(DateFormat::initializeClass, 1));
      PyDict_SetItemString(PY_TYPE(DateFormat).tp_dict, "wrapfn_", make_descriptor(t_DateFormat::wrap_jobject));
      PyDict_SetItemString(PY_TYPE(DateFormat).tp_dict, "boxfn_", make_descriptor(boxObject));
      env->getClass(DateFormat::initializeClass);
      PyDict_SetItemString(PY_TYPE(DateFormat).tp_dict, "AM_PM_FIELD", make_descriptor(DateFormat::AM_PM_FIELD));
      PyDict_SetItemString(PY_TYPE(DateFormat).tp_dict, "DATE_FIELD", make_descriptor(DateFormat::DATE_FIELD));
      PyDict_SetItemString(PY_TYPE(DateFormat).tp_dict, "DAY_OF_WEEK_FIELD", make_descriptor(DateFormat::DAY_OF_WEEK_FIELD));
      PyDict_SetItemString(PY_TYPE(DateFormat).tp_dict, "DAY_OF_WEEK_IN_MONTH_FIELD", make_descriptor(DateFormat::DAY_OF_WEEK_IN_MONTH_FIELD));
      PyDict_SetItemString(PY_TYPE(DateFormat).tp_dict, "DAY_OF_YEAR_FIELD", make_descriptor(DateFormat::DAY_OF_YEAR_FIELD));
      PyDict_SetItemString(PY_TYPE(DateFormat).tp_dict, "DEFAULT", make_descriptor(DateFormat::DEFAULT));
      PyDict_SetItemString(PY_TYPE(DateFormat).tp_dict, "ERA_FIELD", make_descriptor(DateFormat::ERA_FIELD));
      PyDict_SetItemString(PY_TYPE(DateFormat).tp_dict, "FULL", make_descriptor(DateFormat::FULL));
      PyDict_SetItemString(PY_TYPE(DateFormat).tp_dict, "HOUR0_FIELD", make_descriptor(DateFormat::HOUR0_FIELD));
      PyDict_SetItemString(PY_TYPE(DateFormat).tp_dict, "HOUR1_FIELD", make_descriptor(DateFormat::HOUR1_FIELD));
      PyDict_SetItemString(PY_TYPE(DateFormat).tp_dict, "HOUR_OF_DAY0_FIELD", make_descriptor(DateFormat::HOUR_OF_DAY0_FIELD));
      PyDict_SetItemString(PY_TYPE(DateFormat).tp_dict, "HOUR_OF_DAY1_FIELD", make_descriptor(DateFormat::HOUR_OF_DAY1_FIELD));
      PyDict_SetItemString(PY_TYPE(DateFormat).tp_dict, "LONG", make_descriptor(DateFormat::LONG));
      PyDict_SetItemString(PY_TYPE(DateFormat).tp_dict, "MEDIUM", make_descriptor(DateFormat::MEDIUM));
      PyDict_SetItemString(PY_TYPE(DateFormat).tp_dict, "MILLISECOND_FIELD", make_descriptor(DateFormat::MILLISECOND_FIELD));
      PyDict_SetItemString(PY_TYPE(DateFormat).tp_dict, "MINUTE_FIELD", make_descriptor(DateFormat::MINUTE_FIELD));
      PyDict_SetItemString(PY_TYPE(DateFormat).tp_dict, "MONTH_FIELD", make_descriptor(DateFormat::MONTH_FIELD));
      PyDict_SetItemString(PY_TYPE(DateFormat).tp_dict, "SECOND_FIELD", make_descriptor(DateFormat::SECOND_FIELD));
      PyDict_SetItemString(PY_TYPE(DateFormat).tp_dict, "SHORT", make_descriptor(DateFormat::SHORT));
      PyDict_SetItemString(PY_TYPE(DateFormat).tp_dict, "TIMEZONE_FIELD", make_descriptor(DateFormat::TIMEZONE_FIELD));
      PyDict_SetItemString(PY_TYPE(DateFormat).tp_dict, "WEEK_OF_MONTH_FIELD", make_descriptor(DateFormat::WEEK_OF_MONTH_FIELD));
      PyDict_SetItemString(PY_TYPE(DateFormat).tp_dict, "WEEK_OF_YEAR_FIELD", make_descriptor(DateFormat::WEEK_OF_YEAR_FIELD));
      PyDict_SetItemString(PY_TYPE(DateFormat).tp_dict, "YEAR_FIELD", make_descriptor(DateFormat::YEAR_FIELD));
    }

    static PyObject *t_DateFormat_cast_(PyTypeObject *type, PyObject *arg)
    {
      if (!(arg = castCheck(arg, DateFormat::initializeClass, 1)))
        return NULL;
      return t_DateFormat::wrap_Object(DateFormat(((t_DateFormat *) arg)->object.this$));
    }
    static PyObject *t_DateFormat_instance_(PyTypeObject *type, PyObject *arg)
    {
      if (!castCheck(arg, DateFormat::initializeClass, 0))
        Py_RETURN_FALSE;
      Py_RETURN_TRUE;
    }

    static PyObject *t_DateFormat_clone(t_DateFormat *self, PyObject *args)
    {
      ::java::lang::Object result((jobject) NULL);

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.clone());
        return ::java::lang::t_Object::wrap_Object(result);
      }

      return callSuper(&PY_TYPE(DateFormat), (PyObject *) self, "clone", args, 2);
    }

    static PyObject *t_DateFormat_equals(t_DateFormat *self, PyObject *args)
    {
      ::java::lang::Object a0((jobject) NULL);
      jboolean result;

      if (!parseArgs(args, "o", &a0))
      {
        OBJ_CALL(result = self->object.equals(a0));
        Py_RETURN_BOOL(result);
      }

      return callSuper(&PY_TYPE(DateFormat), (PyObject *) self, "equals", args, 2);
    }

    static PyObject *t_DateFormat_format(t_DateFormat *self, PyObject *args)
    {
      ::java::util::Date a0((jobject) NULL);
      ::java::lang::String result((jobject) NULL);

      if (!parseArgs(args, "k", ::java::util::Date::initializeClass, &a0))
      {
        OBJ_CALL(result = self->object.format(a0));
        return j2p(result);
      }

      return callSuper(&PY_TYPE(DateFormat), (PyObject *) self, "format", args, 2);
    }

    static PyObject *t_DateFormat_getAvailableLocales(PyTypeObject *type)
    {
      JArray< ::java::util::Locale > result((jobject) NULL);
      OBJ_CALL(result = ::java::text::DateFormat::getAvailableLocales());
      return JArray<jobject>(result.this$).wrap(::java::util::t_Locale::wrap_jobject);
    }

    static PyObject *t_DateFormat_getCalendar(t_DateFormat *self)
    {
      ::java::util::Calendar result((jobject) NULL);
      OBJ_CALL(result = self->object.getCalendar());
      return ::java::util::t_Calendar::wrap_Object(result);
    }

    static PyObject *t_DateFormat_getDateInstance(PyTypeObject *type, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 0:
        {
          DateFormat result((jobject) NULL);
          OBJ_CALL(result = ::java::text::DateFormat::getDateInstance());
          return t_DateFormat::wrap_Object(result);
        }
        break;
       case 1:
        {
          jint a0;
          DateFormat result((jobject) NULL);

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(result = ::java::text::DateFormat::getDateInstance(a0));
            return t_DateFormat::wrap_Object(result);
          }
        }
        break;
       case 2:
        {
          jint a0;
          ::java::util::Locale a1((jobject) NULL);
          DateFormat result((jobject) NULL);

          if (!parseArgs(args, "Ik", ::java::util::Locale::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = ::java::text::DateFormat::getDateInstance(a0, a1));
            return t_DateFormat::wrap_Object(result);
          }
        }
      }

      PyErr_SetArgsError(type, "getDateInstance", args);
      return NULL;
    }

    static PyObject *t_DateFormat_getDateTimeInstance(PyTypeObject *type, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 0:
        {
          DateFormat result((jobject) NULL);
          OBJ_CALL(result = ::java::text::DateFormat::getDateTimeInstance());
          return t_DateFormat::wrap_Object(result);
        }
        break;
       case 2:
        {
          jint a0;
          jint a1;
          DateFormat result((jobject) NULL);

          if (!parseArgs(args, "II", &a0, &a1))
          {
            OBJ_CALL(result = ::java::text::DateFormat::getDateTimeInstance(a0, a1));
            return t_DateFormat::wrap_Object(result);
          }
        }
        break;
       case 3:
        {
          jint a0;
          jint a1;
          ::java::util::Locale a2((jobject) NULL);
          DateFormat result((jobject) NULL);

          if (!parseArgs(args, "IIk", ::java::util::Locale::initializeClass, &a0, &a1, &a2))
          {
            OBJ_CALL(result = ::java::text::DateFormat::getDateTimeInstance(a0, a1, a2));
            return t_DateFormat::wrap_Object(result);
          }
        }
      }

      PyErr_SetArgsError(type, "getDateTimeInstance", args);
      return NULL;
    }

    static PyObject *t_DateFormat_getInstance(PyTypeObject *type)
    {
      DateFormat result((jobject) NULL);
      OBJ_CALL(result = ::java::text::DateFormat::getInstance());
      return t_DateFormat::wrap_Object(result);
    }

    static PyObject *t_DateFormat_getNumberFormat(t_DateFormat *self)
    {
      ::java::text::NumberFormat result((jobject) NULL);
      OBJ_CALL(result = self->object.getNumberFormat());
      return ::java::text::t_NumberFormat::wrap_Object(result);
    }

    static PyObject *t_DateFormat_getTimeInstance(PyTypeObject *type, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 0:
        {
          DateFormat result((jobject) NULL);
          OBJ_CALL(result = ::java::text::DateFormat::getTimeInstance());
          return t_DateFormat::wrap_Object(result);
        }
        break;
       case 1:
        {
          jint a0;
          DateFormat result((jobject) NULL);

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(result = ::java::text::DateFormat::getTimeInstance(a0));
            return t_DateFormat::wrap_Object(result);
          }
        }
        break;
       case 2:
        {
          jint a0;
          ::java::util::Locale a1((jobject) NULL);
          DateFormat result((jobject) NULL);

          if (!parseArgs(args, "Ik", ::java::util::Locale::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = ::java::text::DateFormat::getTimeInstance(a0, a1));
            return t_DateFormat::wrap_Object(result);
          }
        }
      }

      PyErr_SetArgsError(type, "getTimeInstance", args);
      return NULL;
    }

    static PyObject *t_DateFormat_getTimeZone(t_DateFormat *self)
    {
      ::java::util::TimeZone result((jobject) NULL);
      OBJ_CALL(result = self->object.getTimeZone());
      return ::java::util::t_TimeZone::wrap_Object(result);
    }

    static PyObject *t_DateFormat_hashCode(t_DateFormat *self, PyObject *args)
    {
      jint result;

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.hashCode());
        return PyInt_FromLong((long) result);
      }

      return callSuper(&PY_TYPE(DateFormat), (PyObject *) self, "hashCode", args, 2);
    }

    static PyObject *t_DateFormat_isLenient(t_DateFormat *self)
    {
      jboolean result;
      OBJ_CALL(result = self->object.isLenient());
      Py_RETURN_BOOL(result);
    }

    static PyObject *t_DateFormat_parse(t_DateFormat *self, PyObject *arg)
    {
      ::java::lang::String a0((jobject) NULL);
      ::java::util::Date result((jobject) NULL);

      if (!parseArg(arg, "s", &a0))
      {
        OBJ_CALL(result = self->object.parse(a0));
        return ::java::util::t_Date::wrap_Object(result);
      }

      PyErr_SetArgsError((PyObject *) self, "parse", arg);
      return NULL;
    }

    static PyObject *t_DateFormat_setCalendar(t_DateFormat *self, PyObject *arg)
    {
      ::java::util::Calendar a0((jobject) NULL);

      if (!parseArg(arg, "k", ::java::util::Calendar::initializeClass, &a0))
      {
        OBJ_CALL(self->object.setCalendar(a0));
        Py_RETURN_NONE;
      }

      PyErr_SetArgsError((PyObject *) self, "setCalendar", arg);
      return NULL;
    }

    static PyObject *t_DateFormat_setLenient(t_DateFormat *self, PyObject *arg)
    {
      jboolean a0;

      if (!parseArg(arg, "Z", &a0))
      {
        OBJ_CALL(self->object.setLenient(a0));
        Py_RETURN_NONE;
      }

      PyErr_SetArgsError((PyObject *) self, "setLenient", arg);
      return NULL;
    }

    static PyObject *t_DateFormat_setNumberFormat(t_DateFormat *self, PyObject *arg)
    {
      ::java::text::NumberFormat a0((jobject) NULL);

      if (!parseArg(arg, "k", ::java::text::NumberFormat::initializeClass, &a0))
      {
        OBJ_CALL(self->object.setNumberFormat(a0));
        Py_RETURN_NONE;
      }

      PyErr_SetArgsError((PyObject *) self, "setNumberFormat", arg);
      return NULL;
    }

    static PyObject *t_DateFormat_setTimeZone(t_DateFormat *self, PyObject *arg)
    {
      ::java::util::TimeZone a0((jobject) NULL);

      if (!parseArg(arg, "k", ::java::util::TimeZone::initializeClass, &a0))
      {
        OBJ_CALL(self->object.setTimeZone(a0));
        Py_RETURN_NONE;
      }

      PyErr_SetArgsError((PyObject *) self, "setTimeZone", arg);
      return NULL;
    }

    static PyObject *t_DateFormat_get__availableLocales(t_DateFormat *self, void *data)
    {
      JArray< ::java::util::Locale > value((jobject) NULL);
      OBJ_CALL(value = self->object.getAvailableLocales());
      return JArray<jobject>(value.this$).wrap(::java::util::t_Locale::wrap_jobject);
    }

    static PyObject *t_DateFormat_get__calendar(t_DateFormat *self, void *data)
    {
      ::java::util::Calendar value((jobject) NULL);
      OBJ_CALL(value = self->object.getCalendar());
      return ::java::util::t_Calendar::wrap_Object(value);
    }
    static int t_DateFormat_set__calendar(t_DateFormat *self, PyObject *arg, void *data)
    {
      {
        ::java::util::Calendar value((jobject) NULL);
        if (!parseArg(arg, "k", ::java::util::Calendar::initializeClass, &value))
        {
          INT_CALL(self->object.setCalendar(value));
          return 0;
        }
      }
      PyErr_SetArgsError((PyObject *) self, "calendar", arg);
      return -1;
    }

    static PyObject *t_DateFormat_get__dateInstance(t_DateFormat *self, void *data)
    {
      DateFormat value((jobject) NULL);
      OBJ_CALL(value = self->object.getDateInstance());
      return t_DateFormat::wrap_Object(value);
    }

    static PyObject *t_DateFormat_get__dateTimeInstance(t_DateFormat *self, void *data)
    {
      DateFormat value((jobject) NULL);
      OBJ_CALL(value = self->object.getDateTimeInstance());
      return t_DateFormat::wrap_Object(value);
    }

    static PyObject *t_DateFormat_get__instance(t_DateFormat *self, void *data)
    {
      DateFormat value((jobject) NULL);
      OBJ_CALL(value = self->object.getInstance());
      return t_DateFormat::wrap_Object(value);
    }

    static PyObject *t_DateFormat_get__lenient(t_DateFormat *self, void *data)
    {
      jboolean value;
      OBJ_CALL(value = self->object.isLenient());
      Py_RETURN_BOOL(value);
    }
    static int t_DateFormat_set__lenient(t_DateFormat *self, PyObject *arg, void *data)
    {
      {
        jboolean value;
        if (!parseArg(arg, "Z", &value))
        {
          INT_CALL(self->object.setLenient(value));
          return 0;
        }
      }
      PyErr_SetArgsError((PyObject *) self, "lenient", arg);
      return -1;
    }

    static PyObject *t_DateFormat_get__numberFormat(t_DateFormat *self, void *data)
    {
      ::java::text::NumberFormat value((jobject) NULL);
      OBJ_CALL(value = self->object.getNumberFormat());
      return ::java::text::t_NumberFormat::wrap_Object(value);
    }
    static int t_DateFormat_set__numberFormat(t_DateFormat *self, PyObject *arg, void *data)
    {
      {
        ::java::text::NumberFormat value((jobject) NULL);
        if (!parseArg(arg, "k", ::java::text::NumberFormat::initializeClass, &value))
        {
          INT_CALL(self->object.setNumberFormat(value));
          return 0;
        }
      }
      PyErr_SetArgsError((PyObject *) self, "numberFormat", arg);
      return -1;
    }

    static PyObject *t_DateFormat_get__timeInstance(t_DateFormat *self, void *data)
    {
      DateFormat value((jobject) NULL);
      OBJ_CALL(value = self->object.getTimeInstance());
      return t_DateFormat::wrap_Object(value);
    }

    static PyObject *t_DateFormat_get__timeZone(t_DateFormat *self, void *data)
    {
      ::java::util::TimeZone value((jobject) NULL);
      OBJ_CALL(value = self->object.getTimeZone());
      return ::java::util::t_TimeZone::wrap_Object(value);
    }
    static int t_DateFormat_set__timeZone(t_DateFormat *self, PyObject *arg, void *data)
    {
      {
        ::java::util::TimeZone value((jobject) NULL);
        if (!parseArg(arg, "k", ::java::util::TimeZone::initializeClass, &value))
        {
          INT_CALL(self->object.setTimeZone(value));
          return 0;
        }
      }
      PyErr_SetArgsError((PyObject *) self, "timeZone", arg);
      return -1;
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/SortRescorer.h"
#include "java/lang/Class.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/search/Explanation.h"
#include "org/apache/lucene/search/IndexSearcher.h"
#include "org/apache/lucene/search/Sort.h"
#include "org/apache/lucene/search/TopDocs.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *SortRescorer::class$ = NULL;
        jmethodID *SortRescorer::mids$ = NULL;
        bool SortRescorer::live$ = false;

        jclass SortRescorer::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/SortRescorer");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_a6044f56] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/Sort;)V");
            mids$[mid_explain_2b38e623] = env->getMethodID(cls, "explain", "(Lorg/apache/lucene/search/IndexSearcher;Lorg/apache/lucene/search/Explanation;I)Lorg/apache/lucene/search/Explanation;");
            mids$[mid_rescore_bd3343d7] = env->getMethodID(cls, "rescore", "(Lorg/apache/lucene/search/IndexSearcher;Lorg/apache/lucene/search/TopDocs;I)Lorg/apache/lucene/search/TopDocs;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        SortRescorer::SortRescorer(const ::org::apache::lucene::search::Sort & a0) : ::org::apache::lucene::search::Rescorer(env->newObject(initializeClass, &mids$, mid_init$_a6044f56, a0.this$)) {}

        ::org::apache::lucene::search::Explanation SortRescorer::explain(const ::org::apache::lucene::search::IndexSearcher & a0, const ::org::apache::lucene::search::Explanation & a1, jint a2) const
        {
          return ::org::apache::lucene::search::Explanation(env->callObjectMethod(this$, mids$[mid_explain_2b38e623], a0.this$, a1.this$, a2));
        }

        ::org::apache::lucene::search::TopDocs SortRescorer::rescore(const ::org::apache::lucene::search::IndexSearcher & a0, const ::org::apache::lucene::search::TopDocs & a1, jint a2) const
        {
          return ::org::apache::lucene::search::TopDocs(env->callObjectMethod(this$, mids$[mid_rescore_bd3343d7], a0.this$, a1.this$, a2));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_SortRescorer_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_SortRescorer_instance_(PyTypeObject *type, PyObject *arg);
        static int t_SortRescorer_init_(t_SortRescorer *self, PyObject *args, PyObject *kwds);
        static PyObject *t_SortRescorer_explain(t_SortRescorer *self, PyObject *args);
        static PyObject *t_SortRescorer_rescore(t_SortRescorer *self, PyObject *args);

        static PyMethodDef t_SortRescorer__methods_[] = {
          DECLARE_METHOD(t_SortRescorer, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SortRescorer, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SortRescorer, explain, METH_VARARGS),
          DECLARE_METHOD(t_SortRescorer, rescore, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(SortRescorer, t_SortRescorer, ::org::apache::lucene::search::Rescorer, SortRescorer, t_SortRescorer_init_, 0, 0, 0, 0, 0);

        void t_SortRescorer::install(PyObject *module)
        {
          installType(&PY_TYPE(SortRescorer), module, "SortRescorer", 0);
        }

        void t_SortRescorer::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(SortRescorer).tp_dict, "class_", make_descriptor(SortRescorer::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(SortRescorer).tp_dict, "wrapfn_", make_descriptor(t_SortRescorer::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(SortRescorer).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_SortRescorer_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, SortRescorer::initializeClass, 1)))
            return NULL;
          return t_SortRescorer::wrap_Object(SortRescorer(((t_SortRescorer *) arg)->object.this$));
        }
        static PyObject *t_SortRescorer_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, SortRescorer::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_SortRescorer_init_(t_SortRescorer *self, PyObject *args, PyObject *kwds)
        {
          ::org::apache::lucene::search::Sort a0((jobject) NULL);
          SortRescorer object((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::search::Sort::initializeClass, &a0))
          {
            INT_CALL(object = SortRescorer(a0));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_SortRescorer_explain(t_SortRescorer *self, PyObject *args)
        {
          ::org::apache::lucene::search::IndexSearcher a0((jobject) NULL);
          ::org::apache::lucene::search::Explanation a1((jobject) NULL);
          jint a2;
          ::org::apache::lucene::search::Explanation result((jobject) NULL);

          if (!parseArgs(args, "kkI", ::org::apache::lucene::search::IndexSearcher::initializeClass, ::org::apache::lucene::search::Explanation::initializeClass, &a0, &a1, &a2))
          {
            OBJ_CALL(result = self->object.explain(a0, a1, a2));
            return ::org::apache::lucene::search::t_Explanation::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(SortRescorer), (PyObject *) self, "explain", args, 2);
        }

        static PyObject *t_SortRescorer_rescore(t_SortRescorer *self, PyObject *args)
        {
          ::org::apache::lucene::search::IndexSearcher a0((jobject) NULL);
          ::org::apache::lucene::search::TopDocs a1((jobject) NULL);
          jint a2;
          ::org::apache::lucene::search::TopDocs result((jobject) NULL);

          if (!parseArgs(args, "kkI", ::org::apache::lucene::search::IndexSearcher::initializeClass, ::org::apache::lucene::search::TopDocs::initializeClass, &a0, &a1, &a2))
          {
            OBJ_CALL(result = self->object.rescore(a0, a1, a2));
            return ::org::apache::lucene::search::t_TopDocs::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(SortRescorer), (PyObject *) self, "rescore", args, 2);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/lucene40/Lucene40SegmentInfoWriter.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/store/IOContext.h"
#include "org/apache/lucene/store/Directory.h"
#include "org/apache/lucene/index/SegmentInfo.h"
#include "org/apache/lucene/index/FieldInfos.h"
#include "java/io/IOException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace lucene40 {

          ::java::lang::Class *Lucene40SegmentInfoWriter::class$ = NULL;
          jmethodID *Lucene40SegmentInfoWriter::mids$ = NULL;
          bool Lucene40SegmentInfoWriter::live$ = false;

          jclass Lucene40SegmentInfoWriter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/lucene40/Lucene40SegmentInfoWriter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_write_3589180f] = env->getMethodID(cls, "write", "(Lorg/apache/lucene/store/Directory;Lorg/apache/lucene/index/SegmentInfo;Lorg/apache/lucene/index/FieldInfos;Lorg/apache/lucene/store/IOContext;)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          Lucene40SegmentInfoWriter::Lucene40SegmentInfoWriter() : ::org::apache::lucene::codecs::SegmentInfoWriter(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          void Lucene40SegmentInfoWriter::write(const ::org::apache::lucene::store::Directory & a0, const ::org::apache::lucene::index::SegmentInfo & a1, const ::org::apache::lucene::index::FieldInfos & a2, const ::org::apache::lucene::store::IOContext & a3) const
          {
            env->callVoidMethod(this$, mids$[mid_write_3589180f], a0.this$, a1.this$, a2.this$, a3.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace lucene40 {
          static PyObject *t_Lucene40SegmentInfoWriter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Lucene40SegmentInfoWriter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_Lucene40SegmentInfoWriter_init_(t_Lucene40SegmentInfoWriter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_Lucene40SegmentInfoWriter_write(t_Lucene40SegmentInfoWriter *self, PyObject *args);

          static PyMethodDef t_Lucene40SegmentInfoWriter__methods_[] = {
            DECLARE_METHOD(t_Lucene40SegmentInfoWriter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lucene40SegmentInfoWriter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lucene40SegmentInfoWriter, write, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(Lucene40SegmentInfoWriter, t_Lucene40SegmentInfoWriter, ::org::apache::lucene::codecs::SegmentInfoWriter, Lucene40SegmentInfoWriter, t_Lucene40SegmentInfoWriter_init_, 0, 0, 0, 0, 0);

          void t_Lucene40SegmentInfoWriter::install(PyObject *module)
          {
            installType(&PY_TYPE(Lucene40SegmentInfoWriter), module, "Lucene40SegmentInfoWriter", 0);
          }

          void t_Lucene40SegmentInfoWriter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(Lucene40SegmentInfoWriter).tp_dict, "class_", make_descriptor(Lucene40SegmentInfoWriter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(Lucene40SegmentInfoWriter).tp_dict, "wrapfn_", make_descriptor(t_Lucene40SegmentInfoWriter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(Lucene40SegmentInfoWriter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_Lucene40SegmentInfoWriter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, Lucene40SegmentInfoWriter::initializeClass, 1)))
              return NULL;
            return t_Lucene40SegmentInfoWriter::wrap_Object(Lucene40SegmentInfoWriter(((t_Lucene40SegmentInfoWriter *) arg)->object.this$));
          }
          static PyObject *t_Lucene40SegmentInfoWriter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, Lucene40SegmentInfoWriter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_Lucene40SegmentInfoWriter_init_(t_Lucene40SegmentInfoWriter *self, PyObject *args, PyObject *kwds)
          {
            Lucene40SegmentInfoWriter object((jobject) NULL);

            INT_CALL(object = Lucene40SegmentInfoWriter());
            self->object = object;

            return 0;
          }

          static PyObject *t_Lucene40SegmentInfoWriter_write(t_Lucene40SegmentInfoWriter *self, PyObject *args)
          {
            ::org::apache::lucene::store::Directory a0((jobject) NULL);
            ::org::apache::lucene::index::SegmentInfo a1((jobject) NULL);
            ::org::apache::lucene::index::FieldInfos a2((jobject) NULL);
            ::org::apache::lucene::store::IOContext a3((jobject) NULL);

            if (!parseArgs(args, "kkkk", ::org::apache::lucene::store::Directory::initializeClass, ::org::apache::lucene::index::SegmentInfo::initializeClass, ::org::apache::lucene::index::FieldInfos::initializeClass, ::org::apache::lucene::store::IOContext::initializeClass, &a0, &a1, &a2, &a3))
            {
              OBJ_CALL(self->object.write(a0, a1, a2, a3));
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(Lucene40SegmentInfoWriter), (PyObject *) self, "write", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/surround/parser/TokenMgrError.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace surround {
          namespace parser {

            ::java::lang::Class *TokenMgrError::class$ = NULL;
            jmethodID *TokenMgrError::mids$ = NULL;
            bool TokenMgrError::live$ = false;

            jclass TokenMgrError::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/surround/parser/TokenMgrError");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
                mids$[mid_init$_6e53ccc6] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;I)V");
                mids$[mid_init$_8aaeec67] = env->getMethodID(cls, "<init>", "(ZIIILjava/lang/String;CI)V");
                mids$[mid_getMessage_14c7b5c5] = env->getMethodID(cls, "getMessage", "()Ljava/lang/String;");
                mids$[mid_addEscapes_97a5258f] = env->getStaticMethodID(cls, "addEscapes", "(Ljava/lang/String;)Ljava/lang/String;");
                mids$[mid_LexicalError_e888c5f6] = env->getStaticMethodID(cls, "LexicalError", "(ZIIILjava/lang/String;C)Ljava/lang/String;");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            TokenMgrError::TokenMgrError() : ::java::lang::Error(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

            TokenMgrError::TokenMgrError(const ::java::lang::String & a0, jint a1) : ::java::lang::Error(env->newObject(initializeClass, &mids$, mid_init$_6e53ccc6, a0.this$, a1)) {}

            TokenMgrError::TokenMgrError(jboolean a0, jint a1, jint a2, jint a3, const ::java::lang::String & a4, jchar a5, jint a6) : ::java::lang::Error(env->newObject(initializeClass, &mids$, mid_init$_8aaeec67, a0, a1, a2, a3, a4.this$, a5, a6)) {}

            ::java::lang::String TokenMgrError::getMessage() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getMessage_14c7b5c5]));
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace surround {
          namespace parser {
            static PyObject *t_TokenMgrError_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_TokenMgrError_instance_(PyTypeObject *type, PyObject *arg);
            static int t_TokenMgrError_init_(t_TokenMgrError *self, PyObject *args, PyObject *kwds);
            static PyObject *t_TokenMgrError_getMessage(t_TokenMgrError *self, PyObject *args);
            static PyObject *t_TokenMgrError_get__message(t_TokenMgrError *self, void *data);
            static PyGetSetDef t_TokenMgrError__fields_[] = {
              DECLARE_GET_FIELD(t_TokenMgrError, message),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_TokenMgrError__methods_[] = {
              DECLARE_METHOD(t_TokenMgrError, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_TokenMgrError, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_TokenMgrError, getMessage, METH_VARARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(TokenMgrError, t_TokenMgrError, ::java::lang::Error, TokenMgrError, t_TokenMgrError_init_, 0, 0, t_TokenMgrError__fields_, 0, 0);

            void t_TokenMgrError::install(PyObject *module)
            {
              installType(&PY_TYPE(TokenMgrError), module, "TokenMgrError", 0);
            }

            void t_TokenMgrError::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(TokenMgrError).tp_dict, "class_", make_descriptor(TokenMgrError::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(TokenMgrError).tp_dict, "wrapfn_", make_descriptor(t_TokenMgrError::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(TokenMgrError).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_TokenMgrError_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, TokenMgrError::initializeClass, 1)))
                return NULL;
              return t_TokenMgrError::wrap_Object(TokenMgrError(((t_TokenMgrError *) arg)->object.this$));
            }
            static PyObject *t_TokenMgrError_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, TokenMgrError::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_TokenMgrError_init_(t_TokenMgrError *self, PyObject *args, PyObject *kwds)
            {
              switch (PyTuple_GET_SIZE(args)) {
               case 0:
                {
                  TokenMgrError object((jobject) NULL);

                  INT_CALL(object = TokenMgrError());
                  self->object = object;
                  break;
                }
                goto err;
               case 2:
                {
                  ::java::lang::String a0((jobject) NULL);
                  jint a1;
                  TokenMgrError object((jobject) NULL);

                  if (!parseArgs(args, "sI", &a0, &a1))
                  {
                    INT_CALL(object = TokenMgrError(a0, a1));
                    self->object = object;
                    break;
                  }
                }
                goto err;
               case 7:
                {
                  jboolean a0;
                  jint a1;
                  jint a2;
                  jint a3;
                  ::java::lang::String a4((jobject) NULL);
                  jchar a5;
                  jint a6;
                  TokenMgrError object((jobject) NULL);

                  if (!parseArgs(args, "ZIIIsCI", &a0, &a1, &a2, &a3, &a4, &a5, &a6))
                  {
                    INT_CALL(object = TokenMgrError(a0, a1, a2, a3, a4, a5, a6));
                    self->object = object;
                    break;
                  }
                }
               default:
               err:
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_TokenMgrError_getMessage(t_TokenMgrError *self, PyObject *args)
            {
              ::java::lang::String result((jobject) NULL);

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.getMessage());
                return j2p(result);
              }

              return callSuper(&PY_TYPE(TokenMgrError), (PyObject *) self, "getMessage", args, 2);
            }

            static PyObject *t_TokenMgrError_get__message(t_TokenMgrError *self, void *data)
            {
              ::java::lang::String value((jobject) NULL);
              OBJ_CALL(value = self->object.getMessage());
              return j2p(value);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/FieldComparator$NumericComparator.h"
#include "java/lang/Number.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *FieldComparator$NumericComparator::class$ = NULL;
        jmethodID *FieldComparator$NumericComparator::mids$ = NULL;
        bool FieldComparator$NumericComparator::live$ = false;

        jclass FieldComparator$NumericComparator::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/FieldComparator$NumericComparator");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_158d1296] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Ljava/lang/Number;)V");
            mids$[mid_setNextReader_6329aed7] = env->getMethodID(cls, "setNextReader", "(Lorg/apache/lucene/index/AtomicReaderContext;)Lorg/apache/lucene/search/FieldComparator;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        FieldComparator$NumericComparator::FieldComparator$NumericComparator(const ::java::lang::String & a0, const ::java::lang::Number & a1) : ::org::apache::lucene::search::FieldComparator(env->newObject(initializeClass, &mids$, mid_init$_158d1296, a0.this$, a1.this$)) {}

        ::org::apache::lucene::search::FieldComparator FieldComparator$NumericComparator::setNextReader(const ::org::apache::lucene::index::AtomicReaderContext & a0) const
        {
          return ::org::apache::lucene::search::FieldComparator(env->callObjectMethod(this$, mids$[mid_setNextReader_6329aed7], a0.this$));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_FieldComparator$NumericComparator_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FieldComparator$NumericComparator_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FieldComparator$NumericComparator_of_(t_FieldComparator$NumericComparator *self, PyObject *args);
        static int t_FieldComparator$NumericComparator_init_(t_FieldComparator$NumericComparator *self, PyObject *args, PyObject *kwds);
        static PyObject *t_FieldComparator$NumericComparator_setNextReader(t_FieldComparator$NumericComparator *self, PyObject *args);
        static int t_FieldComparator$NumericComparator_set__nextReader(t_FieldComparator$NumericComparator *self, PyObject *arg, void *data);
        static PyObject *t_FieldComparator$NumericComparator_get__parameters_(t_FieldComparator$NumericComparator *self, void *data);
        static PyGetSetDef t_FieldComparator$NumericComparator__fields_[] = {
          DECLARE_SET_FIELD(t_FieldComparator$NumericComparator, nextReader),
          DECLARE_GET_FIELD(t_FieldComparator$NumericComparator, parameters_),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_FieldComparator$NumericComparator__methods_[] = {
          DECLARE_METHOD(t_FieldComparator$NumericComparator, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FieldComparator$NumericComparator, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FieldComparator$NumericComparator, of_, METH_VARARGS),
          DECLARE_METHOD(t_FieldComparator$NumericComparator, setNextReader, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(FieldComparator$NumericComparator, t_FieldComparator$NumericComparator, ::org::apache::lucene::search::FieldComparator, FieldComparator$NumericComparator, t_FieldComparator$NumericComparator_init_, 0, 0, t_FieldComparator$NumericComparator__fields_, 0, 0);
        PyObject *t_FieldComparator$NumericComparator::wrap_Object(const FieldComparator$NumericComparator& object, PyTypeObject *p0)
        {
          PyObject *obj = t_FieldComparator$NumericComparator::wrap_Object(object);
          if (obj != NULL && obj != Py_None)
          {
            t_FieldComparator$NumericComparator *self = (t_FieldComparator$NumericComparator *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        PyObject *t_FieldComparator$NumericComparator::wrap_jobject(const jobject& object, PyTypeObject *p0)
        {
          PyObject *obj = t_FieldComparator$NumericComparator::wrap_jobject(object);
          if (obj != NULL && obj != Py_None)
          {
            t_FieldComparator$NumericComparator *self = (t_FieldComparator$NumericComparator *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        void t_FieldComparator$NumericComparator::install(PyObject *module)
        {
          installType(&PY_TYPE(FieldComparator$NumericComparator), module, "FieldComparator$NumericComparator", 0);
        }

        void t_FieldComparator$NumericComparator::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(FieldComparator$NumericComparator).tp_dict, "class_", make_descriptor(FieldComparator$NumericComparator::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(FieldComparator$NumericComparator).tp_dict, "wrapfn_", make_descriptor(t_FieldComparator$NumericComparator::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(FieldComparator$NumericComparator).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_FieldComparator$NumericComparator_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, FieldComparator$NumericComparator::initializeClass, 1)))
            return NULL;
          return t_FieldComparator$NumericComparator::wrap_Object(FieldComparator$NumericComparator(((t_FieldComparator$NumericComparator *) arg)->object.this$));
        }
        static PyObject *t_FieldComparator$NumericComparator_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, FieldComparator$NumericComparator::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_FieldComparator$NumericComparator_of_(t_FieldComparator$NumericComparator *self, PyObject *args)
        {
          if (!parseArg(args, "T", 1, &(self->parameters)))
            Py_RETURN_SELF;
          return PyErr_SetArgsError((PyObject *) self, "of_", args);
        }

        static int t_FieldComparator$NumericComparator_init_(t_FieldComparator$NumericComparator *self, PyObject *args, PyObject *kwds)
        {
          ::java::lang::String a0((jobject) NULL);
          ::java::lang::Number a1((jobject) NULL);
          FieldComparator$NumericComparator object((jobject) NULL);

          if (!parseArgs(args, "sO", &::java::lang::PY_TYPE(Number), &a0, &a1))
          {
            INT_CALL(object = FieldComparator$NumericComparator(a0, a1));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_FieldComparator$NumericComparator_setNextReader(t_FieldComparator$NumericComparator *self, PyObject *args)
        {
          ::org::apache::lucene::index::AtomicReaderContext a0((jobject) NULL);
          ::org::apache::lucene::search::FieldComparator result((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.setNextReader(a0));
            return ::org::apache::lucene::search::t_FieldComparator::wrap_Object(result, self->parameters[0]);
          }

          return callSuper(&PY_TYPE(FieldComparator$NumericComparator), (PyObject *) self, "setNextReader", args, 2);
        }
        static PyObject *t_FieldComparator$NumericComparator_get__parameters_(t_FieldComparator$NumericComparator *self, void *data)
        {
          return typeParameters(self->parameters, sizeof(self->parameters));
        }

        static int t_FieldComparator$NumericComparator_set__nextReader(t_FieldComparator$NumericComparator *self, PyObject *arg, void *data)
        {
          {
            ::org::apache::lucene::index::AtomicReaderContext value((jobject) NULL);
            if (!parseArg(arg, "k", ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &value))
            {
              INT_CALL(self->object.setNextReader(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "nextReader", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/ngram/NGramTokenizer.h"
#include "org/apache/lucene/util/Version.h"
#include "org/apache/lucene/util/AttributeFactory.h"
#include "java/io/IOException.h"
#include "java/io/Reader.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ngram {

          ::java::lang::Class *NGramTokenizer::class$ = NULL;
          jmethodID *NGramTokenizer::mids$ = NULL;
          bool NGramTokenizer::live$ = false;
          jint NGramTokenizer::DEFAULT_MAX_NGRAM_SIZE = (jint) 0;
          jint NGramTokenizer::DEFAULT_MIN_NGRAM_SIZE = (jint) 0;

          jclass NGramTokenizer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/ngram/NGramTokenizer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_7997a391] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Ljava/io/Reader;)V");
              mids$[mid_init$_47cfcf59] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Ljava/io/Reader;II)V");
              mids$[mid_init$_0c87564f] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/util/AttributeFactory;Ljava/io/Reader;II)V");
              mids$[mid_end_54c6a166] = env->getMethodID(cls, "end", "()V");
              mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");
              mids$[mid_reset_54c6a166] = env->getMethodID(cls, "reset", "()V");
              mids$[mid_isTokenChar_39c7bd30] = env->getMethodID(cls, "isTokenChar", "(I)Z");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              DEFAULT_MAX_NGRAM_SIZE = env->getStaticIntField(cls, "DEFAULT_MAX_NGRAM_SIZE");
              DEFAULT_MIN_NGRAM_SIZE = env->getStaticIntField(cls, "DEFAULT_MIN_NGRAM_SIZE");
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          NGramTokenizer::NGramTokenizer(const ::org::apache::lucene::util::Version & a0, const ::java::io::Reader & a1) : ::org::apache::lucene::analysis::Tokenizer(env->newObject(initializeClass, &mids$, mid_init$_7997a391, a0.this$, a1.this$)) {}

          NGramTokenizer::NGramTokenizer(const ::org::apache::lucene::util::Version & a0, const ::java::io::Reader & a1, jint a2, jint a3) : ::org::apache::lucene::analysis::Tokenizer(env->newObject(initializeClass, &mids$, mid_init$_47cfcf59, a0.this$, a1.this$, a2, a3)) {}

          NGramTokenizer::NGramTokenizer(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::util::AttributeFactory & a1, const ::java::io::Reader & a2, jint a3, jint a4) : ::org::apache::lucene::analysis::Tokenizer(env->newObject(initializeClass, &mids$, mid_init$_0c87564f, a0.this$, a1.this$, a2.this$, a3, a4)) {}

          void NGramTokenizer::end() const
          {
            env->callVoidMethod(this$, mids$[mid_end_54c6a166]);
          }

          jboolean NGramTokenizer::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_54c6a16a]);
          }

          void NGramTokenizer::reset() const
          {
            env->callVoidMethod(this$, mids$[mid_reset_54c6a166]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ngram {
          static PyObject *t_NGramTokenizer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_NGramTokenizer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_NGramTokenizer_init_(t_NGramTokenizer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_NGramTokenizer_end(t_NGramTokenizer *self, PyObject *args);
          static PyObject *t_NGramTokenizer_incrementToken(t_NGramTokenizer *self, PyObject *args);
          static PyObject *t_NGramTokenizer_reset(t_NGramTokenizer *self, PyObject *args);

          static PyMethodDef t_NGramTokenizer__methods_[] = {
            DECLARE_METHOD(t_NGramTokenizer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_NGramTokenizer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_NGramTokenizer, end, METH_VARARGS),
            DECLARE_METHOD(t_NGramTokenizer, incrementToken, METH_VARARGS),
            DECLARE_METHOD(t_NGramTokenizer, reset, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(NGramTokenizer, t_NGramTokenizer, ::org::apache::lucene::analysis::Tokenizer, NGramTokenizer, t_NGramTokenizer_init_, 0, 0, 0, 0, 0);

          void t_NGramTokenizer::install(PyObject *module)
          {
            installType(&PY_TYPE(NGramTokenizer), module, "NGramTokenizer", 0);
          }

          void t_NGramTokenizer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(NGramTokenizer).tp_dict, "class_", make_descriptor(NGramTokenizer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(NGramTokenizer).tp_dict, "wrapfn_", make_descriptor(t_NGramTokenizer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(NGramTokenizer).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(NGramTokenizer::initializeClass);
            PyDict_SetItemString(PY_TYPE(NGramTokenizer).tp_dict, "DEFAULT_MAX_NGRAM_SIZE", make_descriptor(NGramTokenizer::DEFAULT_MAX_NGRAM_SIZE));
            PyDict_SetItemString(PY_TYPE(NGramTokenizer).tp_dict, "DEFAULT_MIN_NGRAM_SIZE", make_descriptor(NGramTokenizer::DEFAULT_MIN_NGRAM_SIZE));
          }

          static PyObject *t_NGramTokenizer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, NGramTokenizer::initializeClass, 1)))
              return NULL;
            return t_NGramTokenizer::wrap_Object(NGramTokenizer(((t_NGramTokenizer *) arg)->object.this$));
          }
          static PyObject *t_NGramTokenizer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, NGramTokenizer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_NGramTokenizer_init_(t_NGramTokenizer *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 2:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                ::java::io::Reader a1((jobject) NULL);
                NGramTokenizer object((jobject) NULL);

                if (!parseArgs(args, "Kk", ::org::apache::lucene::util::Version::initializeClass, ::java::io::Reader::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1))
                {
                  INT_CALL(object = NGramTokenizer(a0, a1));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 4:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                ::java::io::Reader a1((jobject) NULL);
                jint a2;
                jint a3;
                NGramTokenizer object((jobject) NULL);

                if (!parseArgs(args, "KkII", ::org::apache::lucene::util::Version::initializeClass, ::java::io::Reader::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1, &a2, &a3))
                {
                  INT_CALL(object = NGramTokenizer(a0, a1, a2, a3));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 5:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                ::org::apache::lucene::util::AttributeFactory a1((jobject) NULL);
                ::java::io::Reader a2((jobject) NULL);
                jint a3;
                jint a4;
                NGramTokenizer object((jobject) NULL);

                if (!parseArgs(args, "KkkII", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::util::AttributeFactory::initializeClass, ::java::io::Reader::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1, &a2, &a3, &a4))
                {
                  INT_CALL(object = NGramTokenizer(a0, a1, a2, a3, a4));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_NGramTokenizer_end(t_NGramTokenizer *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.end());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(NGramTokenizer), (PyObject *) self, "end", args, 2);
          }

          static PyObject *t_NGramTokenizer_incrementToken(t_NGramTokenizer *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(NGramTokenizer), (PyObject *) self, "incrementToken", args, 2);
          }

          static PyObject *t_NGramTokenizer_reset(t_NGramTokenizer *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.reset());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(NGramTokenizer), (PyObject *) self, "reset", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/PersistentSnapshotDeletionPolicy.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/index/IndexCommit.h"
#include "org/apache/lucene/index/IndexWriterConfig$OpenMode.h"
#include "org/apache/lucene/store/Directory.h"
#include "org/apache/lucene/index/IndexDeletionPolicy.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *PersistentSnapshotDeletionPolicy::class$ = NULL;
        jmethodID *PersistentSnapshotDeletionPolicy::mids$ = NULL;
        bool PersistentSnapshotDeletionPolicy::live$ = false;
        ::java::lang::String *PersistentSnapshotDeletionPolicy::SNAPSHOTS_PREFIX = NULL;

        jclass PersistentSnapshotDeletionPolicy::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/PersistentSnapshotDeletionPolicy");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_12208c4a] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/IndexDeletionPolicy;Lorg/apache/lucene/store/Directory;)V");
            mids$[mid_init$_7f5c9dc9] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/IndexDeletionPolicy;Lorg/apache/lucene/store/Directory;Lorg/apache/lucene/index/IndexWriterConfig$OpenMode;)V");
            mids$[mid_getLastSaveFile_14c7b5c5] = env->getMethodID(cls, "getLastSaveFile", "()Ljava/lang/String;");
            mids$[mid_release_fecc65d3] = env->getMethodID(cls, "release", "(Lorg/apache/lucene/index/IndexCommit;)V");
            mids$[mid_release_0ee6df2f] = env->getMethodID(cls, "release", "(J)V");
            mids$[mid_snapshot_09307276] = env->getMethodID(cls, "snapshot", "()Lorg/apache/lucene/index/IndexCommit;");

            class$ = (::java::lang::Class *) new JObject(cls);
            cls = (jclass) class$->this$;

            SNAPSHOTS_PREFIX = new ::java::lang::String(env->getStaticObjectField(cls, "SNAPSHOTS_PREFIX", "Ljava/lang/String;"));
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        PersistentSnapshotDeletionPolicy::PersistentSnapshotDeletionPolicy(const ::org::apache::lucene::index::IndexDeletionPolicy & a0, const ::org::apache::lucene::store::Directory & a1) : ::org::apache::lucene::index::SnapshotDeletionPolicy(env->newObject(initializeClass, &mids$, mid_init$_12208c4a, a0.this$, a1.this$)) {}

        PersistentSnapshotDeletionPolicy::PersistentSnapshotDeletionPolicy(const ::org::apache::lucene::index::IndexDeletionPolicy & a0, const ::org::apache::lucene::store::Directory & a1, const ::org::apache::lucene::index::IndexWriterConfig$OpenMode & a2) : ::org::apache::lucene::index::SnapshotDeletionPolicy(env->newObject(initializeClass, &mids$, mid_init$_7f5c9dc9, a0.this$, a1.this$, a2.this$)) {}

        ::java::lang::String PersistentSnapshotDeletionPolicy::getLastSaveFile() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getLastSaveFile_14c7b5c5]));
        }

        void PersistentSnapshotDeletionPolicy::release(const ::org::apache::lucene::index::IndexCommit & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_release_fecc65d3], a0.this$);
        }

        void PersistentSnapshotDeletionPolicy::release(jlong a0) const
        {
          env->callVoidMethod(this$, mids$[mid_release_0ee6df2f], a0);
        }

        ::org::apache::lucene::index::IndexCommit PersistentSnapshotDeletionPolicy::snapshot() const
        {
          return ::org::apache::lucene::index::IndexCommit(env->callObjectMethod(this$, mids$[mid_snapshot_09307276]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_PersistentSnapshotDeletionPolicy_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_PersistentSnapshotDeletionPolicy_instance_(PyTypeObject *type, PyObject *arg);
        static int t_PersistentSnapshotDeletionPolicy_init_(t_PersistentSnapshotDeletionPolicy *self, PyObject *args, PyObject *kwds);
        static PyObject *t_PersistentSnapshotDeletionPolicy_getLastSaveFile(t_PersistentSnapshotDeletionPolicy *self);
        static PyObject *t_PersistentSnapshotDeletionPolicy_release(t_PersistentSnapshotDeletionPolicy *self, PyObject *args);
        static PyObject *t_PersistentSnapshotDeletionPolicy_snapshot(t_PersistentSnapshotDeletionPolicy *self, PyObject *args);
        static PyObject *t_PersistentSnapshotDeletionPolicy_get__lastSaveFile(t_PersistentSnapshotDeletionPolicy *self, void *data);
        static PyGetSetDef t_PersistentSnapshotDeletionPolicy__fields_[] = {
          DECLARE_GET_FIELD(t_PersistentSnapshotDeletionPolicy, lastSaveFile),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_PersistentSnapshotDeletionPolicy__methods_[] = {
          DECLARE_METHOD(t_PersistentSnapshotDeletionPolicy, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PersistentSnapshotDeletionPolicy, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PersistentSnapshotDeletionPolicy, getLastSaveFile, METH_NOARGS),
          DECLARE_METHOD(t_PersistentSnapshotDeletionPolicy, release, METH_VARARGS),
          DECLARE_METHOD(t_PersistentSnapshotDeletionPolicy, snapshot, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(PersistentSnapshotDeletionPolicy, t_PersistentSnapshotDeletionPolicy, ::org::apache::lucene::index::SnapshotDeletionPolicy, PersistentSnapshotDeletionPolicy, t_PersistentSnapshotDeletionPolicy_init_, 0, 0, t_PersistentSnapshotDeletionPolicy__fields_, 0, 0);

        void t_PersistentSnapshotDeletionPolicy::install(PyObject *module)
        {
          installType(&PY_TYPE(PersistentSnapshotDeletionPolicy), module, "PersistentSnapshotDeletionPolicy", 0);
        }

        void t_PersistentSnapshotDeletionPolicy::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(PersistentSnapshotDeletionPolicy).tp_dict, "class_", make_descriptor(PersistentSnapshotDeletionPolicy::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(PersistentSnapshotDeletionPolicy).tp_dict, "wrapfn_", make_descriptor(t_PersistentSnapshotDeletionPolicy::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(PersistentSnapshotDeletionPolicy).tp_dict, "boxfn_", make_descriptor(boxObject));
          env->getClass(PersistentSnapshotDeletionPolicy::initializeClass);
          PyDict_SetItemString(PY_TYPE(PersistentSnapshotDeletionPolicy).tp_dict, "SNAPSHOTS_PREFIX", make_descriptor(j2p(*PersistentSnapshotDeletionPolicy::SNAPSHOTS_PREFIX)));
        }

        static PyObject *t_PersistentSnapshotDeletionPolicy_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, PersistentSnapshotDeletionPolicy::initializeClass, 1)))
            return NULL;
          return t_PersistentSnapshotDeletionPolicy::wrap_Object(PersistentSnapshotDeletionPolicy(((t_PersistentSnapshotDeletionPolicy *) arg)->object.this$));
        }
        static PyObject *t_PersistentSnapshotDeletionPolicy_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, PersistentSnapshotDeletionPolicy::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_PersistentSnapshotDeletionPolicy_init_(t_PersistentSnapshotDeletionPolicy *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 2:
            {
              ::org::apache::lucene::index::IndexDeletionPolicy a0((jobject) NULL);
              ::org::apache::lucene::store::Directory a1((jobject) NULL);
              PersistentSnapshotDeletionPolicy object((jobject) NULL);

              if (!parseArgs(args, "kk", ::org::apache::lucene::index::IndexDeletionPolicy::initializeClass, ::org::apache::lucene::store::Directory::initializeClass, &a0, &a1))
              {
                INT_CALL(object = PersistentSnapshotDeletionPolicy(a0, a1));
                self->object = object;
                break;
              }
            }
            goto err;
           case 3:
            {
              ::org::apache::lucene::index::IndexDeletionPolicy a0((jobject) NULL);
              ::org::apache::lucene::store::Directory a1((jobject) NULL);
              ::org::apache::lucene::index::IndexWriterConfig$OpenMode a2((jobject) NULL);
              PyTypeObject **p2;
              PersistentSnapshotDeletionPolicy object((jobject) NULL);

              if (!parseArgs(args, "kkK", ::org::apache::lucene::index::IndexDeletionPolicy::initializeClass, ::org::apache::lucene::store::Directory::initializeClass, ::org::apache::lucene::index::IndexWriterConfig$OpenMode::initializeClass, &a0, &a1, &a2, &p2, ::org::apache::lucene::index::t_IndexWriterConfig$OpenMode::parameters_))
              {
                INT_CALL(object = PersistentSnapshotDeletionPolicy(a0, a1, a2));
                self->object = object;
                break;
              }
            }
           default:
           err:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_PersistentSnapshotDeletionPolicy_getLastSaveFile(t_PersistentSnapshotDeletionPolicy *self)
        {
          ::java::lang::String result((jobject) NULL);
          OBJ_CALL(result = self->object.getLastSaveFile());
          return j2p(result);
        }

        static PyObject *t_PersistentSnapshotDeletionPolicy_release(t_PersistentSnapshotDeletionPolicy *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              ::org::apache::lucene::index::IndexCommit a0((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::index::IndexCommit::initializeClass, &a0))
              {
                OBJ_CALL(self->object.release(a0));
                Py_RETURN_NONE;
              }
            }
            {
              jlong a0;

              if (!parseArgs(args, "J", &a0))
              {
                OBJ_CALL(self->object.release(a0));
                Py_RETURN_NONE;
              }
            }
          }

          return callSuper(&PY_TYPE(PersistentSnapshotDeletionPolicy), (PyObject *) self, "release", args, 2);
        }

        static PyObject *t_PersistentSnapshotDeletionPolicy_snapshot(t_PersistentSnapshotDeletionPolicy *self, PyObject *args)
        {
          ::org::apache::lucene::index::IndexCommit result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.snapshot());
            return ::org::apache::lucene::index::t_IndexCommit::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(PersistentSnapshotDeletionPolicy), (PyObject *) self, "snapshot", args, 2);
        }

        static PyObject *t_PersistentSnapshotDeletionPolicy_get__lastSaveFile(t_PersistentSnapshotDeletionPolicy *self, void *data)
        {
          ::java::lang::String value((jobject) NULL);
          OBJ_CALL(value = self->object.getLastSaveFile());
          return j2p(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/pt/RSLPStemmerBase.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace pt {

          ::java::lang::Class *RSLPStemmerBase::class$ = NULL;
          jmethodID *RSLPStemmerBase::mids$ = NULL;
          bool RSLPStemmerBase::live$ = false;

          jclass RSLPStemmerBase::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/pt/RSLPStemmerBase");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_parse_7d2165b9] = env->getStaticMethodID(cls, "parse", "(Ljava/lang/Class;Ljava/lang/String;)Ljava/util/Map;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          RSLPStemmerBase::RSLPStemmerBase() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace pt {
          static PyObject *t_RSLPStemmerBase_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_RSLPStemmerBase_instance_(PyTypeObject *type, PyObject *arg);
          static int t_RSLPStemmerBase_init_(t_RSLPStemmerBase *self, PyObject *args, PyObject *kwds);

          static PyMethodDef t_RSLPStemmerBase__methods_[] = {
            DECLARE_METHOD(t_RSLPStemmerBase, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_RSLPStemmerBase, instance_, METH_O | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(RSLPStemmerBase, t_RSLPStemmerBase, ::java::lang::Object, RSLPStemmerBase, t_RSLPStemmerBase_init_, 0, 0, 0, 0, 0);

          void t_RSLPStemmerBase::install(PyObject *module)
          {
            installType(&PY_TYPE(RSLPStemmerBase), module, "RSLPStemmerBase", 0);
          }

          void t_RSLPStemmerBase::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(RSLPStemmerBase).tp_dict, "class_", make_descriptor(RSLPStemmerBase::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(RSLPStemmerBase).tp_dict, "wrapfn_", make_descriptor(t_RSLPStemmerBase::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(RSLPStemmerBase).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_RSLPStemmerBase_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, RSLPStemmerBase::initializeClass, 1)))
              return NULL;
            return t_RSLPStemmerBase::wrap_Object(RSLPStemmerBase(((t_RSLPStemmerBase *) arg)->object.this$));
          }
          static PyObject *t_RSLPStemmerBase_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, RSLPStemmerBase::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_RSLPStemmerBase_init_(t_RSLPStemmerBase *self, PyObject *args, PyObject *kwds)
          {
            RSLPStemmerBase object((jobject) NULL);

            INT_CALL(object = RSLPStemmerBase());
            self->object = object;

            return 0;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/surround/query/SimpleTerm.h"
#include "java/lang/Comparable.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/queryparser/surround/query/BasicQueryFactory.h"
#include "org/apache/lucene/queryparser/surround/query/DistanceSubQuery.h"
#include "java/io/IOException.h"
#include "java/lang/String.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "org/apache/lucene/queryparser/surround/query/SimpleTerm$MatchingTermVisitor.h"
#include "org/apache/lucene/queryparser/surround/query/SpanNearClauseFactory.h"
#include "org/apache/lucene/search/Query.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace surround {
          namespace query {

            ::java::lang::Class *SimpleTerm::class$ = NULL;
            jmethodID *SimpleTerm::mids$ = NULL;
            bool SimpleTerm::live$ = false;

            jclass SimpleTerm::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/surround/query/SimpleTerm");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_bb0c767f] = env->getMethodID(cls, "<init>", "(Z)V");
                mids$[mid_addSpanQueries_0564f431] = env->getMethodID(cls, "addSpanQueries", "(Lorg/apache/lucene/queryparser/surround/query/SpanNearClauseFactory;)V");
                mids$[mid_compareTo_a1a1be24] = env->getMethodID(cls, "compareTo", "(Lorg/apache/lucene/queryparser/surround/query/SimpleTerm;)I");
                mids$[mid_distanceSubQueryNotAllowed_14c7b5c5] = env->getMethodID(cls, "distanceSubQueryNotAllowed", "()Ljava/lang/String;");
                mids$[mid_getFieldOperator_14c7b5c5] = env->getMethodID(cls, "getFieldOperator", "()Ljava/lang/String;");
                mids$[mid_getQuote_14c7b5c5] = env->getMethodID(cls, "getQuote", "()Ljava/lang/String;");
                mids$[mid_makeLuceneQueryFieldNoBoost_1aaeee30] = env->getMethodID(cls, "makeLuceneQueryFieldNoBoost", "(Ljava/lang/String;Lorg/apache/lucene/queryparser/surround/query/BasicQueryFactory;)Lorg/apache/lucene/search/Query;");
                mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");
                mids$[mid_toStringUnquoted_14c7b5c5] = env->getMethodID(cls, "toStringUnquoted", "()Ljava/lang/String;");
                mids$[mid_visitMatchingTerms_330199a1] = env->getMethodID(cls, "visitMatchingTerms", "(Lorg/apache/lucene/index/IndexReader;Ljava/lang/String;Lorg/apache/lucene/queryparser/surround/query/SimpleTerm$MatchingTermVisitor;)V");
                mids$[mid_suffixToString_9f94ae34] = env->getMethodID(cls, "suffixToString", "(Ljava/lang/StringBuilder;)V");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            SimpleTerm::SimpleTerm(jboolean a0) : ::org::apache::lucene::queryparser::surround::query::SrndQuery(env->newObject(initializeClass, &mids$, mid_init$_bb0c767f, a0)) {}

            void SimpleTerm::addSpanQueries(const ::org::apache::lucene::queryparser::surround::query::SpanNearClauseFactory & a0) const
            {
              env->callVoidMethod(this$, mids$[mid_addSpanQueries_0564f431], a0.this$);
            }

            jint SimpleTerm::compareTo(const SimpleTerm & a0) const
            {
              return env->callIntMethod(this$, mids$[mid_compareTo_a1a1be24], a0.this$);
            }

            ::java::lang::String SimpleTerm::distanceSubQueryNotAllowed() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_distanceSubQueryNotAllowed_14c7b5c5]));
            }

            ::java::lang::String SimpleTerm::getFieldOperator() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getFieldOperator_14c7b5c5]));
            }

            ::java::lang::String SimpleTerm::getQuote() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getQuote_14c7b5c5]));
            }

            ::org::apache::lucene::search::Query SimpleTerm::makeLuceneQueryFieldNoBoost(const ::java::lang::String & a0, const ::org::apache::lucene::queryparser::surround::query::BasicQueryFactory & a1) const
            {
              return ::org::apache::lucene::search::Query(env->callObjectMethod(this$, mids$[mid_makeLuceneQueryFieldNoBoost_1aaeee30], a0.this$, a1.this$));
            }

            ::java::lang::String SimpleTerm::toString() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
            }

            ::java::lang::String SimpleTerm::toStringUnquoted() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toStringUnquoted_14c7b5c5]));
            }

            void SimpleTerm::visitMatchingTerms(const ::org::apache::lucene::index::IndexReader & a0, const ::java::lang::String & a1, const ::org::apache::lucene::queryparser::surround::query::SimpleTerm$MatchingTermVisitor & a2) const
            {
              env->callVoidMethod(this$, mids$[mid_visitMatchingTerms_330199a1], a0.this$, a1.this$, a2.this$);
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace surround {
          namespace query {
            static PyObject *t_SimpleTerm_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_SimpleTerm_instance_(PyTypeObject *type, PyObject *arg);
            static int t_SimpleTerm_init_(t_SimpleTerm *self, PyObject *args, PyObject *kwds);
            static PyObject *t_SimpleTerm_addSpanQueries(t_SimpleTerm *self, PyObject *arg);
            static PyObject *t_SimpleTerm_compareTo(t_SimpleTerm *self, PyObject *arg);
            static PyObject *t_SimpleTerm_distanceSubQueryNotAllowed(t_SimpleTerm *self);
            static PyObject *t_SimpleTerm_getFieldOperator(t_SimpleTerm *self);
            static PyObject *t_SimpleTerm_getQuote(t_SimpleTerm *self);
            static PyObject *t_SimpleTerm_makeLuceneQueryFieldNoBoost(t_SimpleTerm *self, PyObject *args);
            static PyObject *t_SimpleTerm_toString(t_SimpleTerm *self, PyObject *args);
            static PyObject *t_SimpleTerm_toStringUnquoted(t_SimpleTerm *self);
            static PyObject *t_SimpleTerm_visitMatchingTerms(t_SimpleTerm *self, PyObject *args);
            static PyObject *t_SimpleTerm_get__fieldOperator(t_SimpleTerm *self, void *data);
            static PyObject *t_SimpleTerm_get__quote(t_SimpleTerm *self, void *data);
            static PyGetSetDef t_SimpleTerm__fields_[] = {
              DECLARE_GET_FIELD(t_SimpleTerm, fieldOperator),
              DECLARE_GET_FIELD(t_SimpleTerm, quote),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_SimpleTerm__methods_[] = {
              DECLARE_METHOD(t_SimpleTerm, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_SimpleTerm, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_SimpleTerm, addSpanQueries, METH_O),
              DECLARE_METHOD(t_SimpleTerm, compareTo, METH_O),
              DECLARE_METHOD(t_SimpleTerm, distanceSubQueryNotAllowed, METH_NOARGS),
              DECLARE_METHOD(t_SimpleTerm, getFieldOperator, METH_NOARGS),
              DECLARE_METHOD(t_SimpleTerm, getQuote, METH_NOARGS),
              DECLARE_METHOD(t_SimpleTerm, makeLuceneQueryFieldNoBoost, METH_VARARGS),
              DECLARE_METHOD(t_SimpleTerm, toString, METH_VARARGS),
              DECLARE_METHOD(t_SimpleTerm, toStringUnquoted, METH_NOARGS),
              DECLARE_METHOD(t_SimpleTerm, visitMatchingTerms, METH_VARARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(SimpleTerm, t_SimpleTerm, ::org::apache::lucene::queryparser::surround::query::SrndQuery, SimpleTerm, t_SimpleTerm_init_, 0, 0, t_SimpleTerm__fields_, 0, 0);

            void t_SimpleTerm::install(PyObject *module)
            {
              installType(&PY_TYPE(SimpleTerm), module, "SimpleTerm", 0);
              PyDict_SetItemString(PY_TYPE(SimpleTerm).tp_dict, "MatchingTermVisitor", make_descriptor(&PY_TYPE(SimpleTerm$MatchingTermVisitor)));
            }

            void t_SimpleTerm::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(SimpleTerm).tp_dict, "class_", make_descriptor(SimpleTerm::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(SimpleTerm).tp_dict, "wrapfn_", make_descriptor(t_SimpleTerm::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(SimpleTerm).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_SimpleTerm_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, SimpleTerm::initializeClass, 1)))
                return NULL;
              return t_SimpleTerm::wrap_Object(SimpleTerm(((t_SimpleTerm *) arg)->object.this$));
            }
            static PyObject *t_SimpleTerm_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, SimpleTerm::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_SimpleTerm_init_(t_SimpleTerm *self, PyObject *args, PyObject *kwds)
            {
              jboolean a0;
              SimpleTerm object((jobject) NULL);

              if (!parseArgs(args, "Z", &a0))
              {
                INT_CALL(object = SimpleTerm(a0));
                self->object = object;
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_SimpleTerm_addSpanQueries(t_SimpleTerm *self, PyObject *arg)
            {
              ::org::apache::lucene::queryparser::surround::query::SpanNearClauseFactory a0((jobject) NULL);

              if (!parseArg(arg, "k", ::org::apache::lucene::queryparser::surround::query::SpanNearClauseFactory::initializeClass, &a0))
              {
                OBJ_CALL(self->object.addSpanQueries(a0));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "addSpanQueries", arg);
              return NULL;
            }

            static PyObject *t_SimpleTerm_compareTo(t_SimpleTerm *self, PyObject *arg)
            {
              SimpleTerm a0((jobject) NULL);
              jint result;

              if (!parseArg(arg, "k", SimpleTerm::initializeClass, &a0))
              {
                OBJ_CALL(result = self->object.compareTo(a0));
                return PyInt_FromLong((long) result);
              }

              PyErr_SetArgsError((PyObject *) self, "compareTo", arg);
              return NULL;
            }

            static PyObject *t_SimpleTerm_distanceSubQueryNotAllowed(t_SimpleTerm *self)
            {
              ::java::lang::String result((jobject) NULL);
              OBJ_CALL(result = self->object.distanceSubQueryNotAllowed());
              return j2p(result);
            }

            static PyObject *t_SimpleTerm_getFieldOperator(t_SimpleTerm *self)
            {
              ::java::lang::String result((jobject) NULL);
              OBJ_CALL(result = self->object.getFieldOperator());
              return j2p(result);
            }

            static PyObject *t_SimpleTerm_getQuote(t_SimpleTerm *self)
            {
              ::java::lang::String result((jobject) NULL);
              OBJ_CALL(result = self->object.getQuote());
              return j2p(result);
            }

            static PyObject *t_SimpleTerm_makeLuceneQueryFieldNoBoost(t_SimpleTerm *self, PyObject *args)
            {
              ::java::lang::String a0((jobject) NULL);
              ::org::apache::lucene::queryparser::surround::query::BasicQueryFactory a1((jobject) NULL);
              ::org::apache::lucene::search::Query result((jobject) NULL);

              if (!parseArgs(args, "sk", ::org::apache::lucene::queryparser::surround::query::BasicQueryFactory::initializeClass, &a0, &a1))
              {
                OBJ_CALL(result = self->object.makeLuceneQueryFieldNoBoost(a0, a1));
                return ::org::apache::lucene::search::t_Query::wrap_Object(result);
              }

              return callSuper(&PY_TYPE(SimpleTerm), (PyObject *) self, "makeLuceneQueryFieldNoBoost", args, 2);
            }

            static PyObject *t_SimpleTerm_toString(t_SimpleTerm *self, PyObject *args)
            {
              ::java::lang::String result((jobject) NULL);

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.toString());
                return j2p(result);
              }

              return callSuper(&PY_TYPE(SimpleTerm), (PyObject *) self, "toString", args, 2);
            }

            static PyObject *t_SimpleTerm_toStringUnquoted(t_SimpleTerm *self)
            {
              ::java::lang::String result((jobject) NULL);
              OBJ_CALL(result = self->object.toStringUnquoted());
              return j2p(result);
            }

            static PyObject *t_SimpleTerm_visitMatchingTerms(t_SimpleTerm *self, PyObject *args)
            {
              ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
              ::java::lang::String a1((jobject) NULL);
              ::org::apache::lucene::queryparser::surround::query::SimpleTerm$MatchingTermVisitor a2((jobject) NULL);

              if (!parseArgs(args, "ksk", ::org::apache::lucene::index::IndexReader::initializeClass, ::org::apache::lucene::queryparser::surround::query::SimpleTerm$MatchingTermVisitor::initializeClass, &a0, &a1, &a2))
              {
                OBJ_CALL(self->object.visitMatchingTerms(a0, a1, a2));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "visitMatchingTerms", args);
              return NULL;
            }

            static PyObject *t_SimpleTerm_get__fieldOperator(t_SimpleTerm *self, void *data)
            {
              ::java::lang::String value((jobject) NULL);
              OBJ_CALL(value = self->object.getFieldOperator());
              return j2p(value);
            }

            static PyObject *t_SimpleTerm_get__quote(t_SimpleTerm *self, void *data)
            {
              ::java::lang::String value((jobject) NULL);
              OBJ_CALL(value = self->object.getQuote());
              return j2p(value);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/tartarus/snowball/ext/RussianStemmer.h"
#include "java/lang/Object.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace tartarus {
    namespace snowball {
      namespace ext {

        ::java::lang::Class *RussianStemmer::class$ = NULL;
        jmethodID *RussianStemmer::mids$ = NULL;
        bool RussianStemmer::live$ = false;

        jclass RussianStemmer::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/tartarus/snowball/ext/RussianStemmer");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
            mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
            mids$[mid_stem_54c6a16a] = env->getMethodID(cls, "stem", "()Z");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        RussianStemmer::RussianStemmer() : ::org::tartarus::snowball::SnowballProgram(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        jboolean RussianStemmer::equals(const ::java::lang::Object & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
        }

        jint RussianStemmer::hashCode() const
        {
          return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
        }

        jboolean RussianStemmer::stem() const
        {
          return env->callBooleanMethod(this$, mids$[mid_stem_54c6a16a]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace tartarus {
    namespace snowball {
      namespace ext {
        static PyObject *t_RussianStemmer_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_RussianStemmer_instance_(PyTypeObject *type, PyObject *arg);
        static int t_RussianStemmer_init_(t_RussianStemmer *self, PyObject *args, PyObject *kwds);
        static PyObject *t_RussianStemmer_equals(t_RussianStemmer *self, PyObject *args);
        static PyObject *t_RussianStemmer_hashCode(t_RussianStemmer *self, PyObject *args);
        static PyObject *t_RussianStemmer_stem(t_RussianStemmer *self, PyObject *args);

        static PyMethodDef t_RussianStemmer__methods_[] = {
          DECLARE_METHOD(t_RussianStemmer, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_RussianStemmer, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_RussianStemmer, equals, METH_VARARGS),
          DECLARE_METHOD(t_RussianStemmer, hashCode, METH_VARARGS),
          DECLARE_METHOD(t_RussianStemmer, stem, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(RussianStemmer, t_RussianStemmer, ::org::tartarus::snowball::SnowballProgram, RussianStemmer, t_RussianStemmer_init_, 0, 0, 0, 0, 0);

        void t_RussianStemmer::install(PyObject *module)
        {
          installType(&PY_TYPE(RussianStemmer), module, "RussianStemmer", 0);
        }

        void t_RussianStemmer::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(RussianStemmer).tp_dict, "class_", make_descriptor(RussianStemmer::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(RussianStemmer).tp_dict, "wrapfn_", make_descriptor(t_RussianStemmer::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(RussianStemmer).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_RussianStemmer_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, RussianStemmer::initializeClass, 1)))
            return NULL;
          return t_RussianStemmer::wrap_Object(RussianStemmer(((t_RussianStemmer *) arg)->object.this$));
        }
        static PyObject *t_RussianStemmer_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, RussianStemmer::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_RussianStemmer_init_(t_RussianStemmer *self, PyObject *args, PyObject *kwds)
        {
          RussianStemmer object((jobject) NULL);

          INT_CALL(object = RussianStemmer());
          self->object = object;

          return 0;
        }

        static PyObject *t_RussianStemmer_equals(t_RussianStemmer *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.equals(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(RussianStemmer), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_RussianStemmer_hashCode(t_RussianStemmer *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hashCode());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(RussianStemmer), (PyObject *) self, "hashCode", args, 2);
        }

        static PyObject *t_RussianStemmer_stem(t_RussianStemmer *self, PyObject *args)
        {
          jboolean result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.stem());
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(RussianStemmer), (PyObject *) self, "stem", args, 2);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/MultiTermQueryWrapperFilter.h"
#include "org/apache/lucene/util/Bits.h"
#include "java/lang/Class.h"
#include "java/lang/Object.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/search/DocIdSet.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *MultiTermQueryWrapperFilter::class$ = NULL;
        jmethodID *MultiTermQueryWrapperFilter::mids$ = NULL;
        bool MultiTermQueryWrapperFilter::live$ = false;

        jclass MultiTermQueryWrapperFilter::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/MultiTermQueryWrapperFilter");

            mids$ = new jmethodID[max_mid];
            mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
            mids$[mid_getDocIdSet_ccce0897] = env->getMethodID(cls, "getDocIdSet", "(Lorg/apache/lucene/index/AtomicReaderContext;Lorg/apache/lucene/util/Bits;)Lorg/apache/lucene/search/DocIdSet;");
            mids$[mid_getField_14c7b5c5] = env->getMethodID(cls, "getField", "()Ljava/lang/String;");
            mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
            mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        jboolean MultiTermQueryWrapperFilter::equals(const ::java::lang::Object & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
        }

        ::org::apache::lucene::search::DocIdSet MultiTermQueryWrapperFilter::getDocIdSet(const ::org::apache::lucene::index::AtomicReaderContext & a0, const ::org::apache::lucene::util::Bits & a1) const
        {
          return ::org::apache::lucene::search::DocIdSet(env->callObjectMethod(this$, mids$[mid_getDocIdSet_ccce0897], a0.this$, a1.this$));
        }

        ::java::lang::String MultiTermQueryWrapperFilter::getField() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getField_14c7b5c5]));
        }

        jint MultiTermQueryWrapperFilter::hashCode() const
        {
          return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
        }

        ::java::lang::String MultiTermQueryWrapperFilter::toString() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_MultiTermQueryWrapperFilter_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_MultiTermQueryWrapperFilter_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_MultiTermQueryWrapperFilter_of_(t_MultiTermQueryWrapperFilter *self, PyObject *args);
        static PyObject *t_MultiTermQueryWrapperFilter_equals(t_MultiTermQueryWrapperFilter *self, PyObject *args);
        static PyObject *t_MultiTermQueryWrapperFilter_getDocIdSet(t_MultiTermQueryWrapperFilter *self, PyObject *args);
        static PyObject *t_MultiTermQueryWrapperFilter_getField(t_MultiTermQueryWrapperFilter *self);
        static PyObject *t_MultiTermQueryWrapperFilter_hashCode(t_MultiTermQueryWrapperFilter *self, PyObject *args);
        static PyObject *t_MultiTermQueryWrapperFilter_toString(t_MultiTermQueryWrapperFilter *self, PyObject *args);
        static PyObject *t_MultiTermQueryWrapperFilter_get__field(t_MultiTermQueryWrapperFilter *self, void *data);
        static PyObject *t_MultiTermQueryWrapperFilter_get__parameters_(t_MultiTermQueryWrapperFilter *self, void *data);
        static PyGetSetDef t_MultiTermQueryWrapperFilter__fields_[] = {
          DECLARE_GET_FIELD(t_MultiTermQueryWrapperFilter, field),
          DECLARE_GET_FIELD(t_MultiTermQueryWrapperFilter, parameters_),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_MultiTermQueryWrapperFilter__methods_[] = {
          DECLARE_METHOD(t_MultiTermQueryWrapperFilter, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MultiTermQueryWrapperFilter, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MultiTermQueryWrapperFilter, of_, METH_VARARGS),
          DECLARE_METHOD(t_MultiTermQueryWrapperFilter, equals, METH_VARARGS),
          DECLARE_METHOD(t_MultiTermQueryWrapperFilter, getDocIdSet, METH_VARARGS),
          DECLARE_METHOD(t_MultiTermQueryWrapperFilter, getField, METH_NOARGS),
          DECLARE_METHOD(t_MultiTermQueryWrapperFilter, hashCode, METH_VARARGS),
          DECLARE_METHOD(t_MultiTermQueryWrapperFilter, toString, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(MultiTermQueryWrapperFilter, t_MultiTermQueryWrapperFilter, ::org::apache::lucene::search::Filter, MultiTermQueryWrapperFilter, abstract_init, 0, 0, t_MultiTermQueryWrapperFilter__fields_, 0, 0);
        PyObject *t_MultiTermQueryWrapperFilter::wrap_Object(const MultiTermQueryWrapperFilter& object, PyTypeObject *p0)
        {
          PyObject *obj = t_MultiTermQueryWrapperFilter::wrap_Object(object);
          if (obj != NULL && obj != Py_None)
          {
            t_MultiTermQueryWrapperFilter *self = (t_MultiTermQueryWrapperFilter *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        PyObject *t_MultiTermQueryWrapperFilter::wrap_jobject(const jobject& object, PyTypeObject *p0)
        {
          PyObject *obj = t_MultiTermQueryWrapperFilter::wrap_jobject(object);
          if (obj != NULL && obj != Py_None)
          {
            t_MultiTermQueryWrapperFilter *self = (t_MultiTermQueryWrapperFilter *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        void t_MultiTermQueryWrapperFilter::install(PyObject *module)
        {
          installType(&PY_TYPE(MultiTermQueryWrapperFilter), module, "MultiTermQueryWrapperFilter", 0);
        }

        void t_MultiTermQueryWrapperFilter::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(MultiTermQueryWrapperFilter).tp_dict, "class_", make_descriptor(MultiTermQueryWrapperFilter::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(MultiTermQueryWrapperFilter).tp_dict, "wrapfn_", make_descriptor(t_MultiTermQueryWrapperFilter::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(MultiTermQueryWrapperFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_MultiTermQueryWrapperFilter_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, MultiTermQueryWrapperFilter::initializeClass, 1)))
            return NULL;
          return t_MultiTermQueryWrapperFilter::wrap_Object(MultiTermQueryWrapperFilter(((t_MultiTermQueryWrapperFilter *) arg)->object.this$));
        }
        static PyObject *t_MultiTermQueryWrapperFilter_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, MultiTermQueryWrapperFilter::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_MultiTermQueryWrapperFilter_of_(t_MultiTermQueryWrapperFilter *self, PyObject *args)
        {
          if (!parseArg(args, "T", 1, &(self->parameters)))
            Py_RETURN_SELF;
          return PyErr_SetArgsError((PyObject *) self, "of_", args);
        }

        static PyObject *t_MultiTermQueryWrapperFilter_equals(t_MultiTermQueryWrapperFilter *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.equals(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(MultiTermQueryWrapperFilter), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_MultiTermQueryWrapperFilter_getDocIdSet(t_MultiTermQueryWrapperFilter *self, PyObject *args)
        {
          ::org::apache::lucene::index::AtomicReaderContext a0((jobject) NULL);
          ::org::apache::lucene::util::Bits a1((jobject) NULL);
          ::org::apache::lucene::search::DocIdSet result((jobject) NULL);

          if (!parseArgs(args, "kk", ::org::apache::lucene::index::AtomicReaderContext::initializeClass, ::org::apache::lucene::util::Bits::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = self->object.getDocIdSet(a0, a1));
            return ::org::apache::lucene::search::t_DocIdSet::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(MultiTermQueryWrapperFilter), (PyObject *) self, "getDocIdSet", args, 2);
        }

        static PyObject *t_MultiTermQueryWrapperFilter_getField(t_MultiTermQueryWrapperFilter *self)
        {
          ::java::lang::String result((jobject) NULL);
          OBJ_CALL(result = self->object.getField());
          return j2p(result);
        }

        static PyObject *t_MultiTermQueryWrapperFilter_hashCode(t_MultiTermQueryWrapperFilter *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hashCode());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(MultiTermQueryWrapperFilter), (PyObject *) self, "hashCode", args, 2);
        }

        static PyObject *t_MultiTermQueryWrapperFilter_toString(t_MultiTermQueryWrapperFilter *self, PyObject *args)
        {
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.toString());
            return j2p(result);
          }

          return callSuper(&PY_TYPE(MultiTermQueryWrapperFilter), (PyObject *) self, "toString", args, 2);
        }
        static PyObject *t_MultiTermQueryWrapperFilter_get__parameters_(t_MultiTermQueryWrapperFilter *self, void *data)
        {
          return typeParameters(self->parameters, sizeof(self->parameters));
        }

        static PyObject *t_MultiTermQueryWrapperFilter_get__field(t_MultiTermQueryWrapperFilter *self, void *data)
        {
          ::java::lang::String value((jobject) NULL);
          OBJ_CALL(value = self->object.getField());
          return j2p(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/suggest/fst/ExternalRefSorter.h"
#include "java/io/Closeable.h"
#include "org/apache/lucene/search/suggest/fst/BytesRefSorter.h"
#include "org/apache/lucene/util/BytesRefIterator.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "org/apache/lucene/util/OfflineSorter.h"
#include "java/io/IOException.h"
#include "java/util/Comparator.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace suggest {
          namespace fst {

            ::java::lang::Class *ExternalRefSorter::class$ = NULL;
            jmethodID *ExternalRefSorter::mids$ = NULL;
            bool ExternalRefSorter::live$ = false;

            jclass ExternalRefSorter::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/search/suggest/fst/ExternalRefSorter");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_6859decd] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/OfflineSorter;)V");
                mids$[mid_add_7bc03dc4] = env->getMethodID(cls, "add", "(Lorg/apache/lucene/util/BytesRef;)V");
                mids$[mid_close_54c6a166] = env->getMethodID(cls, "close", "()V");
                mids$[mid_getComparator_5a7ff2fc] = env->getMethodID(cls, "getComparator", "()Ljava/util/Comparator;");
                mids$[mid_iterator_534dea83] = env->getMethodID(cls, "iterator", "()Lorg/apache/lucene/util/BytesRefIterator;");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            ExternalRefSorter::ExternalRefSorter(const ::org::apache::lucene::util::OfflineSorter & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_6859decd, a0.this$)) {}

            void ExternalRefSorter::add(const ::org::apache::lucene::util::BytesRef & a0) const
            {
              env->callVoidMethod(this$, mids$[mid_add_7bc03dc4], a0.this$);
            }

            void ExternalRefSorter::close() const
            {
              env->callVoidMethod(this$, mids$[mid_close_54c6a166]);
            }

            ::java::util::Comparator ExternalRefSorter::getComparator() const
            {
              return ::java::util::Comparator(env->callObjectMethod(this$, mids$[mid_getComparator_5a7ff2fc]));
            }

            ::org::apache::lucene::util::BytesRefIterator ExternalRefSorter::iterator() const
            {
              return ::org::apache::lucene::util::BytesRefIterator(env->callObjectMethod(this$, mids$[mid_iterator_534dea83]));
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace suggest {
          namespace fst {
            static PyObject *t_ExternalRefSorter_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_ExternalRefSorter_instance_(PyTypeObject *type, PyObject *arg);
            static int t_ExternalRefSorter_init_(t_ExternalRefSorter *self, PyObject *args, PyObject *kwds);
            static PyObject *t_ExternalRefSorter_add(t_ExternalRefSorter *self, PyObject *arg);
            static PyObject *t_ExternalRefSorter_close(t_ExternalRefSorter *self);
            static PyObject *t_ExternalRefSorter_getComparator(t_ExternalRefSorter *self);
            static PyObject *t_ExternalRefSorter_iterator(t_ExternalRefSorter *self);
            static PyObject *t_ExternalRefSorter_get__comparator(t_ExternalRefSorter *self, void *data);
            static PyGetSetDef t_ExternalRefSorter__fields_[] = {
              DECLARE_GET_FIELD(t_ExternalRefSorter, comparator),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_ExternalRefSorter__methods_[] = {
              DECLARE_METHOD(t_ExternalRefSorter, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_ExternalRefSorter, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_ExternalRefSorter, add, METH_O),
              DECLARE_METHOD(t_ExternalRefSorter, close, METH_NOARGS),
              DECLARE_METHOD(t_ExternalRefSorter, getComparator, METH_NOARGS),
              DECLARE_METHOD(t_ExternalRefSorter, iterator, METH_NOARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(ExternalRefSorter, t_ExternalRefSorter, ::java::lang::Object, ExternalRefSorter, t_ExternalRefSorter_init_, 0, 0, t_ExternalRefSorter__fields_, 0, 0);

            void t_ExternalRefSorter::install(PyObject *module)
            {
              installType(&PY_TYPE(ExternalRefSorter), module, "ExternalRefSorter", 0);
            }

            void t_ExternalRefSorter::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(ExternalRefSorter).tp_dict, "class_", make_descriptor(ExternalRefSorter::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(ExternalRefSorter).tp_dict, "wrapfn_", make_descriptor(t_ExternalRefSorter::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(ExternalRefSorter).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_ExternalRefSorter_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, ExternalRefSorter::initializeClass, 1)))
                return NULL;
              return t_ExternalRefSorter::wrap_Object(ExternalRefSorter(((t_ExternalRefSorter *) arg)->object.this$));
            }
            static PyObject *t_ExternalRefSorter_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, ExternalRefSorter::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_ExternalRefSorter_init_(t_ExternalRefSorter *self, PyObject *args, PyObject *kwds)
            {
              ::org::apache::lucene::util::OfflineSorter a0((jobject) NULL);
              ExternalRefSorter object((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::util::OfflineSorter::initializeClass, &a0))
              {
                INT_CALL(object = ExternalRefSorter(a0));
                self->object = object;
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_ExternalRefSorter_add(t_ExternalRefSorter *self, PyObject *arg)
            {
              ::org::apache::lucene::util::BytesRef a0((jobject) NULL);

              if (!parseArg(arg, "k", ::org::apache::lucene::util::BytesRef::initializeClass, &a0))
              {
                OBJ_CALL(self->object.add(a0));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "add", arg);
              return NULL;
            }

            static PyObject *t_ExternalRefSorter_close(t_ExternalRefSorter *self)
            {
              OBJ_CALL(self->object.close());
              Py_RETURN_NONE;
            }

            static PyObject *t_ExternalRefSorter_getComparator(t_ExternalRefSorter *self)
            {
              ::java::util::Comparator result((jobject) NULL);
              OBJ_CALL(result = self->object.getComparator());
              return ::java::util::t_Comparator::wrap_Object(result, &::org::apache::lucene::util::PY_TYPE(BytesRef));
            }

            static PyObject *t_ExternalRefSorter_iterator(t_ExternalRefSorter *self)
            {
              ::org::apache::lucene::util::BytesRefIterator result((jobject) NULL);
              OBJ_CALL(result = self->object.iterator());
              return ::org::apache::lucene::util::t_BytesRefIterator::wrap_Object(result);
            }

            static PyObject *t_ExternalRefSorter_get__comparator(t_ExternalRefSorter *self, void *data)
            {
              ::java::util::Comparator value((jobject) NULL);
              OBJ_CALL(value = self->object.getComparator());
              return ::java::util::t_Comparator::wrap_Object(value);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "java/lang/Long.h"
#include "java/lang/Comparable.h"
#include "java/lang/Class.h"
#include "java/lang/Object.h"
#include "java/lang/String.h"
#include "java/lang/NumberFormatException.h"
#include "JArray.h"

namespace java {
  namespace lang {

    ::java::lang::Class *Long::class$ = NULL;
    jmethodID *Long::mids$ = NULL;
    bool Long::live$ = false;
    jint Long::BYTES = (jint) 0;
    jlong Long::MAX_VALUE = (jlong) 0;
    jlong Long::MIN_VALUE = (jlong) 0;
    jint Long::SIZE = (jint) 0;
    ::java::lang::Class *Long::TYPE = NULL;

    jclass Long::initializeClass(bool getOnly)
    {
      if (getOnly)
        return (jclass) (live$ ? class$->this$ : NULL);
      if (class$ == NULL)
      {
        jclass cls = (jclass) env->findClass("java/lang/Long");

        mids$ = new jmethodID[max_mid];
        mids$[mid_init$_0ee6df2f] = env->getMethodID(cls, "<init>", "(J)V");
        mids$[mid_init$_5fdc3f48] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;)V");
        mids$[mid_bitCount_0ee6df30] = env->getStaticMethodID(cls, "bitCount", "(J)I");
        mids$[mid_byteValue_54c6a172] = env->getMethodID(cls, "byteValue", "()B");
        mids$[mid_compare_a7e12cbb] = env->getStaticMethodID(cls, "compare", "(JJ)I");
        mids$[mid_compareTo_da55802e] = env->getMethodID(cls, "compareTo", "(Ljava/lang/Long;)I");
        mids$[mid_compareUnsigned_a7e12cbb] = env->getStaticMethodID(cls, "compareUnsigned", "(JJ)I");
        mids$[mid_decode_ee9f94be] = env->getStaticMethodID(cls, "decode", "(Ljava/lang/String;)Ljava/lang/Long;");
        mids$[mid_divideUnsigned_a7e12cb8] = env->getStaticMethodID(cls, "divideUnsigned", "(JJ)J");
        mids$[mid_doubleValue_54c6a174] = env->getMethodID(cls, "doubleValue", "()D");
        mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
        mids$[mid_floatValue_54c6a176] = env->getMethodID(cls, "floatValue", "()F");
        mids$[mid_getLong_ee9f94be] = env->getStaticMethodID(cls, "getLong", "(Ljava/lang/String;)Ljava/lang/Long;");
        mids$[mid_getLong_9f081a1d] = env->getStaticMethodID(cls, "getLong", "(Ljava/lang/String;J)Ljava/lang/Long;");
        mids$[mid_getLong_9a12142f] = env->getStaticMethodID(cls, "getLong", "(Ljava/lang/String;Ljava/lang/Long;)Ljava/lang/Long;");
        mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
        mids$[mid_hashCode_0ee6df30] = env->getStaticMethodID(cls, "hashCode", "(J)I");
        mids$[mid_highestOneBit_0ee6df33] = env->getStaticMethodID(cls, "highestOneBit", "(J)J");
        mids$[mid_intValue_54c6a179] = env->getMethodID(cls, "intValue", "()I");
        mids$[mid_longValue_54c6a17a] = env->getMethodID(cls, "longValue", "()J");
        mids$[mid_lowestOneBit_0ee6df33] = env->getStaticMethodID(cls, "lowestOneBit", "(J)J");
        mids$[mid_max_a7e12cb8] = env->getStaticMethodID(cls, "max", "(JJ)J");
        mids$[mid_min_a7e12cb8] = env->getStaticMethodID(cls, "min", "(JJ)J");
        mids$[mid_numberOfLeadingZeros_0ee6df30] = env->getStaticMethodID(cls, "numberOfLeadingZeros", "(J)I");
        mids$[mid_numberOfTrailingZeros_0ee6df30] = env->getStaticMethodID(cls, "numberOfTrailingZeros", "(J)I");
        mids$[mid_parseLong_5fdc3f54] = env->getStaticMethodID(cls, "parseLong", "(Ljava/lang/String;)J");
        mids$[mid_parseLong_6e53ccda] = env->getStaticMethodID(cls, "parseLong", "(Ljava/lang/String;I)J");
        mids$[mid_parseUnsignedLong_5fdc3f54] = env->getStaticMethodID(cls, "parseUnsignedLong", "(Ljava/lang/String;)J");
        mids$[mid_parseUnsignedLong_6e53ccda] = env->getStaticMethodID(cls, "parseUnsignedLong", "(Ljava/lang/String;I)J");
        mids$[mid_remainderUnsigned_a7e12cb8] = env->getStaticMethodID(cls, "remainderUnsigned", "(JJ)J");
        mids$[mid_reverse_0ee6df33] = env->getStaticMethodID(cls, "reverse", "(J)J");
        mids$[mid_reverseBytes_0ee6df33] = env->getStaticMethodID(cls, "reverseBytes", "(J)J");
        mids$[mid_rotateLeft_25d05c93] = env->getStaticMethodID(cls, "rotateLeft", "(JI)J");
        mids$[mid_rotateRight_25d05c93] = env->getStaticMethodID(cls, "rotateRight", "(JI)J");
        mids$[mid_shortValue_54c6a163] = env->getMethodID(cls, "shortValue", "()S");
        mids$[mid_signum_0ee6df30] = env->getStaticMethodID(cls, "signum", "(J)I");
        mids$[mid_sum_a7e12cb8] = env->getStaticMethodID(cls, "sum", "(JJ)J");
        mids$[mid_toBinaryString_3e02f30e] = env->getStaticMethodID(cls, "toBinaryString", "(J)Ljava/lang/String;");
        mids$[mid_toHexString_3e02f30e] = env->getStaticMethodID(cls, "toHexString", "(J)Ljava/lang/String;");
        mids$[mid_toOctalString_3e02f30e] = env->getStaticMethodID(cls, "toOctalString", "(J)Ljava/lang/String;");
        mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");
        mids$[mid_toString_3e02f30e] = env->getStaticMethodID(cls, "toString", "(J)Ljava/lang/String;");
        mids$[mid_toString_36a2b01a] = env->getStaticMethodID(cls, "toString", "(JI)Ljava/lang/String;");
        mids$[mid_toUnsignedString_3e02f30e] = env->getStaticMethodID(cls, "toUnsignedString", "(J)Ljava/lang/String;");
        mids$[mid_toUnsignedString_36a2b01a] = env->getStaticMethodID(cls, "toUnsignedString", "(JI)Ljava/lang/String;");
        mids$[mid_valueOf_62a69723] = env->getStaticMethodID(cls, "valueOf", "(J)Ljava/lang/Long;");
        mids$[mid_valueOf_ee9f94be] = env->getStaticMethodID(cls, "valueOf", "(Ljava/lang/String;)Ljava/lang/Long;");
        mids$[mid_valueOf_212f058c] = env->getStaticMethodID(cls, "valueOf", "(Ljava/lang/String;I)Ljava/lang/Long;");

        class$ = (::java::lang::Class *) new JObject(cls);
        cls = (jclass) class$->this$;

        BYTES = env->getStaticIntField(cls, "BYTES");
        MAX_VALUE = env->getStaticLongField(cls, "MAX_VALUE");
        MIN_VALUE = env->getStaticLongField(cls, "MIN_VALUE");
        SIZE = env->getStaticIntField(cls, "SIZE");
        TYPE = new ::java::lang::Class(env->getStaticObjectField(cls, "TYPE", "Ljava/lang/Class;"));
        live$ = true;
      }
      return (jclass) class$->this$;
    }

    Long::Long(jlong a0) : ::java::lang::Number(env->newObject(initializeClass, &mids$, mid_init$_0ee6df2f, a0)) {}

    Long::Long(const ::java::lang::String & a0) : ::java::lang::Number(env->newObject(initializeClass, &mids$, mid_init$_5fdc3f48, a0.this$)) {}

    jint Long::bitCount(jlong a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_bitCount_0ee6df30], a0);
    }

    jbyte Long::byteValue() const
    {
      return env->callByteMethod(this$, mids$[mid_byteValue_54c6a172]);
    }

    jint Long::compare(jlong a0, jlong a1)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_compare_a7e12cbb], a0, a1);
    }

    jint Long::compareTo(const Long & a0) const
    {
      return env->callIntMethod(this$, mids$[mid_compareTo_da55802e], a0.this$);
    }

    jint Long::compareUnsigned(jlong a0, jlong a1)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_compareUnsigned_a7e12cbb], a0, a1);
    }

    Long Long::decode(const ::java::lang::String & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return Long(env->callStaticObjectMethod(cls, mids$[mid_decode_ee9f94be], a0.this$));
    }

    jlong Long::divideUnsigned(jlong a0, jlong a1)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticLongMethod(cls, mids$[mid_divideUnsigned_a7e12cb8], a0, a1);
    }

    jdouble Long::doubleValue() const
    {
      return env->callDoubleMethod(this$, mids$[mid_doubleValue_54c6a174]);
    }

    jboolean Long::equals(const ::java::lang::Object & a0) const
    {
      return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
    }

    jfloat Long::floatValue() const
    {
      return env->callFloatMethod(this$, mids$[mid_floatValue_54c6a176]);
    }

    Long Long::getLong(const ::java::lang::String & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return Long(env->callStaticObjectMethod(cls, mids$[mid_getLong_ee9f94be], a0.this$));
    }

    Long Long::getLong(const ::java::lang::String & a0, jlong a1)
    {
      jclass cls = env->getClass(initializeClass);
      return Long(env->callStaticObjectMethod(cls, mids$[mid_getLong_9f081a1d], a0.this$, a1));
    }

    Long Long::getLong(const ::java::lang::String & a0, const Long & a1)
    {
      jclass cls = env->getClass(initializeClass);
      return Long(env->callStaticObjectMethod(cls, mids$[mid_getLong_9a12142f], a0.this$, a1.this$));
    }

    jint Long::hashCode() const
    {
      return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
    }

    jint Long::hashCode(jlong a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_hashCode_0ee6df30], a0);
    }

    jlong Long::highestOneBit(jlong a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticLongMethod(cls, mids$[mid_highestOneBit_0ee6df33], a0);
    }

    jint Long::intValue() const
    {
      return env->callIntMethod(this$, mids$[mid_intValue_54c6a179]);
    }

    jlong Long::longValue() const
    {
      return env->callLongMethod(this$, mids$[mid_longValue_54c6a17a]);
    }

    jlong Long::lowestOneBit(jlong a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticLongMethod(cls, mids$[mid_lowestOneBit_0ee6df33], a0);
    }

    jlong Long::max$(jlong a0, jlong a1)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticLongMethod(cls, mids$[mid_max_a7e12cb8], a0, a1);
    }

    jlong Long::min$(jlong a0, jlong a1)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticLongMethod(cls, mids$[mid_min_a7e12cb8], a0, a1);
    }

    jint Long::numberOfLeadingZeros(jlong a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_numberOfLeadingZeros_0ee6df30], a0);
    }

    jint Long::numberOfTrailingZeros(jlong a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_numberOfTrailingZeros_0ee6df30], a0);
    }

    jlong Long::parseLong(const ::java::lang::String & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticLongMethod(cls, mids$[mid_parseLong_5fdc3f54], a0.this$);
    }

    jlong Long::parseLong(const ::java::lang::String & a0, jint a1)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticLongMethod(cls, mids$[mid_parseLong_6e53ccda], a0.this$, a1);
    }

    jlong Long::parseUnsignedLong(const ::java::lang::String & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticLongMethod(cls, mids$[mid_parseUnsignedLong_5fdc3f54], a0.this$);
    }

    jlong Long::parseUnsignedLong(const ::java::lang::String & a0, jint a1)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticLongMethod(cls, mids$[mid_parseUnsignedLong_6e53ccda], a0.this$, a1);
    }

    jlong Long::remainderUnsigned(jlong a0, jlong a1)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticLongMethod(cls, mids$[mid_remainderUnsigned_a7e12cb8], a0, a1);
    }

    jlong Long::reverse(jlong a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticLongMethod(cls, mids$[mid_reverse_0ee6df33], a0);
    }

    jlong Long::reverseBytes(jlong a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticLongMethod(cls, mids$[mid_reverseBytes_0ee6df33], a0);
    }

    jlong Long::rotateLeft(jlong a0, jint a1)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticLongMethod(cls, mids$[mid_rotateLeft_25d05c93], a0, a1);
    }

    jlong Long::rotateRight(jlong a0, jint a1)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticLongMethod(cls, mids$[mid_rotateRight_25d05c93], a0, a1);
    }

    jshort Long::shortValue() const
    {
      return env->callShortMethod(this$, mids$[mid_shortValue_54c6a163]);
    }

    jint Long::signum(jlong a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_signum_0ee6df30], a0);
    }

    jlong Long::sum(jlong a0, jlong a1)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticLongMethod(cls, mids$[mid_sum_a7e12cb8], a0, a1);
    }

    ::java::lang::String Long::toBinaryString(jlong a0)
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::lang::String(env->callStaticObjectMethod(cls, mids$[mid_toBinaryString_3e02f30e], a0));
    }

    ::java::lang::String Long::toHexString(jlong a0)
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::lang::String(env->callStaticObjectMethod(cls, mids$[mid_toHexString_3e02f30e], a0));
    }

    ::java::lang::String Long::toOctalString(jlong a0)
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::lang::String(env->callStaticObjectMethod(cls, mids$[mid_toOctalString_3e02f30e], a0));
    }

    ::java::lang::String Long::toString() const
    {
      return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
    }

    ::java::lang::String Long::toString(jlong a0)
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::lang::String(env->callStaticObjectMethod(cls, mids$[mid_toString_3e02f30e], a0));
    }

    ::java::lang::String Long::toString(jlong a0, jint a1)
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::lang::String(env->callStaticObjectMethod(cls, mids$[mid_toString_36a2b01a], a0, a1));
    }

    ::java::lang::String Long::toUnsignedString(jlong a0)
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::lang::String(env->callStaticObjectMethod(cls, mids$[mid_toUnsignedString_3e02f30e], a0));
    }

    ::java::lang::String Long::toUnsignedString(jlong a0, jint a1)
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::lang::String(env->callStaticObjectMethod(cls, mids$[mid_toUnsignedString_36a2b01a], a0, a1));
    }

    Long Long::valueOf(jlong a0)
    {
      jclass cls = env->getClass(initializeClass);
      return Long(env->callStaticObjectMethod(cls, mids$[mid_valueOf_62a69723], a0));
    }

    Long Long::valueOf(const ::java::lang::String & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return Long(env->callStaticObjectMethod(cls, mids$[mid_valueOf_ee9f94be], a0.this$));
    }

    Long Long::valueOf(const ::java::lang::String & a0, jint a1)
    {
      jclass cls = env->getClass(initializeClass);
      return Long(env->callStaticObjectMethod(cls, mids$[mid_valueOf_212f058c], a0.this$, a1));
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace java {
  namespace lang {
    static PyObject *t_Long_cast_(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Long_instance_(PyTypeObject *type, PyObject *arg);
    static int t_Long_init_(t_Long *self, PyObject *args, PyObject *kwds);
    static PyObject *t_Long_bitCount(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Long_byteValue(t_Long *self, PyObject *args);
    static PyObject *t_Long_compare(PyTypeObject *type, PyObject *args);
    static PyObject *t_Long_compareTo(t_Long *self, PyObject *arg);
    static PyObject *t_Long_compareUnsigned(PyTypeObject *type, PyObject *args);
    static PyObject *t_Long_decode(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Long_divideUnsigned(PyTypeObject *type, PyObject *args);
    static PyObject *t_Long_doubleValue(t_Long *self, PyObject *args);
    static PyObject *t_Long_equals(t_Long *self, PyObject *args);
    static PyObject *t_Long_floatValue(t_Long *self, PyObject *args);
    static PyObject *t_Long_getLong(PyTypeObject *type, PyObject *args);
    static PyObject *t_Long_hashCode(t_Long *self, PyObject *args);
    static PyObject *t_Long_hashCode_(PyTypeObject *type, PyObject *args);
    static PyObject *t_Long_highestOneBit(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Long_intValue(t_Long *self, PyObject *args);
    static PyObject *t_Long_longValue(t_Long *self, PyObject *args);
    static PyObject *t_Long_lowestOneBit(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Long_max(PyTypeObject *type, PyObject *args);
    static PyObject *t_Long_min(PyTypeObject *type, PyObject *args);
    static PyObject *t_Long_numberOfLeadingZeros(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Long_numberOfTrailingZeros(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Long_parseLong(PyTypeObject *type, PyObject *args);
    static PyObject *t_Long_parseUnsignedLong(PyTypeObject *type, PyObject *args);
    static PyObject *t_Long_remainderUnsigned(PyTypeObject *type, PyObject *args);
    static PyObject *t_Long_reverse(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Long_reverseBytes(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Long_rotateLeft(PyTypeObject *type, PyObject *args);
    static PyObject *t_Long_rotateRight(PyTypeObject *type, PyObject *args);
    static PyObject *t_Long_shortValue(t_Long *self, PyObject *args);
    static PyObject *t_Long_signum(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Long_sum(PyTypeObject *type, PyObject *args);
    static PyObject *t_Long_toBinaryString(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Long_toHexString(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Long_toOctalString(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Long_toString(t_Long *self, PyObject *args);
    static PyObject *t_Long_toString_(PyTypeObject *type, PyObject *args);
    static PyObject *t_Long_toUnsignedString(PyTypeObject *type, PyObject *args);
    static PyObject *t_Long_valueOf(PyTypeObject *type, PyObject *args);

    static PyMethodDef t_Long__methods_[] = {
      DECLARE_METHOD(t_Long, cast_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Long, instance_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Long, bitCount, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Long, byteValue, METH_VARARGS),
      DECLARE_METHOD(t_Long, compare, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Long, compareTo, METH_O),
      DECLARE_METHOD(t_Long, compareUnsigned, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Long, decode, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Long, divideUnsigned, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Long, doubleValue, METH_VARARGS),
      DECLARE_METHOD(t_Long, equals, METH_VARARGS),
      DECLARE_METHOD(t_Long, floatValue, METH_VARARGS),
      DECLARE_METHOD(t_Long, getLong, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Long, hashCode, METH_VARARGS),
      DECLARE_METHOD(t_Long, hashCode_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Long, highestOneBit, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Long, intValue, METH_VARARGS),
      DECLARE_METHOD(t_Long, longValue, METH_VARARGS),
      DECLARE_METHOD(t_Long, lowestOneBit, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Long, max, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Long, min, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Long, numberOfLeadingZeros, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Long, numberOfTrailingZeros, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Long, parseLong, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Long, parseUnsignedLong, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Long, remainderUnsigned, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Long, reverse, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Long, reverseBytes, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Long, rotateLeft, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Long, rotateRight, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Long, shortValue, METH_VARARGS),
      DECLARE_METHOD(t_Long, signum, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Long, sum, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Long, toBinaryString, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Long, toHexString, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Long, toOctalString, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Long, toString, METH_VARARGS),
      DECLARE_METHOD(t_Long, toString_, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Long, toUnsignedString, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Long, valueOf, METH_VARARGS | METH_CLASS),
      { NULL, NULL, 0, NULL }
    };

    DECLARE_TYPE(Long, t_Long, ::java::lang::Number, Long, t_Long_init_, 0, 0, 0, 0, 0);

    void t_Long::install(PyObject *module)
    {
      installType(&PY_TYPE(Long), module, "Long", 0);
    }

    void t_Long::initialize(PyObject *module)
    {
      PyDict_SetItemString(PY_TYPE(Long).tp_dict, "class_", make_descriptor(Long::initializeClass, 1));
      PyDict_SetItemString(PY_TYPE(Long).tp_dict, "wrapfn_", make_descriptor(unboxLong));
      PyDict_SetItemString(PY_TYPE(Long).tp_dict, "boxfn_", make_descriptor(boxLong));
      env->getClass(Long::initializeClass);
      PyDict_SetItemString(PY_TYPE(Long).tp_dict, "BYTES", make_descriptor(Long::BYTES));
      PyDict_SetItemString(PY_TYPE(Long).tp_dict, "MAX_VALUE", make_descriptor(Long::MAX_VALUE));
      PyDict_SetItemString(PY_TYPE(Long).tp_dict, "MIN_VALUE", make_descriptor(Long::MIN_VALUE));
      PyDict_SetItemString(PY_TYPE(Long).tp_dict, "SIZE", make_descriptor(Long::SIZE));
      PyDict_SetItemString(PY_TYPE(Long).tp_dict, "TYPE", make_descriptor(::java::lang::t_Class::wrap_Object(*Long::TYPE)));
    }

    static PyObject *t_Long_cast_(PyTypeObject *type, PyObject *arg)
    {
      if (!(arg = castCheck(arg, Long::initializeClass, 1)))
        return NULL;
      return t_Long::wrap_Object(Long(((t_Long *) arg)->object.this$));
    }
    static PyObject *t_Long_instance_(PyTypeObject *type, PyObject *arg)
    {
      if (!castCheck(arg, Long::initializeClass, 0))
        Py_RETURN_FALSE;
      Py_RETURN_TRUE;
    }

    static int t_Long_init_(t_Long *self, PyObject *args, PyObject *kwds)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 1:
        {
          jlong a0;
          Long object((jobject) NULL);

          if (!parseArgs(args, "J", &a0))
          {
            INT_CALL(object = Long(a0));
            self->object = object;
            break;
          }
        }
        {
          ::java::lang::String a0((jobject) NULL);
          Long object((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            INT_CALL(object = Long(a0));
            self->object = object;
            break;
          }
        }
       default:
        PyErr_SetArgsError((PyObject *) self, "__init__", args);
        return -1;
      }

      return 0;
    }

    static PyObject *t_Long_bitCount(PyTypeObject *type, PyObject *arg)
    {
      jlong a0;
      jint result;

      if (!parseArg(arg, "J", &a0))
      {
        OBJ_CALL(result = ::java::lang::Long::bitCount(a0));
        return PyInt_FromLong((long) result);
      }

      PyErr_SetArgsError(type, "bitCount", arg);
      return NULL;
    }

    static PyObject *t_Long_byteValue(t_Long *self, PyObject *args)
    {
      jbyte result;

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.byteValue());
        return PyInt_FromLong((long) result);
      }

      return callSuper(&PY_TYPE(Long), (PyObject *) self, "byteValue", args, 2);
    }

    static PyObject *t_Long_compare(PyTypeObject *type, PyObject *args)
    {
      jlong a0;
      jlong a1;
      jint result;

      if (!parseArgs(args, "JJ", &a0, &a1))
      {
        OBJ_CALL(result = ::java::lang::Long::compare(a0, a1));
        return PyInt_FromLong((long) result);
      }

      PyErr_SetArgsError(type, "compare", args);
      return NULL;
    }

    static PyObject *t_Long_compareTo(t_Long *self, PyObject *arg)
    {
      Long a0((jobject) NULL);
      jint result;

      if (!parseArg(arg, "O", &::java::lang::PY_TYPE(Long), &a0))
      {
        OBJ_CALL(result = self->object.compareTo(a0));
        return PyInt_FromLong((long) result);
      }

      PyErr_SetArgsError((PyObject *) self, "compareTo", arg);
      return NULL;
    }

    static PyObject *t_Long_compareUnsigned(PyTypeObject *type, PyObject *args)
    {
      jlong a0;
      jlong a1;
      jint result;

      if (!parseArgs(args, "JJ", &a0, &a1))
      {
        OBJ_CALL(result = ::java::lang::Long::compareUnsigned(a0, a1));
        return PyInt_FromLong((long) result);
      }

      PyErr_SetArgsError(type, "compareUnsigned", args);
      return NULL;
    }

    static PyObject *t_Long_decode(PyTypeObject *type, PyObject *arg)
    {
      ::java::lang::String a0((jobject) NULL);
      Long result((jobject) NULL);

      if (!parseArg(arg, "s", &a0))
      {
        OBJ_CALL(result = ::java::lang::Long::decode(a0));
        return t_Long::wrap_Object(result);
      }

      PyErr_SetArgsError(type, "decode", arg);
      return NULL;
    }

    static PyObject *t_Long_divideUnsigned(PyTypeObject *type, PyObject *args)
    {
      jlong a0;
      jlong a1;
      jlong result;

      if (!parseArgs(args, "JJ", &a0, &a1))
      {
        OBJ_CALL(result = ::java::lang::Long::divideUnsigned(a0, a1));
        return PyLong_FromLongLong((PY_LONG_LONG) result);
      }

      PyErr_SetArgsError(type, "divideUnsigned", args);
      return NULL;
    }

    static PyObject *t_Long_doubleValue(t_Long *self, PyObject *args)
    {
      jdouble result;

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.doubleValue());
        return PyFloat_FromDouble((double) result);
      }

      return callSuper(&PY_TYPE(Long), (PyObject *) self, "doubleValue", args, 2);
    }

    static PyObject *t_Long_equals(t_Long *self, PyObject *args)
    {
      ::java::lang::Object a0((jobject) NULL);
      jboolean result;

      if (!parseArgs(args, "o", &a0))
      {
        OBJ_CALL(result = self->object.equals(a0));
        Py_RETURN_BOOL(result);
      }

      return callSuper(&PY_TYPE(Long), (PyObject *) self, "equals", args, 2);
    }

    static PyObject *t_Long_floatValue(t_Long *self, PyObject *args)
    {
      jfloat result;

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.floatValue());
        return PyFloat_FromDouble((double) result);
      }

      return callSuper(&PY_TYPE(Long), (PyObject *) self, "floatValue", args, 2);
    }

    static PyObject *t_Long_getLong(PyTypeObject *type, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 1:
        {
          ::java::lang::String a0((jobject) NULL);
          Long result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = ::java::lang::Long::getLong(a0));
            return t_Long::wrap_Object(result);
          }
        }
        break;
       case 2:
        {
          ::java::lang::String a0((jobject) NULL);
          jlong a1;
          Long result((jobject) NULL);

          if (!parseArgs(args, "sJ", &a0, &a1))
          {
            OBJ_CALL(result = ::java::lang::Long::getLong(a0, a1));
            return t_Long::wrap_Object(result);
          }
        }
        {
          ::java::lang::String a0((jobject) NULL);
          Long a1((jobject) NULL);
          Long result((jobject) NULL);

          if (!parseArgs(args, "sO", &::java::lang::PY_TYPE(Long), &a0, &a1))
          {
            OBJ_CALL(result = ::java::lang::Long::getLong(a0, a1));
            return t_Long::wrap_Object(result);
          }
        }
      }

      PyErr_SetArgsError(type, "getLong", args);
      return NULL;
    }

    static PyObject *t_Long_hashCode(t_Long *self, PyObject *args)
    {
      jint result;

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.hashCode());
        return PyInt_FromLong((long) result);
      }

      return callSuper(&PY_TYPE(Long), (PyObject *) self, "hashCode", args, 2);
    }

    static PyObject *t_Long_hashCode_(PyTypeObject *type, PyObject *args)
    {
      jlong a0;
      jint result;

      if (!parseArgs(args, "J", &a0))
      {
        OBJ_CALL(result = ::java::lang::Long::hashCode(a0));
        return PyInt_FromLong((long) result);
      }

      PyErr_SetArgsError(type, "hashCode_", args);
      return NULL;
    }

    static PyObject *t_Long_highestOneBit(PyTypeObject *type, PyObject *arg)
    {
      jlong a0;
      jlong result;

      if (!parseArg(arg, "J", &a0))
      {
        OBJ_CALL(result = ::java::lang::Long::highestOneBit(a0));
        return PyLong_FromLongLong((PY_LONG_LONG) result);
      }

      PyErr_SetArgsError(type, "highestOneBit", arg);
      return NULL;
    }

    static PyObject *t_Long_intValue(t_Long *self, PyObject *args)
    {
      jint result;

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.intValue());
        return PyInt_FromLong((long) result);
      }

      return callSuper(&PY_TYPE(Long), (PyObject *) self, "intValue", args, 2);
    }

    static PyObject *t_Long_longValue(t_Long *self, PyObject *args)
    {
      jlong result;

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.longValue());
        return PyLong_FromLongLong((PY_LONG_LONG) result);
      }

      return callSuper(&PY_TYPE(Long), (PyObject *) self, "longValue", args, 2);
    }

    static PyObject *t_Long_lowestOneBit(PyTypeObject *type, PyObject *arg)
    {
      jlong a0;
      jlong result;

      if (!parseArg(arg, "J", &a0))
      {
        OBJ_CALL(result = ::java::lang::Long::lowestOneBit(a0));
        return PyLong_FromLongLong((PY_LONG_LONG) result);
      }

      PyErr_SetArgsError(type, "lowestOneBit", arg);
      return NULL;
    }

    static PyObject *t_Long_max(PyTypeObject *type, PyObject *args)
    {
      jlong a0;
      jlong a1;
      jlong result;

      if (!parseArgs(args, "JJ", &a0, &a1))
      {
        OBJ_CALL(result = ::java::lang::Long::max$(a0, a1));
        return PyLong_FromLongLong((PY_LONG_LONG) result);
      }

      PyErr_SetArgsError(type, "max", args);
      return NULL;
    }

    static PyObject *t_Long_min(PyTypeObject *type, PyObject *args)
    {
      jlong a0;
      jlong a1;
      jlong result;

      if (!parseArgs(args, "JJ", &a0, &a1))
      {
        OBJ_CALL(result = ::java::lang::Long::min$(a0, a1));
        return PyLong_FromLongLong((PY_LONG_LONG) result);
      }

      PyErr_SetArgsError(type, "min", args);
      return NULL;
    }

    static PyObject *t_Long_numberOfLeadingZeros(PyTypeObject *type, PyObject *arg)
    {
      jlong a0;
      jint result;

      if (!parseArg(arg, "J", &a0))
      {
        OBJ_CALL(result = ::java::lang::Long::numberOfLeadingZeros(a0));
        return PyInt_FromLong((long) result);
      }

      PyErr_SetArgsError(type, "numberOfLeadingZeros", arg);
      return NULL;
    }

    static PyObject *t_Long_numberOfTrailingZeros(PyTypeObject *type, PyObject *arg)
    {
      jlong a0;
      jint result;

      if (!parseArg(arg, "J", &a0))
      {
        OBJ_CALL(result = ::java::lang::Long::numberOfTrailingZeros(a0));
        return PyInt_FromLong((long) result);
      }

      PyErr_SetArgsError(type, "numberOfTrailingZeros", arg);
      return NULL;
    }

    static PyObject *t_Long_parseLong(PyTypeObject *type, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 1:
        {
          ::java::lang::String a0((jobject) NULL);
          jlong result;

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = ::java::lang::Long::parseLong(a0));
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }
        }
        break;
       case 2:
        {
          ::java::lang::String a0((jobject) NULL);
          jint a1;
          jlong result;

          if (!parseArgs(args, "sI", &a0, &a1))
          {
            OBJ_CALL(result = ::java::lang::Long::parseLong(a0, a1));
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }
        }
      }

      PyErr_SetArgsError(type, "parseLong", args);
      return NULL;
    }

    static PyObject *t_Long_parseUnsignedLong(PyTypeObject *type, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 1:
        {
          ::java::lang::String a0((jobject) NULL);
          jlong result;

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = ::java::lang::Long::parseUnsignedLong(a0));
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }
        }
        break;
       case 2:
        {
          ::java::lang::String a0((jobject) NULL);
          jint a1;
          jlong result;

          if (!parseArgs(args, "sI", &a0, &a1))
          {
            OBJ_CALL(result = ::java::lang::Long::parseUnsignedLong(a0, a1));
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }
        }
      }

      PyErr_SetArgsError(type, "parseUnsignedLong", args);
      return NULL;
    }

    static PyObject *t_Long_remainderUnsigned(PyTypeObject *type, PyObject *args)
    {
      jlong a0;
      jlong a1;
      jlong result;

      if (!parseArgs(args, "JJ", &a0, &a1))
      {
        OBJ_CALL(result = ::java::lang::Long::remainderUnsigned(a0, a1));
        return PyLong_FromLongLong((PY_LONG_LONG) result);
      }

      PyErr_SetArgsError(type, "remainderUnsigned", args);
      return NULL;
    }

    static PyObject *t_Long_reverse(PyTypeObject *type, PyObject *arg)
    {
      jlong a0;
      jlong result;

      if (!parseArg(arg, "J", &a0))
      {
        OBJ_CALL(result = ::java::lang::Long::reverse(a0));
        return PyLong_FromLongLong((PY_LONG_LONG) result);
      }

      PyErr_SetArgsError(type, "reverse", arg);
      return NULL;
    }

    static PyObject *t_Long_reverseBytes(PyTypeObject *type, PyObject *arg)
    {
      jlong a0;
      jlong result;

      if (!parseArg(arg, "J", &a0))
      {
        OBJ_CALL(result = ::java::lang::Long::reverseBytes(a0));
        return PyLong_FromLongLong((PY_LONG_LONG) result);
      }

      PyErr_SetArgsError(type, "reverseBytes", arg);
      return NULL;
    }

    static PyObject *t_Long_rotateLeft(PyTypeObject *type, PyObject *args)
    {
      jlong a0;
      jint a1;
      jlong result;

      if (!parseArgs(args, "JI", &a0, &a1))
      {
        OBJ_CALL(result = ::java::lang::Long::rotateLeft(a0, a1));
        return PyLong_FromLongLong((PY_LONG_LONG) result);
      }

      PyErr_SetArgsError(type, "rotateLeft", args);
      return NULL;
    }

    static PyObject *t_Long_rotateRight(PyTypeObject *type, PyObject *args)
    {
      jlong a0;
      jint a1;
      jlong result;

      if (!parseArgs(args, "JI", &a0, &a1))
      {
        OBJ_CALL(result = ::java::lang::Long::rotateRight(a0, a1));
        return PyLong_FromLongLong((PY_LONG_LONG) result);
      }

      PyErr_SetArgsError(type, "rotateRight", args);
      return NULL;
    }

    static PyObject *t_Long_shortValue(t_Long *self, PyObject *args)
    {
      jshort result;

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.shortValue());
        return PyInt_FromLong((long) result);
      }

      return callSuper(&PY_TYPE(Long), (PyObject *) self, "shortValue", args, 2);
    }

    static PyObject *t_Long_signum(PyTypeObject *type, PyObject *arg)
    {
      jlong a0;
      jint result;

      if (!parseArg(arg, "J", &a0))
      {
        OBJ_CALL(result = ::java::lang::Long::signum(a0));
        return PyInt_FromLong((long) result);
      }

      PyErr_SetArgsError(type, "signum", arg);
      return NULL;
    }

    static PyObject *t_Long_sum(PyTypeObject *type, PyObject *args)
    {
      jlong a0;
      jlong a1;
      jlong result;

      if (!parseArgs(args, "JJ", &a0, &a1))
      {
        OBJ_CALL(result = ::java::lang::Long::sum(a0, a1));
        return PyLong_FromLongLong((PY_LONG_LONG) result);
      }

      PyErr_SetArgsError(type, "sum", args);
      return NULL;
    }

    static PyObject *t_Long_toBinaryString(PyTypeObject *type, PyObject *arg)
    {
      jlong a0;
      ::java::lang::String result((jobject) NULL);

      if (!parseArg(arg, "J", &a0))
      {
        OBJ_CALL(result = ::java::lang::Long::toBinaryString(a0));
        return j2p(result);
      }

      PyErr_SetArgsError(type, "toBinaryString", arg);
      return NULL;
    }

    static PyObject *t_Long_toHexString(PyTypeObject *type, PyObject *arg)
    {
      jlong a0;
      ::java::lang::String result((jobject) NULL);

      if (!parseArg(arg, "J", &a0))
      {
        OBJ_CALL(result = ::java::lang::Long::toHexString(a0));
        return j2p(result);
      }

      PyErr_SetArgsError(type, "toHexString", arg);
      return NULL;
    }

    static PyObject *t_Long_toOctalString(PyTypeObject *type, PyObject *arg)
    {
      jlong a0;
      ::java::lang::String result((jobject) NULL);

      if (!parseArg(arg, "J", &a0))
      {
        OBJ_CALL(result = ::java::lang::Long::toOctalString(a0));
        return j2p(result);
      }

      PyErr_SetArgsError(type, "toOctalString", arg);
      return NULL;
    }

    static PyObject *t_Long_toString(t_Long *self, PyObject *args)
    {
      ::java::lang::String result((jobject) NULL);

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.toString());
        return j2p(result);
      }

      return callSuper(&PY_TYPE(Long), (PyObject *) self, "toString", args, 2);
    }

    static PyObject *t_Long_toString_(PyTypeObject *type, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 1:
        {
          jlong a0;
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, "J", &a0))
          {
            OBJ_CALL(result = ::java::lang::Long::toString(a0));
            return j2p(result);
          }
        }
        break;
       case 2:
        {
          jlong a0;
          jint a1;
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, "JI", &a0, &a1))
          {
            OBJ_CALL(result = ::java::lang::Long::toString(a0, a1));
            return j2p(result);
          }
        }
      }

      PyErr_SetArgsError(type, "toString_", args);
      return NULL;
    }

    static PyObject *t_Long_toUnsignedString(PyTypeObject *type, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 1:
        {
          jlong a0;
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, "J", &a0))
          {
            OBJ_CALL(result = ::java::lang::Long::toUnsignedString(a0));
            return j2p(result);
          }
        }
        break;
       case 2:
        {
          jlong a0;
          jint a1;
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, "JI", &a0, &a1))
          {
            OBJ_CALL(result = ::java::lang::Long::toUnsignedString(a0, a1));
            return j2p(result);
          }
        }
      }

      PyErr_SetArgsError(type, "toUnsignedString", args);
      return NULL;
    }

    static PyObject *t_Long_valueOf(PyTypeObject *type, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 1:
        {
          jlong a0;
          Long result((jobject) NULL);

          if (!parseArgs(args, "J", &a0))
          {
            OBJ_CALL(result = ::java::lang::Long::valueOf(a0));
            return t_Long::wrap_Object(result);
          }
        }
        {
          ::java::lang::String a0((jobject) NULL);
          Long result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = ::java::lang::Long::valueOf(a0));
            return t_Long::wrap_Object(result);
          }
        }
        break;
       case 2:
        {
          ::java::lang::String a0((jobject) NULL);
          jint a1;
          Long result((jobject) NULL);

          if (!parseArgs(args, "sI", &a0, &a1))
          {
            OBJ_CALL(result = ::java::lang::Long::valueOf(a0, a1));
            return t_Long::wrap_Object(result);
          }
        }
      }

      PyErr_SetArgsError(type, "valueOf", args);
      return NULL;
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/fst/PairOutputs$Pair.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace fst {

          ::java::lang::Class *PairOutputs$Pair::class$ = NULL;
          jmethodID *PairOutputs$Pair::mids$ = NULL;
          jfieldID *PairOutputs$Pair::fids$ = NULL;
          bool PairOutputs$Pair::live$ = false;

          jclass PairOutputs$Pair::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/util/fst/PairOutputs$Pair");

              mids$ = new jmethodID[max_mid];
              mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
              mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
              mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

              fids$ = new jfieldID[max_fid];
              fids$[fid_output1] = env->getFieldID(cls, "output1", "Ljava/lang/Object;");
              fids$[fid_output2] = env->getFieldID(cls, "output2", "Ljava/lang/Object;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          jboolean PairOutputs$Pair::equals(const ::java::lang::Object & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
          }

          jint PairOutputs$Pair::hashCode() const
          {
            return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
          }

          ::java::lang::String PairOutputs$Pair::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
          }

          ::java::lang::Object PairOutputs$Pair::_get_output1() const
          {
            return ::java::lang::Object(env->getObjectField(this$, fids$[fid_output1]));
          }

          ::java::lang::Object PairOutputs$Pair::_get_output2() const
          {
            return ::java::lang::Object(env->getObjectField(this$, fids$[fid_output2]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace fst {
          static PyObject *t_PairOutputs$Pair_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PairOutputs$Pair_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PairOutputs$Pair_of_(t_PairOutputs$Pair *self, PyObject *args);
          static PyObject *t_PairOutputs$Pair_equals(t_PairOutputs$Pair *self, PyObject *args);
          static PyObject *t_PairOutputs$Pair_hashCode(t_PairOutputs$Pair *self, PyObject *args);
          static PyObject *t_PairOutputs$Pair_toString(t_PairOutputs$Pair *self, PyObject *args);
          static PyObject *t_PairOutputs$Pair_get__output1(t_PairOutputs$Pair *self, void *data);
          static PyObject *t_PairOutputs$Pair_get__output2(t_PairOutputs$Pair *self, void *data);

          static PyObject *t_PairOutputs$Pair_get__parameters_(t_PairOutputs$Pair *self, void *data);
          static PyGetSetDef t_PairOutputs$Pair__fields_[] = {
            DECLARE_GET_FIELD(t_PairOutputs$Pair, output1),
            DECLARE_GET_FIELD(t_PairOutputs$Pair, output2),
            DECLARE_GET_FIELD(t_PairOutputs$Pair, parameters_),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_PairOutputs$Pair__methods_[] = {
            DECLARE_METHOD(t_PairOutputs$Pair, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PairOutputs$Pair, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PairOutputs$Pair, of_, METH_VARARGS),
            DECLARE_METHOD(t_PairOutputs$Pair, equals, METH_VARARGS),
            DECLARE_METHOD(t_PairOutputs$Pair, hashCode, METH_VARARGS),
            DECLARE_METHOD(t_PairOutputs$Pair, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(PairOutputs$Pair, t_PairOutputs$Pair, ::java::lang::Object, PairOutputs$Pair, abstract_init, 0, 0, t_PairOutputs$Pair__fields_, 0, 0);
          PyObject *t_PairOutputs$Pair::wrap_Object(const PairOutputs$Pair& object, PyTypeObject *p0, PyTypeObject *p1)
          {
            PyObject *obj = t_PairOutputs$Pair::wrap_Object(object);
            if (obj != NULL && obj != Py_None)
            {
              t_PairOutputs$Pair *self = (t_PairOutputs$Pair *) obj;
              self->parameters[0] = p0;
              self->parameters[1] = p1;
            }
            return obj;
          }

          PyObject *t_PairOutputs$Pair::wrap_jobject(const jobject& object, PyTypeObject *p0, PyTypeObject *p1)
          {
            PyObject *obj = t_PairOutputs$Pair::wrap_jobject(object);
            if (obj != NULL && obj != Py_None)
            {
              t_PairOutputs$Pair *self = (t_PairOutputs$Pair *) obj;
              self->parameters[0] = p0;
              self->parameters[1] = p1;
            }
            return obj;
          }

          void t_PairOutputs$Pair::install(PyObject *module)
          {
            installType(&PY_TYPE(PairOutputs$Pair), module, "PairOutputs$Pair", 0);
          }

          void t_PairOutputs$Pair::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(PairOutputs$Pair).tp_dict, "class_", make_descriptor(PairOutputs$Pair::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(PairOutputs$Pair).tp_dict, "wrapfn_", make_descriptor(t_PairOutputs$Pair::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(PairOutputs$Pair).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_PairOutputs$Pair_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, PairOutputs$Pair::initializeClass, 1)))
              return NULL;
            return t_PairOutputs$Pair::wrap_Object(PairOutputs$Pair(((t_PairOutputs$Pair *) arg)->object.this$));
          }
          static PyObject *t_PairOutputs$Pair_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, PairOutputs$Pair::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_PairOutputs$Pair_of_(t_PairOutputs$Pair *self, PyObject *args)
          {
            if (!parseArg(args, "T", 2, &(self->parameters)))
              Py_RETURN_SELF;
            return PyErr_SetArgsError((PyObject *) self, "of_", args);
          }

          static PyObject *t_PairOutputs$Pair_equals(t_PairOutputs$Pair *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            jboolean result;

            if (!parseArgs(args, "o", &a0))
            {
              OBJ_CALL(result = self->object.equals(a0));
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(PairOutputs$Pair), (PyObject *) self, "equals", args, 2);
          }

          static PyObject *t_PairOutputs$Pair_hashCode(t_PairOutputs$Pair *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.hashCode());
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(PairOutputs$Pair), (PyObject *) self, "hashCode", args, 2);
          }

          static PyObject *t_PairOutputs$Pair_toString(t_PairOutputs$Pair *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(&PY_TYPE(PairOutputs$Pair), (PyObject *) self, "toString", args, 2);
          }
          static PyObject *t_PairOutputs$Pair_get__parameters_(t_PairOutputs$Pair *self, void *data)
          {
            return typeParameters(self->parameters, sizeof(self->parameters));
          }

          static PyObject *t_PairOutputs$Pair_get__output1(t_PairOutputs$Pair *self, void *data)
          {
            ::java::lang::Object value((jobject) NULL);
            OBJ_CALL(value = self->object._get_output1());
            return ::java::lang::t_Object::wrap_Object(value);
          }

          static PyObject *t_PairOutputs$Pair_get__output2(t_PairOutputs$Pair *self, void *data)
          {
            ::java::lang::Object value((jobject) NULL);
            OBJ_CALL(value = self->object._get_output2());
            return ::java::lang::t_Object::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queries/function/valuesource/ReciprocalFloatFunction.h"
#include "org/apache/lucene/queries/function/FunctionValues.h"
#include "java/lang/Class.h"
#include "java/lang/Object.h"
#include "java/io/IOException.h"
#include "java/util/Map.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "java/lang/String.h"
#include "org/apache/lucene/search/IndexSearcher.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {

            ::java::lang::Class *ReciprocalFloatFunction::class$ = NULL;
            jmethodID *ReciprocalFloatFunction::mids$ = NULL;
            bool ReciprocalFloatFunction::live$ = false;

            jclass ReciprocalFloatFunction::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queries/function/valuesource/ReciprocalFloatFunction");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_64f8c2b9] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/queries/function/ValueSource;FFF)V");
                mids$[mid_createWeight_1b6125ba] = env->getMethodID(cls, "createWeight", "(Ljava/util/Map;Lorg/apache/lucene/search/IndexSearcher;)V");
                mids$[mid_description_14c7b5c5] = env->getMethodID(cls, "description", "()Ljava/lang/String;");
                mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
                mids$[mid_getValues_4c566485] = env->getMethodID(cls, "getValues", "(Ljava/util/Map;Lorg/apache/lucene/index/AtomicReaderContext;)Lorg/apache/lucene/queries/function/FunctionValues;");
                mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            ReciprocalFloatFunction::ReciprocalFloatFunction(const ::org::apache::lucene::queries::function::ValueSource & a0, jfloat a1, jfloat a2, jfloat a3) : ::org::apache::lucene::queries::function::ValueSource(env->newObject(initializeClass, &mids$, mid_init$_64f8c2b9, a0.this$, a1, a2, a3)) {}

            void ReciprocalFloatFunction::createWeight(const ::java::util::Map & a0, const ::org::apache::lucene::search::IndexSearcher & a1) const
            {
              env->callVoidMethod(this$, mids$[mid_createWeight_1b6125ba], a0.this$, a1.this$);
            }

            ::java::lang::String ReciprocalFloatFunction::description() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_description_14c7b5c5]));
            }

            jboolean ReciprocalFloatFunction::equals(const ::java::lang::Object & a0) const
            {
              return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
            }

            ::org::apache::lucene::queries::function::FunctionValues ReciprocalFloatFunction::getValues(const ::java::util::Map & a0, const ::org::apache::lucene::index::AtomicReaderContext & a1) const
            {
              return ::org::apache::lucene::queries::function::FunctionValues(env->callObjectMethod(this$, mids$[mid_getValues_4c566485], a0.this$, a1.this$));
            }

            jint ReciprocalFloatFunction::hashCode() const
            {
              return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {
            static PyObject *t_ReciprocalFloatFunction_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_ReciprocalFloatFunction_instance_(PyTypeObject *type, PyObject *arg);
            static int t_ReciprocalFloatFunction_init_(t_ReciprocalFloatFunction *self, PyObject *args, PyObject *kwds);
            static PyObject *t_ReciprocalFloatFunction_createWeight(t_ReciprocalFloatFunction *self, PyObject *args);
            static PyObject *t_ReciprocalFloatFunction_description(t_ReciprocalFloatFunction *self, PyObject *args);
            static PyObject *t_ReciprocalFloatFunction_equals(t_ReciprocalFloatFunction *self, PyObject *args);
            static PyObject *t_ReciprocalFloatFunction_getValues(t_ReciprocalFloatFunction *self, PyObject *args);
            static PyObject *t_ReciprocalFloatFunction_hashCode(t_ReciprocalFloatFunction *self, PyObject *args);

            static PyMethodDef t_ReciprocalFloatFunction__methods_[] = {
              DECLARE_METHOD(t_ReciprocalFloatFunction, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_ReciprocalFloatFunction, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_ReciprocalFloatFunction, createWeight, METH_VARARGS),
              DECLARE_METHOD(t_ReciprocalFloatFunction, description, METH_VARARGS),
              DECLARE_METHOD(t_ReciprocalFloatFunction, equals, METH_VARARGS),
              DECLARE_METHOD(t_ReciprocalFloatFunction, getValues, METH_VARARGS),
              DECLARE_METHOD(t_ReciprocalFloatFunction, hashCode, METH_VARARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(ReciprocalFloatFunction, t_ReciprocalFloatFunction, ::org::apache::lucene::queries::function::ValueSource, ReciprocalFloatFunction, t_ReciprocalFloatFunction_init_, 0, 0, 0, 0, 0);

            void t_ReciprocalFloatFunction::install(PyObject *module)
            {
              installType(&PY_TYPE(ReciprocalFloatFunction), module, "ReciprocalFloatFunction", 0);
            }

            void t_ReciprocalFloatFunction::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(ReciprocalFloatFunction).tp_dict, "class_", make_descriptor(ReciprocalFloatFunction::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(ReciprocalFloatFunction).tp_dict, "wrapfn_", make_descriptor(t_ReciprocalFloatFunction::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(ReciprocalFloatFunction).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_ReciprocalFloatFunction_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, ReciprocalFloatFunction::initializeClass, 1)))
                return NULL;
              return t_ReciprocalFloatFunction::wrap_Object(ReciprocalFloatFunction(((t_ReciprocalFloatFunction *) arg)->object.this$));
            }
            static PyObject *t_ReciprocalFloatFunction_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, ReciprocalFloatFunction::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_ReciprocalFloatFunction_init_(t_ReciprocalFloatFunction *self, PyObject *args, PyObject *kwds)
            {
              ::org::apache::lucene::queries::function::ValueSource a0((jobject) NULL);
              jfloat a1;
              jfloat a2;
              jfloat a3;
              ReciprocalFloatFunction object((jobject) NULL);

              if (!parseArgs(args, "kFFF", ::org::apache::lucene::queries::function::ValueSource::initializeClass, &a0, &a1, &a2, &a3))
              {
                INT_CALL(object = ReciprocalFloatFunction(a0, a1, a2, a3));
                self->object = object;
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_ReciprocalFloatFunction_createWeight(t_ReciprocalFloatFunction *self, PyObject *args)
            {
              ::java::util::Map a0((jobject) NULL);
              PyTypeObject **p0;
              ::org::apache::lucene::search::IndexSearcher a1((jobject) NULL);

              if (!parseArgs(args, "Kk", ::java::util::Map::initializeClass, ::org::apache::lucene::search::IndexSearcher::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_, &a1))
              {
                OBJ_CALL(self->object.createWeight(a0, a1));
                Py_RETURN_NONE;
              }

              return callSuper(&PY_TYPE(ReciprocalFloatFunction), (PyObject *) self, "createWeight", args, 2);
            }

            static PyObject *t_ReciprocalFloatFunction_description(t_ReciprocalFloatFunction *self, PyObject *args)
            {
              ::java::lang::String result((jobject) NULL);

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.description());
                return j2p(result);
              }

              return callSuper(&PY_TYPE(ReciprocalFloatFunction), (PyObject *) self, "description", args, 2);
            }

            static PyObject *t_ReciprocalFloatFunction_equals(t_ReciprocalFloatFunction *self, PyObject *args)
            {
              ::java::lang::Object a0((jobject) NULL);
              jboolean result;

              if (!parseArgs(args, "o", &a0))
              {
                OBJ_CALL(result = self->object.equals(a0));
                Py_RETURN_BOOL(result);
              }

              return callSuper(&PY_TYPE(ReciprocalFloatFunction), (PyObject *) self, "equals", args, 2);
            }

            static PyObject *t_ReciprocalFloatFunction_getValues(t_ReciprocalFloatFunction *self, PyObject *args)
            {
              ::java::util::Map a0((jobject) NULL);
              PyTypeObject **p0;
              ::org::apache::lucene::index::AtomicReaderContext a1((jobject) NULL);
              ::org::apache::lucene::queries::function::FunctionValues result((jobject) NULL);

              if (!parseArgs(args, "Kk", ::java::util::Map::initializeClass, ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_, &a1))
              {
                OBJ_CALL(result = self->object.getValues(a0, a1));
                return ::org::apache::lucene::queries::function::t_FunctionValues::wrap_Object(result);
              }

              return callSuper(&PY_TYPE(ReciprocalFloatFunction), (PyObject *) self, "getValues", args, 2);
            }

            static PyObject *t_ReciprocalFloatFunction_hashCode(t_ReciprocalFloatFunction *self, PyObject *args)
            {
              jint result;

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.hashCode());
                return PyInt_FromLong((long) result);
              }

              return callSuper(&PY_TYPE(ReciprocalFloatFunction), (PyObject *) self, "hashCode", args, 2);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/pylucene/analysis/PythonTokenizer.h"
#include "java/io/IOException.h"
#include "java/lang/Throwable.h"
#include "java/io/Reader.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace pylucene {
      namespace analysis {

        ::java::lang::Class *PythonTokenizer::class$ = NULL;
        jmethodID *PythonTokenizer::mids$ = NULL;
        bool PythonTokenizer::live$ = false;

        jclass PythonTokenizer::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/pylucene/analysis/PythonTokenizer");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_cf2e3c10] = env->getMethodID(cls, "<init>", "(Ljava/io/Reader;)V");
            mids$[mid_finalize_54c6a166] = env->getMethodID(cls, "finalize", "()V");
            mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");
            mids$[mid_pythonDecRef_54c6a166] = env->getMethodID(cls, "pythonDecRef", "()V");
            mids$[mid_pythonExtension_54c6a17a] = env->getMethodID(cls, "pythonExtension", "()J");
            mids$[mid_pythonExtension_0ee6df2f] = env->getMethodID(cls, "pythonExtension", "(J)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        PythonTokenizer::PythonTokenizer(const ::java::io::Reader & a0) : ::org::apache::lucene::analysis::Tokenizer(env->newObject(initializeClass, &mids$, mid_init$_cf2e3c10, a0.this$)) {}

        void PythonTokenizer::finalize() const
        {
          env->callVoidMethod(this$, mids$[mid_finalize_54c6a166]);
        }

        jlong PythonTokenizer::pythonExtension() const
        {
          return env->callLongMethod(this$, mids$[mid_pythonExtension_54c6a17a]);
        }

        void PythonTokenizer::pythonExtension(jlong a0) const
        {
          env->callVoidMethod(this$, mids$[mid_pythonExtension_0ee6df2f], a0);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace pylucene {
      namespace analysis {
        static PyObject *t_PythonTokenizer_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_PythonTokenizer_instance_(PyTypeObject *type, PyObject *arg);
        static int t_PythonTokenizer_init_(t_PythonTokenizer *self, PyObject *args, PyObject *kwds);
        static PyObject *t_PythonTokenizer_finalize(t_PythonTokenizer *self);
        static PyObject *t_PythonTokenizer_pythonExtension(t_PythonTokenizer *self, PyObject *args);
        static jboolean JNICALL t_PythonTokenizer_incrementToken0(JNIEnv *jenv, jobject jobj);
        static void JNICALL t_PythonTokenizer_pythonDecRef1(JNIEnv *jenv, jobject jobj);
        static PyObject *t_PythonTokenizer_get__self(t_PythonTokenizer *self, void *data);
        static PyGetSetDef t_PythonTokenizer__fields_[] = {
          DECLARE_GET_FIELD(t_PythonTokenizer, self),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_PythonTokenizer__methods_[] = {
          DECLARE_METHOD(t_PythonTokenizer, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PythonTokenizer, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PythonTokenizer, finalize, METH_NOARGS),
          DECLARE_METHOD(t_PythonTokenizer, pythonExtension, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(PythonTokenizer, t_PythonTokenizer, ::org::apache::lucene::analysis::Tokenizer, PythonTokenizer, t_PythonTokenizer_init_, 0, 0, t_PythonTokenizer__fields_, 0, 0);

        void t_PythonTokenizer::install(PyObject *module)
        {
          installType(&PY_TYPE(PythonTokenizer), module, "PythonTokenizer", 1);
        }

        void t_PythonTokenizer::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(PythonTokenizer).tp_dict, "class_", make_descriptor(PythonTokenizer::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(PythonTokenizer).tp_dict, "wrapfn_", make_descriptor(t_PythonTokenizer::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(PythonTokenizer).tp_dict, "boxfn_", make_descriptor(boxObject));
          jclass cls = env->getClass(PythonTokenizer::initializeClass);
          JNINativeMethod methods[] = {
            { "incrementToken", "()Z", (void *) t_PythonTokenizer_incrementToken0 },
            { "pythonDecRef", "()V", (void *) t_PythonTokenizer_pythonDecRef1 },
          };
          env->registerNatives(cls, methods, 2);
        }

        static PyObject *t_PythonTokenizer_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, PythonTokenizer::initializeClass, 1)))
            return NULL;
          return t_PythonTokenizer::wrap_Object(PythonTokenizer(((t_PythonTokenizer *) arg)->object.this$));
        }
        static PyObject *t_PythonTokenizer_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, PythonTokenizer::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_PythonTokenizer_init_(t_PythonTokenizer *self, PyObject *args, PyObject *kwds)
        {
          ::java::io::Reader a0((jobject) NULL);
          PythonTokenizer object((jobject) NULL);

          if (!parseArgs(args, "k", ::java::io::Reader::initializeClass, &a0))
          {
            INT_CALL(object = PythonTokenizer(a0));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          Py_INCREF((PyObject *) self);
          self->object.pythonExtension((jlong) (Py_intptr_t) (void *) self);

          return 0;
        }

        static PyObject *t_PythonTokenizer_finalize(t_PythonTokenizer *self)
        {
          OBJ_CALL(self->object.finalize());
          Py_RETURN_NONE;
        }

        static PyObject *t_PythonTokenizer_pythonExtension(t_PythonTokenizer *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 0:
            {
              jlong result;
              OBJ_CALL(result = self->object.pythonExtension());
              return PyLong_FromLongLong((PY_LONG_LONG) result);
            }
            break;
           case 1:
            {
              jlong a0;

              if (!parseArgs(args, "J", &a0))
              {
                OBJ_CALL(self->object.pythonExtension(a0));
                Py_RETURN_NONE;
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "pythonExtension", args);
          return NULL;
        }

        static jboolean JNICALL t_PythonTokenizer_incrementToken0(JNIEnv *jenv, jobject jobj)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonTokenizer::mids$[PythonTokenizer::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          jboolean value;
          PyObject *result = PyObject_CallMethod(obj, "incrementToken", "");
          if (!result)
            throwPythonError();
          else if (parseArg(result, "Z", &value))
          {
            throwTypeError("incrementToken", result);
            Py_DECREF(result);
          }
          else
          {
            Py_DECREF(result);
            return value;
          }

          return (jboolean) 0;
        }

        static void JNICALL t_PythonTokenizer_pythonDecRef1(JNIEnv *jenv, jobject jobj)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonTokenizer::mids$[PythonTokenizer::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;

          if (obj != NULL)
          {
            jenv->CallVoidMethod(jobj, PythonTokenizer::mids$[PythonTokenizer::mid_pythonExtension_0ee6df2f], (jlong) 0);
            env->finalizeObject(jenv, obj);
          }
        }

        static PyObject *t_PythonTokenizer_get__self(t_PythonTokenizer *self, void *data)
        {
          jlong ptr;
          OBJ_CALL(ptr = self->object.pythonExtension());
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;

          if (obj != NULL)
          {
            Py_INCREF(obj);
            return obj;
          }
          else
            Py_RETURN_NONE;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/StoredFieldsWriter.h"
#include "java/io/Closeable.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/index/FieldInfo.h"
#include "org/apache/lucene/index/IndexableField.h"
#include "org/apache/lucene/index/FieldInfos.h"
#include "org/apache/lucene/index/MergeState.h"
#include "java/io/IOException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {

        ::java::lang::Class *StoredFieldsWriter::class$ = NULL;
        jmethodID *StoredFieldsWriter::mids$ = NULL;
        bool StoredFieldsWriter::live$ = false;

        jclass StoredFieldsWriter::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/StoredFieldsWriter");

            mids$ = new jmethodID[max_mid];
            mids$[mid_abort_54c6a166] = env->getMethodID(cls, "abort", "()V");
            mids$[mid_close_54c6a166] = env->getMethodID(cls, "close", "()V");
            mids$[mid_finish_48f050c2] = env->getMethodID(cls, "finish", "(Lorg/apache/lucene/index/FieldInfos;I)V");
            mids$[mid_finishDocument_54c6a166] = env->getMethodID(cls, "finishDocument", "()V");
            mids$[mid_merge_fd0cfdeb] = env->getMethodID(cls, "merge", "(Lorg/apache/lucene/index/MergeState;)I");
            mids$[mid_startDocument_54c6a166] = env->getMethodID(cls, "startDocument", "()V");
            mids$[mid_writeField_0de3c993] = env->getMethodID(cls, "writeField", "(Lorg/apache/lucene/index/FieldInfo;Lorg/apache/lucene/index/IndexableField;)V");
            mids$[mid_addDocument_2c3bf2c7] = env->getMethodID(cls, "addDocument", "(Ljava/lang/Iterable;Lorg/apache/lucene/index/FieldInfos;)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        void StoredFieldsWriter::abort() const
        {
          env->callVoidMethod(this$, mids$[mid_abort_54c6a166]);
        }

        void StoredFieldsWriter::close() const
        {
          env->callVoidMethod(this$, mids$[mid_close_54c6a166]);
        }

        void StoredFieldsWriter::finish(const ::org::apache::lucene::index::FieldInfos & a0, jint a1) const
        {
          env->callVoidMethod(this$, mids$[mid_finish_48f050c2], a0.this$, a1);
        }

        void StoredFieldsWriter::finishDocument() const
        {
          env->callVoidMethod(this$, mids$[mid_finishDocument_54c6a166]);
        }

        jint StoredFieldsWriter::merge(const ::org::apache::lucene::index::MergeState & a0) const
        {
          return env->callIntMethod(this$, mids$[mid_merge_fd0cfdeb], a0.this$);
        }

        void StoredFieldsWriter::startDocument() const
        {
          env->callVoidMethod(this$, mids$[mid_startDocument_54c6a166]);
        }

        void StoredFieldsWriter::writeField(const ::org::apache::lucene::index::FieldInfo & a0, const ::org::apache::lucene::index::IndexableField & a1) const
        {
          env->callVoidMethod(this$, mids$[mid_writeField_0de3c993], a0.this$, a1.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        static PyObject *t_StoredFieldsWriter_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_StoredFieldsWriter_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_StoredFieldsWriter_abort(t_StoredFieldsWriter *self);
        static PyObject *t_StoredFieldsWriter_close(t_StoredFieldsWriter *self);
        static PyObject *t_StoredFieldsWriter_finish(t_StoredFieldsWriter *self, PyObject *args);
        static PyObject *t_StoredFieldsWriter_finishDocument(t_StoredFieldsWriter *self);
        static PyObject *t_StoredFieldsWriter_merge(t_StoredFieldsWriter *self, PyObject *arg);
        static PyObject *t_StoredFieldsWriter_startDocument(t_StoredFieldsWriter *self);
        static PyObject *t_StoredFieldsWriter_writeField(t_StoredFieldsWriter *self, PyObject *args);

        static PyMethodDef t_StoredFieldsWriter__methods_[] = {
          DECLARE_METHOD(t_StoredFieldsWriter, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_StoredFieldsWriter, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_StoredFieldsWriter, abort, METH_NOARGS),
          DECLARE_METHOD(t_StoredFieldsWriter, close, METH_NOARGS),
          DECLARE_METHOD(t_StoredFieldsWriter, finish, METH_VARARGS),
          DECLARE_METHOD(t_StoredFieldsWriter, finishDocument, METH_NOARGS),
          DECLARE_METHOD(t_StoredFieldsWriter, merge, METH_O),
          DECLARE_METHOD(t_StoredFieldsWriter, startDocument, METH_NOARGS),
          DECLARE_METHOD(t_StoredFieldsWriter, writeField, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(StoredFieldsWriter, t_StoredFieldsWriter, ::java::lang::Object, StoredFieldsWriter, abstract_init, 0, 0, 0, 0, 0);

        void t_StoredFieldsWriter::install(PyObject *module)
        {
          installType(&PY_TYPE(StoredFieldsWriter), module, "StoredFieldsWriter", 0);
        }

        void t_StoredFieldsWriter::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(StoredFieldsWriter).tp_dict, "class_", make_descriptor(StoredFieldsWriter::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(StoredFieldsWriter).tp_dict, "wrapfn_", make_descriptor(t_StoredFieldsWriter::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(StoredFieldsWriter).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_StoredFieldsWriter_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, StoredFieldsWriter::initializeClass, 1)))
            return NULL;
          return t_StoredFieldsWriter::wrap_Object(StoredFieldsWriter(((t_StoredFieldsWriter *) arg)->object.this$));
        }
        static PyObject *t_StoredFieldsWriter_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, StoredFieldsWriter::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_StoredFieldsWriter_abort(t_StoredFieldsWriter *self)
        {
          OBJ_CALL(self->object.abort());
          Py_RETURN_NONE;
        }

        static PyObject *t_StoredFieldsWriter_close(t_StoredFieldsWriter *self)
        {
          OBJ_CALL(self->object.close());
          Py_RETURN_NONE;
        }

        static PyObject *t_StoredFieldsWriter_finish(t_StoredFieldsWriter *self, PyObject *args)
        {
          ::org::apache::lucene::index::FieldInfos a0((jobject) NULL);
          jint a1;

          if (!parseArgs(args, "kI", ::org::apache::lucene::index::FieldInfos::initializeClass, &a0, &a1))
          {
            OBJ_CALL(self->object.finish(a0, a1));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "finish", args);
          return NULL;
        }

        static PyObject *t_StoredFieldsWriter_finishDocument(t_StoredFieldsWriter *self)
        {
          OBJ_CALL(self->object.finishDocument());
          Py_RETURN_NONE;
        }

        static PyObject *t_StoredFieldsWriter_merge(t_StoredFieldsWriter *self, PyObject *arg)
        {
          ::org::apache::lucene::index::MergeState a0((jobject) NULL);
          jint result;

          if (!parseArg(arg, "k", ::org::apache::lucene::index::MergeState::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.merge(a0));
            return PyInt_FromLong((long) result);
          }

          PyErr_SetArgsError((PyObject *) self, "merge", arg);
          return NULL;
        }

        static PyObject *t_StoredFieldsWriter_startDocument(t_StoredFieldsWriter *self)
        {
          OBJ_CALL(self->object.startDocument());
          Py_RETURN_NONE;
        }

        static PyObject *t_StoredFieldsWriter_writeField(t_StoredFieldsWriter *self, PyObject *args)
        {
          ::org::apache::lucene::index::FieldInfo a0((jobject) NULL);
          ::org::apache::lucene::index::IndexableField a1((jobject) NULL);

          if (!parseArgs(args, "kk", ::org::apache::lucene::index::FieldInfo::initializeClass, ::org::apache::lucene::index::IndexableField::initializeClass, &a0, &a1))
          {
            OBJ_CALL(self->object.writeField(a0, a1));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "writeField", args);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/standard/ClassicFilter.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace standard {

          ::java::lang::Class *ClassicFilter::class$ = NULL;
          jmethodID *ClassicFilter::mids$ = NULL;
          bool ClassicFilter::live$ = false;

          jclass ClassicFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/standard/ClassicFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_c7c794dc] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;)V");
              mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ClassicFilter::ClassicFilter(const ::org::apache::lucene::analysis::TokenStream & a0) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_c7c794dc, a0.this$)) {}

          jboolean ClassicFilter::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_54c6a16a]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace standard {
          static PyObject *t_ClassicFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_ClassicFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_ClassicFilter_init_(t_ClassicFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_ClassicFilter_incrementToken(t_ClassicFilter *self, PyObject *args);

          static PyMethodDef t_ClassicFilter__methods_[] = {
            DECLARE_METHOD(t_ClassicFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ClassicFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ClassicFilter, incrementToken, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(ClassicFilter, t_ClassicFilter, ::org::apache::lucene::analysis::TokenFilter, ClassicFilter, t_ClassicFilter_init_, 0, 0, 0, 0, 0);

          void t_ClassicFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(ClassicFilter), module, "ClassicFilter", 0);
          }

          void t_ClassicFilter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(ClassicFilter).tp_dict, "class_", make_descriptor(ClassicFilter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(ClassicFilter).tp_dict, "wrapfn_", make_descriptor(t_ClassicFilter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(ClassicFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_ClassicFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, ClassicFilter::initializeClass, 1)))
              return NULL;
            return t_ClassicFilter::wrap_Object(ClassicFilter(((t_ClassicFilter *) arg)->object.this$));
          }
          static PyObject *t_ClassicFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, ClassicFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_ClassicFilter_init_(t_ClassicFilter *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ClassicFilter object((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              INT_CALL(object = ClassicFilter(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_ClassicFilter_incrementToken(t_ClassicFilter *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(ClassicFilter), (PyObject *) self, "incrementToken", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/MergePolicy$DocMap.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *MergePolicy$DocMap::class$ = NULL;
        jmethodID *MergePolicy$DocMap::mids$ = NULL;
        bool MergePolicy$DocMap::live$ = false;

        jclass MergePolicy$DocMap::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/MergePolicy$DocMap");

            mids$ = new jmethodID[max_mid];
            mids$[mid_map_39c7bd23] = env->getMethodID(cls, "map", "(I)I");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        jint MergePolicy$DocMap::map(jint a0) const
        {
          return env->callIntMethod(this$, mids$[mid_map_39c7bd23], a0);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_MergePolicy$DocMap_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_MergePolicy$DocMap_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_MergePolicy$DocMap_map(t_MergePolicy$DocMap *self, PyObject *arg);

        static PyMethodDef t_MergePolicy$DocMap__methods_[] = {
          DECLARE_METHOD(t_MergePolicy$DocMap, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MergePolicy$DocMap, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MergePolicy$DocMap, map, METH_O),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(MergePolicy$DocMap, t_MergePolicy$DocMap, ::java::lang::Object, MergePolicy$DocMap, abstract_init, 0, 0, 0, 0, 0);

        void t_MergePolicy$DocMap::install(PyObject *module)
        {
          installType(&PY_TYPE(MergePolicy$DocMap), module, "MergePolicy$DocMap", 0);
        }

        void t_MergePolicy$DocMap::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(MergePolicy$DocMap).tp_dict, "class_", make_descriptor(MergePolicy$DocMap::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(MergePolicy$DocMap).tp_dict, "wrapfn_", make_descriptor(t_MergePolicy$DocMap::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(MergePolicy$DocMap).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_MergePolicy$DocMap_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, MergePolicy$DocMap::initializeClass, 1)))
            return NULL;
          return t_MergePolicy$DocMap::wrap_Object(MergePolicy$DocMap(((t_MergePolicy$DocMap *) arg)->object.this$));
        }
        static PyObject *t_MergePolicy$DocMap_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, MergePolicy$DocMap::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_MergePolicy$DocMap_map(t_MergePolicy$DocMap *self, PyObject *arg)
        {
          jint a0;
          jint result;

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(result = self->object.map(a0));
            return PyInt_FromLong((long) result);
          }

          PyErr_SetArgsError((PyObject *) self, "map", arg);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/OfflineSorter.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/util/OfflineSorter$SortInfo.h"
#include "java/util/Comparator.h"
#include "org/apache/lucene/util/OfflineSorter$BufferSize.h"
#include "java/io/IOException.h"
#include "java/io/File.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *OfflineSorter::class$ = NULL;
        jmethodID *OfflineSorter::mids$ = NULL;
        bool OfflineSorter::live$ = false;
        jlong OfflineSorter::ABSOLUTE_MIN_SORT_BUFFER_SIZE = (jlong) 0;
        ::java::util::Comparator *OfflineSorter::DEFAULT_COMPARATOR = NULL;
        jlong OfflineSorter::GB = (jlong) 0;
        jint OfflineSorter::MAX_TEMPFILES = (jint) 0;
        jlong OfflineSorter::MB = (jlong) 0;
        jlong OfflineSorter::MIN_BUFFER_SIZE_MB = (jlong) 0;

        jclass OfflineSorter::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/OfflineSorter");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_init$_6ffdd545] = env->getMethodID(cls, "<init>", "(Ljava/util/Comparator;)V");
            mids$[mid_init$_22c0d43b] = env->getMethodID(cls, "<init>", "(Ljava/util/Comparator;Lorg/apache/lucene/util/OfflineSorter$BufferSize;Ljava/io/File;I)V");
            mids$[mid_defaultTempDir_a8eb7bbe] = env->getStaticMethodID(cls, "defaultTempDir", "()Ljava/io/File;");
            mids$[mid_getComparator_5a7ff2fc] = env->getMethodID(cls, "getComparator", "()Ljava/util/Comparator;");
            mids$[mid_sort_c917fc5b] = env->getMethodID(cls, "sort", "(Ljava/io/File;Ljava/io/File;)Lorg/apache/lucene/util/OfflineSorter$SortInfo;");
            mids$[mid_sortPartition_5a7c7338] = env->getMethodID(cls, "sortPartition", "(I)Ljava/io/File;");

            class$ = (::java::lang::Class *) new JObject(cls);
            cls = (jclass) class$->this$;

            ABSOLUTE_MIN_SORT_BUFFER_SIZE = env->getStaticLongField(cls, "ABSOLUTE_MIN_SORT_BUFFER_SIZE");
            DEFAULT_COMPARATOR = new ::java::util::Comparator(env->getStaticObjectField(cls, "DEFAULT_COMPARATOR", "Ljava/util/Comparator;"));
            GB = env->getStaticLongField(cls, "GB");
            MAX_TEMPFILES = env->getStaticIntField(cls, "MAX_TEMPFILES");
            MB = env->getStaticLongField(cls, "MB");
            MIN_BUFFER_SIZE_MB = env->getStaticLongField(cls, "MIN_BUFFER_SIZE_MB");
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        OfflineSorter::OfflineSorter() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        OfflineSorter::OfflineSorter(const ::java::util::Comparator & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_6ffdd545, a0.this$)) {}

        OfflineSorter::OfflineSorter(const ::java::util::Comparator & a0, const ::org::apache::lucene::util::OfflineSorter$BufferSize & a1, const ::java::io::File & a2, jint a3) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_22c0d43b, a0.this$, a1.this$, a2.this$, a3)) {}

        ::java::io::File OfflineSorter::defaultTempDir()
        {
          jclass cls = env->getClass(initializeClass);
          return ::java::io::File(env->callStaticObjectMethod(cls, mids$[mid_defaultTempDir_a8eb7bbe]));
        }

        ::java::util::Comparator OfflineSorter::getComparator() const
        {
          return ::java::util::Comparator(env->callObjectMethod(this$, mids$[mid_getComparator_5a7ff2fc]));
        }

        ::org::apache::lucene::util::OfflineSorter$SortInfo OfflineSorter::sort(const ::java::io::File & a0, const ::java::io::File & a1) const
        {
          return ::org::apache::lucene::util::OfflineSorter$SortInfo(env->callObjectMethod(this$, mids$[mid_sort_c917fc5b], a0.this$, a1.this$));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"
#include "org/apache/lucene/util/OfflineSorter$ByteSequencesReader.h"
#include "org/apache/lucene/util/OfflineSorter$ByteSequencesWriter.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_OfflineSorter_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_OfflineSorter_instance_(PyTypeObject *type, PyObject *arg);
        static int t_OfflineSorter_init_(t_OfflineSorter *self, PyObject *args, PyObject *kwds);
        static PyObject *t_OfflineSorter_defaultTempDir(PyTypeObject *type);
        static PyObject *t_OfflineSorter_getComparator(t_OfflineSorter *self);
        static PyObject *t_OfflineSorter_sort(t_OfflineSorter *self, PyObject *args);
        static PyObject *t_OfflineSorter_get__comparator(t_OfflineSorter *self, void *data);
        static PyGetSetDef t_OfflineSorter__fields_[] = {
          DECLARE_GET_FIELD(t_OfflineSorter, comparator),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_OfflineSorter__methods_[] = {
          DECLARE_METHOD(t_OfflineSorter, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_OfflineSorter, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_OfflineSorter, defaultTempDir, METH_NOARGS | METH_CLASS),
          DECLARE_METHOD(t_OfflineSorter, getComparator, METH_NOARGS),
          DECLARE_METHOD(t_OfflineSorter, sort, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(OfflineSorter, t_OfflineSorter, ::java::lang::Object, OfflineSorter, t_OfflineSorter_init_, 0, 0, t_OfflineSorter__fields_, 0, 0);

        void t_OfflineSorter::install(PyObject *module)
        {
          installType(&PY_TYPE(OfflineSorter), module, "OfflineSorter", 0);
          PyDict_SetItemString(PY_TYPE(OfflineSorter).tp_dict, "ByteSequencesReader", make_descriptor(&PY_TYPE(OfflineSorter$ByteSequencesReader)));
          PyDict_SetItemString(PY_TYPE(OfflineSorter).tp_dict, "ByteSequencesWriter", make_descriptor(&PY_TYPE(OfflineSorter$ByteSequencesWriter)));
          PyDict_SetItemString(PY_TYPE(OfflineSorter).tp_dict, "BufferSize", make_descriptor(&PY_TYPE(OfflineSorter$BufferSize)));
        }

        void t_OfflineSorter::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(OfflineSorter).tp_dict, "class_", make_descriptor(OfflineSorter::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(OfflineSorter).tp_dict, "wrapfn_", make_descriptor(t_OfflineSorter::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(OfflineSorter).tp_dict, "boxfn_", make_descriptor(boxObject));
          env->getClass(OfflineSorter::initializeClass);
          PyDict_SetItemString(PY_TYPE(OfflineSorter).tp_dict, "ABSOLUTE_MIN_SORT_BUFFER_SIZE", make_descriptor(OfflineSorter::ABSOLUTE_MIN_SORT_BUFFER_SIZE));
          PyDict_SetItemString(PY_TYPE(OfflineSorter).tp_dict, "DEFAULT_COMPARATOR", make_descriptor(::java::util::t_Comparator::wrap_Object(*OfflineSorter::DEFAULT_COMPARATOR)));
          PyDict_SetItemString(PY_TYPE(OfflineSorter).tp_dict, "GB", make_descriptor(OfflineSorter::GB));
          PyDict_SetItemString(PY_TYPE(OfflineSorter).tp_dict, "MAX_TEMPFILES", make_descriptor(OfflineSorter::MAX_TEMPFILES));
          PyDict_SetItemString(PY_TYPE(OfflineSorter).tp_dict, "MB", make_descriptor(OfflineSorter::MB));
          PyDict_SetItemString(PY_TYPE(OfflineSorter).tp_dict, "MIN_BUFFER_SIZE_MB", make_descriptor(OfflineSorter::MIN_BUFFER_SIZE_MB));
        }

        static PyObject *t_OfflineSorter_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, OfflineSorter::initializeClass, 1)))
            return NULL;
          return t_OfflineSorter::wrap_Object(OfflineSorter(((t_OfflineSorter *) arg)->object.this$));
        }
        static PyObject *t_OfflineSorter_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, OfflineSorter::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_OfflineSorter_init_(t_OfflineSorter *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 0:
            {
              OfflineSorter object((jobject) NULL);

              INT_CALL(object = OfflineSorter());
              self->object = object;
              break;
            }
            goto err;
           case 1:
            {
              ::java::util::Comparator a0((jobject) NULL);
              PyTypeObject **p0;
              OfflineSorter object((jobject) NULL);

              if (!parseArgs(args, "K", ::java::util::Comparator::initializeClass, &a0, &p0, ::java::util::t_Comparator::parameters_))
              {
                INT_CALL(object = OfflineSorter(a0));
                self->object = object;
                break;
              }
            }
            goto err;
           case 4:
            {
              ::java::util::Comparator a0((jobject) NULL);
              PyTypeObject **p0;
              ::org::apache::lucene::util::OfflineSorter$BufferSize a1((jobject) NULL);
              ::java::io::File a2((jobject) NULL);
              jint a3;
              OfflineSorter object((jobject) NULL);

              if (!parseArgs(args, "KkkI", ::java::util::Comparator::initializeClass, ::org::apache::lucene::util::OfflineSorter$BufferSize::initializeClass, ::java::io::File::initializeClass, &a0, &p0, ::java::util::t_Comparator::parameters_, &a1, &a2, &a3))
              {
                INT_CALL(object = OfflineSorter(a0, a1, a2, a3));
                self->object = object;
                break;
              }
            }
           default:
           err:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_OfflineSorter_defaultTempDir(PyTypeObject *type)
        {
          ::java::io::File result((jobject) NULL);
          OBJ_CALL(result = ::org::apache::lucene::util::OfflineSorter::defaultTempDir());
          return ::java::io::t_File::wrap_Object(result);
        }

        static PyObject *t_OfflineSorter_getComparator(t_OfflineSorter *self)
        {
          ::java::util::Comparator result((jobject) NULL);
          OBJ_CALL(result = self->object.getComparator());
          return ::java::util::t_Comparator::wrap_Object(result, &::org::apache::lucene::util::PY_TYPE(BytesRef));
        }

        static PyObject *t_OfflineSorter_sort(t_OfflineSorter *self, PyObject *args)
        {
          ::java::io::File a0((jobject) NULL);
          ::java::io::File a1((jobject) NULL);
          ::org::apache::lucene::util::OfflineSorter$SortInfo result((jobject) NULL);

          if (!parseArgs(args, "kk", ::java::io::File::initializeClass, ::java::io::File::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = self->object.sort(a0, a1));
            return ::org::apache::lucene::util::t_OfflineSorter$SortInfo::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "sort", args);
          return NULL;
        }

        static PyObject *t_OfflineSorter_get__comparator(t_OfflineSorter *self, void *data)
        {
          ::java::util::Comparator value((jobject) NULL);
          OBJ_CALL(value = self->object.getComparator());
          return ::java::util::t_Comparator::wrap_Object(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/LiveDocsFormat.h"
#include "org/apache/lucene/util/Bits.h"
#include "org/apache/lucene/util/MutableBits.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/index/SegmentCommitInfo.h"
#include "org/apache/lucene/store/IOContext.h"
#include "org/apache/lucene/store/Directory.h"
#include "java/lang/String.h"
#include "java/util/Collection.h"
#include "java/io/IOException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {

        ::java::lang::Class *LiveDocsFormat::class$ = NULL;
        jmethodID *LiveDocsFormat::mids$ = NULL;
        bool LiveDocsFormat::live$ = false;

        jclass LiveDocsFormat::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/LiveDocsFormat");

            mids$ = new jmethodID[max_mid];
            mids$[mid_files_cb8dcbcf] = env->getMethodID(cls, "files", "(Lorg/apache/lucene/index/SegmentCommitInfo;Ljava/util/Collection;)V");
            mids$[mid_newLiveDocs_f311e97a] = env->getMethodID(cls, "newLiveDocs", "(I)Lorg/apache/lucene/util/MutableBits;");
            mids$[mid_newLiveDocs_e3a7ca1a] = env->getMethodID(cls, "newLiveDocs", "(Lorg/apache/lucene/util/Bits;)Lorg/apache/lucene/util/MutableBits;");
            mids$[mid_readLiveDocs_60c7b77b] = env->getMethodID(cls, "readLiveDocs", "(Lorg/apache/lucene/store/Directory;Lorg/apache/lucene/index/SegmentCommitInfo;Lorg/apache/lucene/store/IOContext;)Lorg/apache/lucene/util/Bits;");
            mids$[mid_writeLiveDocs_37123b35] = env->getMethodID(cls, "writeLiveDocs", "(Lorg/apache/lucene/util/MutableBits;Lorg/apache/lucene/store/Directory;Lorg/apache/lucene/index/SegmentCommitInfo;ILorg/apache/lucene/store/IOContext;)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        void LiveDocsFormat::files(const ::org::apache::lucene::index::SegmentCommitInfo & a0, const ::java::util::Collection & a1) const
        {
          env->callVoidMethod(this$, mids$[mid_files_cb8dcbcf], a0.this$, a1.this$);
        }

        ::org::apache::lucene::util::MutableBits LiveDocsFormat::newLiveDocs(jint a0) const
        {
          return ::org::apache::lucene::util::MutableBits(env->callObjectMethod(this$, mids$[mid_newLiveDocs_f311e97a], a0));
        }

        ::org::apache::lucene::util::MutableBits LiveDocsFormat::newLiveDocs(const ::org::apache::lucene::util::Bits & a0) const
        {
          return ::org::apache::lucene::util::MutableBits(env->callObjectMethod(this$, mids$[mid_newLiveDocs_e3a7ca1a], a0.this$));
        }

        ::org::apache::lucene::util::Bits LiveDocsFormat::readLiveDocs(const ::org::apache::lucene::store::Directory & a0, const ::org::apache::lucene::index::SegmentCommitInfo & a1, const ::org::apache::lucene::store::IOContext & a2) const
        {
          return ::org::apache::lucene::util::Bits(env->callObjectMethod(this$, mids$[mid_readLiveDocs_60c7b77b], a0.this$, a1.this$, a2.this$));
        }

        void LiveDocsFormat::writeLiveDocs(const ::org::apache::lucene::util::MutableBits & a0, const ::org::apache::lucene::store::Directory & a1, const ::org::apache::lucene::index::SegmentCommitInfo & a2, jint a3, const ::org::apache::lucene::store::IOContext & a4) const
        {
          env->callVoidMethod(this$, mids$[mid_writeLiveDocs_37123b35], a0.this$, a1.this$, a2.this$, a3, a4.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        static PyObject *t_LiveDocsFormat_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_LiveDocsFormat_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_LiveDocsFormat_files(t_LiveDocsFormat *self, PyObject *args);
        static PyObject *t_LiveDocsFormat_newLiveDocs(t_LiveDocsFormat *self, PyObject *args);
        static PyObject *t_LiveDocsFormat_readLiveDocs(t_LiveDocsFormat *self, PyObject *args);
        static PyObject *t_LiveDocsFormat_writeLiveDocs(t_LiveDocsFormat *self, PyObject *args);

        static PyMethodDef t_LiveDocsFormat__methods_[] = {
          DECLARE_METHOD(t_LiveDocsFormat, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_LiveDocsFormat, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_LiveDocsFormat, files, METH_VARARGS),
          DECLARE_METHOD(t_LiveDocsFormat, newLiveDocs, METH_VARARGS),
          DECLARE_METHOD(t_LiveDocsFormat, readLiveDocs, METH_VARARGS),
          DECLARE_METHOD(t_LiveDocsFormat, writeLiveDocs, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(LiveDocsFormat, t_LiveDocsFormat, ::java::lang::Object, LiveDocsFormat, abstract_init, 0, 0, 0, 0, 0);

        void t_LiveDocsFormat::install(PyObject *module)
        {
          installType(&PY_TYPE(LiveDocsFormat), module, "LiveDocsFormat", 0);
        }

        void t_LiveDocsFormat::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(LiveDocsFormat).tp_dict, "class_", make_descriptor(LiveDocsFormat::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(LiveDocsFormat).tp_dict, "wrapfn_", make_descriptor(t_LiveDocsFormat::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(LiveDocsFormat).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_LiveDocsFormat_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, LiveDocsFormat::initializeClass, 1)))
            return NULL;
          return t_LiveDocsFormat::wrap_Object(LiveDocsFormat(((t_LiveDocsFormat *) arg)->object.this$));
        }
        static PyObject *t_LiveDocsFormat_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, LiveDocsFormat::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_LiveDocsFormat_files(t_LiveDocsFormat *self, PyObject *args)
        {
          ::org::apache::lucene::index::SegmentCommitInfo a0((jobject) NULL);
          ::java::util::Collection a1((jobject) NULL);
          PyTypeObject **p1;

          if (!parseArgs(args, "kK", ::org::apache::lucene::index::SegmentCommitInfo::initializeClass, ::java::util::Collection::initializeClass, &a0, &a1, &p1, ::java::util::t_Collection::parameters_))
          {
            OBJ_CALL(self->object.files(a0, a1));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "files", args);
          return NULL;
        }

        static PyObject *t_LiveDocsFormat_newLiveDocs(t_LiveDocsFormat *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              jint a0;
              ::org::apache::lucene::util::MutableBits result((jobject) NULL);

              if (!parseArgs(args, "I", &a0))
              {
                OBJ_CALL(result = self->object.newLiveDocs(a0));
                return ::org::apache::lucene::util::t_MutableBits::wrap_Object(result);
              }
            }
            {
              ::org::apache::lucene::util::Bits a0((jobject) NULL);
              ::org::apache::lucene::util::MutableBits result((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::util::Bits::initializeClass, &a0))
              {
                OBJ_CALL(result = self->object.newLiveDocs(a0));
                return ::org::apache::lucene::util::t_MutableBits::wrap_Object(result);
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "newLiveDocs", args);
          return NULL;
        }

        static PyObject *t_LiveDocsFormat_readLiveDocs(t_LiveDocsFormat *self, PyObject *args)
        {
          ::org::apache::lucene::store::Directory a0((jobject) NULL);
          ::org::apache::lucene::index::SegmentCommitInfo a1((jobject) NULL);
          ::org::apache::lucene::store::IOContext a2((jobject) NULL);
          ::org::apache::lucene::util::Bits result((jobject) NULL);

          if (!parseArgs(args, "kkk", ::org::apache::lucene::store::Directory::initializeClass, ::org::apache::lucene::index::SegmentCommitInfo::initializeClass, ::org::apache::lucene::store::IOContext::initializeClass, &a0, &a1, &a2))
          {
            OBJ_CALL(result = self->object.readLiveDocs(a0, a1, a2));
            return ::org::apache::lucene::util::t_Bits::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "readLiveDocs", args);
          return NULL;
        }

        static PyObject *t_LiveDocsFormat_writeLiveDocs(t_LiveDocsFormat *self, PyObject *args)
        {
          ::org::apache::lucene::util::MutableBits a0((jobject) NULL);
          ::org::apache::lucene::store::Directory a1((jobject) NULL);
          ::org::apache::lucene::index::SegmentCommitInfo a2((jobject) NULL);
          jint a3;
          ::org::apache::lucene::store::IOContext a4((jobject) NULL);

          if (!parseArgs(args, "kkkIk", ::org::apache::lucene::util::MutableBits::initializeClass, ::org::apache::lucene::store::Directory::initializeClass, ::org::apache::lucene::index::SegmentCommitInfo::initializeClass, ::org::apache::lucene::store::IOContext::initializeClass, &a0, &a1, &a2, &a3, &a4))
          {
            OBJ_CALL(self->object.writeLiveDocs(a0, a1, a2, a3, a4));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "writeLiveDocs", args);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/store/LockStressTest.h"
#include "java/lang/String.h"
#include "java/lang/Exception.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {

        ::java::lang::Class *LockStressTest::class$ = NULL;
        jmethodID *LockStressTest::mids$ = NULL;
        bool LockStressTest::live$ = false;

        jclass LockStressTest::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/store/LockStressTest");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_main_4dd4540c] = env->getStaticMethodID(cls, "main", "([Ljava/lang/String;)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        LockStressTest::LockStressTest() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        void LockStressTest::main(const JArray< ::java::lang::String > & a0)
        {
          jclass cls = env->getClass(initializeClass);
          env->callStaticVoidMethod(cls, mids$[mid_main_4dd4540c], a0.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {
        static PyObject *t_LockStressTest_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_LockStressTest_instance_(PyTypeObject *type, PyObject *arg);
        static int t_LockStressTest_init_(t_LockStressTest *self, PyObject *args, PyObject *kwds);
        static PyObject *t_LockStressTest_main(PyTypeObject *type, PyObject *arg);

        static PyMethodDef t_LockStressTest__methods_[] = {
          DECLARE_METHOD(t_LockStressTest, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_LockStressTest, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_LockStressTest, main, METH_O | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(LockStressTest, t_LockStressTest, ::java::lang::Object, LockStressTest, t_LockStressTest_init_, 0, 0, 0, 0, 0);

        void t_LockStressTest::install(PyObject *module)
        {
          installType(&PY_TYPE(LockStressTest), module, "LockStressTest", 0);
        }

        void t_LockStressTest::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(LockStressTest).tp_dict, "class_", make_descriptor(LockStressTest::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(LockStressTest).tp_dict, "wrapfn_", make_descriptor(t_LockStressTest::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(LockStressTest).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_LockStressTest_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, LockStressTest::initializeClass, 1)))
            return NULL;
          return t_LockStressTest::wrap_Object(LockStressTest(((t_LockStressTest *) arg)->object.this$));
        }
        static PyObject *t_LockStressTest_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, LockStressTest::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_LockStressTest_init_(t_LockStressTest *self, PyObject *args, PyObject *kwds)
        {
          LockStressTest object((jobject) NULL);

          INT_CALL(object = LockStressTest());
          self->object = object;

          return 0;
        }

        static PyObject *t_LockStressTest_main(PyTypeObject *type, PyObject *arg)
        {
          JArray< ::java::lang::String > a0((jobject) NULL);

          if (!parseArg(arg, "[s", &a0))
          {
            OBJ_CALL(::org::apache::lucene::store::LockStressTest::main(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError(type, "main", arg);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/facet/taxonomy/OrdinalsReader.h"
#include "org/apache/lucene/facet/taxonomy/OrdinalsReader$OrdinalsSegmentReader.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace taxonomy {

          ::java::lang::Class *OrdinalsReader::class$ = NULL;
          jmethodID *OrdinalsReader::mids$ = NULL;
          bool OrdinalsReader::live$ = false;

          jclass OrdinalsReader::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/facet/taxonomy/OrdinalsReader");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_getIndexFieldName_14c7b5c5] = env->getMethodID(cls, "getIndexFieldName", "()Ljava/lang/String;");
              mids$[mid_getReader_7c7f912a] = env->getMethodID(cls, "getReader", "(Lorg/apache/lucene/index/AtomicReaderContext;)Lorg/apache/lucene/facet/taxonomy/OrdinalsReader$OrdinalsSegmentReader;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          OrdinalsReader::OrdinalsReader() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          ::java::lang::String OrdinalsReader::getIndexFieldName() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getIndexFieldName_14c7b5c5]));
          }

          ::org::apache::lucene::facet::taxonomy::OrdinalsReader$OrdinalsSegmentReader OrdinalsReader::getReader(const ::org::apache::lucene::index::AtomicReaderContext & a0) const
          {
            return ::org::apache::lucene::facet::taxonomy::OrdinalsReader$OrdinalsSegmentReader(env->callObjectMethod(this$, mids$[mid_getReader_7c7f912a], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace taxonomy {
          static PyObject *t_OrdinalsReader_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_OrdinalsReader_instance_(PyTypeObject *type, PyObject *arg);
          static int t_OrdinalsReader_init_(t_OrdinalsReader *self, PyObject *args, PyObject *kwds);
          static PyObject *t_OrdinalsReader_getIndexFieldName(t_OrdinalsReader *self);
          static PyObject *t_OrdinalsReader_getReader(t_OrdinalsReader *self, PyObject *arg);
          static PyObject *t_OrdinalsReader_get__indexFieldName(t_OrdinalsReader *self, void *data);
          static PyGetSetDef t_OrdinalsReader__fields_[] = {
            DECLARE_GET_FIELD(t_OrdinalsReader, indexFieldName),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_OrdinalsReader__methods_[] = {
            DECLARE_METHOD(t_OrdinalsReader, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_OrdinalsReader, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_OrdinalsReader, getIndexFieldName, METH_NOARGS),
            DECLARE_METHOD(t_OrdinalsReader, getReader, METH_O),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(OrdinalsReader, t_OrdinalsReader, ::java::lang::Object, OrdinalsReader, t_OrdinalsReader_init_, 0, 0, t_OrdinalsReader__fields_, 0, 0);

          void t_OrdinalsReader::install(PyObject *module)
          {
            installType(&PY_TYPE(OrdinalsReader), module, "OrdinalsReader", 0);
            PyDict_SetItemString(PY_TYPE(OrdinalsReader).tp_dict, "OrdinalsSegmentReader", make_descriptor(&PY_TYPE(OrdinalsReader$OrdinalsSegmentReader)));
          }

          void t_OrdinalsReader::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(OrdinalsReader).tp_dict, "class_", make_descriptor(OrdinalsReader::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(OrdinalsReader).tp_dict, "wrapfn_", make_descriptor(t_OrdinalsReader::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(OrdinalsReader).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_OrdinalsReader_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, OrdinalsReader::initializeClass, 1)))
              return NULL;
            return t_OrdinalsReader::wrap_Object(OrdinalsReader(((t_OrdinalsReader *) arg)->object.this$));
          }
          static PyObject *t_OrdinalsReader_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, OrdinalsReader::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_OrdinalsReader_init_(t_OrdinalsReader *self, PyObject *args, PyObject *kwds)
          {
            OrdinalsReader object((jobject) NULL);

            INT_CALL(object = OrdinalsReader());
            self->object = object;

            return 0;
          }

          static PyObject *t_OrdinalsReader_getIndexFieldName(t_OrdinalsReader *self)
          {
            ::java::lang::String result((jobject) NULL);
            OBJ_CALL(result = self->object.getIndexFieldName());
            return j2p(result);
          }

          static PyObject *t_OrdinalsReader_getReader(t_OrdinalsReader *self, PyObject *arg)
          {
            ::org::apache::lucene::index::AtomicReaderContext a0((jobject) NULL);
            ::org::apache::lucene::facet::taxonomy::OrdinalsReader$OrdinalsSegmentReader result((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.getReader(a0));
              return ::org::apache::lucene::facet::taxonomy::t_OrdinalsReader$OrdinalsSegmentReader::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "getReader", arg);
            return NULL;
          }

          static PyObject *t_OrdinalsReader_get__indexFieldName(t_OrdinalsReader *self, void *data)
          {
            ::java::lang::String value((jobject) NULL);
            OBJ_CALL(value = self->object.getIndexFieldName());
            return j2p(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/reverse/ReverseStringFilter.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "org/apache/lucene/util/Version.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace reverse {

          ::java::lang::Class *ReverseStringFilter::class$ = NULL;
          jmethodID *ReverseStringFilter::mids$ = NULL;
          bool ReverseStringFilter::live$ = false;
          jchar ReverseStringFilter::INFORMATION_SEPARATOR_MARKER = (jchar) 0;
          jchar ReverseStringFilter::PUA_EC00_MARKER = (jchar) 0;
          jchar ReverseStringFilter::RTL_DIRECTION_MARKER = (jchar) 0;
          jchar ReverseStringFilter::START_OF_HEADING_MARKER = (jchar) 0;

          jclass ReverseStringFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/reverse/ReverseStringFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_8f50e725] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/analysis/TokenStream;)V");
              mids$[mid_init$_0e43cbd7] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/analysis/TokenStream;C)V");
              mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");
              mids$[mid_reverse_4b169143] = env->getStaticMethodID(cls, "reverse", "(Lorg/apache/lucene/util/Version;[C)V");
              mids$[mid_reverse_4fcde068] = env->getStaticMethodID(cls, "reverse", "(Lorg/apache/lucene/util/Version;Ljava/lang/String;)Ljava/lang/String;");
              mids$[mid_reverse_dcd30fdb] = env->getStaticMethodID(cls, "reverse", "(Lorg/apache/lucene/util/Version;[CI)V");
              mids$[mid_reverse_41701017] = env->getStaticMethodID(cls, "reverse", "(Lorg/apache/lucene/util/Version;[CII)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              INFORMATION_SEPARATOR_MARKER = env->getStaticCharField(cls, "INFORMATION_SEPARATOR_MARKER");
              PUA_EC00_MARKER = env->getStaticCharField(cls, "PUA_EC00_MARKER");
              RTL_DIRECTION_MARKER = env->getStaticCharField(cls, "RTL_DIRECTION_MARKER");
              START_OF_HEADING_MARKER = env->getStaticCharField(cls, "START_OF_HEADING_MARKER");
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ReverseStringFilter::ReverseStringFilter(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::analysis::TokenStream & a1) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_8f50e725, a0.this$, a1.this$)) {}

          ReverseStringFilter::ReverseStringFilter(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::analysis::TokenStream & a1, jchar a2) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_0e43cbd7, a0.this$, a1.this$, a2)) {}

          jboolean ReverseStringFilter::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_54c6a16a]);
          }

          void ReverseStringFilter::reverse(const ::org::apache::lucene::util::Version & a0, const JArray< jchar > & a1)
          {
            jclass cls = env->getClass(initializeClass);
            env->callStaticVoidMethod(cls, mids$[mid_reverse_4b169143], a0.this$, a1.this$);
          }

          ::java::lang::String ReverseStringFilter::reverse(const ::org::apache::lucene::util::Version & a0, const ::java::lang::String & a1)
          {
            jclass cls = env->getClass(initializeClass);
            return ::java::lang::String(env->callStaticObjectMethod(cls, mids$[mid_reverse_4fcde068], a0.this$, a1.this$));
          }

          void ReverseStringFilter::reverse(const ::org::apache::lucene::util::Version & a0, const JArray< jchar > & a1, jint a2)
          {
            jclass cls = env->getClass(initializeClass);
            env->callStaticVoidMethod(cls, mids$[mid_reverse_dcd30fdb], a0.this$, a1.this$, a2);
          }

          void ReverseStringFilter::reverse(const ::org::apache::lucene::util::Version & a0, const JArray< jchar > & a1, jint a2, jint a3)
          {
            jclass cls = env->getClass(initializeClass);
            env->callStaticVoidMethod(cls, mids$[mid_reverse_41701017], a0.this$, a1.this$, a2, a3);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace reverse {
          static PyObject *t_ReverseStringFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_ReverseStringFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_ReverseStringFilter_init_(t_ReverseStringFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_ReverseStringFilter_incrementToken(t_ReverseStringFilter *self, PyObject *args);
          static PyObject *t_ReverseStringFilter_reverse(PyTypeObject *type, PyObject *args);

          static PyMethodDef t_ReverseStringFilter__methods_[] = {
            DECLARE_METHOD(t_ReverseStringFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ReverseStringFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ReverseStringFilter, incrementToken, METH_VARARGS),
            DECLARE_METHOD(t_ReverseStringFilter, reverse, METH_VARARGS | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(ReverseStringFilter, t_ReverseStringFilter, ::org::apache::lucene::analysis::TokenFilter, ReverseStringFilter, t_ReverseStringFilter_init_, 0, 0, 0, 0, 0);

          void t_ReverseStringFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(ReverseStringFilter), module, "ReverseStringFilter", 0);
          }

          void t_ReverseStringFilter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(ReverseStringFilter).tp_dict, "class_", make_descriptor(ReverseStringFilter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(ReverseStringFilter).tp_dict, "wrapfn_", make_descriptor(t_ReverseStringFilter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(ReverseStringFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(ReverseStringFilter::initializeClass);
            PyDict_SetItemString(PY_TYPE(ReverseStringFilter).tp_dict, "INFORMATION_SEPARATOR_MARKER", make_descriptor(ReverseStringFilter::INFORMATION_SEPARATOR_MARKER));
            PyDict_SetItemString(PY_TYPE(ReverseStringFilter).tp_dict, "PUA_EC00_MARKER", make_descriptor(ReverseStringFilter::PUA_EC00_MARKER));
            PyDict_SetItemString(PY_TYPE(ReverseStringFilter).tp_dict, "RTL_DIRECTION_MARKER", make_descriptor(ReverseStringFilter::RTL_DIRECTION_MARKER));
            PyDict_SetItemString(PY_TYPE(ReverseStringFilter).tp_dict, "START_OF_HEADING_MARKER", make_descriptor(ReverseStringFilter::START_OF_HEADING_MARKER));
          }

          static PyObject *t_ReverseStringFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, ReverseStringFilter::initializeClass, 1)))
              return NULL;
            return t_ReverseStringFilter::wrap_Object(ReverseStringFilter(((t_ReverseStringFilter *) arg)->object.this$));
          }
          static PyObject *t_ReverseStringFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, ReverseStringFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_ReverseStringFilter_init_(t_ReverseStringFilter *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 2:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                ::org::apache::lucene::analysis::TokenStream a1((jobject) NULL);
                ReverseStringFilter object((jobject) NULL);

                if (!parseArgs(args, "Kk", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1))
                {
                  INT_CALL(object = ReverseStringFilter(a0, a1));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 3:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                ::org::apache::lucene::analysis::TokenStream a1((jobject) NULL);
                jchar a2;
                ReverseStringFilter object((jobject) NULL);

                if (!parseArgs(args, "KkC", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1, &a2))
                {
                  INT_CALL(object = ReverseStringFilter(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_ReverseStringFilter_incrementToken(t_ReverseStringFilter *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(ReverseStringFilter), (PyObject *) self, "incrementToken", args, 2);
          }

          static PyObject *t_ReverseStringFilter_reverse(PyTypeObject *type, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 2:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                JArray< jchar > a1((jobject) NULL);

                if (!parseArgs(args, "K[C", ::org::apache::lucene::util::Version::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1))
                {
                  OBJ_CALL(::org::apache::lucene::analysis::reverse::ReverseStringFilter::reverse(a0, a1));
                  Py_RETURN_NONE;
                }
              }
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                ::java::lang::String a1((jobject) NULL);
                ::java::lang::String result((jobject) NULL);

                if (!parseArgs(args, "Ks", ::org::apache::lucene::util::Version::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1))
                {
                  OBJ_CALL(result = ::org::apache::lucene::analysis::reverse::ReverseStringFilter::reverse(a0, a1));
                  return j2p(result);
                }
              }
              break;
             case 3:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                JArray< jchar > a1((jobject) NULL);
                jint a2;

                if (!parseArgs(args, "K[CI", ::org::apache::lucene::util::Version::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1, &a2))
                {
                  OBJ_CALL(::org::apache::lucene::analysis::reverse::ReverseStringFilter::reverse(a0, a1, a2));
                  Py_RETURN_NONE;
                }
              }
              break;
             case 4:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                JArray< jchar > a1((jobject) NULL);
                jint a2;
                jint a3;

                if (!parseArgs(args, "K[CII", ::org::apache::lucene::util::Version::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1, &a2, &a3))
                {
                  OBJ_CALL(::org::apache::lucene::analysis::reverse::ReverseStringFilter::reverse(a0, a1, a2, a3));
                  Py_RETURN_NONE;
                }
              }
            }

            PyErr_SetArgsError(type, "reverse", args);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "java/util/TreeSet.h"
#include "java/util/SortedSet.h"
#include "java/lang/Class.h"
#include "java/util/Spliterator.h"
#include "java/lang/Object.h"
#include "java/lang/Cloneable.h"
#include "java/util/Comparator.h"
#include "java/util/Iterator.h"
#include "java/util/Collection.h"
#include "java/util/NavigableSet.h"
#include "java/io/Serializable.h"
#include "JArray.h"

namespace java {
  namespace util {

    ::java::lang::Class *TreeSet::class$ = NULL;
    jmethodID *TreeSet::mids$ = NULL;
    bool TreeSet::live$ = false;

    jclass TreeSet::initializeClass(bool getOnly)
    {
      if (getOnly)
        return (jclass) (live$ ? class$->this$ : NULL);
      if (class$ == NULL)
      {
        jclass cls = (jclass) env->findClass("java/util/TreeSet");

        mids$ = new jmethodID[max_mid];
        mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
        mids$[mid_init$_6ffdd545] = env->getMethodID(cls, "<init>", "(Ljava/util/Comparator;)V");
        mids$[mid_init$_0c3f2ecf] = env->getMethodID(cls, "<init>", "(Ljava/util/SortedSet;)V");
        mids$[mid_init$_9bfb370d] = env->getMethodID(cls, "<init>", "(Ljava/util/Collection;)V");
        mids$[mid_add_290588e2] = env->getMethodID(cls, "add", "(Ljava/lang/Object;)Z");
        mids$[mid_addAll_9bfb3701] = env->getMethodID(cls, "addAll", "(Ljava/util/Collection;)Z");
        mids$[mid_ceiling_a932a95f] = env->getMethodID(cls, "ceiling", "(Ljava/lang/Object;)Ljava/lang/Object;");
        mids$[mid_clear_54c6a166] = env->getMethodID(cls, "clear", "()V");
        mids$[mid_clone_846352c3] = env->getMethodID(cls, "clone", "()Ljava/lang/Object;");
        mids$[mid_comparator_5a7ff2fc] = env->getMethodID(cls, "comparator", "()Ljava/util/Comparator;");
        mids$[mid_contains_290588e2] = env->getMethodID(cls, "contains", "(Ljava/lang/Object;)Z");
        mids$[mid_descendingIterator_40858c90] = env->getMethodID(cls, "descendingIterator", "()Ljava/util/Iterator;");
        mids$[mid_descendingSet_1d81e42d] = env->getMethodID(cls, "descendingSet", "()Ljava/util/NavigableSet;");
        mids$[mid_first_846352c3] = env->getMethodID(cls, "first", "()Ljava/lang/Object;");
        mids$[mid_floor_a932a95f] = env->getMethodID(cls, "floor", "(Ljava/lang/Object;)Ljava/lang/Object;");
        mids$[mid_headSet_39f27c22] = env->getMethodID(cls, "headSet", "(Ljava/lang/Object;)Ljava/util/SortedSet;");
        mids$[mid_headSet_a72e541e] = env->getMethodID(cls, "headSet", "(Ljava/lang/Object;Z)Ljava/util/NavigableSet;");
        mids$[mid_higher_a932a95f] = env->getMethodID(cls, "higher", "(Ljava/lang/Object;)Ljava/lang/Object;");
        mids$[mid_isEmpty_54c6a16a] = env->getMethodID(cls, "isEmpty", "()Z");
        mids$[mid_iterator_40858c90] = env->getMethodID(cls, "iterator", "()Ljava/util/Iterator;");
        mids$[mid_last_846352c3] = env->getMethodID(cls, "last", "()Ljava/lang/Object;");
        mids$[mid_lower_a932a95f] = env->getMethodID(cls, "lower", "(Ljava/lang/Object;)Ljava/lang/Object;");
        mids$[mid_pollFirst_846352c3] = env->getMethodID(cls, "pollFirst", "()Ljava/lang/Object;");
        mids$[mid_pollLast_846352c3] = env->getMethodID(cls, "pollLast", "()Ljava/lang/Object;");
        mids$[mid_remove_290588e2] = env->getMethodID(cls, "remove", "(Ljava/lang/Object;)Z");
        mids$[mid_size_54c6a179] = env->getMethodID(cls, "size", "()I");
        mids$[mid_spliterator_59b28390] = env->getMethodID(cls, "spliterator", "()Ljava/util/Spliterator;");
        mids$[mid_subSet_cf2accb6] = env->getMethodID(cls, "subSet", "(Ljava/lang/Object;Ljava/lang/Object;)Ljava/util/SortedSet;");
        mids$[mid_subSet_34a398b7] = env->getMethodID(cls, "subSet", "(Ljava/lang/Object;ZLjava/lang/Object;Z)Ljava/util/NavigableSet;");
        mids$[mid_tailSet_39f27c22] = env->getMethodID(cls, "tailSet", "(Ljava/lang/Object;)Ljava/util/SortedSet;");
        mids$[mid_tailSet_a72e541e] = env->getMethodID(cls, "tailSet", "(Ljava/lang/Object;Z)Ljava/util/NavigableSet;");

        class$ = (::java::lang::Class *) new JObject(cls);
        live$ = true;
      }
      return (jclass) class$->this$;
    }

    TreeSet::TreeSet() : ::java::util::AbstractSet(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

    TreeSet::TreeSet(const ::java::util::Comparator & a0) : ::java::util::AbstractSet(env->newObject(initializeClass, &mids$, mid_init$_6ffdd545, a0.this$)) {}

    TreeSet::TreeSet(const ::java::util::SortedSet & a0) : ::java::util::AbstractSet(env->newObject(initializeClass, &mids$, mid_init$_0c3f2ecf, a0.this$)) {}

    TreeSet::TreeSet(const ::java::util::Collection & a0) : ::java::util::AbstractSet(env->newObject(initializeClass, &mids$, mid_init$_9bfb370d, a0.this$)) {}

    jboolean TreeSet::add(const ::java::lang::Object & a0) const
    {
      return env->callBooleanMethod(this$, mids$[mid_add_290588e2], a0.this$);
    }

    jboolean TreeSet::addAll(const ::java::util::Collection & a0) const
    {
      return env->callBooleanMethod(this$, mids$[mid_addAll_9bfb3701], a0.this$);
    }

    ::java::lang::Object TreeSet::ceiling(const ::java::lang::Object & a0) const
    {
      return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_ceiling_a932a95f], a0.this$));
    }

    void TreeSet::clear() const
    {
      env->callVoidMethod(this$, mids$[mid_clear_54c6a166]);
    }

    ::java::lang::Object TreeSet::clone() const
    {
      return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_clone_846352c3]));
    }

    ::java::util::Comparator TreeSet::comparator() const
    {
      return ::java::util::Comparator(env->callObjectMethod(this$, mids$[mid_comparator_5a7ff2fc]));
    }

    jboolean TreeSet::contains(const ::java::lang::Object & a0) const
    {
      return env->callBooleanMethod(this$, mids$[mid_contains_290588e2], a0.this$);
    }

    ::java::util::Iterator TreeSet::descendingIterator() const
    {
      return ::java::util::Iterator(env->callObjectMethod(this$, mids$[mid_descendingIterator_40858c90]));
    }

    ::java::util::NavigableSet TreeSet::descendingSet() const
    {
      return ::java::util::NavigableSet(env->callObjectMethod(this$, mids$[mid_descendingSet_1d81e42d]));
    }

    ::java::lang::Object TreeSet::first() const
    {
      return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_first_846352c3]));
    }

    ::java::lang::Object TreeSet::floor(const ::java::lang::Object & a0) const
    {
      return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_floor_a932a95f], a0.this$));
    }

    ::java::util::SortedSet TreeSet::headSet(const ::java::lang::Object & a0) const
    {
      return ::java::util::SortedSet(env->callObjectMethod(this$, mids$[mid_headSet_39f27c22], a0.this$));
    }

    ::java::util::NavigableSet TreeSet::headSet(const ::java::lang::Object & a0, jboolean a1) const
    {
      return ::java::util::NavigableSet(env->callObjectMethod(this$, mids$[mid_headSet_a72e541e], a0.this$, a1));
    }

    ::java::lang::Object TreeSet::higher(const ::java::lang::Object & a0) const
    {
      return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_higher_a932a95f], a0.this$));
    }

    jboolean TreeSet::isEmpty() const
    {
      return env->callBooleanMethod(this$, mids$[mid_isEmpty_54c6a16a]);
    }

    ::java::util::Iterator TreeSet::iterator() const
    {
      return ::java::util::Iterator(env->callObjectMethod(this$, mids$[mid_iterator_40858c90]));
    }

    ::java::lang::Object TreeSet::last() const
    {
      return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_last_846352c3]));
    }

    ::java::lang::Object TreeSet::lower(const ::java::lang::Object & a0) const
    {
      return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_lower_a932a95f], a0.this$));
    }

    ::java::lang::Object TreeSet::pollFirst() const
    {
      return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_pollFirst_846352c3]));
    }

    ::java::lang::Object TreeSet::pollLast() const
    {
      return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_pollLast_846352c3]));
    }

    jboolean TreeSet::remove(const ::java::lang::Object & a0) const
    {
      return env->callBooleanMethod(this$, mids$[mid_remove_290588e2], a0.this$);
    }

    jint TreeSet::size() const
    {
      return env->callIntMethod(this$, mids$[mid_size_54c6a179]);
    }

    ::java::util::Spliterator TreeSet::spliterator() const
    {
      return ::java::util::Spliterator(env->callObjectMethod(this$, mids$[mid_spliterator_59b28390]));
    }

    ::java::util::SortedSet TreeSet::subSet(const ::java::lang::Object & a0, const ::java::lang::Object & a1) const
    {
      return ::java::util::SortedSet(env->callObjectMethod(this$, mids$[mid_subSet_cf2accb6], a0.this$, a1.this$));
    }

    ::java::util::NavigableSet TreeSet::subSet(const ::java::lang::Object & a0, jboolean a1, const ::java::lang::Object & a2, jboolean a3) const
    {
      return ::java::util::NavigableSet(env->callObjectMethod(this$, mids$[mid_subSet_34a398b7], a0.this$, a1, a2.this$, a3));
    }

    ::java::util::SortedSet TreeSet::tailSet(const ::java::lang::Object & a0) const
    {
      return ::java::util::SortedSet(env->callObjectMethod(this$, mids$[mid_tailSet_39f27c22], a0.this$));
    }

    ::java::util::NavigableSet TreeSet::tailSet(const ::java::lang::Object & a0, jboolean a1) const
    {
      return ::java::util::NavigableSet(env->callObjectMethod(this$, mids$[mid_tailSet_a72e541e], a0.this$, a1));
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace java {
  namespace util {
    static PyObject *t_TreeSet_cast_(PyTypeObject *type, PyObject *arg);
    static PyObject *t_TreeSet_instance_(PyTypeObject *type, PyObject *arg);
    static PyObject *t_TreeSet_of_(t_TreeSet *self, PyObject *args);
    static int t_TreeSet_init_(t_TreeSet *self, PyObject *args, PyObject *kwds);
    static PyObject *t_TreeSet_add(t_TreeSet *self, PyObject *args);
    static PyObject *t_TreeSet_addAll(t_TreeSet *self, PyObject *args);
    static PyObject *t_TreeSet_ceiling(t_TreeSet *self, PyObject *arg);
    static PyObject *t_TreeSet_clear(t_TreeSet *self, PyObject *args);
    static PyObject *t_TreeSet_clone(t_TreeSet *self);
    static PyObject *t_TreeSet_comparator(t_TreeSet *self);
    static PyObject *t_TreeSet_contains(t_TreeSet *self, PyObject *args);
    static PyObject *t_TreeSet_descendingIterator(t_TreeSet *self);
    static PyObject *t_TreeSet_descendingSet(t_TreeSet *self);
    static PyObject *t_TreeSet_first(t_TreeSet *self);
    static PyObject *t_TreeSet_floor(t_TreeSet *self, PyObject *arg);
    static PyObject *t_TreeSet_headSet(t_TreeSet *self, PyObject *args);
    static PyObject *t_TreeSet_higher(t_TreeSet *self, PyObject *arg);
    static PyObject *t_TreeSet_isEmpty(t_TreeSet *self, PyObject *args);
    static PyObject *t_TreeSet_iterator(t_TreeSet *self, PyObject *args);
    static PyObject *t_TreeSet_last(t_TreeSet *self);
    static PyObject *t_TreeSet_lower(t_TreeSet *self, PyObject *arg);
    static PyObject *t_TreeSet_pollFirst(t_TreeSet *self);
    static PyObject *t_TreeSet_pollLast(t_TreeSet *self);
    static PyObject *t_TreeSet_remove(t_TreeSet *self, PyObject *args);
    static PyObject *t_TreeSet_size(t_TreeSet *self, PyObject *args);
    static PyObject *t_TreeSet_spliterator(t_TreeSet *self, PyObject *args);
    static PyObject *t_TreeSet_subSet(t_TreeSet *self, PyObject *args);
    static PyObject *t_TreeSet_tailSet(t_TreeSet *self, PyObject *args);
    static PyObject *t_TreeSet_get__empty(t_TreeSet *self, void *data);
    static PyObject *t_TreeSet_get__parameters_(t_TreeSet *self, void *data);
    static PyGetSetDef t_TreeSet__fields_[] = {
      DECLARE_GET_FIELD(t_TreeSet, empty),
      DECLARE_GET_FIELD(t_TreeSet, parameters_),
      { NULL, NULL, NULL, NULL, NULL }
    };

    static PyMethodDef t_TreeSet__methods_[] = {
      DECLARE_METHOD(t_TreeSet, cast_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_TreeSet, instance_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_TreeSet, of_, METH_VARARGS),
      DECLARE_METHOD(t_TreeSet, add, METH_VARARGS),
      DECLARE_METHOD(t_TreeSet, addAll, METH_VARARGS),
      DECLARE_METHOD(t_TreeSet, ceiling, METH_O),
      DECLARE_METHOD(t_TreeSet, clear, METH_VARARGS),
      DECLARE_METHOD(t_TreeSet, clone, METH_NOARGS),
      DECLARE_METHOD(t_TreeSet, comparator, METH_NOARGS),
      DECLARE_METHOD(t_TreeSet, contains, METH_VARARGS),
      DECLARE_METHOD(t_TreeSet, descendingIterator, METH_NOARGS),
      DECLARE_METHOD(t_TreeSet, descendingSet, METH_NOARGS),
      DECLARE_METHOD(t_TreeSet, first, METH_NOARGS),
      DECLARE_METHOD(t_TreeSet, floor, METH_O),
      DECLARE_METHOD(t_TreeSet, headSet, METH_VARARGS),
      DECLARE_METHOD(t_TreeSet, higher, METH_O),
      DECLARE_METHOD(t_TreeSet, isEmpty, METH_VARARGS),
      DECLARE_METHOD(t_TreeSet, iterator, METH_VARARGS),
      DECLARE_METHOD(t_TreeSet, last, METH_NOARGS),
      DECLARE_METHOD(t_TreeSet, lower, METH_O),
      DECLARE_METHOD(t_TreeSet, pollFirst, METH_NOARGS),
      DECLARE_METHOD(t_TreeSet, pollLast, METH_NOARGS),
      DECLARE_METHOD(t_TreeSet, remove, METH_VARARGS),
      DECLARE_METHOD(t_TreeSet, size, METH_VARARGS),
      DECLARE_METHOD(t_TreeSet, spliterator, METH_VARARGS),
      DECLARE_METHOD(t_TreeSet, subSet, METH_VARARGS),
      DECLARE_METHOD(t_TreeSet, tailSet, METH_VARARGS),
      { NULL, NULL, 0, NULL }
    };

    DECLARE_TYPE(TreeSet, t_TreeSet, ::java::util::AbstractSet, TreeSet, t_TreeSet_init_, ((PyObject *(*)(t_TreeSet *)) get_generic_iterator< t_TreeSet >), 0, t_TreeSet__fields_, 0, 0);
    PyObject *t_TreeSet::wrap_Object(const TreeSet& object, PyTypeObject *p0)
    {
      PyObject *obj = t_TreeSet::wrap_Object(object);
      if (obj != NULL && obj != Py_None)
      {
        t_TreeSet *self = (t_TreeSet *) obj;
        self->parameters[0] = p0;
      }
      return obj;
    }

    PyObject *t_TreeSet::wrap_jobject(const jobject& object, PyTypeObject *p0)
    {
      PyObject *obj = t_TreeSet::wrap_jobject(object);
      if (obj != NULL && obj != Py_None)
      {
        t_TreeSet *self = (t_TreeSet *) obj;
        self->parameters[0] = p0;
      }
      return obj;
    }

    void t_TreeSet::install(PyObject *module)
    {
      installType(&PY_TYPE(TreeSet), module, "TreeSet", 0);
    }

    void t_TreeSet::initialize(PyObject *module)
    {
      PyDict_SetItemString(PY_TYPE(TreeSet).tp_dict, "class_", make_descriptor(TreeSet::initializeClass, 1));
      PyDict_SetItemString(PY_TYPE(TreeSet).tp_dict, "wrapfn_", make_descriptor(t_TreeSet::wrap_jobject));
      PyDict_SetItemString(PY_TYPE(TreeSet).tp_dict, "boxfn_", make_descriptor(boxObject));
    }

    static PyObject *t_TreeSet_cast_(PyTypeObject *type, PyObject *arg)
    {
      if (!(arg = castCheck(arg, TreeSet::initializeClass, 1)))
        return NULL;
      return t_TreeSet::wrap_Object(TreeSet(((t_TreeSet *) arg)->object.this$));
    }
    static PyObject *t_TreeSet_instance_(PyTypeObject *type, PyObject *arg)
    {
      if (!castCheck(arg, TreeSet::initializeClass, 0))
        Py_RETURN_FALSE;
      Py_RETURN_TRUE;
    }

    static PyObject *t_TreeSet_of_(t_TreeSet *self, PyObject *args)
    {
      if (!parseArg(args, "T", 1, &(self->parameters)))
        Py_RETURN_SELF;
      return PyErr_SetArgsError((PyObject *) self, "of_", args);
    }

    static int t_TreeSet_init_(t_TreeSet *self, PyObject *args, PyObject *kwds)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 0:
        {
          TreeSet object((jobject) NULL);

          INT_CALL(object = TreeSet());
          self->object = object;
          break;
        }
        goto err;
       case 1:
        {
          ::java::util::Comparator a0((jobject) NULL);
          PyTypeObject **p0;
          TreeSet object((jobject) NULL);

          if (!parseArgs(args, "K", ::java::util::Comparator::initializeClass, &a0, &p0, ::java::util::t_Comparator::parameters_))
          {
            INT_CALL(object = TreeSet(a0));
            self->object = object;
            break;
          }
        }
        {
          ::java::util::SortedSet a0((jobject) NULL);
          PyTypeObject **p0;
          TreeSet object((jobject) NULL);

          if (!parseArgs(args, "K", ::java::util::SortedSet::initializeClass, &a0, &p0, ::java::util::t_SortedSet::parameters_))
          {
            INT_CALL(object = TreeSet(a0));
            self->object = object;
            break;
          }
        }
        {
          ::java::util::Collection a0((jobject) NULL);
          PyTypeObject **p0;
          TreeSet object((jobject) NULL);

          if (!parseArgs(args, "K", ::java::util::Collection::initializeClass, &a0, &p0, ::java::util::t_Collection::parameters_))
          {
            INT_CALL(object = TreeSet(a0));
            self->object = object;
            break;
          }
        }
       default:
       err:
        PyErr_SetArgsError((PyObject *) self, "__init__", args);
        return -1;
      }

      return 0;
    }

    static PyObject *t_TreeSet_add(t_TreeSet *self, PyObject *args)
    {
      ::java::lang::Object a0((jobject) NULL);
      jboolean result;

      if (!parseArgs(args, "O", self->parameters[0], &a0))
      {
        OBJ_CALL(result = self->object.add(a0));
        Py_RETURN_BOOL(result);
      }

      return callSuper(&PY_TYPE(TreeSet), (PyObject *) self, "add", args, 2);
    }

    static PyObject *t_TreeSet_addAll(t_TreeSet *self, PyObject *args)
    {
      ::java::util::Collection a0((jobject) NULL);
      PyTypeObject **p0;
      jboolean result;

      if (!parseArgs(args, "K", ::java::util::Collection::initializeClass, &a0, &p0, ::java::util::t_Collection::parameters_))
      {
        OBJ_CALL(result = self->object.addAll(a0));
        Py_RETURN_BOOL(result);
      }

      return callSuper(&PY_TYPE(TreeSet), (PyObject *) self, "addAll", args, 2);
    }

    static PyObject *t_TreeSet_ceiling(t_TreeSet *self, PyObject *arg)
    {
      ::java::lang::Object a0((jobject) NULL);
      ::java::lang::Object result((jobject) NULL);

      if (!parseArg(arg, "O", self->parameters[0], &a0))
      {
        OBJ_CALL(result = self->object.ceiling(a0));
        return self->parameters[0] != NULL ? wrapType(self->parameters[0], result.this$) : ::java::lang::t_Object::wrap_Object(result);
      }

      PyErr_SetArgsError((PyObject *) self, "ceiling", arg);
      return NULL;
    }

    static PyObject *t_TreeSet_clear(t_TreeSet *self, PyObject *args)
    {

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(self->object.clear());
        Py_RETURN_NONE;
      }

      return callSuper(&PY_TYPE(TreeSet), (PyObject *) self, "clear", args, 2);
    }

    static PyObject *t_TreeSet_clone(t_TreeSet *self)
    {
      ::java::lang::Object result((jobject) NULL);
      OBJ_CALL(result = self->object.clone());
      return ::java::lang::t_Object::wrap_Object(result);
    }

    static PyObject *t_TreeSet_comparator(t_TreeSet *self)
    {
      ::java::util::Comparator result((jobject) NULL);
      OBJ_CALL(result = self->object.comparator());
      return ::java::util::t_Comparator::wrap_Object(result);
    }

    static PyObject *t_TreeSet_contains(t_TreeSet *self, PyObject *args)
    {
      ::java::lang::Object a0((jobject) NULL);
      jboolean result;

      if (!parseArgs(args, "o", &a0))
      {
        OBJ_CALL(result = self->object.contains(a0));
        Py_RETURN_BOOL(result);
      }

      return callSuper(&PY_TYPE(TreeSet), (PyObject *) self, "contains", args, 2);
    }

    static PyObject *t_TreeSet_descendingIterator(t_TreeSet *self)
    {
      ::java::util::Iterator result((jobject) NULL);
      OBJ_CALL(result = self->object.descendingIterator());
      return ::java::util::t_Iterator::wrap_Object(result, self->parameters[0]);
    }

    static PyObject *t_TreeSet_descendingSet(t_TreeSet *self)
    {
      ::java::util::NavigableSet result((jobject) NULL);
      OBJ_CALL(result = self->object.descendingSet());
      return ::java::util::t_NavigableSet::wrap_Object(result, self->parameters[0]);
    }

    static PyObject *t_TreeSet_first(t_TreeSet *self)
    {
      ::java::lang::Object result((jobject) NULL);
      OBJ_CALL(result = self->object.first());
      return self->parameters[0] != NULL ? wrapType(self->parameters[0], result.this$) : ::java::lang::t_Object::wrap_Object(result);
    }

    static PyObject *t_TreeSet_floor(t_TreeSet *self, PyObject *arg)
    {
      ::java::lang::Object a0((jobject) NULL);
      ::java::lang::Object result((jobject) NULL);

      if (!parseArg(arg, "O", self->parameters[0], &a0))
      {
        OBJ_CALL(result = self->object.floor(a0));
        return self->parameters[0] != NULL ? wrapType(self->parameters[0], result.this$) : ::java::lang::t_Object::wrap_Object(result);
      }

      PyErr_SetArgsError((PyObject *) self, "floor", arg);
      return NULL;
    }

    static PyObject *t_TreeSet_headSet(t_TreeSet *self, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 1:
        {
          ::java::lang::Object a0((jobject) NULL);
          ::java::util::SortedSet result((jobject) NULL);

          if (!parseArgs(args, "O", self->parameters[0], &a0))
          {
            OBJ_CALL(result = self->object.headSet(a0));
            return ::java::util::t_SortedSet::wrap_Object(result, self->parameters[0]);
          }
        }
        break;
       case 2:
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean a1;
          ::java::util::NavigableSet result((jobject) NULL);

          if (!parseArgs(args, "OZ", self->parameters[0], &a0, &a1))
          {
            OBJ_CALL(result = self->object.headSet(a0, a1));
            return ::java::util::t_NavigableSet::wrap_Object(result, self->parameters[0]);
          }
        }
      }

      PyErr_SetArgsError((PyObject *) self, "headSet", args);
      return NULL;
    }

    static PyObject *t_TreeSet_higher(t_TreeSet *self, PyObject *arg)
    {
      ::java::lang::Object a0((jobject) NULL);
      ::java::lang::Object result((jobject) NULL);

      if (!parseArg(arg, "O", self->parameters[0], &a0))
      {
        OBJ_CALL(result = self->object.higher(a0));
        return self->parameters[0] != NULL ? wrapType(self->parameters[0], result.this$) : ::java::lang::t_Object::wrap_Object(result);
      }

      PyErr_SetArgsError((PyObject *) self, "higher", arg);
      return NULL;
    }

    static PyObject *t_TreeSet_isEmpty(t_TreeSet *self, PyObject *args)
    {
      jboolean result;

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.isEmpty());
        Py_RETURN_BOOL(result);
      }

      return callSuper(&PY_TYPE(TreeSet), (PyObject *) self, "isEmpty", args, 2);
    }

    static PyObject *t_TreeSet_iterator(t_TreeSet *self, PyObject *args)
    {
      ::java::util::Iterator result((jobject) NULL);

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.iterator());
        return ::java::util::t_Iterator::wrap_Object(result, self->parameters[0]);
      }

      return callSuper(&PY_TYPE(TreeSet), (PyObject *) self, "iterator", args, 2);
    }

    static PyObject *t_TreeSet_last(t_TreeSet *self)
    {
      ::java::lang::Object result((jobject) NULL);
      OBJ_CALL(result = self->object.last());
      return self->parameters[0] != NULL ? wrapType(self->parameters[0], result.this$) : ::java::lang::t_Object::wrap_Object(result);
    }

    static PyObject *t_TreeSet_lower(t_TreeSet *self, PyObject *arg)
    {
      ::java::lang::Object a0((jobject) NULL);
      ::java::lang::Object result((jobject) NULL);

      if (!parseArg(arg, "O", self->parameters[0], &a0))
      {
        OBJ_CALL(result = self->object.lower(a0));
        return self->parameters[0] != NULL ? wrapType(self->parameters[0], result.this$) : ::java::lang::t_Object::wrap_Object(result);
      }

      PyErr_SetArgsError((PyObject *) self, "lower", arg);
      return NULL;
    }

    static PyObject *t_TreeSet_pollFirst(t_TreeSet *self)
    {
      ::java::lang::Object result((jobject) NULL);
      OBJ_CALL(result = self->object.pollFirst());
      return self->parameters[0] != NULL ? wrapType(self->parameters[0], result.this$) : ::java::lang::t_Object::wrap_Object(result);
    }

    static PyObject *t_TreeSet_pollLast(t_TreeSet *self)
    {
      ::java::lang::Object result((jobject) NULL);
      OBJ_CALL(result = self->object.pollLast());
      return self->parameters[0] != NULL ? wrapType(self->parameters[0], result.this$) : ::java::lang::t_Object::wrap_Object(result);
    }

    static PyObject *t_TreeSet_remove(t_TreeSet *self, PyObject *args)
    {
      ::java::lang::Object a0((jobject) NULL);
      jboolean result;

      if (!parseArgs(args, "o", &a0))
      {
        OBJ_CALL(result = self->object.remove(a0));
        Py_RETURN_BOOL(result);
      }

      return callSuper(&PY_TYPE(TreeSet), (PyObject *) self, "remove", args, 2);
    }

    static PyObject *t_TreeSet_size(t_TreeSet *self, PyObject *args)
    {
      jint result;

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.size());
        return PyInt_FromLong((long) result);
      }

      return callSuper(&PY_TYPE(TreeSet), (PyObject *) self, "size", args, 2);
    }

    static PyObject *t_TreeSet_spliterator(t_TreeSet *self, PyObject *args)
    {
      ::java::util::Spliterator result((jobject) NULL);

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.spliterator());
        return ::java::util::t_Spliterator::wrap_Object(result, self->parameters[0]);
      }

      return callSuper(&PY_TYPE(TreeSet), (PyObject *) self, "spliterator", args, 2);
    }

    static PyObject *t_TreeSet_subSet(t_TreeSet *self, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 2:
        {
          ::java::lang::Object a0((jobject) NULL);
          ::java::lang::Object a1((jobject) NULL);
          ::java::util::SortedSet result((jobject) NULL);

          if (!parseArgs(args, "OO", self->parameters[0], self->parameters[0], &a0, &a1))
          {
            OBJ_CALL(result = self->object.subSet(a0, a1));
            return ::java::util::t_SortedSet::wrap_Object(result, self->parameters[0]);
          }
        }
        break;
       case 4:
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean a1;
          ::java::lang::Object a2((jobject) NULL);
          jboolean a3;
          ::java::util::NavigableSet result((jobject) NULL);

          if (!parseArgs(args, "OZOZ", self->parameters[0], self->parameters[0], &a0, &a1, &a2, &a3))
          {
            OBJ_CALL(result = self->object.subSet(a0, a1, a2, a3));
            return ::java::util::t_NavigableSet::wrap_Object(result, self->parameters[0]);
          }
        }
      }

      PyErr_SetArgsError((PyObject *) self, "subSet", args);
      return NULL;
    }

    static PyObject *t_TreeSet_tailSet(t_TreeSet *self, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 1:
        {
          ::java::lang::Object a0((jobject) NULL);
          ::java::util::SortedSet result((jobject) NULL);

          if (!parseArgs(args, "O", self->parameters[0], &a0))
          {
            OBJ_CALL(result = self->object.tailSet(a0));
            return ::java::util::t_SortedSet::wrap_Object(result, self->parameters[0]);
          }
        }
        break;
       case 2:
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean a1;
          ::java::util::NavigableSet result((jobject) NULL);

          if (!parseArgs(args, "OZ", self->parameters[0], &a0, &a1))
          {
            OBJ_CALL(result = self->object.tailSet(a0, a1));
            return ::java::util::t_NavigableSet::wrap_Object(result, self->parameters[0]);
          }
        }
      }

      PyErr_SetArgsError((PyObject *) self, "tailSet", args);
      return NULL;
    }
    static PyObject *t_TreeSet_get__parameters_(t_TreeSet *self, void *data)
    {
      return typeParameters(self->parameters, sizeof(self->parameters));
    }

    static PyObject *t_TreeSet_get__empty(t_TreeSet *self, void *data)
    {
      jboolean value;
      OBJ_CALL(value = self->object.isEmpty());
      Py_RETURN_BOOL(value);
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/it/ItalianLightStemmer.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace it {

          ::java::lang::Class *ItalianLightStemmer::class$ = NULL;
          jmethodID *ItalianLightStemmer::mids$ = NULL;
          bool ItalianLightStemmer::live$ = false;

          jclass ItalianLightStemmer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/it/ItalianLightStemmer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_stem_ec6430eb] = env->getMethodID(cls, "stem", "([CI)I");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ItalianLightStemmer::ItalianLightStemmer() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          jint ItalianLightStemmer::stem(const JArray< jchar > & a0, jint a1) const
          {
            return env->callIntMethod(this$, mids$[mid_stem_ec6430eb], a0.this$, a1);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace it {
          static PyObject *t_ItalianLightStemmer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_ItalianLightStemmer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_ItalianLightStemmer_init_(t_ItalianLightStemmer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_ItalianLightStemmer_stem(t_ItalianLightStemmer *self, PyObject *args);

          static PyMethodDef t_ItalianLightStemmer__methods_[] = {
            DECLARE_METHOD(t_ItalianLightStemmer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ItalianLightStemmer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ItalianLightStemmer, stem, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(ItalianLightStemmer, t_ItalianLightStemmer, ::java::lang::Object, ItalianLightStemmer, t_ItalianLightStemmer_init_, 0, 0, 0, 0, 0);

          void t_ItalianLightStemmer::install(PyObject *module)
          {
            installType(&PY_TYPE(ItalianLightStemmer), module, "ItalianLightStemmer", 0);
          }

          void t_ItalianLightStemmer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(ItalianLightStemmer).tp_dict, "class_", make_descriptor(ItalianLightStemmer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(ItalianLightStemmer).tp_dict, "wrapfn_", make_descriptor(t_ItalianLightStemmer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(ItalianLightStemmer).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_ItalianLightStemmer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, ItalianLightStemmer::initializeClass, 1)))
              return NULL;
            return t_ItalianLightStemmer::wrap_Object(ItalianLightStemmer(((t_ItalianLightStemmer *) arg)->object.this$));
          }
          static PyObject *t_ItalianLightStemmer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, ItalianLightStemmer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_ItalianLightStemmer_init_(t_ItalianLightStemmer *self, PyObject *args, PyObject *kwds)
          {
            ItalianLightStemmer object((jobject) NULL);

            INT_CALL(object = ItalianLightStemmer());
            self->object = object;

            return 0;
          }

          static PyObject *t_ItalianLightStemmer_stem(t_ItalianLightStemmer *self, PyObject *args)
          {
            JArray< jchar > a0((jobject) NULL);
            jint a1;
            jint result;

            if (!parseArgs(args, "[CI", &a0, &a1))
            {
              OBJ_CALL(result = self->object.stem(a0, a1));
              return PyInt_FromLong((long) result);
            }

            PyErr_SetArgsError((PyObject *) self, "stem", args);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/hunspell/HunspellStemFilter.h"
#include "org/apache/lucene/analysis/hunspell/Dictionary.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace hunspell {

          ::java::lang::Class *HunspellStemFilter::class$ = NULL;
          jmethodID *HunspellStemFilter::mids$ = NULL;
          bool HunspellStemFilter::live$ = false;

          jclass HunspellStemFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/hunspell/HunspellStemFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_05177913] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;Lorg/apache/lucene/analysis/hunspell/Dictionary;)V");
              mids$[mid_init$_d3f3208c] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;Lorg/apache/lucene/analysis/hunspell/Dictionary;Z)V");
              mids$[mid_init$_6c7575a5] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;Lorg/apache/lucene/analysis/hunspell/Dictionary;ZZ)V");
              mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");
              mids$[mid_reset_54c6a166] = env->getMethodID(cls, "reset", "()V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          HunspellStemFilter::HunspellStemFilter(const ::org::apache::lucene::analysis::TokenStream & a0, const ::org::apache::lucene::analysis::hunspell::Dictionary & a1) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_05177913, a0.this$, a1.this$)) {}

          HunspellStemFilter::HunspellStemFilter(const ::org::apache::lucene::analysis::TokenStream & a0, const ::org::apache::lucene::analysis::hunspell::Dictionary & a1, jboolean a2) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_d3f3208c, a0.this$, a1.this$, a2)) {}

          HunspellStemFilter::HunspellStemFilter(const ::org::apache::lucene::analysis::TokenStream & a0, const ::org::apache::lucene::analysis::hunspell::Dictionary & a1, jboolean a2, jboolean a3) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_6c7575a5, a0.this$, a1.this$, a2, a3)) {}

          jboolean HunspellStemFilter::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_54c6a16a]);
          }

          void HunspellStemFilter::reset() const
          {
            env->callVoidMethod(this$, mids$[mid_reset_54c6a166]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace hunspell {
          static PyObject *t_HunspellStemFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_HunspellStemFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_HunspellStemFilter_init_(t_HunspellStemFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_HunspellStemFilter_incrementToken(t_HunspellStemFilter *self, PyObject *args);
          static PyObject *t_HunspellStemFilter_reset(t_HunspellStemFilter *self, PyObject *args);

          static PyMethodDef t_HunspellStemFilter__methods_[] = {
            DECLARE_METHOD(t_HunspellStemFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_HunspellStemFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_HunspellStemFilter, incrementToken, METH_VARARGS),
            DECLARE_METHOD(t_HunspellStemFilter, reset, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(HunspellStemFilter, t_HunspellStemFilter, ::org::apache::lucene::analysis::TokenFilter, HunspellStemFilter, t_HunspellStemFilter_init_, 0, 0, 0, 0, 0);

          void t_HunspellStemFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(HunspellStemFilter), module, "HunspellStemFilter", 0);
          }

          void t_HunspellStemFilter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(HunspellStemFilter).tp_dict, "class_", make_descriptor(HunspellStemFilter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(HunspellStemFilter).tp_dict, "wrapfn_", make_descriptor(t_HunspellStemFilter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(HunspellStemFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_HunspellStemFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, HunspellStemFilter::initializeClass, 1)))
              return NULL;
            return t_HunspellStemFilter::wrap_Object(HunspellStemFilter(((t_HunspellStemFilter *) arg)->object.this$));
          }
          static PyObject *t_HunspellStemFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, HunspellStemFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_HunspellStemFilter_init_(t_HunspellStemFilter *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 2:
              {
                ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
                ::org::apache::lucene::analysis::hunspell::Dictionary a1((jobject) NULL);
                HunspellStemFilter object((jobject) NULL);

                if (!parseArgs(args, "kk", ::org::apache::lucene::analysis::TokenStream::initializeClass, ::org::apache::lucene::analysis::hunspell::Dictionary::initializeClass, &a0, &a1))
                {
                  INT_CALL(object = HunspellStemFilter(a0, a1));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 3:
              {
                ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
                ::org::apache::lucene::analysis::hunspell::Dictionary a1((jobject) NULL);
                jboolean a2;
                HunspellStemFilter object((jobject) NULL);

                if (!parseArgs(args, "kkZ", ::org::apache::lucene::analysis::TokenStream::initializeClass, ::org::apache::lucene::analysis::hunspell::Dictionary::initializeClass, &a0, &a1, &a2))
                {
                  INT_CALL(object = HunspellStemFilter(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 4:
              {
                ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
                ::org::apache::lucene::analysis::hunspell::Dictionary a1((jobject) NULL);
                jboolean a2;
                jboolean a3;
                HunspellStemFilter object((jobject) NULL);

                if (!parseArgs(args, "kkZZ", ::org::apache::lucene::analysis::TokenStream::initializeClass, ::org::apache::lucene::analysis::hunspell::Dictionary::initializeClass, &a0, &a1, &a2, &a3))
                {
                  INT_CALL(object = HunspellStemFilter(a0, a1, a2, a3));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_HunspellStemFilter_incrementToken(t_HunspellStemFilter *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(HunspellStemFilter), (PyObject *) self, "incrementToken", args, 2);
          }

          static PyObject *t_HunspellStemFilter_reset(t_HunspellStemFilter *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.reset());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(HunspellStemFilter), (PyObject *) self, "reset", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/facet/taxonomy/LRUHashMap.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace taxonomy {

          ::java::lang::Class *LRUHashMap::class$ = NULL;
          jmethodID *LRUHashMap::mids$ = NULL;
          bool LRUHashMap::live$ = false;

          jclass LRUHashMap::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/facet/taxonomy/LRUHashMap");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_39c7bd3c] = env->getMethodID(cls, "<init>", "(I)V");
              mids$[mid_clone_544babe9] = env->getMethodID(cls, "clone", "()Lorg/apache/lucene/facet/taxonomy/LRUHashMap;");
              mids$[mid_getMaxSize_54c6a179] = env->getMethodID(cls, "getMaxSize", "()I");
              mids$[mid_setMaxSize_39c7bd3c] = env->getMethodID(cls, "setMaxSize", "(I)V");
              mids$[mid_removeEldestEntry_8e61453a] = env->getMethodID(cls, "removeEldestEntry", "(Ljava/util/Map$Entry;)Z");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          LRUHashMap::LRUHashMap(jint a0) : ::java::util::LinkedHashMap(env->newObject(initializeClass, &mids$, mid_init$_39c7bd3c, a0)) {}

          LRUHashMap LRUHashMap::clone() const
          {
            return LRUHashMap(env->callObjectMethod(this$, mids$[mid_clone_544babe9]));
          }

          jint LRUHashMap::getMaxSize() const
          {
            return env->callIntMethod(this$, mids$[mid_getMaxSize_54c6a179]);
          }

          void LRUHashMap::setMaxSize(jint a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setMaxSize_39c7bd3c], a0);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace taxonomy {
          static PyObject *t_LRUHashMap_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_LRUHashMap_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_LRUHashMap_of_(t_LRUHashMap *self, PyObject *args);
          static int t_LRUHashMap_init_(t_LRUHashMap *self, PyObject *args, PyObject *kwds);
          static PyObject *t_LRUHashMap_clone(t_LRUHashMap *self, PyObject *args);
          static PyObject *t_LRUHashMap_getMaxSize(t_LRUHashMap *self);
          static PyObject *t_LRUHashMap_setMaxSize(t_LRUHashMap *self, PyObject *arg);
          static PyObject *t_LRUHashMap_get__maxSize(t_LRUHashMap *self, void *data);
          static int t_LRUHashMap_set__maxSize(t_LRUHashMap *self, PyObject *arg, void *data);
          static PyObject *t_LRUHashMap_get__parameters_(t_LRUHashMap *self, void *data);
          static PyGetSetDef t_LRUHashMap__fields_[] = {
            DECLARE_GETSET_FIELD(t_LRUHashMap, maxSize),
            DECLARE_GET_FIELD(t_LRUHashMap, parameters_),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_LRUHashMap__methods_[] = {
            DECLARE_METHOD(t_LRUHashMap, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_LRUHashMap, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_LRUHashMap, of_, METH_VARARGS),
            DECLARE_METHOD(t_LRUHashMap, clone, METH_VARARGS),
            DECLARE_METHOD(t_LRUHashMap, getMaxSize, METH_NOARGS),
            DECLARE_METHOD(t_LRUHashMap, setMaxSize, METH_O),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(LRUHashMap, t_LRUHashMap, ::java::util::LinkedHashMap, LRUHashMap, t_LRUHashMap_init_, 0, 0, t_LRUHashMap__fields_, 0, 0);
          PyObject *t_LRUHashMap::wrap_Object(const LRUHashMap& object, PyTypeObject *p0, PyTypeObject *p1)
          {
            PyObject *obj = t_LRUHashMap::wrap_Object(object);
            if (obj != NULL && obj != Py_None)
            {
              t_LRUHashMap *self = (t_LRUHashMap *) obj;
              self->parameters[0] = p0;
              self->parameters[1] = p1;
            }
            return obj;
          }

          PyObject *t_LRUHashMap::wrap_jobject(const jobject& object, PyTypeObject *p0, PyTypeObject *p1)
          {
            PyObject *obj = t_LRUHashMap::wrap_jobject(object);
            if (obj != NULL && obj != Py_None)
            {
              t_LRUHashMap *self = (t_LRUHashMap *) obj;
              self->parameters[0] = p0;
              self->parameters[1] = p1;
            }
            return obj;
          }

          void t_LRUHashMap::install(PyObject *module)
          {
            installType(&PY_TYPE(LRUHashMap), module, "LRUHashMap", 0);
          }

          void t_LRUHashMap::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(LRUHashMap).tp_dict, "class_", make_descriptor(LRUHashMap::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(LRUHashMap).tp_dict, "wrapfn_", make_descriptor(t_LRUHashMap::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(LRUHashMap).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_LRUHashMap_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, LRUHashMap::initializeClass, 1)))
              return NULL;
            return t_LRUHashMap::wrap_Object(LRUHashMap(((t_LRUHashMap *) arg)->object.this$));
          }
          static PyObject *t_LRUHashMap_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, LRUHashMap::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_LRUHashMap_of_(t_LRUHashMap *self, PyObject *args)
          {
            if (!parseArg(args, "T", 2, &(self->parameters)))
              Py_RETURN_SELF;
            return PyErr_SetArgsError((PyObject *) self, "of_", args);
          }

          static int t_LRUHashMap_init_(t_LRUHashMap *self, PyObject *args, PyObject *kwds)
          {
            jint a0;
            LRUHashMap object((jobject) NULL);

            if (!parseArgs(args, "I", &a0))
            {
              INT_CALL(object = LRUHashMap(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_LRUHashMap_clone(t_LRUHashMap *self, PyObject *args)
          {
            LRUHashMap result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.clone());
              return t_LRUHashMap::wrap_Object(result, self->parameters[0], self->parameters[1]);
            }

            return callSuper(&PY_TYPE(LRUHashMap), (PyObject *) self, "clone", args, 2);
          }

          static PyObject *t_LRUHashMap_getMaxSize(t_LRUHashMap *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getMaxSize());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_LRUHashMap_setMaxSize(t_LRUHashMap *self, PyObject *arg)
          {
            jint a0;

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(self->object.setMaxSize(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setMaxSize", arg);
            return NULL;
          }
          static PyObject *t_LRUHashMap_get__parameters_(t_LRUHashMap *self, void *data)
          {
            return typeParameters(self->parameters, sizeof(self->parameters));
          }

          static PyObject *t_LRUHashMap_get__maxSize(t_LRUHashMap *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getMaxSize());
            return PyInt_FromLong((long) value);
          }
          static int t_LRUHashMap_set__maxSize(t_LRUHashMap *self, PyObject *arg, void *data)
          {
            {
              jint value;
              if (!parseArg(arg, "I", &value))
              {
                INT_CALL(self->object.setMaxSize(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "maxSize", arg);
            return -1;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/grouping/GroupingSearch.h"
#include "org/apache/lucene/util/Bits.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/search/Filter.h"
#include "java/io/IOException.h"
#include "java/util/Map.h"
#include "java/lang/String.h"
#include "org/apache/lucene/search/Query.h"
#include "java/util/Collection.h"
#include "org/apache/lucene/search/IndexSearcher.h"
#include "org/apache/lucene/queries/function/ValueSource.h"
#include "org/apache/lucene/search/Sort.h"
#include "org/apache/lucene/search/grouping/TopGroups.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace grouping {

          ::java::lang::Class *GroupingSearch::class$ = NULL;
          jmethodID *GroupingSearch::mids$ = NULL;
          bool GroupingSearch::live$ = false;

          jclass GroupingSearch::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/grouping/GroupingSearch");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_9bb37152] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/Filter;)V");
              mids$[mid_init$_5fdc3f48] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;)V");
              mids$[mid_init$_9d3ebac8] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/queries/function/ValueSource;Ljava/util/Map;)V");
              mids$[mid_disableCaching_bd44cd2b] = env->getMethodID(cls, "disableCaching", "()Lorg/apache/lucene/search/grouping/GroupingSearch;");
              mids$[mid_getAllGroupHeads_03c2457d] = env->getMethodID(cls, "getAllGroupHeads", "()Lorg/apache/lucene/util/Bits;");
              mids$[mid_getAllMatchingGroups_2d2d7de4] = env->getMethodID(cls, "getAllMatchingGroups", "()Ljava/util/Collection;");
              mids$[mid_search_cc5c11db] = env->getMethodID(cls, "search", "(Lorg/apache/lucene/search/IndexSearcher;Lorg/apache/lucene/search/Query;II)Lorg/apache/lucene/search/grouping/TopGroups;");
              mids$[mid_search_2bb63d27] = env->getMethodID(cls, "search", "(Lorg/apache/lucene/search/IndexSearcher;Lorg/apache/lucene/search/Filter;Lorg/apache/lucene/search/Query;II)Lorg/apache/lucene/search/grouping/TopGroups;");
              mids$[mid_setAllGroupHeads_b6dc0458] = env->getMethodID(cls, "setAllGroupHeads", "(Z)Lorg/apache/lucene/search/grouping/GroupingSearch;");
              mids$[mid_setAllGroups_b6dc0458] = env->getMethodID(cls, "setAllGroups", "(Z)Lorg/apache/lucene/search/grouping/GroupingSearch;");
              mids$[mid_setCaching_8d110dba] = env->getMethodID(cls, "setCaching", "(IZ)Lorg/apache/lucene/search/grouping/GroupingSearch;");
              mids$[mid_setCachingInMB_c48a1ff7] = env->getMethodID(cls, "setCachingInMB", "(DZ)Lorg/apache/lucene/search/grouping/GroupingSearch;");
              mids$[mid_setFillSortFields_b6dc0458] = env->getMethodID(cls, "setFillSortFields", "(Z)Lorg/apache/lucene/search/grouping/GroupingSearch;");
              mids$[mid_setGroupDocsLimit_2cfcb8b1] = env->getMethodID(cls, "setGroupDocsLimit", "(I)Lorg/apache/lucene/search/grouping/GroupingSearch;");
              mids$[mid_setGroupDocsOffset_2cfcb8b1] = env->getMethodID(cls, "setGroupDocsOffset", "(I)Lorg/apache/lucene/search/grouping/GroupingSearch;");
              mids$[mid_setGroupSort_a0e5bdf3] = env->getMethodID(cls, "setGroupSort", "(Lorg/apache/lucene/search/Sort;)Lorg/apache/lucene/search/grouping/GroupingSearch;");
              mids$[mid_setIncludeMaxScore_b6dc0458] = env->getMethodID(cls, "setIncludeMaxScore", "(Z)Lorg/apache/lucene/search/grouping/GroupingSearch;");
              mids$[mid_setIncludeScores_b6dc0458] = env->getMethodID(cls, "setIncludeScores", "(Z)Lorg/apache/lucene/search/grouping/GroupingSearch;");
              mids$[mid_setInitialSize_2cfcb8b1] = env->getMethodID(cls, "setInitialSize", "(I)Lorg/apache/lucene/search/grouping/GroupingSearch;");
              mids$[mid_setSortWithinGroup_a0e5bdf3] = env->getMethodID(cls, "setSortWithinGroup", "(Lorg/apache/lucene/search/Sort;)Lorg/apache/lucene/search/grouping/GroupingSearch;");
              mids$[mid_groupByFieldOrFunction_2bb63d27] = env->getMethodID(cls, "groupByFieldOrFunction", "(Lorg/apache/lucene/search/IndexSearcher;Lorg/apache/lucene/search/Filter;Lorg/apache/lucene/search/Query;II)Lorg/apache/lucene/search/grouping/TopGroups;");
              mids$[mid_groupByDocBlock_2bb63d27] = env->getMethodID(cls, "groupByDocBlock", "(Lorg/apache/lucene/search/IndexSearcher;Lorg/apache/lucene/search/Filter;Lorg/apache/lucene/search/Query;II)Lorg/apache/lucene/search/grouping/TopGroups;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          GroupingSearch::GroupingSearch(const ::org::apache::lucene::search::Filter & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_9bb37152, a0.this$)) {}

          GroupingSearch::GroupingSearch(const ::java::lang::String & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_5fdc3f48, a0.this$)) {}

          GroupingSearch::GroupingSearch(const ::org::apache::lucene::queries::function::ValueSource & a0, const ::java::util::Map & a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_9d3ebac8, a0.this$, a1.this$)) {}

          GroupingSearch GroupingSearch::disableCaching() const
          {
            return GroupingSearch(env->callObjectMethod(this$, mids$[mid_disableCaching_bd44cd2b]));
          }

          ::org::apache::lucene::util::Bits GroupingSearch::getAllGroupHeads() const
          {
            return ::org::apache::lucene::util::Bits(env->callObjectMethod(this$, mids$[mid_getAllGroupHeads_03c2457d]));
          }

          ::java::util::Collection GroupingSearch::getAllMatchingGroups() const
          {
            return ::java::util::Collection(env->callObjectMethod(this$, mids$[mid_getAllMatchingGroups_2d2d7de4]));
          }

          ::org::apache::lucene::search::grouping::TopGroups GroupingSearch::search(const ::org::apache::lucene::search::IndexSearcher & a0, const ::org::apache::lucene::search::Query & a1, jint a2, jint a3) const
          {
            return ::org::apache::lucene::search::grouping::TopGroups(env->callObjectMethod(this$, mids$[mid_search_cc5c11db], a0.this$, a1.this$, a2, a3));
          }

          ::org::apache::lucene::search::grouping::TopGroups GroupingSearch::search(const ::org::apache::lucene::search::IndexSearcher & a0, const ::org::apache::lucene::search::Filter & a1, const ::org::apache::lucene::search::Query & a2, jint a3, jint a4) const
          {
            return ::org::apache::lucene::search::grouping::TopGroups(env->callObjectMethod(this$, mids$[mid_search_2bb63d27], a0.this$, a1.this$, a2.this$, a3, a4));
          }

          GroupingSearch GroupingSearch::setAllGroupHeads(jboolean a0) const
          {
            return GroupingSearch(env->callObjectMethod(this$, mids$[mid_setAllGroupHeads_b6dc0458], a0));
          }

          GroupingSearch GroupingSearch::setAllGroups(jboolean a0) const
          {
            return GroupingSearch(env->callObjectMethod(this$, mids$[mid_setAllGroups_b6dc0458], a0));
          }

          GroupingSearch GroupingSearch::setCaching(jint a0, jboolean a1) const
          {
            return GroupingSearch(env->callObjectMethod(this$, mids$[mid_setCaching_8d110dba], a0, a1));
          }

          GroupingSearch GroupingSearch::setCachingInMB(jdouble a0, jboolean a1) const
          {
            return GroupingSearch(env->callObjectMethod(this$, mids$[mid_setCachingInMB_c48a1ff7], a0, a1));
          }

          GroupingSearch GroupingSearch::setFillSortFields(jboolean a0) const
          {
            return GroupingSearch(env->callObjectMethod(this$, mids$[mid_setFillSortFields_b6dc0458], a0));
          }

          GroupingSearch GroupingSearch::setGroupDocsLimit(jint a0) const
          {
            return GroupingSearch(env->callObjectMethod(this$, mids$[mid_setGroupDocsLimit_2cfcb8b1], a0));
          }

          GroupingSearch GroupingSearch::setGroupDocsOffset(jint a0) const
          {
            return GroupingSearch(env->callObjectMethod(this$, mids$[mid_setGroupDocsOffset_2cfcb8b1], a0));
          }

          GroupingSearch GroupingSearch::setGroupSort(const ::org::apache::lucene::search::Sort & a0) const
          {
            return GroupingSearch(env->callObjectMethod(this$, mids$[mid_setGroupSort_a0e5bdf3], a0.this$));
          }

          GroupingSearch GroupingSearch::setIncludeMaxScore(jboolean a0) const
          {
            return GroupingSearch(env->callObjectMethod(this$, mids$[mid_setIncludeMaxScore_b6dc0458], a0));
          }

          GroupingSearch GroupingSearch::setIncludeScores(jboolean a0) const
          {
            return GroupingSearch(env->callObjectMethod(this$, mids$[mid_setIncludeScores_b6dc0458], a0));
          }

          GroupingSearch GroupingSearch::setInitialSize(jint a0) const
          {
            return GroupingSearch(env->callObjectMethod(this$, mids$[mid_setInitialSize_2cfcb8b1], a0));
          }

          GroupingSearch GroupingSearch::setSortWithinGroup(const ::org::apache::lucene::search::Sort & a0) const
          {
            return GroupingSearch(env->callObjectMethod(this$, mids$[mid_setSortWithinGroup_a0e5bdf3], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace grouping {
          static PyObject *t_GroupingSearch_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_GroupingSearch_instance_(PyTypeObject *type, PyObject *arg);
          static int t_GroupingSearch_init_(t_GroupingSearch *self, PyObject *args, PyObject *kwds);
          static PyObject *t_GroupingSearch_disableCaching(t_GroupingSearch *self);
          static PyObject *t_GroupingSearch_getAllGroupHeads(t_GroupingSearch *self);
          static PyObject *t_GroupingSearch_getAllMatchingGroups(t_GroupingSearch *self);
          static PyObject *t_GroupingSearch_search(t_GroupingSearch *self, PyObject *args);
          static PyObject *t_GroupingSearch_setAllGroupHeads(t_GroupingSearch *self, PyObject *arg);
          static PyObject *t_GroupingSearch_setAllGroups(t_GroupingSearch *self, PyObject *arg);
          static PyObject *t_GroupingSearch_setCaching(t_GroupingSearch *self, PyObject *args);
          static PyObject *t_GroupingSearch_setCachingInMB(t_GroupingSearch *self, PyObject *args);
          static PyObject *t_GroupingSearch_setFillSortFields(t_GroupingSearch *self, PyObject *arg);
          static PyObject *t_GroupingSearch_setGroupDocsLimit(t_GroupingSearch *self, PyObject *arg);
          static PyObject *t_GroupingSearch_setGroupDocsOffset(t_GroupingSearch *self, PyObject *arg);
          static PyObject *t_GroupingSearch_setGroupSort(t_GroupingSearch *self, PyObject *arg);
          static PyObject *t_GroupingSearch_setIncludeMaxScore(t_GroupingSearch *self, PyObject *arg);
          static PyObject *t_GroupingSearch_setIncludeScores(t_GroupingSearch *self, PyObject *arg);
          static PyObject *t_GroupingSearch_setInitialSize(t_GroupingSearch *self, PyObject *arg);
          static PyObject *t_GroupingSearch_setSortWithinGroup(t_GroupingSearch *self, PyObject *arg);
          static PyObject *t_GroupingSearch_get__allGroupHeads(t_GroupingSearch *self, void *data);
          static int t_GroupingSearch_set__allGroupHeads(t_GroupingSearch *self, PyObject *arg, void *data);
          static int t_GroupingSearch_set__allGroups(t_GroupingSearch *self, PyObject *arg, void *data);
          static PyObject *t_GroupingSearch_get__allMatchingGroups(t_GroupingSearch *self, void *data);
          static int t_GroupingSearch_set__fillSortFields(t_GroupingSearch *self, PyObject *arg, void *data);
          static int t_GroupingSearch_set__groupDocsLimit(t_GroupingSearch *self, PyObject *arg, void *data);
          static int t_GroupingSearch_set__groupDocsOffset(t_GroupingSearch *self, PyObject *arg, void *data);
          static int t_GroupingSearch_set__groupSort(t_GroupingSearch *self, PyObject *arg, void *data);
          static int t_GroupingSearch_set__includeMaxScore(t_GroupingSearch *self, PyObject *arg, void *data);
          static int t_GroupingSearch_set__includeScores(t_GroupingSearch *self, PyObject *arg, void *data);
          static int t_GroupingSearch_set__initialSize(t_GroupingSearch *self, PyObject *arg, void *data);
          static int t_GroupingSearch_set__sortWithinGroup(t_GroupingSearch *self, PyObject *arg, void *data);
          static PyGetSetDef t_GroupingSearch__fields_[] = {
            DECLARE_GETSET_FIELD(t_GroupingSearch, allGroupHeads),
            DECLARE_SET_FIELD(t_GroupingSearch, allGroups),
            DECLARE_GET_FIELD(t_GroupingSearch, allMatchingGroups),
            DECLARE_SET_FIELD(t_GroupingSearch, fillSortFields),
            DECLARE_SET_FIELD(t_GroupingSearch, groupDocsLimit),
            DECLARE_SET_FIELD(t_GroupingSearch, groupDocsOffset),
            DECLARE_SET_FIELD(t_GroupingSearch, groupSort),
            DECLARE_SET_FIELD(t_GroupingSearch, includeMaxScore),
            DECLARE_SET_FIELD(t_GroupingSearch, includeScores),
            DECLARE_SET_FIELD(t_GroupingSearch, initialSize),
            DECLARE_SET_FIELD(t_GroupingSearch, sortWithinGroup),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_GroupingSearch__methods_[] = {
            DECLARE_METHOD(t_GroupingSearch, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_GroupingSearch, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_GroupingSearch, disableCaching, METH_NOARGS),
            DECLARE_METHOD(t_GroupingSearch, getAllGroupHeads, METH_NOARGS),
            DECLARE_METHOD(t_GroupingSearch, getAllMatchingGroups, METH_NOARGS),
            DECLARE_METHOD(t_GroupingSearch, search, METH_VARARGS),
            DECLARE_METHOD(t_GroupingSearch, setAllGroupHeads, METH_O),
            DECLARE_METHOD(t_GroupingSearch, setAllGroups, METH_O),
            DECLARE_METHOD(t_GroupingSearch, setCaching, METH_VARARGS),
            DECLARE_METHOD(t_GroupingSearch, setCachingInMB, METH_VARARGS),
            DECLARE_METHOD(t_GroupingSearch, setFillSortFields, METH_O),
            DECLARE_METHOD(t_GroupingSearch, setGroupDocsLimit, METH_O),
            DECLARE_METHOD(t_GroupingSearch, setGroupDocsOffset, METH_O),
            DECLARE_METHOD(t_GroupingSearch, setGroupSort, METH_O),
            DECLARE_METHOD(t_GroupingSearch, setIncludeMaxScore, METH_O),
            DECLARE_METHOD(t_GroupingSearch, setIncludeScores, METH_O),
            DECLARE_METHOD(t_GroupingSearch, setInitialSize, METH_O),
            DECLARE_METHOD(t_GroupingSearch, setSortWithinGroup, METH_O),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(GroupingSearch, t_GroupingSearch, ::java::lang::Object, GroupingSearch, t_GroupingSearch_init_, 0, 0, t_GroupingSearch__fields_, 0, 0);

          void t_GroupingSearch::install(PyObject *module)
          {
            installType(&PY_TYPE(GroupingSearch), module, "GroupingSearch", 0);
          }

          void t_GroupingSearch::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(GroupingSearch).tp_dict, "class_", make_descriptor(GroupingSearch::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(GroupingSearch).tp_dict, "wrapfn_", make_descriptor(t_GroupingSearch::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(GroupingSearch).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_GroupingSearch_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, GroupingSearch::initializeClass, 1)))
              return NULL;
            return t_GroupingSearch::wrap_Object(GroupingSearch(((t_GroupingSearch *) arg)->object.this$));
          }
          static PyObject *t_GroupingSearch_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, GroupingSearch::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_GroupingSearch_init_(t_GroupingSearch *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::org::apache::lucene::search::Filter a0((jobject) NULL);
                GroupingSearch object((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::search::Filter::initializeClass, &a0))
                {
                  INT_CALL(object = GroupingSearch(a0));
                  self->object = object;
                  break;
                }
              }
              {
                ::java::lang::String a0((jobject) NULL);
                GroupingSearch object((jobject) NULL);

                if (!parseArgs(args, "s", &a0))
                {
                  INT_CALL(object = GroupingSearch(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 2:
              {
                ::org::apache::lucene::queries::function::ValueSource a0((jobject) NULL);
                ::java::util::Map a1((jobject) NULL);
                PyTypeObject **p1;
                GroupingSearch object((jobject) NULL);

                if (!parseArgs(args, "kK", ::org::apache::lucene::queries::function::ValueSource::initializeClass, ::java::util::Map::initializeClass, &a0, &a1, &p1, ::java::util::t_Map::parameters_))
                {
                  INT_CALL(object = GroupingSearch(a0, a1));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_GroupingSearch_disableCaching(t_GroupingSearch *self)
          {
            GroupingSearch result((jobject) NULL);
            OBJ_CALL(result = self->object.disableCaching());
            return t_GroupingSearch::wrap_Object(result);
          }

          static PyObject *t_GroupingSearch_getAllGroupHeads(t_GroupingSearch *self)
          {
            ::org::apache::lucene::util::Bits result((jobject) NULL);
            OBJ_CALL(result = self->object.getAllGroupHeads());
            return ::org::apache::lucene::util::t_Bits::wrap_Object(result);
          }

          static PyObject *t_GroupingSearch_getAllMatchingGroups(t_GroupingSearch *self)
          {
            ::java::util::Collection result((jobject) NULL);
            OBJ_CALL(result = self->object.getAllMatchingGroups());
            return ::java::util::t_Collection::wrap_Object(result);
          }

          static PyObject *t_GroupingSearch_search(t_GroupingSearch *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 4:
              {
                ::org::apache::lucene::search::IndexSearcher a0((jobject) NULL);
                ::org::apache::lucene::search::Query a1((jobject) NULL);
                jint a2;
                jint a3;
                ::org::apache::lucene::search::grouping::TopGroups result((jobject) NULL);

                if (!parseArgs(args, "kkII", ::org::apache::lucene::search::IndexSearcher::initializeClass, ::org::apache::lucene::search::Query::initializeClass, &a0, &a1, &a2, &a3))
                {
                  OBJ_CALL(result = self->object.search(a0, a1, a2, a3));
                  return ::org::apache::lucene::search::grouping::t_TopGroups::wrap_Object(result);
                }
              }
              break;
             case 5:
              {
                ::org::apache::lucene::search::IndexSearcher a0((jobject) NULL);
                ::org::apache::lucene::search::Filter a1((jobject) NULL);
                ::org::apache::lucene::search::Query a2((jobject) NULL);
                jint a3;
                jint a4;
                ::org::apache::lucene::search::grouping::TopGroups result((jobject) NULL);

                if (!parseArgs(args, "kkkII", ::org::apache::lucene::search::IndexSearcher::initializeClass, ::org::apache::lucene::search::Filter::initializeClass, ::org::apache::lucene::search::Query::initializeClass, &a0, &a1, &a2, &a3, &a4))
                {
                  OBJ_CALL(result = self->object.search(a0, a1, a2, a3, a4));
                  return ::org::apache::lucene::search::grouping::t_TopGroups::wrap_Object(result);
                }
              }
            }

            PyErr_SetArgsError((PyObject *) self, "search", args);
            return NULL;
          }

          static PyObject *t_GroupingSearch_setAllGroupHeads(t_GroupingSearch *self, PyObject *arg)
          {
            jboolean a0;
            GroupingSearch result((jobject) NULL);

            if (!parseArg(arg, "Z", &a0))
            {
              OBJ_CALL(result = self->object.setAllGroupHeads(a0));
              return t_GroupingSearch::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "setAllGroupHeads", arg);
            return NULL;
          }

          static PyObject *t_GroupingSearch_setAllGroups(t_GroupingSearch *self, PyObject *arg)
          {
            jboolean a0;
            GroupingSearch result((jobject) NULL);

            if (!parseArg(arg, "Z", &a0))
            {
              OBJ_CALL(result = self->object.setAllGroups(a0));
              return t_GroupingSearch::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "setAllGroups", arg);
            return NULL;
          }

          static PyObject *t_GroupingSearch_setCaching(t_GroupingSearch *self, PyObject *args)
          {
            jint a0;
            jboolean a1;
            GroupingSearch result((jobject) NULL);

            if (!parseArgs(args, "IZ", &a0, &a1))
            {
              OBJ_CALL(result = self->object.setCaching(a0, a1));
              return t_GroupingSearch::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "setCaching", args);
            return NULL;
          }

          static PyObject *t_GroupingSearch_setCachingInMB(t_GroupingSearch *self, PyObject *args)
          {
            jdouble a0;
            jboolean a1;
            GroupingSearch result((jobject) NULL);

            if (!parseArgs(args, "DZ", &a0, &a1))
            {
              OBJ_CALL(result = self->object.setCachingInMB(a0, a1));
              return t_GroupingSearch::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "setCachingInMB", args);
            return NULL;
          }

          static PyObject *t_GroupingSearch_setFillSortFields(t_GroupingSearch *self, PyObject *arg)
          {
            jboolean a0;
            GroupingSearch result((jobject) NULL);

            if (!parseArg(arg, "Z", &a0))
            {
              OBJ_CALL(result = self->object.setFillSortFields(a0));
              return t_GroupingSearch::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "setFillSortFields", arg);
            return NULL;
          }

          static PyObject *t_GroupingSearch_setGroupDocsLimit(t_GroupingSearch *self, PyObject *arg)
          {
            jint a0;
            GroupingSearch result((jobject) NULL);

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(result = self->object.setGroupDocsLimit(a0));
              return t_GroupingSearch::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "setGroupDocsLimit", arg);
            return NULL;
          }

          static PyObject *t_GroupingSearch_setGroupDocsOffset(t_GroupingSearch *self, PyObject *arg)
          {
            jint a0;
            GroupingSearch result((jobject) NULL);

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(result = self->object.setGroupDocsOffset(a0));
              return t_GroupingSearch::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "setGroupDocsOffset", arg);
            return NULL;
          }

          static PyObject *t_GroupingSearch_setGroupSort(t_GroupingSearch *self, PyObject *arg)
          {
            ::org::apache::lucene::search::Sort a0((jobject) NULL);
            GroupingSearch result((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::search::Sort::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.setGroupSort(a0));
              return t_GroupingSearch::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "setGroupSort", arg);
            return NULL;
          }

          static PyObject *t_GroupingSearch_setIncludeMaxScore(t_GroupingSearch *self, PyObject *arg)
          {
            jboolean a0;
            GroupingSearch result((jobject) NULL);

            if (!parseArg(arg, "Z", &a0))
            {
              OBJ_CALL(result = self->object.setIncludeMaxScore(a0));
              return t_GroupingSearch::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "setIncludeMaxScore", arg);
            return NULL;
          }

          static PyObject *t_GroupingSearch_setIncludeScores(t_GroupingSearch *self, PyObject *arg)
          {
            jboolean a0;
            GroupingSearch result((jobject) NULL);

            if (!parseArg(arg, "Z", &a0))
            {
              OBJ_CALL(result = self->object.setIncludeScores(a0));
              return t_GroupingSearch::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "setIncludeScores", arg);
            return NULL;
          }

          static PyObject *t_GroupingSearch_setInitialSize(t_GroupingSearch *self, PyObject *arg)
          {
            jint a0;
            GroupingSearch result((jobject) NULL);

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(result = self->object.setInitialSize(a0));
              return t_GroupingSearch::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "setInitialSize", arg);
            return NULL;
          }

          static PyObject *t_GroupingSearch_setSortWithinGroup(t_GroupingSearch *self, PyObject *arg)
          {
            ::org::apache::lucene::search::Sort a0((jobject) NULL);
            GroupingSearch result((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::search::Sort::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.setSortWithinGroup(a0));
              return t_GroupingSearch::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "setSortWithinGroup", arg);
            return NULL;
          }

          static PyObject *t_GroupingSearch_get__allGroupHeads(t_GroupingSearch *self, void *data)
          {
            ::org::apache::lucene::util::Bits value((jobject) NULL);
            OBJ_CALL(value = self->object.getAllGroupHeads());
            return ::org::apache::lucene::util::t_Bits::wrap_Object(value);
          }
          static int t_GroupingSearch_set__allGroupHeads(t_GroupingSearch *self, PyObject *arg, void *data)
          {
            {
              jboolean value;
              if (!parseArg(arg, "Z", &value))
              {
                INT_CALL(self->object.setAllGroupHeads(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "allGroupHeads", arg);
            return -1;
          }

          static int t_GroupingSearch_set__allGroups(t_GroupingSearch *self, PyObject *arg, void *data)
          {
            {
              jboolean value;
              if (!parseArg(arg, "Z", &value))
              {
                INT_CALL(self->object.setAllGroups(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "allGroups", arg);
            return -1;
          }

          static PyObject *t_GroupingSearch_get__allMatchingGroups(t_GroupingSearch *self, void *data)
          {
            ::java::util::Collection value((jobject) NULL);
            OBJ_CALL(value = self->object.getAllMatchingGroups());
            return ::java::util::t_Collection::wrap_Object(value);
          }

          static int t_GroupingSearch_set__fillSortFields(t_GroupingSearch *self, PyObject *arg, void *data)
          {
            {
              jboolean value;
              if (!parseArg(arg, "Z", &value))
              {
                INT_CALL(self->object.setFillSortFields(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "fillSortFields", arg);
            return -1;
          }

          static int t_GroupingSearch_set__groupDocsLimit(t_GroupingSearch *self, PyObject *arg, void *data)
          {
            {
              jint value;
              if (!parseArg(arg, "I", &value))
              {
                INT_CALL(self->object.setGroupDocsLimit(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "groupDocsLimit", arg);
            return -1;
          }

          static int t_GroupingSearch_set__groupDocsOffset(t_GroupingSearch *self, PyObject *arg, void *data)
          {
            {
              jint value;
              if (!parseArg(arg, "I", &value))
              {
                INT_CALL(self->object.setGroupDocsOffset(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "groupDocsOffset", arg);
            return -1;
          }

          static int t_GroupingSearch_set__groupSort(t_GroupingSearch *self, PyObject *arg, void *data)
          {
            {
              ::org::apache::lucene::search::Sort value((jobject) NULL);
              if (!parseArg(arg, "k", ::org::apache::lucene::search::Sort::initializeClass, &value))
              {
                INT_CALL(self->object.setGroupSort(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "groupSort", arg);
            return -1;
          }

          static int t_GroupingSearch_set__includeMaxScore(t_GroupingSearch *self, PyObject *arg, void *data)
          {
            {
              jboolean value;
              if (!parseArg(arg, "Z", &value))
              {
                INT_CALL(self->object.setIncludeMaxScore(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "includeMaxScore", arg);
            return -1;
          }

          static int t_GroupingSearch_set__includeScores(t_GroupingSearch *self, PyObject *arg, void *data)
          {
            {
              jboolean value;
              if (!parseArg(arg, "Z", &value))
              {
                INT_CALL(self->object.setIncludeScores(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "includeScores", arg);
            return -1;
          }

          static int t_GroupingSearch_set__initialSize(t_GroupingSearch *self, PyObject *arg, void *data)
          {
            {
              jint value;
              if (!parseArg(arg, "I", &value))
              {
                INT_CALL(self->object.setInitialSize(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "initialSize", arg);
            return -1;
          }

          static int t_GroupingSearch_set__sortWithinGroup(t_GroupingSearch *self, PyObject *arg, void *data)
          {
            {
              ::org::apache::lucene::search::Sort value((jobject) NULL);
              if (!parseArg(arg, "k", ::org::apache::lucene::search::Sort::initializeClass, &value))
              {
                INT_CALL(self->object.setSortWithinGroup(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "sortWithinGroup", arg);
            return -1;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/FieldComparatorSource.h"
#include "org/apache/lucene/search/FieldComparator.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *FieldComparatorSource::class$ = NULL;
        jmethodID *FieldComparatorSource::mids$ = NULL;
        bool FieldComparatorSource::live$ = false;

        jclass FieldComparatorSource::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/FieldComparatorSource");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_newComparator_0c7e6c91] = env->getMethodID(cls, "newComparator", "(Ljava/lang/String;IIZ)Lorg/apache/lucene/search/FieldComparator;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        FieldComparatorSource::FieldComparatorSource() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        ::org::apache::lucene::search::FieldComparator FieldComparatorSource::newComparator(const ::java::lang::String & a0, jint a1, jint a2, jboolean a3) const
        {
          return ::org::apache::lucene::search::FieldComparator(env->callObjectMethod(this$, mids$[mid_newComparator_0c7e6c91], a0.this$, a1, a2, a3));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_FieldComparatorSource_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FieldComparatorSource_instance_(PyTypeObject *type, PyObject *arg);
        static int t_FieldComparatorSource_init_(t_FieldComparatorSource *self, PyObject *args, PyObject *kwds);
        static PyObject *t_FieldComparatorSource_newComparator(t_FieldComparatorSource *self, PyObject *args);

        static PyMethodDef t_FieldComparatorSource__methods_[] = {
          DECLARE_METHOD(t_FieldComparatorSource, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FieldComparatorSource, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FieldComparatorSource, newComparator, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(FieldComparatorSource, t_FieldComparatorSource, ::java::lang::Object, FieldComparatorSource, t_FieldComparatorSource_init_, 0, 0, 0, 0, 0);

        void t_FieldComparatorSource::install(PyObject *module)
        {
          installType(&PY_TYPE(FieldComparatorSource), module, "FieldComparatorSource", 0);
        }

        void t_FieldComparatorSource::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(FieldComparatorSource).tp_dict, "class_", make_descriptor(FieldComparatorSource::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(FieldComparatorSource).tp_dict, "wrapfn_", make_descriptor(t_FieldComparatorSource::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(FieldComparatorSource).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_FieldComparatorSource_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, FieldComparatorSource::initializeClass, 1)))
            return NULL;
          return t_FieldComparatorSource::wrap_Object(FieldComparatorSource(((t_FieldComparatorSource *) arg)->object.this$));
        }
        static PyObject *t_FieldComparatorSource_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, FieldComparatorSource::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_FieldComparatorSource_init_(t_FieldComparatorSource *self, PyObject *args, PyObject *kwds)
        {
          FieldComparatorSource object((jobject) NULL);

          INT_CALL(object = FieldComparatorSource());
          self->object = object;

          return 0;
        }

        static PyObject *t_FieldComparatorSource_newComparator(t_FieldComparatorSource *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          jint a1;
          jint a2;
          jboolean a3;
          ::org::apache::lucene::search::FieldComparator result((jobject) NULL);

          if (!parseArgs(args, "sIIZ", &a0, &a1, &a2, &a3))
          {
            OBJ_CALL(result = self->object.newComparator(a0, a1, a2, a3));
            return ::org::apache::lucene::search::t_FieldComparator::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "newComparator", args);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/MergeState$CheckAbort.h"
#include "org/apache/lucene/index/MergePolicy$OneMerge.h"
#include "org/apache/lucene/store/Directory.h"
#include "org/apache/lucene/index/MergePolicy$MergeAbortedException.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *MergeState$CheckAbort::class$ = NULL;
        jmethodID *MergeState$CheckAbort::mids$ = NULL;
        bool MergeState$CheckAbort::live$ = false;

        jclass MergeState$CheckAbort::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/MergeState$CheckAbort");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_47ab6527] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/MergePolicy$OneMerge;Lorg/apache/lucene/store/Directory;)V");
            mids$[mid_work_5d1c7645] = env->getMethodID(cls, "work", "(D)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        MergeState$CheckAbort::MergeState$CheckAbort(const ::org::apache::lucene::index::MergePolicy$OneMerge & a0, const ::org::apache::lucene::store::Directory & a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_47ab6527, a0.this$, a1.this$)) {}

        void MergeState$CheckAbort::work(jdouble a0) const
        {
          env->callVoidMethod(this$, mids$[mid_work_5d1c7645], a0);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_MergeState$CheckAbort_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_MergeState$CheckAbort_instance_(PyTypeObject *type, PyObject *arg);
        static int t_MergeState$CheckAbort_init_(t_MergeState$CheckAbort *self, PyObject *args, PyObject *kwds);
        static PyObject *t_MergeState$CheckAbort_work(t_MergeState$CheckAbort *self, PyObject *arg);

        static PyMethodDef t_MergeState$CheckAbort__methods_[] = {
          DECLARE_METHOD(t_MergeState$CheckAbort, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MergeState$CheckAbort, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MergeState$CheckAbort, work, METH_O),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(MergeState$CheckAbort, t_MergeState$CheckAbort, ::java::lang::Object, MergeState$CheckAbort, t_MergeState$CheckAbort_init_, 0, 0, 0, 0, 0);

        void t_MergeState$CheckAbort::install(PyObject *module)
        {
          installType(&PY_TYPE(MergeState$CheckAbort), module, "MergeState$CheckAbort", 0);
        }

        void t_MergeState$CheckAbort::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(MergeState$CheckAbort).tp_dict, "class_", make_descriptor(MergeState$CheckAbort::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(MergeState$CheckAbort).tp_dict, "wrapfn_", make_descriptor(t_MergeState$CheckAbort::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(MergeState$CheckAbort).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_MergeState$CheckAbort_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, MergeState$CheckAbort::initializeClass, 1)))
            return NULL;
          return t_MergeState$CheckAbort::wrap_Object(MergeState$CheckAbort(((t_MergeState$CheckAbort *) arg)->object.this$));
        }
        static PyObject *t_MergeState$CheckAbort_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, MergeState$CheckAbort::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_MergeState$CheckAbort_init_(t_MergeState$CheckAbort *self, PyObject *args, PyObject *kwds)
        {
          ::org::apache::lucene::index::MergePolicy$OneMerge a0((jobject) NULL);
          ::org::apache::lucene::store::Directory a1((jobject) NULL);
          MergeState$CheckAbort object((jobject) NULL);

          if (!parseArgs(args, "kk", ::org::apache::lucene::index::MergePolicy$OneMerge::initializeClass, ::org::apache::lucene::store::Directory::initializeClass, &a0, &a1))
          {
            INT_CALL(object = MergeState$CheckAbort(a0, a1));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_MergeState$CheckAbort_work(t_MergeState$CheckAbort *self, PyObject *arg)
        {
          jdouble a0;

          if (!parseArg(arg, "D", &a0))
          {
            OBJ_CALL(self->object.work(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "work", arg);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/Analyzer.h"
#include "java/io/Closeable.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "java/io/Reader.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/Analyzer$ReuseStrategy.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {

        ::java::lang::Class *Analyzer::class$ = NULL;
        jmethodID *Analyzer::mids$ = NULL;
        bool Analyzer::live$ = false;
        ::org::apache::lucene::analysis::Analyzer$ReuseStrategy *Analyzer::GLOBAL_REUSE_STRATEGY = NULL;
        ::org::apache::lucene::analysis::Analyzer$ReuseStrategy *Analyzer::PER_FIELD_REUSE_STRATEGY = NULL;

        jclass Analyzer::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/Analyzer");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_init$_9d052de7] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/Analyzer$ReuseStrategy;)V");
            mids$[mid_close_54c6a166] = env->getMethodID(cls, "close", "()V");
            mids$[mid_getOffsetGap_5fdc3f57] = env->getMethodID(cls, "getOffsetGap", "(Ljava/lang/String;)I");
            mids$[mid_getPositionIncrementGap_5fdc3f57] = env->getMethodID(cls, "getPositionIncrementGap", "(Ljava/lang/String;)I");
            mids$[mid_getReuseStrategy_723277fa] = env->getMethodID(cls, "getReuseStrategy", "()Lorg/apache/lucene/analysis/Analyzer$ReuseStrategy;");
            mids$[mid_tokenStream_b2e3f2ad] = env->getMethodID(cls, "tokenStream", "(Ljava/lang/String;Ljava/lang/String;)Lorg/apache/lucene/analysis/TokenStream;");
            mids$[mid_tokenStream_f8551151] = env->getMethodID(cls, "tokenStream", "(Ljava/lang/String;Ljava/io/Reader;)Lorg/apache/lucene/analysis/TokenStream;");
            mids$[mid_createComponents_1be39cae] = env->getMethodID(cls, "createComponents", "(Ljava/lang/String;Ljava/io/Reader;)Lorg/apache/lucene/analysis/Analyzer$TokenStreamComponents;");
            mids$[mid_initReader_d8fb1c81] = env->getMethodID(cls, "initReader", "(Ljava/lang/String;Ljava/io/Reader;)Ljava/io/Reader;");

            class$ = (::java::lang::Class *) new JObject(cls);
            cls = (jclass) class$->this$;

            GLOBAL_REUSE_STRATEGY = new ::org::apache::lucene::analysis::Analyzer$ReuseStrategy(env->getStaticObjectField(cls, "GLOBAL_REUSE_STRATEGY", "Lorg/apache/lucene/analysis/Analyzer$ReuseStrategy;"));
            PER_FIELD_REUSE_STRATEGY = new ::org::apache::lucene::analysis::Analyzer$ReuseStrategy(env->getStaticObjectField(cls, "PER_FIELD_REUSE_STRATEGY", "Lorg/apache/lucene/analysis/Analyzer$ReuseStrategy;"));
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        Analyzer::Analyzer() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        Analyzer::Analyzer(const ::org::apache::lucene::analysis::Analyzer$ReuseStrategy & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_9d052de7, a0.this$)) {}

        void Analyzer::close() const
        {
          env->callVoidMethod(this$, mids$[mid_close_54c6a166]);
        }

        jint Analyzer::getOffsetGap(const ::java::lang::String & a0) const
        {
          return env->callIntMethod(this$, mids$[mid_getOffsetGap_5fdc3f57], a0.this$);
        }

        jint Analyzer::getPositionIncrementGap(const ::java::lang::String & a0) const
        {
          return env->callIntMethod(this$, mids$[mid_getPositionIncrementGap_5fdc3f57], a0.this$);
        }

        ::org::apache::lucene::analysis::Analyzer$ReuseStrategy Analyzer::getReuseStrategy() const
        {
          return ::org::apache::lucene::analysis::Analyzer$ReuseStrategy(env->callObjectMethod(this$, mids$[mid_getReuseStrategy_723277fa]));
        }

        ::org::apache::lucene::analysis::TokenStream Analyzer::tokenStream(const ::java::lang::String & a0, const ::java::lang::String & a1) const
        {
          return ::org::apache::lucene::analysis::TokenStream(env->callObjectMethod(this$, mids$[mid_tokenStream_b2e3f2ad], a0.this$, a1.this$));
        }

        ::org::apache::lucene::analysis::TokenStream Analyzer::tokenStream(const ::java::lang::String & a0, const ::java::io::Reader & a1) const
        {
          return ::org::apache::lucene::analysis::TokenStream(env->callObjectMethod(this$, mids$[mid_tokenStream_f8551151], a0.this$, a1.this$));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"
#include "org/apache/lucene/analysis/Analyzer$PerFieldReuseStrategy.h"
#include "org/apache/lucene/analysis/Analyzer$GlobalReuseStrategy.h"
#include "org/apache/lucene/analysis/Analyzer$TokenStreamComponents.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        static PyObject *t_Analyzer_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_Analyzer_instance_(PyTypeObject *type, PyObject *arg);
        static int t_Analyzer_init_(t_Analyzer *self, PyObject *args, PyObject *kwds);
        static PyObject *t_Analyzer_close(t_Analyzer *self);
        static PyObject *t_Analyzer_getOffsetGap(t_Analyzer *self, PyObject *arg);
        static PyObject *t_Analyzer_getPositionIncrementGap(t_Analyzer *self, PyObject *arg);
        static PyObject *t_Analyzer_getReuseStrategy(t_Analyzer *self);
        static PyObject *t_Analyzer_tokenStream(t_Analyzer *self, PyObject *args);
        static PyObject *t_Analyzer_get__reuseStrategy(t_Analyzer *self, void *data);
        static PyGetSetDef t_Analyzer__fields_[] = {
          DECLARE_GET_FIELD(t_Analyzer, reuseStrategy),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_Analyzer__methods_[] = {
          DECLARE_METHOD(t_Analyzer, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_Analyzer, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_Analyzer, close, METH_NOARGS),
          DECLARE_METHOD(t_Analyzer, getOffsetGap, METH_O),
          DECLARE_METHOD(t_Analyzer, getPositionIncrementGap, METH_O),
          DECLARE_METHOD(t_Analyzer, getReuseStrategy, METH_NOARGS),
          DECLARE_METHOD(t_Analyzer, tokenStream, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(Analyzer, t_Analyzer, ::java::lang::Object, Analyzer, t_Analyzer_init_, 0, 0, t_Analyzer__fields_, 0, 0);

        void t_Analyzer::install(PyObject *module)
        {
          installType(&PY_TYPE(Analyzer), module, "Analyzer", 0);
          PyDict_SetItemString(PY_TYPE(Analyzer).tp_dict, "PerFieldReuseStrategy", make_descriptor(&PY_TYPE(Analyzer$PerFieldReuseStrategy)));
          PyDict_SetItemString(PY_TYPE(Analyzer).tp_dict, "GlobalReuseStrategy", make_descriptor(&PY_TYPE(Analyzer$GlobalReuseStrategy)));
          PyDict_SetItemString(PY_TYPE(Analyzer).tp_dict, "ReuseStrategy", make_descriptor(&PY_TYPE(Analyzer$ReuseStrategy)));
          PyDict_SetItemString(PY_TYPE(Analyzer).tp_dict, "TokenStreamComponents", make_descriptor(&PY_TYPE(Analyzer$TokenStreamComponents)));
        }

        void t_Analyzer::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(Analyzer).tp_dict, "class_", make_descriptor(Analyzer::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(Analyzer).tp_dict, "wrapfn_", make_descriptor(t_Analyzer::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(Analyzer).tp_dict, "boxfn_", make_descriptor(boxObject));
          env->getClass(Analyzer::initializeClass);
          PyDict_SetItemString(PY_TYPE(Analyzer).tp_dict, "GLOBAL_REUSE_STRATEGY", make_descriptor(::org::apache::lucene::analysis::t_Analyzer$ReuseStrategy::wrap_Object(*Analyzer::GLOBAL_REUSE_STRATEGY)));
          PyDict_SetItemString(PY_TYPE(Analyzer).tp_dict, "PER_FIELD_REUSE_STRATEGY", make_descriptor(::org::apache::lucene::analysis::t_Analyzer$ReuseStrategy::wrap_Object(*Analyzer::PER_FIELD_REUSE_STRATEGY)));
        }

        static PyObject *t_Analyzer_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, Analyzer::initializeClass, 1)))
            return NULL;
          return t_Analyzer::wrap_Object(Analyzer(((t_Analyzer *) arg)->object.this$));
        }
        static PyObject *t_Analyzer_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, Analyzer::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_Analyzer_init_(t_Analyzer *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 0:
            {
              Analyzer object((jobject) NULL);

              INT_CALL(object = Analyzer());
              self->object = object;
              break;
            }
            goto err;
           case 1:
            {
              ::org::apache::lucene::analysis::Analyzer$ReuseStrategy a0((jobject) NULL);
              Analyzer object((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::analysis::Analyzer$ReuseStrategy::initializeClass, &a0))
              {
                INT_CALL(object = Analyzer(a0));
                self->object = object;
                break;
              }
            }
           default:
           err:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_Analyzer_close(t_Analyzer *self)
        {
          OBJ_CALL(self->object.close());
          Py_RETURN_NONE;
        }

        static PyObject *t_Analyzer_getOffsetGap(t_Analyzer *self, PyObject *arg)
        {
          ::java::lang::String a0((jobject) NULL);
          jint result;

          if (!parseArg(arg, "s", &a0))
          {
            OBJ_CALL(result = self->object.getOffsetGap(a0));
            return PyInt_FromLong((long) result);
          }

          PyErr_SetArgsError((PyObject *) self, "getOffsetGap", arg);
          return NULL;
        }

        static PyObject *t_Analyzer_getPositionIncrementGap(t_Analyzer *self, PyObject *arg)
        {
          ::java::lang::String a0((jobject) NULL);
          jint result;

          if (!parseArg(arg, "s", &a0))
          {
            OBJ_CALL(result = self->object.getPositionIncrementGap(a0));
            return PyInt_FromLong((long) result);
          }

          PyErr_SetArgsError((PyObject *) self, "getPositionIncrementGap", arg);
          return NULL;
        }

        static PyObject *t_Analyzer_getReuseStrategy(t_Analyzer *self)
        {
          ::org::apache::lucene::analysis::Analyzer$ReuseStrategy result((jobject) NULL);
          OBJ_CALL(result = self->object.getReuseStrategy());
          return ::org::apache::lucene::analysis::t_Analyzer$ReuseStrategy::wrap_Object(result);
        }

        static PyObject *t_Analyzer_tokenStream(t_Analyzer *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 2:
            {
              ::java::lang::String a0((jobject) NULL);
              ::java::lang::String a1((jobject) NULL);
              ::org::apache::lucene::analysis::TokenStream result((jobject) NULL);

              if (!parseArgs(args, "ss", &a0, &a1))
              {
                OBJ_CALL(result = self->object.tokenStream(a0, a1));
                return ::org::apache::lucene::analysis::t_TokenStream::wrap_Object(result);
              }
            }
            {
              ::java::lang::String a0((jobject) NULL);
              ::java::io::Reader a1((jobject) NULL);
              ::org::apache::lucene::analysis::TokenStream result((jobject) NULL);

              if (!parseArgs(args, "sk", ::java::io::Reader::initializeClass, &a0, &a1))
              {
                OBJ_CALL(result = self->object.tokenStream(a0, a1));
                return ::org::apache::lucene::analysis::t_TokenStream::wrap_Object(result);
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "tokenStream", args);
          return NULL;
        }

        static PyObject *t_Analyzer_get__reuseStrategy(t_Analyzer *self, void *data)
        {
          ::org::apache::lucene::analysis::Analyzer$ReuseStrategy value((jobject) NULL);
          OBJ_CALL(value = self->object.getReuseStrategy());
          return ::org::apache::lucene::analysis::t_Analyzer$ReuseStrategy::wrap_Object(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/standard/StandardTokenizerImpl.h"
#include "org/apache/lucene/analysis/standard/StandardTokenizerInterface.h"
#include "java/lang/Class.h"
#include "java/io/Reader.h"
#include "org/apache/lucene/analysis/tokenattributes/CharTermAttribute.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace standard {

          ::java::lang::Class *StandardTokenizerImpl::class$ = NULL;
          jmethodID *StandardTokenizerImpl::mids$ = NULL;
          bool StandardTokenizerImpl::live$ = false;
          jint StandardTokenizerImpl::HANGUL_TYPE = (jint) 0;
          jint StandardTokenizerImpl::HIRAGANA_TYPE = (jint) 0;
          jint StandardTokenizerImpl::IDEOGRAPHIC_TYPE = (jint) 0;
          jint StandardTokenizerImpl::KATAKANA_TYPE = (jint) 0;
          jint StandardTokenizerImpl::NUMERIC_TYPE = (jint) 0;
          jint StandardTokenizerImpl::SOUTH_EAST_ASIAN_TYPE = (jint) 0;
          jint StandardTokenizerImpl::WORD_TYPE = (jint) 0;
          jint StandardTokenizerImpl::YYEOF = (jint) 0;
          jint StandardTokenizerImpl::YYINITIAL = (jint) 0;

          jclass StandardTokenizerImpl::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/standard/StandardTokenizerImpl");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_cf2e3c10] = env->getMethodID(cls, "<init>", "(Ljava/io/Reader;)V");
              mids$[mid_getNextToken_54c6a179] = env->getMethodID(cls, "getNextToken", "()I");
              mids$[mid_getText_64c709f2] = env->getMethodID(cls, "getText", "(Lorg/apache/lucene/analysis/tokenattributes/CharTermAttribute;)V");
              mids$[mid_yybegin_39c7bd3c] = env->getMethodID(cls, "yybegin", "(I)V");
              mids$[mid_yychar_54c6a179] = env->getMethodID(cls, "yychar", "()I");
              mids$[mid_yycharat_39c7bd29] = env->getMethodID(cls, "yycharat", "(I)C");
              mids$[mid_yyclose_54c6a166] = env->getMethodID(cls, "yyclose", "()V");
              mids$[mid_yylength_54c6a179] = env->getMethodID(cls, "yylength", "()I");
              mids$[mid_yypushback_39c7bd3c] = env->getMethodID(cls, "yypushback", "(I)V");
              mids$[mid_yyreset_cf2e3c10] = env->getMethodID(cls, "yyreset", "(Ljava/io/Reader;)V");
              mids$[mid_yystate_54c6a179] = env->getMethodID(cls, "yystate", "()I");
              mids$[mid_yytext_14c7b5c5] = env->getMethodID(cls, "yytext", "()Ljava/lang/String;");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              HANGUL_TYPE = env->getStaticIntField(cls, "HANGUL_TYPE");
              HIRAGANA_TYPE = env->getStaticIntField(cls, "HIRAGANA_TYPE");
              IDEOGRAPHIC_TYPE = env->getStaticIntField(cls, "IDEOGRAPHIC_TYPE");
              KATAKANA_TYPE = env->getStaticIntField(cls, "KATAKANA_TYPE");
              NUMERIC_TYPE = env->getStaticIntField(cls, "NUMERIC_TYPE");
              SOUTH_EAST_ASIAN_TYPE = env->getStaticIntField(cls, "SOUTH_EAST_ASIAN_TYPE");
              WORD_TYPE = env->getStaticIntField(cls, "WORD_TYPE");
              YYEOF = env->getStaticIntField(cls, "YYEOF");
              YYINITIAL = env->getStaticIntField(cls, "YYINITIAL");
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          StandardTokenizerImpl::StandardTokenizerImpl(const ::java::io::Reader & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_cf2e3c10, a0.this$)) {}

          jint StandardTokenizerImpl::getNextToken() const
          {
            return env->callIntMethod(this$, mids$[mid_getNextToken_54c6a179]);
          }

          void StandardTokenizerImpl::getText(const ::org::apache::lucene::analysis::tokenattributes::CharTermAttribute & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_getText_64c709f2], a0.this$);
          }

          void StandardTokenizerImpl::yybegin(jint a0) const
          {
            env->callVoidMethod(this$, mids$[mid_yybegin_39c7bd3c], a0);
          }

          jint StandardTokenizerImpl::yychar() const
          {
            return env->callIntMethod(this$, mids$[mid_yychar_54c6a179]);
          }

          jchar StandardTokenizerImpl::yycharat(jint a0) const
          {
            return env->callCharMethod(this$, mids$[mid_yycharat_39c7bd29], a0);
          }

          void StandardTokenizerImpl::yyclose() const
          {
            env->callVoidMethod(this$, mids$[mid_yyclose_54c6a166]);
          }

          jint StandardTokenizerImpl::yylength() const
          {
            return env->callIntMethod(this$, mids$[mid_yylength_54c6a179]);
          }

          void StandardTokenizerImpl::yypushback(jint a0) const
          {
            env->callVoidMethod(this$, mids$[mid_yypushback_39c7bd3c], a0);
          }

          void StandardTokenizerImpl::yyreset(const ::java::io::Reader & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_yyreset_cf2e3c10], a0.this$);
          }

          jint StandardTokenizerImpl::yystate() const
          {
            return env->callIntMethod(this$, mids$[mid_yystate_54c6a179]);
          }

          ::java::lang::String StandardTokenizerImpl::yytext() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_yytext_14c7b5c5]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace standard {
          static PyObject *t_StandardTokenizerImpl_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_StandardTokenizerImpl_instance_(PyTypeObject *type, PyObject *arg);
          static int t_StandardTokenizerImpl_init_(t_StandardTokenizerImpl *self, PyObject *args, PyObject *kwds);
          static PyObject *t_StandardTokenizerImpl_getNextToken(t_StandardTokenizerImpl *self);
          static PyObject *t_StandardTokenizerImpl_getText(t_StandardTokenizerImpl *self, PyObject *arg);
          static PyObject *t_StandardTokenizerImpl_yybegin(t_StandardTokenizerImpl *self, PyObject *arg);
          static PyObject *t_StandardTokenizerImpl_yychar(t_StandardTokenizerImpl *self);
          static PyObject *t_StandardTokenizerImpl_yycharat(t_StandardTokenizerImpl *self, PyObject *arg);
          static PyObject *t_StandardTokenizerImpl_yyclose(t_StandardTokenizerImpl *self);
          static PyObject *t_StandardTokenizerImpl_yylength(t_StandardTokenizerImpl *self);
          static PyObject *t_StandardTokenizerImpl_yypushback(t_StandardTokenizerImpl *self, PyObject *arg);
          static PyObject *t_StandardTokenizerImpl_yyreset(t_StandardTokenizerImpl *self, PyObject *arg);
          static PyObject *t_StandardTokenizerImpl_yystate(t_StandardTokenizerImpl *self);
          static PyObject *t_StandardTokenizerImpl_yytext(t_StandardTokenizerImpl *self);
          static PyObject *t_StandardTokenizerImpl_get__nextToken(t_StandardTokenizerImpl *self, void *data);
          static PyGetSetDef t_StandardTokenizerImpl__fields_[] = {
            DECLARE_GET_FIELD(t_StandardTokenizerImpl, nextToken),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_StandardTokenizerImpl__methods_[] = {
            DECLARE_METHOD(t_StandardTokenizerImpl, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_StandardTokenizerImpl, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_StandardTokenizerImpl, getNextToken, METH_NOARGS),
            DECLARE_METHOD(t_StandardTokenizerImpl, getText, METH_O),
            DECLARE_METHOD(t_StandardTokenizerImpl, yybegin, METH_O),
            DECLARE_METHOD(t_StandardTokenizerImpl, yychar, METH_NOARGS),
            DECLARE_METHOD(t_StandardTokenizerImpl, yycharat, METH_O),
            DECLARE_METHOD(t_StandardTokenizerImpl, yyclose, METH_NOARGS),
            DECLARE_METHOD(t_StandardTokenizerImpl, yylength, METH_NOARGS),
            DECLARE_METHOD(t_StandardTokenizerImpl, yypushback, METH_O),
            DECLARE_METHOD(t_StandardTokenizerImpl, yyreset, METH_O),
            DECLARE_METHOD(t_StandardTokenizerImpl, yystate, METH_NOARGS),
            DECLARE_METHOD(t_StandardTokenizerImpl, yytext, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(StandardTokenizerImpl, t_StandardTokenizerImpl, ::java::lang::Object, StandardTokenizerImpl, t_StandardTokenizerImpl_init_, 0, 0, t_StandardTokenizerImpl__fields_, 0, 0);

          void t_StandardTokenizerImpl::install(PyObject *module)
          {
            installType(&PY_TYPE(StandardTokenizerImpl), module, "StandardTokenizerImpl", 0);
          }

          void t_StandardTokenizerImpl::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(StandardTokenizerImpl).tp_dict, "class_", make_descriptor(StandardTokenizerImpl::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(StandardTokenizerImpl).tp_dict, "wrapfn_", make_descriptor(t_StandardTokenizerImpl::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(StandardTokenizerImpl).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(StandardTokenizerImpl::initializeClass);
            PyDict_SetItemString(PY_TYPE(StandardTokenizerImpl).tp_dict, "HANGUL_TYPE", make_descriptor(StandardTokenizerImpl::HANGUL_TYPE));
            PyDict_SetItemString(PY_TYPE(StandardTokenizerImpl).tp_dict, "HIRAGANA_TYPE", make_descriptor(StandardTokenizerImpl::HIRAGANA_TYPE));
            PyDict_SetItemString(PY_TYPE(StandardTokenizerImpl).tp_dict, "IDEOGRAPHIC_TYPE", make_descriptor(StandardTokenizerImpl::IDEOGRAPHIC_TYPE));
            PyDict_SetItemString(PY_TYPE(StandardTokenizerImpl).tp_dict, "KATAKANA_TYPE", make_descriptor(StandardTokenizerImpl::KATAKANA_TYPE));
            PyDict_SetItemString(PY_TYPE(StandardTokenizerImpl).tp_dict, "NUMERIC_TYPE", make_descriptor(StandardTokenizerImpl::NUMERIC_TYPE));
            PyDict_SetItemString(PY_TYPE(StandardTokenizerImpl).tp_dict, "SOUTH_EAST_ASIAN_TYPE", make_descriptor(StandardTokenizerImpl::SOUTH_EAST_ASIAN_TYPE));
            PyDict_SetItemString(PY_TYPE(StandardTokenizerImpl).tp_dict, "WORD_TYPE", make_descriptor(StandardTokenizerImpl::WORD_TYPE));
            PyDict_SetItemString(PY_TYPE(StandardTokenizerImpl).tp_dict, "YYEOF", make_descriptor(StandardTokenizerImpl::YYEOF));
            PyDict_SetItemString(PY_TYPE(StandardTokenizerImpl).tp_dict, "YYINITIAL", make_descriptor(StandardTokenizerImpl::YYINITIAL));
          }

          static PyObject *t_StandardTokenizerImpl_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, StandardTokenizerImpl::initializeClass, 1)))
              return NULL;
            return t_StandardTokenizerImpl::wrap_Object(StandardTokenizerImpl(((t_StandardTokenizerImpl *) arg)->object.this$));
          }
          static PyObject *t_StandardTokenizerImpl_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, StandardTokenizerImpl::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_StandardTokenizerImpl_init_(t_StandardTokenizerImpl *self, PyObject *args, PyObject *kwds)
          {
            ::java::io::Reader a0((jobject) NULL);
            StandardTokenizerImpl object((jobject) NULL);

            if (!parseArgs(args, "k", ::java::io::Reader::initializeClass, &a0))
            {
              INT_CALL(object = StandardTokenizerImpl(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_StandardTokenizerImpl_getNextToken(t_StandardTokenizerImpl *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getNextToken());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_StandardTokenizerImpl_getText(t_StandardTokenizerImpl *self, PyObject *arg)
          {
            ::org::apache::lucene::analysis::tokenattributes::CharTermAttribute a0((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::analysis::tokenattributes::CharTermAttribute::initializeClass, &a0))
            {
              OBJ_CALL(self->object.getText(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "getText", arg);
            return NULL;
          }

          static PyObject *t_StandardTokenizerImpl_yybegin(t_StandardTokenizerImpl *self, PyObject *arg)
          {
            jint a0;

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(self->object.yybegin(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "yybegin", arg);
            return NULL;
          }

          static PyObject *t_StandardTokenizerImpl_yychar(t_StandardTokenizerImpl *self)
          {
            jint result;
            OBJ_CALL(result = self->object.yychar());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_StandardTokenizerImpl_yycharat(t_StandardTokenizerImpl *self, PyObject *arg)
          {
            jint a0;
            jchar result;

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(result = self->object.yycharat(a0));
              return PyUnicode_FromUnicode((Py_UNICODE *) &result, 1);
            }

            PyErr_SetArgsError((PyObject *) self, "yycharat", arg);
            return NULL;
          }

          static PyObject *t_StandardTokenizerImpl_yyclose(t_StandardTokenizerImpl *self)
          {
            OBJ_CALL(self->object.yyclose());
            Py_RETURN_NONE;
          }

          static PyObject *t_StandardTokenizerImpl_yylength(t_StandardTokenizerImpl *self)
          {
            jint result;
            OBJ_CALL(result = self->object.yylength());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_StandardTokenizerImpl_yypushback(t_StandardTokenizerImpl *self, PyObject *arg)
          {
            jint a0;

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(self->object.yypushback(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "yypushback", arg);
            return NULL;
          }

          static PyObject *t_StandardTokenizerImpl_yyreset(t_StandardTokenizerImpl *self, PyObject *arg)
          {
            ::java::io::Reader a0((jobject) NULL);

            if (!parseArg(arg, "k", ::java::io::Reader::initializeClass, &a0))
            {
              OBJ_CALL(self->object.yyreset(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "yyreset", arg);
            return NULL;
          }

          static PyObject *t_StandardTokenizerImpl_yystate(t_StandardTokenizerImpl *self)
          {
            jint result;
            OBJ_CALL(result = self->object.yystate());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_StandardTokenizerImpl_yytext(t_StandardTokenizerImpl *self)
          {
            ::java::lang::String result((jobject) NULL);
            OBJ_CALL(result = self->object.yytext());
            return j2p(result);
          }

          static PyObject *t_StandardTokenizerImpl_get__nextToken(t_StandardTokenizerImpl *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getNextToken());
            return PyInt_FromLong((long) value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/standard/UAX29URLEmailTokenizerImpl.h"
#include "org/apache/lucene/analysis/standard/StandardTokenizerInterface.h"
#include "java/lang/Class.h"
#include "java/io/Reader.h"
#include "org/apache/lucene/analysis/tokenattributes/CharTermAttribute.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace standard {

          ::java::lang::Class *UAX29URLEmailTokenizerImpl::class$ = NULL;
          jmethodID *UAX29URLEmailTokenizerImpl::mids$ = NULL;
          bool UAX29URLEmailTokenizerImpl::live$ = false;
          jint UAX29URLEmailTokenizerImpl::AVOID_BAD_URL = (jint) 0;
          jint UAX29URLEmailTokenizerImpl::EMAIL_TYPE = (jint) 0;
          jint UAX29URLEmailTokenizerImpl::HANGUL_TYPE = (jint) 0;
          jint UAX29URLEmailTokenizerImpl::HIRAGANA_TYPE = (jint) 0;
          jint UAX29URLEmailTokenizerImpl::IDEOGRAPHIC_TYPE = (jint) 0;
          jint UAX29URLEmailTokenizerImpl::KATAKANA_TYPE = (jint) 0;
          jint UAX29URLEmailTokenizerImpl::NUMERIC_TYPE = (jint) 0;
          jint UAX29URLEmailTokenizerImpl::SOUTH_EAST_ASIAN_TYPE = (jint) 0;
          jint UAX29URLEmailTokenizerImpl::URL_TYPE = (jint) 0;
          jint UAX29URLEmailTokenizerImpl::WORD_TYPE = (jint) 0;
          jint UAX29URLEmailTokenizerImpl::YYEOF = (jint) 0;
          jint UAX29URLEmailTokenizerImpl::YYINITIAL = (jint) 0;

          jclass UAX29URLEmailTokenizerImpl::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/standard/UAX29URLEmailTokenizerImpl");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_cf2e3c10] = env->getMethodID(cls, "<init>", "(Ljava/io/Reader;)V");
              mids$[mid_getNextToken_54c6a179] = env->getMethodID(cls, "getNextToken", "()I");
              mids$[mid_getText_64c709f2] = env->getMethodID(cls, "getText", "(Lorg/apache/lucene/analysis/tokenattributes/CharTermAttribute;)V");
              mids$[mid_yybegin_39c7bd3c] = env->getMethodID(cls, "yybegin", "(I)V");
              mids$[mid_yychar_54c6a179] = env->getMethodID(cls, "yychar", "()I");
              mids$[mid_yycharat_39c7bd29] = env->getMethodID(cls, "yycharat", "(I)C");
              mids$[mid_yyclose_54c6a166] = env->getMethodID(cls, "yyclose", "()V");
              mids$[mid_yylength_54c6a179] = env->getMethodID(cls, "yylength", "()I");
              mids$[mid_yypushback_39c7bd3c] = env->getMethodID(cls, "yypushback", "(I)V");
              mids$[mid_yyreset_cf2e3c10] = env->getMethodID(cls, "yyreset", "(Ljava/io/Reader;)V");
              mids$[mid_yystate_54c6a179] = env->getMethodID(cls, "yystate", "()I");
              mids$[mid_yytext_14c7b5c5] = env->getMethodID(cls, "yytext", "()Ljava/lang/String;");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              AVOID_BAD_URL = env->getStaticIntField(cls, "AVOID_BAD_URL");
              EMAIL_TYPE = env->getStaticIntField(cls, "EMAIL_TYPE");
              HANGUL_TYPE = env->getStaticIntField(cls, "HANGUL_TYPE");
              HIRAGANA_TYPE = env->getStaticIntField(cls, "HIRAGANA_TYPE");
              IDEOGRAPHIC_TYPE = env->getStaticIntField(cls, "IDEOGRAPHIC_TYPE");
              KATAKANA_TYPE = env->getStaticIntField(cls, "KATAKANA_TYPE");
              NUMERIC_TYPE = env->getStaticIntField(cls, "NUMERIC_TYPE");
              SOUTH_EAST_ASIAN_TYPE = env->getStaticIntField(cls, "SOUTH_EAST_ASIAN_TYPE");
              URL_TYPE = env->getStaticIntField(cls, "URL_TYPE");
              WORD_TYPE = env->getStaticIntField(cls, "WORD_TYPE");
              YYEOF = env->getStaticIntField(cls, "YYEOF");
              YYINITIAL = env->getStaticIntField(cls, "YYINITIAL");
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          UAX29URLEmailTokenizerImpl::UAX29URLEmailTokenizerImpl(const ::java::io::Reader & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_cf2e3c10, a0.this$)) {}

          jint UAX29URLEmailTokenizerImpl::getNextToken() const
          {
            return env->callIntMethod(this$, mids$[mid_getNextToken_54c6a179]);
          }

          void UAX29URLEmailTokenizerImpl::getText(const ::org::apache::lucene::analysis::tokenattributes::CharTermAttribute & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_getText_64c709f2], a0.this$);
          }

          void UAX29URLEmailTokenizerImpl::yybegin(jint a0) const
          {
            env->callVoidMethod(this$, mids$[mid_yybegin_39c7bd3c], a0);
          }

          jint UAX29URLEmailTokenizerImpl::yychar() const
          {
            return env->callIntMethod(this$, mids$[mid_yychar_54c6a179]);
          }

          jchar UAX29URLEmailTokenizerImpl::yycharat(jint a0) const
          {
            return env->callCharMethod(this$, mids$[mid_yycharat_39c7bd29], a0);
          }

          void UAX29URLEmailTokenizerImpl::yyclose() const
          {
            env->callVoidMethod(this$, mids$[mid_yyclose_54c6a166]);
          }

          jint UAX29URLEmailTokenizerImpl::yylength() const
          {
            return env->callIntMethod(this$, mids$[mid_yylength_54c6a179]);
          }

          void UAX29URLEmailTokenizerImpl::yypushback(jint a0) const
          {
            env->callVoidMethod(this$, mids$[mid_yypushback_39c7bd3c], a0);
          }

          void UAX29URLEmailTokenizerImpl::yyreset(const ::java::io::Reader & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_yyreset_cf2e3c10], a0.this$);
          }

          jint UAX29URLEmailTokenizerImpl::yystate() const
          {
            return env->callIntMethod(this$, mids$[mid_yystate_54c6a179]);
          }

          ::java::lang::String UAX29URLEmailTokenizerImpl::yytext() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_yytext_14c7b5c5]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace standard {
          static PyObject *t_UAX29URLEmailTokenizerImpl_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_UAX29URLEmailTokenizerImpl_instance_(PyTypeObject *type, PyObject *arg);
          static int t_UAX29URLEmailTokenizerImpl_init_(t_UAX29URLEmailTokenizerImpl *self, PyObject *args, PyObject *kwds);
          static PyObject *t_UAX29URLEmailTokenizerImpl_getNextToken(t_UAX29URLEmailTokenizerImpl *self);
          static PyObject *t_UAX29URLEmailTokenizerImpl_getText(t_UAX29URLEmailTokenizerImpl *self, PyObject *arg);
          static PyObject *t_UAX29URLEmailTokenizerImpl_yybegin(t_UAX29URLEmailTokenizerImpl *self, PyObject *arg);
          static PyObject *t_UAX29URLEmailTokenizerImpl_yychar(t_UAX29URLEmailTokenizerImpl *self);
          static PyObject *t_UAX29URLEmailTokenizerImpl_yycharat(t_UAX29URLEmailTokenizerImpl *self, PyObject *arg);
          static PyObject *t_UAX29URLEmailTokenizerImpl_yyclose(t_UAX29URLEmailTokenizerImpl *self);
          static PyObject *t_UAX29URLEmailTokenizerImpl_yylength(t_UAX29URLEmailTokenizerImpl *self);
          static PyObject *t_UAX29URLEmailTokenizerImpl_yypushback(t_UAX29URLEmailTokenizerImpl *self, PyObject *arg);
          static PyObject *t_UAX29URLEmailTokenizerImpl_yyreset(t_UAX29URLEmailTokenizerImpl *self, PyObject *arg);
          static PyObject *t_UAX29URLEmailTokenizerImpl_yystate(t_UAX29URLEmailTokenizerImpl *self);
          static PyObject *t_UAX29URLEmailTokenizerImpl_yytext(t_UAX29URLEmailTokenizerImpl *self);
          static PyObject *t_UAX29URLEmailTokenizerImpl_get__nextToken(t_UAX29URLEmailTokenizerImpl *self, void *data);
          static PyGetSetDef t_UAX29URLEmailTokenizerImpl__fields_[] = {
            DECLARE_GET_FIELD(t_UAX29URLEmailTokenizerImpl, nextToken),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_UAX29URLEmailTokenizerImpl__methods_[] = {
            DECLARE_METHOD(t_UAX29URLEmailTokenizerImpl, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_UAX29URLEmailTokenizerImpl, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_UAX29URLEmailTokenizerImpl, getNextToken, METH_NOARGS),
            DECLARE_METHOD(t_UAX29URLEmailTokenizerImpl, getText, METH_O),
            DECLARE_METHOD(t_UAX29URLEmailTokenizerImpl, yybegin, METH_O),
            DECLARE_METHOD(t_UAX29URLEmailTokenizerImpl, yychar, METH_NOARGS),
            DECLARE_METHOD(t_UAX29URLEmailTokenizerImpl, yycharat, METH_O),
            DECLARE_METHOD(t_UAX29URLEmailTokenizerImpl, yyclose, METH_NOARGS),
            DECLARE_METHOD(t_UAX29URLEmailTokenizerImpl, yylength, METH_NOARGS),
            DECLARE_METHOD(t_UAX29URLEmailTokenizerImpl, yypushback, METH_O),
            DECLARE_METHOD(t_UAX29URLEmailTokenizerImpl, yyreset, METH_O),
            DECLARE_METHOD(t_UAX29URLEmailTokenizerImpl, yystate, METH_NOARGS),
            DECLARE_METHOD(t_UAX29URLEmailTokenizerImpl, yytext, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(UAX29URLEmailTokenizerImpl, t_UAX29URLEmailTokenizerImpl, ::java::lang::Object, UAX29URLEmailTokenizerImpl, t_UAX29URLEmailTokenizerImpl_init_, 0, 0, t_UAX29URLEmailTokenizerImpl__fields_, 0, 0);

          void t_UAX29URLEmailTokenizerImpl::install(PyObject *module)
          {
            installType(&PY_TYPE(UAX29URLEmailTokenizerImpl), module, "UAX29URLEmailTokenizerImpl", 0);
          }

          void t_UAX29URLEmailTokenizerImpl::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(UAX29URLEmailTokenizerImpl).tp_dict, "class_", make_descriptor(UAX29URLEmailTokenizerImpl::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(UAX29URLEmailTokenizerImpl).tp_dict, "wrapfn_", make_descriptor(t_UAX29URLEmailTokenizerImpl::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(UAX29URLEmailTokenizerImpl).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(UAX29URLEmailTokenizerImpl::initializeClass);
            PyDict_SetItemString(PY_TYPE(UAX29URLEmailTokenizerImpl).tp_dict, "AVOID_BAD_URL", make_descriptor(UAX29URLEmailTokenizerImpl::AVOID_BAD_URL));
            PyDict_SetItemString(PY_TYPE(UAX29URLEmailTokenizerImpl).tp_dict, "EMAIL_TYPE", make_descriptor(UAX29URLEmailTokenizerImpl::EMAIL_TYPE));
            PyDict_SetItemString(PY_TYPE(UAX29URLEmailTokenizerImpl).tp_dict, "HANGUL_TYPE", make_descriptor(UAX29URLEmailTokenizerImpl::HANGUL_TYPE));
            PyDict_SetItemString(PY_TYPE(UAX29URLEmailTokenizerImpl).tp_dict, "HIRAGANA_TYPE", make_descriptor(UAX29URLEmailTokenizerImpl::HIRAGANA_TYPE));
            PyDict_SetItemString(PY_TYPE(UAX29URLEmailTokenizerImpl).tp_dict, "IDEOGRAPHIC_TYPE", make_descriptor(UAX29URLEmailTokenizerImpl::IDEOGRAPHIC_TYPE));
            PyDict_SetItemString(PY_TYPE(UAX29URLEmailTokenizerImpl).tp_dict, "KATAKANA_TYPE", make_descriptor(UAX29URLEmailTokenizerImpl::KATAKANA_TYPE));
            PyDict_SetItemString(PY_TYPE(UAX29URLEmailTokenizerImpl).tp_dict, "NUMERIC_TYPE", make_descriptor(UAX29URLEmailTokenizerImpl::NUMERIC_TYPE));
            PyDict_SetItemString(PY_TYPE(UAX29URLEmailTokenizerImpl).tp_dict, "SOUTH_EAST_ASIAN_TYPE", make_descriptor(UAX29URLEmailTokenizerImpl::SOUTH_EAST_ASIAN_TYPE));
            PyDict_SetItemString(PY_TYPE(UAX29URLEmailTokenizerImpl).tp_dict, "URL_TYPE", make_descriptor(UAX29URLEmailTokenizerImpl::URL_TYPE));
            PyDict_SetItemString(PY_TYPE(UAX29URLEmailTokenizerImpl).tp_dict, "WORD_TYPE", make_descriptor(UAX29URLEmailTokenizerImpl::WORD_TYPE));
            PyDict_SetItemString(PY_TYPE(UAX29URLEmailTokenizerImpl).tp_dict, "YYEOF", make_descriptor(UAX29URLEmailTokenizerImpl::YYEOF));
            PyDict_SetItemString(PY_TYPE(UAX29URLEmailTokenizerImpl).tp_dict, "YYINITIAL", make_descriptor(UAX29URLEmailTokenizerImpl::YYINITIAL));
          }

          static PyObject *t_UAX29URLEmailTokenizerImpl_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, UAX29URLEmailTokenizerImpl::initializeClass, 1)))
              return NULL;
            return t_UAX29URLEmailTokenizerImpl::wrap_Object(UAX29URLEmailTokenizerImpl(((t_UAX29URLEmailTokenizerImpl *) arg)->object.this$));
          }
          static PyObject *t_UAX29URLEmailTokenizerImpl_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, UAX29URLEmailTokenizerImpl::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_UAX29URLEmailTokenizerImpl_init_(t_UAX29URLEmailTokenizerImpl *self, PyObject *args, PyObject *kwds)
          {
            ::java::io::Reader a0((jobject) NULL);
            UAX29URLEmailTokenizerImpl object((jobject) NULL);

            if (!parseArgs(args, "k", ::java::io::Reader::initializeClass, &a0))
            {
              INT_CALL(object = UAX29URLEmailTokenizerImpl(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_UAX29URLEmailTokenizerImpl_getNextToken(t_UAX29URLEmailTokenizerImpl *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getNextToken());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_UAX29URLEmailTokenizerImpl_getText(t_UAX29URLEmailTokenizerImpl *self, PyObject *arg)
          {
            ::org::apache::lucene::analysis::tokenattributes::CharTermAttribute a0((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::analysis::tokenattributes::CharTermAttribute::initializeClass, &a0))
            {
              OBJ_CALL(self->object.getText(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "getText", arg);
            return NULL;
          }

          static PyObject *t_UAX29URLEmailTokenizerImpl_yybegin(t_UAX29URLEmailTokenizerImpl *self, PyObject *arg)
          {
            jint a0;

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(self->object.yybegin(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "yybegin", arg);
            return NULL;
          }

          static PyObject *t_UAX29URLEmailTokenizerImpl_yychar(t_UAX29URLEmailTokenizerImpl *self)
          {
            jint result;
            OBJ_CALL(result = self->object.yychar());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_UAX29URLEmailTokenizerImpl_yycharat(t_UAX29URLEmailTokenizerImpl *self, PyObject *arg)
          {
            jint a0;
            jchar result;

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(result = self->object.yycharat(a0));
              return PyUnicode_FromUnicode((Py_UNICODE *) &result, 1);
            }

            PyErr_SetArgsError((PyObject *) self, "yycharat", arg);
            return NULL;
          }

          static PyObject *t_UAX29URLEmailTokenizerImpl_yyclose(t_UAX29URLEmailTokenizerImpl *self)
          {
            OBJ_CALL(self->object.yyclose());
            Py_RETURN_NONE;
          }

          static PyObject *t_UAX29URLEmailTokenizerImpl_yylength(t_UAX29URLEmailTokenizerImpl *self)
          {
            jint result;
            OBJ_CALL(result = self->object.yylength());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_UAX29URLEmailTokenizerImpl_yypushback(t_UAX29URLEmailTokenizerImpl *self, PyObject *arg)
          {
            jint a0;

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(self->object.yypushback(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "yypushback", arg);
            return NULL;
          }

          static PyObject *t_UAX29URLEmailTokenizerImpl_yyreset(t_UAX29URLEmailTokenizerImpl *self, PyObject *arg)
          {
            ::java::io::Reader a0((jobject) NULL);

            if (!parseArg(arg, "k", ::java::io::Reader::initializeClass, &a0))
            {
              OBJ_CALL(self->object.yyreset(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "yyreset", arg);
            return NULL;
          }

          static PyObject *t_UAX29URLEmailTokenizerImpl_yystate(t_UAX29URLEmailTokenizerImpl *self)
          {
            jint result;
            OBJ_CALL(result = self->object.yystate());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_UAX29URLEmailTokenizerImpl_yytext(t_UAX29URLEmailTokenizerImpl *self)
          {
            ::java::lang::String result((jobject) NULL);
            OBJ_CALL(result = self->object.yytext());
            return j2p(result);
          }

          static PyObject *t_UAX29URLEmailTokenizerImpl_get__nextToken(t_UAX29URLEmailTokenizerImpl *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getNextToken());
            return PyInt_FromLong((long) value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/lucene42/Lucene42TermVectorsFormat.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace lucene42 {

          ::java::lang::Class *Lucene42TermVectorsFormat::class$ = NULL;
          jmethodID *Lucene42TermVectorsFormat::mids$ = NULL;
          bool Lucene42TermVectorsFormat::live$ = false;

          jclass Lucene42TermVectorsFormat::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/lucene42/Lucene42TermVectorsFormat");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          Lucene42TermVectorsFormat::Lucene42TermVectorsFormat() : ::org::apache::lucene::codecs::compressing::CompressingTermVectorsFormat(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace lucene42 {
          static PyObject *t_Lucene42TermVectorsFormat_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Lucene42TermVectorsFormat_instance_(PyTypeObject *type, PyObject *arg);
          static int t_Lucene42TermVectorsFormat_init_(t_Lucene42TermVectorsFormat *self, PyObject *args, PyObject *kwds);

          static PyMethodDef t_Lucene42TermVectorsFormat__methods_[] = {
            DECLARE_METHOD(t_Lucene42TermVectorsFormat, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lucene42TermVectorsFormat, instance_, METH_O | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(Lucene42TermVectorsFormat, t_Lucene42TermVectorsFormat, ::org::apache::lucene::codecs::compressing::CompressingTermVectorsFormat, Lucene42TermVectorsFormat, t_Lucene42TermVectorsFormat_init_, 0, 0, 0, 0, 0);

          void t_Lucene42TermVectorsFormat::install(PyObject *module)
          {
            installType(&PY_TYPE(Lucene42TermVectorsFormat), module, "Lucene42TermVectorsFormat", 0);
          }

          void t_Lucene42TermVectorsFormat::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(Lucene42TermVectorsFormat).tp_dict, "class_", make_descriptor(Lucene42TermVectorsFormat::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(Lucene42TermVectorsFormat).tp_dict, "wrapfn_", make_descriptor(t_Lucene42TermVectorsFormat::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(Lucene42TermVectorsFormat).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_Lucene42TermVectorsFormat_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, Lucene42TermVectorsFormat::initializeClass, 1)))
              return NULL;
            return t_Lucene42TermVectorsFormat::wrap_Object(Lucene42TermVectorsFormat(((t_Lucene42TermVectorsFormat *) arg)->object.this$));
          }
          static PyObject *t_Lucene42TermVectorsFormat_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, Lucene42TermVectorsFormat::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_Lucene42TermVectorsFormat_init_(t_Lucene42TermVectorsFormat *self, PyObject *args, PyObject *kwds)
          {
            Lucene42TermVectorsFormat object((jobject) NULL);

            INT_CALL(object = Lucene42TermVectorsFormat());
            self->object = object;

            return 0;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/grouping/function/FunctionDistinctValuesCollector$GroupCount.h"
#include "org/apache/lucene/util/mutable/MutableValue.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace grouping {
          namespace function {

            ::java::lang::Class *FunctionDistinctValuesCollector$GroupCount::class$ = NULL;
            jmethodID *FunctionDistinctValuesCollector$GroupCount::mids$ = NULL;
            bool FunctionDistinctValuesCollector$GroupCount::live$ = false;

            jclass FunctionDistinctValuesCollector$GroupCount::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/search/grouping/function/FunctionDistinctValuesCollector$GroupCount");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace grouping {
          namespace function {
            static PyObject *t_FunctionDistinctValuesCollector$GroupCount_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_FunctionDistinctValuesCollector$GroupCount_instance_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_FunctionDistinctValuesCollector$GroupCount_of_(t_FunctionDistinctValuesCollector$GroupCount *self, PyObject *args);
            static PyObject *t_FunctionDistinctValuesCollector$GroupCount_get__parameters_(t_FunctionDistinctValuesCollector$GroupCount *self, void *data);
            static PyGetSetDef t_FunctionDistinctValuesCollector$GroupCount__fields_[] = {
              DECLARE_GET_FIELD(t_FunctionDistinctValuesCollector$GroupCount, parameters_),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_FunctionDistinctValuesCollector$GroupCount__methods_[] = {
              DECLARE_METHOD(t_FunctionDistinctValuesCollector$GroupCount, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_FunctionDistinctValuesCollector$GroupCount, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_FunctionDistinctValuesCollector$GroupCount, of_, METH_VARARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(FunctionDistinctValuesCollector$GroupCount, t_FunctionDistinctValuesCollector$GroupCount, ::org::apache::lucene::search::grouping::AbstractDistinctValuesCollector$GroupCount, FunctionDistinctValuesCollector$GroupCount, abstract_init, 0, 0, t_FunctionDistinctValuesCollector$GroupCount__fields_, 0, 0);
            PyObject *t_FunctionDistinctValuesCollector$GroupCount::wrap_Object(const FunctionDistinctValuesCollector$GroupCount& object, PyTypeObject *p0)
            {
              PyObject *obj = t_FunctionDistinctValuesCollector$GroupCount::wrap_Object(object);
              if (obj != NULL && obj != Py_None)
              {
                t_FunctionDistinctValuesCollector$GroupCount *self = (t_FunctionDistinctValuesCollector$GroupCount *) obj;
                self->parameters[0] = p0;
              }
              return obj;
            }

            PyObject *t_FunctionDistinctValuesCollector$GroupCount::wrap_jobject(const jobject& object, PyTypeObject *p0)
            {
              PyObject *obj = t_FunctionDistinctValuesCollector$GroupCount::wrap_jobject(object);
              if (obj != NULL && obj != Py_None)
              {
                t_FunctionDistinctValuesCollector$GroupCount *self = (t_FunctionDistinctValuesCollector$GroupCount *) obj;
                self->parameters[0] = p0;
              }
              return obj;
            }

            void t_FunctionDistinctValuesCollector$GroupCount::install(PyObject *module)
            {
              installType(&PY_TYPE(FunctionDistinctValuesCollector$GroupCount), module, "FunctionDistinctValuesCollector$GroupCount", 0);
            }

            void t_FunctionDistinctValuesCollector$GroupCount::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(FunctionDistinctValuesCollector$GroupCount).tp_dict, "class_", make_descriptor(FunctionDistinctValuesCollector$GroupCount::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(FunctionDistinctValuesCollector$GroupCount).tp_dict, "wrapfn_", make_descriptor(t_FunctionDistinctValuesCollector$GroupCount::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(FunctionDistinctValuesCollector$GroupCount).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_FunctionDistinctValuesCollector$GroupCount_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, FunctionDistinctValuesCollector$GroupCount::initializeClass, 1)))
                return NULL;
              return t_FunctionDistinctValuesCollector$GroupCount::wrap_Object(FunctionDistinctValuesCollector$GroupCount(((t_FunctionDistinctValuesCollector$GroupCount *) arg)->object.this$));
            }
            static PyObject *t_FunctionDistinctValuesCollector$GroupCount_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, FunctionDistinctValuesCollector$GroupCount::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static PyObject *t_FunctionDistinctValuesCollector$GroupCount_of_(t_FunctionDistinctValuesCollector$GroupCount *self, PyObject *args)
            {
              if (!parseArg(args, "T", 1, &(self->parameters)))
                Py_RETURN_SELF;
              return PyErr_SetArgsError((PyObject *) self, "of_", args);
            }
            static PyObject *t_FunctionDistinctValuesCollector$GroupCount_get__parameters_(t_FunctionDistinctValuesCollector$GroupCount *self, void *data)
            {
              return typeParameters(self->parameters, sizeof(self->parameters));
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/synonym/SynonymMap$Parser.h"
#include "java/lang/Class.h"
#include "java/io/Reader.h"
#include "org/apache/lucene/analysis/Analyzer.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/util/CharsRef.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace synonym {

          ::java::lang::Class *SynonymMap$Parser::class$ = NULL;
          jmethodID *SynonymMap$Parser::mids$ = NULL;
          bool SynonymMap$Parser::live$ = false;

          jclass SynonymMap$Parser::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/synonym/SynonymMap$Parser");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_8ce78b37] = env->getMethodID(cls, "<init>", "(ZLorg/apache/lucene/analysis/Analyzer;)V");
              mids$[mid_analyze_f51a472d] = env->getMethodID(cls, "analyze", "(Ljava/lang/String;Lorg/apache/lucene/util/CharsRef;)Lorg/apache/lucene/util/CharsRef;");
              mids$[mid_parse_cf2e3c10] = env->getMethodID(cls, "parse", "(Ljava/io/Reader;)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          SynonymMap$Parser::SynonymMap$Parser(jboolean a0, const ::org::apache::lucene::analysis::Analyzer & a1) : ::org::apache::lucene::analysis::synonym::SynonymMap$Builder(env->newObject(initializeClass, &mids$, mid_init$_8ce78b37, a0, a1.this$)) {}

          ::org::apache::lucene::util::CharsRef SynonymMap$Parser::analyze(const ::java::lang::String & a0, const ::org::apache::lucene::util::CharsRef & a1) const
          {
            return ::org::apache::lucene::util::CharsRef(env->callObjectMethod(this$, mids$[mid_analyze_f51a472d], a0.this$, a1.this$));
          }

          void SynonymMap$Parser::parse(const ::java::io::Reader & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_parse_cf2e3c10], a0.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace synonym {
          static PyObject *t_SynonymMap$Parser_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SynonymMap$Parser_instance_(PyTypeObject *type, PyObject *arg);
          static int t_SynonymMap$Parser_init_(t_SynonymMap$Parser *self, PyObject *args, PyObject *kwds);
          static PyObject *t_SynonymMap$Parser_analyze(t_SynonymMap$Parser *self, PyObject *args);
          static PyObject *t_SynonymMap$Parser_parse(t_SynonymMap$Parser *self, PyObject *arg);

          static PyMethodDef t_SynonymMap$Parser__methods_[] = {
            DECLARE_METHOD(t_SynonymMap$Parser, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SynonymMap$Parser, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SynonymMap$Parser, analyze, METH_VARARGS),
            DECLARE_METHOD(t_SynonymMap$Parser, parse, METH_O),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(SynonymMap$Parser, t_SynonymMap$Parser, ::org::apache::lucene::analysis::synonym::SynonymMap$Builder, SynonymMap$Parser, t_SynonymMap$Parser_init_, 0, 0, 0, 0, 0);

          void t_SynonymMap$Parser::install(PyObject *module)
          {
            installType(&PY_TYPE(SynonymMap$Parser), module, "SynonymMap$Parser", 0);
          }

          void t_SynonymMap$Parser::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(SynonymMap$Parser).tp_dict, "class_", make_descriptor(SynonymMap$Parser::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(SynonymMap$Parser).tp_dict, "wrapfn_", make_descriptor(t_SynonymMap$Parser::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(SynonymMap$Parser).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_SynonymMap$Parser_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, SynonymMap$Parser::initializeClass, 1)))
              return NULL;
            return t_SynonymMap$Parser::wrap_Object(SynonymMap$Parser(((t_SynonymMap$Parser *) arg)->object.this$));
          }
          static PyObject *t_SynonymMap$Parser_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, SynonymMap$Parser::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_SynonymMap$Parser_init_(t_SynonymMap$Parser *self, PyObject *args, PyObject *kwds)
          {
            jboolean a0;
            ::org::apache::lucene::analysis::Analyzer a1((jobject) NULL);
            SynonymMap$Parser object((jobject) NULL);

            if (!parseArgs(args, "Zk", ::org::apache::lucene::analysis::Analyzer::initializeClass, &a0, &a1))
            {
              INT_CALL(object = SynonymMap$Parser(a0, a1));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_SynonymMap$Parser_analyze(t_SynonymMap$Parser *self, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            ::org::apache::lucene::util::CharsRef a1((jobject) NULL);
            ::org::apache::lucene::util::CharsRef result((jobject) NULL);

            if (!parseArgs(args, "sk", ::org::apache::lucene::util::CharsRef::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.analyze(a0, a1));
              return ::org::apache::lucene::util::t_CharsRef::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "analyze", args);
            return NULL;
          }

          static PyObject *t_SynonymMap$Parser_parse(t_SynonymMap$Parser *self, PyObject *arg)
          {
            ::java::io::Reader a0((jobject) NULL);

            if (!parseArg(arg, "k", ::java::io::Reader::initializeClass, &a0))
            {
              OBJ_CALL(self->object.parse(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "parse", arg);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "java/io/FilterInputStream.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace java {
  namespace io {

    ::java::lang::Class *FilterInputStream::class$ = NULL;
    jmethodID *FilterInputStream::mids$ = NULL;
    bool FilterInputStream::live$ = false;

    jclass FilterInputStream::initializeClass(bool getOnly)
    {
      if (getOnly)
        return (jclass) (live$ ? class$->this$ : NULL);
      if (class$ == NULL)
      {
        jclass cls = (jclass) env->findClass("java/io/FilterInputStream");

        mids$ = new jmethodID[max_mid];
        mids$[mid_available_54c6a179] = env->getMethodID(cls, "available", "()I");
        mids$[mid_close_54c6a166] = env->getMethodID(cls, "close", "()V");
        mids$[mid_mark_39c7bd3c] = env->getMethodID(cls, "mark", "(I)V");
        mids$[mid_markSupported_54c6a16a] = env->getMethodID(cls, "markSupported", "()Z");
        mids$[mid_read_54c6a179] = env->getMethodID(cls, "read", "()I");
        mids$[mid_read_49b4f134] = env->getMethodID(cls, "read", "([B)I");
        mids$[mid_read_86f44340] = env->getMethodID(cls, "read", "([BII)I");
        mids$[mid_reset_54c6a166] = env->getMethodID(cls, "reset", "()V");
        mids$[mid_skip_0ee6df33] = env->getMethodID(cls, "skip", "(J)J");

        class$ = (::java::lang::Class *) new JObject(cls);
        live$ = true;
      }
      return (jclass) class$->this$;
    }

    jint FilterInputStream::available() const
    {
      return env->callIntMethod(this$, mids$[mid_available_54c6a179]);
    }

    void FilterInputStream::close() const
    {
      env->callVoidMethod(this$, mids$[mid_close_54c6a166]);
    }

    void FilterInputStream::mark(jint a0) const
    {
      env->callVoidMethod(this$, mids$[mid_mark_39c7bd3c], a0);
    }

    jboolean FilterInputStream::markSupported() const
    {
      return env->callBooleanMethod(this$, mids$[mid_markSupported_54c6a16a]);
    }

    jint FilterInputStream::read() const
    {
      return env->callIntMethod(this$, mids$[mid_read_54c6a179]);
    }

    jint FilterInputStream::read(const JArray< jbyte > & a0) const
    {
      return env->callIntMethod(this$, mids$[mid_read_49b4f134], a0.this$);
    }

    jint FilterInputStream::read(const JArray< jbyte > & a0, jint a1, jint a2) const
    {
      return env->callIntMethod(this$, mids$[mid_read_86f44340], a0.this$, a1, a2);
    }

    void FilterInputStream::reset() const
    {
      env->callVoidMethod(this$, mids$[mid_reset_54c6a166]);
    }

    jlong FilterInputStream::skip(jlong a0) const
    {
      return env->callLongMethod(this$, mids$[mid_skip_0ee6df33], a0);
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace java {
  namespace io {
    static PyObject *t_FilterInputStream_cast_(PyTypeObject *type, PyObject *arg);
    static PyObject *t_FilterInputStream_instance_(PyTypeObject *type, PyObject *arg);
    static PyObject *t_FilterInputStream_available(t_FilterInputStream *self, PyObject *args);
    static PyObject *t_FilterInputStream_close(t_FilterInputStream *self, PyObject *args);
    static PyObject *t_FilterInputStream_mark(t_FilterInputStream *self, PyObject *args);
    static PyObject *t_FilterInputStream_markSupported(t_FilterInputStream *self, PyObject *args);
    static PyObject *t_FilterInputStream_read(t_FilterInputStream *self, PyObject *args);
    static PyObject *t_FilterInputStream_reset(t_FilterInputStream *self, PyObject *args);
    static PyObject *t_FilterInputStream_skip(t_FilterInputStream *self, PyObject *args);

    static PyMethodDef t_FilterInputStream__methods_[] = {
      DECLARE_METHOD(t_FilterInputStream, cast_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_FilterInputStream, instance_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_FilterInputStream, available, METH_VARARGS),
      DECLARE_METHOD(t_FilterInputStream, close, METH_VARARGS),
      DECLARE_METHOD(t_FilterInputStream, mark, METH_VARARGS),
      DECLARE_METHOD(t_FilterInputStream, markSupported, METH_VARARGS),
      DECLARE_METHOD(t_FilterInputStream, read, METH_VARARGS),
      DECLARE_METHOD(t_FilterInputStream, reset, METH_VARARGS),
      DECLARE_METHOD(t_FilterInputStream, skip, METH_VARARGS),
      { NULL, NULL, 0, NULL }
    };

    DECLARE_TYPE(FilterInputStream, t_FilterInputStream, ::java::io::InputStream, FilterInputStream, abstract_init, 0, 0, 0, 0, 0);

    void t_FilterInputStream::install(PyObject *module)
    {
      installType(&PY_TYPE(FilterInputStream), module, "FilterInputStream", 0);
    }

    void t_FilterInputStream::initialize(PyObject *module)
    {
      PyDict_SetItemString(PY_TYPE(FilterInputStream).tp_dict, "class_", make_descriptor(FilterInputStream::initializeClass, 1));
      PyDict_SetItemString(PY_TYPE(FilterInputStream).tp_dict, "wrapfn_", make_descriptor(t_FilterInputStream::wrap_jobject));
      PyDict_SetItemString(PY_TYPE(FilterInputStream).tp_dict, "boxfn_", make_descriptor(boxObject));
    }

    static PyObject *t_FilterInputStream_cast_(PyTypeObject *type, PyObject *arg)
    {
      if (!(arg = castCheck(arg, FilterInputStream::initializeClass, 1)))
        return NULL;
      return t_FilterInputStream::wrap_Object(FilterInputStream(((t_FilterInputStream *) arg)->object.this$));
    }
    static PyObject *t_FilterInputStream_instance_(PyTypeObject *type, PyObject *arg)
    {
      if (!castCheck(arg, FilterInputStream::initializeClass, 0))
        Py_RETURN_FALSE;
      Py_RETURN_TRUE;
    }

    static PyObject *t_FilterInputStream_available(t_FilterInputStream *self, PyObject *args)
    {
      jint result;

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.available());
        return PyInt_FromLong((long) result);
      }

      return callSuper(&PY_TYPE(FilterInputStream), (PyObject *) self, "available", args, 2);
    }

    static PyObject *t_FilterInputStream_close(t_FilterInputStream *self, PyObject *args)
    {

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(self->object.close());
        Py_RETURN_NONE;
      }

      return callSuper(&PY_TYPE(FilterInputStream), (PyObject *) self, "close", args, 2);
    }

    static PyObject *t_FilterInputStream_mark(t_FilterInputStream *self, PyObject *args)
    {
      jint a0;

      if (!parseArgs(args, "I", &a0))
      {
        OBJ_CALL(self->object.mark(a0));
        Py_RETURN_NONE;
      }

      return callSuper(&PY_TYPE(FilterInputStream), (PyObject *) self, "mark", args, 2);
    }

    static PyObject *t_FilterInputStream_markSupported(t_FilterInputStream *self, PyObject *args)
    {
      jboolean result;

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.markSupported());
        Py_RETURN_BOOL(result);
      }

      return callSuper(&PY_TYPE(FilterInputStream), (PyObject *) self, "markSupported", args, 2);
    }

    static PyObject *t_FilterInputStream_read(t_FilterInputStream *self, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 0:
        {
          jint result;
          OBJ_CALL(result = self->object.read());
          return PyInt_FromLong((long) result);
        }
        break;
       case 1:
        {
          JArray< jbyte > a0((jobject) NULL);
          jint result;

          if (!parseArgs(args, "[B", &a0))
          {
            OBJ_CALL(result = self->object.read(a0));
            return PyInt_FromLong((long) result);
          }
        }
        break;
       case 3:
        {
          JArray< jbyte > a0((jobject) NULL);
          jint a1;
          jint a2;
          jint result;

          if (!parseArgs(args, "[BII", &a0, &a1, &a2))
          {
            OBJ_CALL(result = self->object.read(a0, a1, a2));
            return PyInt_FromLong((long) result);
          }
        }
      }

      return callSuper(&PY_TYPE(FilterInputStream), (PyObject *) self, "read", args, 2);
    }

    static PyObject *t_FilterInputStream_reset(t_FilterInputStream *self, PyObject *args)
    {

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(self->object.reset());
        Py_RETURN_NONE;
      }

      return callSuper(&PY_TYPE(FilterInputStream), (PyObject *) self, "reset", args, 2);
    }

    static PyObject *t_FilterInputStream_skip(t_FilterInputStream *self, PyObject *args)
    {
      jlong a0;
      jlong result;

      if (!parseArgs(args, "J", &a0))
      {
        OBJ_CALL(result = self->object.skip(a0));
        return PyLong_FromLongLong((PY_LONG_LONG) result);
      }

      return callSuper(&PY_TYPE(FilterInputStream), (PyObject *) self, "skip", args, 2);
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/UnicodeUtil.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "org/apache/lucene/util/IntsRef.h"
#include "java/lang/Class.h"
#include "java/lang/CharSequence.h"
#include "java/lang/String.h"
#include "org/apache/lucene/util/CharsRef.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *UnicodeUtil::class$ = NULL;
        jmethodID *UnicodeUtil::mids$ = NULL;
        bool UnicodeUtil::live$ = false;
        ::org::apache::lucene::util::BytesRef *UnicodeUtil::BIG_TERM = NULL;
        jint UnicodeUtil::UNI_REPLACEMENT_CHAR = (jint) 0;
        jint UnicodeUtil::UNI_SUR_HIGH_END = (jint) 0;
        jint UnicodeUtil::UNI_SUR_HIGH_START = (jint) 0;
        jint UnicodeUtil::UNI_SUR_LOW_END = (jint) 0;
        jint UnicodeUtil::UNI_SUR_LOW_START = (jint) 0;

        jclass UnicodeUtil::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/UnicodeUtil");

            mids$ = new jmethodID[max_mid];
            mids$[mid_UTF16toUTF8_08c4d28c] = env->getStaticMethodID(cls, "UTF16toUTF8", "(Ljava/lang/CharSequence;IILorg/apache/lucene/util/BytesRef;)V");
            mids$[mid_UTF16toUTF8_edea5d3c] = env->getStaticMethodID(cls, "UTF16toUTF8", "([CIILorg/apache/lucene/util/BytesRef;)V");
            mids$[mid_UTF8toUTF16_5b2f2c58] = env->getStaticMethodID(cls, "UTF8toUTF16", "(Lorg/apache/lucene/util/BytesRef;Lorg/apache/lucene/util/CharsRef;)V");
            mids$[mid_UTF8toUTF16_3aa183dd] = env->getStaticMethodID(cls, "UTF8toUTF16", "([BIILorg/apache/lucene/util/CharsRef;)V");
            mids$[mid_UTF8toUTF32_079b7c7a] = env->getStaticMethodID(cls, "UTF8toUTF32", "(Lorg/apache/lucene/util/BytesRef;Lorg/apache/lucene/util/IntsRef;)V");
            mids$[mid_codePointCount_7bc03ddb] = env->getStaticMethodID(cls, "codePointCount", "(Lorg/apache/lucene/util/BytesRef;)I");
            mids$[mid_newString_3ade3c03] = env->getStaticMethodID(cls, "newString", "([III)Ljava/lang/String;");
            mids$[mid_toHexString_97a5258f] = env->getStaticMethodID(cls, "toHexString", "(Ljava/lang/String;)Ljava/lang/String;");
            mids$[mid_validUTF16String_a8afc646] = env->getStaticMethodID(cls, "validUTF16String", "(Ljava/lang/CharSequence;)Z");
            mids$[mid_validUTF16String_ec6430f8] = env->getStaticMethodID(cls, "validUTF16String", "([CI)Z");

            class$ = (::java::lang::Class *) new JObject(cls);
            cls = (jclass) class$->this$;

            BIG_TERM = new ::org::apache::lucene::util::BytesRef(env->getStaticObjectField(cls, "BIG_TERM", "Lorg/apache/lucene/util/BytesRef;"));
            UNI_REPLACEMENT_CHAR = env->getStaticIntField(cls, "UNI_REPLACEMENT_CHAR");
            UNI_SUR_HIGH_END = env->getStaticIntField(cls, "UNI_SUR_HIGH_END");
            UNI_SUR_HIGH_START = env->getStaticIntField(cls, "UNI_SUR_HIGH_START");
            UNI_SUR_LOW_END = env->getStaticIntField(cls, "UNI_SUR_LOW_END");
            UNI_SUR_LOW_START = env->getStaticIntField(cls, "UNI_SUR_LOW_START");
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        void UnicodeUtil::UTF16toUTF8(const ::java::lang::CharSequence & a0, jint a1, jint a2, const ::org::apache::lucene::util::BytesRef & a3)
        {
          jclass cls = env->getClass(initializeClass);
          env->callStaticVoidMethod(cls, mids$[mid_UTF16toUTF8_08c4d28c], a0.this$, a1, a2, a3.this$);
        }

        void UnicodeUtil::UTF16toUTF8(const JArray< jchar > & a0, jint a1, jint a2, const ::org::apache::lucene::util::BytesRef & a3)
        {
          jclass cls = env->getClass(initializeClass);
          env->callStaticVoidMethod(cls, mids$[mid_UTF16toUTF8_edea5d3c], a0.this$, a1, a2, a3.this$);
        }

        void UnicodeUtil::UTF8toUTF16(const ::org::apache::lucene::util::BytesRef & a0, const ::org::apache::lucene::util::CharsRef & a1)
        {
          jclass cls = env->getClass(initializeClass);
          env->callStaticVoidMethod(cls, mids$[mid_UTF8toUTF16_5b2f2c58], a0.this$, a1.this$);
        }

        void UnicodeUtil::UTF8toUTF16(const JArray< jbyte > & a0, jint a1, jint a2, const ::org::apache::lucene::util::CharsRef & a3)
        {
          jclass cls = env->getClass(initializeClass);
          env->callStaticVoidMethod(cls, mids$[mid_UTF8toUTF16_3aa183dd], a0.this$, a1, a2, a3.this$);
        }

        void UnicodeUtil::UTF8toUTF32(const ::org::apache::lucene::util::BytesRef & a0, const ::org::apache::lucene::util::IntsRef & a1)
        {
          jclass cls = env->getClass(initializeClass);
          env->callStaticVoidMethod(cls, mids$[mid_UTF8toUTF32_079b7c7a], a0.this$, a1.this$);
        }

        jint UnicodeUtil::codePointCount(const ::org::apache::lucene::util::BytesRef & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticIntMethod(cls, mids$[mid_codePointCount_7bc03ddb], a0.this$);
        }

        ::java::lang::String UnicodeUtil::newString(const JArray< jint > & a0, jint a1, jint a2)
        {
          jclass cls = env->getClass(initializeClass);
          return ::java::lang::String(env->callStaticObjectMethod(cls, mids$[mid_newString_3ade3c03], a0.this$, a1, a2));
        }

        ::java::lang::String UnicodeUtil::toHexString(const ::java::lang::String & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return ::java::lang::String(env->callStaticObjectMethod(cls, mids$[mid_toHexString_97a5258f], a0.this$));
        }

        jboolean UnicodeUtil::validUTF16String(const ::java::lang::CharSequence & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticBooleanMethod(cls, mids$[mid_validUTF16String_a8afc646], a0.this$);
        }

        jboolean UnicodeUtil::validUTF16String(const JArray< jchar > & a0, jint a1)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticBooleanMethod(cls, mids$[mid_validUTF16String_ec6430f8], a0.this$, a1);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_UnicodeUtil_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_UnicodeUtil_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_UnicodeUtil_UTF16toUTF8(PyTypeObject *type, PyObject *args);
        static PyObject *t_UnicodeUtil_UTF8toUTF16(PyTypeObject *type, PyObject *args);
        static PyObject *t_UnicodeUtil_UTF8toUTF32(PyTypeObject *type, PyObject *args);
        static PyObject *t_UnicodeUtil_codePointCount(PyTypeObject *type, PyObject *arg);
        static PyObject *t_UnicodeUtil_newString(PyTypeObject *type, PyObject *args);
        static PyObject *t_UnicodeUtil_toHexString(PyTypeObject *type, PyObject *arg);
        static PyObject *t_UnicodeUtil_validUTF16String(PyTypeObject *type, PyObject *args);

        static PyMethodDef t_UnicodeUtil__methods_[] = {
          DECLARE_METHOD(t_UnicodeUtil, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_UnicodeUtil, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_UnicodeUtil, UTF16toUTF8, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_UnicodeUtil, UTF8toUTF16, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_UnicodeUtil, UTF8toUTF32, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_UnicodeUtil, codePointCount, METH_O | METH_CLASS),
          DECLARE_METHOD(t_UnicodeUtil, newString, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_UnicodeUtil, toHexString, METH_O | METH_CLASS),
          DECLARE_METHOD(t_UnicodeUtil, validUTF16String, METH_VARARGS | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(UnicodeUtil, t_UnicodeUtil, ::java::lang::Object, UnicodeUtil, abstract_init, 0, 0, 0, 0, 0);

        void t_UnicodeUtil::install(PyObject *module)
        {
          installType(&PY_TYPE(UnicodeUtil), module, "UnicodeUtil", 0);
        }

        void t_UnicodeUtil::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(UnicodeUtil).tp_dict, "class_", make_descriptor(UnicodeUtil::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(UnicodeUtil).tp_dict, "wrapfn_", make_descriptor(t_UnicodeUtil::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(UnicodeUtil).tp_dict, "boxfn_", make_descriptor(boxObject));
          env->getClass(UnicodeUtil::initializeClass);
          PyDict_SetItemString(PY_TYPE(UnicodeUtil).tp_dict, "BIG_TERM", make_descriptor(::org::apache::lucene::util::t_BytesRef::wrap_Object(*UnicodeUtil::BIG_TERM)));
          PyDict_SetItemString(PY_TYPE(UnicodeUtil).tp_dict, "UNI_REPLACEMENT_CHAR", make_descriptor(UnicodeUtil::UNI_REPLACEMENT_CHAR));
          PyDict_SetItemString(PY_TYPE(UnicodeUtil).tp_dict, "UNI_SUR_HIGH_END", make_descriptor(UnicodeUtil::UNI_SUR_HIGH_END));
          PyDict_SetItemString(PY_TYPE(UnicodeUtil).tp_dict, "UNI_SUR_HIGH_START", make_descriptor(UnicodeUtil::UNI_SUR_HIGH_START));
          PyDict_SetItemString(PY_TYPE(UnicodeUtil).tp_dict, "UNI_SUR_LOW_END", make_descriptor(UnicodeUtil::UNI_SUR_LOW_END));
          PyDict_SetItemString(PY_TYPE(UnicodeUtil).tp_dict, "UNI_SUR_LOW_START", make_descriptor(UnicodeUtil::UNI_SUR_LOW_START));
        }

        static PyObject *t_UnicodeUtil_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, UnicodeUtil::initializeClass, 1)))
            return NULL;
          return t_UnicodeUtil::wrap_Object(UnicodeUtil(((t_UnicodeUtil *) arg)->object.this$));
        }
        static PyObject *t_UnicodeUtil_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, UnicodeUtil::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_UnicodeUtil_UTF16toUTF8(PyTypeObject *type, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 4:
            {
              ::java::lang::CharSequence a0((jobject) NULL);
              jint a1;
              jint a2;
              ::org::apache::lucene::util::BytesRef a3((jobject) NULL);

              if (!parseArgs(args, "OIIk", &::java::lang::PY_TYPE(CharSequence), ::org::apache::lucene::util::BytesRef::initializeClass, &a0, &a1, &a2, &a3))
              {
                OBJ_CALL(::org::apache::lucene::util::UnicodeUtil::UTF16toUTF8(a0, a1, a2, a3));
                Py_RETURN_NONE;
              }
            }
            {
              JArray< jchar > a0((jobject) NULL);
              jint a1;
              jint a2;
              ::org::apache::lucene::util::BytesRef a3((jobject) NULL);

              if (!parseArgs(args, "[CIIk", ::org::apache::lucene::util::BytesRef::initializeClass, &a0, &a1, &a2, &a3))
              {
                OBJ_CALL(::org::apache::lucene::util::UnicodeUtil::UTF16toUTF8(a0, a1, a2, a3));
                Py_RETURN_NONE;
              }
            }
          }

          PyErr_SetArgsError(type, "UTF16toUTF8", args);
          return NULL;
        }

        static PyObject *t_UnicodeUtil_UTF8toUTF16(PyTypeObject *type, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 2:
            {
              ::org::apache::lucene::util::BytesRef a0((jobject) NULL);
              ::org::apache::lucene::util::CharsRef a1((jobject) NULL);

              if (!parseArgs(args, "kk", ::org::apache::lucene::util::BytesRef::initializeClass, ::org::apache::lucene::util::CharsRef::initializeClass, &a0, &a1))
              {
                OBJ_CALL(::org::apache::lucene::util::UnicodeUtil::UTF8toUTF16(a0, a1));
                Py_RETURN_NONE;
              }
            }
            break;
           case 4:
            {
              JArray< jbyte > a0((jobject) NULL);
              jint a1;
              jint a2;
              ::org::apache::lucene::util::CharsRef a3((jobject) NULL);

              if (!parseArgs(args, "[BIIk", ::org::apache::lucene::util::CharsRef::initializeClass, &a0, &a1, &a2, &a3))
              {
                OBJ_CALL(::org::apache::lucene::util::UnicodeUtil::UTF8toUTF16(a0, a1, a2, a3));
                Py_RETURN_NONE;
              }
            }
          }

          PyErr_SetArgsError(type, "UTF8toUTF16", args);
          return NULL;
        }

        static PyObject *t_UnicodeUtil_UTF8toUTF32(PyTypeObject *type, PyObject *args)
        {
          ::org::apache::lucene::util::BytesRef a0((jobject) NULL);
          ::org::apache::lucene::util::IntsRef a1((jobject) NULL);

          if (!parseArgs(args, "kk", ::org::apache::lucene::util::BytesRef::initializeClass, ::org::apache::lucene::util::IntsRef::initializeClass, &a0, &a1))
          {
            OBJ_CALL(::org::apache::lucene::util::UnicodeUtil::UTF8toUTF32(a0, a1));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError(type, "UTF8toUTF32", args);
          return NULL;
        }

        static PyObject *t_UnicodeUtil_codePointCount(PyTypeObject *type, PyObject *arg)
        {
          ::org::apache::lucene::util::BytesRef a0((jobject) NULL);
          jint result;

          if (!parseArg(arg, "k", ::org::apache::lucene::util::BytesRef::initializeClass, &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::util::UnicodeUtil::codePointCount(a0));
            return PyInt_FromLong((long) result);
          }

          PyErr_SetArgsError(type, "codePointCount", arg);
          return NULL;
        }

        static PyObject *t_UnicodeUtil_newString(PyTypeObject *type, PyObject *args)
        {
          JArray< jint > a0((jobject) NULL);
          jint a1;
          jint a2;
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, "[III", &a0, &a1, &a2))
          {
            OBJ_CALL(result = ::org::apache::lucene::util::UnicodeUtil::newString(a0, a1, a2));
            return j2p(result);
          }

          PyErr_SetArgsError(type, "newString", args);
          return NULL;
        }

        static PyObject *t_UnicodeUtil_toHexString(PyTypeObject *type, PyObject *arg)
        {
          ::java::lang::String a0((jobject) NULL);
          ::java::lang::String result((jobject) NULL);

          if (!parseArg(arg, "s", &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::util::UnicodeUtil::toHexString(a0));
            return j2p(result);
          }

          PyErr_SetArgsError(type, "toHexString", arg);
          return NULL;
        }

        static PyObject *t_UnicodeUtil_validUTF16String(PyTypeObject *type, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              ::java::lang::CharSequence a0((jobject) NULL);
              jboolean result;

              if (!parseArgs(args, "O", &::java::lang::PY_TYPE(CharSequence), &a0))
              {
                OBJ_CALL(result = ::org::apache::lucene::util::UnicodeUtil::validUTF16String(a0));
                Py_RETURN_BOOL(result);
              }
            }
            break;
           case 2:
            {
              JArray< jchar > a0((jobject) NULL);
              jint a1;
              jboolean result;

              if (!parseArgs(args, "[CI", &a0, &a1))
              {
                OBJ_CALL(result = ::org::apache::lucene::util::UnicodeUtil::validUTF16String(a0, a1));
                Py_RETURN_BOOL(result);
              }
            }
          }

          PyErr_SetArgsError(type, "validUTF16String", args);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/FieldInfo$IndexOptions.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *FieldInfo$IndexOptions::class$ = NULL;
        jmethodID *FieldInfo$IndexOptions::mids$ = NULL;
        bool FieldInfo$IndexOptions::live$ = false;
        FieldInfo$IndexOptions *FieldInfo$IndexOptions::DOCS_AND_FREQS = NULL;
        FieldInfo$IndexOptions *FieldInfo$IndexOptions::DOCS_AND_FREQS_AND_POSITIONS = NULL;
        FieldInfo$IndexOptions *FieldInfo$IndexOptions::DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS = NULL;
        FieldInfo$IndexOptions *FieldInfo$IndexOptions::DOCS_ONLY = NULL;

        jclass FieldInfo$IndexOptions::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/FieldInfo$IndexOptions");

            mids$ = new jmethodID[max_mid];
            mids$[mid_valueOf_20bf9e20] = env->getStaticMethodID(cls, "valueOf", "(Ljava/lang/String;)Lorg/apache/lucene/index/FieldInfo$IndexOptions;");
            mids$[mid_values_84108cce] = env->getStaticMethodID(cls, "values", "()[Lorg/apache/lucene/index/FieldInfo$IndexOptions;");

            class$ = (::java::lang::Class *) new JObject(cls);
            cls = (jclass) class$->this$;

            DOCS_AND_FREQS = new FieldInfo$IndexOptions(env->getStaticObjectField(cls, "DOCS_AND_FREQS", "Lorg/apache/lucene/index/FieldInfo$IndexOptions;"));
            DOCS_AND_FREQS_AND_POSITIONS = new FieldInfo$IndexOptions(env->getStaticObjectField(cls, "DOCS_AND_FREQS_AND_POSITIONS", "Lorg/apache/lucene/index/FieldInfo$IndexOptions;"));
            DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS = new FieldInfo$IndexOptions(env->getStaticObjectField(cls, "DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS", "Lorg/apache/lucene/index/FieldInfo$IndexOptions;"));
            DOCS_ONLY = new FieldInfo$IndexOptions(env->getStaticObjectField(cls, "DOCS_ONLY", "Lorg/apache/lucene/index/FieldInfo$IndexOptions;"));
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        FieldInfo$IndexOptions FieldInfo$IndexOptions::valueOf(const ::java::lang::String & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return FieldInfo$IndexOptions(env->callStaticObjectMethod(cls, mids$[mid_valueOf_20bf9e20], a0.this$));
        }

        JArray< FieldInfo$IndexOptions > FieldInfo$IndexOptions::values()
        {
          jclass cls = env->getClass(initializeClass);
          return JArray< FieldInfo$IndexOptions >(env->callStaticObjectMethod(cls, mids$[mid_values_84108cce]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_FieldInfo$IndexOptions_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FieldInfo$IndexOptions_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FieldInfo$IndexOptions_of_(t_FieldInfo$IndexOptions *self, PyObject *args);
        static PyObject *t_FieldInfo$IndexOptions_valueOf(PyTypeObject *type, PyObject *args);
        static PyObject *t_FieldInfo$IndexOptions_values(PyTypeObject *type);
        static PyObject *t_FieldInfo$IndexOptions_get__parameters_(t_FieldInfo$IndexOptions *self, void *data);
        static PyGetSetDef t_FieldInfo$IndexOptions__fields_[] = {
          DECLARE_GET_FIELD(t_FieldInfo$IndexOptions, parameters_),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_FieldInfo$IndexOptions__methods_[] = {
          DECLARE_METHOD(t_FieldInfo$IndexOptions, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FieldInfo$IndexOptions, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FieldInfo$IndexOptions, of_, METH_VARARGS),
          DECLARE_METHOD(t_FieldInfo$IndexOptions, valueOf, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_FieldInfo$IndexOptions, values, METH_NOARGS | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(FieldInfo$IndexOptions, t_FieldInfo$IndexOptions, ::java::lang::Enum, FieldInfo$IndexOptions, abstract_init, 0, 0, t_FieldInfo$IndexOptions__fields_, 0, 0);
        PyObject *t_FieldInfo$IndexOptions::wrap_Object(const FieldInfo$IndexOptions& object, PyTypeObject *p0)
        {
          PyObject *obj = t_FieldInfo$IndexOptions::wrap_Object(object);
          if (obj != NULL && obj != Py_None)
          {
            t_FieldInfo$IndexOptions *self = (t_FieldInfo$IndexOptions *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        PyObject *t_FieldInfo$IndexOptions::wrap_jobject(const jobject& object, PyTypeObject *p0)
        {
          PyObject *obj = t_FieldInfo$IndexOptions::wrap_jobject(object);
          if (obj != NULL && obj != Py_None)
          {
            t_FieldInfo$IndexOptions *self = (t_FieldInfo$IndexOptions *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        void t_FieldInfo$IndexOptions::install(PyObject *module)
        {
          installType(&PY_TYPE(FieldInfo$IndexOptions), module, "FieldInfo$IndexOptions", 0);
        }

        void t_FieldInfo$IndexOptions::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(FieldInfo$IndexOptions).tp_dict, "class_", make_descriptor(FieldInfo$IndexOptions::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(FieldInfo$IndexOptions).tp_dict, "wrapfn_", make_descriptor(t_FieldInfo$IndexOptions::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(FieldInfo$IndexOptions).tp_dict, "boxfn_", make_descriptor(boxObject));
          env->getClass(FieldInfo$IndexOptions::initializeClass);
          PyDict_SetItemString(PY_TYPE(FieldInfo$IndexOptions).tp_dict, "DOCS_AND_FREQS", make_descriptor(t_FieldInfo$IndexOptions::wrap_Object(*FieldInfo$IndexOptions::DOCS_AND_FREQS)));
          PyDict_SetItemString(PY_TYPE(FieldInfo$IndexOptions).tp_dict, "DOCS_AND_FREQS_AND_POSITIONS", make_descriptor(t_FieldInfo$IndexOptions::wrap_Object(*FieldInfo$IndexOptions::DOCS_AND_FREQS_AND_POSITIONS)));
          PyDict_SetItemString(PY_TYPE(FieldInfo$IndexOptions).tp_dict, "DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS", make_descriptor(t_FieldInfo$IndexOptions::wrap_Object(*FieldInfo$IndexOptions::DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS)));
          PyDict_SetItemString(PY_TYPE(FieldInfo$IndexOptions).tp_dict, "DOCS_ONLY", make_descriptor(t_FieldInfo$IndexOptions::wrap_Object(*FieldInfo$IndexOptions::DOCS_ONLY)));
        }

        static PyObject *t_FieldInfo$IndexOptions_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, FieldInfo$IndexOptions::initializeClass, 1)))
            return NULL;
          return t_FieldInfo$IndexOptions::wrap_Object(FieldInfo$IndexOptions(((t_FieldInfo$IndexOptions *) arg)->object.this$));
        }
        static PyObject *t_FieldInfo$IndexOptions_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, FieldInfo$IndexOptions::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_FieldInfo$IndexOptions_of_(t_FieldInfo$IndexOptions *self, PyObject *args)
        {
          if (!parseArg(args, "T", 1, &(self->parameters)))
            Py_RETURN_SELF;
          return PyErr_SetArgsError((PyObject *) self, "of_", args);
        }

        static PyObject *t_FieldInfo$IndexOptions_valueOf(PyTypeObject *type, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          FieldInfo$IndexOptions result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::index::FieldInfo$IndexOptions::valueOf(a0));
            return t_FieldInfo$IndexOptions::wrap_Object(result);
          }

          return callSuper(type, "valueOf", args, 2);
        }

        static PyObject *t_FieldInfo$IndexOptions_values(PyTypeObject *type)
        {
          JArray< FieldInfo$IndexOptions > result((jobject) NULL);
          OBJ_CALL(result = ::org::apache::lucene::index::FieldInfo$IndexOptions::values());
          return JArray<jobject>(result.this$).wrap(t_FieldInfo$IndexOptions::wrap_jobject);
        }
        static PyObject *t_FieldInfo$IndexOptions_get__parameters_(t_FieldInfo$IndexOptions *self, void *data)
        {
          return typeParameters(self->parameters, sizeof(self->parameters));
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/suggest/InputIterator.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "java/util/Set.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace suggest {

          ::java::lang::Class *InputIterator::class$ = NULL;
          jmethodID *InputIterator::mids$ = NULL;
          bool InputIterator::live$ = false;
          InputIterator *InputIterator::EMPTY = NULL;

          jclass InputIterator::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/suggest/InputIterator");

              mids$ = new jmethodID[max_mid];
              mids$[mid_contexts_03e99967] = env->getMethodID(cls, "contexts", "()Ljava/util/Set;");
              mids$[mid_hasContexts_54c6a16a] = env->getMethodID(cls, "hasContexts", "()Z");
              mids$[mid_hasPayloads_54c6a16a] = env->getMethodID(cls, "hasPayloads", "()Z");
              mids$[mid_payload_4ae19461] = env->getMethodID(cls, "payload", "()Lorg/apache/lucene/util/BytesRef;");
              mids$[mid_weight_54c6a17a] = env->getMethodID(cls, "weight", "()J");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              EMPTY = new InputIterator(env->getStaticObjectField(cls, "EMPTY", "Lorg/apache/lucene/search/suggest/InputIterator;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ::java::util::Set InputIterator::contexts() const
          {
            return ::java::util::Set(env->callObjectMethod(this$, mids$[mid_contexts_03e99967]));
          }

          jboolean InputIterator::hasContexts() const
          {
            return env->callBooleanMethod(this$, mids$[mid_hasContexts_54c6a16a]);
          }

          jboolean InputIterator::hasPayloads() const
          {
            return env->callBooleanMethod(this$, mids$[mid_hasPayloads_54c6a16a]);
          }

          ::org::apache::lucene::util::BytesRef InputIterator::payload() const
          {
            return ::org::apache::lucene::util::BytesRef(env->callObjectMethod(this$, mids$[mid_payload_4ae19461]));
          }

          jlong InputIterator::weight() const
          {
            return env->callLongMethod(this$, mids$[mid_weight_54c6a17a]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"
#include "org/apache/lucene/search/suggest/InputIterator$InputIteratorWrapper.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace suggest {
          static PyObject *t_InputIterator_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_InputIterator_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_InputIterator_contexts(t_InputIterator *self);
          static PyObject *t_InputIterator_hasContexts(t_InputIterator *self);
          static PyObject *t_InputIterator_hasPayloads(t_InputIterator *self);
          static PyObject *t_InputIterator_payload(t_InputIterator *self);
          static PyObject *t_InputIterator_weight(t_InputIterator *self);

          static PyMethodDef t_InputIterator__methods_[] = {
            DECLARE_METHOD(t_InputIterator, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_InputIterator, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_InputIterator, contexts, METH_NOARGS),
            DECLARE_METHOD(t_InputIterator, hasContexts, METH_NOARGS),
            DECLARE_METHOD(t_InputIterator, hasPayloads, METH_NOARGS),
            DECLARE_METHOD(t_InputIterator, payload, METH_NOARGS),
            DECLARE_METHOD(t_InputIterator, weight, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(InputIterator, t_InputIterator, ::org::apache::lucene::util::BytesRefIterator, InputIterator, abstract_init, 0, 0, 0, 0, 0);

          void t_InputIterator::install(PyObject *module)
          {
            installType(&PY_TYPE(InputIterator), module, "InputIterator", 0);
            PyDict_SetItemString(PY_TYPE(InputIterator).tp_dict, "InputIteratorWrapper", make_descriptor(&PY_TYPE(InputIterator$InputIteratorWrapper)));
          }

          void t_InputIterator::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(InputIterator).tp_dict, "class_", make_descriptor(InputIterator::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(InputIterator).tp_dict, "wrapfn_", make_descriptor(t_InputIterator::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(InputIterator).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(InputIterator::initializeClass);
            PyDict_SetItemString(PY_TYPE(InputIterator).tp_dict, "EMPTY", make_descriptor(t_InputIterator::wrap_Object(*InputIterator::EMPTY)));
          }

          static PyObject *t_InputIterator_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, InputIterator::initializeClass, 1)))
              return NULL;
            return t_InputIterator::wrap_Object(InputIterator(((t_InputIterator *) arg)->object.this$));
          }
          static PyObject *t_InputIterator_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, InputIterator::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_InputIterator_contexts(t_InputIterator *self)
          {
            ::java::util::Set result((jobject) NULL);
            OBJ_CALL(result = self->object.contexts());
            return ::java::util::t_Set::wrap_Object(result, &::org::apache::lucene::util::PY_TYPE(BytesRef));
          }

          static PyObject *t_InputIterator_hasContexts(t_InputIterator *self)
          {
            jboolean result;
            OBJ_CALL(result = self->object.hasContexts());
            Py_RETURN_BOOL(result);
          }

          static PyObject *t_InputIterator_hasPayloads(t_InputIterator *self)
          {
            jboolean result;
            OBJ_CALL(result = self->object.hasPayloads());
            Py_RETURN_BOOL(result);
          }

          static PyObject *t_InputIterator_payload(t_InputIterator *self)
          {
            ::org::apache::lucene::util::BytesRef result((jobject) NULL);
            OBJ_CALL(result = self->object.payload());
            return ::org::apache::lucene::util::t_BytesRef::wrap_Object(result);
          }

          static PyObject *t_InputIterator_weight(t_InputIterator *self)
          {
            jlong result;
            OBJ_CALL(result = self->object.weight());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/classic/TokenMgrError.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace classic {

          ::java::lang::Class *TokenMgrError::class$ = NULL;
          jmethodID *TokenMgrError::mids$ = NULL;
          bool TokenMgrError::live$ = false;

          jclass TokenMgrError::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/classic/TokenMgrError");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_init$_6e53ccc6] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;I)V");
              mids$[mid_init$_8aaeec67] = env->getMethodID(cls, "<init>", "(ZIIILjava/lang/String;CI)V");
              mids$[mid_getMessage_14c7b5c5] = env->getMethodID(cls, "getMessage", "()Ljava/lang/String;");
              mids$[mid_addEscapes_97a5258f] = env->getStaticMethodID(cls, "addEscapes", "(Ljava/lang/String;)Ljava/lang/String;");
              mids$[mid_LexicalError_e888c5f6] = env->getStaticMethodID(cls, "LexicalError", "(ZIIILjava/lang/String;C)Ljava/lang/String;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          TokenMgrError::TokenMgrError() : ::java::lang::Error(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          TokenMgrError::TokenMgrError(const ::java::lang::String & a0, jint a1) : ::java::lang::Error(env->newObject(initializeClass, &mids$, mid_init$_6e53ccc6, a0.this$, a1)) {}

          TokenMgrError::TokenMgrError(jboolean a0, jint a1, jint a2, jint a3, const ::java::lang::String & a4, jchar a5, jint a6) : ::java::lang::Error(env->newObject(initializeClass, &mids$, mid_init$_8aaeec67, a0, a1, a2, a3, a4.this$, a5, a6)) {}

          ::java::lang::String TokenMgrError::getMessage() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getMessage_14c7b5c5]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace classic {
          static PyObject *t_TokenMgrError_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_TokenMgrError_instance_(PyTypeObject *type, PyObject *arg);
          static int t_TokenMgrError_init_(t_TokenMgrError *self, PyObject *args, PyObject *kwds);
          static PyObject *t_TokenMgrError_getMessage(t_TokenMgrError *self, PyObject *args);
          static PyObject *t_TokenMgrError_get__message(t_TokenMgrError *self, void *data);
          static PyGetSetDef t_TokenMgrError__fields_[] = {
            DECLARE_GET_FIELD(t_TokenMgrError, message),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_TokenMgrError__methods_[] = {
            DECLARE_METHOD(t_TokenMgrError, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_TokenMgrError, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_TokenMgrError, getMessage, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(TokenMgrError, t_TokenMgrError, ::java::lang::Error, TokenMgrError, t_TokenMgrError_init_, 0, 0, t_TokenMgrError__fields_, 0, 0);

          void t_TokenMgrError::install(PyObject *module)
          {
            installType(&PY_TYPE(TokenMgrError), module, "TokenMgrError", 0);
          }

          void t_TokenMgrError::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(TokenMgrError).tp_dict, "class_", make_descriptor(TokenMgrError::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(TokenMgrError).tp_dict, "wrapfn_", make_descriptor(t_TokenMgrError::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(TokenMgrError).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_TokenMgrError_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, TokenMgrError::initializeClass, 1)))
              return NULL;
            return t_TokenMgrError::wrap_Object(TokenMgrError(((t_TokenMgrError *) arg)->object.this$));
          }
          static PyObject *t_TokenMgrError_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, TokenMgrError::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_TokenMgrError_init_(t_TokenMgrError *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 0:
              {
                TokenMgrError object((jobject) NULL);

                INT_CALL(object = TokenMgrError());
                self->object = object;
                break;
              }
              goto err;
             case 2:
              {
                ::java::lang::String a0((jobject) NULL);
                jint a1;
                TokenMgrError object((jobject) NULL);

                if (!parseArgs(args, "sI", &a0, &a1))
                {
                  INT_CALL(object = TokenMgrError(a0, a1));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 7:
              {
                jboolean a0;
                jint a1;
                jint a2;
                jint a3;
                ::java::lang::String a4((jobject) NULL);
                jchar a5;
                jint a6;
                TokenMgrError object((jobject) NULL);

                if (!parseArgs(args, "ZIIIsCI", &a0, &a1, &a2, &a3, &a4, &a5, &a6))
                {
                  INT_CALL(object = TokenMgrError(a0, a1, a2, a3, a4, a5, a6));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_TokenMgrError_getMessage(t_TokenMgrError *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.getMessage());
              return j2p(result);
            }

            return callSuper(&PY_TYPE(TokenMgrError), (PyObject *) self, "getMessage", args, 2);
          }

          static PyObject *t_TokenMgrError_get__message(t_TokenMgrError *self, void *data)
          {
            ::java::lang::String value((jobject) NULL);
            OBJ_CALL(value = self->object.getMessage());
            return j2p(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/tartarus/snowball/ext/ArmenianStemmer.h"
#include "java/lang/Object.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace tartarus {
    namespace snowball {
      namespace ext {

        ::java::lang::Class *ArmenianStemmer::class$ = NULL;
        jmethodID *ArmenianStemmer::mids$ = NULL;
        bool ArmenianStemmer::live$ = false;

        jclass ArmenianStemmer::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/tartarus/snowball/ext/ArmenianStemmer");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
            mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
            mids$[mid_stem_54c6a16a] = env->getMethodID(cls, "stem", "()Z");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        ArmenianStemmer::ArmenianStemmer() : ::org::tartarus::snowball::SnowballProgram(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        jboolean ArmenianStemmer::equals(const ::java::lang::Object & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
        }

        jint ArmenianStemmer::hashCode() const
        {
          return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
        }

        jboolean ArmenianStemmer::stem() const
        {
          return env->callBooleanMethod(this$, mids$[mid_stem_54c6a16a]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace tartarus {
    namespace snowball {
      namespace ext {
        static PyObject *t_ArmenianStemmer_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_ArmenianStemmer_instance_(PyTypeObject *type, PyObject *arg);
        static int t_ArmenianStemmer_init_(t_ArmenianStemmer *self, PyObject *args, PyObject *kwds);
        static PyObject *t_ArmenianStemmer_equals(t_ArmenianStemmer *self, PyObject *args);
        static PyObject *t_ArmenianStemmer_hashCode(t_ArmenianStemmer *self, PyObject *args);
        static PyObject *t_ArmenianStemmer_stem(t_ArmenianStemmer *self, PyObject *args);

        static PyMethodDef t_ArmenianStemmer__methods_[] = {
          DECLARE_METHOD(t_ArmenianStemmer, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_ArmenianStemmer, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_ArmenianStemmer, equals, METH_VARARGS),
          DECLARE_METHOD(t_ArmenianStemmer, hashCode, METH_VARARGS),
          DECLARE_METHOD(t_ArmenianStemmer, stem, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(ArmenianStemmer, t_ArmenianStemmer, ::org::tartarus::snowball::SnowballProgram, ArmenianStemmer, t_ArmenianStemmer_init_, 0, 0, 0, 0, 0);

        void t_ArmenianStemmer::install(PyObject *module)
        {
          installType(&PY_TYPE(ArmenianStemmer), module, "ArmenianStemmer", 0);
        }

        void t_ArmenianStemmer::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(ArmenianStemmer).tp_dict, "class_", make_descriptor(ArmenianStemmer::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(ArmenianStemmer).tp_dict, "wrapfn_", make_descriptor(t_ArmenianStemmer::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(ArmenianStemmer).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_ArmenianStemmer_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, ArmenianStemmer::initializeClass, 1)))
            return NULL;
          return t_ArmenianStemmer::wrap_Object(ArmenianStemmer(((t_ArmenianStemmer *) arg)->object.this$));
        }
        static PyObject *t_ArmenianStemmer_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, ArmenianStemmer::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_ArmenianStemmer_init_(t_ArmenianStemmer *self, PyObject *args, PyObject *kwds)
        {
          ArmenianStemmer object((jobject) NULL);

          INT_CALL(object = ArmenianStemmer());
          self->object = object;

          return 0;
        }

        static PyObject *t_ArmenianStemmer_equals(t_ArmenianStemmer *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.equals(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(ArmenianStemmer), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_ArmenianStemmer_hashCode(t_ArmenianStemmer *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hashCode());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(ArmenianStemmer), (PyObject *) self, "hashCode", args, 2);
        }

        static PyObject *t_ArmenianStemmer_stem(t_ArmenianStemmer *self, PyObject *args)
        {
          jboolean result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.stem());
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(ArmenianStemmer), (PyObject *) self, "stem", args, 2);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/spell/PlainTextDictionary.h"
#include "org/apache/lucene/search/spell/Dictionary.h"
#include "java/lang/Class.h"
#include "java/io/InputStream.h"
#include "java/io/Reader.h"
#include "java/io/File.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/search/suggest/InputIterator.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace spell {

          ::java::lang::Class *PlainTextDictionary::class$ = NULL;
          jmethodID *PlainTextDictionary::mids$ = NULL;
          bool PlainTextDictionary::live$ = false;

          jclass PlainTextDictionary::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/spell/PlainTextDictionary");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_cf2e3c10] = env->getMethodID(cls, "<init>", "(Ljava/io/Reader;)V");
              mids$[mid_init$_be2e4f90] = env->getMethodID(cls, "<init>", "(Ljava/io/InputStream;)V");
              mids$[mid_init$_c3dacf57] = env->getMethodID(cls, "<init>", "(Ljava/io/File;)V");
              mids$[mid_getEntryIterator_23dc46b1] = env->getMethodID(cls, "getEntryIterator", "()Lorg/apache/lucene/search/suggest/InputIterator;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          PlainTextDictionary::PlainTextDictionary(const ::java::io::Reader & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_cf2e3c10, a0.this$)) {}

          PlainTextDictionary::PlainTextDictionary(const ::java::io::InputStream & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_be2e4f90, a0.this$)) {}

          PlainTextDictionary::PlainTextDictionary(const ::java::io::File & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_c3dacf57, a0.this$)) {}

          ::org::apache::lucene::search::suggest::InputIterator PlainTextDictionary::getEntryIterator() const
          {
            return ::org::apache::lucene::search::suggest::InputIterator(env->callObjectMethod(this$, mids$[mid_getEntryIterator_23dc46b1]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace spell {
          static PyObject *t_PlainTextDictionary_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PlainTextDictionary_instance_(PyTypeObject *type, PyObject *arg);
          static int t_PlainTextDictionary_init_(t_PlainTextDictionary *self, PyObject *args, PyObject *kwds);
          static PyObject *t_PlainTextDictionary_getEntryIterator(t_PlainTextDictionary *self);
          static PyObject *t_PlainTextDictionary_get__entryIterator(t_PlainTextDictionary *self, void *data);
          static PyGetSetDef t_PlainTextDictionary__fields_[] = {
            DECLARE_GET_FIELD(t_PlainTextDictionary, entryIterator),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_PlainTextDictionary__methods_[] = {
            DECLARE_METHOD(t_PlainTextDictionary, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PlainTextDictionary, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PlainTextDictionary, getEntryIterator, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(PlainTextDictionary, t_PlainTextDictionary, ::java::lang::Object, PlainTextDictionary, t_PlainTextDictionary_init_, 0, 0, t_PlainTextDictionary__fields_, 0, 0);

          void t_PlainTextDictionary::install(PyObject *module)
          {
            installType(&PY_TYPE(PlainTextDictionary), module, "PlainTextDictionary", 0);
          }

          void t_PlainTextDictionary::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(PlainTextDictionary).tp_dict, "class_", make_descriptor(PlainTextDictionary::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(PlainTextDictionary).tp_dict, "wrapfn_", make_descriptor(t_PlainTextDictionary::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(PlainTextDictionary).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_PlainTextDictionary_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, PlainTextDictionary::initializeClass, 1)))
              return NULL;
            return t_PlainTextDictionary::wrap_Object(PlainTextDictionary(((t_PlainTextDictionary *) arg)->object.this$));
          }
          static PyObject *t_PlainTextDictionary_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, PlainTextDictionary::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_PlainTextDictionary_init_(t_PlainTextDictionary *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::java::io::Reader a0((jobject) NULL);
                PlainTextDictionary object((jobject) NULL);

                if (!parseArgs(args, "k", ::java::io::Reader::initializeClass, &a0))
                {
                  INT_CALL(object = PlainTextDictionary(a0));
                  self->object = object;
                  break;
                }
              }
              {
                ::java::io::InputStream a0((jobject) NULL);
                PlainTextDictionary object((jobject) NULL);

                if (!parseArgs(args, "k", ::java::io::InputStream::initializeClass, &a0))
                {
                  INT_CALL(object = PlainTextDictionary(a0));
                  self->object = object;
                  break;
                }
              }
              {
                ::java::io::File a0((jobject) NULL);
                PlainTextDictionary object((jobject) NULL);

                if (!parseArgs(args, "k", ::java::io::File::initializeClass, &a0))
                {
                  INT_CALL(object = PlainTextDictionary(a0));
                  self->object = object;
                  break;
                }
              }
             default:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_PlainTextDictionary_getEntryIterator(t_PlainTextDictionary *self)
          {
            ::org::apache::lucene::search::suggest::InputIterator result((jobject) NULL);
            OBJ_CALL(result = self->object.getEntryIterator());
            return ::org::apache::lucene::search::suggest::t_InputIterator::wrap_Object(result);
          }

          static PyObject *t_PlainTextDictionary_get__entryIterator(t_PlainTextDictionary *self, void *data)
          {
            ::org::apache::lucene::search::suggest::InputIterator value((jobject) NULL);
            OBJ_CALL(value = self->object.getEntryIterator());
            return ::org::apache::lucene::search::suggest::t_InputIterator::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/SetOnce$AlreadySetException.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *SetOnce$AlreadySetException::class$ = NULL;
        jmethodID *SetOnce$AlreadySetException::mids$ = NULL;
        bool SetOnce$AlreadySetException::live$ = false;

        jclass SetOnce$AlreadySetException::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/SetOnce$AlreadySetException");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        SetOnce$AlreadySetException::SetOnce$AlreadySetException() : ::java::lang::IllegalStateException(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_SetOnce$AlreadySetException_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_SetOnce$AlreadySetException_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_SetOnce$AlreadySetException_of_(t_SetOnce$AlreadySetException *self, PyObject *args);
        static int t_SetOnce$AlreadySetException_init_(t_SetOnce$AlreadySetException *self, PyObject *args, PyObject *kwds);
        static PyObject *t_SetOnce$AlreadySetException_get__parameters_(t_SetOnce$AlreadySetException *self, void *data);
        static PyGetSetDef t_SetOnce$AlreadySetException__fields_[] = {
          DECLARE_GET_FIELD(t_SetOnce$AlreadySetException, parameters_),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_SetOnce$AlreadySetException__methods_[] = {
          DECLARE_METHOD(t_SetOnce$AlreadySetException, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SetOnce$AlreadySetException, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SetOnce$AlreadySetException, of_, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(SetOnce$AlreadySetException, t_SetOnce$AlreadySetException, ::java::lang::IllegalStateException, SetOnce$AlreadySetException, t_SetOnce$AlreadySetException_init_, 0, 0, t_SetOnce$AlreadySetException__fields_, 0, 0);
        PyObject *t_SetOnce$AlreadySetException::wrap_Object(const SetOnce$AlreadySetException& object, PyTypeObject *p0)
        {
          PyObject *obj = t_SetOnce$AlreadySetException::wrap_Object(object);
          if (obj != NULL && obj != Py_None)
          {
            t_SetOnce$AlreadySetException *self = (t_SetOnce$AlreadySetException *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        PyObject *t_SetOnce$AlreadySetException::wrap_jobject(const jobject& object, PyTypeObject *p0)
        {
          PyObject *obj = t_SetOnce$AlreadySetException::wrap_jobject(object);
          if (obj != NULL && obj != Py_None)
          {
            t_SetOnce$AlreadySetException *self = (t_SetOnce$AlreadySetException *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        void t_SetOnce$AlreadySetException::install(PyObject *module)
        {
          installType(&PY_TYPE(SetOnce$AlreadySetException), module, "SetOnce$AlreadySetException", 0);
        }

        void t_SetOnce$AlreadySetException::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(SetOnce$AlreadySetException).tp_dict, "class_", make_descriptor(SetOnce$AlreadySetException::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(SetOnce$AlreadySetException).tp_dict, "wrapfn_", make_descriptor(t_SetOnce$AlreadySetException::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(SetOnce$AlreadySetException).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_SetOnce$AlreadySetException_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, SetOnce$AlreadySetException::initializeClass, 1)))
            return NULL;
          return t_SetOnce$AlreadySetException::wrap_Object(SetOnce$AlreadySetException(((t_SetOnce$AlreadySetException *) arg)->object.this$));
        }
        static PyObject *t_SetOnce$AlreadySetException_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, SetOnce$AlreadySetException::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_SetOnce$AlreadySetException_of_(t_SetOnce$AlreadySetException *self, PyObject *args)
        {
          if (!parseArg(args, "T", 1, &(self->parameters)))
            Py_RETURN_SELF;
          return PyErr_SetArgsError((PyObject *) self, "of_", args);
        }

        static int t_SetOnce$AlreadySetException_init_(t_SetOnce$AlreadySetException *self, PyObject *args, PyObject *kwds)
        {
          SetOnce$AlreadySetException object((jobject) NULL);

          INT_CALL(object = SetOnce$AlreadySetException());
          self->object = object;

          return 0;
        }
        static PyObject *t_SetOnce$AlreadySetException_get__parameters_(t_SetOnce$AlreadySetException *self, void *data)
        {
          return typeParameters(self->parameters, sizeof(self->parameters));
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/facet/range/Range.h"
#include "org/apache/lucene/queries/function/ValueSource.h"
#include "org/apache/lucene/search/Filter.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace range {

          ::java::lang::Class *Range::class$ = NULL;
          jmethodID *Range::mids$ = NULL;
          jfieldID *Range::fids$ = NULL;
          bool Range::live$ = false;

          jclass Range::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/facet/range/Range");

              mids$ = new jmethodID[max_mid];
              mids$[mid_getFilter_f7e0d95b] = env->getMethodID(cls, "getFilter", "(Lorg/apache/lucene/queries/function/ValueSource;)Lorg/apache/lucene/search/Filter;");
              mids$[mid_getFilter_fc904367] = env->getMethodID(cls, "getFilter", "(Lorg/apache/lucene/search/Filter;Lorg/apache/lucene/queries/function/ValueSource;)Lorg/apache/lucene/search/Filter;");
              mids$[mid_failNoMatch_54c6a166] = env->getMethodID(cls, "failNoMatch", "()V");

              fids$ = new jfieldID[max_fid];
              fids$[fid_label] = env->getFieldID(cls, "label", "Ljava/lang/String;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ::org::apache::lucene::search::Filter Range::getFilter(const ::org::apache::lucene::queries::function::ValueSource & a0) const
          {
            return ::org::apache::lucene::search::Filter(env->callObjectMethod(this$, mids$[mid_getFilter_f7e0d95b], a0.this$));
          }

          ::org::apache::lucene::search::Filter Range::getFilter(const ::org::apache::lucene::search::Filter & a0, const ::org::apache::lucene::queries::function::ValueSource & a1) const
          {
            return ::org::apache::lucene::search::Filter(env->callObjectMethod(this$, mids$[mid_getFilter_fc904367], a0.this$, a1.this$));
          }

          ::java::lang::String Range::_get_label() const
          {
            return ::java::lang::String(env->getObjectField(this$, fids$[fid_label]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace range {
          static PyObject *t_Range_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Range_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Range_getFilter(t_Range *self, PyObject *args);
          static PyObject *t_Range_get__label(t_Range *self, void *data);

          static PyGetSetDef t_Range__fields_[] = {
            DECLARE_GET_FIELD(t_Range, label),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_Range__methods_[] = {
            DECLARE_METHOD(t_Range, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Range, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Range, getFilter, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(Range, t_Range, ::java::lang::Object, Range, abstract_init, 0, 0, t_Range__fields_, 0, 0);

          void t_Range::install(PyObject *module)
          {
            installType(&PY_TYPE(Range), module, "Range", 0);
          }

          void t_Range::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(Range).tp_dict, "class_", make_descriptor(Range::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(Range).tp_dict, "wrapfn_", make_descriptor(t_Range::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(Range).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_Range_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, Range::initializeClass, 1)))
              return NULL;
            return t_Range::wrap_Object(Range(((t_Range *) arg)->object.this$));
          }
          static PyObject *t_Range_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, Range::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_Range_getFilter(t_Range *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::org::apache::lucene::queries::function::ValueSource a0((jobject) NULL);
                ::org::apache::lucene::search::Filter result((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::queries::function::ValueSource::initializeClass, &a0))
                {
                  OBJ_CALL(result = self->object.getFilter(a0));
                  return ::org::apache::lucene::search::t_Filter::wrap_Object(result);
                }
              }
              break;
             case 2:
              {
                ::org::apache::lucene::search::Filter a0((jobject) NULL);
                ::org::apache::lucene::queries::function::ValueSource a1((jobject) NULL);
                ::org::apache::lucene::search::Filter result((jobject) NULL);

                if (!parseArgs(args, "kk", ::org::apache::lucene::search::Filter::initializeClass, ::org::apache::lucene::queries::function::ValueSource::initializeClass, &a0, &a1))
                {
                  OBJ_CALL(result = self->object.getFilter(a0, a1));
                  return ::org::apache::lucene::search::t_Filter::wrap_Object(result);
                }
              }
            }

            PyErr_SetArgsError((PyObject *) self, "getFilter", args);
            return NULL;
          }

          static PyObject *t_Range_get__label(t_Range *self, void *data)
          {
            ::java::lang::String value((jobject) NULL);
            OBJ_CALL(value = self->object._get_label());
            return j2p(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/FieldCache$IntParser.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *FieldCache$IntParser::class$ = NULL;
        jmethodID *FieldCache$IntParser::mids$ = NULL;
        bool FieldCache$IntParser::live$ = false;

        jclass FieldCache$IntParser::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/FieldCache$IntParser");

            mids$ = new jmethodID[max_mid];
            mids$[mid_parseInt_7bc03ddb] = env->getMethodID(cls, "parseInt", "(Lorg/apache/lucene/util/BytesRef;)I");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        jint FieldCache$IntParser::parseInt(const ::org::apache::lucene::util::BytesRef & a0) const
        {
          return env->callIntMethod(this$, mids$[mid_parseInt_7bc03ddb], a0.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_FieldCache$IntParser_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FieldCache$IntParser_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FieldCache$IntParser_parseInt(t_FieldCache$IntParser *self, PyObject *arg);

        static PyMethodDef t_FieldCache$IntParser__methods_[] = {
          DECLARE_METHOD(t_FieldCache$IntParser, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FieldCache$IntParser, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FieldCache$IntParser, parseInt, METH_O),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(FieldCache$IntParser, t_FieldCache$IntParser, ::org::apache::lucene::search::FieldCache$Parser, FieldCache$IntParser, abstract_init, 0, 0, 0, 0, 0);

        void t_FieldCache$IntParser::install(PyObject *module)
        {
          installType(&PY_TYPE(FieldCache$IntParser), module, "FieldCache$IntParser", 0);
        }

        void t_FieldCache$IntParser::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(FieldCache$IntParser).tp_dict, "class_", make_descriptor(FieldCache$IntParser::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(FieldCache$IntParser).tp_dict, "wrapfn_", make_descriptor(t_FieldCache$IntParser::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(FieldCache$IntParser).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_FieldCache$IntParser_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, FieldCache$IntParser::initializeClass, 1)))
            return NULL;
          return t_FieldCache$IntParser::wrap_Object(FieldCache$IntParser(((t_FieldCache$IntParser *) arg)->object.this$));
        }
        static PyObject *t_FieldCache$IntParser_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, FieldCache$IntParser::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_FieldCache$IntParser_parseInt(t_FieldCache$IntParser *self, PyObject *arg)
        {
          ::org::apache::lucene::util::BytesRef a0((jobject) NULL);
          jint result;

          if (!parseArg(arg, "k", ::org::apache::lucene::util::BytesRef::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.parseInt(a0));
            return PyInt_FromLong((long) result);
          }

          PyErr_SetArgsError((PyObject *) self, "parseInt", arg);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/DocValuesProducer.h"
#include "java/io/Closeable.h"
#include "org/apache/lucene/util/Bits.h"
#include "org/apache/lucene/index/SortedNumericDocValues.h"
#include "org/apache/lucene/index/SortedDocValues.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/index/FieldInfo.h"
#include "org/apache/lucene/util/Accountable.h"
#include "org/apache/lucene/index/SortedSetDocValues.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/index/NumericDocValues.h"
#include "org/apache/lucene/index/BinaryDocValues.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {

        ::java::lang::Class *DocValuesProducer::class$ = NULL;
        jmethodID *DocValuesProducer::mids$ = NULL;
        bool DocValuesProducer::live$ = false;

        jclass DocValuesProducer::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/DocValuesProducer");

            mids$ = new jmethodID[max_mid];
            mids$[mid_checkIntegrity_54c6a166] = env->getMethodID(cls, "checkIntegrity", "()V");
            mids$[mid_getBinary_97c169be] = env->getMethodID(cls, "getBinary", "(Lorg/apache/lucene/index/FieldInfo;)Lorg/apache/lucene/index/BinaryDocValues;");
            mids$[mid_getDocsWithField_e4c7eda7] = env->getMethodID(cls, "getDocsWithField", "(Lorg/apache/lucene/index/FieldInfo;)Lorg/apache/lucene/util/Bits;");
            mids$[mid_getNumeric_9eab6241] = env->getMethodID(cls, "getNumeric", "(Lorg/apache/lucene/index/FieldInfo;)Lorg/apache/lucene/index/NumericDocValues;");
            mids$[mid_getSorted_984b8536] = env->getMethodID(cls, "getSorted", "(Lorg/apache/lucene/index/FieldInfo;)Lorg/apache/lucene/index/SortedDocValues;");
            mids$[mid_getSortedNumeric_ccea608a] = env->getMethodID(cls, "getSortedNumeric", "(Lorg/apache/lucene/index/FieldInfo;)Lorg/apache/lucene/index/SortedNumericDocValues;");
            mids$[mid_getSortedSet_05eaac8f] = env->getMethodID(cls, "getSortedSet", "(Lorg/apache/lucene/index/FieldInfo;)Lorg/apache/lucene/index/SortedSetDocValues;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        void DocValuesProducer::checkIntegrity() const
        {
          env->callVoidMethod(this$, mids$[mid_checkIntegrity_54c6a166]);
        }

        ::org::apache::lucene::index::BinaryDocValues DocValuesProducer::getBinary(const ::org::apache::lucene::index::FieldInfo & a0) const
        {
          return ::org::apache::lucene::index::BinaryDocValues(env->callObjectMethod(this$, mids$[mid_getBinary_97c169be], a0.this$));
        }

        ::org::apache::lucene::util::Bits DocValuesProducer::getDocsWithField(const ::org::apache::lucene::index::FieldInfo & a0) const
        {
          return ::org::apache::lucene::util::Bits(env->callObjectMethod(this$, mids$[mid_getDocsWithField_e4c7eda7], a0.this$));
        }

        ::org::apache::lucene::index::NumericDocValues DocValuesProducer::getNumeric(const ::org::apache::lucene::index::FieldInfo & a0) const
        {
          return ::org::apache::lucene::index::NumericDocValues(env->callObjectMethod(this$, mids$[mid_getNumeric_9eab6241], a0.this$));
        }

        ::org::apache::lucene::index::SortedDocValues DocValuesProducer::getSorted(const ::org::apache::lucene::index::FieldInfo & a0) const
        {
          return ::org::apache::lucene::index::SortedDocValues(env->callObjectMethod(this$, mids$[mid_getSorted_984b8536], a0.this$));
        }

        ::org::apache::lucene::index::SortedNumericDocValues DocValuesProducer::getSortedNumeric(const ::org::apache::lucene::index::FieldInfo & a0) const
        {
          return ::org::apache::lucene::index::SortedNumericDocValues(env->callObjectMethod(this$, mids$[mid_getSortedNumeric_ccea608a], a0.this$));
        }

        ::org::apache::lucene::index::SortedSetDocValues DocValuesProducer::getSortedSet(const ::org::apache::lucene::index::FieldInfo & a0) const
        {
          return ::org::apache::lucene::index::SortedSetDocValues(env->callObjectMethod(this$, mids$[mid_getSortedSet_05eaac8f], a0.this$));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        static PyObject *t_DocValuesProducer_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_DocValuesProducer_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_DocValuesProducer_checkIntegrity(t_DocValuesProducer *self);
        static PyObject *t_DocValuesProducer_getBinary(t_DocValuesProducer *self, PyObject *arg);
        static PyObject *t_DocValuesProducer_getDocsWithField(t_DocValuesProducer *self, PyObject *arg);
        static PyObject *t_DocValuesProducer_getNumeric(t_DocValuesProducer *self, PyObject *arg);
        static PyObject *t_DocValuesProducer_getSorted(t_DocValuesProducer *self, PyObject *arg);
        static PyObject *t_DocValuesProducer_getSortedNumeric(t_DocValuesProducer *self, PyObject *arg);
        static PyObject *t_DocValuesProducer_getSortedSet(t_DocValuesProducer *self, PyObject *arg);

        static PyMethodDef t_DocValuesProducer__methods_[] = {
          DECLARE_METHOD(t_DocValuesProducer, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_DocValuesProducer, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_DocValuesProducer, checkIntegrity, METH_NOARGS),
          DECLARE_METHOD(t_DocValuesProducer, getBinary, METH_O),
          DECLARE_METHOD(t_DocValuesProducer, getDocsWithField, METH_O),
          DECLARE_METHOD(t_DocValuesProducer, getNumeric, METH_O),
          DECLARE_METHOD(t_DocValuesProducer, getSorted, METH_O),
          DECLARE_METHOD(t_DocValuesProducer, getSortedNumeric, METH_O),
          DECLARE_METHOD(t_DocValuesProducer, getSortedSet, METH_O),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(DocValuesProducer, t_DocValuesProducer, ::java::lang::Object, DocValuesProducer, abstract_init, 0, 0, 0, 0, 0);

        void t_DocValuesProducer::install(PyObject *module)
        {
          installType(&PY_TYPE(DocValuesProducer), module, "DocValuesProducer", 0);
        }

        void t_DocValuesProducer::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(DocValuesProducer).tp_dict, "class_", make_descriptor(DocValuesProducer::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(DocValuesProducer).tp_dict, "wrapfn_", make_descriptor(t_DocValuesProducer::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(DocValuesProducer).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_DocValuesProducer_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, DocValuesProducer::initializeClass, 1)))
            return NULL;
          return t_DocValuesProducer::wrap_Object(DocValuesProducer(((t_DocValuesProducer *) arg)->object.this$));
        }
        static PyObject *t_DocValuesProducer_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, DocValuesProducer::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_DocValuesProducer_checkIntegrity(t_DocValuesProducer *self)
        {
          OBJ_CALL(self->object.checkIntegrity());
          Py_RETURN_NONE;
        }

        static PyObject *t_DocValuesProducer_getBinary(t_DocValuesProducer *self, PyObject *arg)
        {
          ::org::apache::lucene::index::FieldInfo a0((jobject) NULL);
          ::org::apache::lucene::index::BinaryDocValues result((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::index::FieldInfo::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.getBinary(a0));
            return ::org::apache::lucene::index::t_BinaryDocValues::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "getBinary", arg);
          return NULL;
        }

        static PyObject *t_DocValuesProducer_getDocsWithField(t_DocValuesProducer *self, PyObject *arg)
        {
          ::org::apache::lucene::index::FieldInfo a0((jobject) NULL);
          ::org::apache::lucene::util::Bits result((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::index::FieldInfo::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.getDocsWithField(a0));
            return ::org::apache::lucene::util::t_Bits::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "getDocsWithField", arg);
          return NULL;
        }

        static PyObject *t_DocValuesProducer_getNumeric(t_DocValuesProducer *self, PyObject *arg)
        {
          ::org::apache::lucene::index::FieldInfo a0((jobject) NULL);
          ::org::apache::lucene::index::NumericDocValues result((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::index::FieldInfo::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.getNumeric(a0));
            return ::org::apache::lucene::index::t_NumericDocValues::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "getNumeric", arg);
          return NULL;
        }

        static PyObject *t_DocValuesProducer_getSorted(t_DocValuesProducer *self, PyObject *arg)
        {
          ::org::apache::lucene::index::FieldInfo a0((jobject) NULL);
          ::org::apache::lucene::index::SortedDocValues result((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::index::FieldInfo::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.getSorted(a0));
            return ::org::apache::lucene::index::t_SortedDocValues::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "getSorted", arg);
          return NULL;
        }

        static PyObject *t_DocValuesProducer_getSortedNumeric(t_DocValuesProducer *self, PyObject *arg)
        {
          ::org::apache::lucene::index::FieldInfo a0((jobject) NULL);
          ::org::apache::lucene::index::SortedNumericDocValues result((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::index::FieldInfo::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.getSortedNumeric(a0));
            return ::org::apache::lucene::index::t_SortedNumericDocValues::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "getSortedNumeric", arg);
          return NULL;
        }

        static PyObject *t_DocValuesProducer_getSortedSet(t_DocValuesProducer *self, PyObject *arg)
        {
          ::org::apache::lucene::index::FieldInfo a0((jobject) NULL);
          ::org::apache::lucene::index::SortedSetDocValues result((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::index::FieldInfo::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.getSortedSet(a0));
            return ::org::apache::lucene::index::t_SortedSetDocValues::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "getSortedSet", arg);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/standard/processors/LowercaseExpandedTermsQueryNodeProcessor.h"
#include "org/apache/lucene/queryparser/flexible/core/QueryNodeException.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/QueryNode.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace processors {

              ::java::lang::Class *LowercaseExpandedTermsQueryNodeProcessor::class$ = NULL;
              jmethodID *LowercaseExpandedTermsQueryNodeProcessor::mids$ = NULL;
              bool LowercaseExpandedTermsQueryNodeProcessor::live$ = false;

              jclass LowercaseExpandedTermsQueryNodeProcessor::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/standard/processors/LowercaseExpandedTermsQueryNodeProcessor");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
                  mids$[mid_process_6705aed7] = env->getMethodID(cls, "process", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;)Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;");
                  mids$[mid_preProcessNode_6705aed7] = env->getMethodID(cls, "preProcessNode", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;)Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;");
                  mids$[mid_setChildrenOrder_4f378251] = env->getMethodID(cls, "setChildrenOrder", "(Ljava/util/List;)Ljava/util/List;");
                  mids$[mid_postProcessNode_6705aed7] = env->getMethodID(cls, "postProcessNode", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;)Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              LowercaseExpandedTermsQueryNodeProcessor::LowercaseExpandedTermsQueryNodeProcessor() : ::org::apache::lucene::queryparser::flexible::core::processors::QueryNodeProcessorImpl(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

              ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode LowercaseExpandedTermsQueryNodeProcessor::process(const ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode & a0) const
              {
                return ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode(env->callObjectMethod(this$, mids$[mid_process_6705aed7], a0.this$));
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace processors {
              static PyObject *t_LowercaseExpandedTermsQueryNodeProcessor_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_LowercaseExpandedTermsQueryNodeProcessor_instance_(PyTypeObject *type, PyObject *arg);
              static int t_LowercaseExpandedTermsQueryNodeProcessor_init_(t_LowercaseExpandedTermsQueryNodeProcessor *self, PyObject *args, PyObject *kwds);
              static PyObject *t_LowercaseExpandedTermsQueryNodeProcessor_process(t_LowercaseExpandedTermsQueryNodeProcessor *self, PyObject *args);

              static PyMethodDef t_LowercaseExpandedTermsQueryNodeProcessor__methods_[] = {
                DECLARE_METHOD(t_LowercaseExpandedTermsQueryNodeProcessor, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_LowercaseExpandedTermsQueryNodeProcessor, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_LowercaseExpandedTermsQueryNodeProcessor, process, METH_VARARGS),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(LowercaseExpandedTermsQueryNodeProcessor, t_LowercaseExpandedTermsQueryNodeProcessor, ::org::apache::lucene::queryparser::flexible::core::processors::QueryNodeProcessorImpl, LowercaseExpandedTermsQueryNodeProcessor, t_LowercaseExpandedTermsQueryNodeProcessor_init_, 0, 0, 0, 0, 0);

              void t_LowercaseExpandedTermsQueryNodeProcessor::install(PyObject *module)
              {
                installType(&PY_TYPE(LowercaseExpandedTermsQueryNodeProcessor), module, "LowercaseExpandedTermsQueryNodeProcessor", 0);
              }

              void t_LowercaseExpandedTermsQueryNodeProcessor::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(LowercaseExpandedTermsQueryNodeProcessor).tp_dict, "class_", make_descriptor(LowercaseExpandedTermsQueryNodeProcessor::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(LowercaseExpandedTermsQueryNodeProcessor).tp_dict, "wrapfn_", make_descriptor(t_LowercaseExpandedTermsQueryNodeProcessor::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(LowercaseExpandedTermsQueryNodeProcessor).tp_dict, "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_LowercaseExpandedTermsQueryNodeProcessor_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, LowercaseExpandedTermsQueryNodeProcessor::initializeClass, 1)))
                  return NULL;
                return t_LowercaseExpandedTermsQueryNodeProcessor::wrap_Object(LowercaseExpandedTermsQueryNodeProcessor(((t_LowercaseExpandedTermsQueryNodeProcessor *) arg)->object.this$));
              }
              static PyObject *t_LowercaseExpandedTermsQueryNodeProcessor_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, LowercaseExpandedTermsQueryNodeProcessor::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_LowercaseExpandedTermsQueryNodeProcessor_init_(t_LowercaseExpandedTermsQueryNodeProcessor *self, PyObject *args, PyObject *kwds)
              {
                LowercaseExpandedTermsQueryNodeProcessor object((jobject) NULL);

                INT_CALL(object = LowercaseExpandedTermsQueryNodeProcessor());
                self->object = object;

                return 0;
              }

              static PyObject *t_LowercaseExpandedTermsQueryNodeProcessor_process(t_LowercaseExpandedTermsQueryNodeProcessor *self, PyObject *args)
              {
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode a0((jobject) NULL);
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode result((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode::initializeClass, &a0))
                {
                  OBJ_CALL(result = self->object.process(a0));
                  return ::org::apache::lucene::queryparser::flexible::core::nodes::t_QueryNode::wrap_Object(result);
                }

                return callSuper(&PY_TYPE(LowercaseExpandedTermsQueryNodeProcessor), (PyObject *) self, "process", args, 2);
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/util/StopwordAnalyzerBase.h"
#include "org/apache/lucene/analysis/util/CharArraySet.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace util {

          ::java::lang::Class *StopwordAnalyzerBase::class$ = NULL;
          jmethodID *StopwordAnalyzerBase::mids$ = NULL;
          bool StopwordAnalyzerBase::live$ = false;

          jclass StopwordAnalyzerBase::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/util/StopwordAnalyzerBase");

              mids$ = new jmethodID[max_mid];
              mids$[mid_getStopwordSet_d2d3505c] = env->getMethodID(cls, "getStopwordSet", "()Lorg/apache/lucene/analysis/util/CharArraySet;");
              mids$[mid_loadStopwordSet_b3c09259] = env->getStaticMethodID(cls, "loadStopwordSet", "(Ljava/io/Reader;Lorg/apache/lucene/util/Version;)Lorg/apache/lucene/analysis/util/CharArraySet;");
              mids$[mid_loadStopwordSet_b1bbe8e8] = env->getStaticMethodID(cls, "loadStopwordSet", "(Ljava/io/File;Lorg/apache/lucene/util/Version;)Lorg/apache/lucene/analysis/util/CharArraySet;");
              mids$[mid_loadStopwordSet_3cef351b] = env->getStaticMethodID(cls, "loadStopwordSet", "(ZLjava/lang/Class;Ljava/lang/String;Ljava/lang/String;)Lorg/apache/lucene/analysis/util/CharArraySet;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ::org::apache::lucene::analysis::util::CharArraySet StopwordAnalyzerBase::getStopwordSet() const
          {
            return ::org::apache::lucene::analysis::util::CharArraySet(env->callObjectMethod(this$, mids$[mid_getStopwordSet_d2d3505c]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace util {
          static PyObject *t_StopwordAnalyzerBase_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_StopwordAnalyzerBase_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_StopwordAnalyzerBase_getStopwordSet(t_StopwordAnalyzerBase *self);
          static PyObject *t_StopwordAnalyzerBase_get__stopwordSet(t_StopwordAnalyzerBase *self, void *data);
          static PyGetSetDef t_StopwordAnalyzerBase__fields_[] = {
            DECLARE_GET_FIELD(t_StopwordAnalyzerBase, stopwordSet),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_StopwordAnalyzerBase__methods_[] = {
            DECLARE_METHOD(t_StopwordAnalyzerBase, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_StopwordAnalyzerBase, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_StopwordAnalyzerBase, getStopwordSet, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(StopwordAnalyzerBase, t_StopwordAnalyzerBase, ::org::apache::lucene::analysis::Analyzer, StopwordAnalyzerBase, abstract_init, 0, 0, t_StopwordAnalyzerBase__fields_, 0, 0);

          void t_StopwordAnalyzerBase::install(PyObject *module)
          {
            installType(&PY_TYPE(StopwordAnalyzerBase), module, "StopwordAnalyzerBase", 0);
          }

          void t_StopwordAnalyzerBase::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(StopwordAnalyzerBase).tp_dict, "class_", make_descriptor(StopwordAnalyzerBase::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(StopwordAnalyzerBase).tp_dict, "wrapfn_", make_descriptor(t_StopwordAnalyzerBase::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(StopwordAnalyzerBase).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_StopwordAnalyzerBase_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, StopwordAnalyzerBase::initializeClass, 1)))
              return NULL;
            return t_StopwordAnalyzerBase::wrap_Object(StopwordAnalyzerBase(((t_StopwordAnalyzerBase *) arg)->object.this$));
          }
          static PyObject *t_StopwordAnalyzerBase_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, StopwordAnalyzerBase::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_StopwordAnalyzerBase_getStopwordSet(t_StopwordAnalyzerBase *self)
          {
            ::org::apache::lucene::analysis::util::CharArraySet result((jobject) NULL);
            OBJ_CALL(result = self->object.getStopwordSet());
            return ::org::apache::lucene::analysis::util::t_CharArraySet::wrap_Object(result);
          }

          static PyObject *t_StopwordAnalyzerBase_get__stopwordSet(t_StopwordAnalyzerBase *self, void *data)
          {
            ::org::apache::lucene::analysis::util::CharArraySet value((jobject) NULL);
            OBJ_CALL(value = self->object.getStopwordSet());
            return ::org::apache::lucene::analysis::util::t_CharArraySet::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/Weight.h"
#include "org/apache/lucene/util/Bits.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "org/apache/lucene/search/Explanation.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/search/BulkScorer.h"
#include "org/apache/lucene/search/Scorer.h"
#include "org/apache/lucene/search/Query.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *Weight::class$ = NULL;
        jmethodID *Weight::mids$ = NULL;
        bool Weight::live$ = false;

        jclass Weight::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/Weight");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_bulkScorer_33d2aa29] = env->getMethodID(cls, "bulkScorer", "(Lorg/apache/lucene/index/AtomicReaderContext;ZLorg/apache/lucene/util/Bits;)Lorg/apache/lucene/search/BulkScorer;");
            mids$[mid_explain_6ad94adc] = env->getMethodID(cls, "explain", "(Lorg/apache/lucene/index/AtomicReaderContext;I)Lorg/apache/lucene/search/Explanation;");
            mids$[mid_getQuery_97e3851a] = env->getMethodID(cls, "getQuery", "()Lorg/apache/lucene/search/Query;");
            mids$[mid_getValueForNormalization_54c6a176] = env->getMethodID(cls, "getValueForNormalization", "()F");
            mids$[mid_normalize_f1b0c004] = env->getMethodID(cls, "normalize", "(FF)V");
            mids$[mid_scorer_3869ad24] = env->getMethodID(cls, "scorer", "(Lorg/apache/lucene/index/AtomicReaderContext;Lorg/apache/lucene/util/Bits;)Lorg/apache/lucene/search/Scorer;");
            mids$[mid_scoresDocsOutOfOrder_54c6a16a] = env->getMethodID(cls, "scoresDocsOutOfOrder", "()Z");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        Weight::Weight() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        ::org::apache::lucene::search::BulkScorer Weight::bulkScorer(const ::org::apache::lucene::index::AtomicReaderContext & a0, jboolean a1, const ::org::apache::lucene::util::Bits & a2) const
        {
          return ::org::apache::lucene::search::BulkScorer(env->callObjectMethod(this$, mids$[mid_bulkScorer_33d2aa29], a0.this$, a1, a2.this$));
        }

        ::org::apache::lucene::search::Explanation Weight::explain(const ::org::apache::lucene::index::AtomicReaderContext & a0, jint a1) const
        {
          return ::org::apache::lucene::search::Explanation(env->callObjectMethod(this$, mids$[mid_explain_6ad94adc], a0.this$, a1));
        }

        ::org::apache::lucene::search::Query Weight::getQuery() const
        {
          return ::org::apache::lucene::search::Query(env->callObjectMethod(this$, mids$[mid_getQuery_97e3851a]));
        }

        jfloat Weight::getValueForNormalization() const
        {
          return env->callFloatMethod(this$, mids$[mid_getValueForNormalization_54c6a176]);
        }

        void Weight::normalize(jfloat a0, jfloat a1) const
        {
          env->callVoidMethod(this$, mids$[mid_normalize_f1b0c004], a0, a1);
        }

        ::org::apache::lucene::search::Scorer Weight::scorer(const ::org::apache::lucene::index::AtomicReaderContext & a0, const ::org::apache::lucene::util::Bits & a1) const
        {
          return ::org::apache::lucene::search::Scorer(env->callObjectMethod(this$, mids$[mid_scorer_3869ad24], a0.this$, a1.this$));
        }

        jboolean Weight::scoresDocsOutOfOrder() const
        {
          return env->callBooleanMethod(this$, mids$[mid_scoresDocsOutOfOrder_54c6a16a]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_Weight_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_Weight_instance_(PyTypeObject *type, PyObject *arg);
        static int t_Weight_init_(t_Weight *self, PyObject *args, PyObject *kwds);
        static PyObject *t_Weight_bulkScorer(t_Weight *self, PyObject *args);
        static PyObject *t_Weight_explain(t_Weight *self, PyObject *args);
        static PyObject *t_Weight_getQuery(t_Weight *self);
        static PyObject *t_Weight_getValueForNormalization(t_Weight *self);
        static PyObject *t_Weight_normalize(t_Weight *self, PyObject *args);
        static PyObject *t_Weight_scorer(t_Weight *self, PyObject *args);
        static PyObject *t_Weight_scoresDocsOutOfOrder(t_Weight *self);
        static PyObject *t_Weight_get__query(t_Weight *self, void *data);
        static PyObject *t_Weight_get__valueForNormalization(t_Weight *self, void *data);
        static PyGetSetDef t_Weight__fields_[] = {
          DECLARE_GET_FIELD(t_Weight, query),
          DECLARE_GET_FIELD(t_Weight, valueForNormalization),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_Weight__methods_[] = {
          DECLARE_METHOD(t_Weight, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_Weight, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_Weight, bulkScorer, METH_VARARGS),
          DECLARE_METHOD(t_Weight, explain, METH_VARARGS),
          DECLARE_METHOD(t_Weight, getQuery, METH_NOARGS),
          DECLARE_METHOD(t_Weight, getValueForNormalization, METH_NOARGS),
          DECLARE_METHOD(t_Weight, normalize, METH_VARARGS),
          DECLARE_METHOD(t_Weight, scorer, METH_VARARGS),
          DECLARE_METHOD(t_Weight, scoresDocsOutOfOrder, METH_NOARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(Weight, t_Weight, ::java::lang::Object, Weight, t_Weight_init_, 0, 0, t_Weight__fields_, 0, 0);

        void t_Weight::install(PyObject *module)
        {
          installType(&PY_TYPE(Weight), module, "Weight", 0);
        }

        void t_Weight::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(Weight).tp_dict, "class_", make_descriptor(Weight::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(Weight).tp_dict, "wrapfn_", make_descriptor(t_Weight::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(Weight).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_Weight_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, Weight::initializeClass, 1)))
            return NULL;
          return t_Weight::wrap_Object(Weight(((t_Weight *) arg)->object.this$));
        }
        static PyObject *t_Weight_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, Weight::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_Weight_init_(t_Weight *self, PyObject *args, PyObject *kwds)
        {
          Weight object((jobject) NULL);

          INT_CALL(object = Weight());
          self->object = object;

          return 0;
        }

        static PyObject *t_Weight_bulkScorer(t_Weight *self, PyObject *args)
        {
          ::org::apache::lucene::index::AtomicReaderContext a0((jobject) NULL);
          jboolean a1;
          ::org::apache::lucene::util::Bits a2((jobject) NULL);
          ::org::apache::lucene::search::BulkScorer result((jobject) NULL);

          if (!parseArgs(args, "kZk", ::org::apache::lucene::index::AtomicReaderContext::initializeClass, ::org::apache::lucene::util::Bits::initializeClass, &a0, &a1, &a2))
          {
            OBJ_CALL(result = self->object.bulkScorer(a0, a1, a2));
            return ::org::apache::lucene::search::t_BulkScorer::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "bulkScorer", args);
          return NULL;
        }

        static PyObject *t_Weight_explain(t_Weight *self, PyObject *args)
        {
          ::org::apache::lucene::index::AtomicReaderContext a0((jobject) NULL);
          jint a1;
          ::org::apache::lucene::search::Explanation result((jobject) NULL);

          if (!parseArgs(args, "kI", ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = self->object.explain(a0, a1));
            return ::org::apache::lucene::search::t_Explanation::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "explain", args);
          return NULL;
        }

        static PyObject *t_Weight_getQuery(t_Weight *self)
        {
          ::org::apache::lucene::search::Query result((jobject) NULL);
          OBJ_CALL(result = self->object.getQuery());
          return ::org::apache::lucene::search::t_Query::wrap_Object(result);
        }

        static PyObject *t_Weight_getValueForNormalization(t_Weight *self)
        {
          jfloat result;
          OBJ_CALL(result = self->object.getValueForNormalization());
          return PyFloat_FromDouble((double) result);
        }

        static PyObject *t_Weight_normalize(t_Weight *self, PyObject *args)
        {
          jfloat a0;
          jfloat a1;

          if (!parseArgs(args, "FF", &a0, &a1))
          {
            OBJ_CALL(self->object.normalize(a0, a1));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "normalize", args);
          return NULL;
        }

        static PyObject *t_Weight_scorer(t_Weight *self, PyObject *args)
        {
          ::org::apache::lucene::index::AtomicReaderContext a0((jobject) NULL);
          ::org::apache::lucene::util::Bits a1((jobject) NULL);
          ::org::apache::lucene::search::Scorer result((jobject) NULL);

          if (!parseArgs(args, "kk", ::org::apache::lucene::index::AtomicReaderContext::initializeClass, ::org::apache::lucene::util::Bits::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = self->object.scorer(a0, a1));
            return ::org::apache::lucene::search::t_Scorer::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "scorer", args);
          return NULL;
        }

        static PyObject *t_Weight_scoresDocsOutOfOrder(t_Weight *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.scoresDocsOutOfOrder());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_Weight_get__query(t_Weight *self, void *data)
        {
          ::org::apache::lucene::search::Query value((jobject) NULL);
          OBJ_CALL(value = self->object.getQuery());
          return ::org::apache::lucene::search::t_Query::wrap_Object(value);
        }

        static PyObject *t_Weight_get__valueForNormalization(t_Weight *self, void *data)
        {
          jfloat value;
          OBJ_CALL(value = self->object.getValueForNormalization());
          return PyFloat_FromDouble((double) value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/automaton/BasicOperations.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/util/automaton/Automaton.h"
#include "java/lang/String.h"
#include "java/util/Collection.h"
#include "org/apache/lucene/util/automaton/StatePair.h"
#include "java/util/List.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace automaton {

          ::java::lang::Class *BasicOperations::class$ = NULL;
          jmethodID *BasicOperations::mids$ = NULL;
          bool BasicOperations::live$ = false;

          jclass BasicOperations::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/util/automaton/BasicOperations");

              mids$ = new jmethodID[max_mid];
              mids$[mid_addEpsilons_c3f38587] = env->getStaticMethodID(cls, "addEpsilons", "(Lorg/apache/lucene/util/automaton/Automaton;Ljava/util/Collection;)V");
              mids$[mid_complement_7aca8e1f] = env->getStaticMethodID(cls, "complement", "(Lorg/apache/lucene/util/automaton/Automaton;)Lorg/apache/lucene/util/automaton/Automaton;");
              mids$[mid_concatenate_3449867a] = env->getStaticMethodID(cls, "concatenate", "(Ljava/util/List;)Lorg/apache/lucene/util/automaton/Automaton;");
              mids$[mid_concatenate_fa852915] = env->getStaticMethodID(cls, "concatenate", "(Lorg/apache/lucene/util/automaton/Automaton;Lorg/apache/lucene/util/automaton/Automaton;)Lorg/apache/lucene/util/automaton/Automaton;");
              mids$[mid_determinize_fc7cf394] = env->getStaticMethodID(cls, "determinize", "(Lorg/apache/lucene/util/automaton/Automaton;)V");
              mids$[mid_intersection_fa852915] = env->getStaticMethodID(cls, "intersection", "(Lorg/apache/lucene/util/automaton/Automaton;Lorg/apache/lucene/util/automaton/Automaton;)Lorg/apache/lucene/util/automaton/Automaton;");
              mids$[mid_isEmpty_fc7cf398] = env->getStaticMethodID(cls, "isEmpty", "(Lorg/apache/lucene/util/automaton/Automaton;)Z");
              mids$[mid_isEmptyString_fc7cf398] = env->getStaticMethodID(cls, "isEmptyString", "(Lorg/apache/lucene/util/automaton/Automaton;)Z");
              mids$[mid_isTotal_fc7cf398] = env->getStaticMethodID(cls, "isTotal", "(Lorg/apache/lucene/util/automaton/Automaton;)Z");
              mids$[mid_minus_fa852915] = env->getStaticMethodID(cls, "minus", "(Lorg/apache/lucene/util/automaton/Automaton;Lorg/apache/lucene/util/automaton/Automaton;)Lorg/apache/lucene/util/automaton/Automaton;");
              mids$[mid_optional_7aca8e1f] = env->getStaticMethodID(cls, "optional", "(Lorg/apache/lucene/util/automaton/Automaton;)Lorg/apache/lucene/util/automaton/Automaton;");
              mids$[mid_repeat_7aca8e1f] = env->getStaticMethodID(cls, "repeat", "(Lorg/apache/lucene/util/automaton/Automaton;)Lorg/apache/lucene/util/automaton/Automaton;");
              mids$[mid_repeat_df52766d] = env->getStaticMethodID(cls, "repeat", "(Lorg/apache/lucene/util/automaton/Automaton;I)Lorg/apache/lucene/util/automaton/Automaton;");
              mids$[mid_repeat_6e1cfc6f] = env->getStaticMethodID(cls, "repeat", "(Lorg/apache/lucene/util/automaton/Automaton;II)Lorg/apache/lucene/util/automaton/Automaton;");
              mids$[mid_run_b3a03722] = env->getStaticMethodID(cls, "run", "(Lorg/apache/lucene/util/automaton/Automaton;Ljava/lang/String;)Z");
              mids$[mid_sameLanguage_7d21690e] = env->getStaticMethodID(cls, "sameLanguage", "(Lorg/apache/lucene/util/automaton/Automaton;Lorg/apache/lucene/util/automaton/Automaton;)Z");
              mids$[mid_subsetOf_7d21690e] = env->getStaticMethodID(cls, "subsetOf", "(Lorg/apache/lucene/util/automaton/Automaton;Lorg/apache/lucene/util/automaton/Automaton;)Z");
              mids$[mid_union_40d33194] = env->getStaticMethodID(cls, "union", "(Ljava/util/Collection;)Lorg/apache/lucene/util/automaton/Automaton;");
              mids$[mid_union_fa852915] = env->getStaticMethodID(cls, "union", "(Lorg/apache/lucene/util/automaton/Automaton;Lorg/apache/lucene/util/automaton/Automaton;)Lorg/apache/lucene/util/automaton/Automaton;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          void BasicOperations::addEpsilons(const ::org::apache::lucene::util::automaton::Automaton & a0, const ::java::util::Collection & a1)
          {
            jclass cls = env->getClass(initializeClass);
            env->callStaticVoidMethod(cls, mids$[mid_addEpsilons_c3f38587], a0.this$, a1.this$);
          }

          ::org::apache::lucene::util::automaton::Automaton BasicOperations::complement(const ::org::apache::lucene::util::automaton::Automaton & a0)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::util::automaton::Automaton(env->callStaticObjectMethod(cls, mids$[mid_complement_7aca8e1f], a0.this$));
          }

          ::org::apache::lucene::util::automaton::Automaton BasicOperations::concatenate(const ::java::util::List & a0)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::util::automaton::Automaton(env->callStaticObjectMethod(cls, mids$[mid_concatenate_3449867a], a0.this$));
          }

          ::org::apache::lucene::util::automaton::Automaton BasicOperations::concatenate(const ::org::apache::lucene::util::automaton::Automaton & a0, const ::org::apache::lucene::util::automaton::Automaton & a1)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::util::automaton::Automaton(env->callStaticObjectMethod(cls, mids$[mid_concatenate_fa852915], a0.this$, a1.this$));
          }

          void BasicOperations::determinize(const ::org::apache::lucene::util::automaton::Automaton & a0)
          {
            jclass cls = env->getClass(initializeClass);
            env->callStaticVoidMethod(cls, mids$[mid_determinize_fc7cf394], a0.this$);
          }

          ::org::apache::lucene::util::automaton::Automaton BasicOperations::intersection(const ::org::apache::lucene::util::automaton::Automaton & a0, const ::org::apache::lucene::util::automaton::Automaton & a1)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::util::automaton::Automaton(env->callStaticObjectMethod(cls, mids$[mid_intersection_fa852915], a0.this$, a1.this$));
          }

          jboolean BasicOperations::isEmpty(const ::org::apache::lucene::util::automaton::Automaton & a0)
          {
            jclass cls = env->getClass(initializeClass);
            return env->callStaticBooleanMethod(cls, mids$[mid_isEmpty_fc7cf398], a0.this$);
          }

          jboolean BasicOperations::isEmptyString(const ::org::apache::lucene::util::automaton::Automaton & a0)
          {
            jclass cls = env->getClass(initializeClass);
            return env->callStaticBooleanMethod(cls, mids$[mid_isEmptyString_fc7cf398], a0.this$);
          }

          jboolean BasicOperations::isTotal(const ::org::apache::lucene::util::automaton::Automaton & a0)
          {
            jclass cls = env->getClass(initializeClass);
            return env->callStaticBooleanMethod(cls, mids$[mid_isTotal_fc7cf398], a0.this$);
          }

          ::org::apache::lucene::util::automaton::Automaton BasicOperations::minus(const ::org::apache::lucene::util::automaton::Automaton & a0, const ::org::apache::lucene::util::automaton::Automaton & a1)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::util::automaton::Automaton(env->callStaticObjectMethod(cls, mids$[mid_minus_fa852915], a0.this$, a1.this$));
          }

          ::org::apache::lucene::util::automaton::Automaton BasicOperations::optional(const ::org::apache::lucene::util::automaton::Automaton & a0)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::util::automaton::Automaton(env->callStaticObjectMethod(cls, mids$[mid_optional_7aca8e1f], a0.this$));
          }

          ::org::apache::lucene::util::automaton::Automaton BasicOperations::repeat(const ::org::apache::lucene::util::automaton::Automaton & a0)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::util::automaton::Automaton(env->callStaticObjectMethod(cls, mids$[mid_repeat_7aca8e1f], a0.this$));
          }

          ::org::apache::lucene::util::automaton::Automaton BasicOperations::repeat(const ::org::apache::lucene::util::automaton::Automaton & a0, jint a1)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::util::automaton::Automaton(env->callStaticObjectMethod(cls, mids$[mid_repeat_df52766d], a0.this$, a1));
          }

          ::org::apache::lucene::util::automaton::Automaton BasicOperations::repeat(const ::org::apache::lucene::util::automaton::Automaton & a0, jint a1, jint a2)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::util::automaton::Automaton(env->callStaticObjectMethod(cls, mids$[mid_repeat_6e1cfc6f], a0.this$, a1, a2));
          }

          jboolean BasicOperations::run(const ::org::apache::lucene::util::automaton::Automaton & a0, const ::java::lang::String & a1)
          {
            jclass cls = env->getClass(initializeClass);
            return env->callStaticBooleanMethod(cls, mids$[mid_run_b3a03722], a0.this$, a1.this$);
          }

          jboolean BasicOperations::sameLanguage(const ::org::apache::lucene::util::automaton::Automaton & a0, const ::org::apache::lucene::util::automaton::Automaton & a1)
          {
            jclass cls = env->getClass(initializeClass);
            return env->callStaticBooleanMethod(cls, mids$[mid_sameLanguage_7d21690e], a0.this$, a1.this$);
          }

          jboolean BasicOperations::subsetOf(const ::org::apache::lucene::util::automaton::Automaton & a0, const ::org::apache::lucene::util::automaton::Automaton & a1)
          {
            jclass cls = env->getClass(initializeClass);
            return env->callStaticBooleanMethod(cls, mids$[mid_subsetOf_7d21690e], a0.this$, a1.this$);
          }

          ::org::apache::lucene::util::automaton::Automaton BasicOperations::union$(const ::java::util::Collection & a0)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::util::automaton::Automaton(env->callStaticObjectMethod(cls, mids$[mid_union_40d33194], a0.this$));
          }

          ::org::apache::lucene::util::automaton::Automaton BasicOperations::union$(const ::org::apache::lucene::util::automaton::Automaton & a0, const ::org::apache::lucene::util::automaton::Automaton & a1)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::util::automaton::Automaton(env->callStaticObjectMethod(cls, mids$[mid_union_fa852915], a0.this$, a1.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace automaton {
          static PyObject *t_BasicOperations_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_BasicOperations_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_BasicOperations_addEpsilons(PyTypeObject *type, PyObject *args);
          static PyObject *t_BasicOperations_complement(PyTypeObject *type, PyObject *arg);
          static PyObject *t_BasicOperations_concatenate(PyTypeObject *type, PyObject *args);
          static PyObject *t_BasicOperations_determinize(PyTypeObject *type, PyObject *arg);
          static PyObject *t_BasicOperations_intersection(PyTypeObject *type, PyObject *args);
          static PyObject *t_BasicOperations_isEmpty(PyTypeObject *type, PyObject *arg);
          static PyObject *t_BasicOperations_isEmptyString(PyTypeObject *type, PyObject *arg);
          static PyObject *t_BasicOperations_isTotal(PyTypeObject *type, PyObject *arg);
          static PyObject *t_BasicOperations_minus(PyTypeObject *type, PyObject *args);
          static PyObject *t_BasicOperations_optional(PyTypeObject *type, PyObject *arg);
          static PyObject *t_BasicOperations_repeat(PyTypeObject *type, PyObject *args);
          static PyObject *t_BasicOperations_run(PyTypeObject *type, PyObject *args);
          static PyObject *t_BasicOperations_sameLanguage(PyTypeObject *type, PyObject *args);
          static PyObject *t_BasicOperations_subsetOf(PyTypeObject *type, PyObject *args);
          static PyObject *t_BasicOperations_union(PyTypeObject *type, PyObject *args);

          static PyMethodDef t_BasicOperations__methods_[] = {
            DECLARE_METHOD(t_BasicOperations, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_BasicOperations, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_BasicOperations, addEpsilons, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_BasicOperations, complement, METH_O | METH_CLASS),
            DECLARE_METHOD(t_BasicOperations, concatenate, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_BasicOperations, determinize, METH_O | METH_CLASS),
            DECLARE_METHOD(t_BasicOperations, intersection, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_BasicOperations, isEmpty, METH_O | METH_CLASS),
            DECLARE_METHOD(t_BasicOperations, isEmptyString, METH_O | METH_CLASS),
            DECLARE_METHOD(t_BasicOperations, isTotal, METH_O | METH_CLASS),
            DECLARE_METHOD(t_BasicOperations, minus, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_BasicOperations, optional, METH_O | METH_CLASS),
            DECLARE_METHOD(t_BasicOperations, repeat, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_BasicOperations, run, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_BasicOperations, sameLanguage, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_BasicOperations, subsetOf, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_BasicOperations, union, METH_VARARGS | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(BasicOperations, t_BasicOperations, ::java::lang::Object, BasicOperations, abstract_init, 0, 0, 0, 0, 0);

          void t_BasicOperations::install(PyObject *module)
          {
            installType(&PY_TYPE(BasicOperations), module, "BasicOperations", 0);
          }

          void t_BasicOperations::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(BasicOperations).tp_dict, "class_", make_descriptor(BasicOperations::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(BasicOperations).tp_dict, "wrapfn_", make_descriptor(t_BasicOperations::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(BasicOperations).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_BasicOperations_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, BasicOperations::initializeClass, 1)))
              return NULL;
            return t_BasicOperations::wrap_Object(BasicOperations(((t_BasicOperations *) arg)->object.this$));
          }
          static PyObject *t_BasicOperations_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, BasicOperations::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_BasicOperations_addEpsilons(PyTypeObject *type, PyObject *args)
          {
            ::org::apache::lucene::util::automaton::Automaton a0((jobject) NULL);
            ::java::util::Collection a1((jobject) NULL);
            PyTypeObject **p1;

            if (!parseArgs(args, "kK", ::org::apache::lucene::util::automaton::Automaton::initializeClass, ::java::util::Collection::initializeClass, &a0, &a1, &p1, ::java::util::t_Collection::parameters_))
            {
              OBJ_CALL(::org::apache::lucene::util::automaton::BasicOperations::addEpsilons(a0, a1));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError(type, "addEpsilons", args);
            return NULL;
          }

          static PyObject *t_BasicOperations_complement(PyTypeObject *type, PyObject *arg)
          {
            ::org::apache::lucene::util::automaton::Automaton a0((jobject) NULL);
            ::org::apache::lucene::util::automaton::Automaton result((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::util::automaton::Automaton::initializeClass, &a0))
            {
              OBJ_CALL(result = ::org::apache::lucene::util::automaton::BasicOperations::complement(a0));
              return ::org::apache::lucene::util::automaton::t_Automaton::wrap_Object(result);
            }

            PyErr_SetArgsError(type, "complement", arg);
            return NULL;
          }

          static PyObject *t_BasicOperations_concatenate(PyTypeObject *type, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::java::util::List a0((jobject) NULL);
                PyTypeObject **p0;
                ::org::apache::lucene::util::automaton::Automaton result((jobject) NULL);

                if (!parseArgs(args, "K", ::java::util::List::initializeClass, &a0, &p0, ::java::util::t_List::parameters_))
                {
                  OBJ_CALL(result = ::org::apache::lucene::util::automaton::BasicOperations::concatenate(a0));
                  return ::org::apache::lucene::util::automaton::t_Automaton::wrap_Object(result);
                }
              }
              break;
             case 2:
              {
                ::org::apache::lucene::util::automaton::Automaton a0((jobject) NULL);
                ::org::apache::lucene::util::automaton::Automaton a1((jobject) NULL);
                ::org::apache::lucene::util::automaton::Automaton result((jobject) NULL);

                if (!parseArgs(args, "kk", ::org::apache::lucene::util::automaton::Automaton::initializeClass, ::org::apache::lucene::util::automaton::Automaton::initializeClass, &a0, &a1))
                {
                  OBJ_CALL(result = ::org::apache::lucene::util::automaton::BasicOperations::concatenate(a0, a1));
                  return ::org::apache::lucene::util::automaton::t_Automaton::wrap_Object(result);
                }
              }
            }

            PyErr_SetArgsError(type, "concatenate", args);
            return NULL;
          }

          static PyObject *t_BasicOperations_determinize(PyTypeObject *type, PyObject *arg)
          {
            ::org::apache::lucene::util::automaton::Automaton a0((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::util::automaton::Automaton::initializeClass, &a0))
            {
              OBJ_CALL(::org::apache::lucene::util::automaton::BasicOperations::determinize(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError(type, "determinize", arg);
            return NULL;
          }

          static PyObject *t_BasicOperations_intersection(PyTypeObject *type, PyObject *args)
          {
            ::org::apache::lucene::util::automaton::Automaton a0((jobject) NULL);
            ::org::apache::lucene::util::automaton::Automaton a1((jobject) NULL);
            ::org::apache::lucene::util::automaton::Automaton result((jobject) NULL);

            if (!parseArgs(args, "kk", ::org::apache::lucene::util::automaton::Automaton::initializeClass, ::org::apache::lucene::util::automaton::Automaton::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = ::org::apache::lucene::util::automaton::BasicOperations::intersection(a0, a1));
              return ::org::apache::lucene::util::automaton::t_Automaton::wrap_Object(result);
            }

            PyErr_SetArgsError(type, "intersection", args);
            return NULL;
          }

          static PyObject *t_BasicOperations_isEmpty(PyTypeObject *type, PyObject *arg)
          {
            ::org::apache::lucene::util::automaton::Automaton a0((jobject) NULL);
            jboolean result;

            if (!parseArg(arg, "k", ::org::apache::lucene::util::automaton::Automaton::initializeClass, &a0))
            {
              OBJ_CALL(result = ::org::apache::lucene::util::automaton::BasicOperations::isEmpty(a0));
              Py_RETURN_BOOL(result);
            }

            PyErr_SetArgsError(type, "isEmpty", arg);
            return NULL;
          }

          static PyObject *t_BasicOperations_isEmptyString(PyTypeObject *type, PyObject *arg)
          {
            ::org::apache::lucene::util::automaton::Automaton a0((jobject) NULL);
            jboolean result;

            if (!parseArg(arg, "k", ::org::apache::lucene::util::automaton::Automaton::initializeClass, &a0))
            {
              OBJ_CALL(result = ::org::apache::lucene::util::automaton::BasicOperations::isEmptyString(a0));
              Py_RETURN_BOOL(result);
            }

            PyErr_SetArgsError(type, "isEmptyString", arg);
            return NULL;
          }

          static PyObject *t_BasicOperations_isTotal(PyTypeObject *type, PyObject *arg)
          {
            ::org::apache::lucene::util::automaton::Automaton a0((jobject) NULL);
            jboolean result;

            if (!parseArg(arg, "k", ::org::apache::lucene::util::automaton::Automaton::initializeClass, &a0))
            {
              OBJ_CALL(result = ::org::apache::lucene::util::automaton::BasicOperations::isTotal(a0));
              Py_RETURN_BOOL(result);
            }

            PyErr_SetArgsError(type, "isTotal", arg);
            return NULL;
          }

          static PyObject *t_BasicOperations_minus(PyTypeObject *type, PyObject *args)
          {
            ::org::apache::lucene::util::automaton::Automaton a0((jobject) NULL);
            ::org::apache::lucene::util::automaton::Automaton a1((jobject) NULL);
            ::org::apache::lucene::util::automaton::Automaton result((jobject) NULL);

            if (!parseArgs(args, "kk", ::org::apache::lucene::util::automaton::Automaton::initializeClass, ::org::apache::lucene::util::automaton::Automaton::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = ::org::apache::lucene::util::automaton::BasicOperations::minus(a0, a1));
              return ::org::apache::lucene::util::automaton::t_Automaton::wrap_Object(result);
            }

            PyErr_SetArgsError(type, "minus", args);
            return NULL;
          }

          static PyObject *t_BasicOperations_optional(PyTypeObject *type, PyObject *arg)
          {
            ::org::apache::lucene::util::automaton::Automaton a0((jobject) NULL);
            ::org::apache::lucene::util::automaton::Automaton result((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::util::automaton::Automaton::initializeClass, &a0))
            {
              OBJ_CALL(result = ::org::apache::lucene::util::automaton::BasicOperations::optional(a0));
              return ::org::apache::lucene::util::automaton::t_Automaton::wrap_Object(result);
            }

            PyErr_SetArgsError(type, "optional", arg);
            return NULL;
          }

          static PyObject *t_BasicOperations_repeat(PyTypeObject *type, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::org::apache::lucene::util::automaton::Automaton a0((jobject) NULL);
                ::org::apache::lucene::util::automaton::Automaton result((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::util::automaton::Automaton::initializeClass, &a0))
                {
                  OBJ_CALL(result = ::org::apache::lucene::util::automaton::BasicOperations::repeat(a0));
                  return ::org::apache::lucene::util::automaton::t_Automaton::wrap_Object(result);
                }
              }
              break;
             case 2:
              {
                ::org::apache::lucene::util::automaton::Automaton a0((jobject) NULL);
                jint a1;
                ::org::apache::lucene::util::automaton::Automaton result((jobject) NULL);

                if (!parseArgs(args, "kI", ::org::apache::lucene::util::automaton::Automaton::initializeClass, &a0, &a1))
                {
                  OBJ_CALL(result = ::org::apache::lucene::util::automaton::BasicOperations::repeat(a0, a1));
                  return ::org::apache::lucene::util::automaton::t_Automaton::wrap_Object(result);
                }
              }
              break;
             case 3:
              {
                ::org::apache::lucene::util::automaton::Automaton a0((jobject) NULL);
                jint a1;
                jint a2;
                ::org::apache::lucene::util::automaton::Automaton result((jobject) NULL);

                if (!parseArgs(args, "kII", ::org::apache::lucene::util::automaton::Automaton::initializeClass, &a0, &a1, &a2))
                {
                  OBJ_CALL(result = ::org::apache::lucene::util::automaton::BasicOperations::repeat(a0, a1, a2));
                  return ::org::apache::lucene::util::automaton::t_Automaton::wrap_Object(result);
                }
              }
            }

            PyErr_SetArgsError(type, "repeat", args);
            return NULL;
          }

          static PyObject *t_BasicOperations_run(PyTypeObject *type, PyObject *args)
          {
            ::org::apache::lucene::util::automaton::Automaton a0((jobject) NULL);
            ::java::lang::String a1((jobject) NULL);
            jboolean result;

            if (!parseArgs(args, "ks", ::org::apache::lucene::util::automaton::Automaton::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = ::org::apache::lucene::util::automaton::BasicOperations::run(a0, a1));
              Py_RETURN_BOOL(result);
            }

            PyErr_SetArgsError(type, "run", args);
            return NULL;
          }

          static PyObject *t_BasicOperations_sameLanguage(PyTypeObject *type, PyObject *args)
          {
            ::org::apache::lucene::util::automaton::Automaton a0((jobject) NULL);
            ::org::apache::lucene::util::automaton::Automaton a1((jobject) NULL);
            jboolean result;

            if (!parseArgs(args, "kk", ::org::apache::lucene::util::automaton::Automaton::initializeClass, ::org::apache::lucene::util::automaton::Automaton::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = ::org::apache::lucene::util::automaton::BasicOperations::sameLanguage(a0, a1));
              Py_RETURN_BOOL(result);
            }

            PyErr_SetArgsError(type, "sameLanguage", args);
            return NULL;
          }

          static PyObject *t_BasicOperations_subsetOf(PyTypeObject *type, PyObject *args)
          {
            ::org::apache::lucene::util::automaton::Automaton a0((jobject) NULL);
            ::org::apache::lucene::util::automaton::Automaton a1((jobject) NULL);
            jboolean result;

            if (!parseArgs(args, "kk", ::org::apache::lucene::util::automaton::Automaton::initializeClass, ::org::apache::lucene::util::automaton::Automaton::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = ::org::apache::lucene::util::automaton::BasicOperations::subsetOf(a0, a1));
              Py_RETURN_BOOL(result);
            }

            PyErr_SetArgsError(type, "subsetOf", args);
            return NULL;
          }

          static PyObject *t_BasicOperations_union(PyTypeObject *type, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::java::util::Collection a0((jobject) NULL);
                PyTypeObject **p0;
                ::org::apache::lucene::util::automaton::Automaton result((jobject) NULL);

                if (!parseArgs(args, "K", ::java::util::Collection::initializeClass, &a0, &p0, ::java::util::t_Collection::parameters_))
                {
                  OBJ_CALL(result = ::org::apache::lucene::util::automaton::BasicOperations::union$(a0));
                  return ::org::apache::lucene::util::automaton::t_Automaton::wrap_Object(result);
                }
              }
              break;
             case 2:
              {
                ::org::apache::lucene::util::automaton::Automaton a0((jobject) NULL);
                ::org::apache::lucene::util::automaton::Automaton a1((jobject) NULL);
                ::org::apache::lucene::util::automaton::Automaton result((jobject) NULL);

                if (!parseArgs(args, "kk", ::org::apache::lucene::util::automaton::Automaton::initializeClass, ::org::apache::lucene::util::automaton::Automaton::initializeClass, &a0, &a1))
                {
                  OBJ_CALL(result = ::org::apache::lucene::util::automaton::BasicOperations::union$(a0, a1));
                  return ::org::apache::lucene::util::automaton::t_Automaton::wrap_Object(result);
                }
              }
            }

            PyErr_SetArgsError(type, "union", args);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/compound/DictionaryCompoundWordTokenFilterFactory.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "java/io/IOException.h"
#include "java/util/Map.h"
#include "java/lang/String.h"
#include "org/apache/lucene/analysis/util/ResourceLoader.h"
#include "org/apache/lucene/analysis/util/ResourceLoaderAware.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace compound {

          ::java::lang::Class *DictionaryCompoundWordTokenFilterFactory::class$ = NULL;
          jmethodID *DictionaryCompoundWordTokenFilterFactory::mids$ = NULL;
          bool DictionaryCompoundWordTokenFilterFactory::live$ = false;

          jclass DictionaryCompoundWordTokenFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/compound/DictionaryCompoundWordTokenFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4c9e2b1c] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_a65cd6ab] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/TokenStream;");
              mids$[mid_inform_d6a4bc97] = env->getMethodID(cls, "inform", "(Lorg/apache/lucene/analysis/util/ResourceLoader;)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          DictionaryCompoundWordTokenFilterFactory::DictionaryCompoundWordTokenFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_4c9e2b1c, a0.this$)) {}

          ::org::apache::lucene::analysis::TokenStream DictionaryCompoundWordTokenFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::TokenStream(env->callObjectMethod(this$, mids$[mid_create_a65cd6ab], a0.this$));
          }

          void DictionaryCompoundWordTokenFilterFactory::inform(const ::org::apache::lucene::analysis::util::ResourceLoader & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_inform_d6a4bc97], a0.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace compound {
          static PyObject *t_DictionaryCompoundWordTokenFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_DictionaryCompoundWordTokenFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_DictionaryCompoundWordTokenFilterFactory_init_(t_DictionaryCompoundWordTokenFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_DictionaryCompoundWordTokenFilterFactory_create(t_DictionaryCompoundWordTokenFilterFactory *self, PyObject *args);
          static PyObject *t_DictionaryCompoundWordTokenFilterFactory_inform(t_DictionaryCompoundWordTokenFilterFactory *self, PyObject *arg);

          static PyMethodDef t_DictionaryCompoundWordTokenFilterFactory__methods_[] = {
            DECLARE_METHOD(t_DictionaryCompoundWordTokenFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_DictionaryCompoundWordTokenFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_DictionaryCompoundWordTokenFilterFactory, create, METH_VARARGS),
            DECLARE_METHOD(t_DictionaryCompoundWordTokenFilterFactory, inform, METH_O),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(DictionaryCompoundWordTokenFilterFactory, t_DictionaryCompoundWordTokenFilterFactory, ::org::apache::lucene::analysis::util::TokenFilterFactory, DictionaryCompoundWordTokenFilterFactory, t_DictionaryCompoundWordTokenFilterFactory_init_, 0, 0, 0, 0, 0);

          void t_DictionaryCompoundWordTokenFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(DictionaryCompoundWordTokenFilterFactory), module, "DictionaryCompoundWordTokenFilterFactory", 0);
          }

          void t_DictionaryCompoundWordTokenFilterFactory::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(DictionaryCompoundWordTokenFilterFactory).tp_dict, "class_", make_descriptor(DictionaryCompoundWordTokenFilterFactory::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(DictionaryCompoundWordTokenFilterFactory).tp_dict, "wrapfn_", make_descriptor(t_DictionaryCompoundWordTokenFilterFactory::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(DictionaryCompoundWordTokenFilterFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_DictionaryCompoundWordTokenFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, DictionaryCompoundWordTokenFilterFactory::initializeClass, 1)))
              return NULL;
            return t_DictionaryCompoundWordTokenFilterFactory::wrap_Object(DictionaryCompoundWordTokenFilterFactory(((t_DictionaryCompoundWordTokenFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_DictionaryCompoundWordTokenFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, DictionaryCompoundWordTokenFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_DictionaryCompoundWordTokenFilterFactory_init_(t_DictionaryCompoundWordTokenFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            DictionaryCompoundWordTokenFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = DictionaryCompoundWordTokenFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_DictionaryCompoundWordTokenFilterFactory_create(t_DictionaryCompoundWordTokenFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::TokenStream result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::t_TokenStream::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(DictionaryCompoundWordTokenFilterFactory), (PyObject *) self, "create", args, 2);
          }

          static PyObject *t_DictionaryCompoundWordTokenFilterFactory_inform(t_DictionaryCompoundWordTokenFilterFactory *self, PyObject *arg)
          {
            ::org::apache::lucene::analysis::util::ResourceLoader a0((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::analysis::util::ResourceLoader::initializeClass, &a0))
            {
              OBJ_CALL(self->object.inform(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "inform", arg);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/io/Closeable.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/util/AttributeFactory.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {

        ::java::lang::Class *TokenStream::class$ = NULL;
        jmethodID *TokenStream::mids$ = NULL;
        bool TokenStream::live$ = false;
        ::org::apache::lucene::util::AttributeFactory *TokenStream::DEFAULT_TOKEN_ATTRIBUTE_FACTORY = NULL;

        jclass TokenStream::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/TokenStream");

            mids$ = new jmethodID[max_mid];
            mids$[mid_close_54c6a166] = env->getMethodID(cls, "close", "()V");
            mids$[mid_end_54c6a166] = env->getMethodID(cls, "end", "()V");
            mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");
            mids$[mid_reset_54c6a166] = env->getMethodID(cls, "reset", "()V");

            class$ = (::java::lang::Class *) new JObject(cls);
            cls = (jclass) class$->this$;

            DEFAULT_TOKEN_ATTRIBUTE_FACTORY = new ::org::apache::lucene::util::AttributeFactory(env->getStaticObjectField(cls, "DEFAULT_TOKEN_ATTRIBUTE_FACTORY", "Lorg/apache/lucene/util/AttributeFactory;"));
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        void TokenStream::close() const
        {
          env->callVoidMethod(this$, mids$[mid_close_54c6a166]);
        }

        void TokenStream::end() const
        {
          env->callVoidMethod(this$, mids$[mid_end_54c6a166]);
        }

        jboolean TokenStream::incrementToken() const
        {
          return env->callBooleanMethod(this$, mids$[mid_incrementToken_54c6a16a]);
        }

        void TokenStream::reset() const
        {
          env->callVoidMethod(this$, mids$[mid_reset_54c6a166]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        static PyObject *t_TokenStream_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_TokenStream_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_TokenStream_close(t_TokenStream *self);
        static PyObject *t_TokenStream_end(t_TokenStream *self);
        static PyObject *t_TokenStream_incrementToken(t_TokenStream *self);
        static PyObject *t_TokenStream_reset(t_TokenStream *self);

        static PyMethodDef t_TokenStream__methods_[] = {
          DECLARE_METHOD(t_TokenStream, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_TokenStream, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_TokenStream, close, METH_NOARGS),
          DECLARE_METHOD(t_TokenStream, end, METH_NOARGS),
          DECLARE_METHOD(t_TokenStream, incrementToken, METH_NOARGS),
          DECLARE_METHOD(t_TokenStream, reset, METH_NOARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(TokenStream, t_TokenStream, ::org::apache::lucene::util::AttributeSource, TokenStream, abstract_init, 0, 0, 0, 0, 0);

        void t_TokenStream::install(PyObject *module)
        {
          installType(&PY_TYPE(TokenStream), module, "TokenStream", 0);
        }

        void t_TokenStream::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(TokenStream).tp_dict, "class_", make_descriptor(TokenStream::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(TokenStream).tp_dict, "wrapfn_", make_descriptor(t_TokenStream::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(TokenStream).tp_dict, "boxfn_", make_descriptor(boxObject));
          env->getClass(TokenStream::initializeClass);
          PyDict_SetItemString(PY_TYPE(TokenStream).tp_dict, "DEFAULT_TOKEN_ATTRIBUTE_FACTORY", make_descriptor(::org::apache::lucene::util::t_AttributeFactory::wrap_Object(*TokenStream::DEFAULT_TOKEN_ATTRIBUTE_FACTORY)));
        }

        static PyObject *t_TokenStream_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, TokenStream::initializeClass, 1)))
            return NULL;
          return t_TokenStream::wrap_Object(TokenStream(((t_TokenStream *) arg)->object.this$));
        }
        static PyObject *t_TokenStream_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, TokenStream::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_TokenStream_close(t_TokenStream *self)
        {
          OBJ_CALL(self->object.close());
          Py_RETURN_NONE;
        }

        static PyObject *t_TokenStream_end(t_TokenStream *self)
        {
          OBJ_CALL(self->object.end());
          Py_RETURN_NONE;
        }

        static PyObject *t_TokenStream_incrementToken(t_TokenStream *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.incrementToken());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_TokenStream_reset(t_TokenStream *self)
        {
          OBJ_CALL(self->object.reset());
          Py_RETURN_NONE;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/standard/nodes/RegexpQueryNode.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/TextableQueryNode.h"
#include "org/apache/lucene/queryparser/flexible/core/parser/EscapeQuerySyntax.h"
#include "java/lang/CloneNotSupportedException.h"
#include "java/lang/CharSequence.h"
#include "java/lang/String.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/FieldableNode.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace nodes {

              ::java::lang::Class *RegexpQueryNode::class$ = NULL;
              jmethodID *RegexpQueryNode::mids$ = NULL;
              bool RegexpQueryNode::live$ = false;

              jclass RegexpQueryNode::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/standard/nodes/RegexpQueryNode");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_ddd81d4e] = env->getMethodID(cls, "<init>", "(Ljava/lang/CharSequence;Ljava/lang/CharSequence;II)V");
                  mids$[mid_cloneTree_6f121059] = env->getMethodID(cls, "cloneTree", "()Lorg/apache/lucene/queryparser/flexible/standard/nodes/RegexpQueryNode;");
                  mids$[mid_getField_e0adba2f] = env->getMethodID(cls, "getField", "()Ljava/lang/CharSequence;");
                  mids$[mid_getFieldAsString_14c7b5c5] = env->getMethodID(cls, "getFieldAsString", "()Ljava/lang/String;");
                  mids$[mid_getText_e0adba2f] = env->getMethodID(cls, "getText", "()Ljava/lang/CharSequence;");
                  mids$[mid_setField_a8afc64a] = env->getMethodID(cls, "setField", "(Ljava/lang/CharSequence;)V");
                  mids$[mid_setText_a8afc64a] = env->getMethodID(cls, "setText", "(Ljava/lang/CharSequence;)V");
                  mids$[mid_textToBytesRef_4ae19461] = env->getMethodID(cls, "textToBytesRef", "()Lorg/apache/lucene/util/BytesRef;");
                  mids$[mid_toQueryString_99b8dfe1] = env->getMethodID(cls, "toQueryString", "(Lorg/apache/lucene/queryparser/flexible/core/parser/EscapeQuerySyntax;)Ljava/lang/CharSequence;");
                  mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              RegexpQueryNode::RegexpQueryNode(const ::java::lang::CharSequence & a0, const ::java::lang::CharSequence & a1, jint a2, jint a3) : ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNodeImpl(env->newObject(initializeClass, &mids$, mid_init$_ddd81d4e, a0.this$, a1.this$, a2, a3)) {}

              RegexpQueryNode RegexpQueryNode::cloneTree() const
              {
                return RegexpQueryNode(env->callObjectMethod(this$, mids$[mid_cloneTree_6f121059]));
              }

              ::java::lang::CharSequence RegexpQueryNode::getField() const
              {
                return ::java::lang::CharSequence(env->callObjectMethod(this$, mids$[mid_getField_e0adba2f]));
              }

              ::java::lang::String RegexpQueryNode::getFieldAsString() const
              {
                return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getFieldAsString_14c7b5c5]));
              }

              ::java::lang::CharSequence RegexpQueryNode::getText() const
              {
                return ::java::lang::CharSequence(env->callObjectMethod(this$, mids$[mid_getText_e0adba2f]));
              }

              void RegexpQueryNode::setField(const ::java::lang::CharSequence & a0) const
              {
                env->callVoidMethod(this$, mids$[mid_setField_a8afc64a], a0.this$);
              }

              void RegexpQueryNode::setText(const ::java::lang::CharSequence & a0) const
              {
                env->callVoidMethod(this$, mids$[mid_setText_a8afc64a], a0.this$);
              }

              ::org::apache::lucene::util::BytesRef RegexpQueryNode::textToBytesRef() const
              {
                return ::org::apache::lucene::util::BytesRef(env->callObjectMethod(this$, mids$[mid_textToBytesRef_4ae19461]));
              }

              ::java::lang::CharSequence RegexpQueryNode::toQueryString(const ::org::apache::lucene::queryparser::flexible::core::parser::EscapeQuerySyntax & a0) const
              {
                return ::java::lang::CharSequence(env->callObjectMethod(this$, mids$[mid_toQueryString_99b8dfe1], a0.this$));
              }

              ::java::lang::String RegexpQueryNode::toString() const
              {
                return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace nodes {
              static PyObject *t_RegexpQueryNode_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_RegexpQueryNode_instance_(PyTypeObject *type, PyObject *arg);
              static int t_RegexpQueryNode_init_(t_RegexpQueryNode *self, PyObject *args, PyObject *kwds);
              static PyObject *t_RegexpQueryNode_cloneTree(t_RegexpQueryNode *self, PyObject *args);
              static PyObject *t_RegexpQueryNode_getField(t_RegexpQueryNode *self);
              static PyObject *t_RegexpQueryNode_getFieldAsString(t_RegexpQueryNode *self);
              static PyObject *t_RegexpQueryNode_getText(t_RegexpQueryNode *self);
              static PyObject *t_RegexpQueryNode_setField(t_RegexpQueryNode *self, PyObject *arg);
              static PyObject *t_RegexpQueryNode_setText(t_RegexpQueryNode *self, PyObject *arg);
              static PyObject *t_RegexpQueryNode_textToBytesRef(t_RegexpQueryNode *self);
              static PyObject *t_RegexpQueryNode_toQueryString(t_RegexpQueryNode *self, PyObject *args);
              static PyObject *t_RegexpQueryNode_toString(t_RegexpQueryNode *self, PyObject *args);
              static PyObject *t_RegexpQueryNode_get__field(t_RegexpQueryNode *self, void *data);
              static int t_RegexpQueryNode_set__field(t_RegexpQueryNode *self, PyObject *arg, void *data);
              static PyObject *t_RegexpQueryNode_get__fieldAsString(t_RegexpQueryNode *self, void *data);
              static PyObject *t_RegexpQueryNode_get__text(t_RegexpQueryNode *self, void *data);
              static int t_RegexpQueryNode_set__text(t_RegexpQueryNode *self, PyObject *arg, void *data);
              static PyGetSetDef t_RegexpQueryNode__fields_[] = {
                DECLARE_GETSET_FIELD(t_RegexpQueryNode, field),
                DECLARE_GET_FIELD(t_RegexpQueryNode, fieldAsString),
                DECLARE_GETSET_FIELD(t_RegexpQueryNode, text),
                { NULL, NULL, NULL, NULL, NULL }
              };

              static PyMethodDef t_RegexpQueryNode__methods_[] = {
                DECLARE_METHOD(t_RegexpQueryNode, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_RegexpQueryNode, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_RegexpQueryNode, cloneTree, METH_VARARGS),
                DECLARE_METHOD(t_RegexpQueryNode, getField, METH_NOARGS),
                DECLARE_METHOD(t_RegexpQueryNode, getFieldAsString, METH_NOARGS),
                DECLARE_METHOD(t_RegexpQueryNode, getText, METH_NOARGS),
                DECLARE_METHOD(t_RegexpQueryNode, setField, METH_O),
                DECLARE_METHOD(t_RegexpQueryNode, setText, METH_O),
                DECLARE_METHOD(t_RegexpQueryNode, textToBytesRef, METH_NOARGS),
                DECLARE_METHOD(t_RegexpQueryNode, toQueryString, METH_VARARGS),
                DECLARE_METHOD(t_RegexpQueryNode, toString, METH_VARARGS),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(RegexpQueryNode, t_RegexpQueryNode, ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNodeImpl, RegexpQueryNode, t_RegexpQueryNode_init_, 0, 0, t_RegexpQueryNode__fields_, 0, 0);

              void t_RegexpQueryNode::install(PyObject *module)
              {
                installType(&PY_TYPE(RegexpQueryNode), module, "RegexpQueryNode", 0);
              }

              void t_RegexpQueryNode::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(RegexpQueryNode).tp_dict, "class_", make_descriptor(RegexpQueryNode::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(RegexpQueryNode).tp_dict, "wrapfn_", make_descriptor(t_RegexpQueryNode::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(RegexpQueryNode).tp_dict, "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_RegexpQueryNode_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, RegexpQueryNode::initializeClass, 1)))
                  return NULL;
                return t_RegexpQueryNode::wrap_Object(RegexpQueryNode(((t_RegexpQueryNode *) arg)->object.this$));
              }
              static PyObject *t_RegexpQueryNode_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, RegexpQueryNode::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_RegexpQueryNode_init_(t_RegexpQueryNode *self, PyObject *args, PyObject *kwds)
              {
                ::java::lang::CharSequence a0((jobject) NULL);
                ::java::lang::CharSequence a1((jobject) NULL);
                jint a2;
                jint a3;
                RegexpQueryNode object((jobject) NULL);

                if (!parseArgs(args, "OOII", &::java::lang::PY_TYPE(CharSequence), &::java::lang::PY_TYPE(CharSequence), &a0, &a1, &a2, &a3))
                {
                  INT_CALL(object = RegexpQueryNode(a0, a1, a2, a3));
                  self->object = object;
                }
                else
                {
                  PyErr_SetArgsError((PyObject *) self, "__init__", args);
                  return -1;
                }

                return 0;
              }

              static PyObject *t_RegexpQueryNode_cloneTree(t_RegexpQueryNode *self, PyObject *args)
              {
                RegexpQueryNode result((jobject) NULL);

                if (!parseArgs(args, ""))
                {
                  OBJ_CALL(result = self->object.cloneTree());
                  return t_RegexpQueryNode::wrap_Object(result);
                }

                return callSuper(&PY_TYPE(RegexpQueryNode), (PyObject *) self, "cloneTree", args, 2);
              }

              static PyObject *t_RegexpQueryNode_getField(t_RegexpQueryNode *self)
              {
                ::java::lang::CharSequence result((jobject) NULL);
                OBJ_CALL(result = self->object.getField());
                return ::java::lang::t_CharSequence::wrap_Object(result);
              }

              static PyObject *t_RegexpQueryNode_getFieldAsString(t_RegexpQueryNode *self)
              {
                ::java::lang::String result((jobject) NULL);
                OBJ_CALL(result = self->object.getFieldAsString());
                return j2p(result);
              }

              static PyObject *t_RegexpQueryNode_getText(t_RegexpQueryNode *self)
              {
                ::java::lang::CharSequence result((jobject) NULL);
                OBJ_CALL(result = self->object.getText());
                return ::java::lang::t_CharSequence::wrap_Object(result);
              }

              static PyObject *t_RegexpQueryNode_setField(t_RegexpQueryNode *self, PyObject *arg)
              {
                ::java::lang::CharSequence a0((jobject) NULL);

                if (!parseArg(arg, "O", &::java::lang::PY_TYPE(CharSequence), &a0))
                {
                  OBJ_CALL(self->object.setField(a0));
                  Py_RETURN_NONE;
                }

                PyErr_SetArgsError((PyObject *) self, "setField", arg);
                return NULL;
              }

              static PyObject *t_RegexpQueryNode_setText(t_RegexpQueryNode *self, PyObject *arg)
              {
                ::java::lang::CharSequence a0((jobject) NULL);

                if (!parseArg(arg, "O", &::java::lang::PY_TYPE(CharSequence), &a0))
                {
                  OBJ_CALL(self->object.setText(a0));
                  Py_RETURN_NONE;
                }

                PyErr_SetArgsError((PyObject *) self, "setText", arg);
                return NULL;
              }

              static PyObject *t_RegexpQueryNode_textToBytesRef(t_RegexpQueryNode *self)
              {
                ::org::apache::lucene::util::BytesRef result((jobject) NULL);
                OBJ_CALL(result = self->object.textToBytesRef());
                return ::org::apache::lucene::util::t_BytesRef::wrap_Object(result);
              }

              static PyObject *t_RegexpQueryNode_toQueryString(t_RegexpQueryNode *self, PyObject *args)
              {
                ::org::apache::lucene::queryparser::flexible::core::parser::EscapeQuerySyntax a0((jobject) NULL);
                ::java::lang::CharSequence result((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::queryparser::flexible::core::parser::EscapeQuerySyntax::initializeClass, &a0))
                {
                  OBJ_CALL(result = self->object.toQueryString(a0));
                  return ::java::lang::t_CharSequence::wrap_Object(result);
                }

                return callSuper(&PY_TYPE(RegexpQueryNode), (PyObject *) self, "toQueryString", args, 2);
              }

              static PyObject *t_RegexpQueryNode_toString(t_RegexpQueryNode *self, PyObject *args)
              {
                ::java::lang::String result((jobject) NULL);

                if (!parseArgs(args, ""))
                {
                  OBJ_CALL(result = self->object.toString());
                  return j2p(result);
                }

                return callSuper(&PY_TYPE(RegexpQueryNode), (PyObject *) self, "toString", args, 2);
              }

              static PyObject *t_RegexpQueryNode_get__field(t_RegexpQueryNode *self, void *data)
              {
                ::java::lang::CharSequence value((jobject) NULL);
                OBJ_CALL(value = self->object.getField());
                return ::java::lang::t_CharSequence::wrap_Object(value);
              }
              static int t_RegexpQueryNode_set__field(t_RegexpQueryNode *self, PyObject *arg, void *data)
              {
                {
                  ::java::lang::CharSequence value((jobject) NULL);
                  if (!parseArg(arg, "O", &::java::lang::PY_TYPE(CharSequence), &value))
                  {
                    INT_CALL(self->object.setField(value));
                    return 0;
                  }
                }
                PyErr_SetArgsError((PyObject *) self, "field", arg);
                return -1;
              }

              static PyObject *t_RegexpQueryNode_get__fieldAsString(t_RegexpQueryNode *self, void *data)
              {
                ::java::lang::String value((jobject) NULL);
                OBJ_CALL(value = self->object.getFieldAsString());
                return j2p(value);
              }

              static PyObject *t_RegexpQueryNode_get__text(t_RegexpQueryNode *self, void *data)
              {
                ::java::lang::CharSequence value((jobject) NULL);
                OBJ_CALL(value = self->object.getText());
                return ::java::lang::t_CharSequence::wrap_Object(value);
              }
              static int t_RegexpQueryNode_set__text(t_RegexpQueryNode *self, PyObject *arg, void *data)
              {
                {
                  ::java::lang::CharSequence value((jobject) NULL);
                  if (!parseArg(arg, "O", &::java::lang::PY_TYPE(CharSequence), &value))
                  {
                    INT_CALL(self->object.setText(value));
                    return 0;
                  }
                }
                PyErr_SetArgsError((PyObject *) self, "text", arg);
                return -1;
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/TermRangeTermsEnum.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "org/apache/lucene/index/TermsEnum.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *TermRangeTermsEnum::class$ = NULL;
        jmethodID *TermRangeTermsEnum::mids$ = NULL;
        bool TermRangeTermsEnum::live$ = false;

        jclass TermRangeTermsEnum::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/TermRangeTermsEnum");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_cf65bdfc] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/TermsEnum;Lorg/apache/lucene/util/BytesRef;Lorg/apache/lucene/util/BytesRef;ZZ)V");
            mids$[mid_accept_30bc08e1] = env->getMethodID(cls, "accept", "(Lorg/apache/lucene/util/BytesRef;)Lorg/apache/lucene/index/FilteredTermsEnum$AcceptStatus;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        TermRangeTermsEnum::TermRangeTermsEnum(const ::org::apache::lucene::index::TermsEnum & a0, const ::org::apache::lucene::util::BytesRef & a1, const ::org::apache::lucene::util::BytesRef & a2, jboolean a3, jboolean a4) : ::org::apache::lucene::index::FilteredTermsEnum(env->newObject(initializeClass, &mids$, mid_init$_cf65bdfc, a0.this$, a1.this$, a2.this$, a3, a4)) {}
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_TermRangeTermsEnum_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_TermRangeTermsEnum_instance_(PyTypeObject *type, PyObject *arg);
        static int t_TermRangeTermsEnum_init_(t_TermRangeTermsEnum *self, PyObject *args, PyObject *kwds);

        static PyMethodDef t_TermRangeTermsEnum__methods_[] = {
          DECLARE_METHOD(t_TermRangeTermsEnum, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_TermRangeTermsEnum, instance_, METH_O | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(TermRangeTermsEnum, t_TermRangeTermsEnum, ::org::apache::lucene::index::FilteredTermsEnum, TermRangeTermsEnum, t_TermRangeTermsEnum_init_, 0, 0, 0, 0, 0);

        void t_TermRangeTermsEnum::install(PyObject *module)
        {
          installType(&PY_TYPE(TermRangeTermsEnum), module, "TermRangeTermsEnum", 0);
        }

        void t_TermRangeTermsEnum::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(TermRangeTermsEnum).tp_dict, "class_", make_descriptor(TermRangeTermsEnum::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(TermRangeTermsEnum).tp_dict, "wrapfn_", make_descriptor(t_TermRangeTermsEnum::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(TermRangeTermsEnum).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_TermRangeTermsEnum_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, TermRangeTermsEnum::initializeClass, 1)))
            return NULL;
          return t_TermRangeTermsEnum::wrap_Object(TermRangeTermsEnum(((t_TermRangeTermsEnum *) arg)->object.this$));
        }
        static PyObject *t_TermRangeTermsEnum_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, TermRangeTermsEnum::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_TermRangeTermsEnum_init_(t_TermRangeTermsEnum *self, PyObject *args, PyObject *kwds)
        {
          ::org::apache::lucene::index::TermsEnum a0((jobject) NULL);
          ::org::apache::lucene::util::BytesRef a1((jobject) NULL);
          ::org::apache::lucene::util::BytesRef a2((jobject) NULL);
          jboolean a3;
          jboolean a4;
          TermRangeTermsEnum object((jobject) NULL);

          if (!parseArgs(args, "kkkZZ", ::org::apache::lucene::index::TermsEnum::initializeClass, ::org::apache::lucene::util::BytesRef::initializeClass, ::org::apache::lucene::util::BytesRef::initializeClass, &a0, &a1, &a2, &a3, &a4))
          {
            INT_CALL(object = TermRangeTermsEnum(a0, a1, a2, a3, a4));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/standard/config/FieldBoostMapFCListener.h"
#include "org/apache/lucene/queryparser/flexible/core/config/QueryConfigHandler.h"
#include "org/apache/lucene/queryparser/flexible/core/config/FieldConfig.h"
#include "org/apache/lucene/queryparser/flexible/core/config/FieldConfigListener.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace config {

              ::java::lang::Class *FieldBoostMapFCListener::class$ = NULL;
              jmethodID *FieldBoostMapFCListener::mids$ = NULL;
              bool FieldBoostMapFCListener::live$ = false;

              jclass FieldBoostMapFCListener::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/standard/config/FieldBoostMapFCListener");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_0b1f7132] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/queryparser/flexible/core/config/QueryConfigHandler;)V");
                  mids$[mid_buildFieldConfig_aaab7c6b] = env->getMethodID(cls, "buildFieldConfig", "(Lorg/apache/lucene/queryparser/flexible/core/config/FieldConfig;)V");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              FieldBoostMapFCListener::FieldBoostMapFCListener(const ::org::apache::lucene::queryparser::flexible::core::config::QueryConfigHandler & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_0b1f7132, a0.this$)) {}

              void FieldBoostMapFCListener::buildFieldConfig(const ::org::apache::lucene::queryparser::flexible::core::config::FieldConfig & a0) const
              {
                env->callVoidMethod(this$, mids$[mid_buildFieldConfig_aaab7c6b], a0.this$);
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace config {
              static PyObject *t_FieldBoostMapFCListener_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_FieldBoostMapFCListener_instance_(PyTypeObject *type, PyObject *arg);
              static int t_FieldBoostMapFCListener_init_(t_FieldBoostMapFCListener *self, PyObject *args, PyObject *kwds);
              static PyObject *t_FieldBoostMapFCListener_buildFieldConfig(t_FieldBoostMapFCListener *self, PyObject *arg);

              static PyMethodDef t_FieldBoostMapFCListener__methods_[] = {
                DECLARE_METHOD(t_FieldBoostMapFCListener, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_FieldBoostMapFCListener, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_FieldBoostMapFCListener, buildFieldConfig, METH_O),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(FieldBoostMapFCListener, t_FieldBoostMapFCListener, ::java::lang::Object, FieldBoostMapFCListener, t_FieldBoostMapFCListener_init_, 0, 0, 0, 0, 0);

              void t_FieldBoostMapFCListener::install(PyObject *module)
              {
                installType(&PY_TYPE(FieldBoostMapFCListener), module, "FieldBoostMapFCListener", 0);
              }

              void t_FieldBoostMapFCListener::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(FieldBoostMapFCListener).tp_dict, "class_", make_descriptor(FieldBoostMapFCListener::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(FieldBoostMapFCListener).tp_dict, "wrapfn_", make_descriptor(t_FieldBoostMapFCListener::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(FieldBoostMapFCListener).tp_dict, "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_FieldBoostMapFCListener_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, FieldBoostMapFCListener::initializeClass, 1)))
                  return NULL;
                return t_FieldBoostMapFCListener::wrap_Object(FieldBoostMapFCListener(((t_FieldBoostMapFCListener *) arg)->object.this$));
              }
              static PyObject *t_FieldBoostMapFCListener_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, FieldBoostMapFCListener::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_FieldBoostMapFCListener_init_(t_FieldBoostMapFCListener *self, PyObject *args, PyObject *kwds)
              {
                ::org::apache::lucene::queryparser::flexible::core::config::QueryConfigHandler a0((jobject) NULL);
                FieldBoostMapFCListener object((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::queryparser::flexible::core::config::QueryConfigHandler::initializeClass, &a0))
                {
                  INT_CALL(object = FieldBoostMapFCListener(a0));
                  self->object = object;
                }
                else
                {
                  PyErr_SetArgsError((PyObject *) self, "__init__", args);
                  return -1;
                }

                return 0;
              }

              static PyObject *t_FieldBoostMapFCListener_buildFieldConfig(t_FieldBoostMapFCListener *self, PyObject *arg)
              {
                ::org::apache::lucene::queryparser::flexible::core::config::FieldConfig a0((jobject) NULL);

                if (!parseArg(arg, "k", ::org::apache::lucene::queryparser::flexible::core::config::FieldConfig::initializeClass, &a0))
                {
                  OBJ_CALL(self->object.buildFieldConfig(a0));
                  Py_RETURN_NONE;
                }

                PyErr_SetArgsError((PyObject *) self, "buildFieldConfig", arg);
                return NULL;
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/cn/ChineseTokenizer.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/util/AttributeFactory.h"
#include "java/io/Reader.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace cn {

          ::java::lang::Class *ChineseTokenizer::class$ = NULL;
          jmethodID *ChineseTokenizer::mids$ = NULL;
          bool ChineseTokenizer::live$ = false;

          jclass ChineseTokenizer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/cn/ChineseTokenizer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_cf2e3c10] = env->getMethodID(cls, "<init>", "(Ljava/io/Reader;)V");
              mids$[mid_init$_5877b8f0] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/AttributeFactory;Ljava/io/Reader;)V");
              mids$[mid_end_54c6a166] = env->getMethodID(cls, "end", "()V");
              mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");
              mids$[mid_reset_54c6a166] = env->getMethodID(cls, "reset", "()V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ChineseTokenizer::ChineseTokenizer(const ::java::io::Reader & a0) : ::org::apache::lucene::analysis::Tokenizer(env->newObject(initializeClass, &mids$, mid_init$_cf2e3c10, a0.this$)) {}

          ChineseTokenizer::ChineseTokenizer(const ::org::apache::lucene::util::AttributeFactory & a0, const ::java::io::Reader & a1) : ::org::apache::lucene::analysis::Tokenizer(env->newObject(initializeClass, &mids$, mid_init$_5877b8f0, a0.this$, a1.this$)) {}

          void ChineseTokenizer::end() const
          {
            env->callVoidMethod(this$, mids$[mid_end_54c6a166]);
          }

          jboolean ChineseTokenizer::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_54c6a16a]);
          }

          void ChineseTokenizer::reset() const
          {
            env->callVoidMethod(this$, mids$[mid_reset_54c6a166]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace cn {
          static PyObject *t_ChineseTokenizer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_ChineseTokenizer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_ChineseTokenizer_init_(t_ChineseTokenizer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_ChineseTokenizer_end(t_ChineseTokenizer *self, PyObject *args);
          static PyObject *t_ChineseTokenizer_incrementToken(t_ChineseTokenizer *self, PyObject *args);
          static PyObject *t_ChineseTokenizer_reset(t_ChineseTokenizer *self, PyObject *args);

          static PyMethodDef t_ChineseTokenizer__methods_[] = {
            DECLARE_METHOD(t_ChineseTokenizer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ChineseTokenizer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ChineseTokenizer, end, METH_VARARGS),
            DECLARE_METHOD(t_ChineseTokenizer, incrementToken, METH_VARARGS),
            DECLARE_METHOD(t_ChineseTokenizer, reset, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(ChineseTokenizer, t_ChineseTokenizer, ::org::apache::lucene::analysis::Tokenizer, ChineseTokenizer, t_ChineseTokenizer_init_, 0, 0, 0, 0, 0);

          void t_ChineseTokenizer::install(PyObject *module)
          {
            installType(&PY_TYPE(ChineseTokenizer), module, "ChineseTokenizer", 0);
          }

          void t_ChineseTokenizer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(ChineseTokenizer).tp_dict, "class_", make_descriptor(ChineseTokenizer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(ChineseTokenizer).tp_dict, "wrapfn_", make_descriptor(t_ChineseTokenizer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(ChineseTokenizer).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_ChineseTokenizer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, ChineseTokenizer::initializeClass, 1)))
              return NULL;
            return t_ChineseTokenizer::wrap_Object(ChineseTokenizer(((t_ChineseTokenizer *) arg)->object.this$));
          }
          static PyObject *t_ChineseTokenizer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, ChineseTokenizer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_ChineseTokenizer_init_(t_ChineseTokenizer *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::java::io::Reader a0((jobject) NULL);
                ChineseTokenizer object((jobject) NULL);

                if (!parseArgs(args, "k", ::java::io::Reader::initializeClass, &a0))
                {
                  INT_CALL(object = ChineseTokenizer(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 2:
              {
                ::org::apache::lucene::util::AttributeFactory a0((jobject) NULL);
                ::java::io::Reader a1((jobject) NULL);
                ChineseTokenizer object((jobject) NULL);

                if (!parseArgs(args, "kk", ::org::apache::lucene::util::AttributeFactory::initializeClass, ::java::io::Reader::initializeClass, &a0, &a1))
                {
                  INT_CALL(object = ChineseTokenizer(a0, a1));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_ChineseTokenizer_end(t_ChineseTokenizer *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.end());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(ChineseTokenizer), (PyObject *) self, "end", args, 2);
          }

          static PyObject *t_ChineseTokenizer_incrementToken(t_ChineseTokenizer *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(ChineseTokenizer), (PyObject *) self, "incrementToken", args, 2);
          }

          static PyObject *t_ChineseTokenizer_reset(t_ChineseTokenizer *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.reset());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(ChineseTokenizer), (PyObject *) self, "reset", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/hi/HindiStemmer.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace hi {

          ::java::lang::Class *HindiStemmer::class$ = NULL;
          jmethodID *HindiStemmer::mids$ = NULL;
          bool HindiStemmer::live$ = false;

          jclass HindiStemmer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/hi/HindiStemmer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_stem_ec6430eb] = env->getMethodID(cls, "stem", "([CI)I");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          HindiStemmer::HindiStemmer() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          jint HindiStemmer::stem(const JArray< jchar > & a0, jint a1) const
          {
            return env->callIntMethod(this$, mids$[mid_stem_ec6430eb], a0.this$, a1);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace hi {
          static PyObject *t_HindiStemmer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_HindiStemmer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_HindiStemmer_init_(t_HindiStemmer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_HindiStemmer_stem(t_HindiStemmer *self, PyObject *args);

          static PyMethodDef t_HindiStemmer__methods_[] = {
            DECLARE_METHOD(t_HindiStemmer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_HindiStemmer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_HindiStemmer, stem, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(HindiStemmer, t_HindiStemmer, ::java::lang::Object, HindiStemmer, t_HindiStemmer_init_, 0, 0, 0, 0, 0);

          void t_HindiStemmer::install(PyObject *module)
          {
            installType(&PY_TYPE(HindiStemmer), module, "HindiStemmer", 0);
          }

          void t_HindiStemmer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(HindiStemmer).tp_dict, "class_", make_descriptor(HindiStemmer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(HindiStemmer).tp_dict, "wrapfn_", make_descriptor(t_HindiStemmer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(HindiStemmer).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_HindiStemmer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, HindiStemmer::initializeClass, 1)))
              return NULL;
            return t_HindiStemmer::wrap_Object(HindiStemmer(((t_HindiStemmer *) arg)->object.this$));
          }
          static PyObject *t_HindiStemmer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, HindiStemmer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_HindiStemmer_init_(t_HindiStemmer *self, PyObject *args, PyObject *kwds)
          {
            HindiStemmer object((jobject) NULL);

            INT_CALL(object = HindiStemmer());
            self->object = object;

            return 0;
          }

          static PyObject *t_HindiStemmer_stem(t_HindiStemmer *self, PyObject *args)
          {
            JArray< jchar > a0((jobject) NULL);
            jint a1;
            jint result;

            if (!parseArgs(args, "[CI", &a0, &a1))
            {
              OBJ_CALL(result = self->object.stem(a0, a1));
              return PyInt_FromLong((long) result);
            }

            PyErr_SetArgsError((PyObject *) self, "stem", args);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/core/messages/QueryParserMessages.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace messages {

              ::java::lang::Class *QueryParserMessages::class$ = NULL;
              jmethodID *QueryParserMessages::mids$ = NULL;
              bool QueryParserMessages::live$ = false;
              ::java::lang::String *QueryParserMessages::COULD_NOT_PARSE_NUMBER = NULL;
              ::java::lang::String *QueryParserMessages::EMPTY_MESSAGE = NULL;
              ::java::lang::String *QueryParserMessages::INVALID_SYNTAX = NULL;
              ::java::lang::String *QueryParserMessages::INVALID_SYNTAX_CANNOT_PARSE = NULL;
              ::java::lang::String *QueryParserMessages::INVALID_SYNTAX_ESCAPE_CHARACTER = NULL;
              ::java::lang::String *QueryParserMessages::INVALID_SYNTAX_ESCAPE_NONE_HEX_UNICODE = NULL;
              ::java::lang::String *QueryParserMessages::INVALID_SYNTAX_ESCAPE_UNICODE_TRUNCATION = NULL;
              ::java::lang::String *QueryParserMessages::INVALID_SYNTAX_FUZZY_EDITS = NULL;
              ::java::lang::String *QueryParserMessages::INVALID_SYNTAX_FUZZY_LIMITS = NULL;
              ::java::lang::String *QueryParserMessages::LEADING_WILDCARD_NOT_ALLOWED = NULL;
              ::java::lang::String *QueryParserMessages::LUCENE_QUERY_CONVERSION_ERROR = NULL;
              ::java::lang::String *QueryParserMessages::NODE_ACTION_NOT_SUPPORTED = NULL;
              ::java::lang::String *QueryParserMessages::NUMBER_CLASS_NOT_SUPPORTED_BY_NUMERIC_RANGE_QUERY = NULL;
              ::java::lang::String *QueryParserMessages::NUMERIC_CANNOT_BE_EMPTY = NULL;
              ::java::lang::String *QueryParserMessages::PARAMETER_VALUE_NOT_SUPPORTED = NULL;
              ::java::lang::String *QueryParserMessages::TOO_MANY_BOOLEAN_CLAUSES = NULL;
              ::java::lang::String *QueryParserMessages::UNSUPPORTED_NUMERIC_DATA_TYPE = NULL;
              ::java::lang::String *QueryParserMessages::WILDCARD_NOT_SUPPORTED = NULL;

              jclass QueryParserMessages::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/core/messages/QueryParserMessages");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  cls = (jclass) class$->this$;

                  COULD_NOT_PARSE_NUMBER = new ::java::lang::String(env->getStaticObjectField(cls, "COULD_NOT_PARSE_NUMBER", "Ljava/lang/String;"));
                  EMPTY_MESSAGE = new ::java::lang::String(env->getStaticObjectField(cls, "EMPTY_MESSAGE", "Ljava/lang/String;"));
                  INVALID_SYNTAX = new ::java::lang::String(env->getStaticObjectField(cls, "INVALID_SYNTAX", "Ljava/lang/String;"));
                  INVALID_SYNTAX_CANNOT_PARSE = new ::java::lang::String(env->getStaticObjectField(cls, "INVALID_SYNTAX_CANNOT_PARSE", "Ljava/lang/String;"));
                  INVALID_SYNTAX_ESCAPE_CHARACTER = new ::java::lang::String(env->getStaticObjectField(cls, "INVALID_SYNTAX_ESCAPE_CHARACTER", "Ljava/lang/String;"));
                  INVALID_SYNTAX_ESCAPE_NONE_HEX_UNICODE = new ::java::lang::String(env->getStaticObjectField(cls, "INVALID_SYNTAX_ESCAPE_NONE_HEX_UNICODE", "Ljava/lang/String;"));
                  INVALID_SYNTAX_ESCAPE_UNICODE_TRUNCATION = new ::java::lang::String(env->getStaticObjectField(cls, "INVALID_SYNTAX_ESCAPE_UNICODE_TRUNCATION", "Ljava/lang/String;"));
                  INVALID_SYNTAX_FUZZY_EDITS = new ::java::lang::String(env->getStaticObjectField(cls, "INVALID_SYNTAX_FUZZY_EDITS", "Ljava/lang/String;"));
                  INVALID_SYNTAX_FUZZY_LIMITS = new ::java::lang::String(env->getStaticObjectField(cls, "INVALID_SYNTAX_FUZZY_LIMITS", "Ljava/lang/String;"));
                  LEADING_WILDCARD_NOT_ALLOWED = new ::java::lang::String(env->getStaticObjectField(cls, "LEADING_WILDCARD_NOT_ALLOWED", "Ljava/lang/String;"));
                  LUCENE_QUERY_CONVERSION_ERROR = new ::java::lang::String(env->getStaticObjectField(cls, "LUCENE_QUERY_CONVERSION_ERROR", "Ljava/lang/String;"));
                  NODE_ACTION_NOT_SUPPORTED = new ::java::lang::String(env->getStaticObjectField(cls, "NODE_ACTION_NOT_SUPPORTED", "Ljava/lang/String;"));
                  NUMBER_CLASS_NOT_SUPPORTED_BY_NUMERIC_RANGE_QUERY = new ::java::lang::String(env->getStaticObjectField(cls, "NUMBER_CLASS_NOT_SUPPORTED_BY_NUMERIC_RANGE_QUERY", "Ljava/lang/String;"));
                  NUMERIC_CANNOT_BE_EMPTY = new ::java::lang::String(env->getStaticObjectField(cls, "NUMERIC_CANNOT_BE_EMPTY", "Ljava/lang/String;"));
                  PARAMETER_VALUE_NOT_SUPPORTED = new ::java::lang::String(env->getStaticObjectField(cls, "PARAMETER_VALUE_NOT_SUPPORTED", "Ljava/lang/String;"));
                  TOO_MANY_BOOLEAN_CLAUSES = new ::java::lang::String(env->getStaticObjectField(cls, "TOO_MANY_BOOLEAN_CLAUSES", "Ljava/lang/String;"));
                  UNSUPPORTED_NUMERIC_DATA_TYPE = new ::java::lang::String(env->getStaticObjectField(cls, "UNSUPPORTED_NUMERIC_DATA_TYPE", "Ljava/lang/String;"));
                  WILDCARD_NOT_SUPPORTED = new ::java::lang::String(env->getStaticObjectField(cls, "WILDCARD_NOT_SUPPORTED", "Ljava/lang/String;"));
                  live$ = true;
                }
                return (jclass) class$->this$;
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace messages {
              static PyObject *t_QueryParserMessages_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_QueryParserMessages_instance_(PyTypeObject *type, PyObject *arg);

              static PyMethodDef t_QueryParserMessages__methods_[] = {
                DECLARE_METHOD(t_QueryParserMessages, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_QueryParserMessages, instance_, METH_O | METH_CLASS),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(QueryParserMessages, t_QueryParserMessages, ::org::apache::lucene::queryparser::flexible::messages::NLS, QueryParserMessages, abstract_init, 0, 0, 0, 0, 0);

              void t_QueryParserMessages::install(PyObject *module)
              {
                installType(&PY_TYPE(QueryParserMessages), module, "QueryParserMessages", 0);
              }

              void t_QueryParserMessages::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(QueryParserMessages).tp_dict, "class_", make_descriptor(QueryParserMessages::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(QueryParserMessages).tp_dict, "wrapfn_", make_descriptor(t_QueryParserMessages::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(QueryParserMessages).tp_dict, "boxfn_", make_descriptor(boxObject));
                env->getClass(QueryParserMessages::initializeClass);
                PyDict_SetItemString(PY_TYPE(QueryParserMessages).tp_dict, "COULD_NOT_PARSE_NUMBER", make_descriptor(j2p(*QueryParserMessages::COULD_NOT_PARSE_NUMBER)));
                PyDict_SetItemString(PY_TYPE(QueryParserMessages).tp_dict, "EMPTY_MESSAGE", make_descriptor(j2p(*QueryParserMessages::EMPTY_MESSAGE)));
                PyDict_SetItemString(PY_TYPE(QueryParserMessages).tp_dict, "INVALID_SYNTAX", make_descriptor(j2p(*QueryParserMessages::INVALID_SYNTAX)));
                PyDict_SetItemString(PY_TYPE(QueryParserMessages).tp_dict, "INVALID_SYNTAX_CANNOT_PARSE", make_descriptor(j2p(*QueryParserMessages::INVALID_SYNTAX_CANNOT_PARSE)));
                PyDict_SetItemString(PY_TYPE(QueryParserMessages).tp_dict, "INVALID_SYNTAX_ESCAPE_CHARACTER", make_descriptor(j2p(*QueryParserMessages::INVALID_SYNTAX_ESCAPE_CHARACTER)));
                PyDict_SetItemString(PY_TYPE(QueryParserMessages).tp_dict, "INVALID_SYNTAX_ESCAPE_NONE_HEX_UNICODE", make_descriptor(j2p(*QueryParserMessages::INVALID_SYNTAX_ESCAPE_NONE_HEX_UNICODE)));
                PyDict_SetItemString(PY_TYPE(QueryParserMessages).tp_dict, "INVALID_SYNTAX_ESCAPE_UNICODE_TRUNCATION", make_descriptor(j2p(*QueryParserMessages::INVALID_SYNTAX_ESCAPE_UNICODE_TRUNCATION)));
                PyDict_SetItemString(PY_TYPE(QueryParserMessages).tp_dict, "INVALID_SYNTAX_FUZZY_EDITS", make_descriptor(j2p(*QueryParserMessages::INVALID_SYNTAX_FUZZY_EDITS)));
                PyDict_SetItemString(PY_TYPE(QueryParserMessages).tp_dict, "INVALID_SYNTAX_FUZZY_LIMITS", make_descriptor(j2p(*QueryParserMessages::INVALID_SYNTAX_FUZZY_LIMITS)));
                PyDict_SetItemString(PY_TYPE(QueryParserMessages).tp_dict, "LEADING_WILDCARD_NOT_ALLOWED", make_descriptor(j2p(*QueryParserMessages::LEADING_WILDCARD_NOT_ALLOWED)));
                PyDict_SetItemString(PY_TYPE(QueryParserMessages).tp_dict, "LUCENE_QUERY_CONVERSION_ERROR", make_descriptor(j2p(*QueryParserMessages::LUCENE_QUERY_CONVERSION_ERROR)));
                PyDict_SetItemString(PY_TYPE(QueryParserMessages).tp_dict, "NODE_ACTION_NOT_SUPPORTED", make_descriptor(j2p(*QueryParserMessages::NODE_ACTION_NOT_SUPPORTED)));
                PyDict_SetItemString(PY_TYPE(QueryParserMessages).tp_dict, "NUMBER_CLASS_NOT_SUPPORTED_BY_NUMERIC_RANGE_QUERY", make_descriptor(j2p(*QueryParserMessages::NUMBER_CLASS_NOT_SUPPORTED_BY_NUMERIC_RANGE_QUERY)));
                PyDict_SetItemString(PY_TYPE(QueryParserMessages).tp_dict, "NUMERIC_CANNOT_BE_EMPTY", make_descriptor(j2p(*QueryParserMessages::NUMERIC_CANNOT_BE_EMPTY)));
                PyDict_SetItemString(PY_TYPE(QueryParserMessages).tp_dict, "PARAMETER_VALUE_NOT_SUPPORTED", make_descriptor(j2p(*QueryParserMessages::PARAMETER_VALUE_NOT_SUPPORTED)));
                PyDict_SetItemString(PY_TYPE(QueryParserMessages).tp_dict, "TOO_MANY_BOOLEAN_CLAUSES", make_descriptor(j2p(*QueryParserMessages::TOO_MANY_BOOLEAN_CLAUSES)));
                PyDict_SetItemString(PY_TYPE(QueryParserMessages).tp_dict, "UNSUPPORTED_NUMERIC_DATA_TYPE", make_descriptor(j2p(*QueryParserMessages::UNSUPPORTED_NUMERIC_DATA_TYPE)));
                PyDict_SetItemString(PY_TYPE(QueryParserMessages).tp_dict, "WILDCARD_NOT_SUPPORTED", make_descriptor(j2p(*QueryParserMessages::WILDCARD_NOT_SUPPORTED)));
              }

              static PyObject *t_QueryParserMessages_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, QueryParserMessages::initializeClass, 1)))
                  return NULL;
                return t_QueryParserMessages::wrap_Object(QueryParserMessages(((t_QueryParserMessages *) arg)->object.this$));
              }
              static PyObject *t_QueryParserMessages_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, QueryParserMessages::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queries/function/valuesource/DefFunction.h"
#include "org/apache/lucene/queries/function/FunctionValues.h"
#include "java/lang/Class.h"
#include "java/util/Map.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/queries/function/ValueSource.h"
#include "java/util/List.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {

            ::java::lang::Class *DefFunction::class$ = NULL;
            jmethodID *DefFunction::mids$ = NULL;
            bool DefFunction::live$ = false;

            jclass DefFunction::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queries/function/valuesource/DefFunction");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_1fde8fc3] = env->getMethodID(cls, "<init>", "(Ljava/util/List;)V");
                mids$[mid_getValues_4c566485] = env->getMethodID(cls, "getValues", "(Ljava/util/Map;Lorg/apache/lucene/index/AtomicReaderContext;)Lorg/apache/lucene/queries/function/FunctionValues;");
                mids$[mid_name_14c7b5c5] = env->getMethodID(cls, "name", "()Ljava/lang/String;");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            DefFunction::DefFunction(const ::java::util::List & a0) : ::org::apache::lucene::queries::function::valuesource::MultiFunction(env->newObject(initializeClass, &mids$, mid_init$_1fde8fc3, a0.this$)) {}

            ::org::apache::lucene::queries::function::FunctionValues DefFunction::getValues(const ::java::util::Map & a0, const ::org::apache::lucene::index::AtomicReaderContext & a1) const
            {
              return ::org::apache::lucene::queries::function::FunctionValues(env->callObjectMethod(this$, mids$[mid_getValues_4c566485], a0.this$, a1.this$));
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {
            static PyObject *t_DefFunction_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_DefFunction_instance_(PyTypeObject *type, PyObject *arg);
            static int t_DefFunction_init_(t_DefFunction *self, PyObject *args, PyObject *kwds);
            static PyObject *t_DefFunction_getValues(t_DefFunction *self, PyObject *args);

            static PyMethodDef t_DefFunction__methods_[] = {
              DECLARE_METHOD(t_DefFunction, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_DefFunction, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_DefFunction, getValues, METH_VARARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(DefFunction, t_DefFunction, ::org::apache::lucene::queries::function::valuesource::MultiFunction, DefFunction, t_DefFunction_init_, 0, 0, 0, 0, 0);

            void t_DefFunction::install(PyObject *module)
            {
              installType(&PY_TYPE(DefFunction), module, "DefFunction", 0);
            }

            void t_DefFunction::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(DefFunction).tp_dict, "class_", make_descriptor(DefFunction::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(DefFunction).tp_dict, "wrapfn_", make_descriptor(t_DefFunction::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(DefFunction).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_DefFunction_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, DefFunction::initializeClass, 1)))
                return NULL;
              return t_DefFunction::wrap_Object(DefFunction(((t_DefFunction *) arg)->object.this$));
            }
            static PyObject *t_DefFunction_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, DefFunction::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_DefFunction_init_(t_DefFunction *self, PyObject *args, PyObject *kwds)
            {
              ::java::util::List a0((jobject) NULL);
              PyTypeObject **p0;
              DefFunction object((jobject) NULL);

              if (!parseArgs(args, "K", ::java::util::List::initializeClass, &a0, &p0, ::java::util::t_List::parameters_))
              {
                INT_CALL(object = DefFunction(a0));
                self->object = object;
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_DefFunction_getValues(t_DefFunction *self, PyObject *args)
            {
              ::java::util::Map a0((jobject) NULL);
              PyTypeObject **p0;
              ::org::apache::lucene::index::AtomicReaderContext a1((jobject) NULL);
              ::org::apache::lucene::queries::function::FunctionValues result((jobject) NULL);

              if (!parseArgs(args, "Kk", ::java::util::Map::initializeClass, ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_, &a1))
              {
                OBJ_CALL(result = self->object.getValues(a0, a1));
                return ::org::apache::lucene::queries::function::t_FunctionValues::wrap_Object(result);
              }

              return callSuper(&PY_TYPE(DefFunction), (PyObject *) self, "getValues", args, 2);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/core/TypeTokenFilterFactory.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "java/util/Set.h"
#include "java/io/IOException.h"
#include "java/util/Map.h"
#include "java/lang/String.h"
#include "org/apache/lucene/analysis/util/ResourceLoader.h"
#include "org/apache/lucene/analysis/util/ResourceLoaderAware.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace core {

          ::java::lang::Class *TypeTokenFilterFactory::class$ = NULL;
          jmethodID *TypeTokenFilterFactory::mids$ = NULL;
          bool TypeTokenFilterFactory::live$ = false;

          jclass TypeTokenFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/core/TypeTokenFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4c9e2b1c] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_a65cd6ab] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/TokenStream;");
              mids$[mid_getStopTypes_03e99967] = env->getMethodID(cls, "getStopTypes", "()Ljava/util/Set;");
              mids$[mid_inform_d6a4bc97] = env->getMethodID(cls, "inform", "(Lorg/apache/lucene/analysis/util/ResourceLoader;)V");
              mids$[mid_isEnablePositionIncrements_54c6a16a] = env->getMethodID(cls, "isEnablePositionIncrements", "()Z");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          TypeTokenFilterFactory::TypeTokenFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_4c9e2b1c, a0.this$)) {}

          ::org::apache::lucene::analysis::TokenStream TypeTokenFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::TokenStream(env->callObjectMethod(this$, mids$[mid_create_a65cd6ab], a0.this$));
          }

          ::java::util::Set TypeTokenFilterFactory::getStopTypes() const
          {
            return ::java::util::Set(env->callObjectMethod(this$, mids$[mid_getStopTypes_03e99967]));
          }

          void TypeTokenFilterFactory::inform(const ::org::apache::lucene::analysis::util::ResourceLoader & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_inform_d6a4bc97], a0.this$);
          }

          jboolean TypeTokenFilterFactory::isEnablePositionIncrements() const
          {
            return env->callBooleanMethod(this$, mids$[mid_isEnablePositionIncrements_54c6a16a]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace core {
          static PyObject *t_TypeTokenFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_TypeTokenFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_TypeTokenFilterFactory_init_(t_TypeTokenFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_TypeTokenFilterFactory_create(t_TypeTokenFilterFactory *self, PyObject *args);
          static PyObject *t_TypeTokenFilterFactory_getStopTypes(t_TypeTokenFilterFactory *self);
          static PyObject *t_TypeTokenFilterFactory_inform(t_TypeTokenFilterFactory *self, PyObject *arg);
          static PyObject *t_TypeTokenFilterFactory_isEnablePositionIncrements(t_TypeTokenFilterFactory *self);
          static PyObject *t_TypeTokenFilterFactory_get__enablePositionIncrements(t_TypeTokenFilterFactory *self, void *data);
          static PyObject *t_TypeTokenFilterFactory_get__stopTypes(t_TypeTokenFilterFactory *self, void *data);
          static PyGetSetDef t_TypeTokenFilterFactory__fields_[] = {
            DECLARE_GET_FIELD(t_TypeTokenFilterFactory, enablePositionIncrements),
            DECLARE_GET_FIELD(t_TypeTokenFilterFactory, stopTypes),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_TypeTokenFilterFactory__methods_[] = {
            DECLARE_METHOD(t_TypeTokenFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_TypeTokenFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_TypeTokenFilterFactory, create, METH_VARARGS),
            DECLARE_METHOD(t_TypeTokenFilterFactory, getStopTypes, METH_NOARGS),
            DECLARE_METHOD(t_TypeTokenFilterFactory, inform, METH_O),
            DECLARE_METHOD(t_TypeTokenFilterFactory, isEnablePositionIncrements, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(TypeTokenFilterFactory, t_TypeTokenFilterFactory, ::org::apache::lucene::analysis::util::TokenFilterFactory, TypeTokenFilterFactory, t_TypeTokenFilterFactory_init_, 0, 0, t_TypeTokenFilterFactory__fields_, 0, 0);

          void t_TypeTokenFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(TypeTokenFilterFactory), module, "TypeTokenFilterFactory", 0);
          }

          void t_TypeTokenFilterFactory::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(TypeTokenFilterFactory).tp_dict, "class_", make_descriptor(TypeTokenFilterFactory::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(TypeTokenFilterFactory).tp_dict, "wrapfn_", make_descriptor(t_TypeTokenFilterFactory::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(TypeTokenFilterFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_TypeTokenFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, TypeTokenFilterFactory::initializeClass, 1)))
              return NULL;
            return t_TypeTokenFilterFactory::wrap_Object(TypeTokenFilterFactory(((t_TypeTokenFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_TypeTokenFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, TypeTokenFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_TypeTokenFilterFactory_init_(t_TypeTokenFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            TypeTokenFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = TypeTokenFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_TypeTokenFilterFactory_create(t_TypeTokenFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::TokenStream result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::t_TokenStream::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(TypeTokenFilterFactory), (PyObject *) self, "create", args, 2);
          }

          static PyObject *t_TypeTokenFilterFactory_getStopTypes(t_TypeTokenFilterFactory *self)
          {
            ::java::util::Set result((jobject) NULL);
            OBJ_CALL(result = self->object.getStopTypes());
            return ::java::util::t_Set::wrap_Object(result, &::java::lang::PY_TYPE(String));
          }

          static PyObject *t_TypeTokenFilterFactory_inform(t_TypeTokenFilterFactory *self, PyObject *arg)
          {
            ::org::apache::lucene::analysis::util::ResourceLoader a0((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::analysis::util::ResourceLoader::initializeClass, &a0))
            {
              OBJ_CALL(self->object.inform(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "inform", arg);
            return NULL;
          }

          static PyObject *t_TypeTokenFilterFactory_isEnablePositionIncrements(t_TypeTokenFilterFactory *self)
          {
            jboolean result;
            OBJ_CALL(result = self->object.isEnablePositionIncrements());
            Py_RETURN_BOOL(result);
          }

          static PyObject *t_TypeTokenFilterFactory_get__enablePositionIncrements(t_TypeTokenFilterFactory *self, void *data)
          {
            jboolean value;
            OBJ_CALL(value = self->object.isEnablePositionIncrements());
            Py_RETURN_BOOL(value);
          }

          static PyObject *t_TypeTokenFilterFactory_get__stopTypes(t_TypeTokenFilterFactory *self, void *data)
          {
            ::java::util::Set value((jobject) NULL);
            OBJ_CALL(value = self->object.getStopTypes());
            return ::java::util::t_Set::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/pylucene/store/PythonIndexOutput.h"
#include "java/io/IOException.h"
#include "java/lang/Throwable.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace pylucene {
      namespace store {

        ::java::lang::Class *PythonIndexOutput::class$ = NULL;
        jmethodID *PythonIndexOutput::mids$ = NULL;
        bool PythonIndexOutput::live$ = false;

        jclass PythonIndexOutput::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/pylucene/store/PythonIndexOutput");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_close_54c6a166] = env->getMethodID(cls, "close", "()V");
            mids$[mid_finalize_54c6a166] = env->getMethodID(cls, "finalize", "()V");
            mids$[mid_flush_54c6a166] = env->getMethodID(cls, "flush", "()V");
            mids$[mid_getChecksum_54c6a17a] = env->getMethodID(cls, "getChecksum", "()J");
            mids$[mid_getFilePointer_54c6a17a] = env->getMethodID(cls, "getFilePointer", "()J");
            mids$[mid_pythonDecRef_54c6a166] = env->getMethodID(cls, "pythonDecRef", "()V");
            mids$[mid_pythonExtension_54c6a17a] = env->getMethodID(cls, "pythonExtension", "()J");
            mids$[mid_pythonExtension_0ee6df2f] = env->getMethodID(cls, "pythonExtension", "(J)V");
            mids$[mid_writeByte_b2271687] = env->getMethodID(cls, "writeByte", "(B)V");
            mids$[mid_writeBytes_49b4f12b] = env->getMethodID(cls, "writeBytes", "([B)V");
            mids$[mid_writeBytes_86f4435f] = env->getMethodID(cls, "writeBytes", "([BII)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        PythonIndexOutput::PythonIndexOutput() : ::org::apache::lucene::store::IndexOutput(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        void PythonIndexOutput::finalize() const
        {
          env->callVoidMethod(this$, mids$[mid_finalize_54c6a166]);
        }

        void PythonIndexOutput::flush() const
        {
          env->callVoidMethod(this$, mids$[mid_flush_54c6a166]);
        }

        jlong PythonIndexOutput::pythonExtension() const
        {
          return env->callLongMethod(this$, mids$[mid_pythonExtension_54c6a17a]);
        }

        void PythonIndexOutput::pythonExtension(jlong a0) const
        {
          env->callVoidMethod(this$, mids$[mid_pythonExtension_0ee6df2f], a0);
        }

        void PythonIndexOutput::writeBytes(const JArray< jbyte > & a0, jint a1, jint a2) const
        {
          env->callVoidMethod(this$, mids$[mid_writeBytes_86f4435f], a0.this$, a1, a2);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace pylucene {
      namespace store {
        static PyObject *t_PythonIndexOutput_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_PythonIndexOutput_instance_(PyTypeObject *type, PyObject *arg);
        static int t_PythonIndexOutput_init_(t_PythonIndexOutput *self, PyObject *args, PyObject *kwds);
        static PyObject *t_PythonIndexOutput_finalize(t_PythonIndexOutput *self);
        static PyObject *t_PythonIndexOutput_flush(t_PythonIndexOutput *self, PyObject *args);
        static PyObject *t_PythonIndexOutput_pythonExtension(t_PythonIndexOutput *self, PyObject *args);
        static PyObject *t_PythonIndexOutput_writeBytes(t_PythonIndexOutput *self, PyObject *args);
        static void JNICALL t_PythonIndexOutput_close0(JNIEnv *jenv, jobject jobj);
        static jlong JNICALL t_PythonIndexOutput_getChecksum1(JNIEnv *jenv, jobject jobj);
        static jlong JNICALL t_PythonIndexOutput_getFilePointer2(JNIEnv *jenv, jobject jobj);
        static void JNICALL t_PythonIndexOutput_pythonDecRef3(JNIEnv *jenv, jobject jobj);
        static void JNICALL t_PythonIndexOutput_writeByte4(JNIEnv *jenv, jobject jobj, jbyte a0);
        static void JNICALL t_PythonIndexOutput_writeBytes5(JNIEnv *jenv, jobject jobj, jobject a0);
        static PyObject *t_PythonIndexOutput_get__self(t_PythonIndexOutput *self, void *data);
        static PyGetSetDef t_PythonIndexOutput__fields_[] = {
          DECLARE_GET_FIELD(t_PythonIndexOutput, self),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_PythonIndexOutput__methods_[] = {
          DECLARE_METHOD(t_PythonIndexOutput, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PythonIndexOutput, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PythonIndexOutput, finalize, METH_NOARGS),
          DECLARE_METHOD(t_PythonIndexOutput, flush, METH_VARARGS),
          DECLARE_METHOD(t_PythonIndexOutput, pythonExtension, METH_VARARGS),
          DECLARE_METHOD(t_PythonIndexOutput, writeBytes, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(PythonIndexOutput, t_PythonIndexOutput, ::org::apache::lucene::store::IndexOutput, PythonIndexOutput, t_PythonIndexOutput_init_, 0, 0, t_PythonIndexOutput__fields_, 0, 0);

        void t_PythonIndexOutput::install(PyObject *module)
        {
          installType(&PY_TYPE(PythonIndexOutput), module, "PythonIndexOutput", 1);
        }

        void t_PythonIndexOutput::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(PythonIndexOutput).tp_dict, "class_", make_descriptor(PythonIndexOutput::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(PythonIndexOutput).tp_dict, "wrapfn_", make_descriptor(t_PythonIndexOutput::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(PythonIndexOutput).tp_dict, "boxfn_", make_descriptor(boxObject));
          jclass cls = env->getClass(PythonIndexOutput::initializeClass);
          JNINativeMethod methods[] = {
            { "close", "()V", (void *) t_PythonIndexOutput_close0 },
            { "getChecksum", "()J", (void *) t_PythonIndexOutput_getChecksum1 },
            { "getFilePointer", "()J", (void *) t_PythonIndexOutput_getFilePointer2 },
            { "pythonDecRef", "()V", (void *) t_PythonIndexOutput_pythonDecRef3 },
            { "writeByte", "(B)V", (void *) t_PythonIndexOutput_writeByte4 },
            { "writeBytes", "([B)V", (void *) t_PythonIndexOutput_writeBytes5 },
          };
          env->registerNatives(cls, methods, 6);
        }

        static PyObject *t_PythonIndexOutput_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, PythonIndexOutput::initializeClass, 1)))
            return NULL;
          return t_PythonIndexOutput::wrap_Object(PythonIndexOutput(((t_PythonIndexOutput *) arg)->object.this$));
        }
        static PyObject *t_PythonIndexOutput_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, PythonIndexOutput::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_PythonIndexOutput_init_(t_PythonIndexOutput *self, PyObject *args, PyObject *kwds)
        {
          PythonIndexOutput object((jobject) NULL);

          INT_CALL(object = PythonIndexOutput());
          self->object = object;

          Py_INCREF((PyObject *) self);
          self->object.pythonExtension((jlong) (Py_intptr_t) (void *) self);

          return 0;
        }

        static PyObject *t_PythonIndexOutput_finalize(t_PythonIndexOutput *self)
        {
          OBJ_CALL(self->object.finalize());
          Py_RETURN_NONE;
        }

        static PyObject *t_PythonIndexOutput_flush(t_PythonIndexOutput *self, PyObject *args)
        {

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(self->object.flush());
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(PythonIndexOutput), (PyObject *) self, "flush", args, 2);
        }

        static PyObject *t_PythonIndexOutput_pythonExtension(t_PythonIndexOutput *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 0:
            {
              jlong result;
              OBJ_CALL(result = self->object.pythonExtension());
              return PyLong_FromLongLong((PY_LONG_LONG) result);
            }
            break;
           case 1:
            {
              jlong a0;

              if (!parseArgs(args, "J", &a0))
              {
                OBJ_CALL(self->object.pythonExtension(a0));
                Py_RETURN_NONE;
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "pythonExtension", args);
          return NULL;
        }

        static PyObject *t_PythonIndexOutput_writeBytes(t_PythonIndexOutput *self, PyObject *args)
        {
          JArray< jbyte > a0((jobject) NULL);
          jint a1;
          jint a2;

          if (!parseArgs(args, "[BII", &a0, &a1, &a2))
          {
            OBJ_CALL(self->object.writeBytes(a0, a1, a2));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(PythonIndexOutput), (PyObject *) self, "writeBytes", args, 2);
        }

        static void JNICALL t_PythonIndexOutput_close0(JNIEnv *jenv, jobject jobj)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonIndexOutput::mids$[PythonIndexOutput::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          PyObject *result = PyObject_CallMethod(obj, "close", "");
          if (!result)
            throwPythonError();
          else
            Py_DECREF(result);
        }

        static jlong JNICALL t_PythonIndexOutput_getChecksum1(JNIEnv *jenv, jobject jobj)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonIndexOutput::mids$[PythonIndexOutput::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          jlong value;
          PyObject *result = PyObject_CallMethod(obj, "getChecksum", "");
          if (!result)
            throwPythonError();
          else if (parseArg(result, "J", &value))
          {
            throwTypeError("getChecksum", result);
            Py_DECREF(result);
          }
          else
          {
            Py_DECREF(result);
            return value;
          }

          return (jlong) 0;
        }

        static jlong JNICALL t_PythonIndexOutput_getFilePointer2(JNIEnv *jenv, jobject jobj)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonIndexOutput::mids$[PythonIndexOutput::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          jlong value;
          PyObject *result = PyObject_CallMethod(obj, "getFilePointer", "");
          if (!result)
            throwPythonError();
          else if (parseArg(result, "J", &value))
          {
            throwTypeError("getFilePointer", result);
            Py_DECREF(result);
          }
          else
          {
            Py_DECREF(result);
            return value;
          }

          return (jlong) 0;
        }

        static void JNICALL t_PythonIndexOutput_pythonDecRef3(JNIEnv *jenv, jobject jobj)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonIndexOutput::mids$[PythonIndexOutput::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;

          if (obj != NULL)
          {
            jenv->CallVoidMethod(jobj, PythonIndexOutput::mids$[PythonIndexOutput::mid_pythonExtension_0ee6df2f], (jlong) 0);
            env->finalizeObject(jenv, obj);
          }
        }

        static void JNICALL t_PythonIndexOutput_writeByte4(JNIEnv *jenv, jobject jobj, jbyte a0)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonIndexOutput::mids$[PythonIndexOutput::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          PyObject *o0 = PyInt_FromLong(a0);
          PyObject *result = PyObject_CallMethod(obj, "writeByte", "O", o0);
          Py_DECREF(o0);
          if (!result)
            throwPythonError();
          else
            Py_DECREF(result);
        }

        static void JNICALL t_PythonIndexOutput_writeBytes5(JNIEnv *jenv, jobject jobj, jobject a0)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonIndexOutput::mids$[PythonIndexOutput::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          PyObject *o0 = JArray<jbyte>(a0).wrap();
          PyObject *result = PyObject_CallMethod(obj, "writeBytes", "O", o0);
          Py_DECREF(o0);
          if (!result)
            throwPythonError();
          else
            Py_DECREF(result);
        }

        static PyObject *t_PythonIndexOutput_get__self(t_PythonIndexOutput *self, void *data)
        {
          jlong ptr;
          OBJ_CALL(ptr = self->object.pythonExtension());
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;

          if (obj != NULL)
          {
            Py_INCREF(obj);
            return obj;
          }
          else
            Py_RETURN_NONE;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/FieldValueFilter.h"
#include "org/apache/lucene/util/Bits.h"
#include "java/lang/Class.h"
#include "java/lang/Object.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/search/DocIdSet.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *FieldValueFilter::class$ = NULL;
        jmethodID *FieldValueFilter::mids$ = NULL;
        bool FieldValueFilter::live$ = false;

        jclass FieldValueFilter::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/FieldValueFilter");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_5fdc3f48] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;)V");
            mids$[mid_init$_f3691645] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Z)V");
            mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
            mids$[mid_field_14c7b5c5] = env->getMethodID(cls, "field", "()Ljava/lang/String;");
            mids$[mid_getDocIdSet_ccce0897] = env->getMethodID(cls, "getDocIdSet", "(Lorg/apache/lucene/index/AtomicReaderContext;Lorg/apache/lucene/util/Bits;)Lorg/apache/lucene/search/DocIdSet;");
            mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
            mids$[mid_negate_54c6a16a] = env->getMethodID(cls, "negate", "()Z");
            mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        FieldValueFilter::FieldValueFilter(const ::java::lang::String & a0) : ::org::apache::lucene::search::Filter(env->newObject(initializeClass, &mids$, mid_init$_5fdc3f48, a0.this$)) {}

        FieldValueFilter::FieldValueFilter(const ::java::lang::String & a0, jboolean a1) : ::org::apache::lucene::search::Filter(env->newObject(initializeClass, &mids$, mid_init$_f3691645, a0.this$, a1)) {}

        jboolean FieldValueFilter::equals(const ::java::lang::Object & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
        }

        ::java::lang::String FieldValueFilter::field() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_field_14c7b5c5]));
        }

        ::org::apache::lucene::search::DocIdSet FieldValueFilter::getDocIdSet(const ::org::apache::lucene::index::AtomicReaderContext & a0, const ::org::apache::lucene::util::Bits & a1) const
        {
          return ::org::apache::lucene::search::DocIdSet(env->callObjectMethod(this$, mids$[mid_getDocIdSet_ccce0897], a0.this$, a1.this$));
        }

        jint FieldValueFilter::hashCode() const
        {
          return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
        }

        jboolean FieldValueFilter::negate() const
        {
          return env->callBooleanMethod(this$, mids$[mid_negate_54c6a16a]);
        }

        ::java::lang::String FieldValueFilter::toString() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_FieldValueFilter_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FieldValueFilter_instance_(PyTypeObject *type, PyObject *arg);
        static int t_FieldValueFilter_init_(t_FieldValueFilter *self, PyObject *args, PyObject *kwds);
        static PyObject *t_FieldValueFilter_equals(t_FieldValueFilter *self, PyObject *args);
        static PyObject *t_FieldValueFilter_field(t_FieldValueFilter *self);
        static PyObject *t_FieldValueFilter_getDocIdSet(t_FieldValueFilter *self, PyObject *args);
        static PyObject *t_FieldValueFilter_hashCode(t_FieldValueFilter *self, PyObject *args);
        static PyObject *t_FieldValueFilter_negate(t_FieldValueFilter *self);
        static PyObject *t_FieldValueFilter_toString(t_FieldValueFilter *self, PyObject *args);

        static PyMethodDef t_FieldValueFilter__methods_[] = {
          DECLARE_METHOD(t_FieldValueFilter, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FieldValueFilter, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FieldValueFilter, equals, METH_VARARGS),
          DECLARE_METHOD(t_FieldValueFilter, field, METH_NOARGS),
          DECLARE_METHOD(t_FieldValueFilter, getDocIdSet, METH_VARARGS),
          DECLARE_METHOD(t_FieldValueFilter, hashCode, METH_VARARGS),
          DECLARE_METHOD(t_FieldValueFilter, negate, METH_NOARGS),
          DECLARE_METHOD(t_FieldValueFilter, toString, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(FieldValueFilter, t_FieldValueFilter, ::org::apache::lucene::search::Filter, FieldValueFilter, t_FieldValueFilter_init_, 0, 0, 0, 0, 0);

        void t_FieldValueFilter::install(PyObject *module)
        {
          installType(&PY_TYPE(FieldValueFilter), module, "FieldValueFilter", 0);
        }

        void t_FieldValueFilter::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(FieldValueFilter).tp_dict, "class_", make_descriptor(FieldValueFilter::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(FieldValueFilter).tp_dict, "wrapfn_", make_descriptor(t_FieldValueFilter::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(FieldValueFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_FieldValueFilter_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, FieldValueFilter::initializeClass, 1)))
            return NULL;
          return t_FieldValueFilter::wrap_Object(FieldValueFilter(((t_FieldValueFilter *) arg)->object.this$));
        }
        static PyObject *t_FieldValueFilter_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, FieldValueFilter::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_FieldValueFilter_init_(t_FieldValueFilter *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              ::java::lang::String a0((jobject) NULL);
              FieldValueFilter object((jobject) NULL);

              if (!parseArgs(args, "s", &a0))
              {
                INT_CALL(object = FieldValueFilter(a0));
                self->object = object;
                break;
              }
            }
            goto err;
           case 2:
            {
              ::java::lang::String a0((jobject) NULL);
              jboolean a1;
              FieldValueFilter object((jobject) NULL);

              if (!parseArgs(args, "sZ", &a0, &a1))
              {
                INT_CALL(object = FieldValueFilter(a0, a1));
                self->object = object;
                break;
              }
            }
           default:
           err:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_FieldValueFilter_equals(t_FieldValueFilter *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.equals(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(FieldValueFilter), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_FieldValueFilter_field(t_FieldValueFilter *self)
        {
          ::java::lang::String result((jobject) NULL);
          OBJ_CALL(result = self->object.field());
          return j2p(result);
        }

        static PyObject *t_FieldValueFilter_getDocIdSet(t_FieldValueFilter *self, PyObject *args)
        {
          ::org::apache::lucene::index::AtomicReaderContext a0((jobject) NULL);
          ::org::apache::lucene::util::Bits a1((jobject) NULL);
          ::org::apache::lucene::search::DocIdSet result((jobject) NULL);

          if (!parseArgs(args, "kk", ::org::apache::lucene::index::AtomicReaderContext::initializeClass, ::org::apache::lucene::util::Bits::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = self->object.getDocIdSet(a0, a1));
            return ::org::apache::lucene::search::t_DocIdSet::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(FieldValueFilter), (PyObject *) self, "getDocIdSet", args, 2);
        }

        static PyObject *t_FieldValueFilter_hashCode(t_FieldValueFilter *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hashCode());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(FieldValueFilter), (PyObject *) self, "hashCode", args, 2);
        }

        static PyObject *t_FieldValueFilter_negate(t_FieldValueFilter *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.negate());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_FieldValueFilter_toString(t_FieldValueFilter *self, PyObject *args)
        {
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.toString());
            return j2p(result);
          }

          return callSuper(&PY_TYPE(FieldValueFilter), (PyObject *) self, "toString", args, 2);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/CompositeReader.h"
#include "java/lang/String.h"
#include "org/apache/lucene/index/CompositeReaderContext.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *CompositeReader::class$ = NULL;
        jmethodID *CompositeReader::mids$ = NULL;
        bool CompositeReader::live$ = false;

        jclass CompositeReader::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/CompositeReader");

            mids$ = new jmethodID[max_mid];
            mids$[mid_getContext_00eb2977] = env->getMethodID(cls, "getContext", "()Lorg/apache/lucene/index/CompositeReaderContext;");
            mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");
            mids$[mid_getSequentialSubReaders_87851566] = env->getMethodID(cls, "getSequentialSubReaders", "()Ljava/util/List;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        ::org::apache::lucene::index::CompositeReaderContext CompositeReader::getContext() const
        {
          return ::org::apache::lucene::index::CompositeReaderContext(env->callObjectMethod(this$, mids$[mid_getContext_00eb2977]));
        }

        ::java::lang::String CompositeReader::toString() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_CompositeReader_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_CompositeReader_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_CompositeReader_getContext(t_CompositeReader *self, PyObject *args);
        static PyObject *t_CompositeReader_toString(t_CompositeReader *self, PyObject *args);
        static PyObject *t_CompositeReader_get__context(t_CompositeReader *self, void *data);
        static PyGetSetDef t_CompositeReader__fields_[] = {
          DECLARE_GET_FIELD(t_CompositeReader, context),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_CompositeReader__methods_[] = {
          DECLARE_METHOD(t_CompositeReader, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_CompositeReader, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_CompositeReader, getContext, METH_VARARGS),
          DECLARE_METHOD(t_CompositeReader, toString, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(CompositeReader, t_CompositeReader, ::org::apache::lucene::index::IndexReader, CompositeReader, abstract_init, 0, 0, t_CompositeReader__fields_, 0, 0);

        void t_CompositeReader::install(PyObject *module)
        {
          installType(&PY_TYPE(CompositeReader), module, "CompositeReader", 0);
        }

        void t_CompositeReader::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(CompositeReader).tp_dict, "class_", make_descriptor(CompositeReader::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(CompositeReader).tp_dict, "wrapfn_", make_descriptor(t_CompositeReader::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(CompositeReader).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_CompositeReader_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, CompositeReader::initializeClass, 1)))
            return NULL;
          return t_CompositeReader::wrap_Object(CompositeReader(((t_CompositeReader *) arg)->object.this$));
        }
        static PyObject *t_CompositeReader_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, CompositeReader::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_CompositeReader_getContext(t_CompositeReader *self, PyObject *args)
        {
          ::org::apache::lucene::index::CompositeReaderContext result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.getContext());
            return ::org::apache::lucene::index::t_CompositeReaderContext::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(CompositeReader), (PyObject *) self, "getContext", args, 2);
        }

        static PyObject *t_CompositeReader_toString(t_CompositeReader *self, PyObject *args)
        {
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.toString());
            return j2p(result);
          }

          return callSuper(&PY_TYPE(CompositeReader), (PyObject *) self, "toString", args, 2);
        }

        static PyObject *t_CompositeReader_get__context(t_CompositeReader *self, void *data)
        {
          ::org::apache::lucene::index::CompositeReaderContext value((jobject) NULL);
          OBJ_CALL(value = self->object.getContext());
          return ::org::apache::lucene::index::t_CompositeReaderContext::wrap_Object(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/highlight/SimpleHTMLFormatter.h"
#include "org/apache/lucene/search/highlight/TokenGroup.h"
#include "org/apache/lucene/search/highlight/Formatter.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace highlight {

          ::java::lang::Class *SimpleHTMLFormatter::class$ = NULL;
          jmethodID *SimpleHTMLFormatter::mids$ = NULL;
          bool SimpleHTMLFormatter::live$ = false;

          jclass SimpleHTMLFormatter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/highlight/SimpleHTMLFormatter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_init$_4a264742] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Ljava/lang/String;)V");
              mids$[mid_highlightTerm_8838cc58] = env->getMethodID(cls, "highlightTerm", "(Ljava/lang/String;Lorg/apache/lucene/search/highlight/TokenGroup;)Ljava/lang/String;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          SimpleHTMLFormatter::SimpleHTMLFormatter() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          SimpleHTMLFormatter::SimpleHTMLFormatter(const ::java::lang::String & a0, const ::java::lang::String & a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_4a264742, a0.this$, a1.this$)) {}

          ::java::lang::String SimpleHTMLFormatter::highlightTerm(const ::java::lang::String & a0, const ::org::apache::lucene::search::highlight::TokenGroup & a1) const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_highlightTerm_8838cc58], a0.this$, a1.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace highlight {
          static PyObject *t_SimpleHTMLFormatter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SimpleHTMLFormatter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_SimpleHTMLFormatter_init_(t_SimpleHTMLFormatter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_SimpleHTMLFormatter_highlightTerm(t_SimpleHTMLFormatter *self, PyObject *args);

          static PyMethodDef t_SimpleHTMLFormatter__methods_[] = {
            DECLARE_METHOD(t_SimpleHTMLFormatter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SimpleHTMLFormatter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SimpleHTMLFormatter, highlightTerm, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(SimpleHTMLFormatter, t_SimpleHTMLFormatter, ::java::lang::Object, SimpleHTMLFormatter, t_SimpleHTMLFormatter_init_, 0, 0, 0, 0, 0);

          void t_SimpleHTMLFormatter::install(PyObject *module)
          {
            installType(&PY_TYPE(SimpleHTMLFormatter), module, "SimpleHTMLFormatter", 0);
          }

          void t_SimpleHTMLFormatter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(SimpleHTMLFormatter).tp_dict, "class_", make_descriptor(SimpleHTMLFormatter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(SimpleHTMLFormatter).tp_dict, "wrapfn_", make_descriptor(t_SimpleHTMLFormatter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(SimpleHTMLFormatter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_SimpleHTMLFormatter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, SimpleHTMLFormatter::initializeClass, 1)))
              return NULL;
            return t_SimpleHTMLFormatter::wrap_Object(SimpleHTMLFormatter(((t_SimpleHTMLFormatter *) arg)->object.this$));
          }
          static PyObject *t_SimpleHTMLFormatter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, SimpleHTMLFormatter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_SimpleHTMLFormatter_init_(t_SimpleHTMLFormatter *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 0:
              {
                SimpleHTMLFormatter object((jobject) NULL);

                INT_CALL(object = SimpleHTMLFormatter());
                self->object = object;
                break;
              }
              goto err;
             case 2:
              {
                ::java::lang::String a0((jobject) NULL);
                ::java::lang::String a1((jobject) NULL);
                SimpleHTMLFormatter object((jobject) NULL);

                if (!parseArgs(args, "ss", &a0, &a1))
                {
                  INT_CALL(object = SimpleHTMLFormatter(a0, a1));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_SimpleHTMLFormatter_highlightTerm(t_SimpleHTMLFormatter *self, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            ::org::apache::lucene::search::highlight::TokenGroup a1((jobject) NULL);
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, "sk", ::org::apache::lucene::search::highlight::TokenGroup::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.highlightTerm(a0, a1));
              return j2p(result);
            }

            PyErr_SetArgsError((PyObject *) self, "highlightTerm", args);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/OpenBitSetIterator.h"
#include "org/apache/lucene/util/OpenBitSet.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *OpenBitSetIterator::class$ = NULL;
        jmethodID *OpenBitSetIterator::mids$ = NULL;
        bool OpenBitSetIterator::live$ = false;

        jclass OpenBitSetIterator::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/OpenBitSetIterator");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_c2540e4f] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/OpenBitSet;)V");
            mids$[mid_init$_ce93dbcb] = env->getMethodID(cls, "<init>", "([JI)V");
            mids$[mid_advance_39c7bd23] = env->getMethodID(cls, "advance", "(I)I");
            mids$[mid_cost_54c6a17a] = env->getMethodID(cls, "cost", "()J");
            mids$[mid_docID_54c6a179] = env->getMethodID(cls, "docID", "()I");
            mids$[mid_nextDoc_54c6a179] = env->getMethodID(cls, "nextDoc", "()I");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        OpenBitSetIterator::OpenBitSetIterator(const ::org::apache::lucene::util::OpenBitSet & a0) : ::org::apache::lucene::search::DocIdSetIterator(env->newObject(initializeClass, &mids$, mid_init$_c2540e4f, a0.this$)) {}

        OpenBitSetIterator::OpenBitSetIterator(const JArray< jlong > & a0, jint a1) : ::org::apache::lucene::search::DocIdSetIterator(env->newObject(initializeClass, &mids$, mid_init$_ce93dbcb, a0.this$, a1)) {}

        jint OpenBitSetIterator::advance(jint a0) const
        {
          return env->callIntMethod(this$, mids$[mid_advance_39c7bd23], a0);
        }

        jlong OpenBitSetIterator::cost() const
        {
          return env->callLongMethod(this$, mids$[mid_cost_54c6a17a]);
        }

        jint OpenBitSetIterator::docID() const
        {
          return env->callIntMethod(this$, mids$[mid_docID_54c6a179]);
        }

        jint OpenBitSetIterator::nextDoc() const
        {
          return env->callIntMethod(this$, mids$[mid_nextDoc_54c6a179]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_OpenBitSetIterator_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_OpenBitSetIterator_instance_(PyTypeObject *type, PyObject *arg);
        static int t_OpenBitSetIterator_init_(t_OpenBitSetIterator *self, PyObject *args, PyObject *kwds);
        static PyObject *t_OpenBitSetIterator_advance(t_OpenBitSetIterator *self, PyObject *args);
        static PyObject *t_OpenBitSetIterator_cost(t_OpenBitSetIterator *self, PyObject *args);
        static PyObject *t_OpenBitSetIterator_docID(t_OpenBitSetIterator *self, PyObject *args);
        static PyObject *t_OpenBitSetIterator_nextDoc(t_OpenBitSetIterator *self, PyObject *args);

        static PyMethodDef t_OpenBitSetIterator__methods_[] = {
          DECLARE_METHOD(t_OpenBitSetIterator, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_OpenBitSetIterator, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_OpenBitSetIterator, advance, METH_VARARGS),
          DECLARE_METHOD(t_OpenBitSetIterator, cost, METH_VARARGS),
          DECLARE_METHOD(t_OpenBitSetIterator, docID, METH_VARARGS),
          DECLARE_METHOD(t_OpenBitSetIterator, nextDoc, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(OpenBitSetIterator, t_OpenBitSetIterator, ::org::apache::lucene::search::DocIdSetIterator, OpenBitSetIterator, t_OpenBitSetIterator_init_, 0, 0, 0, 0, 0);

        void t_OpenBitSetIterator::install(PyObject *module)
        {
          installType(&PY_TYPE(OpenBitSetIterator), module, "OpenBitSetIterator", 0);
        }

        void t_OpenBitSetIterator::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(OpenBitSetIterator).tp_dict, "class_", make_descriptor(OpenBitSetIterator::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(OpenBitSetIterator).tp_dict, "wrapfn_", make_descriptor(t_OpenBitSetIterator::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(OpenBitSetIterator).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_OpenBitSetIterator_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, OpenBitSetIterator::initializeClass, 1)))
            return NULL;
          return t_OpenBitSetIterator::wrap_Object(OpenBitSetIterator(((t_OpenBitSetIterator *) arg)->object.this$));
        }
        static PyObject *t_OpenBitSetIterator_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, OpenBitSetIterator::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_OpenBitSetIterator_init_(t_OpenBitSetIterator *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              ::org::apache::lucene::util::OpenBitSet a0((jobject) NULL);
              OpenBitSetIterator object((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::util::OpenBitSet::initializeClass, &a0))
              {
                INT_CALL(object = OpenBitSetIterator(a0));
                self->object = object;
                break;
              }
            }
            goto err;
           case 2:
            {
              JArray< jlong > a0((jobject) NULL);
              jint a1;
              OpenBitSetIterator object((jobject) NULL);

              if (!parseArgs(args, "[JI", &a0, &a1))
              {
                INT_CALL(object = OpenBitSetIterator(a0, a1));
                self->object = object;
                break;
              }
            }
           default:
           err:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_OpenBitSetIterator_advance(t_OpenBitSetIterator *self, PyObject *args)
        {
          jint a0;
          jint result;

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(result = self->object.advance(a0));
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(OpenBitSetIterator), (PyObject *) self, "advance", args, 2);
        }

        static PyObject *t_OpenBitSetIterator_cost(t_OpenBitSetIterator *self, PyObject *args)
        {
          jlong result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.cost());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          return callSuper(&PY_TYPE(OpenBitSetIterator), (PyObject *) self, "cost", args, 2);
        }

        static PyObject *t_OpenBitSetIterator_docID(t_OpenBitSetIterator *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.docID());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(OpenBitSetIterator), (PyObject *) self, "docID", args, 2);
        }

        static PyObject *t_OpenBitSetIterator_nextDoc(t_OpenBitSetIterator *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.nextDoc());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(OpenBitSetIterator), (PyObject *) self, "nextDoc", args, 2);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/hi/HindiStemFilterFactory.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/String.h"
#include "java/util/Map.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace hi {

          ::java::lang::Class *HindiStemFilterFactory::class$ = NULL;
          jmethodID *HindiStemFilterFactory::mids$ = NULL;
          bool HindiStemFilterFactory::live$ = false;

          jclass HindiStemFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/hi/HindiStemFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4c9e2b1c] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_a65cd6ab] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/TokenStream;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          HindiStemFilterFactory::HindiStemFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_4c9e2b1c, a0.this$)) {}

          ::org::apache::lucene::analysis::TokenStream HindiStemFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::TokenStream(env->callObjectMethod(this$, mids$[mid_create_a65cd6ab], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace hi {
          static PyObject *t_HindiStemFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_HindiStemFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_HindiStemFilterFactory_init_(t_HindiStemFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_HindiStemFilterFactory_create(t_HindiStemFilterFactory *self, PyObject *args);

          static PyMethodDef t_HindiStemFilterFactory__methods_[] = {
            DECLARE_METHOD(t_HindiStemFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_HindiStemFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_HindiStemFilterFactory, create, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(HindiStemFilterFactory, t_HindiStemFilterFactory, ::org::apache::lucene::analysis::util::TokenFilterFactory, HindiStemFilterFactory, t_HindiStemFilterFactory_init_, 0, 0, 0, 0, 0);

          void t_HindiStemFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(HindiStemFilterFactory), module, "HindiStemFilterFactory", 0);
          }

          void t_HindiStemFilterFactory::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(HindiStemFilterFactory).tp_dict, "class_", make_descriptor(HindiStemFilterFactory::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(HindiStemFilterFactory).tp_dict, "wrapfn_", make_descriptor(t_HindiStemFilterFactory::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(HindiStemFilterFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_HindiStemFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, HindiStemFilterFactory::initializeClass, 1)))
              return NULL;
            return t_HindiStemFilterFactory::wrap_Object(HindiStemFilterFactory(((t_HindiStemFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_HindiStemFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, HindiStemFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_HindiStemFilterFactory_init_(t_HindiStemFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            HindiStemFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = HindiStemFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_HindiStemFilterFactory_create(t_HindiStemFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::TokenStream result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::t_TokenStream::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(HindiStemFilterFactory), (PyObject *) self, "create", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/pylucene/queryparser/classic/PythonMultiFieldQueryParser.h"
#include "org/apache/lucene/queryparser/classic/ParseException.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/analysis/Analyzer.h"
#include "java/lang/String.h"
#include "org/apache/lucene/search/Query.h"
#include "org/apache/lucene/util/Version.h"
#include "java/lang/Throwable.h"
#include "java/util/List.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace pylucene {
      namespace queryparser {
        namespace classic {

          ::java::lang::Class *PythonMultiFieldQueryParser::class$ = NULL;
          jmethodID *PythonMultiFieldQueryParser::mids$ = NULL;
          bool PythonMultiFieldQueryParser::live$ = false;

          jclass PythonMultiFieldQueryParser::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/pylucene/queryparser/classic/PythonMultiFieldQueryParser");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_822fc5c3] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;[Ljava/lang/String;Lorg/apache/lucene/analysis/Analyzer;)V");
              mids$[mid_finalize_54c6a166] = env->getMethodID(cls, "finalize", "()V");
              mids$[mid_getBooleanQuery_3d190f1c] = env->getMethodID(cls, "getBooleanQuery", "(Ljava/util/List;Z)Lorg/apache/lucene/search/Query;");
              mids$[mid_getFieldQuery_bd696f55] = env->getMethodID(cls, "getFieldQuery", "(Ljava/lang/String;Ljava/lang/String;Z)Lorg/apache/lucene/search/Query;");
              mids$[mid_getFieldQuery_c7c8d9a8] = env->getMethodID(cls, "getFieldQuery", "(Ljava/lang/String;Ljava/lang/String;I)Lorg/apache/lucene/search/Query;");
              mids$[mid_getFieldQuery_quoted_bd696f55] = env->getMethodID(cls, "getFieldQuery_quoted", "(Ljava/lang/String;Ljava/lang/String;Z)Lorg/apache/lucene/search/Query;");
              mids$[mid_getFieldQuery_quoted_super_bd696f55] = env->getMethodID(cls, "getFieldQuery_quoted_super", "(Ljava/lang/String;Ljava/lang/String;Z)Lorg/apache/lucene/search/Query;");
              mids$[mid_getFieldQuery_slop_c7c8d9a8] = env->getMethodID(cls, "getFieldQuery_slop", "(Ljava/lang/String;Ljava/lang/String;I)Lorg/apache/lucene/search/Query;");
              mids$[mid_getFieldQuery_slop_super_c7c8d9a8] = env->getMethodID(cls, "getFieldQuery_slop_super", "(Ljava/lang/String;Ljava/lang/String;I)Lorg/apache/lucene/search/Query;");
              mids$[mid_getFuzzyQuery_45995161] = env->getMethodID(cls, "getFuzzyQuery", "(Ljava/lang/String;Ljava/lang/String;F)Lorg/apache/lucene/search/Query;");
              mids$[mid_getPrefixQuery_38d6e77e] = env->getMethodID(cls, "getPrefixQuery", "(Ljava/lang/String;Ljava/lang/String;)Lorg/apache/lucene/search/Query;");
              mids$[mid_getRangeQuery_75fd45b6] = env->getMethodID(cls, "getRangeQuery", "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;ZZ)Lorg/apache/lucene/search/Query;");
              mids$[mid_getWildcardQuery_38d6e77e] = env->getMethodID(cls, "getWildcardQuery", "(Ljava/lang/String;Ljava/lang/String;)Lorg/apache/lucene/search/Query;");
              mids$[mid_pythonDecRef_54c6a166] = env->getMethodID(cls, "pythonDecRef", "()V");
              mids$[mid_pythonExtension_54c6a17a] = env->getMethodID(cls, "pythonExtension", "()J");
              mids$[mid_pythonExtension_0ee6df2f] = env->getMethodID(cls, "pythonExtension", "(J)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          PythonMultiFieldQueryParser::PythonMultiFieldQueryParser(const ::org::apache::lucene::util::Version & a0, const JArray< ::java::lang::String > & a1, const ::org::apache::lucene::analysis::Analyzer & a2) : ::org::apache::lucene::queryparser::classic::MultiFieldQueryParser(env->newObject(initializeClass, &mids$, mid_init$_822fc5c3, a0.this$, a1.this$, a2.this$)) {}

          void PythonMultiFieldQueryParser::finalize() const
          {
            env->callVoidMethod(this$, mids$[mid_finalize_54c6a166]);
          }

          ::org::apache::lucene::search::Query PythonMultiFieldQueryParser::getBooleanQuery(const ::java::util::List & a0, jboolean a1) const
          {
            return ::org::apache::lucene::search::Query(env->callNonvirtualObjectMethod(this$, (jclass) ::org::apache::lucene::queryparser::classic::MultiFieldQueryParser::class$->this$, ::org::apache::lucene::queryparser::classic::QueryParserBase::mids$[::org::apache::lucene::queryparser::classic::QueryParserBase::mid_getBooleanQuery_3d190f1c], a0.this$, a1));
          }

          ::org::apache::lucene::search::Query PythonMultiFieldQueryParser::getFieldQuery(const ::java::lang::String & a0, const ::java::lang::String & a1, jboolean a2) const
          {
            return ::org::apache::lucene::search::Query(env->callObjectMethod(this$, mids$[mid_getFieldQuery_bd696f55], a0.this$, a1.this$, a2));
          }

          ::org::apache::lucene::search::Query PythonMultiFieldQueryParser::getFieldQuery(const ::java::lang::String & a0, const ::java::lang::String & a1, jint a2) const
          {
            return ::org::apache::lucene::search::Query(env->callObjectMethod(this$, mids$[mid_getFieldQuery_c7c8d9a8], a0.this$, a1.this$, a2));
          }

          ::org::apache::lucene::search::Query PythonMultiFieldQueryParser::getFieldQuery_quoted_super(const ::java::lang::String & a0, const ::java::lang::String & a1, jboolean a2) const
          {
            return ::org::apache::lucene::search::Query(env->callObjectMethod(this$, mids$[mid_getFieldQuery_quoted_super_bd696f55], a0.this$, a1.this$, a2));
          }

          ::org::apache::lucene::search::Query PythonMultiFieldQueryParser::getFieldQuery_slop_super(const ::java::lang::String & a0, const ::java::lang::String & a1, jint a2) const
          {
            return ::org::apache::lucene::search::Query(env->callObjectMethod(this$, mids$[mid_getFieldQuery_slop_super_c7c8d9a8], a0.this$, a1.this$, a2));
          }

          ::org::apache::lucene::search::Query PythonMultiFieldQueryParser::getFuzzyQuery(const ::java::lang::String & a0, const ::java::lang::String & a1, jfloat a2) const
          {
            return ::org::apache::lucene::search::Query(env->callNonvirtualObjectMethod(this$, (jclass) ::org::apache::lucene::queryparser::classic::MultiFieldQueryParser::class$->this$, ::org::apache::lucene::queryparser::classic::MultiFieldQueryParser::mids$[::org::apache::lucene::queryparser::classic::MultiFieldQueryParser::mid_getFuzzyQuery_45995161], a0.this$, a1.this$, a2));
          }

          ::org::apache::lucene::search::Query PythonMultiFieldQueryParser::getPrefixQuery(const ::java::lang::String & a0, const ::java::lang::String & a1) const
          {
            return ::org::apache::lucene::search::Query(env->callNonvirtualObjectMethod(this$, (jclass) ::org::apache::lucene::queryparser::classic::MultiFieldQueryParser::class$->this$, ::org::apache::lucene::queryparser::classic::MultiFieldQueryParser::mids$[::org::apache::lucene::queryparser::classic::MultiFieldQueryParser::mid_getPrefixQuery_38d6e77e], a0.this$, a1.this$));
          }

          ::org::apache::lucene::search::Query PythonMultiFieldQueryParser::getRangeQuery(const ::java::lang::String & a0, const ::java::lang::String & a1, const ::java::lang::String & a2, jboolean a3, jboolean a4) const
          {
            return ::org::apache::lucene::search::Query(env->callNonvirtualObjectMethod(this$, (jclass) ::org::apache::lucene::queryparser::classic::MultiFieldQueryParser::class$->this$, ::org::apache::lucene::queryparser::classic::MultiFieldQueryParser::mids$[::org::apache::lucene::queryparser::classic::MultiFieldQueryParser::mid_getRangeQuery_75fd45b6], a0.this$, a1.this$, a2.this$, a3, a4));
          }

          ::org::apache::lucene::search::Query PythonMultiFieldQueryParser::getWildcardQuery(const ::java::lang::String & a0, const ::java::lang::String & a1) const
          {
            return ::org::apache::lucene::search::Query(env->callNonvirtualObjectMethod(this$, (jclass) ::org::apache::lucene::queryparser::classic::MultiFieldQueryParser::class$->this$, ::org::apache::lucene::queryparser::classic::MultiFieldQueryParser::mids$[::org::apache::lucene::queryparser::classic::MultiFieldQueryParser::mid_getWildcardQuery_38d6e77e], a0.this$, a1.this$));
          }

          jlong PythonMultiFieldQueryParser::pythonExtension() const
          {
            return env->callLongMethod(this$, mids$[mid_pythonExtension_54c6a17a]);
          }

          void PythonMultiFieldQueryParser::pythonExtension(jlong a0) const
          {
            env->callVoidMethod(this$, mids$[mid_pythonExtension_0ee6df2f], a0);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace pylucene {
      namespace queryparser {
        namespace classic {
          static PyObject *t_PythonMultiFieldQueryParser_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PythonMultiFieldQueryParser_instance_(PyTypeObject *type, PyObject *arg);
          static int t_PythonMultiFieldQueryParser_init_(t_PythonMultiFieldQueryParser *self, PyObject *args, PyObject *kwds);
          static PyObject *t_PythonMultiFieldQueryParser_finalize(t_PythonMultiFieldQueryParser *self);
          static PyObject *t_PythonMultiFieldQueryParser_getBooleanQuery(t_PythonMultiFieldQueryParser *self, PyObject *args);
          static PyObject *t_PythonMultiFieldQueryParser_getFieldQuery(t_PythonMultiFieldQueryParser *self, PyObject *args);
          static PyObject *t_PythonMultiFieldQueryParser_getFieldQuery_quoted_super(t_PythonMultiFieldQueryParser *self, PyObject *args);
          static PyObject *t_PythonMultiFieldQueryParser_getFieldQuery_slop_super(t_PythonMultiFieldQueryParser *self, PyObject *args);
          static PyObject *t_PythonMultiFieldQueryParser_getFuzzyQuery(t_PythonMultiFieldQueryParser *self, PyObject *args);
          static PyObject *t_PythonMultiFieldQueryParser_getPrefixQuery(t_PythonMultiFieldQueryParser *self, PyObject *args);
          static PyObject *t_PythonMultiFieldQueryParser_getRangeQuery(t_PythonMultiFieldQueryParser *self, PyObject *args);
          static PyObject *t_PythonMultiFieldQueryParser_getWildcardQuery(t_PythonMultiFieldQueryParser *self, PyObject *args);
          static PyObject *t_PythonMultiFieldQueryParser_pythonExtension(t_PythonMultiFieldQueryParser *self, PyObject *args);
          static jobject JNICALL t_PythonMultiFieldQueryParser_getBooleanQuery0(JNIEnv *jenv, jobject jobj, jobject a0, jboolean a1);
          static jobject JNICALL t_PythonMultiFieldQueryParser_getFieldQuery_quoted1(JNIEnv *jenv, jobject jobj, jobject a0, jobject a1, jboolean a2);
          static jobject JNICALL t_PythonMultiFieldQueryParser_getFieldQuery_slop2(JNIEnv *jenv, jobject jobj, jobject a0, jobject a1, jint a2);
          static jobject JNICALL t_PythonMultiFieldQueryParser_getFuzzyQuery3(JNIEnv *jenv, jobject jobj, jobject a0, jobject a1, jfloat a2);
          static jobject JNICALL t_PythonMultiFieldQueryParser_getPrefixQuery4(JNIEnv *jenv, jobject jobj, jobject a0, jobject a1);
          static jobject JNICALL t_PythonMultiFieldQueryParser_getRangeQuery5(JNIEnv *jenv, jobject jobj, jobject a0, jobject a1, jobject a2, jboolean a3, jboolean a4);
          static jobject JNICALL t_PythonMultiFieldQueryParser_getWildcardQuery6(JNIEnv *jenv, jobject jobj, jobject a0, jobject a1);
          static void JNICALL t_PythonMultiFieldQueryParser_pythonDecRef7(JNIEnv *jenv, jobject jobj);
          static PyObject *t_PythonMultiFieldQueryParser_get__self(t_PythonMultiFieldQueryParser *self, void *data);
          static PyGetSetDef t_PythonMultiFieldQueryParser__fields_[] = {
            DECLARE_GET_FIELD(t_PythonMultiFieldQueryParser, self),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_PythonMultiFieldQueryParser__methods_[] = {
            DECLARE_METHOD(t_PythonMultiFieldQueryParser, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PythonMultiFieldQueryParser, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PythonMultiFieldQueryParser, finalize, METH_NOARGS),
            DECLARE_METHOD(t_PythonMultiFieldQueryParser, getBooleanQuery, METH_VARARGS),
            DECLARE_METHOD(t_PythonMultiFieldQueryParser, getFieldQuery, METH_VARARGS),
            DECLARE_METHOD(t_PythonMultiFieldQueryParser, getFieldQuery_quoted_super, METH_VARARGS),
            DECLARE_METHOD(t_PythonMultiFieldQueryParser, getFieldQuery_slop_super, METH_VARARGS),
            DECLARE_METHOD(t_PythonMultiFieldQueryParser, getFuzzyQuery, METH_VARARGS),
            DECLARE_METHOD(t_PythonMultiFieldQueryParser, getPrefixQuery, METH_VARARGS),
            DECLARE_METHOD(t_PythonMultiFieldQueryParser, getRangeQuery, METH_VARARGS),
            DECLARE_METHOD(t_PythonMultiFieldQueryParser, getWildcardQuery, METH_VARARGS),
            DECLARE_METHOD(t_PythonMultiFieldQueryParser, pythonExtension, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(PythonMultiFieldQueryParser, t_PythonMultiFieldQueryParser, ::org::apache::lucene::queryparser::classic::MultiFieldQueryParser, PythonMultiFieldQueryParser, t_PythonMultiFieldQueryParser_init_, 0, 0, t_PythonMultiFieldQueryParser__fields_, 0, 0);

          void t_PythonMultiFieldQueryParser::install(PyObject *module)
          {
            installType(&PY_TYPE(PythonMultiFieldQueryParser), module, "PythonMultiFieldQueryParser", 1);
          }

          void t_PythonMultiFieldQueryParser::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(PythonMultiFieldQueryParser).tp_dict, "class_", make_descriptor(PythonMultiFieldQueryParser::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(PythonMultiFieldQueryParser).tp_dict, "wrapfn_", make_descriptor(t_PythonMultiFieldQueryParser::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(PythonMultiFieldQueryParser).tp_dict, "boxfn_", make_descriptor(boxObject));
            jclass cls = env->getClass(PythonMultiFieldQueryParser::initializeClass);
            JNINativeMethod methods[] = {
              { "getBooleanQuery", "(Ljava/util/List;Z)Lorg/apache/lucene/search/Query;", (void *) t_PythonMultiFieldQueryParser_getBooleanQuery0 },
              { "getFieldQuery_quoted", "(Ljava/lang/String;Ljava/lang/String;Z)Lorg/apache/lucene/search/Query;", (void *) t_PythonMultiFieldQueryParser_getFieldQuery_quoted1 },
              { "getFieldQuery_slop", "(Ljava/lang/String;Ljava/lang/String;I)Lorg/apache/lucene/search/Query;", (void *) t_PythonMultiFieldQueryParser_getFieldQuery_slop2 },
              { "getFuzzyQuery", "(Ljava/lang/String;Ljava/lang/String;F)Lorg/apache/lucene/search/Query;", (void *) t_PythonMultiFieldQueryParser_getFuzzyQuery3 },
              { "getPrefixQuery", "(Ljava/lang/String;Ljava/lang/String;)Lorg/apache/lucene/search/Query;", (void *) t_PythonMultiFieldQueryParser_getPrefixQuery4 },
              { "getRangeQuery", "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;ZZ)Lorg/apache/lucene/search/Query;", (void *) t_PythonMultiFieldQueryParser_getRangeQuery5 },
              { "getWildcardQuery", "(Ljava/lang/String;Ljava/lang/String;)Lorg/apache/lucene/search/Query;", (void *) t_PythonMultiFieldQueryParser_getWildcardQuery6 },
              { "pythonDecRef", "()V", (void *) t_PythonMultiFieldQueryParser_pythonDecRef7 },
            };
            env->registerNatives(cls, methods, 8);
          }

          static PyObject *t_PythonMultiFieldQueryParser_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, PythonMultiFieldQueryParser::initializeClass, 1)))
              return NULL;
            return t_PythonMultiFieldQueryParser::wrap_Object(PythonMultiFieldQueryParser(((t_PythonMultiFieldQueryParser *) arg)->object.this$));
          }
          static PyObject *t_PythonMultiFieldQueryParser_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, PythonMultiFieldQueryParser::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_PythonMultiFieldQueryParser_init_(t_PythonMultiFieldQueryParser *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::util::Version a0((jobject) NULL);
            PyTypeObject **p0;
            JArray< ::java::lang::String > a1((jobject) NULL);
            ::org::apache::lucene::analysis::Analyzer a2((jobject) NULL);
            PythonMultiFieldQueryParser object((jobject) NULL);

            if (!parseArgs(args, "K[sk", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::Analyzer::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1, &a2))
            {
              INT_CALL(object = PythonMultiFieldQueryParser(a0, a1, a2));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            Py_INCREF((PyObject *) self);
            self->object.pythonExtension((jlong) (Py_intptr_t) (void *) self);

            return 0;
          }

          static PyObject *t_PythonMultiFieldQueryParser_finalize(t_PythonMultiFieldQueryParser *self)
          {
            OBJ_CALL(self->object.finalize());
            Py_RETURN_NONE;
          }

          static PyObject *t_PythonMultiFieldQueryParser_getBooleanQuery(t_PythonMultiFieldQueryParser *self, PyObject *args)
          {
            ::java::util::List a0((jobject) NULL);
            PyTypeObject **p0;
            jboolean a1;
            ::org::apache::lucene::search::Query result((jobject) NULL);

            if (!parseArgs(args, "KZ", ::java::util::List::initializeClass, &a0, &p0, ::java::util::t_List::parameters_, &a1))
            {
              OBJ_CALL(result = self->object.getBooleanQuery(a0, a1));
              return ::org::apache::lucene::search::t_Query::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "getBooleanQuery", args);
            return NULL;
          }

          static PyObject *t_PythonMultiFieldQueryParser_getFieldQuery(t_PythonMultiFieldQueryParser *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 3:
              {
                ::java::lang::String a0((jobject) NULL);
                ::java::lang::String a1((jobject) NULL);
                jboolean a2;
                ::org::apache::lucene::search::Query result((jobject) NULL);

                if (!parseArgs(args, "ssZ", &a0, &a1, &a2))
                {
                  OBJ_CALL(result = self->object.getFieldQuery(a0, a1, a2));
                  return ::org::apache::lucene::search::t_Query::wrap_Object(result);
                }
              }
              {
                ::java::lang::String a0((jobject) NULL);
                ::java::lang::String a1((jobject) NULL);
                jint a2;
                ::org::apache::lucene::search::Query result((jobject) NULL);

                if (!parseArgs(args, "ssI", &a0, &a1, &a2))
                {
                  OBJ_CALL(result = self->object.getFieldQuery(a0, a1, a2));
                  return ::org::apache::lucene::search::t_Query::wrap_Object(result);
                }
              }
            }

            PyErr_SetArgsError((PyObject *) self, "getFieldQuery", args);
            return NULL;
          }

          static PyObject *t_PythonMultiFieldQueryParser_getFieldQuery_quoted_super(t_PythonMultiFieldQueryParser *self, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            ::java::lang::String a1((jobject) NULL);
            jboolean a2;
            ::org::apache::lucene::search::Query result((jobject) NULL);

            if (!parseArgs(args, "ssZ", &a0, &a1, &a2))
            {
              OBJ_CALL(result = self->object.getFieldQuery_quoted_super(a0, a1, a2));
              return ::org::apache::lucene::search::t_Query::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "getFieldQuery_quoted_super", args);
            return NULL;
          }

          static PyObject *t_PythonMultiFieldQueryParser_getFieldQuery_slop_super(t_PythonMultiFieldQueryParser *self, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            ::java::lang::String a1((jobject) NULL);
            jint a2;
            ::org::apache::lucene::search::Query result((jobject) NULL);

            if (!parseArgs(args, "ssI", &a0, &a1, &a2))
            {
              OBJ_CALL(result = self->object.getFieldQuery_slop_super(a0, a1, a2));
              return ::org::apache::lucene::search::t_Query::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "getFieldQuery_slop_super", args);
            return NULL;
          }

          static PyObject *t_PythonMultiFieldQueryParser_getFuzzyQuery(t_PythonMultiFieldQueryParser *self, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            ::java::lang::String a1((jobject) NULL);
            jfloat a2;
            ::org::apache::lucene::search::Query result((jobject) NULL);

            if (!parseArgs(args, "ssF", &a0, &a1, &a2))
            {
              OBJ_CALL(result = self->object.getFuzzyQuery(a0, a1, a2));
              return ::org::apache::lucene::search::t_Query::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "getFuzzyQuery", args);
            return NULL;
          }

          static PyObject *t_PythonMultiFieldQueryParser_getPrefixQuery(t_PythonMultiFieldQueryParser *self, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            ::java::lang::String a1((jobject) NULL);
            ::org::apache::lucene::search::Query result((jobject) NULL);

            if (!parseArgs(args, "ss", &a0, &a1))
            {
              OBJ_CALL(result = self->object.getPrefixQuery(a0, a1));
              return ::org::apache::lucene::search::t_Query::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "getPrefixQuery", args);
            return NULL;
          }

          static PyObject *t_PythonMultiFieldQueryParser_getRangeQuery(t_PythonMultiFieldQueryParser *self, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            ::java::lang::String a1((jobject) NULL);
            ::java::lang::String a2((jobject) NULL);
            jboolean a3;
            jboolean a4;
            ::org::apache::lucene::search::Query result((jobject) NULL);

            if (!parseArgs(args, "sssZZ", &a0, &a1, &a2, &a3, &a4))
            {
              OBJ_CALL(result = self->object.getRangeQuery(a0, a1, a2, a3, a4));
              return ::org::apache::lucene::search::t_Query::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "getRangeQuery", args);
            return NULL;
          }

          static PyObject *t_PythonMultiFieldQueryParser_getWildcardQuery(t_PythonMultiFieldQueryParser *self, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            ::java::lang::String a1((jobject) NULL);
            ::org::apache::lucene::search::Query result((jobject) NULL);

            if (!parseArgs(args, "ss", &a0, &a1))
            {
              OBJ_CALL(result = self->object.getWildcardQuery(a0, a1));
              return ::org::apache::lucene::search::t_Query::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "getWildcardQuery", args);
            return NULL;
          }

          static PyObject *t_PythonMultiFieldQueryParser_pythonExtension(t_PythonMultiFieldQueryParser *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 0:
              {
                jlong result;
                OBJ_CALL(result = self->object.pythonExtension());
                return PyLong_FromLongLong((PY_LONG_LONG) result);
              }
              break;
             case 1:
              {
                jlong a0;

                if (!parseArgs(args, "J", &a0))
                {
                  OBJ_CALL(self->object.pythonExtension(a0));
                  Py_RETURN_NONE;
                }
              }
            }

            PyErr_SetArgsError((PyObject *) self, "pythonExtension", args);
            return NULL;
          }

          static jobject JNICALL t_PythonMultiFieldQueryParser_getBooleanQuery0(JNIEnv *jenv, jobject jobj, jobject a0, jboolean a1)
          {
            jlong ptr = jenv->CallLongMethod(jobj, PythonMultiFieldQueryParser::mids$[PythonMultiFieldQueryParser::mid_pythonExtension_54c6a17a]);
            PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
            PythonGIL gil(jenv);
            ::org::apache::lucene::search::Query value((jobject) NULL);
            PyObject *o0 = ::java::util::t_List::wrap_Object(::java::util::List(a0));
            PyObject *o1 = (a1 ? Py_True : Py_False);
            PyObject *result = PyObject_CallMethod(obj, "getBooleanQuery", "OO", o0, o1);
            Py_DECREF(o0);
            if (!result)
              throwPythonError();
            else if (parseArg(result, "k", ::org::apache::lucene::search::Query::initializeClass, &value))
            {
              throwTypeError("getBooleanQuery", result);
              Py_DECREF(result);
            }
            else
            {
              jobj = jenv->NewLocalRef(value.this$);
              Py_DECREF(result);
              return jobj;
            }

            return (jobject) NULL;
          }

          static jobject JNICALL t_PythonMultiFieldQueryParser_getFieldQuery_quoted1(JNIEnv *jenv, jobject jobj, jobject a0, jobject a1, jboolean a2)
          {
            jlong ptr = jenv->CallLongMethod(jobj, PythonMultiFieldQueryParser::mids$[PythonMultiFieldQueryParser::mid_pythonExtension_54c6a17a]);
            PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
            PythonGIL gil(jenv);
            ::org::apache::lucene::search::Query value((jobject) NULL);
            PyObject *o0 = env->fromJString((jstring) a0, 0);
            PyObject *o1 = env->fromJString((jstring) a1, 0);
            PyObject *o2 = (a2 ? Py_True : Py_False);
            PyObject *result = PyObject_CallMethod(obj, "getFieldQuery_quoted", "OOO", o0, o1, o2);
            Py_DECREF(o0);
            Py_DECREF(o1);
            if (!result)
              throwPythonError();
            else if (parseArg(result, "k", ::org::apache::lucene::search::Query::initializeClass, &value))
            {
              throwTypeError("getFieldQuery_quoted", result);
              Py_DECREF(result);
            }
            else
            {
              jobj = jenv->NewLocalRef(value.this$);
              Py_DECREF(result);
              return jobj;
            }

            return (jobject) NULL;
          }

          static jobject JNICALL t_PythonMultiFieldQueryParser_getFieldQuery_slop2(JNIEnv *jenv, jobject jobj, jobject a0, jobject a1, jint a2)
          {
            jlong ptr = jenv->CallLongMethod(jobj, PythonMultiFieldQueryParser::mids$[PythonMultiFieldQueryParser::mid_pythonExtension_54c6a17a]);
            PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
            PythonGIL gil(jenv);
            ::org::apache::lucene::search::Query value((jobject) NULL);
            PyObject *o0 = env->fromJString((jstring) a0, 0);
            PyObject *o1 = env->fromJString((jstring) a1, 0);
            PyObject *result = PyObject_CallMethod(obj, "getFieldQuery_slop", "OOi", o0, o1, (int) a2);
            Py_DECREF(o0);
            Py_DECREF(o1);
            if (!result)
              throwPythonError();
            else if (parseArg(result, "k", ::org::apache::lucene::search::Query::initializeClass, &value))
            {
              throwTypeError("getFieldQuery_slop", result);
              Py_DECREF(result);
            }
            else
            {
              jobj = jenv->NewLocalRef(value.this$);
              Py_DECREF(result);
              return jobj;
            }

            return (jobject) NULL;
          }

          static jobject JNICALL t_PythonMultiFieldQueryParser_getFuzzyQuery3(JNIEnv *jenv, jobject jobj, jobject a0, jobject a1, jfloat a2)
          {
            jlong ptr = jenv->CallLongMethod(jobj, PythonMultiFieldQueryParser::mids$[PythonMultiFieldQueryParser::mid_pythonExtension_54c6a17a]);
            PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
            PythonGIL gil(jenv);
            ::org::apache::lucene::search::Query value((jobject) NULL);
            PyObject *o0 = env->fromJString((jstring) a0, 0);
            PyObject *o1 = env->fromJString((jstring) a1, 0);
            PyObject *result = PyObject_CallMethod(obj, "getFuzzyQuery", "OOf", o0, o1, (float) a2);
            Py_DECREF(o0);
            Py_DECREF(o1);
            if (!result)
              throwPythonError();
            else if (parseArg(result, "k", ::org::apache::lucene::search::Query::initializeClass, &value))
            {
              throwTypeError("getFuzzyQuery", result);
              Py_DECREF(result);
            }
            else
            {
              jobj = jenv->NewLocalRef(value.this$);
              Py_DECREF(result);
              return jobj;
            }

            return (jobject) NULL;
          }

          static jobject JNICALL t_PythonMultiFieldQueryParser_getPrefixQuery4(JNIEnv *jenv, jobject jobj, jobject a0, jobject a1)
          {
            jlong ptr = jenv->CallLongMethod(jobj, PythonMultiFieldQueryParser::mids$[PythonMultiFieldQueryParser::mid_pythonExtension_54c6a17a]);
            PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
            PythonGIL gil(jenv);
            ::org::apache::lucene::search::Query value((jobject) NULL);
            PyObject *o0 = env->fromJString((jstring) a0, 0);
            PyObject *o1 = env->fromJString((jstring) a1, 0);
            PyObject *result = PyObject_CallMethod(obj, "getPrefixQuery", "OO", o0, o1);
            Py_DECREF(o0);
            Py_DECREF(o1);
            if (!result)
              throwPythonError();
            else if (parseArg(result, "k", ::org::apache::lucene::search::Query::initializeClass, &value))
            {
              throwTypeError("getPrefixQuery", result);
              Py_DECREF(result);
            }
            else
            {
              jobj = jenv->NewLocalRef(value.this$);
              Py_DECREF(result);
              return jobj;
            }

            return (jobject) NULL;
          }

          static jobject JNICALL t_PythonMultiFieldQueryParser_getRangeQuery5(JNIEnv *jenv, jobject jobj, jobject a0, jobject a1, jobject a2, jboolean a3, jboolean a4)
          {
            jlong ptr = jenv->CallLongMethod(jobj, PythonMultiFieldQueryParser::mids$[PythonMultiFieldQueryParser::mid_pythonExtension_54c6a17a]);
            PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
            PythonGIL gil(jenv);
            ::org::apache::lucene::search::Query value((jobject) NULL);
            PyObject *o0 = env->fromJString((jstring) a0, 0);
            PyObject *o1 = env->fromJString((jstring) a1, 0);
            PyObject *o2 = env->fromJString((jstring) a2, 0);
            PyObject *o3 = (a3 ? Py_True : Py_False);
            PyObject *o4 = (a4 ? Py_True : Py_False);
            PyObject *result = PyObject_CallMethod(obj, "getRangeQuery", "OOOOO", o0, o1, o2, o3, o4);
            Py_DECREF(o0);
            Py_DECREF(o1);
            Py_DECREF(o2);
            if (!result)
              throwPythonError();
            else if (parseArg(result, "k", ::org::apache::lucene::search::Query::initializeClass, &value))
            {
              throwTypeError("getRangeQuery", result);
              Py_DECREF(result);
            }
            else
            {
              jobj = jenv->NewLocalRef(value.this$);
              Py_DECREF(result);
              return jobj;
            }

            return (jobject) NULL;
          }

          static jobject JNICALL t_PythonMultiFieldQueryParser_getWildcardQuery6(JNIEnv *jenv, jobject jobj, jobject a0, jobject a1)
          {
            jlong ptr = jenv->CallLongMethod(jobj, PythonMultiFieldQueryParser::mids$[PythonMultiFieldQueryParser::mid_pythonExtension_54c6a17a]);
            PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
            PythonGIL gil(jenv);
            ::org::apache::lucene::search::Query value((jobject) NULL);
            PyObject *o0 = env->fromJString((jstring) a0, 0);
            PyObject *o1 = env->fromJString((jstring) a1, 0);
            PyObject *result = PyObject_CallMethod(obj, "getWildcardQuery", "OO", o0, o1);
            Py_DECREF(o0);
            Py_DECREF(o1);
            if (!result)
              throwPythonError();
            else if (parseArg(result, "k", ::org::apache::lucene::search::Query::initializeClass, &value))
            {
              throwTypeError("getWildcardQuery", result);
              Py_DECREF(result);
            }
            else
            {
              jobj = jenv->NewLocalRef(value.this$);
              Py_DECREF(result);
              return jobj;
            }

            return (jobject) NULL;
          }

          static void JNICALL t_PythonMultiFieldQueryParser_pythonDecRef7(JNIEnv *jenv, jobject jobj)
          {
            jlong ptr = jenv->CallLongMethod(jobj, PythonMultiFieldQueryParser::mids$[PythonMultiFieldQueryParser::mid_pythonExtension_54c6a17a]);
            PyObject *obj = (PyObject *) (Py_intptr_t) ptr;

            if (obj != NULL)
            {
              jenv->CallVoidMethod(jobj, PythonMultiFieldQueryParser::mids$[PythonMultiFieldQueryParser::mid_pythonExtension_0ee6df2f], (jlong) 0);
              env->finalizeObject(jenv, obj);
            }
          }

          static PyObject *t_PythonMultiFieldQueryParser_get__self(t_PythonMultiFieldQueryParser *self, void *data)
          {
            jlong ptr;
            OBJ_CALL(ptr = self->object.pythonExtension());
            PyObject *obj = (PyObject *) (Py_intptr_t) ptr;

            if (obj != NULL)
            {
              Py_INCREF(obj);
              return obj;
            }
            else
              Py_RETURN_NONE;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/commongrams/CommonGramsQueryFilterFactory.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/String.h"
#include "java/util/Map.h"
#include "org/apache/lucene/analysis/TokenFilter.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace commongrams {

          ::java::lang::Class *CommonGramsQueryFilterFactory::class$ = NULL;
          jmethodID *CommonGramsQueryFilterFactory::mids$ = NULL;
          bool CommonGramsQueryFilterFactory::live$ = false;

          jclass CommonGramsQueryFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/commongrams/CommonGramsQueryFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4c9e2b1c] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_2969f76d] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/TokenFilter;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          CommonGramsQueryFilterFactory::CommonGramsQueryFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::commongrams::CommonGramsFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_4c9e2b1c, a0.this$)) {}

          ::org::apache::lucene::analysis::TokenFilter CommonGramsQueryFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::TokenFilter(env->callObjectMethod(this$, mids$[mid_create_2969f76d], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace commongrams {
          static PyObject *t_CommonGramsQueryFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_CommonGramsQueryFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_CommonGramsQueryFilterFactory_init_(t_CommonGramsQueryFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_CommonGramsQueryFilterFactory_create(t_CommonGramsQueryFilterFactory *self, PyObject *args);

          static PyMethodDef t_CommonGramsQueryFilterFactory__methods_[] = {
            DECLARE_METHOD(t_CommonGramsQueryFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CommonGramsQueryFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CommonGramsQueryFilterFactory, create, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(CommonGramsQueryFilterFactory, t_CommonGramsQueryFilterFactory, ::org::apache::lucene::analysis::commongrams::CommonGramsFilterFactory, CommonGramsQueryFilterFactory, t_CommonGramsQueryFilterFactory_init_, 0, 0, 0, 0, 0);

          void t_CommonGramsQueryFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(CommonGramsQueryFilterFactory), module, "CommonGramsQueryFilterFactory", 0);
          }

          void t_CommonGramsQueryFilterFactory::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(CommonGramsQueryFilterFactory).tp_dict, "class_", make_descriptor(CommonGramsQueryFilterFactory::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(CommonGramsQueryFilterFactory).tp_dict, "wrapfn_", make_descriptor(t_CommonGramsQueryFilterFactory::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(CommonGramsQueryFilterFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_CommonGramsQueryFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, CommonGramsQueryFilterFactory::initializeClass, 1)))
              return NULL;
            return t_CommonGramsQueryFilterFactory::wrap_Object(CommonGramsQueryFilterFactory(((t_CommonGramsQueryFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_CommonGramsQueryFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, CommonGramsQueryFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_CommonGramsQueryFilterFactory_init_(t_CommonGramsQueryFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            CommonGramsQueryFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = CommonGramsQueryFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_CommonGramsQueryFilterFactory_create(t_CommonGramsQueryFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::TokenFilter result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::t_TokenFilter::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(CommonGramsQueryFilterFactory), (PyObject *) self, "create", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "java/text/Collator.h"
#include "java/util/Locale.h"
#include "java/lang/Class.h"
#include "java/lang/Cloneable.h"
#include "java/util/Comparator.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace java {
  namespace text {

    ::java::lang::Class *Collator::class$ = NULL;
    jmethodID *Collator::mids$ = NULL;
    bool Collator::live$ = false;
    jint Collator::CANONICAL_DECOMPOSITION = (jint) 0;
    jint Collator::FULL_DECOMPOSITION = (jint) 0;
    jint Collator::IDENTICAL = (jint) 0;
    jint Collator::NO_DECOMPOSITION = (jint) 0;
    jint Collator::PRIMARY = (jint) 0;
    jint Collator::SECONDARY = (jint) 0;
    jint Collator::TERTIARY = (jint) 0;

    jclass Collator::initializeClass(bool getOnly)
    {
      if (getOnly)
        return (jclass) (live$ ? class$->this$ : NULL);
      if (class$ == NULL)
      {
        jclass cls = (jclass) env->findClass("java/text/Collator");

        mids$ = new jmethodID[max_mid];
        mids$[mid_clone_846352c3] = env->getMethodID(cls, "clone", "()Ljava/lang/Object;");
        mids$[mid_compare_466982ed] = env->getMethodID(cls, "compare", "(Ljava/lang/Object;Ljava/lang/Object;)I");
        mids$[mid_compare_4a26475d] = env->getMethodID(cls, "compare", "(Ljava/lang/String;Ljava/lang/String;)I");
        mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
        mids$[mid_equals_4a26474e] = env->getMethodID(cls, "equals", "(Ljava/lang/String;Ljava/lang/String;)Z");
        mids$[mid_getAvailableLocales_59cb5b46] = env->getStaticMethodID(cls, "getAvailableLocales", "()[Ljava/util/Locale;");
        mids$[mid_getDecomposition_54c6a179] = env->getMethodID(cls, "getDecomposition", "()I");
        mids$[mid_getInstance_44b7fa29] = env->getStaticMethodID(cls, "getInstance", "()Ljava/text/Collator;");
        mids$[mid_getInstance_e12c63f2] = env->getStaticMethodID(cls, "getInstance", "(Ljava/util/Locale;)Ljava/text/Collator;");
        mids$[mid_getStrength_54c6a179] = env->getMethodID(cls, "getStrength", "()I");
        mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
        mids$[mid_setDecomposition_39c7bd3c] = env->getMethodID(cls, "setDecomposition", "(I)V");
        mids$[mid_setStrength_39c7bd3c] = env->getMethodID(cls, "setStrength", "(I)V");

        class$ = (::java::lang::Class *) new JObject(cls);
        cls = (jclass) class$->this$;

        CANONICAL_DECOMPOSITION = env->getStaticIntField(cls, "CANONICAL_DECOMPOSITION");
        FULL_DECOMPOSITION = env->getStaticIntField(cls, "FULL_DECOMPOSITION");
        IDENTICAL = env->getStaticIntField(cls, "IDENTICAL");
        NO_DECOMPOSITION = env->getStaticIntField(cls, "NO_DECOMPOSITION");
        PRIMARY = env->getStaticIntField(cls, "PRIMARY");
        SECONDARY = env->getStaticIntField(cls, "SECONDARY");
        TERTIARY = env->getStaticIntField(cls, "TERTIARY");
        live$ = true;
      }
      return (jclass) class$->this$;
    }

    ::java::lang::Object Collator::clone() const
    {
      return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_clone_846352c3]));
    }

    jint Collator::compare(const ::java::lang::Object & a0, const ::java::lang::Object & a1) const
    {
      return env->callIntMethod(this$, mids$[mid_compare_466982ed], a0.this$, a1.this$);
    }

    jint Collator::compare(const ::java::lang::String & a0, const ::java::lang::String & a1) const
    {
      return env->callIntMethod(this$, mids$[mid_compare_4a26475d], a0.this$, a1.this$);
    }

    jboolean Collator::equals(const ::java::lang::Object & a0) const
    {
      return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
    }

    jboolean Collator::equals(const ::java::lang::String & a0, const ::java::lang::String & a1) const
    {
      return env->callBooleanMethod(this$, mids$[mid_equals_4a26474e], a0.this$, a1.this$);
    }

    JArray< ::java::util::Locale > Collator::getAvailableLocales()
    {
      jclass cls = env->getClass(initializeClass);
      return JArray< ::java::util::Locale >(env->callStaticObjectMethod(cls, mids$[mid_getAvailableLocales_59cb5b46]));
    }

    jint Collator::getDecomposition() const
    {
      return env->callIntMethod(this$, mids$[mid_getDecomposition_54c6a179]);
    }

    Collator Collator::getInstance()
    {
      jclass cls = env->getClass(initializeClass);
      return Collator(env->callStaticObjectMethod(cls, mids$[mid_getInstance_44b7fa29]));
    }

    Collator Collator::getInstance(const ::java::util::Locale & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return Collator(env->callStaticObjectMethod(cls, mids$[mid_getInstance_e12c63f2], a0.this$));
    }

    jint Collator::getStrength() const
    {
      return env->callIntMethod(this$, mids$[mid_getStrength_54c6a179]);
    }

    jint Collator::hashCode() const
    {
      return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
    }

    void Collator::setDecomposition(jint a0) const
    {
      env->callVoidMethod(this$, mids$[mid_setDecomposition_39c7bd3c], a0);
    }

    void Collator::setStrength(jint a0) const
    {
      env->callVoidMethod(this$, mids$[mid_setStrength_39c7bd3c], a0);
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace java {
  namespace text {
    static PyObject *t_Collator_cast_(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Collator_instance_(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Collator_clone(t_Collator *self);
    static PyObject *t_Collator_compare(t_Collator *self, PyObject *args);
    static PyObject *t_Collator_equals(t_Collator *self, PyObject *args);
    static PyObject *t_Collator_getAvailableLocales(PyTypeObject *type);
    static PyObject *t_Collator_getDecomposition(t_Collator *self);
    static PyObject *t_Collator_getInstance(PyTypeObject *type, PyObject *args);
    static PyObject *t_Collator_getStrength(t_Collator *self);
    static PyObject *t_Collator_hashCode(t_Collator *self, PyObject *args);
    static PyObject *t_Collator_setDecomposition(t_Collator *self, PyObject *arg);
    static PyObject *t_Collator_setStrength(t_Collator *self, PyObject *arg);
    static PyObject *t_Collator_get__availableLocales(t_Collator *self, void *data);
    static PyObject *t_Collator_get__decomposition(t_Collator *self, void *data);
    static int t_Collator_set__decomposition(t_Collator *self, PyObject *arg, void *data);
    static PyObject *t_Collator_get__instance(t_Collator *self, void *data);
    static PyObject *t_Collator_get__strength(t_Collator *self, void *data);
    static int t_Collator_set__strength(t_Collator *self, PyObject *arg, void *data);
    static PyGetSetDef t_Collator__fields_[] = {
      DECLARE_GET_FIELD(t_Collator, availableLocales),
      DECLARE_GETSET_FIELD(t_Collator, decomposition),
      DECLARE_GET_FIELD(t_Collator, instance),
      DECLARE_GETSET_FIELD(t_Collator, strength),
      { NULL, NULL, NULL, NULL, NULL }
    };

    static PyMethodDef t_Collator__methods_[] = {
      DECLARE_METHOD(t_Collator, cast_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Collator, instance_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Collator, clone, METH_NOARGS),
      DECLARE_METHOD(t_Collator, compare, METH_VARARGS),
      DECLARE_METHOD(t_Collator, equals, METH_VARARGS),
      DECLARE_METHOD(t_Collator, getAvailableLocales, METH_NOARGS | METH_CLASS),
      DECLARE_METHOD(t_Collator, getDecomposition, METH_NOARGS),
      DECLARE_METHOD(t_Collator, getInstance, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Collator, getStrength, METH_NOARGS),
      DECLARE_METHOD(t_Collator, hashCode, METH_VARARGS),
      DECLARE_METHOD(t_Collator, setDecomposition, METH_O),
      DECLARE_METHOD(t_Collator, setStrength, METH_O),
      { NULL, NULL, 0, NULL }
    };

    DECLARE_TYPE(Collator, t_Collator, ::java::lang::Object, Collator, abstract_init, 0, 0, t_Collator__fields_, 0, 0);

    void t_Collator::install(PyObject *module)
    {
      installType(&PY_TYPE(Collator), module, "Collator", 0);
    }

    void t_Collator::initialize(PyObject *module)
    {
      PyDict_SetItemString(PY_TYPE(Collator).tp_dict, "class_", make_descriptor(Collator::initializeClass, 1));
      PyDict_SetItemString(PY_TYPE(Collator).tp_dict, "wrapfn_", make_descriptor(t_Collator::wrap_jobject));
      PyDict_SetItemString(PY_TYPE(Collator).tp_dict, "boxfn_", make_descriptor(boxObject));
      env->getClass(Collator::initializeClass);
      PyDict_SetItemString(PY_TYPE(Collator).tp_dict, "CANONICAL_DECOMPOSITION", make_descriptor(Collator::CANONICAL_DECOMPOSITION));
      PyDict_SetItemString(PY_TYPE(Collator).tp_dict, "FULL_DECOMPOSITION", make_descriptor(Collator::FULL_DECOMPOSITION));
      PyDict_SetItemString(PY_TYPE(Collator).tp_dict, "IDENTICAL", make_descriptor(Collator::IDENTICAL));
      PyDict_SetItemString(PY_TYPE(Collator).tp_dict, "NO_DECOMPOSITION", make_descriptor(Collator::NO_DECOMPOSITION));
      PyDict_SetItemString(PY_TYPE(Collator).tp_dict, "PRIMARY", make_descriptor(Collator::PRIMARY));
      PyDict_SetItemString(PY_TYPE(Collator).tp_dict, "SECONDARY", make_descriptor(Collator::SECONDARY));
      PyDict_SetItemString(PY_TYPE(Collator).tp_dict, "TERTIARY", make_descriptor(Collator::TERTIARY));
    }

    static PyObject *t_Collator_cast_(PyTypeObject *type, PyObject *arg)
    {
      if (!(arg = castCheck(arg, Collator::initializeClass, 1)))
        return NULL;
      return t_Collator::wrap_Object(Collator(((t_Collator *) arg)->object.this$));
    }
    static PyObject *t_Collator_instance_(PyTypeObject *type, PyObject *arg)
    {
      if (!castCheck(arg, Collator::initializeClass, 0))
        Py_RETURN_FALSE;
      Py_RETURN_TRUE;
    }

    static PyObject *t_Collator_clone(t_Collator *self)
    {
      ::java::lang::Object result((jobject) NULL);
      OBJ_CALL(result = self->object.clone());
      return ::java::lang::t_Object::wrap_Object(result);
    }

    static PyObject *t_Collator_compare(t_Collator *self, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 2:
        {
          ::java::lang::Object a0((jobject) NULL);
          ::java::lang::Object a1((jobject) NULL);
          jint result;

          if (!parseArgs(args, "oo", &a0, &a1))
          {
            OBJ_CALL(result = self->object.compare(a0, a1));
            return PyInt_FromLong((long) result);
          }
        }
        {
          ::java::lang::String a0((jobject) NULL);
          ::java::lang::String a1((jobject) NULL);
          jint result;

          if (!parseArgs(args, "ss", &a0, &a1))
          {
            OBJ_CALL(result = self->object.compare(a0, a1));
            return PyInt_FromLong((long) result);
          }
        }
      }

      PyErr_SetArgsError((PyObject *) self, "compare", args);
      return NULL;
    }

    static PyObject *t_Collator_equals(t_Collator *self, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 1:
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.equals(a0));
            Py_RETURN_BOOL(result);
          }
        }
        break;
       case 2:
        {
          ::java::lang::String a0((jobject) NULL);
          ::java::lang::String a1((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "ss", &a0, &a1))
          {
            OBJ_CALL(result = self->object.equals(a0, a1));
            Py_RETURN_BOOL(result);
          }
        }
      }

      return callSuper(&PY_TYPE(Collator), (PyObject *) self, "equals", args, 2);
    }

    static PyObject *t_Collator_getAvailableLocales(PyTypeObject *type)
    {
      JArray< ::java::util::Locale > result((jobject) NULL);
      OBJ_CALL(result = ::java::text::Collator::getAvailableLocales());
      return JArray<jobject>(result.this$).wrap(::java::util::t_Locale::wrap_jobject);
    }

    static PyObject *t_Collator_getDecomposition(t_Collator *self)
    {
      jint result;
      OBJ_CALL(result = self->object.getDecomposition());
      return PyInt_FromLong((long) result);
    }

    static PyObject *t_Collator_getInstance(PyTypeObject *type, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 0:
        {
          Collator result((jobject) NULL);
          OBJ_CALL(result = ::java::text::Collator::getInstance());
          return t_Collator::wrap_Object(result);
        }
        break;
       case 1:
        {
          ::java::util::Locale a0((jobject) NULL);
          Collator result((jobject) NULL);

          if (!parseArgs(args, "k", ::java::util::Locale::initializeClass, &a0))
          {
            OBJ_CALL(result = ::java::text::Collator::getInstance(a0));
            return t_Collator::wrap_Object(result);
          }
        }
      }

      PyErr_SetArgsError(type, "getInstance", args);
      return NULL;
    }

    static PyObject *t_Collator_getStrength(t_Collator *self)
    {
      jint result;
      OBJ_CALL(result = self->object.getStrength());
      return PyInt_FromLong((long) result);
    }

    static PyObject *t_Collator_hashCode(t_Collator *self, PyObject *args)
    {
      jint result;

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.hashCode());
        return PyInt_FromLong((long) result);
      }

      return callSuper(&PY_TYPE(Collator), (PyObject *) self, "hashCode", args, 2);
    }

    static PyObject *t_Collator_setDecomposition(t_Collator *self, PyObject *arg)
    {
      jint a0;

      if (!parseArg(arg, "I", &a0))
      {
        OBJ_CALL(self->object.setDecomposition(a0));
        Py_RETURN_NONE;
      }

      PyErr_SetArgsError((PyObject *) self, "setDecomposition", arg);
      return NULL;
    }

    static PyObject *t_Collator_setStrength(t_Collator *self, PyObject *arg)
    {
      jint a0;

      if (!parseArg(arg, "I", &a0))
      {
        OBJ_CALL(self->object.setStrength(a0));
        Py_RETURN_NONE;
      }

      PyErr_SetArgsError((PyObject *) self, "setStrength", arg);
      return NULL;
    }

    static PyObject *t_Collator_get__availableLocales(t_Collator *self, void *data)
    {
      JArray< ::java::util::Locale > value((jobject) NULL);
      OBJ_CALL(value = self->object.getAvailableLocales());
      return JArray<jobject>(value.this$).wrap(::java::util::t_Locale::wrap_jobject);
    }

    static PyObject *t_Collator_get__decomposition(t_Collator *self, void *data)
    {
      jint value;
      OBJ_CALL(value = self->object.getDecomposition());
      return PyInt_FromLong((long) value);
    }
    static int t_Collator_set__decomposition(t_Collator *self, PyObject *arg, void *data)
    {
      {
        jint value;
        if (!parseArg(arg, "I", &value))
        {
          INT_CALL(self->object.setDecomposition(value));
          return 0;
        }
      }
      PyErr_SetArgsError((PyObject *) self, "decomposition", arg);
      return -1;
    }

    static PyObject *t_Collator_get__instance(t_Collator *self, void *data)
    {
      Collator value((jobject) NULL);
      OBJ_CALL(value = self->object.getInstance());
      return t_Collator::wrap_Object(value);
    }

    static PyObject *t_Collator_get__strength(t_Collator *self, void *data)
    {
      jint value;
      OBJ_CALL(value = self->object.getStrength());
      return PyInt_FromLong((long) value);
    }
    static int t_Collator_set__strength(t_Collator *self, PyObject *arg, void *data)
    {
      {
        jint value;
        if (!parseArg(arg, "I", &value))
        {
          INT_CALL(self->object.setStrength(value));
          return 0;
        }
      }
      PyErr_SetArgsError((PyObject *) self, "strength", arg);
      return -1;
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/precedence/processors/BooleanModifiersQueryNodeProcessor.h"
#include "org/apache/lucene/queryparser/flexible/core/QueryNodeException.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/QueryNode.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace precedence {
            namespace processors {

              ::java::lang::Class *BooleanModifiersQueryNodeProcessor::class$ = NULL;
              jmethodID *BooleanModifiersQueryNodeProcessor::mids$ = NULL;
              bool BooleanModifiersQueryNodeProcessor::live$ = false;

              jclass BooleanModifiersQueryNodeProcessor::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/precedence/processors/BooleanModifiersQueryNodeProcessor");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
                  mids$[mid_process_6705aed7] = env->getMethodID(cls, "process", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;)Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;");
                  mids$[mid_preProcessNode_6705aed7] = env->getMethodID(cls, "preProcessNode", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;)Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;");
                  mids$[mid_setChildrenOrder_4f378251] = env->getMethodID(cls, "setChildrenOrder", "(Ljava/util/List;)Ljava/util/List;");
                  mids$[mid_postProcessNode_6705aed7] = env->getMethodID(cls, "postProcessNode", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;)Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              BooleanModifiersQueryNodeProcessor::BooleanModifiersQueryNodeProcessor() : ::org::apache::lucene::queryparser::flexible::core::processors::QueryNodeProcessorImpl(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

              ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode BooleanModifiersQueryNodeProcessor::process(const ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode & a0) const
              {
                return ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode(env->callObjectMethod(this$, mids$[mid_process_6705aed7], a0.this$));
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace precedence {
            namespace processors {
              static PyObject *t_BooleanModifiersQueryNodeProcessor_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_BooleanModifiersQueryNodeProcessor_instance_(PyTypeObject *type, PyObject *arg);
              static int t_BooleanModifiersQueryNodeProcessor_init_(t_BooleanModifiersQueryNodeProcessor *self, PyObject *args, PyObject *kwds);
              static PyObject *t_BooleanModifiersQueryNodeProcessor_process(t_BooleanModifiersQueryNodeProcessor *self, PyObject *args);

              static PyMethodDef t_BooleanModifiersQueryNodeProcessor__methods_[] = {
                DECLARE_METHOD(t_BooleanModifiersQueryNodeProcessor, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_BooleanModifiersQueryNodeProcessor, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_BooleanModifiersQueryNodeProcessor, process, METH_VARARGS),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(BooleanModifiersQueryNodeProcessor, t_BooleanModifiersQueryNodeProcessor, ::org::apache::lucene::queryparser::flexible::core::processors::QueryNodeProcessorImpl, BooleanModifiersQueryNodeProcessor, t_BooleanModifiersQueryNodeProcessor_init_, 0, 0, 0, 0, 0);

              void t_BooleanModifiersQueryNodeProcessor::install(PyObject *module)
              {
                installType(&PY_TYPE(BooleanModifiersQueryNodeProcessor), module, "BooleanModifiersQueryNodeProcessor", 0);
              }

              void t_BooleanModifiersQueryNodeProcessor::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(BooleanModifiersQueryNodeProcessor).tp_dict, "class_", make_descriptor(BooleanModifiersQueryNodeProcessor::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(BooleanModifiersQueryNodeProcessor).tp_dict, "wrapfn_", make_descriptor(t_BooleanModifiersQueryNodeProcessor::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(BooleanModifiersQueryNodeProcessor).tp_dict, "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_BooleanModifiersQueryNodeProcessor_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, BooleanModifiersQueryNodeProcessor::initializeClass, 1)))
                  return NULL;
                return t_BooleanModifiersQueryNodeProcessor::wrap_Object(BooleanModifiersQueryNodeProcessor(((t_BooleanModifiersQueryNodeProcessor *) arg)->object.this$));
              }
              static PyObject *t_BooleanModifiersQueryNodeProcessor_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, BooleanModifiersQueryNodeProcessor::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_BooleanModifiersQueryNodeProcessor_init_(t_BooleanModifiersQueryNodeProcessor *self, PyObject *args, PyObject *kwds)
              {
                BooleanModifiersQueryNodeProcessor object((jobject) NULL);

                INT_CALL(object = BooleanModifiersQueryNodeProcessor());
                self->object = object;

                return 0;
              }

              static PyObject *t_BooleanModifiersQueryNodeProcessor_process(t_BooleanModifiersQueryNodeProcessor *self, PyObject *args)
              {
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode a0((jobject) NULL);
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode result((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode::initializeClass, &a0))
                {
                  OBJ_CALL(result = self->object.process(a0));
                  return ::org::apache::lucene::queryparser::flexible::core::nodes::t_QueryNode::wrap_Object(result);
                }

                return callSuper(&PY_TYPE(BooleanModifiersQueryNodeProcessor), (PyObject *) self, "process", args, 2);
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/FieldsConsumer.h"
#include "java/io/Closeable.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/index/FieldInfo.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/index/MergeState.h"
#include "org/apache/lucene/index/Fields.h"
#include "org/apache/lucene/codecs/TermsConsumer.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {

        ::java::lang::Class *FieldsConsumer::class$ = NULL;
        jmethodID *FieldsConsumer::mids$ = NULL;
        bool FieldsConsumer::live$ = false;

        jclass FieldsConsumer::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/FieldsConsumer");

            mids$ = new jmethodID[max_mid];
            mids$[mid_addField_eb6fab90] = env->getMethodID(cls, "addField", "(Lorg/apache/lucene/index/FieldInfo;)Lorg/apache/lucene/codecs/TermsConsumer;");
            mids$[mid_close_54c6a166] = env->getMethodID(cls, "close", "()V");
            mids$[mid_merge_f282c82a] = env->getMethodID(cls, "merge", "(Lorg/apache/lucene/index/MergeState;Lorg/apache/lucene/index/Fields;)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        ::org::apache::lucene::codecs::TermsConsumer FieldsConsumer::addField(const ::org::apache::lucene::index::FieldInfo & a0) const
        {
          return ::org::apache::lucene::codecs::TermsConsumer(env->callObjectMethod(this$, mids$[mid_addField_eb6fab90], a0.this$));
        }

        void FieldsConsumer::close() const
        {
          env->callVoidMethod(this$, mids$[mid_close_54c6a166]);
        }

        void FieldsConsumer::merge(const ::org::apache::lucene::index::MergeState & a0, const ::org::apache::lucene::index::Fields & a1) const
        {
          env->callVoidMethod(this$, mids$[mid_merge_f282c82a], a0.this$, a1.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        static PyObject *t_FieldsConsumer_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FieldsConsumer_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FieldsConsumer_addField(t_FieldsConsumer *self, PyObject *arg);
        static PyObject *t_FieldsConsumer_close(t_FieldsConsumer *self);
        static PyObject *t_FieldsConsumer_merge(t_FieldsConsumer *self, PyObject *args);

        static PyMethodDef t_FieldsConsumer__methods_[] = {
          DECLARE_METHOD(t_FieldsConsumer, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FieldsConsumer, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FieldsConsumer, addField, METH_O),
          DECLARE_METHOD(t_FieldsConsumer, close, METH_NOARGS),
          DECLARE_METHOD(t_FieldsConsumer, merge, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(FieldsConsumer, t_FieldsConsumer, ::java::lang::Object, FieldsConsumer, abstract_init, 0, 0, 0, 0, 0);

        void t_FieldsConsumer::install(PyObject *module)
        {
          installType(&PY_TYPE(FieldsConsumer), module, "FieldsConsumer", 0);
        }

        void t_FieldsConsumer::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(FieldsConsumer).tp_dict, "class_", make_descriptor(FieldsConsumer::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(FieldsConsumer).tp_dict, "wrapfn_", make_descriptor(t_FieldsConsumer::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(FieldsConsumer).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_FieldsConsumer_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, FieldsConsumer::initializeClass, 1)))
            return NULL;
          return t_FieldsConsumer::wrap_Object(FieldsConsumer(((t_FieldsConsumer *) arg)->object.this$));
        }
        static PyObject *t_FieldsConsumer_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, FieldsConsumer::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_FieldsConsumer_addField(t_FieldsConsumer *self, PyObject *arg)
        {
          ::org::apache::lucene::index::FieldInfo a0((jobject) NULL);
          ::org::apache::lucene::codecs::TermsConsumer result((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::index::FieldInfo::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.addField(a0));
            return ::org::apache::lucene::codecs::t_TermsConsumer::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "addField", arg);
          return NULL;
        }

        static PyObject *t_FieldsConsumer_close(t_FieldsConsumer *self)
        {
          OBJ_CALL(self->object.close());
          Py_RETURN_NONE;
        }

        static PyObject *t_FieldsConsumer_merge(t_FieldsConsumer *self, PyObject *args)
        {
          ::org::apache::lucene::index::MergeState a0((jobject) NULL);
          ::org::apache::lucene::index::Fields a1((jobject) NULL);

          if (!parseArgs(args, "kk", ::org::apache::lucene::index::MergeState::initializeClass, ::org::apache::lucene::index::Fields::initializeClass, &a0, &a1))
          {
            OBJ_CALL(self->object.merge(a0, a1));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "merge", args);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/lv/LatvianAnalyzer.h"
#include "org/apache/lucene/util/Version.h"
#include "java/lang/String.h"
#include "org/apache/lucene/analysis/util/CharArraySet.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace lv {

          ::java::lang::Class *LatvianAnalyzer::class$ = NULL;
          jmethodID *LatvianAnalyzer::mids$ = NULL;
          bool LatvianAnalyzer::live$ = false;
          ::java::lang::String *LatvianAnalyzer::DEFAULT_STOPWORD_FILE = NULL;

          jclass LatvianAnalyzer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/lv/LatvianAnalyzer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_0d96cf33] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;)V");
              mids$[mid_init$_83eafe28] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/analysis/util/CharArraySet;)V");
              mids$[mid_init$_c9d7e4a3] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/analysis/util/CharArraySet;Lorg/apache/lucene/analysis/util/CharArraySet;)V");
              mids$[mid_getDefaultStopSet_d2d3505c] = env->getStaticMethodID(cls, "getDefaultStopSet", "()Lorg/apache/lucene/analysis/util/CharArraySet;");
              mids$[mid_createComponents_1be39cae] = env->getMethodID(cls, "createComponents", "(Ljava/lang/String;Ljava/io/Reader;)Lorg/apache/lucene/analysis/Analyzer$TokenStreamComponents;");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              DEFAULT_STOPWORD_FILE = new ::java::lang::String(env->getStaticObjectField(cls, "DEFAULT_STOPWORD_FILE", "Ljava/lang/String;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          LatvianAnalyzer::LatvianAnalyzer(const ::org::apache::lucene::util::Version & a0) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_0d96cf33, a0.this$)) {}

          LatvianAnalyzer::LatvianAnalyzer(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::analysis::util::CharArraySet & a1) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_83eafe28, a0.this$, a1.this$)) {}

          LatvianAnalyzer::LatvianAnalyzer(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::analysis::util::CharArraySet & a1, const ::org::apache::lucene::analysis::util::CharArraySet & a2) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_c9d7e4a3, a0.this$, a1.this$, a2.this$)) {}

          ::org::apache::lucene::analysis::util::CharArraySet LatvianAnalyzer::getDefaultStopSet()
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::analysis::util::CharArraySet(env->callStaticObjectMethod(cls, mids$[mid_getDefaultStopSet_d2d3505c]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace lv {
          static PyObject *t_LatvianAnalyzer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_LatvianAnalyzer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_LatvianAnalyzer_init_(t_LatvianAnalyzer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_LatvianAnalyzer_getDefaultStopSet(PyTypeObject *type);
          static PyObject *t_LatvianAnalyzer_get__defaultStopSet(t_LatvianAnalyzer *self, void *data);
          static PyGetSetDef t_LatvianAnalyzer__fields_[] = {
            DECLARE_GET_FIELD(t_LatvianAnalyzer, defaultStopSet),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_LatvianAnalyzer__methods_[] = {
            DECLARE_METHOD(t_LatvianAnalyzer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_LatvianAnalyzer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_LatvianAnalyzer, getDefaultStopSet, METH_NOARGS | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(LatvianAnalyzer, t_LatvianAnalyzer, ::org::apache::lucene::analysis::util::StopwordAnalyzerBase, LatvianAnalyzer, t_LatvianAnalyzer_init_, 0, 0, t_LatvianAnalyzer__fields_, 0, 0);

          void t_LatvianAnalyzer::install(PyObject *module)
          {
            installType(&PY_TYPE(LatvianAnalyzer), module, "LatvianAnalyzer", 0);
          }

          void t_LatvianAnalyzer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(LatvianAnalyzer).tp_dict, "class_", make_descriptor(LatvianAnalyzer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(LatvianAnalyzer).tp_dict, "wrapfn_", make_descriptor(t_LatvianAnalyzer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(LatvianAnalyzer).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(LatvianAnalyzer::initializeClass);
            PyDict_SetItemString(PY_TYPE(LatvianAnalyzer).tp_dict, "DEFAULT_STOPWORD_FILE", make_descriptor(j2p(*LatvianAnalyzer::DEFAULT_STOPWORD_FILE)));
          }

          static PyObject *t_LatvianAnalyzer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, LatvianAnalyzer::initializeClass, 1)))
              return NULL;
            return t_LatvianAnalyzer::wrap_Object(LatvianAnalyzer(((t_LatvianAnalyzer *) arg)->object.this$));
          }
          static PyObject *t_LatvianAnalyzer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, LatvianAnalyzer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_LatvianAnalyzer_init_(t_LatvianAnalyzer *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                LatvianAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "K", ::org::apache::lucene::util::Version::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_))
                {
                  INT_CALL(object = LatvianAnalyzer(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 2:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                ::org::apache::lucene::analysis::util::CharArraySet a1((jobject) NULL);
                PyTypeObject **p1;
                LatvianAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "KK", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1, &p1, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_))
                {
                  INT_CALL(object = LatvianAnalyzer(a0, a1));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 3:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                ::org::apache::lucene::analysis::util::CharArraySet a1((jobject) NULL);
                PyTypeObject **p1;
                ::org::apache::lucene::analysis::util::CharArraySet a2((jobject) NULL);
                PyTypeObject **p2;
                LatvianAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "KKK", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1, &p1, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_, &a2, &p2, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_))
                {
                  INT_CALL(object = LatvianAnalyzer(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_LatvianAnalyzer_getDefaultStopSet(PyTypeObject *type)
          {
            ::org::apache::lucene::analysis::util::CharArraySet result((jobject) NULL);
            OBJ_CALL(result = ::org::apache::lucene::analysis::lv::LatvianAnalyzer::getDefaultStopSet());
            return ::org::apache::lucene::analysis::util::t_CharArraySet::wrap_Object(result);
          }

          static PyObject *t_LatvianAnalyzer_get__defaultStopSet(t_LatvianAnalyzer *self, void *data)
          {
            ::org::apache::lucene::analysis::util::CharArraySet value((jobject) NULL);
            OBJ_CALL(value = self->object.getDefaultStopSet());
            return ::org::apache::lucene::analysis::util::t_CharArraySet::wrap_Object(value);
          }
        }
      }
    }
  }
}
