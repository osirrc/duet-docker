#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/xml/DOMUtils.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace xml {

          ::java::lang::Class *DOMUtils::class$ = NULL;
          jmethodID *DOMUtils::mids$ = NULL;
          bool DOMUtils::live$ = false;

          jclass DOMUtils::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/xml/DOMUtils");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          DOMUtils::DOMUtils() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace xml {
          static PyObject *t_DOMUtils_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_DOMUtils_instance_(PyTypeObject *type, PyObject *arg);
          static int t_DOMUtils_init_(t_DOMUtils *self, PyObject *args, PyObject *kwds);

          static PyMethodDef t_DOMUtils__methods_[] = {
            DECLARE_METHOD(t_DOMUtils, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_DOMUtils, instance_, METH_O | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(DOMUtils, t_DOMUtils, ::java::lang::Object, DOMUtils, t_DOMUtils_init_, 0, 0, 0, 0, 0);

          void t_DOMUtils::install(PyObject *module)
          {
            installType(&PY_TYPE(DOMUtils), module, "DOMUtils", 0);
          }

          void t_DOMUtils::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(DOMUtils).tp_dict, "class_", make_descriptor(DOMUtils::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(DOMUtils).tp_dict, "wrapfn_", make_descriptor(t_DOMUtils::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(DOMUtils).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_DOMUtils_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, DOMUtils::initializeClass, 1)))
              return NULL;
            return t_DOMUtils::wrap_Object(DOMUtils(((t_DOMUtils *) arg)->object.this$));
          }
          static PyObject *t_DOMUtils_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, DOMUtils::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_DOMUtils_init_(t_DOMUtils *self, PyObject *args, PyObject *kwds)
          {
            DOMUtils object((jobject) NULL);

            INT_CALL(object = DOMUtils());
            self->object = object;

            return 0;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/ar/ArabicLetterTokenizer.h"
#include "org/apache/lucene/util/Version.h"
#include "org/apache/lucene/util/AttributeFactory.h"
#include "java/io/Reader.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ar {

          ::java::lang::Class *ArabicLetterTokenizer::class$ = NULL;
          jmethodID *ArabicLetterTokenizer::mids$ = NULL;
          bool ArabicLetterTokenizer::live$ = false;

          jclass ArabicLetterTokenizer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/ar/ArabicLetterTokenizer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_7997a391] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Ljava/io/Reader;)V");
              mids$[mid_init$_be7a3ecf] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/util/AttributeFactory;Ljava/io/Reader;)V");
              mids$[mid_isTokenChar_39c7bd30] = env->getMethodID(cls, "isTokenChar", "(I)Z");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ArabicLetterTokenizer::ArabicLetterTokenizer(const ::org::apache::lucene::util::Version & a0, const ::java::io::Reader & a1) : ::org::apache::lucene::analysis::core::LetterTokenizer(env->newObject(initializeClass, &mids$, mid_init$_7997a391, a0.this$, a1.this$)) {}

          ArabicLetterTokenizer::ArabicLetterTokenizer(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::util::AttributeFactory & a1, const ::java::io::Reader & a2) : ::org::apache::lucene::analysis::core::LetterTokenizer(env->newObject(initializeClass, &mids$, mid_init$_be7a3ecf, a0.this$, a1.this$, a2.this$)) {}
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ar {
          static PyObject *t_ArabicLetterTokenizer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_ArabicLetterTokenizer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_ArabicLetterTokenizer_init_(t_ArabicLetterTokenizer *self, PyObject *args, PyObject *kwds);

          static PyMethodDef t_ArabicLetterTokenizer__methods_[] = {
            DECLARE_METHOD(t_ArabicLetterTokenizer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ArabicLetterTokenizer, instance_, METH_O | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(ArabicLetterTokenizer, t_ArabicLetterTokenizer, ::org::apache::lucene::analysis::core::LetterTokenizer, ArabicLetterTokenizer, t_ArabicLetterTokenizer_init_, 0, 0, 0, 0, 0);

          void t_ArabicLetterTokenizer::install(PyObject *module)
          {
            installType(&PY_TYPE(ArabicLetterTokenizer), module, "ArabicLetterTokenizer", 0);
          }

          void t_ArabicLetterTokenizer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(ArabicLetterTokenizer).tp_dict, "class_", make_descriptor(ArabicLetterTokenizer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(ArabicLetterTokenizer).tp_dict, "wrapfn_", make_descriptor(t_ArabicLetterTokenizer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(ArabicLetterTokenizer).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_ArabicLetterTokenizer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, ArabicLetterTokenizer::initializeClass, 1)))
              return NULL;
            return t_ArabicLetterTokenizer::wrap_Object(ArabicLetterTokenizer(((t_ArabicLetterTokenizer *) arg)->object.this$));
          }
          static PyObject *t_ArabicLetterTokenizer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, ArabicLetterTokenizer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_ArabicLetterTokenizer_init_(t_ArabicLetterTokenizer *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 2:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                ::java::io::Reader a1((jobject) NULL);
                ArabicLetterTokenizer object((jobject) NULL);

                if (!parseArgs(args, "Kk", ::org::apache::lucene::util::Version::initializeClass, ::java::io::Reader::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1))
                {
                  INT_CALL(object = ArabicLetterTokenizer(a0, a1));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 3:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                ::org::apache::lucene::util::AttributeFactory a1((jobject) NULL);
                ::java::io::Reader a2((jobject) NULL);
                ArabicLetterTokenizer object((jobject) NULL);

                if (!parseArgs(args, "Kkk", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::util::AttributeFactory::initializeClass, ::java::io::Reader::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1, &a2))
                {
                  INT_CALL(object = ArabicLetterTokenizer(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queries/CustomScoreProvider.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/search/Explanation.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {

        ::java::lang::Class *CustomScoreProvider::class$ = NULL;
        jmethodID *CustomScoreProvider::mids$ = NULL;
        bool CustomScoreProvider::live$ = false;

        jclass CustomScoreProvider::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/queries/CustomScoreProvider");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_a6f59947] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/AtomicReaderContext;)V");
            mids$[mid_customExplain_3236f395] = env->getMethodID(cls, "customExplain", "(ILorg/apache/lucene/search/Explanation;Lorg/apache/lucene/search/Explanation;)Lorg/apache/lucene/search/Explanation;");
            mids$[mid_customExplain_bec3370d] = env->getMethodID(cls, "customExplain", "(ILorg/apache/lucene/search/Explanation;[Lorg/apache/lucene/search/Explanation;)Lorg/apache/lucene/search/Explanation;");
            mids$[mid_customScore_f55b9306] = env->getMethodID(cls, "customScore", "(IFF)F");
            mids$[mid_customScore_c9ca8e84] = env->getMethodID(cls, "customScore", "(IF[F)F");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        CustomScoreProvider::CustomScoreProvider(const ::org::apache::lucene::index::AtomicReaderContext & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_a6f59947, a0.this$)) {}

        ::org::apache::lucene::search::Explanation CustomScoreProvider::customExplain(jint a0, const ::org::apache::lucene::search::Explanation & a1, const ::org::apache::lucene::search::Explanation & a2) const
        {
          return ::org::apache::lucene::search::Explanation(env->callObjectMethod(this$, mids$[mid_customExplain_3236f395], a0, a1.this$, a2.this$));
        }

        ::org::apache::lucene::search::Explanation CustomScoreProvider::customExplain(jint a0, const ::org::apache::lucene::search::Explanation & a1, const JArray< ::org::apache::lucene::search::Explanation > & a2) const
        {
          return ::org::apache::lucene::search::Explanation(env->callObjectMethod(this$, mids$[mid_customExplain_bec3370d], a0, a1.this$, a2.this$));
        }

        jfloat CustomScoreProvider::customScore(jint a0, jfloat a1, jfloat a2) const
        {
          return env->callFloatMethod(this$, mids$[mid_customScore_f55b9306], a0, a1, a2);
        }

        jfloat CustomScoreProvider::customScore(jint a0, jfloat a1, const JArray< jfloat > & a2) const
        {
          return env->callFloatMethod(this$, mids$[mid_customScore_c9ca8e84], a0, a1, a2.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        static PyObject *t_CustomScoreProvider_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_CustomScoreProvider_instance_(PyTypeObject *type, PyObject *arg);
        static int t_CustomScoreProvider_init_(t_CustomScoreProvider *self, PyObject *args, PyObject *kwds);
        static PyObject *t_CustomScoreProvider_customExplain(t_CustomScoreProvider *self, PyObject *args);
        static PyObject *t_CustomScoreProvider_customScore(t_CustomScoreProvider *self, PyObject *args);

        static PyMethodDef t_CustomScoreProvider__methods_[] = {
          DECLARE_METHOD(t_CustomScoreProvider, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_CustomScoreProvider, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_CustomScoreProvider, customExplain, METH_VARARGS),
          DECLARE_METHOD(t_CustomScoreProvider, customScore, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(CustomScoreProvider, t_CustomScoreProvider, ::java::lang::Object, CustomScoreProvider, t_CustomScoreProvider_init_, 0, 0, 0, 0, 0);

        void t_CustomScoreProvider::install(PyObject *module)
        {
          installType(&PY_TYPE(CustomScoreProvider), module, "CustomScoreProvider", 0);
        }

        void t_CustomScoreProvider::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(CustomScoreProvider).tp_dict, "class_", make_descriptor(CustomScoreProvider::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(CustomScoreProvider).tp_dict, "wrapfn_", make_descriptor(t_CustomScoreProvider::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(CustomScoreProvider).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_CustomScoreProvider_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, CustomScoreProvider::initializeClass, 1)))
            return NULL;
          return t_CustomScoreProvider::wrap_Object(CustomScoreProvider(((t_CustomScoreProvider *) arg)->object.this$));
        }
        static PyObject *t_CustomScoreProvider_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, CustomScoreProvider::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_CustomScoreProvider_init_(t_CustomScoreProvider *self, PyObject *args, PyObject *kwds)
        {
          ::org::apache::lucene::index::AtomicReaderContext a0((jobject) NULL);
          CustomScoreProvider object((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &a0))
          {
            INT_CALL(object = CustomScoreProvider(a0));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_CustomScoreProvider_customExplain(t_CustomScoreProvider *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 3:
            {
              jint a0;
              ::org::apache::lucene::search::Explanation a1((jobject) NULL);
              ::org::apache::lucene::search::Explanation a2((jobject) NULL);
              ::org::apache::lucene::search::Explanation result((jobject) NULL);

              if (!parseArgs(args, "Ikk", ::org::apache::lucene::search::Explanation::initializeClass, ::org::apache::lucene::search::Explanation::initializeClass, &a0, &a1, &a2))
              {
                OBJ_CALL(result = self->object.customExplain(a0, a1, a2));
                return ::org::apache::lucene::search::t_Explanation::wrap_Object(result);
              }
            }
            {
              jint a0;
              ::org::apache::lucene::search::Explanation a1((jobject) NULL);
              JArray< ::org::apache::lucene::search::Explanation > a2((jobject) NULL);
              ::org::apache::lucene::search::Explanation result((jobject) NULL);

              if (!parseArgs(args, "Ik[k", ::org::apache::lucene::search::Explanation::initializeClass, ::org::apache::lucene::search::Explanation::initializeClass, &a0, &a1, &a2))
              {
                OBJ_CALL(result = self->object.customExplain(a0, a1, a2));
                return ::org::apache::lucene::search::t_Explanation::wrap_Object(result);
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "customExplain", args);
          return NULL;
        }

        static PyObject *t_CustomScoreProvider_customScore(t_CustomScoreProvider *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 3:
            {
              jint a0;
              jfloat a1;
              jfloat a2;
              jfloat result;

              if (!parseArgs(args, "IFF", &a0, &a1, &a2))
              {
                OBJ_CALL(result = self->object.customScore(a0, a1, a2));
                return PyFloat_FromDouble((double) result);
              }
            }
            {
              jint a0;
              jfloat a1;
              JArray< jfloat > a2((jobject) NULL);
              jfloat result;

              if (!parseArgs(args, "IF[F", &a0, &a1, &a2))
              {
                OBJ_CALL(result = self->object.customScore(a0, a1, a2));
                return PyFloat_FromDouble((double) result);
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "customScore", args);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/document/TextField.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "org/apache/lucene/document/Field$Store.h"
#include "java/lang/Class.h"
#include "java/io/Reader.h"
#include "org/apache/lucene/document/FieldType.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace document {

        ::java::lang::Class *TextField::class$ = NULL;
        jmethodID *TextField::mids$ = NULL;
        bool TextField::live$ = false;
        ::org::apache::lucene::document::FieldType *TextField::TYPE_NOT_STORED = NULL;
        ::org::apache::lucene::document::FieldType *TextField::TYPE_STORED = NULL;

        jclass TextField::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/document/TextField");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_7d0c5392] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Lorg/apache/lucene/analysis/TokenStream;)V");
            mids$[mid_init$_23e5278e] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Ljava/io/Reader;)V");
            mids$[mid_init$_064fa087] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Ljava/lang/String;Lorg/apache/lucene/document/Field$Store;)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            cls = (jclass) class$->this$;

            TYPE_NOT_STORED = new ::org::apache::lucene::document::FieldType(env->getStaticObjectField(cls, "TYPE_NOT_STORED", "Lorg/apache/lucene/document/FieldType;"));
            TYPE_STORED = new ::org::apache::lucene::document::FieldType(env->getStaticObjectField(cls, "TYPE_STORED", "Lorg/apache/lucene/document/FieldType;"));
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        TextField::TextField(const ::java::lang::String & a0, const ::org::apache::lucene::analysis::TokenStream & a1) : ::org::apache::lucene::document::Field(env->newObject(initializeClass, &mids$, mid_init$_7d0c5392, a0.this$, a1.this$)) {}

        TextField::TextField(const ::java::lang::String & a0, const ::java::io::Reader & a1) : ::org::apache::lucene::document::Field(env->newObject(initializeClass, &mids$, mid_init$_23e5278e, a0.this$, a1.this$)) {}

        TextField::TextField(const ::java::lang::String & a0, const ::java::lang::String & a1, const ::org::apache::lucene::document::Field$Store & a2) : ::org::apache::lucene::document::Field(env->newObject(initializeClass, &mids$, mid_init$_064fa087, a0.this$, a1.this$, a2.this$)) {}
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace document {
        static PyObject *t_TextField_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_TextField_instance_(PyTypeObject *type, PyObject *arg);
        static int t_TextField_init_(t_TextField *self, PyObject *args, PyObject *kwds);

        static PyMethodDef t_TextField__methods_[] = {
          DECLARE_METHOD(t_TextField, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_TextField, instance_, METH_O | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(TextField, t_TextField, ::org::apache::lucene::document::Field, TextField, t_TextField_init_, 0, 0, 0, 0, 0);

        void t_TextField::install(PyObject *module)
        {
          installType(&PY_TYPE(TextField), module, "TextField", 0);
        }

        void t_TextField::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(TextField).tp_dict, "class_", make_descriptor(TextField::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(TextField).tp_dict, "wrapfn_", make_descriptor(t_TextField::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(TextField).tp_dict, "boxfn_", make_descriptor(boxObject));
          env->getClass(TextField::initializeClass);
          PyDict_SetItemString(PY_TYPE(TextField).tp_dict, "TYPE_NOT_STORED", make_descriptor(::org::apache::lucene::document::t_FieldType::wrap_Object(*TextField::TYPE_NOT_STORED)));
          PyDict_SetItemString(PY_TYPE(TextField).tp_dict, "TYPE_STORED", make_descriptor(::org::apache::lucene::document::t_FieldType::wrap_Object(*TextField::TYPE_STORED)));
        }

        static PyObject *t_TextField_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, TextField::initializeClass, 1)))
            return NULL;
          return t_TextField::wrap_Object(TextField(((t_TextField *) arg)->object.this$));
        }
        static PyObject *t_TextField_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, TextField::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_TextField_init_(t_TextField *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 2:
            {
              ::java::lang::String a0((jobject) NULL);
              ::org::apache::lucene::analysis::TokenStream a1((jobject) NULL);
              TextField object((jobject) NULL);

              if (!parseArgs(args, "sk", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0, &a1))
              {
                INT_CALL(object = TextField(a0, a1));
                self->object = object;
                break;
              }
            }
            {
              ::java::lang::String a0((jobject) NULL);
              ::java::io::Reader a1((jobject) NULL);
              TextField object((jobject) NULL);

              if (!parseArgs(args, "sk", ::java::io::Reader::initializeClass, &a0, &a1))
              {
                INT_CALL(object = TextField(a0, a1));
                self->object = object;
                break;
              }
            }
            goto err;
           case 3:
            {
              ::java::lang::String a0((jobject) NULL);
              ::java::lang::String a1((jobject) NULL);
              ::org::apache::lucene::document::Field$Store a2((jobject) NULL);
              PyTypeObject **p2;
              TextField object((jobject) NULL);

              if (!parseArgs(args, "ssK", ::org::apache::lucene::document::Field$Store::initializeClass, &a0, &a1, &a2, &p2, ::org::apache::lucene::document::t_Field$Store::parameters_))
              {
                INT_CALL(object = TextField(a0, a1, a2));
                self->object = object;
                break;
              }
            }
           default:
           err:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/FieldDoc.h"
#include "java/lang/Object.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *FieldDoc::class$ = NULL;
        jmethodID *FieldDoc::mids$ = NULL;
        jfieldID *FieldDoc::fids$ = NULL;
        bool FieldDoc::live$ = false;

        jclass FieldDoc::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/FieldDoc");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_abdf2c51] = env->getMethodID(cls, "<init>", "(IF)V");
            mids$[mid_init$_8f5d1bf7] = env->getMethodID(cls, "<init>", "(IF[Ljava/lang/Object;)V");
            mids$[mid_init$_87a6361f] = env->getMethodID(cls, "<init>", "(IF[Ljava/lang/Object;I)V");
            mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

            fids$ = new jfieldID[max_fid];
            fids$[fid_fields] = env->getFieldID(cls, "fields", "[Ljava/lang/Object;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        FieldDoc::FieldDoc(jint a0, jfloat a1) : ::org::apache::lucene::search::ScoreDoc(env->newObject(initializeClass, &mids$, mid_init$_abdf2c51, a0, a1)) {}

        FieldDoc::FieldDoc(jint a0, jfloat a1, const JArray< ::java::lang::Object > & a2) : ::org::apache::lucene::search::ScoreDoc(env->newObject(initializeClass, &mids$, mid_init$_8f5d1bf7, a0, a1, a2.this$)) {}

        FieldDoc::FieldDoc(jint a0, jfloat a1, const JArray< ::java::lang::Object > & a2, jint a3) : ::org::apache::lucene::search::ScoreDoc(env->newObject(initializeClass, &mids$, mid_init$_87a6361f, a0, a1, a2.this$, a3)) {}

        ::java::lang::String FieldDoc::toString() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
        }

        JArray< ::java::lang::Object > FieldDoc::_get_fields() const
        {
          return JArray< ::java::lang::Object >(env->getObjectField(this$, fids$[fid_fields]));
        }

        void FieldDoc::_set_fields(const JArray< ::java::lang::Object > & a0) const
        {
          env->setObjectField(this$, fids$[fid_fields], a0.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_FieldDoc_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FieldDoc_instance_(PyTypeObject *type, PyObject *arg);
        static int t_FieldDoc_init_(t_FieldDoc *self, PyObject *args, PyObject *kwds);
        static PyObject *t_FieldDoc_toString(t_FieldDoc *self, PyObject *args);
        static PyObject *t_FieldDoc_get__fields(t_FieldDoc *self, void *data);
        static int t_FieldDoc_set__fields(t_FieldDoc *self, PyObject *arg, void *data);

        static PyGetSetDef t_FieldDoc__fields_[] = {
          DECLARE_GETSET_FIELD(t_FieldDoc, fields),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_FieldDoc__methods_[] = {
          DECLARE_METHOD(t_FieldDoc, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FieldDoc, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FieldDoc, toString, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(FieldDoc, t_FieldDoc, ::org::apache::lucene::search::ScoreDoc, FieldDoc, t_FieldDoc_init_, 0, 0, t_FieldDoc__fields_, 0, 0);

        void t_FieldDoc::install(PyObject *module)
        {
          installType(&PY_TYPE(FieldDoc), module, "FieldDoc", 0);
        }

        void t_FieldDoc::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(FieldDoc).tp_dict, "class_", make_descriptor(FieldDoc::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(FieldDoc).tp_dict, "wrapfn_", make_descriptor(t_FieldDoc::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(FieldDoc).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_FieldDoc_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, FieldDoc::initializeClass, 1)))
            return NULL;
          return t_FieldDoc::wrap_Object(FieldDoc(((t_FieldDoc *) arg)->object.this$));
        }
        static PyObject *t_FieldDoc_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, FieldDoc::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_FieldDoc_init_(t_FieldDoc *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 2:
            {
              jint a0;
              jfloat a1;
              FieldDoc object((jobject) NULL);

              if (!parseArgs(args, "IF", &a0, &a1))
              {
                INT_CALL(object = FieldDoc(a0, a1));
                self->object = object;
                break;
              }
            }
            goto err;
           case 3:
            {
              jint a0;
              jfloat a1;
              JArray< ::java::lang::Object > a2((jobject) NULL);
              FieldDoc object((jobject) NULL);

              if (!parseArgs(args, "IF[o", &a0, &a1, &a2))
              {
                INT_CALL(object = FieldDoc(a0, a1, a2));
                self->object = object;
                break;
              }
            }
            goto err;
           case 4:
            {
              jint a0;
              jfloat a1;
              JArray< ::java::lang::Object > a2((jobject) NULL);
              jint a3;
              FieldDoc object((jobject) NULL);

              if (!parseArgs(args, "IF[oI", &a0, &a1, &a2, &a3))
              {
                INT_CALL(object = FieldDoc(a0, a1, a2, a3));
                self->object = object;
                break;
              }
            }
           default:
           err:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_FieldDoc_toString(t_FieldDoc *self, PyObject *args)
        {
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.toString());
            return j2p(result);
          }

          return callSuper(&PY_TYPE(FieldDoc), (PyObject *) self, "toString", args, 2);
        }

        static PyObject *t_FieldDoc_get__fields(t_FieldDoc *self, void *data)
        {
          JArray< ::java::lang::Object > value((jobject) NULL);
          OBJ_CALL(value = self->object._get_fields());
          return JArray<jobject>(value.this$).wrap(::java::lang::t_Object::wrap_jobject);
        }
        static int t_FieldDoc_set__fields(t_FieldDoc *self, PyObject *arg, void *data)
        {
          JArray< ::java::lang::Object > value((jobject) NULL);
          if (!parseArg(arg, "[o", &value))
          {
            INT_CALL(self->object._set_fields(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "fields", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/grouping/AbstractDistinctValuesCollector.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/search/Scorer.h"
#include "java/util/List.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace grouping {

          ::java::lang::Class *AbstractDistinctValuesCollector::class$ = NULL;
          jmethodID *AbstractDistinctValuesCollector::mids$ = NULL;
          bool AbstractDistinctValuesCollector::live$ = false;

          jclass AbstractDistinctValuesCollector::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/grouping/AbstractDistinctValuesCollector");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_acceptsDocsOutOfOrder_54c6a16a] = env->getMethodID(cls, "acceptsDocsOutOfOrder", "()Z");
              mids$[mid_getGroups_87851566] = env->getMethodID(cls, "getGroups", "()Ljava/util/List;");
              mids$[mid_setScorer_8be0880c] = env->getMethodID(cls, "setScorer", "(Lorg/apache/lucene/search/Scorer;)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          AbstractDistinctValuesCollector::AbstractDistinctValuesCollector() : ::org::apache::lucene::search::Collector(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          jboolean AbstractDistinctValuesCollector::acceptsDocsOutOfOrder() const
          {
            return env->callBooleanMethod(this$, mids$[mid_acceptsDocsOutOfOrder_54c6a16a]);
          }

          ::java::util::List AbstractDistinctValuesCollector::getGroups() const
          {
            return ::java::util::List(env->callObjectMethod(this$, mids$[mid_getGroups_87851566]));
          }

          void AbstractDistinctValuesCollector::setScorer(const ::org::apache::lucene::search::Scorer & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setScorer_8be0880c], a0.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"
#include "org/apache/lucene/search/grouping/AbstractDistinctValuesCollector$GroupCount.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace grouping {
          static PyObject *t_AbstractDistinctValuesCollector_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_AbstractDistinctValuesCollector_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_AbstractDistinctValuesCollector_of_(t_AbstractDistinctValuesCollector *self, PyObject *args);
          static int t_AbstractDistinctValuesCollector_init_(t_AbstractDistinctValuesCollector *self, PyObject *args, PyObject *kwds);
          static PyObject *t_AbstractDistinctValuesCollector_acceptsDocsOutOfOrder(t_AbstractDistinctValuesCollector *self, PyObject *args);
          static PyObject *t_AbstractDistinctValuesCollector_getGroups(t_AbstractDistinctValuesCollector *self);
          static PyObject *t_AbstractDistinctValuesCollector_setScorer(t_AbstractDistinctValuesCollector *self, PyObject *args);
          static PyObject *t_AbstractDistinctValuesCollector_get__groups(t_AbstractDistinctValuesCollector *self, void *data);
          static int t_AbstractDistinctValuesCollector_set__scorer(t_AbstractDistinctValuesCollector *self, PyObject *arg, void *data);
          static PyObject *t_AbstractDistinctValuesCollector_get__parameters_(t_AbstractDistinctValuesCollector *self, void *data);
          static PyGetSetDef t_AbstractDistinctValuesCollector__fields_[] = {
            DECLARE_GET_FIELD(t_AbstractDistinctValuesCollector, groups),
            DECLARE_SET_FIELD(t_AbstractDistinctValuesCollector, scorer),
            DECLARE_GET_FIELD(t_AbstractDistinctValuesCollector, parameters_),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_AbstractDistinctValuesCollector__methods_[] = {
            DECLARE_METHOD(t_AbstractDistinctValuesCollector, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_AbstractDistinctValuesCollector, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_AbstractDistinctValuesCollector, of_, METH_VARARGS),
            DECLARE_METHOD(t_AbstractDistinctValuesCollector, acceptsDocsOutOfOrder, METH_VARARGS),
            DECLARE_METHOD(t_AbstractDistinctValuesCollector, getGroups, METH_NOARGS),
            DECLARE_METHOD(t_AbstractDistinctValuesCollector, setScorer, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(AbstractDistinctValuesCollector, t_AbstractDistinctValuesCollector, ::org::apache::lucene::search::Collector, AbstractDistinctValuesCollector, t_AbstractDistinctValuesCollector_init_, 0, 0, t_AbstractDistinctValuesCollector__fields_, 0, 0);
          PyObject *t_AbstractDistinctValuesCollector::wrap_Object(const AbstractDistinctValuesCollector& object, PyTypeObject *p0)
          {
            PyObject *obj = t_AbstractDistinctValuesCollector::wrap_Object(object);
            if (obj != NULL && obj != Py_None)
            {
              t_AbstractDistinctValuesCollector *self = (t_AbstractDistinctValuesCollector *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          PyObject *t_AbstractDistinctValuesCollector::wrap_jobject(const jobject& object, PyTypeObject *p0)
          {
            PyObject *obj = t_AbstractDistinctValuesCollector::wrap_jobject(object);
            if (obj != NULL && obj != Py_None)
            {
              t_AbstractDistinctValuesCollector *self = (t_AbstractDistinctValuesCollector *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          void t_AbstractDistinctValuesCollector::install(PyObject *module)
          {
            installType(&PY_TYPE(AbstractDistinctValuesCollector), module, "AbstractDistinctValuesCollector", 0);
            PyDict_SetItemString(PY_TYPE(AbstractDistinctValuesCollector).tp_dict, "GroupCount", make_descriptor(&PY_TYPE(AbstractDistinctValuesCollector$GroupCount)));
          }

          void t_AbstractDistinctValuesCollector::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(AbstractDistinctValuesCollector).tp_dict, "class_", make_descriptor(AbstractDistinctValuesCollector::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(AbstractDistinctValuesCollector).tp_dict, "wrapfn_", make_descriptor(t_AbstractDistinctValuesCollector::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(AbstractDistinctValuesCollector).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_AbstractDistinctValuesCollector_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, AbstractDistinctValuesCollector::initializeClass, 1)))
              return NULL;
            return t_AbstractDistinctValuesCollector::wrap_Object(AbstractDistinctValuesCollector(((t_AbstractDistinctValuesCollector *) arg)->object.this$));
          }
          static PyObject *t_AbstractDistinctValuesCollector_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, AbstractDistinctValuesCollector::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_AbstractDistinctValuesCollector_of_(t_AbstractDistinctValuesCollector *self, PyObject *args)
          {
            if (!parseArg(args, "T", 1, &(self->parameters)))
              Py_RETURN_SELF;
            return PyErr_SetArgsError((PyObject *) self, "of_", args);
          }

          static int t_AbstractDistinctValuesCollector_init_(t_AbstractDistinctValuesCollector *self, PyObject *args, PyObject *kwds)
          {
            AbstractDistinctValuesCollector object((jobject) NULL);

            INT_CALL(object = AbstractDistinctValuesCollector());
            self->object = object;

            return 0;
          }

          static PyObject *t_AbstractDistinctValuesCollector_acceptsDocsOutOfOrder(t_AbstractDistinctValuesCollector *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.acceptsDocsOutOfOrder());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(AbstractDistinctValuesCollector), (PyObject *) self, "acceptsDocsOutOfOrder", args, 2);
          }

          static PyObject *t_AbstractDistinctValuesCollector_getGroups(t_AbstractDistinctValuesCollector *self)
          {
            ::java::util::List result((jobject) NULL);
            OBJ_CALL(result = self->object.getGroups());
            return ::java::util::t_List::wrap_Object(result, self->parameters[0]);
          }

          static PyObject *t_AbstractDistinctValuesCollector_setScorer(t_AbstractDistinctValuesCollector *self, PyObject *args)
          {
            ::org::apache::lucene::search::Scorer a0((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::search::Scorer::initializeClass, &a0))
            {
              OBJ_CALL(self->object.setScorer(a0));
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(AbstractDistinctValuesCollector), (PyObject *) self, "setScorer", args, 2);
          }
          static PyObject *t_AbstractDistinctValuesCollector_get__parameters_(t_AbstractDistinctValuesCollector *self, void *data)
          {
            return typeParameters(self->parameters, sizeof(self->parameters));
          }

          static PyObject *t_AbstractDistinctValuesCollector_get__groups(t_AbstractDistinctValuesCollector *self, void *data)
          {
            ::java::util::List value((jobject) NULL);
            OBJ_CALL(value = self->object.getGroups());
            return ::java::util::t_List::wrap_Object(value);
          }

          static int t_AbstractDistinctValuesCollector_set__scorer(t_AbstractDistinctValuesCollector *self, PyObject *arg, void *data)
          {
            {
              ::org::apache::lucene::search::Scorer value((jobject) NULL);
              if (!parseArg(arg, "k", ::org::apache::lucene::search::Scorer::initializeClass, &value))
              {
                INT_CALL(self->object.setScorer(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "scorer", arg);
            return -1;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/es/SpanishAnalyzer.h"
#include "org/apache/lucene/util/Version.h"
#include "java/lang/String.h"
#include "org/apache/lucene/analysis/util/CharArraySet.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace es {

          ::java::lang::Class *SpanishAnalyzer::class$ = NULL;
          jmethodID *SpanishAnalyzer::mids$ = NULL;
          bool SpanishAnalyzer::live$ = false;
          ::java::lang::String *SpanishAnalyzer::DEFAULT_STOPWORD_FILE = NULL;

          jclass SpanishAnalyzer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/es/SpanishAnalyzer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_0d96cf33] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;)V");
              mids$[mid_init$_83eafe28] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/analysis/util/CharArraySet;)V");
              mids$[mid_init$_c9d7e4a3] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/analysis/util/CharArraySet;Lorg/apache/lucene/analysis/util/CharArraySet;)V");
              mids$[mid_getDefaultStopSet_d2d3505c] = env->getStaticMethodID(cls, "getDefaultStopSet", "()Lorg/apache/lucene/analysis/util/CharArraySet;");
              mids$[mid_createComponents_1be39cae] = env->getMethodID(cls, "createComponents", "(Ljava/lang/String;Ljava/io/Reader;)Lorg/apache/lucene/analysis/Analyzer$TokenStreamComponents;");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              DEFAULT_STOPWORD_FILE = new ::java::lang::String(env->getStaticObjectField(cls, "DEFAULT_STOPWORD_FILE", "Ljava/lang/String;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          SpanishAnalyzer::SpanishAnalyzer(const ::org::apache::lucene::util::Version & a0) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_0d96cf33, a0.this$)) {}

          SpanishAnalyzer::SpanishAnalyzer(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::analysis::util::CharArraySet & a1) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_83eafe28, a0.this$, a1.this$)) {}

          SpanishAnalyzer::SpanishAnalyzer(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::analysis::util::CharArraySet & a1, const ::org::apache::lucene::analysis::util::CharArraySet & a2) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_c9d7e4a3, a0.this$, a1.this$, a2.this$)) {}

          ::org::apache::lucene::analysis::util::CharArraySet SpanishAnalyzer::getDefaultStopSet()
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::analysis::util::CharArraySet(env->callStaticObjectMethod(cls, mids$[mid_getDefaultStopSet_d2d3505c]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace es {
          static PyObject *t_SpanishAnalyzer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SpanishAnalyzer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_SpanishAnalyzer_init_(t_SpanishAnalyzer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_SpanishAnalyzer_getDefaultStopSet(PyTypeObject *type);
          static PyObject *t_SpanishAnalyzer_get__defaultStopSet(t_SpanishAnalyzer *self, void *data);
          static PyGetSetDef t_SpanishAnalyzer__fields_[] = {
            DECLARE_GET_FIELD(t_SpanishAnalyzer, defaultStopSet),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_SpanishAnalyzer__methods_[] = {
            DECLARE_METHOD(t_SpanishAnalyzer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SpanishAnalyzer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SpanishAnalyzer, getDefaultStopSet, METH_NOARGS | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(SpanishAnalyzer, t_SpanishAnalyzer, ::org::apache::lucene::analysis::util::StopwordAnalyzerBase, SpanishAnalyzer, t_SpanishAnalyzer_init_, 0, 0, t_SpanishAnalyzer__fields_, 0, 0);

          void t_SpanishAnalyzer::install(PyObject *module)
          {
            installType(&PY_TYPE(SpanishAnalyzer), module, "SpanishAnalyzer", 0);
          }

          void t_SpanishAnalyzer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(SpanishAnalyzer).tp_dict, "class_", make_descriptor(SpanishAnalyzer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(SpanishAnalyzer).tp_dict, "wrapfn_", make_descriptor(t_SpanishAnalyzer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(SpanishAnalyzer).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(SpanishAnalyzer::initializeClass);
            PyDict_SetItemString(PY_TYPE(SpanishAnalyzer).tp_dict, "DEFAULT_STOPWORD_FILE", make_descriptor(j2p(*SpanishAnalyzer::DEFAULT_STOPWORD_FILE)));
          }

          static PyObject *t_SpanishAnalyzer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, SpanishAnalyzer::initializeClass, 1)))
              return NULL;
            return t_SpanishAnalyzer::wrap_Object(SpanishAnalyzer(((t_SpanishAnalyzer *) arg)->object.this$));
          }
          static PyObject *t_SpanishAnalyzer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, SpanishAnalyzer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_SpanishAnalyzer_init_(t_SpanishAnalyzer *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                SpanishAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "K", ::org::apache::lucene::util::Version::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_))
                {
                  INT_CALL(object = SpanishAnalyzer(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 2:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                ::org::apache::lucene::analysis::util::CharArraySet a1((jobject) NULL);
                PyTypeObject **p1;
                SpanishAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "KK", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1, &p1, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_))
                {
                  INT_CALL(object = SpanishAnalyzer(a0, a1));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 3:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                ::org::apache::lucene::analysis::util::CharArraySet a1((jobject) NULL);
                PyTypeObject **p1;
                ::org::apache::lucene::analysis::util::CharArraySet a2((jobject) NULL);
                PyTypeObject **p2;
                SpanishAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "KKK", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1, &p1, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_, &a2, &p2, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_))
                {
                  INT_CALL(object = SpanishAnalyzer(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_SpanishAnalyzer_getDefaultStopSet(PyTypeObject *type)
          {
            ::org::apache::lucene::analysis::util::CharArraySet result((jobject) NULL);
            OBJ_CALL(result = ::org::apache::lucene::analysis::es::SpanishAnalyzer::getDefaultStopSet());
            return ::org::apache::lucene::analysis::util::t_CharArraySet::wrap_Object(result);
          }

          static PyObject *t_SpanishAnalyzer_get__defaultStopSet(t_SpanishAnalyzer *self, void *data)
          {
            ::org::apache::lucene::analysis::util::CharArraySet value((jobject) NULL);
            OBJ_CALL(value = self->object.getDefaultStopSet());
            return ::org::apache::lucene::analysis::util::t_CharArraySet::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/ga/IrishLowerCaseFilter.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ga {

          ::java::lang::Class *IrishLowerCaseFilter::class$ = NULL;
          jmethodID *IrishLowerCaseFilter::mids$ = NULL;
          bool IrishLowerCaseFilter::live$ = false;

          jclass IrishLowerCaseFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/ga/IrishLowerCaseFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_c7c794dc] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;)V");
              mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          IrishLowerCaseFilter::IrishLowerCaseFilter(const ::org::apache::lucene::analysis::TokenStream & a0) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_c7c794dc, a0.this$)) {}

          jboolean IrishLowerCaseFilter::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_54c6a16a]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ga {
          static PyObject *t_IrishLowerCaseFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_IrishLowerCaseFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_IrishLowerCaseFilter_init_(t_IrishLowerCaseFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_IrishLowerCaseFilter_incrementToken(t_IrishLowerCaseFilter *self, PyObject *args);

          static PyMethodDef t_IrishLowerCaseFilter__methods_[] = {
            DECLARE_METHOD(t_IrishLowerCaseFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_IrishLowerCaseFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_IrishLowerCaseFilter, incrementToken, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(IrishLowerCaseFilter, t_IrishLowerCaseFilter, ::org::apache::lucene::analysis::TokenFilter, IrishLowerCaseFilter, t_IrishLowerCaseFilter_init_, 0, 0, 0, 0, 0);

          void t_IrishLowerCaseFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(IrishLowerCaseFilter), module, "IrishLowerCaseFilter", 0);
          }

          void t_IrishLowerCaseFilter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(IrishLowerCaseFilter).tp_dict, "class_", make_descriptor(IrishLowerCaseFilter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(IrishLowerCaseFilter).tp_dict, "wrapfn_", make_descriptor(t_IrishLowerCaseFilter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(IrishLowerCaseFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_IrishLowerCaseFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, IrishLowerCaseFilter::initializeClass, 1)))
              return NULL;
            return t_IrishLowerCaseFilter::wrap_Object(IrishLowerCaseFilter(((t_IrishLowerCaseFilter *) arg)->object.this$));
          }
          static PyObject *t_IrishLowerCaseFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, IrishLowerCaseFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_IrishLowerCaseFilter_init_(t_IrishLowerCaseFilter *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            IrishLowerCaseFilter object((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              INT_CALL(object = IrishLowerCaseFilter(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_IrishLowerCaseFilter_incrementToken(t_IrishLowerCaseFilter *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(IrishLowerCaseFilter), (PyObject *) self, "incrementToken", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/fst/Util.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "org/apache/lucene/util/IntsRef.h"
#include "java/lang/Long.h"
#include "java/lang/Class.h"
#include "java/io/Writer.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/util/fst/FST$BytesReader.h"
#include "org/apache/lucene/util/fst/FST.h"
#include "java/util/Comparator.h"
#include "java/lang/CharSequence.h"
#include "org/apache/lucene/util/fst/FST$Arc.h"
#include "org/apache/lucene/util/fst/Util$TopResults.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace fst {

          ::java::lang::Class *Util::class$ = NULL;
          jmethodID *Util::mids$ = NULL;
          bool Util::live$ = false;

          jclass Util::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/util/fst/Util");

              mids$ = new jmethodID[max_mid];
              mids$[mid_get_4f30bf3f] = env->getStaticMethodID(cls, "get", "(Lorg/apache/lucene/util/fst/FST;Lorg/apache/lucene/util/IntsRef;)Ljava/lang/Object;");
              mids$[mid_get_6697be43] = env->getStaticMethodID(cls, "get", "(Lorg/apache/lucene/util/fst/FST;Lorg/apache/lucene/util/BytesRef;)Ljava/lang/Object;");
              mids$[mid_getByOutput_40734dd8] = env->getStaticMethodID(cls, "getByOutput", "(Lorg/apache/lucene/util/fst/FST;J)Lorg/apache/lucene/util/IntsRef;");
              mids$[mid_getByOutput_6ff1a968] = env->getStaticMethodID(cls, "getByOutput", "(Lorg/apache/lucene/util/fst/FST;JLorg/apache/lucene/util/fst/FST$BytesReader;Lorg/apache/lucene/util/fst/FST$Arc;Lorg/apache/lucene/util/fst/FST$Arc;Lorg/apache/lucene/util/IntsRef;)Lorg/apache/lucene/util/IntsRef;");
              mids$[mid_readCeilArc_3a8e72bb] = env->getStaticMethodID(cls, "readCeilArc", "(ILorg/apache/lucene/util/fst/FST;Lorg/apache/lucene/util/fst/FST$Arc;Lorg/apache/lucene/util/fst/FST$Arc;Lorg/apache/lucene/util/fst/FST$BytesReader;)Lorg/apache/lucene/util/fst/FST$Arc;");
              mids$[mid_shortestPaths_7b374667] = env->getStaticMethodID(cls, "shortestPaths", "(Lorg/apache/lucene/util/fst/FST;Lorg/apache/lucene/util/fst/FST$Arc;Ljava/lang/Object;Ljava/util/Comparator;IZ)Lorg/apache/lucene/util/fst/Util$TopResults;");
              mids$[mid_toBytesRef_27bd6535] = env->getStaticMethodID(cls, "toBytesRef", "(Lorg/apache/lucene/util/IntsRef;Lorg/apache/lucene/util/BytesRef;)Lorg/apache/lucene/util/BytesRef;");
              mids$[mid_toDot_53893198] = env->getStaticMethodID(cls, "toDot", "(Lorg/apache/lucene/util/fst/FST;Ljava/io/Writer;ZZ)V");
              mids$[mid_toIntsRef_9ff62e61] = env->getStaticMethodID(cls, "toIntsRef", "(Lorg/apache/lucene/util/BytesRef;Lorg/apache/lucene/util/IntsRef;)Lorg/apache/lucene/util/IntsRef;");
              mids$[mid_toUTF16_2efa4e73] = env->getStaticMethodID(cls, "toUTF16", "(Ljava/lang/CharSequence;Lorg/apache/lucene/util/IntsRef;)Lorg/apache/lucene/util/IntsRef;");
              mids$[mid_toUTF32_2efa4e73] = env->getStaticMethodID(cls, "toUTF32", "(Ljava/lang/CharSequence;Lorg/apache/lucene/util/IntsRef;)Lorg/apache/lucene/util/IntsRef;");
              mids$[mid_toUTF32_78db5d6f] = env->getStaticMethodID(cls, "toUTF32", "([CIILorg/apache/lucene/util/IntsRef;)Lorg/apache/lucene/util/IntsRef;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ::java::lang::Object Util::get(const ::org::apache::lucene::util::fst::FST & a0, const ::org::apache::lucene::util::IntsRef & a1)
          {
            jclass cls = env->getClass(initializeClass);
            return ::java::lang::Object(env->callStaticObjectMethod(cls, mids$[mid_get_4f30bf3f], a0.this$, a1.this$));
          }

          ::java::lang::Object Util::get(const ::org::apache::lucene::util::fst::FST & a0, const ::org::apache::lucene::util::BytesRef & a1)
          {
            jclass cls = env->getClass(initializeClass);
            return ::java::lang::Object(env->callStaticObjectMethod(cls, mids$[mid_get_6697be43], a0.this$, a1.this$));
          }

          ::org::apache::lucene::util::IntsRef Util::getByOutput(const ::org::apache::lucene::util::fst::FST & a0, jlong a1)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::util::IntsRef(env->callStaticObjectMethod(cls, mids$[mid_getByOutput_40734dd8], a0.this$, a1));
          }

          ::org::apache::lucene::util::IntsRef Util::getByOutput(const ::org::apache::lucene::util::fst::FST & a0, jlong a1, const ::org::apache::lucene::util::fst::FST$BytesReader & a2, const ::org::apache::lucene::util::fst::FST$Arc & a3, const ::org::apache::lucene::util::fst::FST$Arc & a4, const ::org::apache::lucene::util::IntsRef & a5)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::util::IntsRef(env->callStaticObjectMethod(cls, mids$[mid_getByOutput_6ff1a968], a0.this$, a1, a2.this$, a3.this$, a4.this$, a5.this$));
          }

          ::org::apache::lucene::util::fst::FST$Arc Util::readCeilArc(jint a0, const ::org::apache::lucene::util::fst::FST & a1, const ::org::apache::lucene::util::fst::FST$Arc & a2, const ::org::apache::lucene::util::fst::FST$Arc & a3, const ::org::apache::lucene::util::fst::FST$BytesReader & a4)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::util::fst::FST$Arc(env->callStaticObjectMethod(cls, mids$[mid_readCeilArc_3a8e72bb], a0, a1.this$, a2.this$, a3.this$, a4.this$));
          }

          ::org::apache::lucene::util::fst::Util$TopResults Util::shortestPaths(const ::org::apache::lucene::util::fst::FST & a0, const ::org::apache::lucene::util::fst::FST$Arc & a1, const ::java::lang::Object & a2, const ::java::util::Comparator & a3, jint a4, jboolean a5)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::util::fst::Util$TopResults(env->callStaticObjectMethod(cls, mids$[mid_shortestPaths_7b374667], a0.this$, a1.this$, a2.this$, a3.this$, a4, a5));
          }

          ::org::apache::lucene::util::BytesRef Util::toBytesRef(const ::org::apache::lucene::util::IntsRef & a0, const ::org::apache::lucene::util::BytesRef & a1)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::util::BytesRef(env->callStaticObjectMethod(cls, mids$[mid_toBytesRef_27bd6535], a0.this$, a1.this$));
          }

          void Util::toDot(const ::org::apache::lucene::util::fst::FST & a0, const ::java::io::Writer & a1, jboolean a2, jboolean a3)
          {
            jclass cls = env->getClass(initializeClass);
            env->callStaticVoidMethod(cls, mids$[mid_toDot_53893198], a0.this$, a1.this$, a2, a3);
          }

          ::org::apache::lucene::util::IntsRef Util::toIntsRef(const ::org::apache::lucene::util::BytesRef & a0, const ::org::apache::lucene::util::IntsRef & a1)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::util::IntsRef(env->callStaticObjectMethod(cls, mids$[mid_toIntsRef_9ff62e61], a0.this$, a1.this$));
          }

          ::org::apache::lucene::util::IntsRef Util::toUTF16(const ::java::lang::CharSequence & a0, const ::org::apache::lucene::util::IntsRef & a1)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::util::IntsRef(env->callStaticObjectMethod(cls, mids$[mid_toUTF16_2efa4e73], a0.this$, a1.this$));
          }

          ::org::apache::lucene::util::IntsRef Util::toUTF32(const ::java::lang::CharSequence & a0, const ::org::apache::lucene::util::IntsRef & a1)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::util::IntsRef(env->callStaticObjectMethod(cls, mids$[mid_toUTF32_2efa4e73], a0.this$, a1.this$));
          }

          ::org::apache::lucene::util::IntsRef Util::toUTF32(const JArray< jchar > & a0, jint a1, jint a2, const ::org::apache::lucene::util::IntsRef & a3)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::util::IntsRef(env->callStaticObjectMethod(cls, mids$[mid_toUTF32_78db5d6f], a0.this$, a1, a2, a3.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"
#include "org/apache/lucene/util/fst/Util$Result.h"
#include "org/apache/lucene/util/fst/Util$TopNSearcher.h"
#include "org/apache/lucene/util/fst/Util$FSTPath.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace fst {
          static PyObject *t_Util_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Util_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Util_get(PyTypeObject *type, PyObject *args);
          static PyObject *t_Util_getByOutput(PyTypeObject *type, PyObject *args);
          static PyObject *t_Util_readCeilArc(PyTypeObject *type, PyObject *args);
          static PyObject *t_Util_shortestPaths(PyTypeObject *type, PyObject *args);
          static PyObject *t_Util_toBytesRef(PyTypeObject *type, PyObject *args);
          static PyObject *t_Util_toDot(PyTypeObject *type, PyObject *args);
          static PyObject *t_Util_toIntsRef(PyTypeObject *type, PyObject *args);
          static PyObject *t_Util_toUTF16(PyTypeObject *type, PyObject *args);
          static PyObject *t_Util_toUTF32(PyTypeObject *type, PyObject *args);

          static PyMethodDef t_Util__methods_[] = {
            DECLARE_METHOD(t_Util, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Util, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Util, get, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_Util, getByOutput, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_Util, readCeilArc, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_Util, shortestPaths, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_Util, toBytesRef, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_Util, toDot, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_Util, toIntsRef, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_Util, toUTF16, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_Util, toUTF32, METH_VARARGS | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(Util, t_Util, ::java::lang::Object, Util, abstract_init, 0, 0, 0, 0, 0);

          void t_Util::install(PyObject *module)
          {
            installType(&PY_TYPE(Util), module, "Util", 0);
            PyDict_SetItemString(PY_TYPE(Util).tp_dict, "TopResults", make_descriptor(&PY_TYPE(Util$TopResults)));
            PyDict_SetItemString(PY_TYPE(Util).tp_dict, "Result", make_descriptor(&PY_TYPE(Util$Result)));
            PyDict_SetItemString(PY_TYPE(Util).tp_dict, "TopNSearcher", make_descriptor(&PY_TYPE(Util$TopNSearcher)));
            PyDict_SetItemString(PY_TYPE(Util).tp_dict, "FSTPath", make_descriptor(&PY_TYPE(Util$FSTPath)));
          }

          void t_Util::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(Util).tp_dict, "class_", make_descriptor(Util::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(Util).tp_dict, "wrapfn_", make_descriptor(t_Util::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(Util).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_Util_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, Util::initializeClass, 1)))
              return NULL;
            return t_Util::wrap_Object(Util(((t_Util *) arg)->object.this$));
          }
          static PyObject *t_Util_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, Util::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_Util_get(PyTypeObject *type, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 2:
              {
                ::org::apache::lucene::util::fst::FST a0((jobject) NULL);
                PyTypeObject **p0;
                ::org::apache::lucene::util::IntsRef a1((jobject) NULL);
                ::java::lang::Object result((jobject) NULL);

                if (!parseArgs(args, "Kk", ::org::apache::lucene::util::fst::FST::initializeClass, ::org::apache::lucene::util::IntsRef::initializeClass, &a0, &p0, ::org::apache::lucene::util::fst::t_FST::parameters_, &a1))
                {
                  OBJ_CALL(result = ::org::apache::lucene::util::fst::Util::get(a0, a1));
                  return p0 != NULL && p0[0] != NULL ? wrapType(p0[0], result.this$) : ::java::lang::t_Object::wrap_Object(result);
                }
              }
              {
                ::org::apache::lucene::util::fst::FST a0((jobject) NULL);
                PyTypeObject **p0;
                ::org::apache::lucene::util::BytesRef a1((jobject) NULL);
                ::java::lang::Object result((jobject) NULL);

                if (!parseArgs(args, "Kk", ::org::apache::lucene::util::fst::FST::initializeClass, ::org::apache::lucene::util::BytesRef::initializeClass, &a0, &p0, ::org::apache::lucene::util::fst::t_FST::parameters_, &a1))
                {
                  OBJ_CALL(result = ::org::apache::lucene::util::fst::Util::get(a0, a1));
                  return p0 != NULL && p0[0] != NULL ? wrapType(p0[0], result.this$) : ::java::lang::t_Object::wrap_Object(result);
                }
              }
            }

            PyErr_SetArgsError(type, "get", args);
            return NULL;
          }

          static PyObject *t_Util_getByOutput(PyTypeObject *type, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 2:
              {
                ::org::apache::lucene::util::fst::FST a0((jobject) NULL);
                PyTypeObject **p0;
                jlong a1;
                ::org::apache::lucene::util::IntsRef result((jobject) NULL);

                if (!parseArgs(args, "KJ", ::org::apache::lucene::util::fst::FST::initializeClass, &a0, &p0, ::org::apache::lucene::util::fst::t_FST::parameters_, &a1))
                {
                  OBJ_CALL(result = ::org::apache::lucene::util::fst::Util::getByOutput(a0, a1));
                  return ::org::apache::lucene::util::t_IntsRef::wrap_Object(result);
                }
              }
              break;
             case 6:
              {
                ::org::apache::lucene::util::fst::FST a0((jobject) NULL);
                PyTypeObject **p0;
                jlong a1;
                ::org::apache::lucene::util::fst::FST$BytesReader a2((jobject) NULL);
                PyTypeObject **p2;
                ::org::apache::lucene::util::fst::FST$Arc a3((jobject) NULL);
                PyTypeObject **p3;
                ::org::apache::lucene::util::fst::FST$Arc a4((jobject) NULL);
                PyTypeObject **p4;
                ::org::apache::lucene::util::IntsRef a5((jobject) NULL);
                ::org::apache::lucene::util::IntsRef result((jobject) NULL);

                if (!parseArgs(args, "KJKKKk", ::org::apache::lucene::util::fst::FST::initializeClass, ::org::apache::lucene::util::fst::FST$BytesReader::initializeClass, ::org::apache::lucene::util::fst::FST$Arc::initializeClass, ::org::apache::lucene::util::fst::FST$Arc::initializeClass, ::org::apache::lucene::util::IntsRef::initializeClass, &a0, &p0, ::org::apache::lucene::util::fst::t_FST::parameters_, &a1, &a2, &p2, ::org::apache::lucene::util::fst::t_FST$BytesReader::parameters_, &a3, &p3, ::org::apache::lucene::util::fst::t_FST$Arc::parameters_, &a4, &p4, ::org::apache::lucene::util::fst::t_FST$Arc::parameters_, &a5))
                {
                  OBJ_CALL(result = ::org::apache::lucene::util::fst::Util::getByOutput(a0, a1, a2, a3, a4, a5));
                  return ::org::apache::lucene::util::t_IntsRef::wrap_Object(result);
                }
              }
            }

            PyErr_SetArgsError(type, "getByOutput", args);
            return NULL;
          }

          static PyObject *t_Util_readCeilArc(PyTypeObject *type, PyObject *args)
          {
            jint a0;
            ::org::apache::lucene::util::fst::FST a1((jobject) NULL);
            PyTypeObject **p1;
            ::org::apache::lucene::util::fst::FST$Arc a2((jobject) NULL);
            PyTypeObject **p2;
            ::org::apache::lucene::util::fst::FST$Arc a3((jobject) NULL);
            PyTypeObject **p3;
            ::org::apache::lucene::util::fst::FST$BytesReader a4((jobject) NULL);
            PyTypeObject **p4;
            ::org::apache::lucene::util::fst::FST$Arc result((jobject) NULL);

            if (!parseArgs(args, "IKKKK", ::org::apache::lucene::util::fst::FST::initializeClass, ::org::apache::lucene::util::fst::FST$Arc::initializeClass, ::org::apache::lucene::util::fst::FST$Arc::initializeClass, ::org::apache::lucene::util::fst::FST$BytesReader::initializeClass, &a0, &a1, &p1, ::org::apache::lucene::util::fst::t_FST::parameters_, &a2, &p2, ::org::apache::lucene::util::fst::t_FST$Arc::parameters_, &a3, &p3, ::org::apache::lucene::util::fst::t_FST$Arc::parameters_, &a4, &p4, ::org::apache::lucene::util::fst::t_FST$BytesReader::parameters_))
            {
              OBJ_CALL(result = ::org::apache::lucene::util::fst::Util::readCeilArc(a0, a1, a2, a3, a4));
              return ::org::apache::lucene::util::fst::t_FST$Arc::wrap_Object(result);
            }

            PyErr_SetArgsError(type, "readCeilArc", args);
            return NULL;
          }

          static PyObject *t_Util_shortestPaths(PyTypeObject *type, PyObject *args)
          {
            ::org::apache::lucene::util::fst::FST a0((jobject) NULL);
            PyTypeObject **p0;
            ::org::apache::lucene::util::fst::FST$Arc a1((jobject) NULL);
            PyTypeObject **p1;
            ::java::lang::Object a2((jobject) NULL);
            ::java::util::Comparator a3((jobject) NULL);
            PyTypeObject **p3;
            jint a4;
            jboolean a5;
            ::org::apache::lucene::util::fst::Util$TopResults result((jobject) NULL);

            if (!parseArgs(args, "KKoKIZ", ::org::apache::lucene::util::fst::FST::initializeClass, ::org::apache::lucene::util::fst::FST$Arc::initializeClass, ::java::util::Comparator::initializeClass, &a0, &p0, ::org::apache::lucene::util::fst::t_FST::parameters_, &a1, &p1, ::org::apache::lucene::util::fst::t_FST$Arc::parameters_, &a2, &a3, &p3, ::java::util::t_Comparator::parameters_, &a4, &a5))
            {
              OBJ_CALL(result = ::org::apache::lucene::util::fst::Util::shortestPaths(a0, a1, a2, a3, a4, a5));
              return ::org::apache::lucene::util::fst::t_Util$TopResults::wrap_Object(result);
            }

            PyErr_SetArgsError(type, "shortestPaths", args);
            return NULL;
          }

          static PyObject *t_Util_toBytesRef(PyTypeObject *type, PyObject *args)
          {
            ::org::apache::lucene::util::IntsRef a0((jobject) NULL);
            ::org::apache::lucene::util::BytesRef a1((jobject) NULL);
            ::org::apache::lucene::util::BytesRef result((jobject) NULL);

            if (!parseArgs(args, "kk", ::org::apache::lucene::util::IntsRef::initializeClass, ::org::apache::lucene::util::BytesRef::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = ::org::apache::lucene::util::fst::Util::toBytesRef(a0, a1));
              return ::org::apache::lucene::util::t_BytesRef::wrap_Object(result);
            }

            PyErr_SetArgsError(type, "toBytesRef", args);
            return NULL;
          }

          static PyObject *t_Util_toDot(PyTypeObject *type, PyObject *args)
          {
            ::org::apache::lucene::util::fst::FST a0((jobject) NULL);
            PyTypeObject **p0;
            ::java::io::Writer a1((jobject) NULL);
            jboolean a2;
            jboolean a3;

            if (!parseArgs(args, "KkZZ", ::org::apache::lucene::util::fst::FST::initializeClass, ::java::io::Writer::initializeClass, &a0, &p0, ::org::apache::lucene::util::fst::t_FST::parameters_, &a1, &a2, &a3))
            {
              OBJ_CALL(::org::apache::lucene::util::fst::Util::toDot(a0, a1, a2, a3));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError(type, "toDot", args);
            return NULL;
          }

          static PyObject *t_Util_toIntsRef(PyTypeObject *type, PyObject *args)
          {
            ::org::apache::lucene::util::BytesRef a0((jobject) NULL);
            ::org::apache::lucene::util::IntsRef a1((jobject) NULL);
            ::org::apache::lucene::util::IntsRef result((jobject) NULL);

            if (!parseArgs(args, "kk", ::org::apache::lucene::util::BytesRef::initializeClass, ::org::apache::lucene::util::IntsRef::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = ::org::apache::lucene::util::fst::Util::toIntsRef(a0, a1));
              return ::org::apache::lucene::util::t_IntsRef::wrap_Object(result);
            }

            PyErr_SetArgsError(type, "toIntsRef", args);
            return NULL;
          }

          static PyObject *t_Util_toUTF16(PyTypeObject *type, PyObject *args)
          {
            ::java::lang::CharSequence a0((jobject) NULL);
            ::org::apache::lucene::util::IntsRef a1((jobject) NULL);
            ::org::apache::lucene::util::IntsRef result((jobject) NULL);

            if (!parseArgs(args, "Ok", &::java::lang::PY_TYPE(CharSequence), ::org::apache::lucene::util::IntsRef::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = ::org::apache::lucene::util::fst::Util::toUTF16(a0, a1));
              return ::org::apache::lucene::util::t_IntsRef::wrap_Object(result);
            }

            PyErr_SetArgsError(type, "toUTF16", args);
            return NULL;
          }

          static PyObject *t_Util_toUTF32(PyTypeObject *type, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 2:
              {
                ::java::lang::CharSequence a0((jobject) NULL);
                ::org::apache::lucene::util::IntsRef a1((jobject) NULL);
                ::org::apache::lucene::util::IntsRef result((jobject) NULL);

                if (!parseArgs(args, "Ok", &::java::lang::PY_TYPE(CharSequence), ::org::apache::lucene::util::IntsRef::initializeClass, &a0, &a1))
                {
                  OBJ_CALL(result = ::org::apache::lucene::util::fst::Util::toUTF32(a0, a1));
                  return ::org::apache::lucene::util::t_IntsRef::wrap_Object(result);
                }
              }
              break;
             case 4:
              {
                JArray< jchar > a0((jobject) NULL);
                jint a1;
                jint a2;
                ::org::apache::lucene::util::IntsRef a3((jobject) NULL);
                ::org::apache::lucene::util::IntsRef result((jobject) NULL);

                if (!parseArgs(args, "[CIIk", ::org::apache::lucene::util::IntsRef::initializeClass, &a0, &a1, &a2, &a3))
                {
                  OBJ_CALL(result = ::org::apache::lucene::util::fst::Util::toUTF32(a0, a1, a2, a3));
                  return ::org::apache::lucene::util::t_IntsRef::wrap_Object(result);
                }
              }
            }

            PyErr_SetArgsError(type, "toUTF32", args);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/DocTermOrds.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "org/apache/lucene/util/Bits.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/index/TermsEnum.h"
#include "org/apache/lucene/index/AtomicReader.h"
#include "org/apache/lucene/util/Accountable.h"
#include "java/lang/String.h"
#include "org/apache/lucene/index/SortedSetDocValues.h"
#include "java/io/IOException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *DocTermOrds::class$ = NULL;
        jmethodID *DocTermOrds::mids$ = NULL;
        bool DocTermOrds::live$ = false;
        jint DocTermOrds::DEFAULT_INDEX_INTERVAL_BITS = (jint) 0;

        jclass DocTermOrds::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/DocTermOrds");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_5230fbcf] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/AtomicReader;Lorg/apache/lucene/util/Bits;Ljava/lang/String;)V");
            mids$[mid_init$_ba2c6033] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/AtomicReader;Lorg/apache/lucene/util/Bits;Ljava/lang/String;Lorg/apache/lucene/util/BytesRef;)V");
            mids$[mid_init$_69c8f813] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/AtomicReader;Lorg/apache/lucene/util/Bits;Ljava/lang/String;Lorg/apache/lucene/util/BytesRef;I)V");
            mids$[mid_init$_6c95794f] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/AtomicReader;Lorg/apache/lucene/util/Bits;Ljava/lang/String;Lorg/apache/lucene/util/BytesRef;II)V");
            mids$[mid_getOrdTermsEnum_e7b033b0] = env->getMethodID(cls, "getOrdTermsEnum", "(Lorg/apache/lucene/index/AtomicReader;)Lorg/apache/lucene/index/TermsEnum;");
            mids$[mid_isEmpty_54c6a16a] = env->getMethodID(cls, "isEmpty", "()Z");
            mids$[mid_iterator_e09eae6c] = env->getMethodID(cls, "iterator", "(Lorg/apache/lucene/index/AtomicReader;)Lorg/apache/lucene/index/SortedSetDocValues;");
            mids$[mid_lookupTerm_fc839edf] = env->getMethodID(cls, "lookupTerm", "(Lorg/apache/lucene/index/TermsEnum;I)Lorg/apache/lucene/util/BytesRef;");
            mids$[mid_numTerms_54c6a179] = env->getMethodID(cls, "numTerms", "()I");
            mids$[mid_ramBytesUsed_54c6a17a] = env->getMethodID(cls, "ramBytesUsed", "()J");
            mids$[mid_uninvert_728f7de9] = env->getMethodID(cls, "uninvert", "(Lorg/apache/lucene/index/AtomicReader;Lorg/apache/lucene/util/Bits;Lorg/apache/lucene/util/BytesRef;)V");
            mids$[mid_visitTerm_619ad8a4] = env->getMethodID(cls, "visitTerm", "(Lorg/apache/lucene/index/TermsEnum;I)V");
            mids$[mid_setActualDocFreq_d8d154a6] = env->getMethodID(cls, "setActualDocFreq", "(II)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            cls = (jclass) class$->this$;

            DEFAULT_INDEX_INTERVAL_BITS = env->getStaticIntField(cls, "DEFAULT_INDEX_INTERVAL_BITS");
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        DocTermOrds::DocTermOrds(const ::org::apache::lucene::index::AtomicReader & a0, const ::org::apache::lucene::util::Bits & a1, const ::java::lang::String & a2) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_5230fbcf, a0.this$, a1.this$, a2.this$)) {}

        DocTermOrds::DocTermOrds(const ::org::apache::lucene::index::AtomicReader & a0, const ::org::apache::lucene::util::Bits & a1, const ::java::lang::String & a2, const ::org::apache::lucene::util::BytesRef & a3) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_ba2c6033, a0.this$, a1.this$, a2.this$, a3.this$)) {}

        DocTermOrds::DocTermOrds(const ::org::apache::lucene::index::AtomicReader & a0, const ::org::apache::lucene::util::Bits & a1, const ::java::lang::String & a2, const ::org::apache::lucene::util::BytesRef & a3, jint a4) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_69c8f813, a0.this$, a1.this$, a2.this$, a3.this$, a4)) {}

        DocTermOrds::DocTermOrds(const ::org::apache::lucene::index::AtomicReader & a0, const ::org::apache::lucene::util::Bits & a1, const ::java::lang::String & a2, const ::org::apache::lucene::util::BytesRef & a3, jint a4, jint a5) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_6c95794f, a0.this$, a1.this$, a2.this$, a3.this$, a4, a5)) {}

        ::org::apache::lucene::index::TermsEnum DocTermOrds::getOrdTermsEnum(const ::org::apache::lucene::index::AtomicReader & a0) const
        {
          return ::org::apache::lucene::index::TermsEnum(env->callObjectMethod(this$, mids$[mid_getOrdTermsEnum_e7b033b0], a0.this$));
        }

        jboolean DocTermOrds::isEmpty() const
        {
          return env->callBooleanMethod(this$, mids$[mid_isEmpty_54c6a16a]);
        }

        ::org::apache::lucene::index::SortedSetDocValues DocTermOrds::iterator(const ::org::apache::lucene::index::AtomicReader & a0) const
        {
          return ::org::apache::lucene::index::SortedSetDocValues(env->callObjectMethod(this$, mids$[mid_iterator_e09eae6c], a0.this$));
        }

        ::org::apache::lucene::util::BytesRef DocTermOrds::lookupTerm(const ::org::apache::lucene::index::TermsEnum & a0, jint a1) const
        {
          return ::org::apache::lucene::util::BytesRef(env->callObjectMethod(this$, mids$[mid_lookupTerm_fc839edf], a0.this$, a1));
        }

        jint DocTermOrds::numTerms() const
        {
          return env->callIntMethod(this$, mids$[mid_numTerms_54c6a179]);
        }

        jlong DocTermOrds::ramBytesUsed() const
        {
          return env->callLongMethod(this$, mids$[mid_ramBytesUsed_54c6a17a]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_DocTermOrds_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_DocTermOrds_instance_(PyTypeObject *type, PyObject *arg);
        static int t_DocTermOrds_init_(t_DocTermOrds *self, PyObject *args, PyObject *kwds);
        static PyObject *t_DocTermOrds_getOrdTermsEnum(t_DocTermOrds *self, PyObject *arg);
        static PyObject *t_DocTermOrds_isEmpty(t_DocTermOrds *self);
        static PyObject *t_DocTermOrds_iterator(t_DocTermOrds *self, PyObject *arg);
        static PyObject *t_DocTermOrds_lookupTerm(t_DocTermOrds *self, PyObject *args);
        static PyObject *t_DocTermOrds_numTerms(t_DocTermOrds *self);
        static PyObject *t_DocTermOrds_ramBytesUsed(t_DocTermOrds *self);
        static PyObject *t_DocTermOrds_get__empty(t_DocTermOrds *self, void *data);
        static PyGetSetDef t_DocTermOrds__fields_[] = {
          DECLARE_GET_FIELD(t_DocTermOrds, empty),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_DocTermOrds__methods_[] = {
          DECLARE_METHOD(t_DocTermOrds, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_DocTermOrds, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_DocTermOrds, getOrdTermsEnum, METH_O),
          DECLARE_METHOD(t_DocTermOrds, isEmpty, METH_NOARGS),
          DECLARE_METHOD(t_DocTermOrds, iterator, METH_O),
          DECLARE_METHOD(t_DocTermOrds, lookupTerm, METH_VARARGS),
          DECLARE_METHOD(t_DocTermOrds, numTerms, METH_NOARGS),
          DECLARE_METHOD(t_DocTermOrds, ramBytesUsed, METH_NOARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(DocTermOrds, t_DocTermOrds, ::java::lang::Object, DocTermOrds, t_DocTermOrds_init_, 0, 0, t_DocTermOrds__fields_, 0, 0);

        void t_DocTermOrds::install(PyObject *module)
        {
          installType(&PY_TYPE(DocTermOrds), module, "DocTermOrds", 0);
        }

        void t_DocTermOrds::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(DocTermOrds).tp_dict, "class_", make_descriptor(DocTermOrds::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(DocTermOrds).tp_dict, "wrapfn_", make_descriptor(t_DocTermOrds::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(DocTermOrds).tp_dict, "boxfn_", make_descriptor(boxObject));
          env->getClass(DocTermOrds::initializeClass);
          PyDict_SetItemString(PY_TYPE(DocTermOrds).tp_dict, "DEFAULT_INDEX_INTERVAL_BITS", make_descriptor(DocTermOrds::DEFAULT_INDEX_INTERVAL_BITS));
        }

        static PyObject *t_DocTermOrds_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, DocTermOrds::initializeClass, 1)))
            return NULL;
          return t_DocTermOrds::wrap_Object(DocTermOrds(((t_DocTermOrds *) arg)->object.this$));
        }
        static PyObject *t_DocTermOrds_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, DocTermOrds::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_DocTermOrds_init_(t_DocTermOrds *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 3:
            {
              ::org::apache::lucene::index::AtomicReader a0((jobject) NULL);
              ::org::apache::lucene::util::Bits a1((jobject) NULL);
              ::java::lang::String a2((jobject) NULL);
              DocTermOrds object((jobject) NULL);

              if (!parseArgs(args, "kks", ::org::apache::lucene::index::AtomicReader::initializeClass, ::org::apache::lucene::util::Bits::initializeClass, &a0, &a1, &a2))
              {
                INT_CALL(object = DocTermOrds(a0, a1, a2));
                self->object = object;
                break;
              }
            }
            goto err;
           case 4:
            {
              ::org::apache::lucene::index::AtomicReader a0((jobject) NULL);
              ::org::apache::lucene::util::Bits a1((jobject) NULL);
              ::java::lang::String a2((jobject) NULL);
              ::org::apache::lucene::util::BytesRef a3((jobject) NULL);
              DocTermOrds object((jobject) NULL);

              if (!parseArgs(args, "kksk", ::org::apache::lucene::index::AtomicReader::initializeClass, ::org::apache::lucene::util::Bits::initializeClass, ::org::apache::lucene::util::BytesRef::initializeClass, &a0, &a1, &a2, &a3))
              {
                INT_CALL(object = DocTermOrds(a0, a1, a2, a3));
                self->object = object;
                break;
              }
            }
            goto err;
           case 5:
            {
              ::org::apache::lucene::index::AtomicReader a0((jobject) NULL);
              ::org::apache::lucene::util::Bits a1((jobject) NULL);
              ::java::lang::String a2((jobject) NULL);
              ::org::apache::lucene::util::BytesRef a3((jobject) NULL);
              jint a4;
              DocTermOrds object((jobject) NULL);

              if (!parseArgs(args, "kkskI", ::org::apache::lucene::index::AtomicReader::initializeClass, ::org::apache::lucene::util::Bits::initializeClass, ::org::apache::lucene::util::BytesRef::initializeClass, &a0, &a1, &a2, &a3, &a4))
              {
                INT_CALL(object = DocTermOrds(a0, a1, a2, a3, a4));
                self->object = object;
                break;
              }
            }
            goto err;
           case 6:
            {
              ::org::apache::lucene::index::AtomicReader a0((jobject) NULL);
              ::org::apache::lucene::util::Bits a1((jobject) NULL);
              ::java::lang::String a2((jobject) NULL);
              ::org::apache::lucene::util::BytesRef a3((jobject) NULL);
              jint a4;
              jint a5;
              DocTermOrds object((jobject) NULL);

              if (!parseArgs(args, "kkskII", ::org::apache::lucene::index::AtomicReader::initializeClass, ::org::apache::lucene::util::Bits::initializeClass, ::org::apache::lucene::util::BytesRef::initializeClass, &a0, &a1, &a2, &a3, &a4, &a5))
              {
                INT_CALL(object = DocTermOrds(a0, a1, a2, a3, a4, a5));
                self->object = object;
                break;
              }
            }
           default:
           err:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_DocTermOrds_getOrdTermsEnum(t_DocTermOrds *self, PyObject *arg)
        {
          ::org::apache::lucene::index::AtomicReader a0((jobject) NULL);
          ::org::apache::lucene::index::TermsEnum result((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::index::AtomicReader::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.getOrdTermsEnum(a0));
            return ::org::apache::lucene::index::t_TermsEnum::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "getOrdTermsEnum", arg);
          return NULL;
        }

        static PyObject *t_DocTermOrds_isEmpty(t_DocTermOrds *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.isEmpty());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_DocTermOrds_iterator(t_DocTermOrds *self, PyObject *arg)
        {
          ::org::apache::lucene::index::AtomicReader a0((jobject) NULL);
          ::org::apache::lucene::index::SortedSetDocValues result((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::index::AtomicReader::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.iterator(a0));
            return ::org::apache::lucene::index::t_SortedSetDocValues::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "iterator", arg);
          return NULL;
        }

        static PyObject *t_DocTermOrds_lookupTerm(t_DocTermOrds *self, PyObject *args)
        {
          ::org::apache::lucene::index::TermsEnum a0((jobject) NULL);
          jint a1;
          ::org::apache::lucene::util::BytesRef result((jobject) NULL);

          if (!parseArgs(args, "kI", ::org::apache::lucene::index::TermsEnum::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = self->object.lookupTerm(a0, a1));
            return ::org::apache::lucene::util::t_BytesRef::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "lookupTerm", args);
          return NULL;
        }

        static PyObject *t_DocTermOrds_numTerms(t_DocTermOrds *self)
        {
          jint result;
          OBJ_CALL(result = self->object.numTerms());
          return PyInt_FromLong((long) result);
        }

        static PyObject *t_DocTermOrds_ramBytesUsed(t_DocTermOrds *self)
        {
          jlong result;
          OBJ_CALL(result = self->object.ramBytesUsed());
          return PyLong_FromLongLong((PY_LONG_LONG) result);
        }

        static PyObject *t_DocTermOrds_get__empty(t_DocTermOrds *self, void *data)
        {
          jboolean value;
          OBJ_CALL(value = self->object.isEmpty());
          Py_RETURN_BOOL(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/fr/FrenchMinimalStemFilter.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace fr {

          ::java::lang::Class *FrenchMinimalStemFilter::class$ = NULL;
          jmethodID *FrenchMinimalStemFilter::mids$ = NULL;
          bool FrenchMinimalStemFilter::live$ = false;

          jclass FrenchMinimalStemFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/fr/FrenchMinimalStemFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_c7c794dc] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;)V");
              mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          FrenchMinimalStemFilter::FrenchMinimalStemFilter(const ::org::apache::lucene::analysis::TokenStream & a0) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_c7c794dc, a0.this$)) {}

          jboolean FrenchMinimalStemFilter::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_54c6a16a]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace fr {
          static PyObject *t_FrenchMinimalStemFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_FrenchMinimalStemFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_FrenchMinimalStemFilter_init_(t_FrenchMinimalStemFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_FrenchMinimalStemFilter_incrementToken(t_FrenchMinimalStemFilter *self, PyObject *args);

          static PyMethodDef t_FrenchMinimalStemFilter__methods_[] = {
            DECLARE_METHOD(t_FrenchMinimalStemFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FrenchMinimalStemFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FrenchMinimalStemFilter, incrementToken, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(FrenchMinimalStemFilter, t_FrenchMinimalStemFilter, ::org::apache::lucene::analysis::TokenFilter, FrenchMinimalStemFilter, t_FrenchMinimalStemFilter_init_, 0, 0, 0, 0, 0);

          void t_FrenchMinimalStemFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(FrenchMinimalStemFilter), module, "FrenchMinimalStemFilter", 0);
          }

          void t_FrenchMinimalStemFilter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(FrenchMinimalStemFilter).tp_dict, "class_", make_descriptor(FrenchMinimalStemFilter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(FrenchMinimalStemFilter).tp_dict, "wrapfn_", make_descriptor(t_FrenchMinimalStemFilter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(FrenchMinimalStemFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_FrenchMinimalStemFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, FrenchMinimalStemFilter::initializeClass, 1)))
              return NULL;
            return t_FrenchMinimalStemFilter::wrap_Object(FrenchMinimalStemFilter(((t_FrenchMinimalStemFilter *) arg)->object.this$));
          }
          static PyObject *t_FrenchMinimalStemFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, FrenchMinimalStemFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_FrenchMinimalStemFilter_init_(t_FrenchMinimalStemFilter *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            FrenchMinimalStemFilter object((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              INT_CALL(object = FrenchMinimalStemFilter(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_FrenchMinimalStemFilter_incrementToken(t_FrenchMinimalStemFilter *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(FrenchMinimalStemFilter), (PyObject *) self, "incrementToken", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/Terms.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/util/automaton/CompiledAutomaton.h"
#include "org/apache/lucene/index/TermsEnum.h"
#include "java/util/Comparator.h"
#include "java/io/IOException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *Terms::class$ = NULL;
        jmethodID *Terms::mids$ = NULL;
        bool Terms::live$ = false;
        JArray< Terms > *Terms::EMPTY_ARRAY = NULL;

        jclass Terms::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/Terms");

            mids$ = new jmethodID[max_mid];
            mids$[mid_getComparator_5a7ff2fc] = env->getMethodID(cls, "getComparator", "()Ljava/util/Comparator;");
            mids$[mid_getDocCount_54c6a179] = env->getMethodID(cls, "getDocCount", "()I");
            mids$[mid_getMax_4ae19461] = env->getMethodID(cls, "getMax", "()Lorg/apache/lucene/util/BytesRef;");
            mids$[mid_getMin_4ae19461] = env->getMethodID(cls, "getMin", "()Lorg/apache/lucene/util/BytesRef;");
            mids$[mid_getSumDocFreq_54c6a17a] = env->getMethodID(cls, "getSumDocFreq", "()J");
            mids$[mid_getSumTotalTermFreq_54c6a17a] = env->getMethodID(cls, "getSumTotalTermFreq", "()J");
            mids$[mid_hasFreqs_54c6a16a] = env->getMethodID(cls, "hasFreqs", "()Z");
            mids$[mid_hasOffsets_54c6a16a] = env->getMethodID(cls, "hasOffsets", "()Z");
            mids$[mid_hasPayloads_54c6a16a] = env->getMethodID(cls, "hasPayloads", "()Z");
            mids$[mid_hasPositions_54c6a16a] = env->getMethodID(cls, "hasPositions", "()Z");
            mids$[mid_intersect_b8f2b1bc] = env->getMethodID(cls, "intersect", "(Lorg/apache/lucene/util/automaton/CompiledAutomaton;Lorg/apache/lucene/util/BytesRef;)Lorg/apache/lucene/index/TermsEnum;");
            mids$[mid_iterator_d737078b] = env->getMethodID(cls, "iterator", "(Lorg/apache/lucene/index/TermsEnum;)Lorg/apache/lucene/index/TermsEnum;");
            mids$[mid_size_54c6a17a] = env->getMethodID(cls, "size", "()J");

            class$ = (::java::lang::Class *) new JObject(cls);
            cls = (jclass) class$->this$;

            EMPTY_ARRAY = new JArray< Terms >(env->getStaticObjectField(cls, "EMPTY_ARRAY", "[Lorg/apache/lucene/index/Terms;"));
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        ::java::util::Comparator Terms::getComparator() const
        {
          return ::java::util::Comparator(env->callObjectMethod(this$, mids$[mid_getComparator_5a7ff2fc]));
        }

        jint Terms::getDocCount() const
        {
          return env->callIntMethod(this$, mids$[mid_getDocCount_54c6a179]);
        }

        ::org::apache::lucene::util::BytesRef Terms::getMax() const
        {
          return ::org::apache::lucene::util::BytesRef(env->callObjectMethod(this$, mids$[mid_getMax_4ae19461]));
        }

        ::org::apache::lucene::util::BytesRef Terms::getMin() const
        {
          return ::org::apache::lucene::util::BytesRef(env->callObjectMethod(this$, mids$[mid_getMin_4ae19461]));
        }

        jlong Terms::getSumDocFreq() const
        {
          return env->callLongMethod(this$, mids$[mid_getSumDocFreq_54c6a17a]);
        }

        jlong Terms::getSumTotalTermFreq() const
        {
          return env->callLongMethod(this$, mids$[mid_getSumTotalTermFreq_54c6a17a]);
        }

        jboolean Terms::hasFreqs() const
        {
          return env->callBooleanMethod(this$, mids$[mid_hasFreqs_54c6a16a]);
        }

        jboolean Terms::hasOffsets() const
        {
          return env->callBooleanMethod(this$, mids$[mid_hasOffsets_54c6a16a]);
        }

        jboolean Terms::hasPayloads() const
        {
          return env->callBooleanMethod(this$, mids$[mid_hasPayloads_54c6a16a]);
        }

        jboolean Terms::hasPositions() const
        {
          return env->callBooleanMethod(this$, mids$[mid_hasPositions_54c6a16a]);
        }

        ::org::apache::lucene::index::TermsEnum Terms::intersect(const ::org::apache::lucene::util::automaton::CompiledAutomaton & a0, const ::org::apache::lucene::util::BytesRef & a1) const
        {
          return ::org::apache::lucene::index::TermsEnum(env->callObjectMethod(this$, mids$[mid_intersect_b8f2b1bc], a0.this$, a1.this$));
        }

        ::org::apache::lucene::index::TermsEnum Terms::iterator(const ::org::apache::lucene::index::TermsEnum & a0) const
        {
          return ::org::apache::lucene::index::TermsEnum(env->callObjectMethod(this$, mids$[mid_iterator_d737078b], a0.this$));
        }

        jlong Terms::size() const
        {
          return env->callLongMethod(this$, mids$[mid_size_54c6a17a]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_Terms_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_Terms_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_Terms_getComparator(t_Terms *self);
        static PyObject *t_Terms_getDocCount(t_Terms *self);
        static PyObject *t_Terms_getMax(t_Terms *self);
        static PyObject *t_Terms_getMin(t_Terms *self);
        static PyObject *t_Terms_getSumDocFreq(t_Terms *self);
        static PyObject *t_Terms_getSumTotalTermFreq(t_Terms *self);
        static PyObject *t_Terms_hasFreqs(t_Terms *self);
        static PyObject *t_Terms_hasOffsets(t_Terms *self);
        static PyObject *t_Terms_hasPayloads(t_Terms *self);
        static PyObject *t_Terms_hasPositions(t_Terms *self);
        static PyObject *t_Terms_intersect(t_Terms *self, PyObject *args);
        static PyObject *t_Terms_iterator(t_Terms *self, PyObject *arg);
        static PyObject *t_Terms_size(t_Terms *self);
        static PyObject *t_Terms_get__comparator(t_Terms *self, void *data);
        static PyObject *t_Terms_get__docCount(t_Terms *self, void *data);
        static PyObject *t_Terms_get__max(t_Terms *self, void *data);
        static PyObject *t_Terms_get__min(t_Terms *self, void *data);
        static PyObject *t_Terms_get__sumDocFreq(t_Terms *self, void *data);
        static PyObject *t_Terms_get__sumTotalTermFreq(t_Terms *self, void *data);
        static PyGetSetDef t_Terms__fields_[] = {
          DECLARE_GET_FIELD(t_Terms, comparator),
          DECLARE_GET_FIELD(t_Terms, docCount),
          DECLARE_GET_FIELD(t_Terms, max),
          DECLARE_GET_FIELD(t_Terms, min),
          DECLARE_GET_FIELD(t_Terms, sumDocFreq),
          DECLARE_GET_FIELD(t_Terms, sumTotalTermFreq),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_Terms__methods_[] = {
          DECLARE_METHOD(t_Terms, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_Terms, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_Terms, getComparator, METH_NOARGS),
          DECLARE_METHOD(t_Terms, getDocCount, METH_NOARGS),
          DECLARE_METHOD(t_Terms, getMax, METH_NOARGS),
          DECLARE_METHOD(t_Terms, getMin, METH_NOARGS),
          DECLARE_METHOD(t_Terms, getSumDocFreq, METH_NOARGS),
          DECLARE_METHOD(t_Terms, getSumTotalTermFreq, METH_NOARGS),
          DECLARE_METHOD(t_Terms, hasFreqs, METH_NOARGS),
          DECLARE_METHOD(t_Terms, hasOffsets, METH_NOARGS),
          DECLARE_METHOD(t_Terms, hasPayloads, METH_NOARGS),
          DECLARE_METHOD(t_Terms, hasPositions, METH_NOARGS),
          DECLARE_METHOD(t_Terms, intersect, METH_VARARGS),
          DECLARE_METHOD(t_Terms, iterator, METH_O),
          DECLARE_METHOD(t_Terms, size, METH_NOARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(Terms, t_Terms, ::java::lang::Object, Terms, abstract_init, 0, 0, t_Terms__fields_, 0, 0);

        void t_Terms::install(PyObject *module)
        {
          installType(&PY_TYPE(Terms), module, "Terms", 0);
        }

        void t_Terms::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(Terms).tp_dict, "class_", make_descriptor(Terms::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(Terms).tp_dict, "wrapfn_", make_descriptor(t_Terms::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(Terms).tp_dict, "boxfn_", make_descriptor(boxObject));
          env->getClass(Terms::initializeClass);
          PyDict_SetItemString(PY_TYPE(Terms).tp_dict, "EMPTY_ARRAY", make_descriptor(JArray<jobject>(Terms::EMPTY_ARRAY->this$).wrap(t_Terms::wrap_jobject)));
        }

        static PyObject *t_Terms_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, Terms::initializeClass, 1)))
            return NULL;
          return t_Terms::wrap_Object(Terms(((t_Terms *) arg)->object.this$));
        }
        static PyObject *t_Terms_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, Terms::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_Terms_getComparator(t_Terms *self)
        {
          ::java::util::Comparator result((jobject) NULL);
          OBJ_CALL(result = self->object.getComparator());
          return ::java::util::t_Comparator::wrap_Object(result, &::org::apache::lucene::util::PY_TYPE(BytesRef));
        }

        static PyObject *t_Terms_getDocCount(t_Terms *self)
        {
          jint result;
          OBJ_CALL(result = self->object.getDocCount());
          return PyInt_FromLong((long) result);
        }

        static PyObject *t_Terms_getMax(t_Terms *self)
        {
          ::org::apache::lucene::util::BytesRef result((jobject) NULL);
          OBJ_CALL(result = self->object.getMax());
          return ::org::apache::lucene::util::t_BytesRef::wrap_Object(result);
        }

        static PyObject *t_Terms_getMin(t_Terms *self)
        {
          ::org::apache::lucene::util::BytesRef result((jobject) NULL);
          OBJ_CALL(result = self->object.getMin());
          return ::org::apache::lucene::util::t_BytesRef::wrap_Object(result);
        }

        static PyObject *t_Terms_getSumDocFreq(t_Terms *self)
        {
          jlong result;
          OBJ_CALL(result = self->object.getSumDocFreq());
          return PyLong_FromLongLong((PY_LONG_LONG) result);
        }

        static PyObject *t_Terms_getSumTotalTermFreq(t_Terms *self)
        {
          jlong result;
          OBJ_CALL(result = self->object.getSumTotalTermFreq());
          return PyLong_FromLongLong((PY_LONG_LONG) result);
        }

        static PyObject *t_Terms_hasFreqs(t_Terms *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.hasFreqs());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_Terms_hasOffsets(t_Terms *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.hasOffsets());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_Terms_hasPayloads(t_Terms *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.hasPayloads());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_Terms_hasPositions(t_Terms *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.hasPositions());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_Terms_intersect(t_Terms *self, PyObject *args)
        {
          ::org::apache::lucene::util::automaton::CompiledAutomaton a0((jobject) NULL);
          ::org::apache::lucene::util::BytesRef a1((jobject) NULL);
          ::org::apache::lucene::index::TermsEnum result((jobject) NULL);

          if (!parseArgs(args, "kk", ::org::apache::lucene::util::automaton::CompiledAutomaton::initializeClass, ::org::apache::lucene::util::BytesRef::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = self->object.intersect(a0, a1));
            return ::org::apache::lucene::index::t_TermsEnum::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "intersect", args);
          return NULL;
        }

        static PyObject *t_Terms_iterator(t_Terms *self, PyObject *arg)
        {
          ::org::apache::lucene::index::TermsEnum a0((jobject) NULL);
          ::org::apache::lucene::index::TermsEnum result((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::index::TermsEnum::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.iterator(a0));
            return ::org::apache::lucene::index::t_TermsEnum::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "iterator", arg);
          return NULL;
        }

        static PyObject *t_Terms_size(t_Terms *self)
        {
          jlong result;
          OBJ_CALL(result = self->object.size());
          return PyLong_FromLongLong((PY_LONG_LONG) result);
        }

        static PyObject *t_Terms_get__comparator(t_Terms *self, void *data)
        {
          ::java::util::Comparator value((jobject) NULL);
          OBJ_CALL(value = self->object.getComparator());
          return ::java::util::t_Comparator::wrap_Object(value);
        }

        static PyObject *t_Terms_get__docCount(t_Terms *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object.getDocCount());
          return PyInt_FromLong((long) value);
        }

        static PyObject *t_Terms_get__max(t_Terms *self, void *data)
        {
          ::org::apache::lucene::util::BytesRef value((jobject) NULL);
          OBJ_CALL(value = self->object.getMax());
          return ::org::apache::lucene::util::t_BytesRef::wrap_Object(value);
        }

        static PyObject *t_Terms_get__min(t_Terms *self, void *data)
        {
          ::org::apache::lucene::util::BytesRef value((jobject) NULL);
          OBJ_CALL(value = self->object.getMin());
          return ::org::apache::lucene::util::t_BytesRef::wrap_Object(value);
        }

        static PyObject *t_Terms_get__sumDocFreq(t_Terms *self, void *data)
        {
          jlong value;
          OBJ_CALL(value = self->object.getSumDocFreq());
          return PyLong_FromLongLong((PY_LONG_LONG) value);
        }

        static PyObject *t_Terms_get__sumTotalTermFreq(t_Terms *self, void *data)
        {
          jlong value;
          OBJ_CALL(value = self->object.getSumTotalTermFreq());
          return PyLong_FromLongLong((PY_LONG_LONG) value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/similarities/LambdaTTF.h"
#include "org/apache/lucene/search/similarities/BasicStats.h"
#include "java/lang/String.h"
#include "org/apache/lucene/search/Explanation.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace similarities {

          ::java::lang::Class *LambdaTTF::class$ = NULL;
          jmethodID *LambdaTTF::mids$ = NULL;
          bool LambdaTTF::live$ = false;

          jclass LambdaTTF::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/similarities/LambdaTTF");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_explain_eddc6641] = env->getMethodID(cls, "explain", "(Lorg/apache/lucene/search/similarities/BasicStats;)Lorg/apache/lucene/search/Explanation;");
              mids$[mid_lambda_cb225ea0] = env->getMethodID(cls, "lambda", "(Lorg/apache/lucene/search/similarities/BasicStats;)F");
              mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          LambdaTTF::LambdaTTF() : ::org::apache::lucene::search::similarities::Lambda(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          ::org::apache::lucene::search::Explanation LambdaTTF::explain(const ::org::apache::lucene::search::similarities::BasicStats & a0) const
          {
            return ::org::apache::lucene::search::Explanation(env->callObjectMethod(this$, mids$[mid_explain_eddc6641], a0.this$));
          }

          jfloat LambdaTTF::lambda(const ::org::apache::lucene::search::similarities::BasicStats & a0) const
          {
            return env->callFloatMethod(this$, mids$[mid_lambda_cb225ea0], a0.this$);
          }

          ::java::lang::String LambdaTTF::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace similarities {
          static PyObject *t_LambdaTTF_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_LambdaTTF_instance_(PyTypeObject *type, PyObject *arg);
          static int t_LambdaTTF_init_(t_LambdaTTF *self, PyObject *args, PyObject *kwds);
          static PyObject *t_LambdaTTF_explain(t_LambdaTTF *self, PyObject *args);
          static PyObject *t_LambdaTTF_lambda(t_LambdaTTF *self, PyObject *args);
          static PyObject *t_LambdaTTF_toString(t_LambdaTTF *self, PyObject *args);

          static PyMethodDef t_LambdaTTF__methods_[] = {
            DECLARE_METHOD(t_LambdaTTF, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_LambdaTTF, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_LambdaTTF, explain, METH_VARARGS),
            DECLARE_METHOD(t_LambdaTTF, lambda, METH_VARARGS),
            DECLARE_METHOD(t_LambdaTTF, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(LambdaTTF, t_LambdaTTF, ::org::apache::lucene::search::similarities::Lambda, LambdaTTF, t_LambdaTTF_init_, 0, 0, 0, 0, 0);

          void t_LambdaTTF::install(PyObject *module)
          {
            installType(&PY_TYPE(LambdaTTF), module, "LambdaTTF", 0);
          }

          void t_LambdaTTF::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(LambdaTTF).tp_dict, "class_", make_descriptor(LambdaTTF::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(LambdaTTF).tp_dict, "wrapfn_", make_descriptor(t_LambdaTTF::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(LambdaTTF).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_LambdaTTF_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, LambdaTTF::initializeClass, 1)))
              return NULL;
            return t_LambdaTTF::wrap_Object(LambdaTTF(((t_LambdaTTF *) arg)->object.this$));
          }
          static PyObject *t_LambdaTTF_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, LambdaTTF::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_LambdaTTF_init_(t_LambdaTTF *self, PyObject *args, PyObject *kwds)
          {
            LambdaTTF object((jobject) NULL);

            INT_CALL(object = LambdaTTF());
            self->object = object;

            return 0;
          }

          static PyObject *t_LambdaTTF_explain(t_LambdaTTF *self, PyObject *args)
          {
            ::org::apache::lucene::search::similarities::BasicStats a0((jobject) NULL);
            ::org::apache::lucene::search::Explanation result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::search::similarities::BasicStats::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.explain(a0));
              return ::org::apache::lucene::search::t_Explanation::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(LambdaTTF), (PyObject *) self, "explain", args, 2);
          }

          static PyObject *t_LambdaTTF_lambda(t_LambdaTTF *self, PyObject *args)
          {
            ::org::apache::lucene::search::similarities::BasicStats a0((jobject) NULL);
            jfloat result;

            if (!parseArgs(args, "k", ::org::apache::lucene::search::similarities::BasicStats::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.lambda(a0));
              return PyFloat_FromDouble((double) result);
            }

            return callSuper(&PY_TYPE(LambdaTTF), (PyObject *) self, "lambda", args, 2);
          }

          static PyObject *t_LambdaTTF_toString(t_LambdaTTF *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(&PY_TYPE(LambdaTTF), (PyObject *) self, "toString", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/standard/builders/AnyQueryNodeBuilder.h"
#include "org/apache/lucene/search/BooleanQuery.h"
#include "org/apache/lucene/queryparser/flexible/core/QueryNodeException.h"
#include "org/apache/lucene/queryparser/flexible/standard/builders/StandardQueryBuilder.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/QueryNode.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace builders {

              ::java::lang::Class *AnyQueryNodeBuilder::class$ = NULL;
              jmethodID *AnyQueryNodeBuilder::mids$ = NULL;
              bool AnyQueryNodeBuilder::live$ = false;

              jclass AnyQueryNodeBuilder::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/standard/builders/AnyQueryNodeBuilder");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
                  mids$[mid_build_e1a6cc4e] = env->getMethodID(cls, "build", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;)Lorg/apache/lucene/search/BooleanQuery;");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              AnyQueryNodeBuilder::AnyQueryNodeBuilder() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

              ::org::apache::lucene::search::BooleanQuery AnyQueryNodeBuilder::build(const ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode & a0) const
              {
                return ::org::apache::lucene::search::BooleanQuery(env->callObjectMethod(this$, mids$[mid_build_e1a6cc4e], a0.this$));
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace builders {
              static PyObject *t_AnyQueryNodeBuilder_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_AnyQueryNodeBuilder_instance_(PyTypeObject *type, PyObject *arg);
              static int t_AnyQueryNodeBuilder_init_(t_AnyQueryNodeBuilder *self, PyObject *args, PyObject *kwds);
              static PyObject *t_AnyQueryNodeBuilder_build(t_AnyQueryNodeBuilder *self, PyObject *arg);

              static PyMethodDef t_AnyQueryNodeBuilder__methods_[] = {
                DECLARE_METHOD(t_AnyQueryNodeBuilder, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_AnyQueryNodeBuilder, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_AnyQueryNodeBuilder, build, METH_O),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(AnyQueryNodeBuilder, t_AnyQueryNodeBuilder, ::java::lang::Object, AnyQueryNodeBuilder, t_AnyQueryNodeBuilder_init_, 0, 0, 0, 0, 0);

              void t_AnyQueryNodeBuilder::install(PyObject *module)
              {
                installType(&PY_TYPE(AnyQueryNodeBuilder), module, "AnyQueryNodeBuilder", 0);
              }

              void t_AnyQueryNodeBuilder::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(AnyQueryNodeBuilder).tp_dict, "class_", make_descriptor(AnyQueryNodeBuilder::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(AnyQueryNodeBuilder).tp_dict, "wrapfn_", make_descriptor(t_AnyQueryNodeBuilder::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(AnyQueryNodeBuilder).tp_dict, "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_AnyQueryNodeBuilder_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, AnyQueryNodeBuilder::initializeClass, 1)))
                  return NULL;
                return t_AnyQueryNodeBuilder::wrap_Object(AnyQueryNodeBuilder(((t_AnyQueryNodeBuilder *) arg)->object.this$));
              }
              static PyObject *t_AnyQueryNodeBuilder_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, AnyQueryNodeBuilder::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_AnyQueryNodeBuilder_init_(t_AnyQueryNodeBuilder *self, PyObject *args, PyObject *kwds)
              {
                AnyQueryNodeBuilder object((jobject) NULL);

                INT_CALL(object = AnyQueryNodeBuilder());
                self->object = object;

                return 0;
              }

              static PyObject *t_AnyQueryNodeBuilder_build(t_AnyQueryNodeBuilder *self, PyObject *arg)
              {
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode a0((jobject) NULL);
                ::org::apache::lucene::search::BooleanQuery result((jobject) NULL);

                if (!parseArg(arg, "k", ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode::initializeClass, &a0))
                {
                  OBJ_CALL(result = self->object.build(a0));
                  return ::org::apache::lucene::search::t_BooleanQuery::wrap_Object(result);
                }

                PyErr_SetArgsError((PyObject *) self, "build", arg);
                return NULL;
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/Query.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/search/Weight.h"
#include "java/io/IOException.h"
#include "java/lang/Cloneable.h"
#include "java/util/Set.h"
#include "java/lang/String.h"
#include "org/apache/lucene/search/IndexSearcher.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "org/apache/lucene/index/Term.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *Query::class$ = NULL;
        jmethodID *Query::mids$ = NULL;
        bool Query::live$ = false;

        jclass Query::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/Query");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_clone_97e3851a] = env->getMethodID(cls, "clone", "()Lorg/apache/lucene/search/Query;");
            mids$[mid_createWeight_367763cb] = env->getMethodID(cls, "createWeight", "(Lorg/apache/lucene/search/IndexSearcher;)Lorg/apache/lucene/search/Weight;");
            mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
            mids$[mid_extractTerms_fb4f2b26] = env->getMethodID(cls, "extractTerms", "(Ljava/util/Set;)V");
            mids$[mid_getBoost_54c6a176] = env->getMethodID(cls, "getBoost", "()F");
            mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
            mids$[mid_rewrite_7edcaa43] = env->getMethodID(cls, "rewrite", "(Lorg/apache/lucene/index/IndexReader;)Lorg/apache/lucene/search/Query;");
            mids$[mid_setBoost_06298cab] = env->getMethodID(cls, "setBoost", "(F)V");
            mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");
            mids$[mid_toString_97a5258f] = env->getMethodID(cls, "toString", "(Ljava/lang/String;)Ljava/lang/String;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        Query::Query() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        Query Query::clone() const
        {
          return Query(env->callObjectMethod(this$, mids$[mid_clone_97e3851a]));
        }

        ::org::apache::lucene::search::Weight Query::createWeight(const ::org::apache::lucene::search::IndexSearcher & a0) const
        {
          return ::org::apache::lucene::search::Weight(env->callObjectMethod(this$, mids$[mid_createWeight_367763cb], a0.this$));
        }

        jboolean Query::equals(const ::java::lang::Object & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
        }

        void Query::extractTerms(const ::java::util::Set & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_extractTerms_fb4f2b26], a0.this$);
        }

        jfloat Query::getBoost() const
        {
          return env->callFloatMethod(this$, mids$[mid_getBoost_54c6a176]);
        }

        jint Query::hashCode() const
        {
          return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
        }

        Query Query::rewrite(const ::org::apache::lucene::index::IndexReader & a0) const
        {
          return Query(env->callObjectMethod(this$, mids$[mid_rewrite_7edcaa43], a0.this$));
        }

        void Query::setBoost(jfloat a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setBoost_06298cab], a0);
        }

        ::java::lang::String Query::toString() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
        }

        ::java::lang::String Query::toString(const ::java::lang::String & a0) const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_97a5258f], a0.this$));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_Query_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_Query_instance_(PyTypeObject *type, PyObject *arg);
        static int t_Query_init_(t_Query *self, PyObject *args, PyObject *kwds);
        static PyObject *t_Query_clone(t_Query *self);
        static PyObject *t_Query_createWeight(t_Query *self, PyObject *arg);
        static PyObject *t_Query_equals(t_Query *self, PyObject *args);
        static PyObject *t_Query_extractTerms(t_Query *self, PyObject *arg);
        static PyObject *t_Query_getBoost(t_Query *self);
        static PyObject *t_Query_hashCode(t_Query *self, PyObject *args);
        static PyObject *t_Query_rewrite(t_Query *self, PyObject *arg);
        static PyObject *t_Query_setBoost(t_Query *self, PyObject *arg);
        static PyObject *t_Query_toString(t_Query *self, PyObject *args);
        static PyObject *t_Query_get__boost(t_Query *self, void *data);
        static int t_Query_set__boost(t_Query *self, PyObject *arg, void *data);
        static PyGetSetDef t_Query__fields_[] = {
          DECLARE_GETSET_FIELD(t_Query, boost),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_Query__methods_[] = {
          DECLARE_METHOD(t_Query, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_Query, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_Query, clone, METH_NOARGS),
          DECLARE_METHOD(t_Query, createWeight, METH_O),
          DECLARE_METHOD(t_Query, equals, METH_VARARGS),
          DECLARE_METHOD(t_Query, extractTerms, METH_O),
          DECLARE_METHOD(t_Query, getBoost, METH_NOARGS),
          DECLARE_METHOD(t_Query, hashCode, METH_VARARGS),
          DECLARE_METHOD(t_Query, rewrite, METH_O),
          DECLARE_METHOD(t_Query, setBoost, METH_O),
          DECLARE_METHOD(t_Query, toString, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(Query, t_Query, ::java::lang::Object, Query, t_Query_init_, 0, 0, t_Query__fields_, 0, 0);

        void t_Query::install(PyObject *module)
        {
          installType(&PY_TYPE(Query), module, "Query", 0);
        }

        void t_Query::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(Query).tp_dict, "class_", make_descriptor(Query::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(Query).tp_dict, "wrapfn_", make_descriptor(t_Query::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(Query).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_Query_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, Query::initializeClass, 1)))
            return NULL;
          return t_Query::wrap_Object(Query(((t_Query *) arg)->object.this$));
        }
        static PyObject *t_Query_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, Query::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_Query_init_(t_Query *self, PyObject *args, PyObject *kwds)
        {
          Query object((jobject) NULL);

          INT_CALL(object = Query());
          self->object = object;

          return 0;
        }

        static PyObject *t_Query_clone(t_Query *self)
        {
          Query result((jobject) NULL);
          OBJ_CALL(result = self->object.clone());
          return t_Query::wrap_Object(result);
        }

        static PyObject *t_Query_createWeight(t_Query *self, PyObject *arg)
        {
          ::org::apache::lucene::search::IndexSearcher a0((jobject) NULL);
          ::org::apache::lucene::search::Weight result((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::search::IndexSearcher::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.createWeight(a0));
            return ::org::apache::lucene::search::t_Weight::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "createWeight", arg);
          return NULL;
        }

        static PyObject *t_Query_equals(t_Query *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.equals(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(Query), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_Query_extractTerms(t_Query *self, PyObject *arg)
        {
          ::java::util::Set a0((jobject) NULL);
          PyTypeObject **p0;

          if (!parseArg(arg, "K", ::java::util::Set::initializeClass, &a0, &p0, ::java::util::t_Set::parameters_))
          {
            OBJ_CALL(self->object.extractTerms(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "extractTerms", arg);
          return NULL;
        }

        static PyObject *t_Query_getBoost(t_Query *self)
        {
          jfloat result;
          OBJ_CALL(result = self->object.getBoost());
          return PyFloat_FromDouble((double) result);
        }

        static PyObject *t_Query_hashCode(t_Query *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hashCode());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(Query), (PyObject *) self, "hashCode", args, 2);
        }

        static PyObject *t_Query_rewrite(t_Query *self, PyObject *arg)
        {
          ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
          Query result((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::index::IndexReader::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.rewrite(a0));
            return t_Query::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "rewrite", arg);
          return NULL;
        }

        static PyObject *t_Query_setBoost(t_Query *self, PyObject *arg)
        {
          jfloat a0;

          if (!parseArg(arg, "F", &a0))
          {
            OBJ_CALL(self->object.setBoost(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setBoost", arg);
          return NULL;
        }

        static PyObject *t_Query_toString(t_Query *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 0:
            {
              ::java::lang::String result((jobject) NULL);
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }
            break;
           case 1:
            {
              ::java::lang::String a0((jobject) NULL);
              ::java::lang::String result((jobject) NULL);

              if (!parseArgs(args, "s", &a0))
              {
                OBJ_CALL(result = self->object.toString(a0));
                return j2p(result);
              }
            }
          }

          return callSuper(&PY_TYPE(Query), (PyObject *) self, "toString", args, 2);
        }

        static PyObject *t_Query_get__boost(t_Query *self, void *data)
        {
          jfloat value;
          OBJ_CALL(value = self->object.getBoost());
          return PyFloat_FromDouble((double) value);
        }
        static int t_Query_set__boost(t_Query *self, PyObject *arg, void *data)
        {
          {
            jfloat value;
            if (!parseArg(arg, "F", &value))
            {
              INT_CALL(self->object.setBoost(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "boost", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/ByteBlockPool$DirectAllocator.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *ByteBlockPool$DirectAllocator::class$ = NULL;
        jmethodID *ByteBlockPool$DirectAllocator::mids$ = NULL;
        bool ByteBlockPool$DirectAllocator::live$ = false;

        jclass ByteBlockPool$DirectAllocator::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/ByteBlockPool$DirectAllocator");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_init$_39c7bd3c] = env->getMethodID(cls, "<init>", "(I)V");
            mids$[mid_recycleByteBlocks_d3ffa89f] = env->getMethodID(cls, "recycleByteBlocks", "([[BII)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        ByteBlockPool$DirectAllocator::ByteBlockPool$DirectAllocator() : ::org::apache::lucene::util::ByteBlockPool$Allocator(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        ByteBlockPool$DirectAllocator::ByteBlockPool$DirectAllocator(jint a0) : ::org::apache::lucene::util::ByteBlockPool$Allocator(env->newObject(initializeClass, &mids$, mid_init$_39c7bd3c, a0)) {}

        void ByteBlockPool$DirectAllocator::recycleByteBlocks(const JArray< JArray< jbyte > > & a0, jint a1, jint a2) const
        {
          env->callVoidMethod(this$, mids$[mid_recycleByteBlocks_d3ffa89f], a0.this$, a1, a2);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_ByteBlockPool$DirectAllocator_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_ByteBlockPool$DirectAllocator_instance_(PyTypeObject *type, PyObject *arg);
        static int t_ByteBlockPool$DirectAllocator_init_(t_ByteBlockPool$DirectAllocator *self, PyObject *args, PyObject *kwds);
        static PyObject *t_ByteBlockPool$DirectAllocator_recycleByteBlocks(t_ByteBlockPool$DirectAllocator *self, PyObject *args);

        static PyMethodDef t_ByteBlockPool$DirectAllocator__methods_[] = {
          DECLARE_METHOD(t_ByteBlockPool$DirectAllocator, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_ByteBlockPool$DirectAllocator, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_ByteBlockPool$DirectAllocator, recycleByteBlocks, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(ByteBlockPool$DirectAllocator, t_ByteBlockPool$DirectAllocator, ::org::apache::lucene::util::ByteBlockPool$Allocator, ByteBlockPool$DirectAllocator, t_ByteBlockPool$DirectAllocator_init_, 0, 0, 0, 0, 0);

        void t_ByteBlockPool$DirectAllocator::install(PyObject *module)
        {
          installType(&PY_TYPE(ByteBlockPool$DirectAllocator), module, "ByteBlockPool$DirectAllocator", 0);
        }

        void t_ByteBlockPool$DirectAllocator::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(ByteBlockPool$DirectAllocator).tp_dict, "class_", make_descriptor(ByteBlockPool$DirectAllocator::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(ByteBlockPool$DirectAllocator).tp_dict, "wrapfn_", make_descriptor(t_ByteBlockPool$DirectAllocator::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(ByteBlockPool$DirectAllocator).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_ByteBlockPool$DirectAllocator_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, ByteBlockPool$DirectAllocator::initializeClass, 1)))
            return NULL;
          return t_ByteBlockPool$DirectAllocator::wrap_Object(ByteBlockPool$DirectAllocator(((t_ByteBlockPool$DirectAllocator *) arg)->object.this$));
        }
        static PyObject *t_ByteBlockPool$DirectAllocator_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, ByteBlockPool$DirectAllocator::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_ByteBlockPool$DirectAllocator_init_(t_ByteBlockPool$DirectAllocator *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 0:
            {
              ByteBlockPool$DirectAllocator object((jobject) NULL);

              INT_CALL(object = ByteBlockPool$DirectAllocator());
              self->object = object;
              break;
            }
            goto err;
           case 1:
            {
              jint a0;
              ByteBlockPool$DirectAllocator object((jobject) NULL);

              if (!parseArgs(args, "I", &a0))
              {
                INT_CALL(object = ByteBlockPool$DirectAllocator(a0));
                self->object = object;
                break;
              }
            }
           default:
           err:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_ByteBlockPool$DirectAllocator_recycleByteBlocks(t_ByteBlockPool$DirectAllocator *self, PyObject *args)
        {
          JArray< JArray< jbyte > > a0((jobject) NULL);
          jint a1;
          jint a2;

          if (!parseArgs(args, "[[BII", &a0, &a1, &a2))
          {
            OBJ_CALL(self->object.recycleByteBlocks(a0, a1, a2));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(ByteBlockPool$DirectAllocator), (PyObject *) self, "recycleByteBlocks", args, 2);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/en/KStemFilterFactory.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/String.h"
#include "java/util/Map.h"
#include "org/apache/lucene/analysis/TokenFilter.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace en {

          ::java::lang::Class *KStemFilterFactory::class$ = NULL;
          jmethodID *KStemFilterFactory::mids$ = NULL;
          bool KStemFilterFactory::live$ = false;

          jclass KStemFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/en/KStemFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4c9e2b1c] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_2969f76d] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/TokenFilter;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          KStemFilterFactory::KStemFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_4c9e2b1c, a0.this$)) {}

          ::org::apache::lucene::analysis::TokenFilter KStemFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::TokenFilter(env->callObjectMethod(this$, mids$[mid_create_2969f76d], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace en {
          static PyObject *t_KStemFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_KStemFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_KStemFilterFactory_init_(t_KStemFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_KStemFilterFactory_create(t_KStemFilterFactory *self, PyObject *args);

          static PyMethodDef t_KStemFilterFactory__methods_[] = {
            DECLARE_METHOD(t_KStemFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_KStemFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_KStemFilterFactory, create, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(KStemFilterFactory, t_KStemFilterFactory, ::org::apache::lucene::analysis::util::TokenFilterFactory, KStemFilterFactory, t_KStemFilterFactory_init_, 0, 0, 0, 0, 0);

          void t_KStemFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(KStemFilterFactory), module, "KStemFilterFactory", 0);
          }

          void t_KStemFilterFactory::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(KStemFilterFactory).tp_dict, "class_", make_descriptor(KStemFilterFactory::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(KStemFilterFactory).tp_dict, "wrapfn_", make_descriptor(t_KStemFilterFactory::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(KStemFilterFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_KStemFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, KStemFilterFactory::initializeClass, 1)))
              return NULL;
            return t_KStemFilterFactory::wrap_Object(KStemFilterFactory(((t_KStemFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_KStemFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, KStemFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_KStemFilterFactory_init_(t_KStemFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            KStemFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = KStemFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_KStemFilterFactory_create(t_KStemFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::TokenFilter result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::t_TokenFilter::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(KStemFilterFactory), (PyObject *) self, "create", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "java/text/DecimalFormat.h"
#include "java/lang/Number.h"
#include "java/util/Currency.h"
#include "java/lang/Class.h"
#include "java/lang/Object.h"
#include "java/lang/StringBuffer.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace java {
  namespace text {

    ::java::lang::Class *DecimalFormat::class$ = NULL;
    jmethodID *DecimalFormat::mids$ = NULL;
    bool DecimalFormat::live$ = false;

    jclass DecimalFormat::initializeClass(bool getOnly)
    {
      if (getOnly)
        return (jclass) (live$ ? class$->this$ : NULL);
      if (class$ == NULL)
      {
        jclass cls = (jclass) env->findClass("java/text/DecimalFormat");

        mids$ = new jmethodID[max_mid];
        mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
        mids$[mid_init$_5fdc3f48] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;)V");
        mids$[mid_applyLocalizedPattern_5fdc3f48] = env->getMethodID(cls, "applyLocalizedPattern", "(Ljava/lang/String;)V");
        mids$[mid_applyPattern_5fdc3f48] = env->getMethodID(cls, "applyPattern", "(Ljava/lang/String;)V");
        mids$[mid_clone_846352c3] = env->getMethodID(cls, "clone", "()Ljava/lang/Object;");
        mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
        mids$[mid_getCurrency_14c3f2a1] = env->getMethodID(cls, "getCurrency", "()Ljava/util/Currency;");
        mids$[mid_getGroupingSize_54c6a179] = env->getMethodID(cls, "getGroupingSize", "()I");
        mids$[mid_getMaximumFractionDigits_54c6a179] = env->getMethodID(cls, "getMaximumFractionDigits", "()I");
        mids$[mid_getMaximumIntegerDigits_54c6a179] = env->getMethodID(cls, "getMaximumIntegerDigits", "()I");
        mids$[mid_getMinimumFractionDigits_54c6a179] = env->getMethodID(cls, "getMinimumFractionDigits", "()I");
        mids$[mid_getMinimumIntegerDigits_54c6a179] = env->getMethodID(cls, "getMinimumIntegerDigits", "()I");
        mids$[mid_getMultiplier_54c6a179] = env->getMethodID(cls, "getMultiplier", "()I");
        mids$[mid_getNegativePrefix_14c7b5c5] = env->getMethodID(cls, "getNegativePrefix", "()Ljava/lang/String;");
        mids$[mid_getNegativeSuffix_14c7b5c5] = env->getMethodID(cls, "getNegativeSuffix", "()Ljava/lang/String;");
        mids$[mid_getPositivePrefix_14c7b5c5] = env->getMethodID(cls, "getPositivePrefix", "()Ljava/lang/String;");
        mids$[mid_getPositiveSuffix_14c7b5c5] = env->getMethodID(cls, "getPositiveSuffix", "()Ljava/lang/String;");
        mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
        mids$[mid_isDecimalSeparatorAlwaysShown_54c6a16a] = env->getMethodID(cls, "isDecimalSeparatorAlwaysShown", "()Z");
        mids$[mid_isParseBigDecimal_54c6a16a] = env->getMethodID(cls, "isParseBigDecimal", "()Z");
        mids$[mid_setCurrency_de939370] = env->getMethodID(cls, "setCurrency", "(Ljava/util/Currency;)V");
        mids$[mid_setDecimalSeparatorAlwaysShown_bb0c767f] = env->getMethodID(cls, "setDecimalSeparatorAlwaysShown", "(Z)V");
        mids$[mid_setGroupingSize_39c7bd3c] = env->getMethodID(cls, "setGroupingSize", "(I)V");
        mids$[mid_setGroupingUsed_bb0c767f] = env->getMethodID(cls, "setGroupingUsed", "(Z)V");
        mids$[mid_setMaximumFractionDigits_39c7bd3c] = env->getMethodID(cls, "setMaximumFractionDigits", "(I)V");
        mids$[mid_setMaximumIntegerDigits_39c7bd3c] = env->getMethodID(cls, "setMaximumIntegerDigits", "(I)V");
        mids$[mid_setMinimumFractionDigits_39c7bd3c] = env->getMethodID(cls, "setMinimumFractionDigits", "(I)V");
        mids$[mid_setMinimumIntegerDigits_39c7bd3c] = env->getMethodID(cls, "setMinimumIntegerDigits", "(I)V");
        mids$[mid_setMultiplier_39c7bd3c] = env->getMethodID(cls, "setMultiplier", "(I)V");
        mids$[mid_setNegativePrefix_5fdc3f48] = env->getMethodID(cls, "setNegativePrefix", "(Ljava/lang/String;)V");
        mids$[mid_setNegativeSuffix_5fdc3f48] = env->getMethodID(cls, "setNegativeSuffix", "(Ljava/lang/String;)V");
        mids$[mid_setParseBigDecimal_bb0c767f] = env->getMethodID(cls, "setParseBigDecimal", "(Z)V");
        mids$[mid_setPositivePrefix_5fdc3f48] = env->getMethodID(cls, "setPositivePrefix", "(Ljava/lang/String;)V");
        mids$[mid_setPositiveSuffix_5fdc3f48] = env->getMethodID(cls, "setPositiveSuffix", "(Ljava/lang/String;)V");
        mids$[mid_toLocalizedPattern_14c7b5c5] = env->getMethodID(cls, "toLocalizedPattern", "()Ljava/lang/String;");
        mids$[mid_toPattern_14c7b5c5] = env->getMethodID(cls, "toPattern", "()Ljava/lang/String;");

        class$ = (::java::lang::Class *) new JObject(cls);
        live$ = true;
      }
      return (jclass) class$->this$;
    }

    DecimalFormat::DecimalFormat() : ::java::text::NumberFormat(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

    DecimalFormat::DecimalFormat(const ::java::lang::String & a0) : ::java::text::NumberFormat(env->newObject(initializeClass, &mids$, mid_init$_5fdc3f48, a0.this$)) {}

    void DecimalFormat::applyLocalizedPattern(const ::java::lang::String & a0) const
    {
      env->callVoidMethod(this$, mids$[mid_applyLocalizedPattern_5fdc3f48], a0.this$);
    }

    void DecimalFormat::applyPattern(const ::java::lang::String & a0) const
    {
      env->callVoidMethod(this$, mids$[mid_applyPattern_5fdc3f48], a0.this$);
    }

    ::java::lang::Object DecimalFormat::clone() const
    {
      return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_clone_846352c3]));
    }

    jboolean DecimalFormat::equals(const ::java::lang::Object & a0) const
    {
      return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
    }

    ::java::util::Currency DecimalFormat::getCurrency() const
    {
      return ::java::util::Currency(env->callObjectMethod(this$, mids$[mid_getCurrency_14c3f2a1]));
    }

    jint DecimalFormat::getGroupingSize() const
    {
      return env->callIntMethod(this$, mids$[mid_getGroupingSize_54c6a179]);
    }

    jint DecimalFormat::getMaximumFractionDigits() const
    {
      return env->callIntMethod(this$, mids$[mid_getMaximumFractionDigits_54c6a179]);
    }

    jint DecimalFormat::getMaximumIntegerDigits() const
    {
      return env->callIntMethod(this$, mids$[mid_getMaximumIntegerDigits_54c6a179]);
    }

    jint DecimalFormat::getMinimumFractionDigits() const
    {
      return env->callIntMethod(this$, mids$[mid_getMinimumFractionDigits_54c6a179]);
    }

    jint DecimalFormat::getMinimumIntegerDigits() const
    {
      return env->callIntMethod(this$, mids$[mid_getMinimumIntegerDigits_54c6a179]);
    }

    jint DecimalFormat::getMultiplier() const
    {
      return env->callIntMethod(this$, mids$[mid_getMultiplier_54c6a179]);
    }

    ::java::lang::String DecimalFormat::getNegativePrefix() const
    {
      return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getNegativePrefix_14c7b5c5]));
    }

    ::java::lang::String DecimalFormat::getNegativeSuffix() const
    {
      return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getNegativeSuffix_14c7b5c5]));
    }

    ::java::lang::String DecimalFormat::getPositivePrefix() const
    {
      return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getPositivePrefix_14c7b5c5]));
    }

    ::java::lang::String DecimalFormat::getPositiveSuffix() const
    {
      return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getPositiveSuffix_14c7b5c5]));
    }

    jint DecimalFormat::hashCode() const
    {
      return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
    }

    jboolean DecimalFormat::isDecimalSeparatorAlwaysShown() const
    {
      return env->callBooleanMethod(this$, mids$[mid_isDecimalSeparatorAlwaysShown_54c6a16a]);
    }

    jboolean DecimalFormat::isParseBigDecimal() const
    {
      return env->callBooleanMethod(this$, mids$[mid_isParseBigDecimal_54c6a16a]);
    }

    void DecimalFormat::setCurrency(const ::java::util::Currency & a0) const
    {
      env->callVoidMethod(this$, mids$[mid_setCurrency_de939370], a0.this$);
    }

    void DecimalFormat::setDecimalSeparatorAlwaysShown(jboolean a0) const
    {
      env->callVoidMethod(this$, mids$[mid_setDecimalSeparatorAlwaysShown_bb0c767f], a0);
    }

    void DecimalFormat::setGroupingSize(jint a0) const
    {
      env->callVoidMethod(this$, mids$[mid_setGroupingSize_39c7bd3c], a0);
    }

    void DecimalFormat::setGroupingUsed(jboolean a0) const
    {
      env->callVoidMethod(this$, mids$[mid_setGroupingUsed_bb0c767f], a0);
    }

    void DecimalFormat::setMaximumFractionDigits(jint a0) const
    {
      env->callVoidMethod(this$, mids$[mid_setMaximumFractionDigits_39c7bd3c], a0);
    }

    void DecimalFormat::setMaximumIntegerDigits(jint a0) const
    {
      env->callVoidMethod(this$, mids$[mid_setMaximumIntegerDigits_39c7bd3c], a0);
    }

    void DecimalFormat::setMinimumFractionDigits(jint a0) const
    {
      env->callVoidMethod(this$, mids$[mid_setMinimumFractionDigits_39c7bd3c], a0);
    }

    void DecimalFormat::setMinimumIntegerDigits(jint a0) const
    {
      env->callVoidMethod(this$, mids$[mid_setMinimumIntegerDigits_39c7bd3c], a0);
    }

    void DecimalFormat::setMultiplier(jint a0) const
    {
      env->callVoidMethod(this$, mids$[mid_setMultiplier_39c7bd3c], a0);
    }

    void DecimalFormat::setNegativePrefix(const ::java::lang::String & a0) const
    {
      env->callVoidMethod(this$, mids$[mid_setNegativePrefix_5fdc3f48], a0.this$);
    }

    void DecimalFormat::setNegativeSuffix(const ::java::lang::String & a0) const
    {
      env->callVoidMethod(this$, mids$[mid_setNegativeSuffix_5fdc3f48], a0.this$);
    }

    void DecimalFormat::setParseBigDecimal(jboolean a0) const
    {
      env->callVoidMethod(this$, mids$[mid_setParseBigDecimal_bb0c767f], a0);
    }

    void DecimalFormat::setPositivePrefix(const ::java::lang::String & a0) const
    {
      env->callVoidMethod(this$, mids$[mid_setPositivePrefix_5fdc3f48], a0.this$);
    }

    void DecimalFormat::setPositiveSuffix(const ::java::lang::String & a0) const
    {
      env->callVoidMethod(this$, mids$[mid_setPositiveSuffix_5fdc3f48], a0.this$);
    }

    ::java::lang::String DecimalFormat::toLocalizedPattern() const
    {
      return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toLocalizedPattern_14c7b5c5]));
    }

    ::java::lang::String DecimalFormat::toPattern() const
    {
      return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toPattern_14c7b5c5]));
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace java {
  namespace text {
    static PyObject *t_DecimalFormat_cast_(PyTypeObject *type, PyObject *arg);
    static PyObject *t_DecimalFormat_instance_(PyTypeObject *type, PyObject *arg);
    static int t_DecimalFormat_init_(t_DecimalFormat *self, PyObject *args, PyObject *kwds);
    static PyObject *t_DecimalFormat_applyLocalizedPattern(t_DecimalFormat *self, PyObject *arg);
    static PyObject *t_DecimalFormat_applyPattern(t_DecimalFormat *self, PyObject *arg);
    static PyObject *t_DecimalFormat_clone(t_DecimalFormat *self, PyObject *args);
    static PyObject *t_DecimalFormat_equals(t_DecimalFormat *self, PyObject *args);
    static PyObject *t_DecimalFormat_getCurrency(t_DecimalFormat *self, PyObject *args);
    static PyObject *t_DecimalFormat_getGroupingSize(t_DecimalFormat *self);
    static PyObject *t_DecimalFormat_getMaximumFractionDigits(t_DecimalFormat *self, PyObject *args);
    static PyObject *t_DecimalFormat_getMaximumIntegerDigits(t_DecimalFormat *self, PyObject *args);
    static PyObject *t_DecimalFormat_getMinimumFractionDigits(t_DecimalFormat *self, PyObject *args);
    static PyObject *t_DecimalFormat_getMinimumIntegerDigits(t_DecimalFormat *self, PyObject *args);
    static PyObject *t_DecimalFormat_getMultiplier(t_DecimalFormat *self);
    static PyObject *t_DecimalFormat_getNegativePrefix(t_DecimalFormat *self);
    static PyObject *t_DecimalFormat_getNegativeSuffix(t_DecimalFormat *self);
    static PyObject *t_DecimalFormat_getPositivePrefix(t_DecimalFormat *self);
    static PyObject *t_DecimalFormat_getPositiveSuffix(t_DecimalFormat *self);
    static PyObject *t_DecimalFormat_hashCode(t_DecimalFormat *self, PyObject *args);
    static PyObject *t_DecimalFormat_isDecimalSeparatorAlwaysShown(t_DecimalFormat *self);
    static PyObject *t_DecimalFormat_isParseBigDecimal(t_DecimalFormat *self);
    static PyObject *t_DecimalFormat_setCurrency(t_DecimalFormat *self, PyObject *args);
    static PyObject *t_DecimalFormat_setDecimalSeparatorAlwaysShown(t_DecimalFormat *self, PyObject *arg);
    static PyObject *t_DecimalFormat_setGroupingSize(t_DecimalFormat *self, PyObject *arg);
    static PyObject *t_DecimalFormat_setGroupingUsed(t_DecimalFormat *self, PyObject *args);
    static PyObject *t_DecimalFormat_setMaximumFractionDigits(t_DecimalFormat *self, PyObject *args);
    static PyObject *t_DecimalFormat_setMaximumIntegerDigits(t_DecimalFormat *self, PyObject *args);
    static PyObject *t_DecimalFormat_setMinimumFractionDigits(t_DecimalFormat *self, PyObject *args);
    static PyObject *t_DecimalFormat_setMinimumIntegerDigits(t_DecimalFormat *self, PyObject *args);
    static PyObject *t_DecimalFormat_setMultiplier(t_DecimalFormat *self, PyObject *arg);
    static PyObject *t_DecimalFormat_setNegativePrefix(t_DecimalFormat *self, PyObject *arg);
    static PyObject *t_DecimalFormat_setNegativeSuffix(t_DecimalFormat *self, PyObject *arg);
    static PyObject *t_DecimalFormat_setParseBigDecimal(t_DecimalFormat *self, PyObject *arg);
    static PyObject *t_DecimalFormat_setPositivePrefix(t_DecimalFormat *self, PyObject *arg);
    static PyObject *t_DecimalFormat_setPositiveSuffix(t_DecimalFormat *self, PyObject *arg);
    static PyObject *t_DecimalFormat_toLocalizedPattern(t_DecimalFormat *self);
    static PyObject *t_DecimalFormat_toPattern(t_DecimalFormat *self);
    static PyObject *t_DecimalFormat_get__currency(t_DecimalFormat *self, void *data);
    static int t_DecimalFormat_set__currency(t_DecimalFormat *self, PyObject *arg, void *data);
    static PyObject *t_DecimalFormat_get__decimalSeparatorAlwaysShown(t_DecimalFormat *self, void *data);
    static int t_DecimalFormat_set__decimalSeparatorAlwaysShown(t_DecimalFormat *self, PyObject *arg, void *data);
    static PyObject *t_DecimalFormat_get__groupingSize(t_DecimalFormat *self, void *data);
    static int t_DecimalFormat_set__groupingSize(t_DecimalFormat *self, PyObject *arg, void *data);
    static int t_DecimalFormat_set__groupingUsed(t_DecimalFormat *self, PyObject *arg, void *data);
    static PyObject *t_DecimalFormat_get__maximumFractionDigits(t_DecimalFormat *self, void *data);
    static int t_DecimalFormat_set__maximumFractionDigits(t_DecimalFormat *self, PyObject *arg, void *data);
    static PyObject *t_DecimalFormat_get__maximumIntegerDigits(t_DecimalFormat *self, void *data);
    static int t_DecimalFormat_set__maximumIntegerDigits(t_DecimalFormat *self, PyObject *arg, void *data);
    static PyObject *t_DecimalFormat_get__minimumFractionDigits(t_DecimalFormat *self, void *data);
    static int t_DecimalFormat_set__minimumFractionDigits(t_DecimalFormat *self, PyObject *arg, void *data);
    static PyObject *t_DecimalFormat_get__minimumIntegerDigits(t_DecimalFormat *self, void *data);
    static int t_DecimalFormat_set__minimumIntegerDigits(t_DecimalFormat *self, PyObject *arg, void *data);
    static PyObject *t_DecimalFormat_get__multiplier(t_DecimalFormat *self, void *data);
    static int t_DecimalFormat_set__multiplier(t_DecimalFormat *self, PyObject *arg, void *data);
    static PyObject *t_DecimalFormat_get__negativePrefix(t_DecimalFormat *self, void *data);
    static int t_DecimalFormat_set__negativePrefix(t_DecimalFormat *self, PyObject *arg, void *data);
    static PyObject *t_DecimalFormat_get__negativeSuffix(t_DecimalFormat *self, void *data);
    static int t_DecimalFormat_set__negativeSuffix(t_DecimalFormat *self, PyObject *arg, void *data);
    static PyObject *t_DecimalFormat_get__parseBigDecimal(t_DecimalFormat *self, void *data);
    static int t_DecimalFormat_set__parseBigDecimal(t_DecimalFormat *self, PyObject *arg, void *data);
    static PyObject *t_DecimalFormat_get__positivePrefix(t_DecimalFormat *self, void *data);
    static int t_DecimalFormat_set__positivePrefix(t_DecimalFormat *self, PyObject *arg, void *data);
    static PyObject *t_DecimalFormat_get__positiveSuffix(t_DecimalFormat *self, void *data);
    static int t_DecimalFormat_set__positiveSuffix(t_DecimalFormat *self, PyObject *arg, void *data);
    static PyGetSetDef t_DecimalFormat__fields_[] = {
      DECLARE_GETSET_FIELD(t_DecimalFormat, currency),
      DECLARE_GETSET_FIELD(t_DecimalFormat, decimalSeparatorAlwaysShown),
      DECLARE_GETSET_FIELD(t_DecimalFormat, groupingSize),
      DECLARE_SET_FIELD(t_DecimalFormat, groupingUsed),
      DECLARE_GETSET_FIELD(t_DecimalFormat, maximumFractionDigits),
      DECLARE_GETSET_FIELD(t_DecimalFormat, maximumIntegerDigits),
      DECLARE_GETSET_FIELD(t_DecimalFormat, minimumFractionDigits),
      DECLARE_GETSET_FIELD(t_DecimalFormat, minimumIntegerDigits),
      DECLARE_GETSET_FIELD(t_DecimalFormat, multiplier),
      DECLARE_GETSET_FIELD(t_DecimalFormat, negativePrefix),
      DECLARE_GETSET_FIELD(t_DecimalFormat, negativeSuffix),
      DECLARE_GETSET_FIELD(t_DecimalFormat, parseBigDecimal),
      DECLARE_GETSET_FIELD(t_DecimalFormat, positivePrefix),
      DECLARE_GETSET_FIELD(t_DecimalFormat, positiveSuffix),
      { NULL, NULL, NULL, NULL, NULL }
    };

    static PyMethodDef t_DecimalFormat__methods_[] = {
      DECLARE_METHOD(t_DecimalFormat, cast_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_DecimalFormat, instance_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_DecimalFormat, applyLocalizedPattern, METH_O),
      DECLARE_METHOD(t_DecimalFormat, applyPattern, METH_O),
      DECLARE_METHOD(t_DecimalFormat, clone, METH_VARARGS),
      DECLARE_METHOD(t_DecimalFormat, equals, METH_VARARGS),
      DECLARE_METHOD(t_DecimalFormat, getCurrency, METH_VARARGS),
      DECLARE_METHOD(t_DecimalFormat, getGroupingSize, METH_NOARGS),
      DECLARE_METHOD(t_DecimalFormat, getMaximumFractionDigits, METH_VARARGS),
      DECLARE_METHOD(t_DecimalFormat, getMaximumIntegerDigits, METH_VARARGS),
      DECLARE_METHOD(t_DecimalFormat, getMinimumFractionDigits, METH_VARARGS),
      DECLARE_METHOD(t_DecimalFormat, getMinimumIntegerDigits, METH_VARARGS),
      DECLARE_METHOD(t_DecimalFormat, getMultiplier, METH_NOARGS),
      DECLARE_METHOD(t_DecimalFormat, getNegativePrefix, METH_NOARGS),
      DECLARE_METHOD(t_DecimalFormat, getNegativeSuffix, METH_NOARGS),
      DECLARE_METHOD(t_DecimalFormat, getPositivePrefix, METH_NOARGS),
      DECLARE_METHOD(t_DecimalFormat, getPositiveSuffix, METH_NOARGS),
      DECLARE_METHOD(t_DecimalFormat, hashCode, METH_VARARGS),
      DECLARE_METHOD(t_DecimalFormat, isDecimalSeparatorAlwaysShown, METH_NOARGS),
      DECLARE_METHOD(t_DecimalFormat, isParseBigDecimal, METH_NOARGS),
      DECLARE_METHOD(t_DecimalFormat, setCurrency, METH_VARARGS),
      DECLARE_METHOD(t_DecimalFormat, setDecimalSeparatorAlwaysShown, METH_O),
      DECLARE_METHOD(t_DecimalFormat, setGroupingSize, METH_O),
      DECLARE_METHOD(t_DecimalFormat, setGroupingUsed, METH_VARARGS),
      DECLARE_METHOD(t_DecimalFormat, setMaximumFractionDigits, METH_VARARGS),
      DECLARE_METHOD(t_DecimalFormat, setMaximumIntegerDigits, METH_VARARGS),
      DECLARE_METHOD(t_DecimalFormat, setMinimumFractionDigits, METH_VARARGS),
      DECLARE_METHOD(t_DecimalFormat, setMinimumIntegerDigits, METH_VARARGS),
      DECLARE_METHOD(t_DecimalFormat, setMultiplier, METH_O),
      DECLARE_METHOD(t_DecimalFormat, setNegativePrefix, METH_O),
      DECLARE_METHOD(t_DecimalFormat, setNegativeSuffix, METH_O),
      DECLARE_METHOD(t_DecimalFormat, setParseBigDecimal, METH_O),
      DECLARE_METHOD(t_DecimalFormat, setPositivePrefix, METH_O),
      DECLARE_METHOD(t_DecimalFormat, setPositiveSuffix, METH_O),
      DECLARE_METHOD(t_DecimalFormat, toLocalizedPattern, METH_NOARGS),
      DECLARE_METHOD(t_DecimalFormat, toPattern, METH_NOARGS),
      { NULL, NULL, 0, NULL }
    };

    DECLARE_TYPE(DecimalFormat, t_DecimalFormat, ::java::text::NumberFormat, DecimalFormat, t_DecimalFormat_init_, 0, 0, t_DecimalFormat__fields_, 0, 0);

    void t_DecimalFormat::install(PyObject *module)
    {
      installType(&PY_TYPE(DecimalFormat), module, "DecimalFormat", 0);
    }

    void t_DecimalFormat::initialize(PyObject *module)
    {
      PyDict_SetItemString(PY_TYPE(DecimalFormat).tp_dict, "class_", make_descriptor(DecimalFormat::initializeClass, 1));
      PyDict_SetItemString(PY_TYPE(DecimalFormat).tp_dict, "wrapfn_", make_descriptor(t_DecimalFormat::wrap_jobject));
      PyDict_SetItemString(PY_TYPE(DecimalFormat).tp_dict, "boxfn_", make_descriptor(boxObject));
    }

    static PyObject *t_DecimalFormat_cast_(PyTypeObject *type, PyObject *arg)
    {
      if (!(arg = castCheck(arg, DecimalFormat::initializeClass, 1)))
        return NULL;
      return t_DecimalFormat::wrap_Object(DecimalFormat(((t_DecimalFormat *) arg)->object.this$));
    }
    static PyObject *t_DecimalFormat_instance_(PyTypeObject *type, PyObject *arg)
    {
      if (!castCheck(arg, DecimalFormat::initializeClass, 0))
        Py_RETURN_FALSE;
      Py_RETURN_TRUE;
    }

    static int t_DecimalFormat_init_(t_DecimalFormat *self, PyObject *args, PyObject *kwds)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 0:
        {
          DecimalFormat object((jobject) NULL);

          INT_CALL(object = DecimalFormat());
          self->object = object;
          break;
        }
        goto err;
       case 1:
        {
          ::java::lang::String a0((jobject) NULL);
          DecimalFormat object((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            INT_CALL(object = DecimalFormat(a0));
            self->object = object;
            break;
          }
        }
       default:
       err:
        PyErr_SetArgsError((PyObject *) self, "__init__", args);
        return -1;
      }

      return 0;
    }

    static PyObject *t_DecimalFormat_applyLocalizedPattern(t_DecimalFormat *self, PyObject *arg)
    {
      ::java::lang::String a0((jobject) NULL);

      if (!parseArg(arg, "s", &a0))
      {
        OBJ_CALL(self->object.applyLocalizedPattern(a0));
        Py_RETURN_NONE;
      }

      PyErr_SetArgsError((PyObject *) self, "applyLocalizedPattern", arg);
      return NULL;
    }

    static PyObject *t_DecimalFormat_applyPattern(t_DecimalFormat *self, PyObject *arg)
    {
      ::java::lang::String a0((jobject) NULL);

      if (!parseArg(arg, "s", &a0))
      {
        OBJ_CALL(self->object.applyPattern(a0));
        Py_RETURN_NONE;
      }

      PyErr_SetArgsError((PyObject *) self, "applyPattern", arg);
      return NULL;
    }

    static PyObject *t_DecimalFormat_clone(t_DecimalFormat *self, PyObject *args)
    {
      ::java::lang::Object result((jobject) NULL);

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.clone());
        return ::java::lang::t_Object::wrap_Object(result);
      }

      return callSuper(&PY_TYPE(DecimalFormat), (PyObject *) self, "clone", args, 2);
    }

    static PyObject *t_DecimalFormat_equals(t_DecimalFormat *self, PyObject *args)
    {
      ::java::lang::Object a0((jobject) NULL);
      jboolean result;

      if (!parseArgs(args, "o", &a0))
      {
        OBJ_CALL(result = self->object.equals(a0));
        Py_RETURN_BOOL(result);
      }

      return callSuper(&PY_TYPE(DecimalFormat), (PyObject *) self, "equals", args, 2);
    }

    static PyObject *t_DecimalFormat_getCurrency(t_DecimalFormat *self, PyObject *args)
    {
      ::java::util::Currency result((jobject) NULL);

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.getCurrency());
        return ::java::util::t_Currency::wrap_Object(result);
      }

      return callSuper(&PY_TYPE(DecimalFormat), (PyObject *) self, "getCurrency", args, 2);
    }

    static PyObject *t_DecimalFormat_getGroupingSize(t_DecimalFormat *self)
    {
      jint result;
      OBJ_CALL(result = self->object.getGroupingSize());
      return PyInt_FromLong((long) result);
    }

    static PyObject *t_DecimalFormat_getMaximumFractionDigits(t_DecimalFormat *self, PyObject *args)
    {
      jint result;

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.getMaximumFractionDigits());
        return PyInt_FromLong((long) result);
      }

      return callSuper(&PY_TYPE(DecimalFormat), (PyObject *) self, "getMaximumFractionDigits", args, 2);
    }

    static PyObject *t_DecimalFormat_getMaximumIntegerDigits(t_DecimalFormat *self, PyObject *args)
    {
      jint result;

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.getMaximumIntegerDigits());
        return PyInt_FromLong((long) result);
      }

      return callSuper(&PY_TYPE(DecimalFormat), (PyObject *) self, "getMaximumIntegerDigits", args, 2);
    }

    static PyObject *t_DecimalFormat_getMinimumFractionDigits(t_DecimalFormat *self, PyObject *args)
    {
      jint result;

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.getMinimumFractionDigits());
        return PyInt_FromLong((long) result);
      }

      return callSuper(&PY_TYPE(DecimalFormat), (PyObject *) self, "getMinimumFractionDigits", args, 2);
    }

    static PyObject *t_DecimalFormat_getMinimumIntegerDigits(t_DecimalFormat *self, PyObject *args)
    {
      jint result;

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.getMinimumIntegerDigits());
        return PyInt_FromLong((long) result);
      }

      return callSuper(&PY_TYPE(DecimalFormat), (PyObject *) self, "getMinimumIntegerDigits", args, 2);
    }

    static PyObject *t_DecimalFormat_getMultiplier(t_DecimalFormat *self)
    {
      jint result;
      OBJ_CALL(result = self->object.getMultiplier());
      return PyInt_FromLong((long) result);
    }

    static PyObject *t_DecimalFormat_getNegativePrefix(t_DecimalFormat *self)
    {
      ::java::lang::String result((jobject) NULL);
      OBJ_CALL(result = self->object.getNegativePrefix());
      return j2p(result);
    }

    static PyObject *t_DecimalFormat_getNegativeSuffix(t_DecimalFormat *self)
    {
      ::java::lang::String result((jobject) NULL);
      OBJ_CALL(result = self->object.getNegativeSuffix());
      return j2p(result);
    }

    static PyObject *t_DecimalFormat_getPositivePrefix(t_DecimalFormat *self)
    {
      ::java::lang::String result((jobject) NULL);
      OBJ_CALL(result = self->object.getPositivePrefix());
      return j2p(result);
    }

    static PyObject *t_DecimalFormat_getPositiveSuffix(t_DecimalFormat *self)
    {
      ::java::lang::String result((jobject) NULL);
      OBJ_CALL(result = self->object.getPositiveSuffix());
      return j2p(result);
    }

    static PyObject *t_DecimalFormat_hashCode(t_DecimalFormat *self, PyObject *args)
    {
      jint result;

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.hashCode());
        return PyInt_FromLong((long) result);
      }

      return callSuper(&PY_TYPE(DecimalFormat), (PyObject *) self, "hashCode", args, 2);
    }

    static PyObject *t_DecimalFormat_isDecimalSeparatorAlwaysShown(t_DecimalFormat *self)
    {
      jboolean result;
      OBJ_CALL(result = self->object.isDecimalSeparatorAlwaysShown());
      Py_RETURN_BOOL(result);
    }

    static PyObject *t_DecimalFormat_isParseBigDecimal(t_DecimalFormat *self)
    {
      jboolean result;
      OBJ_CALL(result = self->object.isParseBigDecimal());
      Py_RETURN_BOOL(result);
    }

    static PyObject *t_DecimalFormat_setCurrency(t_DecimalFormat *self, PyObject *args)
    {
      ::java::util::Currency a0((jobject) NULL);

      if (!parseArgs(args, "k", ::java::util::Currency::initializeClass, &a0))
      {
        OBJ_CALL(self->object.setCurrency(a0));
        Py_RETURN_NONE;
      }

      return callSuper(&PY_TYPE(DecimalFormat), (PyObject *) self, "setCurrency", args, 2);
    }

    static PyObject *t_DecimalFormat_setDecimalSeparatorAlwaysShown(t_DecimalFormat *self, PyObject *arg)
    {
      jboolean a0;

      if (!parseArg(arg, "Z", &a0))
      {
        OBJ_CALL(self->object.setDecimalSeparatorAlwaysShown(a0));
        Py_RETURN_NONE;
      }

      PyErr_SetArgsError((PyObject *) self, "setDecimalSeparatorAlwaysShown", arg);
      return NULL;
    }

    static PyObject *t_DecimalFormat_setGroupingSize(t_DecimalFormat *self, PyObject *arg)
    {
      jint a0;

      if (!parseArg(arg, "I", &a0))
      {
        OBJ_CALL(self->object.setGroupingSize(a0));
        Py_RETURN_NONE;
      }

      PyErr_SetArgsError((PyObject *) self, "setGroupingSize", arg);
      return NULL;
    }

    static PyObject *t_DecimalFormat_setGroupingUsed(t_DecimalFormat *self, PyObject *args)
    {
      jboolean a0;

      if (!parseArgs(args, "Z", &a0))
      {
        OBJ_CALL(self->object.setGroupingUsed(a0));
        Py_RETURN_NONE;
      }

      return callSuper(&PY_TYPE(DecimalFormat), (PyObject *) self, "setGroupingUsed", args, 2);
    }

    static PyObject *t_DecimalFormat_setMaximumFractionDigits(t_DecimalFormat *self, PyObject *args)
    {
      jint a0;

      if (!parseArgs(args, "I", &a0))
      {
        OBJ_CALL(self->object.setMaximumFractionDigits(a0));
        Py_RETURN_NONE;
      }

      return callSuper(&PY_TYPE(DecimalFormat), (PyObject *) self, "setMaximumFractionDigits", args, 2);
    }

    static PyObject *t_DecimalFormat_setMaximumIntegerDigits(t_DecimalFormat *self, PyObject *args)
    {
      jint a0;

      if (!parseArgs(args, "I", &a0))
      {
        OBJ_CALL(self->object.setMaximumIntegerDigits(a0));
        Py_RETURN_NONE;
      }

      return callSuper(&PY_TYPE(DecimalFormat), (PyObject *) self, "setMaximumIntegerDigits", args, 2);
    }

    static PyObject *t_DecimalFormat_setMinimumFractionDigits(t_DecimalFormat *self, PyObject *args)
    {
      jint a0;

      if (!parseArgs(args, "I", &a0))
      {
        OBJ_CALL(self->object.setMinimumFractionDigits(a0));
        Py_RETURN_NONE;
      }

      return callSuper(&PY_TYPE(DecimalFormat), (PyObject *) self, "setMinimumFractionDigits", args, 2);
    }

    static PyObject *t_DecimalFormat_setMinimumIntegerDigits(t_DecimalFormat *self, PyObject *args)
    {
      jint a0;

      if (!parseArgs(args, "I", &a0))
      {
        OBJ_CALL(self->object.setMinimumIntegerDigits(a0));
        Py_RETURN_NONE;
      }

      return callSuper(&PY_TYPE(DecimalFormat), (PyObject *) self, "setMinimumIntegerDigits", args, 2);
    }

    static PyObject *t_DecimalFormat_setMultiplier(t_DecimalFormat *self, PyObject *arg)
    {
      jint a0;

      if (!parseArg(arg, "I", &a0))
      {
        OBJ_CALL(self->object.setMultiplier(a0));
        Py_RETURN_NONE;
      }

      PyErr_SetArgsError((PyObject *) self, "setMultiplier", arg);
      return NULL;
    }

    static PyObject *t_DecimalFormat_setNegativePrefix(t_DecimalFormat *self, PyObject *arg)
    {
      ::java::lang::String a0((jobject) NULL);

      if (!parseArg(arg, "s", &a0))
      {
        OBJ_CALL(self->object.setNegativePrefix(a0));
        Py_RETURN_NONE;
      }

      PyErr_SetArgsError((PyObject *) self, "setNegativePrefix", arg);
      return NULL;
    }

    static PyObject *t_DecimalFormat_setNegativeSuffix(t_DecimalFormat *self, PyObject *arg)
    {
      ::java::lang::String a0((jobject) NULL);

      if (!parseArg(arg, "s", &a0))
      {
        OBJ_CALL(self->object.setNegativeSuffix(a0));
        Py_RETURN_NONE;
      }

      PyErr_SetArgsError((PyObject *) self, "setNegativeSuffix", arg);
      return NULL;
    }

    static PyObject *t_DecimalFormat_setParseBigDecimal(t_DecimalFormat *self, PyObject *arg)
    {
      jboolean a0;

      if (!parseArg(arg, "Z", &a0))
      {
        OBJ_CALL(self->object.setParseBigDecimal(a0));
        Py_RETURN_NONE;
      }

      PyErr_SetArgsError((PyObject *) self, "setParseBigDecimal", arg);
      return NULL;
    }

    static PyObject *t_DecimalFormat_setPositivePrefix(t_DecimalFormat *self, PyObject *arg)
    {
      ::java::lang::String a0((jobject) NULL);

      if (!parseArg(arg, "s", &a0))
      {
        OBJ_CALL(self->object.setPositivePrefix(a0));
        Py_RETURN_NONE;
      }

      PyErr_SetArgsError((PyObject *) self, "setPositivePrefix", arg);
      return NULL;
    }

    static PyObject *t_DecimalFormat_setPositiveSuffix(t_DecimalFormat *self, PyObject *arg)
    {
      ::java::lang::String a0((jobject) NULL);

      if (!parseArg(arg, "s", &a0))
      {
        OBJ_CALL(self->object.setPositiveSuffix(a0));
        Py_RETURN_NONE;
      }

      PyErr_SetArgsError((PyObject *) self, "setPositiveSuffix", arg);
      return NULL;
    }

    static PyObject *t_DecimalFormat_toLocalizedPattern(t_DecimalFormat *self)
    {
      ::java::lang::String result((jobject) NULL);
      OBJ_CALL(result = self->object.toLocalizedPattern());
      return j2p(result);
    }

    static PyObject *t_DecimalFormat_toPattern(t_DecimalFormat *self)
    {
      ::java::lang::String result((jobject) NULL);
      OBJ_CALL(result = self->object.toPattern());
      return j2p(result);
    }

    static PyObject *t_DecimalFormat_get__currency(t_DecimalFormat *self, void *data)
    {
      ::java::util::Currency value((jobject) NULL);
      OBJ_CALL(value = self->object.getCurrency());
      return ::java::util::t_Currency::wrap_Object(value);
    }
    static int t_DecimalFormat_set__currency(t_DecimalFormat *self, PyObject *arg, void *data)
    {
      {
        ::java::util::Currency value((jobject) NULL);
        if (!parseArg(arg, "k", ::java::util::Currency::initializeClass, &value))
        {
          INT_CALL(self->object.setCurrency(value));
          return 0;
        }
      }
      PyErr_SetArgsError((PyObject *) self, "currency", arg);
      return -1;
    }

    static PyObject *t_DecimalFormat_get__decimalSeparatorAlwaysShown(t_DecimalFormat *self, void *data)
    {
      jboolean value;
      OBJ_CALL(value = self->object.isDecimalSeparatorAlwaysShown());
      Py_RETURN_BOOL(value);
    }
    static int t_DecimalFormat_set__decimalSeparatorAlwaysShown(t_DecimalFormat *self, PyObject *arg, void *data)
    {
      {
        jboolean value;
        if (!parseArg(arg, "Z", &value))
        {
          INT_CALL(self->object.setDecimalSeparatorAlwaysShown(value));
          return 0;
        }
      }
      PyErr_SetArgsError((PyObject *) self, "decimalSeparatorAlwaysShown", arg);
      return -1;
    }

    static PyObject *t_DecimalFormat_get__groupingSize(t_DecimalFormat *self, void *data)
    {
      jint value;
      OBJ_CALL(value = self->object.getGroupingSize());
      return PyInt_FromLong((long) value);
    }
    static int t_DecimalFormat_set__groupingSize(t_DecimalFormat *self, PyObject *arg, void *data)
    {
      {
        jint value;
        if (!parseArg(arg, "I", &value))
        {
          INT_CALL(self->object.setGroupingSize(value));
          return 0;
        }
      }
      PyErr_SetArgsError((PyObject *) self, "groupingSize", arg);
      return -1;
    }

    static int t_DecimalFormat_set__groupingUsed(t_DecimalFormat *self, PyObject *arg, void *data)
    {
      {
        jboolean value;
        if (!parseArg(arg, "Z", &value))
        {
          INT_CALL(self->object.setGroupingUsed(value));
          return 0;
        }
      }
      PyErr_SetArgsError((PyObject *) self, "groupingUsed", arg);
      return -1;
    }

    static PyObject *t_DecimalFormat_get__maximumFractionDigits(t_DecimalFormat *self, void *data)
    {
      jint value;
      OBJ_CALL(value = self->object.getMaximumFractionDigits());
      return PyInt_FromLong((long) value);
    }
    static int t_DecimalFormat_set__maximumFractionDigits(t_DecimalFormat *self, PyObject *arg, void *data)
    {
      {
        jint value;
        if (!parseArg(arg, "I", &value))
        {
          INT_CALL(self->object.setMaximumFractionDigits(value));
          return 0;
        }
      }
      PyErr_SetArgsError((PyObject *) self, "maximumFractionDigits", arg);
      return -1;
    }

    static PyObject *t_DecimalFormat_get__maximumIntegerDigits(t_DecimalFormat *self, void *data)
    {
      jint value;
      OBJ_CALL(value = self->object.getMaximumIntegerDigits());
      return PyInt_FromLong((long) value);
    }
    static int t_DecimalFormat_set__maximumIntegerDigits(t_DecimalFormat *self, PyObject *arg, void *data)
    {
      {
        jint value;
        if (!parseArg(arg, "I", &value))
        {
          INT_CALL(self->object.setMaximumIntegerDigits(value));
          return 0;
        }
      }
      PyErr_SetArgsError((PyObject *) self, "maximumIntegerDigits", arg);
      return -1;
    }

    static PyObject *t_DecimalFormat_get__minimumFractionDigits(t_DecimalFormat *self, void *data)
    {
      jint value;
      OBJ_CALL(value = self->object.getMinimumFractionDigits());
      return PyInt_FromLong((long) value);
    }
    static int t_DecimalFormat_set__minimumFractionDigits(t_DecimalFormat *self, PyObject *arg, void *data)
    {
      {
        jint value;
        if (!parseArg(arg, "I", &value))
        {
          INT_CALL(self->object.setMinimumFractionDigits(value));
          return 0;
        }
      }
      PyErr_SetArgsError((PyObject *) self, "minimumFractionDigits", arg);
      return -1;
    }

    static PyObject *t_DecimalFormat_get__minimumIntegerDigits(t_DecimalFormat *self, void *data)
    {
      jint value;
      OBJ_CALL(value = self->object.getMinimumIntegerDigits());
      return PyInt_FromLong((long) value);
    }
    static int t_DecimalFormat_set__minimumIntegerDigits(t_DecimalFormat *self, PyObject *arg, void *data)
    {
      {
        jint value;
        if (!parseArg(arg, "I", &value))
        {
          INT_CALL(self->object.setMinimumIntegerDigits(value));
          return 0;
        }
      }
      PyErr_SetArgsError((PyObject *) self, "minimumIntegerDigits", arg);
      return -1;
    }

    static PyObject *t_DecimalFormat_get__multiplier(t_DecimalFormat *self, void *data)
    {
      jint value;
      OBJ_CALL(value = self->object.getMultiplier());
      return PyInt_FromLong((long) value);
    }
    static int t_DecimalFormat_set__multiplier(t_DecimalFormat *self, PyObject *arg, void *data)
    {
      {
        jint value;
        if (!parseArg(arg, "I", &value))
        {
          INT_CALL(self->object.setMultiplier(value));
          return 0;
        }
      }
      PyErr_SetArgsError((PyObject *) self, "multiplier", arg);
      return -1;
    }

    static PyObject *t_DecimalFormat_get__negativePrefix(t_DecimalFormat *self, void *data)
    {
      ::java::lang::String value((jobject) NULL);
      OBJ_CALL(value = self->object.getNegativePrefix());
      return j2p(value);
    }
    static int t_DecimalFormat_set__negativePrefix(t_DecimalFormat *self, PyObject *arg, void *data)
    {
      {
        ::java::lang::String value((jobject) NULL);
        if (!parseArg(arg, "s", &value))
        {
          INT_CALL(self->object.setNegativePrefix(value));
          return 0;
        }
      }
      PyErr_SetArgsError((PyObject *) self, "negativePrefix", arg);
      return -1;
    }

    static PyObject *t_DecimalFormat_get__negativeSuffix(t_DecimalFormat *self, void *data)
    {
      ::java::lang::String value((jobject) NULL);
      OBJ_CALL(value = self->object.getNegativeSuffix());
      return j2p(value);
    }
    static int t_DecimalFormat_set__negativeSuffix(t_DecimalFormat *self, PyObject *arg, void *data)
    {
      {
        ::java::lang::String value((jobject) NULL);
        if (!parseArg(arg, "s", &value))
        {
          INT_CALL(self->object.setNegativeSuffix(value));
          return 0;
        }
      }
      PyErr_SetArgsError((PyObject *) self, "negativeSuffix", arg);
      return -1;
    }

    static PyObject *t_DecimalFormat_get__parseBigDecimal(t_DecimalFormat *self, void *data)
    {
      jboolean value;
      OBJ_CALL(value = self->object.isParseBigDecimal());
      Py_RETURN_BOOL(value);
    }
    static int t_DecimalFormat_set__parseBigDecimal(t_DecimalFormat *self, PyObject *arg, void *data)
    {
      {
        jboolean value;
        if (!parseArg(arg, "Z", &value))
        {
          INT_CALL(self->object.setParseBigDecimal(value));
          return 0;
        }
      }
      PyErr_SetArgsError((PyObject *) self, "parseBigDecimal", arg);
      return -1;
    }

    static PyObject *t_DecimalFormat_get__positivePrefix(t_DecimalFormat *self, void *data)
    {
      ::java::lang::String value((jobject) NULL);
      OBJ_CALL(value = self->object.getPositivePrefix());
      return j2p(value);
    }
    static int t_DecimalFormat_set__positivePrefix(t_DecimalFormat *self, PyObject *arg, void *data)
    {
      {
        ::java::lang::String value((jobject) NULL);
        if (!parseArg(arg, "s", &value))
        {
          INT_CALL(self->object.setPositivePrefix(value));
          return 0;
        }
      }
      PyErr_SetArgsError((PyObject *) self, "positivePrefix", arg);
      return -1;
    }

    static PyObject *t_DecimalFormat_get__positiveSuffix(t_DecimalFormat *self, void *data)
    {
      ::java::lang::String value((jobject) NULL);
      OBJ_CALL(value = self->object.getPositiveSuffix());
      return j2p(value);
    }
    static int t_DecimalFormat_set__positiveSuffix(t_DecimalFormat *self, PyObject *arg, void *data)
    {
      {
        ::java::lang::String value((jobject) NULL);
        if (!parseArg(arg, "s", &value))
        {
          INT_CALL(self->object.setPositiveSuffix(value));
          return 0;
        }
      }
      PyErr_SetArgsError((PyObject *) self, "positiveSuffix", arg);
      return -1;
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/FieldComparator$ByteComparator.h"
#include "org/apache/lucene/search/FieldComparator.h"
#include "java/lang/Byte.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *FieldComparator$ByteComparator::class$ = NULL;
        jmethodID *FieldComparator$ByteComparator::mids$ = NULL;
        bool FieldComparator$ByteComparator::live$ = false;

        jclass FieldComparator$ByteComparator::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/FieldComparator$ByteComparator");

            mids$ = new jmethodID[max_mid];
            mids$[mid_compare_d8d154b9] = env->getMethodID(cls, "compare", "(II)I");
            mids$[mid_compareBottom_39c7bd23] = env->getMethodID(cls, "compareBottom", "(I)I");
            mids$[mid_compareTop_39c7bd23] = env->getMethodID(cls, "compareTop", "(I)I");
            mids$[mid_copy_d8d154a6] = env->getMethodID(cls, "copy", "(II)V");
            mids$[mid_setBottom_39c7bd3c] = env->getMethodID(cls, "setBottom", "(I)V");
            mids$[mid_setNextReader_6329aed7] = env->getMethodID(cls, "setNextReader", "(Lorg/apache/lucene/index/AtomicReaderContext;)Lorg/apache/lucene/search/FieldComparator;");
            mids$[mid_setTopValue_c2b89a85] = env->getMethodID(cls, "setTopValue", "(Ljava/lang/Byte;)V");
            mids$[mid_value_b801bfbe] = env->getMethodID(cls, "value", "(I)Ljava/lang/Byte;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        jint FieldComparator$ByteComparator::compare(jint a0, jint a1) const
        {
          return env->callIntMethod(this$, mids$[mid_compare_d8d154b9], a0, a1);
        }

        jint FieldComparator$ByteComparator::compareBottom(jint a0) const
        {
          return env->callIntMethod(this$, mids$[mid_compareBottom_39c7bd23], a0);
        }

        jint FieldComparator$ByteComparator::compareTop(jint a0) const
        {
          return env->callIntMethod(this$, mids$[mid_compareTop_39c7bd23], a0);
        }

        void FieldComparator$ByteComparator::copy(jint a0, jint a1) const
        {
          env->callVoidMethod(this$, mids$[mid_copy_d8d154a6], a0, a1);
        }

        void FieldComparator$ByteComparator::setBottom(jint a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setBottom_39c7bd3c], a0);
        }

        ::org::apache::lucene::search::FieldComparator FieldComparator$ByteComparator::setNextReader(const ::org::apache::lucene::index::AtomicReaderContext & a0) const
        {
          return ::org::apache::lucene::search::FieldComparator(env->callObjectMethod(this$, mids$[mid_setNextReader_6329aed7], a0.this$));
        }

        void FieldComparator$ByteComparator::setTopValue(const ::java::lang::Byte & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setTopValue_c2b89a85], a0.this$);
        }

        ::java::lang::Byte FieldComparator$ByteComparator::value(jint a0) const
        {
          return ::java::lang::Byte(env->callObjectMethod(this$, mids$[mid_value_b801bfbe], a0));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_FieldComparator$ByteComparator_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FieldComparator$ByteComparator_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FieldComparator$ByteComparator_of_(t_FieldComparator$ByteComparator *self, PyObject *args);
        static PyObject *t_FieldComparator$ByteComparator_compare(t_FieldComparator$ByteComparator *self, PyObject *args);
        static PyObject *t_FieldComparator$ByteComparator_compareBottom(t_FieldComparator$ByteComparator *self, PyObject *args);
        static PyObject *t_FieldComparator$ByteComparator_compareTop(t_FieldComparator$ByteComparator *self, PyObject *args);
        static PyObject *t_FieldComparator$ByteComparator_copy(t_FieldComparator$ByteComparator *self, PyObject *args);
        static PyObject *t_FieldComparator$ByteComparator_setBottom(t_FieldComparator$ByteComparator *self, PyObject *args);
        static PyObject *t_FieldComparator$ByteComparator_setNextReader(t_FieldComparator$ByteComparator *self, PyObject *args);
        static PyObject *t_FieldComparator$ByteComparator_setTopValue(t_FieldComparator$ByteComparator *self, PyObject *args);
        static PyObject *t_FieldComparator$ByteComparator_value(t_FieldComparator$ByteComparator *self, PyObject *args);
        static int t_FieldComparator$ByteComparator_set__bottom(t_FieldComparator$ByteComparator *self, PyObject *arg, void *data);
        static int t_FieldComparator$ByteComparator_set__nextReader(t_FieldComparator$ByteComparator *self, PyObject *arg, void *data);
        static int t_FieldComparator$ByteComparator_set__topValue(t_FieldComparator$ByteComparator *self, PyObject *arg, void *data);
        static PyObject *t_FieldComparator$ByteComparator_get__parameters_(t_FieldComparator$ByteComparator *self, void *data);
        static PyGetSetDef t_FieldComparator$ByteComparator__fields_[] = {
          DECLARE_SET_FIELD(t_FieldComparator$ByteComparator, bottom),
          DECLARE_SET_FIELD(t_FieldComparator$ByteComparator, nextReader),
          DECLARE_SET_FIELD(t_FieldComparator$ByteComparator, topValue),
          DECLARE_GET_FIELD(t_FieldComparator$ByteComparator, parameters_),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_FieldComparator$ByteComparator__methods_[] = {
          DECLARE_METHOD(t_FieldComparator$ByteComparator, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FieldComparator$ByteComparator, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FieldComparator$ByteComparator, of_, METH_VARARGS),
          DECLARE_METHOD(t_FieldComparator$ByteComparator, compare, METH_VARARGS),
          DECLARE_METHOD(t_FieldComparator$ByteComparator, compareBottom, METH_VARARGS),
          DECLARE_METHOD(t_FieldComparator$ByteComparator, compareTop, METH_VARARGS),
          DECLARE_METHOD(t_FieldComparator$ByteComparator, copy, METH_VARARGS),
          DECLARE_METHOD(t_FieldComparator$ByteComparator, setBottom, METH_VARARGS),
          DECLARE_METHOD(t_FieldComparator$ByteComparator, setNextReader, METH_VARARGS),
          DECLARE_METHOD(t_FieldComparator$ByteComparator, setTopValue, METH_VARARGS),
          DECLARE_METHOD(t_FieldComparator$ByteComparator, value, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(FieldComparator$ByteComparator, t_FieldComparator$ByteComparator, ::org::apache::lucene::search::FieldComparator$NumericComparator, FieldComparator$ByteComparator, abstract_init, 0, 0, t_FieldComparator$ByteComparator__fields_, 0, 0);
        PyObject *t_FieldComparator$ByteComparator::wrap_Object(const FieldComparator$ByteComparator& object, PyTypeObject *p0)
        {
          PyObject *obj = t_FieldComparator$ByteComparator::wrap_Object(object);
          if (obj != NULL && obj != Py_None)
          {
            t_FieldComparator$ByteComparator *self = (t_FieldComparator$ByteComparator *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        PyObject *t_FieldComparator$ByteComparator::wrap_jobject(const jobject& object, PyTypeObject *p0)
        {
          PyObject *obj = t_FieldComparator$ByteComparator::wrap_jobject(object);
          if (obj != NULL && obj != Py_None)
          {
            t_FieldComparator$ByteComparator *self = (t_FieldComparator$ByteComparator *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        void t_FieldComparator$ByteComparator::install(PyObject *module)
        {
          installType(&PY_TYPE(FieldComparator$ByteComparator), module, "FieldComparator$ByteComparator", 0);
        }

        void t_FieldComparator$ByteComparator::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(FieldComparator$ByteComparator).tp_dict, "class_", make_descriptor(FieldComparator$ByteComparator::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(FieldComparator$ByteComparator).tp_dict, "wrapfn_", make_descriptor(t_FieldComparator$ByteComparator::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(FieldComparator$ByteComparator).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_FieldComparator$ByteComparator_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, FieldComparator$ByteComparator::initializeClass, 1)))
            return NULL;
          return t_FieldComparator$ByteComparator::wrap_Object(FieldComparator$ByteComparator(((t_FieldComparator$ByteComparator *) arg)->object.this$));
        }
        static PyObject *t_FieldComparator$ByteComparator_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, FieldComparator$ByteComparator::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_FieldComparator$ByteComparator_of_(t_FieldComparator$ByteComparator *self, PyObject *args)
        {
          if (!parseArg(args, "T", 1, &(self->parameters)))
            Py_RETURN_SELF;
          return PyErr_SetArgsError((PyObject *) self, "of_", args);
        }

        static PyObject *t_FieldComparator$ByteComparator_compare(t_FieldComparator$ByteComparator *self, PyObject *args)
        {
          jint a0;
          jint a1;
          jint result;

          if (!parseArgs(args, "II", &a0, &a1))
          {
            OBJ_CALL(result = self->object.compare(a0, a1));
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(FieldComparator$ByteComparator), (PyObject *) self, "compare", args, 2);
        }

        static PyObject *t_FieldComparator$ByteComparator_compareBottom(t_FieldComparator$ByteComparator *self, PyObject *args)
        {
          jint a0;
          jint result;

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(result = self->object.compareBottom(a0));
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(FieldComparator$ByteComparator), (PyObject *) self, "compareBottom", args, 2);
        }

        static PyObject *t_FieldComparator$ByteComparator_compareTop(t_FieldComparator$ByteComparator *self, PyObject *args)
        {
          jint a0;
          jint result;

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(result = self->object.compareTop(a0));
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(FieldComparator$ByteComparator), (PyObject *) self, "compareTop", args, 2);
        }

        static PyObject *t_FieldComparator$ByteComparator_copy(t_FieldComparator$ByteComparator *self, PyObject *args)
        {
          jint a0;
          jint a1;

          if (!parseArgs(args, "II", &a0, &a1))
          {
            OBJ_CALL(self->object.copy(a0, a1));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(FieldComparator$ByteComparator), (PyObject *) self, "copy", args, 2);
        }

        static PyObject *t_FieldComparator$ByteComparator_setBottom(t_FieldComparator$ByteComparator *self, PyObject *args)
        {
          jint a0;

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(self->object.setBottom(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(FieldComparator$ByteComparator), (PyObject *) self, "setBottom", args, 2);
        }

        static PyObject *t_FieldComparator$ByteComparator_setNextReader(t_FieldComparator$ByteComparator *self, PyObject *args)
        {
          ::org::apache::lucene::index::AtomicReaderContext a0((jobject) NULL);
          ::org::apache::lucene::search::FieldComparator result((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.setNextReader(a0));
            return ::org::apache::lucene::search::t_FieldComparator::wrap_Object(result, &::java::lang::PY_TYPE(Byte));
          }

          return callSuper(&PY_TYPE(FieldComparator$ByteComparator), (PyObject *) self, "setNextReader", args, 2);
        }

        static PyObject *t_FieldComparator$ByteComparator_setTopValue(t_FieldComparator$ByteComparator *self, PyObject *args)
        {
          ::java::lang::Byte a0((jobject) NULL);

          if (!parseArgs(args, "O", &::java::lang::PY_TYPE(Byte), &a0))
          {
            OBJ_CALL(self->object.setTopValue(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(FieldComparator$ByteComparator), (PyObject *) self, "setTopValue", args, 2);
        }

        static PyObject *t_FieldComparator$ByteComparator_value(t_FieldComparator$ByteComparator *self, PyObject *args)
        {
          jint a0;
          ::java::lang::Byte result((jobject) NULL);

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(result = self->object.value(a0));
            return ::java::lang::t_Byte::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(FieldComparator$ByteComparator), (PyObject *) self, "value", args, 2);
        }
        static PyObject *t_FieldComparator$ByteComparator_get__parameters_(t_FieldComparator$ByteComparator *self, void *data)
        {
          return typeParameters(self->parameters, sizeof(self->parameters));
        }

        static int t_FieldComparator$ByteComparator_set__bottom(t_FieldComparator$ByteComparator *self, PyObject *arg, void *data)
        {
          {
            jint value;
            if (!parseArg(arg, "I", &value))
            {
              INT_CALL(self->object.setBottom(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "bottom", arg);
          return -1;
        }

        static int t_FieldComparator$ByteComparator_set__nextReader(t_FieldComparator$ByteComparator *self, PyObject *arg, void *data)
        {
          {
            ::org::apache::lucene::index::AtomicReaderContext value((jobject) NULL);
            if (!parseArg(arg, "k", ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &value))
            {
              INT_CALL(self->object.setNextReader(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "nextReader", arg);
          return -1;
        }

        static int t_FieldComparator$ByteComparator_set__topValue(t_FieldComparator$ByteComparator *self, PyObject *arg, void *data)
        {
          {
            ::java::lang::Byte value((jobject) NULL);
            if (!parseArg(arg, "O", &::java::lang::PY_TYPE(Byte), &value))
            {
              INT_CALL(self->object.setTopValue(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "topValue", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/da/DanishAnalyzer.h"
#include "org/apache/lucene/util/Version.h"
#include "java/lang/String.h"
#include "org/apache/lucene/analysis/util/CharArraySet.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace da {

          ::java::lang::Class *DanishAnalyzer::class$ = NULL;
          jmethodID *DanishAnalyzer::mids$ = NULL;
          bool DanishAnalyzer::live$ = false;
          ::java::lang::String *DanishAnalyzer::DEFAULT_STOPWORD_FILE = NULL;

          jclass DanishAnalyzer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/da/DanishAnalyzer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_0d96cf33] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;)V");
              mids$[mid_init$_83eafe28] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/analysis/util/CharArraySet;)V");
              mids$[mid_init$_c9d7e4a3] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/analysis/util/CharArraySet;Lorg/apache/lucene/analysis/util/CharArraySet;)V");
              mids$[mid_getDefaultStopSet_d2d3505c] = env->getStaticMethodID(cls, "getDefaultStopSet", "()Lorg/apache/lucene/analysis/util/CharArraySet;");
              mids$[mid_createComponents_1be39cae] = env->getMethodID(cls, "createComponents", "(Ljava/lang/String;Ljava/io/Reader;)Lorg/apache/lucene/analysis/Analyzer$TokenStreamComponents;");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              DEFAULT_STOPWORD_FILE = new ::java::lang::String(env->getStaticObjectField(cls, "DEFAULT_STOPWORD_FILE", "Ljava/lang/String;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          DanishAnalyzer::DanishAnalyzer(const ::org::apache::lucene::util::Version & a0) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_0d96cf33, a0.this$)) {}

          DanishAnalyzer::DanishAnalyzer(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::analysis::util::CharArraySet & a1) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_83eafe28, a0.this$, a1.this$)) {}

          DanishAnalyzer::DanishAnalyzer(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::analysis::util::CharArraySet & a1, const ::org::apache::lucene::analysis::util::CharArraySet & a2) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_c9d7e4a3, a0.this$, a1.this$, a2.this$)) {}

          ::org::apache::lucene::analysis::util::CharArraySet DanishAnalyzer::getDefaultStopSet()
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::analysis::util::CharArraySet(env->callStaticObjectMethod(cls, mids$[mid_getDefaultStopSet_d2d3505c]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace da {
          static PyObject *t_DanishAnalyzer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_DanishAnalyzer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_DanishAnalyzer_init_(t_DanishAnalyzer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_DanishAnalyzer_getDefaultStopSet(PyTypeObject *type);
          static PyObject *t_DanishAnalyzer_get__defaultStopSet(t_DanishAnalyzer *self, void *data);
          static PyGetSetDef t_DanishAnalyzer__fields_[] = {
            DECLARE_GET_FIELD(t_DanishAnalyzer, defaultStopSet),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_DanishAnalyzer__methods_[] = {
            DECLARE_METHOD(t_DanishAnalyzer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_DanishAnalyzer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_DanishAnalyzer, getDefaultStopSet, METH_NOARGS | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(DanishAnalyzer, t_DanishAnalyzer, ::org::apache::lucene::analysis::util::StopwordAnalyzerBase, DanishAnalyzer, t_DanishAnalyzer_init_, 0, 0, t_DanishAnalyzer__fields_, 0, 0);

          void t_DanishAnalyzer::install(PyObject *module)
          {
            installType(&PY_TYPE(DanishAnalyzer), module, "DanishAnalyzer", 0);
          }

          void t_DanishAnalyzer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(DanishAnalyzer).tp_dict, "class_", make_descriptor(DanishAnalyzer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(DanishAnalyzer).tp_dict, "wrapfn_", make_descriptor(t_DanishAnalyzer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(DanishAnalyzer).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(DanishAnalyzer::initializeClass);
            PyDict_SetItemString(PY_TYPE(DanishAnalyzer).tp_dict, "DEFAULT_STOPWORD_FILE", make_descriptor(j2p(*DanishAnalyzer::DEFAULT_STOPWORD_FILE)));
          }

          static PyObject *t_DanishAnalyzer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, DanishAnalyzer::initializeClass, 1)))
              return NULL;
            return t_DanishAnalyzer::wrap_Object(DanishAnalyzer(((t_DanishAnalyzer *) arg)->object.this$));
          }
          static PyObject *t_DanishAnalyzer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, DanishAnalyzer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_DanishAnalyzer_init_(t_DanishAnalyzer *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                DanishAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "K", ::org::apache::lucene::util::Version::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_))
                {
                  INT_CALL(object = DanishAnalyzer(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 2:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                ::org::apache::lucene::analysis::util::CharArraySet a1((jobject) NULL);
                PyTypeObject **p1;
                DanishAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "KK", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1, &p1, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_))
                {
                  INT_CALL(object = DanishAnalyzer(a0, a1));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 3:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                ::org::apache::lucene::analysis::util::CharArraySet a1((jobject) NULL);
                PyTypeObject **p1;
                ::org::apache::lucene::analysis::util::CharArraySet a2((jobject) NULL);
                PyTypeObject **p2;
                DanishAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "KKK", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1, &p1, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_, &a2, &p2, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_))
                {
                  INT_CALL(object = DanishAnalyzer(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_DanishAnalyzer_getDefaultStopSet(PyTypeObject *type)
          {
            ::org::apache::lucene::analysis::util::CharArraySet result((jobject) NULL);
            OBJ_CALL(result = ::org::apache::lucene::analysis::da::DanishAnalyzer::getDefaultStopSet());
            return ::org::apache::lucene::analysis::util::t_CharArraySet::wrap_Object(result);
          }

          static PyObject *t_DanishAnalyzer_get__defaultStopSet(t_DanishAnalyzer *self, void *data)
          {
            ::org::apache::lucene::analysis::util::CharArraySet value((jobject) NULL);
            OBJ_CALL(value = self->object.getDefaultStopSet());
            return ::org::apache::lucene::analysis::util::t_CharArraySet::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/CollectionTerminatedException.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *CollectionTerminatedException::class$ = NULL;
        jmethodID *CollectionTerminatedException::mids$ = NULL;
        bool CollectionTerminatedException::live$ = false;

        jclass CollectionTerminatedException::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/CollectionTerminatedException");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        CollectionTerminatedException::CollectionTerminatedException() : ::java::lang::RuntimeException(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_CollectionTerminatedException_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_CollectionTerminatedException_instance_(PyTypeObject *type, PyObject *arg);
        static int t_CollectionTerminatedException_init_(t_CollectionTerminatedException *self, PyObject *args, PyObject *kwds);

        static PyMethodDef t_CollectionTerminatedException__methods_[] = {
          DECLARE_METHOD(t_CollectionTerminatedException, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_CollectionTerminatedException, instance_, METH_O | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(CollectionTerminatedException, t_CollectionTerminatedException, ::java::lang::RuntimeException, CollectionTerminatedException, t_CollectionTerminatedException_init_, 0, 0, 0, 0, 0);

        void t_CollectionTerminatedException::install(PyObject *module)
        {
          installType(&PY_TYPE(CollectionTerminatedException), module, "CollectionTerminatedException", 0);
        }

        void t_CollectionTerminatedException::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(CollectionTerminatedException).tp_dict, "class_", make_descriptor(CollectionTerminatedException::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(CollectionTerminatedException).tp_dict, "wrapfn_", make_descriptor(t_CollectionTerminatedException::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(CollectionTerminatedException).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_CollectionTerminatedException_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, CollectionTerminatedException::initializeClass, 1)))
            return NULL;
          return t_CollectionTerminatedException::wrap_Object(CollectionTerminatedException(((t_CollectionTerminatedException *) arg)->object.this$));
        }
        static PyObject *t_CollectionTerminatedException_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, CollectionTerminatedException::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_CollectionTerminatedException_init_(t_CollectionTerminatedException *self, PyObject *args, PyObject *kwds)
        {
          CollectionTerminatedException object((jobject) NULL);

          INT_CALL(object = CollectionTerminatedException());
          self->object = object;

          return 0;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/document/SortedBytesDocValuesField.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "org/apache/lucene/document/FieldType.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace document {

        ::java::lang::Class *SortedBytesDocValuesField::class$ = NULL;
        jmethodID *SortedBytesDocValuesField::mids$ = NULL;
        bool SortedBytesDocValuesField::live$ = false;
        ::org::apache::lucene::document::FieldType *SortedBytesDocValuesField::TYPE_FIXED_LEN = NULL;
        ::org::apache::lucene::document::FieldType *SortedBytesDocValuesField::TYPE_VAR_LEN = NULL;

        jclass SortedBytesDocValuesField::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/document/SortedBytesDocValuesField");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_43cce44e] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Lorg/apache/lucene/util/BytesRef;)V");
            mids$[mid_init$_6c8dc377] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Lorg/apache/lucene/util/BytesRef;Z)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            cls = (jclass) class$->this$;

            TYPE_FIXED_LEN = new ::org::apache::lucene::document::FieldType(env->getStaticObjectField(cls, "TYPE_FIXED_LEN", "Lorg/apache/lucene/document/FieldType;"));
            TYPE_VAR_LEN = new ::org::apache::lucene::document::FieldType(env->getStaticObjectField(cls, "TYPE_VAR_LEN", "Lorg/apache/lucene/document/FieldType;"));
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        SortedBytesDocValuesField::SortedBytesDocValuesField(const ::java::lang::String & a0, const ::org::apache::lucene::util::BytesRef & a1) : ::org::apache::lucene::document::SortedDocValuesField(env->newObject(initializeClass, &mids$, mid_init$_43cce44e, a0.this$, a1.this$)) {}

        SortedBytesDocValuesField::SortedBytesDocValuesField(const ::java::lang::String & a0, const ::org::apache::lucene::util::BytesRef & a1, jboolean a2) : ::org::apache::lucene::document::SortedDocValuesField(env->newObject(initializeClass, &mids$, mid_init$_6c8dc377, a0.this$, a1.this$, a2)) {}
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace document {
        static PyObject *t_SortedBytesDocValuesField_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_SortedBytesDocValuesField_instance_(PyTypeObject *type, PyObject *arg);
        static int t_SortedBytesDocValuesField_init_(t_SortedBytesDocValuesField *self, PyObject *args, PyObject *kwds);

        static PyMethodDef t_SortedBytesDocValuesField__methods_[] = {
          DECLARE_METHOD(t_SortedBytesDocValuesField, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SortedBytesDocValuesField, instance_, METH_O | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(SortedBytesDocValuesField, t_SortedBytesDocValuesField, ::org::apache::lucene::document::SortedDocValuesField, SortedBytesDocValuesField, t_SortedBytesDocValuesField_init_, 0, 0, 0, 0, 0);

        void t_SortedBytesDocValuesField::install(PyObject *module)
        {
          installType(&PY_TYPE(SortedBytesDocValuesField), module, "SortedBytesDocValuesField", 0);
        }

        void t_SortedBytesDocValuesField::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(SortedBytesDocValuesField).tp_dict, "class_", make_descriptor(SortedBytesDocValuesField::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(SortedBytesDocValuesField).tp_dict, "wrapfn_", make_descriptor(t_SortedBytesDocValuesField::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(SortedBytesDocValuesField).tp_dict, "boxfn_", make_descriptor(boxObject));
          env->getClass(SortedBytesDocValuesField::initializeClass);
          PyDict_SetItemString(PY_TYPE(SortedBytesDocValuesField).tp_dict, "TYPE_FIXED_LEN", make_descriptor(::org::apache::lucene::document::t_FieldType::wrap_Object(*SortedBytesDocValuesField::TYPE_FIXED_LEN)));
          PyDict_SetItemString(PY_TYPE(SortedBytesDocValuesField).tp_dict, "TYPE_VAR_LEN", make_descriptor(::org::apache::lucene::document::t_FieldType::wrap_Object(*SortedBytesDocValuesField::TYPE_VAR_LEN)));
        }

        static PyObject *t_SortedBytesDocValuesField_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, SortedBytesDocValuesField::initializeClass, 1)))
            return NULL;
          return t_SortedBytesDocValuesField::wrap_Object(SortedBytesDocValuesField(((t_SortedBytesDocValuesField *) arg)->object.this$));
        }
        static PyObject *t_SortedBytesDocValuesField_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, SortedBytesDocValuesField::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_SortedBytesDocValuesField_init_(t_SortedBytesDocValuesField *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 2:
            {
              ::java::lang::String a0((jobject) NULL);
              ::org::apache::lucene::util::BytesRef a1((jobject) NULL);
              SortedBytesDocValuesField object((jobject) NULL);

              if (!parseArgs(args, "sk", ::org::apache::lucene::util::BytesRef::initializeClass, &a0, &a1))
              {
                INT_CALL(object = SortedBytesDocValuesField(a0, a1));
                self->object = object;
                break;
              }
            }
            goto err;
           case 3:
            {
              ::java::lang::String a0((jobject) NULL);
              ::org::apache::lucene::util::BytesRef a1((jobject) NULL);
              jboolean a2;
              SortedBytesDocValuesField object((jobject) NULL);

              if (!parseArgs(args, "skZ", ::org::apache::lucene::util::BytesRef::initializeClass, &a0, &a1, &a2))
              {
                INT_CALL(object = SortedBytesDocValuesField(a0, a1, a2));
                self->object = object;
                break;
              }
            }
           default:
           err:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/core/processors/NoChildOptimizationQueryNodeProcessor.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace processors {

              ::java::lang::Class *NoChildOptimizationQueryNodeProcessor::class$ = NULL;
              jmethodID *NoChildOptimizationQueryNodeProcessor::mids$ = NULL;
              bool NoChildOptimizationQueryNodeProcessor::live$ = false;

              jclass NoChildOptimizationQueryNodeProcessor::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/core/processors/NoChildOptimizationQueryNodeProcessor");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
                  mids$[mid_preProcessNode_6705aed7] = env->getMethodID(cls, "preProcessNode", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;)Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;");
                  mids$[mid_setChildrenOrder_4f378251] = env->getMethodID(cls, "setChildrenOrder", "(Ljava/util/List;)Ljava/util/List;");
                  mids$[mid_postProcessNode_6705aed7] = env->getMethodID(cls, "postProcessNode", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;)Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              NoChildOptimizationQueryNodeProcessor::NoChildOptimizationQueryNodeProcessor() : ::org::apache::lucene::queryparser::flexible::core::processors::QueryNodeProcessorImpl(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace processors {
              static PyObject *t_NoChildOptimizationQueryNodeProcessor_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_NoChildOptimizationQueryNodeProcessor_instance_(PyTypeObject *type, PyObject *arg);
              static int t_NoChildOptimizationQueryNodeProcessor_init_(t_NoChildOptimizationQueryNodeProcessor *self, PyObject *args, PyObject *kwds);

              static PyMethodDef t_NoChildOptimizationQueryNodeProcessor__methods_[] = {
                DECLARE_METHOD(t_NoChildOptimizationQueryNodeProcessor, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_NoChildOptimizationQueryNodeProcessor, instance_, METH_O | METH_CLASS),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(NoChildOptimizationQueryNodeProcessor, t_NoChildOptimizationQueryNodeProcessor, ::org::apache::lucene::queryparser::flexible::core::processors::QueryNodeProcessorImpl, NoChildOptimizationQueryNodeProcessor, t_NoChildOptimizationQueryNodeProcessor_init_, 0, 0, 0, 0, 0);

              void t_NoChildOptimizationQueryNodeProcessor::install(PyObject *module)
              {
                installType(&PY_TYPE(NoChildOptimizationQueryNodeProcessor), module, "NoChildOptimizationQueryNodeProcessor", 0);
              }

              void t_NoChildOptimizationQueryNodeProcessor::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(NoChildOptimizationQueryNodeProcessor).tp_dict, "class_", make_descriptor(NoChildOptimizationQueryNodeProcessor::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(NoChildOptimizationQueryNodeProcessor).tp_dict, "wrapfn_", make_descriptor(t_NoChildOptimizationQueryNodeProcessor::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(NoChildOptimizationQueryNodeProcessor).tp_dict, "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_NoChildOptimizationQueryNodeProcessor_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, NoChildOptimizationQueryNodeProcessor::initializeClass, 1)))
                  return NULL;
                return t_NoChildOptimizationQueryNodeProcessor::wrap_Object(NoChildOptimizationQueryNodeProcessor(((t_NoChildOptimizationQueryNodeProcessor *) arg)->object.this$));
              }
              static PyObject *t_NoChildOptimizationQueryNodeProcessor_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, NoChildOptimizationQueryNodeProcessor::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_NoChildOptimizationQueryNodeProcessor_init_(t_NoChildOptimizationQueryNodeProcessor *self, PyObject *args, PyObject *kwds)
              {
                NoChildOptimizationQueryNodeProcessor object((jobject) NULL);

                INT_CALL(object = NoChildOptimizationQueryNodeProcessor());
                self->object = object;

                return 0;
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/automaton/Transition.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/util/automaton/State.h"
#include "java/lang/Cloneable.h"
#include "java/lang/String.h"
#include "java/util/Comparator.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace automaton {

          ::java::lang::Class *Transition::class$ = NULL;
          jmethodID *Transition::mids$ = NULL;
          bool Transition::live$ = false;
          ::java::util::Comparator *Transition::CompareByDestThenMinMax = NULL;
          ::java::util::Comparator *Transition::CompareByMinMaxThenDest = NULL;

          jclass Transition::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/util/automaton/Transition");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_8b58b7f9] = env->getMethodID(cls, "<init>", "(ILorg/apache/lucene/util/automaton/State;)V");
              mids$[mid_init$_630ffcbb] = env->getMethodID(cls, "<init>", "(IILorg/apache/lucene/util/automaton/State;)V");
              mids$[mid_clone_09f0be81] = env->getMethodID(cls, "clone", "()Lorg/apache/lucene/util/automaton/Transition;");
              mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
              mids$[mid_getDest_0b46b0b2] = env->getMethodID(cls, "getDest", "()Lorg/apache/lucene/util/automaton/State;");
              mids$[mid_getMax_54c6a179] = env->getMethodID(cls, "getMax", "()I");
              mids$[mid_getMin_54c6a179] = env->getMethodID(cls, "getMin", "()I");
              mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
              mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              CompareByDestThenMinMax = new ::java::util::Comparator(env->getStaticObjectField(cls, "CompareByDestThenMinMax", "Ljava/util/Comparator;"));
              CompareByMinMaxThenDest = new ::java::util::Comparator(env->getStaticObjectField(cls, "CompareByMinMaxThenDest", "Ljava/util/Comparator;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          Transition::Transition(jint a0, const ::org::apache::lucene::util::automaton::State & a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_8b58b7f9, a0, a1.this$)) {}

          Transition::Transition(jint a0, jint a1, const ::org::apache::lucene::util::automaton::State & a2) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_630ffcbb, a0, a1, a2.this$)) {}

          Transition Transition::clone() const
          {
            return Transition(env->callObjectMethod(this$, mids$[mid_clone_09f0be81]));
          }

          jboolean Transition::equals(const ::java::lang::Object & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
          }

          ::org::apache::lucene::util::automaton::State Transition::getDest() const
          {
            return ::org::apache::lucene::util::automaton::State(env->callObjectMethod(this$, mids$[mid_getDest_0b46b0b2]));
          }

          jint Transition::getMax() const
          {
            return env->callIntMethod(this$, mids$[mid_getMax_54c6a179]);
          }

          jint Transition::getMin() const
          {
            return env->callIntMethod(this$, mids$[mid_getMin_54c6a179]);
          }

          jint Transition::hashCode() const
          {
            return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
          }

          ::java::lang::String Transition::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace automaton {
          static PyObject *t_Transition_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Transition_instance_(PyTypeObject *type, PyObject *arg);
          static int t_Transition_init_(t_Transition *self, PyObject *args, PyObject *kwds);
          static PyObject *t_Transition_clone(t_Transition *self);
          static PyObject *t_Transition_equals(t_Transition *self, PyObject *args);
          static PyObject *t_Transition_getDest(t_Transition *self);
          static PyObject *t_Transition_getMax(t_Transition *self);
          static PyObject *t_Transition_getMin(t_Transition *self);
          static PyObject *t_Transition_hashCode(t_Transition *self, PyObject *args);
          static PyObject *t_Transition_toString(t_Transition *self, PyObject *args);
          static PyObject *t_Transition_get__dest(t_Transition *self, void *data);
          static PyObject *t_Transition_get__max(t_Transition *self, void *data);
          static PyObject *t_Transition_get__min(t_Transition *self, void *data);
          static PyGetSetDef t_Transition__fields_[] = {
            DECLARE_GET_FIELD(t_Transition, dest),
            DECLARE_GET_FIELD(t_Transition, max),
            DECLARE_GET_FIELD(t_Transition, min),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_Transition__methods_[] = {
            DECLARE_METHOD(t_Transition, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Transition, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Transition, clone, METH_NOARGS),
            DECLARE_METHOD(t_Transition, equals, METH_VARARGS),
            DECLARE_METHOD(t_Transition, getDest, METH_NOARGS),
            DECLARE_METHOD(t_Transition, getMax, METH_NOARGS),
            DECLARE_METHOD(t_Transition, getMin, METH_NOARGS),
            DECLARE_METHOD(t_Transition, hashCode, METH_VARARGS),
            DECLARE_METHOD(t_Transition, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(Transition, t_Transition, ::java::lang::Object, Transition, t_Transition_init_, 0, 0, t_Transition__fields_, 0, 0);

          void t_Transition::install(PyObject *module)
          {
            installType(&PY_TYPE(Transition), module, "Transition", 0);
          }

          void t_Transition::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(Transition).tp_dict, "class_", make_descriptor(Transition::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(Transition).tp_dict, "wrapfn_", make_descriptor(t_Transition::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(Transition).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(Transition::initializeClass);
            PyDict_SetItemString(PY_TYPE(Transition).tp_dict, "CompareByDestThenMinMax", make_descriptor(::java::util::t_Comparator::wrap_Object(*Transition::CompareByDestThenMinMax)));
            PyDict_SetItemString(PY_TYPE(Transition).tp_dict, "CompareByMinMaxThenDest", make_descriptor(::java::util::t_Comparator::wrap_Object(*Transition::CompareByMinMaxThenDest)));
          }

          static PyObject *t_Transition_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, Transition::initializeClass, 1)))
              return NULL;
            return t_Transition::wrap_Object(Transition(((t_Transition *) arg)->object.this$));
          }
          static PyObject *t_Transition_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, Transition::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_Transition_init_(t_Transition *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 2:
              {
                jint a0;
                ::org::apache::lucene::util::automaton::State a1((jobject) NULL);
                Transition object((jobject) NULL);

                if (!parseArgs(args, "Ik", ::org::apache::lucene::util::automaton::State::initializeClass, &a0, &a1))
                {
                  INT_CALL(object = Transition(a0, a1));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 3:
              {
                jint a0;
                jint a1;
                ::org::apache::lucene::util::automaton::State a2((jobject) NULL);
                Transition object((jobject) NULL);

                if (!parseArgs(args, "IIk", ::org::apache::lucene::util::automaton::State::initializeClass, &a0, &a1, &a2))
                {
                  INT_CALL(object = Transition(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_Transition_clone(t_Transition *self)
          {
            Transition result((jobject) NULL);
            OBJ_CALL(result = self->object.clone());
            return t_Transition::wrap_Object(result);
          }

          static PyObject *t_Transition_equals(t_Transition *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            jboolean result;

            if (!parseArgs(args, "o", &a0))
            {
              OBJ_CALL(result = self->object.equals(a0));
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(Transition), (PyObject *) self, "equals", args, 2);
          }

          static PyObject *t_Transition_getDest(t_Transition *self)
          {
            ::org::apache::lucene::util::automaton::State result((jobject) NULL);
            OBJ_CALL(result = self->object.getDest());
            return ::org::apache::lucene::util::automaton::t_State::wrap_Object(result);
          }

          static PyObject *t_Transition_getMax(t_Transition *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getMax());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_Transition_getMin(t_Transition *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getMin());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_Transition_hashCode(t_Transition *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.hashCode());
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(Transition), (PyObject *) self, "hashCode", args, 2);
          }

          static PyObject *t_Transition_toString(t_Transition *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(&PY_TYPE(Transition), (PyObject *) self, "toString", args, 2);
          }

          static PyObject *t_Transition_get__dest(t_Transition *self, void *data)
          {
            ::org::apache::lucene::util::automaton::State value((jobject) NULL);
            OBJ_CALL(value = self->object.getDest());
            return ::org::apache::lucene::util::automaton::t_State::wrap_Object(value);
          }

          static PyObject *t_Transition_get__max(t_Transition *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getMax());
            return PyInt_FromLong((long) value);
          }

          static PyObject *t_Transition_get__min(t_Transition *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getMin());
            return PyInt_FromLong((long) value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/util/CharArraySet.h"
#include "java/lang/Class.h"
#include "java/lang/Object.h"
#include "java/util/Iterator.h"
#include "java/lang/CharSequence.h"
#include "java/lang/String.h"
#include "java/util/Collection.h"
#include "java/util/Set.h"
#include "org/apache/lucene/util/Version.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace util {

          ::java::lang::Class *CharArraySet::class$ = NULL;
          jmethodID *CharArraySet::mids$ = NULL;
          bool CharArraySet::live$ = false;
          CharArraySet *CharArraySet::EMPTY_SET = NULL;

          jclass CharArraySet::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/util/CharArraySet");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_e4d1113d] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Ljava/util/Collection;Z)V");
              mids$[mid_init$_b3a872e4] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;IZ)V");
              mids$[mid_add_5fdc3f44] = env->getMethodID(cls, "add", "(Ljava/lang/String;)Z");
              mids$[mid_add_700e23da] = env->getMethodID(cls, "add", "([C)Z");
              mids$[mid_add_a8afc646] = env->getMethodID(cls, "add", "(Ljava/lang/CharSequence;)Z");
              mids$[mid_add_290588e2] = env->getMethodID(cls, "add", "(Ljava/lang/Object;)Z");
              mids$[mid_clear_54c6a166] = env->getMethodID(cls, "clear", "()V");
              mids$[mid_contains_290588e2] = env->getMethodID(cls, "contains", "(Ljava/lang/Object;)Z");
              mids$[mid_contains_a8afc646] = env->getMethodID(cls, "contains", "(Ljava/lang/CharSequence;)Z");
              mids$[mid_contains_6f0bb35a] = env->getMethodID(cls, "contains", "([CII)Z");
              mids$[mid_copy_8d0d7f61] = env->getStaticMethodID(cls, "copy", "(Lorg/apache/lucene/util/Version;Ljava/util/Set;)Lorg/apache/lucene/analysis/util/CharArraySet;");
              mids$[mid_iterator_40858c90] = env->getMethodID(cls, "iterator", "()Ljava/util/Iterator;");
              mids$[mid_size_54c6a179] = env->getMethodID(cls, "size", "()I");
              mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");
              mids$[mid_unmodifiableSet_ea04d04d] = env->getStaticMethodID(cls, "unmodifiableSet", "(Lorg/apache/lucene/analysis/util/CharArraySet;)Lorg/apache/lucene/analysis/util/CharArraySet;");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              EMPTY_SET = new CharArraySet(env->getStaticObjectField(cls, "EMPTY_SET", "Lorg/apache/lucene/analysis/util/CharArraySet;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          CharArraySet::CharArraySet(const ::org::apache::lucene::util::Version & a0, const ::java::util::Collection & a1, jboolean a2) : ::java::util::AbstractSet(env->newObject(initializeClass, &mids$, mid_init$_e4d1113d, a0.this$, a1.this$, a2)) {}

          CharArraySet::CharArraySet(const ::org::apache::lucene::util::Version & a0, jint a1, jboolean a2) : ::java::util::AbstractSet(env->newObject(initializeClass, &mids$, mid_init$_b3a872e4, a0.this$, a1, a2)) {}

          jboolean CharArraySet::add(const ::java::lang::String & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_add_5fdc3f44], a0.this$);
          }

          jboolean CharArraySet::add(const JArray< jchar > & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_add_700e23da], a0.this$);
          }

          jboolean CharArraySet::add(const ::java::lang::CharSequence & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_add_a8afc646], a0.this$);
          }

          jboolean CharArraySet::add(const ::java::lang::Object & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_add_290588e2], a0.this$);
          }

          void CharArraySet::clear() const
          {
            env->callVoidMethod(this$, mids$[mid_clear_54c6a166]);
          }

          jboolean CharArraySet::contains(const ::java::lang::Object & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_contains_290588e2], a0.this$);
          }

          jboolean CharArraySet::contains(const ::java::lang::CharSequence & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_contains_a8afc646], a0.this$);
          }

          jboolean CharArraySet::contains(const JArray< jchar > & a0, jint a1, jint a2) const
          {
            return env->callBooleanMethod(this$, mids$[mid_contains_6f0bb35a], a0.this$, a1, a2);
          }

          CharArraySet CharArraySet::copy(const ::org::apache::lucene::util::Version & a0, const ::java::util::Set & a1)
          {
            jclass cls = env->getClass(initializeClass);
            return CharArraySet(env->callStaticObjectMethod(cls, mids$[mid_copy_8d0d7f61], a0.this$, a1.this$));
          }

          ::java::util::Iterator CharArraySet::iterator() const
          {
            return ::java::util::Iterator(env->callObjectMethod(this$, mids$[mid_iterator_40858c90]));
          }

          jint CharArraySet::size() const
          {
            return env->callIntMethod(this$, mids$[mid_size_54c6a179]);
          }

          ::java::lang::String CharArraySet::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
          }

          CharArraySet CharArraySet::unmodifiableSet(const CharArraySet & a0)
          {
            jclass cls = env->getClass(initializeClass);
            return CharArraySet(env->callStaticObjectMethod(cls, mids$[mid_unmodifiableSet_ea04d04d], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace util {
          static PyObject *t_CharArraySet_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_CharArraySet_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_CharArraySet_of_(t_CharArraySet *self, PyObject *args);
          static int t_CharArraySet_init_(t_CharArraySet *self, PyObject *args, PyObject *kwds);
          static PyObject *t_CharArraySet_add(t_CharArraySet *self, PyObject *args);
          static PyObject *t_CharArraySet_clear(t_CharArraySet *self, PyObject *args);
          static PyObject *t_CharArraySet_contains(t_CharArraySet *self, PyObject *args);
          static PyObject *t_CharArraySet_copy(PyTypeObject *type, PyObject *args);
          static PyObject *t_CharArraySet_iterator(t_CharArraySet *self, PyObject *args);
          static PyObject *t_CharArraySet_size(t_CharArraySet *self, PyObject *args);
          static PyObject *t_CharArraySet_toString(t_CharArraySet *self, PyObject *args);
          static PyObject *t_CharArraySet_unmodifiableSet(PyTypeObject *type, PyObject *arg);
          static PyObject *t_CharArraySet_get__parameters_(t_CharArraySet *self, void *data);
          static PyGetSetDef t_CharArraySet__fields_[] = {
            DECLARE_GET_FIELD(t_CharArraySet, parameters_),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_CharArraySet__methods_[] = {
            DECLARE_METHOD(t_CharArraySet, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CharArraySet, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CharArraySet, of_, METH_VARARGS),
            DECLARE_METHOD(t_CharArraySet, add, METH_VARARGS),
            DECLARE_METHOD(t_CharArraySet, clear, METH_VARARGS),
            DECLARE_METHOD(t_CharArraySet, contains, METH_VARARGS),
            DECLARE_METHOD(t_CharArraySet, copy, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_CharArraySet, iterator, METH_VARARGS),
            DECLARE_METHOD(t_CharArraySet, size, METH_VARARGS),
            DECLARE_METHOD(t_CharArraySet, toString, METH_VARARGS),
            DECLARE_METHOD(t_CharArraySet, unmodifiableSet, METH_O | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(CharArraySet, t_CharArraySet, ::java::util::AbstractSet, CharArraySet, t_CharArraySet_init_, ((PyObject *(*)(t_CharArraySet *)) get_generic_iterator< t_CharArraySet >), 0, t_CharArraySet__fields_, 0, 0);
          PyObject *t_CharArraySet::wrap_Object(const CharArraySet& object, PyTypeObject *p0)
          {
            PyObject *obj = t_CharArraySet::wrap_Object(object);
            if (obj != NULL && obj != Py_None)
            {
              t_CharArraySet *self = (t_CharArraySet *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          PyObject *t_CharArraySet::wrap_jobject(const jobject& object, PyTypeObject *p0)
          {
            PyObject *obj = t_CharArraySet::wrap_jobject(object);
            if (obj != NULL && obj != Py_None)
            {
              t_CharArraySet *self = (t_CharArraySet *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          void t_CharArraySet::install(PyObject *module)
          {
            installType(&PY_TYPE(CharArraySet), module, "CharArraySet", 0);
          }

          void t_CharArraySet::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(CharArraySet).tp_dict, "class_", make_descriptor(CharArraySet::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(CharArraySet).tp_dict, "wrapfn_", make_descriptor(t_CharArraySet::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(CharArraySet).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(CharArraySet::initializeClass);
            PyDict_SetItemString(PY_TYPE(CharArraySet).tp_dict, "EMPTY_SET", make_descriptor(t_CharArraySet::wrap_Object(*CharArraySet::EMPTY_SET)));
          }

          static PyObject *t_CharArraySet_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, CharArraySet::initializeClass, 1)))
              return NULL;
            return t_CharArraySet::wrap_Object(CharArraySet(((t_CharArraySet *) arg)->object.this$));
          }
          static PyObject *t_CharArraySet_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, CharArraySet::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_CharArraySet_of_(t_CharArraySet *self, PyObject *args)
          {
            if (!parseArg(args, "T", 1, &(self->parameters)))
              Py_RETURN_SELF;
            return PyErr_SetArgsError((PyObject *) self, "of_", args);
          }

          static int t_CharArraySet_init_(t_CharArraySet *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 3:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                ::java::util::Collection a1((jobject) NULL);
                PyTypeObject **p1;
                jboolean a2;
                CharArraySet object((jobject) NULL);

                if (!parseArgs(args, "KKZ", ::org::apache::lucene::util::Version::initializeClass, ::java::util::Collection::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1, &p1, ::java::util::t_Collection::parameters_, &a2))
                {
                  INT_CALL(object = CharArraySet(a0, a1, a2));
                  self->object = object;
                  self->parameters[0] = &::java::lang::PY_TYPE(Object);
                  break;
                }
              }
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                jint a1;
                jboolean a2;
                CharArraySet object((jobject) NULL);

                if (!parseArgs(args, "KIZ", ::org::apache::lucene::util::Version::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1, &a2))
                {
                  INT_CALL(object = CharArraySet(a0, a1, a2));
                  self->object = object;
                  self->parameters[0] = &::java::lang::PY_TYPE(Object);
                  break;
                }
              }
             default:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_CharArraySet_add(t_CharArraySet *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::java::lang::String a0((jobject) NULL);
                jboolean result;

                if (!parseArgs(args, "s", &a0))
                {
                  OBJ_CALL(result = self->object.add(a0));
                  Py_RETURN_BOOL(result);
                }
              }
              {
                JArray< jchar > a0((jobject) NULL);
                jboolean result;

                if (!parseArgs(args, "[C", &a0))
                {
                  OBJ_CALL(result = self->object.add(a0));
                  Py_RETURN_BOOL(result);
                }
              }
              {
                ::java::lang::CharSequence a0((jobject) NULL);
                jboolean result;

                if (!parseArgs(args, "O", &::java::lang::PY_TYPE(CharSequence), &a0))
                {
                  OBJ_CALL(result = self->object.add(a0));
                  Py_RETURN_BOOL(result);
                }
              }
              {
                ::java::lang::Object a0((jobject) NULL);
                jboolean result;

                if (!parseArgs(args, "o", &a0))
                {
                  OBJ_CALL(result = self->object.add(a0));
                  Py_RETURN_BOOL(result);
                }
              }
            }

            return callSuper(&PY_TYPE(CharArraySet), (PyObject *) self, "add", args, 2);
          }

          static PyObject *t_CharArraySet_clear(t_CharArraySet *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.clear());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(CharArraySet), (PyObject *) self, "clear", args, 2);
          }

          static PyObject *t_CharArraySet_contains(t_CharArraySet *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::java::lang::Object a0((jobject) NULL);
                jboolean result;

                if (!parseArgs(args, "o", &a0))
                {
                  OBJ_CALL(result = self->object.contains(a0));
                  Py_RETURN_BOOL(result);
                }
              }
              {
                ::java::lang::CharSequence a0((jobject) NULL);
                jboolean result;

                if (!parseArgs(args, "O", &::java::lang::PY_TYPE(CharSequence), &a0))
                {
                  OBJ_CALL(result = self->object.contains(a0));
                  Py_RETURN_BOOL(result);
                }
              }
              break;
             case 3:
              {
                JArray< jchar > a0((jobject) NULL);
                jint a1;
                jint a2;
                jboolean result;

                if (!parseArgs(args, "[CII", &a0, &a1, &a2))
                {
                  OBJ_CALL(result = self->object.contains(a0, a1, a2));
                  Py_RETURN_BOOL(result);
                }
              }
            }

            return callSuper(&PY_TYPE(CharArraySet), (PyObject *) self, "contains", args, 2);
          }

          static PyObject *t_CharArraySet_copy(PyTypeObject *type, PyObject *args)
          {
            ::org::apache::lucene::util::Version a0((jobject) NULL);
            PyTypeObject **p0;
            ::java::util::Set a1((jobject) NULL);
            PyTypeObject **p1;
            CharArraySet result((jobject) NULL);

            if (!parseArgs(args, "KK", ::org::apache::lucene::util::Version::initializeClass, ::java::util::Set::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1, &p1, ::java::util::t_Set::parameters_))
            {
              OBJ_CALL(result = ::org::apache::lucene::analysis::util::CharArraySet::copy(a0, a1));
              return t_CharArraySet::wrap_Object(result);
            }

            PyErr_SetArgsError(type, "copy", args);
            return NULL;
          }

          static PyObject *t_CharArraySet_iterator(t_CharArraySet *self, PyObject *args)
          {
            ::java::util::Iterator result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.iterator());
              return ::java::util::t_Iterator::wrap_Object(result, &::java::lang::PY_TYPE(Object));
            }

            return callSuper(&PY_TYPE(CharArraySet), (PyObject *) self, "iterator", args, 2);
          }

          static PyObject *t_CharArraySet_size(t_CharArraySet *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.size());
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(CharArraySet), (PyObject *) self, "size", args, 2);
          }

          static PyObject *t_CharArraySet_toString(t_CharArraySet *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(&PY_TYPE(CharArraySet), (PyObject *) self, "toString", args, 2);
          }

          static PyObject *t_CharArraySet_unmodifiableSet(PyTypeObject *type, PyObject *arg)
          {
            CharArraySet a0((jobject) NULL);
            PyTypeObject **p0;
            CharArraySet result((jobject) NULL);

            if (!parseArg(arg, "K", CharArraySet::initializeClass, &a0, &p0, t_CharArraySet::parameters_))
            {
              OBJ_CALL(result = ::org::apache::lucene::analysis::util::CharArraySet::unmodifiableSet(a0));
              return t_CharArraySet::wrap_Object(result);
            }

            PyErr_SetArgsError(type, "unmodifiableSet", arg);
            return NULL;
          }
          static PyObject *t_CharArraySet_get__parameters_(t_CharArraySet *self, void *data)
          {
            return typeParameters(self->parameters, sizeof(self->parameters));
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/ext/ExtendableQueryParser.h"
#include "org/apache/lucene/queryparser/ext/Extensions.h"
#include "org/apache/lucene/analysis/Analyzer.h"
#include "org/apache/lucene/util/Version.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace ext {

          ::java::lang::Class *ExtendableQueryParser::class$ = NULL;
          jmethodID *ExtendableQueryParser::mids$ = NULL;
          bool ExtendableQueryParser::live$ = false;

          jclass ExtendableQueryParser::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/ext/ExtendableQueryParser");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_504c192d] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Ljava/lang/String;Lorg/apache/lucene/analysis/Analyzer;)V");
              mids$[mid_init$_5a825d0f] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Ljava/lang/String;Lorg/apache/lucene/analysis/Analyzer;Lorg/apache/lucene/queryparser/ext/Extensions;)V");
              mids$[mid_getExtensionFieldDelimiter_54c6a173] = env->getMethodID(cls, "getExtensionFieldDelimiter", "()C");
              mids$[mid_getFieldQuery_bd696f55] = env->getMethodID(cls, "getFieldQuery", "(Ljava/lang/String;Ljava/lang/String;Z)Lorg/apache/lucene/search/Query;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ExtendableQueryParser::ExtendableQueryParser(const ::org::apache::lucene::util::Version & a0, const ::java::lang::String & a1, const ::org::apache::lucene::analysis::Analyzer & a2) : ::org::apache::lucene::queryparser::classic::QueryParser(env->newObject(initializeClass, &mids$, mid_init$_504c192d, a0.this$, a1.this$, a2.this$)) {}

          ExtendableQueryParser::ExtendableQueryParser(const ::org::apache::lucene::util::Version & a0, const ::java::lang::String & a1, const ::org::apache::lucene::analysis::Analyzer & a2, const ::org::apache::lucene::queryparser::ext::Extensions & a3) : ::org::apache::lucene::queryparser::classic::QueryParser(env->newObject(initializeClass, &mids$, mid_init$_5a825d0f, a0.this$, a1.this$, a2.this$, a3.this$)) {}

          jchar ExtendableQueryParser::getExtensionFieldDelimiter() const
          {
            return env->callCharMethod(this$, mids$[mid_getExtensionFieldDelimiter_54c6a173]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace ext {
          static PyObject *t_ExtendableQueryParser_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_ExtendableQueryParser_instance_(PyTypeObject *type, PyObject *arg);
          static int t_ExtendableQueryParser_init_(t_ExtendableQueryParser *self, PyObject *args, PyObject *kwds);
          static PyObject *t_ExtendableQueryParser_getExtensionFieldDelimiter(t_ExtendableQueryParser *self);
          static PyObject *t_ExtendableQueryParser_get__extensionFieldDelimiter(t_ExtendableQueryParser *self, void *data);
          static PyGetSetDef t_ExtendableQueryParser__fields_[] = {
            DECLARE_GET_FIELD(t_ExtendableQueryParser, extensionFieldDelimiter),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_ExtendableQueryParser__methods_[] = {
            DECLARE_METHOD(t_ExtendableQueryParser, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ExtendableQueryParser, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ExtendableQueryParser, getExtensionFieldDelimiter, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(ExtendableQueryParser, t_ExtendableQueryParser, ::org::apache::lucene::queryparser::classic::QueryParser, ExtendableQueryParser, t_ExtendableQueryParser_init_, 0, 0, t_ExtendableQueryParser__fields_, 0, 0);

          void t_ExtendableQueryParser::install(PyObject *module)
          {
            installType(&PY_TYPE(ExtendableQueryParser), module, "ExtendableQueryParser", 0);
          }

          void t_ExtendableQueryParser::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(ExtendableQueryParser).tp_dict, "class_", make_descriptor(ExtendableQueryParser::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(ExtendableQueryParser).tp_dict, "wrapfn_", make_descriptor(t_ExtendableQueryParser::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(ExtendableQueryParser).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_ExtendableQueryParser_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, ExtendableQueryParser::initializeClass, 1)))
              return NULL;
            return t_ExtendableQueryParser::wrap_Object(ExtendableQueryParser(((t_ExtendableQueryParser *) arg)->object.this$));
          }
          static PyObject *t_ExtendableQueryParser_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, ExtendableQueryParser::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_ExtendableQueryParser_init_(t_ExtendableQueryParser *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 3:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                ::java::lang::String a1((jobject) NULL);
                ::org::apache::lucene::analysis::Analyzer a2((jobject) NULL);
                ExtendableQueryParser object((jobject) NULL);

                if (!parseArgs(args, "Ksk", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::Analyzer::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1, &a2))
                {
                  INT_CALL(object = ExtendableQueryParser(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 4:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                ::java::lang::String a1((jobject) NULL);
                ::org::apache::lucene::analysis::Analyzer a2((jobject) NULL);
                ::org::apache::lucene::queryparser::ext::Extensions a3((jobject) NULL);
                ExtendableQueryParser object((jobject) NULL);

                if (!parseArgs(args, "Kskk", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::Analyzer::initializeClass, ::org::apache::lucene::queryparser::ext::Extensions::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1, &a2, &a3))
                {
                  INT_CALL(object = ExtendableQueryParser(a0, a1, a2, a3));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_ExtendableQueryParser_getExtensionFieldDelimiter(t_ExtendableQueryParser *self)
          {
            jchar result;
            OBJ_CALL(result = self->object.getExtensionFieldDelimiter());
            return PyUnicode_FromUnicode((Py_UNICODE *) &result, 1);
          }

          static PyObject *t_ExtendableQueryParser_get__extensionFieldDelimiter(t_ExtendableQueryParser *self, void *data)
          {
            jchar value;
            OBJ_CALL(value = self->object.getExtensionFieldDelimiter());
            return PyUnicode_FromUnicode((Py_UNICODE *) &value, 1);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/stempel/StempelPolishStemFilterFactory.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/String.h"
#include "java/util/Map.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace stempel {

          ::java::lang::Class *StempelPolishStemFilterFactory::class$ = NULL;
          jmethodID *StempelPolishStemFilterFactory::mids$ = NULL;
          bool StempelPolishStemFilterFactory::live$ = false;

          jclass StempelPolishStemFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/stempel/StempelPolishStemFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4c9e2b1c] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_a65cd6ab] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/TokenStream;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          StempelPolishStemFilterFactory::StempelPolishStemFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_4c9e2b1c, a0.this$)) {}

          ::org::apache::lucene::analysis::TokenStream StempelPolishStemFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::TokenStream(env->callObjectMethod(this$, mids$[mid_create_a65cd6ab], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace stempel {
          static PyObject *t_StempelPolishStemFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_StempelPolishStemFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_StempelPolishStemFilterFactory_init_(t_StempelPolishStemFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_StempelPolishStemFilterFactory_create(t_StempelPolishStemFilterFactory *self, PyObject *args);

          static PyMethodDef t_StempelPolishStemFilterFactory__methods_[] = {
            DECLARE_METHOD(t_StempelPolishStemFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_StempelPolishStemFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_StempelPolishStemFilterFactory, create, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(StempelPolishStemFilterFactory, t_StempelPolishStemFilterFactory, ::org::apache::lucene::analysis::util::TokenFilterFactory, StempelPolishStemFilterFactory, t_StempelPolishStemFilterFactory_init_, 0, 0, 0, 0, 0);

          void t_StempelPolishStemFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(StempelPolishStemFilterFactory), module, "StempelPolishStemFilterFactory", 0);
          }

          void t_StempelPolishStemFilterFactory::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(StempelPolishStemFilterFactory).tp_dict, "class_", make_descriptor(StempelPolishStemFilterFactory::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(StempelPolishStemFilterFactory).tp_dict, "wrapfn_", make_descriptor(t_StempelPolishStemFilterFactory::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(StempelPolishStemFilterFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_StempelPolishStemFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, StempelPolishStemFilterFactory::initializeClass, 1)))
              return NULL;
            return t_StempelPolishStemFilterFactory::wrap_Object(StempelPolishStemFilterFactory(((t_StempelPolishStemFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_StempelPolishStemFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, StempelPolishStemFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_StempelPolishStemFilterFactory_init_(t_StempelPolishStemFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            StempelPolishStemFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = StempelPolishStemFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_StempelPolishStemFilterFactory_create(t_StempelPolishStemFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::TokenStream result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::t_TokenStream::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(StempelPolishStemFilterFactory), (PyObject *) self, "create", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/RecyclingByteBlockAllocator.h"
#include "org/apache/lucene/util/Counter.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *RecyclingByteBlockAllocator::class$ = NULL;
        jmethodID *RecyclingByteBlockAllocator::mids$ = NULL;
        bool RecyclingByteBlockAllocator::live$ = false;
        jint RecyclingByteBlockAllocator::DEFAULT_BUFFERED_BLOCKS = (jint) 0;

        jclass RecyclingByteBlockAllocator::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/RecyclingByteBlockAllocator");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_init$_d8d154a6] = env->getMethodID(cls, "<init>", "(II)V");
            mids$[mid_init$_bdd89aab] = env->getMethodID(cls, "<init>", "(IILorg/apache/lucene/util/Counter;)V");
            mids$[mid_bytesUsed_54c6a17a] = env->getMethodID(cls, "bytesUsed", "()J");
            mids$[mid_freeBlocks_39c7bd23] = env->getMethodID(cls, "freeBlocks", "(I)I");
            mids$[mid_getByteBlock_dab10e7e] = env->getMethodID(cls, "getByteBlock", "()[B");
            mids$[mid_maxBufferedBlocks_54c6a179] = env->getMethodID(cls, "maxBufferedBlocks", "()I");
            mids$[mid_numBufferedBlocks_54c6a179] = env->getMethodID(cls, "numBufferedBlocks", "()I");
            mids$[mid_recycleByteBlocks_d3ffa89f] = env->getMethodID(cls, "recycleByteBlocks", "([[BII)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            cls = (jclass) class$->this$;

            DEFAULT_BUFFERED_BLOCKS = env->getStaticIntField(cls, "DEFAULT_BUFFERED_BLOCKS");
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        RecyclingByteBlockAllocator::RecyclingByteBlockAllocator() : ::org::apache::lucene::util::ByteBlockPool$Allocator(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        RecyclingByteBlockAllocator::RecyclingByteBlockAllocator(jint a0, jint a1) : ::org::apache::lucene::util::ByteBlockPool$Allocator(env->newObject(initializeClass, &mids$, mid_init$_d8d154a6, a0, a1)) {}

        RecyclingByteBlockAllocator::RecyclingByteBlockAllocator(jint a0, jint a1, const ::org::apache::lucene::util::Counter & a2) : ::org::apache::lucene::util::ByteBlockPool$Allocator(env->newObject(initializeClass, &mids$, mid_init$_bdd89aab, a0, a1, a2.this$)) {}

        jlong RecyclingByteBlockAllocator::bytesUsed() const
        {
          return env->callLongMethod(this$, mids$[mid_bytesUsed_54c6a17a]);
        }

        jint RecyclingByteBlockAllocator::freeBlocks(jint a0) const
        {
          return env->callIntMethod(this$, mids$[mid_freeBlocks_39c7bd23], a0);
        }

        JArray< jbyte > RecyclingByteBlockAllocator::getByteBlock() const
        {
          return JArray< jbyte >(env->callObjectMethod(this$, mids$[mid_getByteBlock_dab10e7e]));
        }

        jint RecyclingByteBlockAllocator::maxBufferedBlocks() const
        {
          return env->callIntMethod(this$, mids$[mid_maxBufferedBlocks_54c6a179]);
        }

        jint RecyclingByteBlockAllocator::numBufferedBlocks() const
        {
          return env->callIntMethod(this$, mids$[mid_numBufferedBlocks_54c6a179]);
        }

        void RecyclingByteBlockAllocator::recycleByteBlocks(const JArray< JArray< jbyte > > & a0, jint a1, jint a2) const
        {
          env->callVoidMethod(this$, mids$[mid_recycleByteBlocks_d3ffa89f], a0.this$, a1, a2);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_RecyclingByteBlockAllocator_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_RecyclingByteBlockAllocator_instance_(PyTypeObject *type, PyObject *arg);
        static int t_RecyclingByteBlockAllocator_init_(t_RecyclingByteBlockAllocator *self, PyObject *args, PyObject *kwds);
        static PyObject *t_RecyclingByteBlockAllocator_bytesUsed(t_RecyclingByteBlockAllocator *self);
        static PyObject *t_RecyclingByteBlockAllocator_freeBlocks(t_RecyclingByteBlockAllocator *self, PyObject *arg);
        static PyObject *t_RecyclingByteBlockAllocator_getByteBlock(t_RecyclingByteBlockAllocator *self, PyObject *args);
        static PyObject *t_RecyclingByteBlockAllocator_maxBufferedBlocks(t_RecyclingByteBlockAllocator *self);
        static PyObject *t_RecyclingByteBlockAllocator_numBufferedBlocks(t_RecyclingByteBlockAllocator *self);
        static PyObject *t_RecyclingByteBlockAllocator_recycleByteBlocks(t_RecyclingByteBlockAllocator *self, PyObject *args);
        static PyObject *t_RecyclingByteBlockAllocator_get__byteBlock(t_RecyclingByteBlockAllocator *self, void *data);
        static PyGetSetDef t_RecyclingByteBlockAllocator__fields_[] = {
          DECLARE_GET_FIELD(t_RecyclingByteBlockAllocator, byteBlock),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_RecyclingByteBlockAllocator__methods_[] = {
          DECLARE_METHOD(t_RecyclingByteBlockAllocator, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_RecyclingByteBlockAllocator, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_RecyclingByteBlockAllocator, bytesUsed, METH_NOARGS),
          DECLARE_METHOD(t_RecyclingByteBlockAllocator, freeBlocks, METH_O),
          DECLARE_METHOD(t_RecyclingByteBlockAllocator, getByteBlock, METH_VARARGS),
          DECLARE_METHOD(t_RecyclingByteBlockAllocator, maxBufferedBlocks, METH_NOARGS),
          DECLARE_METHOD(t_RecyclingByteBlockAllocator, numBufferedBlocks, METH_NOARGS),
          DECLARE_METHOD(t_RecyclingByteBlockAllocator, recycleByteBlocks, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(RecyclingByteBlockAllocator, t_RecyclingByteBlockAllocator, ::org::apache::lucene::util::ByteBlockPool$Allocator, RecyclingByteBlockAllocator, t_RecyclingByteBlockAllocator_init_, 0, 0, t_RecyclingByteBlockAllocator__fields_, 0, 0);

        void t_RecyclingByteBlockAllocator::install(PyObject *module)
        {
          installType(&PY_TYPE(RecyclingByteBlockAllocator), module, "RecyclingByteBlockAllocator", 0);
        }

        void t_RecyclingByteBlockAllocator::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(RecyclingByteBlockAllocator).tp_dict, "class_", make_descriptor(RecyclingByteBlockAllocator::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(RecyclingByteBlockAllocator).tp_dict, "wrapfn_", make_descriptor(t_RecyclingByteBlockAllocator::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(RecyclingByteBlockAllocator).tp_dict, "boxfn_", make_descriptor(boxObject));
          env->getClass(RecyclingByteBlockAllocator::initializeClass);
          PyDict_SetItemString(PY_TYPE(RecyclingByteBlockAllocator).tp_dict, "DEFAULT_BUFFERED_BLOCKS", make_descriptor(RecyclingByteBlockAllocator::DEFAULT_BUFFERED_BLOCKS));
        }

        static PyObject *t_RecyclingByteBlockAllocator_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, RecyclingByteBlockAllocator::initializeClass, 1)))
            return NULL;
          return t_RecyclingByteBlockAllocator::wrap_Object(RecyclingByteBlockAllocator(((t_RecyclingByteBlockAllocator *) arg)->object.this$));
        }
        static PyObject *t_RecyclingByteBlockAllocator_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, RecyclingByteBlockAllocator::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_RecyclingByteBlockAllocator_init_(t_RecyclingByteBlockAllocator *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 0:
            {
              RecyclingByteBlockAllocator object((jobject) NULL);

              INT_CALL(object = RecyclingByteBlockAllocator());
              self->object = object;
              break;
            }
            goto err;
           case 2:
            {
              jint a0;
              jint a1;
              RecyclingByteBlockAllocator object((jobject) NULL);

              if (!parseArgs(args, "II", &a0, &a1))
              {
                INT_CALL(object = RecyclingByteBlockAllocator(a0, a1));
                self->object = object;
                break;
              }
            }
            goto err;
           case 3:
            {
              jint a0;
              jint a1;
              ::org::apache::lucene::util::Counter a2((jobject) NULL);
              RecyclingByteBlockAllocator object((jobject) NULL);

              if (!parseArgs(args, "IIk", ::org::apache::lucene::util::Counter::initializeClass, &a0, &a1, &a2))
              {
                INT_CALL(object = RecyclingByteBlockAllocator(a0, a1, a2));
                self->object = object;
                break;
              }
            }
           default:
           err:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_RecyclingByteBlockAllocator_bytesUsed(t_RecyclingByteBlockAllocator *self)
        {
          jlong result;
          OBJ_CALL(result = self->object.bytesUsed());
          return PyLong_FromLongLong((PY_LONG_LONG) result);
        }

        static PyObject *t_RecyclingByteBlockAllocator_freeBlocks(t_RecyclingByteBlockAllocator *self, PyObject *arg)
        {
          jint a0;
          jint result;

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(result = self->object.freeBlocks(a0));
            return PyInt_FromLong((long) result);
          }

          PyErr_SetArgsError((PyObject *) self, "freeBlocks", arg);
          return NULL;
        }

        static PyObject *t_RecyclingByteBlockAllocator_getByteBlock(t_RecyclingByteBlockAllocator *self, PyObject *args)
        {
          JArray< jbyte > result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.getByteBlock());
            return result.wrap();
          }

          return callSuper(&PY_TYPE(RecyclingByteBlockAllocator), (PyObject *) self, "getByteBlock", args, 2);
        }

        static PyObject *t_RecyclingByteBlockAllocator_maxBufferedBlocks(t_RecyclingByteBlockAllocator *self)
        {
          jint result;
          OBJ_CALL(result = self->object.maxBufferedBlocks());
          return PyInt_FromLong((long) result);
        }

        static PyObject *t_RecyclingByteBlockAllocator_numBufferedBlocks(t_RecyclingByteBlockAllocator *self)
        {
          jint result;
          OBJ_CALL(result = self->object.numBufferedBlocks());
          return PyInt_FromLong((long) result);
        }

        static PyObject *t_RecyclingByteBlockAllocator_recycleByteBlocks(t_RecyclingByteBlockAllocator *self, PyObject *args)
        {
          JArray< JArray< jbyte > > a0((jobject) NULL);
          jint a1;
          jint a2;

          if (!parseArgs(args, "[[BII", &a0, &a1, &a2))
          {
            OBJ_CALL(self->object.recycleByteBlocks(a0, a1, a2));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(RecyclingByteBlockAllocator), (PyObject *) self, "recycleByteBlocks", args, 2);
        }

        static PyObject *t_RecyclingByteBlockAllocator_get__byteBlock(t_RecyclingByteBlockAllocator *self, void *data)
        {
          JArray< jbyte > value((jobject) NULL);
          OBJ_CALL(value = self->object.getByteBlock());
          return value.wrap();
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queries/CustomScoreQuery.h"
#include "java/lang/Class.h"
#include "java/lang/Object.h"
#include "org/apache/lucene/search/Weight.h"
#include "java/io/IOException.h"
#include "java/lang/String.h"
#include "org/apache/lucene/queries/function/FunctionQuery.h"
#include "org/apache/lucene/search/IndexSearcher.h"
#include "java/util/Set.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "org/apache/lucene/index/Term.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {

        ::java::lang::Class *CustomScoreQuery::class$ = NULL;
        jmethodID *CustomScoreQuery::mids$ = NULL;
        bool CustomScoreQuery::live$ = false;

        jclass CustomScoreQuery::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/queries/CustomScoreQuery");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_6e301113] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/Query;)V");
            mids$[mid_init$_bf3fc62f] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/Query;[Lorg/apache/lucene/queries/function/FunctionQuery;)V");
            mids$[mid_init$_02f9eae9] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/Query;Lorg/apache/lucene/queries/function/FunctionQuery;)V");
            mids$[mid_clone_c1341b71] = env->getMethodID(cls, "clone", "()Lorg/apache/lucene/queries/CustomScoreQuery;");
            mids$[mid_createWeight_367763cb] = env->getMethodID(cls, "createWeight", "(Lorg/apache/lucene/search/IndexSearcher;)Lorg/apache/lucene/search/Weight;");
            mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
            mids$[mid_extractTerms_fb4f2b26] = env->getMethodID(cls, "extractTerms", "(Ljava/util/Set;)V");
            mids$[mid_getScoringQueries_e66abcfa] = env->getMethodID(cls, "getScoringQueries", "()[Lorg/apache/lucene/search/Query;");
            mids$[mid_getSubQuery_97e3851a] = env->getMethodID(cls, "getSubQuery", "()Lorg/apache/lucene/search/Query;");
            mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
            mids$[mid_isStrict_54c6a16a] = env->getMethodID(cls, "isStrict", "()Z");
            mids$[mid_name_14c7b5c5] = env->getMethodID(cls, "name", "()Ljava/lang/String;");
            mids$[mid_rewrite_7edcaa43] = env->getMethodID(cls, "rewrite", "(Lorg/apache/lucene/index/IndexReader;)Lorg/apache/lucene/search/Query;");
            mids$[mid_setStrict_bb0c767f] = env->getMethodID(cls, "setStrict", "(Z)V");
            mids$[mid_toString_97a5258f] = env->getMethodID(cls, "toString", "(Ljava/lang/String;)Ljava/lang/String;");
            mids$[mid_getCustomScoreProvider_a7245052] = env->getMethodID(cls, "getCustomScoreProvider", "(Lorg/apache/lucene/index/AtomicReaderContext;)Lorg/apache/lucene/queries/CustomScoreProvider;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        CustomScoreQuery::CustomScoreQuery(const ::org::apache::lucene::search::Query & a0) : ::org::apache::lucene::search::Query(env->newObject(initializeClass, &mids$, mid_init$_6e301113, a0.this$)) {}

        CustomScoreQuery::CustomScoreQuery(const ::org::apache::lucene::search::Query & a0, const JArray< ::org::apache::lucene::queries::function::FunctionQuery > & a1) : ::org::apache::lucene::search::Query(env->newObject(initializeClass, &mids$, mid_init$_bf3fc62f, a0.this$, a1.this$)) {}

        CustomScoreQuery::CustomScoreQuery(const ::org::apache::lucene::search::Query & a0, const ::org::apache::lucene::queries::function::FunctionQuery & a1) : ::org::apache::lucene::search::Query(env->newObject(initializeClass, &mids$, mid_init$_02f9eae9, a0.this$, a1.this$)) {}

        CustomScoreQuery CustomScoreQuery::clone() const
        {
          return CustomScoreQuery(env->callObjectMethod(this$, mids$[mid_clone_c1341b71]));
        }

        ::org::apache::lucene::search::Weight CustomScoreQuery::createWeight(const ::org::apache::lucene::search::IndexSearcher & a0) const
        {
          return ::org::apache::lucene::search::Weight(env->callObjectMethod(this$, mids$[mid_createWeight_367763cb], a0.this$));
        }

        jboolean CustomScoreQuery::equals(const ::java::lang::Object & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
        }

        void CustomScoreQuery::extractTerms(const ::java::util::Set & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_extractTerms_fb4f2b26], a0.this$);
        }

        JArray< ::org::apache::lucene::search::Query > CustomScoreQuery::getScoringQueries() const
        {
          return JArray< ::org::apache::lucene::search::Query >(env->callObjectMethod(this$, mids$[mid_getScoringQueries_e66abcfa]));
        }

        ::org::apache::lucene::search::Query CustomScoreQuery::getSubQuery() const
        {
          return ::org::apache::lucene::search::Query(env->callObjectMethod(this$, mids$[mid_getSubQuery_97e3851a]));
        }

        jint CustomScoreQuery::hashCode() const
        {
          return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
        }

        jboolean CustomScoreQuery::isStrict() const
        {
          return env->callBooleanMethod(this$, mids$[mid_isStrict_54c6a16a]);
        }

        ::java::lang::String CustomScoreQuery::name() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_name_14c7b5c5]));
        }

        ::org::apache::lucene::search::Query CustomScoreQuery::rewrite(const ::org::apache::lucene::index::IndexReader & a0) const
        {
          return ::org::apache::lucene::search::Query(env->callObjectMethod(this$, mids$[mid_rewrite_7edcaa43], a0.this$));
        }

        void CustomScoreQuery::setStrict(jboolean a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setStrict_bb0c767f], a0);
        }

        ::java::lang::String CustomScoreQuery::toString(const ::java::lang::String & a0) const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_97a5258f], a0.this$));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        static PyObject *t_CustomScoreQuery_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_CustomScoreQuery_instance_(PyTypeObject *type, PyObject *arg);
        static int t_CustomScoreQuery_init_(t_CustomScoreQuery *self, PyObject *args, PyObject *kwds);
        static PyObject *t_CustomScoreQuery_clone(t_CustomScoreQuery *self, PyObject *args);
        static PyObject *t_CustomScoreQuery_createWeight(t_CustomScoreQuery *self, PyObject *args);
        static PyObject *t_CustomScoreQuery_equals(t_CustomScoreQuery *self, PyObject *args);
        static PyObject *t_CustomScoreQuery_extractTerms(t_CustomScoreQuery *self, PyObject *args);
        static PyObject *t_CustomScoreQuery_getScoringQueries(t_CustomScoreQuery *self);
        static PyObject *t_CustomScoreQuery_getSubQuery(t_CustomScoreQuery *self);
        static PyObject *t_CustomScoreQuery_hashCode(t_CustomScoreQuery *self, PyObject *args);
        static PyObject *t_CustomScoreQuery_isStrict(t_CustomScoreQuery *self);
        static PyObject *t_CustomScoreQuery_name(t_CustomScoreQuery *self);
        static PyObject *t_CustomScoreQuery_rewrite(t_CustomScoreQuery *self, PyObject *args);
        static PyObject *t_CustomScoreQuery_setStrict(t_CustomScoreQuery *self, PyObject *arg);
        static PyObject *t_CustomScoreQuery_toString(t_CustomScoreQuery *self, PyObject *args);
        static PyObject *t_CustomScoreQuery_get__scoringQueries(t_CustomScoreQuery *self, void *data);
        static PyObject *t_CustomScoreQuery_get__strict(t_CustomScoreQuery *self, void *data);
        static int t_CustomScoreQuery_set__strict(t_CustomScoreQuery *self, PyObject *arg, void *data);
        static PyObject *t_CustomScoreQuery_get__subQuery(t_CustomScoreQuery *self, void *data);
        static PyGetSetDef t_CustomScoreQuery__fields_[] = {
          DECLARE_GET_FIELD(t_CustomScoreQuery, scoringQueries),
          DECLARE_GETSET_FIELD(t_CustomScoreQuery, strict),
          DECLARE_GET_FIELD(t_CustomScoreQuery, subQuery),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_CustomScoreQuery__methods_[] = {
          DECLARE_METHOD(t_CustomScoreQuery, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_CustomScoreQuery, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_CustomScoreQuery, clone, METH_VARARGS),
          DECLARE_METHOD(t_CustomScoreQuery, createWeight, METH_VARARGS),
          DECLARE_METHOD(t_CustomScoreQuery, equals, METH_VARARGS),
          DECLARE_METHOD(t_CustomScoreQuery, extractTerms, METH_VARARGS),
          DECLARE_METHOD(t_CustomScoreQuery, getScoringQueries, METH_NOARGS),
          DECLARE_METHOD(t_CustomScoreQuery, getSubQuery, METH_NOARGS),
          DECLARE_METHOD(t_CustomScoreQuery, hashCode, METH_VARARGS),
          DECLARE_METHOD(t_CustomScoreQuery, isStrict, METH_NOARGS),
          DECLARE_METHOD(t_CustomScoreQuery, name, METH_NOARGS),
          DECLARE_METHOD(t_CustomScoreQuery, rewrite, METH_VARARGS),
          DECLARE_METHOD(t_CustomScoreQuery, setStrict, METH_O),
          DECLARE_METHOD(t_CustomScoreQuery, toString, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(CustomScoreQuery, t_CustomScoreQuery, ::org::apache::lucene::search::Query, CustomScoreQuery, t_CustomScoreQuery_init_, 0, 0, t_CustomScoreQuery__fields_, 0, 0);

        void t_CustomScoreQuery::install(PyObject *module)
        {
          installType(&PY_TYPE(CustomScoreQuery), module, "CustomScoreQuery", 0);
        }

        void t_CustomScoreQuery::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(CustomScoreQuery).tp_dict, "class_", make_descriptor(CustomScoreQuery::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(CustomScoreQuery).tp_dict, "wrapfn_", make_descriptor(t_CustomScoreQuery::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(CustomScoreQuery).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_CustomScoreQuery_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, CustomScoreQuery::initializeClass, 1)))
            return NULL;
          return t_CustomScoreQuery::wrap_Object(CustomScoreQuery(((t_CustomScoreQuery *) arg)->object.this$));
        }
        static PyObject *t_CustomScoreQuery_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, CustomScoreQuery::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_CustomScoreQuery_init_(t_CustomScoreQuery *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              ::org::apache::lucene::search::Query a0((jobject) NULL);
              CustomScoreQuery object((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::search::Query::initializeClass, &a0))
              {
                INT_CALL(object = CustomScoreQuery(a0));
                self->object = object;
                break;
              }
            }
            goto err;
           case 2:
            {
              ::org::apache::lucene::search::Query a0((jobject) NULL);
              JArray< ::org::apache::lucene::queries::function::FunctionQuery > a1((jobject) NULL);
              CustomScoreQuery object((jobject) NULL);

              if (!parseArgs(args, "k[k", ::org::apache::lucene::search::Query::initializeClass, ::org::apache::lucene::queries::function::FunctionQuery::initializeClass, &a0, &a1))
              {
                INT_CALL(object = CustomScoreQuery(a0, a1));
                self->object = object;
                break;
              }
            }
            {
              ::org::apache::lucene::search::Query a0((jobject) NULL);
              ::org::apache::lucene::queries::function::FunctionQuery a1((jobject) NULL);
              CustomScoreQuery object((jobject) NULL);

              if (!parseArgs(args, "kk", ::org::apache::lucene::search::Query::initializeClass, ::org::apache::lucene::queries::function::FunctionQuery::initializeClass, &a0, &a1))
              {
                INT_CALL(object = CustomScoreQuery(a0, a1));
                self->object = object;
                break;
              }
            }
           default:
           err:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_CustomScoreQuery_clone(t_CustomScoreQuery *self, PyObject *args)
        {
          CustomScoreQuery result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.clone());
            return t_CustomScoreQuery::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(CustomScoreQuery), (PyObject *) self, "clone", args, 2);
        }

        static PyObject *t_CustomScoreQuery_createWeight(t_CustomScoreQuery *self, PyObject *args)
        {
          ::org::apache::lucene::search::IndexSearcher a0((jobject) NULL);
          ::org::apache::lucene::search::Weight result((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::search::IndexSearcher::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.createWeight(a0));
            return ::org::apache::lucene::search::t_Weight::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(CustomScoreQuery), (PyObject *) self, "createWeight", args, 2);
        }

        static PyObject *t_CustomScoreQuery_equals(t_CustomScoreQuery *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.equals(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(CustomScoreQuery), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_CustomScoreQuery_extractTerms(t_CustomScoreQuery *self, PyObject *args)
        {
          ::java::util::Set a0((jobject) NULL);
          PyTypeObject **p0;

          if (!parseArgs(args, "K", ::java::util::Set::initializeClass, &a0, &p0, ::java::util::t_Set::parameters_))
          {
            OBJ_CALL(self->object.extractTerms(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(CustomScoreQuery), (PyObject *) self, "extractTerms", args, 2);
        }

        static PyObject *t_CustomScoreQuery_getScoringQueries(t_CustomScoreQuery *self)
        {
          JArray< ::org::apache::lucene::search::Query > result((jobject) NULL);
          OBJ_CALL(result = self->object.getScoringQueries());
          return JArray<jobject>(result.this$).wrap(::org::apache::lucene::search::t_Query::wrap_jobject);
        }

        static PyObject *t_CustomScoreQuery_getSubQuery(t_CustomScoreQuery *self)
        {
          ::org::apache::lucene::search::Query result((jobject) NULL);
          OBJ_CALL(result = self->object.getSubQuery());
          return ::org::apache::lucene::search::t_Query::wrap_Object(result);
        }

        static PyObject *t_CustomScoreQuery_hashCode(t_CustomScoreQuery *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hashCode());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(CustomScoreQuery), (PyObject *) self, "hashCode", args, 2);
        }

        static PyObject *t_CustomScoreQuery_isStrict(t_CustomScoreQuery *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.isStrict());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_CustomScoreQuery_name(t_CustomScoreQuery *self)
        {
          ::java::lang::String result((jobject) NULL);
          OBJ_CALL(result = self->object.name());
          return j2p(result);
        }

        static PyObject *t_CustomScoreQuery_rewrite(t_CustomScoreQuery *self, PyObject *args)
        {
          ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
          ::org::apache::lucene::search::Query result((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::index::IndexReader::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.rewrite(a0));
            return ::org::apache::lucene::search::t_Query::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(CustomScoreQuery), (PyObject *) self, "rewrite", args, 2);
        }

        static PyObject *t_CustomScoreQuery_setStrict(t_CustomScoreQuery *self, PyObject *arg)
        {
          jboolean a0;

          if (!parseArg(arg, "Z", &a0))
          {
            OBJ_CALL(self->object.setStrict(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setStrict", arg);
          return NULL;
        }

        static PyObject *t_CustomScoreQuery_toString(t_CustomScoreQuery *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = self->object.toString(a0));
            return j2p(result);
          }

          return callSuper(&PY_TYPE(CustomScoreQuery), (PyObject *) self, "toString", args, 2);
        }

        static PyObject *t_CustomScoreQuery_get__scoringQueries(t_CustomScoreQuery *self, void *data)
        {
          JArray< ::org::apache::lucene::search::Query > value((jobject) NULL);
          OBJ_CALL(value = self->object.getScoringQueries());
          return JArray<jobject>(value.this$).wrap(::org::apache::lucene::search::t_Query::wrap_jobject);
        }

        static PyObject *t_CustomScoreQuery_get__strict(t_CustomScoreQuery *self, void *data)
        {
          jboolean value;
          OBJ_CALL(value = self->object.isStrict());
          Py_RETURN_BOOL(value);
        }
        static int t_CustomScoreQuery_set__strict(t_CustomScoreQuery *self, PyObject *arg, void *data)
        {
          {
            jboolean value;
            if (!parseArg(arg, "Z", &value))
            {
              INT_CALL(self->object.setStrict(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "strict", arg);
          return -1;
        }

        static PyObject *t_CustomScoreQuery_get__subQuery(t_CustomScoreQuery *self, void *data)
        {
          ::org::apache::lucene::search::Query value((jobject) NULL);
          OBJ_CALL(value = self->object.getSubQuery());
          return ::org::apache::lucene::search::t_Query::wrap_Object(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/FilterAtomicReader.h"
#include "org/apache/lucene/util/Bits.h"
#include "org/apache/lucene/index/SortedDocValues.h"
#include "org/apache/lucene/index/SortedNumericDocValues.h"
#include "java/lang/Class.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/index/FieldInfos.h"
#include "java/lang/String.h"
#include "org/apache/lucene/index/SortedSetDocValues.h"
#include "org/apache/lucene/index/Fields.h"
#include "org/apache/lucene/index/AtomicReader$CoreClosedListener.h"
#include "org/apache/lucene/index/NumericDocValues.h"
#include "org/apache/lucene/index/BinaryDocValues.h"
#include "org/apache/lucene/index/StoredFieldVisitor.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *FilterAtomicReader::class$ = NULL;
        jmethodID *FilterAtomicReader::mids$ = NULL;
        bool FilterAtomicReader::live$ = false;

        jclass FilterAtomicReader::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/FilterAtomicReader");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_c9e29579] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/AtomicReader;)V");
            mids$[mid_addCoreClosedListener_cbc2818f] = env->getMethodID(cls, "addCoreClosedListener", "(Lorg/apache/lucene/index/AtomicReader$CoreClosedListener;)V");
            mids$[mid_checkIntegrity_54c6a166] = env->getMethodID(cls, "checkIntegrity", "()V");
            mids$[mid_document_a2ea3ebe] = env->getMethodID(cls, "document", "(ILorg/apache/lucene/index/StoredFieldVisitor;)V");
            mids$[mid_fields_77db581d] = env->getMethodID(cls, "fields", "()Lorg/apache/lucene/index/Fields;");
            mids$[mid_getBinaryDocValues_ecab96be] = env->getMethodID(cls, "getBinaryDocValues", "(Ljava/lang/String;)Lorg/apache/lucene/index/BinaryDocValues;");
            mids$[mid_getDocsWithField_e1c6a7db] = env->getMethodID(cls, "getDocsWithField", "(Ljava/lang/String;)Lorg/apache/lucene/util/Bits;");
            mids$[mid_getFieldInfos_9ba20825] = env->getMethodID(cls, "getFieldInfos", "()Lorg/apache/lucene/index/FieldInfos;");
            mids$[mid_getLiveDocs_03c2457d] = env->getMethodID(cls, "getLiveDocs", "()Lorg/apache/lucene/util/Bits;");
            mids$[mid_getNormValues_d2b19f49] = env->getMethodID(cls, "getNormValues", "(Ljava/lang/String;)Lorg/apache/lucene/index/NumericDocValues;");
            mids$[mid_getNumericDocValues_d2b19f49] = env->getMethodID(cls, "getNumericDocValues", "(Ljava/lang/String;)Lorg/apache/lucene/index/NumericDocValues;");
            mids$[mid_getSortedDocValues_7b8b1a0a] = env->getMethodID(cls, "getSortedDocValues", "(Ljava/lang/String;)Lorg/apache/lucene/index/SortedDocValues;");
            mids$[mid_getSortedNumericDocValues_37cd1812] = env->getMethodID(cls, "getSortedNumericDocValues", "(Ljava/lang/String;)Lorg/apache/lucene/index/SortedNumericDocValues;");
            mids$[mid_getSortedSetDocValues_43e0e807] = env->getMethodID(cls, "getSortedSetDocValues", "(Ljava/lang/String;)Lorg/apache/lucene/index/SortedSetDocValues;");
            mids$[mid_getTermVectors_ef1c9c73] = env->getMethodID(cls, "getTermVectors", "(I)Lorg/apache/lucene/index/Fields;");
            mids$[mid_maxDoc_54c6a179] = env->getMethodID(cls, "maxDoc", "()I");
            mids$[mid_numDocs_54c6a179] = env->getMethodID(cls, "numDocs", "()I");
            mids$[mid_removeCoreClosedListener_cbc2818f] = env->getMethodID(cls, "removeCoreClosedListener", "(Lorg/apache/lucene/index/AtomicReader$CoreClosedListener;)V");
            mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");
            mids$[mid_unwrap_3b1ad795] = env->getStaticMethodID(cls, "unwrap", "(Lorg/apache/lucene/index/AtomicReader;)Lorg/apache/lucene/index/AtomicReader;");
            mids$[mid_doClose_54c6a166] = env->getMethodID(cls, "doClose", "()V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        FilterAtomicReader::FilterAtomicReader(const ::org::apache::lucene::index::AtomicReader & a0) : ::org::apache::lucene::index::AtomicReader(env->newObject(initializeClass, &mids$, mid_init$_c9e29579, a0.this$)) {}

        void FilterAtomicReader::addCoreClosedListener(const ::org::apache::lucene::index::AtomicReader$CoreClosedListener & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_addCoreClosedListener_cbc2818f], a0.this$);
        }

        void FilterAtomicReader::checkIntegrity() const
        {
          env->callVoidMethod(this$, mids$[mid_checkIntegrity_54c6a166]);
        }

        void FilterAtomicReader::document(jint a0, const ::org::apache::lucene::index::StoredFieldVisitor & a1) const
        {
          env->callVoidMethod(this$, mids$[mid_document_a2ea3ebe], a0, a1.this$);
        }

        ::org::apache::lucene::index::Fields FilterAtomicReader::fields() const
        {
          return ::org::apache::lucene::index::Fields(env->callObjectMethod(this$, mids$[mid_fields_77db581d]));
        }

        ::org::apache::lucene::index::BinaryDocValues FilterAtomicReader::getBinaryDocValues(const ::java::lang::String & a0) const
        {
          return ::org::apache::lucene::index::BinaryDocValues(env->callObjectMethod(this$, mids$[mid_getBinaryDocValues_ecab96be], a0.this$));
        }

        ::org::apache::lucene::util::Bits FilterAtomicReader::getDocsWithField(const ::java::lang::String & a0) const
        {
          return ::org::apache::lucene::util::Bits(env->callObjectMethod(this$, mids$[mid_getDocsWithField_e1c6a7db], a0.this$));
        }

        ::org::apache::lucene::index::FieldInfos FilterAtomicReader::getFieldInfos() const
        {
          return ::org::apache::lucene::index::FieldInfos(env->callObjectMethod(this$, mids$[mid_getFieldInfos_9ba20825]));
        }

        ::org::apache::lucene::util::Bits FilterAtomicReader::getLiveDocs() const
        {
          return ::org::apache::lucene::util::Bits(env->callObjectMethod(this$, mids$[mid_getLiveDocs_03c2457d]));
        }

        ::org::apache::lucene::index::NumericDocValues FilterAtomicReader::getNormValues(const ::java::lang::String & a0) const
        {
          return ::org::apache::lucene::index::NumericDocValues(env->callObjectMethod(this$, mids$[mid_getNormValues_d2b19f49], a0.this$));
        }

        ::org::apache::lucene::index::NumericDocValues FilterAtomicReader::getNumericDocValues(const ::java::lang::String & a0) const
        {
          return ::org::apache::lucene::index::NumericDocValues(env->callObjectMethod(this$, mids$[mid_getNumericDocValues_d2b19f49], a0.this$));
        }

        ::org::apache::lucene::index::SortedDocValues FilterAtomicReader::getSortedDocValues(const ::java::lang::String & a0) const
        {
          return ::org::apache::lucene::index::SortedDocValues(env->callObjectMethod(this$, mids$[mid_getSortedDocValues_7b8b1a0a], a0.this$));
        }

        ::org::apache::lucene::index::SortedNumericDocValues FilterAtomicReader::getSortedNumericDocValues(const ::java::lang::String & a0) const
        {
          return ::org::apache::lucene::index::SortedNumericDocValues(env->callObjectMethod(this$, mids$[mid_getSortedNumericDocValues_37cd1812], a0.this$));
        }

        ::org::apache::lucene::index::SortedSetDocValues FilterAtomicReader::getSortedSetDocValues(const ::java::lang::String & a0) const
        {
          return ::org::apache::lucene::index::SortedSetDocValues(env->callObjectMethod(this$, mids$[mid_getSortedSetDocValues_43e0e807], a0.this$));
        }

        ::org::apache::lucene::index::Fields FilterAtomicReader::getTermVectors(jint a0) const
        {
          return ::org::apache::lucene::index::Fields(env->callObjectMethod(this$, mids$[mid_getTermVectors_ef1c9c73], a0));
        }

        jint FilterAtomicReader::maxDoc() const
        {
          return env->callIntMethod(this$, mids$[mid_maxDoc_54c6a179]);
        }

        jint FilterAtomicReader::numDocs() const
        {
          return env->callIntMethod(this$, mids$[mid_numDocs_54c6a179]);
        }

        void FilterAtomicReader::removeCoreClosedListener(const ::org::apache::lucene::index::AtomicReader$CoreClosedListener & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_removeCoreClosedListener_cbc2818f], a0.this$);
        }

        ::java::lang::String FilterAtomicReader::toString() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
        }

        ::org::apache::lucene::index::AtomicReader FilterAtomicReader::unwrap(const ::org::apache::lucene::index::AtomicReader & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::index::AtomicReader(env->callStaticObjectMethod(cls, mids$[mid_unwrap_3b1ad795], a0.this$));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"
#include "org/apache/lucene/index/FilterAtomicReader$FilterDocsAndPositionsEnum.h"
#include "org/apache/lucene/index/FilterAtomicReader$FilterDocsEnum.h"
#include "org/apache/lucene/index/FilterAtomicReader$FilterTermsEnum.h"
#include "org/apache/lucene/index/FilterAtomicReader$FilterTerms.h"
#include "org/apache/lucene/index/FilterAtomicReader$FilterFields.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_FilterAtomicReader_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FilterAtomicReader_instance_(PyTypeObject *type, PyObject *arg);
        static int t_FilterAtomicReader_init_(t_FilterAtomicReader *self, PyObject *args, PyObject *kwds);
        static PyObject *t_FilterAtomicReader_addCoreClosedListener(t_FilterAtomicReader *self, PyObject *args);
        static PyObject *t_FilterAtomicReader_checkIntegrity(t_FilterAtomicReader *self, PyObject *args);
        static PyObject *t_FilterAtomicReader_document(t_FilterAtomicReader *self, PyObject *args);
        static PyObject *t_FilterAtomicReader_fields(t_FilterAtomicReader *self, PyObject *args);
        static PyObject *t_FilterAtomicReader_getBinaryDocValues(t_FilterAtomicReader *self, PyObject *args);
        static PyObject *t_FilterAtomicReader_getDocsWithField(t_FilterAtomicReader *self, PyObject *args);
        static PyObject *t_FilterAtomicReader_getFieldInfos(t_FilterAtomicReader *self, PyObject *args);
        static PyObject *t_FilterAtomicReader_getLiveDocs(t_FilterAtomicReader *self, PyObject *args);
        static PyObject *t_FilterAtomicReader_getNormValues(t_FilterAtomicReader *self, PyObject *args);
        static PyObject *t_FilterAtomicReader_getNumericDocValues(t_FilterAtomicReader *self, PyObject *args);
        static PyObject *t_FilterAtomicReader_getSortedDocValues(t_FilterAtomicReader *self, PyObject *args);
        static PyObject *t_FilterAtomicReader_getSortedNumericDocValues(t_FilterAtomicReader *self, PyObject *args);
        static PyObject *t_FilterAtomicReader_getSortedSetDocValues(t_FilterAtomicReader *self, PyObject *args);
        static PyObject *t_FilterAtomicReader_getTermVectors(t_FilterAtomicReader *self, PyObject *args);
        static PyObject *t_FilterAtomicReader_maxDoc(t_FilterAtomicReader *self, PyObject *args);
        static PyObject *t_FilterAtomicReader_numDocs(t_FilterAtomicReader *self, PyObject *args);
        static PyObject *t_FilterAtomicReader_removeCoreClosedListener(t_FilterAtomicReader *self, PyObject *args);
        static PyObject *t_FilterAtomicReader_toString(t_FilterAtomicReader *self, PyObject *args);
        static PyObject *t_FilterAtomicReader_unwrap(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FilterAtomicReader_get__fieldInfos(t_FilterAtomicReader *self, void *data);
        static PyObject *t_FilterAtomicReader_get__liveDocs(t_FilterAtomicReader *self, void *data);
        static PyGetSetDef t_FilterAtomicReader__fields_[] = {
          DECLARE_GET_FIELD(t_FilterAtomicReader, fieldInfos),
          DECLARE_GET_FIELD(t_FilterAtomicReader, liveDocs),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_FilterAtomicReader__methods_[] = {
          DECLARE_METHOD(t_FilterAtomicReader, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FilterAtomicReader, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FilterAtomicReader, addCoreClosedListener, METH_VARARGS),
          DECLARE_METHOD(t_FilterAtomicReader, checkIntegrity, METH_VARARGS),
          DECLARE_METHOD(t_FilterAtomicReader, document, METH_VARARGS),
          DECLARE_METHOD(t_FilterAtomicReader, fields, METH_VARARGS),
          DECLARE_METHOD(t_FilterAtomicReader, getBinaryDocValues, METH_VARARGS),
          DECLARE_METHOD(t_FilterAtomicReader, getDocsWithField, METH_VARARGS),
          DECLARE_METHOD(t_FilterAtomicReader, getFieldInfos, METH_VARARGS),
          DECLARE_METHOD(t_FilterAtomicReader, getLiveDocs, METH_VARARGS),
          DECLARE_METHOD(t_FilterAtomicReader, getNormValues, METH_VARARGS),
          DECLARE_METHOD(t_FilterAtomicReader, getNumericDocValues, METH_VARARGS),
          DECLARE_METHOD(t_FilterAtomicReader, getSortedDocValues, METH_VARARGS),
          DECLARE_METHOD(t_FilterAtomicReader, getSortedNumericDocValues, METH_VARARGS),
          DECLARE_METHOD(t_FilterAtomicReader, getSortedSetDocValues, METH_VARARGS),
          DECLARE_METHOD(t_FilterAtomicReader, getTermVectors, METH_VARARGS),
          DECLARE_METHOD(t_FilterAtomicReader, maxDoc, METH_VARARGS),
          DECLARE_METHOD(t_FilterAtomicReader, numDocs, METH_VARARGS),
          DECLARE_METHOD(t_FilterAtomicReader, removeCoreClosedListener, METH_VARARGS),
          DECLARE_METHOD(t_FilterAtomicReader, toString, METH_VARARGS),
          DECLARE_METHOD(t_FilterAtomicReader, unwrap, METH_O | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(FilterAtomicReader, t_FilterAtomicReader, ::org::apache::lucene::index::AtomicReader, FilterAtomicReader, t_FilterAtomicReader_init_, 0, 0, t_FilterAtomicReader__fields_, 0, 0);

        void t_FilterAtomicReader::install(PyObject *module)
        {
          installType(&PY_TYPE(FilterAtomicReader), module, "FilterAtomicReader", 0);
          PyDict_SetItemString(PY_TYPE(FilterAtomicReader).tp_dict, "FilterDocsAndPositionsEnum", make_descriptor(&PY_TYPE(FilterAtomicReader$FilterDocsAndPositionsEnum)));
          PyDict_SetItemString(PY_TYPE(FilterAtomicReader).tp_dict, "FilterDocsEnum", make_descriptor(&PY_TYPE(FilterAtomicReader$FilterDocsEnum)));
          PyDict_SetItemString(PY_TYPE(FilterAtomicReader).tp_dict, "FilterTermsEnum", make_descriptor(&PY_TYPE(FilterAtomicReader$FilterTermsEnum)));
          PyDict_SetItemString(PY_TYPE(FilterAtomicReader).tp_dict, "FilterTerms", make_descriptor(&PY_TYPE(FilterAtomicReader$FilterTerms)));
          PyDict_SetItemString(PY_TYPE(FilterAtomicReader).tp_dict, "FilterFields", make_descriptor(&PY_TYPE(FilterAtomicReader$FilterFields)));
        }

        void t_FilterAtomicReader::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(FilterAtomicReader).tp_dict, "class_", make_descriptor(FilterAtomicReader::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(FilterAtomicReader).tp_dict, "wrapfn_", make_descriptor(t_FilterAtomicReader::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(FilterAtomicReader).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_FilterAtomicReader_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, FilterAtomicReader::initializeClass, 1)))
            return NULL;
          return t_FilterAtomicReader::wrap_Object(FilterAtomicReader(((t_FilterAtomicReader *) arg)->object.this$));
        }
        static PyObject *t_FilterAtomicReader_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, FilterAtomicReader::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_FilterAtomicReader_init_(t_FilterAtomicReader *self, PyObject *args, PyObject *kwds)
        {
          ::org::apache::lucene::index::AtomicReader a0((jobject) NULL);
          FilterAtomicReader object((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::index::AtomicReader::initializeClass, &a0))
          {
            INT_CALL(object = FilterAtomicReader(a0));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_FilterAtomicReader_addCoreClosedListener(t_FilterAtomicReader *self, PyObject *args)
        {
          ::org::apache::lucene::index::AtomicReader$CoreClosedListener a0((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::index::AtomicReader$CoreClosedListener::initializeClass, &a0))
          {
            OBJ_CALL(self->object.addCoreClosedListener(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(FilterAtomicReader), (PyObject *) self, "addCoreClosedListener", args, 2);
        }

        static PyObject *t_FilterAtomicReader_checkIntegrity(t_FilterAtomicReader *self, PyObject *args)
        {

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(self->object.checkIntegrity());
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(FilterAtomicReader), (PyObject *) self, "checkIntegrity", args, 2);
        }

        static PyObject *t_FilterAtomicReader_document(t_FilterAtomicReader *self, PyObject *args)
        {
          jint a0;
          ::org::apache::lucene::index::StoredFieldVisitor a1((jobject) NULL);

          if (!parseArgs(args, "Ik", ::org::apache::lucene::index::StoredFieldVisitor::initializeClass, &a0, &a1))
          {
            OBJ_CALL(self->object.document(a0, a1));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(FilterAtomicReader), (PyObject *) self, "document", args, 2);
        }

        static PyObject *t_FilterAtomicReader_fields(t_FilterAtomicReader *self, PyObject *args)
        {
          ::org::apache::lucene::index::Fields result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.fields());
            return ::org::apache::lucene::index::t_Fields::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(FilterAtomicReader), (PyObject *) self, "fields", args, 2);
        }

        static PyObject *t_FilterAtomicReader_getBinaryDocValues(t_FilterAtomicReader *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::index::BinaryDocValues result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = self->object.getBinaryDocValues(a0));
            return ::org::apache::lucene::index::t_BinaryDocValues::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(FilterAtomicReader), (PyObject *) self, "getBinaryDocValues", args, 2);
        }

        static PyObject *t_FilterAtomicReader_getDocsWithField(t_FilterAtomicReader *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::util::Bits result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = self->object.getDocsWithField(a0));
            return ::org::apache::lucene::util::t_Bits::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(FilterAtomicReader), (PyObject *) self, "getDocsWithField", args, 2);
        }

        static PyObject *t_FilterAtomicReader_getFieldInfos(t_FilterAtomicReader *self, PyObject *args)
        {
          ::org::apache::lucene::index::FieldInfos result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.getFieldInfos());
            return ::org::apache::lucene::index::t_FieldInfos::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(FilterAtomicReader), (PyObject *) self, "getFieldInfos", args, 2);
        }

        static PyObject *t_FilterAtomicReader_getLiveDocs(t_FilterAtomicReader *self, PyObject *args)
        {
          ::org::apache::lucene::util::Bits result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.getLiveDocs());
            return ::org::apache::lucene::util::t_Bits::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(FilterAtomicReader), (PyObject *) self, "getLiveDocs", args, 2);
        }

        static PyObject *t_FilterAtomicReader_getNormValues(t_FilterAtomicReader *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::index::NumericDocValues result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = self->object.getNormValues(a0));
            return ::org::apache::lucene::index::t_NumericDocValues::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(FilterAtomicReader), (PyObject *) self, "getNormValues", args, 2);
        }

        static PyObject *t_FilterAtomicReader_getNumericDocValues(t_FilterAtomicReader *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::index::NumericDocValues result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = self->object.getNumericDocValues(a0));
            return ::org::apache::lucene::index::t_NumericDocValues::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(FilterAtomicReader), (PyObject *) self, "getNumericDocValues", args, 2);
        }

        static PyObject *t_FilterAtomicReader_getSortedDocValues(t_FilterAtomicReader *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::index::SortedDocValues result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = self->object.getSortedDocValues(a0));
            return ::org::apache::lucene::index::t_SortedDocValues::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(FilterAtomicReader), (PyObject *) self, "getSortedDocValues", args, 2);
        }

        static PyObject *t_FilterAtomicReader_getSortedNumericDocValues(t_FilterAtomicReader *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::index::SortedNumericDocValues result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = self->object.getSortedNumericDocValues(a0));
            return ::org::apache::lucene::index::t_SortedNumericDocValues::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(FilterAtomicReader), (PyObject *) self, "getSortedNumericDocValues", args, 2);
        }

        static PyObject *t_FilterAtomicReader_getSortedSetDocValues(t_FilterAtomicReader *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::index::SortedSetDocValues result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = self->object.getSortedSetDocValues(a0));
            return ::org::apache::lucene::index::t_SortedSetDocValues::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(FilterAtomicReader), (PyObject *) self, "getSortedSetDocValues", args, 2);
        }

        static PyObject *t_FilterAtomicReader_getTermVectors(t_FilterAtomicReader *self, PyObject *args)
        {
          jint a0;
          ::org::apache::lucene::index::Fields result((jobject) NULL);

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(result = self->object.getTermVectors(a0));
            return ::org::apache::lucene::index::t_Fields::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(FilterAtomicReader), (PyObject *) self, "getTermVectors", args, 2);
        }

        static PyObject *t_FilterAtomicReader_maxDoc(t_FilterAtomicReader *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.maxDoc());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(FilterAtomicReader), (PyObject *) self, "maxDoc", args, 2);
        }

        static PyObject *t_FilterAtomicReader_numDocs(t_FilterAtomicReader *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.numDocs());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(FilterAtomicReader), (PyObject *) self, "numDocs", args, 2);
        }

        static PyObject *t_FilterAtomicReader_removeCoreClosedListener(t_FilterAtomicReader *self, PyObject *args)
        {
          ::org::apache::lucene::index::AtomicReader$CoreClosedListener a0((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::index::AtomicReader$CoreClosedListener::initializeClass, &a0))
          {
            OBJ_CALL(self->object.removeCoreClosedListener(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(FilterAtomicReader), (PyObject *) self, "removeCoreClosedListener", args, 2);
        }

        static PyObject *t_FilterAtomicReader_toString(t_FilterAtomicReader *self, PyObject *args)
        {
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.toString());
            return j2p(result);
          }

          return callSuper(&PY_TYPE(FilterAtomicReader), (PyObject *) self, "toString", args, 2);
        }

        static PyObject *t_FilterAtomicReader_unwrap(PyTypeObject *type, PyObject *arg)
        {
          ::org::apache::lucene::index::AtomicReader a0((jobject) NULL);
          ::org::apache::lucene::index::AtomicReader result((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::index::AtomicReader::initializeClass, &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::index::FilterAtomicReader::unwrap(a0));
            return ::org::apache::lucene::index::t_AtomicReader::wrap_Object(result);
          }

          PyErr_SetArgsError(type, "unwrap", arg);
          return NULL;
        }

        static PyObject *t_FilterAtomicReader_get__fieldInfos(t_FilterAtomicReader *self, void *data)
        {
          ::org::apache::lucene::index::FieldInfos value((jobject) NULL);
          OBJ_CALL(value = self->object.getFieldInfos());
          return ::org::apache::lucene::index::t_FieldInfos::wrap_Object(value);
        }

        static PyObject *t_FilterAtomicReader_get__liveDocs(t_FilterAtomicReader *self, void *data)
        {
          ::org::apache::lucene::util::Bits value((jobject) NULL);
          OBJ_CALL(value = self->object.getLiveDocs());
          return ::org::apache::lucene::util::t_Bits::wrap_Object(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/miscellaneous/CapitalizationFilter.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "org/apache/lucene/analysis/util/CharArraySet.h"
#include "java/io/IOException.h"
#include "java/util/Collection.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {

          ::java::lang::Class *CapitalizationFilter::class$ = NULL;
          jmethodID *CapitalizationFilter::mids$ = NULL;
          bool CapitalizationFilter::live$ = false;
          jint CapitalizationFilter::DEFAULT_MAX_TOKEN_LENGTH = (jint) 0;
          jint CapitalizationFilter::DEFAULT_MAX_WORD_COUNT = (jint) 0;

          jclass CapitalizationFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/miscellaneous/CapitalizationFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_c7c794dc] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;)V");
              mids$[mid_init$_e833f6a2] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;ZLorg/apache/lucene/analysis/util/CharArraySet;ZLjava/util/Collection;III)V");
              mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              DEFAULT_MAX_TOKEN_LENGTH = env->getStaticIntField(cls, "DEFAULT_MAX_TOKEN_LENGTH");
              DEFAULT_MAX_WORD_COUNT = env->getStaticIntField(cls, "DEFAULT_MAX_WORD_COUNT");
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          CapitalizationFilter::CapitalizationFilter(const ::org::apache::lucene::analysis::TokenStream & a0) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_c7c794dc, a0.this$)) {}

          CapitalizationFilter::CapitalizationFilter(const ::org::apache::lucene::analysis::TokenStream & a0, jboolean a1, const ::org::apache::lucene::analysis::util::CharArraySet & a2, jboolean a3, const ::java::util::Collection & a4, jint a5, jint a6, jint a7) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_e833f6a2, a0.this$, a1, a2.this$, a3, a4.this$, a5, a6, a7)) {}

          jboolean CapitalizationFilter::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_54c6a16a]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {
          static PyObject *t_CapitalizationFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_CapitalizationFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_CapitalizationFilter_init_(t_CapitalizationFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_CapitalizationFilter_incrementToken(t_CapitalizationFilter *self, PyObject *args);

          static PyMethodDef t_CapitalizationFilter__methods_[] = {
            DECLARE_METHOD(t_CapitalizationFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CapitalizationFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CapitalizationFilter, incrementToken, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(CapitalizationFilter, t_CapitalizationFilter, ::org::apache::lucene::analysis::TokenFilter, CapitalizationFilter, t_CapitalizationFilter_init_, 0, 0, 0, 0, 0);

          void t_CapitalizationFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(CapitalizationFilter), module, "CapitalizationFilter", 0);
          }

          void t_CapitalizationFilter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(CapitalizationFilter).tp_dict, "class_", make_descriptor(CapitalizationFilter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(CapitalizationFilter).tp_dict, "wrapfn_", make_descriptor(t_CapitalizationFilter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(CapitalizationFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(CapitalizationFilter::initializeClass);
            PyDict_SetItemString(PY_TYPE(CapitalizationFilter).tp_dict, "DEFAULT_MAX_TOKEN_LENGTH", make_descriptor(CapitalizationFilter::DEFAULT_MAX_TOKEN_LENGTH));
            PyDict_SetItemString(PY_TYPE(CapitalizationFilter).tp_dict, "DEFAULT_MAX_WORD_COUNT", make_descriptor(CapitalizationFilter::DEFAULT_MAX_WORD_COUNT));
          }

          static PyObject *t_CapitalizationFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, CapitalizationFilter::initializeClass, 1)))
              return NULL;
            return t_CapitalizationFilter::wrap_Object(CapitalizationFilter(((t_CapitalizationFilter *) arg)->object.this$));
          }
          static PyObject *t_CapitalizationFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, CapitalizationFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_CapitalizationFilter_init_(t_CapitalizationFilter *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
                CapitalizationFilter object((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
                {
                  INT_CALL(object = CapitalizationFilter(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 8:
              {
                ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
                jboolean a1;
                ::org::apache::lucene::analysis::util::CharArraySet a2((jobject) NULL);
                PyTypeObject **p2;
                jboolean a3;
                ::java::util::Collection a4((jobject) NULL);
                PyTypeObject **p4;
                jint a5;
                jint a6;
                jint a7;
                CapitalizationFilter object((jobject) NULL);

                if (!parseArgs(args, "kZKZKIII", ::org::apache::lucene::analysis::TokenStream::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, ::java::util::Collection::initializeClass, &a0, &a1, &a2, &p2, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_, &a3, &a4, &p4, ::java::util::t_Collection::parameters_, &a5, &a6, &a7))
                {
                  INT_CALL(object = CapitalizationFilter(a0, a1, a2, a3, a4, a5, a6, a7));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_CapitalizationFilter_incrementToken(t_CapitalizationFilter *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(CapitalizationFilter), (PyObject *) self, "incrementToken", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "java/util/Collections.h"
#include "java/util/SortedSet.h"
#include "java/util/NavigableMap.h"
#include "java/util/Deque.h"
#include "java/util/Queue.h"
#include "java/lang/Comparable.h"
#include "java/lang/Class.h"
#include "java/util/NavigableSet.h"
#include "java/util/ArrayList.h"
#include "java/util/Map.h"
#include "java/util/Comparator.h"
#include "java/util/Random.h"
#include "java/util/SortedMap.h"
#include "java/util/Enumeration.h"
#include "java/util/Iterator.h"
#include "java/util/Collection.h"
#include "java/util/Set.h"
#include "java/util/ListIterator.h"
#include "java/lang/Boolean.h"
#include "java/util/List.h"
#include "JArray.h"

namespace java {
  namespace util {

    ::java::lang::Class *Collections::class$ = NULL;
    jmethodID *Collections::mids$ = NULL;
    bool Collections::live$ = false;
    ::java::util::List *Collections::EMPTY_LIST = NULL;
    ::java::util::Map *Collections::EMPTY_MAP = NULL;
    ::java::util::Set *Collections::EMPTY_SET = NULL;

    jclass Collections::initializeClass(bool getOnly)
    {
      if (getOnly)
        return (jclass) (live$ ? class$->this$ : NULL);
      if (class$ == NULL)
      {
        jclass cls = (jclass) env->findClass("java/util/Collections");

        mids$ = new jmethodID[max_mid];
        mids$[mid_addAll_7d28570f] = env->getStaticMethodID(cls, "addAll", "(Ljava/util/Collection;[Ljava/lang/Object;)Z");
        mids$[mid_asLifoQueue_69ff1ef4] = env->getStaticMethodID(cls, "asLifoQueue", "(Ljava/util/Deque;)Ljava/util/Queue;");
        mids$[mid_binarySearch_632fb920] = env->getStaticMethodID(cls, "binarySearch", "(Ljava/util/List;Ljava/lang/Object;)I");
        mids$[mid_binarySearch_b1262297] = env->getStaticMethodID(cls, "binarySearch", "(Ljava/util/List;Ljava/lang/Object;Ljava/util/Comparator;)I");
        mids$[mid_checkedCollection_cdb515a1] = env->getStaticMethodID(cls, "checkedCollection", "(Ljava/util/Collection;Ljava/lang/Class;)Ljava/util/Collection;");
        mids$[mid_checkedList_8575df61] = env->getStaticMethodID(cls, "checkedList", "(Ljava/util/List;Ljava/lang/Class;)Ljava/util/List;");
        mids$[mid_checkedMap_92913187] = env->getStaticMethodID(cls, "checkedMap", "(Ljava/util/Map;Ljava/lang/Class;Ljava/lang/Class;)Ljava/util/Map;");
        mids$[mid_checkedNavigableMap_f52dc087] = env->getStaticMethodID(cls, "checkedNavigableMap", "(Ljava/util/NavigableMap;Ljava/lang/Class;Ljava/lang/Class;)Ljava/util/NavigableMap;");
        mids$[mid_checkedNavigableSet_d66e5e45] = env->getStaticMethodID(cls, "checkedNavigableSet", "(Ljava/util/NavigableSet;Ljava/lang/Class;)Ljava/util/NavigableSet;");
        mids$[mid_checkedQueue_1b729da3] = env->getStaticMethodID(cls, "checkedQueue", "(Ljava/util/Queue;Ljava/lang/Class;)Ljava/util/Queue;");
        mids$[mid_checkedSet_0862698d] = env->getStaticMethodID(cls, "checkedSet", "(Ljava/util/Set;Ljava/lang/Class;)Ljava/util/Set;");
        mids$[mid_checkedSortedMap_5e4bff0f] = env->getStaticMethodID(cls, "checkedSortedMap", "(Ljava/util/SortedMap;Ljava/lang/Class;Ljava/lang/Class;)Ljava/util/SortedMap;");
        mids$[mid_checkedSortedSet_342d53e3] = env->getStaticMethodID(cls, "checkedSortedSet", "(Ljava/util/SortedSet;Ljava/lang/Class;)Ljava/util/SortedSet;");
        mids$[mid_copy_cbe63a12] = env->getStaticMethodID(cls, "copy", "(Ljava/util/List;Ljava/util/List;)V");
        mids$[mid_disjoint_05108b4e] = env->getStaticMethodID(cls, "disjoint", "(Ljava/util/Collection;Ljava/util/Collection;)Z");
        mids$[mid_emptyEnumeration_39f88070] = env->getStaticMethodID(cls, "emptyEnumeration", "()Ljava/util/Enumeration;");
        mids$[mid_emptyIterator_40858c90] = env->getStaticMethodID(cls, "emptyIterator", "()Ljava/util/Iterator;");
        mids$[mid_emptyList_87851566] = env->getStaticMethodID(cls, "emptyList", "()Ljava/util/List;");
        mids$[mid_emptyListIterator_b5be4e14] = env->getStaticMethodID(cls, "emptyListIterator", "()Ljava/util/ListIterator;");
        mids$[mid_emptyMap_db60befd] = env->getStaticMethodID(cls, "emptyMap", "()Ljava/util/Map;");
        mids$[mid_emptyNavigableMap_6ede266b] = env->getStaticMethodID(cls, "emptyNavigableMap", "()Ljava/util/NavigableMap;");
        mids$[mid_emptyNavigableSet_1d81e42d] = env->getStaticMethodID(cls, "emptyNavigableSet", "()Ljava/util/NavigableSet;");
        mids$[mid_emptySet_03e99967] = env->getStaticMethodID(cls, "emptySet", "()Ljava/util/Set;");
        mids$[mid_emptySortedMap_ffaadd34] = env->getStaticMethodID(cls, "emptySortedMap", "()Ljava/util/SortedMap;");
        mids$[mid_emptySortedSet_b86b014a] = env->getStaticMethodID(cls, "emptySortedSet", "()Ljava/util/SortedSet;");
        mids$[mid_enumeration_8f4c58e7] = env->getStaticMethodID(cls, "enumeration", "(Ljava/util/Collection;)Ljava/util/Enumeration;");
        mids$[mid_fill_632fb93f] = env->getStaticMethodID(cls, "fill", "(Ljava/util/List;Ljava/lang/Object;)V");
        mids$[mid_frequency_6b08c59a] = env->getStaticMethodID(cls, "frequency", "(Ljava/util/Collection;Ljava/lang/Object;)I");
        mids$[mid_indexOfSubList_cbe63a0d] = env->getStaticMethodID(cls, "indexOfSubList", "(Ljava/util/List;Ljava/util/List;)I");
        mids$[mid_lastIndexOfSubList_cbe63a0d] = env->getStaticMethodID(cls, "lastIndexOfSubList", "(Ljava/util/List;Ljava/util/List;)I");
        mids$[mid_list_0729353f] = env->getStaticMethodID(cls, "list", "(Ljava/util/Enumeration;)Ljava/util/ArrayList;");
        mids$[mid_max_abd1a366] = env->getStaticMethodID(cls, "max", "(Ljava/util/Collection;)Ljava/lang/Object;");
        mids$[mid_max_24cad27f] = env->getStaticMethodID(cls, "max", "(Ljava/util/Collection;Ljava/util/Comparator;)Ljava/lang/Object;");
        mids$[mid_min_abd1a366] = env->getStaticMethodID(cls, "min", "(Ljava/util/Collection;)Ljava/lang/Object;");
        mids$[mid_min_24cad27f] = env->getStaticMethodID(cls, "min", "(Ljava/util/Collection;Ljava/util/Comparator;)Ljava/lang/Object;");
        mids$[mid_nCopies_a26611d0] = env->getStaticMethodID(cls, "nCopies", "(ILjava/lang/Object;)Ljava/util/List;");
        mids$[mid_newSetFromMap_d56f8575] = env->getStaticMethodID(cls, "newSetFromMap", "(Ljava/util/Map;)Ljava/util/Set;");
        mids$[mid_replaceAll_37ceb42b] = env->getStaticMethodID(cls, "replaceAll", "(Ljava/util/List;Ljava/lang/Object;Ljava/lang/Object;)Z");
        mids$[mid_reverse_1fde8fc3] = env->getStaticMethodID(cls, "reverse", "(Ljava/util/List;)V");
        mids$[mid_reverseOrder_5a7ff2fc] = env->getStaticMethodID(cls, "reverseOrder", "()Ljava/util/Comparator;");
        mids$[mid_reverseOrder_4ed2c59d] = env->getStaticMethodID(cls, "reverseOrder", "(Ljava/util/Comparator;)Ljava/util/Comparator;");
        mids$[mid_rotate_fff63b2f] = env->getStaticMethodID(cls, "rotate", "(Ljava/util/List;I)V");
        mids$[mid_shuffle_1fde8fc3] = env->getStaticMethodID(cls, "shuffle", "(Ljava/util/List;)V");
        mids$[mid_shuffle_06ba5e4b] = env->getStaticMethodID(cls, "shuffle", "(Ljava/util/List;Ljava/util/Random;)V");
        mids$[mid_singleton_4c6d62c3] = env->getStaticMethodID(cls, "singleton", "(Ljava/lang/Object;)Ljava/util/Set;");
        mids$[mid_singletonList_71371966] = env->getStaticMethodID(cls, "singletonList", "(Ljava/lang/Object;)Ljava/util/List;");
        mids$[mid_singletonMap_65580ae9] = env->getStaticMethodID(cls, "singletonMap", "(Ljava/lang/Object;Ljava/lang/Object;)Ljava/util/Map;");
        mids$[mid_sort_1fde8fc3] = env->getStaticMethodID(cls, "sort", "(Ljava/util/List;)V");
        mids$[mid_sort_b59215b8] = env->getStaticMethodID(cls, "sort", "(Ljava/util/List;Ljava/util/Comparator;)V");
        mids$[mid_swap_d5c0aeaf] = env->getStaticMethodID(cls, "swap", "(Ljava/util/List;II)V");
        mids$[mid_synchronizedCollection_55c0b625] = env->getStaticMethodID(cls, "synchronizedCollection", "(Ljava/util/Collection;)Ljava/util/Collection;");
        mids$[mid_synchronizedList_4f378251] = env->getStaticMethodID(cls, "synchronizedList", "(Ljava/util/List;)Ljava/util/List;");
        mids$[mid_synchronizedMap_c606628b] = env->getStaticMethodID(cls, "synchronizedMap", "(Ljava/util/Map;)Ljava/util/Map;");
        mids$[mid_synchronizedNavigableMap_8e2dd723] = env->getStaticMethodID(cls, "synchronizedNavigableMap", "(Ljava/util/NavigableMap;)Ljava/util/NavigableMap;");
        mids$[mid_synchronizedNavigableSet_cf367097] = env->getStaticMethodID(cls, "synchronizedNavigableSet", "(Ljava/util/NavigableSet;)Ljava/util/NavigableSet;");
        mids$[mid_synchronizedSet_390c573f] = env->getStaticMethodID(cls, "synchronizedSet", "(Ljava/util/Set;)Ljava/util/Set;");
        mids$[mid_synchronizedSortedMap_93ac548b] = env->getStaticMethodID(cls, "synchronizedSortedMap", "(Ljava/util/SortedMap;)Ljava/util/SortedMap;");
        mids$[mid_synchronizedSortedSet_b705ec3b] = env->getStaticMethodID(cls, "synchronizedSortedSet", "(Ljava/util/SortedSet;)Ljava/util/SortedSet;");
        mids$[mid_unmodifiableCollection_55c0b625] = env->getStaticMethodID(cls, "unmodifiableCollection", "(Ljava/util/Collection;)Ljava/util/Collection;");
        mids$[mid_unmodifiableList_4f378251] = env->getStaticMethodID(cls, "unmodifiableList", "(Ljava/util/List;)Ljava/util/List;");
        mids$[mid_unmodifiableMap_c606628b] = env->getStaticMethodID(cls, "unmodifiableMap", "(Ljava/util/Map;)Ljava/util/Map;");
        mids$[mid_unmodifiableNavigableMap_8e2dd723] = env->getStaticMethodID(cls, "unmodifiableNavigableMap", "(Ljava/util/NavigableMap;)Ljava/util/NavigableMap;");
        mids$[mid_unmodifiableNavigableSet_cf367097] = env->getStaticMethodID(cls, "unmodifiableNavigableSet", "(Ljava/util/NavigableSet;)Ljava/util/NavigableSet;");
        mids$[mid_unmodifiableSet_390c573f] = env->getStaticMethodID(cls, "unmodifiableSet", "(Ljava/util/Set;)Ljava/util/Set;");
        mids$[mid_unmodifiableSortedMap_93ac548b] = env->getStaticMethodID(cls, "unmodifiableSortedMap", "(Ljava/util/SortedMap;)Ljava/util/SortedMap;");
        mids$[mid_unmodifiableSortedSet_b705ec3b] = env->getStaticMethodID(cls, "unmodifiableSortedSet", "(Ljava/util/SortedSet;)Ljava/util/SortedSet;");

        class$ = (::java::lang::Class *) new JObject(cls);
        cls = (jclass) class$->this$;

        EMPTY_LIST = new ::java::util::List(env->getStaticObjectField(cls, "EMPTY_LIST", "Ljava/util/List;"));
        EMPTY_MAP = new ::java::util::Map(env->getStaticObjectField(cls, "EMPTY_MAP", "Ljava/util/Map;"));
        EMPTY_SET = new ::java::util::Set(env->getStaticObjectField(cls, "EMPTY_SET", "Ljava/util/Set;"));
        live$ = true;
      }
      return (jclass) class$->this$;
    }

    jboolean Collections::addAll(const ::java::util::Collection & a0, const JArray< ::java::lang::Object > & a1)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticBooleanMethod(cls, mids$[mid_addAll_7d28570f], a0.this$, a1.this$);
    }

    ::java::util::Queue Collections::asLifoQueue(const ::java::util::Deque & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::util::Queue(env->callStaticObjectMethod(cls, mids$[mid_asLifoQueue_69ff1ef4], a0.this$));
    }

    jint Collections::binarySearch(const ::java::util::List & a0, const ::java::lang::Object & a1)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_binarySearch_632fb920], a0.this$, a1.this$);
    }

    jint Collections::binarySearch(const ::java::util::List & a0, const ::java::lang::Object & a1, const ::java::util::Comparator & a2)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_binarySearch_b1262297], a0.this$, a1.this$, a2.this$);
    }

    ::java::util::Collection Collections::checkedCollection(const ::java::util::Collection & a0, const ::java::lang::Class & a1)
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::util::Collection(env->callStaticObjectMethod(cls, mids$[mid_checkedCollection_cdb515a1], a0.this$, a1.this$));
    }

    ::java::util::List Collections::checkedList(const ::java::util::List & a0, const ::java::lang::Class & a1)
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::util::List(env->callStaticObjectMethod(cls, mids$[mid_checkedList_8575df61], a0.this$, a1.this$));
    }

    ::java::util::Map Collections::checkedMap(const ::java::util::Map & a0, const ::java::lang::Class & a1, const ::java::lang::Class & a2)
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::util::Map(env->callStaticObjectMethod(cls, mids$[mid_checkedMap_92913187], a0.this$, a1.this$, a2.this$));
    }

    ::java::util::NavigableMap Collections::checkedNavigableMap(const ::java::util::NavigableMap & a0, const ::java::lang::Class & a1, const ::java::lang::Class & a2)
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::util::NavigableMap(env->callStaticObjectMethod(cls, mids$[mid_checkedNavigableMap_f52dc087], a0.this$, a1.this$, a2.this$));
    }

    ::java::util::NavigableSet Collections::checkedNavigableSet(const ::java::util::NavigableSet & a0, const ::java::lang::Class & a1)
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::util::NavigableSet(env->callStaticObjectMethod(cls, mids$[mid_checkedNavigableSet_d66e5e45], a0.this$, a1.this$));
    }

    ::java::util::Queue Collections::checkedQueue(const ::java::util::Queue & a0, const ::java::lang::Class & a1)
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::util::Queue(env->callStaticObjectMethod(cls, mids$[mid_checkedQueue_1b729da3], a0.this$, a1.this$));
    }

    ::java::util::Set Collections::checkedSet(const ::java::util::Set & a0, const ::java::lang::Class & a1)
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::util::Set(env->callStaticObjectMethod(cls, mids$[mid_checkedSet_0862698d], a0.this$, a1.this$));
    }

    ::java::util::SortedMap Collections::checkedSortedMap(const ::java::util::SortedMap & a0, const ::java::lang::Class & a1, const ::java::lang::Class & a2)
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::util::SortedMap(env->callStaticObjectMethod(cls, mids$[mid_checkedSortedMap_5e4bff0f], a0.this$, a1.this$, a2.this$));
    }

    ::java::util::SortedSet Collections::checkedSortedSet(const ::java::util::SortedSet & a0, const ::java::lang::Class & a1)
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::util::SortedSet(env->callStaticObjectMethod(cls, mids$[mid_checkedSortedSet_342d53e3], a0.this$, a1.this$));
    }

    void Collections::copy(const ::java::util::List & a0, const ::java::util::List & a1)
    {
      jclass cls = env->getClass(initializeClass);
      env->callStaticVoidMethod(cls, mids$[mid_copy_cbe63a12], a0.this$, a1.this$);
    }

    jboolean Collections::disjoint(const ::java::util::Collection & a0, const ::java::util::Collection & a1)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticBooleanMethod(cls, mids$[mid_disjoint_05108b4e], a0.this$, a1.this$);
    }

    ::java::util::Enumeration Collections::emptyEnumeration()
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::util::Enumeration(env->callStaticObjectMethod(cls, mids$[mid_emptyEnumeration_39f88070]));
    }

    ::java::util::Iterator Collections::emptyIterator()
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::util::Iterator(env->callStaticObjectMethod(cls, mids$[mid_emptyIterator_40858c90]));
    }

    ::java::util::List Collections::emptyList()
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::util::List(env->callStaticObjectMethod(cls, mids$[mid_emptyList_87851566]));
    }

    ::java::util::ListIterator Collections::emptyListIterator()
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::util::ListIterator(env->callStaticObjectMethod(cls, mids$[mid_emptyListIterator_b5be4e14]));
    }

    ::java::util::Map Collections::emptyMap()
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::util::Map(env->callStaticObjectMethod(cls, mids$[mid_emptyMap_db60befd]));
    }

    ::java::util::NavigableMap Collections::emptyNavigableMap()
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::util::NavigableMap(env->callStaticObjectMethod(cls, mids$[mid_emptyNavigableMap_6ede266b]));
    }

    ::java::util::NavigableSet Collections::emptyNavigableSet()
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::util::NavigableSet(env->callStaticObjectMethod(cls, mids$[mid_emptyNavigableSet_1d81e42d]));
    }

    ::java::util::Set Collections::emptySet()
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::util::Set(env->callStaticObjectMethod(cls, mids$[mid_emptySet_03e99967]));
    }

    ::java::util::SortedMap Collections::emptySortedMap()
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::util::SortedMap(env->callStaticObjectMethod(cls, mids$[mid_emptySortedMap_ffaadd34]));
    }

    ::java::util::SortedSet Collections::emptySortedSet()
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::util::SortedSet(env->callStaticObjectMethod(cls, mids$[mid_emptySortedSet_b86b014a]));
    }

    ::java::util::Enumeration Collections::enumeration(const ::java::util::Collection & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::util::Enumeration(env->callStaticObjectMethod(cls, mids$[mid_enumeration_8f4c58e7], a0.this$));
    }

    void Collections::fill(const ::java::util::List & a0, const ::java::lang::Object & a1)
    {
      jclass cls = env->getClass(initializeClass);
      env->callStaticVoidMethod(cls, mids$[mid_fill_632fb93f], a0.this$, a1.this$);
    }

    jint Collections::frequency(const ::java::util::Collection & a0, const ::java::lang::Object & a1)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_frequency_6b08c59a], a0.this$, a1.this$);
    }

    jint Collections::indexOfSubList(const ::java::util::List & a0, const ::java::util::List & a1)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_indexOfSubList_cbe63a0d], a0.this$, a1.this$);
    }

    jint Collections::lastIndexOfSubList(const ::java::util::List & a0, const ::java::util::List & a1)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_lastIndexOfSubList_cbe63a0d], a0.this$, a1.this$);
    }

    ::java::util::ArrayList Collections::list(const ::java::util::Enumeration & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::util::ArrayList(env->callStaticObjectMethod(cls, mids$[mid_list_0729353f], a0.this$));
    }

    ::java::lang::Object Collections::max$(const ::java::util::Collection & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::lang::Object(env->callStaticObjectMethod(cls, mids$[mid_max_abd1a366], a0.this$));
    }

    ::java::lang::Object Collections::max$(const ::java::util::Collection & a0, const ::java::util::Comparator & a1)
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::lang::Object(env->callStaticObjectMethod(cls, mids$[mid_max_24cad27f], a0.this$, a1.this$));
    }

    ::java::lang::Object Collections::min$(const ::java::util::Collection & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::lang::Object(env->callStaticObjectMethod(cls, mids$[mid_min_abd1a366], a0.this$));
    }

    ::java::lang::Object Collections::min$(const ::java::util::Collection & a0, const ::java::util::Comparator & a1)
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::lang::Object(env->callStaticObjectMethod(cls, mids$[mid_min_24cad27f], a0.this$, a1.this$));
    }

    ::java::util::List Collections::nCopies(jint a0, const ::java::lang::Object & a1)
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::util::List(env->callStaticObjectMethod(cls, mids$[mid_nCopies_a26611d0], a0, a1.this$));
    }

    ::java::util::Set Collections::newSetFromMap(const ::java::util::Map & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::util::Set(env->callStaticObjectMethod(cls, mids$[mid_newSetFromMap_d56f8575], a0.this$));
    }

    jboolean Collections::replaceAll(const ::java::util::List & a0, const ::java::lang::Object & a1, const ::java::lang::Object & a2)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticBooleanMethod(cls, mids$[mid_replaceAll_37ceb42b], a0.this$, a1.this$, a2.this$);
    }

    void Collections::reverse(const ::java::util::List & a0)
    {
      jclass cls = env->getClass(initializeClass);
      env->callStaticVoidMethod(cls, mids$[mid_reverse_1fde8fc3], a0.this$);
    }

    ::java::util::Comparator Collections::reverseOrder()
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::util::Comparator(env->callStaticObjectMethod(cls, mids$[mid_reverseOrder_5a7ff2fc]));
    }

    ::java::util::Comparator Collections::reverseOrder(const ::java::util::Comparator & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::util::Comparator(env->callStaticObjectMethod(cls, mids$[mid_reverseOrder_4ed2c59d], a0.this$));
    }

    void Collections::rotate(const ::java::util::List & a0, jint a1)
    {
      jclass cls = env->getClass(initializeClass);
      env->callStaticVoidMethod(cls, mids$[mid_rotate_fff63b2f], a0.this$, a1);
    }

    void Collections::shuffle(const ::java::util::List & a0)
    {
      jclass cls = env->getClass(initializeClass);
      env->callStaticVoidMethod(cls, mids$[mid_shuffle_1fde8fc3], a0.this$);
    }

    void Collections::shuffle(const ::java::util::List & a0, const ::java::util::Random & a1)
    {
      jclass cls = env->getClass(initializeClass);
      env->callStaticVoidMethod(cls, mids$[mid_shuffle_06ba5e4b], a0.this$, a1.this$);
    }

    ::java::util::Set Collections::singleton(const ::java::lang::Object & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::util::Set(env->callStaticObjectMethod(cls, mids$[mid_singleton_4c6d62c3], a0.this$));
    }

    ::java::util::List Collections::singletonList(const ::java::lang::Object & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::util::List(env->callStaticObjectMethod(cls, mids$[mid_singletonList_71371966], a0.this$));
    }

    ::java::util::Map Collections::singletonMap(const ::java::lang::Object & a0, const ::java::lang::Object & a1)
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::util::Map(env->callStaticObjectMethod(cls, mids$[mid_singletonMap_65580ae9], a0.this$, a1.this$));
    }

    void Collections::sort(const ::java::util::List & a0)
    {
      jclass cls = env->getClass(initializeClass);
      env->callStaticVoidMethod(cls, mids$[mid_sort_1fde8fc3], a0.this$);
    }

    void Collections::sort(const ::java::util::List & a0, const ::java::util::Comparator & a1)
    {
      jclass cls = env->getClass(initializeClass);
      env->callStaticVoidMethod(cls, mids$[mid_sort_b59215b8], a0.this$, a1.this$);
    }

    void Collections::swap(const ::java::util::List & a0, jint a1, jint a2)
    {
      jclass cls = env->getClass(initializeClass);
      env->callStaticVoidMethod(cls, mids$[mid_swap_d5c0aeaf], a0.this$, a1, a2);
    }

    ::java::util::Collection Collections::synchronizedCollection(const ::java::util::Collection & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::util::Collection(env->callStaticObjectMethod(cls, mids$[mid_synchronizedCollection_55c0b625], a0.this$));
    }

    ::java::util::List Collections::synchronizedList(const ::java::util::List & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::util::List(env->callStaticObjectMethod(cls, mids$[mid_synchronizedList_4f378251], a0.this$));
    }

    ::java::util::Map Collections::synchronizedMap(const ::java::util::Map & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::util::Map(env->callStaticObjectMethod(cls, mids$[mid_synchronizedMap_c606628b], a0.this$));
    }

    ::java::util::NavigableMap Collections::synchronizedNavigableMap(const ::java::util::NavigableMap & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::util::NavigableMap(env->callStaticObjectMethod(cls, mids$[mid_synchronizedNavigableMap_8e2dd723], a0.this$));
    }

    ::java::util::NavigableSet Collections::synchronizedNavigableSet(const ::java::util::NavigableSet & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::util::NavigableSet(env->callStaticObjectMethod(cls, mids$[mid_synchronizedNavigableSet_cf367097], a0.this$));
    }

    ::java::util::Set Collections::synchronizedSet(const ::java::util::Set & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::util::Set(env->callStaticObjectMethod(cls, mids$[mid_synchronizedSet_390c573f], a0.this$));
    }

    ::java::util::SortedMap Collections::synchronizedSortedMap(const ::java::util::SortedMap & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::util::SortedMap(env->callStaticObjectMethod(cls, mids$[mid_synchronizedSortedMap_93ac548b], a0.this$));
    }

    ::java::util::SortedSet Collections::synchronizedSortedSet(const ::java::util::SortedSet & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::util::SortedSet(env->callStaticObjectMethod(cls, mids$[mid_synchronizedSortedSet_b705ec3b], a0.this$));
    }

    ::java::util::Collection Collections::unmodifiableCollection(const ::java::util::Collection & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::util::Collection(env->callStaticObjectMethod(cls, mids$[mid_unmodifiableCollection_55c0b625], a0.this$));
    }

    ::java::util::List Collections::unmodifiableList(const ::java::util::List & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::util::List(env->callStaticObjectMethod(cls, mids$[mid_unmodifiableList_4f378251], a0.this$));
    }

    ::java::util::Map Collections::unmodifiableMap(const ::java::util::Map & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::util::Map(env->callStaticObjectMethod(cls, mids$[mid_unmodifiableMap_c606628b], a0.this$));
    }

    ::java::util::NavigableMap Collections::unmodifiableNavigableMap(const ::java::util::NavigableMap & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::util::NavigableMap(env->callStaticObjectMethod(cls, mids$[mid_unmodifiableNavigableMap_8e2dd723], a0.this$));
    }

    ::java::util::NavigableSet Collections::unmodifiableNavigableSet(const ::java::util::NavigableSet & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::util::NavigableSet(env->callStaticObjectMethod(cls, mids$[mid_unmodifiableNavigableSet_cf367097], a0.this$));
    }

    ::java::util::Set Collections::unmodifiableSet(const ::java::util::Set & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::util::Set(env->callStaticObjectMethod(cls, mids$[mid_unmodifiableSet_390c573f], a0.this$));
    }

    ::java::util::SortedMap Collections::unmodifiableSortedMap(const ::java::util::SortedMap & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::util::SortedMap(env->callStaticObjectMethod(cls, mids$[mid_unmodifiableSortedMap_93ac548b], a0.this$));
    }

    ::java::util::SortedSet Collections::unmodifiableSortedSet(const ::java::util::SortedSet & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::util::SortedSet(env->callStaticObjectMethod(cls, mids$[mid_unmodifiableSortedSet_b705ec3b], a0.this$));
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace java {
  namespace util {
    static PyObject *t_Collections_cast_(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Collections_instance_(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Collections_addAll(PyTypeObject *type, PyObject *args);
    static PyObject *t_Collections_asLifoQueue(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Collections_binarySearch(PyTypeObject *type, PyObject *args);
    static PyObject *t_Collections_checkedCollection(PyTypeObject *type, PyObject *args);
    static PyObject *t_Collections_checkedList(PyTypeObject *type, PyObject *args);
    static PyObject *t_Collections_checkedMap(PyTypeObject *type, PyObject *args);
    static PyObject *t_Collections_checkedNavigableMap(PyTypeObject *type, PyObject *args);
    static PyObject *t_Collections_checkedNavigableSet(PyTypeObject *type, PyObject *args);
    static PyObject *t_Collections_checkedQueue(PyTypeObject *type, PyObject *args);
    static PyObject *t_Collections_checkedSet(PyTypeObject *type, PyObject *args);
    static PyObject *t_Collections_checkedSortedMap(PyTypeObject *type, PyObject *args);
    static PyObject *t_Collections_checkedSortedSet(PyTypeObject *type, PyObject *args);
    static PyObject *t_Collections_copy(PyTypeObject *type, PyObject *args);
    static PyObject *t_Collections_disjoint(PyTypeObject *type, PyObject *args);
    static PyObject *t_Collections_emptyEnumeration(PyTypeObject *type);
    static PyObject *t_Collections_emptyIterator(PyTypeObject *type);
    static PyObject *t_Collections_emptyList(PyTypeObject *type);
    static PyObject *t_Collections_emptyListIterator(PyTypeObject *type);
    static PyObject *t_Collections_emptyMap(PyTypeObject *type);
    static PyObject *t_Collections_emptyNavigableMap(PyTypeObject *type);
    static PyObject *t_Collections_emptyNavigableSet(PyTypeObject *type);
    static PyObject *t_Collections_emptySet(PyTypeObject *type);
    static PyObject *t_Collections_emptySortedMap(PyTypeObject *type);
    static PyObject *t_Collections_emptySortedSet(PyTypeObject *type);
    static PyObject *t_Collections_enumeration(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Collections_fill(PyTypeObject *type, PyObject *args);
    static PyObject *t_Collections_frequency(PyTypeObject *type, PyObject *args);
    static PyObject *t_Collections_indexOfSubList(PyTypeObject *type, PyObject *args);
    static PyObject *t_Collections_lastIndexOfSubList(PyTypeObject *type, PyObject *args);
    static PyObject *t_Collections_list(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Collections_max(PyTypeObject *type, PyObject *args);
    static PyObject *t_Collections_min(PyTypeObject *type, PyObject *args);
    static PyObject *t_Collections_nCopies(PyTypeObject *type, PyObject *args);
    static PyObject *t_Collections_newSetFromMap(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Collections_replaceAll(PyTypeObject *type, PyObject *args);
    static PyObject *t_Collections_reverse(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Collections_reverseOrder(PyTypeObject *type, PyObject *args);
    static PyObject *t_Collections_rotate(PyTypeObject *type, PyObject *args);
    static PyObject *t_Collections_shuffle(PyTypeObject *type, PyObject *args);
    static PyObject *t_Collections_singleton(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Collections_singletonList(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Collections_singletonMap(PyTypeObject *type, PyObject *args);
    static PyObject *t_Collections_sort(PyTypeObject *type, PyObject *args);
    static PyObject *t_Collections_swap(PyTypeObject *type, PyObject *args);
    static PyObject *t_Collections_synchronizedCollection(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Collections_synchronizedList(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Collections_synchronizedMap(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Collections_synchronizedNavigableMap(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Collections_synchronizedNavigableSet(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Collections_synchronizedSet(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Collections_synchronizedSortedMap(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Collections_synchronizedSortedSet(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Collections_unmodifiableCollection(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Collections_unmodifiableList(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Collections_unmodifiableMap(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Collections_unmodifiableNavigableMap(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Collections_unmodifiableNavigableSet(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Collections_unmodifiableSet(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Collections_unmodifiableSortedMap(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Collections_unmodifiableSortedSet(PyTypeObject *type, PyObject *arg);

    static PyMethodDef t_Collections__methods_[] = {
      DECLARE_METHOD(t_Collections, cast_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Collections, instance_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Collections, addAll, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Collections, asLifoQueue, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Collections, binarySearch, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Collections, checkedCollection, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Collections, checkedList, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Collections, checkedMap, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Collections, checkedNavigableMap, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Collections, checkedNavigableSet, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Collections, checkedQueue, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Collections, checkedSet, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Collections, checkedSortedMap, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Collections, checkedSortedSet, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Collections, copy, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Collections, disjoint, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Collections, emptyEnumeration, METH_NOARGS | METH_CLASS),
      DECLARE_METHOD(t_Collections, emptyIterator, METH_NOARGS | METH_CLASS),
      DECLARE_METHOD(t_Collections, emptyList, METH_NOARGS | METH_CLASS),
      DECLARE_METHOD(t_Collections, emptyListIterator, METH_NOARGS | METH_CLASS),
      DECLARE_METHOD(t_Collections, emptyMap, METH_NOARGS | METH_CLASS),
      DECLARE_METHOD(t_Collections, emptyNavigableMap, METH_NOARGS | METH_CLASS),
      DECLARE_METHOD(t_Collections, emptyNavigableSet, METH_NOARGS | METH_CLASS),
      DECLARE_METHOD(t_Collections, emptySet, METH_NOARGS | METH_CLASS),
      DECLARE_METHOD(t_Collections, emptySortedMap, METH_NOARGS | METH_CLASS),
      DECLARE_METHOD(t_Collections, emptySortedSet, METH_NOARGS | METH_CLASS),
      DECLARE_METHOD(t_Collections, enumeration, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Collections, fill, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Collections, frequency, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Collections, indexOfSubList, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Collections, lastIndexOfSubList, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Collections, list, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Collections, max, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Collections, min, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Collections, nCopies, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Collections, newSetFromMap, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Collections, replaceAll, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Collections, reverse, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Collections, reverseOrder, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Collections, rotate, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Collections, shuffle, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Collections, singleton, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Collections, singletonList, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Collections, singletonMap, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Collections, sort, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Collections, swap, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Collections, synchronizedCollection, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Collections, synchronizedList, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Collections, synchronizedMap, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Collections, synchronizedNavigableMap, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Collections, synchronizedNavigableSet, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Collections, synchronizedSet, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Collections, synchronizedSortedMap, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Collections, synchronizedSortedSet, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Collections, unmodifiableCollection, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Collections, unmodifiableList, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Collections, unmodifiableMap, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Collections, unmodifiableNavigableMap, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Collections, unmodifiableNavigableSet, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Collections, unmodifiableSet, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Collections, unmodifiableSortedMap, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Collections, unmodifiableSortedSet, METH_O | METH_CLASS),
      { NULL, NULL, 0, NULL }
    };

    DECLARE_TYPE(Collections, t_Collections, ::java::lang::Object, Collections, abstract_init, 0, 0, 0, 0, 0);

    void t_Collections::install(PyObject *module)
    {
      installType(&PY_TYPE(Collections), module, "Collections", 0);
    }

    void t_Collections::initialize(PyObject *module)
    {
      PyDict_SetItemString(PY_TYPE(Collections).tp_dict, "class_", make_descriptor(Collections::initializeClass, 1));
      PyDict_SetItemString(PY_TYPE(Collections).tp_dict, "wrapfn_", make_descriptor(t_Collections::wrap_jobject));
      PyDict_SetItemString(PY_TYPE(Collections).tp_dict, "boxfn_", make_descriptor(boxObject));
      env->getClass(Collections::initializeClass);
      PyDict_SetItemString(PY_TYPE(Collections).tp_dict, "EMPTY_LIST", make_descriptor(::java::util::t_List::wrap_Object(*Collections::EMPTY_LIST)));
      PyDict_SetItemString(PY_TYPE(Collections).tp_dict, "EMPTY_MAP", make_descriptor(::java::util::t_Map::wrap_Object(*Collections::EMPTY_MAP)));
      PyDict_SetItemString(PY_TYPE(Collections).tp_dict, "EMPTY_SET", make_descriptor(::java::util::t_Set::wrap_Object(*Collections::EMPTY_SET)));
    }

    static PyObject *t_Collections_cast_(PyTypeObject *type, PyObject *arg)
    {
      if (!(arg = castCheck(arg, Collections::initializeClass, 1)))
        return NULL;
      return t_Collections::wrap_Object(Collections(((t_Collections *) arg)->object.this$));
    }
    static PyObject *t_Collections_instance_(PyTypeObject *type, PyObject *arg)
    {
      if (!castCheck(arg, Collections::initializeClass, 0))
        Py_RETURN_FALSE;
      Py_RETURN_TRUE;
    }

    static PyObject *t_Collections_addAll(PyTypeObject *type, PyObject *args)
    {
      ::java::util::Collection a0((jobject) NULL);
      PyTypeObject **p0;
      JArray< ::java::lang::Object > a1((jobject) NULL);
      jboolean result;

      if (!parseArgs(args, "K[o", ::java::util::Collection::initializeClass, &a0, &p0, ::java::util::t_Collection::parameters_, &a1))
      {
        OBJ_CALL(result = ::java::util::Collections::addAll(a0, a1));
        Py_RETURN_BOOL(result);
      }

      PyErr_SetArgsError(type, "addAll", args);
      return NULL;
    }

    static PyObject *t_Collections_asLifoQueue(PyTypeObject *type, PyObject *arg)
    {
      ::java::util::Deque a0((jobject) NULL);
      PyTypeObject **p0;
      ::java::util::Queue result((jobject) NULL);

      if (!parseArg(arg, "K", ::java::util::Deque::initializeClass, &a0, &p0, ::java::util::t_Deque::parameters_))
      {
        OBJ_CALL(result = ::java::util::Collections::asLifoQueue(a0));
        return ::java::util::t_Queue::wrap_Object(result);
      }

      PyErr_SetArgsError(type, "asLifoQueue", arg);
      return NULL;
    }

    static PyObject *t_Collections_binarySearch(PyTypeObject *type, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 2:
        {
          ::java::util::List a0((jobject) NULL);
          PyTypeObject **p0;
          ::java::lang::Object a1((jobject) NULL);
          jint result;

          if (!parseArgs(args, "Ko", ::java::util::List::initializeClass, &a0, &p0, ::java::util::t_List::parameters_, &a1))
          {
            OBJ_CALL(result = ::java::util::Collections::binarySearch(a0, a1));
            return PyInt_FromLong((long) result);
          }
        }
        break;
       case 3:
        {
          ::java::util::List a0((jobject) NULL);
          PyTypeObject **p0;
          ::java::lang::Object a1((jobject) NULL);
          ::java::util::Comparator a2((jobject) NULL);
          PyTypeObject **p2;
          jint result;

          if (!parseArgs(args, "KoK", ::java::util::List::initializeClass, ::java::util::Comparator::initializeClass, &a0, &p0, ::java::util::t_List::parameters_, &a1, &a2, &p2, ::java::util::t_Comparator::parameters_))
          {
            OBJ_CALL(result = ::java::util::Collections::binarySearch(a0, a1, a2));
            return PyInt_FromLong((long) result);
          }
        }
      }

      PyErr_SetArgsError(type, "binarySearch", args);
      return NULL;
    }

    static PyObject *t_Collections_checkedCollection(PyTypeObject *type, PyObject *args)
    {
      ::java::util::Collection a0((jobject) NULL);
      PyTypeObject **p0;
      ::java::lang::Class a1((jobject) NULL);
      PyTypeObject **p1;
      ::java::util::Collection result((jobject) NULL);

      if (!parseArgs(args, "KK", ::java::util::Collection::initializeClass, ::java::lang::Class::initializeClass, &a0, &p0, ::java::util::t_Collection::parameters_, &a1, &p1, ::java::lang::t_Class::parameters_))
      {
        OBJ_CALL(result = ::java::util::Collections::checkedCollection(a0, a1));
        return ::java::util::t_Collection::wrap_Object(result);
      }

      PyErr_SetArgsError(type, "checkedCollection", args);
      return NULL;
    }

    static PyObject *t_Collections_checkedList(PyTypeObject *type, PyObject *args)
    {
      ::java::util::List a0((jobject) NULL);
      PyTypeObject **p0;
      ::java::lang::Class a1((jobject) NULL);
      PyTypeObject **p1;
      ::java::util::List result((jobject) NULL);

      if (!parseArgs(args, "KK", ::java::util::List::initializeClass, ::java::lang::Class::initializeClass, &a0, &p0, ::java::util::t_List::parameters_, &a1, &p1, ::java::lang::t_Class::parameters_))
      {
        OBJ_CALL(result = ::java::util::Collections::checkedList(a0, a1));
        return ::java::util::t_List::wrap_Object(result);
      }

      PyErr_SetArgsError(type, "checkedList", args);
      return NULL;
    }

    static PyObject *t_Collections_checkedMap(PyTypeObject *type, PyObject *args)
    {
      ::java::util::Map a0((jobject) NULL);
      PyTypeObject **p0;
      ::java::lang::Class a1((jobject) NULL);
      PyTypeObject **p1;
      ::java::lang::Class a2((jobject) NULL);
      PyTypeObject **p2;
      ::java::util::Map result((jobject) NULL);

      if (!parseArgs(args, "KKK", ::java::util::Map::initializeClass, ::java::lang::Class::initializeClass, ::java::lang::Class::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_, &a1, &p1, ::java::lang::t_Class::parameters_, &a2, &p2, ::java::lang::t_Class::parameters_))
      {
        OBJ_CALL(result = ::java::util::Collections::checkedMap(a0, a1, a2));
        return ::java::util::t_Map::wrap_Object(result);
      }

      PyErr_SetArgsError(type, "checkedMap", args);
      return NULL;
    }

    static PyObject *t_Collections_checkedNavigableMap(PyTypeObject *type, PyObject *args)
    {
      ::java::util::NavigableMap a0((jobject) NULL);
      PyTypeObject **p0;
      ::java::lang::Class a1((jobject) NULL);
      PyTypeObject **p1;
      ::java::lang::Class a2((jobject) NULL);
      PyTypeObject **p2;
      ::java::util::NavigableMap result((jobject) NULL);

      if (!parseArgs(args, "KKK", ::java::util::NavigableMap::initializeClass, ::java::lang::Class::initializeClass, ::java::lang::Class::initializeClass, &a0, &p0, ::java::util::t_NavigableMap::parameters_, &a1, &p1, ::java::lang::t_Class::parameters_, &a2, &p2, ::java::lang::t_Class::parameters_))
      {
        OBJ_CALL(result = ::java::util::Collections::checkedNavigableMap(a0, a1, a2));
        return ::java::util::t_NavigableMap::wrap_Object(result);
      }

      PyErr_SetArgsError(type, "checkedNavigableMap", args);
      return NULL;
    }

    static PyObject *t_Collections_checkedNavigableSet(PyTypeObject *type, PyObject *args)
    {
      ::java::util::NavigableSet a0((jobject) NULL);
      PyTypeObject **p0;
      ::java::lang::Class a1((jobject) NULL);
      PyTypeObject **p1;
      ::java::util::NavigableSet result((jobject) NULL);

      if (!parseArgs(args, "KK", ::java::util::NavigableSet::initializeClass, ::java::lang::Class::initializeClass, &a0, &p0, ::java::util::t_NavigableSet::parameters_, &a1, &p1, ::java::lang::t_Class::parameters_))
      {
        OBJ_CALL(result = ::java::util::Collections::checkedNavigableSet(a0, a1));
        return ::java::util::t_NavigableSet::wrap_Object(result);
      }

      PyErr_SetArgsError(type, "checkedNavigableSet", args);
      return NULL;
    }

    static PyObject *t_Collections_checkedQueue(PyTypeObject *type, PyObject *args)
    {
      ::java::util::Queue a0((jobject) NULL);
      PyTypeObject **p0;
      ::java::lang::Class a1((jobject) NULL);
      PyTypeObject **p1;
      ::java::util::Queue result((jobject) NULL);

      if (!parseArgs(args, "KK", ::java::util::Queue::initializeClass, ::java::lang::Class::initializeClass, &a0, &p0, ::java::util::t_Queue::parameters_, &a1, &p1, ::java::lang::t_Class::parameters_))
      {
        OBJ_CALL(result = ::java::util::Collections::checkedQueue(a0, a1));
        return ::java::util::t_Queue::wrap_Object(result);
      }

      PyErr_SetArgsError(type, "checkedQueue", args);
      return NULL;
    }

    static PyObject *t_Collections_checkedSet(PyTypeObject *type, PyObject *args)
    {
      ::java::util::Set a0((jobject) NULL);
      PyTypeObject **p0;
      ::java::lang::Class a1((jobject) NULL);
      PyTypeObject **p1;
      ::java::util::Set result((jobject) NULL);

      if (!parseArgs(args, "KK", ::java::util::Set::initializeClass, ::java::lang::Class::initializeClass, &a0, &p0, ::java::util::t_Set::parameters_, &a1, &p1, ::java::lang::t_Class::parameters_))
      {
        OBJ_CALL(result = ::java::util::Collections::checkedSet(a0, a1));
        return ::java::util::t_Set::wrap_Object(result);
      }

      PyErr_SetArgsError(type, "checkedSet", args);
      return NULL;
    }

    static PyObject *t_Collections_checkedSortedMap(PyTypeObject *type, PyObject *args)
    {
      ::java::util::SortedMap a0((jobject) NULL);
      PyTypeObject **p0;
      ::java::lang::Class a1((jobject) NULL);
      PyTypeObject **p1;
      ::java::lang::Class a2((jobject) NULL);
      PyTypeObject **p2;
      ::java::util::SortedMap result((jobject) NULL);

      if (!parseArgs(args, "KKK", ::java::util::SortedMap::initializeClass, ::java::lang::Class::initializeClass, ::java::lang::Class::initializeClass, &a0, &p0, ::java::util::t_SortedMap::parameters_, &a1, &p1, ::java::lang::t_Class::parameters_, &a2, &p2, ::java::lang::t_Class::parameters_))
      {
        OBJ_CALL(result = ::java::util::Collections::checkedSortedMap(a0, a1, a2));
        return ::java::util::t_SortedMap::wrap_Object(result);
      }

      PyErr_SetArgsError(type, "checkedSortedMap", args);
      return NULL;
    }

    static PyObject *t_Collections_checkedSortedSet(PyTypeObject *type, PyObject *args)
    {
      ::java::util::SortedSet a0((jobject) NULL);
      PyTypeObject **p0;
      ::java::lang::Class a1((jobject) NULL);
      PyTypeObject **p1;
      ::java::util::SortedSet result((jobject) NULL);

      if (!parseArgs(args, "KK", ::java::util::SortedSet::initializeClass, ::java::lang::Class::initializeClass, &a0, &p0, ::java::util::t_SortedSet::parameters_, &a1, &p1, ::java::lang::t_Class::parameters_))
      {
        OBJ_CALL(result = ::java::util::Collections::checkedSortedSet(a0, a1));
        return ::java::util::t_SortedSet::wrap_Object(result);
      }

      PyErr_SetArgsError(type, "checkedSortedSet", args);
      return NULL;
    }

    static PyObject *t_Collections_copy(PyTypeObject *type, PyObject *args)
    {
      ::java::util::List a0((jobject) NULL);
      PyTypeObject **p0;
      ::java::util::List a1((jobject) NULL);
      PyTypeObject **p1;

      if (!parseArgs(args, "KK", ::java::util::List::initializeClass, ::java::util::List::initializeClass, &a0, &p0, ::java::util::t_List::parameters_, &a1, &p1, ::java::util::t_List::parameters_))
      {
        OBJ_CALL(::java::util::Collections::copy(a0, a1));
        Py_RETURN_NONE;
      }

      PyErr_SetArgsError(type, "copy", args);
      return NULL;
    }

    static PyObject *t_Collections_disjoint(PyTypeObject *type, PyObject *args)
    {
      ::java::util::Collection a0((jobject) NULL);
      PyTypeObject **p0;
      ::java::util::Collection a1((jobject) NULL);
      PyTypeObject **p1;
      jboolean result;

      if (!parseArgs(args, "KK", ::java::util::Collection::initializeClass, ::java::util::Collection::initializeClass, &a0, &p0, ::java::util::t_Collection::parameters_, &a1, &p1, ::java::util::t_Collection::parameters_))
      {
        OBJ_CALL(result = ::java::util::Collections::disjoint(a0, a1));
        Py_RETURN_BOOL(result);
      }

      PyErr_SetArgsError(type, "disjoint", args);
      return NULL;
    }

    static PyObject *t_Collections_emptyEnumeration(PyTypeObject *type)
    {
      ::java::util::Enumeration result((jobject) NULL);
      OBJ_CALL(result = ::java::util::Collections::emptyEnumeration());
      return ::java::util::t_Enumeration::wrap_Object(result);
    }

    static PyObject *t_Collections_emptyIterator(PyTypeObject *type)
    {
      ::java::util::Iterator result((jobject) NULL);
      OBJ_CALL(result = ::java::util::Collections::emptyIterator());
      return ::java::util::t_Iterator::wrap_Object(result);
    }

    static PyObject *t_Collections_emptyList(PyTypeObject *type)
    {
      ::java::util::List result((jobject) NULL);
      OBJ_CALL(result = ::java::util::Collections::emptyList());
      return ::java::util::t_List::wrap_Object(result);
    }

    static PyObject *t_Collections_emptyListIterator(PyTypeObject *type)
    {
      ::java::util::ListIterator result((jobject) NULL);
      OBJ_CALL(result = ::java::util::Collections::emptyListIterator());
      return ::java::util::t_ListIterator::wrap_Object(result);
    }

    static PyObject *t_Collections_emptyMap(PyTypeObject *type)
    {
      ::java::util::Map result((jobject) NULL);
      OBJ_CALL(result = ::java::util::Collections::emptyMap());
      return ::java::util::t_Map::wrap_Object(result);
    }

    static PyObject *t_Collections_emptyNavigableMap(PyTypeObject *type)
    {
      ::java::util::NavigableMap result((jobject) NULL);
      OBJ_CALL(result = ::java::util::Collections::emptyNavigableMap());
      return ::java::util::t_NavigableMap::wrap_Object(result);
    }

    static PyObject *t_Collections_emptyNavigableSet(PyTypeObject *type)
    {
      ::java::util::NavigableSet result((jobject) NULL);
      OBJ_CALL(result = ::java::util::Collections::emptyNavigableSet());
      return ::java::util::t_NavigableSet::wrap_Object(result);
    }

    static PyObject *t_Collections_emptySet(PyTypeObject *type)
    {
      ::java::util::Set result((jobject) NULL);
      OBJ_CALL(result = ::java::util::Collections::emptySet());
      return ::java::util::t_Set::wrap_Object(result);
    }

    static PyObject *t_Collections_emptySortedMap(PyTypeObject *type)
    {
      ::java::util::SortedMap result((jobject) NULL);
      OBJ_CALL(result = ::java::util::Collections::emptySortedMap());
      return ::java::util::t_SortedMap::wrap_Object(result);
    }

    static PyObject *t_Collections_emptySortedSet(PyTypeObject *type)
    {
      ::java::util::SortedSet result((jobject) NULL);
      OBJ_CALL(result = ::java::util::Collections::emptySortedSet());
      return ::java::util::t_SortedSet::wrap_Object(result);
    }

    static PyObject *t_Collections_enumeration(PyTypeObject *type, PyObject *arg)
    {
      ::java::util::Collection a0((jobject) NULL);
      PyTypeObject **p0;
      ::java::util::Enumeration result((jobject) NULL);

      if (!parseArg(arg, "K", ::java::util::Collection::initializeClass, &a0, &p0, ::java::util::t_Collection::parameters_))
      {
        OBJ_CALL(result = ::java::util::Collections::enumeration(a0));
        return ::java::util::t_Enumeration::wrap_Object(result);
      }

      PyErr_SetArgsError(type, "enumeration", arg);
      return NULL;
    }

    static PyObject *t_Collections_fill(PyTypeObject *type, PyObject *args)
    {
      ::java::util::List a0((jobject) NULL);
      PyTypeObject **p0;
      ::java::lang::Object a1((jobject) NULL);

      if (!parseArgs(args, "Ko", ::java::util::List::initializeClass, &a0, &p0, ::java::util::t_List::parameters_, &a1))
      {
        OBJ_CALL(::java::util::Collections::fill(a0, a1));
        Py_RETURN_NONE;
      }

      PyErr_SetArgsError(type, "fill", args);
      return NULL;
    }

    static PyObject *t_Collections_frequency(PyTypeObject *type, PyObject *args)
    {
      ::java::util::Collection a0((jobject) NULL);
      PyTypeObject **p0;
      ::java::lang::Object a1((jobject) NULL);
      jint result;

      if (!parseArgs(args, "Ko", ::java::util::Collection::initializeClass, &a0, &p0, ::java::util::t_Collection::parameters_, &a1))
      {
        OBJ_CALL(result = ::java::util::Collections::frequency(a0, a1));
        return PyInt_FromLong((long) result);
      }

      PyErr_SetArgsError(type, "frequency", args);
      return NULL;
    }

    static PyObject *t_Collections_indexOfSubList(PyTypeObject *type, PyObject *args)
    {
      ::java::util::List a0((jobject) NULL);
      PyTypeObject **p0;
      ::java::util::List a1((jobject) NULL);
      PyTypeObject **p1;
      jint result;

      if (!parseArgs(args, "KK", ::java::util::List::initializeClass, ::java::util::List::initializeClass, &a0, &p0, ::java::util::t_List::parameters_, &a1, &p1, ::java::util::t_List::parameters_))
      {
        OBJ_CALL(result = ::java::util::Collections::indexOfSubList(a0, a1));
        return PyInt_FromLong((long) result);
      }

      PyErr_SetArgsError(type, "indexOfSubList", args);
      return NULL;
    }

    static PyObject *t_Collections_lastIndexOfSubList(PyTypeObject *type, PyObject *args)
    {
      ::java::util::List a0((jobject) NULL);
      PyTypeObject **p0;
      ::java::util::List a1((jobject) NULL);
      PyTypeObject **p1;
      jint result;

      if (!parseArgs(args, "KK", ::java::util::List::initializeClass, ::java::util::List::initializeClass, &a0, &p0, ::java::util::t_List::parameters_, &a1, &p1, ::java::util::t_List::parameters_))
      {
        OBJ_CALL(result = ::java::util::Collections::lastIndexOfSubList(a0, a1));
        return PyInt_FromLong((long) result);
      }

      PyErr_SetArgsError(type, "lastIndexOfSubList", args);
      return NULL;
    }

    static PyObject *t_Collections_list(PyTypeObject *type, PyObject *arg)
    {
      ::java::util::Enumeration a0((jobject) NULL);
      PyTypeObject **p0;
      ::java::util::ArrayList result((jobject) NULL);

      if (!parseArg(arg, "K", ::java::util::Enumeration::initializeClass, &a0, &p0, ::java::util::t_Enumeration::parameters_))
      {
        OBJ_CALL(result = ::java::util::Collections::list(a0));
        return ::java::util::t_ArrayList::wrap_Object(result);
      }

      PyErr_SetArgsError(type, "list", arg);
      return NULL;
    }

    static PyObject *t_Collections_max(PyTypeObject *type, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 1:
        {
          ::java::util::Collection a0((jobject) NULL);
          PyTypeObject **p0;
          ::java::lang::Object result((jobject) NULL);

          if (!parseArgs(args, "K", ::java::util::Collection::initializeClass, &a0, &p0, ::java::util::t_Collection::parameters_))
          {
            OBJ_CALL(result = ::java::util::Collections::max$(a0));
            return p0 != NULL && p0[0] != NULL ? wrapType(p0[0], result.this$) : ::java::lang::t_Object::wrap_Object(result);
          }
        }
        break;
       case 2:
        {
          ::java::util::Collection a0((jobject) NULL);
          PyTypeObject **p0;
          ::java::util::Comparator a1((jobject) NULL);
          PyTypeObject **p1;
          ::java::lang::Object result((jobject) NULL);

          if (!parseArgs(args, "KK", ::java::util::Collection::initializeClass, ::java::util::Comparator::initializeClass, &a0, &p0, ::java::util::t_Collection::parameters_, &a1, &p1, ::java::util::t_Comparator::parameters_))
          {
            OBJ_CALL(result = ::java::util::Collections::max$(a0, a1));
            return p0 != NULL && p0[0] != NULL ? wrapType(p0[0], result.this$) : ::java::lang::t_Object::wrap_Object(result);
          }
        }
      }

      PyErr_SetArgsError(type, "max", args);
      return NULL;
    }

    static PyObject *t_Collections_min(PyTypeObject *type, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 1:
        {
          ::java::util::Collection a0((jobject) NULL);
          PyTypeObject **p0;
          ::java::lang::Object result((jobject) NULL);

          if (!parseArgs(args, "K", ::java::util::Collection::initializeClass, &a0, &p0, ::java::util::t_Collection::parameters_))
          {
            OBJ_CALL(result = ::java::util::Collections::min$(a0));
            return p0 != NULL && p0[0] != NULL ? wrapType(p0[0], result.this$) : ::java::lang::t_Object::wrap_Object(result);
          }
        }
        break;
       case 2:
        {
          ::java::util::Collection a0((jobject) NULL);
          PyTypeObject **p0;
          ::java::util::Comparator a1((jobject) NULL);
          PyTypeObject **p1;
          ::java::lang::Object result((jobject) NULL);

          if (!parseArgs(args, "KK", ::java::util::Collection::initializeClass, ::java::util::Comparator::initializeClass, &a0, &p0, ::java::util::t_Collection::parameters_, &a1, &p1, ::java::util::t_Comparator::parameters_))
          {
            OBJ_CALL(result = ::java::util::Collections::min$(a0, a1));
            return p0 != NULL && p0[0] != NULL ? wrapType(p0[0], result.this$) : ::java::lang::t_Object::wrap_Object(result);
          }
        }
      }

      PyErr_SetArgsError(type, "min", args);
      return NULL;
    }

    static PyObject *t_Collections_nCopies(PyTypeObject *type, PyObject *args)
    {
      jint a0;
      ::java::lang::Object a1((jobject) NULL);
      ::java::util::List result((jobject) NULL);

      if (!parseArgs(args, "Io", &a0, &a1))
      {
        OBJ_CALL(result = ::java::util::Collections::nCopies(a0, a1));
        return ::java::util::t_List::wrap_Object(result);
      }

      PyErr_SetArgsError(type, "nCopies", args);
      return NULL;
    }

    static PyObject *t_Collections_newSetFromMap(PyTypeObject *type, PyObject *arg)
    {
      ::java::util::Map a0((jobject) NULL);
      PyTypeObject **p0;
      ::java::util::Set result((jobject) NULL);

      if (!parseArg(arg, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
      {
        OBJ_CALL(result = ::java::util::Collections::newSetFromMap(a0));
        return ::java::util::t_Set::wrap_Object(result);
      }

      PyErr_SetArgsError(type, "newSetFromMap", arg);
      return NULL;
    }

    static PyObject *t_Collections_replaceAll(PyTypeObject *type, PyObject *args)
    {
      ::java::util::List a0((jobject) NULL);
      PyTypeObject **p0;
      ::java::lang::Object a1((jobject) NULL);
      ::java::lang::Object a2((jobject) NULL);
      jboolean result;

      if (!parseArgs(args, "Koo", ::java::util::List::initializeClass, &a0, &p0, ::java::util::t_List::parameters_, &a1, &a2))
      {
        OBJ_CALL(result = ::java::util::Collections::replaceAll(a0, a1, a2));
        Py_RETURN_BOOL(result);
      }

      PyErr_SetArgsError(type, "replaceAll", args);
      return NULL;
    }

    static PyObject *t_Collections_reverse(PyTypeObject *type, PyObject *arg)
    {
      ::java::util::List a0((jobject) NULL);
      PyTypeObject **p0;

      if (!parseArg(arg, "K", ::java::util::List::initializeClass, &a0, &p0, ::java::util::t_List::parameters_))
      {
        OBJ_CALL(::java::util::Collections::reverse(a0));
        Py_RETURN_NONE;
      }

      PyErr_SetArgsError(type, "reverse", arg);
      return NULL;
    }

    static PyObject *t_Collections_reverseOrder(PyTypeObject *type, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 0:
        {
          ::java::util::Comparator result((jobject) NULL);
          OBJ_CALL(result = ::java::util::Collections::reverseOrder());
          return ::java::util::t_Comparator::wrap_Object(result);
        }
        break;
       case 1:
        {
          ::java::util::Comparator a0((jobject) NULL);
          PyTypeObject **p0;
          ::java::util::Comparator result((jobject) NULL);

          if (!parseArgs(args, "K", ::java::util::Comparator::initializeClass, &a0, &p0, ::java::util::t_Comparator::parameters_))
          {
            OBJ_CALL(result = ::java::util::Collections::reverseOrder(a0));
            return ::java::util::t_Comparator::wrap_Object(result);
          }
        }
      }

      PyErr_SetArgsError(type, "reverseOrder", args);
      return NULL;
    }

    static PyObject *t_Collections_rotate(PyTypeObject *type, PyObject *args)
    {
      ::java::util::List a0((jobject) NULL);
      PyTypeObject **p0;
      jint a1;

      if (!parseArgs(args, "KI", ::java::util::List::initializeClass, &a0, &p0, ::java::util::t_List::parameters_, &a1))
      {
        OBJ_CALL(::java::util::Collections::rotate(a0, a1));
        Py_RETURN_NONE;
      }

      PyErr_SetArgsError(type, "rotate", args);
      return NULL;
    }

    static PyObject *t_Collections_shuffle(PyTypeObject *type, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 1:
        {
          ::java::util::List a0((jobject) NULL);
          PyTypeObject **p0;

          if (!parseArgs(args, "K", ::java::util::List::initializeClass, &a0, &p0, ::java::util::t_List::parameters_))
          {
            OBJ_CALL(::java::util::Collections::shuffle(a0));
            Py_RETURN_NONE;
          }
        }
        break;
       case 2:
        {
          ::java::util::List a0((jobject) NULL);
          PyTypeObject **p0;
          ::java::util::Random a1((jobject) NULL);

          if (!parseArgs(args, "Kk", ::java::util::List::initializeClass, ::java::util::Random::initializeClass, &a0, &p0, ::java::util::t_List::parameters_, &a1))
          {
            OBJ_CALL(::java::util::Collections::shuffle(a0, a1));
            Py_RETURN_NONE;
          }
        }
      }

      PyErr_SetArgsError(type, "shuffle", args);
      return NULL;
    }

    static PyObject *t_Collections_singleton(PyTypeObject *type, PyObject *arg)
    {
      ::java::lang::Object a0((jobject) NULL);
      ::java::util::Set result((jobject) NULL);

      if (!parseArg(arg, "o", &a0))
      {
        OBJ_CALL(result = ::java::util::Collections::singleton(a0));
        return ::java::util::t_Set::wrap_Object(result);
      }

      PyErr_SetArgsError(type, "singleton", arg);
      return NULL;
    }

    static PyObject *t_Collections_singletonList(PyTypeObject *type, PyObject *arg)
    {
      ::java::lang::Object a0((jobject) NULL);
      ::java::util::List result((jobject) NULL);

      if (!parseArg(arg, "o", &a0))
      {
        OBJ_CALL(result = ::java::util::Collections::singletonList(a0));
        return ::java::util::t_List::wrap_Object(result);
      }

      PyErr_SetArgsError(type, "singletonList", arg);
      return NULL;
    }

    static PyObject *t_Collections_singletonMap(PyTypeObject *type, PyObject *args)
    {
      ::java::lang::Object a0((jobject) NULL);
      ::java::lang::Object a1((jobject) NULL);
      ::java::util::Map result((jobject) NULL);

      if (!parseArgs(args, "oo", &a0, &a1))
      {
        OBJ_CALL(result = ::java::util::Collections::singletonMap(a0, a1));
        return ::java::util::t_Map::wrap_Object(result);
      }

      PyErr_SetArgsError(type, "singletonMap", args);
      return NULL;
    }

    static PyObject *t_Collections_sort(PyTypeObject *type, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 1:
        {
          ::java::util::List a0((jobject) NULL);
          PyTypeObject **p0;

          if (!parseArgs(args, "K", ::java::util::List::initializeClass, &a0, &p0, ::java::util::t_List::parameters_))
          {
            OBJ_CALL(::java::util::Collections::sort(a0));
            Py_RETURN_NONE;
          }
        }
        break;
       case 2:
        {
          ::java::util::List a0((jobject) NULL);
          PyTypeObject **p0;
          ::java::util::Comparator a1((jobject) NULL);
          PyTypeObject **p1;

          if (!parseArgs(args, "KK", ::java::util::List::initializeClass, ::java::util::Comparator::initializeClass, &a0, &p0, ::java::util::t_List::parameters_, &a1, &p1, ::java::util::t_Comparator::parameters_))
          {
            OBJ_CALL(::java::util::Collections::sort(a0, a1));
            Py_RETURN_NONE;
          }
        }
      }

      PyErr_SetArgsError(type, "sort", args);
      return NULL;
    }

    static PyObject *t_Collections_swap(PyTypeObject *type, PyObject *args)
    {
      ::java::util::List a0((jobject) NULL);
      PyTypeObject **p0;
      jint a1;
      jint a2;

      if (!parseArgs(args, "KII", ::java::util::List::initializeClass, &a0, &p0, ::java::util::t_List::parameters_, &a1, &a2))
      {
        OBJ_CALL(::java::util::Collections::swap(a0, a1, a2));
        Py_RETURN_NONE;
      }

      PyErr_SetArgsError(type, "swap", args);
      return NULL;
    }

    static PyObject *t_Collections_synchronizedCollection(PyTypeObject *type, PyObject *arg)
    {
      ::java::util::Collection a0((jobject) NULL);
      PyTypeObject **p0;
      ::java::util::Collection result((jobject) NULL);

      if (!parseArg(arg, "K", ::java::util::Collection::initializeClass, &a0, &p0, ::java::util::t_Collection::parameters_))
      {
        OBJ_CALL(result = ::java::util::Collections::synchronizedCollection(a0));
        return ::java::util::t_Collection::wrap_Object(result);
      }

      PyErr_SetArgsError(type, "synchronizedCollection", arg);
      return NULL;
    }

    static PyObject *t_Collections_synchronizedList(PyTypeObject *type, PyObject *arg)
    {
      ::java::util::List a0((jobject) NULL);
      PyTypeObject **p0;
      ::java::util::List result((jobject) NULL);

      if (!parseArg(arg, "K", ::java::util::List::initializeClass, &a0, &p0, ::java::util::t_List::parameters_))
      {
        OBJ_CALL(result = ::java::util::Collections::synchronizedList(a0));
        return ::java::util::t_List::wrap_Object(result);
      }

      PyErr_SetArgsError(type, "synchronizedList", arg);
      return NULL;
    }

    static PyObject *t_Collections_synchronizedMap(PyTypeObject *type, PyObject *arg)
    {
      ::java::util::Map a0((jobject) NULL);
      PyTypeObject **p0;
      ::java::util::Map result((jobject) NULL);

      if (!parseArg(arg, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
      {
        OBJ_CALL(result = ::java::util::Collections::synchronizedMap(a0));
        return ::java::util::t_Map::wrap_Object(result);
      }

      PyErr_SetArgsError(type, "synchronizedMap", arg);
      return NULL;
    }

    static PyObject *t_Collections_synchronizedNavigableMap(PyTypeObject *type, PyObject *arg)
    {
      ::java::util::NavigableMap a0((jobject) NULL);
      PyTypeObject **p0;
      ::java::util::NavigableMap result((jobject) NULL);

      if (!parseArg(arg, "K", ::java::util::NavigableMap::initializeClass, &a0, &p0, ::java::util::t_NavigableMap::parameters_))
      {
        OBJ_CALL(result = ::java::util::Collections::synchronizedNavigableMap(a0));
        return ::java::util::t_NavigableMap::wrap_Object(result);
      }

      PyErr_SetArgsError(type, "synchronizedNavigableMap", arg);
      return NULL;
    }

    static PyObject *t_Collections_synchronizedNavigableSet(PyTypeObject *type, PyObject *arg)
    {
      ::java::util::NavigableSet a0((jobject) NULL);
      PyTypeObject **p0;
      ::java::util::NavigableSet result((jobject) NULL);

      if (!parseArg(arg, "K", ::java::util::NavigableSet::initializeClass, &a0, &p0, ::java::util::t_NavigableSet::parameters_))
      {
        OBJ_CALL(result = ::java::util::Collections::synchronizedNavigableSet(a0));
        return ::java::util::t_NavigableSet::wrap_Object(result);
      }

      PyErr_SetArgsError(type, "synchronizedNavigableSet", arg);
      return NULL;
    }

    static PyObject *t_Collections_synchronizedSet(PyTypeObject *type, PyObject *arg)
    {
      ::java::util::Set a0((jobject) NULL);
      PyTypeObject **p0;
      ::java::util::Set result((jobject) NULL);

      if (!parseArg(arg, "K", ::java::util::Set::initializeClass, &a0, &p0, ::java::util::t_Set::parameters_))
      {
        OBJ_CALL(result = ::java::util::Collections::synchronizedSet(a0));
        return ::java::util::t_Set::wrap_Object(result);
      }

      PyErr_SetArgsError(type, "synchronizedSet", arg);
      return NULL;
    }

    static PyObject *t_Collections_synchronizedSortedMap(PyTypeObject *type, PyObject *arg)
    {
      ::java::util::SortedMap a0((jobject) NULL);
      PyTypeObject **p0;
      ::java::util::SortedMap result((jobject) NULL);

      if (!parseArg(arg, "K", ::java::util::SortedMap::initializeClass, &a0, &p0, ::java::util::t_SortedMap::parameters_))
      {
        OBJ_CALL(result = ::java::util::Collections::synchronizedSortedMap(a0));
        return ::java::util::t_SortedMap::wrap_Object(result);
      }

      PyErr_SetArgsError(type, "synchronizedSortedMap", arg);
      return NULL;
    }

    static PyObject *t_Collections_synchronizedSortedSet(PyTypeObject *type, PyObject *arg)
    {
      ::java::util::SortedSet a0((jobject) NULL);
      PyTypeObject **p0;
      ::java::util::SortedSet result((jobject) NULL);

      if (!parseArg(arg, "K", ::java::util::SortedSet::initializeClass, &a0, &p0, ::java::util::t_SortedSet::parameters_))
      {
        OBJ_CALL(result = ::java::util::Collections::synchronizedSortedSet(a0));
        return ::java::util::t_SortedSet::wrap_Object(result);
      }

      PyErr_SetArgsError(type, "synchronizedSortedSet", arg);
      return NULL;
    }

    static PyObject *t_Collections_unmodifiableCollection(PyTypeObject *type, PyObject *arg)
    {
      ::java::util::Collection a0((jobject) NULL);
      PyTypeObject **p0;
      ::java::util::Collection result((jobject) NULL);

      if (!parseArg(arg, "K", ::java::util::Collection::initializeClass, &a0, &p0, ::java::util::t_Collection::parameters_))
      {
        OBJ_CALL(result = ::java::util::Collections::unmodifiableCollection(a0));
        return ::java::util::t_Collection::wrap_Object(result);
      }

      PyErr_SetArgsError(type, "unmodifiableCollection", arg);
      return NULL;
    }

    static PyObject *t_Collections_unmodifiableList(PyTypeObject *type, PyObject *arg)
    {
      ::java::util::List a0((jobject) NULL);
      PyTypeObject **p0;
      ::java::util::List result((jobject) NULL);

      if (!parseArg(arg, "K", ::java::util::List::initializeClass, &a0, &p0, ::java::util::t_List::parameters_))
      {
        OBJ_CALL(result = ::java::util::Collections::unmodifiableList(a0));
        return ::java::util::t_List::wrap_Object(result);
      }

      PyErr_SetArgsError(type, "unmodifiableList", arg);
      return NULL;
    }

    static PyObject *t_Collections_unmodifiableMap(PyTypeObject *type, PyObject *arg)
    {
      ::java::util::Map a0((jobject) NULL);
      PyTypeObject **p0;
      ::java::util::Map result((jobject) NULL);

      if (!parseArg(arg, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
      {
        OBJ_CALL(result = ::java::util::Collections::unmodifiableMap(a0));
        return ::java::util::t_Map::wrap_Object(result);
      }

      PyErr_SetArgsError(type, "unmodifiableMap", arg);
      return NULL;
    }

    static PyObject *t_Collections_unmodifiableNavigableMap(PyTypeObject *type, PyObject *arg)
    {
      ::java::util::NavigableMap a0((jobject) NULL);
      PyTypeObject **p0;
      ::java::util::NavigableMap result((jobject) NULL);

      if (!parseArg(arg, "K", ::java::util::NavigableMap::initializeClass, &a0, &p0, ::java::util::t_NavigableMap::parameters_))
      {
        OBJ_CALL(result = ::java::util::Collections::unmodifiableNavigableMap(a0));
        return ::java::util::t_NavigableMap::wrap_Object(result);
      }

      PyErr_SetArgsError(type, "unmodifiableNavigableMap", arg);
      return NULL;
    }

    static PyObject *t_Collections_unmodifiableNavigableSet(PyTypeObject *type, PyObject *arg)
    {
      ::java::util::NavigableSet a0((jobject) NULL);
      PyTypeObject **p0;
      ::java::util::NavigableSet result((jobject) NULL);

      if (!parseArg(arg, "K", ::java::util::NavigableSet::initializeClass, &a0, &p0, ::java::util::t_NavigableSet::parameters_))
      {
        OBJ_CALL(result = ::java::util::Collections::unmodifiableNavigableSet(a0));
        return ::java::util::t_NavigableSet::wrap_Object(result);
      }

      PyErr_SetArgsError(type, "unmodifiableNavigableSet", arg);
      return NULL;
    }

    static PyObject *t_Collections_unmodifiableSet(PyTypeObject *type, PyObject *arg)
    {
      ::java::util::Set a0((jobject) NULL);
      PyTypeObject **p0;
      ::java::util::Set result((jobject) NULL);

      if (!parseArg(arg, "K", ::java::util::Set::initializeClass, &a0, &p0, ::java::util::t_Set::parameters_))
      {
        OBJ_CALL(result = ::java::util::Collections::unmodifiableSet(a0));
        return ::java::util::t_Set::wrap_Object(result);
      }

      PyErr_SetArgsError(type, "unmodifiableSet", arg);
      return NULL;
    }

    static PyObject *t_Collections_unmodifiableSortedMap(PyTypeObject *type, PyObject *arg)
    {
      ::java::util::SortedMap a0((jobject) NULL);
      PyTypeObject **p0;
      ::java::util::SortedMap result((jobject) NULL);

      if (!parseArg(arg, "K", ::java::util::SortedMap::initializeClass, &a0, &p0, ::java::util::t_SortedMap::parameters_))
      {
        OBJ_CALL(result = ::java::util::Collections::unmodifiableSortedMap(a0));
        return ::java::util::t_SortedMap::wrap_Object(result);
      }

      PyErr_SetArgsError(type, "unmodifiableSortedMap", arg);
      return NULL;
    }

    static PyObject *t_Collections_unmodifiableSortedSet(PyTypeObject *type, PyObject *arg)
    {
      ::java::util::SortedSet a0((jobject) NULL);
      PyTypeObject **p0;
      ::java::util::SortedSet result((jobject) NULL);

      if (!parseArg(arg, "K", ::java::util::SortedSet::initializeClass, &a0, &p0, ::java::util::t_SortedSet::parameters_))
      {
        OBJ_CALL(result = ::java::util::Collections::unmodifiableSortedSet(a0));
        return ::java::util::t_SortedSet::wrap_Object(result);
      }

      PyErr_SetArgsError(type, "unmodifiableSortedSet", arg);
      return NULL;
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/FieldCache$Floats.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *FieldCache$Floats::class$ = NULL;
        jmethodID *FieldCache$Floats::mids$ = NULL;
        bool FieldCache$Floats::live$ = false;
        FieldCache$Floats *FieldCache$Floats::EMPTY = NULL;

        jclass FieldCache$Floats::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/FieldCache$Floats");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_get_39c7bd2c] = env->getMethodID(cls, "get", "(I)F");

            class$ = (::java::lang::Class *) new JObject(cls);
            cls = (jclass) class$->this$;

            EMPTY = new FieldCache$Floats(env->getStaticObjectField(cls, "EMPTY", "Lorg/apache/lucene/search/FieldCache$Floats;"));
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        FieldCache$Floats::FieldCache$Floats() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        jfloat FieldCache$Floats::get(jint a0) const
        {
          return env->callFloatMethod(this$, mids$[mid_get_39c7bd2c], a0);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_FieldCache$Floats_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FieldCache$Floats_instance_(PyTypeObject *type, PyObject *arg);
        static int t_FieldCache$Floats_init_(t_FieldCache$Floats *self, PyObject *args, PyObject *kwds);
        static PyObject *t_FieldCache$Floats_get(t_FieldCache$Floats *self, PyObject *arg);

        static PyMethodDef t_FieldCache$Floats__methods_[] = {
          DECLARE_METHOD(t_FieldCache$Floats, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FieldCache$Floats, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FieldCache$Floats, get, METH_O),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(FieldCache$Floats, t_FieldCache$Floats, ::java::lang::Object, FieldCache$Floats, t_FieldCache$Floats_init_, 0, 0, 0, 0, 0);

        void t_FieldCache$Floats::install(PyObject *module)
        {
          installType(&PY_TYPE(FieldCache$Floats), module, "FieldCache$Floats", 0);
        }

        void t_FieldCache$Floats::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(FieldCache$Floats).tp_dict, "class_", make_descriptor(FieldCache$Floats::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(FieldCache$Floats).tp_dict, "wrapfn_", make_descriptor(t_FieldCache$Floats::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(FieldCache$Floats).tp_dict, "boxfn_", make_descriptor(boxObject));
          env->getClass(FieldCache$Floats::initializeClass);
          PyDict_SetItemString(PY_TYPE(FieldCache$Floats).tp_dict, "EMPTY", make_descriptor(t_FieldCache$Floats::wrap_Object(*FieldCache$Floats::EMPTY)));
        }

        static PyObject *t_FieldCache$Floats_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, FieldCache$Floats::initializeClass, 1)))
            return NULL;
          return t_FieldCache$Floats::wrap_Object(FieldCache$Floats(((t_FieldCache$Floats *) arg)->object.this$));
        }
        static PyObject *t_FieldCache$Floats_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, FieldCache$Floats::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_FieldCache$Floats_init_(t_FieldCache$Floats *self, PyObject *args, PyObject *kwds)
        {
          FieldCache$Floats object((jobject) NULL);

          INT_CALL(object = FieldCache$Floats());
          self->object = object;

          return 0;
        }

        static PyObject *t_FieldCache$Floats_get(t_FieldCache$Floats *self, PyObject *arg)
        {
          jint a0;
          jfloat result;

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(result = self->object.get(a0));
            return PyFloat_FromDouble((double) result);
          }

          PyErr_SetArgsError((PyObject *) self, "get", arg);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/facet/range/LongRange.h"
#include "org/apache/lucene/queries/function/ValueSource.h"
#include "java/lang/String.h"
#include "org/apache/lucene/search/Filter.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace range {

          ::java::lang::Class *LongRange::class$ = NULL;
          jmethodID *LongRange::mids$ = NULL;
          jfieldID *LongRange::fids$ = NULL;
          bool LongRange::live$ = false;

          jclass LongRange::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/facet/range/LongRange");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_1777b4ec] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;JZJZ)V");
              mids$[mid_accept_0ee6df23] = env->getMethodID(cls, "accept", "(J)Z");
              mids$[mid_getFilter_fc904367] = env->getMethodID(cls, "getFilter", "(Lorg/apache/lucene/search/Filter;Lorg/apache/lucene/queries/function/ValueSource;)Lorg/apache/lucene/search/Filter;");
              mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

              fids$ = new jfieldID[max_fid];
              fids$[fid_max] = env->getFieldID(cls, "max", "J");
              fids$[fid_maxInclusive] = env->getFieldID(cls, "maxInclusive", "Z");
              fids$[fid_min] = env->getFieldID(cls, "min", "J");
              fids$[fid_minInclusive] = env->getFieldID(cls, "minInclusive", "Z");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          LongRange::LongRange(const ::java::lang::String & a0, jlong a1, jboolean a2, jlong a3, jboolean a4) : ::org::apache::lucene::facet::range::Range(env->newObject(initializeClass, &mids$, mid_init$_1777b4ec, a0.this$, a1, a2, a3, a4)) {}

          jboolean LongRange::accept(jlong a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_accept_0ee6df23], a0);
          }

          ::org::apache::lucene::search::Filter LongRange::getFilter(const ::org::apache::lucene::search::Filter & a0, const ::org::apache::lucene::queries::function::ValueSource & a1) const
          {
            return ::org::apache::lucene::search::Filter(env->callObjectMethod(this$, mids$[mid_getFilter_fc904367], a0.this$, a1.this$));
          }

          ::java::lang::String LongRange::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
          }

          jlong LongRange::_get_max() const
          {
            return env->getLongField(this$, fids$[fid_max]);
          }

          jboolean LongRange::_get_maxInclusive() const
          {
            return env->getBooleanField(this$, fids$[fid_maxInclusive]);
          }

          jlong LongRange::_get_min() const
          {
            return env->getLongField(this$, fids$[fid_min]);
          }

          jboolean LongRange::_get_minInclusive() const
          {
            return env->getBooleanField(this$, fids$[fid_minInclusive]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace range {
          static PyObject *t_LongRange_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_LongRange_instance_(PyTypeObject *type, PyObject *arg);
          static int t_LongRange_init_(t_LongRange *self, PyObject *args, PyObject *kwds);
          static PyObject *t_LongRange_accept(t_LongRange *self, PyObject *arg);
          static PyObject *t_LongRange_getFilter(t_LongRange *self, PyObject *args);
          static PyObject *t_LongRange_toString(t_LongRange *self, PyObject *args);
          static PyObject *t_LongRange_get__max(t_LongRange *self, void *data);
          static PyObject *t_LongRange_get__maxInclusive(t_LongRange *self, void *data);
          static PyObject *t_LongRange_get__min(t_LongRange *self, void *data);
          static PyObject *t_LongRange_get__minInclusive(t_LongRange *self, void *data);

          static PyGetSetDef t_LongRange__fields_[] = {
            DECLARE_GET_FIELD(t_LongRange, max),
            DECLARE_GET_FIELD(t_LongRange, maxInclusive),
            DECLARE_GET_FIELD(t_LongRange, min),
            DECLARE_GET_FIELD(t_LongRange, minInclusive),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_LongRange__methods_[] = {
            DECLARE_METHOD(t_LongRange, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_LongRange, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_LongRange, accept, METH_O),
            DECLARE_METHOD(t_LongRange, getFilter, METH_VARARGS),
            DECLARE_METHOD(t_LongRange, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(LongRange, t_LongRange, ::org::apache::lucene::facet::range::Range, LongRange, t_LongRange_init_, 0, 0, t_LongRange__fields_, 0, 0);

          void t_LongRange::install(PyObject *module)
          {
            installType(&PY_TYPE(LongRange), module, "LongRange", 0);
          }

          void t_LongRange::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(LongRange).tp_dict, "class_", make_descriptor(LongRange::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(LongRange).tp_dict, "wrapfn_", make_descriptor(t_LongRange::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(LongRange).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_LongRange_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, LongRange::initializeClass, 1)))
              return NULL;
            return t_LongRange::wrap_Object(LongRange(((t_LongRange *) arg)->object.this$));
          }
          static PyObject *t_LongRange_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, LongRange::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_LongRange_init_(t_LongRange *self, PyObject *args, PyObject *kwds)
          {
            ::java::lang::String a0((jobject) NULL);
            jlong a1;
            jboolean a2;
            jlong a3;
            jboolean a4;
            LongRange object((jobject) NULL);

            if (!parseArgs(args, "sJZJZ", &a0, &a1, &a2, &a3, &a4))
            {
              INT_CALL(object = LongRange(a0, a1, a2, a3, a4));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_LongRange_accept(t_LongRange *self, PyObject *arg)
          {
            jlong a0;
            jboolean result;

            if (!parseArg(arg, "J", &a0))
            {
              OBJ_CALL(result = self->object.accept(a0));
              Py_RETURN_BOOL(result);
            }

            PyErr_SetArgsError((PyObject *) self, "accept", arg);
            return NULL;
          }

          static PyObject *t_LongRange_getFilter(t_LongRange *self, PyObject *args)
          {
            ::org::apache::lucene::search::Filter a0((jobject) NULL);
            ::org::apache::lucene::queries::function::ValueSource a1((jobject) NULL);
            ::org::apache::lucene::search::Filter result((jobject) NULL);

            if (!parseArgs(args, "kk", ::org::apache::lucene::search::Filter::initializeClass, ::org::apache::lucene::queries::function::ValueSource::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.getFilter(a0, a1));
              return ::org::apache::lucene::search::t_Filter::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(LongRange), (PyObject *) self, "getFilter", args, 2);
          }

          static PyObject *t_LongRange_toString(t_LongRange *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(&PY_TYPE(LongRange), (PyObject *) self, "toString", args, 2);
          }

          static PyObject *t_LongRange_get__max(t_LongRange *self, void *data)
          {
            jlong value;
            OBJ_CALL(value = self->object._get_max());
            return PyLong_FromLongLong((PY_LONG_LONG) value);
          }

          static PyObject *t_LongRange_get__maxInclusive(t_LongRange *self, void *data)
          {
            jboolean value;
            OBJ_CALL(value = self->object._get_maxInclusive());
            Py_RETURN_BOOL(value);
          }

          static PyObject *t_LongRange_get__min(t_LongRange *self, void *data)
          {
            jlong value;
            OBJ_CALL(value = self->object._get_min());
            return PyLong_FromLongLong((PY_LONG_LONG) value);
          }

          static PyObject *t_LongRange_get__minInclusive(t_LongRange *self, void *data)
          {
            jboolean value;
            OBJ_CALL(value = self->object._get_minInclusive());
            Py_RETURN_BOOL(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/postingshighlight/PostingsHighlighter.h"
#include "java/lang/Class.h"
#include "java/io/IOException.h"
#include "java/util/Map.h"
#include "java/lang/String.h"
#include "org/apache/lucene/search/IndexSearcher.h"
#include "org/apache/lucene/search/Query.h"
#include "org/apache/lucene/search/TopDocs.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace postingshighlight {

          ::java::lang::Class *PostingsHighlighter::class$ = NULL;
          jmethodID *PostingsHighlighter::mids$ = NULL;
          bool PostingsHighlighter::live$ = false;
          jint PostingsHighlighter::DEFAULT_MAX_LENGTH = (jint) 0;

          jclass PostingsHighlighter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/postingshighlight/PostingsHighlighter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_init$_39c7bd3c] = env->getMethodID(cls, "<init>", "(I)V");
              mids$[mid_highlight_cfb8b283] = env->getMethodID(cls, "highlight", "(Ljava/lang/String;Lorg/apache/lucene/search/Query;Lorg/apache/lucene/search/IndexSearcher;Lorg/apache/lucene/search/TopDocs;)[Ljava/lang/String;");
              mids$[mid_highlight_c287afc1] = env->getMethodID(cls, "highlight", "(Ljava/lang/String;Lorg/apache/lucene/search/Query;Lorg/apache/lucene/search/IndexSearcher;Lorg/apache/lucene/search/TopDocs;I)[Ljava/lang/String;");
              mids$[mid_highlightFields_52512a83] = env->getMethodID(cls, "highlightFields", "([Ljava/lang/String;Lorg/apache/lucene/search/Query;Lorg/apache/lucene/search/IndexSearcher;Lorg/apache/lucene/search/TopDocs;)Ljava/util/Map;");
              mids$[mid_highlightFields_d3afe138] = env->getMethodID(cls, "highlightFields", "([Ljava/lang/String;Lorg/apache/lucene/search/Query;Lorg/apache/lucene/search/IndexSearcher;[I[I)Ljava/util/Map;");
              mids$[mid_highlightFields_20e79c3d] = env->getMethodID(cls, "highlightFields", "([Ljava/lang/String;Lorg/apache/lucene/search/Query;Lorg/apache/lucene/search/IndexSearcher;Lorg/apache/lucene/search/TopDocs;[I)Ljava/util/Map;");
              mids$[mid_getFormatter_a176835f] = env->getMethodID(cls, "getFormatter", "(Ljava/lang/String;)Lorg/apache/lucene/search/postingshighlight/PassageFormatter;");
              mids$[mid_getScorer_b8762390] = env->getMethodID(cls, "getScorer", "(Ljava/lang/String;)Lorg/apache/lucene/search/postingshighlight/PassageScorer;");
              mids$[mid_getMultiValuedSeparator_5fdc3f5d] = env->getMethodID(cls, "getMultiValuedSeparator", "(Ljava/lang/String;)C");
              mids$[mid_highlightFieldsAsObjects_d3afe138] = env->getMethodID(cls, "highlightFieldsAsObjects", "([Ljava/lang/String;Lorg/apache/lucene/search/Query;Lorg/apache/lucene/search/IndexSearcher;[I[I)Ljava/util/Map;");
              mids$[mid_getBreakIterator_4cb4d821] = env->getMethodID(cls, "getBreakIterator", "(Ljava/lang/String;)Ljava/text/BreakIterator;");
              mids$[mid_loadFieldValues_350d45ad] = env->getMethodID(cls, "loadFieldValues", "(Lorg/apache/lucene/search/IndexSearcher;[Ljava/lang/String;[II)[[Ljava/lang/String;");
              mids$[mid_getIndexAnalyzer_29a2299f] = env->getMethodID(cls, "getIndexAnalyzer", "(Ljava/lang/String;)Lorg/apache/lucene/analysis/Analyzer;");
              mids$[mid_getEmptyHighlight_863ca84c] = env->getMethodID(cls, "getEmptyHighlight", "(Ljava/lang/String;Ljava/text/BreakIterator;I)[Lorg/apache/lucene/search/postingshighlight/Passage;");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              DEFAULT_MAX_LENGTH = env->getStaticIntField(cls, "DEFAULT_MAX_LENGTH");
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          PostingsHighlighter::PostingsHighlighter() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          PostingsHighlighter::PostingsHighlighter(jint a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_39c7bd3c, a0)) {}

          JArray< ::java::lang::String > PostingsHighlighter::highlight(const ::java::lang::String & a0, const ::org::apache::lucene::search::Query & a1, const ::org::apache::lucene::search::IndexSearcher & a2, const ::org::apache::lucene::search::TopDocs & a3) const
          {
            return JArray< ::java::lang::String >(env->callObjectMethod(this$, mids$[mid_highlight_cfb8b283], a0.this$, a1.this$, a2.this$, a3.this$));
          }

          JArray< ::java::lang::String > PostingsHighlighter::highlight(const ::java::lang::String & a0, const ::org::apache::lucene::search::Query & a1, const ::org::apache::lucene::search::IndexSearcher & a2, const ::org::apache::lucene::search::TopDocs & a3, jint a4) const
          {
            return JArray< ::java::lang::String >(env->callObjectMethod(this$, mids$[mid_highlight_c287afc1], a0.this$, a1.this$, a2.this$, a3.this$, a4));
          }

          ::java::util::Map PostingsHighlighter::highlightFields(const JArray< ::java::lang::String > & a0, const ::org::apache::lucene::search::Query & a1, const ::org::apache::lucene::search::IndexSearcher & a2, const ::org::apache::lucene::search::TopDocs & a3) const
          {
            return ::java::util::Map(env->callObjectMethod(this$, mids$[mid_highlightFields_52512a83], a0.this$, a1.this$, a2.this$, a3.this$));
          }

          ::java::util::Map PostingsHighlighter::highlightFields(const JArray< ::java::lang::String > & a0, const ::org::apache::lucene::search::Query & a1, const ::org::apache::lucene::search::IndexSearcher & a2, const JArray< jint > & a3, const JArray< jint > & a4) const
          {
            return ::java::util::Map(env->callObjectMethod(this$, mids$[mid_highlightFields_d3afe138], a0.this$, a1.this$, a2.this$, a3.this$, a4.this$));
          }

          ::java::util::Map PostingsHighlighter::highlightFields(const JArray< ::java::lang::String > & a0, const ::org::apache::lucene::search::Query & a1, const ::org::apache::lucene::search::IndexSearcher & a2, const ::org::apache::lucene::search::TopDocs & a3, const JArray< jint > & a4) const
          {
            return ::java::util::Map(env->callObjectMethod(this$, mids$[mid_highlightFields_20e79c3d], a0.this$, a1.this$, a2.this$, a3.this$, a4.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace postingshighlight {
          static PyObject *t_PostingsHighlighter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PostingsHighlighter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_PostingsHighlighter_init_(t_PostingsHighlighter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_PostingsHighlighter_highlight(t_PostingsHighlighter *self, PyObject *args);
          static PyObject *t_PostingsHighlighter_highlightFields(t_PostingsHighlighter *self, PyObject *args);

          static PyMethodDef t_PostingsHighlighter__methods_[] = {
            DECLARE_METHOD(t_PostingsHighlighter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PostingsHighlighter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PostingsHighlighter, highlight, METH_VARARGS),
            DECLARE_METHOD(t_PostingsHighlighter, highlightFields, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(PostingsHighlighter, t_PostingsHighlighter, ::java::lang::Object, PostingsHighlighter, t_PostingsHighlighter_init_, 0, 0, 0, 0, 0);

          void t_PostingsHighlighter::install(PyObject *module)
          {
            installType(&PY_TYPE(PostingsHighlighter), module, "PostingsHighlighter", 0);
          }

          void t_PostingsHighlighter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(PostingsHighlighter).tp_dict, "class_", make_descriptor(PostingsHighlighter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(PostingsHighlighter).tp_dict, "wrapfn_", make_descriptor(t_PostingsHighlighter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(PostingsHighlighter).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(PostingsHighlighter::initializeClass);
            PyDict_SetItemString(PY_TYPE(PostingsHighlighter).tp_dict, "DEFAULT_MAX_LENGTH", make_descriptor(PostingsHighlighter::DEFAULT_MAX_LENGTH));
          }

          static PyObject *t_PostingsHighlighter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, PostingsHighlighter::initializeClass, 1)))
              return NULL;
            return t_PostingsHighlighter::wrap_Object(PostingsHighlighter(((t_PostingsHighlighter *) arg)->object.this$));
          }
          static PyObject *t_PostingsHighlighter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, PostingsHighlighter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_PostingsHighlighter_init_(t_PostingsHighlighter *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 0:
              {
                PostingsHighlighter object((jobject) NULL);

                INT_CALL(object = PostingsHighlighter());
                self->object = object;
                break;
              }
              goto err;
             case 1:
              {
                jint a0;
                PostingsHighlighter object((jobject) NULL);

                if (!parseArgs(args, "I", &a0))
                {
                  INT_CALL(object = PostingsHighlighter(a0));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_PostingsHighlighter_highlight(t_PostingsHighlighter *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 4:
              {
                ::java::lang::String a0((jobject) NULL);
                ::org::apache::lucene::search::Query a1((jobject) NULL);
                ::org::apache::lucene::search::IndexSearcher a2((jobject) NULL);
                ::org::apache::lucene::search::TopDocs a3((jobject) NULL);
                JArray< ::java::lang::String > result((jobject) NULL);

                if (!parseArgs(args, "skkk", ::org::apache::lucene::search::Query::initializeClass, ::org::apache::lucene::search::IndexSearcher::initializeClass, ::org::apache::lucene::search::TopDocs::initializeClass, &a0, &a1, &a2, &a3))
                {
                  OBJ_CALL(result = self->object.highlight(a0, a1, a2, a3));
                  return JArray<jstring>(result.this$).wrap();
                }
              }
              break;
             case 5:
              {
                ::java::lang::String a0((jobject) NULL);
                ::org::apache::lucene::search::Query a1((jobject) NULL);
                ::org::apache::lucene::search::IndexSearcher a2((jobject) NULL);
                ::org::apache::lucene::search::TopDocs a3((jobject) NULL);
                jint a4;
                JArray< ::java::lang::String > result((jobject) NULL);

                if (!parseArgs(args, "skkkI", ::org::apache::lucene::search::Query::initializeClass, ::org::apache::lucene::search::IndexSearcher::initializeClass, ::org::apache::lucene::search::TopDocs::initializeClass, &a0, &a1, &a2, &a3, &a4))
                {
                  OBJ_CALL(result = self->object.highlight(a0, a1, a2, a3, a4));
                  return JArray<jstring>(result.this$).wrap();
                }
              }
            }

            PyErr_SetArgsError((PyObject *) self, "highlight", args);
            return NULL;
          }

          static PyObject *t_PostingsHighlighter_highlightFields(t_PostingsHighlighter *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 4:
              {
                JArray< ::java::lang::String > a0((jobject) NULL);
                ::org::apache::lucene::search::Query a1((jobject) NULL);
                ::org::apache::lucene::search::IndexSearcher a2((jobject) NULL);
                ::org::apache::lucene::search::TopDocs a3((jobject) NULL);
                ::java::util::Map result((jobject) NULL);

                if (!parseArgs(args, "[skkk", ::org::apache::lucene::search::Query::initializeClass, ::org::apache::lucene::search::IndexSearcher::initializeClass, ::org::apache::lucene::search::TopDocs::initializeClass, &a0, &a1, &a2, &a3))
                {
                  OBJ_CALL(result = self->object.highlightFields(a0, a1, a2, a3));
                  return ::java::util::t_Map::wrap_Object(result, &::java::lang::PY_TYPE(String), &::java::lang::PY_TYPE(Object));
                }
              }
              break;
             case 5:
              {
                JArray< ::java::lang::String > a0((jobject) NULL);
                ::org::apache::lucene::search::Query a1((jobject) NULL);
                ::org::apache::lucene::search::IndexSearcher a2((jobject) NULL);
                JArray< jint > a3((jobject) NULL);
                JArray< jint > a4((jobject) NULL);
                ::java::util::Map result((jobject) NULL);

                if (!parseArgs(args, "[skk[I[I", ::org::apache::lucene::search::Query::initializeClass, ::org::apache::lucene::search::IndexSearcher::initializeClass, &a0, &a1, &a2, &a3, &a4))
                {
                  OBJ_CALL(result = self->object.highlightFields(a0, a1, a2, a3, a4));
                  return ::java::util::t_Map::wrap_Object(result, &::java::lang::PY_TYPE(String), &::java::lang::PY_TYPE(Object));
                }
              }
              {
                JArray< ::java::lang::String > a0((jobject) NULL);
                ::org::apache::lucene::search::Query a1((jobject) NULL);
                ::org::apache::lucene::search::IndexSearcher a2((jobject) NULL);
                ::org::apache::lucene::search::TopDocs a3((jobject) NULL);
                JArray< jint > a4((jobject) NULL);
                ::java::util::Map result((jobject) NULL);

                if (!parseArgs(args, "[skkk[I", ::org::apache::lucene::search::Query::initializeClass, ::org::apache::lucene::search::IndexSearcher::initializeClass, ::org::apache::lucene::search::TopDocs::initializeClass, &a0, &a1, &a2, &a3, &a4))
                {
                  OBJ_CALL(result = self->object.highlightFields(a0, a1, a2, a3, a4));
                  return ::java::util::t_Map::wrap_Object(result, &::java::lang::PY_TYPE(String), &::java::lang::PY_TYPE(Object));
                }
              }
            }

            PyErr_SetArgsError((PyObject *) self, "highlightFields", args);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/BytesRefHash$MaxBytesLengthExceededException.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *BytesRefHash$MaxBytesLengthExceededException::class$ = NULL;
        jmethodID *BytesRefHash$MaxBytesLengthExceededException::mids$ = NULL;
        bool BytesRefHash$MaxBytesLengthExceededException::live$ = false;

        jclass BytesRefHash$MaxBytesLengthExceededException::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/BytesRefHash$MaxBytesLengthExceededException");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_BytesRefHash$MaxBytesLengthExceededException_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_BytesRefHash$MaxBytesLengthExceededException_instance_(PyTypeObject *type, PyObject *arg);

        static PyMethodDef t_BytesRefHash$MaxBytesLengthExceededException__methods_[] = {
          DECLARE_METHOD(t_BytesRefHash$MaxBytesLengthExceededException, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_BytesRefHash$MaxBytesLengthExceededException, instance_, METH_O | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(BytesRefHash$MaxBytesLengthExceededException, t_BytesRefHash$MaxBytesLengthExceededException, ::java::lang::RuntimeException, BytesRefHash$MaxBytesLengthExceededException, abstract_init, 0, 0, 0, 0, 0);

        void t_BytesRefHash$MaxBytesLengthExceededException::install(PyObject *module)
        {
          installType(&PY_TYPE(BytesRefHash$MaxBytesLengthExceededException), module, "BytesRefHash$MaxBytesLengthExceededException", 0);
        }

        void t_BytesRefHash$MaxBytesLengthExceededException::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(BytesRefHash$MaxBytesLengthExceededException).tp_dict, "class_", make_descriptor(BytesRefHash$MaxBytesLengthExceededException::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(BytesRefHash$MaxBytesLengthExceededException).tp_dict, "wrapfn_", make_descriptor(t_BytesRefHash$MaxBytesLengthExceededException::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(BytesRefHash$MaxBytesLengthExceededException).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_BytesRefHash$MaxBytesLengthExceededException_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, BytesRefHash$MaxBytesLengthExceededException::initializeClass, 1)))
            return NULL;
          return t_BytesRefHash$MaxBytesLengthExceededException::wrap_Object(BytesRefHash$MaxBytesLengthExceededException(((t_BytesRefHash$MaxBytesLengthExceededException *) arg)->object.this$));
        }
        static PyObject *t_BytesRefHash$MaxBytesLengthExceededException_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, BytesRefHash$MaxBytesLengthExceededException::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/suggest/fst/FSTCompletion$Completion.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "java/lang/String.h"
#include "java/lang/Comparable.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace suggest {
          namespace fst {

            ::java::lang::Class *FSTCompletion$Completion::class$ = NULL;
            jmethodID *FSTCompletion$Completion::mids$ = NULL;
            jfieldID *FSTCompletion$Completion::fids$ = NULL;
            bool FSTCompletion$Completion::live$ = false;

            jclass FSTCompletion$Completion::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/search/suggest/fst/FSTCompletion$Completion");

                mids$ = new jmethodID[max_mid];
                mids$[mid_compareTo_2db77dab] = env->getMethodID(cls, "compareTo", "(Lorg/apache/lucene/search/suggest/fst/FSTCompletion$Completion;)I");
                mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

                fids$ = new jfieldID[max_fid];
                fids$[fid_bucket] = env->getFieldID(cls, "bucket", "I");
                fids$[fid_utf8] = env->getFieldID(cls, "utf8", "Lorg/apache/lucene/util/BytesRef;");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            jint FSTCompletion$Completion::compareTo(const FSTCompletion$Completion & a0) const
            {
              return env->callIntMethod(this$, mids$[mid_compareTo_2db77dab], a0.this$);
            }

            ::java::lang::String FSTCompletion$Completion::toString() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
            }

            jint FSTCompletion$Completion::_get_bucket() const
            {
              return env->getIntField(this$, fids$[fid_bucket]);
            }

            ::org::apache::lucene::util::BytesRef FSTCompletion$Completion::_get_utf8() const
            {
              return ::org::apache::lucene::util::BytesRef(env->getObjectField(this$, fids$[fid_utf8]));
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace suggest {
          namespace fst {
            static PyObject *t_FSTCompletion$Completion_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_FSTCompletion$Completion_instance_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_FSTCompletion$Completion_compareTo(t_FSTCompletion$Completion *self, PyObject *arg);
            static PyObject *t_FSTCompletion$Completion_toString(t_FSTCompletion$Completion *self, PyObject *args);
            static PyObject *t_FSTCompletion$Completion_get__bucket(t_FSTCompletion$Completion *self, void *data);
            static PyObject *t_FSTCompletion$Completion_get__utf8(t_FSTCompletion$Completion *self, void *data);

            static PyGetSetDef t_FSTCompletion$Completion__fields_[] = {
              DECLARE_GET_FIELD(t_FSTCompletion$Completion, bucket),
              DECLARE_GET_FIELD(t_FSTCompletion$Completion, utf8),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_FSTCompletion$Completion__methods_[] = {
              DECLARE_METHOD(t_FSTCompletion$Completion, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_FSTCompletion$Completion, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_FSTCompletion$Completion, compareTo, METH_O),
              DECLARE_METHOD(t_FSTCompletion$Completion, toString, METH_VARARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(FSTCompletion$Completion, t_FSTCompletion$Completion, ::java::lang::Object, FSTCompletion$Completion, abstract_init, 0, 0, t_FSTCompletion$Completion__fields_, 0, 0);

            void t_FSTCompletion$Completion::install(PyObject *module)
            {
              installType(&PY_TYPE(FSTCompletion$Completion), module, "FSTCompletion$Completion", 0);
            }

            void t_FSTCompletion$Completion::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(FSTCompletion$Completion).tp_dict, "class_", make_descriptor(FSTCompletion$Completion::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(FSTCompletion$Completion).tp_dict, "wrapfn_", make_descriptor(t_FSTCompletion$Completion::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(FSTCompletion$Completion).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_FSTCompletion$Completion_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, FSTCompletion$Completion::initializeClass, 1)))
                return NULL;
              return t_FSTCompletion$Completion::wrap_Object(FSTCompletion$Completion(((t_FSTCompletion$Completion *) arg)->object.this$));
            }
            static PyObject *t_FSTCompletion$Completion_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, FSTCompletion$Completion::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static PyObject *t_FSTCompletion$Completion_compareTo(t_FSTCompletion$Completion *self, PyObject *arg)
            {
              FSTCompletion$Completion a0((jobject) NULL);
              jint result;

              if (!parseArg(arg, "k", FSTCompletion$Completion::initializeClass, &a0))
              {
                OBJ_CALL(result = self->object.compareTo(a0));
                return PyInt_FromLong((long) result);
              }

              PyErr_SetArgsError((PyObject *) self, "compareTo", arg);
              return NULL;
            }

            static PyObject *t_FSTCompletion$Completion_toString(t_FSTCompletion$Completion *self, PyObject *args)
            {
              ::java::lang::String result((jobject) NULL);

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.toString());
                return j2p(result);
              }

              return callSuper(&PY_TYPE(FSTCompletion$Completion), (PyObject *) self, "toString", args, 2);
            }

            static PyObject *t_FSTCompletion$Completion_get__bucket(t_FSTCompletion$Completion *self, void *data)
            {
              jint value;
              OBJ_CALL(value = self->object._get_bucket());
              return PyInt_FromLong((long) value);
            }

            static PyObject *t_FSTCompletion$Completion_get__utf8(t_FSTCompletion$Completion *self, void *data)
            {
              ::org::apache::lucene::util::BytesRef value((jobject) NULL);
              OBJ_CALL(value = self->object._get_utf8());
              return ::org::apache::lucene::util::t_BytesRef::wrap_Object(value);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/ckb/SoraniNormalizationFilterFactory.h"
#include "org/apache/lucene/analysis/ckb/SoraniNormalizationFilter.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "org/apache/lucene/analysis/util/MultiTermAwareComponent.h"
#include "java/lang/Class.h"
#include "java/util/Map.h"
#include "java/lang/String.h"
#include "org/apache/lucene/analysis/util/AbstractAnalysisFactory.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ckb {

          ::java::lang::Class *SoraniNormalizationFilterFactory::class$ = NULL;
          jmethodID *SoraniNormalizationFilterFactory::mids$ = NULL;
          bool SoraniNormalizationFilterFactory::live$ = false;

          jclass SoraniNormalizationFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/ckb/SoraniNormalizationFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4c9e2b1c] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_3fe7ed52] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/ckb/SoraniNormalizationFilter;");
              mids$[mid_getMultiTermComponent_0a3f1d72] = env->getMethodID(cls, "getMultiTermComponent", "()Lorg/apache/lucene/analysis/util/AbstractAnalysisFactory;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          SoraniNormalizationFilterFactory::SoraniNormalizationFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_4c9e2b1c, a0.this$)) {}

          ::org::apache::lucene::analysis::ckb::SoraniNormalizationFilter SoraniNormalizationFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::ckb::SoraniNormalizationFilter(env->callObjectMethod(this$, mids$[mid_create_3fe7ed52], a0.this$));
          }

          ::org::apache::lucene::analysis::util::AbstractAnalysisFactory SoraniNormalizationFilterFactory::getMultiTermComponent() const
          {
            return ::org::apache::lucene::analysis::util::AbstractAnalysisFactory(env->callObjectMethod(this$, mids$[mid_getMultiTermComponent_0a3f1d72]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ckb {
          static PyObject *t_SoraniNormalizationFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SoraniNormalizationFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_SoraniNormalizationFilterFactory_init_(t_SoraniNormalizationFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_SoraniNormalizationFilterFactory_create(t_SoraniNormalizationFilterFactory *self, PyObject *args);
          static PyObject *t_SoraniNormalizationFilterFactory_getMultiTermComponent(t_SoraniNormalizationFilterFactory *self);
          static PyObject *t_SoraniNormalizationFilterFactory_get__multiTermComponent(t_SoraniNormalizationFilterFactory *self, void *data);
          static PyGetSetDef t_SoraniNormalizationFilterFactory__fields_[] = {
            DECLARE_GET_FIELD(t_SoraniNormalizationFilterFactory, multiTermComponent),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_SoraniNormalizationFilterFactory__methods_[] = {
            DECLARE_METHOD(t_SoraniNormalizationFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SoraniNormalizationFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SoraniNormalizationFilterFactory, create, METH_VARARGS),
            DECLARE_METHOD(t_SoraniNormalizationFilterFactory, getMultiTermComponent, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(SoraniNormalizationFilterFactory, t_SoraniNormalizationFilterFactory, ::org::apache::lucene::analysis::util::TokenFilterFactory, SoraniNormalizationFilterFactory, t_SoraniNormalizationFilterFactory_init_, 0, 0, t_SoraniNormalizationFilterFactory__fields_, 0, 0);

          void t_SoraniNormalizationFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(SoraniNormalizationFilterFactory), module, "SoraniNormalizationFilterFactory", 0);
          }

          void t_SoraniNormalizationFilterFactory::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(SoraniNormalizationFilterFactory).tp_dict, "class_", make_descriptor(SoraniNormalizationFilterFactory::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(SoraniNormalizationFilterFactory).tp_dict, "wrapfn_", make_descriptor(t_SoraniNormalizationFilterFactory::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(SoraniNormalizationFilterFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_SoraniNormalizationFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, SoraniNormalizationFilterFactory::initializeClass, 1)))
              return NULL;
            return t_SoraniNormalizationFilterFactory::wrap_Object(SoraniNormalizationFilterFactory(((t_SoraniNormalizationFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_SoraniNormalizationFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, SoraniNormalizationFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_SoraniNormalizationFilterFactory_init_(t_SoraniNormalizationFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            SoraniNormalizationFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = SoraniNormalizationFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_SoraniNormalizationFilterFactory_create(t_SoraniNormalizationFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::ckb::SoraniNormalizationFilter result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::ckb::t_SoraniNormalizationFilter::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(SoraniNormalizationFilterFactory), (PyObject *) self, "create", args, 2);
          }

          static PyObject *t_SoraniNormalizationFilterFactory_getMultiTermComponent(t_SoraniNormalizationFilterFactory *self)
          {
            ::org::apache::lucene::analysis::util::AbstractAnalysisFactory result((jobject) NULL);
            OBJ_CALL(result = self->object.getMultiTermComponent());
            return ::org::apache::lucene::analysis::util::t_AbstractAnalysisFactory::wrap_Object(result);
          }

          static PyObject *t_SoraniNormalizationFilterFactory_get__multiTermComponent(t_SoraniNormalizationFilterFactory *self, void *data)
          {
            ::org::apache::lucene::analysis::util::AbstractAnalysisFactory value((jobject) NULL);
            OBJ_CALL(value = self->object.getMultiTermComponent());
            return ::org::apache::lucene::analysis::util::t_AbstractAnalysisFactory::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/UpgradeIndexMergePolicy.h"
#include "org/apache/lucene/index/IndexWriter.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/index/MergeTrigger.h"
#include "org/apache/lucene/index/SegmentInfos.h"
#include "org/apache/lucene/index/SegmentCommitInfo.h"
#include "java/util/Map.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "java/lang/Boolean.h"
#include "org/apache/lucene/index/MergePolicy$MergeSpecification.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *UpgradeIndexMergePolicy::class$ = NULL;
        jmethodID *UpgradeIndexMergePolicy::mids$ = NULL;
        bool UpgradeIndexMergePolicy::live$ = false;

        jclass UpgradeIndexMergePolicy::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/UpgradeIndexMergePolicy");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_6034dd24] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/MergePolicy;)V");
            mids$[mid_close_54c6a166] = env->getMethodID(cls, "close", "()V");
            mids$[mid_findForcedDeletesMerges_581dbc49] = env->getMethodID(cls, "findForcedDeletesMerges", "(Lorg/apache/lucene/index/SegmentInfos;Lorg/apache/lucene/index/IndexWriter;)Lorg/apache/lucene/index/MergePolicy$MergeSpecification;");
            mids$[mid_findForcedMerges_4fe4a5b5] = env->getMethodID(cls, "findForcedMerges", "(Lorg/apache/lucene/index/SegmentInfos;ILjava/util/Map;Lorg/apache/lucene/index/IndexWriter;)Lorg/apache/lucene/index/MergePolicy$MergeSpecification;");
            mids$[mid_findMerges_cada0df0] = env->getMethodID(cls, "findMerges", "(Lorg/apache/lucene/index/MergeTrigger;Lorg/apache/lucene/index/SegmentInfos;Lorg/apache/lucene/index/IndexWriter;)Lorg/apache/lucene/index/MergePolicy$MergeSpecification;");
            mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");
            mids$[mid_useCompoundFile_70dc8488] = env->getMethodID(cls, "useCompoundFile", "(Lorg/apache/lucene/index/SegmentInfos;Lorg/apache/lucene/index/SegmentCommitInfo;Lorg/apache/lucene/index/IndexWriter;)Z");
            mids$[mid_shouldUpgradeSegment_6649cdf8] = env->getMethodID(cls, "shouldUpgradeSegment", "(Lorg/apache/lucene/index/SegmentCommitInfo;)Z");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        UpgradeIndexMergePolicy::UpgradeIndexMergePolicy(const ::org::apache::lucene::index::MergePolicy & a0) : ::org::apache::lucene::index::MergePolicy(env->newObject(initializeClass, &mids$, mid_init$_6034dd24, a0.this$)) {}

        void UpgradeIndexMergePolicy::close() const
        {
          env->callVoidMethod(this$, mids$[mid_close_54c6a166]);
        }

        ::org::apache::lucene::index::MergePolicy$MergeSpecification UpgradeIndexMergePolicy::findForcedDeletesMerges(const ::org::apache::lucene::index::SegmentInfos & a0, const ::org::apache::lucene::index::IndexWriter & a1) const
        {
          return ::org::apache::lucene::index::MergePolicy$MergeSpecification(env->callObjectMethod(this$, mids$[mid_findForcedDeletesMerges_581dbc49], a0.this$, a1.this$));
        }

        ::org::apache::lucene::index::MergePolicy$MergeSpecification UpgradeIndexMergePolicy::findForcedMerges(const ::org::apache::lucene::index::SegmentInfos & a0, jint a1, const ::java::util::Map & a2, const ::org::apache::lucene::index::IndexWriter & a3) const
        {
          return ::org::apache::lucene::index::MergePolicy$MergeSpecification(env->callObjectMethod(this$, mids$[mid_findForcedMerges_4fe4a5b5], a0.this$, a1, a2.this$, a3.this$));
        }

        ::org::apache::lucene::index::MergePolicy$MergeSpecification UpgradeIndexMergePolicy::findMerges(const ::org::apache::lucene::index::MergeTrigger & a0, const ::org::apache::lucene::index::SegmentInfos & a1, const ::org::apache::lucene::index::IndexWriter & a2) const
        {
          return ::org::apache::lucene::index::MergePolicy$MergeSpecification(env->callObjectMethod(this$, mids$[mid_findMerges_cada0df0], a0.this$, a1.this$, a2.this$));
        }

        ::java::lang::String UpgradeIndexMergePolicy::toString() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
        }

        jboolean UpgradeIndexMergePolicy::useCompoundFile(const ::org::apache::lucene::index::SegmentInfos & a0, const ::org::apache::lucene::index::SegmentCommitInfo & a1, const ::org::apache::lucene::index::IndexWriter & a2) const
        {
          return env->callBooleanMethod(this$, mids$[mid_useCompoundFile_70dc8488], a0.this$, a1.this$, a2.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_UpgradeIndexMergePolicy_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_UpgradeIndexMergePolicy_instance_(PyTypeObject *type, PyObject *arg);
        static int t_UpgradeIndexMergePolicy_init_(t_UpgradeIndexMergePolicy *self, PyObject *args, PyObject *kwds);
        static PyObject *t_UpgradeIndexMergePolicy_close(t_UpgradeIndexMergePolicy *self, PyObject *args);
        static PyObject *t_UpgradeIndexMergePolicy_findForcedDeletesMerges(t_UpgradeIndexMergePolicy *self, PyObject *args);
        static PyObject *t_UpgradeIndexMergePolicy_findForcedMerges(t_UpgradeIndexMergePolicy *self, PyObject *args);
        static PyObject *t_UpgradeIndexMergePolicy_findMerges(t_UpgradeIndexMergePolicy *self, PyObject *args);
        static PyObject *t_UpgradeIndexMergePolicy_toString(t_UpgradeIndexMergePolicy *self, PyObject *args);
        static PyObject *t_UpgradeIndexMergePolicy_useCompoundFile(t_UpgradeIndexMergePolicy *self, PyObject *args);

        static PyMethodDef t_UpgradeIndexMergePolicy__methods_[] = {
          DECLARE_METHOD(t_UpgradeIndexMergePolicy, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_UpgradeIndexMergePolicy, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_UpgradeIndexMergePolicy, close, METH_VARARGS),
          DECLARE_METHOD(t_UpgradeIndexMergePolicy, findForcedDeletesMerges, METH_VARARGS),
          DECLARE_METHOD(t_UpgradeIndexMergePolicy, findForcedMerges, METH_VARARGS),
          DECLARE_METHOD(t_UpgradeIndexMergePolicy, findMerges, METH_VARARGS),
          DECLARE_METHOD(t_UpgradeIndexMergePolicy, toString, METH_VARARGS),
          DECLARE_METHOD(t_UpgradeIndexMergePolicy, useCompoundFile, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(UpgradeIndexMergePolicy, t_UpgradeIndexMergePolicy, ::org::apache::lucene::index::MergePolicy, UpgradeIndexMergePolicy, t_UpgradeIndexMergePolicy_init_, 0, 0, 0, 0, 0);

        void t_UpgradeIndexMergePolicy::install(PyObject *module)
        {
          installType(&PY_TYPE(UpgradeIndexMergePolicy), module, "UpgradeIndexMergePolicy", 0);
        }

        void t_UpgradeIndexMergePolicy::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(UpgradeIndexMergePolicy).tp_dict, "class_", make_descriptor(UpgradeIndexMergePolicy::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(UpgradeIndexMergePolicy).tp_dict, "wrapfn_", make_descriptor(t_UpgradeIndexMergePolicy::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(UpgradeIndexMergePolicy).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_UpgradeIndexMergePolicy_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, UpgradeIndexMergePolicy::initializeClass, 1)))
            return NULL;
          return t_UpgradeIndexMergePolicy::wrap_Object(UpgradeIndexMergePolicy(((t_UpgradeIndexMergePolicy *) arg)->object.this$));
        }
        static PyObject *t_UpgradeIndexMergePolicy_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, UpgradeIndexMergePolicy::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_UpgradeIndexMergePolicy_init_(t_UpgradeIndexMergePolicy *self, PyObject *args, PyObject *kwds)
        {
          ::org::apache::lucene::index::MergePolicy a0((jobject) NULL);
          UpgradeIndexMergePolicy object((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::index::MergePolicy::initializeClass, &a0))
          {
            INT_CALL(object = UpgradeIndexMergePolicy(a0));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_UpgradeIndexMergePolicy_close(t_UpgradeIndexMergePolicy *self, PyObject *args)
        {

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(self->object.close());
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(UpgradeIndexMergePolicy), (PyObject *) self, "close", args, 2);
        }

        static PyObject *t_UpgradeIndexMergePolicy_findForcedDeletesMerges(t_UpgradeIndexMergePolicy *self, PyObject *args)
        {
          ::org::apache::lucene::index::SegmentInfos a0((jobject) NULL);
          ::org::apache::lucene::index::IndexWriter a1((jobject) NULL);
          ::org::apache::lucene::index::MergePolicy$MergeSpecification result((jobject) NULL);

          if (!parseArgs(args, "kk", ::org::apache::lucene::index::SegmentInfos::initializeClass, ::org::apache::lucene::index::IndexWriter::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = self->object.findForcedDeletesMerges(a0, a1));
            return ::org::apache::lucene::index::t_MergePolicy$MergeSpecification::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(UpgradeIndexMergePolicy), (PyObject *) self, "findForcedDeletesMerges", args, 2);
        }

        static PyObject *t_UpgradeIndexMergePolicy_findForcedMerges(t_UpgradeIndexMergePolicy *self, PyObject *args)
        {
          ::org::apache::lucene::index::SegmentInfos a0((jobject) NULL);
          jint a1;
          ::java::util::Map a2((jobject) NULL);
          PyTypeObject **p2;
          ::org::apache::lucene::index::IndexWriter a3((jobject) NULL);
          ::org::apache::lucene::index::MergePolicy$MergeSpecification result((jobject) NULL);

          if (!parseArgs(args, "kIKk", ::org::apache::lucene::index::SegmentInfos::initializeClass, ::java::util::Map::initializeClass, ::org::apache::lucene::index::IndexWriter::initializeClass, &a0, &a1, &a2, &p2, ::java::util::t_Map::parameters_, &a3))
          {
            OBJ_CALL(result = self->object.findForcedMerges(a0, a1, a2, a3));
            return ::org::apache::lucene::index::t_MergePolicy$MergeSpecification::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(UpgradeIndexMergePolicy), (PyObject *) self, "findForcedMerges", args, 2);
        }

        static PyObject *t_UpgradeIndexMergePolicy_findMerges(t_UpgradeIndexMergePolicy *self, PyObject *args)
        {
          ::org::apache::lucene::index::MergeTrigger a0((jobject) NULL);
          PyTypeObject **p0;
          ::org::apache::lucene::index::SegmentInfos a1((jobject) NULL);
          ::org::apache::lucene::index::IndexWriter a2((jobject) NULL);
          ::org::apache::lucene::index::MergePolicy$MergeSpecification result((jobject) NULL);

          if (!parseArgs(args, "Kkk", ::org::apache::lucene::index::MergeTrigger::initializeClass, ::org::apache::lucene::index::SegmentInfos::initializeClass, ::org::apache::lucene::index::IndexWriter::initializeClass, &a0, &p0, ::org::apache::lucene::index::t_MergeTrigger::parameters_, &a1, &a2))
          {
            OBJ_CALL(result = self->object.findMerges(a0, a1, a2));
            return ::org::apache::lucene::index::t_MergePolicy$MergeSpecification::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(UpgradeIndexMergePolicy), (PyObject *) self, "findMerges", args, 2);
        }

        static PyObject *t_UpgradeIndexMergePolicy_toString(t_UpgradeIndexMergePolicy *self, PyObject *args)
        {
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.toString());
            return j2p(result);
          }

          return callSuper(&PY_TYPE(UpgradeIndexMergePolicy), (PyObject *) self, "toString", args, 2);
        }

        static PyObject *t_UpgradeIndexMergePolicy_useCompoundFile(t_UpgradeIndexMergePolicy *self, PyObject *args)
        {
          ::org::apache::lucene::index::SegmentInfos a0((jobject) NULL);
          ::org::apache::lucene::index::SegmentCommitInfo a1((jobject) NULL);
          ::org::apache::lucene::index::IndexWriter a2((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "kkk", ::org::apache::lucene::index::SegmentInfos::initializeClass, ::org::apache::lucene::index::SegmentCommitInfo::initializeClass, ::org::apache::lucene::index::IndexWriter::initializeClass, &a0, &a1, &a2))
          {
            OBJ_CALL(result = self->object.useCompoundFile(a0, a1, a2));
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(UpgradeIndexMergePolicy), (PyObject *) self, "useCompoundFile", args, 2);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/pylucene/search/highlight/PythonFormatter.h"
#include "org/apache/lucene/search/highlight/TokenGroup.h"
#include "org/apache/lucene/search/highlight/Formatter.h"
#include "java/lang/String.h"
#include "java/lang/Throwable.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace pylucene {
      namespace search {
        namespace highlight {

          ::java::lang::Class *PythonFormatter::class$ = NULL;
          jmethodID *PythonFormatter::mids$ = NULL;
          bool PythonFormatter::live$ = false;

          jclass PythonFormatter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/pylucene/search/highlight/PythonFormatter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_finalize_54c6a166] = env->getMethodID(cls, "finalize", "()V");
              mids$[mid_highlightTerm_8838cc58] = env->getMethodID(cls, "highlightTerm", "(Ljava/lang/String;Lorg/apache/lucene/search/highlight/TokenGroup;)Ljava/lang/String;");
              mids$[mid_pythonDecRef_54c6a166] = env->getMethodID(cls, "pythonDecRef", "()V");
              mids$[mid_pythonExtension_54c6a17a] = env->getMethodID(cls, "pythonExtension", "()J");
              mids$[mid_pythonExtension_0ee6df2f] = env->getMethodID(cls, "pythonExtension", "(J)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          PythonFormatter::PythonFormatter() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          void PythonFormatter::finalize() const
          {
            env->callVoidMethod(this$, mids$[mid_finalize_54c6a166]);
          }

          jlong PythonFormatter::pythonExtension() const
          {
            return env->callLongMethod(this$, mids$[mid_pythonExtension_54c6a17a]);
          }

          void PythonFormatter::pythonExtension(jlong a0) const
          {
            env->callVoidMethod(this$, mids$[mid_pythonExtension_0ee6df2f], a0);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace pylucene {
      namespace search {
        namespace highlight {
          static PyObject *t_PythonFormatter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PythonFormatter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_PythonFormatter_init_(t_PythonFormatter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_PythonFormatter_finalize(t_PythonFormatter *self);
          static PyObject *t_PythonFormatter_pythonExtension(t_PythonFormatter *self, PyObject *args);
          static jobject JNICALL t_PythonFormatter_highlightTerm0(JNIEnv *jenv, jobject jobj, jobject a0, jobject a1);
          static void JNICALL t_PythonFormatter_pythonDecRef1(JNIEnv *jenv, jobject jobj);
          static PyObject *t_PythonFormatter_get__self(t_PythonFormatter *self, void *data);
          static PyGetSetDef t_PythonFormatter__fields_[] = {
            DECLARE_GET_FIELD(t_PythonFormatter, self),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_PythonFormatter__methods_[] = {
            DECLARE_METHOD(t_PythonFormatter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PythonFormatter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PythonFormatter, finalize, METH_NOARGS),
            DECLARE_METHOD(t_PythonFormatter, pythonExtension, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(PythonFormatter, t_PythonFormatter, ::java::lang::Object, PythonFormatter, t_PythonFormatter_init_, 0, 0, t_PythonFormatter__fields_, 0, 0);

          void t_PythonFormatter::install(PyObject *module)
          {
            installType(&PY_TYPE(PythonFormatter), module, "PythonFormatter", 1);
          }

          void t_PythonFormatter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(PythonFormatter).tp_dict, "class_", make_descriptor(PythonFormatter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(PythonFormatter).tp_dict, "wrapfn_", make_descriptor(t_PythonFormatter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(PythonFormatter).tp_dict, "boxfn_", make_descriptor(boxObject));
            jclass cls = env->getClass(PythonFormatter::initializeClass);
            JNINativeMethod methods[] = {
              { "highlightTerm", "(Ljava/lang/String;Lorg/apache/lucene/search/highlight/TokenGroup;)Ljava/lang/String;", (void *) t_PythonFormatter_highlightTerm0 },
              { "pythonDecRef", "()V", (void *) t_PythonFormatter_pythonDecRef1 },
            };
            env->registerNatives(cls, methods, 2);
          }

          static PyObject *t_PythonFormatter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, PythonFormatter::initializeClass, 1)))
              return NULL;
            return t_PythonFormatter::wrap_Object(PythonFormatter(((t_PythonFormatter *) arg)->object.this$));
          }
          static PyObject *t_PythonFormatter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, PythonFormatter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_PythonFormatter_init_(t_PythonFormatter *self, PyObject *args, PyObject *kwds)
          {
            PythonFormatter object((jobject) NULL);

            INT_CALL(object = PythonFormatter());
            self->object = object;

            Py_INCREF((PyObject *) self);
            self->object.pythonExtension((jlong) (Py_intptr_t) (void *) self);

            return 0;
          }

          static PyObject *t_PythonFormatter_finalize(t_PythonFormatter *self)
          {
            OBJ_CALL(self->object.finalize());
            Py_RETURN_NONE;
          }

          static PyObject *t_PythonFormatter_pythonExtension(t_PythonFormatter *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 0:
              {
                jlong result;
                OBJ_CALL(result = self->object.pythonExtension());
                return PyLong_FromLongLong((PY_LONG_LONG) result);
              }
              break;
             case 1:
              {
                jlong a0;

                if (!parseArgs(args, "J", &a0))
                {
                  OBJ_CALL(self->object.pythonExtension(a0));
                  Py_RETURN_NONE;
                }
              }
            }

            PyErr_SetArgsError((PyObject *) self, "pythonExtension", args);
            return NULL;
          }

          static jobject JNICALL t_PythonFormatter_highlightTerm0(JNIEnv *jenv, jobject jobj, jobject a0, jobject a1)
          {
            jlong ptr = jenv->CallLongMethod(jobj, PythonFormatter::mids$[PythonFormatter::mid_pythonExtension_54c6a17a]);
            PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
            PythonGIL gil(jenv);
            ::java::lang::String value((jobject) NULL);
            PyObject *o0 = env->fromJString((jstring) a0, 0);
            PyObject *o1 = ::org::apache::lucene::search::highlight::t_TokenGroup::wrap_Object(::org::apache::lucene::search::highlight::TokenGroup(a1));
            PyObject *result = PyObject_CallMethod(obj, "highlightTerm", "OO", o0, o1);
            Py_DECREF(o0);
            Py_DECREF(o1);
            if (!result)
              throwPythonError();
            else if (parseArg(result, "s", &value))
            {
              throwTypeError("highlightTerm", result);
              Py_DECREF(result);
            }
            else
            {
              jobj = jenv->NewLocalRef(value.this$);
              Py_DECREF(result);
              return jobj;
            }

            return (jobject) NULL;
          }

          static void JNICALL t_PythonFormatter_pythonDecRef1(JNIEnv *jenv, jobject jobj)
          {
            jlong ptr = jenv->CallLongMethod(jobj, PythonFormatter::mids$[PythonFormatter::mid_pythonExtension_54c6a17a]);
            PyObject *obj = (PyObject *) (Py_intptr_t) ptr;

            if (obj != NULL)
            {
              jenv->CallVoidMethod(jobj, PythonFormatter::mids$[PythonFormatter::mid_pythonExtension_0ee6df2f], (jlong) 0);
              env->finalizeObject(jenv, obj);
            }
          }

          static PyObject *t_PythonFormatter_get__self(t_PythonFormatter *self, void *data)
          {
            jlong ptr;
            OBJ_CALL(ptr = self->object.pythonExtension());
            PyObject *obj = (PyObject *) (Py_intptr_t) ptr;

            if (obj != NULL)
            {
              Py_INCREF(obj);
              return obj;
            }
            else
              Py_RETURN_NONE;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "java/io/PrintWriter.h"
#include "java/util/Locale.h"
#include "java/lang/Class.h"
#include "java/lang/Object.h"
#include "java/io/OutputStream.h"
#include "java/io/File.h"
#include "java/lang/CharSequence.h"
#include "java/lang/String.h"
#include "java/io/FileNotFoundException.h"
#include "java/io/UnsupportedEncodingException.h"
#include "JArray.h"

namespace java {
  namespace io {

    ::java::lang::Class *PrintWriter::class$ = NULL;
    jmethodID *PrintWriter::mids$ = NULL;
    bool PrintWriter::live$ = false;

    jclass PrintWriter::initializeClass(bool getOnly)
    {
      if (getOnly)
        return (jclass) (live$ ? class$->this$ : NULL);
      if (class$ == NULL)
      {
        jclass cls = (jclass) env->findClass("java/io/PrintWriter");

        mids$ = new jmethodID[max_mid];
        mids$[mid_init$_5fdc3f48] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;)V");
        mids$[mid_init$_c3dacf57] = env->getMethodID(cls, "<init>", "(Ljava/io/File;)V");
        mids$[mid_init$_5bcd5850] = env->getMethodID(cls, "<init>", "(Ljava/io/Writer;)V");
        mids$[mid_init$_82d865f8] = env->getMethodID(cls, "<init>", "(Ljava/io/OutputStream;)V");
        mids$[mid_init$_a0fd6605] = env->getMethodID(cls, "<init>", "(Ljava/io/OutputStream;Z)V");
        mids$[mid_init$_b8789389] = env->getMethodID(cls, "<init>", "(Ljava/io/File;Ljava/lang/String;)V");
        mids$[mid_init$_4a264742] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Ljava/lang/String;)V");
        mids$[mid_init$_53203e9d] = env->getMethodID(cls, "<init>", "(Ljava/io/Writer;Z)V");
        mids$[mid_append_4ea4b69d] = env->getMethodID(cls, "append", "(Ljava/lang/CharSequence;)Ljava/io/PrintWriter;");
        mids$[mid_append_6cdbddb5] = env->getMethodID(cls, "append", "(C)Ljava/io/PrintWriter;");
        mids$[mid_append_19a20159] = env->getMethodID(cls, "append", "(Ljava/lang/CharSequence;II)Ljava/io/PrintWriter;");
        mids$[mid_checkError_54c6a16a] = env->getMethodID(cls, "checkError", "()Z");
        mids$[mid_close_54c6a166] = env->getMethodID(cls, "close", "()V");
        mids$[mid_flush_54c6a166] = env->getMethodID(cls, "flush", "()V");
        mids$[mid_format_d515d1d7] = env->getMethodID(cls, "format", "(Ljava/lang/String;[Ljava/lang/Object;)Ljava/io/PrintWriter;");
        mids$[mid_format_0bde164c] = env->getMethodID(cls, "format", "(Ljava/util/Locale;Ljava/lang/String;[Ljava/lang/Object;)Ljava/io/PrintWriter;");
        mids$[mid_print_290588ee] = env->getMethodID(cls, "print", "(Ljava/lang/Object;)V");
        mids$[mid_print_5d1c7645] = env->getMethodID(cls, "print", "(D)V");
        mids$[mid_print_87fd545a] = env->getMethodID(cls, "print", "(C)V");
        mids$[mid_print_700e23d6] = env->getMethodID(cls, "print", "([C)V");
        mids$[mid_print_bb0c767f] = env->getMethodID(cls, "print", "(Z)V");
        mids$[mid_print_39c7bd3c] = env->getMethodID(cls, "print", "(I)V");
        mids$[mid_print_5fdc3f48] = env->getMethodID(cls, "print", "(Ljava/lang/String;)V");
        mids$[mid_print_06298cab] = env->getMethodID(cls, "print", "(F)V");
        mids$[mid_print_0ee6df2f] = env->getMethodID(cls, "print", "(J)V");
        mids$[mid_printf_d515d1d7] = env->getMethodID(cls, "printf", "(Ljava/lang/String;[Ljava/lang/Object;)Ljava/io/PrintWriter;");
        mids$[mid_printf_0bde164c] = env->getMethodID(cls, "printf", "(Ljava/util/Locale;Ljava/lang/String;[Ljava/lang/Object;)Ljava/io/PrintWriter;");
        mids$[mid_println_54c6a166] = env->getMethodID(cls, "println", "()V");
        mids$[mid_println_5fdc3f48] = env->getMethodID(cls, "println", "(Ljava/lang/String;)V");
        mids$[mid_println_0ee6df2f] = env->getMethodID(cls, "println", "(J)V");
        mids$[mid_println_bb0c767f] = env->getMethodID(cls, "println", "(Z)V");
        mids$[mid_println_06298cab] = env->getMethodID(cls, "println", "(F)V");
        mids$[mid_println_5d1c7645] = env->getMethodID(cls, "println", "(D)V");
        mids$[mid_println_39c7bd3c] = env->getMethodID(cls, "println", "(I)V");
        mids$[mid_println_700e23d6] = env->getMethodID(cls, "println", "([C)V");
        mids$[mid_println_290588ee] = env->getMethodID(cls, "println", "(Ljava/lang/Object;)V");
        mids$[mid_println_87fd545a] = env->getMethodID(cls, "println", "(C)V");
        mids$[mid_write_5fdc3f48] = env->getMethodID(cls, "write", "(Ljava/lang/String;)V");
        mids$[mid_write_700e23d6] = env->getMethodID(cls, "write", "([C)V");
        mids$[mid_write_39c7bd3c] = env->getMethodID(cls, "write", "(I)V");
        mids$[mid_write_6f0bb356] = env->getMethodID(cls, "write", "([CII)V");
        mids$[mid_write_555f322c] = env->getMethodID(cls, "write", "(Ljava/lang/String;II)V");
        mids$[mid_setError_54c6a166] = env->getMethodID(cls, "setError", "()V");
        mids$[mid_clearError_54c6a166] = env->getMethodID(cls, "clearError", "()V");

        class$ = (::java::lang::Class *) new JObject(cls);
        live$ = true;
      }
      return (jclass) class$->this$;
    }

    PrintWriter::PrintWriter(const ::java::lang::String & a0) : ::java::io::Writer(env->newObject(initializeClass, &mids$, mid_init$_5fdc3f48, a0.this$)) {}

    PrintWriter::PrintWriter(const ::java::io::File & a0) : ::java::io::Writer(env->newObject(initializeClass, &mids$, mid_init$_c3dacf57, a0.this$)) {}

    PrintWriter::PrintWriter(const ::java::io::Writer & a0) : ::java::io::Writer(env->newObject(initializeClass, &mids$, mid_init$_5bcd5850, a0.this$)) {}

    PrintWriter::PrintWriter(const ::java::io::OutputStream & a0) : ::java::io::Writer(env->newObject(initializeClass, &mids$, mid_init$_82d865f8, a0.this$)) {}

    PrintWriter::PrintWriter(const ::java::io::OutputStream & a0, jboolean a1) : ::java::io::Writer(env->newObject(initializeClass, &mids$, mid_init$_a0fd6605, a0.this$, a1)) {}

    PrintWriter::PrintWriter(const ::java::io::File & a0, const ::java::lang::String & a1) : ::java::io::Writer(env->newObject(initializeClass, &mids$, mid_init$_b8789389, a0.this$, a1.this$)) {}

    PrintWriter::PrintWriter(const ::java::lang::String & a0, const ::java::lang::String & a1) : ::java::io::Writer(env->newObject(initializeClass, &mids$, mid_init$_4a264742, a0.this$, a1.this$)) {}

    PrintWriter::PrintWriter(const ::java::io::Writer & a0, jboolean a1) : ::java::io::Writer(env->newObject(initializeClass, &mids$, mid_init$_53203e9d, a0.this$, a1)) {}

    PrintWriter PrintWriter::append(const ::java::lang::CharSequence & a0) const
    {
      return PrintWriter(env->callObjectMethod(this$, mids$[mid_append_4ea4b69d], a0.this$));
    }

    PrintWriter PrintWriter::append(jchar a0) const
    {
      return PrintWriter(env->callObjectMethod(this$, mids$[mid_append_6cdbddb5], a0));
    }

    PrintWriter PrintWriter::append(const ::java::lang::CharSequence & a0, jint a1, jint a2) const
    {
      return PrintWriter(env->callObjectMethod(this$, mids$[mid_append_19a20159], a0.this$, a1, a2));
    }

    jboolean PrintWriter::checkError() const
    {
      return env->callBooleanMethod(this$, mids$[mid_checkError_54c6a16a]);
    }

    void PrintWriter::close() const
    {
      env->callVoidMethod(this$, mids$[mid_close_54c6a166]);
    }

    void PrintWriter::flush() const
    {
      env->callVoidMethod(this$, mids$[mid_flush_54c6a166]);
    }

    PrintWriter PrintWriter::format(const ::java::lang::String & a0, const JArray< ::java::lang::Object > & a1) const
    {
      return PrintWriter(env->callObjectMethod(this$, mids$[mid_format_d515d1d7], a0.this$, a1.this$));
    }

    PrintWriter PrintWriter::format(const ::java::util::Locale & a0, const ::java::lang::String & a1, const JArray< ::java::lang::Object > & a2) const
    {
      return PrintWriter(env->callObjectMethod(this$, mids$[mid_format_0bde164c], a0.this$, a1.this$, a2.this$));
    }

    void PrintWriter::print(const ::java::lang::Object & a0) const
    {
      env->callVoidMethod(this$, mids$[mid_print_290588ee], a0.this$);
    }

    void PrintWriter::print(jdouble a0) const
    {
      env->callVoidMethod(this$, mids$[mid_print_5d1c7645], a0);
    }

    void PrintWriter::print(jchar a0) const
    {
      env->callVoidMethod(this$, mids$[mid_print_87fd545a], a0);
    }

    void PrintWriter::print(const JArray< jchar > & a0) const
    {
      env->callVoidMethod(this$, mids$[mid_print_700e23d6], a0.this$);
    }

    void PrintWriter::print(jboolean a0) const
    {
      env->callVoidMethod(this$, mids$[mid_print_bb0c767f], a0);
    }

    void PrintWriter::print(jint a0) const
    {
      env->callVoidMethod(this$, mids$[mid_print_39c7bd3c], a0);
    }

    void PrintWriter::print(const ::java::lang::String & a0) const
    {
      env->callVoidMethod(this$, mids$[mid_print_5fdc3f48], a0.this$);
    }

    void PrintWriter::print(jfloat a0) const
    {
      env->callVoidMethod(this$, mids$[mid_print_06298cab], a0);
    }

    void PrintWriter::print(jlong a0) const
    {
      env->callVoidMethod(this$, mids$[mid_print_0ee6df2f], a0);
    }

    PrintWriter PrintWriter::printf(const ::java::lang::String & a0, const JArray< ::java::lang::Object > & a1) const
    {
      return PrintWriter(env->callObjectMethod(this$, mids$[mid_printf_d515d1d7], a0.this$, a1.this$));
    }

    PrintWriter PrintWriter::printf(const ::java::util::Locale & a0, const ::java::lang::String & a1, const JArray< ::java::lang::Object > & a2) const
    {
      return PrintWriter(env->callObjectMethod(this$, mids$[mid_printf_0bde164c], a0.this$, a1.this$, a2.this$));
    }

    void PrintWriter::println() const
    {
      env->callVoidMethod(this$, mids$[mid_println_54c6a166]);
    }

    void PrintWriter::println(const ::java::lang::String & a0) const
    {
      env->callVoidMethod(this$, mids$[mid_println_5fdc3f48], a0.this$);
    }

    void PrintWriter::println(jlong a0) const
    {
      env->callVoidMethod(this$, mids$[mid_println_0ee6df2f], a0);
    }

    void PrintWriter::println(jboolean a0) const
    {
      env->callVoidMethod(this$, mids$[mid_println_bb0c767f], a0);
    }

    void PrintWriter::println(jfloat a0) const
    {
      env->callVoidMethod(this$, mids$[mid_println_06298cab], a0);
    }

    void PrintWriter::println(jdouble a0) const
    {
      env->callVoidMethod(this$, mids$[mid_println_5d1c7645], a0);
    }

    void PrintWriter::println(jint a0) const
    {
      env->callVoidMethod(this$, mids$[mid_println_39c7bd3c], a0);
    }

    void PrintWriter::println(const JArray< jchar > & a0) const
    {
      env->callVoidMethod(this$, mids$[mid_println_700e23d6], a0.this$);
    }

    void PrintWriter::println(const ::java::lang::Object & a0) const
    {
      env->callVoidMethod(this$, mids$[mid_println_290588ee], a0.this$);
    }

    void PrintWriter::println(jchar a0) const
    {
      env->callVoidMethod(this$, mids$[mid_println_87fd545a], a0);
    }

    void PrintWriter::write(const ::java::lang::String & a0) const
    {
      env->callVoidMethod(this$, mids$[mid_write_5fdc3f48], a0.this$);
    }

    void PrintWriter::write(const JArray< jchar > & a0) const
    {
      env->callVoidMethod(this$, mids$[mid_write_700e23d6], a0.this$);
    }

    void PrintWriter::write(jint a0) const
    {
      env->callVoidMethod(this$, mids$[mid_write_39c7bd3c], a0);
    }

    void PrintWriter::write(const JArray< jchar > & a0, jint a1, jint a2) const
    {
      env->callVoidMethod(this$, mids$[mid_write_6f0bb356], a0.this$, a1, a2);
    }

    void PrintWriter::write(const ::java::lang::String & a0, jint a1, jint a2) const
    {
      env->callVoidMethod(this$, mids$[mid_write_555f322c], a0.this$, a1, a2);
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace java {
  namespace io {
    static PyObject *t_PrintWriter_cast_(PyTypeObject *type, PyObject *arg);
    static PyObject *t_PrintWriter_instance_(PyTypeObject *type, PyObject *arg);
    static int t_PrintWriter_init_(t_PrintWriter *self, PyObject *args, PyObject *kwds);
    static PyObject *t_PrintWriter_append(t_PrintWriter *self, PyObject *args);
    static PyObject *t_PrintWriter_checkError(t_PrintWriter *self);
    static PyObject *t_PrintWriter_close(t_PrintWriter *self, PyObject *args);
    static PyObject *t_PrintWriter_flush(t_PrintWriter *self, PyObject *args);
    static PyObject *t_PrintWriter_format(t_PrintWriter *self, PyObject *args);
    static PyObject *t_PrintWriter_print(t_PrintWriter *self, PyObject *args);
    static PyObject *t_PrintWriter_printf(t_PrintWriter *self, PyObject *args);
    static PyObject *t_PrintWriter_println(t_PrintWriter *self, PyObject *args);
    static PyObject *t_PrintWriter_write(t_PrintWriter *self, PyObject *args);

    static PyMethodDef t_PrintWriter__methods_[] = {
      DECLARE_METHOD(t_PrintWriter, cast_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_PrintWriter, instance_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_PrintWriter, append, METH_VARARGS),
      DECLARE_METHOD(t_PrintWriter, checkError, METH_NOARGS),
      DECLARE_METHOD(t_PrintWriter, close, METH_VARARGS),
      DECLARE_METHOD(t_PrintWriter, flush, METH_VARARGS),
      DECLARE_METHOD(t_PrintWriter, format, METH_VARARGS),
      DECLARE_METHOD(t_PrintWriter, print, METH_VARARGS),
      DECLARE_METHOD(t_PrintWriter, printf, METH_VARARGS),
      DECLARE_METHOD(t_PrintWriter, println, METH_VARARGS),
      DECLARE_METHOD(t_PrintWriter, write, METH_VARARGS),
      { NULL, NULL, 0, NULL }
    };

    DECLARE_TYPE(PrintWriter, t_PrintWriter, ::java::io::Writer, PrintWriter, t_PrintWriter_init_, 0, 0, 0, 0, 0);

    void t_PrintWriter::install(PyObject *module)
    {
      installType(&PY_TYPE(PrintWriter), module, "PrintWriter", 0);
    }

    void t_PrintWriter::initialize(PyObject *module)
    {
      PyDict_SetItemString(PY_TYPE(PrintWriter).tp_dict, "class_", make_descriptor(PrintWriter::initializeClass, 1));
      PyDict_SetItemString(PY_TYPE(PrintWriter).tp_dict, "wrapfn_", make_descriptor(t_PrintWriter::wrap_jobject));
      PyDict_SetItemString(PY_TYPE(PrintWriter).tp_dict, "boxfn_", make_descriptor(boxObject));
    }

    static PyObject *t_PrintWriter_cast_(PyTypeObject *type, PyObject *arg)
    {
      if (!(arg = castCheck(arg, PrintWriter::initializeClass, 1)))
        return NULL;
      return t_PrintWriter::wrap_Object(PrintWriter(((t_PrintWriter *) arg)->object.this$));
    }
    static PyObject *t_PrintWriter_instance_(PyTypeObject *type, PyObject *arg)
    {
      if (!castCheck(arg, PrintWriter::initializeClass, 0))
        Py_RETURN_FALSE;
      Py_RETURN_TRUE;
    }

    static int t_PrintWriter_init_(t_PrintWriter *self, PyObject *args, PyObject *kwds)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 1:
        {
          ::java::lang::String a0((jobject) NULL);
          PrintWriter object((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            INT_CALL(object = PrintWriter(a0));
            self->object = object;
            break;
          }
        }
        {
          ::java::io::File a0((jobject) NULL);
          PrintWriter object((jobject) NULL);

          if (!parseArgs(args, "k", ::java::io::File::initializeClass, &a0))
          {
            INT_CALL(object = PrintWriter(a0));
            self->object = object;
            break;
          }
        }
        {
          ::java::io::Writer a0((jobject) NULL);
          PrintWriter object((jobject) NULL);

          if (!parseArgs(args, "k", ::java::io::Writer::initializeClass, &a0))
          {
            INT_CALL(object = PrintWriter(a0));
            self->object = object;
            break;
          }
        }
        {
          ::java::io::OutputStream a0((jobject) NULL);
          PrintWriter object((jobject) NULL);

          if (!parseArgs(args, "k", ::java::io::OutputStream::initializeClass, &a0))
          {
            INT_CALL(object = PrintWriter(a0));
            self->object = object;
            break;
          }
        }
        goto err;
       case 2:
        {
          ::java::io::OutputStream a0((jobject) NULL);
          jboolean a1;
          PrintWriter object((jobject) NULL);

          if (!parseArgs(args, "kZ", ::java::io::OutputStream::initializeClass, &a0, &a1))
          {
            INT_CALL(object = PrintWriter(a0, a1));
            self->object = object;
            break;
          }
        }
        {
          ::java::io::File a0((jobject) NULL);
          ::java::lang::String a1((jobject) NULL);
          PrintWriter object((jobject) NULL);

          if (!parseArgs(args, "ks", ::java::io::File::initializeClass, &a0, &a1))
          {
            INT_CALL(object = PrintWriter(a0, a1));
            self->object = object;
            break;
          }
        }
        {
          ::java::lang::String a0((jobject) NULL);
          ::java::lang::String a1((jobject) NULL);
          PrintWriter object((jobject) NULL);

          if (!parseArgs(args, "ss", &a0, &a1))
          {
            INT_CALL(object = PrintWriter(a0, a1));
            self->object = object;
            break;
          }
        }
        {
          ::java::io::Writer a0((jobject) NULL);
          jboolean a1;
          PrintWriter object((jobject) NULL);

          if (!parseArgs(args, "kZ", ::java::io::Writer::initializeClass, &a0, &a1))
          {
            INT_CALL(object = PrintWriter(a0, a1));
            self->object = object;
            break;
          }
        }
       default:
       err:
        PyErr_SetArgsError((PyObject *) self, "__init__", args);
        return -1;
      }

      return 0;
    }

    static PyObject *t_PrintWriter_append(t_PrintWriter *self, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 1:
        {
          ::java::lang::CharSequence a0((jobject) NULL);
          PrintWriter result((jobject) NULL);

          if (!parseArgs(args, "O", &::java::lang::PY_TYPE(CharSequence), &a0))
          {
            OBJ_CALL(result = self->object.append(a0));
            return t_PrintWriter::wrap_Object(result);
          }
        }
        {
          jchar a0;
          PrintWriter result((jobject) NULL);

          if (!parseArgs(args, "C", &a0))
          {
            OBJ_CALL(result = self->object.append(a0));
            return t_PrintWriter::wrap_Object(result);
          }
        }
        break;
       case 3:
        {
          ::java::lang::CharSequence a0((jobject) NULL);
          jint a1;
          jint a2;
          PrintWriter result((jobject) NULL);

          if (!parseArgs(args, "OII", &::java::lang::PY_TYPE(CharSequence), &a0, &a1, &a2))
          {
            OBJ_CALL(result = self->object.append(a0, a1, a2));
            return t_PrintWriter::wrap_Object(result);
          }
        }
      }

      return callSuper(&PY_TYPE(PrintWriter), (PyObject *) self, "append", args, 2);
    }

    static PyObject *t_PrintWriter_checkError(t_PrintWriter *self)
    {
      jboolean result;
      OBJ_CALL(result = self->object.checkError());
      Py_RETURN_BOOL(result);
    }

    static PyObject *t_PrintWriter_close(t_PrintWriter *self, PyObject *args)
    {

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(self->object.close());
        Py_RETURN_NONE;
      }

      return callSuper(&PY_TYPE(PrintWriter), (PyObject *) self, "close", args, 2);
    }

    static PyObject *t_PrintWriter_flush(t_PrintWriter *self, PyObject *args)
    {

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(self->object.flush());
        Py_RETURN_NONE;
      }

      return callSuper(&PY_TYPE(PrintWriter), (PyObject *) self, "flush", args, 2);
    }

    static PyObject *t_PrintWriter_format(t_PrintWriter *self, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 2:
        {
          ::java::lang::String a0((jobject) NULL);
          JArray< ::java::lang::Object > a1((jobject) NULL);
          PrintWriter result((jobject) NULL);

          if (!parseArgs(args, "s[o", &a0, &a1))
          {
            OBJ_CALL(result = self->object.format(a0, a1));
            return t_PrintWriter::wrap_Object(result);
          }
        }
        break;
       case 3:
        {
          ::java::util::Locale a0((jobject) NULL);
          ::java::lang::String a1((jobject) NULL);
          JArray< ::java::lang::Object > a2((jobject) NULL);
          PrintWriter result((jobject) NULL);

          if (!parseArgs(args, "ks[o", ::java::util::Locale::initializeClass, &a0, &a1, &a2))
          {
            OBJ_CALL(result = self->object.format(a0, a1, a2));
            return t_PrintWriter::wrap_Object(result);
          }
        }
      }

      PyErr_SetArgsError((PyObject *) self, "format", args);
      return NULL;
    }

    static PyObject *t_PrintWriter_print(t_PrintWriter *self, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 1:
        {
          ::java::lang::Object a0((jobject) NULL);

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(self->object.print(a0));
            Py_RETURN_NONE;
          }
        }
        {
          jdouble a0;

          if (!parseArgs(args, "D", &a0))
          {
            OBJ_CALL(self->object.print(a0));
            Py_RETURN_NONE;
          }
        }
        {
          jchar a0;

          if (!parseArgs(args, "C", &a0))
          {
            OBJ_CALL(self->object.print(a0));
            Py_RETURN_NONE;
          }
        }
        {
          JArray< jchar > a0((jobject) NULL);

          if (!parseArgs(args, "[C", &a0))
          {
            OBJ_CALL(self->object.print(a0));
            Py_RETURN_NONE;
          }
        }
        {
          jboolean a0;

          if (!parseArgs(args, "Z", &a0))
          {
            OBJ_CALL(self->object.print(a0));
            Py_RETURN_NONE;
          }
        }
        {
          jint a0;

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(self->object.print(a0));
            Py_RETURN_NONE;
          }
        }
        {
          ::java::lang::String a0((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(self->object.print(a0));
            Py_RETURN_NONE;
          }
        }
        {
          jfloat a0;

          if (!parseArgs(args, "F", &a0))
          {
            OBJ_CALL(self->object.print(a0));
            Py_RETURN_NONE;
          }
        }
        {
          jlong a0;

          if (!parseArgs(args, "J", &a0))
          {
            OBJ_CALL(self->object.print(a0));
            Py_RETURN_NONE;
          }
        }
      }

      PyErr_SetArgsError((PyObject *) self, "print", args);
      return NULL;
    }

    static PyObject *t_PrintWriter_printf(t_PrintWriter *self, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 2:
        {
          ::java::lang::String a0((jobject) NULL);
          JArray< ::java::lang::Object > a1((jobject) NULL);
          PrintWriter result((jobject) NULL);

          if (!parseArgs(args, "s[o", &a0, &a1))
          {
            OBJ_CALL(result = self->object.printf(a0, a1));
            return t_PrintWriter::wrap_Object(result);
          }
        }
        break;
       case 3:
        {
          ::java::util::Locale a0((jobject) NULL);
          ::java::lang::String a1((jobject) NULL);
          JArray< ::java::lang::Object > a2((jobject) NULL);
          PrintWriter result((jobject) NULL);

          if (!parseArgs(args, "ks[o", ::java::util::Locale::initializeClass, &a0, &a1, &a2))
          {
            OBJ_CALL(result = self->object.printf(a0, a1, a2));
            return t_PrintWriter::wrap_Object(result);
          }
        }
      }

      PyErr_SetArgsError((PyObject *) self, "printf", args);
      return NULL;
    }

    static PyObject *t_PrintWriter_println(t_PrintWriter *self, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 0:
        {
          OBJ_CALL(self->object.println());
          Py_RETURN_NONE;
        }
        break;
       case 1:
        {
          ::java::lang::String a0((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(self->object.println(a0));
            Py_RETURN_NONE;
          }
        }
        {
          jlong a0;

          if (!parseArgs(args, "J", &a0))
          {
            OBJ_CALL(self->object.println(a0));
            Py_RETURN_NONE;
          }
        }
        {
          jboolean a0;

          if (!parseArgs(args, "Z", &a0))
          {
            OBJ_CALL(self->object.println(a0));
            Py_RETURN_NONE;
          }
        }
        {
          jfloat a0;

          if (!parseArgs(args, "F", &a0))
          {
            OBJ_CALL(self->object.println(a0));
            Py_RETURN_NONE;
          }
        }
        {
          jdouble a0;

          if (!parseArgs(args, "D", &a0))
          {
            OBJ_CALL(self->object.println(a0));
            Py_RETURN_NONE;
          }
        }
        {
          jint a0;

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(self->object.println(a0));
            Py_RETURN_NONE;
          }
        }
        {
          JArray< jchar > a0((jobject) NULL);

          if (!parseArgs(args, "[C", &a0))
          {
            OBJ_CALL(self->object.println(a0));
            Py_RETURN_NONE;
          }
        }
        {
          ::java::lang::Object a0((jobject) NULL);

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(self->object.println(a0));
            Py_RETURN_NONE;
          }
        }
        {
          jchar a0;

          if (!parseArgs(args, "C", &a0))
          {
            OBJ_CALL(self->object.println(a0));
            Py_RETURN_NONE;
          }
        }
      }

      PyErr_SetArgsError((PyObject *) self, "println", args);
      return NULL;
    }

    static PyObject *t_PrintWriter_write(t_PrintWriter *self, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 1:
        {
          ::java::lang::String a0((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(self->object.write(a0));
            Py_RETURN_NONE;
          }
        }
        {
          JArray< jchar > a0((jobject) NULL);

          if (!parseArgs(args, "[C", &a0))
          {
            OBJ_CALL(self->object.write(a0));
            Py_RETURN_NONE;
          }
        }
        {
          jint a0;

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(self->object.write(a0));
            Py_RETURN_NONE;
          }
        }
        break;
       case 3:
        {
          JArray< jchar > a0((jobject) NULL);
          jint a1;
          jint a2;

          if (!parseArgs(args, "[CII", &a0, &a1, &a2))
          {
            OBJ_CALL(self->object.write(a0, a1, a2));
            Py_RETURN_NONE;
          }
        }
        {
          ::java::lang::String a0((jobject) NULL);
          jint a1;
          jint a2;

          if (!parseArgs(args, "sII", &a0, &a1, &a2))
          {
            OBJ_CALL(self->object.write(a0, a1, a2));
            Py_RETURN_NONE;
          }
        }
      }

      return callSuper(&PY_TYPE(PrintWriter), (PyObject *) self, "write", args, 2);
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/messages/NLSException.h"
#include "org/apache/lucene/queryparser/flexible/messages/Message.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace messages {

            ::java::lang::Class *NLSException::class$ = NULL;
            jmethodID *NLSException::mids$ = NULL;
            bool NLSException::live$ = false;

            jclass NLSException::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/messages/NLSException");

                mids$ = new jmethodID[max_mid];
                mids$[mid_getMessageObject_1bceed44] = env->getMethodID(cls, "getMessageObject", "()Lorg/apache/lucene/queryparser/flexible/messages/Message;");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            ::org::apache::lucene::queryparser::flexible::messages::Message NLSException::getMessageObject() const
            {
              return ::org::apache::lucene::queryparser::flexible::messages::Message(env->callObjectMethod(this$, mids$[mid_getMessageObject_1bceed44]));
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace messages {
            static PyObject *t_NLSException_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_NLSException_instance_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_NLSException_getMessageObject(t_NLSException *self);
            static PyObject *t_NLSException_get__messageObject(t_NLSException *self, void *data);
            static PyGetSetDef t_NLSException__fields_[] = {
              DECLARE_GET_FIELD(t_NLSException, messageObject),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_NLSException__methods_[] = {
              DECLARE_METHOD(t_NLSException, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_NLSException, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_NLSException, getMessageObject, METH_NOARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(NLSException, t_NLSException, ::java::lang::Object, NLSException, abstract_init, 0, 0, t_NLSException__fields_, 0, 0);

            void t_NLSException::install(PyObject *module)
            {
              installType(&PY_TYPE(NLSException), module, "NLSException", 0);
            }

            void t_NLSException::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(NLSException).tp_dict, "class_", make_descriptor(NLSException::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(NLSException).tp_dict, "wrapfn_", make_descriptor(t_NLSException::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(NLSException).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_NLSException_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, NLSException::initializeClass, 1)))
                return NULL;
              return t_NLSException::wrap_Object(NLSException(((t_NLSException *) arg)->object.this$));
            }
            static PyObject *t_NLSException_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, NLSException::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static PyObject *t_NLSException_getMessageObject(t_NLSException *self)
            {
              ::org::apache::lucene::queryparser::flexible::messages::Message result((jobject) NULL);
              OBJ_CALL(result = self->object.getMessageObject());
              return ::org::apache::lucene::queryparser::flexible::messages::t_Message::wrap_Object(result);
            }

            static PyObject *t_NLSException_get__messageObject(t_NLSException *self, void *data)
            {
              ::org::apache::lucene::queryparser::flexible::messages::Message value((jobject) NULL);
              OBJ_CALL(value = self->object.getMessageObject());
              return ::org::apache::lucene::queryparser::flexible::messages::t_Message::wrap_Object(value);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/ar/ArabicStemFilter.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ar {

          ::java::lang::Class *ArabicStemFilter::class$ = NULL;
          jmethodID *ArabicStemFilter::mids$ = NULL;
          bool ArabicStemFilter::live$ = false;

          jclass ArabicStemFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/ar/ArabicStemFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_c7c794dc] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;)V");
              mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ArabicStemFilter::ArabicStemFilter(const ::org::apache::lucene::analysis::TokenStream & a0) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_c7c794dc, a0.this$)) {}

          jboolean ArabicStemFilter::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_54c6a16a]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ar {
          static PyObject *t_ArabicStemFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_ArabicStemFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_ArabicStemFilter_init_(t_ArabicStemFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_ArabicStemFilter_incrementToken(t_ArabicStemFilter *self, PyObject *args);

          static PyMethodDef t_ArabicStemFilter__methods_[] = {
            DECLARE_METHOD(t_ArabicStemFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ArabicStemFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ArabicStemFilter, incrementToken, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(ArabicStemFilter, t_ArabicStemFilter, ::org::apache::lucene::analysis::TokenFilter, ArabicStemFilter, t_ArabicStemFilter_init_, 0, 0, 0, 0, 0);

          void t_ArabicStemFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(ArabicStemFilter), module, "ArabicStemFilter", 0);
          }

          void t_ArabicStemFilter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(ArabicStemFilter).tp_dict, "class_", make_descriptor(ArabicStemFilter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(ArabicStemFilter).tp_dict, "wrapfn_", make_descriptor(t_ArabicStemFilter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(ArabicStemFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_ArabicStemFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, ArabicStemFilter::initializeClass, 1)))
              return NULL;
            return t_ArabicStemFilter::wrap_Object(ArabicStemFilter(((t_ArabicStemFilter *) arg)->object.this$));
          }
          static PyObject *t_ArabicStemFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, ArabicStemFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_ArabicStemFilter_init_(t_ArabicStemFilter *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ArabicStemFilter object((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              INT_CALL(object = ArabicStemFilter(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_ArabicStemFilter_incrementToken(t_ArabicStemFilter *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(ArabicStemFilter), (PyObject *) self, "incrementToken", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/FieldInfosFormat.h"
#include "org/apache/lucene/codecs/FieldInfosWriter.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/codecs/FieldInfosReader.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {

        ::java::lang::Class *FieldInfosFormat::class$ = NULL;
        jmethodID *FieldInfosFormat::mids$ = NULL;
        bool FieldInfosFormat::live$ = false;

        jclass FieldInfosFormat::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/FieldInfosFormat");

            mids$ = new jmethodID[max_mid];
            mids$[mid_getFieldInfosReader_6ecd5494] = env->getMethodID(cls, "getFieldInfosReader", "()Lorg/apache/lucene/codecs/FieldInfosReader;");
            mids$[mid_getFieldInfosWriter_211ffa60] = env->getMethodID(cls, "getFieldInfosWriter", "()Lorg/apache/lucene/codecs/FieldInfosWriter;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        ::org::apache::lucene::codecs::FieldInfosReader FieldInfosFormat::getFieldInfosReader() const
        {
          return ::org::apache::lucene::codecs::FieldInfosReader(env->callObjectMethod(this$, mids$[mid_getFieldInfosReader_6ecd5494]));
        }

        ::org::apache::lucene::codecs::FieldInfosWriter FieldInfosFormat::getFieldInfosWriter() const
        {
          return ::org::apache::lucene::codecs::FieldInfosWriter(env->callObjectMethod(this$, mids$[mid_getFieldInfosWriter_211ffa60]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        static PyObject *t_FieldInfosFormat_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FieldInfosFormat_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FieldInfosFormat_getFieldInfosReader(t_FieldInfosFormat *self);
        static PyObject *t_FieldInfosFormat_getFieldInfosWriter(t_FieldInfosFormat *self);
        static PyObject *t_FieldInfosFormat_get__fieldInfosReader(t_FieldInfosFormat *self, void *data);
        static PyObject *t_FieldInfosFormat_get__fieldInfosWriter(t_FieldInfosFormat *self, void *data);
        static PyGetSetDef t_FieldInfosFormat__fields_[] = {
          DECLARE_GET_FIELD(t_FieldInfosFormat, fieldInfosReader),
          DECLARE_GET_FIELD(t_FieldInfosFormat, fieldInfosWriter),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_FieldInfosFormat__methods_[] = {
          DECLARE_METHOD(t_FieldInfosFormat, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FieldInfosFormat, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FieldInfosFormat, getFieldInfosReader, METH_NOARGS),
          DECLARE_METHOD(t_FieldInfosFormat, getFieldInfosWriter, METH_NOARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(FieldInfosFormat, t_FieldInfosFormat, ::java::lang::Object, FieldInfosFormat, abstract_init, 0, 0, t_FieldInfosFormat__fields_, 0, 0);

        void t_FieldInfosFormat::install(PyObject *module)
        {
          installType(&PY_TYPE(FieldInfosFormat), module, "FieldInfosFormat", 0);
        }

        void t_FieldInfosFormat::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(FieldInfosFormat).tp_dict, "class_", make_descriptor(FieldInfosFormat::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(FieldInfosFormat).tp_dict, "wrapfn_", make_descriptor(t_FieldInfosFormat::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(FieldInfosFormat).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_FieldInfosFormat_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, FieldInfosFormat::initializeClass, 1)))
            return NULL;
          return t_FieldInfosFormat::wrap_Object(FieldInfosFormat(((t_FieldInfosFormat *) arg)->object.this$));
        }
        static PyObject *t_FieldInfosFormat_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, FieldInfosFormat::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_FieldInfosFormat_getFieldInfosReader(t_FieldInfosFormat *self)
        {
          ::org::apache::lucene::codecs::FieldInfosReader result((jobject) NULL);
          OBJ_CALL(result = self->object.getFieldInfosReader());
          return ::org::apache::lucene::codecs::t_FieldInfosReader::wrap_Object(result);
        }

        static PyObject *t_FieldInfosFormat_getFieldInfosWriter(t_FieldInfosFormat *self)
        {
          ::org::apache::lucene::codecs::FieldInfosWriter result((jobject) NULL);
          OBJ_CALL(result = self->object.getFieldInfosWriter());
          return ::org::apache::lucene::codecs::t_FieldInfosWriter::wrap_Object(result);
        }

        static PyObject *t_FieldInfosFormat_get__fieldInfosReader(t_FieldInfosFormat *self, void *data)
        {
          ::org::apache::lucene::codecs::FieldInfosReader value((jobject) NULL);
          OBJ_CALL(value = self->object.getFieldInfosReader());
          return ::org::apache::lucene::codecs::t_FieldInfosReader::wrap_Object(value);
        }

        static PyObject *t_FieldInfosFormat_get__fieldInfosWriter(t_FieldInfosFormat *self, void *data)
        {
          ::org::apache::lucene::codecs::FieldInfosWriter value((jobject) NULL);
          OBJ_CALL(value = self->object.getFieldInfosWriter());
          return ::org::apache::lucene::codecs::t_FieldInfosWriter::wrap_Object(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "java/io/DataInputStream.h"
#include "java/io/DataInput.h"
#include "java/lang/String.h"
#include "java/io/InputStream.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace java {
  namespace io {

    ::java::lang::Class *DataInputStream::class$ = NULL;
    jmethodID *DataInputStream::mids$ = NULL;
    bool DataInputStream::live$ = false;

    jclass DataInputStream::initializeClass(bool getOnly)
    {
      if (getOnly)
        return (jclass) (live$ ? class$->this$ : NULL);
      if (class$ == NULL)
      {
        jclass cls = (jclass) env->findClass("java/io/DataInputStream");

        mids$ = new jmethodID[max_mid];
        mids$[mid_init$_be2e4f90] = env->getMethodID(cls, "<init>", "(Ljava/io/InputStream;)V");
        mids$[mid_read_49b4f134] = env->getMethodID(cls, "read", "([B)I");
        mids$[mid_read_86f44340] = env->getMethodID(cls, "read", "([BII)I");
        mids$[mid_readBoolean_54c6a16a] = env->getMethodID(cls, "readBoolean", "()Z");
        mids$[mid_readByte_54c6a172] = env->getMethodID(cls, "readByte", "()B");
        mids$[mid_readChar_54c6a173] = env->getMethodID(cls, "readChar", "()C");
        mids$[mid_readDouble_54c6a174] = env->getMethodID(cls, "readDouble", "()D");
        mids$[mid_readFloat_54c6a176] = env->getMethodID(cls, "readFloat", "()F");
        mids$[mid_readFully_49b4f12b] = env->getMethodID(cls, "readFully", "([B)V");
        mids$[mid_readFully_86f4435f] = env->getMethodID(cls, "readFully", "([BII)V");
        mids$[mid_readInt_54c6a179] = env->getMethodID(cls, "readInt", "()I");
        mids$[mid_readLine_14c7b5c5] = env->getMethodID(cls, "readLine", "()Ljava/lang/String;");
        mids$[mid_readLong_54c6a17a] = env->getMethodID(cls, "readLong", "()J");
        mids$[mid_readShort_54c6a163] = env->getMethodID(cls, "readShort", "()S");
        mids$[mid_readUTF_14c7b5c5] = env->getMethodID(cls, "readUTF", "()Ljava/lang/String;");
        mids$[mid_readUTF_b3b10019] = env->getStaticMethodID(cls, "readUTF", "(Ljava/io/DataInput;)Ljava/lang/String;");
        mids$[mid_readUnsignedByte_54c6a179] = env->getMethodID(cls, "readUnsignedByte", "()I");
        mids$[mid_readUnsignedShort_54c6a179] = env->getMethodID(cls, "readUnsignedShort", "()I");
        mids$[mid_skipBytes_39c7bd23] = env->getMethodID(cls, "skipBytes", "(I)I");

        class$ = (::java::lang::Class *) new JObject(cls);
        live$ = true;
      }
      return (jclass) class$->this$;
    }

    DataInputStream::DataInputStream(const ::java::io::InputStream & a0) : ::java::io::FilterInputStream(env->newObject(initializeClass, &mids$, mid_init$_be2e4f90, a0.this$)) {}

    jint DataInputStream::read(const JArray< jbyte > & a0) const
    {
      return env->callIntMethod(this$, mids$[mid_read_49b4f134], a0.this$);
    }

    jint DataInputStream::read(const JArray< jbyte > & a0, jint a1, jint a2) const
    {
      return env->callIntMethod(this$, mids$[mid_read_86f44340], a0.this$, a1, a2);
    }

    jboolean DataInputStream::readBoolean() const
    {
      return env->callBooleanMethod(this$, mids$[mid_readBoolean_54c6a16a]);
    }

    jbyte DataInputStream::readByte() const
    {
      return env->callByteMethod(this$, mids$[mid_readByte_54c6a172]);
    }

    jchar DataInputStream::readChar() const
    {
      return env->callCharMethod(this$, mids$[mid_readChar_54c6a173]);
    }

    jdouble DataInputStream::readDouble() const
    {
      return env->callDoubleMethod(this$, mids$[mid_readDouble_54c6a174]);
    }

    jfloat DataInputStream::readFloat() const
    {
      return env->callFloatMethod(this$, mids$[mid_readFloat_54c6a176]);
    }

    void DataInputStream::readFully(const JArray< jbyte > & a0) const
    {
      env->callVoidMethod(this$, mids$[mid_readFully_49b4f12b], a0.this$);
    }

    void DataInputStream::readFully(const JArray< jbyte > & a0, jint a1, jint a2) const
    {
      env->callVoidMethod(this$, mids$[mid_readFully_86f4435f], a0.this$, a1, a2);
    }

    jint DataInputStream::readInt() const
    {
      return env->callIntMethod(this$, mids$[mid_readInt_54c6a179]);
    }

    ::java::lang::String DataInputStream::readLine() const
    {
      return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_readLine_14c7b5c5]));
    }

    jlong DataInputStream::readLong() const
    {
      return env->callLongMethod(this$, mids$[mid_readLong_54c6a17a]);
    }

    jshort DataInputStream::readShort() const
    {
      return env->callShortMethod(this$, mids$[mid_readShort_54c6a163]);
    }

    ::java::lang::String DataInputStream::readUTF() const
    {
      return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_readUTF_14c7b5c5]));
    }

    ::java::lang::String DataInputStream::readUTF(const ::java::io::DataInput & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::lang::String(env->callStaticObjectMethod(cls, mids$[mid_readUTF_b3b10019], a0.this$));
    }

    jint DataInputStream::readUnsignedByte() const
    {
      return env->callIntMethod(this$, mids$[mid_readUnsignedByte_54c6a179]);
    }

    jint DataInputStream::readUnsignedShort() const
    {
      return env->callIntMethod(this$, mids$[mid_readUnsignedShort_54c6a179]);
    }

    jint DataInputStream::skipBytes(jint a0) const
    {
      return env->callIntMethod(this$, mids$[mid_skipBytes_39c7bd23], a0);
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace java {
  namespace io {
    static PyObject *t_DataInputStream_cast_(PyTypeObject *type, PyObject *arg);
    static PyObject *t_DataInputStream_instance_(PyTypeObject *type, PyObject *arg);
    static int t_DataInputStream_init_(t_DataInputStream *self, PyObject *args, PyObject *kwds);
    static PyObject *t_DataInputStream_read(t_DataInputStream *self, PyObject *args);
    static PyObject *t_DataInputStream_readBoolean(t_DataInputStream *self);
    static PyObject *t_DataInputStream_readByte(t_DataInputStream *self);
    static PyObject *t_DataInputStream_readChar(t_DataInputStream *self);
    static PyObject *t_DataInputStream_readDouble(t_DataInputStream *self);
    static PyObject *t_DataInputStream_readFloat(t_DataInputStream *self);
    static PyObject *t_DataInputStream_readFully(t_DataInputStream *self, PyObject *args);
    static PyObject *t_DataInputStream_readInt(t_DataInputStream *self);
    static PyObject *t_DataInputStream_readLine(t_DataInputStream *self);
    static PyObject *t_DataInputStream_readLong(t_DataInputStream *self);
    static PyObject *t_DataInputStream_readShort(t_DataInputStream *self);
    static PyObject *t_DataInputStream_readUTF(t_DataInputStream *self);
    static PyObject *t_DataInputStream_readUTF_(PyTypeObject *type, PyObject *arg);
    static PyObject *t_DataInputStream_readUnsignedByte(t_DataInputStream *self);
    static PyObject *t_DataInputStream_readUnsignedShort(t_DataInputStream *self);
    static PyObject *t_DataInputStream_skipBytes(t_DataInputStream *self, PyObject *arg);

    static PyMethodDef t_DataInputStream__methods_[] = {
      DECLARE_METHOD(t_DataInputStream, cast_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_DataInputStream, instance_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_DataInputStream, read, METH_VARARGS),
      DECLARE_METHOD(t_DataInputStream, readBoolean, METH_NOARGS),
      DECLARE_METHOD(t_DataInputStream, readByte, METH_NOARGS),
      DECLARE_METHOD(t_DataInputStream, readChar, METH_NOARGS),
      DECLARE_METHOD(t_DataInputStream, readDouble, METH_NOARGS),
      DECLARE_METHOD(t_DataInputStream, readFloat, METH_NOARGS),
      DECLARE_METHOD(t_DataInputStream, readFully, METH_VARARGS),
      DECLARE_METHOD(t_DataInputStream, readInt, METH_NOARGS),
      DECLARE_METHOD(t_DataInputStream, readLine, METH_NOARGS),
      DECLARE_METHOD(t_DataInputStream, readLong, METH_NOARGS),
      DECLARE_METHOD(t_DataInputStream, readShort, METH_NOARGS),
      DECLARE_METHOD(t_DataInputStream, readUTF, METH_NOARGS),
      DECLARE_METHOD(t_DataInputStream, readUTF_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_DataInputStream, readUnsignedByte, METH_NOARGS),
      DECLARE_METHOD(t_DataInputStream, readUnsignedShort, METH_NOARGS),
      DECLARE_METHOD(t_DataInputStream, skipBytes, METH_O),
      { NULL, NULL, 0, NULL }
    };

    DECLARE_TYPE(DataInputStream, t_DataInputStream, ::java::io::FilterInputStream, DataInputStream, t_DataInputStream_init_, 0, 0, 0, 0, 0);

    void t_DataInputStream::install(PyObject *module)
    {
      installType(&PY_TYPE(DataInputStream), module, "DataInputStream", 0);
    }

    void t_DataInputStream::initialize(PyObject *module)
    {
      PyDict_SetItemString(PY_TYPE(DataInputStream).tp_dict, "class_", make_descriptor(DataInputStream::initializeClass, 1));
      PyDict_SetItemString(PY_TYPE(DataInputStream).tp_dict, "wrapfn_", make_descriptor(t_DataInputStream::wrap_jobject));
      PyDict_SetItemString(PY_TYPE(DataInputStream).tp_dict, "boxfn_", make_descriptor(boxObject));
    }

    static PyObject *t_DataInputStream_cast_(PyTypeObject *type, PyObject *arg)
    {
      if (!(arg = castCheck(arg, DataInputStream::initializeClass, 1)))
        return NULL;
      return t_DataInputStream::wrap_Object(DataInputStream(((t_DataInputStream *) arg)->object.this$));
    }
    static PyObject *t_DataInputStream_instance_(PyTypeObject *type, PyObject *arg)
    {
      if (!castCheck(arg, DataInputStream::initializeClass, 0))
        Py_RETURN_FALSE;
      Py_RETURN_TRUE;
    }

    static int t_DataInputStream_init_(t_DataInputStream *self, PyObject *args, PyObject *kwds)
    {
      ::java::io::InputStream a0((jobject) NULL);
      DataInputStream object((jobject) NULL);

      if (!parseArgs(args, "k", ::java::io::InputStream::initializeClass, &a0))
      {
        INT_CALL(object = DataInputStream(a0));
        self->object = object;
      }
      else
      {
        PyErr_SetArgsError((PyObject *) self, "__init__", args);
        return -1;
      }

      return 0;
    }

    static PyObject *t_DataInputStream_read(t_DataInputStream *self, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 1:
        {
          JArray< jbyte > a0((jobject) NULL);
          jint result;

          if (!parseArgs(args, "[B", &a0))
          {
            OBJ_CALL(result = self->object.read(a0));
            return PyInt_FromLong((long) result);
          }
        }
        break;
       case 3:
        {
          JArray< jbyte > a0((jobject) NULL);
          jint a1;
          jint a2;
          jint result;

          if (!parseArgs(args, "[BII", &a0, &a1, &a2))
          {
            OBJ_CALL(result = self->object.read(a0, a1, a2));
            return PyInt_FromLong((long) result);
          }
        }
      }

      return callSuper(&PY_TYPE(DataInputStream), (PyObject *) self, "read", args, 2);
    }

    static PyObject *t_DataInputStream_readBoolean(t_DataInputStream *self)
    {
      jboolean result;
      OBJ_CALL(result = self->object.readBoolean());
      Py_RETURN_BOOL(result);
    }

    static PyObject *t_DataInputStream_readByte(t_DataInputStream *self)
    {
      jbyte result;
      OBJ_CALL(result = self->object.readByte());
      return PyInt_FromLong((long) result);
    }

    static PyObject *t_DataInputStream_readChar(t_DataInputStream *self)
    {
      jchar result;
      OBJ_CALL(result = self->object.readChar());
      return PyUnicode_FromUnicode((Py_UNICODE *) &result, 1);
    }

    static PyObject *t_DataInputStream_readDouble(t_DataInputStream *self)
    {
      jdouble result;
      OBJ_CALL(result = self->object.readDouble());
      return PyFloat_FromDouble((double) result);
    }

    static PyObject *t_DataInputStream_readFloat(t_DataInputStream *self)
    {
      jfloat result;
      OBJ_CALL(result = self->object.readFloat());
      return PyFloat_FromDouble((double) result);
    }

    static PyObject *t_DataInputStream_readFully(t_DataInputStream *self, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 1:
        {
          JArray< jbyte > a0((jobject) NULL);

          if (!parseArgs(args, "[B", &a0))
          {
            OBJ_CALL(self->object.readFully(a0));
            Py_RETURN_NONE;
          }
        }
        break;
       case 3:
        {
          JArray< jbyte > a0((jobject) NULL);
          jint a1;
          jint a2;

          if (!parseArgs(args, "[BII", &a0, &a1, &a2))
          {
            OBJ_CALL(self->object.readFully(a0, a1, a2));
            Py_RETURN_NONE;
          }
        }
      }

      PyErr_SetArgsError((PyObject *) self, "readFully", args);
      return NULL;
    }

    static PyObject *t_DataInputStream_readInt(t_DataInputStream *self)
    {
      jint result;
      OBJ_CALL(result = self->object.readInt());
      return PyInt_FromLong((long) result);
    }

    static PyObject *t_DataInputStream_readLine(t_DataInputStream *self)
    {
      ::java::lang::String result((jobject) NULL);
      OBJ_CALL(result = self->object.readLine());
      return j2p(result);
    }

    static PyObject *t_DataInputStream_readLong(t_DataInputStream *self)
    {
      jlong result;
      OBJ_CALL(result = self->object.readLong());
      return PyLong_FromLongLong((PY_LONG_LONG) result);
    }

    static PyObject *t_DataInputStream_readShort(t_DataInputStream *self)
    {
      jshort result;
      OBJ_CALL(result = self->object.readShort());
      return PyInt_FromLong((long) result);
    }

    static PyObject *t_DataInputStream_readUTF(t_DataInputStream *self)
    {
      ::java::lang::String result((jobject) NULL);
      OBJ_CALL(result = self->object.readUTF());
      return j2p(result);
    }

    static PyObject *t_DataInputStream_readUTF_(PyTypeObject *type, PyObject *arg)
    {
      ::java::io::DataInput a0((jobject) NULL);
      ::java::lang::String result((jobject) NULL);

      if (!parseArg(arg, "k", ::java::io::DataInput::initializeClass, &a0))
      {
        OBJ_CALL(result = ::java::io::DataInputStream::readUTF(a0));
        return j2p(result);
      }

      PyErr_SetArgsError(type, "readUTF_", arg);
      return NULL;
    }

    static PyObject *t_DataInputStream_readUnsignedByte(t_DataInputStream *self)
    {
      jint result;
      OBJ_CALL(result = self->object.readUnsignedByte());
      return PyInt_FromLong((long) result);
    }

    static PyObject *t_DataInputStream_readUnsignedShort(t_DataInputStream *self)
    {
      jint result;
      OBJ_CALL(result = self->object.readUnsignedShort());
      return PyInt_FromLong((long) result);
    }

    static PyObject *t_DataInputStream_skipBytes(t_DataInputStream *self, PyObject *arg)
    {
      jint a0;
      jint result;

      if (!parseArg(arg, "I", &a0))
      {
        OBJ_CALL(result = self->object.skipBytes(a0));
        return PyInt_FromLong((long) result);
      }

      PyErr_SetArgsError((PyObject *) self, "skipBytes", arg);
      return NULL;
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/document/LongField.h"
#include "org/apache/lucene/document/FieldType.h"
#include "java/lang/String.h"
#include "org/apache/lucene/document/Field$Store.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace document {

        ::java::lang::Class *LongField::class$ = NULL;
        jmethodID *LongField::mids$ = NULL;
        bool LongField::live$ = false;
        ::org::apache::lucene::document::FieldType *LongField::TYPE_NOT_STORED = NULL;
        ::org::apache::lucene::document::FieldType *LongField::TYPE_STORED = NULL;

        jclass LongField::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/document/LongField");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_45798648] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;JLorg/apache/lucene/document/Field$Store;)V");
            mids$[mid_init$_4cb133a7] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;JLorg/apache/lucene/document/FieldType;)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            cls = (jclass) class$->this$;

            TYPE_NOT_STORED = new ::org::apache::lucene::document::FieldType(env->getStaticObjectField(cls, "TYPE_NOT_STORED", "Lorg/apache/lucene/document/FieldType;"));
            TYPE_STORED = new ::org::apache::lucene::document::FieldType(env->getStaticObjectField(cls, "TYPE_STORED", "Lorg/apache/lucene/document/FieldType;"));
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        LongField::LongField(const ::java::lang::String & a0, jlong a1, const ::org::apache::lucene::document::Field$Store & a2) : ::org::apache::lucene::document::Field(env->newObject(initializeClass, &mids$, mid_init$_45798648, a0.this$, a1, a2.this$)) {}

        LongField::LongField(const ::java::lang::String & a0, jlong a1, const ::org::apache::lucene::document::FieldType & a2) : ::org::apache::lucene::document::Field(env->newObject(initializeClass, &mids$, mid_init$_4cb133a7, a0.this$, a1, a2.this$)) {}
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace document {
        static PyObject *t_LongField_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_LongField_instance_(PyTypeObject *type, PyObject *arg);
        static int t_LongField_init_(t_LongField *self, PyObject *args, PyObject *kwds);

        static PyMethodDef t_LongField__methods_[] = {
          DECLARE_METHOD(t_LongField, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_LongField, instance_, METH_O | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(LongField, t_LongField, ::org::apache::lucene::document::Field, LongField, t_LongField_init_, 0, 0, 0, 0, 0);

        void t_LongField::install(PyObject *module)
        {
          installType(&PY_TYPE(LongField), module, "LongField", 0);
        }

        void t_LongField::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(LongField).tp_dict, "class_", make_descriptor(LongField::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(LongField).tp_dict, "wrapfn_", make_descriptor(t_LongField::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(LongField).tp_dict, "boxfn_", make_descriptor(boxObject));
          env->getClass(LongField::initializeClass);
          PyDict_SetItemString(PY_TYPE(LongField).tp_dict, "TYPE_NOT_STORED", make_descriptor(::org::apache::lucene::document::t_FieldType::wrap_Object(*LongField::TYPE_NOT_STORED)));
          PyDict_SetItemString(PY_TYPE(LongField).tp_dict, "TYPE_STORED", make_descriptor(::org::apache::lucene::document::t_FieldType::wrap_Object(*LongField::TYPE_STORED)));
        }

        static PyObject *t_LongField_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, LongField::initializeClass, 1)))
            return NULL;
          return t_LongField::wrap_Object(LongField(((t_LongField *) arg)->object.this$));
        }
        static PyObject *t_LongField_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, LongField::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_LongField_init_(t_LongField *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 3:
            {
              ::java::lang::String a0((jobject) NULL);
              jlong a1;
              ::org::apache::lucene::document::Field$Store a2((jobject) NULL);
              PyTypeObject **p2;
              LongField object((jobject) NULL);

              if (!parseArgs(args, "sJK", ::org::apache::lucene::document::Field$Store::initializeClass, &a0, &a1, &a2, &p2, ::org::apache::lucene::document::t_Field$Store::parameters_))
              {
                INT_CALL(object = LongField(a0, a1, a2));
                self->object = object;
                break;
              }
            }
            {
              ::java::lang::String a0((jobject) NULL);
              jlong a1;
              ::org::apache::lucene::document::FieldType a2((jobject) NULL);
              LongField object((jobject) NULL);

              if (!parseArgs(args, "sJk", ::org::apache::lucene::document::FieldType::initializeClass, &a0, &a1, &a2))
              {
                INT_CALL(object = LongField(a0, a1, a2));
                self->object = object;
                break;
              }
            }
           default:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/FieldComparator$RelevanceComparator.h"
#include "java/lang/Float.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/search/Scorer.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *FieldComparator$RelevanceComparator::class$ = NULL;
        jmethodID *FieldComparator$RelevanceComparator::mids$ = NULL;
        bool FieldComparator$RelevanceComparator::live$ = false;

        jclass FieldComparator$RelevanceComparator::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/FieldComparator$RelevanceComparator");

            mids$ = new jmethodID[max_mid];
            mids$[mid_compare_d8d154b9] = env->getMethodID(cls, "compare", "(II)I");
            mids$[mid_compareBottom_39c7bd23] = env->getMethodID(cls, "compareBottom", "(I)I");
            mids$[mid_compareTop_39c7bd23] = env->getMethodID(cls, "compareTop", "(I)I");
            mids$[mid_compareValues_f4628831] = env->getMethodID(cls, "compareValues", "(Ljava/lang/Float;Ljava/lang/Float;)I");
            mids$[mid_copy_d8d154a6] = env->getMethodID(cls, "copy", "(II)V");
            mids$[mid_setBottom_39c7bd3c] = env->getMethodID(cls, "setBottom", "(I)V");
            mids$[mid_setNextReader_6329aed7] = env->getMethodID(cls, "setNextReader", "(Lorg/apache/lucene/index/AtomicReaderContext;)Lorg/apache/lucene/search/FieldComparator;");
            mids$[mid_setScorer_8be0880c] = env->getMethodID(cls, "setScorer", "(Lorg/apache/lucene/search/Scorer;)V");
            mids$[mid_setTopValue_6b30eb6a] = env->getMethodID(cls, "setTopValue", "(Ljava/lang/Float;)V");
            mids$[mid_value_c4acb5a1] = env->getMethodID(cls, "value", "(I)Ljava/lang/Float;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        jint FieldComparator$RelevanceComparator::compare(jint a0, jint a1) const
        {
          return env->callIntMethod(this$, mids$[mid_compare_d8d154b9], a0, a1);
        }

        jint FieldComparator$RelevanceComparator::compareBottom(jint a0) const
        {
          return env->callIntMethod(this$, mids$[mid_compareBottom_39c7bd23], a0);
        }

        jint FieldComparator$RelevanceComparator::compareTop(jint a0) const
        {
          return env->callIntMethod(this$, mids$[mid_compareTop_39c7bd23], a0);
        }

        jint FieldComparator$RelevanceComparator::compareValues(const ::java::lang::Float & a0, const ::java::lang::Float & a1) const
        {
          return env->callIntMethod(this$, mids$[mid_compareValues_f4628831], a0.this$, a1.this$);
        }

        void FieldComparator$RelevanceComparator::copy(jint a0, jint a1) const
        {
          env->callVoidMethod(this$, mids$[mid_copy_d8d154a6], a0, a1);
        }

        void FieldComparator$RelevanceComparator::setBottom(jint a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setBottom_39c7bd3c], a0);
        }

        ::org::apache::lucene::search::FieldComparator FieldComparator$RelevanceComparator::setNextReader(const ::org::apache::lucene::index::AtomicReaderContext & a0) const
        {
          return ::org::apache::lucene::search::FieldComparator(env->callObjectMethod(this$, mids$[mid_setNextReader_6329aed7], a0.this$));
        }

        void FieldComparator$RelevanceComparator::setScorer(const ::org::apache::lucene::search::Scorer & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setScorer_8be0880c], a0.this$);
        }

        void FieldComparator$RelevanceComparator::setTopValue(const ::java::lang::Float & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setTopValue_6b30eb6a], a0.this$);
        }

        ::java::lang::Float FieldComparator$RelevanceComparator::value(jint a0) const
        {
          return ::java::lang::Float(env->callObjectMethod(this$, mids$[mid_value_c4acb5a1], a0));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_FieldComparator$RelevanceComparator_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FieldComparator$RelevanceComparator_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FieldComparator$RelevanceComparator_of_(t_FieldComparator$RelevanceComparator *self, PyObject *args);
        static PyObject *t_FieldComparator$RelevanceComparator_compare(t_FieldComparator$RelevanceComparator *self, PyObject *args);
        static PyObject *t_FieldComparator$RelevanceComparator_compareBottom(t_FieldComparator$RelevanceComparator *self, PyObject *args);
        static PyObject *t_FieldComparator$RelevanceComparator_compareTop(t_FieldComparator$RelevanceComparator *self, PyObject *args);
        static PyObject *t_FieldComparator$RelevanceComparator_compareValues(t_FieldComparator$RelevanceComparator *self, PyObject *args);
        static PyObject *t_FieldComparator$RelevanceComparator_copy(t_FieldComparator$RelevanceComparator *self, PyObject *args);
        static PyObject *t_FieldComparator$RelevanceComparator_setBottom(t_FieldComparator$RelevanceComparator *self, PyObject *args);
        static PyObject *t_FieldComparator$RelevanceComparator_setNextReader(t_FieldComparator$RelevanceComparator *self, PyObject *args);
        static PyObject *t_FieldComparator$RelevanceComparator_setScorer(t_FieldComparator$RelevanceComparator *self, PyObject *args);
        static PyObject *t_FieldComparator$RelevanceComparator_setTopValue(t_FieldComparator$RelevanceComparator *self, PyObject *args);
        static PyObject *t_FieldComparator$RelevanceComparator_value(t_FieldComparator$RelevanceComparator *self, PyObject *args);
        static int t_FieldComparator$RelevanceComparator_set__bottom(t_FieldComparator$RelevanceComparator *self, PyObject *arg, void *data);
        static int t_FieldComparator$RelevanceComparator_set__nextReader(t_FieldComparator$RelevanceComparator *self, PyObject *arg, void *data);
        static int t_FieldComparator$RelevanceComparator_set__scorer(t_FieldComparator$RelevanceComparator *self, PyObject *arg, void *data);
        static int t_FieldComparator$RelevanceComparator_set__topValue(t_FieldComparator$RelevanceComparator *self, PyObject *arg, void *data);
        static PyObject *t_FieldComparator$RelevanceComparator_get__parameters_(t_FieldComparator$RelevanceComparator *self, void *data);
        static PyGetSetDef t_FieldComparator$RelevanceComparator__fields_[] = {
          DECLARE_SET_FIELD(t_FieldComparator$RelevanceComparator, bottom),
          DECLARE_SET_FIELD(t_FieldComparator$RelevanceComparator, nextReader),
          DECLARE_SET_FIELD(t_FieldComparator$RelevanceComparator, scorer),
          DECLARE_SET_FIELD(t_FieldComparator$RelevanceComparator, topValue),
          DECLARE_GET_FIELD(t_FieldComparator$RelevanceComparator, parameters_),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_FieldComparator$RelevanceComparator__methods_[] = {
          DECLARE_METHOD(t_FieldComparator$RelevanceComparator, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FieldComparator$RelevanceComparator, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FieldComparator$RelevanceComparator, of_, METH_VARARGS),
          DECLARE_METHOD(t_FieldComparator$RelevanceComparator, compare, METH_VARARGS),
          DECLARE_METHOD(t_FieldComparator$RelevanceComparator, compareBottom, METH_VARARGS),
          DECLARE_METHOD(t_FieldComparator$RelevanceComparator, compareTop, METH_VARARGS),
          DECLARE_METHOD(t_FieldComparator$RelevanceComparator, compareValues, METH_VARARGS),
          DECLARE_METHOD(t_FieldComparator$RelevanceComparator, copy, METH_VARARGS),
          DECLARE_METHOD(t_FieldComparator$RelevanceComparator, setBottom, METH_VARARGS),
          DECLARE_METHOD(t_FieldComparator$RelevanceComparator, setNextReader, METH_VARARGS),
          DECLARE_METHOD(t_FieldComparator$RelevanceComparator, setScorer, METH_VARARGS),
          DECLARE_METHOD(t_FieldComparator$RelevanceComparator, setTopValue, METH_VARARGS),
          DECLARE_METHOD(t_FieldComparator$RelevanceComparator, value, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(FieldComparator$RelevanceComparator, t_FieldComparator$RelevanceComparator, ::org::apache::lucene::search::FieldComparator, FieldComparator$RelevanceComparator, abstract_init, 0, 0, t_FieldComparator$RelevanceComparator__fields_, 0, 0);
        PyObject *t_FieldComparator$RelevanceComparator::wrap_Object(const FieldComparator$RelevanceComparator& object, PyTypeObject *p0)
        {
          PyObject *obj = t_FieldComparator$RelevanceComparator::wrap_Object(object);
          if (obj != NULL && obj != Py_None)
          {
            t_FieldComparator$RelevanceComparator *self = (t_FieldComparator$RelevanceComparator *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        PyObject *t_FieldComparator$RelevanceComparator::wrap_jobject(const jobject& object, PyTypeObject *p0)
        {
          PyObject *obj = t_FieldComparator$RelevanceComparator::wrap_jobject(object);
          if (obj != NULL && obj != Py_None)
          {
            t_FieldComparator$RelevanceComparator *self = (t_FieldComparator$RelevanceComparator *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        void t_FieldComparator$RelevanceComparator::install(PyObject *module)
        {
          installType(&PY_TYPE(FieldComparator$RelevanceComparator), module, "FieldComparator$RelevanceComparator", 0);
        }

        void t_FieldComparator$RelevanceComparator::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(FieldComparator$RelevanceComparator).tp_dict, "class_", make_descriptor(FieldComparator$RelevanceComparator::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(FieldComparator$RelevanceComparator).tp_dict, "wrapfn_", make_descriptor(t_FieldComparator$RelevanceComparator::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(FieldComparator$RelevanceComparator).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_FieldComparator$RelevanceComparator_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, FieldComparator$RelevanceComparator::initializeClass, 1)))
            return NULL;
          return t_FieldComparator$RelevanceComparator::wrap_Object(FieldComparator$RelevanceComparator(((t_FieldComparator$RelevanceComparator *) arg)->object.this$));
        }
        static PyObject *t_FieldComparator$RelevanceComparator_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, FieldComparator$RelevanceComparator::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_FieldComparator$RelevanceComparator_of_(t_FieldComparator$RelevanceComparator *self, PyObject *args)
        {
          if (!parseArg(args, "T", 1, &(self->parameters)))
            Py_RETURN_SELF;
          return PyErr_SetArgsError((PyObject *) self, "of_", args);
        }

        static PyObject *t_FieldComparator$RelevanceComparator_compare(t_FieldComparator$RelevanceComparator *self, PyObject *args)
        {
          jint a0;
          jint a1;
          jint result;

          if (!parseArgs(args, "II", &a0, &a1))
          {
            OBJ_CALL(result = self->object.compare(a0, a1));
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(FieldComparator$RelevanceComparator), (PyObject *) self, "compare", args, 2);
        }

        static PyObject *t_FieldComparator$RelevanceComparator_compareBottom(t_FieldComparator$RelevanceComparator *self, PyObject *args)
        {
          jint a0;
          jint result;

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(result = self->object.compareBottom(a0));
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(FieldComparator$RelevanceComparator), (PyObject *) self, "compareBottom", args, 2);
        }

        static PyObject *t_FieldComparator$RelevanceComparator_compareTop(t_FieldComparator$RelevanceComparator *self, PyObject *args)
        {
          jint a0;
          jint result;

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(result = self->object.compareTop(a0));
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(FieldComparator$RelevanceComparator), (PyObject *) self, "compareTop", args, 2);
        }

        static PyObject *t_FieldComparator$RelevanceComparator_compareValues(t_FieldComparator$RelevanceComparator *self, PyObject *args)
        {
          ::java::lang::Float a0((jobject) NULL);
          ::java::lang::Float a1((jobject) NULL);
          jint result;

          if (!parseArgs(args, "OO", &::java::lang::PY_TYPE(Float), &::java::lang::PY_TYPE(Float), &a0, &a1))
          {
            OBJ_CALL(result = self->object.compareValues(a0, a1));
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(FieldComparator$RelevanceComparator), (PyObject *) self, "compareValues", args, 2);
        }

        static PyObject *t_FieldComparator$RelevanceComparator_copy(t_FieldComparator$RelevanceComparator *self, PyObject *args)
        {
          jint a0;
          jint a1;

          if (!parseArgs(args, "II", &a0, &a1))
          {
            OBJ_CALL(self->object.copy(a0, a1));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(FieldComparator$RelevanceComparator), (PyObject *) self, "copy", args, 2);
        }

        static PyObject *t_FieldComparator$RelevanceComparator_setBottom(t_FieldComparator$RelevanceComparator *self, PyObject *args)
        {
          jint a0;

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(self->object.setBottom(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(FieldComparator$RelevanceComparator), (PyObject *) self, "setBottom", args, 2);
        }

        static PyObject *t_FieldComparator$RelevanceComparator_setNextReader(t_FieldComparator$RelevanceComparator *self, PyObject *args)
        {
          ::org::apache::lucene::index::AtomicReaderContext a0((jobject) NULL);
          ::org::apache::lucene::search::FieldComparator result((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.setNextReader(a0));
            return ::org::apache::lucene::search::t_FieldComparator::wrap_Object(result, &::java::lang::PY_TYPE(Float));
          }

          return callSuper(&PY_TYPE(FieldComparator$RelevanceComparator), (PyObject *) self, "setNextReader", args, 2);
        }

        static PyObject *t_FieldComparator$RelevanceComparator_setScorer(t_FieldComparator$RelevanceComparator *self, PyObject *args)
        {
          ::org::apache::lucene::search::Scorer a0((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::search::Scorer::initializeClass, &a0))
          {
            OBJ_CALL(self->object.setScorer(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(FieldComparator$RelevanceComparator), (PyObject *) self, "setScorer", args, 2);
        }

        static PyObject *t_FieldComparator$RelevanceComparator_setTopValue(t_FieldComparator$RelevanceComparator *self, PyObject *args)
        {
          ::java::lang::Float a0((jobject) NULL);

          if (!parseArgs(args, "O", &::java::lang::PY_TYPE(Float), &a0))
          {
            OBJ_CALL(self->object.setTopValue(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(FieldComparator$RelevanceComparator), (PyObject *) self, "setTopValue", args, 2);
        }

        static PyObject *t_FieldComparator$RelevanceComparator_value(t_FieldComparator$RelevanceComparator *self, PyObject *args)
        {
          jint a0;
          ::java::lang::Float result((jobject) NULL);

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(result = self->object.value(a0));
            return ::java::lang::t_Float::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(FieldComparator$RelevanceComparator), (PyObject *) self, "value", args, 2);
        }
        static PyObject *t_FieldComparator$RelevanceComparator_get__parameters_(t_FieldComparator$RelevanceComparator *self, void *data)
        {
          return typeParameters(self->parameters, sizeof(self->parameters));
        }

        static int t_FieldComparator$RelevanceComparator_set__bottom(t_FieldComparator$RelevanceComparator *self, PyObject *arg, void *data)
        {
          {
            jint value;
            if (!parseArg(arg, "I", &value))
            {
              INT_CALL(self->object.setBottom(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "bottom", arg);
          return -1;
        }

        static int t_FieldComparator$RelevanceComparator_set__nextReader(t_FieldComparator$RelevanceComparator *self, PyObject *arg, void *data)
        {
          {
            ::org::apache::lucene::index::AtomicReaderContext value((jobject) NULL);
            if (!parseArg(arg, "k", ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &value))
            {
              INT_CALL(self->object.setNextReader(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "nextReader", arg);
          return -1;
        }

        static int t_FieldComparator$RelevanceComparator_set__scorer(t_FieldComparator$RelevanceComparator *self, PyObject *arg, void *data)
        {
          {
            ::org::apache::lucene::search::Scorer value((jobject) NULL);
            if (!parseArg(arg, "k", ::org::apache::lucene::search::Scorer::initializeClass, &value))
            {
              INT_CALL(self->object.setScorer(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "scorer", arg);
          return -1;
        }

        static int t_FieldComparator$RelevanceComparator_set__topValue(t_FieldComparator$RelevanceComparator *self, PyObject *arg, void *data)
        {
          {
            ::java::lang::Float value((jobject) NULL);
            if (!parseArg(arg, "O", &::java::lang::PY_TYPE(Float), &value))
            {
              INT_CALL(self->object.setTopValue(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "topValue", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/MergePolicy.h"
#include "java/io/Closeable.h"
#include "org/apache/lucene/index/IndexWriter.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/index/MergeTrigger.h"
#include "org/apache/lucene/index/SegmentInfos.h"
#include "org/apache/lucene/index/SegmentCommitInfo.h"
#include "java/util/Map.h"
#include "java/io/IOException.h"
#include "java/lang/Boolean.h"
#include "org/apache/lucene/index/MergePolicy$MergeSpecification.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *MergePolicy::class$ = NULL;
        jmethodID *MergePolicy::mids$ = NULL;
        bool MergePolicy::live$ = false;

        jclass MergePolicy::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/MergePolicy");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_close_54c6a166] = env->getMethodID(cls, "close", "()V");
            mids$[mid_findForcedDeletesMerges_581dbc49] = env->getMethodID(cls, "findForcedDeletesMerges", "(Lorg/apache/lucene/index/SegmentInfos;Lorg/apache/lucene/index/IndexWriter;)Lorg/apache/lucene/index/MergePolicy$MergeSpecification;");
            mids$[mid_findForcedMerges_4fe4a5b5] = env->getMethodID(cls, "findForcedMerges", "(Lorg/apache/lucene/index/SegmentInfos;ILjava/util/Map;Lorg/apache/lucene/index/IndexWriter;)Lorg/apache/lucene/index/MergePolicy$MergeSpecification;");
            mids$[mid_findMerges_cada0df0] = env->getMethodID(cls, "findMerges", "(Lorg/apache/lucene/index/MergeTrigger;Lorg/apache/lucene/index/SegmentInfos;Lorg/apache/lucene/index/IndexWriter;)Lorg/apache/lucene/index/MergePolicy$MergeSpecification;");
            mids$[mid_getMaxCFSSegmentSizeMB_54c6a174] = env->getMethodID(cls, "getMaxCFSSegmentSizeMB", "()D");
            mids$[mid_getNoCFSRatio_54c6a174] = env->getMethodID(cls, "getNoCFSRatio", "()D");
            mids$[mid_setMaxCFSSegmentSizeMB_5d1c7645] = env->getMethodID(cls, "setMaxCFSSegmentSizeMB", "(D)V");
            mids$[mid_setNoCFSRatio_5d1c7645] = env->getMethodID(cls, "setNoCFSRatio", "(D)V");
            mids$[mid_useCompoundFile_70dc8488] = env->getMethodID(cls, "useCompoundFile", "(Lorg/apache/lucene/index/SegmentInfos;Lorg/apache/lucene/index/SegmentCommitInfo;Lorg/apache/lucene/index/IndexWriter;)Z");
            mids$[mid_size_5454cb07] = env->getMethodID(cls, "size", "(Lorg/apache/lucene/index/SegmentCommitInfo;Lorg/apache/lucene/index/IndexWriter;)J");
            mids$[mid_isMerged_70dc8488] = env->getMethodID(cls, "isMerged", "(Lorg/apache/lucene/index/SegmentInfos;Lorg/apache/lucene/index/SegmentCommitInfo;Lorg/apache/lucene/index/IndexWriter;)Z");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        MergePolicy::MergePolicy() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        void MergePolicy::close() const
        {
          env->callVoidMethod(this$, mids$[mid_close_54c6a166]);
        }

        ::org::apache::lucene::index::MergePolicy$MergeSpecification MergePolicy::findForcedDeletesMerges(const ::org::apache::lucene::index::SegmentInfos & a0, const ::org::apache::lucene::index::IndexWriter & a1) const
        {
          return ::org::apache::lucene::index::MergePolicy$MergeSpecification(env->callObjectMethod(this$, mids$[mid_findForcedDeletesMerges_581dbc49], a0.this$, a1.this$));
        }

        ::org::apache::lucene::index::MergePolicy$MergeSpecification MergePolicy::findForcedMerges(const ::org::apache::lucene::index::SegmentInfos & a0, jint a1, const ::java::util::Map & a2, const ::org::apache::lucene::index::IndexWriter & a3) const
        {
          return ::org::apache::lucene::index::MergePolicy$MergeSpecification(env->callObjectMethod(this$, mids$[mid_findForcedMerges_4fe4a5b5], a0.this$, a1, a2.this$, a3.this$));
        }

        ::org::apache::lucene::index::MergePolicy$MergeSpecification MergePolicy::findMerges(const ::org::apache::lucene::index::MergeTrigger & a0, const ::org::apache::lucene::index::SegmentInfos & a1, const ::org::apache::lucene::index::IndexWriter & a2) const
        {
          return ::org::apache::lucene::index::MergePolicy$MergeSpecification(env->callObjectMethod(this$, mids$[mid_findMerges_cada0df0], a0.this$, a1.this$, a2.this$));
        }

        jdouble MergePolicy::getMaxCFSSegmentSizeMB() const
        {
          return env->callDoubleMethod(this$, mids$[mid_getMaxCFSSegmentSizeMB_54c6a174]);
        }

        jdouble MergePolicy::getNoCFSRatio() const
        {
          return env->callDoubleMethod(this$, mids$[mid_getNoCFSRatio_54c6a174]);
        }

        void MergePolicy::setMaxCFSSegmentSizeMB(jdouble a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setMaxCFSSegmentSizeMB_5d1c7645], a0);
        }

        void MergePolicy::setNoCFSRatio(jdouble a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setNoCFSRatio_5d1c7645], a0);
        }

        jboolean MergePolicy::useCompoundFile(const ::org::apache::lucene::index::SegmentInfos & a0, const ::org::apache::lucene::index::SegmentCommitInfo & a1, const ::org::apache::lucene::index::IndexWriter & a2) const
        {
          return env->callBooleanMethod(this$, mids$[mid_useCompoundFile_70dc8488], a0.this$, a1.this$, a2.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"
#include "org/apache/lucene/index/MergePolicy$MergeAbortedException.h"
#include "org/apache/lucene/index/MergePolicy$MergeException.h"
#include "org/apache/lucene/index/MergePolicy$OneMerge.h"
#include "org/apache/lucene/index/MergePolicy$DocMap.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_MergePolicy_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_MergePolicy_instance_(PyTypeObject *type, PyObject *arg);
        static int t_MergePolicy_init_(t_MergePolicy *self, PyObject *args, PyObject *kwds);
        static PyObject *t_MergePolicy_close(t_MergePolicy *self);
        static PyObject *t_MergePolicy_findForcedDeletesMerges(t_MergePolicy *self, PyObject *args);
        static PyObject *t_MergePolicy_findForcedMerges(t_MergePolicy *self, PyObject *args);
        static PyObject *t_MergePolicy_findMerges(t_MergePolicy *self, PyObject *args);
        static PyObject *t_MergePolicy_getMaxCFSSegmentSizeMB(t_MergePolicy *self);
        static PyObject *t_MergePolicy_getNoCFSRatio(t_MergePolicy *self);
        static PyObject *t_MergePolicy_setMaxCFSSegmentSizeMB(t_MergePolicy *self, PyObject *arg);
        static PyObject *t_MergePolicy_setNoCFSRatio(t_MergePolicy *self, PyObject *arg);
        static PyObject *t_MergePolicy_useCompoundFile(t_MergePolicy *self, PyObject *args);
        static PyObject *t_MergePolicy_get__maxCFSSegmentSizeMB(t_MergePolicy *self, void *data);
        static int t_MergePolicy_set__maxCFSSegmentSizeMB(t_MergePolicy *self, PyObject *arg, void *data);
        static PyObject *t_MergePolicy_get__noCFSRatio(t_MergePolicy *self, void *data);
        static int t_MergePolicy_set__noCFSRatio(t_MergePolicy *self, PyObject *arg, void *data);
        static PyGetSetDef t_MergePolicy__fields_[] = {
          DECLARE_GETSET_FIELD(t_MergePolicy, maxCFSSegmentSizeMB),
          DECLARE_GETSET_FIELD(t_MergePolicy, noCFSRatio),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_MergePolicy__methods_[] = {
          DECLARE_METHOD(t_MergePolicy, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MergePolicy, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MergePolicy, close, METH_NOARGS),
          DECLARE_METHOD(t_MergePolicy, findForcedDeletesMerges, METH_VARARGS),
          DECLARE_METHOD(t_MergePolicy, findForcedMerges, METH_VARARGS),
          DECLARE_METHOD(t_MergePolicy, findMerges, METH_VARARGS),
          DECLARE_METHOD(t_MergePolicy, getMaxCFSSegmentSizeMB, METH_NOARGS),
          DECLARE_METHOD(t_MergePolicy, getNoCFSRatio, METH_NOARGS),
          DECLARE_METHOD(t_MergePolicy, setMaxCFSSegmentSizeMB, METH_O),
          DECLARE_METHOD(t_MergePolicy, setNoCFSRatio, METH_O),
          DECLARE_METHOD(t_MergePolicy, useCompoundFile, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(MergePolicy, t_MergePolicy, ::java::lang::Object, MergePolicy, t_MergePolicy_init_, 0, 0, t_MergePolicy__fields_, 0, 0);

        void t_MergePolicy::install(PyObject *module)
        {
          installType(&PY_TYPE(MergePolicy), module, "MergePolicy", 0);
          PyDict_SetItemString(PY_TYPE(MergePolicy).tp_dict, "MergeAbortedException", make_descriptor(&PY_TYPE(MergePolicy$MergeAbortedException)));
          PyDict_SetItemString(PY_TYPE(MergePolicy).tp_dict, "MergeException", make_descriptor(&PY_TYPE(MergePolicy$MergeException)));
          PyDict_SetItemString(PY_TYPE(MergePolicy).tp_dict, "MergeSpecification", make_descriptor(&PY_TYPE(MergePolicy$MergeSpecification)));
          PyDict_SetItemString(PY_TYPE(MergePolicy).tp_dict, "OneMerge", make_descriptor(&PY_TYPE(MergePolicy$OneMerge)));
          PyDict_SetItemString(PY_TYPE(MergePolicy).tp_dict, "DocMap", make_descriptor(&PY_TYPE(MergePolicy$DocMap)));
        }

        void t_MergePolicy::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(MergePolicy).tp_dict, "class_", make_descriptor(MergePolicy::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(MergePolicy).tp_dict, "wrapfn_", make_descriptor(t_MergePolicy::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(MergePolicy).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_MergePolicy_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, MergePolicy::initializeClass, 1)))
            return NULL;
          return t_MergePolicy::wrap_Object(MergePolicy(((t_MergePolicy *) arg)->object.this$));
        }
        static PyObject *t_MergePolicy_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, MergePolicy::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_MergePolicy_init_(t_MergePolicy *self, PyObject *args, PyObject *kwds)
        {
          MergePolicy object((jobject) NULL);

          INT_CALL(object = MergePolicy());
          self->object = object;

          return 0;
        }

        static PyObject *t_MergePolicy_close(t_MergePolicy *self)
        {
          OBJ_CALL(self->object.close());
          Py_RETURN_NONE;
        }

        static PyObject *t_MergePolicy_findForcedDeletesMerges(t_MergePolicy *self, PyObject *args)
        {
          ::org::apache::lucene::index::SegmentInfos a0((jobject) NULL);
          ::org::apache::lucene::index::IndexWriter a1((jobject) NULL);
          ::org::apache::lucene::index::MergePolicy$MergeSpecification result((jobject) NULL);

          if (!parseArgs(args, "kk", ::org::apache::lucene::index::SegmentInfos::initializeClass, ::org::apache::lucene::index::IndexWriter::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = self->object.findForcedDeletesMerges(a0, a1));
            return ::org::apache::lucene::index::t_MergePolicy$MergeSpecification::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "findForcedDeletesMerges", args);
          return NULL;
        }

        static PyObject *t_MergePolicy_findForcedMerges(t_MergePolicy *self, PyObject *args)
        {
          ::org::apache::lucene::index::SegmentInfos a0((jobject) NULL);
          jint a1;
          ::java::util::Map a2((jobject) NULL);
          PyTypeObject **p2;
          ::org::apache::lucene::index::IndexWriter a3((jobject) NULL);
          ::org::apache::lucene::index::MergePolicy$MergeSpecification result((jobject) NULL);

          if (!parseArgs(args, "kIKk", ::org::apache::lucene::index::SegmentInfos::initializeClass, ::java::util::Map::initializeClass, ::org::apache::lucene::index::IndexWriter::initializeClass, &a0, &a1, &a2, &p2, ::java::util::t_Map::parameters_, &a3))
          {
            OBJ_CALL(result = self->object.findForcedMerges(a0, a1, a2, a3));
            return ::org::apache::lucene::index::t_MergePolicy$MergeSpecification::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "findForcedMerges", args);
          return NULL;
        }

        static PyObject *t_MergePolicy_findMerges(t_MergePolicy *self, PyObject *args)
        {
          ::org::apache::lucene::index::MergeTrigger a0((jobject) NULL);
          PyTypeObject **p0;
          ::org::apache::lucene::index::SegmentInfos a1((jobject) NULL);
          ::org::apache::lucene::index::IndexWriter a2((jobject) NULL);
          ::org::apache::lucene::index::MergePolicy$MergeSpecification result((jobject) NULL);

          if (!parseArgs(args, "Kkk", ::org::apache::lucene::index::MergeTrigger::initializeClass, ::org::apache::lucene::index::SegmentInfos::initializeClass, ::org::apache::lucene::index::IndexWriter::initializeClass, &a0, &p0, ::org::apache::lucene::index::t_MergeTrigger::parameters_, &a1, &a2))
          {
            OBJ_CALL(result = self->object.findMerges(a0, a1, a2));
            return ::org::apache::lucene::index::t_MergePolicy$MergeSpecification::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "findMerges", args);
          return NULL;
        }

        static PyObject *t_MergePolicy_getMaxCFSSegmentSizeMB(t_MergePolicy *self)
        {
          jdouble result;
          OBJ_CALL(result = self->object.getMaxCFSSegmentSizeMB());
          return PyFloat_FromDouble((double) result);
        }

        static PyObject *t_MergePolicy_getNoCFSRatio(t_MergePolicy *self)
        {
          jdouble result;
          OBJ_CALL(result = self->object.getNoCFSRatio());
          return PyFloat_FromDouble((double) result);
        }

        static PyObject *t_MergePolicy_setMaxCFSSegmentSizeMB(t_MergePolicy *self, PyObject *arg)
        {
          jdouble a0;

          if (!parseArg(arg, "D", &a0))
          {
            OBJ_CALL(self->object.setMaxCFSSegmentSizeMB(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setMaxCFSSegmentSizeMB", arg);
          return NULL;
        }

        static PyObject *t_MergePolicy_setNoCFSRatio(t_MergePolicy *self, PyObject *arg)
        {
          jdouble a0;

          if (!parseArg(arg, "D", &a0))
          {
            OBJ_CALL(self->object.setNoCFSRatio(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setNoCFSRatio", arg);
          return NULL;
        }

        static PyObject *t_MergePolicy_useCompoundFile(t_MergePolicy *self, PyObject *args)
        {
          ::org::apache::lucene::index::SegmentInfos a0((jobject) NULL);
          ::org::apache::lucene::index::SegmentCommitInfo a1((jobject) NULL);
          ::org::apache::lucene::index::IndexWriter a2((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "kkk", ::org::apache::lucene::index::SegmentInfos::initializeClass, ::org::apache::lucene::index::SegmentCommitInfo::initializeClass, ::org::apache::lucene::index::IndexWriter::initializeClass, &a0, &a1, &a2))
          {
            OBJ_CALL(result = self->object.useCompoundFile(a0, a1, a2));
            Py_RETURN_BOOL(result);
          }

          PyErr_SetArgsError((PyObject *) self, "useCompoundFile", args);
          return NULL;
        }

        static PyObject *t_MergePolicy_get__maxCFSSegmentSizeMB(t_MergePolicy *self, void *data)
        {
          jdouble value;
          OBJ_CALL(value = self->object.getMaxCFSSegmentSizeMB());
          return PyFloat_FromDouble((double) value);
        }
        static int t_MergePolicy_set__maxCFSSegmentSizeMB(t_MergePolicy *self, PyObject *arg, void *data)
        {
          {
            jdouble value;
            if (!parseArg(arg, "D", &value))
            {
              INT_CALL(self->object.setMaxCFSSegmentSizeMB(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "maxCFSSegmentSizeMB", arg);
          return -1;
        }

        static PyObject *t_MergePolicy_get__noCFSRatio(t_MergePolicy *self, void *data)
        {
          jdouble value;
          OBJ_CALL(value = self->object.getNoCFSRatio());
          return PyFloat_FromDouble((double) value);
        }
        static int t_MergePolicy_set__noCFSRatio(t_MergePolicy *self, PyObject *arg, void *data)
        {
          {
            jdouble value;
            if (!parseArg(arg, "D", &value))
            {
              INT_CALL(self->object.setNoCFSRatio(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "noCFSRatio", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/suggest/analyzing/BlendedInfixSuggester$BlenderType.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace suggest {
          namespace analyzing {

            ::java::lang::Class *BlendedInfixSuggester$BlenderType::class$ = NULL;
            jmethodID *BlendedInfixSuggester$BlenderType::mids$ = NULL;
            bool BlendedInfixSuggester$BlenderType::live$ = false;
            BlendedInfixSuggester$BlenderType *BlendedInfixSuggester$BlenderType::CUSTOM = NULL;
            BlendedInfixSuggester$BlenderType *BlendedInfixSuggester$BlenderType::POSITION_LINEAR = NULL;
            BlendedInfixSuggester$BlenderType *BlendedInfixSuggester$BlenderType::POSITION_RECIPROCAL = NULL;

            jclass BlendedInfixSuggester$BlenderType::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/search/suggest/analyzing/BlendedInfixSuggester$BlenderType");

                mids$ = new jmethodID[max_mid];
                mids$[mid_valueOf_ff583aba] = env->getStaticMethodID(cls, "valueOf", "(Ljava/lang/String;)Lorg/apache/lucene/search/suggest/analyzing/BlendedInfixSuggester$BlenderType;");
                mids$[mid_values_c5f82234] = env->getStaticMethodID(cls, "values", "()[Lorg/apache/lucene/search/suggest/analyzing/BlendedInfixSuggester$BlenderType;");

                class$ = (::java::lang::Class *) new JObject(cls);
                cls = (jclass) class$->this$;

                CUSTOM = new BlendedInfixSuggester$BlenderType(env->getStaticObjectField(cls, "CUSTOM", "Lorg/apache/lucene/search/suggest/analyzing/BlendedInfixSuggester$BlenderType;"));
                POSITION_LINEAR = new BlendedInfixSuggester$BlenderType(env->getStaticObjectField(cls, "POSITION_LINEAR", "Lorg/apache/lucene/search/suggest/analyzing/BlendedInfixSuggester$BlenderType;"));
                POSITION_RECIPROCAL = new BlendedInfixSuggester$BlenderType(env->getStaticObjectField(cls, "POSITION_RECIPROCAL", "Lorg/apache/lucene/search/suggest/analyzing/BlendedInfixSuggester$BlenderType;"));
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            BlendedInfixSuggester$BlenderType BlendedInfixSuggester$BlenderType::valueOf(const ::java::lang::String & a0)
            {
              jclass cls = env->getClass(initializeClass);
              return BlendedInfixSuggester$BlenderType(env->callStaticObjectMethod(cls, mids$[mid_valueOf_ff583aba], a0.this$));
            }

            JArray< BlendedInfixSuggester$BlenderType > BlendedInfixSuggester$BlenderType::values()
            {
              jclass cls = env->getClass(initializeClass);
              return JArray< BlendedInfixSuggester$BlenderType >(env->callStaticObjectMethod(cls, mids$[mid_values_c5f82234]));
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace suggest {
          namespace analyzing {
            static PyObject *t_BlendedInfixSuggester$BlenderType_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_BlendedInfixSuggester$BlenderType_instance_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_BlendedInfixSuggester$BlenderType_of_(t_BlendedInfixSuggester$BlenderType *self, PyObject *args);
            static PyObject *t_BlendedInfixSuggester$BlenderType_valueOf(PyTypeObject *type, PyObject *args);
            static PyObject *t_BlendedInfixSuggester$BlenderType_values(PyTypeObject *type);
            static PyObject *t_BlendedInfixSuggester$BlenderType_get__parameters_(t_BlendedInfixSuggester$BlenderType *self, void *data);
            static PyGetSetDef t_BlendedInfixSuggester$BlenderType__fields_[] = {
              DECLARE_GET_FIELD(t_BlendedInfixSuggester$BlenderType, parameters_),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_BlendedInfixSuggester$BlenderType__methods_[] = {
              DECLARE_METHOD(t_BlendedInfixSuggester$BlenderType, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_BlendedInfixSuggester$BlenderType, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_BlendedInfixSuggester$BlenderType, of_, METH_VARARGS),
              DECLARE_METHOD(t_BlendedInfixSuggester$BlenderType, valueOf, METH_VARARGS | METH_CLASS),
              DECLARE_METHOD(t_BlendedInfixSuggester$BlenderType, values, METH_NOARGS | METH_CLASS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(BlendedInfixSuggester$BlenderType, t_BlendedInfixSuggester$BlenderType, ::java::lang::Enum, BlendedInfixSuggester$BlenderType, abstract_init, 0, 0, t_BlendedInfixSuggester$BlenderType__fields_, 0, 0);
            PyObject *t_BlendedInfixSuggester$BlenderType::wrap_Object(const BlendedInfixSuggester$BlenderType& object, PyTypeObject *p0)
            {
              PyObject *obj = t_BlendedInfixSuggester$BlenderType::wrap_Object(object);
              if (obj != NULL && obj != Py_None)
              {
                t_BlendedInfixSuggester$BlenderType *self = (t_BlendedInfixSuggester$BlenderType *) obj;
                self->parameters[0] = p0;
              }
              return obj;
            }

            PyObject *t_BlendedInfixSuggester$BlenderType::wrap_jobject(const jobject& object, PyTypeObject *p0)
            {
              PyObject *obj = t_BlendedInfixSuggester$BlenderType::wrap_jobject(object);
              if (obj != NULL && obj != Py_None)
              {
                t_BlendedInfixSuggester$BlenderType *self = (t_BlendedInfixSuggester$BlenderType *) obj;
                self->parameters[0] = p0;
              }
              return obj;
            }

            void t_BlendedInfixSuggester$BlenderType::install(PyObject *module)
            {
              installType(&PY_TYPE(BlendedInfixSuggester$BlenderType), module, "BlendedInfixSuggester$BlenderType", 0);
            }

            void t_BlendedInfixSuggester$BlenderType::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(BlendedInfixSuggester$BlenderType).tp_dict, "class_", make_descriptor(BlendedInfixSuggester$BlenderType::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(BlendedInfixSuggester$BlenderType).tp_dict, "wrapfn_", make_descriptor(t_BlendedInfixSuggester$BlenderType::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(BlendedInfixSuggester$BlenderType).tp_dict, "boxfn_", make_descriptor(boxObject));
              env->getClass(BlendedInfixSuggester$BlenderType::initializeClass);
              PyDict_SetItemString(PY_TYPE(BlendedInfixSuggester$BlenderType).tp_dict, "CUSTOM", make_descriptor(t_BlendedInfixSuggester$BlenderType::wrap_Object(*BlendedInfixSuggester$BlenderType::CUSTOM)));
              PyDict_SetItemString(PY_TYPE(BlendedInfixSuggester$BlenderType).tp_dict, "POSITION_LINEAR", make_descriptor(t_BlendedInfixSuggester$BlenderType::wrap_Object(*BlendedInfixSuggester$BlenderType::POSITION_LINEAR)));
              PyDict_SetItemString(PY_TYPE(BlendedInfixSuggester$BlenderType).tp_dict, "POSITION_RECIPROCAL", make_descriptor(t_BlendedInfixSuggester$BlenderType::wrap_Object(*BlendedInfixSuggester$BlenderType::POSITION_RECIPROCAL)));
            }

            static PyObject *t_BlendedInfixSuggester$BlenderType_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, BlendedInfixSuggester$BlenderType::initializeClass, 1)))
                return NULL;
              return t_BlendedInfixSuggester$BlenderType::wrap_Object(BlendedInfixSuggester$BlenderType(((t_BlendedInfixSuggester$BlenderType *) arg)->object.this$));
            }
            static PyObject *t_BlendedInfixSuggester$BlenderType_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, BlendedInfixSuggester$BlenderType::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static PyObject *t_BlendedInfixSuggester$BlenderType_of_(t_BlendedInfixSuggester$BlenderType *self, PyObject *args)
            {
              if (!parseArg(args, "T", 1, &(self->parameters)))
                Py_RETURN_SELF;
              return PyErr_SetArgsError((PyObject *) self, "of_", args);
            }

            static PyObject *t_BlendedInfixSuggester$BlenderType_valueOf(PyTypeObject *type, PyObject *args)
            {
              ::java::lang::String a0((jobject) NULL);
              BlendedInfixSuggester$BlenderType result((jobject) NULL);

              if (!parseArgs(args, "s", &a0))
              {
                OBJ_CALL(result = ::org::apache::lucene::search::suggest::analyzing::BlendedInfixSuggester$BlenderType::valueOf(a0));
                return t_BlendedInfixSuggester$BlenderType::wrap_Object(result);
              }

              return callSuper(type, "valueOf", args, 2);
            }

            static PyObject *t_BlendedInfixSuggester$BlenderType_values(PyTypeObject *type)
            {
              JArray< BlendedInfixSuggester$BlenderType > result((jobject) NULL);
              OBJ_CALL(result = ::org::apache::lucene::search::suggest::analyzing::BlendedInfixSuggester$BlenderType::values());
              return JArray<jobject>(result.this$).wrap(t_BlendedInfixSuggester$BlenderType::wrap_jobject);
            }
            static PyObject *t_BlendedInfixSuggester$BlenderType_get__parameters_(t_BlendedInfixSuggester$BlenderType *self, void *data)
            {
              return typeParameters(self->parameters, sizeof(self->parameters));
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/CompositeReaderContext.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/index/CompositeReader.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "java/lang/UnsupportedOperationException.h"
#include "java/util/List.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *CompositeReaderContext::class$ = NULL;
        jmethodID *CompositeReaderContext::mids$ = NULL;
        bool CompositeReaderContext::live$ = false;

        jclass CompositeReaderContext::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/CompositeReaderContext");

            mids$ = new jmethodID[max_mid];
            mids$[mid_children_87851566] = env->getMethodID(cls, "children", "()Ljava/util/List;");
            mids$[mid_leaves_87851566] = env->getMethodID(cls, "leaves", "()Ljava/util/List;");
            mids$[mid_reader_d29e58f7] = env->getMethodID(cls, "reader", "()Lorg/apache/lucene/index/CompositeReader;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        ::java::util::List CompositeReaderContext::children() const
        {
          return ::java::util::List(env->callObjectMethod(this$, mids$[mid_children_87851566]));
        }

        ::java::util::List CompositeReaderContext::leaves() const
        {
          return ::java::util::List(env->callObjectMethod(this$, mids$[mid_leaves_87851566]));
        }

        ::org::apache::lucene::index::CompositeReader CompositeReaderContext::reader() const
        {
          return ::org::apache::lucene::index::CompositeReader(env->callObjectMethod(this$, mids$[mid_reader_d29e58f7]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_CompositeReaderContext_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_CompositeReaderContext_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_CompositeReaderContext_children(t_CompositeReaderContext *self, PyObject *args);
        static PyObject *t_CompositeReaderContext_leaves(t_CompositeReaderContext *self, PyObject *args);
        static PyObject *t_CompositeReaderContext_reader(t_CompositeReaderContext *self, PyObject *args);

        static PyMethodDef t_CompositeReaderContext__methods_[] = {
          DECLARE_METHOD(t_CompositeReaderContext, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_CompositeReaderContext, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_CompositeReaderContext, children, METH_VARARGS),
          DECLARE_METHOD(t_CompositeReaderContext, leaves, METH_VARARGS),
          DECLARE_METHOD(t_CompositeReaderContext, reader, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(CompositeReaderContext, t_CompositeReaderContext, ::org::apache::lucene::index::IndexReaderContext, CompositeReaderContext, abstract_init, 0, 0, 0, 0, 0);

        void t_CompositeReaderContext::install(PyObject *module)
        {
          installType(&PY_TYPE(CompositeReaderContext), module, "CompositeReaderContext", 0);
        }

        void t_CompositeReaderContext::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(CompositeReaderContext).tp_dict, "class_", make_descriptor(CompositeReaderContext::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(CompositeReaderContext).tp_dict, "wrapfn_", make_descriptor(t_CompositeReaderContext::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(CompositeReaderContext).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_CompositeReaderContext_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, CompositeReaderContext::initializeClass, 1)))
            return NULL;
          return t_CompositeReaderContext::wrap_Object(CompositeReaderContext(((t_CompositeReaderContext *) arg)->object.this$));
        }
        static PyObject *t_CompositeReaderContext_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, CompositeReaderContext::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_CompositeReaderContext_children(t_CompositeReaderContext *self, PyObject *args)
        {
          ::java::util::List result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.children());
            return ::java::util::t_List::wrap_Object(result, &::org::apache::lucene::index::PY_TYPE(IndexReaderContext));
          }

          return callSuper(&PY_TYPE(CompositeReaderContext), (PyObject *) self, "children", args, 2);
        }

        static PyObject *t_CompositeReaderContext_leaves(t_CompositeReaderContext *self, PyObject *args)
        {
          ::java::util::List result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.leaves());
            return ::java::util::t_List::wrap_Object(result, &::org::apache::lucene::index::PY_TYPE(AtomicReaderContext));
          }

          return callSuper(&PY_TYPE(CompositeReaderContext), (PyObject *) self, "leaves", args, 2);
        }

        static PyObject *t_CompositeReaderContext_reader(t_CompositeReaderContext *self, PyObject *args)
        {
          ::org::apache::lucene::index::CompositeReader result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.reader());
            return ::org::apache::lucene::index::t_CompositeReader::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(CompositeReaderContext), (PyObject *) self, "reader", args, 2);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/payloads/NumericPayloadTokenFilterFactory.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "org/apache/lucene/analysis/payloads/NumericPayloadTokenFilter.h"
#include "java/lang/String.h"
#include "java/util/Map.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace payloads {

          ::java::lang::Class *NumericPayloadTokenFilterFactory::class$ = NULL;
          jmethodID *NumericPayloadTokenFilterFactory::mids$ = NULL;
          bool NumericPayloadTokenFilterFactory::live$ = false;

          jclass NumericPayloadTokenFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/payloads/NumericPayloadTokenFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4c9e2b1c] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_21f7b18d] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/payloads/NumericPayloadTokenFilter;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          NumericPayloadTokenFilterFactory::NumericPayloadTokenFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_4c9e2b1c, a0.this$)) {}

          ::org::apache::lucene::analysis::payloads::NumericPayloadTokenFilter NumericPayloadTokenFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::payloads::NumericPayloadTokenFilter(env->callObjectMethod(this$, mids$[mid_create_21f7b18d], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace payloads {
          static PyObject *t_NumericPayloadTokenFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_NumericPayloadTokenFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_NumericPayloadTokenFilterFactory_init_(t_NumericPayloadTokenFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_NumericPayloadTokenFilterFactory_create(t_NumericPayloadTokenFilterFactory *self, PyObject *args);

          static PyMethodDef t_NumericPayloadTokenFilterFactory__methods_[] = {
            DECLARE_METHOD(t_NumericPayloadTokenFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_NumericPayloadTokenFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_NumericPayloadTokenFilterFactory, create, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(NumericPayloadTokenFilterFactory, t_NumericPayloadTokenFilterFactory, ::org::apache::lucene::analysis::util::TokenFilterFactory, NumericPayloadTokenFilterFactory, t_NumericPayloadTokenFilterFactory_init_, 0, 0, 0, 0, 0);

          void t_NumericPayloadTokenFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(NumericPayloadTokenFilterFactory), module, "NumericPayloadTokenFilterFactory", 0);
          }

          void t_NumericPayloadTokenFilterFactory::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(NumericPayloadTokenFilterFactory).tp_dict, "class_", make_descriptor(NumericPayloadTokenFilterFactory::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(NumericPayloadTokenFilterFactory).tp_dict, "wrapfn_", make_descriptor(t_NumericPayloadTokenFilterFactory::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(NumericPayloadTokenFilterFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_NumericPayloadTokenFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, NumericPayloadTokenFilterFactory::initializeClass, 1)))
              return NULL;
            return t_NumericPayloadTokenFilterFactory::wrap_Object(NumericPayloadTokenFilterFactory(((t_NumericPayloadTokenFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_NumericPayloadTokenFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, NumericPayloadTokenFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_NumericPayloadTokenFilterFactory_init_(t_NumericPayloadTokenFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            NumericPayloadTokenFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = NumericPayloadTokenFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_NumericPayloadTokenFilterFactory_create(t_NumericPayloadTokenFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::payloads::NumericPayloadTokenFilter result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::payloads::t_NumericPayloadTokenFilter::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(NumericPayloadTokenFilterFactory), (PyObject *) self, "create", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/WeakIdentityMap.h"
#include "java/util/Iterator.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *WeakIdentityMap::class$ = NULL;
        jmethodID *WeakIdentityMap::mids$ = NULL;
        bool WeakIdentityMap::live$ = false;

        jclass WeakIdentityMap::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/WeakIdentityMap");

            mids$ = new jmethodID[max_mid];
            mids$[mid_clear_54c6a166] = env->getMethodID(cls, "clear", "()V");
            mids$[mid_containsKey_290588e2] = env->getMethodID(cls, "containsKey", "(Ljava/lang/Object;)Z");
            mids$[mid_get_a932a95f] = env->getMethodID(cls, "get", "(Ljava/lang/Object;)Ljava/lang/Object;");
            mids$[mid_isEmpty_54c6a16a] = env->getMethodID(cls, "isEmpty", "()Z");
            mids$[mid_keyIterator_40858c90] = env->getMethodID(cls, "keyIterator", "()Ljava/util/Iterator;");
            mids$[mid_newConcurrentHashMap_0c924cc6] = env->getStaticMethodID(cls, "newConcurrentHashMap", "()Lorg/apache/lucene/util/WeakIdentityMap;");
            mids$[mid_newConcurrentHashMap_8f638b79] = env->getStaticMethodID(cls, "newConcurrentHashMap", "(Z)Lorg/apache/lucene/util/WeakIdentityMap;");
            mids$[mid_newHashMap_0c924cc6] = env->getStaticMethodID(cls, "newHashMap", "()Lorg/apache/lucene/util/WeakIdentityMap;");
            mids$[mid_newHashMap_8f638b79] = env->getStaticMethodID(cls, "newHashMap", "(Z)Lorg/apache/lucene/util/WeakIdentityMap;");
            mids$[mid_put_537d5bdf] = env->getMethodID(cls, "put", "(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;");
            mids$[mid_reap_54c6a166] = env->getMethodID(cls, "reap", "()V");
            mids$[mid_remove_a932a95f] = env->getMethodID(cls, "remove", "(Ljava/lang/Object;)Ljava/lang/Object;");
            mids$[mid_size_54c6a179] = env->getMethodID(cls, "size", "()I");
            mids$[mid_valueIterator_40858c90] = env->getMethodID(cls, "valueIterator", "()Ljava/util/Iterator;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        void WeakIdentityMap::clear() const
        {
          env->callVoidMethod(this$, mids$[mid_clear_54c6a166]);
        }

        jboolean WeakIdentityMap::containsKey(const ::java::lang::Object & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_containsKey_290588e2], a0.this$);
        }

        ::java::lang::Object WeakIdentityMap::get(const ::java::lang::Object & a0) const
        {
          return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_get_a932a95f], a0.this$));
        }

        jboolean WeakIdentityMap::isEmpty() const
        {
          return env->callBooleanMethod(this$, mids$[mid_isEmpty_54c6a16a]);
        }

        ::java::util::Iterator WeakIdentityMap::keyIterator() const
        {
          return ::java::util::Iterator(env->callObjectMethod(this$, mids$[mid_keyIterator_40858c90]));
        }

        WeakIdentityMap WeakIdentityMap::newConcurrentHashMap()
        {
          jclass cls = env->getClass(initializeClass);
          return WeakIdentityMap(env->callStaticObjectMethod(cls, mids$[mid_newConcurrentHashMap_0c924cc6]));
        }

        WeakIdentityMap WeakIdentityMap::newConcurrentHashMap(jboolean a0)
        {
          jclass cls = env->getClass(initializeClass);
          return WeakIdentityMap(env->callStaticObjectMethod(cls, mids$[mid_newConcurrentHashMap_8f638b79], a0));
        }

        WeakIdentityMap WeakIdentityMap::newHashMap()
        {
          jclass cls = env->getClass(initializeClass);
          return WeakIdentityMap(env->callStaticObjectMethod(cls, mids$[mid_newHashMap_0c924cc6]));
        }

        WeakIdentityMap WeakIdentityMap::newHashMap(jboolean a0)
        {
          jclass cls = env->getClass(initializeClass);
          return WeakIdentityMap(env->callStaticObjectMethod(cls, mids$[mid_newHashMap_8f638b79], a0));
        }

        ::java::lang::Object WeakIdentityMap::put(const ::java::lang::Object & a0, const ::java::lang::Object & a1) const
        {
          return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_put_537d5bdf], a0.this$, a1.this$));
        }

        void WeakIdentityMap::reap() const
        {
          env->callVoidMethod(this$, mids$[mid_reap_54c6a166]);
        }

        ::java::lang::Object WeakIdentityMap::remove(const ::java::lang::Object & a0) const
        {
          return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_remove_a932a95f], a0.this$));
        }

        jint WeakIdentityMap::size() const
        {
          return env->callIntMethod(this$, mids$[mid_size_54c6a179]);
        }

        ::java::util::Iterator WeakIdentityMap::valueIterator() const
        {
          return ::java::util::Iterator(env->callObjectMethod(this$, mids$[mid_valueIterator_40858c90]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_WeakIdentityMap_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_WeakIdentityMap_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_WeakIdentityMap_of_(t_WeakIdentityMap *self, PyObject *args);
        static PyObject *t_WeakIdentityMap_clear(t_WeakIdentityMap *self);
        static PyObject *t_WeakIdentityMap_containsKey(t_WeakIdentityMap *self, PyObject *arg);
        static PyObject *t_WeakIdentityMap_get(t_WeakIdentityMap *self, PyObject *arg);
        static PyObject *t_WeakIdentityMap_isEmpty(t_WeakIdentityMap *self);
        static PyObject *t_WeakIdentityMap_keyIterator(t_WeakIdentityMap *self);
        static PyObject *t_WeakIdentityMap_newConcurrentHashMap(PyTypeObject *type, PyObject *args);
        static PyObject *t_WeakIdentityMap_newHashMap(PyTypeObject *type, PyObject *args);
        static PyObject *t_WeakIdentityMap_put(t_WeakIdentityMap *self, PyObject *args);
        static PyObject *t_WeakIdentityMap_reap(t_WeakIdentityMap *self);
        static PyObject *t_WeakIdentityMap_remove(t_WeakIdentityMap *self, PyObject *arg);
        static PyObject *t_WeakIdentityMap_size(t_WeakIdentityMap *self);
        static PyObject *t_WeakIdentityMap_valueIterator(t_WeakIdentityMap *self);
        static PyObject *t_WeakIdentityMap_get__empty(t_WeakIdentityMap *self, void *data);
        static PyObject *t_WeakIdentityMap_get__parameters_(t_WeakIdentityMap *self, void *data);
        static PyGetSetDef t_WeakIdentityMap__fields_[] = {
          DECLARE_GET_FIELD(t_WeakIdentityMap, empty),
          DECLARE_GET_FIELD(t_WeakIdentityMap, parameters_),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_WeakIdentityMap__methods_[] = {
          DECLARE_METHOD(t_WeakIdentityMap, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_WeakIdentityMap, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_WeakIdentityMap, of_, METH_VARARGS),
          DECLARE_METHOD(t_WeakIdentityMap, clear, METH_NOARGS),
          DECLARE_METHOD(t_WeakIdentityMap, containsKey, METH_O),
          DECLARE_METHOD(t_WeakIdentityMap, get, METH_O),
          DECLARE_METHOD(t_WeakIdentityMap, isEmpty, METH_NOARGS),
          DECLARE_METHOD(t_WeakIdentityMap, keyIterator, METH_NOARGS),
          DECLARE_METHOD(t_WeakIdentityMap, newConcurrentHashMap, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_WeakIdentityMap, newHashMap, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_WeakIdentityMap, put, METH_VARARGS),
          DECLARE_METHOD(t_WeakIdentityMap, reap, METH_NOARGS),
          DECLARE_METHOD(t_WeakIdentityMap, remove, METH_O),
          DECLARE_METHOD(t_WeakIdentityMap, size, METH_NOARGS),
          DECLARE_METHOD(t_WeakIdentityMap, valueIterator, METH_NOARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(WeakIdentityMap, t_WeakIdentityMap, ::java::lang::Object, WeakIdentityMap, abstract_init, 0, 0, t_WeakIdentityMap__fields_, 0, 0);
        PyObject *t_WeakIdentityMap::wrap_Object(const WeakIdentityMap& object, PyTypeObject *p0, PyTypeObject *p1)
        {
          PyObject *obj = t_WeakIdentityMap::wrap_Object(object);
          if (obj != NULL && obj != Py_None)
          {
            t_WeakIdentityMap *self = (t_WeakIdentityMap *) obj;
            self->parameters[0] = p0;
            self->parameters[1] = p1;
          }
          return obj;
        }

        PyObject *t_WeakIdentityMap::wrap_jobject(const jobject& object, PyTypeObject *p0, PyTypeObject *p1)
        {
          PyObject *obj = t_WeakIdentityMap::wrap_jobject(object);
          if (obj != NULL && obj != Py_None)
          {
            t_WeakIdentityMap *self = (t_WeakIdentityMap *) obj;
            self->parameters[0] = p0;
            self->parameters[1] = p1;
          }
          return obj;
        }

        void t_WeakIdentityMap::install(PyObject *module)
        {
          installType(&PY_TYPE(WeakIdentityMap), module, "WeakIdentityMap", 0);
        }

        void t_WeakIdentityMap::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(WeakIdentityMap).tp_dict, "class_", make_descriptor(WeakIdentityMap::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(WeakIdentityMap).tp_dict, "wrapfn_", make_descriptor(t_WeakIdentityMap::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(WeakIdentityMap).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_WeakIdentityMap_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, WeakIdentityMap::initializeClass, 1)))
            return NULL;
          return t_WeakIdentityMap::wrap_Object(WeakIdentityMap(((t_WeakIdentityMap *) arg)->object.this$));
        }
        static PyObject *t_WeakIdentityMap_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, WeakIdentityMap::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_WeakIdentityMap_of_(t_WeakIdentityMap *self, PyObject *args)
        {
          if (!parseArg(args, "T", 2, &(self->parameters)))
            Py_RETURN_SELF;
          return PyErr_SetArgsError((PyObject *) self, "of_", args);
        }

        static PyObject *t_WeakIdentityMap_clear(t_WeakIdentityMap *self)
        {
          OBJ_CALL(self->object.clear());
          Py_RETURN_NONE;
        }

        static PyObject *t_WeakIdentityMap_containsKey(t_WeakIdentityMap *self, PyObject *arg)
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArg(arg, "o", &a0))
          {
            OBJ_CALL(result = self->object.containsKey(a0));
            Py_RETURN_BOOL(result);
          }

          PyErr_SetArgsError((PyObject *) self, "containsKey", arg);
          return NULL;
        }

        static PyObject *t_WeakIdentityMap_get(t_WeakIdentityMap *self, PyObject *arg)
        {
          ::java::lang::Object a0((jobject) NULL);
          ::java::lang::Object result((jobject) NULL);

          if (!parseArg(arg, "o", &a0))
          {
            OBJ_CALL(result = self->object.get(a0));
            return self->parameters[1] != NULL ? wrapType(self->parameters[1], result.this$) : ::java::lang::t_Object::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "get", arg);
          return NULL;
        }

        static PyObject *t_WeakIdentityMap_isEmpty(t_WeakIdentityMap *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.isEmpty());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_WeakIdentityMap_keyIterator(t_WeakIdentityMap *self)
        {
          ::java::util::Iterator result((jobject) NULL);
          OBJ_CALL(result = self->object.keyIterator());
          return ::java::util::t_Iterator::wrap_Object(result, self->parameters[0]);
        }

        static PyObject *t_WeakIdentityMap_newConcurrentHashMap(PyTypeObject *type, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 0:
            {
              WeakIdentityMap result((jobject) NULL);
              OBJ_CALL(result = ::org::apache::lucene::util::WeakIdentityMap::newConcurrentHashMap());
              return t_WeakIdentityMap::wrap_Object(result);
            }
            break;
           case 1:
            {
              jboolean a0;
              WeakIdentityMap result((jobject) NULL);

              if (!parseArgs(args, "Z", &a0))
              {
                OBJ_CALL(result = ::org::apache::lucene::util::WeakIdentityMap::newConcurrentHashMap(a0));
                return t_WeakIdentityMap::wrap_Object(result);
              }
            }
          }

          PyErr_SetArgsError(type, "newConcurrentHashMap", args);
          return NULL;
        }

        static PyObject *t_WeakIdentityMap_newHashMap(PyTypeObject *type, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 0:
            {
              WeakIdentityMap result((jobject) NULL);
              OBJ_CALL(result = ::org::apache::lucene::util::WeakIdentityMap::newHashMap());
              return t_WeakIdentityMap::wrap_Object(result);
            }
            break;
           case 1:
            {
              jboolean a0;
              WeakIdentityMap result((jobject) NULL);

              if (!parseArgs(args, "Z", &a0))
              {
                OBJ_CALL(result = ::org::apache::lucene::util::WeakIdentityMap::newHashMap(a0));
                return t_WeakIdentityMap::wrap_Object(result);
              }
            }
          }

          PyErr_SetArgsError(type, "newHashMap", args);
          return NULL;
        }

        static PyObject *t_WeakIdentityMap_put(t_WeakIdentityMap *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          ::java::lang::Object a1((jobject) NULL);
          ::java::lang::Object result((jobject) NULL);

          if (!parseArgs(args, "OO", self->parameters[0], self->parameters[1], &a0, &a1))
          {
            OBJ_CALL(result = self->object.put(a0, a1));
            return self->parameters[1] != NULL ? wrapType(self->parameters[1], result.this$) : ::java::lang::t_Object::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "put", args);
          return NULL;
        }

        static PyObject *t_WeakIdentityMap_reap(t_WeakIdentityMap *self)
        {
          OBJ_CALL(self->object.reap());
          Py_RETURN_NONE;
        }

        static PyObject *t_WeakIdentityMap_remove(t_WeakIdentityMap *self, PyObject *arg)
        {
          ::java::lang::Object a0((jobject) NULL);
          ::java::lang::Object result((jobject) NULL);

          if (!parseArg(arg, "o", &a0))
          {
            OBJ_CALL(result = self->object.remove(a0));
            return self->parameters[1] != NULL ? wrapType(self->parameters[1], result.this$) : ::java::lang::t_Object::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "remove", arg);
          return NULL;
        }

        static PyObject *t_WeakIdentityMap_size(t_WeakIdentityMap *self)
        {
          jint result;
          OBJ_CALL(result = self->object.size());
          return PyInt_FromLong((long) result);
        }

        static PyObject *t_WeakIdentityMap_valueIterator(t_WeakIdentityMap *self)
        {
          ::java::util::Iterator result((jobject) NULL);
          OBJ_CALL(result = self->object.valueIterator());
          return ::java::util::t_Iterator::wrap_Object(result, self->parameters[1]);
        }
        static PyObject *t_WeakIdentityMap_get__parameters_(t_WeakIdentityMap *self, void *data)
        {
          return typeParameters(self->parameters, sizeof(self->parameters));
        }

        static PyObject *t_WeakIdentityMap_get__empty(t_WeakIdentityMap *self, void *data)
        {
          jboolean value;
          OBJ_CALL(value = self->object.isEmpty());
          Py_RETURN_BOOL(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/SmallFloat.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *SmallFloat::class$ = NULL;
        jmethodID *SmallFloat::mids$ = NULL;
        bool SmallFloat::live$ = false;

        jclass SmallFloat::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/SmallFloat");

            mids$ = new jmethodID[max_mid];
            mids$[mid_byte315ToFloat_b2271697] = env->getStaticMethodID(cls, "byte315ToFloat", "(B)F");
            mids$[mid_byte52ToFloat_b2271697] = env->getStaticMethodID(cls, "byte52ToFloat", "(B)F");
            mids$[mid_byteToFloat_277ea3d7] = env->getStaticMethodID(cls, "byteToFloat", "(BII)F");
            mids$[mid_floatToByte_c388dc8f] = env->getStaticMethodID(cls, "floatToByte", "(FII)B");
            mids$[mid_floatToByte315_06298cbf] = env->getStaticMethodID(cls, "floatToByte315", "(F)B");
            mids$[mid_floatToByte52_06298cbf] = env->getStaticMethodID(cls, "floatToByte52", "(F)B");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        jfloat SmallFloat::byte315ToFloat(jbyte a0)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticFloatMethod(cls, mids$[mid_byte315ToFloat_b2271697], a0);
        }

        jfloat SmallFloat::byte52ToFloat(jbyte a0)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticFloatMethod(cls, mids$[mid_byte52ToFloat_b2271697], a0);
        }

        jfloat SmallFloat::byteToFloat(jbyte a0, jint a1, jint a2)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticFloatMethod(cls, mids$[mid_byteToFloat_277ea3d7], a0, a1, a2);
        }

        jbyte SmallFloat::floatToByte(jfloat a0, jint a1, jint a2)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticByteMethod(cls, mids$[mid_floatToByte_c388dc8f], a0, a1, a2);
        }

        jbyte SmallFloat::floatToByte315(jfloat a0)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticByteMethod(cls, mids$[mid_floatToByte315_06298cbf], a0);
        }

        jbyte SmallFloat::floatToByte52(jfloat a0)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticByteMethod(cls, mids$[mid_floatToByte52_06298cbf], a0);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_SmallFloat_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_SmallFloat_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_SmallFloat_byte315ToFloat(PyTypeObject *type, PyObject *arg);
        static PyObject *t_SmallFloat_byte52ToFloat(PyTypeObject *type, PyObject *arg);
        static PyObject *t_SmallFloat_byteToFloat(PyTypeObject *type, PyObject *args);
        static PyObject *t_SmallFloat_floatToByte(PyTypeObject *type, PyObject *args);
        static PyObject *t_SmallFloat_floatToByte315(PyTypeObject *type, PyObject *arg);
        static PyObject *t_SmallFloat_floatToByte52(PyTypeObject *type, PyObject *arg);

        static PyMethodDef t_SmallFloat__methods_[] = {
          DECLARE_METHOD(t_SmallFloat, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SmallFloat, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SmallFloat, byte315ToFloat, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SmallFloat, byte52ToFloat, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SmallFloat, byteToFloat, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_SmallFloat, floatToByte, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_SmallFloat, floatToByte315, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SmallFloat, floatToByte52, METH_O | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(SmallFloat, t_SmallFloat, ::java::lang::Object, SmallFloat, abstract_init, 0, 0, 0, 0, 0);

        void t_SmallFloat::install(PyObject *module)
        {
          installType(&PY_TYPE(SmallFloat), module, "SmallFloat", 0);
        }

        void t_SmallFloat::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(SmallFloat).tp_dict, "class_", make_descriptor(SmallFloat::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(SmallFloat).tp_dict, "wrapfn_", make_descriptor(t_SmallFloat::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(SmallFloat).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_SmallFloat_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, SmallFloat::initializeClass, 1)))
            return NULL;
          return t_SmallFloat::wrap_Object(SmallFloat(((t_SmallFloat *) arg)->object.this$));
        }
        static PyObject *t_SmallFloat_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, SmallFloat::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_SmallFloat_byte315ToFloat(PyTypeObject *type, PyObject *arg)
        {
          jbyte a0;
          jfloat result;

          if (!parseArg(arg, "B", &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::util::SmallFloat::byte315ToFloat(a0));
            return PyFloat_FromDouble((double) result);
          }

          PyErr_SetArgsError(type, "byte315ToFloat", arg);
          return NULL;
        }

        static PyObject *t_SmallFloat_byte52ToFloat(PyTypeObject *type, PyObject *arg)
        {
          jbyte a0;
          jfloat result;

          if (!parseArg(arg, "B", &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::util::SmallFloat::byte52ToFloat(a0));
            return PyFloat_FromDouble((double) result);
          }

          PyErr_SetArgsError(type, "byte52ToFloat", arg);
          return NULL;
        }

        static PyObject *t_SmallFloat_byteToFloat(PyTypeObject *type, PyObject *args)
        {
          jbyte a0;
          jint a1;
          jint a2;
          jfloat result;

          if (!parseArgs(args, "BII", &a0, &a1, &a2))
          {
            OBJ_CALL(result = ::org::apache::lucene::util::SmallFloat::byteToFloat(a0, a1, a2));
            return PyFloat_FromDouble((double) result);
          }

          PyErr_SetArgsError(type, "byteToFloat", args);
          return NULL;
        }

        static PyObject *t_SmallFloat_floatToByte(PyTypeObject *type, PyObject *args)
        {
          jfloat a0;
          jint a1;
          jint a2;
          jbyte result;

          if (!parseArgs(args, "FII", &a0, &a1, &a2))
          {
            OBJ_CALL(result = ::org::apache::lucene::util::SmallFloat::floatToByte(a0, a1, a2));
            return PyInt_FromLong((long) result);
          }

          PyErr_SetArgsError(type, "floatToByte", args);
          return NULL;
        }

        static PyObject *t_SmallFloat_floatToByte315(PyTypeObject *type, PyObject *arg)
        {
          jfloat a0;
          jbyte result;

          if (!parseArg(arg, "F", &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::util::SmallFloat::floatToByte315(a0));
            return PyInt_FromLong((long) result);
          }

          PyErr_SetArgsError(type, "floatToByte315", arg);
          return NULL;
        }

        static PyObject *t_SmallFloat_floatToByte52(PyTypeObject *type, PyObject *arg)
        {
          jfloat a0;
          jbyte result;

          if (!parseArg(arg, "F", &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::util::SmallFloat::floatToByte52(a0));
            return PyInt_FromLong((long) result);
          }

          PyErr_SetArgsError(type, "floatToByte52", arg);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/lucene40/Lucene40TermVectorsFormat.h"
#include "org/apache/lucene/codecs/TermVectorsWriter.h"
#include "org/apache/lucene/codecs/TermVectorsReader.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/store/IOContext.h"
#include "org/apache/lucene/store/Directory.h"
#include "org/apache/lucene/index/SegmentInfo.h"
#include "org/apache/lucene/index/FieldInfos.h"
#include "java/io/IOException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace lucene40 {

          ::java::lang::Class *Lucene40TermVectorsFormat::class$ = NULL;
          jmethodID *Lucene40TermVectorsFormat::mids$ = NULL;
          bool Lucene40TermVectorsFormat::live$ = false;

          jclass Lucene40TermVectorsFormat::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/lucene40/Lucene40TermVectorsFormat");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_vectorsReader_9c23221f] = env->getMethodID(cls, "vectorsReader", "(Lorg/apache/lucene/store/Directory;Lorg/apache/lucene/index/SegmentInfo;Lorg/apache/lucene/index/FieldInfos;Lorg/apache/lucene/store/IOContext;)Lorg/apache/lucene/codecs/TermVectorsReader;");
              mids$[mid_vectorsWriter_0c8458c9] = env->getMethodID(cls, "vectorsWriter", "(Lorg/apache/lucene/store/Directory;Lorg/apache/lucene/index/SegmentInfo;Lorg/apache/lucene/store/IOContext;)Lorg/apache/lucene/codecs/TermVectorsWriter;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          Lucene40TermVectorsFormat::Lucene40TermVectorsFormat() : ::org::apache::lucene::codecs::TermVectorsFormat(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          ::org::apache::lucene::codecs::TermVectorsReader Lucene40TermVectorsFormat::vectorsReader(const ::org::apache::lucene::store::Directory & a0, const ::org::apache::lucene::index::SegmentInfo & a1, const ::org::apache::lucene::index::FieldInfos & a2, const ::org::apache::lucene::store::IOContext & a3) const
          {
            return ::org::apache::lucene::codecs::TermVectorsReader(env->callObjectMethod(this$, mids$[mid_vectorsReader_9c23221f], a0.this$, a1.this$, a2.this$, a3.this$));
          }

          ::org::apache::lucene::codecs::TermVectorsWriter Lucene40TermVectorsFormat::vectorsWriter(const ::org::apache::lucene::store::Directory & a0, const ::org::apache::lucene::index::SegmentInfo & a1, const ::org::apache::lucene::store::IOContext & a2) const
          {
            return ::org::apache::lucene::codecs::TermVectorsWriter(env->callObjectMethod(this$, mids$[mid_vectorsWriter_0c8458c9], a0.this$, a1.this$, a2.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace lucene40 {
          static PyObject *t_Lucene40TermVectorsFormat_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Lucene40TermVectorsFormat_instance_(PyTypeObject *type, PyObject *arg);
          static int t_Lucene40TermVectorsFormat_init_(t_Lucene40TermVectorsFormat *self, PyObject *args, PyObject *kwds);
          static PyObject *t_Lucene40TermVectorsFormat_vectorsReader(t_Lucene40TermVectorsFormat *self, PyObject *args);
          static PyObject *t_Lucene40TermVectorsFormat_vectorsWriter(t_Lucene40TermVectorsFormat *self, PyObject *args);

          static PyMethodDef t_Lucene40TermVectorsFormat__methods_[] = {
            DECLARE_METHOD(t_Lucene40TermVectorsFormat, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lucene40TermVectorsFormat, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lucene40TermVectorsFormat, vectorsReader, METH_VARARGS),
            DECLARE_METHOD(t_Lucene40TermVectorsFormat, vectorsWriter, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(Lucene40TermVectorsFormat, t_Lucene40TermVectorsFormat, ::org::apache::lucene::codecs::TermVectorsFormat, Lucene40TermVectorsFormat, t_Lucene40TermVectorsFormat_init_, 0, 0, 0, 0, 0);

          void t_Lucene40TermVectorsFormat::install(PyObject *module)
          {
            installType(&PY_TYPE(Lucene40TermVectorsFormat), module, "Lucene40TermVectorsFormat", 0);
          }

          void t_Lucene40TermVectorsFormat::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(Lucene40TermVectorsFormat).tp_dict, "class_", make_descriptor(Lucene40TermVectorsFormat::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(Lucene40TermVectorsFormat).tp_dict, "wrapfn_", make_descriptor(t_Lucene40TermVectorsFormat::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(Lucene40TermVectorsFormat).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_Lucene40TermVectorsFormat_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, Lucene40TermVectorsFormat::initializeClass, 1)))
              return NULL;
            return t_Lucene40TermVectorsFormat::wrap_Object(Lucene40TermVectorsFormat(((t_Lucene40TermVectorsFormat *) arg)->object.this$));
          }
          static PyObject *t_Lucene40TermVectorsFormat_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, Lucene40TermVectorsFormat::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_Lucene40TermVectorsFormat_init_(t_Lucene40TermVectorsFormat *self, PyObject *args, PyObject *kwds)
          {
            Lucene40TermVectorsFormat object((jobject) NULL);

            INT_CALL(object = Lucene40TermVectorsFormat());
            self->object = object;

            return 0;
          }

          static PyObject *t_Lucene40TermVectorsFormat_vectorsReader(t_Lucene40TermVectorsFormat *self, PyObject *args)
          {
            ::org::apache::lucene::store::Directory a0((jobject) NULL);
            ::org::apache::lucene::index::SegmentInfo a1((jobject) NULL);
            ::org::apache::lucene::index::FieldInfos a2((jobject) NULL);
            ::org::apache::lucene::store::IOContext a3((jobject) NULL);
            ::org::apache::lucene::codecs::TermVectorsReader result((jobject) NULL);

            if (!parseArgs(args, "kkkk", ::org::apache::lucene::store::Directory::initializeClass, ::org::apache::lucene::index::SegmentInfo::initializeClass, ::org::apache::lucene::index::FieldInfos::initializeClass, ::org::apache::lucene::store::IOContext::initializeClass, &a0, &a1, &a2, &a3))
            {
              OBJ_CALL(result = self->object.vectorsReader(a0, a1, a2, a3));
              return ::org::apache::lucene::codecs::t_TermVectorsReader::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(Lucene40TermVectorsFormat), (PyObject *) self, "vectorsReader", args, 2);
          }

          static PyObject *t_Lucene40TermVectorsFormat_vectorsWriter(t_Lucene40TermVectorsFormat *self, PyObject *args)
          {
            ::org::apache::lucene::store::Directory a0((jobject) NULL);
            ::org::apache::lucene::index::SegmentInfo a1((jobject) NULL);
            ::org::apache::lucene::store::IOContext a2((jobject) NULL);
            ::org::apache::lucene::codecs::TermVectorsWriter result((jobject) NULL);

            if (!parseArgs(args, "kkk", ::org::apache::lucene::store::Directory::initializeClass, ::org::apache::lucene::index::SegmentInfo::initializeClass, ::org::apache::lucene::store::IOContext::initializeClass, &a0, &a1, &a2))
            {
              OBJ_CALL(result = self->object.vectorsWriter(a0, a1, a2));
              return ::org::apache::lucene::codecs::t_TermVectorsWriter::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(Lucene40TermVectorsFormat), (PyObject *) self, "vectorsWriter", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/FieldCache$Parser.h"
#include "org/apache/lucene/index/Terms.h"
#include "org/apache/lucene/index/TermsEnum.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *FieldCache$Parser::class$ = NULL;
        jmethodID *FieldCache$Parser::mids$ = NULL;
        bool FieldCache$Parser::live$ = false;

        jclass FieldCache$Parser::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/FieldCache$Parser");

            mids$ = new jmethodID[max_mid];
            mids$[mid_termsEnum_fb3ac14e] = env->getMethodID(cls, "termsEnum", "(Lorg/apache/lucene/index/Terms;)Lorg/apache/lucene/index/TermsEnum;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        ::org::apache::lucene::index::TermsEnum FieldCache$Parser::termsEnum(const ::org::apache::lucene::index::Terms & a0) const
        {
          return ::org::apache::lucene::index::TermsEnum(env->callObjectMethod(this$, mids$[mid_termsEnum_fb3ac14e], a0.this$));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_FieldCache$Parser_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FieldCache$Parser_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FieldCache$Parser_termsEnum(t_FieldCache$Parser *self, PyObject *arg);

        static PyMethodDef t_FieldCache$Parser__methods_[] = {
          DECLARE_METHOD(t_FieldCache$Parser, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FieldCache$Parser, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FieldCache$Parser, termsEnum, METH_O),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(FieldCache$Parser, t_FieldCache$Parser, ::java::lang::Object, FieldCache$Parser, abstract_init, 0, 0, 0, 0, 0);

        void t_FieldCache$Parser::install(PyObject *module)
        {
          installType(&PY_TYPE(FieldCache$Parser), module, "FieldCache$Parser", 0);
        }

        void t_FieldCache$Parser::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(FieldCache$Parser).tp_dict, "class_", make_descriptor(FieldCache$Parser::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(FieldCache$Parser).tp_dict, "wrapfn_", make_descriptor(t_FieldCache$Parser::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(FieldCache$Parser).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_FieldCache$Parser_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, FieldCache$Parser::initializeClass, 1)))
            return NULL;
          return t_FieldCache$Parser::wrap_Object(FieldCache$Parser(((t_FieldCache$Parser *) arg)->object.this$));
        }
        static PyObject *t_FieldCache$Parser_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, FieldCache$Parser::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_FieldCache$Parser_termsEnum(t_FieldCache$Parser *self, PyObject *arg)
        {
          ::org::apache::lucene::index::Terms a0((jobject) NULL);
          ::org::apache::lucene::index::TermsEnum result((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::index::Terms::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.termsEnum(a0));
            return ::org::apache::lucene::index::t_TermsEnum::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "termsEnum", arg);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/String.h"
#include "java/lang/Throwable.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace java {
  namespace lang {

    ::java::lang::Class *IllegalStateException::class$ = NULL;
    jmethodID *IllegalStateException::mids$ = NULL;
    bool IllegalStateException::live$ = false;

    jclass IllegalStateException::initializeClass(bool getOnly)
    {
      if (getOnly)
        return (jclass) (live$ ? class$->this$ : NULL);
      if (class$ == NULL)
      {
        jclass cls = (jclass) env->findClass("java/lang/IllegalStateException");

        mids$ = new jmethodID[max_mid];
        mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
        mids$[mid_init$_c5ec8ca4] = env->getMethodID(cls, "<init>", "(Ljava/lang/Throwable;)V");
        mids$[mid_init$_5fdc3f48] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;)V");
        mids$[mid_init$_01646a2e] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Ljava/lang/Throwable;)V");

        class$ = (::java::lang::Class *) new JObject(cls);
        live$ = true;
      }
      return (jclass) class$->this$;
    }

    IllegalStateException::IllegalStateException() : ::java::lang::RuntimeException(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

    IllegalStateException::IllegalStateException(const ::java::lang::Throwable & a0) : ::java::lang::RuntimeException(env->newObject(initializeClass, &mids$, mid_init$_c5ec8ca4, a0.this$)) {}

    IllegalStateException::IllegalStateException(const ::java::lang::String & a0) : ::java::lang::RuntimeException(env->newObject(initializeClass, &mids$, mid_init$_5fdc3f48, a0.this$)) {}

    IllegalStateException::IllegalStateException(const ::java::lang::String & a0, const ::java::lang::Throwable & a1) : ::java::lang::RuntimeException(env->newObject(initializeClass, &mids$, mid_init$_01646a2e, a0.this$, a1.this$)) {}
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace java {
  namespace lang {
    static PyObject *t_IllegalStateException_cast_(PyTypeObject *type, PyObject *arg);
    static PyObject *t_IllegalStateException_instance_(PyTypeObject *type, PyObject *arg);
    static int t_IllegalStateException_init_(t_IllegalStateException *self, PyObject *args, PyObject *kwds);

    static PyMethodDef t_IllegalStateException__methods_[] = {
      DECLARE_METHOD(t_IllegalStateException, cast_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_IllegalStateException, instance_, METH_O | METH_CLASS),
      { NULL, NULL, 0, NULL }
    };

    DECLARE_TYPE(IllegalStateException, t_IllegalStateException, ::java::lang::RuntimeException, IllegalStateException, t_IllegalStateException_init_, 0, 0, 0, 0, 0);

    void t_IllegalStateException::install(PyObject *module)
    {
      installType(&PY_TYPE(IllegalStateException), module, "IllegalStateException", 0);
    }

    void t_IllegalStateException::initialize(PyObject *module)
    {
      PyDict_SetItemString(PY_TYPE(IllegalStateException).tp_dict, "class_", make_descriptor(IllegalStateException::initializeClass, 1));
      PyDict_SetItemString(PY_TYPE(IllegalStateException).tp_dict, "wrapfn_", make_descriptor(t_IllegalStateException::wrap_jobject));
      PyDict_SetItemString(PY_TYPE(IllegalStateException).tp_dict, "boxfn_", make_descriptor(boxObject));
    }

    static PyObject *t_IllegalStateException_cast_(PyTypeObject *type, PyObject *arg)
    {
      if (!(arg = castCheck(arg, IllegalStateException::initializeClass, 1)))
        return NULL;
      return t_IllegalStateException::wrap_Object(IllegalStateException(((t_IllegalStateException *) arg)->object.this$));
    }
    static PyObject *t_IllegalStateException_instance_(PyTypeObject *type, PyObject *arg)
    {
      if (!castCheck(arg, IllegalStateException::initializeClass, 0))
        Py_RETURN_FALSE;
      Py_RETURN_TRUE;
    }

    static int t_IllegalStateException_init_(t_IllegalStateException *self, PyObject *args, PyObject *kwds)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 0:
        {
          IllegalStateException object((jobject) NULL);

          INT_CALL(object = IllegalStateException());
          self->object = object;
          break;
        }
        goto err;
       case 1:
        {
          ::java::lang::Throwable a0((jobject) NULL);
          IllegalStateException object((jobject) NULL);

          if (!parseArgs(args, "k", ::java::lang::Throwable::initializeClass, &a0))
          {
            INT_CALL(object = IllegalStateException(a0));
            self->object = object;
            break;
          }
        }
        {
          ::java::lang::String a0((jobject) NULL);
          IllegalStateException object((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            INT_CALL(object = IllegalStateException(a0));
            self->object = object;
            break;
          }
        }
        goto err;
       case 2:
        {
          ::java::lang::String a0((jobject) NULL);
          ::java::lang::Throwable a1((jobject) NULL);
          IllegalStateException object((jobject) NULL);

          if (!parseArgs(args, "sk", ::java::lang::Throwable::initializeClass, &a0, &a1))
          {
            INT_CALL(object = IllegalStateException(a0, a1));
            self->object = object;
            break;
          }
        }
       default:
       err:
        PyErr_SetArgsError((PyObject *) self, "__init__", args);
        return -1;
      }

      return 0;
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/vectorhighlight/WeightedFragListBuilder.h"
#include "org/apache/lucene/search/vectorhighlight/FieldFragList.h"
#include "org/apache/lucene/search/vectorhighlight/FieldPhraseList.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace vectorhighlight {

          ::java::lang::Class *WeightedFragListBuilder::class$ = NULL;
          jmethodID *WeightedFragListBuilder::mids$ = NULL;
          bool WeightedFragListBuilder::live$ = false;

          jclass WeightedFragListBuilder::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/vectorhighlight/WeightedFragListBuilder");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_init$_39c7bd3c] = env->getMethodID(cls, "<init>", "(I)V");
              mids$[mid_createFieldFragList_f54fd6ce] = env->getMethodID(cls, "createFieldFragList", "(Lorg/apache/lucene/search/vectorhighlight/FieldPhraseList;I)Lorg/apache/lucene/search/vectorhighlight/FieldFragList;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          WeightedFragListBuilder::WeightedFragListBuilder() : ::org::apache::lucene::search::vectorhighlight::BaseFragListBuilder(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          WeightedFragListBuilder::WeightedFragListBuilder(jint a0) : ::org::apache::lucene::search::vectorhighlight::BaseFragListBuilder(env->newObject(initializeClass, &mids$, mid_init$_39c7bd3c, a0)) {}

          ::org::apache::lucene::search::vectorhighlight::FieldFragList WeightedFragListBuilder::createFieldFragList(const ::org::apache::lucene::search::vectorhighlight::FieldPhraseList & a0, jint a1) const
          {
            return ::org::apache::lucene::search::vectorhighlight::FieldFragList(env->callObjectMethod(this$, mids$[mid_createFieldFragList_f54fd6ce], a0.this$, a1));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace vectorhighlight {
          static PyObject *t_WeightedFragListBuilder_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_WeightedFragListBuilder_instance_(PyTypeObject *type, PyObject *arg);
          static int t_WeightedFragListBuilder_init_(t_WeightedFragListBuilder *self, PyObject *args, PyObject *kwds);
          static PyObject *t_WeightedFragListBuilder_createFieldFragList(t_WeightedFragListBuilder *self, PyObject *args);

          static PyMethodDef t_WeightedFragListBuilder__methods_[] = {
            DECLARE_METHOD(t_WeightedFragListBuilder, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_WeightedFragListBuilder, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_WeightedFragListBuilder, createFieldFragList, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(WeightedFragListBuilder, t_WeightedFragListBuilder, ::org::apache::lucene::search::vectorhighlight::BaseFragListBuilder, WeightedFragListBuilder, t_WeightedFragListBuilder_init_, 0, 0, 0, 0, 0);

          void t_WeightedFragListBuilder::install(PyObject *module)
          {
            installType(&PY_TYPE(WeightedFragListBuilder), module, "WeightedFragListBuilder", 0);
          }

          void t_WeightedFragListBuilder::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(WeightedFragListBuilder).tp_dict, "class_", make_descriptor(WeightedFragListBuilder::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(WeightedFragListBuilder).tp_dict, "wrapfn_", make_descriptor(t_WeightedFragListBuilder::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(WeightedFragListBuilder).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_WeightedFragListBuilder_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, WeightedFragListBuilder::initializeClass, 1)))
              return NULL;
            return t_WeightedFragListBuilder::wrap_Object(WeightedFragListBuilder(((t_WeightedFragListBuilder *) arg)->object.this$));
          }
          static PyObject *t_WeightedFragListBuilder_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, WeightedFragListBuilder::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_WeightedFragListBuilder_init_(t_WeightedFragListBuilder *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 0:
              {
                WeightedFragListBuilder object((jobject) NULL);

                INT_CALL(object = WeightedFragListBuilder());
                self->object = object;
                break;
              }
              goto err;
             case 1:
              {
                jint a0;
                WeightedFragListBuilder object((jobject) NULL);

                if (!parseArgs(args, "I", &a0))
                {
                  INT_CALL(object = WeightedFragListBuilder(a0));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_WeightedFragListBuilder_createFieldFragList(t_WeightedFragListBuilder *self, PyObject *args)
          {
            ::org::apache::lucene::search::vectorhighlight::FieldPhraseList a0((jobject) NULL);
            jint a1;
            ::org::apache::lucene::search::vectorhighlight::FieldFragList result((jobject) NULL);

            if (!parseArgs(args, "kI", ::org::apache::lucene::search::vectorhighlight::FieldPhraseList::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.createFieldFragList(a0, a1));
              return ::org::apache::lucene::search::vectorhighlight::t_FieldFragList::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(WeightedFragListBuilder), (PyObject *) self, "createFieldFragList", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/automaton/UTF32ToUTF8.h"
#include "org/apache/lucene/util/automaton/Automaton.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace automaton {

          ::java::lang::Class *UTF32ToUTF8::class$ = NULL;
          jmethodID *UTF32ToUTF8::mids$ = NULL;
          bool UTF32ToUTF8::live$ = false;

          jclass UTF32ToUTF8::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/util/automaton/UTF32ToUTF8");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_convert_7aca8e1f] = env->getMethodID(cls, "convert", "(Lorg/apache/lucene/util/automaton/Automaton;)Lorg/apache/lucene/util/automaton/Automaton;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          UTF32ToUTF8::UTF32ToUTF8() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          ::org::apache::lucene::util::automaton::Automaton UTF32ToUTF8::convert(const ::org::apache::lucene::util::automaton::Automaton & a0) const
          {
            return ::org::apache::lucene::util::automaton::Automaton(env->callObjectMethod(this$, mids$[mid_convert_7aca8e1f], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace automaton {
          static PyObject *t_UTF32ToUTF8_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_UTF32ToUTF8_instance_(PyTypeObject *type, PyObject *arg);
          static int t_UTF32ToUTF8_init_(t_UTF32ToUTF8 *self, PyObject *args, PyObject *kwds);
          static PyObject *t_UTF32ToUTF8_convert(t_UTF32ToUTF8 *self, PyObject *arg);

          static PyMethodDef t_UTF32ToUTF8__methods_[] = {
            DECLARE_METHOD(t_UTF32ToUTF8, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_UTF32ToUTF8, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_UTF32ToUTF8, convert, METH_O),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(UTF32ToUTF8, t_UTF32ToUTF8, ::java::lang::Object, UTF32ToUTF8, t_UTF32ToUTF8_init_, 0, 0, 0, 0, 0);

          void t_UTF32ToUTF8::install(PyObject *module)
          {
            installType(&PY_TYPE(UTF32ToUTF8), module, "UTF32ToUTF8", 0);
          }

          void t_UTF32ToUTF8::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(UTF32ToUTF8).tp_dict, "class_", make_descriptor(UTF32ToUTF8::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(UTF32ToUTF8).tp_dict, "wrapfn_", make_descriptor(t_UTF32ToUTF8::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(UTF32ToUTF8).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_UTF32ToUTF8_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, UTF32ToUTF8::initializeClass, 1)))
              return NULL;
            return t_UTF32ToUTF8::wrap_Object(UTF32ToUTF8(((t_UTF32ToUTF8 *) arg)->object.this$));
          }
          static PyObject *t_UTF32ToUTF8_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, UTF32ToUTF8::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_UTF32ToUTF8_init_(t_UTF32ToUTF8 *self, PyObject *args, PyObject *kwds)
          {
            UTF32ToUTF8 object((jobject) NULL);

            INT_CALL(object = UTF32ToUTF8());
            self->object = object;

            return 0;
          }

          static PyObject *t_UTF32ToUTF8_convert(t_UTF32ToUTF8 *self, PyObject *arg)
          {
            ::org::apache::lucene::util::automaton::Automaton a0((jobject) NULL);
            ::org::apache::lucene::util::automaton::Automaton result((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::util::automaton::Automaton::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.convert(a0));
              return ::org::apache::lucene::util::automaton::t_Automaton::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "convert", arg);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/FieldCache$Bytes.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *FieldCache$Bytes::class$ = NULL;
        jmethodID *FieldCache$Bytes::mids$ = NULL;
        bool FieldCache$Bytes::live$ = false;
        FieldCache$Bytes *FieldCache$Bytes::EMPTY = NULL;

        jclass FieldCache$Bytes::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/FieldCache$Bytes");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_get_39c7bd28] = env->getMethodID(cls, "get", "(I)B");

            class$ = (::java::lang::Class *) new JObject(cls);
            cls = (jclass) class$->this$;

            EMPTY = new FieldCache$Bytes(env->getStaticObjectField(cls, "EMPTY", "Lorg/apache/lucene/search/FieldCache$Bytes;"));
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        FieldCache$Bytes::FieldCache$Bytes() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        jbyte FieldCache$Bytes::get(jint a0) const
        {
          return env->callByteMethod(this$, mids$[mid_get_39c7bd28], a0);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_FieldCache$Bytes_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FieldCache$Bytes_instance_(PyTypeObject *type, PyObject *arg);
        static int t_FieldCache$Bytes_init_(t_FieldCache$Bytes *self, PyObject *args, PyObject *kwds);
        static PyObject *t_FieldCache$Bytes_get(t_FieldCache$Bytes *self, PyObject *arg);

        static PyMethodDef t_FieldCache$Bytes__methods_[] = {
          DECLARE_METHOD(t_FieldCache$Bytes, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FieldCache$Bytes, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FieldCache$Bytes, get, METH_O),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(FieldCache$Bytes, t_FieldCache$Bytes, ::java::lang::Object, FieldCache$Bytes, t_FieldCache$Bytes_init_, 0, 0, 0, 0, 0);

        void t_FieldCache$Bytes::install(PyObject *module)
        {
          installType(&PY_TYPE(FieldCache$Bytes), module, "FieldCache$Bytes", 0);
        }

        void t_FieldCache$Bytes::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(FieldCache$Bytes).tp_dict, "class_", make_descriptor(FieldCache$Bytes::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(FieldCache$Bytes).tp_dict, "wrapfn_", make_descriptor(t_FieldCache$Bytes::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(FieldCache$Bytes).tp_dict, "boxfn_", make_descriptor(boxObject));
          env->getClass(FieldCache$Bytes::initializeClass);
          PyDict_SetItemString(PY_TYPE(FieldCache$Bytes).tp_dict, "EMPTY", make_descriptor(t_FieldCache$Bytes::wrap_Object(*FieldCache$Bytes::EMPTY)));
        }

        static PyObject *t_FieldCache$Bytes_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, FieldCache$Bytes::initializeClass, 1)))
            return NULL;
          return t_FieldCache$Bytes::wrap_Object(FieldCache$Bytes(((t_FieldCache$Bytes *) arg)->object.this$));
        }
        static PyObject *t_FieldCache$Bytes_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, FieldCache$Bytes::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_FieldCache$Bytes_init_(t_FieldCache$Bytes *self, PyObject *args, PyObject *kwds)
        {
          FieldCache$Bytes object((jobject) NULL);

          INT_CALL(object = FieldCache$Bytes());
          self->object = object;

          return 0;
        }

        static PyObject *t_FieldCache$Bytes_get(t_FieldCache$Bytes *self, PyObject *arg)
        {
          jint a0;
          jbyte result;

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(result = self->object.get(a0));
            return PyInt_FromLong((long) result);
          }

          PyErr_SetArgsError((PyObject *) self, "get", arg);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/facet/sortedset/SortedSetDocValuesReaderState$OrdRange.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace sortedset {

          ::java::lang::Class *SortedSetDocValuesReaderState$OrdRange::class$ = NULL;
          jmethodID *SortedSetDocValuesReaderState$OrdRange::mids$ = NULL;
          jfieldID *SortedSetDocValuesReaderState$OrdRange::fids$ = NULL;
          bool SortedSetDocValuesReaderState$OrdRange::live$ = false;

          jclass SortedSetDocValuesReaderState$OrdRange::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/facet/sortedset/SortedSetDocValuesReaderState$OrdRange");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_d8d154a6] = env->getMethodID(cls, "<init>", "(II)V");

              fids$ = new jfieldID[max_fid];
              fids$[fid_end] = env->getFieldID(cls, "end", "I");
              fids$[fid_start] = env->getFieldID(cls, "start", "I");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          SortedSetDocValuesReaderState$OrdRange::SortedSetDocValuesReaderState$OrdRange(jint a0, jint a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_d8d154a6, a0, a1)) {}

          jint SortedSetDocValuesReaderState$OrdRange::_get_end() const
          {
            return env->getIntField(this$, fids$[fid_end]);
          }

          jint SortedSetDocValuesReaderState$OrdRange::_get_start() const
          {
            return env->getIntField(this$, fids$[fid_start]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace sortedset {
          static PyObject *t_SortedSetDocValuesReaderState$OrdRange_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SortedSetDocValuesReaderState$OrdRange_instance_(PyTypeObject *type, PyObject *arg);
          static int t_SortedSetDocValuesReaderState$OrdRange_init_(t_SortedSetDocValuesReaderState$OrdRange *self, PyObject *args, PyObject *kwds);
          static PyObject *t_SortedSetDocValuesReaderState$OrdRange_get__end(t_SortedSetDocValuesReaderState$OrdRange *self, void *data);
          static PyObject *t_SortedSetDocValuesReaderState$OrdRange_get__start(t_SortedSetDocValuesReaderState$OrdRange *self, void *data);

          static PyGetSetDef t_SortedSetDocValuesReaderState$OrdRange__fields_[] = {
            DECLARE_GET_FIELD(t_SortedSetDocValuesReaderState$OrdRange, end),
            DECLARE_GET_FIELD(t_SortedSetDocValuesReaderState$OrdRange, start),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_SortedSetDocValuesReaderState$OrdRange__methods_[] = {
            DECLARE_METHOD(t_SortedSetDocValuesReaderState$OrdRange, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SortedSetDocValuesReaderState$OrdRange, instance_, METH_O | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(SortedSetDocValuesReaderState$OrdRange, t_SortedSetDocValuesReaderState$OrdRange, ::java::lang::Object, SortedSetDocValuesReaderState$OrdRange, t_SortedSetDocValuesReaderState$OrdRange_init_, 0, 0, t_SortedSetDocValuesReaderState$OrdRange__fields_, 0, 0);

          void t_SortedSetDocValuesReaderState$OrdRange::install(PyObject *module)
          {
            installType(&PY_TYPE(SortedSetDocValuesReaderState$OrdRange), module, "SortedSetDocValuesReaderState$OrdRange", 0);
          }

          void t_SortedSetDocValuesReaderState$OrdRange::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(SortedSetDocValuesReaderState$OrdRange).tp_dict, "class_", make_descriptor(SortedSetDocValuesReaderState$OrdRange::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(SortedSetDocValuesReaderState$OrdRange).tp_dict, "wrapfn_", make_descriptor(t_SortedSetDocValuesReaderState$OrdRange::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(SortedSetDocValuesReaderState$OrdRange).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_SortedSetDocValuesReaderState$OrdRange_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, SortedSetDocValuesReaderState$OrdRange::initializeClass, 1)))
              return NULL;
            return t_SortedSetDocValuesReaderState$OrdRange::wrap_Object(SortedSetDocValuesReaderState$OrdRange(((t_SortedSetDocValuesReaderState$OrdRange *) arg)->object.this$));
          }
          static PyObject *t_SortedSetDocValuesReaderState$OrdRange_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, SortedSetDocValuesReaderState$OrdRange::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_SortedSetDocValuesReaderState$OrdRange_init_(t_SortedSetDocValuesReaderState$OrdRange *self, PyObject *args, PyObject *kwds)
          {
            jint a0;
            jint a1;
            SortedSetDocValuesReaderState$OrdRange object((jobject) NULL);

            if (!parseArgs(args, "II", &a0, &a1))
            {
              INT_CALL(object = SortedSetDocValuesReaderState$OrdRange(a0, a1));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_SortedSetDocValuesReaderState$OrdRange_get__end(t_SortedSetDocValuesReaderState$OrdRange *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object._get_end());
            return PyInt_FromLong((long) value);
          }

          static PyObject *t_SortedSetDocValuesReaderState$OrdRange_get__start(t_SortedSetDocValuesReaderState$OrdRange *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object._get_start());
            return PyInt_FromLong((long) value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/facet/taxonomy/writercache/NameIntCacheLRU.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace taxonomy {
          namespace writercache {

            ::java::lang::Class *NameIntCacheLRU::class$ = NULL;
            jmethodID *NameIntCacheLRU::mids$ = NULL;
            bool NameIntCacheLRU::live$ = false;

            jclass NameIntCacheLRU::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/facet/taxonomy/writercache/NameIntCacheLRU");

                mids$ = new jmethodID[max_mid];
                mids$[mid_getMaxSize_54c6a179] = env->getMethodID(cls, "getMaxSize", "()I");
                mids$[mid_getSize_54c6a179] = env->getMethodID(cls, "getSize", "()I");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            jint NameIntCacheLRU::getMaxSize() const
            {
              return env->callIntMethod(this$, mids$[mid_getMaxSize_54c6a179]);
            }

            jint NameIntCacheLRU::getSize() const
            {
              return env->callIntMethod(this$, mids$[mid_getSize_54c6a179]);
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace taxonomy {
          namespace writercache {
            static PyObject *t_NameIntCacheLRU_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_NameIntCacheLRU_instance_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_NameIntCacheLRU_getMaxSize(t_NameIntCacheLRU *self);
            static PyObject *t_NameIntCacheLRU_getSize(t_NameIntCacheLRU *self);
            static PyObject *t_NameIntCacheLRU_get__maxSize(t_NameIntCacheLRU *self, void *data);
            static PyObject *t_NameIntCacheLRU_get__size(t_NameIntCacheLRU *self, void *data);
            static PyGetSetDef t_NameIntCacheLRU__fields_[] = {
              DECLARE_GET_FIELD(t_NameIntCacheLRU, maxSize),
              DECLARE_GET_FIELD(t_NameIntCacheLRU, size),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_NameIntCacheLRU__methods_[] = {
              DECLARE_METHOD(t_NameIntCacheLRU, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_NameIntCacheLRU, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_NameIntCacheLRU, getMaxSize, METH_NOARGS),
              DECLARE_METHOD(t_NameIntCacheLRU, getSize, METH_NOARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(NameIntCacheLRU, t_NameIntCacheLRU, ::java::lang::Object, NameIntCacheLRU, abstract_init, 0, 0, t_NameIntCacheLRU__fields_, 0, 0);

            void t_NameIntCacheLRU::install(PyObject *module)
            {
              installType(&PY_TYPE(NameIntCacheLRU), module, "NameIntCacheLRU", 0);
            }

            void t_NameIntCacheLRU::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(NameIntCacheLRU).tp_dict, "class_", make_descriptor(NameIntCacheLRU::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(NameIntCacheLRU).tp_dict, "wrapfn_", make_descriptor(t_NameIntCacheLRU::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(NameIntCacheLRU).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_NameIntCacheLRU_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, NameIntCacheLRU::initializeClass, 1)))
                return NULL;
              return t_NameIntCacheLRU::wrap_Object(NameIntCacheLRU(((t_NameIntCacheLRU *) arg)->object.this$));
            }
            static PyObject *t_NameIntCacheLRU_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, NameIntCacheLRU::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static PyObject *t_NameIntCacheLRU_getMaxSize(t_NameIntCacheLRU *self)
            {
              jint result;
              OBJ_CALL(result = self->object.getMaxSize());
              return PyInt_FromLong((long) result);
            }

            static PyObject *t_NameIntCacheLRU_getSize(t_NameIntCacheLRU *self)
            {
              jint result;
              OBJ_CALL(result = self->object.getSize());
              return PyInt_FromLong((long) result);
            }

            static PyObject *t_NameIntCacheLRU_get__maxSize(t_NameIntCacheLRU *self, void *data)
            {
              jint value;
              OBJ_CALL(value = self->object.getMaxSize());
              return PyInt_FromLong((long) value);
            }

            static PyObject *t_NameIntCacheLRU_get__size(t_NameIntCacheLRU *self, void *data)
            {
              jint value;
              OBJ_CALL(value = self->object.getSize());
              return PyInt_FromLong((long) value);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/standard/CommonQueryParserConfiguration.h"
#include "java/util/Locale.h"
#include "java/util/TimeZone.h"
#include "org/apache/lucene/document/DateTools$Resolution.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/search/MultiTermQuery$RewriteMethod.h"
#include "org/apache/lucene/analysis/Analyzer.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {

            ::java::lang::Class *CommonQueryParserConfiguration::class$ = NULL;
            jmethodID *CommonQueryParserConfiguration::mids$ = NULL;
            bool CommonQueryParserConfiguration::live$ = false;

            jclass CommonQueryParserConfiguration::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/standard/CommonQueryParserConfiguration");

                mids$ = new jmethodID[max_mid];
                mids$[mid_getAllowLeadingWildcard_54c6a16a] = env->getMethodID(cls, "getAllowLeadingWildcard", "()Z");
                mids$[mid_getAnalyzer_347f60a9] = env->getMethodID(cls, "getAnalyzer", "()Lorg/apache/lucene/analysis/Analyzer;");
                mids$[mid_getEnablePositionIncrements_54c6a16a] = env->getMethodID(cls, "getEnablePositionIncrements", "()Z");
                mids$[mid_getFuzzyMinSim_54c6a176] = env->getMethodID(cls, "getFuzzyMinSim", "()F");
                mids$[mid_getFuzzyPrefixLength_54c6a179] = env->getMethodID(cls, "getFuzzyPrefixLength", "()I");
                mids$[mid_getLocale_8bb22876] = env->getMethodID(cls, "getLocale", "()Ljava/util/Locale;");
                mids$[mid_getLowercaseExpandedTerms_54c6a16a] = env->getMethodID(cls, "getLowercaseExpandedTerms", "()Z");
                mids$[mid_getMultiTermRewriteMethod_8919154b] = env->getMethodID(cls, "getMultiTermRewriteMethod", "()Lorg/apache/lucene/search/MultiTermQuery$RewriteMethod;");
                mids$[mid_getPhraseSlop_54c6a179] = env->getMethodID(cls, "getPhraseSlop", "()I");
                mids$[mid_getTimeZone_6cce40e5] = env->getMethodID(cls, "getTimeZone", "()Ljava/util/TimeZone;");
                mids$[mid_setAllowLeadingWildcard_bb0c767f] = env->getMethodID(cls, "setAllowLeadingWildcard", "(Z)V");
                mids$[mid_setDateResolution_285c1498] = env->getMethodID(cls, "setDateResolution", "(Lorg/apache/lucene/document/DateTools$Resolution;)V");
                mids$[mid_setEnablePositionIncrements_bb0c767f] = env->getMethodID(cls, "setEnablePositionIncrements", "(Z)V");
                mids$[mid_setFuzzyMinSim_06298cab] = env->getMethodID(cls, "setFuzzyMinSim", "(F)V");
                mids$[mid_setFuzzyPrefixLength_39c7bd3c] = env->getMethodID(cls, "setFuzzyPrefixLength", "(I)V");
                mids$[mid_setLocale_56b0e4b3] = env->getMethodID(cls, "setLocale", "(Ljava/util/Locale;)V");
                mids$[mid_setLowercaseExpandedTerms_bb0c767f] = env->getMethodID(cls, "setLowercaseExpandedTerms", "(Z)V");
                mids$[mid_setMultiTermRewriteMethod_c3c3909e] = env->getMethodID(cls, "setMultiTermRewriteMethod", "(Lorg/apache/lucene/search/MultiTermQuery$RewriteMethod;)V");
                mids$[mid_setPhraseSlop_39c7bd3c] = env->getMethodID(cls, "setPhraseSlop", "(I)V");
                mids$[mid_setTimeZone_f7b32d20] = env->getMethodID(cls, "setTimeZone", "(Ljava/util/TimeZone;)V");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            jboolean CommonQueryParserConfiguration::getAllowLeadingWildcard() const
            {
              return env->callBooleanMethod(this$, mids$[mid_getAllowLeadingWildcard_54c6a16a]);
            }

            ::org::apache::lucene::analysis::Analyzer CommonQueryParserConfiguration::getAnalyzer() const
            {
              return ::org::apache::lucene::analysis::Analyzer(env->callObjectMethod(this$, mids$[mid_getAnalyzer_347f60a9]));
            }

            jboolean CommonQueryParserConfiguration::getEnablePositionIncrements() const
            {
              return env->callBooleanMethod(this$, mids$[mid_getEnablePositionIncrements_54c6a16a]);
            }

            jfloat CommonQueryParserConfiguration::getFuzzyMinSim() const
            {
              return env->callFloatMethod(this$, mids$[mid_getFuzzyMinSim_54c6a176]);
            }

            jint CommonQueryParserConfiguration::getFuzzyPrefixLength() const
            {
              return env->callIntMethod(this$, mids$[mid_getFuzzyPrefixLength_54c6a179]);
            }

            ::java::util::Locale CommonQueryParserConfiguration::getLocale() const
            {
              return ::java::util::Locale(env->callObjectMethod(this$, mids$[mid_getLocale_8bb22876]));
            }

            jboolean CommonQueryParserConfiguration::getLowercaseExpandedTerms() const
            {
              return env->callBooleanMethod(this$, mids$[mid_getLowercaseExpandedTerms_54c6a16a]);
            }

            ::org::apache::lucene::search::MultiTermQuery$RewriteMethod CommonQueryParserConfiguration::getMultiTermRewriteMethod() const
            {
              return ::org::apache::lucene::search::MultiTermQuery$RewriteMethod(env->callObjectMethod(this$, mids$[mid_getMultiTermRewriteMethod_8919154b]));
            }

            jint CommonQueryParserConfiguration::getPhraseSlop() const
            {
              return env->callIntMethod(this$, mids$[mid_getPhraseSlop_54c6a179]);
            }

            ::java::util::TimeZone CommonQueryParserConfiguration::getTimeZone() const
            {
              return ::java::util::TimeZone(env->callObjectMethod(this$, mids$[mid_getTimeZone_6cce40e5]));
            }

            void CommonQueryParserConfiguration::setAllowLeadingWildcard(jboolean a0) const
            {
              env->callVoidMethod(this$, mids$[mid_setAllowLeadingWildcard_bb0c767f], a0);
            }

            void CommonQueryParserConfiguration::setDateResolution(const ::org::apache::lucene::document::DateTools$Resolution & a0) const
            {
              env->callVoidMethod(this$, mids$[mid_setDateResolution_285c1498], a0.this$);
            }

            void CommonQueryParserConfiguration::setEnablePositionIncrements(jboolean a0) const
            {
              env->callVoidMethod(this$, mids$[mid_setEnablePositionIncrements_bb0c767f], a0);
            }

            void CommonQueryParserConfiguration::setFuzzyMinSim(jfloat a0) const
            {
              env->callVoidMethod(this$, mids$[mid_setFuzzyMinSim_06298cab], a0);
            }

            void CommonQueryParserConfiguration::setFuzzyPrefixLength(jint a0) const
            {
              env->callVoidMethod(this$, mids$[mid_setFuzzyPrefixLength_39c7bd3c], a0);
            }

            void CommonQueryParserConfiguration::setLocale(const ::java::util::Locale & a0) const
            {
              env->callVoidMethod(this$, mids$[mid_setLocale_56b0e4b3], a0.this$);
            }

            void CommonQueryParserConfiguration::setLowercaseExpandedTerms(jboolean a0) const
            {
              env->callVoidMethod(this$, mids$[mid_setLowercaseExpandedTerms_bb0c767f], a0);
            }

            void CommonQueryParserConfiguration::setMultiTermRewriteMethod(const ::org::apache::lucene::search::MultiTermQuery$RewriteMethod & a0) const
            {
              env->callVoidMethod(this$, mids$[mid_setMultiTermRewriteMethod_c3c3909e], a0.this$);
            }

            void CommonQueryParserConfiguration::setPhraseSlop(jint a0) const
            {
              env->callVoidMethod(this$, mids$[mid_setPhraseSlop_39c7bd3c], a0);
            }

            void CommonQueryParserConfiguration::setTimeZone(const ::java::util::TimeZone & a0) const
            {
              env->callVoidMethod(this$, mids$[mid_setTimeZone_f7b32d20], a0.this$);
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            static PyObject *t_CommonQueryParserConfiguration_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_CommonQueryParserConfiguration_instance_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_CommonQueryParserConfiguration_getAllowLeadingWildcard(t_CommonQueryParserConfiguration *self);
            static PyObject *t_CommonQueryParserConfiguration_getAnalyzer(t_CommonQueryParserConfiguration *self);
            static PyObject *t_CommonQueryParserConfiguration_getEnablePositionIncrements(t_CommonQueryParserConfiguration *self);
            static PyObject *t_CommonQueryParserConfiguration_getFuzzyMinSim(t_CommonQueryParserConfiguration *self);
            static PyObject *t_CommonQueryParserConfiguration_getFuzzyPrefixLength(t_CommonQueryParserConfiguration *self);
            static PyObject *t_CommonQueryParserConfiguration_getLocale(t_CommonQueryParserConfiguration *self);
            static PyObject *t_CommonQueryParserConfiguration_getLowercaseExpandedTerms(t_CommonQueryParserConfiguration *self);
            static PyObject *t_CommonQueryParserConfiguration_getMultiTermRewriteMethod(t_CommonQueryParserConfiguration *self);
            static PyObject *t_CommonQueryParserConfiguration_getPhraseSlop(t_CommonQueryParserConfiguration *self);
            static PyObject *t_CommonQueryParserConfiguration_getTimeZone(t_CommonQueryParserConfiguration *self);
            static PyObject *t_CommonQueryParserConfiguration_setAllowLeadingWildcard(t_CommonQueryParserConfiguration *self, PyObject *arg);
            static PyObject *t_CommonQueryParserConfiguration_setDateResolution(t_CommonQueryParserConfiguration *self, PyObject *arg);
            static PyObject *t_CommonQueryParserConfiguration_setEnablePositionIncrements(t_CommonQueryParserConfiguration *self, PyObject *arg);
            static PyObject *t_CommonQueryParserConfiguration_setFuzzyMinSim(t_CommonQueryParserConfiguration *self, PyObject *arg);
            static PyObject *t_CommonQueryParserConfiguration_setFuzzyPrefixLength(t_CommonQueryParserConfiguration *self, PyObject *arg);
            static PyObject *t_CommonQueryParserConfiguration_setLocale(t_CommonQueryParserConfiguration *self, PyObject *arg);
            static PyObject *t_CommonQueryParserConfiguration_setLowercaseExpandedTerms(t_CommonQueryParserConfiguration *self, PyObject *arg);
            static PyObject *t_CommonQueryParserConfiguration_setMultiTermRewriteMethod(t_CommonQueryParserConfiguration *self, PyObject *arg);
            static PyObject *t_CommonQueryParserConfiguration_setPhraseSlop(t_CommonQueryParserConfiguration *self, PyObject *arg);
            static PyObject *t_CommonQueryParserConfiguration_setTimeZone(t_CommonQueryParserConfiguration *self, PyObject *arg);
            static PyObject *t_CommonQueryParserConfiguration_get__allowLeadingWildcard(t_CommonQueryParserConfiguration *self, void *data);
            static int t_CommonQueryParserConfiguration_set__allowLeadingWildcard(t_CommonQueryParserConfiguration *self, PyObject *arg, void *data);
            static PyObject *t_CommonQueryParserConfiguration_get__analyzer(t_CommonQueryParserConfiguration *self, void *data);
            static int t_CommonQueryParserConfiguration_set__dateResolution(t_CommonQueryParserConfiguration *self, PyObject *arg, void *data);
            static PyObject *t_CommonQueryParserConfiguration_get__enablePositionIncrements(t_CommonQueryParserConfiguration *self, void *data);
            static int t_CommonQueryParserConfiguration_set__enablePositionIncrements(t_CommonQueryParserConfiguration *self, PyObject *arg, void *data);
            static PyObject *t_CommonQueryParserConfiguration_get__fuzzyMinSim(t_CommonQueryParserConfiguration *self, void *data);
            static int t_CommonQueryParserConfiguration_set__fuzzyMinSim(t_CommonQueryParserConfiguration *self, PyObject *arg, void *data);
            static PyObject *t_CommonQueryParserConfiguration_get__fuzzyPrefixLength(t_CommonQueryParserConfiguration *self, void *data);
            static int t_CommonQueryParserConfiguration_set__fuzzyPrefixLength(t_CommonQueryParserConfiguration *self, PyObject *arg, void *data);
            static PyObject *t_CommonQueryParserConfiguration_get__locale(t_CommonQueryParserConfiguration *self, void *data);
            static int t_CommonQueryParserConfiguration_set__locale(t_CommonQueryParserConfiguration *self, PyObject *arg, void *data);
            static PyObject *t_CommonQueryParserConfiguration_get__lowercaseExpandedTerms(t_CommonQueryParserConfiguration *self, void *data);
            static int t_CommonQueryParserConfiguration_set__lowercaseExpandedTerms(t_CommonQueryParserConfiguration *self, PyObject *arg, void *data);
            static PyObject *t_CommonQueryParserConfiguration_get__multiTermRewriteMethod(t_CommonQueryParserConfiguration *self, void *data);
            static int t_CommonQueryParserConfiguration_set__multiTermRewriteMethod(t_CommonQueryParserConfiguration *self, PyObject *arg, void *data);
            static PyObject *t_CommonQueryParserConfiguration_get__phraseSlop(t_CommonQueryParserConfiguration *self, void *data);
            static int t_CommonQueryParserConfiguration_set__phraseSlop(t_CommonQueryParserConfiguration *self, PyObject *arg, void *data);
            static PyObject *t_CommonQueryParserConfiguration_get__timeZone(t_CommonQueryParserConfiguration *self, void *data);
            static int t_CommonQueryParserConfiguration_set__timeZone(t_CommonQueryParserConfiguration *self, PyObject *arg, void *data);
            static PyGetSetDef t_CommonQueryParserConfiguration__fields_[] = {
              DECLARE_GETSET_FIELD(t_CommonQueryParserConfiguration, allowLeadingWildcard),
              DECLARE_GET_FIELD(t_CommonQueryParserConfiguration, analyzer),
              DECLARE_SET_FIELD(t_CommonQueryParserConfiguration, dateResolution),
              DECLARE_GETSET_FIELD(t_CommonQueryParserConfiguration, enablePositionIncrements),
              DECLARE_GETSET_FIELD(t_CommonQueryParserConfiguration, fuzzyMinSim),
              DECLARE_GETSET_FIELD(t_CommonQueryParserConfiguration, fuzzyPrefixLength),
              DECLARE_GETSET_FIELD(t_CommonQueryParserConfiguration, locale),
              DECLARE_GETSET_FIELD(t_CommonQueryParserConfiguration, lowercaseExpandedTerms),
              DECLARE_GETSET_FIELD(t_CommonQueryParserConfiguration, multiTermRewriteMethod),
              DECLARE_GETSET_FIELD(t_CommonQueryParserConfiguration, phraseSlop),
              DECLARE_GETSET_FIELD(t_CommonQueryParserConfiguration, timeZone),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_CommonQueryParserConfiguration__methods_[] = {
              DECLARE_METHOD(t_CommonQueryParserConfiguration, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_CommonQueryParserConfiguration, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_CommonQueryParserConfiguration, getAllowLeadingWildcard, METH_NOARGS),
              DECLARE_METHOD(t_CommonQueryParserConfiguration, getAnalyzer, METH_NOARGS),
              DECLARE_METHOD(t_CommonQueryParserConfiguration, getEnablePositionIncrements, METH_NOARGS),
              DECLARE_METHOD(t_CommonQueryParserConfiguration, getFuzzyMinSim, METH_NOARGS),
              DECLARE_METHOD(t_CommonQueryParserConfiguration, getFuzzyPrefixLength, METH_NOARGS),
              DECLARE_METHOD(t_CommonQueryParserConfiguration, getLocale, METH_NOARGS),
              DECLARE_METHOD(t_CommonQueryParserConfiguration, getLowercaseExpandedTerms, METH_NOARGS),
              DECLARE_METHOD(t_CommonQueryParserConfiguration, getMultiTermRewriteMethod, METH_NOARGS),
              DECLARE_METHOD(t_CommonQueryParserConfiguration, getPhraseSlop, METH_NOARGS),
              DECLARE_METHOD(t_CommonQueryParserConfiguration, getTimeZone, METH_NOARGS),
              DECLARE_METHOD(t_CommonQueryParserConfiguration, setAllowLeadingWildcard, METH_O),
              DECLARE_METHOD(t_CommonQueryParserConfiguration, setDateResolution, METH_O),
              DECLARE_METHOD(t_CommonQueryParserConfiguration, setEnablePositionIncrements, METH_O),
              DECLARE_METHOD(t_CommonQueryParserConfiguration, setFuzzyMinSim, METH_O),
              DECLARE_METHOD(t_CommonQueryParserConfiguration, setFuzzyPrefixLength, METH_O),
              DECLARE_METHOD(t_CommonQueryParserConfiguration, setLocale, METH_O),
              DECLARE_METHOD(t_CommonQueryParserConfiguration, setLowercaseExpandedTerms, METH_O),
              DECLARE_METHOD(t_CommonQueryParserConfiguration, setMultiTermRewriteMethod, METH_O),
              DECLARE_METHOD(t_CommonQueryParserConfiguration, setPhraseSlop, METH_O),
              DECLARE_METHOD(t_CommonQueryParserConfiguration, setTimeZone, METH_O),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(CommonQueryParserConfiguration, t_CommonQueryParserConfiguration, ::java::lang::Object, CommonQueryParserConfiguration, abstract_init, 0, 0, t_CommonQueryParserConfiguration__fields_, 0, 0);

            void t_CommonQueryParserConfiguration::install(PyObject *module)
            {
              installType(&PY_TYPE(CommonQueryParserConfiguration), module, "CommonQueryParserConfiguration", 0);
            }

            void t_CommonQueryParserConfiguration::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(CommonQueryParserConfiguration).tp_dict, "class_", make_descriptor(CommonQueryParserConfiguration::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(CommonQueryParserConfiguration).tp_dict, "wrapfn_", make_descriptor(t_CommonQueryParserConfiguration::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(CommonQueryParserConfiguration).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_CommonQueryParserConfiguration_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, CommonQueryParserConfiguration::initializeClass, 1)))
                return NULL;
              return t_CommonQueryParserConfiguration::wrap_Object(CommonQueryParserConfiguration(((t_CommonQueryParserConfiguration *) arg)->object.this$));
            }
            static PyObject *t_CommonQueryParserConfiguration_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, CommonQueryParserConfiguration::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static PyObject *t_CommonQueryParserConfiguration_getAllowLeadingWildcard(t_CommonQueryParserConfiguration *self)
            {
              jboolean result;
              OBJ_CALL(result = self->object.getAllowLeadingWildcard());
              Py_RETURN_BOOL(result);
            }

            static PyObject *t_CommonQueryParserConfiguration_getAnalyzer(t_CommonQueryParserConfiguration *self)
            {
              ::org::apache::lucene::analysis::Analyzer result((jobject) NULL);
              OBJ_CALL(result = self->object.getAnalyzer());
              return ::org::apache::lucene::analysis::t_Analyzer::wrap_Object(result);
            }

            static PyObject *t_CommonQueryParserConfiguration_getEnablePositionIncrements(t_CommonQueryParserConfiguration *self)
            {
              jboolean result;
              OBJ_CALL(result = self->object.getEnablePositionIncrements());
              Py_RETURN_BOOL(result);
            }

            static PyObject *t_CommonQueryParserConfiguration_getFuzzyMinSim(t_CommonQueryParserConfiguration *self)
            {
              jfloat result;
              OBJ_CALL(result = self->object.getFuzzyMinSim());
              return PyFloat_FromDouble((double) result);
            }

            static PyObject *t_CommonQueryParserConfiguration_getFuzzyPrefixLength(t_CommonQueryParserConfiguration *self)
            {
              jint result;
              OBJ_CALL(result = self->object.getFuzzyPrefixLength());
              return PyInt_FromLong((long) result);
            }

            static PyObject *t_CommonQueryParserConfiguration_getLocale(t_CommonQueryParserConfiguration *self)
            {
              ::java::util::Locale result((jobject) NULL);
              OBJ_CALL(result = self->object.getLocale());
              return ::java::util::t_Locale::wrap_Object(result);
            }

            static PyObject *t_CommonQueryParserConfiguration_getLowercaseExpandedTerms(t_CommonQueryParserConfiguration *self)
            {
              jboolean result;
              OBJ_CALL(result = self->object.getLowercaseExpandedTerms());
              Py_RETURN_BOOL(result);
            }

            static PyObject *t_CommonQueryParserConfiguration_getMultiTermRewriteMethod(t_CommonQueryParserConfiguration *self)
            {
              ::org::apache::lucene::search::MultiTermQuery$RewriteMethod result((jobject) NULL);
              OBJ_CALL(result = self->object.getMultiTermRewriteMethod());
              return ::org::apache::lucene::search::t_MultiTermQuery$RewriteMethod::wrap_Object(result);
            }

            static PyObject *t_CommonQueryParserConfiguration_getPhraseSlop(t_CommonQueryParserConfiguration *self)
            {
              jint result;
              OBJ_CALL(result = self->object.getPhraseSlop());
              return PyInt_FromLong((long) result);
            }

            static PyObject *t_CommonQueryParserConfiguration_getTimeZone(t_CommonQueryParserConfiguration *self)
            {
              ::java::util::TimeZone result((jobject) NULL);
              OBJ_CALL(result = self->object.getTimeZone());
              return ::java::util::t_TimeZone::wrap_Object(result);
            }

            static PyObject *t_CommonQueryParserConfiguration_setAllowLeadingWildcard(t_CommonQueryParserConfiguration *self, PyObject *arg)
            {
              jboolean a0;

              if (!parseArg(arg, "Z", &a0))
              {
                OBJ_CALL(self->object.setAllowLeadingWildcard(a0));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "setAllowLeadingWildcard", arg);
              return NULL;
            }

            static PyObject *t_CommonQueryParserConfiguration_setDateResolution(t_CommonQueryParserConfiguration *self, PyObject *arg)
            {
              ::org::apache::lucene::document::DateTools$Resolution a0((jobject) NULL);
              PyTypeObject **p0;

              if (!parseArg(arg, "K", ::org::apache::lucene::document::DateTools$Resolution::initializeClass, &a0, &p0, ::org::apache::lucene::document::t_DateTools$Resolution::parameters_))
              {
                OBJ_CALL(self->object.setDateResolution(a0));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "setDateResolution", arg);
              return NULL;
            }

            static PyObject *t_CommonQueryParserConfiguration_setEnablePositionIncrements(t_CommonQueryParserConfiguration *self, PyObject *arg)
            {
              jboolean a0;

              if (!parseArg(arg, "Z", &a0))
              {
                OBJ_CALL(self->object.setEnablePositionIncrements(a0));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "setEnablePositionIncrements", arg);
              return NULL;
            }

            static PyObject *t_CommonQueryParserConfiguration_setFuzzyMinSim(t_CommonQueryParserConfiguration *self, PyObject *arg)
            {
              jfloat a0;

              if (!parseArg(arg, "F", &a0))
              {
                OBJ_CALL(self->object.setFuzzyMinSim(a0));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "setFuzzyMinSim", arg);
              return NULL;
            }

            static PyObject *t_CommonQueryParserConfiguration_setFuzzyPrefixLength(t_CommonQueryParserConfiguration *self, PyObject *arg)
            {
              jint a0;

              if (!parseArg(arg, "I", &a0))
              {
                OBJ_CALL(self->object.setFuzzyPrefixLength(a0));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "setFuzzyPrefixLength", arg);
              return NULL;
            }

            static PyObject *t_CommonQueryParserConfiguration_setLocale(t_CommonQueryParserConfiguration *self, PyObject *arg)
            {
              ::java::util::Locale a0((jobject) NULL);

              if (!parseArg(arg, "k", ::java::util::Locale::initializeClass, &a0))
              {
                OBJ_CALL(self->object.setLocale(a0));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "setLocale", arg);
              return NULL;
            }

            static PyObject *t_CommonQueryParserConfiguration_setLowercaseExpandedTerms(t_CommonQueryParserConfiguration *self, PyObject *arg)
            {
              jboolean a0;

              if (!parseArg(arg, "Z", &a0))
              {
                OBJ_CALL(self->object.setLowercaseExpandedTerms(a0));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "setLowercaseExpandedTerms", arg);
              return NULL;
            }

            static PyObject *t_CommonQueryParserConfiguration_setMultiTermRewriteMethod(t_CommonQueryParserConfiguration *self, PyObject *arg)
            {
              ::org::apache::lucene::search::MultiTermQuery$RewriteMethod a0((jobject) NULL);

              if (!parseArg(arg, "k", ::org::apache::lucene::search::MultiTermQuery$RewriteMethod::initializeClass, &a0))
              {
                OBJ_CALL(self->object.setMultiTermRewriteMethod(a0));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "setMultiTermRewriteMethod", arg);
              return NULL;
            }

            static PyObject *t_CommonQueryParserConfiguration_setPhraseSlop(t_CommonQueryParserConfiguration *self, PyObject *arg)
            {
              jint a0;

              if (!parseArg(arg, "I", &a0))
              {
                OBJ_CALL(self->object.setPhraseSlop(a0));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "setPhraseSlop", arg);
              return NULL;
            }

            static PyObject *t_CommonQueryParserConfiguration_setTimeZone(t_CommonQueryParserConfiguration *self, PyObject *arg)
            {
              ::java::util::TimeZone a0((jobject) NULL);

              if (!parseArg(arg, "k", ::java::util::TimeZone::initializeClass, &a0))
              {
                OBJ_CALL(self->object.setTimeZone(a0));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "setTimeZone", arg);
              return NULL;
            }

            static PyObject *t_CommonQueryParserConfiguration_get__allowLeadingWildcard(t_CommonQueryParserConfiguration *self, void *data)
            {
              jboolean value;
              OBJ_CALL(value = self->object.getAllowLeadingWildcard());
              Py_RETURN_BOOL(value);
            }
            static int t_CommonQueryParserConfiguration_set__allowLeadingWildcard(t_CommonQueryParserConfiguration *self, PyObject *arg, void *data)
            {
              {
                jboolean value;
                if (!parseArg(arg, "Z", &value))
                {
                  INT_CALL(self->object.setAllowLeadingWildcard(value));
                  return 0;
                }
              }
              PyErr_SetArgsError((PyObject *) self, "allowLeadingWildcard", arg);
              return -1;
            }

            static PyObject *t_CommonQueryParserConfiguration_get__analyzer(t_CommonQueryParserConfiguration *self, void *data)
            {
              ::org::apache::lucene::analysis::Analyzer value((jobject) NULL);
              OBJ_CALL(value = self->object.getAnalyzer());
              return ::org::apache::lucene::analysis::t_Analyzer::wrap_Object(value);
            }

            static int t_CommonQueryParserConfiguration_set__dateResolution(t_CommonQueryParserConfiguration *self, PyObject *arg, void *data)
            {
              {
                ::org::apache::lucene::document::DateTools$Resolution value((jobject) NULL);
                if (!parseArg(arg, "k", ::org::apache::lucene::document::DateTools$Resolution::initializeClass, &value))
                {
                  INT_CALL(self->object.setDateResolution(value));
                  return 0;
                }
              }
              PyErr_SetArgsError((PyObject *) self, "dateResolution", arg);
              return -1;
            }

            static PyObject *t_CommonQueryParserConfiguration_get__enablePositionIncrements(t_CommonQueryParserConfiguration *self, void *data)
            {
              jboolean value;
              OBJ_CALL(value = self->object.getEnablePositionIncrements());
              Py_RETURN_BOOL(value);
            }
            static int t_CommonQueryParserConfiguration_set__enablePositionIncrements(t_CommonQueryParserConfiguration *self, PyObject *arg, void *data)
            {
              {
                jboolean value;
                if (!parseArg(arg, "Z", &value))
                {
                  INT_CALL(self->object.setEnablePositionIncrements(value));
                  return 0;
                }
              }
              PyErr_SetArgsError((PyObject *) self, "enablePositionIncrements", arg);
              return -1;
            }

            static PyObject *t_CommonQueryParserConfiguration_get__fuzzyMinSim(t_CommonQueryParserConfiguration *self, void *data)
            {
              jfloat value;
              OBJ_CALL(value = self->object.getFuzzyMinSim());
              return PyFloat_FromDouble((double) value);
            }
            static int t_CommonQueryParserConfiguration_set__fuzzyMinSim(t_CommonQueryParserConfiguration *self, PyObject *arg, void *data)
            {
              {
                jfloat value;
                if (!parseArg(arg, "F", &value))
                {
                  INT_CALL(self->object.setFuzzyMinSim(value));
                  return 0;
                }
              }
              PyErr_SetArgsError((PyObject *) self, "fuzzyMinSim", arg);
              return -1;
            }

            static PyObject *t_CommonQueryParserConfiguration_get__fuzzyPrefixLength(t_CommonQueryParserConfiguration *self, void *data)
            {
              jint value;
              OBJ_CALL(value = self->object.getFuzzyPrefixLength());
              return PyInt_FromLong((long) value);
            }
            static int t_CommonQueryParserConfiguration_set__fuzzyPrefixLength(t_CommonQueryParserConfiguration *self, PyObject *arg, void *data)
            {
              {
                jint value;
                if (!parseArg(arg, "I", &value))
                {
                  INT_CALL(self->object.setFuzzyPrefixLength(value));
                  return 0;
                }
              }
              PyErr_SetArgsError((PyObject *) self, "fuzzyPrefixLength", arg);
              return -1;
            }

            static PyObject *t_CommonQueryParserConfiguration_get__locale(t_CommonQueryParserConfiguration *self, void *data)
            {
              ::java::util::Locale value((jobject) NULL);
              OBJ_CALL(value = self->object.getLocale());
              return ::java::util::t_Locale::wrap_Object(value);
            }
            static int t_CommonQueryParserConfiguration_set__locale(t_CommonQueryParserConfiguration *self, PyObject *arg, void *data)
            {
              {
                ::java::util::Locale value((jobject) NULL);
                if (!parseArg(arg, "k", ::java::util::Locale::initializeClass, &value))
                {
                  INT_CALL(self->object.setLocale(value));
                  return 0;
                }
              }
              PyErr_SetArgsError((PyObject *) self, "locale", arg);
              return -1;
            }

            static PyObject *t_CommonQueryParserConfiguration_get__lowercaseExpandedTerms(t_CommonQueryParserConfiguration *self, void *data)
            {
              jboolean value;
              OBJ_CALL(value = self->object.getLowercaseExpandedTerms());
              Py_RETURN_BOOL(value);
            }
            static int t_CommonQueryParserConfiguration_set__lowercaseExpandedTerms(t_CommonQueryParserConfiguration *self, PyObject *arg, void *data)
            {
              {
                jboolean value;
                if (!parseArg(arg, "Z", &value))
                {
                  INT_CALL(self->object.setLowercaseExpandedTerms(value));
                  return 0;
                }
              }
              PyErr_SetArgsError((PyObject *) self, "lowercaseExpandedTerms", arg);
              return -1;
            }

            static PyObject *t_CommonQueryParserConfiguration_get__multiTermRewriteMethod(t_CommonQueryParserConfiguration *self, void *data)
            {
              ::org::apache::lucene::search::MultiTermQuery$RewriteMethod value((jobject) NULL);
              OBJ_CALL(value = self->object.getMultiTermRewriteMethod());
              return ::org::apache::lucene::search::t_MultiTermQuery$RewriteMethod::wrap_Object(value);
            }
            static int t_CommonQueryParserConfiguration_set__multiTermRewriteMethod(t_CommonQueryParserConfiguration *self, PyObject *arg, void *data)
            {
              {
                ::org::apache::lucene::search::MultiTermQuery$RewriteMethod value((jobject) NULL);
                if (!parseArg(arg, "k", ::org::apache::lucene::search::MultiTermQuery$RewriteMethod::initializeClass, &value))
                {
                  INT_CALL(self->object.setMultiTermRewriteMethod(value));
                  return 0;
                }
              }
              PyErr_SetArgsError((PyObject *) self, "multiTermRewriteMethod", arg);
              return -1;
            }

            static PyObject *t_CommonQueryParserConfiguration_get__phraseSlop(t_CommonQueryParserConfiguration *self, void *data)
            {
              jint value;
              OBJ_CALL(value = self->object.getPhraseSlop());
              return PyInt_FromLong((long) value);
            }
            static int t_CommonQueryParserConfiguration_set__phraseSlop(t_CommonQueryParserConfiguration *self, PyObject *arg, void *data)
            {
              {
                jint value;
                if (!parseArg(arg, "I", &value))
                {
                  INT_CALL(self->object.setPhraseSlop(value));
                  return 0;
                }
              }
              PyErr_SetArgsError((PyObject *) self, "phraseSlop", arg);
              return -1;
            }

            static PyObject *t_CommonQueryParserConfiguration_get__timeZone(t_CommonQueryParserConfiguration *self, void *data)
            {
              ::java::util::TimeZone value((jobject) NULL);
              OBJ_CALL(value = self->object.getTimeZone());
              return ::java::util::t_TimeZone::wrap_Object(value);
            }
            static int t_CommonQueryParserConfiguration_set__timeZone(t_CommonQueryParserConfiguration *self, PyObject *arg, void *data)
            {
              {
                ::java::util::TimeZone value((jobject) NULL);
                if (!parseArg(arg, "k", ::java::util::TimeZone::initializeClass, &value))
                {
                  INT_CALL(self->object.setTimeZone(value));
                  return 0;
                }
              }
              PyErr_SetArgsError((PyObject *) self, "timeZone", arg);
              return -1;
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/miscellaneous/Lucene47WordDelimiterFilter.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "org/apache/lucene/analysis/util/CharArraySet.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {

          ::java::lang::Class *Lucene47WordDelimiterFilter::class$ = NULL;
          jmethodID *Lucene47WordDelimiterFilter::mids$ = NULL;
          bool Lucene47WordDelimiterFilter::live$ = false;
          jint Lucene47WordDelimiterFilter::ALPHA = (jint) 0;
          jint Lucene47WordDelimiterFilter::ALPHANUM = (jint) 0;
          jint Lucene47WordDelimiterFilter::CATENATE_ALL = (jint) 0;
          jint Lucene47WordDelimiterFilter::CATENATE_NUMBERS = (jint) 0;
          jint Lucene47WordDelimiterFilter::CATENATE_WORDS = (jint) 0;
          jint Lucene47WordDelimiterFilter::DIGIT = (jint) 0;
          jint Lucene47WordDelimiterFilter::GENERATE_NUMBER_PARTS = (jint) 0;
          jint Lucene47WordDelimiterFilter::GENERATE_WORD_PARTS = (jint) 0;
          jint Lucene47WordDelimiterFilter::LOWER = (jint) 0;
          jint Lucene47WordDelimiterFilter::PRESERVE_ORIGINAL = (jint) 0;
          jint Lucene47WordDelimiterFilter::SPLIT_ON_CASE_CHANGE = (jint) 0;
          jint Lucene47WordDelimiterFilter::SPLIT_ON_NUMERICS = (jint) 0;
          jint Lucene47WordDelimiterFilter::STEM_ENGLISH_POSSESSIVE = (jint) 0;
          jint Lucene47WordDelimiterFilter::SUBWORD_DELIM = (jint) 0;
          jint Lucene47WordDelimiterFilter::UPPER = (jint) 0;

          jclass Lucene47WordDelimiterFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/miscellaneous/Lucene47WordDelimiterFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_70257dbd] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;ILorg/apache/lucene/analysis/util/CharArraySet;)V");
              mids$[mid_init$_06e41d2a] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;[BILorg/apache/lucene/analysis/util/CharArraySet;)V");
              mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");
              mids$[mid_reset_54c6a166] = env->getMethodID(cls, "reset", "()V");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              ALPHA = env->getStaticIntField(cls, "ALPHA");
              ALPHANUM = env->getStaticIntField(cls, "ALPHANUM");
              CATENATE_ALL = env->getStaticIntField(cls, "CATENATE_ALL");
              CATENATE_NUMBERS = env->getStaticIntField(cls, "CATENATE_NUMBERS");
              CATENATE_WORDS = env->getStaticIntField(cls, "CATENATE_WORDS");
              DIGIT = env->getStaticIntField(cls, "DIGIT");
              GENERATE_NUMBER_PARTS = env->getStaticIntField(cls, "GENERATE_NUMBER_PARTS");
              GENERATE_WORD_PARTS = env->getStaticIntField(cls, "GENERATE_WORD_PARTS");
              LOWER = env->getStaticIntField(cls, "LOWER");
              PRESERVE_ORIGINAL = env->getStaticIntField(cls, "PRESERVE_ORIGINAL");
              SPLIT_ON_CASE_CHANGE = env->getStaticIntField(cls, "SPLIT_ON_CASE_CHANGE");
              SPLIT_ON_NUMERICS = env->getStaticIntField(cls, "SPLIT_ON_NUMERICS");
              STEM_ENGLISH_POSSESSIVE = env->getStaticIntField(cls, "STEM_ENGLISH_POSSESSIVE");
              SUBWORD_DELIM = env->getStaticIntField(cls, "SUBWORD_DELIM");
              UPPER = env->getStaticIntField(cls, "UPPER");
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          Lucene47WordDelimiterFilter::Lucene47WordDelimiterFilter(const ::org::apache::lucene::analysis::TokenStream & a0, jint a1, const ::org::apache::lucene::analysis::util::CharArraySet & a2) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_70257dbd, a0.this$, a1, a2.this$)) {}

          Lucene47WordDelimiterFilter::Lucene47WordDelimiterFilter(const ::org::apache::lucene::analysis::TokenStream & a0, const JArray< jbyte > & a1, jint a2, const ::org::apache::lucene::analysis::util::CharArraySet & a3) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_06e41d2a, a0.this$, a1.this$, a2, a3.this$)) {}

          jboolean Lucene47WordDelimiterFilter::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_54c6a16a]);
          }

          void Lucene47WordDelimiterFilter::reset() const
          {
            env->callVoidMethod(this$, mids$[mid_reset_54c6a166]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {
          static PyObject *t_Lucene47WordDelimiterFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Lucene47WordDelimiterFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_Lucene47WordDelimiterFilter_init_(t_Lucene47WordDelimiterFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_Lucene47WordDelimiterFilter_incrementToken(t_Lucene47WordDelimiterFilter *self, PyObject *args);
          static PyObject *t_Lucene47WordDelimiterFilter_reset(t_Lucene47WordDelimiterFilter *self, PyObject *args);

          static PyMethodDef t_Lucene47WordDelimiterFilter__methods_[] = {
            DECLARE_METHOD(t_Lucene47WordDelimiterFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lucene47WordDelimiterFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lucene47WordDelimiterFilter, incrementToken, METH_VARARGS),
            DECLARE_METHOD(t_Lucene47WordDelimiterFilter, reset, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(Lucene47WordDelimiterFilter, t_Lucene47WordDelimiterFilter, ::org::apache::lucene::analysis::TokenFilter, Lucene47WordDelimiterFilter, t_Lucene47WordDelimiterFilter_init_, 0, 0, 0, 0, 0);

          void t_Lucene47WordDelimiterFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(Lucene47WordDelimiterFilter), module, "Lucene47WordDelimiterFilter", 0);
          }

          void t_Lucene47WordDelimiterFilter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(Lucene47WordDelimiterFilter).tp_dict, "class_", make_descriptor(Lucene47WordDelimiterFilter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(Lucene47WordDelimiterFilter).tp_dict, "wrapfn_", make_descriptor(t_Lucene47WordDelimiterFilter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(Lucene47WordDelimiterFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(Lucene47WordDelimiterFilter::initializeClass);
            PyDict_SetItemString(PY_TYPE(Lucene47WordDelimiterFilter).tp_dict, "ALPHA", make_descriptor(Lucene47WordDelimiterFilter::ALPHA));
            PyDict_SetItemString(PY_TYPE(Lucene47WordDelimiterFilter).tp_dict, "ALPHANUM", make_descriptor(Lucene47WordDelimiterFilter::ALPHANUM));
            PyDict_SetItemString(PY_TYPE(Lucene47WordDelimiterFilter).tp_dict, "CATENATE_ALL", make_descriptor(Lucene47WordDelimiterFilter::CATENATE_ALL));
            PyDict_SetItemString(PY_TYPE(Lucene47WordDelimiterFilter).tp_dict, "CATENATE_NUMBERS", make_descriptor(Lucene47WordDelimiterFilter::CATENATE_NUMBERS));
            PyDict_SetItemString(PY_TYPE(Lucene47WordDelimiterFilter).tp_dict, "CATENATE_WORDS", make_descriptor(Lucene47WordDelimiterFilter::CATENATE_WORDS));
            PyDict_SetItemString(PY_TYPE(Lucene47WordDelimiterFilter).tp_dict, "DIGIT", make_descriptor(Lucene47WordDelimiterFilter::DIGIT));
            PyDict_SetItemString(PY_TYPE(Lucene47WordDelimiterFilter).tp_dict, "GENERATE_NUMBER_PARTS", make_descriptor(Lucene47WordDelimiterFilter::GENERATE_NUMBER_PARTS));
            PyDict_SetItemString(PY_TYPE(Lucene47WordDelimiterFilter).tp_dict, "GENERATE_WORD_PARTS", make_descriptor(Lucene47WordDelimiterFilter::GENERATE_WORD_PARTS));
            PyDict_SetItemString(PY_TYPE(Lucene47WordDelimiterFilter).tp_dict, "LOWER", make_descriptor(Lucene47WordDelimiterFilter::LOWER));
            PyDict_SetItemString(PY_TYPE(Lucene47WordDelimiterFilter).tp_dict, "PRESERVE_ORIGINAL", make_descriptor(Lucene47WordDelimiterFilter::PRESERVE_ORIGINAL));
            PyDict_SetItemString(PY_TYPE(Lucene47WordDelimiterFilter).tp_dict, "SPLIT_ON_CASE_CHANGE", make_descriptor(Lucene47WordDelimiterFilter::SPLIT_ON_CASE_CHANGE));
            PyDict_SetItemString(PY_TYPE(Lucene47WordDelimiterFilter).tp_dict, "SPLIT_ON_NUMERICS", make_descriptor(Lucene47WordDelimiterFilter::SPLIT_ON_NUMERICS));
            PyDict_SetItemString(PY_TYPE(Lucene47WordDelimiterFilter).tp_dict, "STEM_ENGLISH_POSSESSIVE", make_descriptor(Lucene47WordDelimiterFilter::STEM_ENGLISH_POSSESSIVE));
            PyDict_SetItemString(PY_TYPE(Lucene47WordDelimiterFilter).tp_dict, "SUBWORD_DELIM", make_descriptor(Lucene47WordDelimiterFilter::SUBWORD_DELIM));
            PyDict_SetItemString(PY_TYPE(Lucene47WordDelimiterFilter).tp_dict, "UPPER", make_descriptor(Lucene47WordDelimiterFilter::UPPER));
          }

          static PyObject *t_Lucene47WordDelimiterFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, Lucene47WordDelimiterFilter::initializeClass, 1)))
              return NULL;
            return t_Lucene47WordDelimiterFilter::wrap_Object(Lucene47WordDelimiterFilter(((t_Lucene47WordDelimiterFilter *) arg)->object.this$));
          }
          static PyObject *t_Lucene47WordDelimiterFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, Lucene47WordDelimiterFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_Lucene47WordDelimiterFilter_init_(t_Lucene47WordDelimiterFilter *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 3:
              {
                ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
                jint a1;
                ::org::apache::lucene::analysis::util::CharArraySet a2((jobject) NULL);
                PyTypeObject **p2;
                Lucene47WordDelimiterFilter object((jobject) NULL);

                if (!parseArgs(args, "kIK", ::org::apache::lucene::analysis::TokenStream::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, &a0, &a1, &a2, &p2, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_))
                {
                  INT_CALL(object = Lucene47WordDelimiterFilter(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 4:
              {
                ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
                JArray< jbyte > a1((jobject) NULL);
                jint a2;
                ::org::apache::lucene::analysis::util::CharArraySet a3((jobject) NULL);
                PyTypeObject **p3;
                Lucene47WordDelimiterFilter object((jobject) NULL);

                if (!parseArgs(args, "k[BIK", ::org::apache::lucene::analysis::TokenStream::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, &a0, &a1, &a2, &a3, &p3, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_))
                {
                  INT_CALL(object = Lucene47WordDelimiterFilter(a0, a1, a2, a3));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_Lucene47WordDelimiterFilter_incrementToken(t_Lucene47WordDelimiterFilter *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(Lucene47WordDelimiterFilter), (PyObject *) self, "incrementToken", args, 2);
          }

          static PyObject *t_Lucene47WordDelimiterFilter_reset(t_Lucene47WordDelimiterFilter *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.reset());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(Lucene47WordDelimiterFilter), (PyObject *) self, "reset", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/miscellaneous/ASCIIFoldingFilter.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {

          ::java::lang::Class *ASCIIFoldingFilter::class$ = NULL;
          jmethodID *ASCIIFoldingFilter::mids$ = NULL;
          bool ASCIIFoldingFilter::live$ = false;

          jclass ASCIIFoldingFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/miscellaneous/ASCIIFoldingFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_c7c794dc] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;)V");
              mids$[mid_init$_a19d9eb9] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;Z)V");
              mids$[mid_foldToASCII_ec6430f4] = env->getMethodID(cls, "foldToASCII", "([CI)V");
              mids$[mid_foldToASCII_8c28d06f] = env->getStaticMethodID(cls, "foldToASCII", "([CI[CII)I");
              mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");
              mids$[mid_isPreserveOriginal_54c6a16a] = env->getMethodID(cls, "isPreserveOriginal", "()Z");
              mids$[mid_reset_54c6a166] = env->getMethodID(cls, "reset", "()V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ASCIIFoldingFilter::ASCIIFoldingFilter(const ::org::apache::lucene::analysis::TokenStream & a0) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_c7c794dc, a0.this$)) {}

          ASCIIFoldingFilter::ASCIIFoldingFilter(const ::org::apache::lucene::analysis::TokenStream & a0, jboolean a1) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_a19d9eb9, a0.this$, a1)) {}

          void ASCIIFoldingFilter::foldToASCII(const JArray< jchar > & a0, jint a1) const
          {
            env->callVoidMethod(this$, mids$[mid_foldToASCII_ec6430f4], a0.this$, a1);
          }

          jint ASCIIFoldingFilter::foldToASCII(const JArray< jchar > & a0, jint a1, const JArray< jchar > & a2, jint a3, jint a4)
          {
            jclass cls = env->getClass(initializeClass);
            return env->callStaticIntMethod(cls, mids$[mid_foldToASCII_8c28d06f], a0.this$, a1, a2.this$, a3, a4);
          }

          jboolean ASCIIFoldingFilter::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_54c6a16a]);
          }

          jboolean ASCIIFoldingFilter::isPreserveOriginal() const
          {
            return env->callBooleanMethod(this$, mids$[mid_isPreserveOriginal_54c6a16a]);
          }

          void ASCIIFoldingFilter::reset() const
          {
            env->callVoidMethod(this$, mids$[mid_reset_54c6a166]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {
          static PyObject *t_ASCIIFoldingFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_ASCIIFoldingFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_ASCIIFoldingFilter_init_(t_ASCIIFoldingFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_ASCIIFoldingFilter_foldToASCII(t_ASCIIFoldingFilter *self, PyObject *args);
          static PyObject *t_ASCIIFoldingFilter_foldToASCII_(PyTypeObject *type, PyObject *args);
          static PyObject *t_ASCIIFoldingFilter_incrementToken(t_ASCIIFoldingFilter *self, PyObject *args);
          static PyObject *t_ASCIIFoldingFilter_isPreserveOriginal(t_ASCIIFoldingFilter *self);
          static PyObject *t_ASCIIFoldingFilter_reset(t_ASCIIFoldingFilter *self, PyObject *args);
          static PyObject *t_ASCIIFoldingFilter_get__preserveOriginal(t_ASCIIFoldingFilter *self, void *data);
          static PyGetSetDef t_ASCIIFoldingFilter__fields_[] = {
            DECLARE_GET_FIELD(t_ASCIIFoldingFilter, preserveOriginal),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_ASCIIFoldingFilter__methods_[] = {
            DECLARE_METHOD(t_ASCIIFoldingFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ASCIIFoldingFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ASCIIFoldingFilter, foldToASCII, METH_VARARGS),
            DECLARE_METHOD(t_ASCIIFoldingFilter, foldToASCII_, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_ASCIIFoldingFilter, incrementToken, METH_VARARGS),
            DECLARE_METHOD(t_ASCIIFoldingFilter, isPreserveOriginal, METH_NOARGS),
            DECLARE_METHOD(t_ASCIIFoldingFilter, reset, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(ASCIIFoldingFilter, t_ASCIIFoldingFilter, ::org::apache::lucene::analysis::TokenFilter, ASCIIFoldingFilter, t_ASCIIFoldingFilter_init_, 0, 0, t_ASCIIFoldingFilter__fields_, 0, 0);

          void t_ASCIIFoldingFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(ASCIIFoldingFilter), module, "ASCIIFoldingFilter", 0);
          }

          void t_ASCIIFoldingFilter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(ASCIIFoldingFilter).tp_dict, "class_", make_descriptor(ASCIIFoldingFilter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(ASCIIFoldingFilter).tp_dict, "wrapfn_", make_descriptor(t_ASCIIFoldingFilter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(ASCIIFoldingFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_ASCIIFoldingFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, ASCIIFoldingFilter::initializeClass, 1)))
              return NULL;
            return t_ASCIIFoldingFilter::wrap_Object(ASCIIFoldingFilter(((t_ASCIIFoldingFilter *) arg)->object.this$));
          }
          static PyObject *t_ASCIIFoldingFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, ASCIIFoldingFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_ASCIIFoldingFilter_init_(t_ASCIIFoldingFilter *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
                ASCIIFoldingFilter object((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
                {
                  INT_CALL(object = ASCIIFoldingFilter(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 2:
              {
                ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
                jboolean a1;
                ASCIIFoldingFilter object((jobject) NULL);

                if (!parseArgs(args, "kZ", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0, &a1))
                {
                  INT_CALL(object = ASCIIFoldingFilter(a0, a1));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_ASCIIFoldingFilter_foldToASCII(t_ASCIIFoldingFilter *self, PyObject *args)
          {
            JArray< jchar > a0((jobject) NULL);
            jint a1;

            if (!parseArgs(args, "[CI", &a0, &a1))
            {
              OBJ_CALL(self->object.foldToASCII(a0, a1));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "foldToASCII", args);
            return NULL;
          }

          static PyObject *t_ASCIIFoldingFilter_foldToASCII_(PyTypeObject *type, PyObject *args)
          {
            JArray< jchar > a0((jobject) NULL);
            jint a1;
            JArray< jchar > a2((jobject) NULL);
            jint a3;
            jint a4;
            jint result;

            if (!parseArgs(args, "[CI[CII", &a0, &a1, &a2, &a3, &a4))
            {
              OBJ_CALL(result = ::org::apache::lucene::analysis::miscellaneous::ASCIIFoldingFilter::foldToASCII(a0, a1, a2, a3, a4));
              return PyInt_FromLong((long) result);
            }

            PyErr_SetArgsError(type, "foldToASCII_", args);
            return NULL;
          }

          static PyObject *t_ASCIIFoldingFilter_incrementToken(t_ASCIIFoldingFilter *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(ASCIIFoldingFilter), (PyObject *) self, "incrementToken", args, 2);
          }

          static PyObject *t_ASCIIFoldingFilter_isPreserveOriginal(t_ASCIIFoldingFilter *self)
          {
            jboolean result;
            OBJ_CALL(result = self->object.isPreserveOriginal());
            Py_RETURN_BOOL(result);
          }

          static PyObject *t_ASCIIFoldingFilter_reset(t_ASCIIFoldingFilter *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.reset());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(ASCIIFoldingFilter), (PyObject *) self, "reset", args, 2);
          }

          static PyObject *t_ASCIIFoldingFilter_get__preserveOriginal(t_ASCIIFoldingFilter *self, void *data)
          {
            jboolean value;
            OBJ_CALL(value = self->object.isPreserveOriginal());
            Py_RETURN_BOOL(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/facet/taxonomy/TaxonomyReader.h"
#include "java/io/Closeable.h"
#include "java/lang/Class.h"
#include "java/util/Map.h"
#include "org/apache/lucene/facet/taxonomy/FacetLabel.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/facet/taxonomy/TaxonomyReader$ChildrenIterator.h"
#include "org/apache/lucene/facet/taxonomy/ParallelTaxonomyArrays.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace taxonomy {

          ::java::lang::Class *TaxonomyReader::class$ = NULL;
          jmethodID *TaxonomyReader::mids$ = NULL;
          bool TaxonomyReader::live$ = false;
          jint TaxonomyReader::INVALID_ORDINAL = (jint) 0;
          jint TaxonomyReader::ROOT_ORDINAL = (jint) 0;

          jclass TaxonomyReader::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/facet/taxonomy/TaxonomyReader");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_close_54c6a166] = env->getMethodID(cls, "close", "()V");
              mids$[mid_decRef_54c6a166] = env->getMethodID(cls, "decRef", "()V");
              mids$[mid_getChildren_0efef1b4] = env->getMethodID(cls, "getChildren", "(I)Lorg/apache/lucene/facet/taxonomy/TaxonomyReader$ChildrenIterator;");
              mids$[mid_getCommitUserData_db60befd] = env->getMethodID(cls, "getCommitUserData", "()Ljava/util/Map;");
              mids$[mid_getOrdinal_283f83f5] = env->getMethodID(cls, "getOrdinal", "(Lorg/apache/lucene/facet/taxonomy/FacetLabel;)I");
              mids$[mid_getOrdinal_ba45d675] = env->getMethodID(cls, "getOrdinal", "(Ljava/lang/String;[Ljava/lang/String;)I");
              mids$[mid_getParallelTaxonomyArrays_306e748e] = env->getMethodID(cls, "getParallelTaxonomyArrays", "()Lorg/apache/lucene/facet/taxonomy/ParallelTaxonomyArrays;");
              mids$[mid_getPath_38cf071d] = env->getMethodID(cls, "getPath", "(I)Lorg/apache/lucene/facet/taxonomy/FacetLabel;");
              mids$[mid_getRefCount_54c6a179] = env->getMethodID(cls, "getRefCount", "()I");
              mids$[mid_getSize_54c6a179] = env->getMethodID(cls, "getSize", "()I");
              mids$[mid_incRef_54c6a166] = env->getMethodID(cls, "incRef", "()V");
              mids$[mid_openIfChanged_aed3bb6f] = env->getStaticMethodID(cls, "openIfChanged", "(Lorg/apache/lucene/facet/taxonomy/TaxonomyReader;)Lorg/apache/lucene/facet/taxonomy/TaxonomyReader;");
              mids$[mid_tryIncRef_54c6a16a] = env->getMethodID(cls, "tryIncRef", "()Z");
              mids$[mid_ensureOpen_54c6a166] = env->getMethodID(cls, "ensureOpen", "()V");
              mids$[mid_doClose_54c6a166] = env->getMethodID(cls, "doClose", "()V");
              mids$[mid_doOpenIfChanged_f67f5c74] = env->getMethodID(cls, "doOpenIfChanged", "()Lorg/apache/lucene/facet/taxonomy/TaxonomyReader;");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              INVALID_ORDINAL = env->getStaticIntField(cls, "INVALID_ORDINAL");
              ROOT_ORDINAL = env->getStaticIntField(cls, "ROOT_ORDINAL");
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          TaxonomyReader::TaxonomyReader() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          void TaxonomyReader::close() const
          {
            env->callVoidMethod(this$, mids$[mid_close_54c6a166]);
          }

          void TaxonomyReader::decRef() const
          {
            env->callVoidMethod(this$, mids$[mid_decRef_54c6a166]);
          }

          ::org::apache::lucene::facet::taxonomy::TaxonomyReader$ChildrenIterator TaxonomyReader::getChildren(jint a0) const
          {
            return ::org::apache::lucene::facet::taxonomy::TaxonomyReader$ChildrenIterator(env->callObjectMethod(this$, mids$[mid_getChildren_0efef1b4], a0));
          }

          ::java::util::Map TaxonomyReader::getCommitUserData() const
          {
            return ::java::util::Map(env->callObjectMethod(this$, mids$[mid_getCommitUserData_db60befd]));
          }

          jint TaxonomyReader::getOrdinal(const ::org::apache::lucene::facet::taxonomy::FacetLabel & a0) const
          {
            return env->callIntMethod(this$, mids$[mid_getOrdinal_283f83f5], a0.this$);
          }

          jint TaxonomyReader::getOrdinal(const ::java::lang::String & a0, const JArray< ::java::lang::String > & a1) const
          {
            return env->callIntMethod(this$, mids$[mid_getOrdinal_ba45d675], a0.this$, a1.this$);
          }

          ::org::apache::lucene::facet::taxonomy::ParallelTaxonomyArrays TaxonomyReader::getParallelTaxonomyArrays() const
          {
            return ::org::apache::lucene::facet::taxonomy::ParallelTaxonomyArrays(env->callObjectMethod(this$, mids$[mid_getParallelTaxonomyArrays_306e748e]));
          }

          ::org::apache::lucene::facet::taxonomy::FacetLabel TaxonomyReader::getPath(jint a0) const
          {
            return ::org::apache::lucene::facet::taxonomy::FacetLabel(env->callObjectMethod(this$, mids$[mid_getPath_38cf071d], a0));
          }

          jint TaxonomyReader::getRefCount() const
          {
            return env->callIntMethod(this$, mids$[mid_getRefCount_54c6a179]);
          }

          jint TaxonomyReader::getSize() const
          {
            return env->callIntMethod(this$, mids$[mid_getSize_54c6a179]);
          }

          void TaxonomyReader::incRef() const
          {
            env->callVoidMethod(this$, mids$[mid_incRef_54c6a166]);
          }

          TaxonomyReader TaxonomyReader::openIfChanged(const TaxonomyReader & a0)
          {
            jclass cls = env->getClass(initializeClass);
            return TaxonomyReader(env->callStaticObjectMethod(cls, mids$[mid_openIfChanged_aed3bb6f], a0.this$));
          }

          jboolean TaxonomyReader::tryIncRef() const
          {
            return env->callBooleanMethod(this$, mids$[mid_tryIncRef_54c6a16a]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace taxonomy {
          static PyObject *t_TaxonomyReader_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_TaxonomyReader_instance_(PyTypeObject *type, PyObject *arg);
          static int t_TaxonomyReader_init_(t_TaxonomyReader *self, PyObject *args, PyObject *kwds);
          static PyObject *t_TaxonomyReader_close(t_TaxonomyReader *self);
          static PyObject *t_TaxonomyReader_decRef(t_TaxonomyReader *self);
          static PyObject *t_TaxonomyReader_getChildren(t_TaxonomyReader *self, PyObject *arg);
          static PyObject *t_TaxonomyReader_getCommitUserData(t_TaxonomyReader *self);
          static PyObject *t_TaxonomyReader_getOrdinal(t_TaxonomyReader *self, PyObject *args);
          static PyObject *t_TaxonomyReader_getParallelTaxonomyArrays(t_TaxonomyReader *self);
          static PyObject *t_TaxonomyReader_getPath(t_TaxonomyReader *self, PyObject *arg);
          static PyObject *t_TaxonomyReader_getRefCount(t_TaxonomyReader *self);
          static PyObject *t_TaxonomyReader_getSize(t_TaxonomyReader *self);
          static PyObject *t_TaxonomyReader_incRef(t_TaxonomyReader *self);
          static PyObject *t_TaxonomyReader_openIfChanged(PyTypeObject *type, PyObject *arg);
          static PyObject *t_TaxonomyReader_tryIncRef(t_TaxonomyReader *self);
          static PyObject *t_TaxonomyReader_get__commitUserData(t_TaxonomyReader *self, void *data);
          static PyObject *t_TaxonomyReader_get__parallelTaxonomyArrays(t_TaxonomyReader *self, void *data);
          static PyObject *t_TaxonomyReader_get__refCount(t_TaxonomyReader *self, void *data);
          static PyObject *t_TaxonomyReader_get__size(t_TaxonomyReader *self, void *data);
          static PyGetSetDef t_TaxonomyReader__fields_[] = {
            DECLARE_GET_FIELD(t_TaxonomyReader, commitUserData),
            DECLARE_GET_FIELD(t_TaxonomyReader, parallelTaxonomyArrays),
            DECLARE_GET_FIELD(t_TaxonomyReader, refCount),
            DECLARE_GET_FIELD(t_TaxonomyReader, size),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_TaxonomyReader__methods_[] = {
            DECLARE_METHOD(t_TaxonomyReader, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_TaxonomyReader, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_TaxonomyReader, close, METH_NOARGS),
            DECLARE_METHOD(t_TaxonomyReader, decRef, METH_NOARGS),
            DECLARE_METHOD(t_TaxonomyReader, getChildren, METH_O),
            DECLARE_METHOD(t_TaxonomyReader, getCommitUserData, METH_NOARGS),
            DECLARE_METHOD(t_TaxonomyReader, getOrdinal, METH_VARARGS),
            DECLARE_METHOD(t_TaxonomyReader, getParallelTaxonomyArrays, METH_NOARGS),
            DECLARE_METHOD(t_TaxonomyReader, getPath, METH_O),
            DECLARE_METHOD(t_TaxonomyReader, getRefCount, METH_NOARGS),
            DECLARE_METHOD(t_TaxonomyReader, getSize, METH_NOARGS),
            DECLARE_METHOD(t_TaxonomyReader, incRef, METH_NOARGS),
            DECLARE_METHOD(t_TaxonomyReader, openIfChanged, METH_O | METH_CLASS),
            DECLARE_METHOD(t_TaxonomyReader, tryIncRef, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(TaxonomyReader, t_TaxonomyReader, ::java::lang::Object, TaxonomyReader, t_TaxonomyReader_init_, 0, 0, t_TaxonomyReader__fields_, 0, 0);

          void t_TaxonomyReader::install(PyObject *module)
          {
            installType(&PY_TYPE(TaxonomyReader), module, "TaxonomyReader", 0);
            PyDict_SetItemString(PY_TYPE(TaxonomyReader).tp_dict, "ChildrenIterator", make_descriptor(&PY_TYPE(TaxonomyReader$ChildrenIterator)));
          }

          void t_TaxonomyReader::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(TaxonomyReader).tp_dict, "class_", make_descriptor(TaxonomyReader::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(TaxonomyReader).tp_dict, "wrapfn_", make_descriptor(t_TaxonomyReader::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(TaxonomyReader).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(TaxonomyReader::initializeClass);
            PyDict_SetItemString(PY_TYPE(TaxonomyReader).tp_dict, "INVALID_ORDINAL", make_descriptor(TaxonomyReader::INVALID_ORDINAL));
            PyDict_SetItemString(PY_TYPE(TaxonomyReader).tp_dict, "ROOT_ORDINAL", make_descriptor(TaxonomyReader::ROOT_ORDINAL));
          }

          static PyObject *t_TaxonomyReader_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, TaxonomyReader::initializeClass, 1)))
              return NULL;
            return t_TaxonomyReader::wrap_Object(TaxonomyReader(((t_TaxonomyReader *) arg)->object.this$));
          }
          static PyObject *t_TaxonomyReader_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, TaxonomyReader::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_TaxonomyReader_init_(t_TaxonomyReader *self, PyObject *args, PyObject *kwds)
          {
            TaxonomyReader object((jobject) NULL);

            INT_CALL(object = TaxonomyReader());
            self->object = object;

            return 0;
          }

          static PyObject *t_TaxonomyReader_close(t_TaxonomyReader *self)
          {
            OBJ_CALL(self->object.close());
            Py_RETURN_NONE;
          }

          static PyObject *t_TaxonomyReader_decRef(t_TaxonomyReader *self)
          {
            OBJ_CALL(self->object.decRef());
            Py_RETURN_NONE;
          }

          static PyObject *t_TaxonomyReader_getChildren(t_TaxonomyReader *self, PyObject *arg)
          {
            jint a0;
            ::org::apache::lucene::facet::taxonomy::TaxonomyReader$ChildrenIterator result((jobject) NULL);

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(result = self->object.getChildren(a0));
              return ::org::apache::lucene::facet::taxonomy::t_TaxonomyReader$ChildrenIterator::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "getChildren", arg);
            return NULL;
          }

          static PyObject *t_TaxonomyReader_getCommitUserData(t_TaxonomyReader *self)
          {
            ::java::util::Map result((jobject) NULL);
            OBJ_CALL(result = self->object.getCommitUserData());
            return ::java::util::t_Map::wrap_Object(result, &::java::lang::PY_TYPE(String), &::java::lang::PY_TYPE(String));
          }

          static PyObject *t_TaxonomyReader_getOrdinal(t_TaxonomyReader *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::org::apache::lucene::facet::taxonomy::FacetLabel a0((jobject) NULL);
                jint result;

                if (!parseArgs(args, "k", ::org::apache::lucene::facet::taxonomy::FacetLabel::initializeClass, &a0))
                {
                  OBJ_CALL(result = self->object.getOrdinal(a0));
                  return PyInt_FromLong((long) result);
                }
              }
              break;
             case 2:
              {
                ::java::lang::String a0((jobject) NULL);
                JArray< ::java::lang::String > a1((jobject) NULL);
                jint result;

                if (!parseArgs(args, "s[s", &a0, &a1))
                {
                  OBJ_CALL(result = self->object.getOrdinal(a0, a1));
                  return PyInt_FromLong((long) result);
                }
              }
            }

            PyErr_SetArgsError((PyObject *) self, "getOrdinal", args);
            return NULL;
          }

          static PyObject *t_TaxonomyReader_getParallelTaxonomyArrays(t_TaxonomyReader *self)
          {
            ::org::apache::lucene::facet::taxonomy::ParallelTaxonomyArrays result((jobject) NULL);
            OBJ_CALL(result = self->object.getParallelTaxonomyArrays());
            return ::org::apache::lucene::facet::taxonomy::t_ParallelTaxonomyArrays::wrap_Object(result);
          }

          static PyObject *t_TaxonomyReader_getPath(t_TaxonomyReader *self, PyObject *arg)
          {
            jint a0;
            ::org::apache::lucene::facet::taxonomy::FacetLabel result((jobject) NULL);

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(result = self->object.getPath(a0));
              return ::org::apache::lucene::facet::taxonomy::t_FacetLabel::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "getPath", arg);
            return NULL;
          }

          static PyObject *t_TaxonomyReader_getRefCount(t_TaxonomyReader *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getRefCount());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_TaxonomyReader_getSize(t_TaxonomyReader *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getSize());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_TaxonomyReader_incRef(t_TaxonomyReader *self)
          {
            OBJ_CALL(self->object.incRef());
            Py_RETURN_NONE;
          }

          static PyObject *t_TaxonomyReader_openIfChanged(PyTypeObject *type, PyObject *arg)
          {
            TaxonomyReader a0((jobject) NULL);
            TaxonomyReader result((jobject) NULL);

            if (!parseArg(arg, "k", TaxonomyReader::initializeClass, &a0))
            {
              OBJ_CALL(result = ::org::apache::lucene::facet::taxonomy::TaxonomyReader::openIfChanged(a0));
              return t_TaxonomyReader::wrap_Object(result);
            }

            PyErr_SetArgsError(type, "openIfChanged", arg);
            return NULL;
          }

          static PyObject *t_TaxonomyReader_tryIncRef(t_TaxonomyReader *self)
          {
            jboolean result;
            OBJ_CALL(result = self->object.tryIncRef());
            Py_RETURN_BOOL(result);
          }

          static PyObject *t_TaxonomyReader_get__commitUserData(t_TaxonomyReader *self, void *data)
          {
            ::java::util::Map value((jobject) NULL);
            OBJ_CALL(value = self->object.getCommitUserData());
            return ::java::util::t_Map::wrap_Object(value);
          }

          static PyObject *t_TaxonomyReader_get__parallelTaxonomyArrays(t_TaxonomyReader *self, void *data)
          {
            ::org::apache::lucene::facet::taxonomy::ParallelTaxonomyArrays value((jobject) NULL);
            OBJ_CALL(value = self->object.getParallelTaxonomyArrays());
            return ::org::apache::lucene::facet::taxonomy::t_ParallelTaxonomyArrays::wrap_Object(value);
          }

          static PyObject *t_TaxonomyReader_get__refCount(t_TaxonomyReader *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getRefCount());
            return PyInt_FromLong((long) value);
          }

          static PyObject *t_TaxonomyReader_get__size(t_TaxonomyReader *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getSize());
            return PyInt_FromLong((long) value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/util/RollingCharBuffer.h"
#include "java/io/IOException.h"
#include "java/io/Reader.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace util {

          ::java::lang::Class *RollingCharBuffer::class$ = NULL;
          jmethodID *RollingCharBuffer::mids$ = NULL;
          bool RollingCharBuffer::live$ = false;

          jclass RollingCharBuffer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/util/RollingCharBuffer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_freeBefore_39c7bd3c] = env->getMethodID(cls, "freeBefore", "(I)V");
              mids$[mid_get_39c7bd23] = env->getMethodID(cls, "get", "(I)I");
              mids$[mid_get_acd005cf] = env->getMethodID(cls, "get", "(II)[C");
              mids$[mid_reset_cf2e3c10] = env->getMethodID(cls, "reset", "(Ljava/io/Reader;)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          RollingCharBuffer::RollingCharBuffer() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          void RollingCharBuffer::freeBefore(jint a0) const
          {
            env->callVoidMethod(this$, mids$[mid_freeBefore_39c7bd3c], a0);
          }

          jint RollingCharBuffer::get(jint a0) const
          {
            return env->callIntMethod(this$, mids$[mid_get_39c7bd23], a0);
          }

          JArray< jchar > RollingCharBuffer::get(jint a0, jint a1) const
          {
            return JArray< jchar >(env->callObjectMethod(this$, mids$[mid_get_acd005cf], a0, a1));
          }

          void RollingCharBuffer::reset(const ::java::io::Reader & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_reset_cf2e3c10], a0.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace util {
          static PyObject *t_RollingCharBuffer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_RollingCharBuffer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_RollingCharBuffer_init_(t_RollingCharBuffer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_RollingCharBuffer_freeBefore(t_RollingCharBuffer *self, PyObject *arg);
          static PyObject *t_RollingCharBuffer_get(t_RollingCharBuffer *self, PyObject *args);
          static PyObject *t_RollingCharBuffer_reset(t_RollingCharBuffer *self, PyObject *arg);

          static PyMethodDef t_RollingCharBuffer__methods_[] = {
            DECLARE_METHOD(t_RollingCharBuffer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_RollingCharBuffer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_RollingCharBuffer, freeBefore, METH_O),
            DECLARE_METHOD(t_RollingCharBuffer, get, METH_VARARGS),
            DECLARE_METHOD(t_RollingCharBuffer, reset, METH_O),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(RollingCharBuffer, t_RollingCharBuffer, ::java::lang::Object, RollingCharBuffer, t_RollingCharBuffer_init_, 0, 0, 0, 0, 0);

          void t_RollingCharBuffer::install(PyObject *module)
          {
            installType(&PY_TYPE(RollingCharBuffer), module, "RollingCharBuffer", 0);
          }

          void t_RollingCharBuffer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(RollingCharBuffer).tp_dict, "class_", make_descriptor(RollingCharBuffer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(RollingCharBuffer).tp_dict, "wrapfn_", make_descriptor(t_RollingCharBuffer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(RollingCharBuffer).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_RollingCharBuffer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, RollingCharBuffer::initializeClass, 1)))
              return NULL;
            return t_RollingCharBuffer::wrap_Object(RollingCharBuffer(((t_RollingCharBuffer *) arg)->object.this$));
          }
          static PyObject *t_RollingCharBuffer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, RollingCharBuffer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_RollingCharBuffer_init_(t_RollingCharBuffer *self, PyObject *args, PyObject *kwds)
          {
            RollingCharBuffer object((jobject) NULL);

            INT_CALL(object = RollingCharBuffer());
            self->object = object;

            return 0;
          }

          static PyObject *t_RollingCharBuffer_freeBefore(t_RollingCharBuffer *self, PyObject *arg)
          {
            jint a0;

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(self->object.freeBefore(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "freeBefore", arg);
            return NULL;
          }

          static PyObject *t_RollingCharBuffer_get(t_RollingCharBuffer *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                jint a0;
                jint result;

                if (!parseArgs(args, "I", &a0))
                {
                  OBJ_CALL(result = self->object.get(a0));
                  return PyInt_FromLong((long) result);
                }
              }
              break;
             case 2:
              {
                jint a0;
                jint a1;
                JArray< jchar > result((jobject) NULL);

                if (!parseArgs(args, "II", &a0, &a1))
                {
                  OBJ_CALL(result = self->object.get(a0, a1));
                  return result.wrap();
                }
              }
            }

            PyErr_SetArgsError((PyObject *) self, "get", args);
            return NULL;
          }

          static PyObject *t_RollingCharBuffer_reset(t_RollingCharBuffer *self, PyObject *arg)
          {
            ::java::io::Reader a0((jobject) NULL);

            if (!parseArg(arg, "k", ::java::io::Reader::initializeClass, &a0))
            {
              OBJ_CALL(self->object.reset(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "reset", arg);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/packed/PackedInts$Reader.h"
#include "org/apache/lucene/util/Accountable.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace packed {

          ::java::lang::Class *PackedInts$Reader::class$ = NULL;
          jmethodID *PackedInts$Reader::mids$ = NULL;
          bool PackedInts$Reader::live$ = false;

          jclass PackedInts$Reader::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/util/packed/PackedInts$Reader");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_get_d80d4c9e] = env->getMethodID(cls, "get", "(I[JII)I");
              mids$[mid_size_54c6a179] = env->getMethodID(cls, "size", "()I");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          PackedInts$Reader::PackedInts$Reader() : ::org::apache::lucene::index::NumericDocValues(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          jint PackedInts$Reader::get(jint a0, const JArray< jlong > & a1, jint a2, jint a3) const
          {
            return env->callIntMethod(this$, mids$[mid_get_d80d4c9e], a0, a1.this$, a2, a3);
          }

          jint PackedInts$Reader::size() const
          {
            return env->callIntMethod(this$, mids$[mid_size_54c6a179]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace packed {
          static PyObject *t_PackedInts$Reader_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PackedInts$Reader_instance_(PyTypeObject *type, PyObject *arg);
          static int t_PackedInts$Reader_init_(t_PackedInts$Reader *self, PyObject *args, PyObject *kwds);
          static PyObject *t_PackedInts$Reader_get(t_PackedInts$Reader *self, PyObject *args);
          static PyObject *t_PackedInts$Reader_size(t_PackedInts$Reader *self);

          static PyMethodDef t_PackedInts$Reader__methods_[] = {
            DECLARE_METHOD(t_PackedInts$Reader, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PackedInts$Reader, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PackedInts$Reader, get, METH_VARARGS),
            DECLARE_METHOD(t_PackedInts$Reader, size, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(PackedInts$Reader, t_PackedInts$Reader, ::org::apache::lucene::index::NumericDocValues, PackedInts$Reader, t_PackedInts$Reader_init_, 0, 0, 0, 0, 0);

          void t_PackedInts$Reader::install(PyObject *module)
          {
            installType(&PY_TYPE(PackedInts$Reader), module, "PackedInts$Reader", 0);
          }

          void t_PackedInts$Reader::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(PackedInts$Reader).tp_dict, "class_", make_descriptor(PackedInts$Reader::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(PackedInts$Reader).tp_dict, "wrapfn_", make_descriptor(t_PackedInts$Reader::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(PackedInts$Reader).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_PackedInts$Reader_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, PackedInts$Reader::initializeClass, 1)))
              return NULL;
            return t_PackedInts$Reader::wrap_Object(PackedInts$Reader(((t_PackedInts$Reader *) arg)->object.this$));
          }
          static PyObject *t_PackedInts$Reader_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, PackedInts$Reader::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_PackedInts$Reader_init_(t_PackedInts$Reader *self, PyObject *args, PyObject *kwds)
          {
            PackedInts$Reader object((jobject) NULL);

            INT_CALL(object = PackedInts$Reader());
            self->object = object;

            return 0;
          }

          static PyObject *t_PackedInts$Reader_get(t_PackedInts$Reader *self, PyObject *args)
          {
            jint a0;
            JArray< jlong > a1((jobject) NULL);
            jint a2;
            jint a3;
            jint result;

            if (!parseArgs(args, "I[JII", &a0, &a1, &a2, &a3))
            {
              OBJ_CALL(result = self->object.get(a0, a1, a2, a3));
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(PackedInts$Reader), (PyObject *) self, "get", args, 2);
          }

          static PyObject *t_PackedInts$Reader_size(t_PackedInts$Reader *self)
          {
            jint result;
            OBJ_CALL(result = self->object.size());
            return PyInt_FromLong((long) result);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/facet/taxonomy/CategoryPath.h"
#include "java/lang/String.h"
#include "java/lang/Comparable.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace taxonomy {

          ::java::lang::Class *CategoryPath::class$ = NULL;
          jmethodID *CategoryPath::mids$ = NULL;
          jfieldID *CategoryPath::fids$ = NULL;
          bool CategoryPath::live$ = false;
          CategoryPath *CategoryPath::EMPTY = NULL;

          jclass CategoryPath::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/facet/taxonomy/CategoryPath");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4dd4540c] = env->getMethodID(cls, "<init>", "([Ljava/lang/String;)V");
              mids$[mid_init$_7420ac50] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;C)V");
              mids$[mid_compareTo_07b9a56f] = env->getMethodID(cls, "compareTo", "(Lorg/apache/lucene/facet/taxonomy/CategoryPath;)I");
              mids$[mid_copyFullPath_6d37715f] = env->getMethodID(cls, "copyFullPath", "([CIC)I");
              mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
              mids$[mid_fullPathLength_54c6a179] = env->getMethodID(cls, "fullPathLength", "()I");
              mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
              mids$[mid_longHashCode_54c6a17a] = env->getMethodID(cls, "longHashCode", "()J");
              mids$[mid_subpath_33144d83] = env->getMethodID(cls, "subpath", "(I)Lorg/apache/lucene/facet/taxonomy/CategoryPath;");
              mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");
              mids$[mid_toString_7611a535] = env->getMethodID(cls, "toString", "(C)Ljava/lang/String;");

              fids$ = new jfieldID[max_fid];
              fids$[fid_components] = env->getFieldID(cls, "components", "[Ljava/lang/String;");
              fids$[fid_length] = env->getFieldID(cls, "length", "I");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              EMPTY = new CategoryPath(env->getStaticObjectField(cls, "EMPTY", "Lorg/apache/lucene/facet/taxonomy/CategoryPath;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          CategoryPath::CategoryPath(const JArray< ::java::lang::String > & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_4dd4540c, a0.this$)) {}

          CategoryPath::CategoryPath(const ::java::lang::String & a0, jchar a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_7420ac50, a0.this$, a1)) {}

          jint CategoryPath::compareTo(const CategoryPath & a0) const
          {
            return env->callIntMethod(this$, mids$[mid_compareTo_07b9a56f], a0.this$);
          }

          jint CategoryPath::copyFullPath(const JArray< jchar > & a0, jint a1, jchar a2) const
          {
            return env->callIntMethod(this$, mids$[mid_copyFullPath_6d37715f], a0.this$, a1, a2);
          }

          jboolean CategoryPath::equals(const ::java::lang::Object & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
          }

          jint CategoryPath::fullPathLength() const
          {
            return env->callIntMethod(this$, mids$[mid_fullPathLength_54c6a179]);
          }

          jint CategoryPath::hashCode() const
          {
            return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
          }

          jlong CategoryPath::longHashCode() const
          {
            return env->callLongMethod(this$, mids$[mid_longHashCode_54c6a17a]);
          }

          CategoryPath CategoryPath::subpath(jint a0) const
          {
            return CategoryPath(env->callObjectMethod(this$, mids$[mid_subpath_33144d83], a0));
          }

          ::java::lang::String CategoryPath::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
          }

          ::java::lang::String CategoryPath::toString(jchar a0) const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_7611a535], a0));
          }

          JArray< ::java::lang::String > CategoryPath::_get_components() const
          {
            return JArray< ::java::lang::String >(env->getObjectField(this$, fids$[fid_components]));
          }

          jint CategoryPath::_get_length() const
          {
            return env->getIntField(this$, fids$[fid_length]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace taxonomy {
          static PyObject *t_CategoryPath_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_CategoryPath_instance_(PyTypeObject *type, PyObject *arg);
          static int t_CategoryPath_init_(t_CategoryPath *self, PyObject *args, PyObject *kwds);
          static PyObject *t_CategoryPath_compareTo(t_CategoryPath *self, PyObject *arg);
          static PyObject *t_CategoryPath_copyFullPath(t_CategoryPath *self, PyObject *args);
          static PyObject *t_CategoryPath_equals(t_CategoryPath *self, PyObject *args);
          static PyObject *t_CategoryPath_fullPathLength(t_CategoryPath *self);
          static PyObject *t_CategoryPath_hashCode(t_CategoryPath *self, PyObject *args);
          static PyObject *t_CategoryPath_longHashCode(t_CategoryPath *self);
          static PyObject *t_CategoryPath_subpath(t_CategoryPath *self, PyObject *arg);
          static PyObject *t_CategoryPath_toString(t_CategoryPath *self, PyObject *args);
          static PyObject *t_CategoryPath_get__components(t_CategoryPath *self, void *data);
          static PyObject *t_CategoryPath_get__length(t_CategoryPath *self, void *data);

          static PyGetSetDef t_CategoryPath__fields_[] = {
            DECLARE_GET_FIELD(t_CategoryPath, components),
            DECLARE_GET_FIELD(t_CategoryPath, length),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_CategoryPath__methods_[] = {
            DECLARE_METHOD(t_CategoryPath, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CategoryPath, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CategoryPath, compareTo, METH_O),
            DECLARE_METHOD(t_CategoryPath, copyFullPath, METH_VARARGS),
            DECLARE_METHOD(t_CategoryPath, equals, METH_VARARGS),
            DECLARE_METHOD(t_CategoryPath, fullPathLength, METH_NOARGS),
            DECLARE_METHOD(t_CategoryPath, hashCode, METH_VARARGS),
            DECLARE_METHOD(t_CategoryPath, longHashCode, METH_NOARGS),
            DECLARE_METHOD(t_CategoryPath, subpath, METH_O),
            DECLARE_METHOD(t_CategoryPath, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(CategoryPath, t_CategoryPath, ::java::lang::Object, CategoryPath, t_CategoryPath_init_, 0, 0, t_CategoryPath__fields_, 0, 0);

          void t_CategoryPath::install(PyObject *module)
          {
            installType(&PY_TYPE(CategoryPath), module, "CategoryPath", 0);
          }

          void t_CategoryPath::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(CategoryPath).tp_dict, "class_", make_descriptor(CategoryPath::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(CategoryPath).tp_dict, "wrapfn_", make_descriptor(t_CategoryPath::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(CategoryPath).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(CategoryPath::initializeClass);
            PyDict_SetItemString(PY_TYPE(CategoryPath).tp_dict, "EMPTY", make_descriptor(t_CategoryPath::wrap_Object(*CategoryPath::EMPTY)));
          }

          static PyObject *t_CategoryPath_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, CategoryPath::initializeClass, 1)))
              return NULL;
            return t_CategoryPath::wrap_Object(CategoryPath(((t_CategoryPath *) arg)->object.this$));
          }
          static PyObject *t_CategoryPath_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, CategoryPath::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_CategoryPath_init_(t_CategoryPath *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                JArray< ::java::lang::String > a0((jobject) NULL);
                CategoryPath object((jobject) NULL);

                if (!parseArgs(args, "[s", &a0))
                {
                  INT_CALL(object = CategoryPath(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 2:
              {
                ::java::lang::String a0((jobject) NULL);
                jchar a1;
                CategoryPath object((jobject) NULL);

                if (!parseArgs(args, "sC", &a0, &a1))
                {
                  INT_CALL(object = CategoryPath(a0, a1));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_CategoryPath_compareTo(t_CategoryPath *self, PyObject *arg)
          {
            CategoryPath a0((jobject) NULL);
            jint result;

            if (!parseArg(arg, "k", CategoryPath::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.compareTo(a0));
              return PyInt_FromLong((long) result);
            }

            PyErr_SetArgsError((PyObject *) self, "compareTo", arg);
            return NULL;
          }

          static PyObject *t_CategoryPath_copyFullPath(t_CategoryPath *self, PyObject *args)
          {
            JArray< jchar > a0((jobject) NULL);
            jint a1;
            jchar a2;
            jint result;

            if (!parseArgs(args, "[CIC", &a0, &a1, &a2))
            {
              OBJ_CALL(result = self->object.copyFullPath(a0, a1, a2));
              return PyInt_FromLong((long) result);
            }

            PyErr_SetArgsError((PyObject *) self, "copyFullPath", args);
            return NULL;
          }

          static PyObject *t_CategoryPath_equals(t_CategoryPath *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            jboolean result;

            if (!parseArgs(args, "o", &a0))
            {
              OBJ_CALL(result = self->object.equals(a0));
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(CategoryPath), (PyObject *) self, "equals", args, 2);
          }

          static PyObject *t_CategoryPath_fullPathLength(t_CategoryPath *self)
          {
            jint result;
            OBJ_CALL(result = self->object.fullPathLength());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_CategoryPath_hashCode(t_CategoryPath *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.hashCode());
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(CategoryPath), (PyObject *) self, "hashCode", args, 2);
          }

          static PyObject *t_CategoryPath_longHashCode(t_CategoryPath *self)
          {
            jlong result;
            OBJ_CALL(result = self->object.longHashCode());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          static PyObject *t_CategoryPath_subpath(t_CategoryPath *self, PyObject *arg)
          {
            jint a0;
            CategoryPath result((jobject) NULL);

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(result = self->object.subpath(a0));
              return t_CategoryPath::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "subpath", arg);
            return NULL;
          }

          static PyObject *t_CategoryPath_toString(t_CategoryPath *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 0:
              {
                ::java::lang::String result((jobject) NULL);
                OBJ_CALL(result = self->object.toString());
                return j2p(result);
              }
              break;
             case 1:
              {
                jchar a0;
                ::java::lang::String result((jobject) NULL);

                if (!parseArgs(args, "C", &a0))
                {
                  OBJ_CALL(result = self->object.toString(a0));
                  return j2p(result);
                }
              }
            }

            return callSuper(&PY_TYPE(CategoryPath), (PyObject *) self, "toString", args, 2);
          }

          static PyObject *t_CategoryPath_get__components(t_CategoryPath *self, void *data)
          {
            JArray< ::java::lang::String > value((jobject) NULL);
            OBJ_CALL(value = self->object._get_components());
            return JArray<jstring>(value.this$).wrap();
          }

          static PyObject *t_CategoryPath_get__length(t_CategoryPath *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object._get_length());
            return PyInt_FromLong((long) value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/tartarus/snowball/SnowballProgram.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace tartarus {
    namespace snowball {

      ::java::lang::Class *SnowballProgram::class$ = NULL;
      jmethodID *SnowballProgram::mids$ = NULL;
      bool SnowballProgram::live$ = false;

      jclass SnowballProgram::initializeClass(bool getOnly)
      {
        if (getOnly)
          return (jclass) (live$ ? class$->this$ : NULL);
        if (class$ == NULL)
        {
          jclass cls = (jclass) env->findClass("org/tartarus/snowball/SnowballProgram");

          mids$ = new jmethodID[max_mid];
          mids$[mid_getCurrent_14c7b5c5] = env->getMethodID(cls, "getCurrent", "()Ljava/lang/String;");
          mids$[mid_getCurrentBuffer_dab10e7f] = env->getMethodID(cls, "getCurrentBuffer", "()[C");
          mids$[mid_getCurrentBufferLength_54c6a179] = env->getMethodID(cls, "getCurrentBufferLength", "()I");
          mids$[mid_setCurrent_5fdc3f48] = env->getMethodID(cls, "setCurrent", "(Ljava/lang/String;)V");
          mids$[mid_setCurrent_ec6430f4] = env->getMethodID(cls, "setCurrent", "([CI)V");
          mids$[mid_stem_54c6a16a] = env->getMethodID(cls, "stem", "()Z");
          mids$[mid_insert_cb918b82] = env->getMethodID(cls, "insert", "(IILjava/lang/CharSequence;)V");
          mids$[mid_copy_from_cbe15af1] = env->getMethodID(cls, "copy_from", "(Lorg/tartarus/snowball/SnowballProgram;)V");
          mids$[mid_in_grouping_6f0bb35a] = env->getMethodID(cls, "in_grouping", "([CII)Z");
          mids$[mid_out_grouping_6f0bb35a] = env->getMethodID(cls, "out_grouping", "([CII)Z");
          mids$[mid_find_among_b_0795632a] = env->getMethodID(cls, "find_among_b", "([Lorg/tartarus/snowball/Among;I)I");
          mids$[mid_slice_del_54c6a166] = env->getMethodID(cls, "slice_del", "()V");
          mids$[mid_in_grouping_b_6f0bb35a] = env->getMethodID(cls, "in_grouping_b", "([CII)Z");
          mids$[mid_slice_from_a8afc64a] = env->getMethodID(cls, "slice_from", "(Ljava/lang/CharSequence;)V");
          mids$[mid_out_grouping_b_6f0bb35a] = env->getMethodID(cls, "out_grouping_b", "([CII)Z");
          mids$[mid_in_range_d8d154aa] = env->getMethodID(cls, "in_range", "(II)Z");
          mids$[mid_in_range_b_d8d154aa] = env->getMethodID(cls, "in_range_b", "(II)Z");
          mids$[mid_out_range_d8d154aa] = env->getMethodID(cls, "out_range", "(II)Z");
          mids$[mid_out_range_b_d8d154aa] = env->getMethodID(cls, "out_range_b", "(II)Z");
          mids$[mid_eq_s_9145fa84] = env->getMethodID(cls, "eq_s", "(ILjava/lang/CharSequence;)Z");
          mids$[mid_eq_s_b_9145fa84] = env->getMethodID(cls, "eq_s_b", "(ILjava/lang/CharSequence;)Z");
          mids$[mid_eq_v_a8afc646] = env->getMethodID(cls, "eq_v", "(Ljava/lang/CharSequence;)Z");
          mids$[mid_eq_v_b_a8afc646] = env->getMethodID(cls, "eq_v_b", "(Ljava/lang/CharSequence;)Z");
          mids$[mid_find_among_0795632a] = env->getMethodID(cls, "find_among", "([Lorg/tartarus/snowball/Among;I)I");
          mids$[mid_replace_s_cb918b9d] = env->getMethodID(cls, "replace_s", "(IILjava/lang/CharSequence;)I");
          mids$[mid_slice_check_54c6a166] = env->getMethodID(cls, "slice_check", "()V");
          mids$[mid_slice_to_468cbe57] = env->getMethodID(cls, "slice_to", "(Ljava/lang/StringBuilder;)Ljava/lang/StringBuilder;");
          mids$[mid_assign_to_468cbe57] = env->getMethodID(cls, "assign_to", "(Ljava/lang/StringBuilder;)Ljava/lang/StringBuilder;");

          class$ = (::java::lang::Class *) new JObject(cls);
          live$ = true;
        }
        return (jclass) class$->this$;
      }

      ::java::lang::String SnowballProgram::getCurrent() const
      {
        return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getCurrent_14c7b5c5]));
      }

      JArray< jchar > SnowballProgram::getCurrentBuffer() const
      {
        return JArray< jchar >(env->callObjectMethod(this$, mids$[mid_getCurrentBuffer_dab10e7f]));
      }

      jint SnowballProgram::getCurrentBufferLength() const
      {
        return env->callIntMethod(this$, mids$[mid_getCurrentBufferLength_54c6a179]);
      }

      void SnowballProgram::setCurrent(const ::java::lang::String & a0) const
      {
        env->callVoidMethod(this$, mids$[mid_setCurrent_5fdc3f48], a0.this$);
      }

      void SnowballProgram::setCurrent(const JArray< jchar > & a0, jint a1) const
      {
        env->callVoidMethod(this$, mids$[mid_setCurrent_ec6430f4], a0.this$, a1);
      }

      jboolean SnowballProgram::stem() const
      {
        return env->callBooleanMethod(this$, mids$[mid_stem_54c6a16a]);
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace tartarus {
    namespace snowball {
      static PyObject *t_SnowballProgram_cast_(PyTypeObject *type, PyObject *arg);
      static PyObject *t_SnowballProgram_instance_(PyTypeObject *type, PyObject *arg);
      static PyObject *t_SnowballProgram_getCurrent(t_SnowballProgram *self);
      static PyObject *t_SnowballProgram_getCurrentBuffer(t_SnowballProgram *self);
      static PyObject *t_SnowballProgram_getCurrentBufferLength(t_SnowballProgram *self);
      static PyObject *t_SnowballProgram_setCurrent(t_SnowballProgram *self, PyObject *args);
      static PyObject *t_SnowballProgram_stem(t_SnowballProgram *self);
      static PyObject *t_SnowballProgram_get__current(t_SnowballProgram *self, void *data);
      static int t_SnowballProgram_set__current(t_SnowballProgram *self, PyObject *arg, void *data);
      static PyObject *t_SnowballProgram_get__currentBuffer(t_SnowballProgram *self, void *data);
      static PyObject *t_SnowballProgram_get__currentBufferLength(t_SnowballProgram *self, void *data);
      static PyGetSetDef t_SnowballProgram__fields_[] = {
        DECLARE_GETSET_FIELD(t_SnowballProgram, current),
        DECLARE_GET_FIELD(t_SnowballProgram, currentBuffer),
        DECLARE_GET_FIELD(t_SnowballProgram, currentBufferLength),
        { NULL, NULL, NULL, NULL, NULL }
      };

      static PyMethodDef t_SnowballProgram__methods_[] = {
        DECLARE_METHOD(t_SnowballProgram, cast_, METH_O | METH_CLASS),
        DECLARE_METHOD(t_SnowballProgram, instance_, METH_O | METH_CLASS),
        DECLARE_METHOD(t_SnowballProgram, getCurrent, METH_NOARGS),
        DECLARE_METHOD(t_SnowballProgram, getCurrentBuffer, METH_NOARGS),
        DECLARE_METHOD(t_SnowballProgram, getCurrentBufferLength, METH_NOARGS),
        DECLARE_METHOD(t_SnowballProgram, setCurrent, METH_VARARGS),
        DECLARE_METHOD(t_SnowballProgram, stem, METH_NOARGS),
        { NULL, NULL, 0, NULL }
      };

      DECLARE_TYPE(SnowballProgram, t_SnowballProgram, ::java::lang::Object, SnowballProgram, abstract_init, 0, 0, t_SnowballProgram__fields_, 0, 0);

      void t_SnowballProgram::install(PyObject *module)
      {
        installType(&PY_TYPE(SnowballProgram), module, "SnowballProgram", 0);
      }

      void t_SnowballProgram::initialize(PyObject *module)
      {
        PyDict_SetItemString(PY_TYPE(SnowballProgram).tp_dict, "class_", make_descriptor(SnowballProgram::initializeClass, 1));
        PyDict_SetItemString(PY_TYPE(SnowballProgram).tp_dict, "wrapfn_", make_descriptor(t_SnowballProgram::wrap_jobject));
        PyDict_SetItemString(PY_TYPE(SnowballProgram).tp_dict, "boxfn_", make_descriptor(boxObject));
      }

      static PyObject *t_SnowballProgram_cast_(PyTypeObject *type, PyObject *arg)
      {
        if (!(arg = castCheck(arg, SnowballProgram::initializeClass, 1)))
          return NULL;
        return t_SnowballProgram::wrap_Object(SnowballProgram(((t_SnowballProgram *) arg)->object.this$));
      }
      static PyObject *t_SnowballProgram_instance_(PyTypeObject *type, PyObject *arg)
      {
        if (!castCheck(arg, SnowballProgram::initializeClass, 0))
          Py_RETURN_FALSE;
        Py_RETURN_TRUE;
      }

      static PyObject *t_SnowballProgram_getCurrent(t_SnowballProgram *self)
      {
        ::java::lang::String result((jobject) NULL);
        OBJ_CALL(result = self->object.getCurrent());
        return j2p(result);
      }

      static PyObject *t_SnowballProgram_getCurrentBuffer(t_SnowballProgram *self)
      {
        JArray< jchar > result((jobject) NULL);
        OBJ_CALL(result = self->object.getCurrentBuffer());
        return result.wrap();
      }

      static PyObject *t_SnowballProgram_getCurrentBufferLength(t_SnowballProgram *self)
      {
        jint result;
        OBJ_CALL(result = self->object.getCurrentBufferLength());
        return PyInt_FromLong((long) result);
      }

      static PyObject *t_SnowballProgram_setCurrent(t_SnowballProgram *self, PyObject *args)
      {
        switch (PyTuple_GET_SIZE(args)) {
         case 1:
          {
            ::java::lang::String a0((jobject) NULL);

            if (!parseArgs(args, "s", &a0))
            {
              OBJ_CALL(self->object.setCurrent(a0));
              Py_RETURN_NONE;
            }
          }
          break;
         case 2:
          {
            JArray< jchar > a0((jobject) NULL);
            jint a1;

            if (!parseArgs(args, "[CI", &a0, &a1))
            {
              OBJ_CALL(self->object.setCurrent(a0, a1));
              Py_RETURN_NONE;
            }
          }
        }

        PyErr_SetArgsError((PyObject *) self, "setCurrent", args);
        return NULL;
      }

      static PyObject *t_SnowballProgram_stem(t_SnowballProgram *self)
      {
        jboolean result;
        OBJ_CALL(result = self->object.stem());
        Py_RETURN_BOOL(result);
      }

      static PyObject *t_SnowballProgram_get__current(t_SnowballProgram *self, void *data)
      {
        ::java::lang::String value((jobject) NULL);
        OBJ_CALL(value = self->object.getCurrent());
        return j2p(value);
      }
      static int t_SnowballProgram_set__current(t_SnowballProgram *self, PyObject *arg, void *data)
      {
        {
          ::java::lang::String value((jobject) NULL);
          if (!parseArg(arg, "s", &value))
          {
            INT_CALL(self->object.setCurrent(value));
            return 0;
          }
        }
        PyErr_SetArgsError((PyObject *) self, "current", arg);
        return -1;
      }

      static PyObject *t_SnowballProgram_get__currentBuffer(t_SnowballProgram *self, void *data)
      {
        JArray< jchar > value((jobject) NULL);
        OBJ_CALL(value = self->object.getCurrentBuffer());
        return value.wrap();
      }

      static PyObject *t_SnowballProgram_get__currentBufferLength(t_SnowballProgram *self, void *data)
      {
        jint value;
        OBJ_CALL(value = self->object.getCurrentBufferLength());
        return PyInt_FromLong((long) value);
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/store/RandomAccessInput.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {

        ::java::lang::Class *RandomAccessInput::class$ = NULL;
        jmethodID *RandomAccessInput::mids$ = NULL;
        bool RandomAccessInput::live$ = false;

        jclass RandomAccessInput::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/store/RandomAccessInput");

            mids$ = new jmethodID[max_mid];
            mids$[mid_readByte_0ee6df3b] = env->getMethodID(cls, "readByte", "(J)B");
            mids$[mid_readInt_0ee6df30] = env->getMethodID(cls, "readInt", "(J)I");
            mids$[mid_readLong_0ee6df33] = env->getMethodID(cls, "readLong", "(J)J");
            mids$[mid_readShort_0ee6df2a] = env->getMethodID(cls, "readShort", "(J)S");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        jbyte RandomAccessInput::readByte(jlong a0) const
        {
          return env->callByteMethod(this$, mids$[mid_readByte_0ee6df3b], a0);
        }

        jint RandomAccessInput::readInt(jlong a0) const
        {
          return env->callIntMethod(this$, mids$[mid_readInt_0ee6df30], a0);
        }

        jlong RandomAccessInput::readLong(jlong a0) const
        {
          return env->callLongMethod(this$, mids$[mid_readLong_0ee6df33], a0);
        }

        jshort RandomAccessInput::readShort(jlong a0) const
        {
          return env->callShortMethod(this$, mids$[mid_readShort_0ee6df2a], a0);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {
        static PyObject *t_RandomAccessInput_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_RandomAccessInput_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_RandomAccessInput_readByte(t_RandomAccessInput *self, PyObject *arg);
        static PyObject *t_RandomAccessInput_readInt(t_RandomAccessInput *self, PyObject *arg);
        static PyObject *t_RandomAccessInput_readLong(t_RandomAccessInput *self, PyObject *arg);
        static PyObject *t_RandomAccessInput_readShort(t_RandomAccessInput *self, PyObject *arg);

        static PyMethodDef t_RandomAccessInput__methods_[] = {
          DECLARE_METHOD(t_RandomAccessInput, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_RandomAccessInput, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_RandomAccessInput, readByte, METH_O),
          DECLARE_METHOD(t_RandomAccessInput, readInt, METH_O),
          DECLARE_METHOD(t_RandomAccessInput, readLong, METH_O),
          DECLARE_METHOD(t_RandomAccessInput, readShort, METH_O),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(RandomAccessInput, t_RandomAccessInput, ::java::lang::Object, RandomAccessInput, abstract_init, 0, 0, 0, 0, 0);

        void t_RandomAccessInput::install(PyObject *module)
        {
          installType(&PY_TYPE(RandomAccessInput), module, "RandomAccessInput", 0);
        }

        void t_RandomAccessInput::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(RandomAccessInput).tp_dict, "class_", make_descriptor(RandomAccessInput::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(RandomAccessInput).tp_dict, "wrapfn_", make_descriptor(t_RandomAccessInput::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(RandomAccessInput).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_RandomAccessInput_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, RandomAccessInput::initializeClass, 1)))
            return NULL;
          return t_RandomAccessInput::wrap_Object(RandomAccessInput(((t_RandomAccessInput *) arg)->object.this$));
        }
        static PyObject *t_RandomAccessInput_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, RandomAccessInput::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_RandomAccessInput_readByte(t_RandomAccessInput *self, PyObject *arg)
        {
          jlong a0;
          jbyte result;

          if (!parseArg(arg, "J", &a0))
          {
            OBJ_CALL(result = self->object.readByte(a0));
            return PyInt_FromLong((long) result);
          }

          PyErr_SetArgsError((PyObject *) self, "readByte", arg);
          return NULL;
        }

        static PyObject *t_RandomAccessInput_readInt(t_RandomAccessInput *self, PyObject *arg)
        {
          jlong a0;
          jint result;

          if (!parseArg(arg, "J", &a0))
          {
            OBJ_CALL(result = self->object.readInt(a0));
            return PyInt_FromLong((long) result);
          }

          PyErr_SetArgsError((PyObject *) self, "readInt", arg);
          return NULL;
        }

        static PyObject *t_RandomAccessInput_readLong(t_RandomAccessInput *self, PyObject *arg)
        {
          jlong a0;
          jlong result;

          if (!parseArg(arg, "J", &a0))
          {
            OBJ_CALL(result = self->object.readLong(a0));
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          PyErr_SetArgsError((PyObject *) self, "readLong", arg);
          return NULL;
        }

        static PyObject *t_RandomAccessInput_readShort(t_RandomAccessInput *self, PyObject *arg)
        {
          jlong a0;
          jshort result;

          if (!parseArg(arg, "J", &a0))
          {
            OBJ_CALL(result = self->object.readShort(a0));
            return PyInt_FromLong((long) result);
          }

          PyErr_SetArgsError((PyObject *) self, "readShort", arg);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/standard/StandardTokenizerFactory.h"
#include "org/apache/lucene/util/AttributeFactory.h"
#include "java/lang/Class.h"
#include "java/util/Map.h"
#include "java/io/Reader.h"
#include "java/lang/String.h"
#include "org/apache/lucene/analysis/standard/StandardTokenizer.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace standard {

          ::java::lang::Class *StandardTokenizerFactory::class$ = NULL;
          jmethodID *StandardTokenizerFactory::mids$ = NULL;
          bool StandardTokenizerFactory::live$ = false;

          jclass StandardTokenizerFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/standard/StandardTokenizerFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4c9e2b1c] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_9cba40d3] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/util/AttributeFactory;Ljava/io/Reader;)Lorg/apache/lucene/analysis/standard/StandardTokenizer;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          StandardTokenizerFactory::StandardTokenizerFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenizerFactory(env->newObject(initializeClass, &mids$, mid_init$_4c9e2b1c, a0.this$)) {}

          ::org::apache::lucene::analysis::standard::StandardTokenizer StandardTokenizerFactory::create(const ::org::apache::lucene::util::AttributeFactory & a0, const ::java::io::Reader & a1) const
          {
            return ::org::apache::lucene::analysis::standard::StandardTokenizer(env->callObjectMethod(this$, mids$[mid_create_9cba40d3], a0.this$, a1.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace standard {
          static PyObject *t_StandardTokenizerFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_StandardTokenizerFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_StandardTokenizerFactory_init_(t_StandardTokenizerFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_StandardTokenizerFactory_create(t_StandardTokenizerFactory *self, PyObject *args);

          static PyMethodDef t_StandardTokenizerFactory__methods_[] = {
            DECLARE_METHOD(t_StandardTokenizerFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_StandardTokenizerFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_StandardTokenizerFactory, create, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(StandardTokenizerFactory, t_StandardTokenizerFactory, ::org::apache::lucene::analysis::util::TokenizerFactory, StandardTokenizerFactory, t_StandardTokenizerFactory_init_, 0, 0, 0, 0, 0);

          void t_StandardTokenizerFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(StandardTokenizerFactory), module, "StandardTokenizerFactory", 0);
          }

          void t_StandardTokenizerFactory::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(StandardTokenizerFactory).tp_dict, "class_", make_descriptor(StandardTokenizerFactory::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(StandardTokenizerFactory).tp_dict, "wrapfn_", make_descriptor(t_StandardTokenizerFactory::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(StandardTokenizerFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_StandardTokenizerFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, StandardTokenizerFactory::initializeClass, 1)))
              return NULL;
            return t_StandardTokenizerFactory::wrap_Object(StandardTokenizerFactory(((t_StandardTokenizerFactory *) arg)->object.this$));
          }
          static PyObject *t_StandardTokenizerFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, StandardTokenizerFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_StandardTokenizerFactory_init_(t_StandardTokenizerFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            StandardTokenizerFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = StandardTokenizerFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_StandardTokenizerFactory_create(t_StandardTokenizerFactory *self, PyObject *args)
          {
            ::org::apache::lucene::util::AttributeFactory a0((jobject) NULL);
            ::java::io::Reader a1((jobject) NULL);
            ::org::apache::lucene::analysis::standard::StandardTokenizer result((jobject) NULL);

            if (!parseArgs(args, "kk", ::org::apache::lucene::util::AttributeFactory::initializeClass, ::java::io::Reader::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.create(a0, a1));
              return ::org::apache::lucene::analysis::standard::t_StandardTokenizer::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(StandardTokenizerFactory), (PyObject *) self, "create", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/lucene49/Lucene49DocValuesFormat.h"
#include "org/apache/lucene/index/SegmentReadState.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/codecs/DocValuesConsumer.h"
#include "org/apache/lucene/index/SegmentWriteState.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/codecs/DocValuesProducer.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace lucene49 {

          ::java::lang::Class *Lucene49DocValuesFormat::class$ = NULL;
          jmethodID *Lucene49DocValuesFormat::mids$ = NULL;
          bool Lucene49DocValuesFormat::live$ = false;

          jclass Lucene49DocValuesFormat::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/lucene49/Lucene49DocValuesFormat");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_fieldsConsumer_025deb44] = env->getMethodID(cls, "fieldsConsumer", "(Lorg/apache/lucene/index/SegmentWriteState;)Lorg/apache/lucene/codecs/DocValuesConsumer;");
              mids$[mid_fieldsProducer_9b0d4e4a] = env->getMethodID(cls, "fieldsProducer", "(Lorg/apache/lucene/index/SegmentReadState;)Lorg/apache/lucene/codecs/DocValuesProducer;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          Lucene49DocValuesFormat::Lucene49DocValuesFormat() : ::org::apache::lucene::codecs::DocValuesFormat(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          ::org::apache::lucene::codecs::DocValuesConsumer Lucene49DocValuesFormat::fieldsConsumer(const ::org::apache::lucene::index::SegmentWriteState & a0) const
          {
            return ::org::apache::lucene::codecs::DocValuesConsumer(env->callObjectMethod(this$, mids$[mid_fieldsConsumer_025deb44], a0.this$));
          }

          ::org::apache::lucene::codecs::DocValuesProducer Lucene49DocValuesFormat::fieldsProducer(const ::org::apache::lucene::index::SegmentReadState & a0) const
          {
            return ::org::apache::lucene::codecs::DocValuesProducer(env->callObjectMethod(this$, mids$[mid_fieldsProducer_9b0d4e4a], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace lucene49 {
          static PyObject *t_Lucene49DocValuesFormat_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Lucene49DocValuesFormat_instance_(PyTypeObject *type, PyObject *arg);
          static int t_Lucene49DocValuesFormat_init_(t_Lucene49DocValuesFormat *self, PyObject *args, PyObject *kwds);
          static PyObject *t_Lucene49DocValuesFormat_fieldsConsumer(t_Lucene49DocValuesFormat *self, PyObject *args);
          static PyObject *t_Lucene49DocValuesFormat_fieldsProducer(t_Lucene49DocValuesFormat *self, PyObject *args);

          static PyMethodDef t_Lucene49DocValuesFormat__methods_[] = {
            DECLARE_METHOD(t_Lucene49DocValuesFormat, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lucene49DocValuesFormat, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lucene49DocValuesFormat, fieldsConsumer, METH_VARARGS),
            DECLARE_METHOD(t_Lucene49DocValuesFormat, fieldsProducer, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(Lucene49DocValuesFormat, t_Lucene49DocValuesFormat, ::org::apache::lucene::codecs::DocValuesFormat, Lucene49DocValuesFormat, t_Lucene49DocValuesFormat_init_, 0, 0, 0, 0, 0);

          void t_Lucene49DocValuesFormat::install(PyObject *module)
          {
            installType(&PY_TYPE(Lucene49DocValuesFormat), module, "Lucene49DocValuesFormat", 0);
          }

          void t_Lucene49DocValuesFormat::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(Lucene49DocValuesFormat).tp_dict, "class_", make_descriptor(Lucene49DocValuesFormat::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(Lucene49DocValuesFormat).tp_dict, "wrapfn_", make_descriptor(t_Lucene49DocValuesFormat::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(Lucene49DocValuesFormat).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_Lucene49DocValuesFormat_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, Lucene49DocValuesFormat::initializeClass, 1)))
              return NULL;
            return t_Lucene49DocValuesFormat::wrap_Object(Lucene49DocValuesFormat(((t_Lucene49DocValuesFormat *) arg)->object.this$));
          }
          static PyObject *t_Lucene49DocValuesFormat_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, Lucene49DocValuesFormat::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_Lucene49DocValuesFormat_init_(t_Lucene49DocValuesFormat *self, PyObject *args, PyObject *kwds)
          {
            Lucene49DocValuesFormat object((jobject) NULL);

            INT_CALL(object = Lucene49DocValuesFormat());
            self->object = object;

            return 0;
          }

          static PyObject *t_Lucene49DocValuesFormat_fieldsConsumer(t_Lucene49DocValuesFormat *self, PyObject *args)
          {
            ::org::apache::lucene::index::SegmentWriteState a0((jobject) NULL);
            ::org::apache::lucene::codecs::DocValuesConsumer result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::index::SegmentWriteState::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.fieldsConsumer(a0));
              return ::org::apache::lucene::codecs::t_DocValuesConsumer::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(Lucene49DocValuesFormat), (PyObject *) self, "fieldsConsumer", args, 2);
          }

          static PyObject *t_Lucene49DocValuesFormat_fieldsProducer(t_Lucene49DocValuesFormat *self, PyObject *args)
          {
            ::org::apache::lucene::index::SegmentReadState a0((jobject) NULL);
            ::org::apache::lucene::codecs::DocValuesProducer result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::index::SegmentReadState::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.fieldsProducer(a0));
              return ::org::apache::lucene::codecs::t_DocValuesProducer::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(Lucene49DocValuesFormat), (PyObject *) self, "fieldsProducer", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/store/CompoundFileDirectory.h"
#include "org/apache/lucene/store/Lock.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/store/IOContext.h"
#include "org/apache/lucene/store/Directory.h"
#include "java/lang/String.h"
#include "org/apache/lucene/store/IndexOutput.h"
#include "java/util/Collection.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/store/IndexInput.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {

        ::java::lang::Class *CompoundFileDirectory::class$ = NULL;
        jmethodID *CompoundFileDirectory::mids$ = NULL;
        bool CompoundFileDirectory::live$ = false;

        jclass CompoundFileDirectory::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/store/CompoundFileDirectory");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_f1dc2b71] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/store/Directory;Ljava/lang/String;Lorg/apache/lucene/store/IOContext;Z)V");
            mids$[mid_close_54c6a166] = env->getMethodID(cls, "close", "()V");
            mids$[mid_createOutput_5ad5358d] = env->getMethodID(cls, "createOutput", "(Ljava/lang/String;Lorg/apache/lucene/store/IOContext;)Lorg/apache/lucene/store/IndexOutput;");
            mids$[mid_deleteFile_5fdc3f48] = env->getMethodID(cls, "deleteFile", "(Ljava/lang/String;)V");
            mids$[mid_fileExists_5fdc3f44] = env->getMethodID(cls, "fileExists", "(Ljava/lang/String;)Z");
            mids$[mid_fileLength_5fdc3f54] = env->getMethodID(cls, "fileLength", "(Ljava/lang/String;)J");
            mids$[mid_getDirectory_1f3934bb] = env->getMethodID(cls, "getDirectory", "()Lorg/apache/lucene/store/Directory;");
            mids$[mid_getName_14c7b5c5] = env->getMethodID(cls, "getName", "()Ljava/lang/String;");
            mids$[mid_listAll_2e6d5245] = env->getMethodID(cls, "listAll", "()[Ljava/lang/String;");
            mids$[mid_makeLock_f26bb9a8] = env->getMethodID(cls, "makeLock", "(Ljava/lang/String;)Lorg/apache/lucene/store/Lock;");
            mids$[mid_openInput_3e1b5375] = env->getMethodID(cls, "openInput", "(Ljava/lang/String;Lorg/apache/lucene/store/IOContext;)Lorg/apache/lucene/store/IndexInput;");
            mids$[mid_renameFile_4a264742] = env->getMethodID(cls, "renameFile", "(Ljava/lang/String;Ljava/lang/String;)V");
            mids$[mid_sync_9bfb370d] = env->getMethodID(cls, "sync", "(Ljava/util/Collection;)V");
            mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        CompoundFileDirectory::CompoundFileDirectory(const ::org::apache::lucene::store::Directory & a0, const ::java::lang::String & a1, const ::org::apache::lucene::store::IOContext & a2, jboolean a3) : ::org::apache::lucene::store::BaseDirectory(env->newObject(initializeClass, &mids$, mid_init$_f1dc2b71, a0.this$, a1.this$, a2.this$, a3)) {}

        void CompoundFileDirectory::close() const
        {
          env->callVoidMethod(this$, mids$[mid_close_54c6a166]);
        }

        ::org::apache::lucene::store::IndexOutput CompoundFileDirectory::createOutput(const ::java::lang::String & a0, const ::org::apache::lucene::store::IOContext & a1) const
        {
          return ::org::apache::lucene::store::IndexOutput(env->callObjectMethod(this$, mids$[mid_createOutput_5ad5358d], a0.this$, a1.this$));
        }

        void CompoundFileDirectory::deleteFile(const ::java::lang::String & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_deleteFile_5fdc3f48], a0.this$);
        }

        jboolean CompoundFileDirectory::fileExists(const ::java::lang::String & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_fileExists_5fdc3f44], a0.this$);
        }

        jlong CompoundFileDirectory::fileLength(const ::java::lang::String & a0) const
        {
          return env->callLongMethod(this$, mids$[mid_fileLength_5fdc3f54], a0.this$);
        }

        ::org::apache::lucene::store::Directory CompoundFileDirectory::getDirectory() const
        {
          return ::org::apache::lucene::store::Directory(env->callObjectMethod(this$, mids$[mid_getDirectory_1f3934bb]));
        }

        ::java::lang::String CompoundFileDirectory::getName() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getName_14c7b5c5]));
        }

        JArray< ::java::lang::String > CompoundFileDirectory::listAll() const
        {
          return JArray< ::java::lang::String >(env->callObjectMethod(this$, mids$[mid_listAll_2e6d5245]));
        }

        ::org::apache::lucene::store::Lock CompoundFileDirectory::makeLock(const ::java::lang::String & a0) const
        {
          return ::org::apache::lucene::store::Lock(env->callObjectMethod(this$, mids$[mid_makeLock_f26bb9a8], a0.this$));
        }

        ::org::apache::lucene::store::IndexInput CompoundFileDirectory::openInput(const ::java::lang::String & a0, const ::org::apache::lucene::store::IOContext & a1) const
        {
          return ::org::apache::lucene::store::IndexInput(env->callObjectMethod(this$, mids$[mid_openInput_3e1b5375], a0.this$, a1.this$));
        }

        void CompoundFileDirectory::renameFile(const ::java::lang::String & a0, const ::java::lang::String & a1) const
        {
          env->callVoidMethod(this$, mids$[mid_renameFile_4a264742], a0.this$, a1.this$);
        }

        void CompoundFileDirectory::sync(const ::java::util::Collection & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_sync_9bfb370d], a0.this$);
        }

        ::java::lang::String CompoundFileDirectory::toString() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"
#include "org/apache/lucene/store/CompoundFileDirectory$FileEntry.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {
        static PyObject *t_CompoundFileDirectory_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_CompoundFileDirectory_instance_(PyTypeObject *type, PyObject *arg);
        static int t_CompoundFileDirectory_init_(t_CompoundFileDirectory *self, PyObject *args, PyObject *kwds);
        static PyObject *t_CompoundFileDirectory_close(t_CompoundFileDirectory *self, PyObject *args);
        static PyObject *t_CompoundFileDirectory_createOutput(t_CompoundFileDirectory *self, PyObject *args);
        static PyObject *t_CompoundFileDirectory_deleteFile(t_CompoundFileDirectory *self, PyObject *args);
        static PyObject *t_CompoundFileDirectory_fileExists(t_CompoundFileDirectory *self, PyObject *args);
        static PyObject *t_CompoundFileDirectory_fileLength(t_CompoundFileDirectory *self, PyObject *args);
        static PyObject *t_CompoundFileDirectory_getDirectory(t_CompoundFileDirectory *self);
        static PyObject *t_CompoundFileDirectory_getName(t_CompoundFileDirectory *self);
        static PyObject *t_CompoundFileDirectory_listAll(t_CompoundFileDirectory *self, PyObject *args);
        static PyObject *t_CompoundFileDirectory_makeLock(t_CompoundFileDirectory *self, PyObject *args);
        static PyObject *t_CompoundFileDirectory_openInput(t_CompoundFileDirectory *self, PyObject *args);
        static PyObject *t_CompoundFileDirectory_renameFile(t_CompoundFileDirectory *self, PyObject *args);
        static PyObject *t_CompoundFileDirectory_sync(t_CompoundFileDirectory *self, PyObject *args);
        static PyObject *t_CompoundFileDirectory_toString(t_CompoundFileDirectory *self, PyObject *args);
        static PyObject *t_CompoundFileDirectory_get__directory(t_CompoundFileDirectory *self, void *data);
        static PyObject *t_CompoundFileDirectory_get__name(t_CompoundFileDirectory *self, void *data);
        static PyGetSetDef t_CompoundFileDirectory__fields_[] = {
          DECLARE_GET_FIELD(t_CompoundFileDirectory, directory),
          DECLARE_GET_FIELD(t_CompoundFileDirectory, name),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_CompoundFileDirectory__methods_[] = {
          DECLARE_METHOD(t_CompoundFileDirectory, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_CompoundFileDirectory, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_CompoundFileDirectory, close, METH_VARARGS),
          DECLARE_METHOD(t_CompoundFileDirectory, createOutput, METH_VARARGS),
          DECLARE_METHOD(t_CompoundFileDirectory, deleteFile, METH_VARARGS),
          DECLARE_METHOD(t_CompoundFileDirectory, fileExists, METH_VARARGS),
          DECLARE_METHOD(t_CompoundFileDirectory, fileLength, METH_VARARGS),
          DECLARE_METHOD(t_CompoundFileDirectory, getDirectory, METH_NOARGS),
          DECLARE_METHOD(t_CompoundFileDirectory, getName, METH_NOARGS),
          DECLARE_METHOD(t_CompoundFileDirectory, listAll, METH_VARARGS),
          DECLARE_METHOD(t_CompoundFileDirectory, makeLock, METH_VARARGS),
          DECLARE_METHOD(t_CompoundFileDirectory, openInput, METH_VARARGS),
          DECLARE_METHOD(t_CompoundFileDirectory, renameFile, METH_VARARGS),
          DECLARE_METHOD(t_CompoundFileDirectory, sync, METH_VARARGS),
          DECLARE_METHOD(t_CompoundFileDirectory, toString, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(CompoundFileDirectory, t_CompoundFileDirectory, ::org::apache::lucene::store::BaseDirectory, CompoundFileDirectory, t_CompoundFileDirectory_init_, 0, 0, t_CompoundFileDirectory__fields_, 0, 0);

        void t_CompoundFileDirectory::install(PyObject *module)
        {
          installType(&PY_TYPE(CompoundFileDirectory), module, "CompoundFileDirectory", 0);
          PyDict_SetItemString(PY_TYPE(CompoundFileDirectory).tp_dict, "FileEntry", make_descriptor(&PY_TYPE(CompoundFileDirectory$FileEntry)));
        }

        void t_CompoundFileDirectory::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(CompoundFileDirectory).tp_dict, "class_", make_descriptor(CompoundFileDirectory::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(CompoundFileDirectory).tp_dict, "wrapfn_", make_descriptor(t_CompoundFileDirectory::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(CompoundFileDirectory).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_CompoundFileDirectory_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, CompoundFileDirectory::initializeClass, 1)))
            return NULL;
          return t_CompoundFileDirectory::wrap_Object(CompoundFileDirectory(((t_CompoundFileDirectory *) arg)->object.this$));
        }
        static PyObject *t_CompoundFileDirectory_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, CompoundFileDirectory::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_CompoundFileDirectory_init_(t_CompoundFileDirectory *self, PyObject *args, PyObject *kwds)
        {
          ::org::apache::lucene::store::Directory a0((jobject) NULL);
          ::java::lang::String a1((jobject) NULL);
          ::org::apache::lucene::store::IOContext a2((jobject) NULL);
          jboolean a3;
          CompoundFileDirectory object((jobject) NULL);

          if (!parseArgs(args, "kskZ", ::org::apache::lucene::store::Directory::initializeClass, ::org::apache::lucene::store::IOContext::initializeClass, &a0, &a1, &a2, &a3))
          {
            INT_CALL(object = CompoundFileDirectory(a0, a1, a2, a3));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_CompoundFileDirectory_close(t_CompoundFileDirectory *self, PyObject *args)
        {

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(self->object.close());
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(CompoundFileDirectory), (PyObject *) self, "close", args, 2);
        }

        static PyObject *t_CompoundFileDirectory_createOutput(t_CompoundFileDirectory *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::store::IOContext a1((jobject) NULL);
          ::org::apache::lucene::store::IndexOutput result((jobject) NULL);

          if (!parseArgs(args, "sk", ::org::apache::lucene::store::IOContext::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = self->object.createOutput(a0, a1));
            return ::org::apache::lucene::store::t_IndexOutput::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(CompoundFileDirectory), (PyObject *) self, "createOutput", args, 2);
        }

        static PyObject *t_CompoundFileDirectory_deleteFile(t_CompoundFileDirectory *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(self->object.deleteFile(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(CompoundFileDirectory), (PyObject *) self, "deleteFile", args, 2);
        }

        static PyObject *t_CompoundFileDirectory_fileExists(t_CompoundFileDirectory *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = self->object.fileExists(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(CompoundFileDirectory), (PyObject *) self, "fileExists", args, 2);
        }

        static PyObject *t_CompoundFileDirectory_fileLength(t_CompoundFileDirectory *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          jlong result;

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = self->object.fileLength(a0));
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          return callSuper(&PY_TYPE(CompoundFileDirectory), (PyObject *) self, "fileLength", args, 2);
        }

        static PyObject *t_CompoundFileDirectory_getDirectory(t_CompoundFileDirectory *self)
        {
          ::org::apache::lucene::store::Directory result((jobject) NULL);
          OBJ_CALL(result = self->object.getDirectory());
          return ::org::apache::lucene::store::t_Directory::wrap_Object(result);
        }

        static PyObject *t_CompoundFileDirectory_getName(t_CompoundFileDirectory *self)
        {
          ::java::lang::String result((jobject) NULL);
          OBJ_CALL(result = self->object.getName());
          return j2p(result);
        }

        static PyObject *t_CompoundFileDirectory_listAll(t_CompoundFileDirectory *self, PyObject *args)
        {
          JArray< ::java::lang::String > result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.listAll());
            return JArray<jstring>(result.this$).wrap();
          }

          return callSuper(&PY_TYPE(CompoundFileDirectory), (PyObject *) self, "listAll", args, 2);
        }

        static PyObject *t_CompoundFileDirectory_makeLock(t_CompoundFileDirectory *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::store::Lock result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = self->object.makeLock(a0));
            return ::org::apache::lucene::store::t_Lock::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(CompoundFileDirectory), (PyObject *) self, "makeLock", args, 2);
        }

        static PyObject *t_CompoundFileDirectory_openInput(t_CompoundFileDirectory *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::store::IOContext a1((jobject) NULL);
          ::org::apache::lucene::store::IndexInput result((jobject) NULL);

          if (!parseArgs(args, "sk", ::org::apache::lucene::store::IOContext::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = self->object.openInput(a0, a1));
            return ::org::apache::lucene::store::t_IndexInput::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(CompoundFileDirectory), (PyObject *) self, "openInput", args, 2);
        }

        static PyObject *t_CompoundFileDirectory_renameFile(t_CompoundFileDirectory *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::java::lang::String a1((jobject) NULL);

          if (!parseArgs(args, "ss", &a0, &a1))
          {
            OBJ_CALL(self->object.renameFile(a0, a1));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "renameFile", args);
          return NULL;
        }

        static PyObject *t_CompoundFileDirectory_sync(t_CompoundFileDirectory *self, PyObject *args)
        {
          ::java::util::Collection a0((jobject) NULL);
          PyTypeObject **p0;

          if (!parseArgs(args, "K", ::java::util::Collection::initializeClass, &a0, &p0, ::java::util::t_Collection::parameters_))
          {
            OBJ_CALL(self->object.sync(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(CompoundFileDirectory), (PyObject *) self, "sync", args, 2);
        }

        static PyObject *t_CompoundFileDirectory_toString(t_CompoundFileDirectory *self, PyObject *args)
        {
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.toString());
            return j2p(result);
          }

          return callSuper(&PY_TYPE(CompoundFileDirectory), (PyObject *) self, "toString", args, 2);
        }

        static PyObject *t_CompoundFileDirectory_get__directory(t_CompoundFileDirectory *self, void *data)
        {
          ::org::apache::lucene::store::Directory value((jobject) NULL);
          OBJ_CALL(value = self->object.getDirectory());
          return ::org::apache::lucene::store::t_Directory::wrap_Object(value);
        }

        static PyObject *t_CompoundFileDirectory_get__name(t_CompoundFileDirectory *self, void *data)
        {
          ::java::lang::String value((jobject) NULL);
          OBJ_CALL(value = self->object.getName());
          return j2p(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queries/function/valuesource/MultiFloatFunction.h"
#include "org/apache/lucene/queries/function/FunctionValues.h"
#include "java/lang/Class.h"
#include "java/lang/Object.h"
#include "java/io/IOException.h"
#include "java/util/Map.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "java/lang/String.h"
#include "org/apache/lucene/search/IndexSearcher.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {

            ::java::lang::Class *MultiFloatFunction::class$ = NULL;
            jmethodID *MultiFloatFunction::mids$ = NULL;
            bool MultiFloatFunction::live$ = false;

            jclass MultiFloatFunction::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queries/function/valuesource/MultiFloatFunction");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_ee9922ca] = env->getMethodID(cls, "<init>", "([Lorg/apache/lucene/queries/function/ValueSource;)V");
                mids$[mid_createWeight_1b6125ba] = env->getMethodID(cls, "createWeight", "(Ljava/util/Map;Lorg/apache/lucene/search/IndexSearcher;)V");
                mids$[mid_description_14c7b5c5] = env->getMethodID(cls, "description", "()Ljava/lang/String;");
                mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
                mids$[mid_getValues_4c566485] = env->getMethodID(cls, "getValues", "(Ljava/util/Map;Lorg/apache/lucene/index/AtomicReaderContext;)Lorg/apache/lucene/queries/function/FunctionValues;");
                mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
                mids$[mid_name_14c7b5c5] = env->getMethodID(cls, "name", "()Ljava/lang/String;");
                mids$[mid_func_d2e34bb9] = env->getMethodID(cls, "func", "(I[Lorg/apache/lucene/queries/function/FunctionValues;)F");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            MultiFloatFunction::MultiFloatFunction(const JArray< ::org::apache::lucene::queries::function::ValueSource > & a0) : ::org::apache::lucene::queries::function::ValueSource(env->newObject(initializeClass, &mids$, mid_init$_ee9922ca, a0.this$)) {}

            void MultiFloatFunction::createWeight(const ::java::util::Map & a0, const ::org::apache::lucene::search::IndexSearcher & a1) const
            {
              env->callVoidMethod(this$, mids$[mid_createWeight_1b6125ba], a0.this$, a1.this$);
            }

            ::java::lang::String MultiFloatFunction::description() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_description_14c7b5c5]));
            }

            jboolean MultiFloatFunction::equals(const ::java::lang::Object & a0) const
            {
              return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
            }

            ::org::apache::lucene::queries::function::FunctionValues MultiFloatFunction::getValues(const ::java::util::Map & a0, const ::org::apache::lucene::index::AtomicReaderContext & a1) const
            {
              return ::org::apache::lucene::queries::function::FunctionValues(env->callObjectMethod(this$, mids$[mid_getValues_4c566485], a0.this$, a1.this$));
            }

            jint MultiFloatFunction::hashCode() const
            {
              return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {
            static PyObject *t_MultiFloatFunction_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_MultiFloatFunction_instance_(PyTypeObject *type, PyObject *arg);
            static int t_MultiFloatFunction_init_(t_MultiFloatFunction *self, PyObject *args, PyObject *kwds);
            static PyObject *t_MultiFloatFunction_createWeight(t_MultiFloatFunction *self, PyObject *args);
            static PyObject *t_MultiFloatFunction_description(t_MultiFloatFunction *self, PyObject *args);
            static PyObject *t_MultiFloatFunction_equals(t_MultiFloatFunction *self, PyObject *args);
            static PyObject *t_MultiFloatFunction_getValues(t_MultiFloatFunction *self, PyObject *args);
            static PyObject *t_MultiFloatFunction_hashCode(t_MultiFloatFunction *self, PyObject *args);

            static PyMethodDef t_MultiFloatFunction__methods_[] = {
              DECLARE_METHOD(t_MultiFloatFunction, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_MultiFloatFunction, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_MultiFloatFunction, createWeight, METH_VARARGS),
              DECLARE_METHOD(t_MultiFloatFunction, description, METH_VARARGS),
              DECLARE_METHOD(t_MultiFloatFunction, equals, METH_VARARGS),
              DECLARE_METHOD(t_MultiFloatFunction, getValues, METH_VARARGS),
              DECLARE_METHOD(t_MultiFloatFunction, hashCode, METH_VARARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(MultiFloatFunction, t_MultiFloatFunction, ::org::apache::lucene::queries::function::ValueSource, MultiFloatFunction, t_MultiFloatFunction_init_, 0, 0, 0, 0, 0);

            void t_MultiFloatFunction::install(PyObject *module)
            {
              installType(&PY_TYPE(MultiFloatFunction), module, "MultiFloatFunction", 0);
            }

            void t_MultiFloatFunction::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(MultiFloatFunction).tp_dict, "class_", make_descriptor(MultiFloatFunction::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(MultiFloatFunction).tp_dict, "wrapfn_", make_descriptor(t_MultiFloatFunction::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(MultiFloatFunction).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_MultiFloatFunction_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, MultiFloatFunction::initializeClass, 1)))
                return NULL;
              return t_MultiFloatFunction::wrap_Object(MultiFloatFunction(((t_MultiFloatFunction *) arg)->object.this$));
            }
            static PyObject *t_MultiFloatFunction_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, MultiFloatFunction::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_MultiFloatFunction_init_(t_MultiFloatFunction *self, PyObject *args, PyObject *kwds)
            {
              JArray< ::org::apache::lucene::queries::function::ValueSource > a0((jobject) NULL);
              MultiFloatFunction object((jobject) NULL);

              if (!parseArgs(args, "[k", ::org::apache::lucene::queries::function::ValueSource::initializeClass, &a0))
              {
                INT_CALL(object = MultiFloatFunction(a0));
                self->object = object;
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_MultiFloatFunction_createWeight(t_MultiFloatFunction *self, PyObject *args)
            {
              ::java::util::Map a0((jobject) NULL);
              PyTypeObject **p0;
              ::org::apache::lucene::search::IndexSearcher a1((jobject) NULL);

              if (!parseArgs(args, "Kk", ::java::util::Map::initializeClass, ::org::apache::lucene::search::IndexSearcher::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_, &a1))
              {
                OBJ_CALL(self->object.createWeight(a0, a1));
                Py_RETURN_NONE;
              }

              return callSuper(&PY_TYPE(MultiFloatFunction), (PyObject *) self, "createWeight", args, 2);
            }

            static PyObject *t_MultiFloatFunction_description(t_MultiFloatFunction *self, PyObject *args)
            {
              ::java::lang::String result((jobject) NULL);

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.description());
                return j2p(result);
              }

              return callSuper(&PY_TYPE(MultiFloatFunction), (PyObject *) self, "description", args, 2);
            }

            static PyObject *t_MultiFloatFunction_equals(t_MultiFloatFunction *self, PyObject *args)
            {
              ::java::lang::Object a0((jobject) NULL);
              jboolean result;

              if (!parseArgs(args, "o", &a0))
              {
                OBJ_CALL(result = self->object.equals(a0));
                Py_RETURN_BOOL(result);
              }

              return callSuper(&PY_TYPE(MultiFloatFunction), (PyObject *) self, "equals", args, 2);
            }

            static PyObject *t_MultiFloatFunction_getValues(t_MultiFloatFunction *self, PyObject *args)
            {
              ::java::util::Map a0((jobject) NULL);
              PyTypeObject **p0;
              ::org::apache::lucene::index::AtomicReaderContext a1((jobject) NULL);
              ::org::apache::lucene::queries::function::FunctionValues result((jobject) NULL);

              if (!parseArgs(args, "Kk", ::java::util::Map::initializeClass, ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_, &a1))
              {
                OBJ_CALL(result = self->object.getValues(a0, a1));
                return ::org::apache::lucene::queries::function::t_FunctionValues::wrap_Object(result);
              }

              return callSuper(&PY_TYPE(MultiFloatFunction), (PyObject *) self, "getValues", args, 2);
            }

            static PyObject *t_MultiFloatFunction_hashCode(t_MultiFloatFunction *self, PyObject *args)
            {
              jint result;

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.hashCode());
                return PyInt_FromLong((long) result);
              }

              return callSuper(&PY_TYPE(MultiFloatFunction), (PyObject *) self, "hashCode", args, 2);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/sandbox/queries/regex/RegexQueryCapable.h"
#include "org/apache/lucene/sandbox/queries/regex/RegexCapabilities.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace sandbox {
        namespace queries {
          namespace regex {

            ::java::lang::Class *RegexQueryCapable::class$ = NULL;
            jmethodID *RegexQueryCapable::mids$ = NULL;
            bool RegexQueryCapable::live$ = false;

            jclass RegexQueryCapable::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/sandbox/queries/regex/RegexQueryCapable");

                mids$ = new jmethodID[max_mid];
                mids$[mid_getRegexImplementation_814365f4] = env->getMethodID(cls, "getRegexImplementation", "()Lorg/apache/lucene/sandbox/queries/regex/RegexCapabilities;");
                mids$[mid_setRegexImplementation_06bf498d] = env->getMethodID(cls, "setRegexImplementation", "(Lorg/apache/lucene/sandbox/queries/regex/RegexCapabilities;)V");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            ::org::apache::lucene::sandbox::queries::regex::RegexCapabilities RegexQueryCapable::getRegexImplementation() const
            {
              return ::org::apache::lucene::sandbox::queries::regex::RegexCapabilities(env->callObjectMethod(this$, mids$[mid_getRegexImplementation_814365f4]));
            }

            void RegexQueryCapable::setRegexImplementation(const ::org::apache::lucene::sandbox::queries::regex::RegexCapabilities & a0) const
            {
              env->callVoidMethod(this$, mids$[mid_setRegexImplementation_06bf498d], a0.this$);
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace sandbox {
        namespace queries {
          namespace regex {
            static PyObject *t_RegexQueryCapable_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_RegexQueryCapable_instance_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_RegexQueryCapable_getRegexImplementation(t_RegexQueryCapable *self);
            static PyObject *t_RegexQueryCapable_setRegexImplementation(t_RegexQueryCapable *self, PyObject *arg);
            static PyObject *t_RegexQueryCapable_get__regexImplementation(t_RegexQueryCapable *self, void *data);
            static int t_RegexQueryCapable_set__regexImplementation(t_RegexQueryCapable *self, PyObject *arg, void *data);
            static PyGetSetDef t_RegexQueryCapable__fields_[] = {
              DECLARE_GETSET_FIELD(t_RegexQueryCapable, regexImplementation),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_RegexQueryCapable__methods_[] = {
              DECLARE_METHOD(t_RegexQueryCapable, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_RegexQueryCapable, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_RegexQueryCapable, getRegexImplementation, METH_NOARGS),
              DECLARE_METHOD(t_RegexQueryCapable, setRegexImplementation, METH_O),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(RegexQueryCapable, t_RegexQueryCapable, ::java::lang::Object, RegexQueryCapable, abstract_init, 0, 0, t_RegexQueryCapable__fields_, 0, 0);

            void t_RegexQueryCapable::install(PyObject *module)
            {
              installType(&PY_TYPE(RegexQueryCapable), module, "RegexQueryCapable", 0);
            }

            void t_RegexQueryCapable::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(RegexQueryCapable).tp_dict, "class_", make_descriptor(RegexQueryCapable::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(RegexQueryCapable).tp_dict, "wrapfn_", make_descriptor(t_RegexQueryCapable::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(RegexQueryCapable).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_RegexQueryCapable_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, RegexQueryCapable::initializeClass, 1)))
                return NULL;
              return t_RegexQueryCapable::wrap_Object(RegexQueryCapable(((t_RegexQueryCapable *) arg)->object.this$));
            }
            static PyObject *t_RegexQueryCapable_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, RegexQueryCapable::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static PyObject *t_RegexQueryCapable_getRegexImplementation(t_RegexQueryCapable *self)
            {
              ::org::apache::lucene::sandbox::queries::regex::RegexCapabilities result((jobject) NULL);
              OBJ_CALL(result = self->object.getRegexImplementation());
              return ::org::apache::lucene::sandbox::queries::regex::t_RegexCapabilities::wrap_Object(result);
            }

            static PyObject *t_RegexQueryCapable_setRegexImplementation(t_RegexQueryCapable *self, PyObject *arg)
            {
              ::org::apache::lucene::sandbox::queries::regex::RegexCapabilities a0((jobject) NULL);

              if (!parseArg(arg, "k", ::org::apache::lucene::sandbox::queries::regex::RegexCapabilities::initializeClass, &a0))
              {
                OBJ_CALL(self->object.setRegexImplementation(a0));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "setRegexImplementation", arg);
              return NULL;
            }

            static PyObject *t_RegexQueryCapable_get__regexImplementation(t_RegexQueryCapable *self, void *data)
            {
              ::org::apache::lucene::sandbox::queries::regex::RegexCapabilities value((jobject) NULL);
              OBJ_CALL(value = self->object.getRegexImplementation());
              return ::org::apache::lucene::sandbox::queries::regex::t_RegexCapabilities::wrap_Object(value);
            }
            static int t_RegexQueryCapable_set__regexImplementation(t_RegexQueryCapable *self, PyObject *arg, void *data)
            {
              {
                ::org::apache::lucene::sandbox::queries::regex::RegexCapabilities value((jobject) NULL);
                if (!parseArg(arg, "k", ::org::apache::lucene::sandbox::queries::regex::RegexCapabilities::initializeClass, &value))
                {
                  INT_CALL(self->object.setRegexImplementation(value));
                  return 0;
                }
              }
              PyErr_SetArgsError((PyObject *) self, "regexImplementation", arg);
              return -1;
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "java/util/AbstractMap.h"
#include "java/lang/Class.h"
#include "java/util/Map.h"
#include "java/lang/String.h"
#include "java/util/Map$Entry.h"
#include "java/util/Collection.h"
#include "java/util/Set.h"
#include "JArray.h"

namespace java {
  namespace util {

    ::java::lang::Class *AbstractMap::class$ = NULL;
    jmethodID *AbstractMap::mids$ = NULL;
    bool AbstractMap::live$ = false;

    jclass AbstractMap::initializeClass(bool getOnly)
    {
      if (getOnly)
        return (jclass) (live$ ? class$->this$ : NULL);
      if (class$ == NULL)
      {
        jclass cls = (jclass) env->findClass("java/util/AbstractMap");

        mids$ = new jmethodID[max_mid];
        mids$[mid_clear_54c6a166] = env->getMethodID(cls, "clear", "()V");
        mids$[mid_containsKey_290588e2] = env->getMethodID(cls, "containsKey", "(Ljava/lang/Object;)Z");
        mids$[mid_containsValue_290588e2] = env->getMethodID(cls, "containsValue", "(Ljava/lang/Object;)Z");
        mids$[mid_entrySet_03e99967] = env->getMethodID(cls, "entrySet", "()Ljava/util/Set;");
        mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
        mids$[mid_get_a932a95f] = env->getMethodID(cls, "get", "(Ljava/lang/Object;)Ljava/lang/Object;");
        mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
        mids$[mid_isEmpty_54c6a16a] = env->getMethodID(cls, "isEmpty", "()Z");
        mids$[mid_keySet_03e99967] = env->getMethodID(cls, "keySet", "()Ljava/util/Set;");
        mids$[mid_put_537d5bdf] = env->getMethodID(cls, "put", "(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;");
        mids$[mid_putAll_4c9e2b1c] = env->getMethodID(cls, "putAll", "(Ljava/util/Map;)V");
        mids$[mid_remove_a932a95f] = env->getMethodID(cls, "remove", "(Ljava/lang/Object;)Ljava/lang/Object;");
        mids$[mid_size_54c6a179] = env->getMethodID(cls, "size", "()I");
        mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");
        mids$[mid_values_2d2d7de4] = env->getMethodID(cls, "values", "()Ljava/util/Collection;");
        mids$[mid_clone_846352c3] = env->getMethodID(cls, "clone", "()Ljava/lang/Object;");

        class$ = (::java::lang::Class *) new JObject(cls);
        live$ = true;
      }
      return (jclass) class$->this$;
    }

    void AbstractMap::clear() const
    {
      env->callVoidMethod(this$, mids$[mid_clear_54c6a166]);
    }

    jboolean AbstractMap::containsKey(const ::java::lang::Object & a0) const
    {
      return env->callBooleanMethod(this$, mids$[mid_containsKey_290588e2], a0.this$);
    }

    jboolean AbstractMap::containsValue(const ::java::lang::Object & a0) const
    {
      return env->callBooleanMethod(this$, mids$[mid_containsValue_290588e2], a0.this$);
    }

    ::java::util::Set AbstractMap::entrySet() const
    {
      return ::java::util::Set(env->callObjectMethod(this$, mids$[mid_entrySet_03e99967]));
    }

    jboolean AbstractMap::equals(const ::java::lang::Object & a0) const
    {
      return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
    }

    ::java::lang::Object AbstractMap::get(const ::java::lang::Object & a0) const
    {
      return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_get_a932a95f], a0.this$));
    }

    jint AbstractMap::hashCode() const
    {
      return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
    }

    jboolean AbstractMap::isEmpty() const
    {
      return env->callBooleanMethod(this$, mids$[mid_isEmpty_54c6a16a]);
    }

    ::java::util::Set AbstractMap::keySet() const
    {
      return ::java::util::Set(env->callObjectMethod(this$, mids$[mid_keySet_03e99967]));
    }

    ::java::lang::Object AbstractMap::put(const ::java::lang::Object & a0, const ::java::lang::Object & a1) const
    {
      return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_put_537d5bdf], a0.this$, a1.this$));
    }

    void AbstractMap::putAll(const ::java::util::Map & a0) const
    {
      env->callVoidMethod(this$, mids$[mid_putAll_4c9e2b1c], a0.this$);
    }

    ::java::lang::Object AbstractMap::remove(const ::java::lang::Object & a0) const
    {
      return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_remove_a932a95f], a0.this$));
    }

    jint AbstractMap::size() const
    {
      return env->callIntMethod(this$, mids$[mid_size_54c6a179]);
    }

    ::java::lang::String AbstractMap::toString() const
    {
      return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
    }

    ::java::util::Collection AbstractMap::values() const
    {
      return ::java::util::Collection(env->callObjectMethod(this$, mids$[mid_values_2d2d7de4]));
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace java {
  namespace util {
    static PyObject *t_AbstractMap_cast_(PyTypeObject *type, PyObject *arg);
    static PyObject *t_AbstractMap_instance_(PyTypeObject *type, PyObject *arg);
    static PyObject *t_AbstractMap_of_(t_AbstractMap *self, PyObject *args);
    static PyObject *t_AbstractMap_clear(t_AbstractMap *self);
    static PyObject *t_AbstractMap_containsKey(t_AbstractMap *self, PyObject *arg);
    static PyObject *t_AbstractMap_containsValue(t_AbstractMap *self, PyObject *arg);
    static PyObject *t_AbstractMap_entrySet(t_AbstractMap *self);
    static PyObject *t_AbstractMap_equals(t_AbstractMap *self, PyObject *args);
    static PyObject *t_AbstractMap_get(t_AbstractMap *self, PyObject *arg);
    static PyObject *t_AbstractMap_hashCode(t_AbstractMap *self, PyObject *args);
    static PyObject *t_AbstractMap_isEmpty(t_AbstractMap *self);
    static PyObject *t_AbstractMap_keySet(t_AbstractMap *self);
    static PyObject *t_AbstractMap_put(t_AbstractMap *self, PyObject *args);
    static PyObject *t_AbstractMap_putAll(t_AbstractMap *self, PyObject *arg);
    static PyObject *t_AbstractMap_remove(t_AbstractMap *self, PyObject *arg);
    static PyObject *t_AbstractMap_size(t_AbstractMap *self);
    static PyObject *t_AbstractMap_toString(t_AbstractMap *self, PyObject *args);
    static PyObject *t_AbstractMap_values(t_AbstractMap *self);
    static PyObject *t_AbstractMap_get__empty(t_AbstractMap *self, void *data);
    static PyObject *t_AbstractMap_get__parameters_(t_AbstractMap *self, void *data);
    static PyGetSetDef t_AbstractMap__fields_[] = {
      DECLARE_GET_FIELD(t_AbstractMap, empty),
      DECLARE_GET_FIELD(t_AbstractMap, parameters_),
      { NULL, NULL, NULL, NULL, NULL }
    };

    static PyMethodDef t_AbstractMap__methods_[] = {
      DECLARE_METHOD(t_AbstractMap, cast_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_AbstractMap, instance_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_AbstractMap, of_, METH_VARARGS),
      DECLARE_METHOD(t_AbstractMap, clear, METH_NOARGS),
      DECLARE_METHOD(t_AbstractMap, containsKey, METH_O),
      DECLARE_METHOD(t_AbstractMap, containsValue, METH_O),
      DECLARE_METHOD(t_AbstractMap, entrySet, METH_NOARGS),
      DECLARE_METHOD(t_AbstractMap, equals, METH_VARARGS),
      DECLARE_METHOD(t_AbstractMap, get, METH_O),
      DECLARE_METHOD(t_AbstractMap, hashCode, METH_VARARGS),
      DECLARE_METHOD(t_AbstractMap, isEmpty, METH_NOARGS),
      DECLARE_METHOD(t_AbstractMap, keySet, METH_NOARGS),
      DECLARE_METHOD(t_AbstractMap, put, METH_VARARGS),
      DECLARE_METHOD(t_AbstractMap, putAll, METH_O),
      DECLARE_METHOD(t_AbstractMap, remove, METH_O),
      DECLARE_METHOD(t_AbstractMap, size, METH_NOARGS),
      DECLARE_METHOD(t_AbstractMap, toString, METH_VARARGS),
      DECLARE_METHOD(t_AbstractMap, values, METH_NOARGS),
      { NULL, NULL, 0, NULL }
    };

    DECLARE_TYPE(AbstractMap, t_AbstractMap, ::java::lang::Object, AbstractMap, abstract_init, 0, 0, t_AbstractMap__fields_, 0, 0);
    PyObject *t_AbstractMap::wrap_Object(const AbstractMap& object, PyTypeObject *p0, PyTypeObject *p1)
    {
      PyObject *obj = t_AbstractMap::wrap_Object(object);
      if (obj != NULL && obj != Py_None)
      {
        t_AbstractMap *self = (t_AbstractMap *) obj;
        self->parameters[0] = p0;
        self->parameters[1] = p1;
      }
      return obj;
    }

    PyObject *t_AbstractMap::wrap_jobject(const jobject& object, PyTypeObject *p0, PyTypeObject *p1)
    {
      PyObject *obj = t_AbstractMap::wrap_jobject(object);
      if (obj != NULL && obj != Py_None)
      {
        t_AbstractMap *self = (t_AbstractMap *) obj;
        self->parameters[0] = p0;
        self->parameters[1] = p1;
      }
      return obj;
    }

    void t_AbstractMap::install(PyObject *module)
    {
      installType(&PY_TYPE(AbstractMap), module, "AbstractMap", 0);
    }

    void t_AbstractMap::initialize(PyObject *module)
    {
      PyDict_SetItemString(PY_TYPE(AbstractMap).tp_dict, "class_", make_descriptor(AbstractMap::initializeClass, 1));
      PyDict_SetItemString(PY_TYPE(AbstractMap).tp_dict, "wrapfn_", make_descriptor(t_AbstractMap::wrap_jobject));
      PyDict_SetItemString(PY_TYPE(AbstractMap).tp_dict, "boxfn_", make_descriptor(boxObject));
    }

    static PyObject *t_AbstractMap_cast_(PyTypeObject *type, PyObject *arg)
    {
      if (!(arg = castCheck(arg, AbstractMap::initializeClass, 1)))
        return NULL;
      return t_AbstractMap::wrap_Object(AbstractMap(((t_AbstractMap *) arg)->object.this$));
    }
    static PyObject *t_AbstractMap_instance_(PyTypeObject *type, PyObject *arg)
    {
      if (!castCheck(arg, AbstractMap::initializeClass, 0))
        Py_RETURN_FALSE;
      Py_RETURN_TRUE;
    }

    static PyObject *t_AbstractMap_of_(t_AbstractMap *self, PyObject *args)
    {
      if (!parseArg(args, "T", 2, &(self->parameters)))
        Py_RETURN_SELF;
      return PyErr_SetArgsError((PyObject *) self, "of_", args);
    }

    static PyObject *t_AbstractMap_clear(t_AbstractMap *self)
    {
      OBJ_CALL(self->object.clear());
      Py_RETURN_NONE;
    }

    static PyObject *t_AbstractMap_containsKey(t_AbstractMap *self, PyObject *arg)
    {
      ::java::lang::Object a0((jobject) NULL);
      jboolean result;

      if (!parseArg(arg, "o", &a0))
      {
        OBJ_CALL(result = self->object.containsKey(a0));
        Py_RETURN_BOOL(result);
      }

      PyErr_SetArgsError((PyObject *) self, "containsKey", arg);
      return NULL;
    }

    static PyObject *t_AbstractMap_containsValue(t_AbstractMap *self, PyObject *arg)
    {
      ::java::lang::Object a0((jobject) NULL);
      jboolean result;

      if (!parseArg(arg, "o", &a0))
      {
        OBJ_CALL(result = self->object.containsValue(a0));
        Py_RETURN_BOOL(result);
      }

      PyErr_SetArgsError((PyObject *) self, "containsValue", arg);
      return NULL;
    }

    static PyObject *t_AbstractMap_entrySet(t_AbstractMap *self)
    {
      ::java::util::Set result((jobject) NULL);
      OBJ_CALL(result = self->object.entrySet());
      return ::java::util::t_Set::wrap_Object(result);
    }

    static PyObject *t_AbstractMap_equals(t_AbstractMap *self, PyObject *args)
    {
      ::java::lang::Object a0((jobject) NULL);
      jboolean result;

      if (!parseArgs(args, "o", &a0))
      {
        OBJ_CALL(result = self->object.equals(a0));
        Py_RETURN_BOOL(result);
      }

      return callSuper(&PY_TYPE(AbstractMap), (PyObject *) self, "equals", args, 2);
    }

    static PyObject *t_AbstractMap_get(t_AbstractMap *self, PyObject *arg)
    {
      ::java::lang::Object a0((jobject) NULL);
      ::java::lang::Object result((jobject) NULL);

      if (!parseArg(arg, "o", &a0))
      {
        OBJ_CALL(result = self->object.get(a0));
        return self->parameters[1] != NULL ? wrapType(self->parameters[1], result.this$) : ::java::lang::t_Object::wrap_Object(result);
      }

      PyErr_SetArgsError((PyObject *) self, "get", arg);
      return NULL;
    }

    static PyObject *t_AbstractMap_hashCode(t_AbstractMap *self, PyObject *args)
    {
      jint result;

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.hashCode());
        return PyInt_FromLong((long) result);
      }

      return callSuper(&PY_TYPE(AbstractMap), (PyObject *) self, "hashCode", args, 2);
    }

    static PyObject *t_AbstractMap_isEmpty(t_AbstractMap *self)
    {
      jboolean result;
      OBJ_CALL(result = self->object.isEmpty());
      Py_RETURN_BOOL(result);
    }

    static PyObject *t_AbstractMap_keySet(t_AbstractMap *self)
    {
      ::java::util::Set result((jobject) NULL);
      OBJ_CALL(result = self->object.keySet());
      return ::java::util::t_Set::wrap_Object(result, self->parameters[0]);
    }

    static PyObject *t_AbstractMap_put(t_AbstractMap *self, PyObject *args)
    {
      ::java::lang::Object a0((jobject) NULL);
      ::java::lang::Object a1((jobject) NULL);
      ::java::lang::Object result((jobject) NULL);

      if (!parseArgs(args, "OO", self->parameters[0], self->parameters[1], &a0, &a1))
      {
        OBJ_CALL(result = self->object.put(a0, a1));
        return self->parameters[1] != NULL ? wrapType(self->parameters[1], result.this$) : ::java::lang::t_Object::wrap_Object(result);
      }

      PyErr_SetArgsError((PyObject *) self, "put", args);
      return NULL;
    }

    static PyObject *t_AbstractMap_putAll(t_AbstractMap *self, PyObject *arg)
    {
      ::java::util::Map a0((jobject) NULL);
      PyTypeObject **p0;

      if (!parseArg(arg, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
      {
        OBJ_CALL(self->object.putAll(a0));
        Py_RETURN_NONE;
      }

      PyErr_SetArgsError((PyObject *) self, "putAll", arg);
      return NULL;
    }

    static PyObject *t_AbstractMap_remove(t_AbstractMap *self, PyObject *arg)
    {
      ::java::lang::Object a0((jobject) NULL);
      ::java::lang::Object result((jobject) NULL);

      if (!parseArg(arg, "o", &a0))
      {
        OBJ_CALL(result = self->object.remove(a0));
        return self->parameters[1] != NULL ? wrapType(self->parameters[1], result.this$) : ::java::lang::t_Object::wrap_Object(result);
      }

      PyErr_SetArgsError((PyObject *) self, "remove", arg);
      return NULL;
    }

    static PyObject *t_AbstractMap_size(t_AbstractMap *self)
    {
      jint result;
      OBJ_CALL(result = self->object.size());
      return PyInt_FromLong((long) result);
    }

    static PyObject *t_AbstractMap_toString(t_AbstractMap *self, PyObject *args)
    {
      ::java::lang::String result((jobject) NULL);

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.toString());
        return j2p(result);
      }

      return callSuper(&PY_TYPE(AbstractMap), (PyObject *) self, "toString", args, 2);
    }

    static PyObject *t_AbstractMap_values(t_AbstractMap *self)
    {
      ::java::util::Collection result((jobject) NULL);
      OBJ_CALL(result = self->object.values());
      return ::java::util::t_Collection::wrap_Object(result, self->parameters[1]);
    }
    static PyObject *t_AbstractMap_get__parameters_(t_AbstractMap *self, void *data)
    {
      return typeParameters(self->parameters, sizeof(self->parameters));
    }

    static PyObject *t_AbstractMap_get__empty(t_AbstractMap *self, void *data)
    {
      jboolean value;
      OBJ_CALL(value = self->object.isEmpty());
      Py_RETURN_BOOL(value);
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "java/lang/IndexOutOfBoundsException.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace java {
  namespace lang {

    ::java::lang::Class *IndexOutOfBoundsException::class$ = NULL;
    jmethodID *IndexOutOfBoundsException::mids$ = NULL;
    bool IndexOutOfBoundsException::live$ = false;

    jclass IndexOutOfBoundsException::initializeClass(bool getOnly)
    {
      if (getOnly)
        return (jclass) (live$ ? class$->this$ : NULL);
      if (class$ == NULL)
      {
        jclass cls = (jclass) env->findClass("java/lang/IndexOutOfBoundsException");

        mids$ = new jmethodID[max_mid];
        mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
        mids$[mid_init$_5fdc3f48] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;)V");

        class$ = (::java::lang::Class *) new JObject(cls);
        live$ = true;
      }
      return (jclass) class$->this$;
    }

    IndexOutOfBoundsException::IndexOutOfBoundsException() : ::java::lang::RuntimeException(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

    IndexOutOfBoundsException::IndexOutOfBoundsException(const ::java::lang::String & a0) : ::java::lang::RuntimeException(env->newObject(initializeClass, &mids$, mid_init$_5fdc3f48, a0.this$)) {}
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace java {
  namespace lang {
    static PyObject *t_IndexOutOfBoundsException_cast_(PyTypeObject *type, PyObject *arg);
    static PyObject *t_IndexOutOfBoundsException_instance_(PyTypeObject *type, PyObject *arg);
    static int t_IndexOutOfBoundsException_init_(t_IndexOutOfBoundsException *self, PyObject *args, PyObject *kwds);

    static PyMethodDef t_IndexOutOfBoundsException__methods_[] = {
      DECLARE_METHOD(t_IndexOutOfBoundsException, cast_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_IndexOutOfBoundsException, instance_, METH_O | METH_CLASS),
      { NULL, NULL, 0, NULL }
    };

    DECLARE_TYPE(IndexOutOfBoundsException, t_IndexOutOfBoundsException, ::java::lang::RuntimeException, IndexOutOfBoundsException, t_IndexOutOfBoundsException_init_, 0, 0, 0, 0, 0);

    void t_IndexOutOfBoundsException::install(PyObject *module)
    {
      installType(&PY_TYPE(IndexOutOfBoundsException), module, "IndexOutOfBoundsException", 0);
    }

    void t_IndexOutOfBoundsException::initialize(PyObject *module)
    {
      PyDict_SetItemString(PY_TYPE(IndexOutOfBoundsException).tp_dict, "class_", make_descriptor(IndexOutOfBoundsException::initializeClass, 1));
      PyDict_SetItemString(PY_TYPE(IndexOutOfBoundsException).tp_dict, "wrapfn_", make_descriptor(t_IndexOutOfBoundsException::wrap_jobject));
      PyDict_SetItemString(PY_TYPE(IndexOutOfBoundsException).tp_dict, "boxfn_", make_descriptor(boxObject));
    }

    static PyObject *t_IndexOutOfBoundsException_cast_(PyTypeObject *type, PyObject *arg)
    {
      if (!(arg = castCheck(arg, IndexOutOfBoundsException::initializeClass, 1)))
        return NULL;
      return t_IndexOutOfBoundsException::wrap_Object(IndexOutOfBoundsException(((t_IndexOutOfBoundsException *) arg)->object.this$));
    }
    static PyObject *t_IndexOutOfBoundsException_instance_(PyTypeObject *type, PyObject *arg)
    {
      if (!castCheck(arg, IndexOutOfBoundsException::initializeClass, 0))
        Py_RETURN_FALSE;
      Py_RETURN_TRUE;
    }

    static int t_IndexOutOfBoundsException_init_(t_IndexOutOfBoundsException *self, PyObject *args, PyObject *kwds)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 0:
        {
          IndexOutOfBoundsException object((jobject) NULL);

          INT_CALL(object = IndexOutOfBoundsException());
          self->object = object;
          break;
        }
        goto err;
       case 1:
        {
          ::java::lang::String a0((jobject) NULL);
          IndexOutOfBoundsException object((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            INT_CALL(object = IndexOutOfBoundsException(a0));
            self->object = object;
            break;
          }
        }
       default:
       err:
        PyErr_SetArgsError((PyObject *) self, "__init__", args);
        return -1;
      }

      return 0;
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/util/CharArrayMap$EntrySet.h"
#include "org/apache/lucene/analysis/util/CharArrayMap$EntryIterator.h"
#include "java/lang/Object.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace util {

          ::java::lang::Class *CharArrayMap$EntrySet::class$ = NULL;
          jmethodID *CharArrayMap$EntrySet::mids$ = NULL;
          bool CharArrayMap$EntrySet::live$ = false;

          jclass CharArrayMap$EntrySet::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/util/CharArrayMap$EntrySet");

              mids$ = new jmethodID[max_mid];
              mids$[mid_clear_54c6a166] = env->getMethodID(cls, "clear", "()V");
              mids$[mid_contains_290588e2] = env->getMethodID(cls, "contains", "(Ljava/lang/Object;)Z");
              mids$[mid_iterator_6e80333a] = env->getMethodID(cls, "iterator", "()Lorg/apache/lucene/analysis/util/CharArrayMap$EntryIterator;");
              mids$[mid_remove_290588e2] = env->getMethodID(cls, "remove", "(Ljava/lang/Object;)Z");
              mids$[mid_size_54c6a179] = env->getMethodID(cls, "size", "()I");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          void CharArrayMap$EntrySet::clear() const
          {
            env->callVoidMethod(this$, mids$[mid_clear_54c6a166]);
          }

          jboolean CharArrayMap$EntrySet::contains(const ::java::lang::Object & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_contains_290588e2], a0.this$);
          }

          ::org::apache::lucene::analysis::util::CharArrayMap$EntryIterator CharArrayMap$EntrySet::iterator() const
          {
            return ::org::apache::lucene::analysis::util::CharArrayMap$EntryIterator(env->callObjectMethod(this$, mids$[mid_iterator_6e80333a]));
          }

          jboolean CharArrayMap$EntrySet::remove(const ::java::lang::Object & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_remove_290588e2], a0.this$);
          }

          jint CharArrayMap$EntrySet::size() const
          {
            return env->callIntMethod(this$, mids$[mid_size_54c6a179]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace util {
          static PyObject *t_CharArrayMap$EntrySet_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_CharArrayMap$EntrySet_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_CharArrayMap$EntrySet_of_(t_CharArrayMap$EntrySet *self, PyObject *args);
          static PyObject *t_CharArrayMap$EntrySet_clear(t_CharArrayMap$EntrySet *self, PyObject *args);
          static PyObject *t_CharArrayMap$EntrySet_contains(t_CharArrayMap$EntrySet *self, PyObject *args);
          static PyObject *t_CharArrayMap$EntrySet_iterator(t_CharArrayMap$EntrySet *self, PyObject *args);
          static PyObject *t_CharArrayMap$EntrySet_remove(t_CharArrayMap$EntrySet *self, PyObject *args);
          static PyObject *t_CharArrayMap$EntrySet_size(t_CharArrayMap$EntrySet *self, PyObject *args);
          static PyObject *t_CharArrayMap$EntrySet_get__parameters_(t_CharArrayMap$EntrySet *self, void *data);
          static PyGetSetDef t_CharArrayMap$EntrySet__fields_[] = {
            DECLARE_GET_FIELD(t_CharArrayMap$EntrySet, parameters_),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_CharArrayMap$EntrySet__methods_[] = {
            DECLARE_METHOD(t_CharArrayMap$EntrySet, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CharArrayMap$EntrySet, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CharArrayMap$EntrySet, of_, METH_VARARGS),
            DECLARE_METHOD(t_CharArrayMap$EntrySet, clear, METH_VARARGS),
            DECLARE_METHOD(t_CharArrayMap$EntrySet, contains, METH_VARARGS),
            DECLARE_METHOD(t_CharArrayMap$EntrySet, iterator, METH_VARARGS),
            DECLARE_METHOD(t_CharArrayMap$EntrySet, remove, METH_VARARGS),
            DECLARE_METHOD(t_CharArrayMap$EntrySet, size, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(CharArrayMap$EntrySet, t_CharArrayMap$EntrySet, ::java::util::AbstractSet, CharArrayMap$EntrySet, abstract_init, ((PyObject *(*)(t_CharArrayMap$EntrySet *)) get_generic_iterator< t_CharArrayMap$EntrySet >), 0, t_CharArrayMap$EntrySet__fields_, 0, 0);
          PyObject *t_CharArrayMap$EntrySet::wrap_Object(const CharArrayMap$EntrySet& object, PyTypeObject *p0)
          {
            PyObject *obj = t_CharArrayMap$EntrySet::wrap_Object(object);
            if (obj != NULL && obj != Py_None)
            {
              t_CharArrayMap$EntrySet *self = (t_CharArrayMap$EntrySet *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          PyObject *t_CharArrayMap$EntrySet::wrap_jobject(const jobject& object, PyTypeObject *p0)
          {
            PyObject *obj = t_CharArrayMap$EntrySet::wrap_jobject(object);
            if (obj != NULL && obj != Py_None)
            {
              t_CharArrayMap$EntrySet *self = (t_CharArrayMap$EntrySet *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          void t_CharArrayMap$EntrySet::install(PyObject *module)
          {
            installType(&PY_TYPE(CharArrayMap$EntrySet), module, "CharArrayMap$EntrySet", 0);
          }

          void t_CharArrayMap$EntrySet::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(CharArrayMap$EntrySet).tp_dict, "class_", make_descriptor(CharArrayMap$EntrySet::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(CharArrayMap$EntrySet).tp_dict, "wrapfn_", make_descriptor(t_CharArrayMap$EntrySet::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(CharArrayMap$EntrySet).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_CharArrayMap$EntrySet_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, CharArrayMap$EntrySet::initializeClass, 1)))
              return NULL;
            return t_CharArrayMap$EntrySet::wrap_Object(CharArrayMap$EntrySet(((t_CharArrayMap$EntrySet *) arg)->object.this$));
          }
          static PyObject *t_CharArrayMap$EntrySet_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, CharArrayMap$EntrySet::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_CharArrayMap$EntrySet_of_(t_CharArrayMap$EntrySet *self, PyObject *args)
          {
            if (!parseArg(args, "T", 1, &(self->parameters)))
              Py_RETURN_SELF;
            return PyErr_SetArgsError((PyObject *) self, "of_", args);
          }

          static PyObject *t_CharArrayMap$EntrySet_clear(t_CharArrayMap$EntrySet *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.clear());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(CharArrayMap$EntrySet), (PyObject *) self, "clear", args, 2);
          }

          static PyObject *t_CharArrayMap$EntrySet_contains(t_CharArrayMap$EntrySet *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            jboolean result;

            if (!parseArgs(args, "o", &a0))
            {
              OBJ_CALL(result = self->object.contains(a0));
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(CharArrayMap$EntrySet), (PyObject *) self, "contains", args, 2);
          }

          static PyObject *t_CharArrayMap$EntrySet_iterator(t_CharArrayMap$EntrySet *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::util::CharArrayMap$EntryIterator result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.iterator());
              return ::org::apache::lucene::analysis::util::t_CharArrayMap$EntryIterator::wrap_Object(result, self->parameters[0]);
            }

            return callSuper(&PY_TYPE(CharArrayMap$EntrySet), (PyObject *) self, "iterator", args, 2);
          }

          static PyObject *t_CharArrayMap$EntrySet_remove(t_CharArrayMap$EntrySet *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            jboolean result;

            if (!parseArgs(args, "o", &a0))
            {
              OBJ_CALL(result = self->object.remove(a0));
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(CharArrayMap$EntrySet), (PyObject *) self, "remove", args, 2);
          }

          static PyObject *t_CharArrayMap$EntrySet_size(t_CharArrayMap$EntrySet *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.size());
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(CharArrayMap$EntrySet), (PyObject *) self, "size", args, 2);
          }
          static PyObject *t_CharArrayMap$EntrySet_get__parameters_(t_CharArrayMap$EntrySet *self, void *data)
          {
            return typeParameters(self->parameters, sizeof(self->parameters));
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/document/StoredField.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "org/apache/lucene/document/FieldType.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace document {

        ::java::lang::Class *StoredField::class$ = NULL;
        jmethodID *StoredField::mids$ = NULL;
        bool StoredField::live$ = false;
        ::org::apache::lucene::document::FieldType *StoredField::TYPE = NULL;

        jclass StoredField::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/document/StoredField");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_6e53ccc6] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;I)V");
            mids$[mid_init$_f0649ce1] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;F)V");
            mids$[mid_init$_4372eed5] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;J)V");
            mids$[mid_init$_493fce5f] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;D)V");
            mids$[mid_init$_97e62b21] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;[B)V");
            mids$[mid_init$_43cce44e] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Lorg/apache/lucene/util/BytesRef;)V");
            mids$[mid_init$_4a264742] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Ljava/lang/String;)V");
            mids$[mid_init$_eab5cd19] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;[BII)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            cls = (jclass) class$->this$;

            TYPE = new ::org::apache::lucene::document::FieldType(env->getStaticObjectField(cls, "TYPE", "Lorg/apache/lucene/document/FieldType;"));
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        StoredField::StoredField(const ::java::lang::String & a0, jint a1) : ::org::apache::lucene::document::Field(env->newObject(initializeClass, &mids$, mid_init$_6e53ccc6, a0.this$, a1)) {}

        StoredField::StoredField(const ::java::lang::String & a0, jfloat a1) : ::org::apache::lucene::document::Field(env->newObject(initializeClass, &mids$, mid_init$_f0649ce1, a0.this$, a1)) {}

        StoredField::StoredField(const ::java::lang::String & a0, jlong a1) : ::org::apache::lucene::document::Field(env->newObject(initializeClass, &mids$, mid_init$_4372eed5, a0.this$, a1)) {}

        StoredField::StoredField(const ::java::lang::String & a0, jdouble a1) : ::org::apache::lucene::document::Field(env->newObject(initializeClass, &mids$, mid_init$_493fce5f, a0.this$, a1)) {}

        StoredField::StoredField(const ::java::lang::String & a0, const JArray< jbyte > & a1) : ::org::apache::lucene::document::Field(env->newObject(initializeClass, &mids$, mid_init$_97e62b21, a0.this$, a1.this$)) {}

        StoredField::StoredField(const ::java::lang::String & a0, const ::org::apache::lucene::util::BytesRef & a1) : ::org::apache::lucene::document::Field(env->newObject(initializeClass, &mids$, mid_init$_43cce44e, a0.this$, a1.this$)) {}

        StoredField::StoredField(const ::java::lang::String & a0, const ::java::lang::String & a1) : ::org::apache::lucene::document::Field(env->newObject(initializeClass, &mids$, mid_init$_4a264742, a0.this$, a1.this$)) {}

        StoredField::StoredField(const ::java::lang::String & a0, const JArray< jbyte > & a1, jint a2, jint a3) : ::org::apache::lucene::document::Field(env->newObject(initializeClass, &mids$, mid_init$_eab5cd19, a0.this$, a1.this$, a2, a3)) {}
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace document {
        static PyObject *t_StoredField_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_StoredField_instance_(PyTypeObject *type, PyObject *arg);
        static int t_StoredField_init_(t_StoredField *self, PyObject *args, PyObject *kwds);

        static PyMethodDef t_StoredField__methods_[] = {
          DECLARE_METHOD(t_StoredField, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_StoredField, instance_, METH_O | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(StoredField, t_StoredField, ::org::apache::lucene::document::Field, StoredField, t_StoredField_init_, 0, 0, 0, 0, 0);

        void t_StoredField::install(PyObject *module)
        {
          installType(&PY_TYPE(StoredField), module, "StoredField", 0);
        }

        void t_StoredField::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(StoredField).tp_dict, "class_", make_descriptor(StoredField::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(StoredField).tp_dict, "wrapfn_", make_descriptor(t_StoredField::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(StoredField).tp_dict, "boxfn_", make_descriptor(boxObject));
          env->getClass(StoredField::initializeClass);
          PyDict_SetItemString(PY_TYPE(StoredField).tp_dict, "TYPE", make_descriptor(::org::apache::lucene::document::t_FieldType::wrap_Object(*StoredField::TYPE)));
        }

        static PyObject *t_StoredField_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, StoredField::initializeClass, 1)))
            return NULL;
          return t_StoredField::wrap_Object(StoredField(((t_StoredField *) arg)->object.this$));
        }
        static PyObject *t_StoredField_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, StoredField::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_StoredField_init_(t_StoredField *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 2:
            {
              ::java::lang::String a0((jobject) NULL);
              jint a1;
              StoredField object((jobject) NULL);

              if (!parseArgs(args, "sI", &a0, &a1))
              {
                INT_CALL(object = StoredField(a0, a1));
                self->object = object;
                break;
              }
            }
            {
              ::java::lang::String a0((jobject) NULL);
              jfloat a1;
              StoredField object((jobject) NULL);

              if (!parseArgs(args, "sF", &a0, &a1))
              {
                INT_CALL(object = StoredField(a0, a1));
                self->object = object;
                break;
              }
            }
            {
              ::java::lang::String a0((jobject) NULL);
              jlong a1;
              StoredField object((jobject) NULL);

              if (!parseArgs(args, "sJ", &a0, &a1))
              {
                INT_CALL(object = StoredField(a0, a1));
                self->object = object;
                break;
              }
            }
            {
              ::java::lang::String a0((jobject) NULL);
              jdouble a1;
              StoredField object((jobject) NULL);

              if (!parseArgs(args, "sD", &a0, &a1))
              {
                INT_CALL(object = StoredField(a0, a1));
                self->object = object;
                break;
              }
            }
            {
              ::java::lang::String a0((jobject) NULL);
              JArray< jbyte > a1((jobject) NULL);
              StoredField object((jobject) NULL);

              if (!parseArgs(args, "s[B", &a0, &a1))
              {
                INT_CALL(object = StoredField(a0, a1));
                self->object = object;
                break;
              }
            }
            {
              ::java::lang::String a0((jobject) NULL);
              ::org::apache::lucene::util::BytesRef a1((jobject) NULL);
              StoredField object((jobject) NULL);

              if (!parseArgs(args, "sk", ::org::apache::lucene::util::BytesRef::initializeClass, &a0, &a1))
              {
                INT_CALL(object = StoredField(a0, a1));
                self->object = object;
                break;
              }
            }
            {
              ::java::lang::String a0((jobject) NULL);
              ::java::lang::String a1((jobject) NULL);
              StoredField object((jobject) NULL);

              if (!parseArgs(args, "ss", &a0, &a1))
              {
                INT_CALL(object = StoredField(a0, a1));
                self->object = object;
                break;
              }
            }
            goto err;
           case 4:
            {
              ::java::lang::String a0((jobject) NULL);
              JArray< jbyte > a1((jobject) NULL);
              jint a2;
              jint a3;
              StoredField object((jobject) NULL);

              if (!parseArgs(args, "s[BII", &a0, &a1, &a2, &a3))
              {
                INT_CALL(object = StoredField(a0, a1, a2, a3));
                self->object = object;
                break;
              }
            }
           default:
           err:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/document/DateTools.h"
#include "java/lang/String.h"
#include "java/util/Date.h"
#include "org/apache/lucene/document/DateTools$Resolution.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace document {

        ::java::lang::Class *DateTools::class$ = NULL;
        jmethodID *DateTools::mids$ = NULL;
        bool DateTools::live$ = false;

        jclass DateTools::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/document/DateTools");

            mids$ = new jmethodID[max_mid];
            mids$[mid_dateToString_ca526ca6] = env->getStaticMethodID(cls, "dateToString", "(Ljava/util/Date;Lorg/apache/lucene/document/DateTools$Resolution;)Ljava/lang/String;");
            mids$[mid_round_d582ee11] = env->getStaticMethodID(cls, "round", "(Ljava/util/Date;Lorg/apache/lucene/document/DateTools$Resolution;)Ljava/util/Date;");
            mids$[mid_round_ebfd1017] = env->getStaticMethodID(cls, "round", "(JLorg/apache/lucene/document/DateTools$Resolution;)J");
            mids$[mid_stringToDate_e1ca31a4] = env->getStaticMethodID(cls, "stringToDate", "(Ljava/lang/String;)Ljava/util/Date;");
            mids$[mid_stringToTime_5fdc3f54] = env->getStaticMethodID(cls, "stringToTime", "(Ljava/lang/String;)J");
            mids$[mid_timeToString_3ccc1506] = env->getStaticMethodID(cls, "timeToString", "(JLorg/apache/lucene/document/DateTools$Resolution;)Ljava/lang/String;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        ::java::lang::String DateTools::dateToString(const ::java::util::Date & a0, const ::org::apache::lucene::document::DateTools$Resolution & a1)
        {
          jclass cls = env->getClass(initializeClass);
          return ::java::lang::String(env->callStaticObjectMethod(cls, mids$[mid_dateToString_ca526ca6], a0.this$, a1.this$));
        }

        ::java::util::Date DateTools::round(const ::java::util::Date & a0, const ::org::apache::lucene::document::DateTools$Resolution & a1)
        {
          jclass cls = env->getClass(initializeClass);
          return ::java::util::Date(env->callStaticObjectMethod(cls, mids$[mid_round_d582ee11], a0.this$, a1.this$));
        }

        jlong DateTools::round(jlong a0, const ::org::apache::lucene::document::DateTools$Resolution & a1)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticLongMethod(cls, mids$[mid_round_ebfd1017], a0, a1.this$);
        }

        ::java::util::Date DateTools::stringToDate(const ::java::lang::String & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return ::java::util::Date(env->callStaticObjectMethod(cls, mids$[mid_stringToDate_e1ca31a4], a0.this$));
        }

        jlong DateTools::stringToTime(const ::java::lang::String & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticLongMethod(cls, mids$[mid_stringToTime_5fdc3f54], a0.this$);
        }

        ::java::lang::String DateTools::timeToString(jlong a0, const ::org::apache::lucene::document::DateTools$Resolution & a1)
        {
          jclass cls = env->getClass(initializeClass);
          return ::java::lang::String(env->callStaticObjectMethod(cls, mids$[mid_timeToString_3ccc1506], a0, a1.this$));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace document {
        static PyObject *t_DateTools_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_DateTools_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_DateTools_dateToString(PyTypeObject *type, PyObject *args);
        static PyObject *t_DateTools_round(PyTypeObject *type, PyObject *args);
        static PyObject *t_DateTools_stringToDate(PyTypeObject *type, PyObject *arg);
        static PyObject *t_DateTools_stringToTime(PyTypeObject *type, PyObject *arg);
        static PyObject *t_DateTools_timeToString(PyTypeObject *type, PyObject *args);

        static PyMethodDef t_DateTools__methods_[] = {
          DECLARE_METHOD(t_DateTools, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_DateTools, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_DateTools, dateToString, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_DateTools, round, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_DateTools, stringToDate, METH_O | METH_CLASS),
          DECLARE_METHOD(t_DateTools, stringToTime, METH_O | METH_CLASS),
          DECLARE_METHOD(t_DateTools, timeToString, METH_VARARGS | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(DateTools, t_DateTools, ::java::lang::Object, DateTools, abstract_init, 0, 0, 0, 0, 0);

        void t_DateTools::install(PyObject *module)
        {
          installType(&PY_TYPE(DateTools), module, "DateTools", 0);
          PyDict_SetItemString(PY_TYPE(DateTools).tp_dict, "Resolution", make_descriptor(&PY_TYPE(DateTools$Resolution)));
        }

        void t_DateTools::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(DateTools).tp_dict, "class_", make_descriptor(DateTools::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(DateTools).tp_dict, "wrapfn_", make_descriptor(t_DateTools::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(DateTools).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_DateTools_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, DateTools::initializeClass, 1)))
            return NULL;
          return t_DateTools::wrap_Object(DateTools(((t_DateTools *) arg)->object.this$));
        }
        static PyObject *t_DateTools_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, DateTools::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_DateTools_dateToString(PyTypeObject *type, PyObject *args)
        {
          ::java::util::Date a0((jobject) NULL);
          ::org::apache::lucene::document::DateTools$Resolution a1((jobject) NULL);
          PyTypeObject **p1;
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, "kK", ::java::util::Date::initializeClass, ::org::apache::lucene::document::DateTools$Resolution::initializeClass, &a0, &a1, &p1, ::org::apache::lucene::document::t_DateTools$Resolution::parameters_))
          {
            OBJ_CALL(result = ::org::apache::lucene::document::DateTools::dateToString(a0, a1));
            return j2p(result);
          }

          PyErr_SetArgsError(type, "dateToString", args);
          return NULL;
        }

        static PyObject *t_DateTools_round(PyTypeObject *type, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 2:
            {
              ::java::util::Date a0((jobject) NULL);
              ::org::apache::lucene::document::DateTools$Resolution a1((jobject) NULL);
              PyTypeObject **p1;
              ::java::util::Date result((jobject) NULL);

              if (!parseArgs(args, "kK", ::java::util::Date::initializeClass, ::org::apache::lucene::document::DateTools$Resolution::initializeClass, &a0, &a1, &p1, ::org::apache::lucene::document::t_DateTools$Resolution::parameters_))
              {
                OBJ_CALL(result = ::org::apache::lucene::document::DateTools::round(a0, a1));
                return ::java::util::t_Date::wrap_Object(result);
              }
            }
            {
              jlong a0;
              ::org::apache::lucene::document::DateTools$Resolution a1((jobject) NULL);
              PyTypeObject **p1;
              jlong result;

              if (!parseArgs(args, "JK", ::org::apache::lucene::document::DateTools$Resolution::initializeClass, &a0, &a1, &p1, ::org::apache::lucene::document::t_DateTools$Resolution::parameters_))
              {
                OBJ_CALL(result = ::org::apache::lucene::document::DateTools::round(a0, a1));
                return PyLong_FromLongLong((PY_LONG_LONG) result);
              }
            }
          }

          PyErr_SetArgsError(type, "round", args);
          return NULL;
        }

        static PyObject *t_DateTools_stringToDate(PyTypeObject *type, PyObject *arg)
        {
          ::java::lang::String a0((jobject) NULL);
          ::java::util::Date result((jobject) NULL);

          if (!parseArg(arg, "s", &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::document::DateTools::stringToDate(a0));
            return ::java::util::t_Date::wrap_Object(result);
          }

          PyErr_SetArgsError(type, "stringToDate", arg);
          return NULL;
        }

        static PyObject *t_DateTools_stringToTime(PyTypeObject *type, PyObject *arg)
        {
          ::java::lang::String a0((jobject) NULL);
          jlong result;

          if (!parseArg(arg, "s", &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::document::DateTools::stringToTime(a0));
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          PyErr_SetArgsError(type, "stringToTime", arg);
          return NULL;
        }

        static PyObject *t_DateTools_timeToString(PyTypeObject *type, PyObject *args)
        {
          jlong a0;
          ::org::apache::lucene::document::DateTools$Resolution a1((jobject) NULL);
          PyTypeObject **p1;
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, "JK", ::org::apache::lucene::document::DateTools$Resolution::initializeClass, &a0, &a1, &p1, ::org::apache::lucene::document::t_DateTools$Resolution::parameters_))
          {
            OBJ_CALL(result = ::org::apache::lucene::document::DateTools::timeToString(a0, a1));
            return j2p(result);
          }

          PyErr_SetArgsError(type, "timeToString", args);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/store/CompoundFileDirectory$FileEntry.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {

        ::java::lang::Class *CompoundFileDirectory$FileEntry::class$ = NULL;
        jmethodID *CompoundFileDirectory$FileEntry::mids$ = NULL;
        bool CompoundFileDirectory$FileEntry::live$ = false;

        jclass CompoundFileDirectory$FileEntry::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/store/CompoundFileDirectory$FileEntry");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        CompoundFileDirectory$FileEntry::CompoundFileDirectory$FileEntry() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {
        static PyObject *t_CompoundFileDirectory$FileEntry_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_CompoundFileDirectory$FileEntry_instance_(PyTypeObject *type, PyObject *arg);
        static int t_CompoundFileDirectory$FileEntry_init_(t_CompoundFileDirectory$FileEntry *self, PyObject *args, PyObject *kwds);

        static PyMethodDef t_CompoundFileDirectory$FileEntry__methods_[] = {
          DECLARE_METHOD(t_CompoundFileDirectory$FileEntry, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_CompoundFileDirectory$FileEntry, instance_, METH_O | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(CompoundFileDirectory$FileEntry, t_CompoundFileDirectory$FileEntry, ::java::lang::Object, CompoundFileDirectory$FileEntry, t_CompoundFileDirectory$FileEntry_init_, 0, 0, 0, 0, 0);

        void t_CompoundFileDirectory$FileEntry::install(PyObject *module)
        {
          installType(&PY_TYPE(CompoundFileDirectory$FileEntry), module, "CompoundFileDirectory$FileEntry", 0);
        }

        void t_CompoundFileDirectory$FileEntry::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(CompoundFileDirectory$FileEntry).tp_dict, "class_", make_descriptor(CompoundFileDirectory$FileEntry::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(CompoundFileDirectory$FileEntry).tp_dict, "wrapfn_", make_descriptor(t_CompoundFileDirectory$FileEntry::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(CompoundFileDirectory$FileEntry).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_CompoundFileDirectory$FileEntry_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, CompoundFileDirectory$FileEntry::initializeClass, 1)))
            return NULL;
          return t_CompoundFileDirectory$FileEntry::wrap_Object(CompoundFileDirectory$FileEntry(((t_CompoundFileDirectory$FileEntry *) arg)->object.this$));
        }
        static PyObject *t_CompoundFileDirectory$FileEntry_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, CompoundFileDirectory$FileEntry::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_CompoundFileDirectory$FileEntry_init_(t_CompoundFileDirectory$FileEntry *self, PyObject *args, PyObject *kwds)
        {
          CompoundFileDirectory$FileEntry object((jobject) NULL);

          INT_CALL(object = CompoundFileDirectory$FileEntry());
          self->object = object;

          return 0;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/ckb/SoraniStemmer.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ckb {

          ::java::lang::Class *SoraniStemmer::class$ = NULL;
          jmethodID *SoraniStemmer::mids$ = NULL;
          bool SoraniStemmer::live$ = false;

          jclass SoraniStemmer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/ckb/SoraniStemmer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_stem_ec6430eb] = env->getMethodID(cls, "stem", "([CI)I");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          SoraniStemmer::SoraniStemmer() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          jint SoraniStemmer::stem(const JArray< jchar > & a0, jint a1) const
          {
            return env->callIntMethod(this$, mids$[mid_stem_ec6430eb], a0.this$, a1);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ckb {
          static PyObject *t_SoraniStemmer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SoraniStemmer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_SoraniStemmer_init_(t_SoraniStemmer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_SoraniStemmer_stem(t_SoraniStemmer *self, PyObject *args);

          static PyMethodDef t_SoraniStemmer__methods_[] = {
            DECLARE_METHOD(t_SoraniStemmer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SoraniStemmer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SoraniStemmer, stem, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(SoraniStemmer, t_SoraniStemmer, ::java::lang::Object, SoraniStemmer, t_SoraniStemmer_init_, 0, 0, 0, 0, 0);

          void t_SoraniStemmer::install(PyObject *module)
          {
            installType(&PY_TYPE(SoraniStemmer), module, "SoraniStemmer", 0);
          }

          void t_SoraniStemmer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(SoraniStemmer).tp_dict, "class_", make_descriptor(SoraniStemmer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(SoraniStemmer).tp_dict, "wrapfn_", make_descriptor(t_SoraniStemmer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(SoraniStemmer).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_SoraniStemmer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, SoraniStemmer::initializeClass, 1)))
              return NULL;
            return t_SoraniStemmer::wrap_Object(SoraniStemmer(((t_SoraniStemmer *) arg)->object.this$));
          }
          static PyObject *t_SoraniStemmer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, SoraniStemmer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_SoraniStemmer_init_(t_SoraniStemmer *self, PyObject *args, PyObject *kwds)
          {
            SoraniStemmer object((jobject) NULL);

            INT_CALL(object = SoraniStemmer());
            self->object = object;

            return 0;
          }

          static PyObject *t_SoraniStemmer_stem(t_SoraniStemmer *self, PyObject *args)
          {
            JArray< jchar > a0((jobject) NULL);
            jint a1;
            jint result;

            if (!parseArgs(args, "[CI", &a0, &a1))
            {
              OBJ_CALL(result = self->object.stem(a0, a1));
              return PyInt_FromLong((long) result);
            }

            PyErr_SetArgsError((PyObject *) self, "stem", args);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/spans/SpanFirstQuery.h"
#include "java/lang/Object.h"
#include "java/lang/String.h"
#include "org/apache/lucene/search/spans/SpanQuery.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace spans {

          ::java::lang::Class *SpanFirstQuery::class$ = NULL;
          jmethodID *SpanFirstQuery::mids$ = NULL;
          bool SpanFirstQuery::live$ = false;

          jclass SpanFirstQuery::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/spans/SpanFirstQuery");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_611c8717] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/spans/SpanQuery;I)V");
              mids$[mid_clone_cf87c9b3] = env->getMethodID(cls, "clone", "()Lorg/apache/lucene/search/spans/SpanFirstQuery;");
              mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
              mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
              mids$[mid_toString_97a5258f] = env->getMethodID(cls, "toString", "(Ljava/lang/String;)Ljava/lang/String;");
              mids$[mid_acceptPosition_5342f73f] = env->getMethodID(cls, "acceptPosition", "(Lorg/apache/lucene/search/spans/Spans;)Lorg/apache/lucene/search/spans/SpanPositionCheckQuery$AcceptStatus;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          SpanFirstQuery::SpanFirstQuery(const ::org::apache::lucene::search::spans::SpanQuery & a0, jint a1) : ::org::apache::lucene::search::spans::SpanPositionRangeQuery(env->newObject(initializeClass, &mids$, mid_init$_611c8717, a0.this$, a1)) {}

          SpanFirstQuery SpanFirstQuery::clone() const
          {
            return SpanFirstQuery(env->callObjectMethod(this$, mids$[mid_clone_cf87c9b3]));
          }

          jboolean SpanFirstQuery::equals(const ::java::lang::Object & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
          }

          jint SpanFirstQuery::hashCode() const
          {
            return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
          }

          ::java::lang::String SpanFirstQuery::toString(const ::java::lang::String & a0) const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_97a5258f], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace spans {
          static PyObject *t_SpanFirstQuery_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SpanFirstQuery_instance_(PyTypeObject *type, PyObject *arg);
          static int t_SpanFirstQuery_init_(t_SpanFirstQuery *self, PyObject *args, PyObject *kwds);
          static PyObject *t_SpanFirstQuery_clone(t_SpanFirstQuery *self, PyObject *args);
          static PyObject *t_SpanFirstQuery_equals(t_SpanFirstQuery *self, PyObject *args);
          static PyObject *t_SpanFirstQuery_hashCode(t_SpanFirstQuery *self, PyObject *args);
          static PyObject *t_SpanFirstQuery_toString(t_SpanFirstQuery *self, PyObject *args);

          static PyMethodDef t_SpanFirstQuery__methods_[] = {
            DECLARE_METHOD(t_SpanFirstQuery, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SpanFirstQuery, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SpanFirstQuery, clone, METH_VARARGS),
            DECLARE_METHOD(t_SpanFirstQuery, equals, METH_VARARGS),
            DECLARE_METHOD(t_SpanFirstQuery, hashCode, METH_VARARGS),
            DECLARE_METHOD(t_SpanFirstQuery, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(SpanFirstQuery, t_SpanFirstQuery, ::org::apache::lucene::search::spans::SpanPositionRangeQuery, SpanFirstQuery, t_SpanFirstQuery_init_, 0, 0, 0, 0, 0);

          void t_SpanFirstQuery::install(PyObject *module)
          {
            installType(&PY_TYPE(SpanFirstQuery), module, "SpanFirstQuery", 0);
          }

          void t_SpanFirstQuery::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(SpanFirstQuery).tp_dict, "class_", make_descriptor(SpanFirstQuery::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(SpanFirstQuery).tp_dict, "wrapfn_", make_descriptor(t_SpanFirstQuery::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(SpanFirstQuery).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_SpanFirstQuery_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, SpanFirstQuery::initializeClass, 1)))
              return NULL;
            return t_SpanFirstQuery::wrap_Object(SpanFirstQuery(((t_SpanFirstQuery *) arg)->object.this$));
          }
          static PyObject *t_SpanFirstQuery_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, SpanFirstQuery::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_SpanFirstQuery_init_(t_SpanFirstQuery *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::search::spans::SpanQuery a0((jobject) NULL);
            jint a1;
            SpanFirstQuery object((jobject) NULL);

            if (!parseArgs(args, "kI", ::org::apache::lucene::search::spans::SpanQuery::initializeClass, &a0, &a1))
            {
              INT_CALL(object = SpanFirstQuery(a0, a1));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_SpanFirstQuery_clone(t_SpanFirstQuery *self, PyObject *args)
          {
            SpanFirstQuery result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.clone());
              return t_SpanFirstQuery::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(SpanFirstQuery), (PyObject *) self, "clone", args, 2);
          }

          static PyObject *t_SpanFirstQuery_equals(t_SpanFirstQuery *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            jboolean result;

            if (!parseArgs(args, "o", &a0))
            {
              OBJ_CALL(result = self->object.equals(a0));
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(SpanFirstQuery), (PyObject *) self, "equals", args, 2);
          }

          static PyObject *t_SpanFirstQuery_hashCode(t_SpanFirstQuery *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.hashCode());
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(SpanFirstQuery), (PyObject *) self, "hashCode", args, 2);
          }

          static PyObject *t_SpanFirstQuery_toString(t_SpanFirstQuery *self, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, "s", &a0))
            {
              OBJ_CALL(result = self->object.toString(a0));
              return j2p(result);
            }

            return callSuper(&PY_TYPE(SpanFirstQuery), (PyObject *) self, "toString", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/egothor/stemmer/DiffIt.h"
#include "java/lang/String.h"
#include "java/lang/Exception.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace egothor {
    namespace stemmer {

      ::java::lang::Class *DiffIt::class$ = NULL;
      jmethodID *DiffIt::mids$ = NULL;
      bool DiffIt::live$ = false;

      jclass DiffIt::initializeClass(bool getOnly)
      {
        if (getOnly)
          return (jclass) (live$ ? class$->this$ : NULL);
        if (class$ == NULL)
        {
          jclass cls = (jclass) env->findClass("org/egothor/stemmer/DiffIt");

          mids$ = new jmethodID[max_mid];
          mids$[mid_main_4dd4540c] = env->getStaticMethodID(cls, "main", "([Ljava/lang/String;)V");

          class$ = (::java::lang::Class *) new JObject(cls);
          live$ = true;
        }
        return (jclass) class$->this$;
      }

      void DiffIt::main(const JArray< ::java::lang::String > & a0)
      {
        jclass cls = env->getClass(initializeClass);
        env->callStaticVoidMethod(cls, mids$[mid_main_4dd4540c], a0.this$);
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace egothor {
    namespace stemmer {
      static PyObject *t_DiffIt_cast_(PyTypeObject *type, PyObject *arg);
      static PyObject *t_DiffIt_instance_(PyTypeObject *type, PyObject *arg);
      static PyObject *t_DiffIt_main(PyTypeObject *type, PyObject *arg);

      static PyMethodDef t_DiffIt__methods_[] = {
        DECLARE_METHOD(t_DiffIt, cast_, METH_O | METH_CLASS),
        DECLARE_METHOD(t_DiffIt, instance_, METH_O | METH_CLASS),
        DECLARE_METHOD(t_DiffIt, main, METH_O | METH_CLASS),
        { NULL, NULL, 0, NULL }
      };

      DECLARE_TYPE(DiffIt, t_DiffIt, ::java::lang::Object, DiffIt, abstract_init, 0, 0, 0, 0, 0);

      void t_DiffIt::install(PyObject *module)
      {
        installType(&PY_TYPE(DiffIt), module, "DiffIt", 0);
      }

      void t_DiffIt::initialize(PyObject *module)
      {
        PyDict_SetItemString(PY_TYPE(DiffIt).tp_dict, "class_", make_descriptor(DiffIt::initializeClass, 1));
        PyDict_SetItemString(PY_TYPE(DiffIt).tp_dict, "wrapfn_", make_descriptor(t_DiffIt::wrap_jobject));
        PyDict_SetItemString(PY_TYPE(DiffIt).tp_dict, "boxfn_", make_descriptor(boxObject));
      }

      static PyObject *t_DiffIt_cast_(PyTypeObject *type, PyObject *arg)
      {
        if (!(arg = castCheck(arg, DiffIt::initializeClass, 1)))
          return NULL;
        return t_DiffIt::wrap_Object(DiffIt(((t_DiffIt *) arg)->object.this$));
      }
      static PyObject *t_DiffIt_instance_(PyTypeObject *type, PyObject *arg)
      {
        if (!castCheck(arg, DiffIt::initializeClass, 0))
          Py_RETURN_FALSE;
        Py_RETURN_TRUE;
      }

      static PyObject *t_DiffIt_main(PyTypeObject *type, PyObject *arg)
      {
        JArray< ::java::lang::String > a0((jobject) NULL);

        if (!parseArg(arg, "[s", &a0))
        {
          OBJ_CALL(::org::egothor::stemmer::DiffIt::main(a0));
          Py_RETURN_NONE;
        }

        PyErr_SetArgsError(type, "main", arg);
        return NULL;
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/CheckIndex.h"
#include "org/apache/lucene/index/CheckIndex$Status.h"
#include "org/apache/lucene/index/CheckIndex$Status$StoredFieldStatus.h"
#include "java/lang/InterruptedException.h"
#include "java/io/PrintStream.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/index/CheckIndex$Status$TermVectorStatus.h"
#include "org/apache/lucene/store/Directory.h"
#include "org/apache/lucene/index/AtomicReader.h"
#include "org/apache/lucene/index/CheckIndex$Status$FieldNormStatus.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/index/CheckIndex$Status$TermIndexStatus.h"
#include "java/util/List.h"
#include "org/apache/lucene/index/CheckIndex$Status$DocValuesStatus.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *CheckIndex::class$ = NULL;
        jmethodID *CheckIndex::mids$ = NULL;
        bool CheckIndex::live$ = false;

        jclass CheckIndex::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/CheckIndex");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_2e261ef2] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/store/Directory;)V");
            mids$[mid_checkIndex_91a82b33] = env->getMethodID(cls, "checkIndex", "()Lorg/apache/lucene/index/CheckIndex$Status;");
            mids$[mid_checkIndex_a75717b2] = env->getMethodID(cls, "checkIndex", "(Ljava/util/List;)Lorg/apache/lucene/index/CheckIndex$Status;");
            mids$[mid_fixIndex_a89756fe] = env->getMethodID(cls, "fixIndex", "(Lorg/apache/lucene/index/CheckIndex$Status;)V");
            mids$[mid_getCrossCheckTermVectors_54c6a16a] = env->getMethodID(cls, "getCrossCheckTermVectors", "()Z");
            mids$[mid_main_4dd4540c] = env->getStaticMethodID(cls, "main", "([Ljava/lang/String;)V");
            mids$[mid_setCrossCheckTermVectors_bb0c767f] = env->getMethodID(cls, "setCrossCheckTermVectors", "(Z)V");
            mids$[mid_setInfoStream_1b7c898b] = env->getMethodID(cls, "setInfoStream", "(Ljava/io/PrintStream;)V");
            mids$[mid_setInfoStream_ee355e40] = env->getMethodID(cls, "setInfoStream", "(Ljava/io/PrintStream;Z)V");
            mids$[mid_testDocValues_11f384a5] = env->getStaticMethodID(cls, "testDocValues", "(Lorg/apache/lucene/index/AtomicReader;Ljava/io/PrintStream;)Lorg/apache/lucene/index/CheckIndex$Status$DocValuesStatus;");
            mids$[mid_testFieldNorms_3488ebf7] = env->getStaticMethodID(cls, "testFieldNorms", "(Lorg/apache/lucene/index/AtomicReader;Ljava/io/PrintStream;)Lorg/apache/lucene/index/CheckIndex$Status$FieldNormStatus;");
            mids$[mid_testPostings_2a988783] = env->getStaticMethodID(cls, "testPostings", "(Lorg/apache/lucene/index/AtomicReader;Ljava/io/PrintStream;)Lorg/apache/lucene/index/CheckIndex$Status$TermIndexStatus;");
            mids$[mid_testPostings_9363927a] = env->getStaticMethodID(cls, "testPostings", "(Lorg/apache/lucene/index/AtomicReader;Ljava/io/PrintStream;Z)Lorg/apache/lucene/index/CheckIndex$Status$TermIndexStatus;");
            mids$[mid_testStoredFields_1ec0767a] = env->getStaticMethodID(cls, "testStoredFields", "(Lorg/apache/lucene/index/AtomicReader;Ljava/io/PrintStream;)Lorg/apache/lucene/index/CheckIndex$Status$StoredFieldStatus;");
            mids$[mid_testTermVectors_f049a3c1] = env->getStaticMethodID(cls, "testTermVectors", "(Lorg/apache/lucene/index/AtomicReader;Ljava/io/PrintStream;)Lorg/apache/lucene/index/CheckIndex$Status$TermVectorStatus;");
            mids$[mid_testTermVectors_438dd273] = env->getStaticMethodID(cls, "testTermVectors", "(Lorg/apache/lucene/index/AtomicReader;Ljava/io/PrintStream;ZZ)Lorg/apache/lucene/index/CheckIndex$Status$TermVectorStatus;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        CheckIndex::CheckIndex(const ::org::apache::lucene::store::Directory & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_2e261ef2, a0.this$)) {}

        ::org::apache::lucene::index::CheckIndex$Status CheckIndex::checkIndex() const
        {
          return ::org::apache::lucene::index::CheckIndex$Status(env->callObjectMethod(this$, mids$[mid_checkIndex_91a82b33]));
        }

        ::org::apache::lucene::index::CheckIndex$Status CheckIndex::checkIndex(const ::java::util::List & a0) const
        {
          return ::org::apache::lucene::index::CheckIndex$Status(env->callObjectMethod(this$, mids$[mid_checkIndex_a75717b2], a0.this$));
        }

        void CheckIndex::fixIndex(const ::org::apache::lucene::index::CheckIndex$Status & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_fixIndex_a89756fe], a0.this$);
        }

        jboolean CheckIndex::getCrossCheckTermVectors() const
        {
          return env->callBooleanMethod(this$, mids$[mid_getCrossCheckTermVectors_54c6a16a]);
        }

        void CheckIndex::main(const JArray< ::java::lang::String > & a0)
        {
          jclass cls = env->getClass(initializeClass);
          env->callStaticVoidMethod(cls, mids$[mid_main_4dd4540c], a0.this$);
        }

        void CheckIndex::setCrossCheckTermVectors(jboolean a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setCrossCheckTermVectors_bb0c767f], a0);
        }

        void CheckIndex::setInfoStream(const ::java::io::PrintStream & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setInfoStream_1b7c898b], a0.this$);
        }

        void CheckIndex::setInfoStream(const ::java::io::PrintStream & a0, jboolean a1) const
        {
          env->callVoidMethod(this$, mids$[mid_setInfoStream_ee355e40], a0.this$, a1);
        }

        ::org::apache::lucene::index::CheckIndex$Status$DocValuesStatus CheckIndex::testDocValues(const ::org::apache::lucene::index::AtomicReader & a0, const ::java::io::PrintStream & a1)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::index::CheckIndex$Status$DocValuesStatus(env->callStaticObjectMethod(cls, mids$[mid_testDocValues_11f384a5], a0.this$, a1.this$));
        }

        ::org::apache::lucene::index::CheckIndex$Status$FieldNormStatus CheckIndex::testFieldNorms(const ::org::apache::lucene::index::AtomicReader & a0, const ::java::io::PrintStream & a1)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::index::CheckIndex$Status$FieldNormStatus(env->callStaticObjectMethod(cls, mids$[mid_testFieldNorms_3488ebf7], a0.this$, a1.this$));
        }

        ::org::apache::lucene::index::CheckIndex$Status$TermIndexStatus CheckIndex::testPostings(const ::org::apache::lucene::index::AtomicReader & a0, const ::java::io::PrintStream & a1)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::index::CheckIndex$Status$TermIndexStatus(env->callStaticObjectMethod(cls, mids$[mid_testPostings_2a988783], a0.this$, a1.this$));
        }

        ::org::apache::lucene::index::CheckIndex$Status$TermIndexStatus CheckIndex::testPostings(const ::org::apache::lucene::index::AtomicReader & a0, const ::java::io::PrintStream & a1, jboolean a2)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::index::CheckIndex$Status$TermIndexStatus(env->callStaticObjectMethod(cls, mids$[mid_testPostings_9363927a], a0.this$, a1.this$, a2));
        }

        ::org::apache::lucene::index::CheckIndex$Status$StoredFieldStatus CheckIndex::testStoredFields(const ::org::apache::lucene::index::AtomicReader & a0, const ::java::io::PrintStream & a1)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::index::CheckIndex$Status$StoredFieldStatus(env->callStaticObjectMethod(cls, mids$[mid_testStoredFields_1ec0767a], a0.this$, a1.this$));
        }

        ::org::apache::lucene::index::CheckIndex$Status$TermVectorStatus CheckIndex::testTermVectors(const ::org::apache::lucene::index::AtomicReader & a0, const ::java::io::PrintStream & a1)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::index::CheckIndex$Status$TermVectorStatus(env->callStaticObjectMethod(cls, mids$[mid_testTermVectors_f049a3c1], a0.this$, a1.this$));
        }

        ::org::apache::lucene::index::CheckIndex$Status$TermVectorStatus CheckIndex::testTermVectors(const ::org::apache::lucene::index::AtomicReader & a0, const ::java::io::PrintStream & a1, jboolean a2, jboolean a3)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::index::CheckIndex$Status$TermVectorStatus(env->callStaticObjectMethod(cls, mids$[mid_testTermVectors_438dd273], a0.this$, a1.this$, a2, a3));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_CheckIndex_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_CheckIndex_instance_(PyTypeObject *type, PyObject *arg);
        static int t_CheckIndex_init_(t_CheckIndex *self, PyObject *args, PyObject *kwds);
        static PyObject *t_CheckIndex_checkIndex(t_CheckIndex *self, PyObject *args);
        static PyObject *t_CheckIndex_fixIndex(t_CheckIndex *self, PyObject *arg);
        static PyObject *t_CheckIndex_getCrossCheckTermVectors(t_CheckIndex *self);
        static PyObject *t_CheckIndex_main(PyTypeObject *type, PyObject *arg);
        static PyObject *t_CheckIndex_setCrossCheckTermVectors(t_CheckIndex *self, PyObject *arg);
        static PyObject *t_CheckIndex_setInfoStream(t_CheckIndex *self, PyObject *args);
        static PyObject *t_CheckIndex_testDocValues(PyTypeObject *type, PyObject *args);
        static PyObject *t_CheckIndex_testFieldNorms(PyTypeObject *type, PyObject *args);
        static PyObject *t_CheckIndex_testPostings(PyTypeObject *type, PyObject *args);
        static PyObject *t_CheckIndex_testStoredFields(PyTypeObject *type, PyObject *args);
        static PyObject *t_CheckIndex_testTermVectors(PyTypeObject *type, PyObject *args);
        static PyObject *t_CheckIndex_get__crossCheckTermVectors(t_CheckIndex *self, void *data);
        static int t_CheckIndex_set__crossCheckTermVectors(t_CheckIndex *self, PyObject *arg, void *data);
        static int t_CheckIndex_set__infoStream(t_CheckIndex *self, PyObject *arg, void *data);
        static PyGetSetDef t_CheckIndex__fields_[] = {
          DECLARE_GETSET_FIELD(t_CheckIndex, crossCheckTermVectors),
          DECLARE_SET_FIELD(t_CheckIndex, infoStream),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_CheckIndex__methods_[] = {
          DECLARE_METHOD(t_CheckIndex, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_CheckIndex, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_CheckIndex, checkIndex, METH_VARARGS),
          DECLARE_METHOD(t_CheckIndex, fixIndex, METH_O),
          DECLARE_METHOD(t_CheckIndex, getCrossCheckTermVectors, METH_NOARGS),
          DECLARE_METHOD(t_CheckIndex, main, METH_O | METH_CLASS),
          DECLARE_METHOD(t_CheckIndex, setCrossCheckTermVectors, METH_O),
          DECLARE_METHOD(t_CheckIndex, setInfoStream, METH_VARARGS),
          DECLARE_METHOD(t_CheckIndex, testDocValues, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_CheckIndex, testFieldNorms, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_CheckIndex, testPostings, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_CheckIndex, testStoredFields, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_CheckIndex, testTermVectors, METH_VARARGS | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(CheckIndex, t_CheckIndex, ::java::lang::Object, CheckIndex, t_CheckIndex_init_, 0, 0, t_CheckIndex__fields_, 0, 0);

        void t_CheckIndex::install(PyObject *module)
        {
          installType(&PY_TYPE(CheckIndex), module, "CheckIndex", 0);
          PyDict_SetItemString(PY_TYPE(CheckIndex).tp_dict, "Status", make_descriptor(&PY_TYPE(CheckIndex$Status)));
        }

        void t_CheckIndex::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(CheckIndex).tp_dict, "class_", make_descriptor(CheckIndex::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(CheckIndex).tp_dict, "wrapfn_", make_descriptor(t_CheckIndex::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(CheckIndex).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_CheckIndex_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, CheckIndex::initializeClass, 1)))
            return NULL;
          return t_CheckIndex::wrap_Object(CheckIndex(((t_CheckIndex *) arg)->object.this$));
        }
        static PyObject *t_CheckIndex_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, CheckIndex::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_CheckIndex_init_(t_CheckIndex *self, PyObject *args, PyObject *kwds)
        {
          ::org::apache::lucene::store::Directory a0((jobject) NULL);
          CheckIndex object((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::store::Directory::initializeClass, &a0))
          {
            INT_CALL(object = CheckIndex(a0));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_CheckIndex_checkIndex(t_CheckIndex *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 0:
            {
              ::org::apache::lucene::index::CheckIndex$Status result((jobject) NULL);
              OBJ_CALL(result = self->object.checkIndex());
              return ::org::apache::lucene::index::t_CheckIndex$Status::wrap_Object(result);
            }
            break;
           case 1:
            {
              ::java::util::List a0((jobject) NULL);
              PyTypeObject **p0;
              ::org::apache::lucene::index::CheckIndex$Status result((jobject) NULL);

              if (!parseArgs(args, "K", ::java::util::List::initializeClass, &a0, &p0, ::java::util::t_List::parameters_))
              {
                OBJ_CALL(result = self->object.checkIndex(a0));
                return ::org::apache::lucene::index::t_CheckIndex$Status::wrap_Object(result);
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "checkIndex", args);
          return NULL;
        }

        static PyObject *t_CheckIndex_fixIndex(t_CheckIndex *self, PyObject *arg)
        {
          ::org::apache::lucene::index::CheckIndex$Status a0((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::index::CheckIndex$Status::initializeClass, &a0))
          {
            OBJ_CALL(self->object.fixIndex(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "fixIndex", arg);
          return NULL;
        }

        static PyObject *t_CheckIndex_getCrossCheckTermVectors(t_CheckIndex *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.getCrossCheckTermVectors());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_CheckIndex_main(PyTypeObject *type, PyObject *arg)
        {
          JArray< ::java::lang::String > a0((jobject) NULL);

          if (!parseArg(arg, "[s", &a0))
          {
            OBJ_CALL(::org::apache::lucene::index::CheckIndex::main(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError(type, "main", arg);
          return NULL;
        }

        static PyObject *t_CheckIndex_setCrossCheckTermVectors(t_CheckIndex *self, PyObject *arg)
        {
          jboolean a0;

          if (!parseArg(arg, "Z", &a0))
          {
            OBJ_CALL(self->object.setCrossCheckTermVectors(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setCrossCheckTermVectors", arg);
          return NULL;
        }

        static PyObject *t_CheckIndex_setInfoStream(t_CheckIndex *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              ::java::io::PrintStream a0((jobject) NULL);

              if (!parseArgs(args, "k", ::java::io::PrintStream::initializeClass, &a0))
              {
                OBJ_CALL(self->object.setInfoStream(a0));
                Py_RETURN_NONE;
              }
            }
            break;
           case 2:
            {
              ::java::io::PrintStream a0((jobject) NULL);
              jboolean a1;

              if (!parseArgs(args, "kZ", ::java::io::PrintStream::initializeClass, &a0, &a1))
              {
                OBJ_CALL(self->object.setInfoStream(a0, a1));
                Py_RETURN_NONE;
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "setInfoStream", args);
          return NULL;
        }

        static PyObject *t_CheckIndex_testDocValues(PyTypeObject *type, PyObject *args)
        {
          ::org::apache::lucene::index::AtomicReader a0((jobject) NULL);
          ::java::io::PrintStream a1((jobject) NULL);
          ::org::apache::lucene::index::CheckIndex$Status$DocValuesStatus result((jobject) NULL);

          if (!parseArgs(args, "kk", ::org::apache::lucene::index::AtomicReader::initializeClass, ::java::io::PrintStream::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = ::org::apache::lucene::index::CheckIndex::testDocValues(a0, a1));
            return ::org::apache::lucene::index::t_CheckIndex$Status$DocValuesStatus::wrap_Object(result);
          }

          PyErr_SetArgsError(type, "testDocValues", args);
          return NULL;
        }

        static PyObject *t_CheckIndex_testFieldNorms(PyTypeObject *type, PyObject *args)
        {
          ::org::apache::lucene::index::AtomicReader a0((jobject) NULL);
          ::java::io::PrintStream a1((jobject) NULL);
          ::org::apache::lucene::index::CheckIndex$Status$FieldNormStatus result((jobject) NULL);

          if (!parseArgs(args, "kk", ::org::apache::lucene::index::AtomicReader::initializeClass, ::java::io::PrintStream::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = ::org::apache::lucene::index::CheckIndex::testFieldNorms(a0, a1));
            return ::org::apache::lucene::index::t_CheckIndex$Status$FieldNormStatus::wrap_Object(result);
          }

          PyErr_SetArgsError(type, "testFieldNorms", args);
          return NULL;
        }

        static PyObject *t_CheckIndex_testPostings(PyTypeObject *type, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 2:
            {
              ::org::apache::lucene::index::AtomicReader a0((jobject) NULL);
              ::java::io::PrintStream a1((jobject) NULL);
              ::org::apache::lucene::index::CheckIndex$Status$TermIndexStatus result((jobject) NULL);

              if (!parseArgs(args, "kk", ::org::apache::lucene::index::AtomicReader::initializeClass, ::java::io::PrintStream::initializeClass, &a0, &a1))
              {
                OBJ_CALL(result = ::org::apache::lucene::index::CheckIndex::testPostings(a0, a1));
                return ::org::apache::lucene::index::t_CheckIndex$Status$TermIndexStatus::wrap_Object(result);
              }
            }
            break;
           case 3:
            {
              ::org::apache::lucene::index::AtomicReader a0((jobject) NULL);
              ::java::io::PrintStream a1((jobject) NULL);
              jboolean a2;
              ::org::apache::lucene::index::CheckIndex$Status$TermIndexStatus result((jobject) NULL);

              if (!parseArgs(args, "kkZ", ::org::apache::lucene::index::AtomicReader::initializeClass, ::java::io::PrintStream::initializeClass, &a0, &a1, &a2))
              {
                OBJ_CALL(result = ::org::apache::lucene::index::CheckIndex::testPostings(a0, a1, a2));
                return ::org::apache::lucene::index::t_CheckIndex$Status$TermIndexStatus::wrap_Object(result);
              }
            }
          }

          PyErr_SetArgsError(type, "testPostings", args);
          return NULL;
        }

        static PyObject *t_CheckIndex_testStoredFields(PyTypeObject *type, PyObject *args)
        {
          ::org::apache::lucene::index::AtomicReader a0((jobject) NULL);
          ::java::io::PrintStream a1((jobject) NULL);
          ::org::apache::lucene::index::CheckIndex$Status$StoredFieldStatus result((jobject) NULL);

          if (!parseArgs(args, "kk", ::org::apache::lucene::index::AtomicReader::initializeClass, ::java::io::PrintStream::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = ::org::apache::lucene::index::CheckIndex::testStoredFields(a0, a1));
            return ::org::apache::lucene::index::t_CheckIndex$Status$StoredFieldStatus::wrap_Object(result);
          }

          PyErr_SetArgsError(type, "testStoredFields", args);
          return NULL;
        }

        static PyObject *t_CheckIndex_testTermVectors(PyTypeObject *type, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 2:
            {
              ::org::apache::lucene::index::AtomicReader a0((jobject) NULL);
              ::java::io::PrintStream a1((jobject) NULL);
              ::org::apache::lucene::index::CheckIndex$Status$TermVectorStatus result((jobject) NULL);

              if (!parseArgs(args, "kk", ::org::apache::lucene::index::AtomicReader::initializeClass, ::java::io::PrintStream::initializeClass, &a0, &a1))
              {
                OBJ_CALL(result = ::org::apache::lucene::index::CheckIndex::testTermVectors(a0, a1));
                return ::org::apache::lucene::index::t_CheckIndex$Status$TermVectorStatus::wrap_Object(result);
              }
            }
            break;
           case 4:
            {
              ::org::apache::lucene::index::AtomicReader a0((jobject) NULL);
              ::java::io::PrintStream a1((jobject) NULL);
              jboolean a2;
              jboolean a3;
              ::org::apache::lucene::index::CheckIndex$Status$TermVectorStatus result((jobject) NULL);

              if (!parseArgs(args, "kkZZ", ::org::apache::lucene::index::AtomicReader::initializeClass, ::java::io::PrintStream::initializeClass, &a0, &a1, &a2, &a3))
              {
                OBJ_CALL(result = ::org::apache::lucene::index::CheckIndex::testTermVectors(a0, a1, a2, a3));
                return ::org::apache::lucene::index::t_CheckIndex$Status$TermVectorStatus::wrap_Object(result);
              }
            }
          }

          PyErr_SetArgsError(type, "testTermVectors", args);
          return NULL;
        }

        static PyObject *t_CheckIndex_get__crossCheckTermVectors(t_CheckIndex *self, void *data)
        {
          jboolean value;
          OBJ_CALL(value = self->object.getCrossCheckTermVectors());
          Py_RETURN_BOOL(value);
        }
        static int t_CheckIndex_set__crossCheckTermVectors(t_CheckIndex *self, PyObject *arg, void *data)
        {
          {
            jboolean value;
            if (!parseArg(arg, "Z", &value))
            {
              INT_CALL(self->object.setCrossCheckTermVectors(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "crossCheckTermVectors", arg);
          return -1;
        }

        static int t_CheckIndex_set__infoStream(t_CheckIndex *self, PyObject *arg, void *data)
        {
          {
            ::java::io::PrintStream value((jobject) NULL);
            if (!parseArg(arg, "k", ::java::io::PrintStream::initializeClass, &value))
            {
              INT_CALL(self->object.setInfoStream(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "infoStream", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/standard/UAX29URLEmailTokenizerFactory.h"
#include "org/apache/lucene/util/AttributeFactory.h"
#include "java/lang/Class.h"
#include "java/util/Map.h"
#include "java/io/Reader.h"
#include "org/apache/lucene/analysis/standard/UAX29URLEmailTokenizer.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace standard {

          ::java::lang::Class *UAX29URLEmailTokenizerFactory::class$ = NULL;
          jmethodID *UAX29URLEmailTokenizerFactory::mids$ = NULL;
          bool UAX29URLEmailTokenizerFactory::live$ = false;

          jclass UAX29URLEmailTokenizerFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/standard/UAX29URLEmailTokenizerFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4c9e2b1c] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_ca873381] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/util/AttributeFactory;Ljava/io/Reader;)Lorg/apache/lucene/analysis/standard/UAX29URLEmailTokenizer;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          UAX29URLEmailTokenizerFactory::UAX29URLEmailTokenizerFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenizerFactory(env->newObject(initializeClass, &mids$, mid_init$_4c9e2b1c, a0.this$)) {}

          ::org::apache::lucene::analysis::standard::UAX29URLEmailTokenizer UAX29URLEmailTokenizerFactory::create(const ::org::apache::lucene::util::AttributeFactory & a0, const ::java::io::Reader & a1) const
          {
            return ::org::apache::lucene::analysis::standard::UAX29URLEmailTokenizer(env->callObjectMethod(this$, mids$[mid_create_ca873381], a0.this$, a1.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace standard {
          static PyObject *t_UAX29URLEmailTokenizerFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_UAX29URLEmailTokenizerFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_UAX29URLEmailTokenizerFactory_init_(t_UAX29URLEmailTokenizerFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_UAX29URLEmailTokenizerFactory_create(t_UAX29URLEmailTokenizerFactory *self, PyObject *args);

          static PyMethodDef t_UAX29URLEmailTokenizerFactory__methods_[] = {
            DECLARE_METHOD(t_UAX29URLEmailTokenizerFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_UAX29URLEmailTokenizerFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_UAX29URLEmailTokenizerFactory, create, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(UAX29URLEmailTokenizerFactory, t_UAX29URLEmailTokenizerFactory, ::org::apache::lucene::analysis::util::TokenizerFactory, UAX29URLEmailTokenizerFactory, t_UAX29URLEmailTokenizerFactory_init_, 0, 0, 0, 0, 0);

          void t_UAX29URLEmailTokenizerFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(UAX29URLEmailTokenizerFactory), module, "UAX29URLEmailTokenizerFactory", 0);
          }

          void t_UAX29URLEmailTokenizerFactory::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(UAX29URLEmailTokenizerFactory).tp_dict, "class_", make_descriptor(UAX29URLEmailTokenizerFactory::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(UAX29URLEmailTokenizerFactory).tp_dict, "wrapfn_", make_descriptor(t_UAX29URLEmailTokenizerFactory::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(UAX29URLEmailTokenizerFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_UAX29URLEmailTokenizerFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, UAX29URLEmailTokenizerFactory::initializeClass, 1)))
              return NULL;
            return t_UAX29URLEmailTokenizerFactory::wrap_Object(UAX29URLEmailTokenizerFactory(((t_UAX29URLEmailTokenizerFactory *) arg)->object.this$));
          }
          static PyObject *t_UAX29URLEmailTokenizerFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, UAX29URLEmailTokenizerFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_UAX29URLEmailTokenizerFactory_init_(t_UAX29URLEmailTokenizerFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            UAX29URLEmailTokenizerFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = UAX29URLEmailTokenizerFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_UAX29URLEmailTokenizerFactory_create(t_UAX29URLEmailTokenizerFactory *self, PyObject *args)
          {
            ::org::apache::lucene::util::AttributeFactory a0((jobject) NULL);
            ::java::io::Reader a1((jobject) NULL);
            ::org::apache::lucene::analysis::standard::UAX29URLEmailTokenizer result((jobject) NULL);

            if (!parseArgs(args, "kk", ::org::apache::lucene::util::AttributeFactory::initializeClass, ::java::io::Reader::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.create(a0, a1));
              return ::org::apache::lucene::analysis::standard::t_UAX29URLEmailTokenizer::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(UAX29URLEmailTokenizerFactory), (PyObject *) self, "create", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/tokenattributes/OffsetAttributeImpl.h"
#include "org/apache/lucene/analysis/tokenattributes/OffsetAttribute.h"
#include "java/lang/Object.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace tokenattributes {

          ::java::lang::Class *OffsetAttributeImpl::class$ = NULL;
          jmethodID *OffsetAttributeImpl::mids$ = NULL;
          bool OffsetAttributeImpl::live$ = false;

          jclass OffsetAttributeImpl::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/tokenattributes/OffsetAttributeImpl");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_clear_54c6a166] = env->getMethodID(cls, "clear", "()V");
              mids$[mid_copyTo_d86caa9f] = env->getMethodID(cls, "copyTo", "(Lorg/apache/lucene/util/AttributeImpl;)V");
              mids$[mid_endOffset_54c6a179] = env->getMethodID(cls, "endOffset", "()I");
              mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
              mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
              mids$[mid_setOffset_d8d154a6] = env->getMethodID(cls, "setOffset", "(II)V");
              mids$[mid_startOffset_54c6a179] = env->getMethodID(cls, "startOffset", "()I");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          OffsetAttributeImpl::OffsetAttributeImpl() : ::org::apache::lucene::util::AttributeImpl(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          void OffsetAttributeImpl::clear() const
          {
            env->callVoidMethod(this$, mids$[mid_clear_54c6a166]);
          }

          void OffsetAttributeImpl::copyTo(const ::org::apache::lucene::util::AttributeImpl & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_copyTo_d86caa9f], a0.this$);
          }

          jint OffsetAttributeImpl::endOffset() const
          {
            return env->callIntMethod(this$, mids$[mid_endOffset_54c6a179]);
          }

          jboolean OffsetAttributeImpl::equals(const ::java::lang::Object & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
          }

          jint OffsetAttributeImpl::hashCode() const
          {
            return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
          }

          void OffsetAttributeImpl::setOffset(jint a0, jint a1) const
          {
            env->callVoidMethod(this$, mids$[mid_setOffset_d8d154a6], a0, a1);
          }

          jint OffsetAttributeImpl::startOffset() const
          {
            return env->callIntMethod(this$, mids$[mid_startOffset_54c6a179]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace tokenattributes {
          static PyObject *t_OffsetAttributeImpl_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_OffsetAttributeImpl_instance_(PyTypeObject *type, PyObject *arg);
          static int t_OffsetAttributeImpl_init_(t_OffsetAttributeImpl *self, PyObject *args, PyObject *kwds);
          static PyObject *t_OffsetAttributeImpl_clear(t_OffsetAttributeImpl *self, PyObject *args);
          static PyObject *t_OffsetAttributeImpl_copyTo(t_OffsetAttributeImpl *self, PyObject *args);
          static PyObject *t_OffsetAttributeImpl_endOffset(t_OffsetAttributeImpl *self);
          static PyObject *t_OffsetAttributeImpl_equals(t_OffsetAttributeImpl *self, PyObject *args);
          static PyObject *t_OffsetAttributeImpl_hashCode(t_OffsetAttributeImpl *self, PyObject *args);
          static PyObject *t_OffsetAttributeImpl_setOffset(t_OffsetAttributeImpl *self, PyObject *args);
          static PyObject *t_OffsetAttributeImpl_startOffset(t_OffsetAttributeImpl *self);

          static PyMethodDef t_OffsetAttributeImpl__methods_[] = {
            DECLARE_METHOD(t_OffsetAttributeImpl, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_OffsetAttributeImpl, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_OffsetAttributeImpl, clear, METH_VARARGS),
            DECLARE_METHOD(t_OffsetAttributeImpl, copyTo, METH_VARARGS),
            DECLARE_METHOD(t_OffsetAttributeImpl, endOffset, METH_NOARGS),
            DECLARE_METHOD(t_OffsetAttributeImpl, equals, METH_VARARGS),
            DECLARE_METHOD(t_OffsetAttributeImpl, hashCode, METH_VARARGS),
            DECLARE_METHOD(t_OffsetAttributeImpl, setOffset, METH_VARARGS),
            DECLARE_METHOD(t_OffsetAttributeImpl, startOffset, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(OffsetAttributeImpl, t_OffsetAttributeImpl, ::org::apache::lucene::util::AttributeImpl, OffsetAttributeImpl, t_OffsetAttributeImpl_init_, 0, 0, 0, 0, 0);

          void t_OffsetAttributeImpl::install(PyObject *module)
          {
            installType(&PY_TYPE(OffsetAttributeImpl), module, "OffsetAttributeImpl", 0);
          }

          void t_OffsetAttributeImpl::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(OffsetAttributeImpl).tp_dict, "class_", make_descriptor(OffsetAttributeImpl::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(OffsetAttributeImpl).tp_dict, "wrapfn_", make_descriptor(t_OffsetAttributeImpl::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(OffsetAttributeImpl).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_OffsetAttributeImpl_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, OffsetAttributeImpl::initializeClass, 1)))
              return NULL;
            return t_OffsetAttributeImpl::wrap_Object(OffsetAttributeImpl(((t_OffsetAttributeImpl *) arg)->object.this$));
          }
          static PyObject *t_OffsetAttributeImpl_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, OffsetAttributeImpl::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_OffsetAttributeImpl_init_(t_OffsetAttributeImpl *self, PyObject *args, PyObject *kwds)
          {
            OffsetAttributeImpl object((jobject) NULL);

            INT_CALL(object = OffsetAttributeImpl());
            self->object = object;

            return 0;
          }

          static PyObject *t_OffsetAttributeImpl_clear(t_OffsetAttributeImpl *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.clear());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(OffsetAttributeImpl), (PyObject *) self, "clear", args, 2);
          }

          static PyObject *t_OffsetAttributeImpl_copyTo(t_OffsetAttributeImpl *self, PyObject *args)
          {
            ::org::apache::lucene::util::AttributeImpl a0((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::util::AttributeImpl::initializeClass, &a0))
            {
              OBJ_CALL(self->object.copyTo(a0));
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(OffsetAttributeImpl), (PyObject *) self, "copyTo", args, 2);
          }

          static PyObject *t_OffsetAttributeImpl_endOffset(t_OffsetAttributeImpl *self)
          {
            jint result;
            OBJ_CALL(result = self->object.endOffset());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_OffsetAttributeImpl_equals(t_OffsetAttributeImpl *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            jboolean result;

            if (!parseArgs(args, "o", &a0))
            {
              OBJ_CALL(result = self->object.equals(a0));
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(OffsetAttributeImpl), (PyObject *) self, "equals", args, 2);
          }

          static PyObject *t_OffsetAttributeImpl_hashCode(t_OffsetAttributeImpl *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.hashCode());
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(OffsetAttributeImpl), (PyObject *) self, "hashCode", args, 2);
          }

          static PyObject *t_OffsetAttributeImpl_setOffset(t_OffsetAttributeImpl *self, PyObject *args)
          {
            jint a0;
            jint a1;

            if (!parseArgs(args, "II", &a0, &a1))
            {
              OBJ_CALL(self->object.setOffset(a0, a1));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setOffset", args);
            return NULL;
          }

          static PyObject *t_OffsetAttributeImpl_startOffset(t_OffsetAttributeImpl *self)
          {
            jint result;
            OBJ_CALL(result = self->object.startOffset());
            return PyInt_FromLong((long) result);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/facet/MultiFacets.h"
#include "java/lang/Number.h"
#include "java/lang/Class.h"
#include "java/io/IOException.h"
#include "java/util/Map.h"
#include "java/lang/String.h"
#include "org/apache/lucene/facet/FacetResult.h"
#include "java/util/List.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {

        ::java::lang::Class *MultiFacets::class$ = NULL;
        jmethodID *MultiFacets::mids$ = NULL;
        bool MultiFacets::live$ = false;

        jclass MultiFacets::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/facet/MultiFacets");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_4c9e2b1c] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
            mids$[mid_init$_5c6c1e1e] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;Lorg/apache/lucene/facet/Facets;)V");
            mids$[mid_getAllDims_cdc2a528] = env->getMethodID(cls, "getAllDims", "(I)Ljava/util/List;");
            mids$[mid_getSpecificValue_8ecbcac9] = env->getMethodID(cls, "getSpecificValue", "(Ljava/lang/String;[Ljava/lang/String;)Ljava/lang/Number;");
            mids$[mid_getTopChildren_37e8c044] = env->getMethodID(cls, "getTopChildren", "(ILjava/lang/String;[Ljava/lang/String;)Lorg/apache/lucene/facet/FacetResult;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        MultiFacets::MultiFacets(const ::java::util::Map & a0) : ::org::apache::lucene::facet::Facets(env->newObject(initializeClass, &mids$, mid_init$_4c9e2b1c, a0.this$)) {}

        MultiFacets::MultiFacets(const ::java::util::Map & a0, const ::org::apache::lucene::facet::Facets & a1) : ::org::apache::lucene::facet::Facets(env->newObject(initializeClass, &mids$, mid_init$_5c6c1e1e, a0.this$, a1.this$)) {}

        ::java::util::List MultiFacets::getAllDims(jint a0) const
        {
          return ::java::util::List(env->callObjectMethod(this$, mids$[mid_getAllDims_cdc2a528], a0));
        }

        ::java::lang::Number MultiFacets::getSpecificValue(const ::java::lang::String & a0, const JArray< ::java::lang::String > & a1) const
        {
          return ::java::lang::Number(env->callObjectMethod(this$, mids$[mid_getSpecificValue_8ecbcac9], a0.this$, a1.this$));
        }

        ::org::apache::lucene::facet::FacetResult MultiFacets::getTopChildren(jint a0, const ::java::lang::String & a1, const JArray< ::java::lang::String > & a2) const
        {
          return ::org::apache::lucene::facet::FacetResult(env->callObjectMethod(this$, mids$[mid_getTopChildren_37e8c044], a0, a1.this$, a2.this$));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        static PyObject *t_MultiFacets_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_MultiFacets_instance_(PyTypeObject *type, PyObject *arg);
        static int t_MultiFacets_init_(t_MultiFacets *self, PyObject *args, PyObject *kwds);
        static PyObject *t_MultiFacets_getAllDims(t_MultiFacets *self, PyObject *args);
        static PyObject *t_MultiFacets_getSpecificValue(t_MultiFacets *self, PyObject *args);
        static PyObject *t_MultiFacets_getTopChildren(t_MultiFacets *self, PyObject *args);

        static PyMethodDef t_MultiFacets__methods_[] = {
          DECLARE_METHOD(t_MultiFacets, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MultiFacets, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MultiFacets, getAllDims, METH_VARARGS),
          DECLARE_METHOD(t_MultiFacets, getSpecificValue, METH_VARARGS),
          DECLARE_METHOD(t_MultiFacets, getTopChildren, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(MultiFacets, t_MultiFacets, ::org::apache::lucene::facet::Facets, MultiFacets, t_MultiFacets_init_, 0, 0, 0, 0, 0);

        void t_MultiFacets::install(PyObject *module)
        {
          installType(&PY_TYPE(MultiFacets), module, "MultiFacets", 0);
        }

        void t_MultiFacets::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(MultiFacets).tp_dict, "class_", make_descriptor(MultiFacets::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(MultiFacets).tp_dict, "wrapfn_", make_descriptor(t_MultiFacets::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(MultiFacets).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_MultiFacets_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, MultiFacets::initializeClass, 1)))
            return NULL;
          return t_MultiFacets::wrap_Object(MultiFacets(((t_MultiFacets *) arg)->object.this$));
        }
        static PyObject *t_MultiFacets_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, MultiFacets::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_MultiFacets_init_(t_MultiFacets *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              ::java::util::Map a0((jobject) NULL);
              PyTypeObject **p0;
              MultiFacets object((jobject) NULL);

              if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
              {
                INT_CALL(object = MultiFacets(a0));
                self->object = object;
                break;
              }
            }
            goto err;
           case 2:
            {
              ::java::util::Map a0((jobject) NULL);
              PyTypeObject **p0;
              ::org::apache::lucene::facet::Facets a1((jobject) NULL);
              MultiFacets object((jobject) NULL);

              if (!parseArgs(args, "Kk", ::java::util::Map::initializeClass, ::org::apache::lucene::facet::Facets::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_, &a1))
              {
                INT_CALL(object = MultiFacets(a0, a1));
                self->object = object;
                break;
              }
            }
           default:
           err:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_MultiFacets_getAllDims(t_MultiFacets *self, PyObject *args)
        {
          jint a0;
          ::java::util::List result((jobject) NULL);

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(result = self->object.getAllDims(a0));
            return ::java::util::t_List::wrap_Object(result, &::org::apache::lucene::facet::PY_TYPE(FacetResult));
          }

          return callSuper(&PY_TYPE(MultiFacets), (PyObject *) self, "getAllDims", args, 2);
        }

        static PyObject *t_MultiFacets_getSpecificValue(t_MultiFacets *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          JArray< ::java::lang::String > a1((jobject) NULL);
          ::java::lang::Number result((jobject) NULL);

          if (!parseArgs(args, "s[s", &a0, &a1))
          {
            OBJ_CALL(result = self->object.getSpecificValue(a0, a1));
            return ::java::lang::t_Number::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(MultiFacets), (PyObject *) self, "getSpecificValue", args, 2);
        }

        static PyObject *t_MultiFacets_getTopChildren(t_MultiFacets *self, PyObject *args)
        {
          jint a0;
          ::java::lang::String a1((jobject) NULL);
          JArray< ::java::lang::String > a2((jobject) NULL);
          ::org::apache::lucene::facet::FacetResult result((jobject) NULL);

          if (!parseArgs(args, "Is[s", &a0, &a1, &a2))
          {
            OBJ_CALL(result = self->object.getTopChildren(a0, a1, a2));
            return ::org::apache::lucene::facet::t_FacetResult::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(MultiFacets), (PyObject *) self, "getTopChildren", args, 2);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/ArrayUtil.h"
#include "java/lang/Comparable.h"
#include "java/lang/Class.h"
#include "java/util/Comparator.h"
#include "java/lang/Integer.h"
#include "java/util/Collection.h"
#include "java/lang/NumberFormatException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *ArrayUtil::class$ = NULL;
        jmethodID *ArrayUtil::mids$ = NULL;
        bool ArrayUtil::live$ = false;
        jint ArrayUtil::MAX_ARRAY_LENGTH = (jint) 0;

        jclass ArrayUtil::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/ArrayUtil");

            mids$ = new jmethodID[max_mid];
            mids$[mid_equals_082119cc] = env->getStaticMethodID(cls, "equals", "([II[III)Z");
            mids$[mid_equals_8c28d07c] = env->getStaticMethodID(cls, "equals", "([CI[CII)Z");
            mids$[mid_equals_06f361be] = env->getStaticMethodID(cls, "equals", "([BI[BII)Z");
            mids$[mid_getShrinkSize_d3236abb] = env->getStaticMethodID(cls, "getShrinkSize", "(III)I");
            mids$[mid_grow_4ea7c525] = env->getStaticMethodID(cls, "grow", "([F)[F");
            mids$[mid_grow_607a9cf1] = env->getStaticMethodID(cls, "grow", "([D)[D");
            mids$[mid_grow_21fe49ab] = env->getStaticMethodID(cls, "grow", "([[I)[[I");
            mids$[mid_grow_6dd1ed5d] = env->getStaticMethodID(cls, "grow", "([J)[J");
            mids$[mid_grow_fc3c604f] = env->getStaticMethodID(cls, "grow", "([I)[I");
            mids$[mid_grow_e08af67d] = env->getStaticMethodID(cls, "grow", "([Z)[Z");
            mids$[mid_grow_12f49f5f] = env->getStaticMethodID(cls, "grow", "([C)[C");
            mids$[mid_grow_27787b8f] = env->getStaticMethodID(cls, "grow", "([[F)[[F");
            mids$[mid_grow_3de5243f] = env->getStaticMethodID(cls, "grow", "([S)[S");
            mids$[mid_grow_1193226d] = env->getStaticMethodID(cls, "grow", "([B)[B");
            mids$[mid_grow_e2c1f835] = env->getStaticMethodID(cls, "grow", "([DI)[D");
            mids$[mid_grow_d090ee39] = env->getStaticMethodID(cls, "grow", "([SI)[S");
            mids$[mid_grow_1fbccced] = env->getStaticMethodID(cls, "grow", "([ZI)[Z");
            mids$[mid_grow_62111365] = env->getStaticMethodID(cls, "grow", "([[II)[[I");
            mids$[mid_grow_6bd5869d] = env->getStaticMethodID(cls, "grow", "([BI)[B");
            mids$[mid_grow_91cb90f9] = env->getStaticMethodID(cls, "grow", "([CI)[C");
            mids$[mid_grow_0f9a030d] = env->getStaticMethodID(cls, "grow", "([JI)[J");
            mids$[mid_grow_d766d189] = env->getStaticMethodID(cls, "grow", "([II)[I");
            mids$[mid_grow_92d373eb] = env->getStaticMethodID(cls, "grow", "([[FI)[[F");
            mids$[mid_grow_a415095d] = env->getStaticMethodID(cls, "grow", "([FI)[F");
            mids$[mid_hashCode_6f0bb349] = env->getStaticMethodID(cls, "hashCode", "([CII)I");
            mids$[mid_hashCode_86f44340] = env->getStaticMethodID(cls, "hashCode", "([BII)I");
            mids$[mid_introSort_01dac18d] = env->getStaticMethodID(cls, "introSort", "([Ljava/lang/Comparable;)V");
            mids$[mid_introSort_8c46d789] = env->getStaticMethodID(cls, "introSort", "([Ljava/lang/Object;Ljava/util/Comparator;)V");
            mids$[mid_introSort_266f4139] = env->getStaticMethodID(cls, "introSort", "([Ljava/lang/Comparable;II)V");
            mids$[mid_introSort_7c263389] = env->getStaticMethodID(cls, "introSort", "([Ljava/lang/Object;IILjava/util/Comparator;)V");
            mids$[mid_naturalComparator_5a7ff2fc] = env->getStaticMethodID(cls, "naturalComparator", "()Ljava/util/Comparator;");
            mids$[mid_oversize_d8d154b9] = env->getStaticMethodID(cls, "oversize", "(II)I");
            mids$[mid_parseInt_700e23c9] = env->getStaticMethodID(cls, "parseInt", "([C)I");
            mids$[mid_parseInt_6f0bb349] = env->getStaticMethodID(cls, "parseInt", "([CII)I");
            mids$[mid_parseInt_afe81cab] = env->getStaticMethodID(cls, "parseInt", "([CIII)I");
            mids$[mid_shrink_92d373eb] = env->getStaticMethodID(cls, "shrink", "([[FI)[[F");
            mids$[mid_shrink_0f9a030d] = env->getStaticMethodID(cls, "shrink", "([JI)[J");
            mids$[mid_shrink_1fbccced] = env->getStaticMethodID(cls, "shrink", "([ZI)[Z");
            mids$[mid_shrink_6bd5869d] = env->getStaticMethodID(cls, "shrink", "([BI)[B");
            mids$[mid_shrink_d766d189] = env->getStaticMethodID(cls, "shrink", "([II)[I");
            mids$[mid_shrink_91cb90f9] = env->getStaticMethodID(cls, "shrink", "([CI)[C");
            mids$[mid_shrink_62111365] = env->getStaticMethodID(cls, "shrink", "([[II)[[I");
            mids$[mid_shrink_d090ee39] = env->getStaticMethodID(cls, "shrink", "([SI)[S");
            mids$[mid_swap_4172dade] = env->getStaticMethodID(cls, "swap", "([Ljava/lang/Object;II)V");
            mids$[mid_timSort_01dac18d] = env->getStaticMethodID(cls, "timSort", "([Ljava/lang/Comparable;)V");
            mids$[mid_timSort_8c46d789] = env->getStaticMethodID(cls, "timSort", "([Ljava/lang/Object;Ljava/util/Comparator;)V");
            mids$[mid_timSort_266f4139] = env->getStaticMethodID(cls, "timSort", "([Ljava/lang/Comparable;II)V");
            mids$[mid_timSort_7c263389] = env->getStaticMethodID(cls, "timSort", "([Ljava/lang/Object;IILjava/util/Comparator;)V");
            mids$[mid_toIntArray_d16addd8] = env->getStaticMethodID(cls, "toIntArray", "(Ljava/util/Collection;)[I");

            class$ = (::java::lang::Class *) new JObject(cls);
            cls = (jclass) class$->this$;

            MAX_ARRAY_LENGTH = env->getStaticIntField(cls, "MAX_ARRAY_LENGTH");
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        jboolean ArrayUtil::equals(const JArray< jint > & a0, jint a1, const JArray< jint > & a2, jint a3, jint a4)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticBooleanMethod(cls, mids$[mid_equals_082119cc], a0.this$, a1, a2.this$, a3, a4);
        }

        jboolean ArrayUtil::equals(const JArray< jchar > & a0, jint a1, const JArray< jchar > & a2, jint a3, jint a4)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticBooleanMethod(cls, mids$[mid_equals_8c28d07c], a0.this$, a1, a2.this$, a3, a4);
        }

        jboolean ArrayUtil::equals(const JArray< jbyte > & a0, jint a1, const JArray< jbyte > & a2, jint a3, jint a4)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticBooleanMethod(cls, mids$[mid_equals_06f361be], a0.this$, a1, a2.this$, a3, a4);
        }

        jint ArrayUtil::getShrinkSize(jint a0, jint a1, jint a2)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticIntMethod(cls, mids$[mid_getShrinkSize_d3236abb], a0, a1, a2);
        }

        JArray< jfloat > ArrayUtil::grow(const JArray< jfloat > & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return JArray< jfloat >(env->callStaticObjectMethod(cls, mids$[mid_grow_4ea7c525], a0.this$));
        }

        JArray< jdouble > ArrayUtil::grow(const JArray< jdouble > & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return JArray< jdouble >(env->callStaticObjectMethod(cls, mids$[mid_grow_607a9cf1], a0.this$));
        }

        JArray< JArray< jint > > ArrayUtil::grow(const JArray< JArray< jint > > & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return JArray< JArray< jint > >(env->callStaticObjectMethod(cls, mids$[mid_grow_21fe49ab], a0.this$));
        }

        JArray< jlong > ArrayUtil::grow(const JArray< jlong > & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return JArray< jlong >(env->callStaticObjectMethod(cls, mids$[mid_grow_6dd1ed5d], a0.this$));
        }

        JArray< jint > ArrayUtil::grow(const JArray< jint > & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return JArray< jint >(env->callStaticObjectMethod(cls, mids$[mid_grow_fc3c604f], a0.this$));
        }

        JArray< jboolean > ArrayUtil::grow(const JArray< jboolean > & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return JArray< jboolean >(env->callStaticObjectMethod(cls, mids$[mid_grow_e08af67d], a0.this$));
        }

        JArray< jchar > ArrayUtil::grow(const JArray< jchar > & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return JArray< jchar >(env->callStaticObjectMethod(cls, mids$[mid_grow_12f49f5f], a0.this$));
        }

        JArray< JArray< jfloat > > ArrayUtil::grow(const JArray< JArray< jfloat > > & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return JArray< JArray< jfloat > >(env->callStaticObjectMethod(cls, mids$[mid_grow_27787b8f], a0.this$));
        }

        JArray< jshort > ArrayUtil::grow(const JArray< jshort > & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return JArray< jshort >(env->callStaticObjectMethod(cls, mids$[mid_grow_3de5243f], a0.this$));
        }

        JArray< jbyte > ArrayUtil::grow(const JArray< jbyte > & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return JArray< jbyte >(env->callStaticObjectMethod(cls, mids$[mid_grow_1193226d], a0.this$));
        }

        JArray< jdouble > ArrayUtil::grow(const JArray< jdouble > & a0, jint a1)
        {
          jclass cls = env->getClass(initializeClass);
          return JArray< jdouble >(env->callStaticObjectMethod(cls, mids$[mid_grow_e2c1f835], a0.this$, a1));
        }

        JArray< jshort > ArrayUtil::grow(const JArray< jshort > & a0, jint a1)
        {
          jclass cls = env->getClass(initializeClass);
          return JArray< jshort >(env->callStaticObjectMethod(cls, mids$[mid_grow_d090ee39], a0.this$, a1));
        }

        JArray< jboolean > ArrayUtil::grow(const JArray< jboolean > & a0, jint a1)
        {
          jclass cls = env->getClass(initializeClass);
          return JArray< jboolean >(env->callStaticObjectMethod(cls, mids$[mid_grow_1fbccced], a0.this$, a1));
        }

        JArray< JArray< jint > > ArrayUtil::grow(const JArray< JArray< jint > > & a0, jint a1)
        {
          jclass cls = env->getClass(initializeClass);
          return JArray< JArray< jint > >(env->callStaticObjectMethod(cls, mids$[mid_grow_62111365], a0.this$, a1));
        }

        JArray< jbyte > ArrayUtil::grow(const JArray< jbyte > & a0, jint a1)
        {
          jclass cls = env->getClass(initializeClass);
          return JArray< jbyte >(env->callStaticObjectMethod(cls, mids$[mid_grow_6bd5869d], a0.this$, a1));
        }

        JArray< jchar > ArrayUtil::grow(const JArray< jchar > & a0, jint a1)
        {
          jclass cls = env->getClass(initializeClass);
          return JArray< jchar >(env->callStaticObjectMethod(cls, mids$[mid_grow_91cb90f9], a0.this$, a1));
        }

        JArray< jlong > ArrayUtil::grow(const JArray< jlong > & a0, jint a1)
        {
          jclass cls = env->getClass(initializeClass);
          return JArray< jlong >(env->callStaticObjectMethod(cls, mids$[mid_grow_0f9a030d], a0.this$, a1));
        }

        JArray< jint > ArrayUtil::grow(const JArray< jint > & a0, jint a1)
        {
          jclass cls = env->getClass(initializeClass);
          return JArray< jint >(env->callStaticObjectMethod(cls, mids$[mid_grow_d766d189], a0.this$, a1));
        }

        JArray< JArray< jfloat > > ArrayUtil::grow(const JArray< JArray< jfloat > > & a0, jint a1)
        {
          jclass cls = env->getClass(initializeClass);
          return JArray< JArray< jfloat > >(env->callStaticObjectMethod(cls, mids$[mid_grow_92d373eb], a0.this$, a1));
        }

        JArray< jfloat > ArrayUtil::grow(const JArray< jfloat > & a0, jint a1)
        {
          jclass cls = env->getClass(initializeClass);
          return JArray< jfloat >(env->callStaticObjectMethod(cls, mids$[mid_grow_a415095d], a0.this$, a1));
        }

        jint ArrayUtil::hashCode(const JArray< jchar > & a0, jint a1, jint a2)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticIntMethod(cls, mids$[mid_hashCode_6f0bb349], a0.this$, a1, a2);
        }

        jint ArrayUtil::hashCode(const JArray< jbyte > & a0, jint a1, jint a2)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticIntMethod(cls, mids$[mid_hashCode_86f44340], a0.this$, a1, a2);
        }

        void ArrayUtil::introSort(const JArray< ::java::lang::Comparable > & a0)
        {
          jclass cls = env->getClass(initializeClass);
          env->callStaticVoidMethod(cls, mids$[mid_introSort_01dac18d], a0.this$);
        }

        void ArrayUtil::introSort(const JArray< ::java::lang::Object > & a0, const ::java::util::Comparator & a1)
        {
          jclass cls = env->getClass(initializeClass);
          env->callStaticVoidMethod(cls, mids$[mid_introSort_8c46d789], a0.this$, a1.this$);
        }

        void ArrayUtil::introSort(const JArray< ::java::lang::Comparable > & a0, jint a1, jint a2)
        {
          jclass cls = env->getClass(initializeClass);
          env->callStaticVoidMethod(cls, mids$[mid_introSort_266f4139], a0.this$, a1, a2);
        }

        void ArrayUtil::introSort(const JArray< ::java::lang::Object > & a0, jint a1, jint a2, const ::java::util::Comparator & a3)
        {
          jclass cls = env->getClass(initializeClass);
          env->callStaticVoidMethod(cls, mids$[mid_introSort_7c263389], a0.this$, a1, a2, a3.this$);
        }

        ::java::util::Comparator ArrayUtil::naturalComparator()
        {
          jclass cls = env->getClass(initializeClass);
          return ::java::util::Comparator(env->callStaticObjectMethod(cls, mids$[mid_naturalComparator_5a7ff2fc]));
        }

        jint ArrayUtil::oversize(jint a0, jint a1)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticIntMethod(cls, mids$[mid_oversize_d8d154b9], a0, a1);
        }

        jint ArrayUtil::parseInt(const JArray< jchar > & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticIntMethod(cls, mids$[mid_parseInt_700e23c9], a0.this$);
        }

        jint ArrayUtil::parseInt(const JArray< jchar > & a0, jint a1, jint a2)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticIntMethod(cls, mids$[mid_parseInt_6f0bb349], a0.this$, a1, a2);
        }

        jint ArrayUtil::parseInt(const JArray< jchar > & a0, jint a1, jint a2, jint a3)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticIntMethod(cls, mids$[mid_parseInt_afe81cab], a0.this$, a1, a2, a3);
        }

        JArray< JArray< jfloat > > ArrayUtil::shrink(const JArray< JArray< jfloat > > & a0, jint a1)
        {
          jclass cls = env->getClass(initializeClass);
          return JArray< JArray< jfloat > >(env->callStaticObjectMethod(cls, mids$[mid_shrink_92d373eb], a0.this$, a1));
        }

        JArray< jlong > ArrayUtil::shrink(const JArray< jlong > & a0, jint a1)
        {
          jclass cls = env->getClass(initializeClass);
          return JArray< jlong >(env->callStaticObjectMethod(cls, mids$[mid_shrink_0f9a030d], a0.this$, a1));
        }

        JArray< jboolean > ArrayUtil::shrink(const JArray< jboolean > & a0, jint a1)
        {
          jclass cls = env->getClass(initializeClass);
          return JArray< jboolean >(env->callStaticObjectMethod(cls, mids$[mid_shrink_1fbccced], a0.this$, a1));
        }

        JArray< jbyte > ArrayUtil::shrink(const JArray< jbyte > & a0, jint a1)
        {
          jclass cls = env->getClass(initializeClass);
          return JArray< jbyte >(env->callStaticObjectMethod(cls, mids$[mid_shrink_6bd5869d], a0.this$, a1));
        }

        JArray< jint > ArrayUtil::shrink(const JArray< jint > & a0, jint a1)
        {
          jclass cls = env->getClass(initializeClass);
          return JArray< jint >(env->callStaticObjectMethod(cls, mids$[mid_shrink_d766d189], a0.this$, a1));
        }

        JArray< jchar > ArrayUtil::shrink(const JArray< jchar > & a0, jint a1)
        {
          jclass cls = env->getClass(initializeClass);
          return JArray< jchar >(env->callStaticObjectMethod(cls, mids$[mid_shrink_91cb90f9], a0.this$, a1));
        }

        JArray< JArray< jint > > ArrayUtil::shrink(const JArray< JArray< jint > > & a0, jint a1)
        {
          jclass cls = env->getClass(initializeClass);
          return JArray< JArray< jint > >(env->callStaticObjectMethod(cls, mids$[mid_shrink_62111365], a0.this$, a1));
        }

        JArray< jshort > ArrayUtil::shrink(const JArray< jshort > & a0, jint a1)
        {
          jclass cls = env->getClass(initializeClass);
          return JArray< jshort >(env->callStaticObjectMethod(cls, mids$[mid_shrink_d090ee39], a0.this$, a1));
        }

        void ArrayUtil::swap(const JArray< ::java::lang::Object > & a0, jint a1, jint a2)
        {
          jclass cls = env->getClass(initializeClass);
          env->callStaticVoidMethod(cls, mids$[mid_swap_4172dade], a0.this$, a1, a2);
        }

        void ArrayUtil::timSort(const JArray< ::java::lang::Comparable > & a0)
        {
          jclass cls = env->getClass(initializeClass);
          env->callStaticVoidMethod(cls, mids$[mid_timSort_01dac18d], a0.this$);
        }

        void ArrayUtil::timSort(const JArray< ::java::lang::Object > & a0, const ::java::util::Comparator & a1)
        {
          jclass cls = env->getClass(initializeClass);
          env->callStaticVoidMethod(cls, mids$[mid_timSort_8c46d789], a0.this$, a1.this$);
        }

        void ArrayUtil::timSort(const JArray< ::java::lang::Comparable > & a0, jint a1, jint a2)
        {
          jclass cls = env->getClass(initializeClass);
          env->callStaticVoidMethod(cls, mids$[mid_timSort_266f4139], a0.this$, a1, a2);
        }

        void ArrayUtil::timSort(const JArray< ::java::lang::Object > & a0, jint a1, jint a2, const ::java::util::Comparator & a3)
        {
          jclass cls = env->getClass(initializeClass);
          env->callStaticVoidMethod(cls, mids$[mid_timSort_7c263389], a0.this$, a1, a2, a3.this$);
        }

        JArray< jint > ArrayUtil::toIntArray(const ::java::util::Collection & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return JArray< jint >(env->callStaticObjectMethod(cls, mids$[mid_toIntArray_d16addd8], a0.this$));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_ArrayUtil_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_ArrayUtil_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_ArrayUtil_equals(PyTypeObject *type, PyObject *args);
        static PyObject *t_ArrayUtil_getShrinkSize(PyTypeObject *type, PyObject *args);
        static PyObject *t_ArrayUtil_grow(PyTypeObject *type, PyObject *args);
        static PyObject *t_ArrayUtil_hashCode(PyTypeObject *type, PyObject *args);
        static PyObject *t_ArrayUtil_introSort(PyTypeObject *type, PyObject *args);
        static PyObject *t_ArrayUtil_naturalComparator(PyTypeObject *type);
        static PyObject *t_ArrayUtil_oversize(PyTypeObject *type, PyObject *args);
        static PyObject *t_ArrayUtil_parseInt(PyTypeObject *type, PyObject *args);
        static PyObject *t_ArrayUtil_shrink(PyTypeObject *type, PyObject *args);
        static PyObject *t_ArrayUtil_swap(PyTypeObject *type, PyObject *args);
        static PyObject *t_ArrayUtil_timSort(PyTypeObject *type, PyObject *args);
        static PyObject *t_ArrayUtil_toIntArray(PyTypeObject *type, PyObject *arg);

        static PyMethodDef t_ArrayUtil__methods_[] = {
          DECLARE_METHOD(t_ArrayUtil, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_ArrayUtil, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_ArrayUtil, equals, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_ArrayUtil, getShrinkSize, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_ArrayUtil, grow, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_ArrayUtil, hashCode, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_ArrayUtil, introSort, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_ArrayUtil, naturalComparator, METH_NOARGS | METH_CLASS),
          DECLARE_METHOD(t_ArrayUtil, oversize, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_ArrayUtil, parseInt, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_ArrayUtil, shrink, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_ArrayUtil, swap, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_ArrayUtil, timSort, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_ArrayUtil, toIntArray, METH_O | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(ArrayUtil, t_ArrayUtil, ::java::lang::Object, ArrayUtil, abstract_init, 0, 0, 0, 0, 0);

        void t_ArrayUtil::install(PyObject *module)
        {
          installType(&PY_TYPE(ArrayUtil), module, "ArrayUtil", 0);
        }

        void t_ArrayUtil::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(ArrayUtil).tp_dict, "class_", make_descriptor(ArrayUtil::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(ArrayUtil).tp_dict, "wrapfn_", make_descriptor(t_ArrayUtil::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(ArrayUtil).tp_dict, "boxfn_", make_descriptor(boxObject));
          env->getClass(ArrayUtil::initializeClass);
          PyDict_SetItemString(PY_TYPE(ArrayUtil).tp_dict, "MAX_ARRAY_LENGTH", make_descriptor(ArrayUtil::MAX_ARRAY_LENGTH));
        }

        static PyObject *t_ArrayUtil_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, ArrayUtil::initializeClass, 1)))
            return NULL;
          return t_ArrayUtil::wrap_Object(ArrayUtil(((t_ArrayUtil *) arg)->object.this$));
        }
        static PyObject *t_ArrayUtil_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, ArrayUtil::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_ArrayUtil_equals(PyTypeObject *type, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 5:
            {
              JArray< jint > a0((jobject) NULL);
              jint a1;
              JArray< jint > a2((jobject) NULL);
              jint a3;
              jint a4;
              jboolean result;

              if (!parseArgs(args, "[II[III", &a0, &a1, &a2, &a3, &a4))
              {
                OBJ_CALL(result = ::org::apache::lucene::util::ArrayUtil::equals(a0, a1, a2, a3, a4));
                Py_RETURN_BOOL(result);
              }
            }
            {
              JArray< jchar > a0((jobject) NULL);
              jint a1;
              JArray< jchar > a2((jobject) NULL);
              jint a3;
              jint a4;
              jboolean result;

              if (!parseArgs(args, "[CI[CII", &a0, &a1, &a2, &a3, &a4))
              {
                OBJ_CALL(result = ::org::apache::lucene::util::ArrayUtil::equals(a0, a1, a2, a3, a4));
                Py_RETURN_BOOL(result);
              }
            }
            {
              JArray< jbyte > a0((jobject) NULL);
              jint a1;
              JArray< jbyte > a2((jobject) NULL);
              jint a3;
              jint a4;
              jboolean result;

              if (!parseArgs(args, "[BI[BII", &a0, &a1, &a2, &a3, &a4))
              {
                OBJ_CALL(result = ::org::apache::lucene::util::ArrayUtil::equals(a0, a1, a2, a3, a4));
                Py_RETURN_BOOL(result);
              }
            }
          }

          return callSuper(type, "equals", args, 2);
        }

        static PyObject *t_ArrayUtil_getShrinkSize(PyTypeObject *type, PyObject *args)
        {
          jint a0;
          jint a1;
          jint a2;
          jint result;

          if (!parseArgs(args, "III", &a0, &a1, &a2))
          {
            OBJ_CALL(result = ::org::apache::lucene::util::ArrayUtil::getShrinkSize(a0, a1, a2));
            return PyInt_FromLong((long) result);
          }

          PyErr_SetArgsError(type, "getShrinkSize", args);
          return NULL;
        }

        static PyObject *t_ArrayUtil_grow(PyTypeObject *type, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              JArray< jfloat > a0((jobject) NULL);
              JArray< jfloat > result((jobject) NULL);

              if (!parseArgs(args, "[F", &a0))
              {
                OBJ_CALL(result = ::org::apache::lucene::util::ArrayUtil::grow(a0));
                return result.wrap();
              }
            }
            {
              JArray< jdouble > a0((jobject) NULL);
              JArray< jdouble > result((jobject) NULL);

              if (!parseArgs(args, "[D", &a0))
              {
                OBJ_CALL(result = ::org::apache::lucene::util::ArrayUtil::grow(a0));
                return result.wrap();
              }
            }
            {
              JArray< JArray< jint > > a0((jobject) NULL);
              JArray< JArray< jint > > result((jobject) NULL);

              if (!parseArgs(args, "[[I", &a0))
              {
                OBJ_CALL(result = ::org::apache::lucene::util::ArrayUtil::grow(a0));
                return JArray<jobject>(result.this$).wrap(NULL);
              }
            }
            {
              JArray< jlong > a0((jobject) NULL);
              JArray< jlong > result((jobject) NULL);

              if (!parseArgs(args, "[J", &a0))
              {
                OBJ_CALL(result = ::org::apache::lucene::util::ArrayUtil::grow(a0));
                return result.wrap();
              }
            }
            {
              JArray< jint > a0((jobject) NULL);
              JArray< jint > result((jobject) NULL);

              if (!parseArgs(args, "[I", &a0))
              {
                OBJ_CALL(result = ::org::apache::lucene::util::ArrayUtil::grow(a0));
                return result.wrap();
              }
            }
            {
              JArray< jboolean > a0((jobject) NULL);
              JArray< jboolean > result((jobject) NULL);

              if (!parseArgs(args, "[Z", &a0))
              {
                OBJ_CALL(result = ::org::apache::lucene::util::ArrayUtil::grow(a0));
                return result.wrap();
              }
            }
            {
              JArray< jchar > a0((jobject) NULL);
              JArray< jchar > result((jobject) NULL);

              if (!parseArgs(args, "[C", &a0))
              {
                OBJ_CALL(result = ::org::apache::lucene::util::ArrayUtil::grow(a0));
                return result.wrap();
              }
            }
            {
              JArray< JArray< jfloat > > a0((jobject) NULL);
              JArray< JArray< jfloat > > result((jobject) NULL);

              if (!parseArgs(args, "[[F", &a0))
              {
                OBJ_CALL(result = ::org::apache::lucene::util::ArrayUtil::grow(a0));
                return JArray<jobject>(result.this$).wrap(NULL);
              }
            }
            {
              JArray< jshort > a0((jobject) NULL);
              JArray< jshort > result((jobject) NULL);

              if (!parseArgs(args, "[S", &a0))
              {
                OBJ_CALL(result = ::org::apache::lucene::util::ArrayUtil::grow(a0));
                return result.wrap();
              }
            }
            {
              JArray< jbyte > a0((jobject) NULL);
              JArray< jbyte > result((jobject) NULL);

              if (!parseArgs(args, "[B", &a0))
              {
                OBJ_CALL(result = ::org::apache::lucene::util::ArrayUtil::grow(a0));
                return result.wrap();
              }
            }
            break;
           case 2:
            {
              JArray< jdouble > a0((jobject) NULL);
              jint a1;
              JArray< jdouble > result((jobject) NULL);

              if (!parseArgs(args, "[DI", &a0, &a1))
              {
                OBJ_CALL(result = ::org::apache::lucene::util::ArrayUtil::grow(a0, a1));
                return result.wrap();
              }
            }
            {
              JArray< jshort > a0((jobject) NULL);
              jint a1;
              JArray< jshort > result((jobject) NULL);

              if (!parseArgs(args, "[SI", &a0, &a1))
              {
                OBJ_CALL(result = ::org::apache::lucene::util::ArrayUtil::grow(a0, a1));
                return result.wrap();
              }
            }
            {
              JArray< jboolean > a0((jobject) NULL);
              jint a1;
              JArray< jboolean > result((jobject) NULL);

              if (!parseArgs(args, "[ZI", &a0, &a1))
              {
                OBJ_CALL(result = ::org::apache::lucene::util::ArrayUtil::grow(a0, a1));
                return result.wrap();
              }
            }
            {
              JArray< JArray< jint > > a0((jobject) NULL);
              jint a1;
              JArray< JArray< jint > > result((jobject) NULL);

              if (!parseArgs(args, "[[II", &a0, &a1))
              {
                OBJ_CALL(result = ::org::apache::lucene::util::ArrayUtil::grow(a0, a1));
                return JArray<jobject>(result.this$).wrap(NULL);
              }
            }
            {
              JArray< jbyte > a0((jobject) NULL);
              jint a1;
              JArray< jbyte > result((jobject) NULL);

              if (!parseArgs(args, "[BI", &a0, &a1))
              {
                OBJ_CALL(result = ::org::apache::lucene::util::ArrayUtil::grow(a0, a1));
                return result.wrap();
              }
            }
            {
              JArray< jchar > a0((jobject) NULL);
              jint a1;
              JArray< jchar > result((jobject) NULL);

              if (!parseArgs(args, "[CI", &a0, &a1))
              {
                OBJ_CALL(result = ::org::apache::lucene::util::ArrayUtil::grow(a0, a1));
                return result.wrap();
              }
            }
            {
              JArray< jlong > a0((jobject) NULL);
              jint a1;
              JArray< jlong > result((jobject) NULL);

              if (!parseArgs(args, "[JI", &a0, &a1))
              {
                OBJ_CALL(result = ::org::apache::lucene::util::ArrayUtil::grow(a0, a1));
                return result.wrap();
              }
            }
            {
              JArray< jint > a0((jobject) NULL);
              jint a1;
              JArray< jint > result((jobject) NULL);

              if (!parseArgs(args, "[II", &a0, &a1))
              {
                OBJ_CALL(result = ::org::apache::lucene::util::ArrayUtil::grow(a0, a1));
                return result.wrap();
              }
            }
            {
              JArray< JArray< jfloat > > a0((jobject) NULL);
              jint a1;
              JArray< JArray< jfloat > > result((jobject) NULL);

              if (!parseArgs(args, "[[FI", &a0, &a1))
              {
                OBJ_CALL(result = ::org::apache::lucene::util::ArrayUtil::grow(a0, a1));
                return JArray<jobject>(result.this$).wrap(NULL);
              }
            }
            {
              JArray< jfloat > a0((jobject) NULL);
              jint a1;
              JArray< jfloat > result((jobject) NULL);

              if (!parseArgs(args, "[FI", &a0, &a1))
              {
                OBJ_CALL(result = ::org::apache::lucene::util::ArrayUtil::grow(a0, a1));
                return result.wrap();
              }
            }
          }

          PyErr_SetArgsError(type, "grow", args);
          return NULL;
        }

        static PyObject *t_ArrayUtil_hashCode(PyTypeObject *type, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 3:
            {
              JArray< jchar > a0((jobject) NULL);
              jint a1;
              jint a2;
              jint result;

              if (!parseArgs(args, "[CII", &a0, &a1, &a2))
              {
                OBJ_CALL(result = ::org::apache::lucene::util::ArrayUtil::hashCode(a0, a1, a2));
                return PyInt_FromLong((long) result);
              }
            }
            {
              JArray< jbyte > a0((jobject) NULL);
              jint a1;
              jint a2;
              jint result;

              if (!parseArgs(args, "[BII", &a0, &a1, &a2))
              {
                OBJ_CALL(result = ::org::apache::lucene::util::ArrayUtil::hashCode(a0, a1, a2));
                return PyInt_FromLong((long) result);
              }
            }
          }

          return callSuper(type, "hashCode", args, 2);
        }

        static PyObject *t_ArrayUtil_introSort(PyTypeObject *type, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              JArray< ::java::lang::Comparable > a0((jobject) NULL);
              PyTypeObject **p0;

              if (!parseArgs(args, "[K", ::java::lang::Comparable::initializeClass, &a0, &p0, ::java::lang::t_Comparable::parameters_))
              {
                OBJ_CALL(::org::apache::lucene::util::ArrayUtil::introSort(a0));
                Py_RETURN_NONE;
              }
            }
            break;
           case 2:
            {
              JArray< ::java::lang::Object > a0((jobject) NULL);
              ::java::util::Comparator a1((jobject) NULL);
              PyTypeObject **p1;

              if (!parseArgs(args, "[oK", ::java::util::Comparator::initializeClass, &a0, &a1, &p1, ::java::util::t_Comparator::parameters_))
              {
                OBJ_CALL(::org::apache::lucene::util::ArrayUtil::introSort(a0, a1));
                Py_RETURN_NONE;
              }
            }
            break;
           case 3:
            {
              JArray< ::java::lang::Comparable > a0((jobject) NULL);
              PyTypeObject **p0;
              jint a1;
              jint a2;

              if (!parseArgs(args, "[KII", ::java::lang::Comparable::initializeClass, &a0, &p0, ::java::lang::t_Comparable::parameters_, &a1, &a2))
              {
                OBJ_CALL(::org::apache::lucene::util::ArrayUtil::introSort(a0, a1, a2));
                Py_RETURN_NONE;
              }
            }
            break;
           case 4:
            {
              JArray< ::java::lang::Object > a0((jobject) NULL);
              jint a1;
              jint a2;
              ::java::util::Comparator a3((jobject) NULL);
              PyTypeObject **p3;

              if (!parseArgs(args, "[oIIK", ::java::util::Comparator::initializeClass, &a0, &a1, &a2, &a3, &p3, ::java::util::t_Comparator::parameters_))
              {
                OBJ_CALL(::org::apache::lucene::util::ArrayUtil::introSort(a0, a1, a2, a3));
                Py_RETURN_NONE;
              }
            }
          }

          PyErr_SetArgsError(type, "introSort", args);
          return NULL;
        }

        static PyObject *t_ArrayUtil_naturalComparator(PyTypeObject *type)
        {
          ::java::util::Comparator result((jobject) NULL);
          OBJ_CALL(result = ::org::apache::lucene::util::ArrayUtil::naturalComparator());
          return ::java::util::t_Comparator::wrap_Object(result);
        }

        static PyObject *t_ArrayUtil_oversize(PyTypeObject *type, PyObject *args)
        {
          jint a0;
          jint a1;
          jint result;

          if (!parseArgs(args, "II", &a0, &a1))
          {
            OBJ_CALL(result = ::org::apache::lucene::util::ArrayUtil::oversize(a0, a1));
            return PyInt_FromLong((long) result);
          }

          PyErr_SetArgsError(type, "oversize", args);
          return NULL;
        }

        static PyObject *t_ArrayUtil_parseInt(PyTypeObject *type, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              JArray< jchar > a0((jobject) NULL);
              jint result;

              if (!parseArgs(args, "[C", &a0))
              {
                OBJ_CALL(result = ::org::apache::lucene::util::ArrayUtil::parseInt(a0));
                return PyInt_FromLong((long) result);
              }
            }
            break;
           case 3:
            {
              JArray< jchar > a0((jobject) NULL);
              jint a1;
              jint a2;
              jint result;

              if (!parseArgs(args, "[CII", &a0, &a1, &a2))
              {
                OBJ_CALL(result = ::org::apache::lucene::util::ArrayUtil::parseInt(a0, a1, a2));
                return PyInt_FromLong((long) result);
              }
            }
            break;
           case 4:
            {
              JArray< jchar > a0((jobject) NULL);
              jint a1;
              jint a2;
              jint a3;
              jint result;

              if (!parseArgs(args, "[CIII", &a0, &a1, &a2, &a3))
              {
                OBJ_CALL(result = ::org::apache::lucene::util::ArrayUtil::parseInt(a0, a1, a2, a3));
                return PyInt_FromLong((long) result);
              }
            }
          }

          PyErr_SetArgsError(type, "parseInt", args);
          return NULL;
        }

        static PyObject *t_ArrayUtil_shrink(PyTypeObject *type, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 2:
            {
              JArray< JArray< jfloat > > a0((jobject) NULL);
              jint a1;
              JArray< JArray< jfloat > > result((jobject) NULL);

              if (!parseArgs(args, "[[FI", &a0, &a1))
              {
                OBJ_CALL(result = ::org::apache::lucene::util::ArrayUtil::shrink(a0, a1));
                return JArray<jobject>(result.this$).wrap(NULL);
              }
            }
            {
              JArray< jlong > a0((jobject) NULL);
              jint a1;
              JArray< jlong > result((jobject) NULL);

              if (!parseArgs(args, "[JI", &a0, &a1))
              {
                OBJ_CALL(result = ::org::apache::lucene::util::ArrayUtil::shrink(a0, a1));
                return result.wrap();
              }
            }
            {
              JArray< jboolean > a0((jobject) NULL);
              jint a1;
              JArray< jboolean > result((jobject) NULL);

              if (!parseArgs(args, "[ZI", &a0, &a1))
              {
                OBJ_CALL(result = ::org::apache::lucene::util::ArrayUtil::shrink(a0, a1));
                return result.wrap();
              }
            }
            {
              JArray< jbyte > a0((jobject) NULL);
              jint a1;
              JArray< jbyte > result((jobject) NULL);

              if (!parseArgs(args, "[BI", &a0, &a1))
              {
                OBJ_CALL(result = ::org::apache::lucene::util::ArrayUtil::shrink(a0, a1));
                return result.wrap();
              }
            }
            {
              JArray< jint > a0((jobject) NULL);
              jint a1;
              JArray< jint > result((jobject) NULL);

              if (!parseArgs(args, "[II", &a0, &a1))
              {
                OBJ_CALL(result = ::org::apache::lucene::util::ArrayUtil::shrink(a0, a1));
                return result.wrap();
              }
            }
            {
              JArray< jchar > a0((jobject) NULL);
              jint a1;
              JArray< jchar > result((jobject) NULL);

              if (!parseArgs(args, "[CI", &a0, &a1))
              {
                OBJ_CALL(result = ::org::apache::lucene::util::ArrayUtil::shrink(a0, a1));
                return result.wrap();
              }
            }
            {
              JArray< JArray< jint > > a0((jobject) NULL);
              jint a1;
              JArray< JArray< jint > > result((jobject) NULL);

              if (!parseArgs(args, "[[II", &a0, &a1))
              {
                OBJ_CALL(result = ::org::apache::lucene::util::ArrayUtil::shrink(a0, a1));
                return JArray<jobject>(result.this$).wrap(NULL);
              }
            }
            {
              JArray< jshort > a0((jobject) NULL);
              jint a1;
              JArray< jshort > result((jobject) NULL);

              if (!parseArgs(args, "[SI", &a0, &a1))
              {
                OBJ_CALL(result = ::org::apache::lucene::util::ArrayUtil::shrink(a0, a1));
                return result.wrap();
              }
            }
          }

          PyErr_SetArgsError(type, "shrink", args);
          return NULL;
        }

        static PyObject *t_ArrayUtil_swap(PyTypeObject *type, PyObject *args)
        {
          JArray< ::java::lang::Object > a0((jobject) NULL);
          jint a1;
          jint a2;

          if (!parseArgs(args, "[oII", &a0, &a1, &a2))
          {
            OBJ_CALL(::org::apache::lucene::util::ArrayUtil::swap(a0, a1, a2));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError(type, "swap", args);
          return NULL;
        }

        static PyObject *t_ArrayUtil_timSort(PyTypeObject *type, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              JArray< ::java::lang::Comparable > a0((jobject) NULL);
              PyTypeObject **p0;

              if (!parseArgs(args, "[K", ::java::lang::Comparable::initializeClass, &a0, &p0, ::java::lang::t_Comparable::parameters_))
              {
                OBJ_CALL(::org::apache::lucene::util::ArrayUtil::timSort(a0));
                Py_RETURN_NONE;
              }
            }
            break;
           case 2:
            {
              JArray< ::java::lang::Object > a0((jobject) NULL);
              ::java::util::Comparator a1((jobject) NULL);
              PyTypeObject **p1;

              if (!parseArgs(args, "[oK", ::java::util::Comparator::initializeClass, &a0, &a1, &p1, ::java::util::t_Comparator::parameters_))
              {
                OBJ_CALL(::org::apache::lucene::util::ArrayUtil::timSort(a0, a1));
                Py_RETURN_NONE;
              }
            }
            break;
           case 3:
            {
              JArray< ::java::lang::Comparable > a0((jobject) NULL);
              PyTypeObject **p0;
              jint a1;
              jint a2;

              if (!parseArgs(args, "[KII", ::java::lang::Comparable::initializeClass, &a0, &p0, ::java::lang::t_Comparable::parameters_, &a1, &a2))
              {
                OBJ_CALL(::org::apache::lucene::util::ArrayUtil::timSort(a0, a1, a2));
                Py_RETURN_NONE;
              }
            }
            break;
           case 4:
            {
              JArray< ::java::lang::Object > a0((jobject) NULL);
              jint a1;
              jint a2;
              ::java::util::Comparator a3((jobject) NULL);
              PyTypeObject **p3;

              if (!parseArgs(args, "[oIIK", ::java::util::Comparator::initializeClass, &a0, &a1, &a2, &a3, &p3, ::java::util::t_Comparator::parameters_))
              {
                OBJ_CALL(::org::apache::lucene::util::ArrayUtil::timSort(a0, a1, a2, a3));
                Py_RETURN_NONE;
              }
            }
          }

          PyErr_SetArgsError(type, "timSort", args);
          return NULL;
        }

        static PyObject *t_ArrayUtil_toIntArray(PyTypeObject *type, PyObject *arg)
        {
          ::java::util::Collection a0((jobject) NULL);
          PyTypeObject **p0;
          JArray< jint > result((jobject) NULL);

          if (!parseArg(arg, "K", ::java::util::Collection::initializeClass, &a0, &p0, ::java::util::t_Collection::parameters_))
          {
            OBJ_CALL(result = ::org::apache::lucene::util::ArrayUtil::toIntArray(a0));
            return result.wrap();
          }

          PyErr_SetArgsError(type, "toIntArray", arg);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/facet/sortedset/SortedSetDocValuesReaderState.h"
#include "java/lang/Class.h"
#include "java/util/Map.h"
#include "java/lang/String.h"
#include "org/apache/lucene/index/SortedSetDocValues.h"
#include "org/apache/lucene/facet/sortedset/SortedSetDocValuesReaderState$OrdRange.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace sortedset {

          ::java::lang::Class *SortedSetDocValuesReaderState::class$ = NULL;
          jmethodID *SortedSetDocValuesReaderState::mids$ = NULL;
          bool SortedSetDocValuesReaderState::live$ = false;

          jclass SortedSetDocValuesReaderState::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/facet/sortedset/SortedSetDocValuesReaderState");

              mids$ = new jmethodID[max_mid];
              mids$[mid_getDocValues_4bead171] = env->getMethodID(cls, "getDocValues", "()Lorg/apache/lucene/index/SortedSetDocValues;");
              mids$[mid_getField_14c7b5c5] = env->getMethodID(cls, "getField", "()Ljava/lang/String;");
              mids$[mid_getOrdRange_73e2ee38] = env->getMethodID(cls, "getOrdRange", "(Ljava/lang/String;)Lorg/apache/lucene/facet/sortedset/SortedSetDocValuesReaderState$OrdRange;");
              mids$[mid_getOrigReader_94bbd010] = env->getMethodID(cls, "getOrigReader", "()Lorg/apache/lucene/index/IndexReader;");
              mids$[mid_getPrefixToOrdRange_db60befd] = env->getMethodID(cls, "getPrefixToOrdRange", "()Ljava/util/Map;");
              mids$[mid_getSize_54c6a179] = env->getMethodID(cls, "getSize", "()I");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ::org::apache::lucene::index::SortedSetDocValues SortedSetDocValuesReaderState::getDocValues() const
          {
            return ::org::apache::lucene::index::SortedSetDocValues(env->callObjectMethod(this$, mids$[mid_getDocValues_4bead171]));
          }

          ::java::lang::String SortedSetDocValuesReaderState::getField() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getField_14c7b5c5]));
          }

          ::org::apache::lucene::facet::sortedset::SortedSetDocValuesReaderState$OrdRange SortedSetDocValuesReaderState::getOrdRange(const ::java::lang::String & a0) const
          {
            return ::org::apache::lucene::facet::sortedset::SortedSetDocValuesReaderState$OrdRange(env->callObjectMethod(this$, mids$[mid_getOrdRange_73e2ee38], a0.this$));
          }

          ::org::apache::lucene::index::IndexReader SortedSetDocValuesReaderState::getOrigReader() const
          {
            return ::org::apache::lucene::index::IndexReader(env->callObjectMethod(this$, mids$[mid_getOrigReader_94bbd010]));
          }

          ::java::util::Map SortedSetDocValuesReaderState::getPrefixToOrdRange() const
          {
            return ::java::util::Map(env->callObjectMethod(this$, mids$[mid_getPrefixToOrdRange_db60befd]));
          }

          jint SortedSetDocValuesReaderState::getSize() const
          {
            return env->callIntMethod(this$, mids$[mid_getSize_54c6a179]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace sortedset {
          static PyObject *t_SortedSetDocValuesReaderState_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SortedSetDocValuesReaderState_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SortedSetDocValuesReaderState_getDocValues(t_SortedSetDocValuesReaderState *self);
          static PyObject *t_SortedSetDocValuesReaderState_getField(t_SortedSetDocValuesReaderState *self);
          static PyObject *t_SortedSetDocValuesReaderState_getOrdRange(t_SortedSetDocValuesReaderState *self, PyObject *arg);
          static PyObject *t_SortedSetDocValuesReaderState_getOrigReader(t_SortedSetDocValuesReaderState *self);
          static PyObject *t_SortedSetDocValuesReaderState_getPrefixToOrdRange(t_SortedSetDocValuesReaderState *self);
          static PyObject *t_SortedSetDocValuesReaderState_getSize(t_SortedSetDocValuesReaderState *self);
          static PyObject *t_SortedSetDocValuesReaderState_get__docValues(t_SortedSetDocValuesReaderState *self, void *data);
          static PyObject *t_SortedSetDocValuesReaderState_get__field(t_SortedSetDocValuesReaderState *self, void *data);
          static PyObject *t_SortedSetDocValuesReaderState_get__origReader(t_SortedSetDocValuesReaderState *self, void *data);
          static PyObject *t_SortedSetDocValuesReaderState_get__prefixToOrdRange(t_SortedSetDocValuesReaderState *self, void *data);
          static PyObject *t_SortedSetDocValuesReaderState_get__size(t_SortedSetDocValuesReaderState *self, void *data);
          static PyGetSetDef t_SortedSetDocValuesReaderState__fields_[] = {
            DECLARE_GET_FIELD(t_SortedSetDocValuesReaderState, docValues),
            DECLARE_GET_FIELD(t_SortedSetDocValuesReaderState, field),
            DECLARE_GET_FIELD(t_SortedSetDocValuesReaderState, origReader),
            DECLARE_GET_FIELD(t_SortedSetDocValuesReaderState, prefixToOrdRange),
            DECLARE_GET_FIELD(t_SortedSetDocValuesReaderState, size),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_SortedSetDocValuesReaderState__methods_[] = {
            DECLARE_METHOD(t_SortedSetDocValuesReaderState, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SortedSetDocValuesReaderState, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SortedSetDocValuesReaderState, getDocValues, METH_NOARGS),
            DECLARE_METHOD(t_SortedSetDocValuesReaderState, getField, METH_NOARGS),
            DECLARE_METHOD(t_SortedSetDocValuesReaderState, getOrdRange, METH_O),
            DECLARE_METHOD(t_SortedSetDocValuesReaderState, getOrigReader, METH_NOARGS),
            DECLARE_METHOD(t_SortedSetDocValuesReaderState, getPrefixToOrdRange, METH_NOARGS),
            DECLARE_METHOD(t_SortedSetDocValuesReaderState, getSize, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(SortedSetDocValuesReaderState, t_SortedSetDocValuesReaderState, ::java::lang::Object, SortedSetDocValuesReaderState, abstract_init, 0, 0, t_SortedSetDocValuesReaderState__fields_, 0, 0);

          void t_SortedSetDocValuesReaderState::install(PyObject *module)
          {
            installType(&PY_TYPE(SortedSetDocValuesReaderState), module, "SortedSetDocValuesReaderState", 0);
            PyDict_SetItemString(PY_TYPE(SortedSetDocValuesReaderState).tp_dict, "OrdRange", make_descriptor(&PY_TYPE(SortedSetDocValuesReaderState$OrdRange)));
          }

          void t_SortedSetDocValuesReaderState::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(SortedSetDocValuesReaderState).tp_dict, "class_", make_descriptor(SortedSetDocValuesReaderState::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(SortedSetDocValuesReaderState).tp_dict, "wrapfn_", make_descriptor(t_SortedSetDocValuesReaderState::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(SortedSetDocValuesReaderState).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_SortedSetDocValuesReaderState_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, SortedSetDocValuesReaderState::initializeClass, 1)))
              return NULL;
            return t_SortedSetDocValuesReaderState::wrap_Object(SortedSetDocValuesReaderState(((t_SortedSetDocValuesReaderState *) arg)->object.this$));
          }
          static PyObject *t_SortedSetDocValuesReaderState_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, SortedSetDocValuesReaderState::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_SortedSetDocValuesReaderState_getDocValues(t_SortedSetDocValuesReaderState *self)
          {
            ::org::apache::lucene::index::SortedSetDocValues result((jobject) NULL);
            OBJ_CALL(result = self->object.getDocValues());
            return ::org::apache::lucene::index::t_SortedSetDocValues::wrap_Object(result);
          }

          static PyObject *t_SortedSetDocValuesReaderState_getField(t_SortedSetDocValuesReaderState *self)
          {
            ::java::lang::String result((jobject) NULL);
            OBJ_CALL(result = self->object.getField());
            return j2p(result);
          }

          static PyObject *t_SortedSetDocValuesReaderState_getOrdRange(t_SortedSetDocValuesReaderState *self, PyObject *arg)
          {
            ::java::lang::String a0((jobject) NULL);
            ::org::apache::lucene::facet::sortedset::SortedSetDocValuesReaderState$OrdRange result((jobject) NULL);

            if (!parseArg(arg, "s", &a0))
            {
              OBJ_CALL(result = self->object.getOrdRange(a0));
              return ::org::apache::lucene::facet::sortedset::t_SortedSetDocValuesReaderState$OrdRange::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "getOrdRange", arg);
            return NULL;
          }

          static PyObject *t_SortedSetDocValuesReaderState_getOrigReader(t_SortedSetDocValuesReaderState *self)
          {
            ::org::apache::lucene::index::IndexReader result((jobject) NULL);
            OBJ_CALL(result = self->object.getOrigReader());
            return ::org::apache::lucene::index::t_IndexReader::wrap_Object(result);
          }

          static PyObject *t_SortedSetDocValuesReaderState_getPrefixToOrdRange(t_SortedSetDocValuesReaderState *self)
          {
            ::java::util::Map result((jobject) NULL);
            OBJ_CALL(result = self->object.getPrefixToOrdRange());
            return ::java::util::t_Map::wrap_Object(result, &::java::lang::PY_TYPE(String), &::org::apache::lucene::facet::sortedset::PY_TYPE(SortedSetDocValuesReaderState$OrdRange));
          }

          static PyObject *t_SortedSetDocValuesReaderState_getSize(t_SortedSetDocValuesReaderState *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getSize());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_SortedSetDocValuesReaderState_get__docValues(t_SortedSetDocValuesReaderState *self, void *data)
          {
            ::org::apache::lucene::index::SortedSetDocValues value((jobject) NULL);
            OBJ_CALL(value = self->object.getDocValues());
            return ::org::apache::lucene::index::t_SortedSetDocValues::wrap_Object(value);
          }

          static PyObject *t_SortedSetDocValuesReaderState_get__field(t_SortedSetDocValuesReaderState *self, void *data)
          {
            ::java::lang::String value((jobject) NULL);
            OBJ_CALL(value = self->object.getField());
            return j2p(value);
          }

          static PyObject *t_SortedSetDocValuesReaderState_get__origReader(t_SortedSetDocValuesReaderState *self, void *data)
          {
            ::org::apache::lucene::index::IndexReader value((jobject) NULL);
            OBJ_CALL(value = self->object.getOrigReader());
            return ::org::apache::lucene::index::t_IndexReader::wrap_Object(value);
          }

          static PyObject *t_SortedSetDocValuesReaderState_get__prefixToOrdRange(t_SortedSetDocValuesReaderState *self, void *data)
          {
            ::java::util::Map value((jobject) NULL);
            OBJ_CALL(value = self->object.getPrefixToOrdRange());
            return ::java::util::t_Map::wrap_Object(value);
          }

          static PyObject *t_SortedSetDocValuesReaderState_get__size(t_SortedSetDocValuesReaderState *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getSize());
            return PyInt_FromLong((long) value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/analyzing/AnalyzingQueryParser.h"
#include "org/apache/lucene/analysis/Analyzer.h"
#include "org/apache/lucene/util/Version.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace analyzing {

          ::java::lang::Class *AnalyzingQueryParser::class$ = NULL;
          jmethodID *AnalyzingQueryParser::mids$ = NULL;
          bool AnalyzingQueryParser::live$ = false;

          jclass AnalyzingQueryParser::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/analyzing/AnalyzingQueryParser");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_504c192d] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Ljava/lang/String;Lorg/apache/lucene/analysis/Analyzer;)V");
              mids$[mid_getWildcardQuery_38d6e77e] = env->getMethodID(cls, "getWildcardQuery", "(Ljava/lang/String;Ljava/lang/String;)Lorg/apache/lucene/search/Query;");
              mids$[mid_getFuzzyQuery_45995161] = env->getMethodID(cls, "getFuzzyQuery", "(Ljava/lang/String;Ljava/lang/String;F)Lorg/apache/lucene/search/Query;");
              mids$[mid_getPrefixQuery_38d6e77e] = env->getMethodID(cls, "getPrefixQuery", "(Ljava/lang/String;Ljava/lang/String;)Lorg/apache/lucene/search/Query;");
              mids$[mid_analyzeSingleChunk_af6d27e3] = env->getMethodID(cls, "analyzeSingleChunk", "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          AnalyzingQueryParser::AnalyzingQueryParser(const ::org::apache::lucene::util::Version & a0, const ::java::lang::String & a1, const ::org::apache::lucene::analysis::Analyzer & a2) : ::org::apache::lucene::queryparser::classic::QueryParser(env->newObject(initializeClass, &mids$, mid_init$_504c192d, a0.this$, a1.this$, a2.this$)) {}
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace analyzing {
          static PyObject *t_AnalyzingQueryParser_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_AnalyzingQueryParser_instance_(PyTypeObject *type, PyObject *arg);
          static int t_AnalyzingQueryParser_init_(t_AnalyzingQueryParser *self, PyObject *args, PyObject *kwds);

          static PyMethodDef t_AnalyzingQueryParser__methods_[] = {
            DECLARE_METHOD(t_AnalyzingQueryParser, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_AnalyzingQueryParser, instance_, METH_O | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(AnalyzingQueryParser, t_AnalyzingQueryParser, ::org::apache::lucene::queryparser::classic::QueryParser, AnalyzingQueryParser, t_AnalyzingQueryParser_init_, 0, 0, 0, 0, 0);

          void t_AnalyzingQueryParser::install(PyObject *module)
          {
            installType(&PY_TYPE(AnalyzingQueryParser), module, "AnalyzingQueryParser", 0);
          }

          void t_AnalyzingQueryParser::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(AnalyzingQueryParser).tp_dict, "class_", make_descriptor(AnalyzingQueryParser::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(AnalyzingQueryParser).tp_dict, "wrapfn_", make_descriptor(t_AnalyzingQueryParser::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(AnalyzingQueryParser).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_AnalyzingQueryParser_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, AnalyzingQueryParser::initializeClass, 1)))
              return NULL;
            return t_AnalyzingQueryParser::wrap_Object(AnalyzingQueryParser(((t_AnalyzingQueryParser *) arg)->object.this$));
          }
          static PyObject *t_AnalyzingQueryParser_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, AnalyzingQueryParser::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_AnalyzingQueryParser_init_(t_AnalyzingQueryParser *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::util::Version a0((jobject) NULL);
            PyTypeObject **p0;
            ::java::lang::String a1((jobject) NULL);
            ::org::apache::lucene::analysis::Analyzer a2((jobject) NULL);
            AnalyzingQueryParser object((jobject) NULL);

            if (!parseArgs(args, "Ksk", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::Analyzer::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1, &a2))
            {
              INT_CALL(object = AnalyzingQueryParser(a0, a1, a2));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/surround/query/DistanceSubQuery.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/queryparser/surround/query/SpanNearClauseFactory.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace surround {
          namespace query {

            ::java::lang::Class *DistanceSubQuery::class$ = NULL;
            jmethodID *DistanceSubQuery::mids$ = NULL;
            bool DistanceSubQuery::live$ = false;

            jclass DistanceSubQuery::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/surround/query/DistanceSubQuery");

                mids$ = new jmethodID[max_mid];
                mids$[mid_addSpanQueries_0564f431] = env->getMethodID(cls, "addSpanQueries", "(Lorg/apache/lucene/queryparser/surround/query/SpanNearClauseFactory;)V");
                mids$[mid_distanceSubQueryNotAllowed_14c7b5c5] = env->getMethodID(cls, "distanceSubQueryNotAllowed", "()Ljava/lang/String;");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            void DistanceSubQuery::addSpanQueries(const ::org::apache::lucene::queryparser::surround::query::SpanNearClauseFactory & a0) const
            {
              env->callVoidMethod(this$, mids$[mid_addSpanQueries_0564f431], a0.this$);
            }

            ::java::lang::String DistanceSubQuery::distanceSubQueryNotAllowed() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_distanceSubQueryNotAllowed_14c7b5c5]));
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace surround {
          namespace query {
            static PyObject *t_DistanceSubQuery_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_DistanceSubQuery_instance_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_DistanceSubQuery_addSpanQueries(t_DistanceSubQuery *self, PyObject *arg);
            static PyObject *t_DistanceSubQuery_distanceSubQueryNotAllowed(t_DistanceSubQuery *self);

            static PyMethodDef t_DistanceSubQuery__methods_[] = {
              DECLARE_METHOD(t_DistanceSubQuery, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_DistanceSubQuery, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_DistanceSubQuery, addSpanQueries, METH_O),
              DECLARE_METHOD(t_DistanceSubQuery, distanceSubQueryNotAllowed, METH_NOARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(DistanceSubQuery, t_DistanceSubQuery, ::java::lang::Object, DistanceSubQuery, abstract_init, 0, 0, 0, 0, 0);

            void t_DistanceSubQuery::install(PyObject *module)
            {
              installType(&PY_TYPE(DistanceSubQuery), module, "DistanceSubQuery", 0);
            }

            void t_DistanceSubQuery::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(DistanceSubQuery).tp_dict, "class_", make_descriptor(DistanceSubQuery::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(DistanceSubQuery).tp_dict, "wrapfn_", make_descriptor(t_DistanceSubQuery::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(DistanceSubQuery).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_DistanceSubQuery_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, DistanceSubQuery::initializeClass, 1)))
                return NULL;
              return t_DistanceSubQuery::wrap_Object(DistanceSubQuery(((t_DistanceSubQuery *) arg)->object.this$));
            }
            static PyObject *t_DistanceSubQuery_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, DistanceSubQuery::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static PyObject *t_DistanceSubQuery_addSpanQueries(t_DistanceSubQuery *self, PyObject *arg)
            {
              ::org::apache::lucene::queryparser::surround::query::SpanNearClauseFactory a0((jobject) NULL);

              if (!parseArg(arg, "k", ::org::apache::lucene::queryparser::surround::query::SpanNearClauseFactory::initializeClass, &a0))
              {
                OBJ_CALL(self->object.addSpanQueries(a0));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "addSpanQueries", arg);
              return NULL;
            }

            static PyObject *t_DistanceSubQuery_distanceSubQueryNotAllowed(t_DistanceSubQuery *self)
            {
              ::java::lang::String result((jobject) NULL);
              OBJ_CALL(result = self->object.distanceSubQueryNotAllowed());
              return j2p(result);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/expressions/js/JavascriptParser$logical_or_return.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace expressions {
        namespace js {

          ::java::lang::Class *JavascriptParser$logical_or_return::class$ = NULL;
          jmethodID *JavascriptParser$logical_or_return::mids$ = NULL;
          bool JavascriptParser$logical_or_return::live$ = false;

          jclass JavascriptParser$logical_or_return::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/expressions/js/JavascriptParser$logical_or_return");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          JavascriptParser$logical_or_return::JavascriptParser$logical_or_return() : ::org::antlr::runtime::ParserRuleReturnScope(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace expressions {
        namespace js {
          static PyObject *t_JavascriptParser$logical_or_return_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_JavascriptParser$logical_or_return_instance_(PyTypeObject *type, PyObject *arg);
          static int t_JavascriptParser$logical_or_return_init_(t_JavascriptParser$logical_or_return *self, PyObject *args, PyObject *kwds);

          static PyMethodDef t_JavascriptParser$logical_or_return__methods_[] = {
            DECLARE_METHOD(t_JavascriptParser$logical_or_return, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_JavascriptParser$logical_or_return, instance_, METH_O | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(JavascriptParser$logical_or_return, t_JavascriptParser$logical_or_return, ::org::antlr::runtime::ParserRuleReturnScope, JavascriptParser$logical_or_return, t_JavascriptParser$logical_or_return_init_, 0, 0, 0, 0, 0);

          void t_JavascriptParser$logical_or_return::install(PyObject *module)
          {
            installType(&PY_TYPE(JavascriptParser$logical_or_return), module, "JavascriptParser$logical_or_return", 0);
          }

          void t_JavascriptParser$logical_or_return::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(JavascriptParser$logical_or_return).tp_dict, "class_", make_descriptor(JavascriptParser$logical_or_return::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(JavascriptParser$logical_or_return).tp_dict, "wrapfn_", make_descriptor(t_JavascriptParser$logical_or_return::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(JavascriptParser$logical_or_return).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_JavascriptParser$logical_or_return_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, JavascriptParser$logical_or_return::initializeClass, 1)))
              return NULL;
            return t_JavascriptParser$logical_or_return::wrap_Object(JavascriptParser$logical_or_return(((t_JavascriptParser$logical_or_return *) arg)->object.this$));
          }
          static PyObject *t_JavascriptParser$logical_or_return_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, JavascriptParser$logical_or_return::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_JavascriptParser$logical_or_return_init_(t_JavascriptParser$logical_or_return *self, PyObject *args, PyObject *kwds)
          {
            JavascriptParser$logical_or_return object((jobject) NULL);

            INT_CALL(object = JavascriptParser$logical_or_return());
            self->object = object;

            return 0;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/pylucene/search/PythonFilter.h"
#include "org/apache/lucene/util/Bits.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "java/io/IOException.h"
#include "java/lang/Throwable.h"
#include "org/apache/lucene/search/DocIdSet.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace pylucene {
      namespace search {

        ::java::lang::Class *PythonFilter::class$ = NULL;
        jmethodID *PythonFilter::mids$ = NULL;
        bool PythonFilter::live$ = false;

        jclass PythonFilter::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/pylucene/search/PythonFilter");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_finalize_54c6a166] = env->getMethodID(cls, "finalize", "()V");
            mids$[mid_getDocIdSet_ccce0897] = env->getMethodID(cls, "getDocIdSet", "(Lorg/apache/lucene/index/AtomicReaderContext;Lorg/apache/lucene/util/Bits;)Lorg/apache/lucene/search/DocIdSet;");
            mids$[mid_pythonDecRef_54c6a166] = env->getMethodID(cls, "pythonDecRef", "()V");
            mids$[mid_pythonExtension_54c6a17a] = env->getMethodID(cls, "pythonExtension", "()J");
            mids$[mid_pythonExtension_0ee6df2f] = env->getMethodID(cls, "pythonExtension", "(J)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        PythonFilter::PythonFilter() : ::org::apache::lucene::search::Filter(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        void PythonFilter::finalize() const
        {
          env->callVoidMethod(this$, mids$[mid_finalize_54c6a166]);
        }

        jlong PythonFilter::pythonExtension() const
        {
          return env->callLongMethod(this$, mids$[mid_pythonExtension_54c6a17a]);
        }

        void PythonFilter::pythonExtension(jlong a0) const
        {
          env->callVoidMethod(this$, mids$[mid_pythonExtension_0ee6df2f], a0);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace pylucene {
      namespace search {
        static PyObject *t_PythonFilter_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_PythonFilter_instance_(PyTypeObject *type, PyObject *arg);
        static int t_PythonFilter_init_(t_PythonFilter *self, PyObject *args, PyObject *kwds);
        static PyObject *t_PythonFilter_finalize(t_PythonFilter *self);
        static PyObject *t_PythonFilter_pythonExtension(t_PythonFilter *self, PyObject *args);
        static jobject JNICALL t_PythonFilter_getDocIdSet0(JNIEnv *jenv, jobject jobj, jobject a0, jobject a1);
        static void JNICALL t_PythonFilter_pythonDecRef1(JNIEnv *jenv, jobject jobj);
        static PyObject *t_PythonFilter_get__self(t_PythonFilter *self, void *data);
        static PyGetSetDef t_PythonFilter__fields_[] = {
          DECLARE_GET_FIELD(t_PythonFilter, self),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_PythonFilter__methods_[] = {
          DECLARE_METHOD(t_PythonFilter, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PythonFilter, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PythonFilter, finalize, METH_NOARGS),
          DECLARE_METHOD(t_PythonFilter, pythonExtension, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(PythonFilter, t_PythonFilter, ::org::apache::lucene::search::Filter, PythonFilter, t_PythonFilter_init_, 0, 0, t_PythonFilter__fields_, 0, 0);

        void t_PythonFilter::install(PyObject *module)
        {
          installType(&PY_TYPE(PythonFilter), module, "PythonFilter", 1);
        }

        void t_PythonFilter::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(PythonFilter).tp_dict, "class_", make_descriptor(PythonFilter::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(PythonFilter).tp_dict, "wrapfn_", make_descriptor(t_PythonFilter::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(PythonFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
          jclass cls = env->getClass(PythonFilter::initializeClass);
          JNINativeMethod methods[] = {
            { "getDocIdSet", "(Lorg/apache/lucene/index/AtomicReaderContext;Lorg/apache/lucene/util/Bits;)Lorg/apache/lucene/search/DocIdSet;", (void *) t_PythonFilter_getDocIdSet0 },
            { "pythonDecRef", "()V", (void *) t_PythonFilter_pythonDecRef1 },
          };
          env->registerNatives(cls, methods, 2);
        }

        static PyObject *t_PythonFilter_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, PythonFilter::initializeClass, 1)))
            return NULL;
          return t_PythonFilter::wrap_Object(PythonFilter(((t_PythonFilter *) arg)->object.this$));
        }
        static PyObject *t_PythonFilter_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, PythonFilter::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_PythonFilter_init_(t_PythonFilter *self, PyObject *args, PyObject *kwds)
        {
          PythonFilter object((jobject) NULL);

          INT_CALL(object = PythonFilter());
          self->object = object;

          Py_INCREF((PyObject *) self);
          self->object.pythonExtension((jlong) (Py_intptr_t) (void *) self);

          return 0;
        }

        static PyObject *t_PythonFilter_finalize(t_PythonFilter *self)
        {
          OBJ_CALL(self->object.finalize());
          Py_RETURN_NONE;
        }

        static PyObject *t_PythonFilter_pythonExtension(t_PythonFilter *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 0:
            {
              jlong result;
              OBJ_CALL(result = self->object.pythonExtension());
              return PyLong_FromLongLong((PY_LONG_LONG) result);
            }
            break;
           case 1:
            {
              jlong a0;

              if (!parseArgs(args, "J", &a0))
              {
                OBJ_CALL(self->object.pythonExtension(a0));
                Py_RETURN_NONE;
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "pythonExtension", args);
          return NULL;
        }

        static jobject JNICALL t_PythonFilter_getDocIdSet0(JNIEnv *jenv, jobject jobj, jobject a0, jobject a1)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonFilter::mids$[PythonFilter::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          ::org::apache::lucene::search::DocIdSet value((jobject) NULL);
          PyObject *o0 = ::org::apache::lucene::index::t_AtomicReaderContext::wrap_Object(::org::apache::lucene::index::AtomicReaderContext(a0));
          PyObject *o1 = ::org::apache::lucene::util::t_Bits::wrap_Object(::org::apache::lucene::util::Bits(a1));
          PyObject *result = PyObject_CallMethod(obj, "getDocIdSet", "OO", o0, o1);
          Py_DECREF(o0);
          Py_DECREF(o1);
          if (!result)
            throwPythonError();
          else if (parseArg(result, "k", ::org::apache::lucene::search::DocIdSet::initializeClass, &value))
          {
            throwTypeError("getDocIdSet", result);
            Py_DECREF(result);
          }
          else
          {
            jobj = jenv->NewLocalRef(value.this$);
            Py_DECREF(result);
            return jobj;
          }

          return (jobject) NULL;
        }

        static void JNICALL t_PythonFilter_pythonDecRef1(JNIEnv *jenv, jobject jobj)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonFilter::mids$[PythonFilter::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;

          if (obj != NULL)
          {
            jenv->CallVoidMethod(jobj, PythonFilter::mids$[PythonFilter::mid_pythonExtension_0ee6df2f], (jlong) 0);
            env->finalizeObject(jenv, obj);
          }
        }

        static PyObject *t_PythonFilter_get__self(t_PythonFilter *self, void *data)
        {
          jlong ptr;
          OBJ_CALL(ptr = self->object.pythonExtension());
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;

          if (obj != NULL)
          {
            Py_INCREF(obj);
            return obj;
          }
          else
            Py_RETURN_NONE;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyWriter.h"
#include "org/apache/lucene/index/IndexWriterConfig$OpenMode.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyWriter$OrdinalMap.h"
#include "java/util/Map.h"
#include "org/apache/lucene/store/Directory.h"
#include "org/apache/lucene/facet/taxonomy/FacetLabel.h"
#include "org/apache/lucene/facet/taxonomy/TaxonomyWriter.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/facet/taxonomy/writercache/TaxonomyWriterCache.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace taxonomy {
          namespace directory {

            ::java::lang::Class *DirectoryTaxonomyWriter::class$ = NULL;
            jmethodID *DirectoryTaxonomyWriter::mids$ = NULL;
            bool DirectoryTaxonomyWriter::live$ = false;
            ::java::lang::String *DirectoryTaxonomyWriter::INDEX_EPOCH = NULL;

            jclass DirectoryTaxonomyWriter::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyWriter");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_2e261ef2] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/store/Directory;)V");
                mids$[mid_init$_288989fd] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/store/Directory;Lorg/apache/lucene/index/IndexWriterConfig$OpenMode;)V");
                mids$[mid_init$_c98cdfb3] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/store/Directory;Lorg/apache/lucene/index/IndexWriterConfig$OpenMode;Lorg/apache/lucene/facet/taxonomy/writercache/TaxonomyWriterCache;)V");
                mids$[mid_addCategory_283f83f5] = env->getMethodID(cls, "addCategory", "(Lorg/apache/lucene/facet/taxonomy/FacetLabel;)I");
                mids$[mid_addTaxonomy_0e53fb1b] = env->getMethodID(cls, "addTaxonomy", "(Lorg/apache/lucene/store/Directory;Lorg/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyWriter$OrdinalMap;)V");
                mids$[mid_close_54c6a166] = env->getMethodID(cls, "close", "()V");
                mids$[mid_commit_54c6a166] = env->getMethodID(cls, "commit", "()V");
                mids$[mid_defaultTaxonomyWriterCache_3cef12bd] = env->getStaticMethodID(cls, "defaultTaxonomyWriterCache", "()Lorg/apache/lucene/facet/taxonomy/writercache/TaxonomyWriterCache;");
                mids$[mid_getCommitData_db60befd] = env->getMethodID(cls, "getCommitData", "()Ljava/util/Map;");
                mids$[mid_getDirectory_1f3934bb] = env->getMethodID(cls, "getDirectory", "()Lorg/apache/lucene/store/Directory;");
                mids$[mid_getParent_39c7bd23] = env->getMethodID(cls, "getParent", "(I)I");
                mids$[mid_getSize_54c6a179] = env->getMethodID(cls, "getSize", "()I");
                mids$[mid_getTaxonomyEpoch_54c6a17a] = env->getMethodID(cls, "getTaxonomyEpoch", "()J");
                mids$[mid_prepareCommit_54c6a166] = env->getMethodID(cls, "prepareCommit", "()V");
                mids$[mid_replaceTaxonomy_2e261ef2] = env->getMethodID(cls, "replaceTaxonomy", "(Lorg/apache/lucene/store/Directory;)V");
                mids$[mid_rollback_54c6a166] = env->getMethodID(cls, "rollback", "()V");
                mids$[mid_setCacheMissesUntilFill_39c7bd3c] = env->getMethodID(cls, "setCacheMissesUntilFill", "(I)V");
                mids$[mid_setCommitData_4c9e2b1c] = env->getMethodID(cls, "setCommitData", "(Ljava/util/Map;)V");
                mids$[mid_unlock_2e261ef2] = env->getStaticMethodID(cls, "unlock", "(Lorg/apache/lucene/store/Directory;)V");
                mids$[mid_ensureOpen_54c6a166] = env->getMethodID(cls, "ensureOpen", "()V");
                mids$[mid_openIndexWriter_cd637c77] = env->getMethodID(cls, "openIndexWriter", "(Lorg/apache/lucene/store/Directory;Lorg/apache/lucene/index/IndexWriterConfig;)Lorg/apache/lucene/index/IndexWriter;");
                mids$[mid_createIndexWriterConfig_ecf4c6f7] = env->getMethodID(cls, "createIndexWriterConfig", "(Lorg/apache/lucene/index/IndexWriterConfig$OpenMode;)Lorg/apache/lucene/index/IndexWriterConfig;");
                mids$[mid_closeResources_54c6a166] = env->getMethodID(cls, "closeResources", "()V");
                mids$[mid_findCategory_283f83f5] = env->getMethodID(cls, "findCategory", "(Lorg/apache/lucene/facet/taxonomy/FacetLabel;)I");

                class$ = (::java::lang::Class *) new JObject(cls);
                cls = (jclass) class$->this$;

                INDEX_EPOCH = new ::java::lang::String(env->getStaticObjectField(cls, "INDEX_EPOCH", "Ljava/lang/String;"));
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            DirectoryTaxonomyWriter::DirectoryTaxonomyWriter(const ::org::apache::lucene::store::Directory & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_2e261ef2, a0.this$)) {}

            DirectoryTaxonomyWriter::DirectoryTaxonomyWriter(const ::org::apache::lucene::store::Directory & a0, const ::org::apache::lucene::index::IndexWriterConfig$OpenMode & a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_288989fd, a0.this$, a1.this$)) {}

            DirectoryTaxonomyWriter::DirectoryTaxonomyWriter(const ::org::apache::lucene::store::Directory & a0, const ::org::apache::lucene::index::IndexWriterConfig$OpenMode & a1, const ::org::apache::lucene::facet::taxonomy::writercache::TaxonomyWriterCache & a2) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_c98cdfb3, a0.this$, a1.this$, a2.this$)) {}

            jint DirectoryTaxonomyWriter::addCategory(const ::org::apache::lucene::facet::taxonomy::FacetLabel & a0) const
            {
              return env->callIntMethod(this$, mids$[mid_addCategory_283f83f5], a0.this$);
            }

            void DirectoryTaxonomyWriter::addTaxonomy(const ::org::apache::lucene::store::Directory & a0, const ::org::apache::lucene::facet::taxonomy::directory::DirectoryTaxonomyWriter$OrdinalMap & a1) const
            {
              env->callVoidMethod(this$, mids$[mid_addTaxonomy_0e53fb1b], a0.this$, a1.this$);
            }

            void DirectoryTaxonomyWriter::close() const
            {
              env->callVoidMethod(this$, mids$[mid_close_54c6a166]);
            }

            void DirectoryTaxonomyWriter::commit() const
            {
              env->callVoidMethod(this$, mids$[mid_commit_54c6a166]);
            }

            ::org::apache::lucene::facet::taxonomy::writercache::TaxonomyWriterCache DirectoryTaxonomyWriter::defaultTaxonomyWriterCache()
            {
              jclass cls = env->getClass(initializeClass);
              return ::org::apache::lucene::facet::taxonomy::writercache::TaxonomyWriterCache(env->callStaticObjectMethod(cls, mids$[mid_defaultTaxonomyWriterCache_3cef12bd]));
            }

            ::java::util::Map DirectoryTaxonomyWriter::getCommitData() const
            {
              return ::java::util::Map(env->callObjectMethod(this$, mids$[mid_getCommitData_db60befd]));
            }

            ::org::apache::lucene::store::Directory DirectoryTaxonomyWriter::getDirectory() const
            {
              return ::org::apache::lucene::store::Directory(env->callObjectMethod(this$, mids$[mid_getDirectory_1f3934bb]));
            }

            jint DirectoryTaxonomyWriter::getParent(jint a0) const
            {
              return env->callIntMethod(this$, mids$[mid_getParent_39c7bd23], a0);
            }

            jint DirectoryTaxonomyWriter::getSize() const
            {
              return env->callIntMethod(this$, mids$[mid_getSize_54c6a179]);
            }

            jlong DirectoryTaxonomyWriter::getTaxonomyEpoch() const
            {
              return env->callLongMethod(this$, mids$[mid_getTaxonomyEpoch_54c6a17a]);
            }

            void DirectoryTaxonomyWriter::prepareCommit() const
            {
              env->callVoidMethod(this$, mids$[mid_prepareCommit_54c6a166]);
            }

            void DirectoryTaxonomyWriter::replaceTaxonomy(const ::org::apache::lucene::store::Directory & a0) const
            {
              env->callVoidMethod(this$, mids$[mid_replaceTaxonomy_2e261ef2], a0.this$);
            }

            void DirectoryTaxonomyWriter::rollback() const
            {
              env->callVoidMethod(this$, mids$[mid_rollback_54c6a166]);
            }

            void DirectoryTaxonomyWriter::setCacheMissesUntilFill(jint a0) const
            {
              env->callVoidMethod(this$, mids$[mid_setCacheMissesUntilFill_39c7bd3c], a0);
            }

            void DirectoryTaxonomyWriter::setCommitData(const ::java::util::Map & a0) const
            {
              env->callVoidMethod(this$, mids$[mid_setCommitData_4c9e2b1c], a0.this$);
            }

            void DirectoryTaxonomyWriter::unlock(const ::org::apache::lucene::store::Directory & a0)
            {
              jclass cls = env->getClass(initializeClass);
              env->callStaticVoidMethod(cls, mids$[mid_unlock_2e261ef2], a0.this$);
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"
#include "org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyWriter$DiskOrdinalMap.h"
#include "org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyWriter$MemoryOrdinalMap.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace taxonomy {
          namespace directory {
            static PyObject *t_DirectoryTaxonomyWriter_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_DirectoryTaxonomyWriter_instance_(PyTypeObject *type, PyObject *arg);
            static int t_DirectoryTaxonomyWriter_init_(t_DirectoryTaxonomyWriter *self, PyObject *args, PyObject *kwds);
            static PyObject *t_DirectoryTaxonomyWriter_addCategory(t_DirectoryTaxonomyWriter *self, PyObject *arg);
            static PyObject *t_DirectoryTaxonomyWriter_addTaxonomy(t_DirectoryTaxonomyWriter *self, PyObject *args);
            static PyObject *t_DirectoryTaxonomyWriter_close(t_DirectoryTaxonomyWriter *self);
            static PyObject *t_DirectoryTaxonomyWriter_commit(t_DirectoryTaxonomyWriter *self);
            static PyObject *t_DirectoryTaxonomyWriter_defaultTaxonomyWriterCache(PyTypeObject *type);
            static PyObject *t_DirectoryTaxonomyWriter_getCommitData(t_DirectoryTaxonomyWriter *self);
            static PyObject *t_DirectoryTaxonomyWriter_getDirectory(t_DirectoryTaxonomyWriter *self);
            static PyObject *t_DirectoryTaxonomyWriter_getParent(t_DirectoryTaxonomyWriter *self, PyObject *arg);
            static PyObject *t_DirectoryTaxonomyWriter_getSize(t_DirectoryTaxonomyWriter *self);
            static PyObject *t_DirectoryTaxonomyWriter_getTaxonomyEpoch(t_DirectoryTaxonomyWriter *self);
            static PyObject *t_DirectoryTaxonomyWriter_prepareCommit(t_DirectoryTaxonomyWriter *self);
            static PyObject *t_DirectoryTaxonomyWriter_replaceTaxonomy(t_DirectoryTaxonomyWriter *self, PyObject *arg);
            static PyObject *t_DirectoryTaxonomyWriter_rollback(t_DirectoryTaxonomyWriter *self);
            static PyObject *t_DirectoryTaxonomyWriter_setCacheMissesUntilFill(t_DirectoryTaxonomyWriter *self, PyObject *arg);
            static PyObject *t_DirectoryTaxonomyWriter_setCommitData(t_DirectoryTaxonomyWriter *self, PyObject *arg);
            static PyObject *t_DirectoryTaxonomyWriter_unlock(PyTypeObject *type, PyObject *arg);
            static int t_DirectoryTaxonomyWriter_set__cacheMissesUntilFill(t_DirectoryTaxonomyWriter *self, PyObject *arg, void *data);
            static PyObject *t_DirectoryTaxonomyWriter_get__commitData(t_DirectoryTaxonomyWriter *self, void *data);
            static int t_DirectoryTaxonomyWriter_set__commitData(t_DirectoryTaxonomyWriter *self, PyObject *arg, void *data);
            static PyObject *t_DirectoryTaxonomyWriter_get__directory(t_DirectoryTaxonomyWriter *self, void *data);
            static PyObject *t_DirectoryTaxonomyWriter_get__size(t_DirectoryTaxonomyWriter *self, void *data);
            static PyObject *t_DirectoryTaxonomyWriter_get__taxonomyEpoch(t_DirectoryTaxonomyWriter *self, void *data);
            static PyGetSetDef t_DirectoryTaxonomyWriter__fields_[] = {
              DECLARE_SET_FIELD(t_DirectoryTaxonomyWriter, cacheMissesUntilFill),
              DECLARE_GETSET_FIELD(t_DirectoryTaxonomyWriter, commitData),
              DECLARE_GET_FIELD(t_DirectoryTaxonomyWriter, directory),
              DECLARE_GET_FIELD(t_DirectoryTaxonomyWriter, size),
              DECLARE_GET_FIELD(t_DirectoryTaxonomyWriter, taxonomyEpoch),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_DirectoryTaxonomyWriter__methods_[] = {
              DECLARE_METHOD(t_DirectoryTaxonomyWriter, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_DirectoryTaxonomyWriter, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_DirectoryTaxonomyWriter, addCategory, METH_O),
              DECLARE_METHOD(t_DirectoryTaxonomyWriter, addTaxonomy, METH_VARARGS),
              DECLARE_METHOD(t_DirectoryTaxonomyWriter, close, METH_NOARGS),
              DECLARE_METHOD(t_DirectoryTaxonomyWriter, commit, METH_NOARGS),
              DECLARE_METHOD(t_DirectoryTaxonomyWriter, defaultTaxonomyWriterCache, METH_NOARGS | METH_CLASS),
              DECLARE_METHOD(t_DirectoryTaxonomyWriter, getCommitData, METH_NOARGS),
              DECLARE_METHOD(t_DirectoryTaxonomyWriter, getDirectory, METH_NOARGS),
              DECLARE_METHOD(t_DirectoryTaxonomyWriter, getParent, METH_O),
              DECLARE_METHOD(t_DirectoryTaxonomyWriter, getSize, METH_NOARGS),
              DECLARE_METHOD(t_DirectoryTaxonomyWriter, getTaxonomyEpoch, METH_NOARGS),
              DECLARE_METHOD(t_DirectoryTaxonomyWriter, prepareCommit, METH_NOARGS),
              DECLARE_METHOD(t_DirectoryTaxonomyWriter, replaceTaxonomy, METH_O),
              DECLARE_METHOD(t_DirectoryTaxonomyWriter, rollback, METH_NOARGS),
              DECLARE_METHOD(t_DirectoryTaxonomyWriter, setCacheMissesUntilFill, METH_O),
              DECLARE_METHOD(t_DirectoryTaxonomyWriter, setCommitData, METH_O),
              DECLARE_METHOD(t_DirectoryTaxonomyWriter, unlock, METH_O | METH_CLASS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(DirectoryTaxonomyWriter, t_DirectoryTaxonomyWriter, ::java::lang::Object, DirectoryTaxonomyWriter, t_DirectoryTaxonomyWriter_init_, 0, 0, t_DirectoryTaxonomyWriter__fields_, 0, 0);

            void t_DirectoryTaxonomyWriter::install(PyObject *module)
            {
              installType(&PY_TYPE(DirectoryTaxonomyWriter), module, "DirectoryTaxonomyWriter", 0);
              PyDict_SetItemString(PY_TYPE(DirectoryTaxonomyWriter).tp_dict, "DiskOrdinalMap", make_descriptor(&PY_TYPE(DirectoryTaxonomyWriter$DiskOrdinalMap)));
              PyDict_SetItemString(PY_TYPE(DirectoryTaxonomyWriter).tp_dict, "MemoryOrdinalMap", make_descriptor(&PY_TYPE(DirectoryTaxonomyWriter$MemoryOrdinalMap)));
              PyDict_SetItemString(PY_TYPE(DirectoryTaxonomyWriter).tp_dict, "OrdinalMap", make_descriptor(&PY_TYPE(DirectoryTaxonomyWriter$OrdinalMap)));
            }

            void t_DirectoryTaxonomyWriter::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(DirectoryTaxonomyWriter).tp_dict, "class_", make_descriptor(DirectoryTaxonomyWriter::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(DirectoryTaxonomyWriter).tp_dict, "wrapfn_", make_descriptor(t_DirectoryTaxonomyWriter::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(DirectoryTaxonomyWriter).tp_dict, "boxfn_", make_descriptor(boxObject));
              env->getClass(DirectoryTaxonomyWriter::initializeClass);
              PyDict_SetItemString(PY_TYPE(DirectoryTaxonomyWriter).tp_dict, "INDEX_EPOCH", make_descriptor(j2p(*DirectoryTaxonomyWriter::INDEX_EPOCH)));
            }

            static PyObject *t_DirectoryTaxonomyWriter_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, DirectoryTaxonomyWriter::initializeClass, 1)))
                return NULL;
              return t_DirectoryTaxonomyWriter::wrap_Object(DirectoryTaxonomyWriter(((t_DirectoryTaxonomyWriter *) arg)->object.this$));
            }
            static PyObject *t_DirectoryTaxonomyWriter_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, DirectoryTaxonomyWriter::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_DirectoryTaxonomyWriter_init_(t_DirectoryTaxonomyWriter *self, PyObject *args, PyObject *kwds)
            {
              switch (PyTuple_GET_SIZE(args)) {
               case 1:
                {
                  ::org::apache::lucene::store::Directory a0((jobject) NULL);
                  DirectoryTaxonomyWriter object((jobject) NULL);

                  if (!parseArgs(args, "k", ::org::apache::lucene::store::Directory::initializeClass, &a0))
                  {
                    INT_CALL(object = DirectoryTaxonomyWriter(a0));
                    self->object = object;
                    break;
                  }
                }
                goto err;
               case 2:
                {
                  ::org::apache::lucene::store::Directory a0((jobject) NULL);
                  ::org::apache::lucene::index::IndexWriterConfig$OpenMode a1((jobject) NULL);
                  PyTypeObject **p1;
                  DirectoryTaxonomyWriter object((jobject) NULL);

                  if (!parseArgs(args, "kK", ::org::apache::lucene::store::Directory::initializeClass, ::org::apache::lucene::index::IndexWriterConfig$OpenMode::initializeClass, &a0, &a1, &p1, ::org::apache::lucene::index::t_IndexWriterConfig$OpenMode::parameters_))
                  {
                    INT_CALL(object = DirectoryTaxonomyWriter(a0, a1));
                    self->object = object;
                    break;
                  }
                }
                goto err;
               case 3:
                {
                  ::org::apache::lucene::store::Directory a0((jobject) NULL);
                  ::org::apache::lucene::index::IndexWriterConfig$OpenMode a1((jobject) NULL);
                  PyTypeObject **p1;
                  ::org::apache::lucene::facet::taxonomy::writercache::TaxonomyWriterCache a2((jobject) NULL);
                  DirectoryTaxonomyWriter object((jobject) NULL);

                  if (!parseArgs(args, "kKk", ::org::apache::lucene::store::Directory::initializeClass, ::org::apache::lucene::index::IndexWriterConfig$OpenMode::initializeClass, ::org::apache::lucene::facet::taxonomy::writercache::TaxonomyWriterCache::initializeClass, &a0, &a1, &p1, ::org::apache::lucene::index::t_IndexWriterConfig$OpenMode::parameters_, &a2))
                  {
                    INT_CALL(object = DirectoryTaxonomyWriter(a0, a1, a2));
                    self->object = object;
                    break;
                  }
                }
               default:
               err:
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_DirectoryTaxonomyWriter_addCategory(t_DirectoryTaxonomyWriter *self, PyObject *arg)
            {
              ::org::apache::lucene::facet::taxonomy::FacetLabel a0((jobject) NULL);
              jint result;

              if (!parseArg(arg, "k", ::org::apache::lucene::facet::taxonomy::FacetLabel::initializeClass, &a0))
              {
                OBJ_CALL(result = self->object.addCategory(a0));
                return PyInt_FromLong((long) result);
              }

              PyErr_SetArgsError((PyObject *) self, "addCategory", arg);
              return NULL;
            }

            static PyObject *t_DirectoryTaxonomyWriter_addTaxonomy(t_DirectoryTaxonomyWriter *self, PyObject *args)
            {
              ::org::apache::lucene::store::Directory a0((jobject) NULL);
              ::org::apache::lucene::facet::taxonomy::directory::DirectoryTaxonomyWriter$OrdinalMap a1((jobject) NULL);

              if (!parseArgs(args, "kk", ::org::apache::lucene::store::Directory::initializeClass, ::org::apache::lucene::facet::taxonomy::directory::DirectoryTaxonomyWriter$OrdinalMap::initializeClass, &a0, &a1))
              {
                OBJ_CALL(self->object.addTaxonomy(a0, a1));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "addTaxonomy", args);
              return NULL;
            }

            static PyObject *t_DirectoryTaxonomyWriter_close(t_DirectoryTaxonomyWriter *self)
            {
              OBJ_CALL(self->object.close());
              Py_RETURN_NONE;
            }

            static PyObject *t_DirectoryTaxonomyWriter_commit(t_DirectoryTaxonomyWriter *self)
            {
              OBJ_CALL(self->object.commit());
              Py_RETURN_NONE;
            }

            static PyObject *t_DirectoryTaxonomyWriter_defaultTaxonomyWriterCache(PyTypeObject *type)
            {
              ::org::apache::lucene::facet::taxonomy::writercache::TaxonomyWriterCache result((jobject) NULL);
              OBJ_CALL(result = ::org::apache::lucene::facet::taxonomy::directory::DirectoryTaxonomyWriter::defaultTaxonomyWriterCache());
              return ::org::apache::lucene::facet::taxonomy::writercache::t_TaxonomyWriterCache::wrap_Object(result);
            }

            static PyObject *t_DirectoryTaxonomyWriter_getCommitData(t_DirectoryTaxonomyWriter *self)
            {
              ::java::util::Map result((jobject) NULL);
              OBJ_CALL(result = self->object.getCommitData());
              return ::java::util::t_Map::wrap_Object(result, &::java::lang::PY_TYPE(String), &::java::lang::PY_TYPE(String));
            }

            static PyObject *t_DirectoryTaxonomyWriter_getDirectory(t_DirectoryTaxonomyWriter *self)
            {
              ::org::apache::lucene::store::Directory result((jobject) NULL);
              OBJ_CALL(result = self->object.getDirectory());
              return ::org::apache::lucene::store::t_Directory::wrap_Object(result);
            }

            static PyObject *t_DirectoryTaxonomyWriter_getParent(t_DirectoryTaxonomyWriter *self, PyObject *arg)
            {
              jint a0;
              jint result;

              if (!parseArg(arg, "I", &a0))
              {
                OBJ_CALL(result = self->object.getParent(a0));
                return PyInt_FromLong((long) result);
              }

              PyErr_SetArgsError((PyObject *) self, "getParent", arg);
              return NULL;
            }

            static PyObject *t_DirectoryTaxonomyWriter_getSize(t_DirectoryTaxonomyWriter *self)
            {
              jint result;
              OBJ_CALL(result = self->object.getSize());
              return PyInt_FromLong((long) result);
            }

            static PyObject *t_DirectoryTaxonomyWriter_getTaxonomyEpoch(t_DirectoryTaxonomyWriter *self)
            {
              jlong result;
              OBJ_CALL(result = self->object.getTaxonomyEpoch());
              return PyLong_FromLongLong((PY_LONG_LONG) result);
            }

            static PyObject *t_DirectoryTaxonomyWriter_prepareCommit(t_DirectoryTaxonomyWriter *self)
            {
              OBJ_CALL(self->object.prepareCommit());
              Py_RETURN_NONE;
            }

            static PyObject *t_DirectoryTaxonomyWriter_replaceTaxonomy(t_DirectoryTaxonomyWriter *self, PyObject *arg)
            {
              ::org::apache::lucene::store::Directory a0((jobject) NULL);

              if (!parseArg(arg, "k", ::org::apache::lucene::store::Directory::initializeClass, &a0))
              {
                OBJ_CALL(self->object.replaceTaxonomy(a0));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "replaceTaxonomy", arg);
              return NULL;
            }

            static PyObject *t_DirectoryTaxonomyWriter_rollback(t_DirectoryTaxonomyWriter *self)
            {
              OBJ_CALL(self->object.rollback());
              Py_RETURN_NONE;
            }

            static PyObject *t_DirectoryTaxonomyWriter_setCacheMissesUntilFill(t_DirectoryTaxonomyWriter *self, PyObject *arg)
            {
              jint a0;

              if (!parseArg(arg, "I", &a0))
              {
                OBJ_CALL(self->object.setCacheMissesUntilFill(a0));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "setCacheMissesUntilFill", arg);
              return NULL;
            }

            static PyObject *t_DirectoryTaxonomyWriter_setCommitData(t_DirectoryTaxonomyWriter *self, PyObject *arg)
            {
              ::java::util::Map a0((jobject) NULL);
              PyTypeObject **p0;

              if (!parseArg(arg, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
              {
                OBJ_CALL(self->object.setCommitData(a0));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "setCommitData", arg);
              return NULL;
            }

            static PyObject *t_DirectoryTaxonomyWriter_unlock(PyTypeObject *type, PyObject *arg)
            {
              ::org::apache::lucene::store::Directory a0((jobject) NULL);

              if (!parseArg(arg, "k", ::org::apache::lucene::store::Directory::initializeClass, &a0))
              {
                OBJ_CALL(::org::apache::lucene::facet::taxonomy::directory::DirectoryTaxonomyWriter::unlock(a0));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError(type, "unlock", arg);
              return NULL;
            }

            static int t_DirectoryTaxonomyWriter_set__cacheMissesUntilFill(t_DirectoryTaxonomyWriter *self, PyObject *arg, void *data)
            {
              {
                jint value;
                if (!parseArg(arg, "I", &value))
                {
                  INT_CALL(self->object.setCacheMissesUntilFill(value));
                  return 0;
                }
              }
              PyErr_SetArgsError((PyObject *) self, "cacheMissesUntilFill", arg);
              return -1;
            }

            static PyObject *t_DirectoryTaxonomyWriter_get__commitData(t_DirectoryTaxonomyWriter *self, void *data)
            {
              ::java::util::Map value((jobject) NULL);
              OBJ_CALL(value = self->object.getCommitData());
              return ::java::util::t_Map::wrap_Object(value);
            }
            static int t_DirectoryTaxonomyWriter_set__commitData(t_DirectoryTaxonomyWriter *self, PyObject *arg, void *data)
            {
              {
                ::java::util::Map value((jobject) NULL);
                if (!parseArg(arg, "k", ::java::util::Map::initializeClass, &value))
                {
                  INT_CALL(self->object.setCommitData(value));
                  return 0;
                }
              }
              PyErr_SetArgsError((PyObject *) self, "commitData", arg);
              return -1;
            }

            static PyObject *t_DirectoryTaxonomyWriter_get__directory(t_DirectoryTaxonomyWriter *self, void *data)
            {
              ::org::apache::lucene::store::Directory value((jobject) NULL);
              OBJ_CALL(value = self->object.getDirectory());
              return ::org::apache::lucene::store::t_Directory::wrap_Object(value);
            }

            static PyObject *t_DirectoryTaxonomyWriter_get__size(t_DirectoryTaxonomyWriter *self, void *data)
            {
              jint value;
              OBJ_CALL(value = self->object.getSize());
              return PyInt_FromLong((long) value);
            }

            static PyObject *t_DirectoryTaxonomyWriter_get__taxonomyEpoch(t_DirectoryTaxonomyWriter *self, void *data)
            {
              jlong value;
              OBJ_CALL(value = self->object.getTaxonomyEpoch());
              return PyLong_FromLongLong((PY_LONG_LONG) value);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/store/LockObtainFailedException.h"
#include "java/lang/String.h"
#include "java/lang/Throwable.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {

        ::java::lang::Class *LockObtainFailedException::class$ = NULL;
        jmethodID *LockObtainFailedException::mids$ = NULL;
        bool LockObtainFailedException::live$ = false;

        jclass LockObtainFailedException::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/store/LockObtainFailedException");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_5fdc3f48] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;)V");
            mids$[mid_init$_01646a2e] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Ljava/lang/Throwable;)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        LockObtainFailedException::LockObtainFailedException(const ::java::lang::String & a0) : ::java::io::IOException(env->newObject(initializeClass, &mids$, mid_init$_5fdc3f48, a0.this$)) {}

        LockObtainFailedException::LockObtainFailedException(const ::java::lang::String & a0, const ::java::lang::Throwable & a1) : ::java::io::IOException(env->newObject(initializeClass, &mids$, mid_init$_01646a2e, a0.this$, a1.this$)) {}
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {
        static PyObject *t_LockObtainFailedException_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_LockObtainFailedException_instance_(PyTypeObject *type, PyObject *arg);
        static int t_LockObtainFailedException_init_(t_LockObtainFailedException *self, PyObject *args, PyObject *kwds);

        static PyMethodDef t_LockObtainFailedException__methods_[] = {
          DECLARE_METHOD(t_LockObtainFailedException, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_LockObtainFailedException, instance_, METH_O | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(LockObtainFailedException, t_LockObtainFailedException, ::java::io::IOException, LockObtainFailedException, t_LockObtainFailedException_init_, 0, 0, 0, 0, 0);

        void t_LockObtainFailedException::install(PyObject *module)
        {
          installType(&PY_TYPE(LockObtainFailedException), module, "LockObtainFailedException", 0);
        }

        void t_LockObtainFailedException::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(LockObtainFailedException).tp_dict, "class_", make_descriptor(LockObtainFailedException::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(LockObtainFailedException).tp_dict, "wrapfn_", make_descriptor(t_LockObtainFailedException::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(LockObtainFailedException).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_LockObtainFailedException_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, LockObtainFailedException::initializeClass, 1)))
            return NULL;
          return t_LockObtainFailedException::wrap_Object(LockObtainFailedException(((t_LockObtainFailedException *) arg)->object.this$));
        }
        static PyObject *t_LockObtainFailedException_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, LockObtainFailedException::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_LockObtainFailedException_init_(t_LockObtainFailedException *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              ::java::lang::String a0((jobject) NULL);
              LockObtainFailedException object((jobject) NULL);

              if (!parseArgs(args, "s", &a0))
              {
                INT_CALL(object = LockObtainFailedException(a0));
                self->object = object;
                break;
              }
            }
            goto err;
           case 2:
            {
              ::java::lang::String a0((jobject) NULL);
              ::java::lang::Throwable a1((jobject) NULL);
              LockObtainFailedException object((jobject) NULL);

              if (!parseArgs(args, "sk", ::java::lang::Throwable::initializeClass, &a0, &a1))
              {
                INT_CALL(object = LockObtainFailedException(a0, a1));
                self->object = object;
                break;
              }
            }
           default:
           err:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queries/function/FunctionValues.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/queries/function/FunctionValues$ValueFiller.h"
#include "java/lang/String.h"
#include "org/apache/lucene/search/Explanation.h"
#include "org/apache/lucene/queries/function/ValueSourceScorer.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {

          ::java::lang::Class *FunctionValues::class$ = NULL;
          jmethodID *FunctionValues::mids$ = NULL;
          bool FunctionValues::live$ = false;

          jclass FunctionValues::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/queries/function/FunctionValues");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_boolVal_39c7bd30] = env->getMethodID(cls, "boolVal", "(I)Z");
              mids$[mid_byteVal_39c7bd28] = env->getMethodID(cls, "byteVal", "(I)B");
              mids$[mid_byteVal_5d2e3265] = env->getMethodID(cls, "byteVal", "(I[B)V");
              mids$[mid_bytesVal_b7fef192] = env->getMethodID(cls, "bytesVal", "(ILorg/apache/lucene/util/BytesRef;)Z");
              mids$[mid_doubleVal_39c7bd2e] = env->getMethodID(cls, "doubleVal", "(I)D");
              mids$[mid_doubleVal_08239127] = env->getMethodID(cls, "doubleVal", "(I[D)V");
              mids$[mid_exists_39c7bd30] = env->getMethodID(cls, "exists", "(I)Z");
              mids$[mid_explain_ae608291] = env->getMethodID(cls, "explain", "(I)Lorg/apache/lucene/search/Explanation;");
              mids$[mid_floatVal_39c7bd2c] = env->getMethodID(cls, "floatVal", "(I)F");
              mids$[mid_floatVal_b130a809] = env->getMethodID(cls, "floatVal", "(I[F)V");
              mids$[mid_getRangeScorer_d201bc96] = env->getMethodID(cls, "getRangeScorer", "(Lorg/apache/lucene/index/IndexReader;Ljava/lang/String;Ljava/lang/String;ZZ)Lorg/apache/lucene/queries/function/ValueSourceScorer;");
              mids$[mid_getScorer_fca96384] = env->getMethodID(cls, "getScorer", "(Lorg/apache/lucene/index/IndexReader;)Lorg/apache/lucene/queries/function/ValueSourceScorer;");
              mids$[mid_getValueFiller_7731f0bd] = env->getMethodID(cls, "getValueFiller", "()Lorg/apache/lucene/queries/function/FunctionValues$ValueFiller;");
              mids$[mid_intVal_39c7bd23] = env->getMethodID(cls, "intVal", "(I)I");
              mids$[mid_intVal_dd2db71e] = env->getMethodID(cls, "intVal", "(I[I)V");
              mids$[mid_longVal_39c7bd20] = env->getMethodID(cls, "longVal", "(I)J");
              mids$[mid_longVal_b24cd90d] = env->getMethodID(cls, "longVal", "(I[J)V");
              mids$[mid_numOrd_54c6a179] = env->getMethodID(cls, "numOrd", "()I");
              mids$[mid_objectVal_29be6a55] = env->getMethodID(cls, "objectVal", "(I)Ljava/lang/Object;");
              mids$[mid_ordVal_39c7bd23] = env->getMethodID(cls, "ordVal", "(I)I");
              mids$[mid_shortVal_39c7bd39] = env->getMethodID(cls, "shortVal", "(I)S");
              mids$[mid_shortVal_df2a0648] = env->getMethodID(cls, "shortVal", "(I[S)V");
              mids$[mid_strVal_141401b3] = env->getMethodID(cls, "strVal", "(I)Ljava/lang/String;");
              mids$[mid_strVal_2f05a56a] = env->getMethodID(cls, "strVal", "(I[Ljava/lang/String;)V");
              mids$[mid_toString_141401b3] = env->getMethodID(cls, "toString", "(I)Ljava/lang/String;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          FunctionValues::FunctionValues() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          jboolean FunctionValues::boolVal(jint a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_boolVal_39c7bd30], a0);
          }

          jbyte FunctionValues::byteVal(jint a0) const
          {
            return env->callByteMethod(this$, mids$[mid_byteVal_39c7bd28], a0);
          }

          void FunctionValues::byteVal(jint a0, const JArray< jbyte > & a1) const
          {
            env->callVoidMethod(this$, mids$[mid_byteVal_5d2e3265], a0, a1.this$);
          }

          jboolean FunctionValues::bytesVal(jint a0, const ::org::apache::lucene::util::BytesRef & a1) const
          {
            return env->callBooleanMethod(this$, mids$[mid_bytesVal_b7fef192], a0, a1.this$);
          }

          jdouble FunctionValues::doubleVal(jint a0) const
          {
            return env->callDoubleMethod(this$, mids$[mid_doubleVal_39c7bd2e], a0);
          }

          void FunctionValues::doubleVal(jint a0, const JArray< jdouble > & a1) const
          {
            env->callVoidMethod(this$, mids$[mid_doubleVal_08239127], a0, a1.this$);
          }

          jboolean FunctionValues::exists(jint a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_exists_39c7bd30], a0);
          }

          ::org::apache::lucene::search::Explanation FunctionValues::explain(jint a0) const
          {
            return ::org::apache::lucene::search::Explanation(env->callObjectMethod(this$, mids$[mid_explain_ae608291], a0));
          }

          jfloat FunctionValues::floatVal(jint a0) const
          {
            return env->callFloatMethod(this$, mids$[mid_floatVal_39c7bd2c], a0);
          }

          void FunctionValues::floatVal(jint a0, const JArray< jfloat > & a1) const
          {
            env->callVoidMethod(this$, mids$[mid_floatVal_b130a809], a0, a1.this$);
          }

          ::org::apache::lucene::queries::function::ValueSourceScorer FunctionValues::getRangeScorer(const ::org::apache::lucene::index::IndexReader & a0, const ::java::lang::String & a1, const ::java::lang::String & a2, jboolean a3, jboolean a4) const
          {
            return ::org::apache::lucene::queries::function::ValueSourceScorer(env->callObjectMethod(this$, mids$[mid_getRangeScorer_d201bc96], a0.this$, a1.this$, a2.this$, a3, a4));
          }

          ::org::apache::lucene::queries::function::ValueSourceScorer FunctionValues::getScorer(const ::org::apache::lucene::index::IndexReader & a0) const
          {
            return ::org::apache::lucene::queries::function::ValueSourceScorer(env->callObjectMethod(this$, mids$[mid_getScorer_fca96384], a0.this$));
          }

          ::org::apache::lucene::queries::function::FunctionValues$ValueFiller FunctionValues::getValueFiller() const
          {
            return ::org::apache::lucene::queries::function::FunctionValues$ValueFiller(env->callObjectMethod(this$, mids$[mid_getValueFiller_7731f0bd]));
          }

          jint FunctionValues::intVal(jint a0) const
          {
            return env->callIntMethod(this$, mids$[mid_intVal_39c7bd23], a0);
          }

          void FunctionValues::intVal(jint a0, const JArray< jint > & a1) const
          {
            env->callVoidMethod(this$, mids$[mid_intVal_dd2db71e], a0, a1.this$);
          }

          jlong FunctionValues::longVal(jint a0) const
          {
            return env->callLongMethod(this$, mids$[mid_longVal_39c7bd20], a0);
          }

          void FunctionValues::longVal(jint a0, const JArray< jlong > & a1) const
          {
            env->callVoidMethod(this$, mids$[mid_longVal_b24cd90d], a0, a1.this$);
          }

          jint FunctionValues::numOrd() const
          {
            return env->callIntMethod(this$, mids$[mid_numOrd_54c6a179]);
          }

          ::java::lang::Object FunctionValues::objectVal(jint a0) const
          {
            return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_objectVal_29be6a55], a0));
          }

          jint FunctionValues::ordVal(jint a0) const
          {
            return env->callIntMethod(this$, mids$[mid_ordVal_39c7bd23], a0);
          }

          jshort FunctionValues::shortVal(jint a0) const
          {
            return env->callShortMethod(this$, mids$[mid_shortVal_39c7bd39], a0);
          }

          void FunctionValues::shortVal(jint a0, const JArray< jshort > & a1) const
          {
            env->callVoidMethod(this$, mids$[mid_shortVal_df2a0648], a0, a1.this$);
          }

          ::java::lang::String FunctionValues::strVal(jint a0) const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_strVal_141401b3], a0));
          }

          void FunctionValues::strVal(jint a0, const JArray< ::java::lang::String > & a1) const
          {
            env->callVoidMethod(this$, mids$[mid_strVal_2f05a56a], a0, a1.this$);
          }

          ::java::lang::String FunctionValues::toString(jint a0) const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_141401b3], a0));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          static PyObject *t_FunctionValues_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_FunctionValues_instance_(PyTypeObject *type, PyObject *arg);
          static int t_FunctionValues_init_(t_FunctionValues *self, PyObject *args, PyObject *kwds);
          static PyObject *t_FunctionValues_boolVal(t_FunctionValues *self, PyObject *arg);
          static PyObject *t_FunctionValues_byteVal(t_FunctionValues *self, PyObject *args);
          static PyObject *t_FunctionValues_bytesVal(t_FunctionValues *self, PyObject *args);
          static PyObject *t_FunctionValues_doubleVal(t_FunctionValues *self, PyObject *args);
          static PyObject *t_FunctionValues_exists(t_FunctionValues *self, PyObject *arg);
          static PyObject *t_FunctionValues_explain(t_FunctionValues *self, PyObject *arg);
          static PyObject *t_FunctionValues_floatVal(t_FunctionValues *self, PyObject *args);
          static PyObject *t_FunctionValues_getRangeScorer(t_FunctionValues *self, PyObject *args);
          static PyObject *t_FunctionValues_getScorer(t_FunctionValues *self, PyObject *arg);
          static PyObject *t_FunctionValues_getValueFiller(t_FunctionValues *self);
          static PyObject *t_FunctionValues_intVal(t_FunctionValues *self, PyObject *args);
          static PyObject *t_FunctionValues_longVal(t_FunctionValues *self, PyObject *args);
          static PyObject *t_FunctionValues_numOrd(t_FunctionValues *self);
          static PyObject *t_FunctionValues_objectVal(t_FunctionValues *self, PyObject *arg);
          static PyObject *t_FunctionValues_ordVal(t_FunctionValues *self, PyObject *arg);
          static PyObject *t_FunctionValues_shortVal(t_FunctionValues *self, PyObject *args);
          static PyObject *t_FunctionValues_strVal(t_FunctionValues *self, PyObject *args);
          static PyObject *t_FunctionValues_toString(t_FunctionValues *self, PyObject *args);
          static PyObject *t_FunctionValues_get__valueFiller(t_FunctionValues *self, void *data);
          static PyGetSetDef t_FunctionValues__fields_[] = {
            DECLARE_GET_FIELD(t_FunctionValues, valueFiller),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_FunctionValues__methods_[] = {
            DECLARE_METHOD(t_FunctionValues, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FunctionValues, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FunctionValues, boolVal, METH_O),
            DECLARE_METHOD(t_FunctionValues, byteVal, METH_VARARGS),
            DECLARE_METHOD(t_FunctionValues, bytesVal, METH_VARARGS),
            DECLARE_METHOD(t_FunctionValues, doubleVal, METH_VARARGS),
            DECLARE_METHOD(t_FunctionValues, exists, METH_O),
            DECLARE_METHOD(t_FunctionValues, explain, METH_O),
            DECLARE_METHOD(t_FunctionValues, floatVal, METH_VARARGS),
            DECLARE_METHOD(t_FunctionValues, getRangeScorer, METH_VARARGS),
            DECLARE_METHOD(t_FunctionValues, getScorer, METH_O),
            DECLARE_METHOD(t_FunctionValues, getValueFiller, METH_NOARGS),
            DECLARE_METHOD(t_FunctionValues, intVal, METH_VARARGS),
            DECLARE_METHOD(t_FunctionValues, longVal, METH_VARARGS),
            DECLARE_METHOD(t_FunctionValues, numOrd, METH_NOARGS),
            DECLARE_METHOD(t_FunctionValues, objectVal, METH_O),
            DECLARE_METHOD(t_FunctionValues, ordVal, METH_O),
            DECLARE_METHOD(t_FunctionValues, shortVal, METH_VARARGS),
            DECLARE_METHOD(t_FunctionValues, strVal, METH_VARARGS),
            DECLARE_METHOD(t_FunctionValues, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(FunctionValues, t_FunctionValues, ::java::lang::Object, FunctionValues, t_FunctionValues_init_, 0, 0, t_FunctionValues__fields_, 0, 0);

          void t_FunctionValues::install(PyObject *module)
          {
            installType(&PY_TYPE(FunctionValues), module, "FunctionValues", 0);
            PyDict_SetItemString(PY_TYPE(FunctionValues).tp_dict, "ValueFiller", make_descriptor(&PY_TYPE(FunctionValues$ValueFiller)));
          }

          void t_FunctionValues::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(FunctionValues).tp_dict, "class_", make_descriptor(FunctionValues::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(FunctionValues).tp_dict, "wrapfn_", make_descriptor(t_FunctionValues::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(FunctionValues).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_FunctionValues_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, FunctionValues::initializeClass, 1)))
              return NULL;
            return t_FunctionValues::wrap_Object(FunctionValues(((t_FunctionValues *) arg)->object.this$));
          }
          static PyObject *t_FunctionValues_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, FunctionValues::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_FunctionValues_init_(t_FunctionValues *self, PyObject *args, PyObject *kwds)
          {
            FunctionValues object((jobject) NULL);

            INT_CALL(object = FunctionValues());
            self->object = object;

            return 0;
          }

          static PyObject *t_FunctionValues_boolVal(t_FunctionValues *self, PyObject *arg)
          {
            jint a0;
            jboolean result;

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(result = self->object.boolVal(a0));
              Py_RETURN_BOOL(result);
            }

            PyErr_SetArgsError((PyObject *) self, "boolVal", arg);
            return NULL;
          }

          static PyObject *t_FunctionValues_byteVal(t_FunctionValues *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                jint a0;
                jbyte result;

                if (!parseArgs(args, "I", &a0))
                {
                  OBJ_CALL(result = self->object.byteVal(a0));
                  return PyInt_FromLong((long) result);
                }
              }
              break;
             case 2:
              {
                jint a0;
                JArray< jbyte > a1((jobject) NULL);

                if (!parseArgs(args, "I[B", &a0, &a1))
                {
                  OBJ_CALL(self->object.byteVal(a0, a1));
                  Py_RETURN_NONE;
                }
              }
            }

            PyErr_SetArgsError((PyObject *) self, "byteVal", args);
            return NULL;
          }

          static PyObject *t_FunctionValues_bytesVal(t_FunctionValues *self, PyObject *args)
          {
            jint a0;
            ::org::apache::lucene::util::BytesRef a1((jobject) NULL);
            jboolean result;

            if (!parseArgs(args, "Ik", ::org::apache::lucene::util::BytesRef::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.bytesVal(a0, a1));
              Py_RETURN_BOOL(result);
            }

            PyErr_SetArgsError((PyObject *) self, "bytesVal", args);
            return NULL;
          }

          static PyObject *t_FunctionValues_doubleVal(t_FunctionValues *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                jint a0;
                jdouble result;

                if (!parseArgs(args, "I", &a0))
                {
                  OBJ_CALL(result = self->object.doubleVal(a0));
                  return PyFloat_FromDouble((double) result);
                }
              }
              break;
             case 2:
              {
                jint a0;
                JArray< jdouble > a1((jobject) NULL);

                if (!parseArgs(args, "I[D", &a0, &a1))
                {
                  OBJ_CALL(self->object.doubleVal(a0, a1));
                  Py_RETURN_NONE;
                }
              }
            }

            PyErr_SetArgsError((PyObject *) self, "doubleVal", args);
            return NULL;
          }

          static PyObject *t_FunctionValues_exists(t_FunctionValues *self, PyObject *arg)
          {
            jint a0;
            jboolean result;

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(result = self->object.exists(a0));
              Py_RETURN_BOOL(result);
            }

            PyErr_SetArgsError((PyObject *) self, "exists", arg);
            return NULL;
          }

          static PyObject *t_FunctionValues_explain(t_FunctionValues *self, PyObject *arg)
          {
            jint a0;
            ::org::apache::lucene::search::Explanation result((jobject) NULL);

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(result = self->object.explain(a0));
              return ::org::apache::lucene::search::t_Explanation::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "explain", arg);
            return NULL;
          }

          static PyObject *t_FunctionValues_floatVal(t_FunctionValues *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                jint a0;
                jfloat result;

                if (!parseArgs(args, "I", &a0))
                {
                  OBJ_CALL(result = self->object.floatVal(a0));
                  return PyFloat_FromDouble((double) result);
                }
              }
              break;
             case 2:
              {
                jint a0;
                JArray< jfloat > a1((jobject) NULL);

                if (!parseArgs(args, "I[F", &a0, &a1))
                {
                  OBJ_CALL(self->object.floatVal(a0, a1));
                  Py_RETURN_NONE;
                }
              }
            }

            PyErr_SetArgsError((PyObject *) self, "floatVal", args);
            return NULL;
          }

          static PyObject *t_FunctionValues_getRangeScorer(t_FunctionValues *self, PyObject *args)
          {
            ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
            ::java::lang::String a1((jobject) NULL);
            ::java::lang::String a2((jobject) NULL);
            jboolean a3;
            jboolean a4;
            ::org::apache::lucene::queries::function::ValueSourceScorer result((jobject) NULL);

            if (!parseArgs(args, "kssZZ", ::org::apache::lucene::index::IndexReader::initializeClass, &a0, &a1, &a2, &a3, &a4))
            {
              OBJ_CALL(result = self->object.getRangeScorer(a0, a1, a2, a3, a4));
              return ::org::apache::lucene::queries::function::t_ValueSourceScorer::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "getRangeScorer", args);
            return NULL;
          }

          static PyObject *t_FunctionValues_getScorer(t_FunctionValues *self, PyObject *arg)
          {
            ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
            ::org::apache::lucene::queries::function::ValueSourceScorer result((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::index::IndexReader::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.getScorer(a0));
              return ::org::apache::lucene::queries::function::t_ValueSourceScorer::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "getScorer", arg);
            return NULL;
          }

          static PyObject *t_FunctionValues_getValueFiller(t_FunctionValues *self)
          {
            ::org::apache::lucene::queries::function::FunctionValues$ValueFiller result((jobject) NULL);
            OBJ_CALL(result = self->object.getValueFiller());
            return ::org::apache::lucene::queries::function::t_FunctionValues$ValueFiller::wrap_Object(result);
          }

          static PyObject *t_FunctionValues_intVal(t_FunctionValues *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                jint a0;
                jint result;

                if (!parseArgs(args, "I", &a0))
                {
                  OBJ_CALL(result = self->object.intVal(a0));
                  return PyInt_FromLong((long) result);
                }
              }
              break;
             case 2:
              {
                jint a0;
                JArray< jint > a1((jobject) NULL);

                if (!parseArgs(args, "I[I", &a0, &a1))
                {
                  OBJ_CALL(self->object.intVal(a0, a1));
                  Py_RETURN_NONE;
                }
              }
            }

            PyErr_SetArgsError((PyObject *) self, "intVal", args);
            return NULL;
          }

          static PyObject *t_FunctionValues_longVal(t_FunctionValues *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                jint a0;
                jlong result;

                if (!parseArgs(args, "I", &a0))
                {
                  OBJ_CALL(result = self->object.longVal(a0));
                  return PyLong_FromLongLong((PY_LONG_LONG) result);
                }
              }
              break;
             case 2:
              {
                jint a0;
                JArray< jlong > a1((jobject) NULL);

                if (!parseArgs(args, "I[J", &a0, &a1))
                {
                  OBJ_CALL(self->object.longVal(a0, a1));
                  Py_RETURN_NONE;
                }
              }
            }

            PyErr_SetArgsError((PyObject *) self, "longVal", args);
            return NULL;
          }

          static PyObject *t_FunctionValues_numOrd(t_FunctionValues *self)
          {
            jint result;
            OBJ_CALL(result = self->object.numOrd());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_FunctionValues_objectVal(t_FunctionValues *self, PyObject *arg)
          {
            jint a0;
            ::java::lang::Object result((jobject) NULL);

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(result = self->object.objectVal(a0));
              return ::java::lang::t_Object::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "objectVal", arg);
            return NULL;
          }

          static PyObject *t_FunctionValues_ordVal(t_FunctionValues *self, PyObject *arg)
          {
            jint a0;
            jint result;

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(result = self->object.ordVal(a0));
              return PyInt_FromLong((long) result);
            }

            PyErr_SetArgsError((PyObject *) self, "ordVal", arg);
            return NULL;
          }

          static PyObject *t_FunctionValues_shortVal(t_FunctionValues *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                jint a0;
                jshort result;

                if (!parseArgs(args, "I", &a0))
                {
                  OBJ_CALL(result = self->object.shortVal(a0));
                  return PyInt_FromLong((long) result);
                }
              }
              break;
             case 2:
              {
                jint a0;
                JArray< jshort > a1((jobject) NULL);

                if (!parseArgs(args, "I[S", &a0, &a1))
                {
                  OBJ_CALL(self->object.shortVal(a0, a1));
                  Py_RETURN_NONE;
                }
              }
            }

            PyErr_SetArgsError((PyObject *) self, "shortVal", args);
            return NULL;
          }

          static PyObject *t_FunctionValues_strVal(t_FunctionValues *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                jint a0;
                ::java::lang::String result((jobject) NULL);

                if (!parseArgs(args, "I", &a0))
                {
                  OBJ_CALL(result = self->object.strVal(a0));
                  return j2p(result);
                }
              }
              break;
             case 2:
              {
                jint a0;
                JArray< ::java::lang::String > a1((jobject) NULL);

                if (!parseArgs(args, "I[s", &a0, &a1))
                {
                  OBJ_CALL(self->object.strVal(a0, a1));
                  Py_RETURN_NONE;
                }
              }
            }

            PyErr_SetArgsError((PyObject *) self, "strVal", args);
            return NULL;
          }

          static PyObject *t_FunctionValues_toString(t_FunctionValues *self, PyObject *args)
          {
            jint a0;
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, "I", &a0))
            {
              OBJ_CALL(result = self->object.toString(a0));
              return j2p(result);
            }

            return callSuper(&PY_TYPE(FunctionValues), (PyObject *) self, "toString", args, 2);
          }

          static PyObject *t_FunctionValues_get__valueFiller(t_FunctionValues *self, void *data)
          {
            ::org::apache::lucene::queries::function::FunctionValues$ValueFiller value((jobject) NULL);
            OBJ_CALL(value = self->object.getValueFiller());
            return ::org::apache::lucene::queries::function::t_FunctionValues$ValueFiller::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/ga/IrishLowerCaseFilterFactory.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "org/apache/lucene/analysis/util/MultiTermAwareComponent.h"
#include "java/lang/Class.h"
#include "java/util/Map.h"
#include "java/lang/String.h"
#include "org/apache/lucene/analysis/util/AbstractAnalysisFactory.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ga {

          ::java::lang::Class *IrishLowerCaseFilterFactory::class$ = NULL;
          jmethodID *IrishLowerCaseFilterFactory::mids$ = NULL;
          bool IrishLowerCaseFilterFactory::live$ = false;

          jclass IrishLowerCaseFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/ga/IrishLowerCaseFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4c9e2b1c] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_a65cd6ab] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/TokenStream;");
              mids$[mid_getMultiTermComponent_0a3f1d72] = env->getMethodID(cls, "getMultiTermComponent", "()Lorg/apache/lucene/analysis/util/AbstractAnalysisFactory;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          IrishLowerCaseFilterFactory::IrishLowerCaseFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_4c9e2b1c, a0.this$)) {}

          ::org::apache::lucene::analysis::TokenStream IrishLowerCaseFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::TokenStream(env->callObjectMethod(this$, mids$[mid_create_a65cd6ab], a0.this$));
          }

          ::org::apache::lucene::analysis::util::AbstractAnalysisFactory IrishLowerCaseFilterFactory::getMultiTermComponent() const
          {
            return ::org::apache::lucene::analysis::util::AbstractAnalysisFactory(env->callObjectMethod(this$, mids$[mid_getMultiTermComponent_0a3f1d72]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ga {
          static PyObject *t_IrishLowerCaseFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_IrishLowerCaseFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_IrishLowerCaseFilterFactory_init_(t_IrishLowerCaseFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_IrishLowerCaseFilterFactory_create(t_IrishLowerCaseFilterFactory *self, PyObject *args);
          static PyObject *t_IrishLowerCaseFilterFactory_getMultiTermComponent(t_IrishLowerCaseFilterFactory *self);
          static PyObject *t_IrishLowerCaseFilterFactory_get__multiTermComponent(t_IrishLowerCaseFilterFactory *self, void *data);
          static PyGetSetDef t_IrishLowerCaseFilterFactory__fields_[] = {
            DECLARE_GET_FIELD(t_IrishLowerCaseFilterFactory, multiTermComponent),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_IrishLowerCaseFilterFactory__methods_[] = {
            DECLARE_METHOD(t_IrishLowerCaseFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_IrishLowerCaseFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_IrishLowerCaseFilterFactory, create, METH_VARARGS),
            DECLARE_METHOD(t_IrishLowerCaseFilterFactory, getMultiTermComponent, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(IrishLowerCaseFilterFactory, t_IrishLowerCaseFilterFactory, ::org::apache::lucene::analysis::util::TokenFilterFactory, IrishLowerCaseFilterFactory, t_IrishLowerCaseFilterFactory_init_, 0, 0, t_IrishLowerCaseFilterFactory__fields_, 0, 0);

          void t_IrishLowerCaseFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(IrishLowerCaseFilterFactory), module, "IrishLowerCaseFilterFactory", 0);
          }

          void t_IrishLowerCaseFilterFactory::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(IrishLowerCaseFilterFactory).tp_dict, "class_", make_descriptor(IrishLowerCaseFilterFactory::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(IrishLowerCaseFilterFactory).tp_dict, "wrapfn_", make_descriptor(t_IrishLowerCaseFilterFactory::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(IrishLowerCaseFilterFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_IrishLowerCaseFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, IrishLowerCaseFilterFactory::initializeClass, 1)))
              return NULL;
            return t_IrishLowerCaseFilterFactory::wrap_Object(IrishLowerCaseFilterFactory(((t_IrishLowerCaseFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_IrishLowerCaseFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, IrishLowerCaseFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_IrishLowerCaseFilterFactory_init_(t_IrishLowerCaseFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            IrishLowerCaseFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = IrishLowerCaseFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_IrishLowerCaseFilterFactory_create(t_IrishLowerCaseFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::TokenStream result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::t_TokenStream::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(IrishLowerCaseFilterFactory), (PyObject *) self, "create", args, 2);
          }

          static PyObject *t_IrishLowerCaseFilterFactory_getMultiTermComponent(t_IrishLowerCaseFilterFactory *self)
          {
            ::org::apache::lucene::analysis::util::AbstractAnalysisFactory result((jobject) NULL);
            OBJ_CALL(result = self->object.getMultiTermComponent());
            return ::org::apache::lucene::analysis::util::t_AbstractAnalysisFactory::wrap_Object(result);
          }

          static PyObject *t_IrishLowerCaseFilterFactory_get__multiTermComponent(t_IrishLowerCaseFilterFactory *self, void *data)
          {
            ::org::apache::lucene::analysis::util::AbstractAnalysisFactory value((jobject) NULL);
            OBJ_CALL(value = self->object.getMultiTermComponent());
            return ::org::apache::lucene::analysis::util::t_AbstractAnalysisFactory::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/fst/CharSequenceOutputs.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/store/DataInput.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/store/DataOutput.h"
#include "org/apache/lucene/util/CharsRef.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace fst {

          ::java::lang::Class *CharSequenceOutputs::class$ = NULL;
          jmethodID *CharSequenceOutputs::mids$ = NULL;
          bool CharSequenceOutputs::live$ = false;

          jclass CharSequenceOutputs::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/util/fst/CharSequenceOutputs");

              mids$ = new jmethodID[max_mid];
              mids$[mid_add_8f9b8d9f] = env->getMethodID(cls, "add", "(Lorg/apache/lucene/util/CharsRef;Lorg/apache/lucene/util/CharsRef;)Lorg/apache/lucene/util/CharsRef;");
              mids$[mid_common_8f9b8d9f] = env->getMethodID(cls, "common", "(Lorg/apache/lucene/util/CharsRef;Lorg/apache/lucene/util/CharsRef;)Lorg/apache/lucene/util/CharsRef;");
              mids$[mid_getNoOutput_399267bb] = env->getMethodID(cls, "getNoOutput", "()Lorg/apache/lucene/util/CharsRef;");
              mids$[mid_getSingleton_b8f978d1] = env->getStaticMethodID(cls, "getSingleton", "()Lorg/apache/lucene/util/fst/CharSequenceOutputs;");
              mids$[mid_outputToString_ea1848b1] = env->getMethodID(cls, "outputToString", "(Lorg/apache/lucene/util/CharsRef;)Ljava/lang/String;");
              mids$[mid_read_cbeddd00] = env->getMethodID(cls, "read", "(Lorg/apache/lucene/store/DataInput;)Lorg/apache/lucene/util/CharsRef;");
              mids$[mid_skipOutput_f5d6a551] = env->getMethodID(cls, "skipOutput", "(Lorg/apache/lucene/store/DataInput;)V");
              mids$[mid_subtract_8f9b8d9f] = env->getMethodID(cls, "subtract", "(Lorg/apache/lucene/util/CharsRef;Lorg/apache/lucene/util/CharsRef;)Lorg/apache/lucene/util/CharsRef;");
              mids$[mid_write_9a0fad97] = env->getMethodID(cls, "write", "(Lorg/apache/lucene/util/CharsRef;Lorg/apache/lucene/store/DataOutput;)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ::org::apache::lucene::util::CharsRef CharSequenceOutputs::add(const ::org::apache::lucene::util::CharsRef & a0, const ::org::apache::lucene::util::CharsRef & a1) const
          {
            return ::org::apache::lucene::util::CharsRef(env->callObjectMethod(this$, mids$[mid_add_8f9b8d9f], a0.this$, a1.this$));
          }

          ::org::apache::lucene::util::CharsRef CharSequenceOutputs::common(const ::org::apache::lucene::util::CharsRef & a0, const ::org::apache::lucene::util::CharsRef & a1) const
          {
            return ::org::apache::lucene::util::CharsRef(env->callObjectMethod(this$, mids$[mid_common_8f9b8d9f], a0.this$, a1.this$));
          }

          ::org::apache::lucene::util::CharsRef CharSequenceOutputs::getNoOutput() const
          {
            return ::org::apache::lucene::util::CharsRef(env->callObjectMethod(this$, mids$[mid_getNoOutput_399267bb]));
          }

          CharSequenceOutputs CharSequenceOutputs::getSingleton()
          {
            jclass cls = env->getClass(initializeClass);
            return CharSequenceOutputs(env->callStaticObjectMethod(cls, mids$[mid_getSingleton_b8f978d1]));
          }

          ::java::lang::String CharSequenceOutputs::outputToString(const ::org::apache::lucene::util::CharsRef & a0) const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_outputToString_ea1848b1], a0.this$));
          }

          ::org::apache::lucene::util::CharsRef CharSequenceOutputs::read(const ::org::apache::lucene::store::DataInput & a0) const
          {
            return ::org::apache::lucene::util::CharsRef(env->callObjectMethod(this$, mids$[mid_read_cbeddd00], a0.this$));
          }

          void CharSequenceOutputs::skipOutput(const ::org::apache::lucene::store::DataInput & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_skipOutput_f5d6a551], a0.this$);
          }

          ::org::apache::lucene::util::CharsRef CharSequenceOutputs::subtract(const ::org::apache::lucene::util::CharsRef & a0, const ::org::apache::lucene::util::CharsRef & a1) const
          {
            return ::org::apache::lucene::util::CharsRef(env->callObjectMethod(this$, mids$[mid_subtract_8f9b8d9f], a0.this$, a1.this$));
          }

          void CharSequenceOutputs::write(const ::org::apache::lucene::util::CharsRef & a0, const ::org::apache::lucene::store::DataOutput & a1) const
          {
            env->callVoidMethod(this$, mids$[mid_write_9a0fad97], a0.this$, a1.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace fst {
          static PyObject *t_CharSequenceOutputs_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_CharSequenceOutputs_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_CharSequenceOutputs_of_(t_CharSequenceOutputs *self, PyObject *args);
          static PyObject *t_CharSequenceOutputs_add(t_CharSequenceOutputs *self, PyObject *args);
          static PyObject *t_CharSequenceOutputs_common(t_CharSequenceOutputs *self, PyObject *args);
          static PyObject *t_CharSequenceOutputs_getNoOutput(t_CharSequenceOutputs *self, PyObject *args);
          static PyObject *t_CharSequenceOutputs_getSingleton(PyTypeObject *type);
          static PyObject *t_CharSequenceOutputs_outputToString(t_CharSequenceOutputs *self, PyObject *args);
          static PyObject *t_CharSequenceOutputs_read(t_CharSequenceOutputs *self, PyObject *args);
          static PyObject *t_CharSequenceOutputs_skipOutput(t_CharSequenceOutputs *self, PyObject *args);
          static PyObject *t_CharSequenceOutputs_subtract(t_CharSequenceOutputs *self, PyObject *args);
          static PyObject *t_CharSequenceOutputs_write(t_CharSequenceOutputs *self, PyObject *args);
          static PyObject *t_CharSequenceOutputs_get__noOutput(t_CharSequenceOutputs *self, void *data);
          static PyObject *t_CharSequenceOutputs_get__singleton(t_CharSequenceOutputs *self, void *data);
          static PyObject *t_CharSequenceOutputs_get__parameters_(t_CharSequenceOutputs *self, void *data);
          static PyGetSetDef t_CharSequenceOutputs__fields_[] = {
            DECLARE_GET_FIELD(t_CharSequenceOutputs, noOutput),
            DECLARE_GET_FIELD(t_CharSequenceOutputs, singleton),
            DECLARE_GET_FIELD(t_CharSequenceOutputs, parameters_),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_CharSequenceOutputs__methods_[] = {
            DECLARE_METHOD(t_CharSequenceOutputs, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CharSequenceOutputs, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CharSequenceOutputs, of_, METH_VARARGS),
            DECLARE_METHOD(t_CharSequenceOutputs, add, METH_VARARGS),
            DECLARE_METHOD(t_CharSequenceOutputs, common, METH_VARARGS),
            DECLARE_METHOD(t_CharSequenceOutputs, getNoOutput, METH_VARARGS),
            DECLARE_METHOD(t_CharSequenceOutputs, getSingleton, METH_NOARGS | METH_CLASS),
            DECLARE_METHOD(t_CharSequenceOutputs, outputToString, METH_VARARGS),
            DECLARE_METHOD(t_CharSequenceOutputs, read, METH_VARARGS),
            DECLARE_METHOD(t_CharSequenceOutputs, skipOutput, METH_VARARGS),
            DECLARE_METHOD(t_CharSequenceOutputs, subtract, METH_VARARGS),
            DECLARE_METHOD(t_CharSequenceOutputs, write, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(CharSequenceOutputs, t_CharSequenceOutputs, ::org::apache::lucene::util::fst::Outputs, CharSequenceOutputs, abstract_init, 0, 0, t_CharSequenceOutputs__fields_, 0, 0);
          PyObject *t_CharSequenceOutputs::wrap_Object(const CharSequenceOutputs& object, PyTypeObject *p0)
          {
            PyObject *obj = t_CharSequenceOutputs::wrap_Object(object);
            if (obj != NULL && obj != Py_None)
            {
              t_CharSequenceOutputs *self = (t_CharSequenceOutputs *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          PyObject *t_CharSequenceOutputs::wrap_jobject(const jobject& object, PyTypeObject *p0)
          {
            PyObject *obj = t_CharSequenceOutputs::wrap_jobject(object);
            if (obj != NULL && obj != Py_None)
            {
              t_CharSequenceOutputs *self = (t_CharSequenceOutputs *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          void t_CharSequenceOutputs::install(PyObject *module)
          {
            installType(&PY_TYPE(CharSequenceOutputs), module, "CharSequenceOutputs", 0);
          }

          void t_CharSequenceOutputs::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(CharSequenceOutputs).tp_dict, "class_", make_descriptor(CharSequenceOutputs::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(CharSequenceOutputs).tp_dict, "wrapfn_", make_descriptor(t_CharSequenceOutputs::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(CharSequenceOutputs).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_CharSequenceOutputs_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, CharSequenceOutputs::initializeClass, 1)))
              return NULL;
            return t_CharSequenceOutputs::wrap_Object(CharSequenceOutputs(((t_CharSequenceOutputs *) arg)->object.this$));
          }
          static PyObject *t_CharSequenceOutputs_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, CharSequenceOutputs::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_CharSequenceOutputs_of_(t_CharSequenceOutputs *self, PyObject *args)
          {
            if (!parseArg(args, "T", 1, &(self->parameters)))
              Py_RETURN_SELF;
            return PyErr_SetArgsError((PyObject *) self, "of_", args);
          }

          static PyObject *t_CharSequenceOutputs_add(t_CharSequenceOutputs *self, PyObject *args)
          {
            ::org::apache::lucene::util::CharsRef a0((jobject) NULL);
            ::org::apache::lucene::util::CharsRef a1((jobject) NULL);
            ::org::apache::lucene::util::CharsRef result((jobject) NULL);

            if (!parseArgs(args, "kk", ::org::apache::lucene::util::CharsRef::initializeClass, ::org::apache::lucene::util::CharsRef::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.add(a0, a1));
              return ::org::apache::lucene::util::t_CharsRef::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(CharSequenceOutputs), (PyObject *) self, "add", args, 2);
          }

          static PyObject *t_CharSequenceOutputs_common(t_CharSequenceOutputs *self, PyObject *args)
          {
            ::org::apache::lucene::util::CharsRef a0((jobject) NULL);
            ::org::apache::lucene::util::CharsRef a1((jobject) NULL);
            ::org::apache::lucene::util::CharsRef result((jobject) NULL);

            if (!parseArgs(args, "kk", ::org::apache::lucene::util::CharsRef::initializeClass, ::org::apache::lucene::util::CharsRef::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.common(a0, a1));
              return ::org::apache::lucene::util::t_CharsRef::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(CharSequenceOutputs), (PyObject *) self, "common", args, 2);
          }

          static PyObject *t_CharSequenceOutputs_getNoOutput(t_CharSequenceOutputs *self, PyObject *args)
          {
            ::org::apache::lucene::util::CharsRef result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.getNoOutput());
              return ::org::apache::lucene::util::t_CharsRef::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(CharSequenceOutputs), (PyObject *) self, "getNoOutput", args, 2);
          }

          static PyObject *t_CharSequenceOutputs_getSingleton(PyTypeObject *type)
          {
            CharSequenceOutputs result((jobject) NULL);
            OBJ_CALL(result = ::org::apache::lucene::util::fst::CharSequenceOutputs::getSingleton());
            return t_CharSequenceOutputs::wrap_Object(result);
          }

          static PyObject *t_CharSequenceOutputs_outputToString(t_CharSequenceOutputs *self, PyObject *args)
          {
            ::org::apache::lucene::util::CharsRef a0((jobject) NULL);
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::util::CharsRef::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.outputToString(a0));
              return j2p(result);
            }

            return callSuper(&PY_TYPE(CharSequenceOutputs), (PyObject *) self, "outputToString", args, 2);
          }

          static PyObject *t_CharSequenceOutputs_read(t_CharSequenceOutputs *self, PyObject *args)
          {
            ::org::apache::lucene::store::DataInput a0((jobject) NULL);
            ::org::apache::lucene::util::CharsRef result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::store::DataInput::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.read(a0));
              return ::org::apache::lucene::util::t_CharsRef::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(CharSequenceOutputs), (PyObject *) self, "read", args, 2);
          }

          static PyObject *t_CharSequenceOutputs_skipOutput(t_CharSequenceOutputs *self, PyObject *args)
          {
            ::org::apache::lucene::store::DataInput a0((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::store::DataInput::initializeClass, &a0))
            {
              OBJ_CALL(self->object.skipOutput(a0));
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(CharSequenceOutputs), (PyObject *) self, "skipOutput", args, 2);
          }

          static PyObject *t_CharSequenceOutputs_subtract(t_CharSequenceOutputs *self, PyObject *args)
          {
            ::org::apache::lucene::util::CharsRef a0((jobject) NULL);
            ::org::apache::lucene::util::CharsRef a1((jobject) NULL);
            ::org::apache::lucene::util::CharsRef result((jobject) NULL);

            if (!parseArgs(args, "kk", ::org::apache::lucene::util::CharsRef::initializeClass, ::org::apache::lucene::util::CharsRef::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.subtract(a0, a1));
              return ::org::apache::lucene::util::t_CharsRef::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(CharSequenceOutputs), (PyObject *) self, "subtract", args, 2);
          }

          static PyObject *t_CharSequenceOutputs_write(t_CharSequenceOutputs *self, PyObject *args)
          {
            ::org::apache::lucene::util::CharsRef a0((jobject) NULL);
            ::org::apache::lucene::store::DataOutput a1((jobject) NULL);

            if (!parseArgs(args, "kk", ::org::apache::lucene::util::CharsRef::initializeClass, ::org::apache::lucene::store::DataOutput::initializeClass, &a0, &a1))
            {
              OBJ_CALL(self->object.write(a0, a1));
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(CharSequenceOutputs), (PyObject *) self, "write", args, 2);
          }
          static PyObject *t_CharSequenceOutputs_get__parameters_(t_CharSequenceOutputs *self, void *data)
          {
            return typeParameters(self->parameters, sizeof(self->parameters));
          }

          static PyObject *t_CharSequenceOutputs_get__noOutput(t_CharSequenceOutputs *self, void *data)
          {
            ::org::apache::lucene::util::CharsRef value((jobject) NULL);
            OBJ_CALL(value = self->object.getNoOutput());
            return ::org::apache::lucene::util::t_CharsRef::wrap_Object(value);
          }

          static PyObject *t_CharSequenceOutputs_get__singleton(t_CharSequenceOutputs *self, void *data)
          {
            CharSequenceOutputs value((jobject) NULL);
            OBJ_CALL(value = self->object.getSingleton());
            return t_CharSequenceOutputs::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/store/Lock$With.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/store/Lock.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {

        ::java::lang::Class *Lock$With::class$ = NULL;
        jmethodID *Lock$With::mids$ = NULL;
        bool Lock$With::live$ = false;

        jclass Lock$With::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/store/Lock$With");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_6e48139c] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/store/Lock;J)V");
            mids$[mid_run_846352c3] = env->getMethodID(cls, "run", "()Ljava/lang/Object;");
            mids$[mid_doBody_846352c3] = env->getMethodID(cls, "doBody", "()Ljava/lang/Object;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        Lock$With::Lock$With(const ::org::apache::lucene::store::Lock & a0, jlong a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_6e48139c, a0.this$, a1)) {}

        ::java::lang::Object Lock$With::run() const
        {
          return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_run_846352c3]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {
        static PyObject *t_Lock$With_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_Lock$With_instance_(PyTypeObject *type, PyObject *arg);
        static int t_Lock$With_init_(t_Lock$With *self, PyObject *args, PyObject *kwds);
        static PyObject *t_Lock$With_run(t_Lock$With *self);

        static PyMethodDef t_Lock$With__methods_[] = {
          DECLARE_METHOD(t_Lock$With, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_Lock$With, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_Lock$With, run, METH_NOARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(Lock$With, t_Lock$With, ::java::lang::Object, Lock$With, t_Lock$With_init_, 0, 0, 0, 0, 0);

        void t_Lock$With::install(PyObject *module)
        {
          installType(&PY_TYPE(Lock$With), module, "Lock$With", 0);
        }

        void t_Lock$With::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(Lock$With).tp_dict, "class_", make_descriptor(Lock$With::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(Lock$With).tp_dict, "wrapfn_", make_descriptor(t_Lock$With::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(Lock$With).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_Lock$With_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, Lock$With::initializeClass, 1)))
            return NULL;
          return t_Lock$With::wrap_Object(Lock$With(((t_Lock$With *) arg)->object.this$));
        }
        static PyObject *t_Lock$With_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, Lock$With::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_Lock$With_init_(t_Lock$With *self, PyObject *args, PyObject *kwds)
        {
          ::org::apache::lucene::store::Lock a0((jobject) NULL);
          jlong a1;
          Lock$With object((jobject) NULL);

          if (!parseArgs(args, "kJ", ::org::apache::lucene::store::Lock::initializeClass, &a0, &a1))
          {
            INT_CALL(object = Lock$With(a0, a1));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_Lock$With_run(t_Lock$With *self)
        {
          ::java::lang::Object result((jobject) NULL);
          OBJ_CALL(result = self->object.run());
          return ::java::lang::t_Object::wrap_Object(result);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/standard/nodes/BooleanModifierNode.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/ModifierQueryNode$Modifier.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/QueryNode.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace nodes {

              ::java::lang::Class *BooleanModifierNode::class$ = NULL;
              jmethodID *BooleanModifierNode::mids$ = NULL;
              bool BooleanModifierNode::live$ = false;

              jclass BooleanModifierNode::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/standard/nodes/BooleanModifierNode");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_6bd34b3d] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;Lorg/apache/lucene/queryparser/flexible/core/nodes/ModifierQueryNode$Modifier;)V");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              BooleanModifierNode::BooleanModifierNode(const ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode & a0, const ::org::apache::lucene::queryparser::flexible::core::nodes::ModifierQueryNode$Modifier & a1) : ::org::apache::lucene::queryparser::flexible::core::nodes::ModifierQueryNode(env->newObject(initializeClass, &mids$, mid_init$_6bd34b3d, a0.this$, a1.this$)) {}
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace nodes {
              static PyObject *t_BooleanModifierNode_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_BooleanModifierNode_instance_(PyTypeObject *type, PyObject *arg);
              static int t_BooleanModifierNode_init_(t_BooleanModifierNode *self, PyObject *args, PyObject *kwds);

              static PyMethodDef t_BooleanModifierNode__methods_[] = {
                DECLARE_METHOD(t_BooleanModifierNode, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_BooleanModifierNode, instance_, METH_O | METH_CLASS),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(BooleanModifierNode, t_BooleanModifierNode, ::org::apache::lucene::queryparser::flexible::core::nodes::ModifierQueryNode, BooleanModifierNode, t_BooleanModifierNode_init_, 0, 0, 0, 0, 0);

              void t_BooleanModifierNode::install(PyObject *module)
              {
                installType(&PY_TYPE(BooleanModifierNode), module, "BooleanModifierNode", 0);
              }

              void t_BooleanModifierNode::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(BooleanModifierNode).tp_dict, "class_", make_descriptor(BooleanModifierNode::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(BooleanModifierNode).tp_dict, "wrapfn_", make_descriptor(t_BooleanModifierNode::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(BooleanModifierNode).tp_dict, "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_BooleanModifierNode_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, BooleanModifierNode::initializeClass, 1)))
                  return NULL;
                return t_BooleanModifierNode::wrap_Object(BooleanModifierNode(((t_BooleanModifierNode *) arg)->object.this$));
              }
              static PyObject *t_BooleanModifierNode_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, BooleanModifierNode::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_BooleanModifierNode_init_(t_BooleanModifierNode *self, PyObject *args, PyObject *kwds)
              {
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode a0((jobject) NULL);
                ::org::apache::lucene::queryparser::flexible::core::nodes::ModifierQueryNode$Modifier a1((jobject) NULL);
                PyTypeObject **p1;
                BooleanModifierNode object((jobject) NULL);

                if (!parseArgs(args, "kK", ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode::initializeClass, ::org::apache::lucene::queryparser::flexible::core::nodes::ModifierQueryNode$Modifier::initializeClass, &a0, &a1, &p1, ::org::apache::lucene::queryparser::flexible::core::nodes::t_ModifierQueryNode$Modifier::parameters_))
                {
                  INT_CALL(object = BooleanModifierNode(a0, a1));
                  self->object = object;
                }
                else
                {
                  PyErr_SetArgsError((PyObject *) self, "__init__", args);
                  return -1;
                }

                return 0;
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/idversion/IDVersionSegmentTermsEnum.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "org/apache/lucene/util/Bits.h"
#include "org/apache/lucene/index/TermsEnum$SeekStatus.h"
#include "java/lang/Class.h"
#include "java/util/Comparator.h"
#include "java/lang/String.h"
#include "org/apache/lucene/index/DocsAndPositionsEnum.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/index/TermState.h"
#include "org/apache/lucene/index/DocsEnum.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace idversion {

          ::java::lang::Class *IDVersionSegmentTermsEnum::class$ = NULL;
          jmethodID *IDVersionSegmentTermsEnum::mids$ = NULL;
          bool IDVersionSegmentTermsEnum::live$ = false;

          jclass IDVersionSegmentTermsEnum::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/idversion/IDVersionSegmentTermsEnum");

              mids$ = new jmethodID[max_mid];
              mids$[mid_docFreq_54c6a179] = env->getMethodID(cls, "docFreq", "()I");
              mids$[mid_docs_e6d4c3ef] = env->getMethodID(cls, "docs", "(Lorg/apache/lucene/util/Bits;Lorg/apache/lucene/index/DocsEnum;I)Lorg/apache/lucene/index/DocsEnum;");
              mids$[mid_docsAndPositions_b5d9c11b] = env->getMethodID(cls, "docsAndPositions", "(Lorg/apache/lucene/util/Bits;Lorg/apache/lucene/index/DocsAndPositionsEnum;I)Lorg/apache/lucene/index/DocsAndPositionsEnum;");
              mids$[mid_getComparator_5a7ff2fc] = env->getMethodID(cls, "getComparator", "()Ljava/util/Comparator;");
              mids$[mid_getVersion_54c6a17a] = env->getMethodID(cls, "getVersion", "()J");
              mids$[mid_next_4ae19461] = env->getMethodID(cls, "next", "()Lorg/apache/lucene/util/BytesRef;");
              mids$[mid_ord_54c6a17a] = env->getMethodID(cls, "ord", "()J");
              mids$[mid_seekCeil_fa9d72c4] = env->getMethodID(cls, "seekCeil", "(Lorg/apache/lucene/util/BytesRef;)Lorg/apache/lucene/index/TermsEnum$SeekStatus;");
              mids$[mid_seekExact_7bc03dc8] = env->getMethodID(cls, "seekExact", "(Lorg/apache/lucene/util/BytesRef;)Z");
              mids$[mid_seekExact_0ee6df2f] = env->getMethodID(cls, "seekExact", "(J)V");
              mids$[mid_seekExact_fe46da51] = env->getMethodID(cls, "seekExact", "(Lorg/apache/lucene/util/BytesRef;Lorg/apache/lucene/index/TermState;)V");
              mids$[mid_seekExact_9e70a0d1] = env->getMethodID(cls, "seekExact", "(Lorg/apache/lucene/util/BytesRef;J)Z");
              mids$[mid_term_4ae19461] = env->getMethodID(cls, "term", "()Lorg/apache/lucene/util/BytesRef;");
              mids$[mid_termState_3e41fede] = env->getMethodID(cls, "termState", "()Lorg/apache/lucene/index/TermState;");
              mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");
              mids$[mid_totalTermFreq_54c6a17a] = env->getMethodID(cls, "totalTermFreq", "()J");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          jint IDVersionSegmentTermsEnum::docFreq() const
          {
            return env->callIntMethod(this$, mids$[mid_docFreq_54c6a179]);
          }

          ::org::apache::lucene::index::DocsEnum IDVersionSegmentTermsEnum::docs(const ::org::apache::lucene::util::Bits & a0, const ::org::apache::lucene::index::DocsEnum & a1, jint a2) const
          {
            return ::org::apache::lucene::index::DocsEnum(env->callObjectMethod(this$, mids$[mid_docs_e6d4c3ef], a0.this$, a1.this$, a2));
          }

          ::org::apache::lucene::index::DocsAndPositionsEnum IDVersionSegmentTermsEnum::docsAndPositions(const ::org::apache::lucene::util::Bits & a0, const ::org::apache::lucene::index::DocsAndPositionsEnum & a1, jint a2) const
          {
            return ::org::apache::lucene::index::DocsAndPositionsEnum(env->callObjectMethod(this$, mids$[mid_docsAndPositions_b5d9c11b], a0.this$, a1.this$, a2));
          }

          ::java::util::Comparator IDVersionSegmentTermsEnum::getComparator() const
          {
            return ::java::util::Comparator(env->callObjectMethod(this$, mids$[mid_getComparator_5a7ff2fc]));
          }

          jlong IDVersionSegmentTermsEnum::getVersion() const
          {
            return env->callLongMethod(this$, mids$[mid_getVersion_54c6a17a]);
          }

          ::org::apache::lucene::util::BytesRef IDVersionSegmentTermsEnum::next() const
          {
            return ::org::apache::lucene::util::BytesRef(env->callObjectMethod(this$, mids$[mid_next_4ae19461]));
          }

          jlong IDVersionSegmentTermsEnum::ord() const
          {
            return env->callLongMethod(this$, mids$[mid_ord_54c6a17a]);
          }

          ::org::apache::lucene::index::TermsEnum$SeekStatus IDVersionSegmentTermsEnum::seekCeil(const ::org::apache::lucene::util::BytesRef & a0) const
          {
            return ::org::apache::lucene::index::TermsEnum$SeekStatus(env->callObjectMethod(this$, mids$[mid_seekCeil_fa9d72c4], a0.this$));
          }

          jboolean IDVersionSegmentTermsEnum::seekExact(const ::org::apache::lucene::util::BytesRef & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_seekExact_7bc03dc8], a0.this$);
          }

          void IDVersionSegmentTermsEnum::seekExact(jlong a0) const
          {
            env->callVoidMethod(this$, mids$[mid_seekExact_0ee6df2f], a0);
          }

          void IDVersionSegmentTermsEnum::seekExact(const ::org::apache::lucene::util::BytesRef & a0, const ::org::apache::lucene::index::TermState & a1) const
          {
            env->callVoidMethod(this$, mids$[mid_seekExact_fe46da51], a0.this$, a1.this$);
          }

          jboolean IDVersionSegmentTermsEnum::seekExact(const ::org::apache::lucene::util::BytesRef & a0, jlong a1) const
          {
            return env->callBooleanMethod(this$, mids$[mid_seekExact_9e70a0d1], a0.this$, a1);
          }

          ::org::apache::lucene::util::BytesRef IDVersionSegmentTermsEnum::term() const
          {
            return ::org::apache::lucene::util::BytesRef(env->callObjectMethod(this$, mids$[mid_term_4ae19461]));
          }

          ::org::apache::lucene::index::TermState IDVersionSegmentTermsEnum::termState() const
          {
            return ::org::apache::lucene::index::TermState(env->callObjectMethod(this$, mids$[mid_termState_3e41fede]));
          }

          ::java::lang::String IDVersionSegmentTermsEnum::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
          }

          jlong IDVersionSegmentTermsEnum::totalTermFreq() const
          {
            return env->callLongMethod(this$, mids$[mid_totalTermFreq_54c6a17a]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace idversion {
          static PyObject *t_IDVersionSegmentTermsEnum_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_IDVersionSegmentTermsEnum_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_IDVersionSegmentTermsEnum_docFreq(t_IDVersionSegmentTermsEnum *self, PyObject *args);
          static PyObject *t_IDVersionSegmentTermsEnum_docs(t_IDVersionSegmentTermsEnum *self, PyObject *args);
          static PyObject *t_IDVersionSegmentTermsEnum_docsAndPositions(t_IDVersionSegmentTermsEnum *self, PyObject *args);
          static PyObject *t_IDVersionSegmentTermsEnum_getComparator(t_IDVersionSegmentTermsEnum *self, PyObject *args);
          static PyObject *t_IDVersionSegmentTermsEnum_getVersion(t_IDVersionSegmentTermsEnum *self);
          static PyObject *t_IDVersionSegmentTermsEnum_next(t_IDVersionSegmentTermsEnum *self, PyObject *args);
          static PyObject *t_IDVersionSegmentTermsEnum_ord(t_IDVersionSegmentTermsEnum *self, PyObject *args);
          static PyObject *t_IDVersionSegmentTermsEnum_seekCeil(t_IDVersionSegmentTermsEnum *self, PyObject *args);
          static PyObject *t_IDVersionSegmentTermsEnum_seekExact(t_IDVersionSegmentTermsEnum *self, PyObject *args);
          static PyObject *t_IDVersionSegmentTermsEnum_term(t_IDVersionSegmentTermsEnum *self, PyObject *args);
          static PyObject *t_IDVersionSegmentTermsEnum_termState(t_IDVersionSegmentTermsEnum *self, PyObject *args);
          static PyObject *t_IDVersionSegmentTermsEnum_toString(t_IDVersionSegmentTermsEnum *self, PyObject *args);
          static PyObject *t_IDVersionSegmentTermsEnum_totalTermFreq(t_IDVersionSegmentTermsEnum *self, PyObject *args);
          static PyObject *t_IDVersionSegmentTermsEnum_get__comparator(t_IDVersionSegmentTermsEnum *self, void *data);
          static PyObject *t_IDVersionSegmentTermsEnum_get__version(t_IDVersionSegmentTermsEnum *self, void *data);
          static PyGetSetDef t_IDVersionSegmentTermsEnum__fields_[] = {
            DECLARE_GET_FIELD(t_IDVersionSegmentTermsEnum, comparator),
            DECLARE_GET_FIELD(t_IDVersionSegmentTermsEnum, version),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_IDVersionSegmentTermsEnum__methods_[] = {
            DECLARE_METHOD(t_IDVersionSegmentTermsEnum, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_IDVersionSegmentTermsEnum, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_IDVersionSegmentTermsEnum, docFreq, METH_VARARGS),
            DECLARE_METHOD(t_IDVersionSegmentTermsEnum, docs, METH_VARARGS),
            DECLARE_METHOD(t_IDVersionSegmentTermsEnum, docsAndPositions, METH_VARARGS),
            DECLARE_METHOD(t_IDVersionSegmentTermsEnum, getComparator, METH_VARARGS),
            DECLARE_METHOD(t_IDVersionSegmentTermsEnum, getVersion, METH_NOARGS),
            DECLARE_METHOD(t_IDVersionSegmentTermsEnum, next, METH_VARARGS),
            DECLARE_METHOD(t_IDVersionSegmentTermsEnum, ord, METH_VARARGS),
            DECLARE_METHOD(t_IDVersionSegmentTermsEnum, seekCeil, METH_VARARGS),
            DECLARE_METHOD(t_IDVersionSegmentTermsEnum, seekExact, METH_VARARGS),
            DECLARE_METHOD(t_IDVersionSegmentTermsEnum, term, METH_VARARGS),
            DECLARE_METHOD(t_IDVersionSegmentTermsEnum, termState, METH_VARARGS),
            DECLARE_METHOD(t_IDVersionSegmentTermsEnum, toString, METH_VARARGS),
            DECLARE_METHOD(t_IDVersionSegmentTermsEnum, totalTermFreq, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(IDVersionSegmentTermsEnum, t_IDVersionSegmentTermsEnum, ::org::apache::lucene::index::TermsEnum, IDVersionSegmentTermsEnum, abstract_init, PyObject_SelfIter, ((PyObject *(*)(t_IDVersionSegmentTermsEnum *)) get_next< t_IDVersionSegmentTermsEnum,::org::apache::lucene::util::t_BytesRef,::org::apache::lucene::util::BytesRef >), t_IDVersionSegmentTermsEnum__fields_, 0, 0);

          void t_IDVersionSegmentTermsEnum::install(PyObject *module)
          {
            installType(&PY_TYPE(IDVersionSegmentTermsEnum), module, "IDVersionSegmentTermsEnum", 0);
          }

          void t_IDVersionSegmentTermsEnum::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(IDVersionSegmentTermsEnum).tp_dict, "class_", make_descriptor(IDVersionSegmentTermsEnum::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(IDVersionSegmentTermsEnum).tp_dict, "wrapfn_", make_descriptor(t_IDVersionSegmentTermsEnum::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(IDVersionSegmentTermsEnum).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_IDVersionSegmentTermsEnum_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, IDVersionSegmentTermsEnum::initializeClass, 1)))
              return NULL;
            return t_IDVersionSegmentTermsEnum::wrap_Object(IDVersionSegmentTermsEnum(((t_IDVersionSegmentTermsEnum *) arg)->object.this$));
          }
          static PyObject *t_IDVersionSegmentTermsEnum_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, IDVersionSegmentTermsEnum::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_IDVersionSegmentTermsEnum_docFreq(t_IDVersionSegmentTermsEnum *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.docFreq());
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(IDVersionSegmentTermsEnum), (PyObject *) self, "docFreq", args, 2);
          }

          static PyObject *t_IDVersionSegmentTermsEnum_docs(t_IDVersionSegmentTermsEnum *self, PyObject *args)
          {
            ::org::apache::lucene::util::Bits a0((jobject) NULL);
            ::org::apache::lucene::index::DocsEnum a1((jobject) NULL);
            jint a2;
            ::org::apache::lucene::index::DocsEnum result((jobject) NULL);

            if (!parseArgs(args, "kkI", ::org::apache::lucene::util::Bits::initializeClass, ::org::apache::lucene::index::DocsEnum::initializeClass, &a0, &a1, &a2))
            {
              OBJ_CALL(result = self->object.docs(a0, a1, a2));
              return ::org::apache::lucene::index::t_DocsEnum::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(IDVersionSegmentTermsEnum), (PyObject *) self, "docs", args, 2);
          }

          static PyObject *t_IDVersionSegmentTermsEnum_docsAndPositions(t_IDVersionSegmentTermsEnum *self, PyObject *args)
          {
            ::org::apache::lucene::util::Bits a0((jobject) NULL);
            ::org::apache::lucene::index::DocsAndPositionsEnum a1((jobject) NULL);
            jint a2;
            ::org::apache::lucene::index::DocsAndPositionsEnum result((jobject) NULL);

            if (!parseArgs(args, "kkI", ::org::apache::lucene::util::Bits::initializeClass, ::org::apache::lucene::index::DocsAndPositionsEnum::initializeClass, &a0, &a1, &a2))
            {
              OBJ_CALL(result = self->object.docsAndPositions(a0, a1, a2));
              return ::org::apache::lucene::index::t_DocsAndPositionsEnum::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(IDVersionSegmentTermsEnum), (PyObject *) self, "docsAndPositions", args, 2);
          }

          static PyObject *t_IDVersionSegmentTermsEnum_getComparator(t_IDVersionSegmentTermsEnum *self, PyObject *args)
          {
            ::java::util::Comparator result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.getComparator());
              return ::java::util::t_Comparator::wrap_Object(result, &::org::apache::lucene::util::PY_TYPE(BytesRef));
            }

            return callSuper(&PY_TYPE(IDVersionSegmentTermsEnum), (PyObject *) self, "getComparator", args, 2);
          }

          static PyObject *t_IDVersionSegmentTermsEnum_getVersion(t_IDVersionSegmentTermsEnum *self)
          {
            jlong result;
            OBJ_CALL(result = self->object.getVersion());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          static PyObject *t_IDVersionSegmentTermsEnum_next(t_IDVersionSegmentTermsEnum *self, PyObject *args)
          {
            ::org::apache::lucene::util::BytesRef result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.next());
              return ::org::apache::lucene::util::t_BytesRef::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(IDVersionSegmentTermsEnum), (PyObject *) self, "next", args, 2);
          }

          static PyObject *t_IDVersionSegmentTermsEnum_ord(t_IDVersionSegmentTermsEnum *self, PyObject *args)
          {
            jlong result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.ord());
              return PyLong_FromLongLong((PY_LONG_LONG) result);
            }

            return callSuper(&PY_TYPE(IDVersionSegmentTermsEnum), (PyObject *) self, "ord", args, 2);
          }

          static PyObject *t_IDVersionSegmentTermsEnum_seekCeil(t_IDVersionSegmentTermsEnum *self, PyObject *args)
          {
            ::org::apache::lucene::util::BytesRef a0((jobject) NULL);
            ::org::apache::lucene::index::TermsEnum$SeekStatus result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::util::BytesRef::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.seekCeil(a0));
              return ::org::apache::lucene::index::t_TermsEnum$SeekStatus::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(IDVersionSegmentTermsEnum), (PyObject *) self, "seekCeil", args, 2);
          }

          static PyObject *t_IDVersionSegmentTermsEnum_seekExact(t_IDVersionSegmentTermsEnum *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::org::apache::lucene::util::BytesRef a0((jobject) NULL);
                jboolean result;

                if (!parseArgs(args, "k", ::org::apache::lucene::util::BytesRef::initializeClass, &a0))
                {
                  OBJ_CALL(result = self->object.seekExact(a0));
                  Py_RETURN_BOOL(result);
                }
              }
              {
                jlong a0;

                if (!parseArgs(args, "J", &a0))
                {
                  OBJ_CALL(self->object.seekExact(a0));
                  Py_RETURN_NONE;
                }
              }
              break;
             case 2:
              {
                ::org::apache::lucene::util::BytesRef a0((jobject) NULL);
                ::org::apache::lucene::index::TermState a1((jobject) NULL);

                if (!parseArgs(args, "kk", ::org::apache::lucene::util::BytesRef::initializeClass, ::org::apache::lucene::index::TermState::initializeClass, &a0, &a1))
                {
                  OBJ_CALL(self->object.seekExact(a0, a1));
                  Py_RETURN_NONE;
                }
              }
              {
                ::org::apache::lucene::util::BytesRef a0((jobject) NULL);
                jlong a1;
                jboolean result;

                if (!parseArgs(args, "kJ", ::org::apache::lucene::util::BytesRef::initializeClass, &a0, &a1))
                {
                  OBJ_CALL(result = self->object.seekExact(a0, a1));
                  Py_RETURN_BOOL(result);
                }
              }
            }

            return callSuper(&PY_TYPE(IDVersionSegmentTermsEnum), (PyObject *) self, "seekExact", args, 2);
          }

          static PyObject *t_IDVersionSegmentTermsEnum_term(t_IDVersionSegmentTermsEnum *self, PyObject *args)
          {
            ::org::apache::lucene::util::BytesRef result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.term());
              return ::org::apache::lucene::util::t_BytesRef::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(IDVersionSegmentTermsEnum), (PyObject *) self, "term", args, 2);
          }

          static PyObject *t_IDVersionSegmentTermsEnum_termState(t_IDVersionSegmentTermsEnum *self, PyObject *args)
          {
            ::org::apache::lucene::index::TermState result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.termState());
              return ::org::apache::lucene::index::t_TermState::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(IDVersionSegmentTermsEnum), (PyObject *) self, "termState", args, 2);
          }

          static PyObject *t_IDVersionSegmentTermsEnum_toString(t_IDVersionSegmentTermsEnum *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(&PY_TYPE(IDVersionSegmentTermsEnum), (PyObject *) self, "toString", args, 2);
          }

          static PyObject *t_IDVersionSegmentTermsEnum_totalTermFreq(t_IDVersionSegmentTermsEnum *self, PyObject *args)
          {
            jlong result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.totalTermFreq());
              return PyLong_FromLongLong((PY_LONG_LONG) result);
            }

            return callSuper(&PY_TYPE(IDVersionSegmentTermsEnum), (PyObject *) self, "totalTermFreq", args, 2);
          }

          static PyObject *t_IDVersionSegmentTermsEnum_get__comparator(t_IDVersionSegmentTermsEnum *self, void *data)
          {
            ::java::util::Comparator value((jobject) NULL);
            OBJ_CALL(value = self->object.getComparator());
            return ::java::util::t_Comparator::wrap_Object(value);
          }

          static PyObject *t_IDVersionSegmentTermsEnum_get__version(t_IDVersionSegmentTermsEnum *self, void *data)
          {
            jlong value;
            OBJ_CALL(value = self->object.getVersion());
            return PyLong_FromLongLong((PY_LONG_LONG) value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/compound/hyphenation/ByteVector.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace compound {
          namespace hyphenation {

            ::java::lang::Class *ByteVector::class$ = NULL;
            jmethodID *ByteVector::mids$ = NULL;
            bool ByteVector::live$ = false;

            jclass ByteVector::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/compound/hyphenation/ByteVector");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
                mids$[mid_init$_49b4f12b] = env->getMethodID(cls, "<init>", "([B)V");
                mids$[mid_init$_39c7bd3c] = env->getMethodID(cls, "<init>", "(I)V");
                mids$[mid_init$_b8354c43] = env->getMethodID(cls, "<init>", "([BI)V");
                mids$[mid_alloc_39c7bd23] = env->getMethodID(cls, "alloc", "(I)I");
                mids$[mid_capacity_54c6a179] = env->getMethodID(cls, "capacity", "()I");
                mids$[mid_get_39c7bd28] = env->getMethodID(cls, "get", "(I)B");
                mids$[mid_getArray_dab10e7e] = env->getMethodID(cls, "getArray", "()[B");
                mids$[mid_length_54c6a179] = env->getMethodID(cls, "length", "()I");
                mids$[mid_put_58d0da5d] = env->getMethodID(cls, "put", "(IB)V");
                mids$[mid_trimToSize_54c6a166] = env->getMethodID(cls, "trimToSize", "()V");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            ByteVector::ByteVector() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

            ByteVector::ByteVector(const JArray< jbyte > & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_49b4f12b, a0.this$)) {}

            ByteVector::ByteVector(jint a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_39c7bd3c, a0)) {}

            ByteVector::ByteVector(const JArray< jbyte > & a0, jint a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_b8354c43, a0.this$, a1)) {}

            jint ByteVector::alloc(jint a0) const
            {
              return env->callIntMethod(this$, mids$[mid_alloc_39c7bd23], a0);
            }

            jint ByteVector::capacity() const
            {
              return env->callIntMethod(this$, mids$[mid_capacity_54c6a179]);
            }

            jbyte ByteVector::get(jint a0) const
            {
              return env->callByteMethod(this$, mids$[mid_get_39c7bd28], a0);
            }

            JArray< jbyte > ByteVector::getArray() const
            {
              return JArray< jbyte >(env->callObjectMethod(this$, mids$[mid_getArray_dab10e7e]));
            }

            jint ByteVector::length() const
            {
              return env->callIntMethod(this$, mids$[mid_length_54c6a179]);
            }

            void ByteVector::put(jint a0, jbyte a1) const
            {
              env->callVoidMethod(this$, mids$[mid_put_58d0da5d], a0, a1);
            }

            void ByteVector::trimToSize() const
            {
              env->callVoidMethod(this$, mids$[mid_trimToSize_54c6a166]);
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace compound {
          namespace hyphenation {
            static PyObject *t_ByteVector_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_ByteVector_instance_(PyTypeObject *type, PyObject *arg);
            static int t_ByteVector_init_(t_ByteVector *self, PyObject *args, PyObject *kwds);
            static PyObject *t_ByteVector_alloc(t_ByteVector *self, PyObject *arg);
            static PyObject *t_ByteVector_capacity(t_ByteVector *self);
            static PyObject *t_ByteVector_get(t_ByteVector *self, PyObject *arg);
            static PyObject *t_ByteVector_getArray(t_ByteVector *self);
            static PyObject *t_ByteVector_length(t_ByteVector *self);
            static PyObject *t_ByteVector_put(t_ByteVector *self, PyObject *args);
            static PyObject *t_ByteVector_trimToSize(t_ByteVector *self);
            static PyObject *t_ByteVector_get__array(t_ByteVector *self, void *data);
            static PyGetSetDef t_ByteVector__fields_[] = {
              DECLARE_GET_FIELD(t_ByteVector, array),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_ByteVector__methods_[] = {
              DECLARE_METHOD(t_ByteVector, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_ByteVector, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_ByteVector, alloc, METH_O),
              DECLARE_METHOD(t_ByteVector, capacity, METH_NOARGS),
              DECLARE_METHOD(t_ByteVector, get, METH_O),
              DECLARE_METHOD(t_ByteVector, getArray, METH_NOARGS),
              DECLARE_METHOD(t_ByteVector, length, METH_NOARGS),
              DECLARE_METHOD(t_ByteVector, put, METH_VARARGS),
              DECLARE_METHOD(t_ByteVector, trimToSize, METH_NOARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(ByteVector, t_ByteVector, ::java::lang::Object, ByteVector, t_ByteVector_init_, 0, 0, t_ByteVector__fields_, 0, 0);

            void t_ByteVector::install(PyObject *module)
            {
              installType(&PY_TYPE(ByteVector), module, "ByteVector", 0);
            }

            void t_ByteVector::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(ByteVector).tp_dict, "class_", make_descriptor(ByteVector::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(ByteVector).tp_dict, "wrapfn_", make_descriptor(t_ByteVector::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(ByteVector).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_ByteVector_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, ByteVector::initializeClass, 1)))
                return NULL;
              return t_ByteVector::wrap_Object(ByteVector(((t_ByteVector *) arg)->object.this$));
            }
            static PyObject *t_ByteVector_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, ByteVector::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_ByteVector_init_(t_ByteVector *self, PyObject *args, PyObject *kwds)
            {
              switch (PyTuple_GET_SIZE(args)) {
               case 0:
                {
                  ByteVector object((jobject) NULL);

                  INT_CALL(object = ByteVector());
                  self->object = object;
                  break;
                }
                goto err;
               case 1:
                {
                  JArray< jbyte > a0((jobject) NULL);
                  ByteVector object((jobject) NULL);

                  if (!parseArgs(args, "[B", &a0))
                  {
                    INT_CALL(object = ByteVector(a0));
                    self->object = object;
                    break;
                  }
                }
                {
                  jint a0;
                  ByteVector object((jobject) NULL);

                  if (!parseArgs(args, "I", &a0))
                  {
                    INT_CALL(object = ByteVector(a0));
                    self->object = object;
                    break;
                  }
                }
                goto err;
               case 2:
                {
                  JArray< jbyte > a0((jobject) NULL);
                  jint a1;
                  ByteVector object((jobject) NULL);

                  if (!parseArgs(args, "[BI", &a0, &a1))
                  {
                    INT_CALL(object = ByteVector(a0, a1));
                    self->object = object;
                    break;
                  }
                }
               default:
               err:
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_ByteVector_alloc(t_ByteVector *self, PyObject *arg)
            {
              jint a0;
              jint result;

              if (!parseArg(arg, "I", &a0))
              {
                OBJ_CALL(result = self->object.alloc(a0));
                return PyInt_FromLong((long) result);
              }

              PyErr_SetArgsError((PyObject *) self, "alloc", arg);
              return NULL;
            }

            static PyObject *t_ByteVector_capacity(t_ByteVector *self)
            {
              jint result;
              OBJ_CALL(result = self->object.capacity());
              return PyInt_FromLong((long) result);
            }

            static PyObject *t_ByteVector_get(t_ByteVector *self, PyObject *arg)
            {
              jint a0;
              jbyte result;

              if (!parseArg(arg, "I", &a0))
              {
                OBJ_CALL(result = self->object.get(a0));
                return PyInt_FromLong((long) result);
              }

              PyErr_SetArgsError((PyObject *) self, "get", arg);
              return NULL;
            }

            static PyObject *t_ByteVector_getArray(t_ByteVector *self)
            {
              JArray< jbyte > result((jobject) NULL);
              OBJ_CALL(result = self->object.getArray());
              return result.wrap();
            }

            static PyObject *t_ByteVector_length(t_ByteVector *self)
            {
              jint result;
              OBJ_CALL(result = self->object.length());
              return PyInt_FromLong((long) result);
            }

            static PyObject *t_ByteVector_put(t_ByteVector *self, PyObject *args)
            {
              jint a0;
              jbyte a1;

              if (!parseArgs(args, "IB", &a0, &a1))
              {
                OBJ_CALL(self->object.put(a0, a1));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "put", args);
              return NULL;
            }

            static PyObject *t_ByteVector_trimToSize(t_ByteVector *self)
            {
              OBJ_CALL(self->object.trimToSize());
              Py_RETURN_NONE;
            }

            static PyObject *t_ByteVector_get__array(t_ByteVector *self, void *data)
            {
              JArray< jbyte > value((jobject) NULL);
              OBJ_CALL(value = self->object.getArray());
              return value.wrap();
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/Attribute.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *Attribute::class$ = NULL;
        jmethodID *Attribute::mids$ = NULL;
        bool Attribute::live$ = false;

        jclass Attribute::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/Attribute");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_Attribute_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_Attribute_instance_(PyTypeObject *type, PyObject *arg);

        static PyMethodDef t_Attribute__methods_[] = {
          DECLARE_METHOD(t_Attribute, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_Attribute, instance_, METH_O | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(Attribute, t_Attribute, ::java::lang::Object, Attribute, abstract_init, 0, 0, 0, 0, 0);

        void t_Attribute::install(PyObject *module)
        {
          installType(&PY_TYPE(Attribute), module, "Attribute", 0);
        }

        void t_Attribute::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(Attribute).tp_dict, "class_", make_descriptor(Attribute::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(Attribute).tp_dict, "wrapfn_", make_descriptor(t_Attribute::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(Attribute).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_Attribute_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, Attribute::initializeClass, 1)))
            return NULL;
          return t_Attribute::wrap_Object(Attribute(((t_Attribute *) arg)->object.this$));
        }
        static PyObject *t_Attribute_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, Attribute::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/FieldQueryNode.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/FieldValuePairQueryNode.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/TextableQueryNode.h"
#include "org/apache/lucene/queryparser/flexible/core/parser/EscapeQuerySyntax.h"
#include "java/lang/CloneNotSupportedException.h"
#include "java/lang/CharSequence.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace nodes {

              ::java::lang::Class *FieldQueryNode::class$ = NULL;
              jmethodID *FieldQueryNode::mids$ = NULL;
              bool FieldQueryNode::live$ = false;

              jclass FieldQueryNode::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/core/nodes/FieldQueryNode");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_ddd81d4e] = env->getMethodID(cls, "<init>", "(Ljava/lang/CharSequence;Ljava/lang/CharSequence;II)V");
                  mids$[mid_cloneTree_010ca031] = env->getMethodID(cls, "cloneTree", "()Lorg/apache/lucene/queryparser/flexible/core/nodes/FieldQueryNode;");
                  mids$[mid_getBegin_54c6a179] = env->getMethodID(cls, "getBegin", "()I");
                  mids$[mid_getEnd_54c6a179] = env->getMethodID(cls, "getEnd", "()I");
                  mids$[mid_getField_e0adba2f] = env->getMethodID(cls, "getField", "()Ljava/lang/CharSequence;");
                  mids$[mid_getFieldAsString_14c7b5c5] = env->getMethodID(cls, "getFieldAsString", "()Ljava/lang/String;");
                  mids$[mid_getPositionIncrement_54c6a179] = env->getMethodID(cls, "getPositionIncrement", "()I");
                  mids$[mid_getText_e0adba2f] = env->getMethodID(cls, "getText", "()Ljava/lang/CharSequence;");
                  mids$[mid_getTextAsString_14c7b5c5] = env->getMethodID(cls, "getTextAsString", "()Ljava/lang/String;");
                  mids$[mid_getValue_e0adba2f] = env->getMethodID(cls, "getValue", "()Ljava/lang/CharSequence;");
                  mids$[mid_setBegin_39c7bd3c] = env->getMethodID(cls, "setBegin", "(I)V");
                  mids$[mid_setEnd_39c7bd3c] = env->getMethodID(cls, "setEnd", "(I)V");
                  mids$[mid_setField_a8afc64a] = env->getMethodID(cls, "setField", "(Ljava/lang/CharSequence;)V");
                  mids$[mid_setPositionIncrement_39c7bd3c] = env->getMethodID(cls, "setPositionIncrement", "(I)V");
                  mids$[mid_setText_a8afc64a] = env->getMethodID(cls, "setText", "(Ljava/lang/CharSequence;)V");
                  mids$[mid_setValue_a8afc64a] = env->getMethodID(cls, "setValue", "(Ljava/lang/CharSequence;)V");
                  mids$[mid_toQueryString_99b8dfe1] = env->getMethodID(cls, "toQueryString", "(Lorg/apache/lucene/queryparser/flexible/core/parser/EscapeQuerySyntax;)Ljava/lang/CharSequence;");
                  mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");
                  mids$[mid_getTermEscaped_99b8dfe1] = env->getMethodID(cls, "getTermEscaped", "(Lorg/apache/lucene/queryparser/flexible/core/parser/EscapeQuerySyntax;)Ljava/lang/CharSequence;");
                  mids$[mid_getTermEscapeQuoted_99b8dfe1] = env->getMethodID(cls, "getTermEscapeQuoted", "(Lorg/apache/lucene/queryparser/flexible/core/parser/EscapeQuerySyntax;)Ljava/lang/CharSequence;");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              FieldQueryNode::FieldQueryNode(const ::java::lang::CharSequence & a0, const ::java::lang::CharSequence & a1, jint a2, jint a3) : ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNodeImpl(env->newObject(initializeClass, &mids$, mid_init$_ddd81d4e, a0.this$, a1.this$, a2, a3)) {}

              FieldQueryNode FieldQueryNode::cloneTree() const
              {
                return FieldQueryNode(env->callObjectMethod(this$, mids$[mid_cloneTree_010ca031]));
              }

              jint FieldQueryNode::getBegin() const
              {
                return env->callIntMethod(this$, mids$[mid_getBegin_54c6a179]);
              }

              jint FieldQueryNode::getEnd() const
              {
                return env->callIntMethod(this$, mids$[mid_getEnd_54c6a179]);
              }

              ::java::lang::CharSequence FieldQueryNode::getField() const
              {
                return ::java::lang::CharSequence(env->callObjectMethod(this$, mids$[mid_getField_e0adba2f]));
              }

              ::java::lang::String FieldQueryNode::getFieldAsString() const
              {
                return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getFieldAsString_14c7b5c5]));
              }

              jint FieldQueryNode::getPositionIncrement() const
              {
                return env->callIntMethod(this$, mids$[mid_getPositionIncrement_54c6a179]);
              }

              ::java::lang::CharSequence FieldQueryNode::getText() const
              {
                return ::java::lang::CharSequence(env->callObjectMethod(this$, mids$[mid_getText_e0adba2f]));
              }

              ::java::lang::String FieldQueryNode::getTextAsString() const
              {
                return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getTextAsString_14c7b5c5]));
              }

              ::java::lang::CharSequence FieldQueryNode::getValue() const
              {
                return ::java::lang::CharSequence(env->callObjectMethod(this$, mids$[mid_getValue_e0adba2f]));
              }

              void FieldQueryNode::setBegin(jint a0) const
              {
                env->callVoidMethod(this$, mids$[mid_setBegin_39c7bd3c], a0);
              }

              void FieldQueryNode::setEnd(jint a0) const
              {
                env->callVoidMethod(this$, mids$[mid_setEnd_39c7bd3c], a0);
              }

              void FieldQueryNode::setField(const ::java::lang::CharSequence & a0) const
              {
                env->callVoidMethod(this$, mids$[mid_setField_a8afc64a], a0.this$);
              }

              void FieldQueryNode::setPositionIncrement(jint a0) const
              {
                env->callVoidMethod(this$, mids$[mid_setPositionIncrement_39c7bd3c], a0);
              }

              void FieldQueryNode::setText(const ::java::lang::CharSequence & a0) const
              {
                env->callVoidMethod(this$, mids$[mid_setText_a8afc64a], a0.this$);
              }

              void FieldQueryNode::setValue(const ::java::lang::CharSequence & a0) const
              {
                env->callVoidMethod(this$, mids$[mid_setValue_a8afc64a], a0.this$);
              }

              ::java::lang::CharSequence FieldQueryNode::toQueryString(const ::org::apache::lucene::queryparser::flexible::core::parser::EscapeQuerySyntax & a0) const
              {
                return ::java::lang::CharSequence(env->callObjectMethod(this$, mids$[mid_toQueryString_99b8dfe1], a0.this$));
              }

              ::java::lang::String FieldQueryNode::toString() const
              {
                return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace nodes {
              static PyObject *t_FieldQueryNode_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_FieldQueryNode_instance_(PyTypeObject *type, PyObject *arg);
              static int t_FieldQueryNode_init_(t_FieldQueryNode *self, PyObject *args, PyObject *kwds);
              static PyObject *t_FieldQueryNode_cloneTree(t_FieldQueryNode *self, PyObject *args);
              static PyObject *t_FieldQueryNode_getBegin(t_FieldQueryNode *self);
              static PyObject *t_FieldQueryNode_getEnd(t_FieldQueryNode *self);
              static PyObject *t_FieldQueryNode_getField(t_FieldQueryNode *self);
              static PyObject *t_FieldQueryNode_getFieldAsString(t_FieldQueryNode *self);
              static PyObject *t_FieldQueryNode_getPositionIncrement(t_FieldQueryNode *self);
              static PyObject *t_FieldQueryNode_getText(t_FieldQueryNode *self);
              static PyObject *t_FieldQueryNode_getTextAsString(t_FieldQueryNode *self);
              static PyObject *t_FieldQueryNode_getValue(t_FieldQueryNode *self);
              static PyObject *t_FieldQueryNode_setBegin(t_FieldQueryNode *self, PyObject *arg);
              static PyObject *t_FieldQueryNode_setEnd(t_FieldQueryNode *self, PyObject *arg);
              static PyObject *t_FieldQueryNode_setField(t_FieldQueryNode *self, PyObject *arg);
              static PyObject *t_FieldQueryNode_setPositionIncrement(t_FieldQueryNode *self, PyObject *arg);
              static PyObject *t_FieldQueryNode_setText(t_FieldQueryNode *self, PyObject *arg);
              static PyObject *t_FieldQueryNode_setValue(t_FieldQueryNode *self, PyObject *arg);
              static PyObject *t_FieldQueryNode_toQueryString(t_FieldQueryNode *self, PyObject *args);
              static PyObject *t_FieldQueryNode_toString(t_FieldQueryNode *self, PyObject *args);
              static PyObject *t_FieldQueryNode_get__begin(t_FieldQueryNode *self, void *data);
              static int t_FieldQueryNode_set__begin(t_FieldQueryNode *self, PyObject *arg, void *data);
              static PyObject *t_FieldQueryNode_get__end(t_FieldQueryNode *self, void *data);
              static int t_FieldQueryNode_set__end(t_FieldQueryNode *self, PyObject *arg, void *data);
              static PyObject *t_FieldQueryNode_get__field(t_FieldQueryNode *self, void *data);
              static int t_FieldQueryNode_set__field(t_FieldQueryNode *self, PyObject *arg, void *data);
              static PyObject *t_FieldQueryNode_get__fieldAsString(t_FieldQueryNode *self, void *data);
              static PyObject *t_FieldQueryNode_get__positionIncrement(t_FieldQueryNode *self, void *data);
              static int t_FieldQueryNode_set__positionIncrement(t_FieldQueryNode *self, PyObject *arg, void *data);
              static PyObject *t_FieldQueryNode_get__text(t_FieldQueryNode *self, void *data);
              static int t_FieldQueryNode_set__text(t_FieldQueryNode *self, PyObject *arg, void *data);
              static PyObject *t_FieldQueryNode_get__textAsString(t_FieldQueryNode *self, void *data);
              static PyObject *t_FieldQueryNode_get__value(t_FieldQueryNode *self, void *data);
              static int t_FieldQueryNode_set__value(t_FieldQueryNode *self, PyObject *arg, void *data);
              static PyGetSetDef t_FieldQueryNode__fields_[] = {
                DECLARE_GETSET_FIELD(t_FieldQueryNode, begin),
                DECLARE_GETSET_FIELD(t_FieldQueryNode, end),
                DECLARE_GETSET_FIELD(t_FieldQueryNode, field),
                DECLARE_GET_FIELD(t_FieldQueryNode, fieldAsString),
                DECLARE_GETSET_FIELD(t_FieldQueryNode, positionIncrement),
                DECLARE_GETSET_FIELD(t_FieldQueryNode, text),
                DECLARE_GET_FIELD(t_FieldQueryNode, textAsString),
                DECLARE_GETSET_FIELD(t_FieldQueryNode, value),
                { NULL, NULL, NULL, NULL, NULL }
              };

              static PyMethodDef t_FieldQueryNode__methods_[] = {
                DECLARE_METHOD(t_FieldQueryNode, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_FieldQueryNode, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_FieldQueryNode, cloneTree, METH_VARARGS),
                DECLARE_METHOD(t_FieldQueryNode, getBegin, METH_NOARGS),
                DECLARE_METHOD(t_FieldQueryNode, getEnd, METH_NOARGS),
                DECLARE_METHOD(t_FieldQueryNode, getField, METH_NOARGS),
                DECLARE_METHOD(t_FieldQueryNode, getFieldAsString, METH_NOARGS),
                DECLARE_METHOD(t_FieldQueryNode, getPositionIncrement, METH_NOARGS),
                DECLARE_METHOD(t_FieldQueryNode, getText, METH_NOARGS),
                DECLARE_METHOD(t_FieldQueryNode, getTextAsString, METH_NOARGS),
                DECLARE_METHOD(t_FieldQueryNode, getValue, METH_NOARGS),
                DECLARE_METHOD(t_FieldQueryNode, setBegin, METH_O),
                DECLARE_METHOD(t_FieldQueryNode, setEnd, METH_O),
                DECLARE_METHOD(t_FieldQueryNode, setField, METH_O),
                DECLARE_METHOD(t_FieldQueryNode, setPositionIncrement, METH_O),
                DECLARE_METHOD(t_FieldQueryNode, setText, METH_O),
                DECLARE_METHOD(t_FieldQueryNode, setValue, METH_O),
                DECLARE_METHOD(t_FieldQueryNode, toQueryString, METH_VARARGS),
                DECLARE_METHOD(t_FieldQueryNode, toString, METH_VARARGS),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(FieldQueryNode, t_FieldQueryNode, ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNodeImpl, FieldQueryNode, t_FieldQueryNode_init_, 0, 0, t_FieldQueryNode__fields_, 0, 0);

              void t_FieldQueryNode::install(PyObject *module)
              {
                installType(&PY_TYPE(FieldQueryNode), module, "FieldQueryNode", 0);
              }

              void t_FieldQueryNode::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(FieldQueryNode).tp_dict, "class_", make_descriptor(FieldQueryNode::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(FieldQueryNode).tp_dict, "wrapfn_", make_descriptor(t_FieldQueryNode::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(FieldQueryNode).tp_dict, "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_FieldQueryNode_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, FieldQueryNode::initializeClass, 1)))
                  return NULL;
                return t_FieldQueryNode::wrap_Object(FieldQueryNode(((t_FieldQueryNode *) arg)->object.this$));
              }
              static PyObject *t_FieldQueryNode_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, FieldQueryNode::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_FieldQueryNode_init_(t_FieldQueryNode *self, PyObject *args, PyObject *kwds)
              {
                ::java::lang::CharSequence a0((jobject) NULL);
                ::java::lang::CharSequence a1((jobject) NULL);
                jint a2;
                jint a3;
                FieldQueryNode object((jobject) NULL);

                if (!parseArgs(args, "OOII", &::java::lang::PY_TYPE(CharSequence), &::java::lang::PY_TYPE(CharSequence), &a0, &a1, &a2, &a3))
                {
                  INT_CALL(object = FieldQueryNode(a0, a1, a2, a3));
                  self->object = object;
                }
                else
                {
                  PyErr_SetArgsError((PyObject *) self, "__init__", args);
                  return -1;
                }

                return 0;
              }

              static PyObject *t_FieldQueryNode_cloneTree(t_FieldQueryNode *self, PyObject *args)
              {
                FieldQueryNode result((jobject) NULL);

                if (!parseArgs(args, ""))
                {
                  OBJ_CALL(result = self->object.cloneTree());
                  return t_FieldQueryNode::wrap_Object(result);
                }

                return callSuper(&PY_TYPE(FieldQueryNode), (PyObject *) self, "cloneTree", args, 2);
              }

              static PyObject *t_FieldQueryNode_getBegin(t_FieldQueryNode *self)
              {
                jint result;
                OBJ_CALL(result = self->object.getBegin());
                return PyInt_FromLong((long) result);
              }

              static PyObject *t_FieldQueryNode_getEnd(t_FieldQueryNode *self)
              {
                jint result;
                OBJ_CALL(result = self->object.getEnd());
                return PyInt_FromLong((long) result);
              }

              static PyObject *t_FieldQueryNode_getField(t_FieldQueryNode *self)
              {
                ::java::lang::CharSequence result((jobject) NULL);
                OBJ_CALL(result = self->object.getField());
                return ::java::lang::t_CharSequence::wrap_Object(result);
              }

              static PyObject *t_FieldQueryNode_getFieldAsString(t_FieldQueryNode *self)
              {
                ::java::lang::String result((jobject) NULL);
                OBJ_CALL(result = self->object.getFieldAsString());
                return j2p(result);
              }

              static PyObject *t_FieldQueryNode_getPositionIncrement(t_FieldQueryNode *self)
              {
                jint result;
                OBJ_CALL(result = self->object.getPositionIncrement());
                return PyInt_FromLong((long) result);
              }

              static PyObject *t_FieldQueryNode_getText(t_FieldQueryNode *self)
              {
                ::java::lang::CharSequence result((jobject) NULL);
                OBJ_CALL(result = self->object.getText());
                return ::java::lang::t_CharSequence::wrap_Object(result);
              }

              static PyObject *t_FieldQueryNode_getTextAsString(t_FieldQueryNode *self)
              {
                ::java::lang::String result((jobject) NULL);
                OBJ_CALL(result = self->object.getTextAsString());
                return j2p(result);
              }

              static PyObject *t_FieldQueryNode_getValue(t_FieldQueryNode *self)
              {
                ::java::lang::CharSequence result((jobject) NULL);
                OBJ_CALL(result = self->object.getValue());
                return ::java::lang::t_CharSequence::wrap_Object(result);
              }

              static PyObject *t_FieldQueryNode_setBegin(t_FieldQueryNode *self, PyObject *arg)
              {
                jint a0;

                if (!parseArg(arg, "I", &a0))
                {
                  OBJ_CALL(self->object.setBegin(a0));
                  Py_RETURN_NONE;
                }

                PyErr_SetArgsError((PyObject *) self, "setBegin", arg);
                return NULL;
              }

              static PyObject *t_FieldQueryNode_setEnd(t_FieldQueryNode *self, PyObject *arg)
              {
                jint a0;

                if (!parseArg(arg, "I", &a0))
                {
                  OBJ_CALL(self->object.setEnd(a0));
                  Py_RETURN_NONE;
                }

                PyErr_SetArgsError((PyObject *) self, "setEnd", arg);
                return NULL;
              }

              static PyObject *t_FieldQueryNode_setField(t_FieldQueryNode *self, PyObject *arg)
              {
                ::java::lang::CharSequence a0((jobject) NULL);

                if (!parseArg(arg, "O", &::java::lang::PY_TYPE(CharSequence), &a0))
                {
                  OBJ_CALL(self->object.setField(a0));
                  Py_RETURN_NONE;
                }

                PyErr_SetArgsError((PyObject *) self, "setField", arg);
                return NULL;
              }

              static PyObject *t_FieldQueryNode_setPositionIncrement(t_FieldQueryNode *self, PyObject *arg)
              {
                jint a0;

                if (!parseArg(arg, "I", &a0))
                {
                  OBJ_CALL(self->object.setPositionIncrement(a0));
                  Py_RETURN_NONE;
                }

                PyErr_SetArgsError((PyObject *) self, "setPositionIncrement", arg);
                return NULL;
              }

              static PyObject *t_FieldQueryNode_setText(t_FieldQueryNode *self, PyObject *arg)
              {
                ::java::lang::CharSequence a0((jobject) NULL);

                if (!parseArg(arg, "O", &::java::lang::PY_TYPE(CharSequence), &a0))
                {
                  OBJ_CALL(self->object.setText(a0));
                  Py_RETURN_NONE;
                }

                PyErr_SetArgsError((PyObject *) self, "setText", arg);
                return NULL;
              }

              static PyObject *t_FieldQueryNode_setValue(t_FieldQueryNode *self, PyObject *arg)
              {
                ::java::lang::CharSequence a0((jobject) NULL);

                if (!parseArg(arg, "O", &::java::lang::PY_TYPE(CharSequence), &a0))
                {
                  OBJ_CALL(self->object.setValue(a0));
                  Py_RETURN_NONE;
                }

                PyErr_SetArgsError((PyObject *) self, "setValue", arg);
                return NULL;
              }

              static PyObject *t_FieldQueryNode_toQueryString(t_FieldQueryNode *self, PyObject *args)
              {
                ::org::apache::lucene::queryparser::flexible::core::parser::EscapeQuerySyntax a0((jobject) NULL);
                ::java::lang::CharSequence result((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::queryparser::flexible::core::parser::EscapeQuerySyntax::initializeClass, &a0))
                {
                  OBJ_CALL(result = self->object.toQueryString(a0));
                  return ::java::lang::t_CharSequence::wrap_Object(result);
                }

                return callSuper(&PY_TYPE(FieldQueryNode), (PyObject *) self, "toQueryString", args, 2);
              }

              static PyObject *t_FieldQueryNode_toString(t_FieldQueryNode *self, PyObject *args)
              {
                ::java::lang::String result((jobject) NULL);

                if (!parseArgs(args, ""))
                {
                  OBJ_CALL(result = self->object.toString());
                  return j2p(result);
                }

                return callSuper(&PY_TYPE(FieldQueryNode), (PyObject *) self, "toString", args, 2);
              }

              static PyObject *t_FieldQueryNode_get__begin(t_FieldQueryNode *self, void *data)
              {
                jint value;
                OBJ_CALL(value = self->object.getBegin());
                return PyInt_FromLong((long) value);
              }
              static int t_FieldQueryNode_set__begin(t_FieldQueryNode *self, PyObject *arg, void *data)
              {
                {
                  jint value;
                  if (!parseArg(arg, "I", &value))
                  {
                    INT_CALL(self->object.setBegin(value));
                    return 0;
                  }
                }
                PyErr_SetArgsError((PyObject *) self, "begin", arg);
                return -1;
              }

              static PyObject *t_FieldQueryNode_get__end(t_FieldQueryNode *self, void *data)
              {
                jint value;
                OBJ_CALL(value = self->object.getEnd());
                return PyInt_FromLong((long) value);
              }
              static int t_FieldQueryNode_set__end(t_FieldQueryNode *self, PyObject *arg, void *data)
              {
                {
                  jint value;
                  if (!parseArg(arg, "I", &value))
                  {
                    INT_CALL(self->object.setEnd(value));
                    return 0;
                  }
                }
                PyErr_SetArgsError((PyObject *) self, "end", arg);
                return -1;
              }

              static PyObject *t_FieldQueryNode_get__field(t_FieldQueryNode *self, void *data)
              {
                ::java::lang::CharSequence value((jobject) NULL);
                OBJ_CALL(value = self->object.getField());
                return ::java::lang::t_CharSequence::wrap_Object(value);
              }
              static int t_FieldQueryNode_set__field(t_FieldQueryNode *self, PyObject *arg, void *data)
              {
                {
                  ::java::lang::CharSequence value((jobject) NULL);
                  if (!parseArg(arg, "O", &::java::lang::PY_TYPE(CharSequence), &value))
                  {
                    INT_CALL(self->object.setField(value));
                    return 0;
                  }
                }
                PyErr_SetArgsError((PyObject *) self, "field", arg);
                return -1;
              }

              static PyObject *t_FieldQueryNode_get__fieldAsString(t_FieldQueryNode *self, void *data)
              {
                ::java::lang::String value((jobject) NULL);
                OBJ_CALL(value = self->object.getFieldAsString());
                return j2p(value);
              }

              static PyObject *t_FieldQueryNode_get__positionIncrement(t_FieldQueryNode *self, void *data)
              {
                jint value;
                OBJ_CALL(value = self->object.getPositionIncrement());
                return PyInt_FromLong((long) value);
              }
              static int t_FieldQueryNode_set__positionIncrement(t_FieldQueryNode *self, PyObject *arg, void *data)
              {
                {
                  jint value;
                  if (!parseArg(arg, "I", &value))
                  {
                    INT_CALL(self->object.setPositionIncrement(value));
                    return 0;
                  }
                }
                PyErr_SetArgsError((PyObject *) self, "positionIncrement", arg);
                return -1;
              }

              static PyObject *t_FieldQueryNode_get__text(t_FieldQueryNode *self, void *data)
              {
                ::java::lang::CharSequence value((jobject) NULL);
                OBJ_CALL(value = self->object.getText());
                return ::java::lang::t_CharSequence::wrap_Object(value);
              }
              static int t_FieldQueryNode_set__text(t_FieldQueryNode *self, PyObject *arg, void *data)
              {
                {
                  ::java::lang::CharSequence value((jobject) NULL);
                  if (!parseArg(arg, "O", &::java::lang::PY_TYPE(CharSequence), &value))
                  {
                    INT_CALL(self->object.setText(value));
                    return 0;
                  }
                }
                PyErr_SetArgsError((PyObject *) self, "text", arg);
                return -1;
              }

              static PyObject *t_FieldQueryNode_get__textAsString(t_FieldQueryNode *self, void *data)
              {
                ::java::lang::String value((jobject) NULL);
                OBJ_CALL(value = self->object.getTextAsString());
                return j2p(value);
              }

              static PyObject *t_FieldQueryNode_get__value(t_FieldQueryNode *self, void *data)
              {
                ::java::lang::CharSequence value((jobject) NULL);
                OBJ_CALL(value = self->object.getValue());
                return ::java::lang::t_CharSequence::wrap_Object(value);
              }
              static int t_FieldQueryNode_set__value(t_FieldQueryNode *self, PyObject *arg, void *data)
              {
                {
                  ::java::lang::CharSequence value((jobject) NULL);
                  if (!parseArg(arg, "O", &::java::lang::PY_TYPE(CharSequence), &value))
                  {
                    INT_CALL(self->object.setValue(value));
                    return 0;
                  }
                }
                PyErr_SetArgsError((PyObject *) self, "value", arg);
                return -1;
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/ScoreCachingWrappingScorer.h"
#include "org/apache/lucene/search/Scorer$ChildScorer.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/search/Scorer.h"
#include "java/util/Collection.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *ScoreCachingWrappingScorer::class$ = NULL;
        jmethodID *ScoreCachingWrappingScorer::mids$ = NULL;
        bool ScoreCachingWrappingScorer::live$ = false;

        jclass ScoreCachingWrappingScorer::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/ScoreCachingWrappingScorer");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_8be0880c] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/Scorer;)V");
            mids$[mid_getChildren_2d2d7de4] = env->getMethodID(cls, "getChildren", "()Ljava/util/Collection;");
            mids$[mid_score_54c6a176] = env->getMethodID(cls, "score", "()F");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        ScoreCachingWrappingScorer::ScoreCachingWrappingScorer(const ::org::apache::lucene::search::Scorer & a0) : ::org::apache::lucene::search::FilterScorer(env->newObject(initializeClass, &mids$, mid_init$_8be0880c, a0.this$)) {}

        ::java::util::Collection ScoreCachingWrappingScorer::getChildren() const
        {
          return ::java::util::Collection(env->callObjectMethod(this$, mids$[mid_getChildren_2d2d7de4]));
        }

        jfloat ScoreCachingWrappingScorer::score() const
        {
          return env->callFloatMethod(this$, mids$[mid_score_54c6a176]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_ScoreCachingWrappingScorer_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_ScoreCachingWrappingScorer_instance_(PyTypeObject *type, PyObject *arg);
        static int t_ScoreCachingWrappingScorer_init_(t_ScoreCachingWrappingScorer *self, PyObject *args, PyObject *kwds);
        static PyObject *t_ScoreCachingWrappingScorer_getChildren(t_ScoreCachingWrappingScorer *self, PyObject *args);
        static PyObject *t_ScoreCachingWrappingScorer_score(t_ScoreCachingWrappingScorer *self, PyObject *args);
        static PyObject *t_ScoreCachingWrappingScorer_get__children(t_ScoreCachingWrappingScorer *self, void *data);
        static PyGetSetDef t_ScoreCachingWrappingScorer__fields_[] = {
          DECLARE_GET_FIELD(t_ScoreCachingWrappingScorer, children),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_ScoreCachingWrappingScorer__methods_[] = {
          DECLARE_METHOD(t_ScoreCachingWrappingScorer, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_ScoreCachingWrappingScorer, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_ScoreCachingWrappingScorer, getChildren, METH_VARARGS),
          DECLARE_METHOD(t_ScoreCachingWrappingScorer, score, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(ScoreCachingWrappingScorer, t_ScoreCachingWrappingScorer, ::org::apache::lucene::search::FilterScorer, ScoreCachingWrappingScorer, t_ScoreCachingWrappingScorer_init_, 0, 0, t_ScoreCachingWrappingScorer__fields_, 0, 0);

        void t_ScoreCachingWrappingScorer::install(PyObject *module)
        {
          installType(&PY_TYPE(ScoreCachingWrappingScorer), module, "ScoreCachingWrappingScorer", 0);
        }

        void t_ScoreCachingWrappingScorer::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(ScoreCachingWrappingScorer).tp_dict, "class_", make_descriptor(ScoreCachingWrappingScorer::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(ScoreCachingWrappingScorer).tp_dict, "wrapfn_", make_descriptor(t_ScoreCachingWrappingScorer::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(ScoreCachingWrappingScorer).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_ScoreCachingWrappingScorer_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, ScoreCachingWrappingScorer::initializeClass, 1)))
            return NULL;
          return t_ScoreCachingWrappingScorer::wrap_Object(ScoreCachingWrappingScorer(((t_ScoreCachingWrappingScorer *) arg)->object.this$));
        }
        static PyObject *t_ScoreCachingWrappingScorer_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, ScoreCachingWrappingScorer::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_ScoreCachingWrappingScorer_init_(t_ScoreCachingWrappingScorer *self, PyObject *args, PyObject *kwds)
        {
          ::org::apache::lucene::search::Scorer a0((jobject) NULL);
          ScoreCachingWrappingScorer object((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::search::Scorer::initializeClass, &a0))
          {
            INT_CALL(object = ScoreCachingWrappingScorer(a0));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_ScoreCachingWrappingScorer_getChildren(t_ScoreCachingWrappingScorer *self, PyObject *args)
        {
          ::java::util::Collection result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.getChildren());
            return ::java::util::t_Collection::wrap_Object(result, &::org::apache::lucene::search::PY_TYPE(Scorer$ChildScorer));
          }

          return callSuper(&PY_TYPE(ScoreCachingWrappingScorer), (PyObject *) self, "getChildren", args, 2);
        }

        static PyObject *t_ScoreCachingWrappingScorer_score(t_ScoreCachingWrappingScorer *self, PyObject *args)
        {
          jfloat result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.score());
            return PyFloat_FromDouble((double) result);
          }

          return callSuper(&PY_TYPE(ScoreCachingWrappingScorer), (PyObject *) self, "score", args, 2);
        }

        static PyObject *t_ScoreCachingWrappingScorer_get__children(t_ScoreCachingWrappingScorer *self, void *data)
        {
          ::java::util::Collection value((jobject) NULL);
          OBJ_CALL(value = self->object.getChildren());
          return ::java::util::t_Collection::wrap_Object(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/DocIdBitSet.h"
#include "org/apache/lucene/util/Bits.h"
#include "java/util/BitSet.h"
#include "org/apache/lucene/search/DocIdSetIterator.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *DocIdBitSet::class$ = NULL;
        jmethodID *DocIdBitSet::mids$ = NULL;
        bool DocIdBitSet::live$ = false;

        jclass DocIdBitSet::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/DocIdBitSet");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_c8849d64] = env->getMethodID(cls, "<init>", "(Ljava/util/BitSet;)V");
            mids$[mid_bits_03c2457d] = env->getMethodID(cls, "bits", "()Lorg/apache/lucene/util/Bits;");
            mids$[mid_get_39c7bd30] = env->getMethodID(cls, "get", "(I)Z");
            mids$[mid_getBitSet_59c0eb4d] = env->getMethodID(cls, "getBitSet", "()Ljava/util/BitSet;");
            mids$[mid_isCacheable_54c6a16a] = env->getMethodID(cls, "isCacheable", "()Z");
            mids$[mid_iterator_dc23660c] = env->getMethodID(cls, "iterator", "()Lorg/apache/lucene/search/DocIdSetIterator;");
            mids$[mid_length_54c6a179] = env->getMethodID(cls, "length", "()I");
            mids$[mid_ramBytesUsed_54c6a17a] = env->getMethodID(cls, "ramBytesUsed", "()J");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        DocIdBitSet::DocIdBitSet(const ::java::util::BitSet & a0) : ::org::apache::lucene::search::DocIdSet(env->newObject(initializeClass, &mids$, mid_init$_c8849d64, a0.this$)) {}

        ::org::apache::lucene::util::Bits DocIdBitSet::bits() const
        {
          return ::org::apache::lucene::util::Bits(env->callObjectMethod(this$, mids$[mid_bits_03c2457d]));
        }

        jboolean DocIdBitSet::get(jint a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_get_39c7bd30], a0);
        }

        ::java::util::BitSet DocIdBitSet::getBitSet() const
        {
          return ::java::util::BitSet(env->callObjectMethod(this$, mids$[mid_getBitSet_59c0eb4d]));
        }

        jboolean DocIdBitSet::isCacheable() const
        {
          return env->callBooleanMethod(this$, mids$[mid_isCacheable_54c6a16a]);
        }

        ::org::apache::lucene::search::DocIdSetIterator DocIdBitSet::iterator() const
        {
          return ::org::apache::lucene::search::DocIdSetIterator(env->callObjectMethod(this$, mids$[mid_iterator_dc23660c]));
        }

        jint DocIdBitSet::length() const
        {
          return env->callIntMethod(this$, mids$[mid_length_54c6a179]);
        }

        jlong DocIdBitSet::ramBytesUsed() const
        {
          return env->callLongMethod(this$, mids$[mid_ramBytesUsed_54c6a17a]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_DocIdBitSet_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_DocIdBitSet_instance_(PyTypeObject *type, PyObject *arg);
        static int t_DocIdBitSet_init_(t_DocIdBitSet *self, PyObject *args, PyObject *kwds);
        static PyObject *t_DocIdBitSet_bits(t_DocIdBitSet *self, PyObject *args);
        static PyObject *t_DocIdBitSet_get(t_DocIdBitSet *self, PyObject *arg);
        static PyObject *t_DocIdBitSet_getBitSet(t_DocIdBitSet *self);
        static PyObject *t_DocIdBitSet_isCacheable(t_DocIdBitSet *self, PyObject *args);
        static PyObject *t_DocIdBitSet_iterator(t_DocIdBitSet *self, PyObject *args);
        static PyObject *t_DocIdBitSet_length(t_DocIdBitSet *self);
        static PyObject *t_DocIdBitSet_ramBytesUsed(t_DocIdBitSet *self, PyObject *args);
        static PyObject *t_DocIdBitSet_get__bitSet(t_DocIdBitSet *self, void *data);
        static PyObject *t_DocIdBitSet_get__cacheable(t_DocIdBitSet *self, void *data);
        static PyGetSetDef t_DocIdBitSet__fields_[] = {
          DECLARE_GET_FIELD(t_DocIdBitSet, bitSet),
          DECLARE_GET_FIELD(t_DocIdBitSet, cacheable),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_DocIdBitSet__methods_[] = {
          DECLARE_METHOD(t_DocIdBitSet, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_DocIdBitSet, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_DocIdBitSet, bits, METH_VARARGS),
          DECLARE_METHOD(t_DocIdBitSet, get, METH_O),
          DECLARE_METHOD(t_DocIdBitSet, getBitSet, METH_NOARGS),
          DECLARE_METHOD(t_DocIdBitSet, isCacheable, METH_VARARGS),
          DECLARE_METHOD(t_DocIdBitSet, iterator, METH_VARARGS),
          DECLARE_METHOD(t_DocIdBitSet, length, METH_NOARGS),
          DECLARE_METHOD(t_DocIdBitSet, ramBytesUsed, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(DocIdBitSet, t_DocIdBitSet, ::org::apache::lucene::search::DocIdSet, DocIdBitSet, t_DocIdBitSet_init_, 0, 0, t_DocIdBitSet__fields_, 0, 0);

        void t_DocIdBitSet::install(PyObject *module)
        {
          installType(&PY_TYPE(DocIdBitSet), module, "DocIdBitSet", 0);
        }

        void t_DocIdBitSet::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(DocIdBitSet).tp_dict, "class_", make_descriptor(DocIdBitSet::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(DocIdBitSet).tp_dict, "wrapfn_", make_descriptor(t_DocIdBitSet::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(DocIdBitSet).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_DocIdBitSet_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, DocIdBitSet::initializeClass, 1)))
            return NULL;
          return t_DocIdBitSet::wrap_Object(DocIdBitSet(((t_DocIdBitSet *) arg)->object.this$));
        }
        static PyObject *t_DocIdBitSet_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, DocIdBitSet::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_DocIdBitSet_init_(t_DocIdBitSet *self, PyObject *args, PyObject *kwds)
        {
          ::java::util::BitSet a0((jobject) NULL);
          DocIdBitSet object((jobject) NULL);

          if (!parseArgs(args, "k", ::java::util::BitSet::initializeClass, &a0))
          {
            INT_CALL(object = DocIdBitSet(a0));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_DocIdBitSet_bits(t_DocIdBitSet *self, PyObject *args)
        {
          ::org::apache::lucene::util::Bits result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.bits());
            return ::org::apache::lucene::util::t_Bits::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(DocIdBitSet), (PyObject *) self, "bits", args, 2);
        }

        static PyObject *t_DocIdBitSet_get(t_DocIdBitSet *self, PyObject *arg)
        {
          jint a0;
          jboolean result;

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(result = self->object.get(a0));
            Py_RETURN_BOOL(result);
          }

          PyErr_SetArgsError((PyObject *) self, "get", arg);
          return NULL;
        }

        static PyObject *t_DocIdBitSet_getBitSet(t_DocIdBitSet *self)
        {
          ::java::util::BitSet result((jobject) NULL);
          OBJ_CALL(result = self->object.getBitSet());
          return ::java::util::t_BitSet::wrap_Object(result);
        }

        static PyObject *t_DocIdBitSet_isCacheable(t_DocIdBitSet *self, PyObject *args)
        {
          jboolean result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.isCacheable());
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(DocIdBitSet), (PyObject *) self, "isCacheable", args, 2);
        }

        static PyObject *t_DocIdBitSet_iterator(t_DocIdBitSet *self, PyObject *args)
        {
          ::org::apache::lucene::search::DocIdSetIterator result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.iterator());
            return ::org::apache::lucene::search::t_DocIdSetIterator::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(DocIdBitSet), (PyObject *) self, "iterator", args, 2);
        }

        static PyObject *t_DocIdBitSet_length(t_DocIdBitSet *self)
        {
          jint result;
          OBJ_CALL(result = self->object.length());
          return PyInt_FromLong((long) result);
        }

        static PyObject *t_DocIdBitSet_ramBytesUsed(t_DocIdBitSet *self, PyObject *args)
        {
          jlong result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.ramBytesUsed());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          return callSuper(&PY_TYPE(DocIdBitSet), (PyObject *) self, "ramBytesUsed", args, 2);
        }

        static PyObject *t_DocIdBitSet_get__bitSet(t_DocIdBitSet *self, void *data)
        {
          ::java::util::BitSet value((jobject) NULL);
          OBJ_CALL(value = self->object.getBitSet());
          return ::java::util::t_BitSet::wrap_Object(value);
        }

        static PyObject *t_DocIdBitSet_get__cacheable(t_DocIdBitSet *self, void *data)
        {
          jboolean value;
          OBJ_CALL(value = self->object.isCacheable());
          Py_RETURN_BOOL(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/grouping/term/TermGroupFacetCollector.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace grouping {
          namespace term {

            ::java::lang::Class *TermGroupFacetCollector::class$ = NULL;
            jmethodID *TermGroupFacetCollector::mids$ = NULL;
            bool TermGroupFacetCollector::live$ = false;

            jclass TermGroupFacetCollector::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/search/grouping/term/TermGroupFacetCollector");

                mids$ = new jmethodID[max_mid];
                mids$[mid_createTermGroupFacetCollector_36bd7ed1] = env->getStaticMethodID(cls, "createTermGroupFacetCollector", "(Ljava/lang/String;Ljava/lang/String;ZLorg/apache/lucene/util/BytesRef;I)Lorg/apache/lucene/search/grouping/term/TermGroupFacetCollector;");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            TermGroupFacetCollector TermGroupFacetCollector::createTermGroupFacetCollector(const ::java::lang::String & a0, const ::java::lang::String & a1, jboolean a2, const ::org::apache::lucene::util::BytesRef & a3, jint a4)
            {
              jclass cls = env->getClass(initializeClass);
              return TermGroupFacetCollector(env->callStaticObjectMethod(cls, mids$[mid_createTermGroupFacetCollector_36bd7ed1], a0.this$, a1.this$, a2, a3.this$, a4));
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace grouping {
          namespace term {
            static PyObject *t_TermGroupFacetCollector_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_TermGroupFacetCollector_instance_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_TermGroupFacetCollector_createTermGroupFacetCollector(PyTypeObject *type, PyObject *args);

            static PyMethodDef t_TermGroupFacetCollector__methods_[] = {
              DECLARE_METHOD(t_TermGroupFacetCollector, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_TermGroupFacetCollector, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_TermGroupFacetCollector, createTermGroupFacetCollector, METH_VARARGS | METH_CLASS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(TermGroupFacetCollector, t_TermGroupFacetCollector, ::org::apache::lucene::search::grouping::AbstractGroupFacetCollector, TermGroupFacetCollector, abstract_init, 0, 0, 0, 0, 0);

            void t_TermGroupFacetCollector::install(PyObject *module)
            {
              installType(&PY_TYPE(TermGroupFacetCollector), module, "TermGroupFacetCollector", 0);
            }

            void t_TermGroupFacetCollector::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(TermGroupFacetCollector).tp_dict, "class_", make_descriptor(TermGroupFacetCollector::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(TermGroupFacetCollector).tp_dict, "wrapfn_", make_descriptor(t_TermGroupFacetCollector::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(TermGroupFacetCollector).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_TermGroupFacetCollector_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, TermGroupFacetCollector::initializeClass, 1)))
                return NULL;
              return t_TermGroupFacetCollector::wrap_Object(TermGroupFacetCollector(((t_TermGroupFacetCollector *) arg)->object.this$));
            }
            static PyObject *t_TermGroupFacetCollector_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, TermGroupFacetCollector::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static PyObject *t_TermGroupFacetCollector_createTermGroupFacetCollector(PyTypeObject *type, PyObject *args)
            {
              ::java::lang::String a0((jobject) NULL);
              ::java::lang::String a1((jobject) NULL);
              jboolean a2;
              ::org::apache::lucene::util::BytesRef a3((jobject) NULL);
              jint a4;
              TermGroupFacetCollector result((jobject) NULL);

              if (!parseArgs(args, "ssZkI", ::org::apache::lucene::util::BytesRef::initializeClass, &a0, &a1, &a2, &a3, &a4))
              {
                OBJ_CALL(result = ::org::apache::lucene::search::grouping::term::TermGroupFacetCollector::createTermGroupFacetCollector(a0, a1, a2, a3, a4));
                return t_TermGroupFacetCollector::wrap_Object(result);
              }

              PyErr_SetArgsError(type, "createTermGroupFacetCollector", args);
              return NULL;
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/pylucene/store/PythonIndexInput.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/store/IOContext.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "java/lang/Throwable.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace pylucene {
      namespace store {

        ::java::lang::Class *PythonIndexInput::class$ = NULL;
        jmethodID *PythonIndexInput::mids$ = NULL;
        bool PythonIndexInput::live$ = false;

        jclass PythonIndexInput::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/pylucene/store/PythonIndexInput");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_5fdc3f48] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;)V");
            mids$[mid_init$_501c6f1c] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Lorg/apache/lucene/store/IOContext;)V");
            mids$[mid_init$_6e53ccc6] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;I)V");
            mids$[mid_clone_f5aaa2d0] = env->getMethodID(cls, "clone", "()Lorg/apache/pylucene/store/PythonIndexInput;");
            mids$[mid_close_54c6a166] = env->getMethodID(cls, "close", "()V");
            mids$[mid_finalize_54c6a166] = env->getMethodID(cls, "finalize", "()V");
            mids$[mid_length_54c6a17a] = env->getMethodID(cls, "length", "()J");
            mids$[mid_pythonDecRef_54c6a166] = env->getMethodID(cls, "pythonDecRef", "()V");
            mids$[mid_pythonExtension_54c6a17a] = env->getMethodID(cls, "pythonExtension", "()J");
            mids$[mid_pythonExtension_0ee6df2f] = env->getMethodID(cls, "pythonExtension", "(J)V");
            mids$[mid_readInternal_e1cb0133] = env->getMethodID(cls, "readInternal", "(IJ)[B");
            mids$[mid_seekInternal_0ee6df2f] = env->getMethodID(cls, "seekInternal", "(J)V");
            mids$[mid_readInternal_86f4435f] = env->getMethodID(cls, "readInternal", "([BII)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        PythonIndexInput::PythonIndexInput(const ::java::lang::String & a0) : ::org::apache::lucene::store::BufferedIndexInput(env->newObject(initializeClass, &mids$, mid_init$_5fdc3f48, a0.this$)) {}

        PythonIndexInput::PythonIndexInput(const ::java::lang::String & a0, const ::org::apache::lucene::store::IOContext & a1) : ::org::apache::lucene::store::BufferedIndexInput(env->newObject(initializeClass, &mids$, mid_init$_501c6f1c, a0.this$, a1.this$)) {}

        PythonIndexInput::PythonIndexInput(const ::java::lang::String & a0, jint a1) : ::org::apache::lucene::store::BufferedIndexInput(env->newObject(initializeClass, &mids$, mid_init$_6e53ccc6, a0.this$, a1)) {}

        PythonIndexInput PythonIndexInput::clone() const
        {
          return PythonIndexInput(env->callNonvirtualObjectMethod(this$, (jclass) ::org::apache::lucene::store::BufferedIndexInput::class$->this$, ::org::apache::lucene::store::BufferedIndexInput::mids$[::org::apache::lucene::store::BufferedIndexInput::mid_clone_c014db58]));
        }

        void PythonIndexInput::finalize() const
        {
          env->callVoidMethod(this$, mids$[mid_finalize_54c6a166]);
        }

        jlong PythonIndexInput::pythonExtension() const
        {
          return env->callLongMethod(this$, mids$[mid_pythonExtension_54c6a17a]);
        }

        void PythonIndexInput::pythonExtension(jlong a0) const
        {
          env->callVoidMethod(this$, mids$[mid_pythonExtension_0ee6df2f], a0);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace pylucene {
      namespace store {
        static PyObject *t_PythonIndexInput_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_PythonIndexInput_instance_(PyTypeObject *type, PyObject *arg);
        static int t_PythonIndexInput_init_(t_PythonIndexInput *self, PyObject *args, PyObject *kwds);
        static PyObject *t_PythonIndexInput_clone(t_PythonIndexInput *self, PyObject *arg);
        static PyObject *t_PythonIndexInput_finalize(t_PythonIndexInput *self);
        static PyObject *t_PythonIndexInput_pythonExtension(t_PythonIndexInput *self, PyObject *args);
        static jobject JNICALL t_PythonIndexInput_clone0(JNIEnv *jenv, jobject jobj);
        static void JNICALL t_PythonIndexInput_close1(JNIEnv *jenv, jobject jobj);
        static jlong JNICALL t_PythonIndexInput_length2(JNIEnv *jenv, jobject jobj);
        static void JNICALL t_PythonIndexInput_pythonDecRef3(JNIEnv *jenv, jobject jobj);
        static jobject JNICALL t_PythonIndexInput_readInternal4(JNIEnv *jenv, jobject jobj, jint a0, jlong a1);
        static void JNICALL t_PythonIndexInput_seekInternal5(JNIEnv *jenv, jobject jobj, jlong a0);
        static PyObject *t_PythonIndexInput_get__self(t_PythonIndexInput *self, void *data);
        static PyGetSetDef t_PythonIndexInput__fields_[] = {
          DECLARE_GET_FIELD(t_PythonIndexInput, self),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_PythonIndexInput__methods_[] = {
          DECLARE_METHOD(t_PythonIndexInput, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PythonIndexInput, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PythonIndexInput, clone, METH_O),
          DECLARE_METHOD(t_PythonIndexInput, finalize, METH_NOARGS),
          DECLARE_METHOD(t_PythonIndexInput, pythonExtension, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(PythonIndexInput, t_PythonIndexInput, ::org::apache::lucene::store::BufferedIndexInput, PythonIndexInput, t_PythonIndexInput_init_, 0, 0, t_PythonIndexInput__fields_, 0, 0);

        void t_PythonIndexInput::install(PyObject *module)
        {
          installType(&PY_TYPE(PythonIndexInput), module, "PythonIndexInput", 1);
        }

        void t_PythonIndexInput::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(PythonIndexInput).tp_dict, "class_", make_descriptor(PythonIndexInput::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(PythonIndexInput).tp_dict, "wrapfn_", make_descriptor(t_PythonIndexInput::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(PythonIndexInput).tp_dict, "boxfn_", make_descriptor(boxObject));
          jclass cls = env->getClass(PythonIndexInput::initializeClass);
          JNINativeMethod methods[] = {
            { "clone", "()Lorg/apache/pylucene/store/PythonIndexInput;", (void *) t_PythonIndexInput_clone0 },
            { "close", "()V", (void *) t_PythonIndexInput_close1 },
            { "length", "()J", (void *) t_PythonIndexInput_length2 },
            { "pythonDecRef", "()V", (void *) t_PythonIndexInput_pythonDecRef3 },
            { "readInternal", "(IJ)[B", (void *) t_PythonIndexInput_readInternal4 },
            { "seekInternal", "(J)V", (void *) t_PythonIndexInput_seekInternal5 },
          };
          env->registerNatives(cls, methods, 6);
        }

        static PyObject *t_PythonIndexInput_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, PythonIndexInput::initializeClass, 1)))
            return NULL;
          return t_PythonIndexInput::wrap_Object(PythonIndexInput(((t_PythonIndexInput *) arg)->object.this$));
        }
        static PyObject *t_PythonIndexInput_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, PythonIndexInput::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_PythonIndexInput_init_(t_PythonIndexInput *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              ::java::lang::String a0((jobject) NULL);
              PythonIndexInput object((jobject) NULL);

              if (!parseArgs(args, "s", &a0))
              {
                INT_CALL(object = PythonIndexInput(a0));
                self->object = object;
                break;
              }
            }
            goto err;
           case 2:
            {
              ::java::lang::String a0((jobject) NULL);
              ::org::apache::lucene::store::IOContext a1((jobject) NULL);
              PythonIndexInput object((jobject) NULL);

              if (!parseArgs(args, "sk", ::org::apache::lucene::store::IOContext::initializeClass, &a0, &a1))
              {
                INT_CALL(object = PythonIndexInput(a0, a1));
                self->object = object;
                break;
              }
            }
            {
              ::java::lang::String a0((jobject) NULL);
              jint a1;
              PythonIndexInput object((jobject) NULL);

              if (!parseArgs(args, "sI", &a0, &a1))
              {
                INT_CALL(object = PythonIndexInput(a0, a1));
                self->object = object;
                break;
              }
            }
           default:
           err:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          Py_INCREF((PyObject *) self);
          self->object.pythonExtension((jlong) (Py_intptr_t) (void *) self);

          return 0;
        }

        static PyObject *t_PythonIndexInput_clone(t_PythonIndexInput *self, PyObject *arg)
        {
          PythonIndexInput result((jobject) NULL);

          if (arg)
          {
            OBJ_CALL(result = self->object.clone());

            PythonIndexInput object(result.this$);
            if (PyObject_TypeCheck(arg, &PY_TYPE(FinalizerProxy)) &&
                PyObject_TypeCheck(((t_fp *) arg)->object, self->ob_type))
            {
              PyObject *_arg = ((t_fp *) arg)->object;
              ((t_JObject *) _arg)->object = object;
              Py_INCREF(_arg);
              object.pythonExtension((jlong) (Py_intptr_t) (void *) _arg);
              Py_INCREF(arg);
              return arg;
            }
            return PyErr_SetArgsError("clone", arg);
          }

          return callSuper(&PY_TYPE(PythonIndexInput), (PyObject *) self, "clone", arg, 1);
        }

        static PyObject *t_PythonIndexInput_finalize(t_PythonIndexInput *self)
        {
          OBJ_CALL(self->object.finalize());
          Py_RETURN_NONE;
        }

        static PyObject *t_PythonIndexInput_pythonExtension(t_PythonIndexInput *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 0:
            {
              jlong result;
              OBJ_CALL(result = self->object.pythonExtension());
              return PyLong_FromLongLong((PY_LONG_LONG) result);
            }
            break;
           case 1:
            {
              jlong a0;

              if (!parseArgs(args, "J", &a0))
              {
                OBJ_CALL(self->object.pythonExtension(a0));
                Py_RETURN_NONE;
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "pythonExtension", args);
          return NULL;
        }

        static jobject JNICALL t_PythonIndexInput_clone0(JNIEnv *jenv, jobject jobj)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonIndexInput::mids$[PythonIndexInput::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          PythonIndexInput value((jobject) NULL);
          PyObject *result = PyObject_CallMethod(obj, "clone", "");
          if (!result)
            throwPythonError();
          else if (parseArg(result, "k", PythonIndexInput::initializeClass, &value))
          {
            throwTypeError("clone", result);
            Py_DECREF(result);
          }
          else
          {
            jobj = jenv->NewLocalRef(value.this$);
            Py_DECREF(result);
            return jobj;
          }

          return (jobject) NULL;
        }

        static void JNICALL t_PythonIndexInput_close1(JNIEnv *jenv, jobject jobj)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonIndexInput::mids$[PythonIndexInput::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          PyObject *result = PyObject_CallMethod(obj, "close", "");
          if (!result)
            throwPythonError();
          else
            Py_DECREF(result);
        }

        static jlong JNICALL t_PythonIndexInput_length2(JNIEnv *jenv, jobject jobj)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonIndexInput::mids$[PythonIndexInput::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          jlong value;
          PyObject *result = PyObject_CallMethod(obj, "length", "");
          if (!result)
            throwPythonError();
          else if (parseArg(result, "J", &value))
          {
            throwTypeError("length", result);
            Py_DECREF(result);
          }
          else
          {
            Py_DECREF(result);
            return value;
          }

          return (jlong) 0;
        }

        static void JNICALL t_PythonIndexInput_pythonDecRef3(JNIEnv *jenv, jobject jobj)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonIndexInput::mids$[PythonIndexInput::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;

          if (obj != NULL)
          {
            jenv->CallVoidMethod(jobj, PythonIndexInput::mids$[PythonIndexInput::mid_pythonExtension_0ee6df2f], (jlong) 0);
            env->finalizeObject(jenv, obj);
          }
        }

        static jobject JNICALL t_PythonIndexInput_readInternal4(JNIEnv *jenv, jobject jobj, jint a0, jlong a1)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonIndexInput::mids$[PythonIndexInput::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          JArray< jbyte > value((jobject) NULL);
          PyObject *result = PyObject_CallMethod(obj, "readInternal", "iL", (int) a0, (long long) a1);
          if (!result)
            throwPythonError();
          else if (parseArg(result, "[B", &value))
          {
            throwTypeError("readInternal", result);
            Py_DECREF(result);
          }
          else
          {
            jobj = jenv->NewLocalRef(value.this$);
            Py_DECREF(result);
            return jobj;
          }

          return (jobject) NULL;
        }

        static void JNICALL t_PythonIndexInput_seekInternal5(JNIEnv *jenv, jobject jobj, jlong a0)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonIndexInput::mids$[PythonIndexInput::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          PyObject *result = PyObject_CallMethod(obj, "seekInternal", "L", (long long) a0);
          if (!result)
            throwPythonError();
          else
            Py_DECREF(result);
        }

        static PyObject *t_PythonIndexInput_get__self(t_PythonIndexInput *self, void *data)
        {
          jlong ptr;
          OBJ_CALL(ptr = self->object.pythonExtension());
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;

          if (obj != NULL)
          {
            Py_INCREF(obj);
            return obj;
          }
          else
            Py_RETURN_NONE;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/IndexFileNames.h"
#include "java/util/regex/Pattern.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *IndexFileNames::class$ = NULL;
        jmethodID *IndexFileNames::mids$ = NULL;
        bool IndexFileNames::live$ = false;
        ::java::util::regex::Pattern *IndexFileNames::CODEC_FILE_PATTERN = NULL;
        ::java::lang::String *IndexFileNames::COMPOUND_FILE_ENTRIES_EXTENSION = NULL;
        ::java::lang::String *IndexFileNames::COMPOUND_FILE_EXTENSION = NULL;
        ::java::lang::String *IndexFileNames::GEN_EXTENSION = NULL;
        JArray< ::java::lang::String > *IndexFileNames::INDEX_EXTENSIONS = NULL;
        ::java::lang::String *IndexFileNames::SEGMENTS = NULL;
        ::java::lang::String *IndexFileNames::SEGMENTS_GEN = NULL;

        jclass IndexFileNames::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/IndexFileNames");

            mids$ = new jmethodID[max_mid];
            mids$[mid_fileNameFromGeneration_7a384922] = env->getStaticMethodID(cls, "fileNameFromGeneration", "(Ljava/lang/String;Ljava/lang/String;J)Ljava/lang/String;");
            mids$[mid_getExtension_97a5258f] = env->getStaticMethodID(cls, "getExtension", "(Ljava/lang/String;)Ljava/lang/String;");
            mids$[mid_matchesExtension_4a26474e] = env->getStaticMethodID(cls, "matchesExtension", "(Ljava/lang/String;Ljava/lang/String;)Z");
            mids$[mid_parseSegmentName_97a5258f] = env->getStaticMethodID(cls, "parseSegmentName", "(Ljava/lang/String;)Ljava/lang/String;");
            mids$[mid_segmentFileName_af6d27e3] = env->getStaticMethodID(cls, "segmentFileName", "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;");
            mids$[mid_stripExtension_97a5258f] = env->getStaticMethodID(cls, "stripExtension", "(Ljava/lang/String;)Ljava/lang/String;");
            mids$[mid_stripSegmentName_97a5258f] = env->getStaticMethodID(cls, "stripSegmentName", "(Ljava/lang/String;)Ljava/lang/String;");

            class$ = (::java::lang::Class *) new JObject(cls);
            cls = (jclass) class$->this$;

            CODEC_FILE_PATTERN = new ::java::util::regex::Pattern(env->getStaticObjectField(cls, "CODEC_FILE_PATTERN", "Ljava/util/regex/Pattern;"));
            COMPOUND_FILE_ENTRIES_EXTENSION = new ::java::lang::String(env->getStaticObjectField(cls, "COMPOUND_FILE_ENTRIES_EXTENSION", "Ljava/lang/String;"));
            COMPOUND_FILE_EXTENSION = new ::java::lang::String(env->getStaticObjectField(cls, "COMPOUND_FILE_EXTENSION", "Ljava/lang/String;"));
            GEN_EXTENSION = new ::java::lang::String(env->getStaticObjectField(cls, "GEN_EXTENSION", "Ljava/lang/String;"));
            INDEX_EXTENSIONS = new JArray< ::java::lang::String >(env->getStaticObjectField(cls, "INDEX_EXTENSIONS", "[Ljava/lang/String;"));
            SEGMENTS = new ::java::lang::String(env->getStaticObjectField(cls, "SEGMENTS", "Ljava/lang/String;"));
            SEGMENTS_GEN = new ::java::lang::String(env->getStaticObjectField(cls, "SEGMENTS_GEN", "Ljava/lang/String;"));
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        ::java::lang::String IndexFileNames::fileNameFromGeneration(const ::java::lang::String & a0, const ::java::lang::String & a1, jlong a2)
        {
          jclass cls = env->getClass(initializeClass);
          return ::java::lang::String(env->callStaticObjectMethod(cls, mids$[mid_fileNameFromGeneration_7a384922], a0.this$, a1.this$, a2));
        }

        ::java::lang::String IndexFileNames::getExtension(const ::java::lang::String & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return ::java::lang::String(env->callStaticObjectMethod(cls, mids$[mid_getExtension_97a5258f], a0.this$));
        }

        jboolean IndexFileNames::matchesExtension(const ::java::lang::String & a0, const ::java::lang::String & a1)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticBooleanMethod(cls, mids$[mid_matchesExtension_4a26474e], a0.this$, a1.this$);
        }

        ::java::lang::String IndexFileNames::parseSegmentName(const ::java::lang::String & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return ::java::lang::String(env->callStaticObjectMethod(cls, mids$[mid_parseSegmentName_97a5258f], a0.this$));
        }

        ::java::lang::String IndexFileNames::segmentFileName(const ::java::lang::String & a0, const ::java::lang::String & a1, const ::java::lang::String & a2)
        {
          jclass cls = env->getClass(initializeClass);
          return ::java::lang::String(env->callStaticObjectMethod(cls, mids$[mid_segmentFileName_af6d27e3], a0.this$, a1.this$, a2.this$));
        }

        ::java::lang::String IndexFileNames::stripExtension(const ::java::lang::String & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return ::java::lang::String(env->callStaticObjectMethod(cls, mids$[mid_stripExtension_97a5258f], a0.this$));
        }

        ::java::lang::String IndexFileNames::stripSegmentName(const ::java::lang::String & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return ::java::lang::String(env->callStaticObjectMethod(cls, mids$[mid_stripSegmentName_97a5258f], a0.this$));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_IndexFileNames_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_IndexFileNames_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_IndexFileNames_fileNameFromGeneration(PyTypeObject *type, PyObject *args);
        static PyObject *t_IndexFileNames_getExtension(PyTypeObject *type, PyObject *arg);
        static PyObject *t_IndexFileNames_matchesExtension(PyTypeObject *type, PyObject *args);
        static PyObject *t_IndexFileNames_parseSegmentName(PyTypeObject *type, PyObject *arg);
        static PyObject *t_IndexFileNames_segmentFileName(PyTypeObject *type, PyObject *args);
        static PyObject *t_IndexFileNames_stripExtension(PyTypeObject *type, PyObject *arg);
        static PyObject *t_IndexFileNames_stripSegmentName(PyTypeObject *type, PyObject *arg);

        static PyMethodDef t_IndexFileNames__methods_[] = {
          DECLARE_METHOD(t_IndexFileNames, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_IndexFileNames, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_IndexFileNames, fileNameFromGeneration, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_IndexFileNames, getExtension, METH_O | METH_CLASS),
          DECLARE_METHOD(t_IndexFileNames, matchesExtension, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_IndexFileNames, parseSegmentName, METH_O | METH_CLASS),
          DECLARE_METHOD(t_IndexFileNames, segmentFileName, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_IndexFileNames, stripExtension, METH_O | METH_CLASS),
          DECLARE_METHOD(t_IndexFileNames, stripSegmentName, METH_O | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(IndexFileNames, t_IndexFileNames, ::java::lang::Object, IndexFileNames, abstract_init, 0, 0, 0, 0, 0);

        void t_IndexFileNames::install(PyObject *module)
        {
          installType(&PY_TYPE(IndexFileNames), module, "IndexFileNames", 0);
        }

        void t_IndexFileNames::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(IndexFileNames).tp_dict, "class_", make_descriptor(IndexFileNames::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(IndexFileNames).tp_dict, "wrapfn_", make_descriptor(t_IndexFileNames::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(IndexFileNames).tp_dict, "boxfn_", make_descriptor(boxObject));
          env->getClass(IndexFileNames::initializeClass);
          PyDict_SetItemString(PY_TYPE(IndexFileNames).tp_dict, "CODEC_FILE_PATTERN", make_descriptor(::java::util::regex::t_Pattern::wrap_Object(*IndexFileNames::CODEC_FILE_PATTERN)));
          PyDict_SetItemString(PY_TYPE(IndexFileNames).tp_dict, "COMPOUND_FILE_ENTRIES_EXTENSION", make_descriptor(j2p(*IndexFileNames::COMPOUND_FILE_ENTRIES_EXTENSION)));
          PyDict_SetItemString(PY_TYPE(IndexFileNames).tp_dict, "COMPOUND_FILE_EXTENSION", make_descriptor(j2p(*IndexFileNames::COMPOUND_FILE_EXTENSION)));
          PyDict_SetItemString(PY_TYPE(IndexFileNames).tp_dict, "GEN_EXTENSION", make_descriptor(j2p(*IndexFileNames::GEN_EXTENSION)));
          PyDict_SetItemString(PY_TYPE(IndexFileNames).tp_dict, "INDEX_EXTENSIONS", make_descriptor(JArray<jstring>(IndexFileNames::INDEX_EXTENSIONS->this$).wrap()));
          PyDict_SetItemString(PY_TYPE(IndexFileNames).tp_dict, "SEGMENTS", make_descriptor(j2p(*IndexFileNames::SEGMENTS)));
          PyDict_SetItemString(PY_TYPE(IndexFileNames).tp_dict, "SEGMENTS_GEN", make_descriptor(j2p(*IndexFileNames::SEGMENTS_GEN)));
        }

        static PyObject *t_IndexFileNames_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, IndexFileNames::initializeClass, 1)))
            return NULL;
          return t_IndexFileNames::wrap_Object(IndexFileNames(((t_IndexFileNames *) arg)->object.this$));
        }
        static PyObject *t_IndexFileNames_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, IndexFileNames::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_IndexFileNames_fileNameFromGeneration(PyTypeObject *type, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::java::lang::String a1((jobject) NULL);
          jlong a2;
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, "ssJ", &a0, &a1, &a2))
          {
            OBJ_CALL(result = ::org::apache::lucene::index::IndexFileNames::fileNameFromGeneration(a0, a1, a2));
            return j2p(result);
          }

          PyErr_SetArgsError(type, "fileNameFromGeneration", args);
          return NULL;
        }

        static PyObject *t_IndexFileNames_getExtension(PyTypeObject *type, PyObject *arg)
        {
          ::java::lang::String a0((jobject) NULL);
          ::java::lang::String result((jobject) NULL);

          if (!parseArg(arg, "s", &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::index::IndexFileNames::getExtension(a0));
            return j2p(result);
          }

          PyErr_SetArgsError(type, "getExtension", arg);
          return NULL;
        }

        static PyObject *t_IndexFileNames_matchesExtension(PyTypeObject *type, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::java::lang::String a1((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "ss", &a0, &a1))
          {
            OBJ_CALL(result = ::org::apache::lucene::index::IndexFileNames::matchesExtension(a0, a1));
            Py_RETURN_BOOL(result);
          }

          PyErr_SetArgsError(type, "matchesExtension", args);
          return NULL;
        }

        static PyObject *t_IndexFileNames_parseSegmentName(PyTypeObject *type, PyObject *arg)
        {
          ::java::lang::String a0((jobject) NULL);
          ::java::lang::String result((jobject) NULL);

          if (!parseArg(arg, "s", &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::index::IndexFileNames::parseSegmentName(a0));
            return j2p(result);
          }

          PyErr_SetArgsError(type, "parseSegmentName", arg);
          return NULL;
        }

        static PyObject *t_IndexFileNames_segmentFileName(PyTypeObject *type, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::java::lang::String a1((jobject) NULL);
          ::java::lang::String a2((jobject) NULL);
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, "sss", &a0, &a1, &a2))
          {
            OBJ_CALL(result = ::org::apache::lucene::index::IndexFileNames::segmentFileName(a0, a1, a2));
            return j2p(result);
          }

          PyErr_SetArgsError(type, "segmentFileName", args);
          return NULL;
        }

        static PyObject *t_IndexFileNames_stripExtension(PyTypeObject *type, PyObject *arg)
        {
          ::java::lang::String a0((jobject) NULL);
          ::java::lang::String result((jobject) NULL);

          if (!parseArg(arg, "s", &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::index::IndexFileNames::stripExtension(a0));
            return j2p(result);
          }

          PyErr_SetArgsError(type, "stripExtension", arg);
          return NULL;
        }

        static PyObject *t_IndexFileNames_stripSegmentName(PyTypeObject *type, PyObject *arg)
        {
          ::java::lang::String a0((jobject) NULL);
          ::java::lang::String result((jobject) NULL);

          if (!parseArg(arg, "s", &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::index::IndexFileNames::stripSegmentName(a0));
            return j2p(result);
          }

          PyErr_SetArgsError(type, "stripSegmentName", arg);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/MultiTermQuery$ConstantScoreAutoRewrite.h"
#include "org/apache/lucene/search/BooleanQuery.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *MultiTermQuery$ConstantScoreAutoRewrite::class$ = NULL;
        jmethodID *MultiTermQuery$ConstantScoreAutoRewrite::mids$ = NULL;
        bool MultiTermQuery$ConstantScoreAutoRewrite::live$ = false;

        jclass MultiTermQuery$ConstantScoreAutoRewrite::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/MultiTermQuery$ConstantScoreAutoRewrite");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        MultiTermQuery$ConstantScoreAutoRewrite::MultiTermQuery$ConstantScoreAutoRewrite() : ::org::apache::lucene::search::ConstantScoreAutoRewrite(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_MultiTermQuery$ConstantScoreAutoRewrite_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_MultiTermQuery$ConstantScoreAutoRewrite_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_MultiTermQuery$ConstantScoreAutoRewrite_of_(t_MultiTermQuery$ConstantScoreAutoRewrite *self, PyObject *args);
        static int t_MultiTermQuery$ConstantScoreAutoRewrite_init_(t_MultiTermQuery$ConstantScoreAutoRewrite *self, PyObject *args, PyObject *kwds);
        static PyObject *t_MultiTermQuery$ConstantScoreAutoRewrite_get__parameters_(t_MultiTermQuery$ConstantScoreAutoRewrite *self, void *data);
        static PyGetSetDef t_MultiTermQuery$ConstantScoreAutoRewrite__fields_[] = {
          DECLARE_GET_FIELD(t_MultiTermQuery$ConstantScoreAutoRewrite, parameters_),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_MultiTermQuery$ConstantScoreAutoRewrite__methods_[] = {
          DECLARE_METHOD(t_MultiTermQuery$ConstantScoreAutoRewrite, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MultiTermQuery$ConstantScoreAutoRewrite, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MultiTermQuery$ConstantScoreAutoRewrite, of_, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(MultiTermQuery$ConstantScoreAutoRewrite, t_MultiTermQuery$ConstantScoreAutoRewrite, ::org::apache::lucene::search::ConstantScoreAutoRewrite, MultiTermQuery$ConstantScoreAutoRewrite, t_MultiTermQuery$ConstantScoreAutoRewrite_init_, 0, 0, t_MultiTermQuery$ConstantScoreAutoRewrite__fields_, 0, 0);
        PyObject *t_MultiTermQuery$ConstantScoreAutoRewrite::wrap_Object(const MultiTermQuery$ConstantScoreAutoRewrite& object, PyTypeObject *p0)
        {
          PyObject *obj = t_MultiTermQuery$ConstantScoreAutoRewrite::wrap_Object(object);
          if (obj != NULL && obj != Py_None)
          {
            t_MultiTermQuery$ConstantScoreAutoRewrite *self = (t_MultiTermQuery$ConstantScoreAutoRewrite *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        PyObject *t_MultiTermQuery$ConstantScoreAutoRewrite::wrap_jobject(const jobject& object, PyTypeObject *p0)
        {
          PyObject *obj = t_MultiTermQuery$ConstantScoreAutoRewrite::wrap_jobject(object);
          if (obj != NULL && obj != Py_None)
          {
            t_MultiTermQuery$ConstantScoreAutoRewrite *self = (t_MultiTermQuery$ConstantScoreAutoRewrite *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        void t_MultiTermQuery$ConstantScoreAutoRewrite::install(PyObject *module)
        {
          installType(&PY_TYPE(MultiTermQuery$ConstantScoreAutoRewrite), module, "MultiTermQuery$ConstantScoreAutoRewrite", 0);
        }

        void t_MultiTermQuery$ConstantScoreAutoRewrite::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(MultiTermQuery$ConstantScoreAutoRewrite).tp_dict, "class_", make_descriptor(MultiTermQuery$ConstantScoreAutoRewrite::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(MultiTermQuery$ConstantScoreAutoRewrite).tp_dict, "wrapfn_", make_descriptor(t_MultiTermQuery$ConstantScoreAutoRewrite::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(MultiTermQuery$ConstantScoreAutoRewrite).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_MultiTermQuery$ConstantScoreAutoRewrite_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, MultiTermQuery$ConstantScoreAutoRewrite::initializeClass, 1)))
            return NULL;
          return t_MultiTermQuery$ConstantScoreAutoRewrite::wrap_Object(MultiTermQuery$ConstantScoreAutoRewrite(((t_MultiTermQuery$ConstantScoreAutoRewrite *) arg)->object.this$));
        }
        static PyObject *t_MultiTermQuery$ConstantScoreAutoRewrite_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, MultiTermQuery$ConstantScoreAutoRewrite::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_MultiTermQuery$ConstantScoreAutoRewrite_of_(t_MultiTermQuery$ConstantScoreAutoRewrite *self, PyObject *args)
        {
          if (!parseArg(args, "T", 1, &(self->parameters)))
            Py_RETURN_SELF;
          return PyErr_SetArgsError((PyObject *) self, "of_", args);
        }

        static int t_MultiTermQuery$ConstantScoreAutoRewrite_init_(t_MultiTermQuery$ConstantScoreAutoRewrite *self, PyObject *args, PyObject *kwds)
        {
          MultiTermQuery$ConstantScoreAutoRewrite object((jobject) NULL);

          INT_CALL(object = MultiTermQuery$ConstantScoreAutoRewrite());
          self->object = object;
          self->parameters[0] = &::org::apache::lucene::search::PY_TYPE(BooleanQuery);

          return 0;
        }
        static PyObject *t_MultiTermQuery$ConstantScoreAutoRewrite_get__parameters_(t_MultiTermQuery$ConstantScoreAutoRewrite *self, void *data)
        {
          return typeParameters(self->parameters, sizeof(self->parameters));
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/MergedIterator.h"
#include "java/util/Iterator.h"
#include "java/lang/Comparable.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *MergedIterator::class$ = NULL;
        jmethodID *MergedIterator::mids$ = NULL;
        bool MergedIterator::live$ = false;

        jclass MergedIterator::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/MergedIterator");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_1b3aeeed] = env->getMethodID(cls, "<init>", "([Ljava/util/Iterator;)V");
            mids$[mid_init$_287ab92a] = env->getMethodID(cls, "<init>", "(Z[Ljava/util/Iterator;)V");
            mids$[mid_hasNext_54c6a16a] = env->getMethodID(cls, "hasNext", "()Z");
            mids$[mid_next_c6fd33d8] = env->getMethodID(cls, "next", "()Ljava/lang/Comparable;");
            mids$[mid_remove_54c6a166] = env->getMethodID(cls, "remove", "()V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        MergedIterator::MergedIterator(const JArray< ::java::util::Iterator > & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_1b3aeeed, a0.this$)) {}

        MergedIterator::MergedIterator(jboolean a0, const JArray< ::java::util::Iterator > & a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_287ab92a, a0, a1.this$)) {}

        jboolean MergedIterator::hasNext() const
        {
          return env->callBooleanMethod(this$, mids$[mid_hasNext_54c6a16a]);
        }

        ::java::lang::Comparable MergedIterator::next() const
        {
          return ::java::lang::Comparable(env->callObjectMethod(this$, mids$[mid_next_c6fd33d8]));
        }

        void MergedIterator::remove() const
        {
          env->callVoidMethod(this$, mids$[mid_remove_54c6a166]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_MergedIterator_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_MergedIterator_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_MergedIterator_of_(t_MergedIterator *self, PyObject *args);
        static int t_MergedIterator_init_(t_MergedIterator *self, PyObject *args, PyObject *kwds);
        static PyObject *t_MergedIterator_hasNext(t_MergedIterator *self);
        static PyObject *t_MergedIterator_next(t_MergedIterator *self);
        static PyObject *t_MergedIterator_remove(t_MergedIterator *self);
        static PyObject *t_MergedIterator_get__parameters_(t_MergedIterator *self, void *data);
        static PyGetSetDef t_MergedIterator__fields_[] = {
          DECLARE_GET_FIELD(t_MergedIterator, parameters_),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_MergedIterator__methods_[] = {
          DECLARE_METHOD(t_MergedIterator, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MergedIterator, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MergedIterator, of_, METH_VARARGS),
          DECLARE_METHOD(t_MergedIterator, hasNext, METH_NOARGS),
          DECLARE_METHOD(t_MergedIterator, next, METH_NOARGS),
          DECLARE_METHOD(t_MergedIterator, remove, METH_NOARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(MergedIterator, t_MergedIterator, ::java::lang::Object, MergedIterator, t_MergedIterator_init_, PyObject_SelfIter, ((PyObject *(*)(::java::util::t_Iterator *)) get_generic_iterator_next< ::java::util::t_Iterator,::java::lang::t_Comparable >), t_MergedIterator__fields_, 0, 0);
        PyObject *t_MergedIterator::wrap_Object(const MergedIterator& object, PyTypeObject *p0)
        {
          PyObject *obj = t_MergedIterator::wrap_Object(object);
          if (obj != NULL && obj != Py_None)
          {
            t_MergedIterator *self = (t_MergedIterator *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        PyObject *t_MergedIterator::wrap_jobject(const jobject& object, PyTypeObject *p0)
        {
          PyObject *obj = t_MergedIterator::wrap_jobject(object);
          if (obj != NULL && obj != Py_None)
          {
            t_MergedIterator *self = (t_MergedIterator *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        void t_MergedIterator::install(PyObject *module)
        {
          installType(&PY_TYPE(MergedIterator), module, "MergedIterator", 0);
        }

        void t_MergedIterator::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(MergedIterator).tp_dict, "class_", make_descriptor(MergedIterator::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(MergedIterator).tp_dict, "wrapfn_", make_descriptor(t_MergedIterator::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(MergedIterator).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_MergedIterator_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, MergedIterator::initializeClass, 1)))
            return NULL;
          return t_MergedIterator::wrap_Object(MergedIterator(((t_MergedIterator *) arg)->object.this$));
        }
        static PyObject *t_MergedIterator_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, MergedIterator::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_MergedIterator_of_(t_MergedIterator *self, PyObject *args)
        {
          if (!parseArg(args, "T", 1, &(self->parameters)))
            Py_RETURN_SELF;
          return PyErr_SetArgsError((PyObject *) self, "of_", args);
        }

        static int t_MergedIterator_init_(t_MergedIterator *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              JArray< ::java::util::Iterator > a0((jobject) NULL);
              PyTypeObject **p0;
              MergedIterator object((jobject) NULL);

              if (!parseArgs(args, "[K", ::java::util::Iterator::initializeClass, &a0, &p0, ::java::util::t_Iterator::parameters_))
              {
                INT_CALL(object = MergedIterator(a0));
                self->object = object;
                break;
              }
            }
            goto err;
           case 2:
            {
              jboolean a0;
              JArray< ::java::util::Iterator > a1((jobject) NULL);
              PyTypeObject **p1;
              MergedIterator object((jobject) NULL);

              if (!parseArgs(args, "Z[K", ::java::util::Iterator::initializeClass, &a0, &a1, &p1, ::java::util::t_Iterator::parameters_))
              {
                INT_CALL(object = MergedIterator(a0, a1));
                self->object = object;
                break;
              }
            }
           default:
           err:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_MergedIterator_hasNext(t_MergedIterator *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.hasNext());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_MergedIterator_next(t_MergedIterator *self)
        {
          ::java::lang::Comparable result((jobject) NULL);
          OBJ_CALL(result = self->object.next());
          return self->parameters[0] != NULL ? wrapType(self->parameters[0], result.this$) : ::java::lang::t_Comparable::wrap_Object(result);
        }

        static PyObject *t_MergedIterator_remove(t_MergedIterator *self)
        {
          OBJ_CALL(self->object.remove());
          Py_RETURN_NONE;
        }
        static PyObject *t_MergedIterator_get__parameters_(t_MergedIterator *self, void *data)
        {
          return typeParameters(self->parameters, sizeof(self->parameters));
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "java/util/AbstractSet.h"
#include "java/lang/Object.h"
#include "java/util/Set.h"
#include "java/util/Collection.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace java {
  namespace util {

    ::java::lang::Class *AbstractSet::class$ = NULL;
    jmethodID *AbstractSet::mids$ = NULL;
    bool AbstractSet::live$ = false;

    jclass AbstractSet::initializeClass(bool getOnly)
    {
      if (getOnly)
        return (jclass) (live$ ? class$->this$ : NULL);
      if (class$ == NULL)
      {
        jclass cls = (jclass) env->findClass("java/util/AbstractSet");

        mids$ = new jmethodID[max_mid];
        mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
        mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
        mids$[mid_removeAll_9bfb3701] = env->getMethodID(cls, "removeAll", "(Ljava/util/Collection;)Z");

        class$ = (::java::lang::Class *) new JObject(cls);
        live$ = true;
      }
      return (jclass) class$->this$;
    }

    jboolean AbstractSet::equals(const ::java::lang::Object & a0) const
    {
      return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
    }

    jint AbstractSet::hashCode() const
    {
      return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
    }

    jboolean AbstractSet::removeAll(const ::java::util::Collection & a0) const
    {
      return env->callBooleanMethod(this$, mids$[mid_removeAll_9bfb3701], a0.this$);
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace java {
  namespace util {
    static PyObject *t_AbstractSet_cast_(PyTypeObject *type, PyObject *arg);
    static PyObject *t_AbstractSet_instance_(PyTypeObject *type, PyObject *arg);
    static PyObject *t_AbstractSet_of_(t_AbstractSet *self, PyObject *args);
    static PyObject *t_AbstractSet_equals(t_AbstractSet *self, PyObject *args);
    static PyObject *t_AbstractSet_hashCode(t_AbstractSet *self, PyObject *args);
    static PyObject *t_AbstractSet_removeAll(t_AbstractSet *self, PyObject *args);
    static PyObject *t_AbstractSet_get__parameters_(t_AbstractSet *self, void *data);
    static PyGetSetDef t_AbstractSet__fields_[] = {
      DECLARE_GET_FIELD(t_AbstractSet, parameters_),
      { NULL, NULL, NULL, NULL, NULL }
    };

    static PyMethodDef t_AbstractSet__methods_[] = {
      DECLARE_METHOD(t_AbstractSet, cast_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_AbstractSet, instance_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_AbstractSet, of_, METH_VARARGS),
      DECLARE_METHOD(t_AbstractSet, equals, METH_VARARGS),
      DECLARE_METHOD(t_AbstractSet, hashCode, METH_VARARGS),
      DECLARE_METHOD(t_AbstractSet, removeAll, METH_VARARGS),
      { NULL, NULL, 0, NULL }
    };

    DECLARE_TYPE(AbstractSet, t_AbstractSet, ::java::util::AbstractCollection, AbstractSet, abstract_init, 0, 0, t_AbstractSet__fields_, 0, 0);
    PyObject *t_AbstractSet::wrap_Object(const AbstractSet& object, PyTypeObject *p0)
    {
      PyObject *obj = t_AbstractSet::wrap_Object(object);
      if (obj != NULL && obj != Py_None)
      {
        t_AbstractSet *self = (t_AbstractSet *) obj;
        self->parameters[0] = p0;
      }
      return obj;
    }

    PyObject *t_AbstractSet::wrap_jobject(const jobject& object, PyTypeObject *p0)
    {
      PyObject *obj = t_AbstractSet::wrap_jobject(object);
      if (obj != NULL && obj != Py_None)
      {
        t_AbstractSet *self = (t_AbstractSet *) obj;
        self->parameters[0] = p0;
      }
      return obj;
    }

    void t_AbstractSet::install(PyObject *module)
    {
      installType(&PY_TYPE(AbstractSet), module, "AbstractSet", 0);
    }

    void t_AbstractSet::initialize(PyObject *module)
    {
      PyDict_SetItemString(PY_TYPE(AbstractSet).tp_dict, "class_", make_descriptor(AbstractSet::initializeClass, 1));
      PyDict_SetItemString(PY_TYPE(AbstractSet).tp_dict, "wrapfn_", make_descriptor(t_AbstractSet::wrap_jobject));
      PyDict_SetItemString(PY_TYPE(AbstractSet).tp_dict, "boxfn_", make_descriptor(boxObject));
    }

    static PyObject *t_AbstractSet_cast_(PyTypeObject *type, PyObject *arg)
    {
      if (!(arg = castCheck(arg, AbstractSet::initializeClass, 1)))
        return NULL;
      return t_AbstractSet::wrap_Object(AbstractSet(((t_AbstractSet *) arg)->object.this$));
    }
    static PyObject *t_AbstractSet_instance_(PyTypeObject *type, PyObject *arg)
    {
      if (!castCheck(arg, AbstractSet::initializeClass, 0))
        Py_RETURN_FALSE;
      Py_RETURN_TRUE;
    }

    static PyObject *t_AbstractSet_of_(t_AbstractSet *self, PyObject *args)
    {
      if (!parseArg(args, "T", 1, &(self->parameters)))
        Py_RETURN_SELF;
      return PyErr_SetArgsError((PyObject *) self, "of_", args);
    }

    static PyObject *t_AbstractSet_equals(t_AbstractSet *self, PyObject *args)
    {
      ::java::lang::Object a0((jobject) NULL);
      jboolean result;

      if (!parseArgs(args, "o", &a0))
      {
        OBJ_CALL(result = self->object.equals(a0));
        Py_RETURN_BOOL(result);
      }

      return callSuper(&PY_TYPE(AbstractSet), (PyObject *) self, "equals", args, 2);
    }

    static PyObject *t_AbstractSet_hashCode(t_AbstractSet *self, PyObject *args)
    {
      jint result;

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.hashCode());
        return PyInt_FromLong((long) result);
      }

      return callSuper(&PY_TYPE(AbstractSet), (PyObject *) self, "hashCode", args, 2);
    }

    static PyObject *t_AbstractSet_removeAll(t_AbstractSet *self, PyObject *args)
    {
      ::java::util::Collection a0((jobject) NULL);
      PyTypeObject **p0;
      jboolean result;

      if (!parseArgs(args, "K", ::java::util::Collection::initializeClass, &a0, &p0, ::java::util::t_Collection::parameters_))
      {
        OBJ_CALL(result = self->object.removeAll(a0));
        Py_RETURN_BOOL(result);
      }

      return callSuper(&PY_TYPE(AbstractSet), (PyObject *) self, "removeAll", args, 2);
    }
    static PyObject *t_AbstractSet_get__parameters_(t_AbstractSet *self, void *data)
    {
      return typeParameters(self->parameters, sizeof(self->parameters));
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/store/NoLockFactory.h"
#include "java/lang/String.h"
#include "org/apache/lucene/store/Lock.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {

        ::java::lang::Class *NoLockFactory::class$ = NULL;
        jmethodID *NoLockFactory::mids$ = NULL;
        bool NoLockFactory::live$ = false;

        jclass NoLockFactory::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/store/NoLockFactory");

            mids$ = new jmethodID[max_mid];
            mids$[mid_clearLock_5fdc3f48] = env->getMethodID(cls, "clearLock", "(Ljava/lang/String;)V");
            mids$[mid_getNoLockFactory_a2b6ff3e] = env->getStaticMethodID(cls, "getNoLockFactory", "()Lorg/apache/lucene/store/NoLockFactory;");
            mids$[mid_makeLock_f26bb9a8] = env->getMethodID(cls, "makeLock", "(Ljava/lang/String;)Lorg/apache/lucene/store/Lock;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        void NoLockFactory::clearLock(const ::java::lang::String & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_clearLock_5fdc3f48], a0.this$);
        }

        NoLockFactory NoLockFactory::getNoLockFactory()
        {
          jclass cls = env->getClass(initializeClass);
          return NoLockFactory(env->callStaticObjectMethod(cls, mids$[mid_getNoLockFactory_a2b6ff3e]));
        }

        ::org::apache::lucene::store::Lock NoLockFactory::makeLock(const ::java::lang::String & a0) const
        {
          return ::org::apache::lucene::store::Lock(env->callObjectMethod(this$, mids$[mid_makeLock_f26bb9a8], a0.this$));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {
        static PyObject *t_NoLockFactory_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_NoLockFactory_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_NoLockFactory_clearLock(t_NoLockFactory *self, PyObject *args);
        static PyObject *t_NoLockFactory_getNoLockFactory(PyTypeObject *type);
        static PyObject *t_NoLockFactory_makeLock(t_NoLockFactory *self, PyObject *args);
        static PyObject *t_NoLockFactory_get__noLockFactory(t_NoLockFactory *self, void *data);
        static PyGetSetDef t_NoLockFactory__fields_[] = {
          DECLARE_GET_FIELD(t_NoLockFactory, noLockFactory),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_NoLockFactory__methods_[] = {
          DECLARE_METHOD(t_NoLockFactory, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_NoLockFactory, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_NoLockFactory, clearLock, METH_VARARGS),
          DECLARE_METHOD(t_NoLockFactory, getNoLockFactory, METH_NOARGS | METH_CLASS),
          DECLARE_METHOD(t_NoLockFactory, makeLock, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(NoLockFactory, t_NoLockFactory, ::org::apache::lucene::store::LockFactory, NoLockFactory, abstract_init, 0, 0, t_NoLockFactory__fields_, 0, 0);

        void t_NoLockFactory::install(PyObject *module)
        {
          installType(&PY_TYPE(NoLockFactory), module, "NoLockFactory", 0);
        }

        void t_NoLockFactory::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(NoLockFactory).tp_dict, "class_", make_descriptor(NoLockFactory::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(NoLockFactory).tp_dict, "wrapfn_", make_descriptor(t_NoLockFactory::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(NoLockFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_NoLockFactory_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, NoLockFactory::initializeClass, 1)))
            return NULL;
          return t_NoLockFactory::wrap_Object(NoLockFactory(((t_NoLockFactory *) arg)->object.this$));
        }
        static PyObject *t_NoLockFactory_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, NoLockFactory::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_NoLockFactory_clearLock(t_NoLockFactory *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(self->object.clearLock(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(NoLockFactory), (PyObject *) self, "clearLock", args, 2);
        }

        static PyObject *t_NoLockFactory_getNoLockFactory(PyTypeObject *type)
        {
          NoLockFactory result((jobject) NULL);
          OBJ_CALL(result = ::org::apache::lucene::store::NoLockFactory::getNoLockFactory());
          return t_NoLockFactory::wrap_Object(result);
        }

        static PyObject *t_NoLockFactory_makeLock(t_NoLockFactory *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::store::Lock result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = self->object.makeLock(a0));
            return ::org::apache::lucene::store::t_Lock::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(NoLockFactory), (PyObject *) self, "makeLock", args, 2);
        }

        static PyObject *t_NoLockFactory_get__noLockFactory(t_NoLockFactory *self, void *data)
        {
          NoLockFactory value((jobject) NULL);
          OBJ_CALL(value = self->object.getNoLockFactory());
          return t_NoLockFactory::wrap_Object(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/compressing/Compressor.h"
#include "org/apache/lucene/store/DataOutput.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace compressing {

          ::java::lang::Class *Compressor::class$ = NULL;
          jmethodID *Compressor::mids$ = NULL;
          bool Compressor::live$ = false;

          jclass Compressor::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/compressing/Compressor");

              mids$ = new jmethodID[max_mid];
              mids$[mid_compress_13c9f1ba] = env->getMethodID(cls, "compress", "([BIILorg/apache/lucene/store/DataOutput;)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          void Compressor::compress(const JArray< jbyte > & a0, jint a1, jint a2, const ::org::apache::lucene::store::DataOutput & a3) const
          {
            env->callVoidMethod(this$, mids$[mid_compress_13c9f1ba], a0.this$, a1, a2, a3.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace compressing {
          static PyObject *t_Compressor_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Compressor_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Compressor_compress(t_Compressor *self, PyObject *args);

          static PyMethodDef t_Compressor__methods_[] = {
            DECLARE_METHOD(t_Compressor, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Compressor, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Compressor, compress, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(Compressor, t_Compressor, ::java::lang::Object, Compressor, abstract_init, 0, 0, 0, 0, 0);

          void t_Compressor::install(PyObject *module)
          {
            installType(&PY_TYPE(Compressor), module, "Compressor", 0);
          }

          void t_Compressor::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(Compressor).tp_dict, "class_", make_descriptor(Compressor::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(Compressor).tp_dict, "wrapfn_", make_descriptor(t_Compressor::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(Compressor).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_Compressor_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, Compressor::initializeClass, 1)))
              return NULL;
            return t_Compressor::wrap_Object(Compressor(((t_Compressor *) arg)->object.this$));
          }
          static PyObject *t_Compressor_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, Compressor::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_Compressor_compress(t_Compressor *self, PyObject *args)
          {
            JArray< jbyte > a0((jobject) NULL);
            jint a1;
            jint a2;
            ::org::apache::lucene::store::DataOutput a3((jobject) NULL);

            if (!parseArgs(args, "[BIIk", ::org::apache::lucene::store::DataOutput::initializeClass, &a0, &a1, &a2, &a3))
            {
              OBJ_CALL(self->object.compress(a0, a1, a2, a3));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "compress", args);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/core/config/ConfigurationKey.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace config {

              ::java::lang::Class *ConfigurationKey::class$ = NULL;
              jmethodID *ConfigurationKey::mids$ = NULL;
              bool ConfigurationKey::live$ = false;

              jclass ConfigurationKey::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/core/config/ConfigurationKey");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_newInstance_ac28c1ca] = env->getStaticMethodID(cls, "newInstance", "()Lorg/apache/lucene/queryparser/flexible/core/config/ConfigurationKey;");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              ConfigurationKey ConfigurationKey::newInstance()
              {
                jclass cls = env->getClass(initializeClass);
                return ConfigurationKey(env->callStaticObjectMethod(cls, mids$[mid_newInstance_ac28c1ca]));
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace config {
              static PyObject *t_ConfigurationKey_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_ConfigurationKey_instance_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_ConfigurationKey_of_(t_ConfigurationKey *self, PyObject *args);
              static PyObject *t_ConfigurationKey_newInstance(PyTypeObject *type);
              static PyObject *t_ConfigurationKey_get__parameters_(t_ConfigurationKey *self, void *data);
              static PyGetSetDef t_ConfigurationKey__fields_[] = {
                DECLARE_GET_FIELD(t_ConfigurationKey, parameters_),
                { NULL, NULL, NULL, NULL, NULL }
              };

              static PyMethodDef t_ConfigurationKey__methods_[] = {
                DECLARE_METHOD(t_ConfigurationKey, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_ConfigurationKey, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_ConfigurationKey, of_, METH_VARARGS),
                DECLARE_METHOD(t_ConfigurationKey, newInstance, METH_NOARGS | METH_CLASS),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(ConfigurationKey, t_ConfigurationKey, ::java::lang::Object, ConfigurationKey, abstract_init, 0, 0, t_ConfigurationKey__fields_, 0, 0);
              PyObject *t_ConfigurationKey::wrap_Object(const ConfigurationKey& object, PyTypeObject *p0)
              {
                PyObject *obj = t_ConfigurationKey::wrap_Object(object);
                if (obj != NULL && obj != Py_None)
                {
                  t_ConfigurationKey *self = (t_ConfigurationKey *) obj;
                  self->parameters[0] = p0;
                }
                return obj;
              }

              PyObject *t_ConfigurationKey::wrap_jobject(const jobject& object, PyTypeObject *p0)
              {
                PyObject *obj = t_ConfigurationKey::wrap_jobject(object);
                if (obj != NULL && obj != Py_None)
                {
                  t_ConfigurationKey *self = (t_ConfigurationKey *) obj;
                  self->parameters[0] = p0;
                }
                return obj;
              }

              void t_ConfigurationKey::install(PyObject *module)
              {
                installType(&PY_TYPE(ConfigurationKey), module, "ConfigurationKey", 0);
              }

              void t_ConfigurationKey::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(ConfigurationKey).tp_dict, "class_", make_descriptor(ConfigurationKey::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(ConfigurationKey).tp_dict, "wrapfn_", make_descriptor(t_ConfigurationKey::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(ConfigurationKey).tp_dict, "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_ConfigurationKey_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, ConfigurationKey::initializeClass, 1)))
                  return NULL;
                return t_ConfigurationKey::wrap_Object(ConfigurationKey(((t_ConfigurationKey *) arg)->object.this$));
              }
              static PyObject *t_ConfigurationKey_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, ConfigurationKey::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static PyObject *t_ConfigurationKey_of_(t_ConfigurationKey *self, PyObject *args)
              {
                if (!parseArg(args, "T", 1, &(self->parameters)))
                  Py_RETURN_SELF;
                return PyErr_SetArgsError((PyObject *) self, "of_", args);
              }

              static PyObject *t_ConfigurationKey_newInstance(PyTypeObject *type)
              {
                ConfigurationKey result((jobject) NULL);
                OBJ_CALL(result = ::org::apache::lucene::queryparser::flexible::core::config::ConfigurationKey::newInstance());
                return t_ConfigurationKey::wrap_Object(result);
              }
              static PyObject *t_ConfigurationKey_get__parameters_(t_ConfigurationKey *self, void *data)
              {
                return typeParameters(self->parameters, sizeof(self->parameters));
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/MathUtil.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *MathUtil::class$ = NULL;
        jmethodID *MathUtil::mids$ = NULL;
        bool MathUtil::live$ = false;

        jclass MathUtil::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/MathUtil");

            mids$ = new jmethodID[max_mid];
            mids$[mid_acosh_5d1c7657] = env->getStaticMethodID(cls, "acosh", "(D)D");
            mids$[mid_asinh_5d1c7657] = env->getStaticMethodID(cls, "asinh", "(D)D");
            mids$[mid_atanh_5d1c7657] = env->getStaticMethodID(cls, "atanh", "(D)D");
            mids$[mid_gcd_a7e12cb8] = env->getStaticMethodID(cls, "gcd", "(JJ)J");
            mids$[mid_log_b1e2866a] = env->getStaticMethodID(cls, "log", "(DD)D");
            mids$[mid_log_25d05c90] = env->getStaticMethodID(cls, "log", "(JI)I");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        jdouble MathUtil::acosh(jdouble a0)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticDoubleMethod(cls, mids$[mid_acosh_5d1c7657], a0);
        }

        jdouble MathUtil::asinh(jdouble a0)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticDoubleMethod(cls, mids$[mid_asinh_5d1c7657], a0);
        }

        jdouble MathUtil::atanh(jdouble a0)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticDoubleMethod(cls, mids$[mid_atanh_5d1c7657], a0);
        }

        jlong MathUtil::gcd(jlong a0, jlong a1)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticLongMethod(cls, mids$[mid_gcd_a7e12cb8], a0, a1);
        }

        jdouble MathUtil::log(jdouble a0, jdouble a1)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticDoubleMethod(cls, mids$[mid_log_b1e2866a], a0, a1);
        }

        jint MathUtil::log(jlong a0, jint a1)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticIntMethod(cls, mids$[mid_log_25d05c90], a0, a1);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_MathUtil_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_MathUtil_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_MathUtil_acosh(PyTypeObject *type, PyObject *arg);
        static PyObject *t_MathUtil_asinh(PyTypeObject *type, PyObject *arg);
        static PyObject *t_MathUtil_atanh(PyTypeObject *type, PyObject *arg);
        static PyObject *t_MathUtil_gcd(PyTypeObject *type, PyObject *args);
        static PyObject *t_MathUtil_log(PyTypeObject *type, PyObject *args);

        static PyMethodDef t_MathUtil__methods_[] = {
          DECLARE_METHOD(t_MathUtil, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MathUtil, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MathUtil, acosh, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MathUtil, asinh, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MathUtil, atanh, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MathUtil, gcd, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_MathUtil, log, METH_VARARGS | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(MathUtil, t_MathUtil, ::java::lang::Object, MathUtil, abstract_init, 0, 0, 0, 0, 0);

        void t_MathUtil::install(PyObject *module)
        {
          installType(&PY_TYPE(MathUtil), module, "MathUtil", 0);
        }

        void t_MathUtil::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(MathUtil).tp_dict, "class_", make_descriptor(MathUtil::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(MathUtil).tp_dict, "wrapfn_", make_descriptor(t_MathUtil::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(MathUtil).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_MathUtil_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, MathUtil::initializeClass, 1)))
            return NULL;
          return t_MathUtil::wrap_Object(MathUtil(((t_MathUtil *) arg)->object.this$));
        }
        static PyObject *t_MathUtil_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, MathUtil::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_MathUtil_acosh(PyTypeObject *type, PyObject *arg)
        {
          jdouble a0;
          jdouble result;

          if (!parseArg(arg, "D", &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::util::MathUtil::acosh(a0));
            return PyFloat_FromDouble((double) result);
          }

          PyErr_SetArgsError(type, "acosh", arg);
          return NULL;
        }

        static PyObject *t_MathUtil_asinh(PyTypeObject *type, PyObject *arg)
        {
          jdouble a0;
          jdouble result;

          if (!parseArg(arg, "D", &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::util::MathUtil::asinh(a0));
            return PyFloat_FromDouble((double) result);
          }

          PyErr_SetArgsError(type, "asinh", arg);
          return NULL;
        }

        static PyObject *t_MathUtil_atanh(PyTypeObject *type, PyObject *arg)
        {
          jdouble a0;
          jdouble result;

          if (!parseArg(arg, "D", &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::util::MathUtil::atanh(a0));
            return PyFloat_FromDouble((double) result);
          }

          PyErr_SetArgsError(type, "atanh", arg);
          return NULL;
        }

        static PyObject *t_MathUtil_gcd(PyTypeObject *type, PyObject *args)
        {
          jlong a0;
          jlong a1;
          jlong result;

          if (!parseArgs(args, "JJ", &a0, &a1))
          {
            OBJ_CALL(result = ::org::apache::lucene::util::MathUtil::gcd(a0, a1));
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          PyErr_SetArgsError(type, "gcd", args);
          return NULL;
        }

        static PyObject *t_MathUtil_log(PyTypeObject *type, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 2:
            {
              jdouble a0;
              jdouble a1;
              jdouble result;

              if (!parseArgs(args, "DD", &a0, &a1))
              {
                OBJ_CALL(result = ::org::apache::lucene::util::MathUtil::log(a0, a1));
                return PyFloat_FromDouble((double) result);
              }
            }
            {
              jlong a0;
              jint a1;
              jint result;

              if (!parseArgs(args, "JI", &a0, &a1))
              {
                OBJ_CALL(result = ::org::apache::lucene::util::MathUtil::log(a0, a1));
                return PyInt_FromLong((long) result);
              }
            }
          }

          PyErr_SetArgsError(type, "log", args);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/core/WhitespaceAnalyzer.h"
#include "org/apache/lucene/util/Version.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace core {

          ::java::lang::Class *WhitespaceAnalyzer::class$ = NULL;
          jmethodID *WhitespaceAnalyzer::mids$ = NULL;
          bool WhitespaceAnalyzer::live$ = false;

          jclass WhitespaceAnalyzer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/core/WhitespaceAnalyzer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_0d96cf33] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;)V");
              mids$[mid_createComponents_1be39cae] = env->getMethodID(cls, "createComponents", "(Ljava/lang/String;Ljava/io/Reader;)Lorg/apache/lucene/analysis/Analyzer$TokenStreamComponents;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          WhitespaceAnalyzer::WhitespaceAnalyzer(const ::org::apache::lucene::util::Version & a0) : ::org::apache::lucene::analysis::Analyzer(env->newObject(initializeClass, &mids$, mid_init$_0d96cf33, a0.this$)) {}
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace core {
          static PyObject *t_WhitespaceAnalyzer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_WhitespaceAnalyzer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_WhitespaceAnalyzer_init_(t_WhitespaceAnalyzer *self, PyObject *args, PyObject *kwds);

          static PyMethodDef t_WhitespaceAnalyzer__methods_[] = {
            DECLARE_METHOD(t_WhitespaceAnalyzer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_WhitespaceAnalyzer, instance_, METH_O | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(WhitespaceAnalyzer, t_WhitespaceAnalyzer, ::org::apache::lucene::analysis::Analyzer, WhitespaceAnalyzer, t_WhitespaceAnalyzer_init_, 0, 0, 0, 0, 0);

          void t_WhitespaceAnalyzer::install(PyObject *module)
          {
            installType(&PY_TYPE(WhitespaceAnalyzer), module, "WhitespaceAnalyzer", 0);
          }

          void t_WhitespaceAnalyzer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(WhitespaceAnalyzer).tp_dict, "class_", make_descriptor(WhitespaceAnalyzer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(WhitespaceAnalyzer).tp_dict, "wrapfn_", make_descriptor(t_WhitespaceAnalyzer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(WhitespaceAnalyzer).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_WhitespaceAnalyzer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, WhitespaceAnalyzer::initializeClass, 1)))
              return NULL;
            return t_WhitespaceAnalyzer::wrap_Object(WhitespaceAnalyzer(((t_WhitespaceAnalyzer *) arg)->object.this$));
          }
          static PyObject *t_WhitespaceAnalyzer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, WhitespaceAnalyzer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_WhitespaceAnalyzer_init_(t_WhitespaceAnalyzer *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::util::Version a0((jobject) NULL);
            PyTypeObject **p0;
            WhitespaceAnalyzer object((jobject) NULL);

            if (!parseArgs(args, "K", ::org::apache::lucene::util::Version::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_))
            {
              INT_CALL(object = WhitespaceAnalyzer(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/packed/PackedInts$Decoder.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace packed {

          ::java::lang::Class *PackedInts$Decoder::class$ = NULL;
          jmethodID *PackedInts$Decoder::mids$ = NULL;
          bool PackedInts$Decoder::live$ = false;

          jclass PackedInts$Decoder::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/util/packed/PackedInts$Decoder");

              mids$ = new jmethodID[max_mid];
              mids$[mid_byteBlockCount_54c6a179] = env->getMethodID(cls, "byteBlockCount", "()I");
              mids$[mid_byteValueCount_54c6a179] = env->getMethodID(cls, "byteValueCount", "()I");
              mids$[mid_decode_d1f472ca] = env->getMethodID(cls, "decode", "([BI[JII)V");
              mids$[mid_decode_6b7ac502] = env->getMethodID(cls, "decode", "([JI[JII)V");
              mids$[mid_decode_9d91d181] = env->getMethodID(cls, "decode", "([BI[III)V");
              mids$[mid_decode_ff13be19] = env->getMethodID(cls, "decode", "([JI[III)V");
              mids$[mid_longBlockCount_54c6a179] = env->getMethodID(cls, "longBlockCount", "()I");
              mids$[mid_longValueCount_54c6a179] = env->getMethodID(cls, "longValueCount", "()I");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          jint PackedInts$Decoder::byteBlockCount() const
          {
            return env->callIntMethod(this$, mids$[mid_byteBlockCount_54c6a179]);
          }

          jint PackedInts$Decoder::byteValueCount() const
          {
            return env->callIntMethod(this$, mids$[mid_byteValueCount_54c6a179]);
          }

          void PackedInts$Decoder::decode(const JArray< jbyte > & a0, jint a1, const JArray< jlong > & a2, jint a3, jint a4) const
          {
            env->callVoidMethod(this$, mids$[mid_decode_d1f472ca], a0.this$, a1, a2.this$, a3, a4);
          }

          void PackedInts$Decoder::decode(const JArray< jlong > & a0, jint a1, const JArray< jlong > & a2, jint a3, jint a4) const
          {
            env->callVoidMethod(this$, mids$[mid_decode_6b7ac502], a0.this$, a1, a2.this$, a3, a4);
          }

          void PackedInts$Decoder::decode(const JArray< jbyte > & a0, jint a1, const JArray< jint > & a2, jint a3, jint a4) const
          {
            env->callVoidMethod(this$, mids$[mid_decode_9d91d181], a0.this$, a1, a2.this$, a3, a4);
          }

          void PackedInts$Decoder::decode(const JArray< jlong > & a0, jint a1, const JArray< jint > & a2, jint a3, jint a4) const
          {
            env->callVoidMethod(this$, mids$[mid_decode_ff13be19], a0.this$, a1, a2.this$, a3, a4);
          }

          jint PackedInts$Decoder::longBlockCount() const
          {
            return env->callIntMethod(this$, mids$[mid_longBlockCount_54c6a179]);
          }

          jint PackedInts$Decoder::longValueCount() const
          {
            return env->callIntMethod(this$, mids$[mid_longValueCount_54c6a179]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace packed {
          static PyObject *t_PackedInts$Decoder_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PackedInts$Decoder_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PackedInts$Decoder_byteBlockCount(t_PackedInts$Decoder *self);
          static PyObject *t_PackedInts$Decoder_byteValueCount(t_PackedInts$Decoder *self);
          static PyObject *t_PackedInts$Decoder_decode(t_PackedInts$Decoder *self, PyObject *args);
          static PyObject *t_PackedInts$Decoder_longBlockCount(t_PackedInts$Decoder *self);
          static PyObject *t_PackedInts$Decoder_longValueCount(t_PackedInts$Decoder *self);

          static PyMethodDef t_PackedInts$Decoder__methods_[] = {
            DECLARE_METHOD(t_PackedInts$Decoder, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PackedInts$Decoder, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PackedInts$Decoder, byteBlockCount, METH_NOARGS),
            DECLARE_METHOD(t_PackedInts$Decoder, byteValueCount, METH_NOARGS),
            DECLARE_METHOD(t_PackedInts$Decoder, decode, METH_VARARGS),
            DECLARE_METHOD(t_PackedInts$Decoder, longBlockCount, METH_NOARGS),
            DECLARE_METHOD(t_PackedInts$Decoder, longValueCount, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(PackedInts$Decoder, t_PackedInts$Decoder, ::java::lang::Object, PackedInts$Decoder, abstract_init, 0, 0, 0, 0, 0);

          void t_PackedInts$Decoder::install(PyObject *module)
          {
            installType(&PY_TYPE(PackedInts$Decoder), module, "PackedInts$Decoder", 0);
          }

          void t_PackedInts$Decoder::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(PackedInts$Decoder).tp_dict, "class_", make_descriptor(PackedInts$Decoder::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(PackedInts$Decoder).tp_dict, "wrapfn_", make_descriptor(t_PackedInts$Decoder::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(PackedInts$Decoder).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_PackedInts$Decoder_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, PackedInts$Decoder::initializeClass, 1)))
              return NULL;
            return t_PackedInts$Decoder::wrap_Object(PackedInts$Decoder(((t_PackedInts$Decoder *) arg)->object.this$));
          }
          static PyObject *t_PackedInts$Decoder_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, PackedInts$Decoder::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_PackedInts$Decoder_byteBlockCount(t_PackedInts$Decoder *self)
          {
            jint result;
            OBJ_CALL(result = self->object.byteBlockCount());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_PackedInts$Decoder_byteValueCount(t_PackedInts$Decoder *self)
          {
            jint result;
            OBJ_CALL(result = self->object.byteValueCount());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_PackedInts$Decoder_decode(t_PackedInts$Decoder *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 5:
              {
                JArray< jbyte > a0((jobject) NULL);
                jint a1;
                JArray< jlong > a2((jobject) NULL);
                jint a3;
                jint a4;

                if (!parseArgs(args, "[BI[JII", &a0, &a1, &a2, &a3, &a4))
                {
                  OBJ_CALL(self->object.decode(a0, a1, a2, a3, a4));
                  Py_RETURN_NONE;
                }
              }
              {
                JArray< jlong > a0((jobject) NULL);
                jint a1;
                JArray< jlong > a2((jobject) NULL);
                jint a3;
                jint a4;

                if (!parseArgs(args, "[JI[JII", &a0, &a1, &a2, &a3, &a4))
                {
                  OBJ_CALL(self->object.decode(a0, a1, a2, a3, a4));
                  Py_RETURN_NONE;
                }
              }
              {
                JArray< jbyte > a0((jobject) NULL);
                jint a1;
                JArray< jint > a2((jobject) NULL);
                jint a3;
                jint a4;

                if (!parseArgs(args, "[BI[III", &a0, &a1, &a2, &a3, &a4))
                {
                  OBJ_CALL(self->object.decode(a0, a1, a2, a3, a4));
                  Py_RETURN_NONE;
                }
              }
              {
                JArray< jlong > a0((jobject) NULL);
                jint a1;
                JArray< jint > a2((jobject) NULL);
                jint a3;
                jint a4;

                if (!parseArgs(args, "[JI[III", &a0, &a1, &a2, &a3, &a4))
                {
                  OBJ_CALL(self->object.decode(a0, a1, a2, a3, a4));
                  Py_RETURN_NONE;
                }
              }
            }

            PyErr_SetArgsError((PyObject *) self, "decode", args);
            return NULL;
          }

          static PyObject *t_PackedInts$Decoder_longBlockCount(t_PackedInts$Decoder *self)
          {
            jint result;
            OBJ_CALL(result = self->object.longBlockCount());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_PackedInts$Decoder_longValueCount(t_PackedInts$Decoder *self)
          {
            jint result;
            OBJ_CALL(result = self->object.longValueCount());
            return PyInt_FromLong((long) result);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/OfflineSorter$SortInfo.h"
#include "org/apache/lucene/util/OfflineSorter.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *OfflineSorter$SortInfo::class$ = NULL;
        jmethodID *OfflineSorter$SortInfo::mids$ = NULL;
        jfieldID *OfflineSorter$SortInfo::fids$ = NULL;
        bool OfflineSorter$SortInfo::live$ = false;

        jclass OfflineSorter$SortInfo::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/OfflineSorter$SortInfo");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_6859decd] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/OfflineSorter;)V");
            mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

            fids$ = new jfieldID[max_fid];
            fids$[fid_bufferSize] = env->getFieldID(cls, "bufferSize", "J");
            fids$[fid_lines] = env->getFieldID(cls, "lines", "I");
            fids$[fid_mergeRounds] = env->getFieldID(cls, "mergeRounds", "I");
            fids$[fid_mergeTime] = env->getFieldID(cls, "mergeTime", "J");
            fids$[fid_readTime] = env->getFieldID(cls, "readTime", "J");
            fids$[fid_sortTime] = env->getFieldID(cls, "sortTime", "J");
            fids$[fid_tempMergeFiles] = env->getFieldID(cls, "tempMergeFiles", "I");
            fids$[fid_totalTime] = env->getFieldID(cls, "totalTime", "J");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        OfflineSorter$SortInfo::OfflineSorter$SortInfo(const ::org::apache::lucene::util::OfflineSorter & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_6859decd, a0.this$)) {}

        ::java::lang::String OfflineSorter$SortInfo::toString() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
        }

        jlong OfflineSorter$SortInfo::_get_bufferSize() const
        {
          return env->getLongField(this$, fids$[fid_bufferSize]);
        }

        jint OfflineSorter$SortInfo::_get_lines() const
        {
          return env->getIntField(this$, fids$[fid_lines]);
        }

        void OfflineSorter$SortInfo::_set_lines(jint a0) const
        {
          env->setIntField(this$, fids$[fid_lines], a0);
        }

        jint OfflineSorter$SortInfo::_get_mergeRounds() const
        {
          return env->getIntField(this$, fids$[fid_mergeRounds]);
        }

        void OfflineSorter$SortInfo::_set_mergeRounds(jint a0) const
        {
          env->setIntField(this$, fids$[fid_mergeRounds], a0);
        }

        jlong OfflineSorter$SortInfo::_get_mergeTime() const
        {
          return env->getLongField(this$, fids$[fid_mergeTime]);
        }

        void OfflineSorter$SortInfo::_set_mergeTime(jlong a0) const
        {
          env->setLongField(this$, fids$[fid_mergeTime], a0);
        }

        jlong OfflineSorter$SortInfo::_get_readTime() const
        {
          return env->getLongField(this$, fids$[fid_readTime]);
        }

        void OfflineSorter$SortInfo::_set_readTime(jlong a0) const
        {
          env->setLongField(this$, fids$[fid_readTime], a0);
        }

        jlong OfflineSorter$SortInfo::_get_sortTime() const
        {
          return env->getLongField(this$, fids$[fid_sortTime]);
        }

        void OfflineSorter$SortInfo::_set_sortTime(jlong a0) const
        {
          env->setLongField(this$, fids$[fid_sortTime], a0);
        }

        jint OfflineSorter$SortInfo::_get_tempMergeFiles() const
        {
          return env->getIntField(this$, fids$[fid_tempMergeFiles]);
        }

        void OfflineSorter$SortInfo::_set_tempMergeFiles(jint a0) const
        {
          env->setIntField(this$, fids$[fid_tempMergeFiles], a0);
        }

        jlong OfflineSorter$SortInfo::_get_totalTime() const
        {
          return env->getLongField(this$, fids$[fid_totalTime]);
        }

        void OfflineSorter$SortInfo::_set_totalTime(jlong a0) const
        {
          env->setLongField(this$, fids$[fid_totalTime], a0);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_OfflineSorter$SortInfo_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_OfflineSorter$SortInfo_instance_(PyTypeObject *type, PyObject *arg);
        static int t_OfflineSorter$SortInfo_init_(t_OfflineSorter$SortInfo *self, PyObject *args, PyObject *kwds);
        static PyObject *t_OfflineSorter$SortInfo_toString(t_OfflineSorter$SortInfo *self, PyObject *args);
        static PyObject *t_OfflineSorter$SortInfo_get__bufferSize(t_OfflineSorter$SortInfo *self, void *data);
        static PyObject *t_OfflineSorter$SortInfo_get__lines(t_OfflineSorter$SortInfo *self, void *data);
        static int t_OfflineSorter$SortInfo_set__lines(t_OfflineSorter$SortInfo *self, PyObject *arg, void *data);
        static PyObject *t_OfflineSorter$SortInfo_get__mergeRounds(t_OfflineSorter$SortInfo *self, void *data);
        static int t_OfflineSorter$SortInfo_set__mergeRounds(t_OfflineSorter$SortInfo *self, PyObject *arg, void *data);
        static PyObject *t_OfflineSorter$SortInfo_get__mergeTime(t_OfflineSorter$SortInfo *self, void *data);
        static int t_OfflineSorter$SortInfo_set__mergeTime(t_OfflineSorter$SortInfo *self, PyObject *arg, void *data);
        static PyObject *t_OfflineSorter$SortInfo_get__readTime(t_OfflineSorter$SortInfo *self, void *data);
        static int t_OfflineSorter$SortInfo_set__readTime(t_OfflineSorter$SortInfo *self, PyObject *arg, void *data);
        static PyObject *t_OfflineSorter$SortInfo_get__sortTime(t_OfflineSorter$SortInfo *self, void *data);
        static int t_OfflineSorter$SortInfo_set__sortTime(t_OfflineSorter$SortInfo *self, PyObject *arg, void *data);
        static PyObject *t_OfflineSorter$SortInfo_get__tempMergeFiles(t_OfflineSorter$SortInfo *self, void *data);
        static int t_OfflineSorter$SortInfo_set__tempMergeFiles(t_OfflineSorter$SortInfo *self, PyObject *arg, void *data);
        static PyObject *t_OfflineSorter$SortInfo_get__totalTime(t_OfflineSorter$SortInfo *self, void *data);
        static int t_OfflineSorter$SortInfo_set__totalTime(t_OfflineSorter$SortInfo *self, PyObject *arg, void *data);

        static PyGetSetDef t_OfflineSorter$SortInfo__fields_[] = {
          DECLARE_GET_FIELD(t_OfflineSorter$SortInfo, bufferSize),
          DECLARE_GETSET_FIELD(t_OfflineSorter$SortInfo, lines),
          DECLARE_GETSET_FIELD(t_OfflineSorter$SortInfo, mergeRounds),
          DECLARE_GETSET_FIELD(t_OfflineSorter$SortInfo, mergeTime),
          DECLARE_GETSET_FIELD(t_OfflineSorter$SortInfo, readTime),
          DECLARE_GETSET_FIELD(t_OfflineSorter$SortInfo, sortTime),
          DECLARE_GETSET_FIELD(t_OfflineSorter$SortInfo, tempMergeFiles),
          DECLARE_GETSET_FIELD(t_OfflineSorter$SortInfo, totalTime),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_OfflineSorter$SortInfo__methods_[] = {
          DECLARE_METHOD(t_OfflineSorter$SortInfo, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_OfflineSorter$SortInfo, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_OfflineSorter$SortInfo, toString, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(OfflineSorter$SortInfo, t_OfflineSorter$SortInfo, ::java::lang::Object, OfflineSorter$SortInfo, t_OfflineSorter$SortInfo_init_, 0, 0, t_OfflineSorter$SortInfo__fields_, 0, 0);

        void t_OfflineSorter$SortInfo::install(PyObject *module)
        {
          installType(&PY_TYPE(OfflineSorter$SortInfo), module, "OfflineSorter$SortInfo", 0);
        }

        void t_OfflineSorter$SortInfo::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(OfflineSorter$SortInfo).tp_dict, "class_", make_descriptor(OfflineSorter$SortInfo::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(OfflineSorter$SortInfo).tp_dict, "wrapfn_", make_descriptor(t_OfflineSorter$SortInfo::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(OfflineSorter$SortInfo).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_OfflineSorter$SortInfo_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, OfflineSorter$SortInfo::initializeClass, 1)))
            return NULL;
          return t_OfflineSorter$SortInfo::wrap_Object(OfflineSorter$SortInfo(((t_OfflineSorter$SortInfo *) arg)->object.this$));
        }
        static PyObject *t_OfflineSorter$SortInfo_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, OfflineSorter$SortInfo::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_OfflineSorter$SortInfo_init_(t_OfflineSorter$SortInfo *self, PyObject *args, PyObject *kwds)
        {
          ::org::apache::lucene::util::OfflineSorter a0((jobject) NULL);
          OfflineSorter$SortInfo object((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::util::OfflineSorter::initializeClass, &a0))
          {
            INT_CALL(object = OfflineSorter$SortInfo(a0));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_OfflineSorter$SortInfo_toString(t_OfflineSorter$SortInfo *self, PyObject *args)
        {
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.toString());
            return j2p(result);
          }

          return callSuper(&PY_TYPE(OfflineSorter$SortInfo), (PyObject *) self, "toString", args, 2);
        }

        static PyObject *t_OfflineSorter$SortInfo_get__bufferSize(t_OfflineSorter$SortInfo *self, void *data)
        {
          jlong value;
          OBJ_CALL(value = self->object._get_bufferSize());
          return PyLong_FromLongLong((PY_LONG_LONG) value);
        }

        static PyObject *t_OfflineSorter$SortInfo_get__lines(t_OfflineSorter$SortInfo *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object._get_lines());
          return PyInt_FromLong((long) value);
        }
        static int t_OfflineSorter$SortInfo_set__lines(t_OfflineSorter$SortInfo *self, PyObject *arg, void *data)
        {
          jint value;
          if (!parseArg(arg, "I", &value))
          {
            INT_CALL(self->object._set_lines(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "lines", arg);
          return -1;
        }

        static PyObject *t_OfflineSorter$SortInfo_get__mergeRounds(t_OfflineSorter$SortInfo *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object._get_mergeRounds());
          return PyInt_FromLong((long) value);
        }
        static int t_OfflineSorter$SortInfo_set__mergeRounds(t_OfflineSorter$SortInfo *self, PyObject *arg, void *data)
        {
          jint value;
          if (!parseArg(arg, "I", &value))
          {
            INT_CALL(self->object._set_mergeRounds(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "mergeRounds", arg);
          return -1;
        }

        static PyObject *t_OfflineSorter$SortInfo_get__mergeTime(t_OfflineSorter$SortInfo *self, void *data)
        {
          jlong value;
          OBJ_CALL(value = self->object._get_mergeTime());
          return PyLong_FromLongLong((PY_LONG_LONG) value);
        }
        static int t_OfflineSorter$SortInfo_set__mergeTime(t_OfflineSorter$SortInfo *self, PyObject *arg, void *data)
        {
          jlong value;
          if (!parseArg(arg, "J", &value))
          {
            INT_CALL(self->object._set_mergeTime(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "mergeTime", arg);
          return -1;
        }

        static PyObject *t_OfflineSorter$SortInfo_get__readTime(t_OfflineSorter$SortInfo *self, void *data)
        {
          jlong value;
          OBJ_CALL(value = self->object._get_readTime());
          return PyLong_FromLongLong((PY_LONG_LONG) value);
        }
        static int t_OfflineSorter$SortInfo_set__readTime(t_OfflineSorter$SortInfo *self, PyObject *arg, void *data)
        {
          jlong value;
          if (!parseArg(arg, "J", &value))
          {
            INT_CALL(self->object._set_readTime(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "readTime", arg);
          return -1;
        }

        static PyObject *t_OfflineSorter$SortInfo_get__sortTime(t_OfflineSorter$SortInfo *self, void *data)
        {
          jlong value;
          OBJ_CALL(value = self->object._get_sortTime());
          return PyLong_FromLongLong((PY_LONG_LONG) value);
        }
        static int t_OfflineSorter$SortInfo_set__sortTime(t_OfflineSorter$SortInfo *self, PyObject *arg, void *data)
        {
          jlong value;
          if (!parseArg(arg, "J", &value))
          {
            INT_CALL(self->object._set_sortTime(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "sortTime", arg);
          return -1;
        }

        static PyObject *t_OfflineSorter$SortInfo_get__tempMergeFiles(t_OfflineSorter$SortInfo *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object._get_tempMergeFiles());
          return PyInt_FromLong((long) value);
        }
        static int t_OfflineSorter$SortInfo_set__tempMergeFiles(t_OfflineSorter$SortInfo *self, PyObject *arg, void *data)
        {
          jint value;
          if (!parseArg(arg, "I", &value))
          {
            INT_CALL(self->object._set_tempMergeFiles(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "tempMergeFiles", arg);
          return -1;
        }

        static PyObject *t_OfflineSorter$SortInfo_get__totalTime(t_OfflineSorter$SortInfo *self, void *data)
        {
          jlong value;
          OBJ_CALL(value = self->object._get_totalTime());
          return PyLong_FromLongLong((PY_LONG_LONG) value);
        }
        static int t_OfflineSorter$SortInfo_set__totalTime(t_OfflineSorter$SortInfo *self, PyObject *arg, void *data)
        {
          jlong value;
          if (!parseArg(arg, "J", &value))
          {
            INT_CALL(self->object._set_totalTime(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "totalTime", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/Tokenizer.h"
#include "java/io/IOException.h"
#include "java/io/Reader.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {

        ::java::lang::Class *Tokenizer::class$ = NULL;
        jmethodID *Tokenizer::mids$ = NULL;
        bool Tokenizer::live$ = false;

        jclass Tokenizer::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/Tokenizer");

            mids$ = new jmethodID[max_mid];
            mids$[mid_close_54c6a166] = env->getMethodID(cls, "close", "()V");
            mids$[mid_reset_54c6a166] = env->getMethodID(cls, "reset", "()V");
            mids$[mid_setReader_cf2e3c10] = env->getMethodID(cls, "setReader", "(Ljava/io/Reader;)V");
            mids$[mid_correctOffset_39c7bd23] = env->getMethodID(cls, "correctOffset", "(I)I");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        void Tokenizer::close() const
        {
          env->callVoidMethod(this$, mids$[mid_close_54c6a166]);
        }

        void Tokenizer::reset() const
        {
          env->callVoidMethod(this$, mids$[mid_reset_54c6a166]);
        }

        void Tokenizer::setReader(const ::java::io::Reader & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setReader_cf2e3c10], a0.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        static PyObject *t_Tokenizer_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_Tokenizer_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_Tokenizer_close(t_Tokenizer *self, PyObject *args);
        static PyObject *t_Tokenizer_reset(t_Tokenizer *self, PyObject *args);
        static PyObject *t_Tokenizer_setReader(t_Tokenizer *self, PyObject *arg);
        static int t_Tokenizer_set__reader(t_Tokenizer *self, PyObject *arg, void *data);
        static PyGetSetDef t_Tokenizer__fields_[] = {
          DECLARE_SET_FIELD(t_Tokenizer, reader),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_Tokenizer__methods_[] = {
          DECLARE_METHOD(t_Tokenizer, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_Tokenizer, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_Tokenizer, close, METH_VARARGS),
          DECLARE_METHOD(t_Tokenizer, reset, METH_VARARGS),
          DECLARE_METHOD(t_Tokenizer, setReader, METH_O),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(Tokenizer, t_Tokenizer, ::org::apache::lucene::analysis::TokenStream, Tokenizer, abstract_init, 0, 0, t_Tokenizer__fields_, 0, 0);

        void t_Tokenizer::install(PyObject *module)
        {
          installType(&PY_TYPE(Tokenizer), module, "Tokenizer", 0);
        }

        void t_Tokenizer::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(Tokenizer).tp_dict, "class_", make_descriptor(Tokenizer::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(Tokenizer).tp_dict, "wrapfn_", make_descriptor(t_Tokenizer::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(Tokenizer).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_Tokenizer_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, Tokenizer::initializeClass, 1)))
            return NULL;
          return t_Tokenizer::wrap_Object(Tokenizer(((t_Tokenizer *) arg)->object.this$));
        }
        static PyObject *t_Tokenizer_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, Tokenizer::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_Tokenizer_close(t_Tokenizer *self, PyObject *args)
        {

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(self->object.close());
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(Tokenizer), (PyObject *) self, "close", args, 2);
        }

        static PyObject *t_Tokenizer_reset(t_Tokenizer *self, PyObject *args)
        {

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(self->object.reset());
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(Tokenizer), (PyObject *) self, "reset", args, 2);
        }

        static PyObject *t_Tokenizer_setReader(t_Tokenizer *self, PyObject *arg)
        {
          ::java::io::Reader a0((jobject) NULL);

          if (!parseArg(arg, "k", ::java::io::Reader::initializeClass, &a0))
          {
            OBJ_CALL(self->object.setReader(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setReader", arg);
          return NULL;
        }

        static int t_Tokenizer_set__reader(t_Tokenizer *self, PyObject *arg, void *data)
        {
          {
            ::java::io::Reader value((jobject) NULL);
            if (!parseArg(arg, "k", ::java::io::Reader::initializeClass, &value))
            {
              INT_CALL(self->object.setReader(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "reader", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/document/FieldType.h"
#include "org/apache/lucene/index/FieldInfo$DocValuesType.h"
#include "org/apache/lucene/index/IndexableFieldType.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "org/apache/lucene/index/FieldInfo$IndexOptions.h"
#include "org/apache/lucene/document/FieldType$NumericType.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace document {

        ::java::lang::Class *FieldType::class$ = NULL;
        jmethodID *FieldType::mids$ = NULL;
        bool FieldType::live$ = false;

        jclass FieldType::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/document/FieldType");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_docValueType_db3dc573] = env->getMethodID(cls, "docValueType", "()Lorg/apache/lucene/index/FieldInfo$DocValuesType;");
            mids$[mid_freeze_54c6a166] = env->getMethodID(cls, "freeze", "()V");
            mids$[mid_indexOptions_e1b704de] = env->getMethodID(cls, "indexOptions", "()Lorg/apache/lucene/index/FieldInfo$IndexOptions;");
            mids$[mid_indexed_54c6a16a] = env->getMethodID(cls, "indexed", "()Z");
            mids$[mid_numericPrecisionStep_54c6a179] = env->getMethodID(cls, "numericPrecisionStep", "()I");
            mids$[mid_numericType_81bd17c2] = env->getMethodID(cls, "numericType", "()Lorg/apache/lucene/document/FieldType$NumericType;");
            mids$[mid_omitNorms_54c6a16a] = env->getMethodID(cls, "omitNorms", "()Z");
            mids$[mid_setDocValueType_09b98f7a] = env->getMethodID(cls, "setDocValueType", "(Lorg/apache/lucene/index/FieldInfo$DocValuesType;)V");
            mids$[mid_setIndexOptions_9cd708ff] = env->getMethodID(cls, "setIndexOptions", "(Lorg/apache/lucene/index/FieldInfo$IndexOptions;)V");
            mids$[mid_setIndexed_bb0c767f] = env->getMethodID(cls, "setIndexed", "(Z)V");
            mids$[mid_setNumericPrecisionStep_39c7bd3c] = env->getMethodID(cls, "setNumericPrecisionStep", "(I)V");
            mids$[mid_setNumericType_d9029e47] = env->getMethodID(cls, "setNumericType", "(Lorg/apache/lucene/document/FieldType$NumericType;)V");
            mids$[mid_setOmitNorms_bb0c767f] = env->getMethodID(cls, "setOmitNorms", "(Z)V");
            mids$[mid_setStoreTermVectorOffsets_bb0c767f] = env->getMethodID(cls, "setStoreTermVectorOffsets", "(Z)V");
            mids$[mid_setStoreTermVectorPayloads_bb0c767f] = env->getMethodID(cls, "setStoreTermVectorPayloads", "(Z)V");
            mids$[mid_setStoreTermVectorPositions_bb0c767f] = env->getMethodID(cls, "setStoreTermVectorPositions", "(Z)V");
            mids$[mid_setStoreTermVectors_bb0c767f] = env->getMethodID(cls, "setStoreTermVectors", "(Z)V");
            mids$[mid_setStored_bb0c767f] = env->getMethodID(cls, "setStored", "(Z)V");
            mids$[mid_setTokenized_bb0c767f] = env->getMethodID(cls, "setTokenized", "(Z)V");
            mids$[mid_storeTermVectorOffsets_54c6a16a] = env->getMethodID(cls, "storeTermVectorOffsets", "()Z");
            mids$[mid_storeTermVectorPayloads_54c6a16a] = env->getMethodID(cls, "storeTermVectorPayloads", "()Z");
            mids$[mid_storeTermVectorPositions_54c6a16a] = env->getMethodID(cls, "storeTermVectorPositions", "()Z");
            mids$[mid_storeTermVectors_54c6a16a] = env->getMethodID(cls, "storeTermVectors", "()Z");
            mids$[mid_stored_54c6a16a] = env->getMethodID(cls, "stored", "()Z");
            mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");
            mids$[mid_tokenized_54c6a16a] = env->getMethodID(cls, "tokenized", "()Z");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        FieldType::FieldType() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        ::org::apache::lucene::index::FieldInfo$DocValuesType FieldType::docValueType() const
        {
          return ::org::apache::lucene::index::FieldInfo$DocValuesType(env->callObjectMethod(this$, mids$[mid_docValueType_db3dc573]));
        }

        void FieldType::freeze() const
        {
          env->callVoidMethod(this$, mids$[mid_freeze_54c6a166]);
        }

        ::org::apache::lucene::index::FieldInfo$IndexOptions FieldType::indexOptions() const
        {
          return ::org::apache::lucene::index::FieldInfo$IndexOptions(env->callObjectMethod(this$, mids$[mid_indexOptions_e1b704de]));
        }

        jboolean FieldType::indexed() const
        {
          return env->callBooleanMethod(this$, mids$[mid_indexed_54c6a16a]);
        }

        jint FieldType::numericPrecisionStep() const
        {
          return env->callIntMethod(this$, mids$[mid_numericPrecisionStep_54c6a179]);
        }

        ::org::apache::lucene::document::FieldType$NumericType FieldType::numericType() const
        {
          return ::org::apache::lucene::document::FieldType$NumericType(env->callObjectMethod(this$, mids$[mid_numericType_81bd17c2]));
        }

        jboolean FieldType::omitNorms() const
        {
          return env->callBooleanMethod(this$, mids$[mid_omitNorms_54c6a16a]);
        }

        void FieldType::setDocValueType(const ::org::apache::lucene::index::FieldInfo$DocValuesType & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setDocValueType_09b98f7a], a0.this$);
        }

        void FieldType::setIndexOptions(const ::org::apache::lucene::index::FieldInfo$IndexOptions & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setIndexOptions_9cd708ff], a0.this$);
        }

        void FieldType::setIndexed(jboolean a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setIndexed_bb0c767f], a0);
        }

        void FieldType::setNumericPrecisionStep(jint a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setNumericPrecisionStep_39c7bd3c], a0);
        }

        void FieldType::setNumericType(const ::org::apache::lucene::document::FieldType$NumericType & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setNumericType_d9029e47], a0.this$);
        }

        void FieldType::setOmitNorms(jboolean a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setOmitNorms_bb0c767f], a0);
        }

        void FieldType::setStoreTermVectorOffsets(jboolean a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setStoreTermVectorOffsets_bb0c767f], a0);
        }

        void FieldType::setStoreTermVectorPayloads(jboolean a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setStoreTermVectorPayloads_bb0c767f], a0);
        }

        void FieldType::setStoreTermVectorPositions(jboolean a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setStoreTermVectorPositions_bb0c767f], a0);
        }

        void FieldType::setStoreTermVectors(jboolean a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setStoreTermVectors_bb0c767f], a0);
        }

        void FieldType::setStored(jboolean a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setStored_bb0c767f], a0);
        }

        void FieldType::setTokenized(jboolean a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setTokenized_bb0c767f], a0);
        }

        jboolean FieldType::storeTermVectorOffsets() const
        {
          return env->callBooleanMethod(this$, mids$[mid_storeTermVectorOffsets_54c6a16a]);
        }

        jboolean FieldType::storeTermVectorPayloads() const
        {
          return env->callBooleanMethod(this$, mids$[mid_storeTermVectorPayloads_54c6a16a]);
        }

        jboolean FieldType::storeTermVectorPositions() const
        {
          return env->callBooleanMethod(this$, mids$[mid_storeTermVectorPositions_54c6a16a]);
        }

        jboolean FieldType::storeTermVectors() const
        {
          return env->callBooleanMethod(this$, mids$[mid_storeTermVectors_54c6a16a]);
        }

        jboolean FieldType::stored() const
        {
          return env->callBooleanMethod(this$, mids$[mid_stored_54c6a16a]);
        }

        ::java::lang::String FieldType::toString() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
        }

        jboolean FieldType::tokenized() const
        {
          return env->callBooleanMethod(this$, mids$[mid_tokenized_54c6a16a]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace document {
        static PyObject *t_FieldType_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FieldType_instance_(PyTypeObject *type, PyObject *arg);
        static int t_FieldType_init_(t_FieldType *self, PyObject *args, PyObject *kwds);
        static PyObject *t_FieldType_docValueType(t_FieldType *self);
        static PyObject *t_FieldType_freeze(t_FieldType *self);
        static PyObject *t_FieldType_indexOptions(t_FieldType *self);
        static PyObject *t_FieldType_indexed(t_FieldType *self);
        static PyObject *t_FieldType_numericPrecisionStep(t_FieldType *self);
        static PyObject *t_FieldType_numericType(t_FieldType *self);
        static PyObject *t_FieldType_omitNorms(t_FieldType *self);
        static PyObject *t_FieldType_setDocValueType(t_FieldType *self, PyObject *arg);
        static PyObject *t_FieldType_setIndexOptions(t_FieldType *self, PyObject *arg);
        static PyObject *t_FieldType_setIndexed(t_FieldType *self, PyObject *arg);
        static PyObject *t_FieldType_setNumericPrecisionStep(t_FieldType *self, PyObject *arg);
        static PyObject *t_FieldType_setNumericType(t_FieldType *self, PyObject *arg);
        static PyObject *t_FieldType_setOmitNorms(t_FieldType *self, PyObject *arg);
        static PyObject *t_FieldType_setStoreTermVectorOffsets(t_FieldType *self, PyObject *arg);
        static PyObject *t_FieldType_setStoreTermVectorPayloads(t_FieldType *self, PyObject *arg);
        static PyObject *t_FieldType_setStoreTermVectorPositions(t_FieldType *self, PyObject *arg);
        static PyObject *t_FieldType_setStoreTermVectors(t_FieldType *self, PyObject *arg);
        static PyObject *t_FieldType_setStored(t_FieldType *self, PyObject *arg);
        static PyObject *t_FieldType_setTokenized(t_FieldType *self, PyObject *arg);
        static PyObject *t_FieldType_storeTermVectorOffsets(t_FieldType *self);
        static PyObject *t_FieldType_storeTermVectorPayloads(t_FieldType *self);
        static PyObject *t_FieldType_storeTermVectorPositions(t_FieldType *self);
        static PyObject *t_FieldType_storeTermVectors(t_FieldType *self);
        static PyObject *t_FieldType_stored(t_FieldType *self);
        static PyObject *t_FieldType_toString(t_FieldType *self, PyObject *args);
        static PyObject *t_FieldType_tokenized(t_FieldType *self);

        static PyMethodDef t_FieldType__methods_[] = {
          DECLARE_METHOD(t_FieldType, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FieldType, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FieldType, docValueType, METH_NOARGS),
          DECLARE_METHOD(t_FieldType, freeze, METH_NOARGS),
          DECLARE_METHOD(t_FieldType, indexOptions, METH_NOARGS),
          DECLARE_METHOD(t_FieldType, indexed, METH_NOARGS),
          DECLARE_METHOD(t_FieldType, numericPrecisionStep, METH_NOARGS),
          DECLARE_METHOD(t_FieldType, numericType, METH_NOARGS),
          DECLARE_METHOD(t_FieldType, omitNorms, METH_NOARGS),
          DECLARE_METHOD(t_FieldType, setDocValueType, METH_O),
          DECLARE_METHOD(t_FieldType, setIndexOptions, METH_O),
          DECLARE_METHOD(t_FieldType, setIndexed, METH_O),
          DECLARE_METHOD(t_FieldType, setNumericPrecisionStep, METH_O),
          DECLARE_METHOD(t_FieldType, setNumericType, METH_O),
          DECLARE_METHOD(t_FieldType, setOmitNorms, METH_O),
          DECLARE_METHOD(t_FieldType, setStoreTermVectorOffsets, METH_O),
          DECLARE_METHOD(t_FieldType, setStoreTermVectorPayloads, METH_O),
          DECLARE_METHOD(t_FieldType, setStoreTermVectorPositions, METH_O),
          DECLARE_METHOD(t_FieldType, setStoreTermVectors, METH_O),
          DECLARE_METHOD(t_FieldType, setStored, METH_O),
          DECLARE_METHOD(t_FieldType, setTokenized, METH_O),
          DECLARE_METHOD(t_FieldType, storeTermVectorOffsets, METH_NOARGS),
          DECLARE_METHOD(t_FieldType, storeTermVectorPayloads, METH_NOARGS),
          DECLARE_METHOD(t_FieldType, storeTermVectorPositions, METH_NOARGS),
          DECLARE_METHOD(t_FieldType, storeTermVectors, METH_NOARGS),
          DECLARE_METHOD(t_FieldType, stored, METH_NOARGS),
          DECLARE_METHOD(t_FieldType, toString, METH_VARARGS),
          DECLARE_METHOD(t_FieldType, tokenized, METH_NOARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(FieldType, t_FieldType, ::java::lang::Object, FieldType, t_FieldType_init_, 0, 0, 0, 0, 0);

        void t_FieldType::install(PyObject *module)
        {
          installType(&PY_TYPE(FieldType), module, "FieldType", 0);
          PyDict_SetItemString(PY_TYPE(FieldType).tp_dict, "NumericType", make_descriptor(&PY_TYPE(FieldType$NumericType)));
        }

        void t_FieldType::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(FieldType).tp_dict, "class_", make_descriptor(FieldType::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(FieldType).tp_dict, "wrapfn_", make_descriptor(t_FieldType::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(FieldType).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_FieldType_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, FieldType::initializeClass, 1)))
            return NULL;
          return t_FieldType::wrap_Object(FieldType(((t_FieldType *) arg)->object.this$));
        }
        static PyObject *t_FieldType_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, FieldType::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_FieldType_init_(t_FieldType *self, PyObject *args, PyObject *kwds)
        {
          FieldType object((jobject) NULL);

          INT_CALL(object = FieldType());
          self->object = object;

          return 0;
        }

        static PyObject *t_FieldType_docValueType(t_FieldType *self)
        {
          ::org::apache::lucene::index::FieldInfo$DocValuesType result((jobject) NULL);
          OBJ_CALL(result = self->object.docValueType());
          return ::org::apache::lucene::index::t_FieldInfo$DocValuesType::wrap_Object(result);
        }

        static PyObject *t_FieldType_freeze(t_FieldType *self)
        {
          OBJ_CALL(self->object.freeze());
          Py_RETURN_NONE;
        }

        static PyObject *t_FieldType_indexOptions(t_FieldType *self)
        {
          ::org::apache::lucene::index::FieldInfo$IndexOptions result((jobject) NULL);
          OBJ_CALL(result = self->object.indexOptions());
          return ::org::apache::lucene::index::t_FieldInfo$IndexOptions::wrap_Object(result);
        }

        static PyObject *t_FieldType_indexed(t_FieldType *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.indexed());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_FieldType_numericPrecisionStep(t_FieldType *self)
        {
          jint result;
          OBJ_CALL(result = self->object.numericPrecisionStep());
          return PyInt_FromLong((long) result);
        }

        static PyObject *t_FieldType_numericType(t_FieldType *self)
        {
          ::org::apache::lucene::document::FieldType$NumericType result((jobject) NULL);
          OBJ_CALL(result = self->object.numericType());
          return ::org::apache::lucene::document::t_FieldType$NumericType::wrap_Object(result);
        }

        static PyObject *t_FieldType_omitNorms(t_FieldType *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.omitNorms());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_FieldType_setDocValueType(t_FieldType *self, PyObject *arg)
        {
          ::org::apache::lucene::index::FieldInfo$DocValuesType a0((jobject) NULL);
          PyTypeObject **p0;

          if (!parseArg(arg, "K", ::org::apache::lucene::index::FieldInfo$DocValuesType::initializeClass, &a0, &p0, ::org::apache::lucene::index::t_FieldInfo$DocValuesType::parameters_))
          {
            OBJ_CALL(self->object.setDocValueType(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setDocValueType", arg);
          return NULL;
        }

        static PyObject *t_FieldType_setIndexOptions(t_FieldType *self, PyObject *arg)
        {
          ::org::apache::lucene::index::FieldInfo$IndexOptions a0((jobject) NULL);
          PyTypeObject **p0;

          if (!parseArg(arg, "K", ::org::apache::lucene::index::FieldInfo$IndexOptions::initializeClass, &a0, &p0, ::org::apache::lucene::index::t_FieldInfo$IndexOptions::parameters_))
          {
            OBJ_CALL(self->object.setIndexOptions(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setIndexOptions", arg);
          return NULL;
        }

        static PyObject *t_FieldType_setIndexed(t_FieldType *self, PyObject *arg)
        {
          jboolean a0;

          if (!parseArg(arg, "Z", &a0))
          {
            OBJ_CALL(self->object.setIndexed(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setIndexed", arg);
          return NULL;
        }

        static PyObject *t_FieldType_setNumericPrecisionStep(t_FieldType *self, PyObject *arg)
        {
          jint a0;

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(self->object.setNumericPrecisionStep(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setNumericPrecisionStep", arg);
          return NULL;
        }

        static PyObject *t_FieldType_setNumericType(t_FieldType *self, PyObject *arg)
        {
          ::org::apache::lucene::document::FieldType$NumericType a0((jobject) NULL);
          PyTypeObject **p0;

          if (!parseArg(arg, "K", ::org::apache::lucene::document::FieldType$NumericType::initializeClass, &a0, &p0, ::org::apache::lucene::document::t_FieldType$NumericType::parameters_))
          {
            OBJ_CALL(self->object.setNumericType(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setNumericType", arg);
          return NULL;
        }

        static PyObject *t_FieldType_setOmitNorms(t_FieldType *self, PyObject *arg)
        {
          jboolean a0;

          if (!parseArg(arg, "Z", &a0))
          {
            OBJ_CALL(self->object.setOmitNorms(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setOmitNorms", arg);
          return NULL;
        }

        static PyObject *t_FieldType_setStoreTermVectorOffsets(t_FieldType *self, PyObject *arg)
        {
          jboolean a0;

          if (!parseArg(arg, "Z", &a0))
          {
            OBJ_CALL(self->object.setStoreTermVectorOffsets(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setStoreTermVectorOffsets", arg);
          return NULL;
        }

        static PyObject *t_FieldType_setStoreTermVectorPayloads(t_FieldType *self, PyObject *arg)
        {
          jboolean a0;

          if (!parseArg(arg, "Z", &a0))
          {
            OBJ_CALL(self->object.setStoreTermVectorPayloads(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setStoreTermVectorPayloads", arg);
          return NULL;
        }

        static PyObject *t_FieldType_setStoreTermVectorPositions(t_FieldType *self, PyObject *arg)
        {
          jboolean a0;

          if (!parseArg(arg, "Z", &a0))
          {
            OBJ_CALL(self->object.setStoreTermVectorPositions(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setStoreTermVectorPositions", arg);
          return NULL;
        }

        static PyObject *t_FieldType_setStoreTermVectors(t_FieldType *self, PyObject *arg)
        {
          jboolean a0;

          if (!parseArg(arg, "Z", &a0))
          {
            OBJ_CALL(self->object.setStoreTermVectors(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setStoreTermVectors", arg);
          return NULL;
        }

        static PyObject *t_FieldType_setStored(t_FieldType *self, PyObject *arg)
        {
          jboolean a0;

          if (!parseArg(arg, "Z", &a0))
          {
            OBJ_CALL(self->object.setStored(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setStored", arg);
          return NULL;
        }

        static PyObject *t_FieldType_setTokenized(t_FieldType *self, PyObject *arg)
        {
          jboolean a0;

          if (!parseArg(arg, "Z", &a0))
          {
            OBJ_CALL(self->object.setTokenized(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setTokenized", arg);
          return NULL;
        }

        static PyObject *t_FieldType_storeTermVectorOffsets(t_FieldType *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.storeTermVectorOffsets());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_FieldType_storeTermVectorPayloads(t_FieldType *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.storeTermVectorPayloads());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_FieldType_storeTermVectorPositions(t_FieldType *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.storeTermVectorPositions());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_FieldType_storeTermVectors(t_FieldType *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.storeTermVectors());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_FieldType_stored(t_FieldType *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.stored());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_FieldType_toString(t_FieldType *self, PyObject *args)
        {
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.toString());
            return j2p(result);
          }

          return callSuper(&PY_TYPE(FieldType), (PyObject *) self, "toString", args, 2);
        }

        static PyObject *t_FieldType_tokenized(t_FieldType *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.tokenized());
          Py_RETURN_BOOL(result);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/similarities/NormalizationZ.h"
#include "org/apache/lucene/search/similarities/BasicStats.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace similarities {

          ::java::lang::Class *NormalizationZ::class$ = NULL;
          jmethodID *NormalizationZ::mids$ = NULL;
          bool NormalizationZ::live$ = false;

          jclass NormalizationZ::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/similarities/NormalizationZ");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_init$_06298cab] = env->getMethodID(cls, "<init>", "(F)V");
              mids$[mid_getZ_54c6a176] = env->getMethodID(cls, "getZ", "()F");
              mids$[mid_tfn_63482206] = env->getMethodID(cls, "tfn", "(Lorg/apache/lucene/search/similarities/BasicStats;FF)F");
              mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          NormalizationZ::NormalizationZ() : ::org::apache::lucene::search::similarities::Normalization(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          NormalizationZ::NormalizationZ(jfloat a0) : ::org::apache::lucene::search::similarities::Normalization(env->newObject(initializeClass, &mids$, mid_init$_06298cab, a0)) {}

          jfloat NormalizationZ::getZ() const
          {
            return env->callFloatMethod(this$, mids$[mid_getZ_54c6a176]);
          }

          jfloat NormalizationZ::tfn(const ::org::apache::lucene::search::similarities::BasicStats & a0, jfloat a1, jfloat a2) const
          {
            return env->callFloatMethod(this$, mids$[mid_tfn_63482206], a0.this$, a1, a2);
          }

          ::java::lang::String NormalizationZ::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace similarities {
          static PyObject *t_NormalizationZ_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_NormalizationZ_instance_(PyTypeObject *type, PyObject *arg);
          static int t_NormalizationZ_init_(t_NormalizationZ *self, PyObject *args, PyObject *kwds);
          static PyObject *t_NormalizationZ_getZ(t_NormalizationZ *self);
          static PyObject *t_NormalizationZ_tfn(t_NormalizationZ *self, PyObject *args);
          static PyObject *t_NormalizationZ_toString(t_NormalizationZ *self, PyObject *args);
          static PyObject *t_NormalizationZ_get__z(t_NormalizationZ *self, void *data);
          static PyGetSetDef t_NormalizationZ__fields_[] = {
            DECLARE_GET_FIELD(t_NormalizationZ, z),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_NormalizationZ__methods_[] = {
            DECLARE_METHOD(t_NormalizationZ, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_NormalizationZ, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_NormalizationZ, getZ, METH_NOARGS),
            DECLARE_METHOD(t_NormalizationZ, tfn, METH_VARARGS),
            DECLARE_METHOD(t_NormalizationZ, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(NormalizationZ, t_NormalizationZ, ::org::apache::lucene::search::similarities::Normalization, NormalizationZ, t_NormalizationZ_init_, 0, 0, t_NormalizationZ__fields_, 0, 0);

          void t_NormalizationZ::install(PyObject *module)
          {
            installType(&PY_TYPE(NormalizationZ), module, "NormalizationZ", 0);
          }

          void t_NormalizationZ::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(NormalizationZ).tp_dict, "class_", make_descriptor(NormalizationZ::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(NormalizationZ).tp_dict, "wrapfn_", make_descriptor(t_NormalizationZ::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(NormalizationZ).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_NormalizationZ_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, NormalizationZ::initializeClass, 1)))
              return NULL;
            return t_NormalizationZ::wrap_Object(NormalizationZ(((t_NormalizationZ *) arg)->object.this$));
          }
          static PyObject *t_NormalizationZ_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, NormalizationZ::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_NormalizationZ_init_(t_NormalizationZ *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 0:
              {
                NormalizationZ object((jobject) NULL);

                INT_CALL(object = NormalizationZ());
                self->object = object;
                break;
              }
              goto err;
             case 1:
              {
                jfloat a0;
                NormalizationZ object((jobject) NULL);

                if (!parseArgs(args, "F", &a0))
                {
                  INT_CALL(object = NormalizationZ(a0));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_NormalizationZ_getZ(t_NormalizationZ *self)
          {
            jfloat result;
            OBJ_CALL(result = self->object.getZ());
            return PyFloat_FromDouble((double) result);
          }

          static PyObject *t_NormalizationZ_tfn(t_NormalizationZ *self, PyObject *args)
          {
            ::org::apache::lucene::search::similarities::BasicStats a0((jobject) NULL);
            jfloat a1;
            jfloat a2;
            jfloat result;

            if (!parseArgs(args, "kFF", ::org::apache::lucene::search::similarities::BasicStats::initializeClass, &a0, &a1, &a2))
            {
              OBJ_CALL(result = self->object.tfn(a0, a1, a2));
              return PyFloat_FromDouble((double) result);
            }

            return callSuper(&PY_TYPE(NormalizationZ), (PyObject *) self, "tfn", args, 2);
          }

          static PyObject *t_NormalizationZ_toString(t_NormalizationZ *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(&PY_TYPE(NormalizationZ), (PyObject *) self, "toString", args, 2);
          }

          static PyObject *t_NormalizationZ_get__z(t_NormalizationZ *self, void *data)
          {
            jfloat value;
            OBJ_CALL(value = self->object.getZ());
            return PyFloat_FromDouble((double) value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queries/function/valuesource/NormValueSource.h"
#include "org/apache/lucene/queries/function/FunctionValues.h"
#include "java/lang/Class.h"
#include "java/lang/Object.h"
#include "java/io/IOException.h"
#include "java/util/Map.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "java/lang/String.h"
#include "org/apache/lucene/search/IndexSearcher.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {

            ::java::lang::Class *NormValueSource::class$ = NULL;
            jmethodID *NormValueSource::mids$ = NULL;
            bool NormValueSource::live$ = false;

            jclass NormValueSource::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queries/function/valuesource/NormValueSource");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_5fdc3f48] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;)V");
                mids$[mid_createWeight_1b6125ba] = env->getMethodID(cls, "createWeight", "(Ljava/util/Map;Lorg/apache/lucene/search/IndexSearcher;)V");
                mids$[mid_description_14c7b5c5] = env->getMethodID(cls, "description", "()Ljava/lang/String;");
                mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
                mids$[mid_getValues_4c566485] = env->getMethodID(cls, "getValues", "(Ljava/util/Map;Lorg/apache/lucene/index/AtomicReaderContext;)Lorg/apache/lucene/queries/function/FunctionValues;");
                mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
                mids$[mid_name_14c7b5c5] = env->getMethodID(cls, "name", "()Ljava/lang/String;");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            NormValueSource::NormValueSource(const ::java::lang::String & a0) : ::org::apache::lucene::queries::function::ValueSource(env->newObject(initializeClass, &mids$, mid_init$_5fdc3f48, a0.this$)) {}

            void NormValueSource::createWeight(const ::java::util::Map & a0, const ::org::apache::lucene::search::IndexSearcher & a1) const
            {
              env->callVoidMethod(this$, mids$[mid_createWeight_1b6125ba], a0.this$, a1.this$);
            }

            ::java::lang::String NormValueSource::description() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_description_14c7b5c5]));
            }

            jboolean NormValueSource::equals(const ::java::lang::Object & a0) const
            {
              return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
            }

            ::org::apache::lucene::queries::function::FunctionValues NormValueSource::getValues(const ::java::util::Map & a0, const ::org::apache::lucene::index::AtomicReaderContext & a1) const
            {
              return ::org::apache::lucene::queries::function::FunctionValues(env->callObjectMethod(this$, mids$[mid_getValues_4c566485], a0.this$, a1.this$));
            }

            jint NormValueSource::hashCode() const
            {
              return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
            }

            ::java::lang::String NormValueSource::name() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_name_14c7b5c5]));
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {
            static PyObject *t_NormValueSource_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_NormValueSource_instance_(PyTypeObject *type, PyObject *arg);
            static int t_NormValueSource_init_(t_NormValueSource *self, PyObject *args, PyObject *kwds);
            static PyObject *t_NormValueSource_createWeight(t_NormValueSource *self, PyObject *args);
            static PyObject *t_NormValueSource_description(t_NormValueSource *self, PyObject *args);
            static PyObject *t_NormValueSource_equals(t_NormValueSource *self, PyObject *args);
            static PyObject *t_NormValueSource_getValues(t_NormValueSource *self, PyObject *args);
            static PyObject *t_NormValueSource_hashCode(t_NormValueSource *self, PyObject *args);
            static PyObject *t_NormValueSource_name(t_NormValueSource *self);

            static PyMethodDef t_NormValueSource__methods_[] = {
              DECLARE_METHOD(t_NormValueSource, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_NormValueSource, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_NormValueSource, createWeight, METH_VARARGS),
              DECLARE_METHOD(t_NormValueSource, description, METH_VARARGS),
              DECLARE_METHOD(t_NormValueSource, equals, METH_VARARGS),
              DECLARE_METHOD(t_NormValueSource, getValues, METH_VARARGS),
              DECLARE_METHOD(t_NormValueSource, hashCode, METH_VARARGS),
              DECLARE_METHOD(t_NormValueSource, name, METH_NOARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(NormValueSource, t_NormValueSource, ::org::apache::lucene::queries::function::ValueSource, NormValueSource, t_NormValueSource_init_, 0, 0, 0, 0, 0);

            void t_NormValueSource::install(PyObject *module)
            {
              installType(&PY_TYPE(NormValueSource), module, "NormValueSource", 0);
            }

            void t_NormValueSource::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(NormValueSource).tp_dict, "class_", make_descriptor(NormValueSource::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(NormValueSource).tp_dict, "wrapfn_", make_descriptor(t_NormValueSource::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(NormValueSource).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_NormValueSource_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, NormValueSource::initializeClass, 1)))
                return NULL;
              return t_NormValueSource::wrap_Object(NormValueSource(((t_NormValueSource *) arg)->object.this$));
            }
            static PyObject *t_NormValueSource_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, NormValueSource::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_NormValueSource_init_(t_NormValueSource *self, PyObject *args, PyObject *kwds)
            {
              ::java::lang::String a0((jobject) NULL);
              NormValueSource object((jobject) NULL);

              if (!parseArgs(args, "s", &a0))
              {
                INT_CALL(object = NormValueSource(a0));
                self->object = object;
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_NormValueSource_createWeight(t_NormValueSource *self, PyObject *args)
            {
              ::java::util::Map a0((jobject) NULL);
              PyTypeObject **p0;
              ::org::apache::lucene::search::IndexSearcher a1((jobject) NULL);

              if (!parseArgs(args, "Kk", ::java::util::Map::initializeClass, ::org::apache::lucene::search::IndexSearcher::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_, &a1))
              {
                OBJ_CALL(self->object.createWeight(a0, a1));
                Py_RETURN_NONE;
              }

              return callSuper(&PY_TYPE(NormValueSource), (PyObject *) self, "createWeight", args, 2);
            }

            static PyObject *t_NormValueSource_description(t_NormValueSource *self, PyObject *args)
            {
              ::java::lang::String result((jobject) NULL);

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.description());
                return j2p(result);
              }

              return callSuper(&PY_TYPE(NormValueSource), (PyObject *) self, "description", args, 2);
            }

            static PyObject *t_NormValueSource_equals(t_NormValueSource *self, PyObject *args)
            {
              ::java::lang::Object a0((jobject) NULL);
              jboolean result;

              if (!parseArgs(args, "o", &a0))
              {
                OBJ_CALL(result = self->object.equals(a0));
                Py_RETURN_BOOL(result);
              }

              return callSuper(&PY_TYPE(NormValueSource), (PyObject *) self, "equals", args, 2);
            }

            static PyObject *t_NormValueSource_getValues(t_NormValueSource *self, PyObject *args)
            {
              ::java::util::Map a0((jobject) NULL);
              PyTypeObject **p0;
              ::org::apache::lucene::index::AtomicReaderContext a1((jobject) NULL);
              ::org::apache::lucene::queries::function::FunctionValues result((jobject) NULL);

              if (!parseArgs(args, "Kk", ::java::util::Map::initializeClass, ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_, &a1))
              {
                OBJ_CALL(result = self->object.getValues(a0, a1));
                return ::org::apache::lucene::queries::function::t_FunctionValues::wrap_Object(result);
              }

              return callSuper(&PY_TYPE(NormValueSource), (PyObject *) self, "getValues", args, 2);
            }

            static PyObject *t_NormValueSource_hashCode(t_NormValueSource *self, PyObject *args)
            {
              jint result;

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.hashCode());
                return PyInt_FromLong((long) result);
              }

              return callSuper(&PY_TYPE(NormValueSource), (PyObject *) self, "hashCode", args, 2);
            }

            static PyObject *t_NormValueSource_name(t_NormValueSource *self)
            {
              ::java::lang::String result((jobject) NULL);
              OBJ_CALL(result = self->object.name());
              return j2p(result);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/miscellaneous/StemmerOverrideFilter$Builder.h"
#include "java/lang/CharSequence.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/miscellaneous/StemmerOverrideFilter$StemmerOverrideMap.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {

          ::java::lang::Class *StemmerOverrideFilter$Builder::class$ = NULL;
          jmethodID *StemmerOverrideFilter$Builder::mids$ = NULL;
          bool StemmerOverrideFilter$Builder::live$ = false;

          jclass StemmerOverrideFilter$Builder::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/miscellaneous/StemmerOverrideFilter$Builder");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_init$_bb0c767f] = env->getMethodID(cls, "<init>", "(Z)V");
              mids$[mid_add_db1d05a2] = env->getMethodID(cls, "add", "(Ljava/lang/CharSequence;Ljava/lang/CharSequence;)Z");
              mids$[mid_build_c052cd10] = env->getMethodID(cls, "build", "()Lorg/apache/lucene/analysis/miscellaneous/StemmerOverrideFilter$StemmerOverrideMap;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          StemmerOverrideFilter$Builder::StemmerOverrideFilter$Builder() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          StemmerOverrideFilter$Builder::StemmerOverrideFilter$Builder(jboolean a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_bb0c767f, a0)) {}

          jboolean StemmerOverrideFilter$Builder::add(const ::java::lang::CharSequence & a0, const ::java::lang::CharSequence & a1) const
          {
            return env->callBooleanMethod(this$, mids$[mid_add_db1d05a2], a0.this$, a1.this$);
          }

          ::org::apache::lucene::analysis::miscellaneous::StemmerOverrideFilter$StemmerOverrideMap StemmerOverrideFilter$Builder::build() const
          {
            return ::org::apache::lucene::analysis::miscellaneous::StemmerOverrideFilter$StemmerOverrideMap(env->callObjectMethod(this$, mids$[mid_build_c052cd10]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {
          static PyObject *t_StemmerOverrideFilter$Builder_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_StemmerOverrideFilter$Builder_instance_(PyTypeObject *type, PyObject *arg);
          static int t_StemmerOverrideFilter$Builder_init_(t_StemmerOverrideFilter$Builder *self, PyObject *args, PyObject *kwds);
          static PyObject *t_StemmerOverrideFilter$Builder_add(t_StemmerOverrideFilter$Builder *self, PyObject *args);
          static PyObject *t_StemmerOverrideFilter$Builder_build(t_StemmerOverrideFilter$Builder *self);

          static PyMethodDef t_StemmerOverrideFilter$Builder__methods_[] = {
            DECLARE_METHOD(t_StemmerOverrideFilter$Builder, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_StemmerOverrideFilter$Builder, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_StemmerOverrideFilter$Builder, add, METH_VARARGS),
            DECLARE_METHOD(t_StemmerOverrideFilter$Builder, build, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(StemmerOverrideFilter$Builder, t_StemmerOverrideFilter$Builder, ::java::lang::Object, StemmerOverrideFilter$Builder, t_StemmerOverrideFilter$Builder_init_, 0, 0, 0, 0, 0);

          void t_StemmerOverrideFilter$Builder::install(PyObject *module)
          {
            installType(&PY_TYPE(StemmerOverrideFilter$Builder), module, "StemmerOverrideFilter$Builder", 0);
          }

          void t_StemmerOverrideFilter$Builder::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(StemmerOverrideFilter$Builder).tp_dict, "class_", make_descriptor(StemmerOverrideFilter$Builder::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(StemmerOverrideFilter$Builder).tp_dict, "wrapfn_", make_descriptor(t_StemmerOverrideFilter$Builder::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(StemmerOverrideFilter$Builder).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_StemmerOverrideFilter$Builder_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, StemmerOverrideFilter$Builder::initializeClass, 1)))
              return NULL;
            return t_StemmerOverrideFilter$Builder::wrap_Object(StemmerOverrideFilter$Builder(((t_StemmerOverrideFilter$Builder *) arg)->object.this$));
          }
          static PyObject *t_StemmerOverrideFilter$Builder_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, StemmerOverrideFilter$Builder::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_StemmerOverrideFilter$Builder_init_(t_StemmerOverrideFilter$Builder *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 0:
              {
                StemmerOverrideFilter$Builder object((jobject) NULL);

                INT_CALL(object = StemmerOverrideFilter$Builder());
                self->object = object;
                break;
              }
              goto err;
             case 1:
              {
                jboolean a0;
                StemmerOverrideFilter$Builder object((jobject) NULL);

                if (!parseArgs(args, "Z", &a0))
                {
                  INT_CALL(object = StemmerOverrideFilter$Builder(a0));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_StemmerOverrideFilter$Builder_add(t_StemmerOverrideFilter$Builder *self, PyObject *args)
          {
            ::java::lang::CharSequence a0((jobject) NULL);
            ::java::lang::CharSequence a1((jobject) NULL);
            jboolean result;

            if (!parseArgs(args, "OO", &::java::lang::PY_TYPE(CharSequence), &::java::lang::PY_TYPE(CharSequence), &a0, &a1))
            {
              OBJ_CALL(result = self->object.add(a0, a1));
              Py_RETURN_BOOL(result);
            }

            PyErr_SetArgsError((PyObject *) self, "add", args);
            return NULL;
          }

          static PyObject *t_StemmerOverrideFilter$Builder_build(t_StemmerOverrideFilter$Builder *self)
          {
            ::org::apache::lucene::analysis::miscellaneous::StemmerOverrideFilter$StemmerOverrideMap result((jobject) NULL);
            OBJ_CALL(result = self->object.build());
            return ::org::apache::lucene::analysis::miscellaneous::t_StemmerOverrideFilter$StemmerOverrideMap::wrap_Object(result);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/lv/LatvianStemmer.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace lv {

          ::java::lang::Class *LatvianStemmer::class$ = NULL;
          jmethodID *LatvianStemmer::mids$ = NULL;
          bool LatvianStemmer::live$ = false;

          jclass LatvianStemmer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/lv/LatvianStemmer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_stem_ec6430eb] = env->getMethodID(cls, "stem", "([CI)I");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          LatvianStemmer::LatvianStemmer() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          jint LatvianStemmer::stem(const JArray< jchar > & a0, jint a1) const
          {
            return env->callIntMethod(this$, mids$[mid_stem_ec6430eb], a0.this$, a1);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace lv {
          static PyObject *t_LatvianStemmer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_LatvianStemmer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_LatvianStemmer_init_(t_LatvianStemmer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_LatvianStemmer_stem(t_LatvianStemmer *self, PyObject *args);

          static PyMethodDef t_LatvianStemmer__methods_[] = {
            DECLARE_METHOD(t_LatvianStemmer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_LatvianStemmer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_LatvianStemmer, stem, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(LatvianStemmer, t_LatvianStemmer, ::java::lang::Object, LatvianStemmer, t_LatvianStemmer_init_, 0, 0, 0, 0, 0);

          void t_LatvianStemmer::install(PyObject *module)
          {
            installType(&PY_TYPE(LatvianStemmer), module, "LatvianStemmer", 0);
          }

          void t_LatvianStemmer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(LatvianStemmer).tp_dict, "class_", make_descriptor(LatvianStemmer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(LatvianStemmer).tp_dict, "wrapfn_", make_descriptor(t_LatvianStemmer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(LatvianStemmer).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_LatvianStemmer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, LatvianStemmer::initializeClass, 1)))
              return NULL;
            return t_LatvianStemmer::wrap_Object(LatvianStemmer(((t_LatvianStemmer *) arg)->object.this$));
          }
          static PyObject *t_LatvianStemmer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, LatvianStemmer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_LatvianStemmer_init_(t_LatvianStemmer *self, PyObject *args, PyObject *kwds)
          {
            LatvianStemmer object((jobject) NULL);

            INT_CALL(object = LatvianStemmer());
            self->object = object;

            return 0;
          }

          static PyObject *t_LatvianStemmer_stem(t_LatvianStemmer *self, PyObject *args)
          {
            JArray< jchar > a0((jobject) NULL);
            jint a1;
            jint result;

            if (!parseArgs(args, "[CI", &a0, &a1))
            {
              OBJ_CALL(result = self->object.stem(a0, a1));
              return PyInt_FromLong((long) result);
            }

            PyErr_SetArgsError((PyObject *) self, "stem", args);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/miscellaneous/PerFieldAnalyzerWrapper.h"
#include "org/apache/lucene/analysis/Analyzer.h"
#include "java/lang/String.h"
#include "java/util/Map.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {

          ::java::lang::Class *PerFieldAnalyzerWrapper::class$ = NULL;
          jmethodID *PerFieldAnalyzerWrapper::mids$ = NULL;
          bool PerFieldAnalyzerWrapper::live$ = false;

          jclass PerFieldAnalyzerWrapper::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/miscellaneous/PerFieldAnalyzerWrapper");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_31619410] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/Analyzer;)V");
              mids$[mid_init$_b5f2d646] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/Analyzer;Ljava/util/Map;)V");
              mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");
              mids$[mid_getWrappedAnalyzer_29a2299f] = env->getMethodID(cls, "getWrappedAnalyzer", "(Ljava/lang/String;)Lorg/apache/lucene/analysis/Analyzer;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          PerFieldAnalyzerWrapper::PerFieldAnalyzerWrapper(const ::org::apache::lucene::analysis::Analyzer & a0) : ::org::apache::lucene::analysis::AnalyzerWrapper(env->newObject(initializeClass, &mids$, mid_init$_31619410, a0.this$)) {}

          PerFieldAnalyzerWrapper::PerFieldAnalyzerWrapper(const ::org::apache::lucene::analysis::Analyzer & a0, const ::java::util::Map & a1) : ::org::apache::lucene::analysis::AnalyzerWrapper(env->newObject(initializeClass, &mids$, mid_init$_b5f2d646, a0.this$, a1.this$)) {}

          ::java::lang::String PerFieldAnalyzerWrapper::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {
          static PyObject *t_PerFieldAnalyzerWrapper_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PerFieldAnalyzerWrapper_instance_(PyTypeObject *type, PyObject *arg);
          static int t_PerFieldAnalyzerWrapper_init_(t_PerFieldAnalyzerWrapper *self, PyObject *args, PyObject *kwds);
          static PyObject *t_PerFieldAnalyzerWrapper_toString(t_PerFieldAnalyzerWrapper *self, PyObject *args);

          static PyMethodDef t_PerFieldAnalyzerWrapper__methods_[] = {
            DECLARE_METHOD(t_PerFieldAnalyzerWrapper, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PerFieldAnalyzerWrapper, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PerFieldAnalyzerWrapper, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(PerFieldAnalyzerWrapper, t_PerFieldAnalyzerWrapper, ::org::apache::lucene::analysis::AnalyzerWrapper, PerFieldAnalyzerWrapper, t_PerFieldAnalyzerWrapper_init_, 0, 0, 0, 0, 0);

          void t_PerFieldAnalyzerWrapper::install(PyObject *module)
          {
            installType(&PY_TYPE(PerFieldAnalyzerWrapper), module, "PerFieldAnalyzerWrapper", 0);
          }

          void t_PerFieldAnalyzerWrapper::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(PerFieldAnalyzerWrapper).tp_dict, "class_", make_descriptor(PerFieldAnalyzerWrapper::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(PerFieldAnalyzerWrapper).tp_dict, "wrapfn_", make_descriptor(t_PerFieldAnalyzerWrapper::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(PerFieldAnalyzerWrapper).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_PerFieldAnalyzerWrapper_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, PerFieldAnalyzerWrapper::initializeClass, 1)))
              return NULL;
            return t_PerFieldAnalyzerWrapper::wrap_Object(PerFieldAnalyzerWrapper(((t_PerFieldAnalyzerWrapper *) arg)->object.this$));
          }
          static PyObject *t_PerFieldAnalyzerWrapper_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, PerFieldAnalyzerWrapper::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_PerFieldAnalyzerWrapper_init_(t_PerFieldAnalyzerWrapper *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::org::apache::lucene::analysis::Analyzer a0((jobject) NULL);
                PerFieldAnalyzerWrapper object((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::analysis::Analyzer::initializeClass, &a0))
                {
                  INT_CALL(object = PerFieldAnalyzerWrapper(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 2:
              {
                ::org::apache::lucene::analysis::Analyzer a0((jobject) NULL);
                ::java::util::Map a1((jobject) NULL);
                PyTypeObject **p1;
                PerFieldAnalyzerWrapper object((jobject) NULL);

                if (!parseArgs(args, "kK", ::org::apache::lucene::analysis::Analyzer::initializeClass, ::java::util::Map::initializeClass, &a0, &a1, &p1, ::java::util::t_Map::parameters_))
                {
                  INT_CALL(object = PerFieldAnalyzerWrapper(a0, a1));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_PerFieldAnalyzerWrapper_toString(t_PerFieldAnalyzerWrapper *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(&PY_TYPE(PerFieldAnalyzerWrapper), (PyObject *) self, "toString", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/util/WordlistLoader.h"
#include "org/apache/lucene/analysis/util/CharArraySet.h"
#include "java/lang/Class.h"
#include "java/io/InputStream.h"
#include "java/io/Reader.h"
#include "java/lang/String.h"
#include "org/apache/lucene/analysis/util/CharArrayMap.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/util/Version.h"
#include "java/util/List.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace util {

          ::java::lang::Class *WordlistLoader::class$ = NULL;
          jmethodID *WordlistLoader::mids$ = NULL;
          bool WordlistLoader::live$ = false;

          jclass WordlistLoader::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/util/WordlistLoader");

              mids$ = new jmethodID[max_mid];
              mids$[mid_getSnowballWordSet_f4ba7807] = env->getStaticMethodID(cls, "getSnowballWordSet", "(Ljava/io/Reader;Lorg/apache/lucene/analysis/util/CharArraySet;)Lorg/apache/lucene/analysis/util/CharArraySet;");
              mids$[mid_getSnowballWordSet_b3c09259] = env->getStaticMethodID(cls, "getSnowballWordSet", "(Ljava/io/Reader;Lorg/apache/lucene/util/Version;)Lorg/apache/lucene/analysis/util/CharArraySet;");
              mids$[mid_getStemDict_a82ef4ef] = env->getStaticMethodID(cls, "getStemDict", "(Ljava/io/Reader;Lorg/apache/lucene/analysis/util/CharArrayMap;)Lorg/apache/lucene/analysis/util/CharArrayMap;");
              mids$[mid_getWordSet_b3c09259] = env->getStaticMethodID(cls, "getWordSet", "(Ljava/io/Reader;Lorg/apache/lucene/util/Version;)Lorg/apache/lucene/analysis/util/CharArraySet;");
              mids$[mid_getWordSet_f4ba7807] = env->getStaticMethodID(cls, "getWordSet", "(Ljava/io/Reader;Lorg/apache/lucene/analysis/util/CharArraySet;)Lorg/apache/lucene/analysis/util/CharArraySet;");
              mids$[mid_getWordSet_47002787] = env->getStaticMethodID(cls, "getWordSet", "(Ljava/io/Reader;Ljava/lang/String;Lorg/apache/lucene/util/Version;)Lorg/apache/lucene/analysis/util/CharArraySet;");
              mids$[mid_getWordSet_24df331d] = env->getStaticMethodID(cls, "getWordSet", "(Ljava/io/Reader;Ljava/lang/String;Lorg/apache/lucene/analysis/util/CharArraySet;)Lorg/apache/lucene/analysis/util/CharArraySet;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ::org::apache::lucene::analysis::util::CharArraySet WordlistLoader::getSnowballWordSet(const ::java::io::Reader & a0, const ::org::apache::lucene::analysis::util::CharArraySet & a1)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::analysis::util::CharArraySet(env->callStaticObjectMethod(cls, mids$[mid_getSnowballWordSet_f4ba7807], a0.this$, a1.this$));
          }

          ::org::apache::lucene::analysis::util::CharArraySet WordlistLoader::getSnowballWordSet(const ::java::io::Reader & a0, const ::org::apache::lucene::util::Version & a1)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::analysis::util::CharArraySet(env->callStaticObjectMethod(cls, mids$[mid_getSnowballWordSet_b3c09259], a0.this$, a1.this$));
          }

          ::org::apache::lucene::analysis::util::CharArrayMap WordlistLoader::getStemDict(const ::java::io::Reader & a0, const ::org::apache::lucene::analysis::util::CharArrayMap & a1)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::analysis::util::CharArrayMap(env->callStaticObjectMethod(cls, mids$[mid_getStemDict_a82ef4ef], a0.this$, a1.this$));
          }

          ::org::apache::lucene::analysis::util::CharArraySet WordlistLoader::getWordSet(const ::java::io::Reader & a0, const ::org::apache::lucene::util::Version & a1)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::analysis::util::CharArraySet(env->callStaticObjectMethod(cls, mids$[mid_getWordSet_b3c09259], a0.this$, a1.this$));
          }

          ::org::apache::lucene::analysis::util::CharArraySet WordlistLoader::getWordSet(const ::java::io::Reader & a0, const ::org::apache::lucene::analysis::util::CharArraySet & a1)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::analysis::util::CharArraySet(env->callStaticObjectMethod(cls, mids$[mid_getWordSet_f4ba7807], a0.this$, a1.this$));
          }

          ::org::apache::lucene::analysis::util::CharArraySet WordlistLoader::getWordSet(const ::java::io::Reader & a0, const ::java::lang::String & a1, const ::org::apache::lucene::util::Version & a2)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::analysis::util::CharArraySet(env->callStaticObjectMethod(cls, mids$[mid_getWordSet_47002787], a0.this$, a1.this$, a2.this$));
          }

          ::org::apache::lucene::analysis::util::CharArraySet WordlistLoader::getWordSet(const ::java::io::Reader & a0, const ::java::lang::String & a1, const ::org::apache::lucene::analysis::util::CharArraySet & a2)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::analysis::util::CharArraySet(env->callStaticObjectMethod(cls, mids$[mid_getWordSet_24df331d], a0.this$, a1.this$, a2.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace util {
          static PyObject *t_WordlistLoader_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_WordlistLoader_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_WordlistLoader_getSnowballWordSet(PyTypeObject *type, PyObject *args);
          static PyObject *t_WordlistLoader_getStemDict(PyTypeObject *type, PyObject *args);
          static PyObject *t_WordlistLoader_getWordSet(PyTypeObject *type, PyObject *args);

          static PyMethodDef t_WordlistLoader__methods_[] = {
            DECLARE_METHOD(t_WordlistLoader, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_WordlistLoader, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_WordlistLoader, getSnowballWordSet, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_WordlistLoader, getStemDict, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_WordlistLoader, getWordSet, METH_VARARGS | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(WordlistLoader, t_WordlistLoader, ::java::lang::Object, WordlistLoader, abstract_init, 0, 0, 0, 0, 0);

          void t_WordlistLoader::install(PyObject *module)
          {
            installType(&PY_TYPE(WordlistLoader), module, "WordlistLoader", 0);
          }

          void t_WordlistLoader::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(WordlistLoader).tp_dict, "class_", make_descriptor(WordlistLoader::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(WordlistLoader).tp_dict, "wrapfn_", make_descriptor(t_WordlistLoader::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(WordlistLoader).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_WordlistLoader_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, WordlistLoader::initializeClass, 1)))
              return NULL;
            return t_WordlistLoader::wrap_Object(WordlistLoader(((t_WordlistLoader *) arg)->object.this$));
          }
          static PyObject *t_WordlistLoader_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, WordlistLoader::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_WordlistLoader_getSnowballWordSet(PyTypeObject *type, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 2:
              {
                ::java::io::Reader a0((jobject) NULL);
                ::org::apache::lucene::analysis::util::CharArraySet a1((jobject) NULL);
                PyTypeObject **p1;
                ::org::apache::lucene::analysis::util::CharArraySet result((jobject) NULL);

                if (!parseArgs(args, "kK", ::java::io::Reader::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, &a0, &a1, &p1, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_))
                {
                  OBJ_CALL(result = ::org::apache::lucene::analysis::util::WordlistLoader::getSnowballWordSet(a0, a1));
                  return ::org::apache::lucene::analysis::util::t_CharArraySet::wrap_Object(result);
                }
              }
              {
                ::java::io::Reader a0((jobject) NULL);
                ::org::apache::lucene::util::Version a1((jobject) NULL);
                PyTypeObject **p1;
                ::org::apache::lucene::analysis::util::CharArraySet result((jobject) NULL);

                if (!parseArgs(args, "kK", ::java::io::Reader::initializeClass, ::org::apache::lucene::util::Version::initializeClass, &a0, &a1, &p1, ::org::apache::lucene::util::t_Version::parameters_))
                {
                  OBJ_CALL(result = ::org::apache::lucene::analysis::util::WordlistLoader::getSnowballWordSet(a0, a1));
                  return ::org::apache::lucene::analysis::util::t_CharArraySet::wrap_Object(result);
                }
              }
            }

            PyErr_SetArgsError(type, "getSnowballWordSet", args);
            return NULL;
          }

          static PyObject *t_WordlistLoader_getStemDict(PyTypeObject *type, PyObject *args)
          {
            ::java::io::Reader a0((jobject) NULL);
            ::org::apache::lucene::analysis::util::CharArrayMap a1((jobject) NULL);
            PyTypeObject **p1;
            ::org::apache::lucene::analysis::util::CharArrayMap result((jobject) NULL);

            if (!parseArgs(args, "kK", ::java::io::Reader::initializeClass, ::org::apache::lucene::analysis::util::CharArrayMap::initializeClass, &a0, &a1, &p1, ::org::apache::lucene::analysis::util::t_CharArrayMap::parameters_))
            {
              OBJ_CALL(result = ::org::apache::lucene::analysis::util::WordlistLoader::getStemDict(a0, a1));
              return ::org::apache::lucene::analysis::util::t_CharArrayMap::wrap_Object(result, &::java::lang::PY_TYPE(String));
            }

            PyErr_SetArgsError(type, "getStemDict", args);
            return NULL;
          }

          static PyObject *t_WordlistLoader_getWordSet(PyTypeObject *type, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 2:
              {
                ::java::io::Reader a0((jobject) NULL);
                ::org::apache::lucene::util::Version a1((jobject) NULL);
                PyTypeObject **p1;
                ::org::apache::lucene::analysis::util::CharArraySet result((jobject) NULL);

                if (!parseArgs(args, "kK", ::java::io::Reader::initializeClass, ::org::apache::lucene::util::Version::initializeClass, &a0, &a1, &p1, ::org::apache::lucene::util::t_Version::parameters_))
                {
                  OBJ_CALL(result = ::org::apache::lucene::analysis::util::WordlistLoader::getWordSet(a0, a1));
                  return ::org::apache::lucene::analysis::util::t_CharArraySet::wrap_Object(result);
                }
              }
              {
                ::java::io::Reader a0((jobject) NULL);
                ::org::apache::lucene::analysis::util::CharArraySet a1((jobject) NULL);
                PyTypeObject **p1;
                ::org::apache::lucene::analysis::util::CharArraySet result((jobject) NULL);

                if (!parseArgs(args, "kK", ::java::io::Reader::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, &a0, &a1, &p1, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_))
                {
                  OBJ_CALL(result = ::org::apache::lucene::analysis::util::WordlistLoader::getWordSet(a0, a1));
                  return ::org::apache::lucene::analysis::util::t_CharArraySet::wrap_Object(result);
                }
              }
              break;
             case 3:
              {
                ::java::io::Reader a0((jobject) NULL);
                ::java::lang::String a1((jobject) NULL);
                ::org::apache::lucene::util::Version a2((jobject) NULL);
                PyTypeObject **p2;
                ::org::apache::lucene::analysis::util::CharArraySet result((jobject) NULL);

                if (!parseArgs(args, "ksK", ::java::io::Reader::initializeClass, ::org::apache::lucene::util::Version::initializeClass, &a0, &a1, &a2, &p2, ::org::apache::lucene::util::t_Version::parameters_))
                {
                  OBJ_CALL(result = ::org::apache::lucene::analysis::util::WordlistLoader::getWordSet(a0, a1, a2));
                  return ::org::apache::lucene::analysis::util::t_CharArraySet::wrap_Object(result);
                }
              }
              {
                ::java::io::Reader a0((jobject) NULL);
                ::java::lang::String a1((jobject) NULL);
                ::org::apache::lucene::analysis::util::CharArraySet a2((jobject) NULL);
                PyTypeObject **p2;
                ::org::apache::lucene::analysis::util::CharArraySet result((jobject) NULL);

                if (!parseArgs(args, "ksK", ::java::io::Reader::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, &a0, &a1, &a2, &p2, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_))
                {
                  OBJ_CALL(result = ::org::apache::lucene::analysis::util::WordlistLoader::getWordSet(a0, a1, a2));
                  return ::org::apache::lucene::analysis::util::t_CharArraySet::wrap_Object(result);
                }
              }
            }

            PyErr_SetArgsError(type, "getWordSet", args);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/bg/BulgarianStemmer.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace bg {

          ::java::lang::Class *BulgarianStemmer::class$ = NULL;
          jmethodID *BulgarianStemmer::mids$ = NULL;
          bool BulgarianStemmer::live$ = false;

          jclass BulgarianStemmer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/bg/BulgarianStemmer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_stem_ec6430eb] = env->getMethodID(cls, "stem", "([CI)I");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          BulgarianStemmer::BulgarianStemmer() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          jint BulgarianStemmer::stem(const JArray< jchar > & a0, jint a1) const
          {
            return env->callIntMethod(this$, mids$[mid_stem_ec6430eb], a0.this$, a1);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace bg {
          static PyObject *t_BulgarianStemmer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_BulgarianStemmer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_BulgarianStemmer_init_(t_BulgarianStemmer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_BulgarianStemmer_stem(t_BulgarianStemmer *self, PyObject *args);

          static PyMethodDef t_BulgarianStemmer__methods_[] = {
            DECLARE_METHOD(t_BulgarianStemmer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_BulgarianStemmer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_BulgarianStemmer, stem, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(BulgarianStemmer, t_BulgarianStemmer, ::java::lang::Object, BulgarianStemmer, t_BulgarianStemmer_init_, 0, 0, 0, 0, 0);

          void t_BulgarianStemmer::install(PyObject *module)
          {
            installType(&PY_TYPE(BulgarianStemmer), module, "BulgarianStemmer", 0);
          }

          void t_BulgarianStemmer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(BulgarianStemmer).tp_dict, "class_", make_descriptor(BulgarianStemmer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(BulgarianStemmer).tp_dict, "wrapfn_", make_descriptor(t_BulgarianStemmer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(BulgarianStemmer).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_BulgarianStemmer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, BulgarianStemmer::initializeClass, 1)))
              return NULL;
            return t_BulgarianStemmer::wrap_Object(BulgarianStemmer(((t_BulgarianStemmer *) arg)->object.this$));
          }
          static PyObject *t_BulgarianStemmer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, BulgarianStemmer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_BulgarianStemmer_init_(t_BulgarianStemmer *self, PyObject *args, PyObject *kwds)
          {
            BulgarianStemmer object((jobject) NULL);

            INT_CALL(object = BulgarianStemmer());
            self->object = object;

            return 0;
          }

          static PyObject *t_BulgarianStemmer_stem(t_BulgarianStemmer *self, PyObject *args)
          {
            JArray< jchar > a0((jobject) NULL);
            jint a1;
            jint result;

            if (!parseArgs(args, "[CI", &a0, &a1))
            {
              OBJ_CALL(result = self->object.stem(a0, a1));
              return PyInt_FromLong((long) result);
            }

            PyErr_SetArgsError((PyObject *) self, "stem", args);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/packed/BlockPackedReaderIterator.h"
#include "org/apache/lucene/util/LongsRef.h"
#include "org/apache/lucene/store/DataInput.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace packed {

          ::java::lang::Class *BlockPackedReaderIterator::class$ = NULL;
          jmethodID *BlockPackedReaderIterator::mids$ = NULL;
          bool BlockPackedReaderIterator::live$ = false;

          jclass BlockPackedReaderIterator::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/util/packed/BlockPackedReaderIterator");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_71304522] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/store/DataInput;IIJ)V");
              mids$[mid_next_54c6a17a] = env->getMethodID(cls, "next", "()J");
              mids$[mid_next_a3d07a9b] = env->getMethodID(cls, "next", "(I)Lorg/apache/lucene/util/LongsRef;");
              mids$[mid_ord_54c6a17a] = env->getMethodID(cls, "ord", "()J");
              mids$[mid_reset_394617c2] = env->getMethodID(cls, "reset", "(Lorg/apache/lucene/store/DataInput;J)V");
              mids$[mid_skip_0ee6df2f] = env->getMethodID(cls, "skip", "(J)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          BlockPackedReaderIterator::BlockPackedReaderIterator(const ::org::apache::lucene::store::DataInput & a0, jint a1, jint a2, jlong a3) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_71304522, a0.this$, a1, a2, a3)) {}

          jlong BlockPackedReaderIterator::next() const
          {
            return env->callLongMethod(this$, mids$[mid_next_54c6a17a]);
          }

          ::org::apache::lucene::util::LongsRef BlockPackedReaderIterator::next(jint a0) const
          {
            return ::org::apache::lucene::util::LongsRef(env->callObjectMethod(this$, mids$[mid_next_a3d07a9b], a0));
          }

          jlong BlockPackedReaderIterator::ord() const
          {
            return env->callLongMethod(this$, mids$[mid_ord_54c6a17a]);
          }

          void BlockPackedReaderIterator::reset(const ::org::apache::lucene::store::DataInput & a0, jlong a1) const
          {
            env->callVoidMethod(this$, mids$[mid_reset_394617c2], a0.this$, a1);
          }

          void BlockPackedReaderIterator::skip(jlong a0) const
          {
            env->callVoidMethod(this$, mids$[mid_skip_0ee6df2f], a0);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace packed {
          static PyObject *t_BlockPackedReaderIterator_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_BlockPackedReaderIterator_instance_(PyTypeObject *type, PyObject *arg);
          static int t_BlockPackedReaderIterator_init_(t_BlockPackedReaderIterator *self, PyObject *args, PyObject *kwds);
          static PyObject *t_BlockPackedReaderIterator_next(t_BlockPackedReaderIterator *self, PyObject *args);
          static PyObject *t_BlockPackedReaderIterator_ord(t_BlockPackedReaderIterator *self);
          static PyObject *t_BlockPackedReaderIterator_reset(t_BlockPackedReaderIterator *self, PyObject *args);
          static PyObject *t_BlockPackedReaderIterator_skip(t_BlockPackedReaderIterator *self, PyObject *arg);

          static PyMethodDef t_BlockPackedReaderIterator__methods_[] = {
            DECLARE_METHOD(t_BlockPackedReaderIterator, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_BlockPackedReaderIterator, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_BlockPackedReaderIterator, next, METH_VARARGS),
            DECLARE_METHOD(t_BlockPackedReaderIterator, ord, METH_NOARGS),
            DECLARE_METHOD(t_BlockPackedReaderIterator, reset, METH_VARARGS),
            DECLARE_METHOD(t_BlockPackedReaderIterator, skip, METH_O),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(BlockPackedReaderIterator, t_BlockPackedReaderIterator, ::java::lang::Object, BlockPackedReaderIterator, t_BlockPackedReaderIterator_init_, 0, 0, 0, 0, 0);

          void t_BlockPackedReaderIterator::install(PyObject *module)
          {
            installType(&PY_TYPE(BlockPackedReaderIterator), module, "BlockPackedReaderIterator", 0);
          }

          void t_BlockPackedReaderIterator::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(BlockPackedReaderIterator).tp_dict, "class_", make_descriptor(BlockPackedReaderIterator::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(BlockPackedReaderIterator).tp_dict, "wrapfn_", make_descriptor(t_BlockPackedReaderIterator::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(BlockPackedReaderIterator).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_BlockPackedReaderIterator_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, BlockPackedReaderIterator::initializeClass, 1)))
              return NULL;
            return t_BlockPackedReaderIterator::wrap_Object(BlockPackedReaderIterator(((t_BlockPackedReaderIterator *) arg)->object.this$));
          }
          static PyObject *t_BlockPackedReaderIterator_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, BlockPackedReaderIterator::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_BlockPackedReaderIterator_init_(t_BlockPackedReaderIterator *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::store::DataInput a0((jobject) NULL);
            jint a1;
            jint a2;
            jlong a3;
            BlockPackedReaderIterator object((jobject) NULL);

            if (!parseArgs(args, "kIIJ", ::org::apache::lucene::store::DataInput::initializeClass, &a0, &a1, &a2, &a3))
            {
              INT_CALL(object = BlockPackedReaderIterator(a0, a1, a2, a3));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_BlockPackedReaderIterator_next(t_BlockPackedReaderIterator *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 0:
              {
                jlong result;
                OBJ_CALL(result = self->object.next());
                return PyLong_FromLongLong((PY_LONG_LONG) result);
              }
              break;
             case 1:
              {
                jint a0;
                ::org::apache::lucene::util::LongsRef result((jobject) NULL);

                if (!parseArgs(args, "I", &a0))
                {
                  OBJ_CALL(result = self->object.next(a0));
                  return ::org::apache::lucene::util::t_LongsRef::wrap_Object(result);
                }
              }
            }

            PyErr_SetArgsError((PyObject *) self, "next", args);
            return NULL;
          }

          static PyObject *t_BlockPackedReaderIterator_ord(t_BlockPackedReaderIterator *self)
          {
            jlong result;
            OBJ_CALL(result = self->object.ord());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          static PyObject *t_BlockPackedReaderIterator_reset(t_BlockPackedReaderIterator *self, PyObject *args)
          {
            ::org::apache::lucene::store::DataInput a0((jobject) NULL);
            jlong a1;

            if (!parseArgs(args, "kJ", ::org::apache::lucene::store::DataInput::initializeClass, &a0, &a1))
            {
              OBJ_CALL(self->object.reset(a0, a1));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "reset", args);
            return NULL;
          }

          static PyObject *t_BlockPackedReaderIterator_skip(t_BlockPackedReaderIterator *self, PyObject *arg)
          {
            jlong a0;

            if (!parseArg(arg, "J", &a0))
            {
              OBJ_CALL(self->object.skip(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "skip", arg);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/pylucene/queryparser/classic/PythonQueryParser.h"
#include "org/apache/lucene/queryparser/classic/ParseException.h"
#include "java/lang/Class.h"
#include "java/util/List.h"
#include "org/apache/lucene/analysis/Analyzer.h"
#include "java/lang/String.h"
#include "org/apache/lucene/queryparser/classic/CharStream.h"
#include "org/apache/lucene/util/Version.h"
#include "java/lang/Throwable.h"
#include "org/apache/lucene/search/Query.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace pylucene {
      namespace queryparser {
        namespace classic {

          ::java::lang::Class *PythonQueryParser::class$ = NULL;
          jmethodID *PythonQueryParser::mids$ = NULL;
          bool PythonQueryParser::live$ = false;

          jclass PythonQueryParser::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/pylucene/queryparser/classic/PythonQueryParser");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_24bde9d3] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/queryparser/classic/CharStream;)V");
              mids$[mid_init$_504c192d] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Ljava/lang/String;Lorg/apache/lucene/analysis/Analyzer;)V");
              mids$[mid_finalize_54c6a166] = env->getMethodID(cls, "finalize", "()V");
              mids$[mid_getBooleanQuery_3d190f1c] = env->getMethodID(cls, "getBooleanQuery", "(Ljava/util/List;Z)Lorg/apache/lucene/search/Query;");
              mids$[mid_getFieldQuery_bd696f55] = env->getMethodID(cls, "getFieldQuery", "(Ljava/lang/String;Ljava/lang/String;Z)Lorg/apache/lucene/search/Query;");
              mids$[mid_getFieldQuery_c7c8d9a8] = env->getMethodID(cls, "getFieldQuery", "(Ljava/lang/String;Ljava/lang/String;I)Lorg/apache/lucene/search/Query;");
              mids$[mid_getFieldQuery_quoted_bd696f55] = env->getMethodID(cls, "getFieldQuery_quoted", "(Ljava/lang/String;Ljava/lang/String;Z)Lorg/apache/lucene/search/Query;");
              mids$[mid_getFieldQuery_quoted_super_bd696f55] = env->getMethodID(cls, "getFieldQuery_quoted_super", "(Ljava/lang/String;Ljava/lang/String;Z)Lorg/apache/lucene/search/Query;");
              mids$[mid_getFieldQuery_slop_c7c8d9a8] = env->getMethodID(cls, "getFieldQuery_slop", "(Ljava/lang/String;Ljava/lang/String;I)Lorg/apache/lucene/search/Query;");
              mids$[mid_getFieldQuery_slop_super_c7c8d9a8] = env->getMethodID(cls, "getFieldQuery_slop_super", "(Ljava/lang/String;Ljava/lang/String;I)Lorg/apache/lucene/search/Query;");
              mids$[mid_getFuzzyQuery_45995161] = env->getMethodID(cls, "getFuzzyQuery", "(Ljava/lang/String;Ljava/lang/String;F)Lorg/apache/lucene/search/Query;");
              mids$[mid_getPrefixQuery_38d6e77e] = env->getMethodID(cls, "getPrefixQuery", "(Ljava/lang/String;Ljava/lang/String;)Lorg/apache/lucene/search/Query;");
              mids$[mid_getRangeQuery_75fd45b6] = env->getMethodID(cls, "getRangeQuery", "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;ZZ)Lorg/apache/lucene/search/Query;");
              mids$[mid_getWildcardQuery_38d6e77e] = env->getMethodID(cls, "getWildcardQuery", "(Ljava/lang/String;Ljava/lang/String;)Lorg/apache/lucene/search/Query;");
              mids$[mid_pythonDecRef_54c6a166] = env->getMethodID(cls, "pythonDecRef", "()V");
              mids$[mid_pythonExtension_54c6a17a] = env->getMethodID(cls, "pythonExtension", "()J");
              mids$[mid_pythonExtension_0ee6df2f] = env->getMethodID(cls, "pythonExtension", "(J)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          PythonQueryParser::PythonQueryParser(const ::org::apache::lucene::queryparser::classic::CharStream & a0) : ::org::apache::lucene::queryparser::classic::QueryParser(env->newObject(initializeClass, &mids$, mid_init$_24bde9d3, a0.this$)) {}

          PythonQueryParser::PythonQueryParser(const ::org::apache::lucene::util::Version & a0, const ::java::lang::String & a1, const ::org::apache::lucene::analysis::Analyzer & a2) : ::org::apache::lucene::queryparser::classic::QueryParser(env->newObject(initializeClass, &mids$, mid_init$_504c192d, a0.this$, a1.this$, a2.this$)) {}

          void PythonQueryParser::finalize() const
          {
            env->callVoidMethod(this$, mids$[mid_finalize_54c6a166]);
          }

          ::org::apache::lucene::search::Query PythonQueryParser::getBooleanQuery(const ::java::util::List & a0, jboolean a1) const
          {
            return ::org::apache::lucene::search::Query(env->callNonvirtualObjectMethod(this$, (jclass) ::org::apache::lucene::queryparser::classic::QueryParser::class$->this$, ::org::apache::lucene::queryparser::classic::QueryParserBase::mids$[::org::apache::lucene::queryparser::classic::QueryParserBase::mid_getBooleanQuery_3d190f1c], a0.this$, a1));
          }

          ::org::apache::lucene::search::Query PythonQueryParser::getFieldQuery(const ::java::lang::String & a0, const ::java::lang::String & a1, jboolean a2) const
          {
            return ::org::apache::lucene::search::Query(env->callObjectMethod(this$, mids$[mid_getFieldQuery_bd696f55], a0.this$, a1.this$, a2));
          }

          ::org::apache::lucene::search::Query PythonQueryParser::getFieldQuery(const ::java::lang::String & a0, const ::java::lang::String & a1, jint a2) const
          {
            return ::org::apache::lucene::search::Query(env->callObjectMethod(this$, mids$[mid_getFieldQuery_c7c8d9a8], a0.this$, a1.this$, a2));
          }

          ::org::apache::lucene::search::Query PythonQueryParser::getFieldQuery_quoted_super(const ::java::lang::String & a0, const ::java::lang::String & a1, jboolean a2) const
          {
            return ::org::apache::lucene::search::Query(env->callObjectMethod(this$, mids$[mid_getFieldQuery_quoted_super_bd696f55], a0.this$, a1.this$, a2));
          }

          ::org::apache::lucene::search::Query PythonQueryParser::getFieldQuery_slop_super(const ::java::lang::String & a0, const ::java::lang::String & a1, jint a2) const
          {
            return ::org::apache::lucene::search::Query(env->callObjectMethod(this$, mids$[mid_getFieldQuery_slop_super_c7c8d9a8], a0.this$, a1.this$, a2));
          }

          ::org::apache::lucene::search::Query PythonQueryParser::getFuzzyQuery(const ::java::lang::String & a0, const ::java::lang::String & a1, jfloat a2) const
          {
            return ::org::apache::lucene::search::Query(env->callNonvirtualObjectMethod(this$, (jclass) ::org::apache::lucene::queryparser::classic::QueryParser::class$->this$, ::org::apache::lucene::queryparser::classic::QueryParserBase::mids$[::org::apache::lucene::queryparser::classic::QueryParserBase::mid_getFuzzyQuery_45995161], a0.this$, a1.this$, a2));
          }

          ::org::apache::lucene::search::Query PythonQueryParser::getPrefixQuery(const ::java::lang::String & a0, const ::java::lang::String & a1) const
          {
            return ::org::apache::lucene::search::Query(env->callNonvirtualObjectMethod(this$, (jclass) ::org::apache::lucene::queryparser::classic::QueryParser::class$->this$, ::org::apache::lucene::queryparser::classic::QueryParserBase::mids$[::org::apache::lucene::queryparser::classic::QueryParserBase::mid_getPrefixQuery_38d6e77e], a0.this$, a1.this$));
          }

          ::org::apache::lucene::search::Query PythonQueryParser::getRangeQuery(const ::java::lang::String & a0, const ::java::lang::String & a1, const ::java::lang::String & a2, jboolean a3, jboolean a4) const
          {
            return ::org::apache::lucene::search::Query(env->callNonvirtualObjectMethod(this$, (jclass) ::org::apache::lucene::queryparser::classic::QueryParser::class$->this$, ::org::apache::lucene::queryparser::classic::QueryParserBase::mids$[::org::apache::lucene::queryparser::classic::QueryParserBase::mid_getRangeQuery_75fd45b6], a0.this$, a1.this$, a2.this$, a3, a4));
          }

          ::org::apache::lucene::search::Query PythonQueryParser::getWildcardQuery(const ::java::lang::String & a0, const ::java::lang::String & a1) const
          {
            return ::org::apache::lucene::search::Query(env->callNonvirtualObjectMethod(this$, (jclass) ::org::apache::lucene::queryparser::classic::QueryParser::class$->this$, ::org::apache::lucene::queryparser::classic::QueryParserBase::mids$[::org::apache::lucene::queryparser::classic::QueryParserBase::mid_getWildcardQuery_38d6e77e], a0.this$, a1.this$));
          }

          jlong PythonQueryParser::pythonExtension() const
          {
            return env->callLongMethod(this$, mids$[mid_pythonExtension_54c6a17a]);
          }

          void PythonQueryParser::pythonExtension(jlong a0) const
          {
            env->callVoidMethod(this$, mids$[mid_pythonExtension_0ee6df2f], a0);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace pylucene {
      namespace queryparser {
        namespace classic {
          static PyObject *t_PythonQueryParser_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PythonQueryParser_instance_(PyTypeObject *type, PyObject *arg);
          static int t_PythonQueryParser_init_(t_PythonQueryParser *self, PyObject *args, PyObject *kwds);
          static PyObject *t_PythonQueryParser_finalize(t_PythonQueryParser *self);
          static PyObject *t_PythonQueryParser_getBooleanQuery(t_PythonQueryParser *self, PyObject *args);
          static PyObject *t_PythonQueryParser_getFieldQuery(t_PythonQueryParser *self, PyObject *args);
          static PyObject *t_PythonQueryParser_getFieldQuery_quoted_super(t_PythonQueryParser *self, PyObject *args);
          static PyObject *t_PythonQueryParser_getFieldQuery_slop_super(t_PythonQueryParser *self, PyObject *args);
          static PyObject *t_PythonQueryParser_getFuzzyQuery(t_PythonQueryParser *self, PyObject *args);
          static PyObject *t_PythonQueryParser_getPrefixQuery(t_PythonQueryParser *self, PyObject *args);
          static PyObject *t_PythonQueryParser_getRangeQuery(t_PythonQueryParser *self, PyObject *args);
          static PyObject *t_PythonQueryParser_getWildcardQuery(t_PythonQueryParser *self, PyObject *args);
          static PyObject *t_PythonQueryParser_pythonExtension(t_PythonQueryParser *self, PyObject *args);
          static jobject JNICALL t_PythonQueryParser_getBooleanQuery0(JNIEnv *jenv, jobject jobj, jobject a0, jboolean a1);
          static jobject JNICALL t_PythonQueryParser_getFieldQuery_quoted1(JNIEnv *jenv, jobject jobj, jobject a0, jobject a1, jboolean a2);
          static jobject JNICALL t_PythonQueryParser_getFieldQuery_slop2(JNIEnv *jenv, jobject jobj, jobject a0, jobject a1, jint a2);
          static jobject JNICALL t_PythonQueryParser_getFuzzyQuery3(JNIEnv *jenv, jobject jobj, jobject a0, jobject a1, jfloat a2);
          static jobject JNICALL t_PythonQueryParser_getPrefixQuery4(JNIEnv *jenv, jobject jobj, jobject a0, jobject a1);
          static jobject JNICALL t_PythonQueryParser_getRangeQuery5(JNIEnv *jenv, jobject jobj, jobject a0, jobject a1, jobject a2, jboolean a3, jboolean a4);
          static jobject JNICALL t_PythonQueryParser_getWildcardQuery6(JNIEnv *jenv, jobject jobj, jobject a0, jobject a1);
          static void JNICALL t_PythonQueryParser_pythonDecRef7(JNIEnv *jenv, jobject jobj);
          static PyObject *t_PythonQueryParser_get__self(t_PythonQueryParser *self, void *data);
          static PyGetSetDef t_PythonQueryParser__fields_[] = {
            DECLARE_GET_FIELD(t_PythonQueryParser, self),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_PythonQueryParser__methods_[] = {
            DECLARE_METHOD(t_PythonQueryParser, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PythonQueryParser, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PythonQueryParser, finalize, METH_NOARGS),
            DECLARE_METHOD(t_PythonQueryParser, getBooleanQuery, METH_VARARGS),
            DECLARE_METHOD(t_PythonQueryParser, getFieldQuery, METH_VARARGS),
            DECLARE_METHOD(t_PythonQueryParser, getFieldQuery_quoted_super, METH_VARARGS),
            DECLARE_METHOD(t_PythonQueryParser, getFieldQuery_slop_super, METH_VARARGS),
            DECLARE_METHOD(t_PythonQueryParser, getFuzzyQuery, METH_VARARGS),
            DECLARE_METHOD(t_PythonQueryParser, getPrefixQuery, METH_VARARGS),
            DECLARE_METHOD(t_PythonQueryParser, getRangeQuery, METH_VARARGS),
            DECLARE_METHOD(t_PythonQueryParser, getWildcardQuery, METH_VARARGS),
            DECLARE_METHOD(t_PythonQueryParser, pythonExtension, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(PythonQueryParser, t_PythonQueryParser, ::org::apache::lucene::queryparser::classic::QueryParser, PythonQueryParser, t_PythonQueryParser_init_, 0, 0, t_PythonQueryParser__fields_, 0, 0);

          void t_PythonQueryParser::install(PyObject *module)
          {
            installType(&PY_TYPE(PythonQueryParser), module, "PythonQueryParser", 1);
          }

          void t_PythonQueryParser::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(PythonQueryParser).tp_dict, "class_", make_descriptor(PythonQueryParser::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(PythonQueryParser).tp_dict, "wrapfn_", make_descriptor(t_PythonQueryParser::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(PythonQueryParser).tp_dict, "boxfn_", make_descriptor(boxObject));
            jclass cls = env->getClass(PythonQueryParser::initializeClass);
            JNINativeMethod methods[] = {
              { "getBooleanQuery", "(Ljava/util/List;Z)Lorg/apache/lucene/search/Query;", (void *) t_PythonQueryParser_getBooleanQuery0 },
              { "getFieldQuery_quoted", "(Ljava/lang/String;Ljava/lang/String;Z)Lorg/apache/lucene/search/Query;", (void *) t_PythonQueryParser_getFieldQuery_quoted1 },
              { "getFieldQuery_slop", "(Ljava/lang/String;Ljava/lang/String;I)Lorg/apache/lucene/search/Query;", (void *) t_PythonQueryParser_getFieldQuery_slop2 },
              { "getFuzzyQuery", "(Ljava/lang/String;Ljava/lang/String;F)Lorg/apache/lucene/search/Query;", (void *) t_PythonQueryParser_getFuzzyQuery3 },
              { "getPrefixQuery", "(Ljava/lang/String;Ljava/lang/String;)Lorg/apache/lucene/search/Query;", (void *) t_PythonQueryParser_getPrefixQuery4 },
              { "getRangeQuery", "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;ZZ)Lorg/apache/lucene/search/Query;", (void *) t_PythonQueryParser_getRangeQuery5 },
              { "getWildcardQuery", "(Ljava/lang/String;Ljava/lang/String;)Lorg/apache/lucene/search/Query;", (void *) t_PythonQueryParser_getWildcardQuery6 },
              { "pythonDecRef", "()V", (void *) t_PythonQueryParser_pythonDecRef7 },
            };
            env->registerNatives(cls, methods, 8);
          }

          static PyObject *t_PythonQueryParser_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, PythonQueryParser::initializeClass, 1)))
              return NULL;
            return t_PythonQueryParser::wrap_Object(PythonQueryParser(((t_PythonQueryParser *) arg)->object.this$));
          }
          static PyObject *t_PythonQueryParser_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, PythonQueryParser::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_PythonQueryParser_init_(t_PythonQueryParser *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::org::apache::lucene::queryparser::classic::CharStream a0((jobject) NULL);
                PythonQueryParser object((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::queryparser::classic::CharStream::initializeClass, &a0))
                {
                  INT_CALL(object = PythonQueryParser(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 3:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                ::java::lang::String a1((jobject) NULL);
                ::org::apache::lucene::analysis::Analyzer a2((jobject) NULL);
                PythonQueryParser object((jobject) NULL);

                if (!parseArgs(args, "Ksk", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::Analyzer::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1, &a2))
                {
                  INT_CALL(object = PythonQueryParser(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            Py_INCREF((PyObject *) self);
            self->object.pythonExtension((jlong) (Py_intptr_t) (void *) self);

            return 0;
          }

          static PyObject *t_PythonQueryParser_finalize(t_PythonQueryParser *self)
          {
            OBJ_CALL(self->object.finalize());
            Py_RETURN_NONE;
          }

          static PyObject *t_PythonQueryParser_getBooleanQuery(t_PythonQueryParser *self, PyObject *args)
          {
            ::java::util::List a0((jobject) NULL);
            PyTypeObject **p0;
            jboolean a1;
            ::org::apache::lucene::search::Query result((jobject) NULL);

            if (!parseArgs(args, "KZ", ::java::util::List::initializeClass, &a0, &p0, ::java::util::t_List::parameters_, &a1))
            {
              OBJ_CALL(result = self->object.getBooleanQuery(a0, a1));
              return ::org::apache::lucene::search::t_Query::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "getBooleanQuery", args);
            return NULL;
          }

          static PyObject *t_PythonQueryParser_getFieldQuery(t_PythonQueryParser *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 3:
              {
                ::java::lang::String a0((jobject) NULL);
                ::java::lang::String a1((jobject) NULL);
                jboolean a2;
                ::org::apache::lucene::search::Query result((jobject) NULL);

                if (!parseArgs(args, "ssZ", &a0, &a1, &a2))
                {
                  OBJ_CALL(result = self->object.getFieldQuery(a0, a1, a2));
                  return ::org::apache::lucene::search::t_Query::wrap_Object(result);
                }
              }
              {
                ::java::lang::String a0((jobject) NULL);
                ::java::lang::String a1((jobject) NULL);
                jint a2;
                ::org::apache::lucene::search::Query result((jobject) NULL);

                if (!parseArgs(args, "ssI", &a0, &a1, &a2))
                {
                  OBJ_CALL(result = self->object.getFieldQuery(a0, a1, a2));
                  return ::org::apache::lucene::search::t_Query::wrap_Object(result);
                }
              }
            }

            PyErr_SetArgsError((PyObject *) self, "getFieldQuery", args);
            return NULL;
          }

          static PyObject *t_PythonQueryParser_getFieldQuery_quoted_super(t_PythonQueryParser *self, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            ::java::lang::String a1((jobject) NULL);
            jboolean a2;
            ::org::apache::lucene::search::Query result((jobject) NULL);

            if (!parseArgs(args, "ssZ", &a0, &a1, &a2))
            {
              OBJ_CALL(result = self->object.getFieldQuery_quoted_super(a0, a1, a2));
              return ::org::apache::lucene::search::t_Query::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "getFieldQuery_quoted_super", args);
            return NULL;
          }

          static PyObject *t_PythonQueryParser_getFieldQuery_slop_super(t_PythonQueryParser *self, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            ::java::lang::String a1((jobject) NULL);
            jint a2;
            ::org::apache::lucene::search::Query result((jobject) NULL);

            if (!parseArgs(args, "ssI", &a0, &a1, &a2))
            {
              OBJ_CALL(result = self->object.getFieldQuery_slop_super(a0, a1, a2));
              return ::org::apache::lucene::search::t_Query::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "getFieldQuery_slop_super", args);
            return NULL;
          }

          static PyObject *t_PythonQueryParser_getFuzzyQuery(t_PythonQueryParser *self, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            ::java::lang::String a1((jobject) NULL);
            jfloat a2;
            ::org::apache::lucene::search::Query result((jobject) NULL);

            if (!parseArgs(args, "ssF", &a0, &a1, &a2))
            {
              OBJ_CALL(result = self->object.getFuzzyQuery(a0, a1, a2));
              return ::org::apache::lucene::search::t_Query::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "getFuzzyQuery", args);
            return NULL;
          }

          static PyObject *t_PythonQueryParser_getPrefixQuery(t_PythonQueryParser *self, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            ::java::lang::String a1((jobject) NULL);
            ::org::apache::lucene::search::Query result((jobject) NULL);

            if (!parseArgs(args, "ss", &a0, &a1))
            {
              OBJ_CALL(result = self->object.getPrefixQuery(a0, a1));
              return ::org::apache::lucene::search::t_Query::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "getPrefixQuery", args);
            return NULL;
          }

          static PyObject *t_PythonQueryParser_getRangeQuery(t_PythonQueryParser *self, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            ::java::lang::String a1((jobject) NULL);
            ::java::lang::String a2((jobject) NULL);
            jboolean a3;
            jboolean a4;
            ::org::apache::lucene::search::Query result((jobject) NULL);

            if (!parseArgs(args, "sssZZ", &a0, &a1, &a2, &a3, &a4))
            {
              OBJ_CALL(result = self->object.getRangeQuery(a0, a1, a2, a3, a4));
              return ::org::apache::lucene::search::t_Query::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "getRangeQuery", args);
            return NULL;
          }

          static PyObject *t_PythonQueryParser_getWildcardQuery(t_PythonQueryParser *self, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            ::java::lang::String a1((jobject) NULL);
            ::org::apache::lucene::search::Query result((jobject) NULL);

            if (!parseArgs(args, "ss", &a0, &a1))
            {
              OBJ_CALL(result = self->object.getWildcardQuery(a0, a1));
              return ::org::apache::lucene::search::t_Query::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "getWildcardQuery", args);
            return NULL;
          }

          static PyObject *t_PythonQueryParser_pythonExtension(t_PythonQueryParser *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 0:
              {
                jlong result;
                OBJ_CALL(result = self->object.pythonExtension());
                return PyLong_FromLongLong((PY_LONG_LONG) result);
              }
              break;
             case 1:
              {
                jlong a0;

                if (!parseArgs(args, "J", &a0))
                {
                  OBJ_CALL(self->object.pythonExtension(a0));
                  Py_RETURN_NONE;
                }
              }
            }

            PyErr_SetArgsError((PyObject *) self, "pythonExtension", args);
            return NULL;
          }

          static jobject JNICALL t_PythonQueryParser_getBooleanQuery0(JNIEnv *jenv, jobject jobj, jobject a0, jboolean a1)
          {
            jlong ptr = jenv->CallLongMethod(jobj, PythonQueryParser::mids$[PythonQueryParser::mid_pythonExtension_54c6a17a]);
            PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
            PythonGIL gil(jenv);
            ::org::apache::lucene::search::Query value((jobject) NULL);
            PyObject *o0 = ::java::util::t_List::wrap_Object(::java::util::List(a0));
            PyObject *o1 = (a1 ? Py_True : Py_False);
            PyObject *result = PyObject_CallMethod(obj, "getBooleanQuery", "OO", o0, o1);
            Py_DECREF(o0);
            if (!result)
              throwPythonError();
            else if (parseArg(result, "k", ::org::apache::lucene::search::Query::initializeClass, &value))
            {
              throwTypeError("getBooleanQuery", result);
              Py_DECREF(result);
            }
            else
            {
              jobj = jenv->NewLocalRef(value.this$);
              Py_DECREF(result);
              return jobj;
            }

            return (jobject) NULL;
          }

          static jobject JNICALL t_PythonQueryParser_getFieldQuery_quoted1(JNIEnv *jenv, jobject jobj, jobject a0, jobject a1, jboolean a2)
          {
            jlong ptr = jenv->CallLongMethod(jobj, PythonQueryParser::mids$[PythonQueryParser::mid_pythonExtension_54c6a17a]);
            PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
            PythonGIL gil(jenv);
            ::org::apache::lucene::search::Query value((jobject) NULL);
            PyObject *o0 = env->fromJString((jstring) a0, 0);
            PyObject *o1 = env->fromJString((jstring) a1, 0);
            PyObject *o2 = (a2 ? Py_True : Py_False);
            PyObject *result = PyObject_CallMethod(obj, "getFieldQuery_quoted", "OOO", o0, o1, o2);
            Py_DECREF(o0);
            Py_DECREF(o1);
            if (!result)
              throwPythonError();
            else if (parseArg(result, "k", ::org::apache::lucene::search::Query::initializeClass, &value))
            {
              throwTypeError("getFieldQuery_quoted", result);
              Py_DECREF(result);
            }
            else
            {
              jobj = jenv->NewLocalRef(value.this$);
              Py_DECREF(result);
              return jobj;
            }

            return (jobject) NULL;
          }

          static jobject JNICALL t_PythonQueryParser_getFieldQuery_slop2(JNIEnv *jenv, jobject jobj, jobject a0, jobject a1, jint a2)
          {
            jlong ptr = jenv->CallLongMethod(jobj, PythonQueryParser::mids$[PythonQueryParser::mid_pythonExtension_54c6a17a]);
            PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
            PythonGIL gil(jenv);
            ::org::apache::lucene::search::Query value((jobject) NULL);
            PyObject *o0 = env->fromJString((jstring) a0, 0);
            PyObject *o1 = env->fromJString((jstring) a1, 0);
            PyObject *result = PyObject_CallMethod(obj, "getFieldQuery_slop", "OOi", o0, o1, (int) a2);
            Py_DECREF(o0);
            Py_DECREF(o1);
            if (!result)
              throwPythonError();
            else if (parseArg(result, "k", ::org::apache::lucene::search::Query::initializeClass, &value))
            {
              throwTypeError("getFieldQuery_slop", result);
              Py_DECREF(result);
            }
            else
            {
              jobj = jenv->NewLocalRef(value.this$);
              Py_DECREF(result);
              return jobj;
            }

            return (jobject) NULL;
          }

          static jobject JNICALL t_PythonQueryParser_getFuzzyQuery3(JNIEnv *jenv, jobject jobj, jobject a0, jobject a1, jfloat a2)
          {
            jlong ptr = jenv->CallLongMethod(jobj, PythonQueryParser::mids$[PythonQueryParser::mid_pythonExtension_54c6a17a]);
            PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
            PythonGIL gil(jenv);
            ::org::apache::lucene::search::Query value((jobject) NULL);
            PyObject *o0 = env->fromJString((jstring) a0, 0);
            PyObject *o1 = env->fromJString((jstring) a1, 0);
            PyObject *result = PyObject_CallMethod(obj, "getFuzzyQuery", "OOf", o0, o1, (float) a2);
            Py_DECREF(o0);
            Py_DECREF(o1);
            if (!result)
              throwPythonError();
            else if (parseArg(result, "k", ::org::apache::lucene::search::Query::initializeClass, &value))
            {
              throwTypeError("getFuzzyQuery", result);
              Py_DECREF(result);
            }
            else
            {
              jobj = jenv->NewLocalRef(value.this$);
              Py_DECREF(result);
              return jobj;
            }

            return (jobject) NULL;
          }

          static jobject JNICALL t_PythonQueryParser_getPrefixQuery4(JNIEnv *jenv, jobject jobj, jobject a0, jobject a1)
          {
            jlong ptr = jenv->CallLongMethod(jobj, PythonQueryParser::mids$[PythonQueryParser::mid_pythonExtension_54c6a17a]);
            PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
            PythonGIL gil(jenv);
            ::org::apache::lucene::search::Query value((jobject) NULL);
            PyObject *o0 = env->fromJString((jstring) a0, 0);
            PyObject *o1 = env->fromJString((jstring) a1, 0);
            PyObject *result = PyObject_CallMethod(obj, "getPrefixQuery", "OO", o0, o1);
            Py_DECREF(o0);
            Py_DECREF(o1);
            if (!result)
              throwPythonError();
            else if (parseArg(result, "k", ::org::apache::lucene::search::Query::initializeClass, &value))
            {
              throwTypeError("getPrefixQuery", result);
              Py_DECREF(result);
            }
            else
            {
              jobj = jenv->NewLocalRef(value.this$);
              Py_DECREF(result);
              return jobj;
            }

            return (jobject) NULL;
          }

          static jobject JNICALL t_PythonQueryParser_getRangeQuery5(JNIEnv *jenv, jobject jobj, jobject a0, jobject a1, jobject a2, jboolean a3, jboolean a4)
          {
            jlong ptr = jenv->CallLongMethod(jobj, PythonQueryParser::mids$[PythonQueryParser::mid_pythonExtension_54c6a17a]);
            PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
            PythonGIL gil(jenv);
            ::org::apache::lucene::search::Query value((jobject) NULL);
            PyObject *o0 = env->fromJString((jstring) a0, 0);
            PyObject *o1 = env->fromJString((jstring) a1, 0);
            PyObject *o2 = env->fromJString((jstring) a2, 0);
            PyObject *o3 = (a3 ? Py_True : Py_False);
            PyObject *o4 = (a4 ? Py_True : Py_False);
            PyObject *result = PyObject_CallMethod(obj, "getRangeQuery", "OOOOO", o0, o1, o2, o3, o4);
            Py_DECREF(o0);
            Py_DECREF(o1);
            Py_DECREF(o2);
            if (!result)
              throwPythonError();
            else if (parseArg(result, "k", ::org::apache::lucene::search::Query::initializeClass, &value))
            {
              throwTypeError("getRangeQuery", result);
              Py_DECREF(result);
            }
            else
            {
              jobj = jenv->NewLocalRef(value.this$);
              Py_DECREF(result);
              return jobj;
            }

            return (jobject) NULL;
          }

          static jobject JNICALL t_PythonQueryParser_getWildcardQuery6(JNIEnv *jenv, jobject jobj, jobject a0, jobject a1)
          {
            jlong ptr = jenv->CallLongMethod(jobj, PythonQueryParser::mids$[PythonQueryParser::mid_pythonExtension_54c6a17a]);
            PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
            PythonGIL gil(jenv);
            ::org::apache::lucene::search::Query value((jobject) NULL);
            PyObject *o0 = env->fromJString((jstring) a0, 0);
            PyObject *o1 = env->fromJString((jstring) a1, 0);
            PyObject *result = PyObject_CallMethod(obj, "getWildcardQuery", "OO", o0, o1);
            Py_DECREF(o0);
            Py_DECREF(o1);
            if (!result)
              throwPythonError();
            else if (parseArg(result, "k", ::org::apache::lucene::search::Query::initializeClass, &value))
            {
              throwTypeError("getWildcardQuery", result);
              Py_DECREF(result);
            }
            else
            {
              jobj = jenv->NewLocalRef(value.this$);
              Py_DECREF(result);
              return jobj;
            }

            return (jobject) NULL;
          }

          static void JNICALL t_PythonQueryParser_pythonDecRef7(JNIEnv *jenv, jobject jobj)
          {
            jlong ptr = jenv->CallLongMethod(jobj, PythonQueryParser::mids$[PythonQueryParser::mid_pythonExtension_54c6a17a]);
            PyObject *obj = (PyObject *) (Py_intptr_t) ptr;

            if (obj != NULL)
            {
              jenv->CallVoidMethod(jobj, PythonQueryParser::mids$[PythonQueryParser::mid_pythonExtension_0ee6df2f], (jlong) 0);
              env->finalizeObject(jenv, obj);
            }
          }

          static PyObject *t_PythonQueryParser_get__self(t_PythonQueryParser *self, void *data)
          {
            jlong ptr;
            OBJ_CALL(ptr = self->object.pythonExtension());
            PyObject *obj = (PyObject *) (Py_intptr_t) ptr;

            if (obj != NULL)
            {
              Py_INCREF(obj);
              return obj;
            }
            else
              Py_RETURN_NONE;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/PForDeltaDocIdSet$Builder.h"
#include "org/apache/lucene/util/PForDeltaDocIdSet.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/search/DocIdSetIterator.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *PForDeltaDocIdSet$Builder::class$ = NULL;
        jmethodID *PForDeltaDocIdSet$Builder::mids$ = NULL;
        bool PForDeltaDocIdSet$Builder::live$ = false;

        jclass PForDeltaDocIdSet$Builder::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/PForDeltaDocIdSet$Builder");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_add_5450130c] = env->getMethodID(cls, "add", "(Lorg/apache/lucene/search/DocIdSetIterator;)Lorg/apache/lucene/util/PForDeltaDocIdSet$Builder;");
            mids$[mid_add_c0d9d1e3] = env->getMethodID(cls, "add", "(I)Lorg/apache/lucene/util/PForDeltaDocIdSet$Builder;");
            mids$[mid_build_44738ac2] = env->getMethodID(cls, "build", "()Lorg/apache/lucene/util/PForDeltaDocIdSet;");
            mids$[mid_setIndexInterval_c0d9d1e3] = env->getMethodID(cls, "setIndexInterval", "(I)Lorg/apache/lucene/util/PForDeltaDocIdSet$Builder;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        PForDeltaDocIdSet$Builder::PForDeltaDocIdSet$Builder() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        PForDeltaDocIdSet$Builder PForDeltaDocIdSet$Builder::add(const ::org::apache::lucene::search::DocIdSetIterator & a0) const
        {
          return PForDeltaDocIdSet$Builder(env->callObjectMethod(this$, mids$[mid_add_5450130c], a0.this$));
        }

        PForDeltaDocIdSet$Builder PForDeltaDocIdSet$Builder::add(jint a0) const
        {
          return PForDeltaDocIdSet$Builder(env->callObjectMethod(this$, mids$[mid_add_c0d9d1e3], a0));
        }

        ::org::apache::lucene::util::PForDeltaDocIdSet PForDeltaDocIdSet$Builder::build() const
        {
          return ::org::apache::lucene::util::PForDeltaDocIdSet(env->callObjectMethod(this$, mids$[mid_build_44738ac2]));
        }

        PForDeltaDocIdSet$Builder PForDeltaDocIdSet$Builder::setIndexInterval(jint a0) const
        {
          return PForDeltaDocIdSet$Builder(env->callObjectMethod(this$, mids$[mid_setIndexInterval_c0d9d1e3], a0));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_PForDeltaDocIdSet$Builder_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_PForDeltaDocIdSet$Builder_instance_(PyTypeObject *type, PyObject *arg);
        static int t_PForDeltaDocIdSet$Builder_init_(t_PForDeltaDocIdSet$Builder *self, PyObject *args, PyObject *kwds);
        static PyObject *t_PForDeltaDocIdSet$Builder_add(t_PForDeltaDocIdSet$Builder *self, PyObject *args);
        static PyObject *t_PForDeltaDocIdSet$Builder_build(t_PForDeltaDocIdSet$Builder *self);
        static PyObject *t_PForDeltaDocIdSet$Builder_setIndexInterval(t_PForDeltaDocIdSet$Builder *self, PyObject *arg);
        static int t_PForDeltaDocIdSet$Builder_set__indexInterval(t_PForDeltaDocIdSet$Builder *self, PyObject *arg, void *data);
        static PyGetSetDef t_PForDeltaDocIdSet$Builder__fields_[] = {
          DECLARE_SET_FIELD(t_PForDeltaDocIdSet$Builder, indexInterval),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_PForDeltaDocIdSet$Builder__methods_[] = {
          DECLARE_METHOD(t_PForDeltaDocIdSet$Builder, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PForDeltaDocIdSet$Builder, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PForDeltaDocIdSet$Builder, add, METH_VARARGS),
          DECLARE_METHOD(t_PForDeltaDocIdSet$Builder, build, METH_NOARGS),
          DECLARE_METHOD(t_PForDeltaDocIdSet$Builder, setIndexInterval, METH_O),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(PForDeltaDocIdSet$Builder, t_PForDeltaDocIdSet$Builder, ::java::lang::Object, PForDeltaDocIdSet$Builder, t_PForDeltaDocIdSet$Builder_init_, 0, 0, t_PForDeltaDocIdSet$Builder__fields_, 0, 0);

        void t_PForDeltaDocIdSet$Builder::install(PyObject *module)
        {
          installType(&PY_TYPE(PForDeltaDocIdSet$Builder), module, "PForDeltaDocIdSet$Builder", 0);
        }

        void t_PForDeltaDocIdSet$Builder::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(PForDeltaDocIdSet$Builder).tp_dict, "class_", make_descriptor(PForDeltaDocIdSet$Builder::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(PForDeltaDocIdSet$Builder).tp_dict, "wrapfn_", make_descriptor(t_PForDeltaDocIdSet$Builder::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(PForDeltaDocIdSet$Builder).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_PForDeltaDocIdSet$Builder_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, PForDeltaDocIdSet$Builder::initializeClass, 1)))
            return NULL;
          return t_PForDeltaDocIdSet$Builder::wrap_Object(PForDeltaDocIdSet$Builder(((t_PForDeltaDocIdSet$Builder *) arg)->object.this$));
        }
        static PyObject *t_PForDeltaDocIdSet$Builder_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, PForDeltaDocIdSet$Builder::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_PForDeltaDocIdSet$Builder_init_(t_PForDeltaDocIdSet$Builder *self, PyObject *args, PyObject *kwds)
        {
          PForDeltaDocIdSet$Builder object((jobject) NULL);

          INT_CALL(object = PForDeltaDocIdSet$Builder());
          self->object = object;

          return 0;
        }

        static PyObject *t_PForDeltaDocIdSet$Builder_add(t_PForDeltaDocIdSet$Builder *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              ::org::apache::lucene::search::DocIdSetIterator a0((jobject) NULL);
              PForDeltaDocIdSet$Builder result((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::search::DocIdSetIterator::initializeClass, &a0))
              {
                OBJ_CALL(result = self->object.add(a0));
                return t_PForDeltaDocIdSet$Builder::wrap_Object(result);
              }
            }
            {
              jint a0;
              PForDeltaDocIdSet$Builder result((jobject) NULL);

              if (!parseArgs(args, "I", &a0))
              {
                OBJ_CALL(result = self->object.add(a0));
                return t_PForDeltaDocIdSet$Builder::wrap_Object(result);
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "add", args);
          return NULL;
        }

        static PyObject *t_PForDeltaDocIdSet$Builder_build(t_PForDeltaDocIdSet$Builder *self)
        {
          ::org::apache::lucene::util::PForDeltaDocIdSet result((jobject) NULL);
          OBJ_CALL(result = self->object.build());
          return ::org::apache::lucene::util::t_PForDeltaDocIdSet::wrap_Object(result);
        }

        static PyObject *t_PForDeltaDocIdSet$Builder_setIndexInterval(t_PForDeltaDocIdSet$Builder *self, PyObject *arg)
        {
          jint a0;
          PForDeltaDocIdSet$Builder result((jobject) NULL);

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(result = self->object.setIndexInterval(a0));
            return t_PForDeltaDocIdSet$Builder::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "setIndexInterval", arg);
          return NULL;
        }

        static int t_PForDeltaDocIdSet$Builder_set__indexInterval(t_PForDeltaDocIdSet$Builder *self, PyObject *arg, void *data)
        {
          {
            jint value;
            if (!parseArg(arg, "I", &value))
            {
              INT_CALL(self->object.setIndexInterval(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "indexInterval", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/classic/QueryParserTokenManager.h"
#include "java/io/PrintStream.h"
#include "org/apache/lucene/queryparser/classic/Token.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/queryparser/classic/QueryParserConstants.h"
#include "java/lang/String.h"
#include "org/apache/lucene/queryparser/classic/CharStream.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace classic {

          ::java::lang::Class *QueryParserTokenManager::class$ = NULL;
          jmethodID *QueryParserTokenManager::mids$ = NULL;
          jfieldID *QueryParserTokenManager::fids$ = NULL;
          bool QueryParserTokenManager::live$ = false;
          JArray< jint > *QueryParserTokenManager::jjnewLexState = NULL;
          JArray< ::java::lang::String > *QueryParserTokenManager::jjstrLiteralImages = NULL;
          JArray< ::java::lang::String > *QueryParserTokenManager::lexStateNames = NULL;

          jclass QueryParserTokenManager::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/classic/QueryParserTokenManager");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_24bde9d3] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/queryparser/classic/CharStream;)V");
              mids$[mid_init$_27f0394b] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/queryparser/classic/CharStream;I)V");
              mids$[mid_ReInit_24bde9d3] = env->getMethodID(cls, "ReInit", "(Lorg/apache/lucene/queryparser/classic/CharStream;)V");
              mids$[mid_ReInit_27f0394b] = env->getMethodID(cls, "ReInit", "(Lorg/apache/lucene/queryparser/classic/CharStream;I)V");
              mids$[mid_SwitchTo_39c7bd3c] = env->getMethodID(cls, "SwitchTo", "(I)V");
              mids$[mid_getNextToken_1983cf96] = env->getMethodID(cls, "getNextToken", "()Lorg/apache/lucene/queryparser/classic/Token;");
              mids$[mid_setDebugStream_1b7c898b] = env->getMethodID(cls, "setDebugStream", "(Ljava/io/PrintStream;)V");
              mids$[mid_jjFillToken_1983cf96] = env->getMethodID(cls, "jjFillToken", "()Lorg/apache/lucene/queryparser/classic/Token;");

              fids$ = new jfieldID[max_fid];
              fids$[fid_debugStream] = env->getFieldID(cls, "debugStream", "Ljava/io/PrintStream;");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              jjnewLexState = new JArray< jint >(env->getStaticObjectField(cls, "jjnewLexState", "[I"));
              jjstrLiteralImages = new JArray< ::java::lang::String >(env->getStaticObjectField(cls, "jjstrLiteralImages", "[Ljava/lang/String;"));
              lexStateNames = new JArray< ::java::lang::String >(env->getStaticObjectField(cls, "lexStateNames", "[Ljava/lang/String;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          QueryParserTokenManager::QueryParserTokenManager(const ::org::apache::lucene::queryparser::classic::CharStream & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_24bde9d3, a0.this$)) {}

          QueryParserTokenManager::QueryParserTokenManager(const ::org::apache::lucene::queryparser::classic::CharStream & a0, jint a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_27f0394b, a0.this$, a1)) {}

          void QueryParserTokenManager::ReInit(const ::org::apache::lucene::queryparser::classic::CharStream & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_ReInit_24bde9d3], a0.this$);
          }

          void QueryParserTokenManager::ReInit(const ::org::apache::lucene::queryparser::classic::CharStream & a0, jint a1) const
          {
            env->callVoidMethod(this$, mids$[mid_ReInit_27f0394b], a0.this$, a1);
          }

          void QueryParserTokenManager::SwitchTo(jint a0) const
          {
            env->callVoidMethod(this$, mids$[mid_SwitchTo_39c7bd3c], a0);
          }

          ::org::apache::lucene::queryparser::classic::Token QueryParserTokenManager::getNextToken() const
          {
            return ::org::apache::lucene::queryparser::classic::Token(env->callObjectMethod(this$, mids$[mid_getNextToken_1983cf96]));
          }

          void QueryParserTokenManager::setDebugStream(const ::java::io::PrintStream & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setDebugStream_1b7c898b], a0.this$);
          }

          ::java::io::PrintStream QueryParserTokenManager::_get_debugStream() const
          {
            return ::java::io::PrintStream(env->getObjectField(this$, fids$[fid_debugStream]));
          }

          void QueryParserTokenManager::_set_debugStream(const ::java::io::PrintStream & a0) const
          {
            env->setObjectField(this$, fids$[fid_debugStream], a0.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace classic {
          static PyObject *t_QueryParserTokenManager_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_QueryParserTokenManager_instance_(PyTypeObject *type, PyObject *arg);
          static int t_QueryParserTokenManager_init_(t_QueryParserTokenManager *self, PyObject *args, PyObject *kwds);
          static PyObject *t_QueryParserTokenManager_ReInit(t_QueryParserTokenManager *self, PyObject *args);
          static PyObject *t_QueryParserTokenManager_SwitchTo(t_QueryParserTokenManager *self, PyObject *arg);
          static PyObject *t_QueryParserTokenManager_getNextToken(t_QueryParserTokenManager *self);
          static PyObject *t_QueryParserTokenManager_setDebugStream(t_QueryParserTokenManager *self, PyObject *arg);

          static int t_QueryParserTokenManager_set__debugStream(t_QueryParserTokenManager *self, PyObject *arg, void *data);
          static PyObject *t_QueryParserTokenManager_get__nextToken(t_QueryParserTokenManager *self, void *data);
          static PyGetSetDef t_QueryParserTokenManager__fields_[] = {
            DECLARE_SET_FIELD(t_QueryParserTokenManager, debugStream),
            DECLARE_GET_FIELD(t_QueryParserTokenManager, nextToken),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_QueryParserTokenManager__methods_[] = {
            DECLARE_METHOD(t_QueryParserTokenManager, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_QueryParserTokenManager, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_QueryParserTokenManager, ReInit, METH_VARARGS),
            DECLARE_METHOD(t_QueryParserTokenManager, SwitchTo, METH_O),
            DECLARE_METHOD(t_QueryParserTokenManager, getNextToken, METH_NOARGS),
            DECLARE_METHOD(t_QueryParserTokenManager, setDebugStream, METH_O),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(QueryParserTokenManager, t_QueryParserTokenManager, ::java::lang::Object, QueryParserTokenManager, t_QueryParserTokenManager_init_, 0, 0, t_QueryParserTokenManager__fields_, 0, 0);

          void t_QueryParserTokenManager::install(PyObject *module)
          {
            installType(&PY_TYPE(QueryParserTokenManager), module, "QueryParserTokenManager", 0);
          }

          void t_QueryParserTokenManager::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(QueryParserTokenManager).tp_dict, "class_", make_descriptor(QueryParserTokenManager::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(QueryParserTokenManager).tp_dict, "wrapfn_", make_descriptor(t_QueryParserTokenManager::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(QueryParserTokenManager).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(QueryParserTokenManager::initializeClass);
            PyDict_SetItemString(PY_TYPE(QueryParserTokenManager).tp_dict, "jjnewLexState", make_descriptor(QueryParserTokenManager::jjnewLexState->wrap()));
            PyDict_SetItemString(PY_TYPE(QueryParserTokenManager).tp_dict, "jjstrLiteralImages", make_descriptor(JArray<jstring>(QueryParserTokenManager::jjstrLiteralImages->this$).wrap()));
            PyDict_SetItemString(PY_TYPE(QueryParserTokenManager).tp_dict, "lexStateNames", make_descriptor(JArray<jstring>(QueryParserTokenManager::lexStateNames->this$).wrap()));
          }

          static PyObject *t_QueryParserTokenManager_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, QueryParserTokenManager::initializeClass, 1)))
              return NULL;
            return t_QueryParserTokenManager::wrap_Object(QueryParserTokenManager(((t_QueryParserTokenManager *) arg)->object.this$));
          }
          static PyObject *t_QueryParserTokenManager_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, QueryParserTokenManager::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_QueryParserTokenManager_init_(t_QueryParserTokenManager *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::org::apache::lucene::queryparser::classic::CharStream a0((jobject) NULL);
                QueryParserTokenManager object((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::queryparser::classic::CharStream::initializeClass, &a0))
                {
                  INT_CALL(object = QueryParserTokenManager(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 2:
              {
                ::org::apache::lucene::queryparser::classic::CharStream a0((jobject) NULL);
                jint a1;
                QueryParserTokenManager object((jobject) NULL);

                if (!parseArgs(args, "kI", ::org::apache::lucene::queryparser::classic::CharStream::initializeClass, &a0, &a1))
                {
                  INT_CALL(object = QueryParserTokenManager(a0, a1));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_QueryParserTokenManager_ReInit(t_QueryParserTokenManager *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::org::apache::lucene::queryparser::classic::CharStream a0((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::queryparser::classic::CharStream::initializeClass, &a0))
                {
                  OBJ_CALL(self->object.ReInit(a0));
                  Py_RETURN_NONE;
                }
              }
              break;
             case 2:
              {
                ::org::apache::lucene::queryparser::classic::CharStream a0((jobject) NULL);
                jint a1;

                if (!parseArgs(args, "kI", ::org::apache::lucene::queryparser::classic::CharStream::initializeClass, &a0, &a1))
                {
                  OBJ_CALL(self->object.ReInit(a0, a1));
                  Py_RETURN_NONE;
                }
              }
            }

            PyErr_SetArgsError((PyObject *) self, "ReInit", args);
            return NULL;
          }

          static PyObject *t_QueryParserTokenManager_SwitchTo(t_QueryParserTokenManager *self, PyObject *arg)
          {
            jint a0;

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(self->object.SwitchTo(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "SwitchTo", arg);
            return NULL;
          }

          static PyObject *t_QueryParserTokenManager_getNextToken(t_QueryParserTokenManager *self)
          {
            ::org::apache::lucene::queryparser::classic::Token result((jobject) NULL);
            OBJ_CALL(result = self->object.getNextToken());
            return ::org::apache::lucene::queryparser::classic::t_Token::wrap_Object(result);
          }

          static PyObject *t_QueryParserTokenManager_setDebugStream(t_QueryParserTokenManager *self, PyObject *arg)
          {
            ::java::io::PrintStream a0((jobject) NULL);

            if (!parseArg(arg, "k", ::java::io::PrintStream::initializeClass, &a0))
            {
              OBJ_CALL(self->object.setDebugStream(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setDebugStream", arg);
            return NULL;
          }

          static int t_QueryParserTokenManager_set__debugStream(t_QueryParserTokenManager *self, PyObject *arg, void *data)
          {
            {
              ::java::io::PrintStream value((jobject) NULL);
              if (!parseArg(arg, "k", ::java::io::PrintStream::initializeClass, &value))
              {
                INT_CALL(self->object.setDebugStream(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "debugStream", arg);
            return -1;
          }

          static PyObject *t_QueryParserTokenManager_get__nextToken(t_QueryParserTokenManager *self, void *data)
          {
            ::org::apache::lucene::queryparser::classic::Token value((jobject) NULL);
            OBJ_CALL(value = self->object.getNextToken());
            return ::org::apache::lucene::queryparser::classic::t_Token::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "org/apache/lucene/index/AtomicReader.h"
#include "java/util/List.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *AtomicReaderContext::class$ = NULL;
        jmethodID *AtomicReaderContext::mids$ = NULL;
        jfieldID *AtomicReaderContext::fids$ = NULL;
        bool AtomicReaderContext::live$ = false;

        jclass AtomicReaderContext::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/AtomicReaderContext");

            mids$ = new jmethodID[max_mid];
            mids$[mid_children_87851566] = env->getMethodID(cls, "children", "()Ljava/util/List;");
            mids$[mid_leaves_87851566] = env->getMethodID(cls, "leaves", "()Ljava/util/List;");
            mids$[mid_reader_dea1bc38] = env->getMethodID(cls, "reader", "()Lorg/apache/lucene/index/AtomicReader;");

            fids$ = new jfieldID[max_fid];
            fids$[fid_docBase] = env->getFieldID(cls, "docBase", "I");
            fids$[fid_ord] = env->getFieldID(cls, "ord", "I");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        ::java::util::List AtomicReaderContext::children() const
        {
          return ::java::util::List(env->callObjectMethod(this$, mids$[mid_children_87851566]));
        }

        ::java::util::List AtomicReaderContext::leaves() const
        {
          return ::java::util::List(env->callObjectMethod(this$, mids$[mid_leaves_87851566]));
        }

        ::org::apache::lucene::index::AtomicReader AtomicReaderContext::reader() const
        {
          return ::org::apache::lucene::index::AtomicReader(env->callObjectMethod(this$, mids$[mid_reader_dea1bc38]));
        }

        jint AtomicReaderContext::_get_docBase() const
        {
          return env->getIntField(this$, fids$[fid_docBase]);
        }

        jint AtomicReaderContext::_get_ord() const
        {
          return env->getIntField(this$, fids$[fid_ord]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_AtomicReaderContext_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_AtomicReaderContext_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_AtomicReaderContext_children(t_AtomicReaderContext *self, PyObject *args);
        static PyObject *t_AtomicReaderContext_leaves(t_AtomicReaderContext *self, PyObject *args);
        static PyObject *t_AtomicReaderContext_reader(t_AtomicReaderContext *self, PyObject *args);
        static PyObject *t_AtomicReaderContext_get__docBase(t_AtomicReaderContext *self, void *data);
        static PyObject *t_AtomicReaderContext_get__ord(t_AtomicReaderContext *self, void *data);

        static PyGetSetDef t_AtomicReaderContext__fields_[] = {
          DECLARE_GET_FIELD(t_AtomicReaderContext, docBase),
          DECLARE_GET_FIELD(t_AtomicReaderContext, ord),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_AtomicReaderContext__methods_[] = {
          DECLARE_METHOD(t_AtomicReaderContext, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_AtomicReaderContext, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_AtomicReaderContext, children, METH_VARARGS),
          DECLARE_METHOD(t_AtomicReaderContext, leaves, METH_VARARGS),
          DECLARE_METHOD(t_AtomicReaderContext, reader, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(AtomicReaderContext, t_AtomicReaderContext, ::org::apache::lucene::index::IndexReaderContext, AtomicReaderContext, abstract_init, 0, 0, t_AtomicReaderContext__fields_, 0, 0);

        void t_AtomicReaderContext::install(PyObject *module)
        {
          installType(&PY_TYPE(AtomicReaderContext), module, "AtomicReaderContext", 0);
        }

        void t_AtomicReaderContext::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(AtomicReaderContext).tp_dict, "class_", make_descriptor(AtomicReaderContext::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(AtomicReaderContext).tp_dict, "wrapfn_", make_descriptor(t_AtomicReaderContext::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(AtomicReaderContext).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_AtomicReaderContext_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, AtomicReaderContext::initializeClass, 1)))
            return NULL;
          return t_AtomicReaderContext::wrap_Object(AtomicReaderContext(((t_AtomicReaderContext *) arg)->object.this$));
        }
        static PyObject *t_AtomicReaderContext_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, AtomicReaderContext::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_AtomicReaderContext_children(t_AtomicReaderContext *self, PyObject *args)
        {
          ::java::util::List result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.children());
            return ::java::util::t_List::wrap_Object(result, &::org::apache::lucene::index::PY_TYPE(IndexReaderContext));
          }

          return callSuper(&PY_TYPE(AtomicReaderContext), (PyObject *) self, "children", args, 2);
        }

        static PyObject *t_AtomicReaderContext_leaves(t_AtomicReaderContext *self, PyObject *args)
        {
          ::java::util::List result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.leaves());
            return ::java::util::t_List::wrap_Object(result, &::org::apache::lucene::index::PY_TYPE(AtomicReaderContext));
          }

          return callSuper(&PY_TYPE(AtomicReaderContext), (PyObject *) self, "leaves", args, 2);
        }

        static PyObject *t_AtomicReaderContext_reader(t_AtomicReaderContext *self, PyObject *args)
        {
          ::org::apache::lucene::index::AtomicReader result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.reader());
            return ::org::apache::lucene::index::t_AtomicReader::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(AtomicReaderContext), (PyObject *) self, "reader", args, 2);
        }

        static PyObject *t_AtomicReaderContext_get__docBase(t_AtomicReaderContext *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object._get_docBase());
          return PyInt_FromLong((long) value);
        }

        static PyObject *t_AtomicReaderContext_get__ord(t_AtomicReaderContext *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object._get_ord());
          return PyInt_FromLong((long) value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/PagedBytes.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "org/apache/lucene/util/PagedBytes$PagedBytesDataInput.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/util/Accountable.h"
#include "org/apache/lucene/util/PagedBytes$PagedBytesDataOutput.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/util/PagedBytes$Reader.h"
#include "org/apache/lucene/store/IndexInput.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *PagedBytes::class$ = NULL;
        jmethodID *PagedBytes::mids$ = NULL;
        bool PagedBytes::live$ = false;

        jclass PagedBytes::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/PagedBytes");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_39c7bd3c] = env->getMethodID(cls, "<init>", "(I)V");
            mids$[mid_copy_ec9e0593] = env->getMethodID(cls, "copy", "(Lorg/apache/lucene/store/IndexInput;J)V");
            mids$[mid_copy_594e5ee6] = env->getMethodID(cls, "copy", "(Lorg/apache/lucene/util/BytesRef;Lorg/apache/lucene/util/BytesRef;)V");
            mids$[mid_copyUsingLengthPrefix_7bc03dd8] = env->getMethodID(cls, "copyUsingLengthPrefix", "(Lorg/apache/lucene/util/BytesRef;)J");
            mids$[mid_freeze_6c94cff0] = env->getMethodID(cls, "freeze", "(Z)Lorg/apache/lucene/util/PagedBytes$Reader;");
            mids$[mid_getDataInput_da9ab8b7] = env->getMethodID(cls, "getDataInput", "()Lorg/apache/lucene/util/PagedBytes$PagedBytesDataInput;");
            mids$[mid_getDataOutput_279c2d0b] = env->getMethodID(cls, "getDataOutput", "()Lorg/apache/lucene/util/PagedBytes$PagedBytesDataOutput;");
            mids$[mid_getPointer_54c6a17a] = env->getMethodID(cls, "getPointer", "()J");
            mids$[mid_ramBytesUsed_54c6a17a] = env->getMethodID(cls, "ramBytesUsed", "()J");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        PagedBytes::PagedBytes(jint a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_39c7bd3c, a0)) {}

        void PagedBytes::copy(const ::org::apache::lucene::store::IndexInput & a0, jlong a1) const
        {
          env->callVoidMethod(this$, mids$[mid_copy_ec9e0593], a0.this$, a1);
        }

        void PagedBytes::copy(const ::org::apache::lucene::util::BytesRef & a0, const ::org::apache::lucene::util::BytesRef & a1) const
        {
          env->callVoidMethod(this$, mids$[mid_copy_594e5ee6], a0.this$, a1.this$);
        }

        jlong PagedBytes::copyUsingLengthPrefix(const ::org::apache::lucene::util::BytesRef & a0) const
        {
          return env->callLongMethod(this$, mids$[mid_copyUsingLengthPrefix_7bc03dd8], a0.this$);
        }

        ::org::apache::lucene::util::PagedBytes$Reader PagedBytes::freeze(jboolean a0) const
        {
          return ::org::apache::lucene::util::PagedBytes$Reader(env->callObjectMethod(this$, mids$[mid_freeze_6c94cff0], a0));
        }

        ::org::apache::lucene::util::PagedBytes$PagedBytesDataInput PagedBytes::getDataInput() const
        {
          return ::org::apache::lucene::util::PagedBytes$PagedBytesDataInput(env->callObjectMethod(this$, mids$[mid_getDataInput_da9ab8b7]));
        }

        ::org::apache::lucene::util::PagedBytes$PagedBytesDataOutput PagedBytes::getDataOutput() const
        {
          return ::org::apache::lucene::util::PagedBytes$PagedBytesDataOutput(env->callObjectMethod(this$, mids$[mid_getDataOutput_279c2d0b]));
        }

        jlong PagedBytes::getPointer() const
        {
          return env->callLongMethod(this$, mids$[mid_getPointer_54c6a17a]);
        }

        jlong PagedBytes::ramBytesUsed() const
        {
          return env->callLongMethod(this$, mids$[mid_ramBytesUsed_54c6a17a]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_PagedBytes_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_PagedBytes_instance_(PyTypeObject *type, PyObject *arg);
        static int t_PagedBytes_init_(t_PagedBytes *self, PyObject *args, PyObject *kwds);
        static PyObject *t_PagedBytes_copy(t_PagedBytes *self, PyObject *args);
        static PyObject *t_PagedBytes_copyUsingLengthPrefix(t_PagedBytes *self, PyObject *arg);
        static PyObject *t_PagedBytes_freeze(t_PagedBytes *self, PyObject *arg);
        static PyObject *t_PagedBytes_getDataInput(t_PagedBytes *self);
        static PyObject *t_PagedBytes_getDataOutput(t_PagedBytes *self);
        static PyObject *t_PagedBytes_getPointer(t_PagedBytes *self);
        static PyObject *t_PagedBytes_ramBytesUsed(t_PagedBytes *self);
        static PyObject *t_PagedBytes_get__dataInput(t_PagedBytes *self, void *data);
        static PyObject *t_PagedBytes_get__dataOutput(t_PagedBytes *self, void *data);
        static PyObject *t_PagedBytes_get__pointer(t_PagedBytes *self, void *data);
        static PyGetSetDef t_PagedBytes__fields_[] = {
          DECLARE_GET_FIELD(t_PagedBytes, dataInput),
          DECLARE_GET_FIELD(t_PagedBytes, dataOutput),
          DECLARE_GET_FIELD(t_PagedBytes, pointer),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_PagedBytes__methods_[] = {
          DECLARE_METHOD(t_PagedBytes, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PagedBytes, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PagedBytes, copy, METH_VARARGS),
          DECLARE_METHOD(t_PagedBytes, copyUsingLengthPrefix, METH_O),
          DECLARE_METHOD(t_PagedBytes, freeze, METH_O),
          DECLARE_METHOD(t_PagedBytes, getDataInput, METH_NOARGS),
          DECLARE_METHOD(t_PagedBytes, getDataOutput, METH_NOARGS),
          DECLARE_METHOD(t_PagedBytes, getPointer, METH_NOARGS),
          DECLARE_METHOD(t_PagedBytes, ramBytesUsed, METH_NOARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(PagedBytes, t_PagedBytes, ::java::lang::Object, PagedBytes, t_PagedBytes_init_, 0, 0, t_PagedBytes__fields_, 0, 0);

        void t_PagedBytes::install(PyObject *module)
        {
          installType(&PY_TYPE(PagedBytes), module, "PagedBytes", 0);
          PyDict_SetItemString(PY_TYPE(PagedBytes).tp_dict, "Reader", make_descriptor(&PY_TYPE(PagedBytes$Reader)));
        }

        void t_PagedBytes::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(PagedBytes).tp_dict, "class_", make_descriptor(PagedBytes::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(PagedBytes).tp_dict, "wrapfn_", make_descriptor(t_PagedBytes::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(PagedBytes).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_PagedBytes_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, PagedBytes::initializeClass, 1)))
            return NULL;
          return t_PagedBytes::wrap_Object(PagedBytes(((t_PagedBytes *) arg)->object.this$));
        }
        static PyObject *t_PagedBytes_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, PagedBytes::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_PagedBytes_init_(t_PagedBytes *self, PyObject *args, PyObject *kwds)
        {
          jint a0;
          PagedBytes object((jobject) NULL);

          if (!parseArgs(args, "I", &a0))
          {
            INT_CALL(object = PagedBytes(a0));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_PagedBytes_copy(t_PagedBytes *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 2:
            {
              ::org::apache::lucene::store::IndexInput a0((jobject) NULL);
              jlong a1;

              if (!parseArgs(args, "kJ", ::org::apache::lucene::store::IndexInput::initializeClass, &a0, &a1))
              {
                OBJ_CALL(self->object.copy(a0, a1));
                Py_RETURN_NONE;
              }
            }
            {
              ::org::apache::lucene::util::BytesRef a0((jobject) NULL);
              ::org::apache::lucene::util::BytesRef a1((jobject) NULL);

              if (!parseArgs(args, "kk", ::org::apache::lucene::util::BytesRef::initializeClass, ::org::apache::lucene::util::BytesRef::initializeClass, &a0, &a1))
              {
                OBJ_CALL(self->object.copy(a0, a1));
                Py_RETURN_NONE;
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "copy", args);
          return NULL;
        }

        static PyObject *t_PagedBytes_copyUsingLengthPrefix(t_PagedBytes *self, PyObject *arg)
        {
          ::org::apache::lucene::util::BytesRef a0((jobject) NULL);
          jlong result;

          if (!parseArg(arg, "k", ::org::apache::lucene::util::BytesRef::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.copyUsingLengthPrefix(a0));
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          PyErr_SetArgsError((PyObject *) self, "copyUsingLengthPrefix", arg);
          return NULL;
        }

        static PyObject *t_PagedBytes_freeze(t_PagedBytes *self, PyObject *arg)
        {
          jboolean a0;
          ::org::apache::lucene::util::PagedBytes$Reader result((jobject) NULL);

          if (!parseArg(arg, "Z", &a0))
          {
            OBJ_CALL(result = self->object.freeze(a0));
            return ::org::apache::lucene::util::t_PagedBytes$Reader::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "freeze", arg);
          return NULL;
        }

        static PyObject *t_PagedBytes_getDataInput(t_PagedBytes *self)
        {
          ::org::apache::lucene::util::PagedBytes$PagedBytesDataInput result((jobject) NULL);
          OBJ_CALL(result = self->object.getDataInput());
          return ::org::apache::lucene::util::t_PagedBytes$PagedBytesDataInput::wrap_Object(result);
        }

        static PyObject *t_PagedBytes_getDataOutput(t_PagedBytes *self)
        {
          ::org::apache::lucene::util::PagedBytes$PagedBytesDataOutput result((jobject) NULL);
          OBJ_CALL(result = self->object.getDataOutput());
          return ::org::apache::lucene::util::t_PagedBytes$PagedBytesDataOutput::wrap_Object(result);
        }

        static PyObject *t_PagedBytes_getPointer(t_PagedBytes *self)
        {
          jlong result;
          OBJ_CALL(result = self->object.getPointer());
          return PyLong_FromLongLong((PY_LONG_LONG) result);
        }

        static PyObject *t_PagedBytes_ramBytesUsed(t_PagedBytes *self)
        {
          jlong result;
          OBJ_CALL(result = self->object.ramBytesUsed());
          return PyLong_FromLongLong((PY_LONG_LONG) result);
        }

        static PyObject *t_PagedBytes_get__dataInput(t_PagedBytes *self, void *data)
        {
          ::org::apache::lucene::util::PagedBytes$PagedBytesDataInput value((jobject) NULL);
          OBJ_CALL(value = self->object.getDataInput());
          return ::org::apache::lucene::util::t_PagedBytes$PagedBytesDataInput::wrap_Object(value);
        }

        static PyObject *t_PagedBytes_get__dataOutput(t_PagedBytes *self, void *data)
        {
          ::org::apache::lucene::util::PagedBytes$PagedBytesDataOutput value((jobject) NULL);
          OBJ_CALL(value = self->object.getDataOutput());
          return ::org::apache::lucene::util::t_PagedBytes$PagedBytesDataOutput::wrap_Object(value);
        }

        static PyObject *t_PagedBytes_get__pointer(t_PagedBytes *self, void *data)
        {
          jlong value;
          OBJ_CALL(value = self->object.getPointer());
          return PyLong_FromLongLong((PY_LONG_LONG) value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/spell/SuggestWordQueue.h"
#include "org/apache/lucene/search/spell/SuggestWord.h"
#include "java/util/Comparator.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace spell {

          ::java::lang::Class *SuggestWordQueue::class$ = NULL;
          jmethodID *SuggestWordQueue::mids$ = NULL;
          bool SuggestWordQueue::live$ = false;
          ::java::util::Comparator *SuggestWordQueue::DEFAULT_COMPARATOR = NULL;

          jclass SuggestWordQueue::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/spell/SuggestWordQueue");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_39c7bd3c] = env->getMethodID(cls, "<init>", "(I)V");
              mids$[mid_init$_4ba868a3] = env->getMethodID(cls, "<init>", "(ILjava/util/Comparator;)V");
              mids$[mid_lessThan_2e903be2] = env->getMethodID(cls, "lessThan", "(Lorg/apache/lucene/search/spell/SuggestWord;Lorg/apache/lucene/search/spell/SuggestWord;)Z");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              DEFAULT_COMPARATOR = new ::java::util::Comparator(env->getStaticObjectField(cls, "DEFAULT_COMPARATOR", "Ljava/util/Comparator;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          SuggestWordQueue::SuggestWordQueue(jint a0) : ::org::apache::lucene::util::PriorityQueue(env->newObject(initializeClass, &mids$, mid_init$_39c7bd3c, a0)) {}

          SuggestWordQueue::SuggestWordQueue(jint a0, const ::java::util::Comparator & a1) : ::org::apache::lucene::util::PriorityQueue(env->newObject(initializeClass, &mids$, mid_init$_4ba868a3, a0, a1.this$)) {}
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace spell {
          static PyObject *t_SuggestWordQueue_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SuggestWordQueue_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SuggestWordQueue_of_(t_SuggestWordQueue *self, PyObject *args);
          static int t_SuggestWordQueue_init_(t_SuggestWordQueue *self, PyObject *args, PyObject *kwds);
          static PyObject *t_SuggestWordQueue_get__parameters_(t_SuggestWordQueue *self, void *data);
          static PyGetSetDef t_SuggestWordQueue__fields_[] = {
            DECLARE_GET_FIELD(t_SuggestWordQueue, parameters_),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_SuggestWordQueue__methods_[] = {
            DECLARE_METHOD(t_SuggestWordQueue, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SuggestWordQueue, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SuggestWordQueue, of_, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(SuggestWordQueue, t_SuggestWordQueue, ::org::apache::lucene::util::PriorityQueue, SuggestWordQueue, t_SuggestWordQueue_init_, 0, 0, t_SuggestWordQueue__fields_, 0, 0);
          PyObject *t_SuggestWordQueue::wrap_Object(const SuggestWordQueue& object, PyTypeObject *p0)
          {
            PyObject *obj = t_SuggestWordQueue::wrap_Object(object);
            if (obj != NULL && obj != Py_None)
            {
              t_SuggestWordQueue *self = (t_SuggestWordQueue *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          PyObject *t_SuggestWordQueue::wrap_jobject(const jobject& object, PyTypeObject *p0)
          {
            PyObject *obj = t_SuggestWordQueue::wrap_jobject(object);
            if (obj != NULL && obj != Py_None)
            {
              t_SuggestWordQueue *self = (t_SuggestWordQueue *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          void t_SuggestWordQueue::install(PyObject *module)
          {
            installType(&PY_TYPE(SuggestWordQueue), module, "SuggestWordQueue", 0);
          }

          void t_SuggestWordQueue::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(SuggestWordQueue).tp_dict, "class_", make_descriptor(SuggestWordQueue::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(SuggestWordQueue).tp_dict, "wrapfn_", make_descriptor(t_SuggestWordQueue::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(SuggestWordQueue).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(SuggestWordQueue::initializeClass);
            PyDict_SetItemString(PY_TYPE(SuggestWordQueue).tp_dict, "DEFAULT_COMPARATOR", make_descriptor(::java::util::t_Comparator::wrap_Object(*SuggestWordQueue::DEFAULT_COMPARATOR)));
          }

          static PyObject *t_SuggestWordQueue_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, SuggestWordQueue::initializeClass, 1)))
              return NULL;
            return t_SuggestWordQueue::wrap_Object(SuggestWordQueue(((t_SuggestWordQueue *) arg)->object.this$));
          }
          static PyObject *t_SuggestWordQueue_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, SuggestWordQueue::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_SuggestWordQueue_of_(t_SuggestWordQueue *self, PyObject *args)
          {
            if (!parseArg(args, "T", 1, &(self->parameters)))
              Py_RETURN_SELF;
            return PyErr_SetArgsError((PyObject *) self, "of_", args);
          }

          static int t_SuggestWordQueue_init_(t_SuggestWordQueue *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                jint a0;
                SuggestWordQueue object((jobject) NULL);

                if (!parseArgs(args, "I", &a0))
                {
                  INT_CALL(object = SuggestWordQueue(a0));
                  self->object = object;
                  self->parameters[0] = &::org::apache::lucene::search::spell::PY_TYPE(SuggestWord);
                  break;
                }
              }
              goto err;
             case 2:
              {
                jint a0;
                ::java::util::Comparator a1((jobject) NULL);
                PyTypeObject **p1;
                SuggestWordQueue object((jobject) NULL);

                if (!parseArgs(args, "IK", ::java::util::Comparator::initializeClass, &a0, &a1, &p1, ::java::util::t_Comparator::parameters_))
                {
                  INT_CALL(object = SuggestWordQueue(a0, a1));
                  self->object = object;
                  self->parameters[0] = &::org::apache::lucene::search::spell::PY_TYPE(SuggestWord);
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }
          static PyObject *t_SuggestWordQueue_get__parameters_(t_SuggestWordQueue *self, void *data)
          {
            return typeParameters(self->parameters, sizeof(self->parameters));
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/expressions/js/JavascriptParser$unary_operator_return.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace expressions {
        namespace js {

          ::java::lang::Class *JavascriptParser$unary_operator_return::class$ = NULL;
          jmethodID *JavascriptParser$unary_operator_return::mids$ = NULL;
          bool JavascriptParser$unary_operator_return::live$ = false;

          jclass JavascriptParser$unary_operator_return::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/expressions/js/JavascriptParser$unary_operator_return");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          JavascriptParser$unary_operator_return::JavascriptParser$unary_operator_return() : ::org::antlr::runtime::ParserRuleReturnScope(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace expressions {
        namespace js {
          static PyObject *t_JavascriptParser$unary_operator_return_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_JavascriptParser$unary_operator_return_instance_(PyTypeObject *type, PyObject *arg);
          static int t_JavascriptParser$unary_operator_return_init_(t_JavascriptParser$unary_operator_return *self, PyObject *args, PyObject *kwds);

          static PyMethodDef t_JavascriptParser$unary_operator_return__methods_[] = {
            DECLARE_METHOD(t_JavascriptParser$unary_operator_return, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_JavascriptParser$unary_operator_return, instance_, METH_O | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(JavascriptParser$unary_operator_return, t_JavascriptParser$unary_operator_return, ::org::antlr::runtime::ParserRuleReturnScope, JavascriptParser$unary_operator_return, t_JavascriptParser$unary_operator_return_init_, 0, 0, 0, 0, 0);

          void t_JavascriptParser$unary_operator_return::install(PyObject *module)
          {
            installType(&PY_TYPE(JavascriptParser$unary_operator_return), module, "JavascriptParser$unary_operator_return", 0);
          }

          void t_JavascriptParser$unary_operator_return::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(JavascriptParser$unary_operator_return).tp_dict, "class_", make_descriptor(JavascriptParser$unary_operator_return::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(JavascriptParser$unary_operator_return).tp_dict, "wrapfn_", make_descriptor(t_JavascriptParser$unary_operator_return::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(JavascriptParser$unary_operator_return).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_JavascriptParser$unary_operator_return_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, JavascriptParser$unary_operator_return::initializeClass, 1)))
              return NULL;
            return t_JavascriptParser$unary_operator_return::wrap_Object(JavascriptParser$unary_operator_return(((t_JavascriptParser$unary_operator_return *) arg)->object.this$));
          }
          static PyObject *t_JavascriptParser$unary_operator_return_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, JavascriptParser$unary_operator_return::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_JavascriptParser$unary_operator_return_init_(t_JavascriptParser$unary_operator_return *self, PyObject *args, PyObject *kwds)
          {
            JavascriptParser$unary_operator_return object((jobject) NULL);

            INT_CALL(object = JavascriptParser$unary_operator_return());
            self->object = object;

            return 0;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/wikipedia/WikipediaTokenizer.h"
#include "org/apache/lucene/util/AttributeFactory.h"
#include "java/lang/Class.h"
#include "java/io/IOException.h"
#include "java/io/Reader.h"
#include "java/lang/String.h"
#include "java/util/Set.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace wikipedia {

          ::java::lang::Class *WikipediaTokenizer::class$ = NULL;
          jmethodID *WikipediaTokenizer::mids$ = NULL;
          bool WikipediaTokenizer::live$ = false;
          jint WikipediaTokenizer::ACRONYM_ID = (jint) 0;
          jint WikipediaTokenizer::ALPHANUM_ID = (jint) 0;
          jint WikipediaTokenizer::APOSTROPHE_ID = (jint) 0;
          ::java::lang::String *WikipediaTokenizer::BOLD = NULL;
          jint WikipediaTokenizer::BOLD_ID = (jint) 0;
          ::java::lang::String *WikipediaTokenizer::BOLD_ITALICS = NULL;
          jint WikipediaTokenizer::BOLD_ITALICS_ID = (jint) 0;
          jint WikipediaTokenizer::BOTH = (jint) 0;
          ::java::lang::String *WikipediaTokenizer::CATEGORY = NULL;
          jint WikipediaTokenizer::CATEGORY_ID = (jint) 0;
          ::java::lang::String *WikipediaTokenizer::CITATION = NULL;
          jint WikipediaTokenizer::CITATION_ID = (jint) 0;
          jint WikipediaTokenizer::CJ_ID = (jint) 0;
          jint WikipediaTokenizer::COMPANY_ID = (jint) 0;
          jint WikipediaTokenizer::EMAIL_ID = (jint) 0;
          ::java::lang::String *WikipediaTokenizer::EXTERNAL_LINK = NULL;
          jint WikipediaTokenizer::EXTERNAL_LINK_ID = (jint) 0;
          ::java::lang::String *WikipediaTokenizer::EXTERNAL_LINK_URL = NULL;
          jint WikipediaTokenizer::EXTERNAL_LINK_URL_ID = (jint) 0;
          ::java::lang::String *WikipediaTokenizer::HEADING = NULL;
          jint WikipediaTokenizer::HEADING_ID = (jint) 0;
          jint WikipediaTokenizer::HOST_ID = (jint) 0;
          ::java::lang::String *WikipediaTokenizer::INTERNAL_LINK = NULL;
          jint WikipediaTokenizer::INTERNAL_LINK_ID = (jint) 0;
          ::java::lang::String *WikipediaTokenizer::ITALICS = NULL;
          jint WikipediaTokenizer::ITALICS_ID = (jint) 0;
          jint WikipediaTokenizer::NUM_ID = (jint) 0;
          ::java::lang::String *WikipediaTokenizer::SUB_HEADING = NULL;
          jint WikipediaTokenizer::SUB_HEADING_ID = (jint) 0;
          jint WikipediaTokenizer::TOKENS_ONLY = (jint) 0;
          JArray< ::java::lang::String > *WikipediaTokenizer::TOKEN_TYPES = NULL;
          jint WikipediaTokenizer::UNTOKENIZED_ONLY = (jint) 0;
          jint WikipediaTokenizer::UNTOKENIZED_TOKEN_FLAG = (jint) 0;

          jclass WikipediaTokenizer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/wikipedia/WikipediaTokenizer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_cf2e3c10] = env->getMethodID(cls, "<init>", "(Ljava/io/Reader;)V");
              mids$[mid_init$_ef926df6] = env->getMethodID(cls, "<init>", "(Ljava/io/Reader;ILjava/util/Set;)V");
              mids$[mid_init$_60b8ae4e] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/AttributeFactory;Ljava/io/Reader;ILjava/util/Set;)V");
              mids$[mid_close_54c6a166] = env->getMethodID(cls, "close", "()V");
              mids$[mid_end_54c6a166] = env->getMethodID(cls, "end", "()V");
              mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");
              mids$[mid_reset_54c6a166] = env->getMethodID(cls, "reset", "()V");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              ACRONYM_ID = env->getStaticIntField(cls, "ACRONYM_ID");
              ALPHANUM_ID = env->getStaticIntField(cls, "ALPHANUM_ID");
              APOSTROPHE_ID = env->getStaticIntField(cls, "APOSTROPHE_ID");
              BOLD = new ::java::lang::String(env->getStaticObjectField(cls, "BOLD", "Ljava/lang/String;"));
              BOLD_ID = env->getStaticIntField(cls, "BOLD_ID");
              BOLD_ITALICS = new ::java::lang::String(env->getStaticObjectField(cls, "BOLD_ITALICS", "Ljava/lang/String;"));
              BOLD_ITALICS_ID = env->getStaticIntField(cls, "BOLD_ITALICS_ID");
              BOTH = env->getStaticIntField(cls, "BOTH");
              CATEGORY = new ::java::lang::String(env->getStaticObjectField(cls, "CATEGORY", "Ljava/lang/String;"));
              CATEGORY_ID = env->getStaticIntField(cls, "CATEGORY_ID");
              CITATION = new ::java::lang::String(env->getStaticObjectField(cls, "CITATION", "Ljava/lang/String;"));
              CITATION_ID = env->getStaticIntField(cls, "CITATION_ID");
              CJ_ID = env->getStaticIntField(cls, "CJ_ID");
              COMPANY_ID = env->getStaticIntField(cls, "COMPANY_ID");
              EMAIL_ID = env->getStaticIntField(cls, "EMAIL_ID");
              EXTERNAL_LINK = new ::java::lang::String(env->getStaticObjectField(cls, "EXTERNAL_LINK", "Ljava/lang/String;"));
              EXTERNAL_LINK_ID = env->getStaticIntField(cls, "EXTERNAL_LINK_ID");
              EXTERNAL_LINK_URL = new ::java::lang::String(env->getStaticObjectField(cls, "EXTERNAL_LINK_URL", "Ljava/lang/String;"));
              EXTERNAL_LINK_URL_ID = env->getStaticIntField(cls, "EXTERNAL_LINK_URL_ID");
              HEADING = new ::java::lang::String(env->getStaticObjectField(cls, "HEADING", "Ljava/lang/String;"));
              HEADING_ID = env->getStaticIntField(cls, "HEADING_ID");
              HOST_ID = env->getStaticIntField(cls, "HOST_ID");
              INTERNAL_LINK = new ::java::lang::String(env->getStaticObjectField(cls, "INTERNAL_LINK", "Ljava/lang/String;"));
              INTERNAL_LINK_ID = env->getStaticIntField(cls, "INTERNAL_LINK_ID");
              ITALICS = new ::java::lang::String(env->getStaticObjectField(cls, "ITALICS", "Ljava/lang/String;"));
              ITALICS_ID = env->getStaticIntField(cls, "ITALICS_ID");
              NUM_ID = env->getStaticIntField(cls, "NUM_ID");
              SUB_HEADING = new ::java::lang::String(env->getStaticObjectField(cls, "SUB_HEADING", "Ljava/lang/String;"));
              SUB_HEADING_ID = env->getStaticIntField(cls, "SUB_HEADING_ID");
              TOKENS_ONLY = env->getStaticIntField(cls, "TOKENS_ONLY");
              TOKEN_TYPES = new JArray< ::java::lang::String >(env->getStaticObjectField(cls, "TOKEN_TYPES", "[Ljava/lang/String;"));
              UNTOKENIZED_ONLY = env->getStaticIntField(cls, "UNTOKENIZED_ONLY");
              UNTOKENIZED_TOKEN_FLAG = env->getStaticIntField(cls, "UNTOKENIZED_TOKEN_FLAG");
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          WikipediaTokenizer::WikipediaTokenizer(const ::java::io::Reader & a0) : ::org::apache::lucene::analysis::Tokenizer(env->newObject(initializeClass, &mids$, mid_init$_cf2e3c10, a0.this$)) {}

          WikipediaTokenizer::WikipediaTokenizer(const ::java::io::Reader & a0, jint a1, const ::java::util::Set & a2) : ::org::apache::lucene::analysis::Tokenizer(env->newObject(initializeClass, &mids$, mid_init$_ef926df6, a0.this$, a1, a2.this$)) {}

          WikipediaTokenizer::WikipediaTokenizer(const ::org::apache::lucene::util::AttributeFactory & a0, const ::java::io::Reader & a1, jint a2, const ::java::util::Set & a3) : ::org::apache::lucene::analysis::Tokenizer(env->newObject(initializeClass, &mids$, mid_init$_60b8ae4e, a0.this$, a1.this$, a2, a3.this$)) {}

          void WikipediaTokenizer::close() const
          {
            env->callVoidMethod(this$, mids$[mid_close_54c6a166]);
          }

          void WikipediaTokenizer::end() const
          {
            env->callVoidMethod(this$, mids$[mid_end_54c6a166]);
          }

          jboolean WikipediaTokenizer::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_54c6a16a]);
          }

          void WikipediaTokenizer::reset() const
          {
            env->callVoidMethod(this$, mids$[mid_reset_54c6a166]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace wikipedia {
          static PyObject *t_WikipediaTokenizer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_WikipediaTokenizer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_WikipediaTokenizer_init_(t_WikipediaTokenizer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_WikipediaTokenizer_close(t_WikipediaTokenizer *self, PyObject *args);
          static PyObject *t_WikipediaTokenizer_end(t_WikipediaTokenizer *self, PyObject *args);
          static PyObject *t_WikipediaTokenizer_incrementToken(t_WikipediaTokenizer *self, PyObject *args);
          static PyObject *t_WikipediaTokenizer_reset(t_WikipediaTokenizer *self, PyObject *args);

          static PyMethodDef t_WikipediaTokenizer__methods_[] = {
            DECLARE_METHOD(t_WikipediaTokenizer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_WikipediaTokenizer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_WikipediaTokenizer, close, METH_VARARGS),
            DECLARE_METHOD(t_WikipediaTokenizer, end, METH_VARARGS),
            DECLARE_METHOD(t_WikipediaTokenizer, incrementToken, METH_VARARGS),
            DECLARE_METHOD(t_WikipediaTokenizer, reset, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(WikipediaTokenizer, t_WikipediaTokenizer, ::org::apache::lucene::analysis::Tokenizer, WikipediaTokenizer, t_WikipediaTokenizer_init_, 0, 0, 0, 0, 0);

          void t_WikipediaTokenizer::install(PyObject *module)
          {
            installType(&PY_TYPE(WikipediaTokenizer), module, "WikipediaTokenizer", 0);
          }

          void t_WikipediaTokenizer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(WikipediaTokenizer).tp_dict, "class_", make_descriptor(WikipediaTokenizer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(WikipediaTokenizer).tp_dict, "wrapfn_", make_descriptor(t_WikipediaTokenizer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(WikipediaTokenizer).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(WikipediaTokenizer::initializeClass);
            PyDict_SetItemString(PY_TYPE(WikipediaTokenizer).tp_dict, "ACRONYM_ID", make_descriptor(WikipediaTokenizer::ACRONYM_ID));
            PyDict_SetItemString(PY_TYPE(WikipediaTokenizer).tp_dict, "ALPHANUM_ID", make_descriptor(WikipediaTokenizer::ALPHANUM_ID));
            PyDict_SetItemString(PY_TYPE(WikipediaTokenizer).tp_dict, "APOSTROPHE_ID", make_descriptor(WikipediaTokenizer::APOSTROPHE_ID));
            PyDict_SetItemString(PY_TYPE(WikipediaTokenizer).tp_dict, "BOLD", make_descriptor(j2p(*WikipediaTokenizer::BOLD)));
            PyDict_SetItemString(PY_TYPE(WikipediaTokenizer).tp_dict, "BOLD_ID", make_descriptor(WikipediaTokenizer::BOLD_ID));
            PyDict_SetItemString(PY_TYPE(WikipediaTokenizer).tp_dict, "BOLD_ITALICS", make_descriptor(j2p(*WikipediaTokenizer::BOLD_ITALICS)));
            PyDict_SetItemString(PY_TYPE(WikipediaTokenizer).tp_dict, "BOLD_ITALICS_ID", make_descriptor(WikipediaTokenizer::BOLD_ITALICS_ID));
            PyDict_SetItemString(PY_TYPE(WikipediaTokenizer).tp_dict, "BOTH", make_descriptor(WikipediaTokenizer::BOTH));
            PyDict_SetItemString(PY_TYPE(WikipediaTokenizer).tp_dict, "CATEGORY", make_descriptor(j2p(*WikipediaTokenizer::CATEGORY)));
            PyDict_SetItemString(PY_TYPE(WikipediaTokenizer).tp_dict, "CATEGORY_ID", make_descriptor(WikipediaTokenizer::CATEGORY_ID));
            PyDict_SetItemString(PY_TYPE(WikipediaTokenizer).tp_dict, "CITATION", make_descriptor(j2p(*WikipediaTokenizer::CITATION)));
            PyDict_SetItemString(PY_TYPE(WikipediaTokenizer).tp_dict, "CITATION_ID", make_descriptor(WikipediaTokenizer::CITATION_ID));
            PyDict_SetItemString(PY_TYPE(WikipediaTokenizer).tp_dict, "CJ_ID", make_descriptor(WikipediaTokenizer::CJ_ID));
            PyDict_SetItemString(PY_TYPE(WikipediaTokenizer).tp_dict, "COMPANY_ID", make_descriptor(WikipediaTokenizer::COMPANY_ID));
            PyDict_SetItemString(PY_TYPE(WikipediaTokenizer).tp_dict, "EMAIL_ID", make_descriptor(WikipediaTokenizer::EMAIL_ID));
            PyDict_SetItemString(PY_TYPE(WikipediaTokenizer).tp_dict, "EXTERNAL_LINK", make_descriptor(j2p(*WikipediaTokenizer::EXTERNAL_LINK)));
            PyDict_SetItemString(PY_TYPE(WikipediaTokenizer).tp_dict, "EXTERNAL_LINK_ID", make_descriptor(WikipediaTokenizer::EXTERNAL_LINK_ID));
            PyDict_SetItemString(PY_TYPE(WikipediaTokenizer).tp_dict, "EXTERNAL_LINK_URL", make_descriptor(j2p(*WikipediaTokenizer::EXTERNAL_LINK_URL)));
            PyDict_SetItemString(PY_TYPE(WikipediaTokenizer).tp_dict, "EXTERNAL_LINK_URL_ID", make_descriptor(WikipediaTokenizer::EXTERNAL_LINK_URL_ID));
            PyDict_SetItemString(PY_TYPE(WikipediaTokenizer).tp_dict, "HEADING", make_descriptor(j2p(*WikipediaTokenizer::HEADING)));
            PyDict_SetItemString(PY_TYPE(WikipediaTokenizer).tp_dict, "HEADING_ID", make_descriptor(WikipediaTokenizer::HEADING_ID));
            PyDict_SetItemString(PY_TYPE(WikipediaTokenizer).tp_dict, "HOST_ID", make_descriptor(WikipediaTokenizer::HOST_ID));
            PyDict_SetItemString(PY_TYPE(WikipediaTokenizer).tp_dict, "INTERNAL_LINK", make_descriptor(j2p(*WikipediaTokenizer::INTERNAL_LINK)));
            PyDict_SetItemString(PY_TYPE(WikipediaTokenizer).tp_dict, "INTERNAL_LINK_ID", make_descriptor(WikipediaTokenizer::INTERNAL_LINK_ID));
            PyDict_SetItemString(PY_TYPE(WikipediaTokenizer).tp_dict, "ITALICS", make_descriptor(j2p(*WikipediaTokenizer::ITALICS)));
            PyDict_SetItemString(PY_TYPE(WikipediaTokenizer).tp_dict, "ITALICS_ID", make_descriptor(WikipediaTokenizer::ITALICS_ID));
            PyDict_SetItemString(PY_TYPE(WikipediaTokenizer).tp_dict, "NUM_ID", make_descriptor(WikipediaTokenizer::NUM_ID));
            PyDict_SetItemString(PY_TYPE(WikipediaTokenizer).tp_dict, "SUB_HEADING", make_descriptor(j2p(*WikipediaTokenizer::SUB_HEADING)));
            PyDict_SetItemString(PY_TYPE(WikipediaTokenizer).tp_dict, "SUB_HEADING_ID", make_descriptor(WikipediaTokenizer::SUB_HEADING_ID));
            PyDict_SetItemString(PY_TYPE(WikipediaTokenizer).tp_dict, "TOKENS_ONLY", make_descriptor(WikipediaTokenizer::TOKENS_ONLY));
            PyDict_SetItemString(PY_TYPE(WikipediaTokenizer).tp_dict, "TOKEN_TYPES", make_descriptor(JArray<jstring>(WikipediaTokenizer::TOKEN_TYPES->this$).wrap()));
            PyDict_SetItemString(PY_TYPE(WikipediaTokenizer).tp_dict, "UNTOKENIZED_ONLY", make_descriptor(WikipediaTokenizer::UNTOKENIZED_ONLY));
            PyDict_SetItemString(PY_TYPE(WikipediaTokenizer).tp_dict, "UNTOKENIZED_TOKEN_FLAG", make_descriptor(WikipediaTokenizer::UNTOKENIZED_TOKEN_FLAG));
          }

          static PyObject *t_WikipediaTokenizer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, WikipediaTokenizer::initializeClass, 1)))
              return NULL;
            return t_WikipediaTokenizer::wrap_Object(WikipediaTokenizer(((t_WikipediaTokenizer *) arg)->object.this$));
          }
          static PyObject *t_WikipediaTokenizer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, WikipediaTokenizer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_WikipediaTokenizer_init_(t_WikipediaTokenizer *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::java::io::Reader a0((jobject) NULL);
                WikipediaTokenizer object((jobject) NULL);

                if (!parseArgs(args, "k", ::java::io::Reader::initializeClass, &a0))
                {
                  INT_CALL(object = WikipediaTokenizer(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 3:
              {
                ::java::io::Reader a0((jobject) NULL);
                jint a1;
                ::java::util::Set a2((jobject) NULL);
                PyTypeObject **p2;
                WikipediaTokenizer object((jobject) NULL);

                if (!parseArgs(args, "kIK", ::java::io::Reader::initializeClass, ::java::util::Set::initializeClass, &a0, &a1, &a2, &p2, ::java::util::t_Set::parameters_))
                {
                  INT_CALL(object = WikipediaTokenizer(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 4:
              {
                ::org::apache::lucene::util::AttributeFactory a0((jobject) NULL);
                ::java::io::Reader a1((jobject) NULL);
                jint a2;
                ::java::util::Set a3((jobject) NULL);
                PyTypeObject **p3;
                WikipediaTokenizer object((jobject) NULL);

                if (!parseArgs(args, "kkIK", ::org::apache::lucene::util::AttributeFactory::initializeClass, ::java::io::Reader::initializeClass, ::java::util::Set::initializeClass, &a0, &a1, &a2, &a3, &p3, ::java::util::t_Set::parameters_))
                {
                  INT_CALL(object = WikipediaTokenizer(a0, a1, a2, a3));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_WikipediaTokenizer_close(t_WikipediaTokenizer *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.close());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(WikipediaTokenizer), (PyObject *) self, "close", args, 2);
          }

          static PyObject *t_WikipediaTokenizer_end(t_WikipediaTokenizer *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.end());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(WikipediaTokenizer), (PyObject *) self, "end", args, 2);
          }

          static PyObject *t_WikipediaTokenizer_incrementToken(t_WikipediaTokenizer *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(WikipediaTokenizer), (PyObject *) self, "incrementToken", args, 2);
          }

          static PyObject *t_WikipediaTokenizer_reset(t_WikipediaTokenizer *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.reset());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(WikipediaTokenizer), (PyObject *) self, "reset", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/MultiDocsAndPositionsEnum.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "org/apache/lucene/index/MultiDocsAndPositionsEnum$EnumWithSlice.h"
#include "org/apache/lucene/index/MultiTermsEnum.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *MultiDocsAndPositionsEnum::class$ = NULL;
        jmethodID *MultiDocsAndPositionsEnum::mids$ = NULL;
        bool MultiDocsAndPositionsEnum::live$ = false;

        jclass MultiDocsAndPositionsEnum::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/MultiDocsAndPositionsEnum");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_7d44bb06] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/MultiTermsEnum;I)V");
            mids$[mid_advance_39c7bd23] = env->getMethodID(cls, "advance", "(I)I");
            mids$[mid_canReuse_4fe73d2c] = env->getMethodID(cls, "canReuse", "(Lorg/apache/lucene/index/MultiTermsEnum;)Z");
            mids$[mid_cost_54c6a17a] = env->getMethodID(cls, "cost", "()J");
            mids$[mid_docID_54c6a179] = env->getMethodID(cls, "docID", "()I");
            mids$[mid_endOffset_54c6a179] = env->getMethodID(cls, "endOffset", "()I");
            mids$[mid_freq_54c6a179] = env->getMethodID(cls, "freq", "()I");
            mids$[mid_getNumSubs_54c6a179] = env->getMethodID(cls, "getNumSubs", "()I");
            mids$[mid_getPayload_4ae19461] = env->getMethodID(cls, "getPayload", "()Lorg/apache/lucene/util/BytesRef;");
            mids$[mid_getSubs_451af4aa] = env->getMethodID(cls, "getSubs", "()[Lorg/apache/lucene/index/MultiDocsAndPositionsEnum$EnumWithSlice;");
            mids$[mid_nextDoc_54c6a179] = env->getMethodID(cls, "nextDoc", "()I");
            mids$[mid_nextPosition_54c6a179] = env->getMethodID(cls, "nextPosition", "()I");
            mids$[mid_reset_7ce62fbc] = env->getMethodID(cls, "reset", "([Lorg/apache/lucene/index/MultiDocsAndPositionsEnum$EnumWithSlice;I)Lorg/apache/lucene/index/MultiDocsAndPositionsEnum;");
            mids$[mid_startOffset_54c6a179] = env->getMethodID(cls, "startOffset", "()I");
            mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        MultiDocsAndPositionsEnum::MultiDocsAndPositionsEnum(const ::org::apache::lucene::index::MultiTermsEnum & a0, jint a1) : ::org::apache::lucene::index::DocsAndPositionsEnum(env->newObject(initializeClass, &mids$, mid_init$_7d44bb06, a0.this$, a1)) {}

        jint MultiDocsAndPositionsEnum::advance(jint a0) const
        {
          return env->callIntMethod(this$, mids$[mid_advance_39c7bd23], a0);
        }

        jboolean MultiDocsAndPositionsEnum::canReuse(const ::org::apache::lucene::index::MultiTermsEnum & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_canReuse_4fe73d2c], a0.this$);
        }

        jlong MultiDocsAndPositionsEnum::cost() const
        {
          return env->callLongMethod(this$, mids$[mid_cost_54c6a17a]);
        }

        jint MultiDocsAndPositionsEnum::docID() const
        {
          return env->callIntMethod(this$, mids$[mid_docID_54c6a179]);
        }

        jint MultiDocsAndPositionsEnum::endOffset() const
        {
          return env->callIntMethod(this$, mids$[mid_endOffset_54c6a179]);
        }

        jint MultiDocsAndPositionsEnum::freq() const
        {
          return env->callIntMethod(this$, mids$[mid_freq_54c6a179]);
        }

        jint MultiDocsAndPositionsEnum::getNumSubs() const
        {
          return env->callIntMethod(this$, mids$[mid_getNumSubs_54c6a179]);
        }

        ::org::apache::lucene::util::BytesRef MultiDocsAndPositionsEnum::getPayload() const
        {
          return ::org::apache::lucene::util::BytesRef(env->callObjectMethod(this$, mids$[mid_getPayload_4ae19461]));
        }

        JArray< ::org::apache::lucene::index::MultiDocsAndPositionsEnum$EnumWithSlice > MultiDocsAndPositionsEnum::getSubs() const
        {
          return JArray< ::org::apache::lucene::index::MultiDocsAndPositionsEnum$EnumWithSlice >(env->callObjectMethod(this$, mids$[mid_getSubs_451af4aa]));
        }

        jint MultiDocsAndPositionsEnum::nextDoc() const
        {
          return env->callIntMethod(this$, mids$[mid_nextDoc_54c6a179]);
        }

        jint MultiDocsAndPositionsEnum::nextPosition() const
        {
          return env->callIntMethod(this$, mids$[mid_nextPosition_54c6a179]);
        }

        MultiDocsAndPositionsEnum MultiDocsAndPositionsEnum::reset(const JArray< ::org::apache::lucene::index::MultiDocsAndPositionsEnum$EnumWithSlice > & a0, jint a1) const
        {
          return MultiDocsAndPositionsEnum(env->callObjectMethod(this$, mids$[mid_reset_7ce62fbc], a0.this$, a1));
        }

        jint MultiDocsAndPositionsEnum::startOffset() const
        {
          return env->callIntMethod(this$, mids$[mid_startOffset_54c6a179]);
        }

        ::java::lang::String MultiDocsAndPositionsEnum::toString() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_MultiDocsAndPositionsEnum_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_MultiDocsAndPositionsEnum_instance_(PyTypeObject *type, PyObject *arg);
        static int t_MultiDocsAndPositionsEnum_init_(t_MultiDocsAndPositionsEnum *self, PyObject *args, PyObject *kwds);
        static PyObject *t_MultiDocsAndPositionsEnum_advance(t_MultiDocsAndPositionsEnum *self, PyObject *args);
        static PyObject *t_MultiDocsAndPositionsEnum_canReuse(t_MultiDocsAndPositionsEnum *self, PyObject *arg);
        static PyObject *t_MultiDocsAndPositionsEnum_cost(t_MultiDocsAndPositionsEnum *self, PyObject *args);
        static PyObject *t_MultiDocsAndPositionsEnum_docID(t_MultiDocsAndPositionsEnum *self, PyObject *args);
        static PyObject *t_MultiDocsAndPositionsEnum_endOffset(t_MultiDocsAndPositionsEnum *self, PyObject *args);
        static PyObject *t_MultiDocsAndPositionsEnum_freq(t_MultiDocsAndPositionsEnum *self, PyObject *args);
        static PyObject *t_MultiDocsAndPositionsEnum_getNumSubs(t_MultiDocsAndPositionsEnum *self);
        static PyObject *t_MultiDocsAndPositionsEnum_getPayload(t_MultiDocsAndPositionsEnum *self, PyObject *args);
        static PyObject *t_MultiDocsAndPositionsEnum_getSubs(t_MultiDocsAndPositionsEnum *self);
        static PyObject *t_MultiDocsAndPositionsEnum_nextDoc(t_MultiDocsAndPositionsEnum *self, PyObject *args);
        static PyObject *t_MultiDocsAndPositionsEnum_nextPosition(t_MultiDocsAndPositionsEnum *self, PyObject *args);
        static PyObject *t_MultiDocsAndPositionsEnum_reset(t_MultiDocsAndPositionsEnum *self, PyObject *args);
        static PyObject *t_MultiDocsAndPositionsEnum_startOffset(t_MultiDocsAndPositionsEnum *self, PyObject *args);
        static PyObject *t_MultiDocsAndPositionsEnum_toString(t_MultiDocsAndPositionsEnum *self, PyObject *args);
        static PyObject *t_MultiDocsAndPositionsEnum_get__numSubs(t_MultiDocsAndPositionsEnum *self, void *data);
        static PyObject *t_MultiDocsAndPositionsEnum_get__payload(t_MultiDocsAndPositionsEnum *self, void *data);
        static PyObject *t_MultiDocsAndPositionsEnum_get__subs(t_MultiDocsAndPositionsEnum *self, void *data);
        static PyGetSetDef t_MultiDocsAndPositionsEnum__fields_[] = {
          DECLARE_GET_FIELD(t_MultiDocsAndPositionsEnum, numSubs),
          DECLARE_GET_FIELD(t_MultiDocsAndPositionsEnum, payload),
          DECLARE_GET_FIELD(t_MultiDocsAndPositionsEnum, subs),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_MultiDocsAndPositionsEnum__methods_[] = {
          DECLARE_METHOD(t_MultiDocsAndPositionsEnum, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MultiDocsAndPositionsEnum, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MultiDocsAndPositionsEnum, advance, METH_VARARGS),
          DECLARE_METHOD(t_MultiDocsAndPositionsEnum, canReuse, METH_O),
          DECLARE_METHOD(t_MultiDocsAndPositionsEnum, cost, METH_VARARGS),
          DECLARE_METHOD(t_MultiDocsAndPositionsEnum, docID, METH_VARARGS),
          DECLARE_METHOD(t_MultiDocsAndPositionsEnum, endOffset, METH_VARARGS),
          DECLARE_METHOD(t_MultiDocsAndPositionsEnum, freq, METH_VARARGS),
          DECLARE_METHOD(t_MultiDocsAndPositionsEnum, getNumSubs, METH_NOARGS),
          DECLARE_METHOD(t_MultiDocsAndPositionsEnum, getPayload, METH_VARARGS),
          DECLARE_METHOD(t_MultiDocsAndPositionsEnum, getSubs, METH_NOARGS),
          DECLARE_METHOD(t_MultiDocsAndPositionsEnum, nextDoc, METH_VARARGS),
          DECLARE_METHOD(t_MultiDocsAndPositionsEnum, nextPosition, METH_VARARGS),
          DECLARE_METHOD(t_MultiDocsAndPositionsEnum, reset, METH_VARARGS),
          DECLARE_METHOD(t_MultiDocsAndPositionsEnum, startOffset, METH_VARARGS),
          DECLARE_METHOD(t_MultiDocsAndPositionsEnum, toString, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(MultiDocsAndPositionsEnum, t_MultiDocsAndPositionsEnum, ::org::apache::lucene::index::DocsAndPositionsEnum, MultiDocsAndPositionsEnum, t_MultiDocsAndPositionsEnum_init_, 0, 0, t_MultiDocsAndPositionsEnum__fields_, 0, 0);

        void t_MultiDocsAndPositionsEnum::install(PyObject *module)
        {
          installType(&PY_TYPE(MultiDocsAndPositionsEnum), module, "MultiDocsAndPositionsEnum", 0);
          PyDict_SetItemString(PY_TYPE(MultiDocsAndPositionsEnum).tp_dict, "EnumWithSlice", make_descriptor(&PY_TYPE(MultiDocsAndPositionsEnum$EnumWithSlice)));
        }

        void t_MultiDocsAndPositionsEnum::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(MultiDocsAndPositionsEnum).tp_dict, "class_", make_descriptor(MultiDocsAndPositionsEnum::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(MultiDocsAndPositionsEnum).tp_dict, "wrapfn_", make_descriptor(t_MultiDocsAndPositionsEnum::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(MultiDocsAndPositionsEnum).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_MultiDocsAndPositionsEnum_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, MultiDocsAndPositionsEnum::initializeClass, 1)))
            return NULL;
          return t_MultiDocsAndPositionsEnum::wrap_Object(MultiDocsAndPositionsEnum(((t_MultiDocsAndPositionsEnum *) arg)->object.this$));
        }
        static PyObject *t_MultiDocsAndPositionsEnum_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, MultiDocsAndPositionsEnum::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_MultiDocsAndPositionsEnum_init_(t_MultiDocsAndPositionsEnum *self, PyObject *args, PyObject *kwds)
        {
          ::org::apache::lucene::index::MultiTermsEnum a0((jobject) NULL);
          jint a1;
          MultiDocsAndPositionsEnum object((jobject) NULL);

          if (!parseArgs(args, "kI", ::org::apache::lucene::index::MultiTermsEnum::initializeClass, &a0, &a1))
          {
            INT_CALL(object = MultiDocsAndPositionsEnum(a0, a1));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_MultiDocsAndPositionsEnum_advance(t_MultiDocsAndPositionsEnum *self, PyObject *args)
        {
          jint a0;
          jint result;

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(result = self->object.advance(a0));
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(MultiDocsAndPositionsEnum), (PyObject *) self, "advance", args, 2);
        }

        static PyObject *t_MultiDocsAndPositionsEnum_canReuse(t_MultiDocsAndPositionsEnum *self, PyObject *arg)
        {
          ::org::apache::lucene::index::MultiTermsEnum a0((jobject) NULL);
          jboolean result;

          if (!parseArg(arg, "k", ::org::apache::lucene::index::MultiTermsEnum::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.canReuse(a0));
            Py_RETURN_BOOL(result);
          }

          PyErr_SetArgsError((PyObject *) self, "canReuse", arg);
          return NULL;
        }

        static PyObject *t_MultiDocsAndPositionsEnum_cost(t_MultiDocsAndPositionsEnum *self, PyObject *args)
        {
          jlong result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.cost());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          return callSuper(&PY_TYPE(MultiDocsAndPositionsEnum), (PyObject *) self, "cost", args, 2);
        }

        static PyObject *t_MultiDocsAndPositionsEnum_docID(t_MultiDocsAndPositionsEnum *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.docID());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(MultiDocsAndPositionsEnum), (PyObject *) self, "docID", args, 2);
        }

        static PyObject *t_MultiDocsAndPositionsEnum_endOffset(t_MultiDocsAndPositionsEnum *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.endOffset());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(MultiDocsAndPositionsEnum), (PyObject *) self, "endOffset", args, 2);
        }

        static PyObject *t_MultiDocsAndPositionsEnum_freq(t_MultiDocsAndPositionsEnum *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.freq());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(MultiDocsAndPositionsEnum), (PyObject *) self, "freq", args, 2);
        }

        static PyObject *t_MultiDocsAndPositionsEnum_getNumSubs(t_MultiDocsAndPositionsEnum *self)
        {
          jint result;
          OBJ_CALL(result = self->object.getNumSubs());
          return PyInt_FromLong((long) result);
        }

        static PyObject *t_MultiDocsAndPositionsEnum_getPayload(t_MultiDocsAndPositionsEnum *self, PyObject *args)
        {
          ::org::apache::lucene::util::BytesRef result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.getPayload());
            return ::org::apache::lucene::util::t_BytesRef::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(MultiDocsAndPositionsEnum), (PyObject *) self, "getPayload", args, 2);
        }

        static PyObject *t_MultiDocsAndPositionsEnum_getSubs(t_MultiDocsAndPositionsEnum *self)
        {
          JArray< ::org::apache::lucene::index::MultiDocsAndPositionsEnum$EnumWithSlice > result((jobject) NULL);
          OBJ_CALL(result = self->object.getSubs());
          return JArray<jobject>(result.this$).wrap(::org::apache::lucene::index::t_MultiDocsAndPositionsEnum$EnumWithSlice::wrap_jobject);
        }

        static PyObject *t_MultiDocsAndPositionsEnum_nextDoc(t_MultiDocsAndPositionsEnum *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.nextDoc());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(MultiDocsAndPositionsEnum), (PyObject *) self, "nextDoc", args, 2);
        }

        static PyObject *t_MultiDocsAndPositionsEnum_nextPosition(t_MultiDocsAndPositionsEnum *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.nextPosition());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(MultiDocsAndPositionsEnum), (PyObject *) self, "nextPosition", args, 2);
        }

        static PyObject *t_MultiDocsAndPositionsEnum_reset(t_MultiDocsAndPositionsEnum *self, PyObject *args)
        {
          JArray< ::org::apache::lucene::index::MultiDocsAndPositionsEnum$EnumWithSlice > a0((jobject) NULL);
          jint a1;
          MultiDocsAndPositionsEnum result((jobject) NULL);

          if (!parseArgs(args, "[kI", ::org::apache::lucene::index::MultiDocsAndPositionsEnum$EnumWithSlice::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = self->object.reset(a0, a1));
            return t_MultiDocsAndPositionsEnum::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "reset", args);
          return NULL;
        }

        static PyObject *t_MultiDocsAndPositionsEnum_startOffset(t_MultiDocsAndPositionsEnum *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.startOffset());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(MultiDocsAndPositionsEnum), (PyObject *) self, "startOffset", args, 2);
        }

        static PyObject *t_MultiDocsAndPositionsEnum_toString(t_MultiDocsAndPositionsEnum *self, PyObject *args)
        {
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.toString());
            return j2p(result);
          }

          return callSuper(&PY_TYPE(MultiDocsAndPositionsEnum), (PyObject *) self, "toString", args, 2);
        }

        static PyObject *t_MultiDocsAndPositionsEnum_get__numSubs(t_MultiDocsAndPositionsEnum *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object.getNumSubs());
          return PyInt_FromLong((long) value);
        }

        static PyObject *t_MultiDocsAndPositionsEnum_get__payload(t_MultiDocsAndPositionsEnum *self, void *data)
        {
          ::org::apache::lucene::util::BytesRef value((jobject) NULL);
          OBJ_CALL(value = self->object.getPayload());
          return ::org::apache::lucene::util::t_BytesRef::wrap_Object(value);
        }

        static PyObject *t_MultiDocsAndPositionsEnum_get__subs(t_MultiDocsAndPositionsEnum *self, void *data)
        {
          JArray< ::org::apache::lucene::index::MultiDocsAndPositionsEnum$EnumWithSlice > value((jobject) NULL);
          OBJ_CALL(value = self->object.getSubs());
          return JArray<jobject>(value.this$).wrap(::org::apache::lucene::index::t_MultiDocsAndPositionsEnum$EnumWithSlice::wrap_jobject);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/pylucene/store/PythonDirectory.h"
#include "org/apache/lucene/store/Lock.h"
#include "java/lang/Class.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/store/IOContext.h"
#include "java/lang/String.h"
#include "org/apache/lucene/store/IndexInput.h"
#include "java/util/Collection.h"
#include "org/apache/lucene/store/LockFactory.h"
#include "java/lang/Throwable.h"
#include "org/apache/lucene/store/IndexOutput.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace pylucene {
      namespace store {

        ::java::lang::Class *PythonDirectory::class$ = NULL;
        jmethodID *PythonDirectory::mids$ = NULL;
        bool PythonDirectory::live$ = false;

        jclass PythonDirectory::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/pylucene/store/PythonDirectory");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_clearLock_5fdc3f48] = env->getMethodID(cls, "clearLock", "(Ljava/lang/String;)V");
            mids$[mid_close_54c6a166] = env->getMethodID(cls, "close", "()V");
            mids$[mid_createOutput_5ad5358d] = env->getMethodID(cls, "createOutput", "(Ljava/lang/String;Lorg/apache/lucene/store/IOContext;)Lorg/apache/lucene/store/IndexOutput;");
            mids$[mid_deleteFile_5fdc3f48] = env->getMethodID(cls, "deleteFile", "(Ljava/lang/String;)V");
            mids$[mid_fileExists_5fdc3f44] = env->getMethodID(cls, "fileExists", "(Ljava/lang/String;)Z");
            mids$[mid_fileLength_5fdc3f54] = env->getMethodID(cls, "fileLength", "(Ljava/lang/String;)J");
            mids$[mid_fileModified_5fdc3f54] = env->getMethodID(cls, "fileModified", "(Ljava/lang/String;)J");
            mids$[mid_finalize_54c6a166] = env->getMethodID(cls, "finalize", "()V");
            mids$[mid_getLockFactory_e4e9c36d] = env->getMethodID(cls, "getLockFactory", "()Lorg/apache/lucene/store/LockFactory;");
            mids$[mid_listAll_2e6d5245] = env->getMethodID(cls, "listAll", "()[Ljava/lang/String;");
            mids$[mid_makeLock_f26bb9a8] = env->getMethodID(cls, "makeLock", "(Ljava/lang/String;)Lorg/apache/lucene/store/Lock;");
            mids$[mid_openInput_3e1b5375] = env->getMethodID(cls, "openInput", "(Ljava/lang/String;Lorg/apache/lucene/store/IOContext;)Lorg/apache/lucene/store/IndexInput;");
            mids$[mid_pythonDecRef_54c6a166] = env->getMethodID(cls, "pythonDecRef", "()V");
            mids$[mid_pythonExtension_54c6a17a] = env->getMethodID(cls, "pythonExtension", "()J");
            mids$[mid_pythonExtension_0ee6df2f] = env->getMethodID(cls, "pythonExtension", "(J)V");
            mids$[mid_setLockFactory_9892eb8c] = env->getMethodID(cls, "setLockFactory", "(Lorg/apache/lucene/store/LockFactory;)V");
            mids$[mid_sync_5fdc3f48] = env->getMethodID(cls, "sync", "(Ljava/lang/String;)V");
            mids$[mid_sync_9bfb370d] = env->getMethodID(cls, "sync", "(Ljava/util/Collection;)V");
            mids$[mid_touchFile_5fdc3f48] = env->getMethodID(cls, "touchFile", "(Ljava/lang/String;)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        PythonDirectory::PythonDirectory() : ::org::apache::lucene::store::Directory(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        void PythonDirectory::finalize() const
        {
          env->callVoidMethod(this$, mids$[mid_finalize_54c6a166]);
        }

        jlong PythonDirectory::pythonExtension() const
        {
          return env->callLongMethod(this$, mids$[mid_pythonExtension_54c6a17a]);
        }

        void PythonDirectory::pythonExtension(jlong a0) const
        {
          env->callVoidMethod(this$, mids$[mid_pythonExtension_0ee6df2f], a0);
        }

        void PythonDirectory::sync(const ::java::util::Collection & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_sync_9bfb370d], a0.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace pylucene {
      namespace store {
        static PyObject *t_PythonDirectory_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_PythonDirectory_instance_(PyTypeObject *type, PyObject *arg);
        static int t_PythonDirectory_init_(t_PythonDirectory *self, PyObject *args, PyObject *kwds);
        static PyObject *t_PythonDirectory_finalize(t_PythonDirectory *self);
        static PyObject *t_PythonDirectory_pythonExtension(t_PythonDirectory *self, PyObject *args);
        static PyObject *t_PythonDirectory_sync(t_PythonDirectory *self, PyObject *args);
        static void JNICALL t_PythonDirectory_clearLock0(JNIEnv *jenv, jobject jobj, jobject a0);
        static void JNICALL t_PythonDirectory_close1(JNIEnv *jenv, jobject jobj);
        static jobject JNICALL t_PythonDirectory_createOutput2(JNIEnv *jenv, jobject jobj, jobject a0, jobject a1);
        static void JNICALL t_PythonDirectory_deleteFile3(JNIEnv *jenv, jobject jobj, jobject a0);
        static jboolean JNICALL t_PythonDirectory_fileExists4(JNIEnv *jenv, jobject jobj, jobject a0);
        static jlong JNICALL t_PythonDirectory_fileLength5(JNIEnv *jenv, jobject jobj, jobject a0);
        static jlong JNICALL t_PythonDirectory_fileModified6(JNIEnv *jenv, jobject jobj, jobject a0);
        static jobject JNICALL t_PythonDirectory_getLockFactory7(JNIEnv *jenv, jobject jobj);
        static jobject JNICALL t_PythonDirectory_listAll8(JNIEnv *jenv, jobject jobj);
        static jobject JNICALL t_PythonDirectory_makeLock9(JNIEnv *jenv, jobject jobj, jobject a0);
        static jobject JNICALL t_PythonDirectory_openInput10(JNIEnv *jenv, jobject jobj, jobject a0, jobject a1);
        static void JNICALL t_PythonDirectory_pythonDecRef11(JNIEnv *jenv, jobject jobj);
        static void JNICALL t_PythonDirectory_setLockFactory12(JNIEnv *jenv, jobject jobj, jobject a0);
        static void JNICALL t_PythonDirectory_sync13(JNIEnv *jenv, jobject jobj, jobject a0);
        static void JNICALL t_PythonDirectory_touchFile14(JNIEnv *jenv, jobject jobj, jobject a0);
        static PyObject *t_PythonDirectory_get__self(t_PythonDirectory *self, void *data);
        static PyGetSetDef t_PythonDirectory__fields_[] = {
          DECLARE_GET_FIELD(t_PythonDirectory, self),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_PythonDirectory__methods_[] = {
          DECLARE_METHOD(t_PythonDirectory, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PythonDirectory, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PythonDirectory, finalize, METH_NOARGS),
          DECLARE_METHOD(t_PythonDirectory, pythonExtension, METH_VARARGS),
          DECLARE_METHOD(t_PythonDirectory, sync, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(PythonDirectory, t_PythonDirectory, ::org::apache::lucene::store::Directory, PythonDirectory, t_PythonDirectory_init_, 0, 0, t_PythonDirectory__fields_, 0, 0);

        void t_PythonDirectory::install(PyObject *module)
        {
          installType(&PY_TYPE(PythonDirectory), module, "PythonDirectory", 1);
        }

        void t_PythonDirectory::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(PythonDirectory).tp_dict, "class_", make_descriptor(PythonDirectory::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(PythonDirectory).tp_dict, "wrapfn_", make_descriptor(t_PythonDirectory::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(PythonDirectory).tp_dict, "boxfn_", make_descriptor(boxObject));
          jclass cls = env->getClass(PythonDirectory::initializeClass);
          JNINativeMethod methods[] = {
            { "clearLock", "(Ljava/lang/String;)V", (void *) t_PythonDirectory_clearLock0 },
            { "close", "()V", (void *) t_PythonDirectory_close1 },
            { "createOutput", "(Ljava/lang/String;Lorg/apache/lucene/store/IOContext;)Lorg/apache/lucene/store/IndexOutput;", (void *) t_PythonDirectory_createOutput2 },
            { "deleteFile", "(Ljava/lang/String;)V", (void *) t_PythonDirectory_deleteFile3 },
            { "fileExists", "(Ljava/lang/String;)Z", (void *) t_PythonDirectory_fileExists4 },
            { "fileLength", "(Ljava/lang/String;)J", (void *) t_PythonDirectory_fileLength5 },
            { "fileModified", "(Ljava/lang/String;)J", (void *) t_PythonDirectory_fileModified6 },
            { "getLockFactory", "()Lorg/apache/lucene/store/LockFactory;", (void *) t_PythonDirectory_getLockFactory7 },
            { "listAll", "()[Ljava/lang/String;", (void *) t_PythonDirectory_listAll8 },
            { "makeLock", "(Ljava/lang/String;)Lorg/apache/lucene/store/Lock;", (void *) t_PythonDirectory_makeLock9 },
            { "openInput", "(Ljava/lang/String;Lorg/apache/lucene/store/IOContext;)Lorg/apache/lucene/store/IndexInput;", (void *) t_PythonDirectory_openInput10 },
            { "pythonDecRef", "()V", (void *) t_PythonDirectory_pythonDecRef11 },
            { "setLockFactory", "(Lorg/apache/lucene/store/LockFactory;)V", (void *) t_PythonDirectory_setLockFactory12 },
            { "sync", "(Ljava/lang/String;)V", (void *) t_PythonDirectory_sync13 },
            { "touchFile", "(Ljava/lang/String;)V", (void *) t_PythonDirectory_touchFile14 },
          };
          env->registerNatives(cls, methods, 15);
        }

        static PyObject *t_PythonDirectory_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, PythonDirectory::initializeClass, 1)))
            return NULL;
          return t_PythonDirectory::wrap_Object(PythonDirectory(((t_PythonDirectory *) arg)->object.this$));
        }
        static PyObject *t_PythonDirectory_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, PythonDirectory::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_PythonDirectory_init_(t_PythonDirectory *self, PyObject *args, PyObject *kwds)
        {
          PythonDirectory object((jobject) NULL);

          INT_CALL(object = PythonDirectory());
          self->object = object;

          Py_INCREF((PyObject *) self);
          self->object.pythonExtension((jlong) (Py_intptr_t) (void *) self);

          return 0;
        }

        static PyObject *t_PythonDirectory_finalize(t_PythonDirectory *self)
        {
          OBJ_CALL(self->object.finalize());
          Py_RETURN_NONE;
        }

        static PyObject *t_PythonDirectory_pythonExtension(t_PythonDirectory *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 0:
            {
              jlong result;
              OBJ_CALL(result = self->object.pythonExtension());
              return PyLong_FromLongLong((PY_LONG_LONG) result);
            }
            break;
           case 1:
            {
              jlong a0;

              if (!parseArgs(args, "J", &a0))
              {
                OBJ_CALL(self->object.pythonExtension(a0));
                Py_RETURN_NONE;
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "pythonExtension", args);
          return NULL;
        }

        static PyObject *t_PythonDirectory_sync(t_PythonDirectory *self, PyObject *args)
        {
          ::java::util::Collection a0((jobject) NULL);
          PyTypeObject **p0;

          if (!parseArgs(args, "K", ::java::util::Collection::initializeClass, &a0, &p0, ::java::util::t_Collection::parameters_))
          {
            OBJ_CALL(self->object.sync(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(PythonDirectory), (PyObject *) self, "sync", args, 2);
        }

        static void JNICALL t_PythonDirectory_clearLock0(JNIEnv *jenv, jobject jobj, jobject a0)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonDirectory::mids$[PythonDirectory::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          PyObject *o0 = env->fromJString((jstring) a0, 0);
          PyObject *result = PyObject_CallMethod(obj, "clearLock", "O", o0);
          Py_DECREF(o0);
          if (!result)
            throwPythonError();
          else
            Py_DECREF(result);
        }

        static void JNICALL t_PythonDirectory_close1(JNIEnv *jenv, jobject jobj)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonDirectory::mids$[PythonDirectory::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          PyObject *result = PyObject_CallMethod(obj, "close", "");
          if (!result)
            throwPythonError();
          else
            Py_DECREF(result);
        }

        static jobject JNICALL t_PythonDirectory_createOutput2(JNIEnv *jenv, jobject jobj, jobject a0, jobject a1)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonDirectory::mids$[PythonDirectory::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          ::org::apache::lucene::store::IndexOutput value((jobject) NULL);
          PyObject *o0 = env->fromJString((jstring) a0, 0);
          PyObject *o1 = ::org::apache::lucene::store::t_IOContext::wrap_Object(::org::apache::lucene::store::IOContext(a1));
          PyObject *result = PyObject_CallMethod(obj, "createOutput", "OO", o0, o1);
          Py_DECREF(o0);
          Py_DECREF(o1);
          if (!result)
            throwPythonError();
          else if (parseArg(result, "k", ::org::apache::lucene::store::IndexOutput::initializeClass, &value))
          {
            throwTypeError("createOutput", result);
            Py_DECREF(result);
          }
          else
          {
            jobj = jenv->NewLocalRef(value.this$);
            Py_DECREF(result);
            return jobj;
          }

          return (jobject) NULL;
        }

        static void JNICALL t_PythonDirectory_deleteFile3(JNIEnv *jenv, jobject jobj, jobject a0)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonDirectory::mids$[PythonDirectory::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          PyObject *o0 = env->fromJString((jstring) a0, 0);
          PyObject *result = PyObject_CallMethod(obj, "deleteFile", "O", o0);
          Py_DECREF(o0);
          if (!result)
            throwPythonError();
          else
            Py_DECREF(result);
        }

        static jboolean JNICALL t_PythonDirectory_fileExists4(JNIEnv *jenv, jobject jobj, jobject a0)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonDirectory::mids$[PythonDirectory::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          jboolean value;
          PyObject *o0 = env->fromJString((jstring) a0, 0);
          PyObject *result = PyObject_CallMethod(obj, "fileExists", "O", o0);
          Py_DECREF(o0);
          if (!result)
            throwPythonError();
          else if (parseArg(result, "Z", &value))
          {
            throwTypeError("fileExists", result);
            Py_DECREF(result);
          }
          else
          {
            Py_DECREF(result);
            return value;
          }

          return (jboolean) 0;
        }

        static jlong JNICALL t_PythonDirectory_fileLength5(JNIEnv *jenv, jobject jobj, jobject a0)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonDirectory::mids$[PythonDirectory::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          jlong value;
          PyObject *o0 = env->fromJString((jstring) a0, 0);
          PyObject *result = PyObject_CallMethod(obj, "fileLength", "O", o0);
          Py_DECREF(o0);
          if (!result)
            throwPythonError();
          else if (parseArg(result, "J", &value))
          {
            throwTypeError("fileLength", result);
            Py_DECREF(result);
          }
          else
          {
            Py_DECREF(result);
            return value;
          }

          return (jlong) 0;
        }

        static jlong JNICALL t_PythonDirectory_fileModified6(JNIEnv *jenv, jobject jobj, jobject a0)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonDirectory::mids$[PythonDirectory::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          jlong value;
          PyObject *o0 = env->fromJString((jstring) a0, 0);
          PyObject *result = PyObject_CallMethod(obj, "fileModified", "O", o0);
          Py_DECREF(o0);
          if (!result)
            throwPythonError();
          else if (parseArg(result, "J", &value))
          {
            throwTypeError("fileModified", result);
            Py_DECREF(result);
          }
          else
          {
            Py_DECREF(result);
            return value;
          }

          return (jlong) 0;
        }

        static jobject JNICALL t_PythonDirectory_getLockFactory7(JNIEnv *jenv, jobject jobj)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonDirectory::mids$[PythonDirectory::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          ::org::apache::lucene::store::LockFactory value((jobject) NULL);
          PyObject *result = PyObject_CallMethod(obj, "getLockFactory", "");
          if (!result)
            throwPythonError();
          else if (parseArg(result, "k", ::org::apache::lucene::store::LockFactory::initializeClass, &value))
          {
            throwTypeError("getLockFactory", result);
            Py_DECREF(result);
          }
          else
          {
            jobj = jenv->NewLocalRef(value.this$);
            Py_DECREF(result);
            return jobj;
          }

          return (jobject) NULL;
        }

        static jobject JNICALL t_PythonDirectory_listAll8(JNIEnv *jenv, jobject jobj)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonDirectory::mids$[PythonDirectory::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          JArray< ::java::lang::String > value((jobject) NULL);
          PyObject *result = PyObject_CallMethod(obj, "listAll", "");
          if (!result)
            throwPythonError();
          else if (parseArg(result, "[s", &value))
          {
            throwTypeError("listAll", result);
            Py_DECREF(result);
          }
          else
          {
            jobj = jenv->NewLocalRef(value.this$);
            Py_DECREF(result);
            return jobj;
          }

          return (jobject) NULL;
        }

        static jobject JNICALL t_PythonDirectory_makeLock9(JNIEnv *jenv, jobject jobj, jobject a0)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonDirectory::mids$[PythonDirectory::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          ::org::apache::lucene::store::Lock value((jobject) NULL);
          PyObject *o0 = env->fromJString((jstring) a0, 0);
          PyObject *result = PyObject_CallMethod(obj, "makeLock", "O", o0);
          Py_DECREF(o0);
          if (!result)
            throwPythonError();
          else if (parseArg(result, "k", ::org::apache::lucene::store::Lock::initializeClass, &value))
          {
            throwTypeError("makeLock", result);
            Py_DECREF(result);
          }
          else
          {
            jobj = jenv->NewLocalRef(value.this$);
            Py_DECREF(result);
            return jobj;
          }

          return (jobject) NULL;
        }

        static jobject JNICALL t_PythonDirectory_openInput10(JNIEnv *jenv, jobject jobj, jobject a0, jobject a1)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonDirectory::mids$[PythonDirectory::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          ::org::apache::lucene::store::IndexInput value((jobject) NULL);
          PyObject *o0 = env->fromJString((jstring) a0, 0);
          PyObject *o1 = ::org::apache::lucene::store::t_IOContext::wrap_Object(::org::apache::lucene::store::IOContext(a1));
          PyObject *result = PyObject_CallMethod(obj, "openInput", "OO", o0, o1);
          Py_DECREF(o0);
          Py_DECREF(o1);
          if (!result)
            throwPythonError();
          else if (parseArg(result, "k", ::org::apache::lucene::store::IndexInput::initializeClass, &value))
          {
            throwTypeError("openInput", result);
            Py_DECREF(result);
          }
          else
          {
            jobj = jenv->NewLocalRef(value.this$);
            Py_DECREF(result);
            return jobj;
          }

          return (jobject) NULL;
        }

        static void JNICALL t_PythonDirectory_pythonDecRef11(JNIEnv *jenv, jobject jobj)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonDirectory::mids$[PythonDirectory::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;

          if (obj != NULL)
          {
            jenv->CallVoidMethod(jobj, PythonDirectory::mids$[PythonDirectory::mid_pythonExtension_0ee6df2f], (jlong) 0);
            env->finalizeObject(jenv, obj);
          }
        }

        static void JNICALL t_PythonDirectory_setLockFactory12(JNIEnv *jenv, jobject jobj, jobject a0)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonDirectory::mids$[PythonDirectory::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          PyObject *o0 = ::org::apache::lucene::store::t_LockFactory::wrap_Object(::org::apache::lucene::store::LockFactory(a0));
          PyObject *result = PyObject_CallMethod(obj, "setLockFactory", "O", o0);
          Py_DECREF(o0);
          if (!result)
            throwPythonError();
          else
            Py_DECREF(result);
        }

        static void JNICALL t_PythonDirectory_sync13(JNIEnv *jenv, jobject jobj, jobject a0)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonDirectory::mids$[PythonDirectory::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          PyObject *o0 = env->fromJString((jstring) a0, 0);
          PyObject *result = PyObject_CallMethod(obj, "sync", "O", o0);
          Py_DECREF(o0);
          if (!result)
            throwPythonError();
          else
            Py_DECREF(result);
        }

        static void JNICALL t_PythonDirectory_touchFile14(JNIEnv *jenv, jobject jobj, jobject a0)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonDirectory::mids$[PythonDirectory::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          PyObject *o0 = env->fromJString((jstring) a0, 0);
          PyObject *result = PyObject_CallMethod(obj, "touchFile", "O", o0);
          Py_DECREF(o0);
          if (!result)
            throwPythonError();
          else
            Py_DECREF(result);
        }

        static PyObject *t_PythonDirectory_get__self(t_PythonDirectory *self, void *data)
        {
          jlong ptr;
          OBJ_CALL(ptr = self->object.pythonExtension());
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;

          if (obj != NULL)
          {
            Py_INCREF(obj);
            return obj;
          }
          else
            Py_RETURN_NONE;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/facet/taxonomy/ParallelTaxonomyArrays.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace taxonomy {

          ::java::lang::Class *ParallelTaxonomyArrays::class$ = NULL;
          jmethodID *ParallelTaxonomyArrays::mids$ = NULL;
          bool ParallelTaxonomyArrays::live$ = false;

          jclass ParallelTaxonomyArrays::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/facet/taxonomy/ParallelTaxonomyArrays");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_children_dab10e75] = env->getMethodID(cls, "children", "()[I");
              mids$[mid_parents_dab10e75] = env->getMethodID(cls, "parents", "()[I");
              mids$[mid_siblings_dab10e75] = env->getMethodID(cls, "siblings", "()[I");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ParallelTaxonomyArrays::ParallelTaxonomyArrays() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          JArray< jint > ParallelTaxonomyArrays::children() const
          {
            return JArray< jint >(env->callObjectMethod(this$, mids$[mid_children_dab10e75]));
          }

          JArray< jint > ParallelTaxonomyArrays::parents() const
          {
            return JArray< jint >(env->callObjectMethod(this$, mids$[mid_parents_dab10e75]));
          }

          JArray< jint > ParallelTaxonomyArrays::siblings() const
          {
            return JArray< jint >(env->callObjectMethod(this$, mids$[mid_siblings_dab10e75]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace taxonomy {
          static PyObject *t_ParallelTaxonomyArrays_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_ParallelTaxonomyArrays_instance_(PyTypeObject *type, PyObject *arg);
          static int t_ParallelTaxonomyArrays_init_(t_ParallelTaxonomyArrays *self, PyObject *args, PyObject *kwds);
          static PyObject *t_ParallelTaxonomyArrays_children(t_ParallelTaxonomyArrays *self);
          static PyObject *t_ParallelTaxonomyArrays_parents(t_ParallelTaxonomyArrays *self);
          static PyObject *t_ParallelTaxonomyArrays_siblings(t_ParallelTaxonomyArrays *self);

          static PyMethodDef t_ParallelTaxonomyArrays__methods_[] = {
            DECLARE_METHOD(t_ParallelTaxonomyArrays, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ParallelTaxonomyArrays, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ParallelTaxonomyArrays, children, METH_NOARGS),
            DECLARE_METHOD(t_ParallelTaxonomyArrays, parents, METH_NOARGS),
            DECLARE_METHOD(t_ParallelTaxonomyArrays, siblings, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(ParallelTaxonomyArrays, t_ParallelTaxonomyArrays, ::java::lang::Object, ParallelTaxonomyArrays, t_ParallelTaxonomyArrays_init_, 0, 0, 0, 0, 0);

          void t_ParallelTaxonomyArrays::install(PyObject *module)
          {
            installType(&PY_TYPE(ParallelTaxonomyArrays), module, "ParallelTaxonomyArrays", 0);
          }

          void t_ParallelTaxonomyArrays::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(ParallelTaxonomyArrays).tp_dict, "class_", make_descriptor(ParallelTaxonomyArrays::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(ParallelTaxonomyArrays).tp_dict, "wrapfn_", make_descriptor(t_ParallelTaxonomyArrays::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(ParallelTaxonomyArrays).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_ParallelTaxonomyArrays_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, ParallelTaxonomyArrays::initializeClass, 1)))
              return NULL;
            return t_ParallelTaxonomyArrays::wrap_Object(ParallelTaxonomyArrays(((t_ParallelTaxonomyArrays *) arg)->object.this$));
          }
          static PyObject *t_ParallelTaxonomyArrays_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, ParallelTaxonomyArrays::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_ParallelTaxonomyArrays_init_(t_ParallelTaxonomyArrays *self, PyObject *args, PyObject *kwds)
          {
            ParallelTaxonomyArrays object((jobject) NULL);

            INT_CALL(object = ParallelTaxonomyArrays());
            self->object = object;

            return 0;
          }

          static PyObject *t_ParallelTaxonomyArrays_children(t_ParallelTaxonomyArrays *self)
          {
            JArray< jint > result((jobject) NULL);
            OBJ_CALL(result = self->object.children());
            return result.wrap();
          }

          static PyObject *t_ParallelTaxonomyArrays_parents(t_ParallelTaxonomyArrays *self)
          {
            JArray< jint > result((jobject) NULL);
            OBJ_CALL(result = self->object.parents());
            return result.wrap();
          }

          static PyObject *t_ParallelTaxonomyArrays_siblings(t_ParallelTaxonomyArrays *self)
          {
            JArray< jint > result((jobject) NULL);
            OBJ_CALL(result = self->object.siblings());
            return result.wrap();
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/ByteBlockPool$Allocator.h"
#include "java/util/List.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *ByteBlockPool$Allocator::class$ = NULL;
        jmethodID *ByteBlockPool$Allocator::mids$ = NULL;
        bool ByteBlockPool$Allocator::live$ = false;

        jclass ByteBlockPool$Allocator::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/ByteBlockPool$Allocator");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_39c7bd3c] = env->getMethodID(cls, "<init>", "(I)V");
            mids$[mid_getByteBlock_dab10e7e] = env->getMethodID(cls, "getByteBlock", "()[B");
            mids$[mid_recycleByteBlocks_1fde8fc3] = env->getMethodID(cls, "recycleByteBlocks", "(Ljava/util/List;)V");
            mids$[mid_recycleByteBlocks_d3ffa89f] = env->getMethodID(cls, "recycleByteBlocks", "([[BII)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        ByteBlockPool$Allocator::ByteBlockPool$Allocator(jint a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_39c7bd3c, a0)) {}

        JArray< jbyte > ByteBlockPool$Allocator::getByteBlock() const
        {
          return JArray< jbyte >(env->callObjectMethod(this$, mids$[mid_getByteBlock_dab10e7e]));
        }

        void ByteBlockPool$Allocator::recycleByteBlocks(const ::java::util::List & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_recycleByteBlocks_1fde8fc3], a0.this$);
        }

        void ByteBlockPool$Allocator::recycleByteBlocks(const JArray< JArray< jbyte > > & a0, jint a1, jint a2) const
        {
          env->callVoidMethod(this$, mids$[mid_recycleByteBlocks_d3ffa89f], a0.this$, a1, a2);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_ByteBlockPool$Allocator_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_ByteBlockPool$Allocator_instance_(PyTypeObject *type, PyObject *arg);
        static int t_ByteBlockPool$Allocator_init_(t_ByteBlockPool$Allocator *self, PyObject *args, PyObject *kwds);
        static PyObject *t_ByteBlockPool$Allocator_getByteBlock(t_ByteBlockPool$Allocator *self);
        static PyObject *t_ByteBlockPool$Allocator_recycleByteBlocks(t_ByteBlockPool$Allocator *self, PyObject *args);
        static PyObject *t_ByteBlockPool$Allocator_get__byteBlock(t_ByteBlockPool$Allocator *self, void *data);
        static PyGetSetDef t_ByteBlockPool$Allocator__fields_[] = {
          DECLARE_GET_FIELD(t_ByteBlockPool$Allocator, byteBlock),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_ByteBlockPool$Allocator__methods_[] = {
          DECLARE_METHOD(t_ByteBlockPool$Allocator, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_ByteBlockPool$Allocator, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_ByteBlockPool$Allocator, getByteBlock, METH_NOARGS),
          DECLARE_METHOD(t_ByteBlockPool$Allocator, recycleByteBlocks, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(ByteBlockPool$Allocator, t_ByteBlockPool$Allocator, ::java::lang::Object, ByteBlockPool$Allocator, t_ByteBlockPool$Allocator_init_, 0, 0, t_ByteBlockPool$Allocator__fields_, 0, 0);

        void t_ByteBlockPool$Allocator::install(PyObject *module)
        {
          installType(&PY_TYPE(ByteBlockPool$Allocator), module, "ByteBlockPool$Allocator", 0);
        }

        void t_ByteBlockPool$Allocator::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(ByteBlockPool$Allocator).tp_dict, "class_", make_descriptor(ByteBlockPool$Allocator::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(ByteBlockPool$Allocator).tp_dict, "wrapfn_", make_descriptor(t_ByteBlockPool$Allocator::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(ByteBlockPool$Allocator).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_ByteBlockPool$Allocator_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, ByteBlockPool$Allocator::initializeClass, 1)))
            return NULL;
          return t_ByteBlockPool$Allocator::wrap_Object(ByteBlockPool$Allocator(((t_ByteBlockPool$Allocator *) arg)->object.this$));
        }
        static PyObject *t_ByteBlockPool$Allocator_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, ByteBlockPool$Allocator::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_ByteBlockPool$Allocator_init_(t_ByteBlockPool$Allocator *self, PyObject *args, PyObject *kwds)
        {
          jint a0;
          ByteBlockPool$Allocator object((jobject) NULL);

          if (!parseArgs(args, "I", &a0))
          {
            INT_CALL(object = ByteBlockPool$Allocator(a0));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_ByteBlockPool$Allocator_getByteBlock(t_ByteBlockPool$Allocator *self)
        {
          JArray< jbyte > result((jobject) NULL);
          OBJ_CALL(result = self->object.getByteBlock());
          return result.wrap();
        }

        static PyObject *t_ByteBlockPool$Allocator_recycleByteBlocks(t_ByteBlockPool$Allocator *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              ::java::util::List a0((jobject) NULL);
              PyTypeObject **p0;

              if (!parseArgs(args, "K", ::java::util::List::initializeClass, &a0, &p0, ::java::util::t_List::parameters_))
              {
                OBJ_CALL(self->object.recycleByteBlocks(a0));
                Py_RETURN_NONE;
              }
            }
            break;
           case 3:
            {
              JArray< JArray< jbyte > > a0((jobject) NULL);
              jint a1;
              jint a2;

              if (!parseArgs(args, "[[BII", &a0, &a1, &a2))
              {
                OBJ_CALL(self->object.recycleByteBlocks(a0, a1, a2));
                Py_RETURN_NONE;
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "recycleByteBlocks", args);
          return NULL;
        }

        static PyObject *t_ByteBlockPool$Allocator_get__byteBlock(t_ByteBlockPool$Allocator *self, void *data)
        {
          JArray< jbyte > value((jobject) NULL);
          OBJ_CALL(value = self->object.getByteBlock());
          return value.wrap();
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/WildcardQuery.h"
#include "org/apache/lucene/util/automaton/Automaton.h"
#include "org/apache/lucene/index/Term.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *WildcardQuery::class$ = NULL;
        jmethodID *WildcardQuery::mids$ = NULL;
        bool WildcardQuery::live$ = false;
        jchar WildcardQuery::WILDCARD_CHAR = (jchar) 0;
        jchar WildcardQuery::WILDCARD_ESCAPE = (jchar) 0;
        jchar WildcardQuery::WILDCARD_STRING = (jchar) 0;

        jclass WildcardQuery::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/WildcardQuery");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_7eca6a81] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/Term;)V");
            mids$[mid_getTerm_0f71f314] = env->getMethodID(cls, "getTerm", "()Lorg/apache/lucene/index/Term;");
            mids$[mid_toAutomaton_d07301d8] = env->getStaticMethodID(cls, "toAutomaton", "(Lorg/apache/lucene/index/Term;)Lorg/apache/lucene/util/automaton/Automaton;");
            mids$[mid_toString_97a5258f] = env->getMethodID(cls, "toString", "(Ljava/lang/String;)Ljava/lang/String;");

            class$ = (::java::lang::Class *) new JObject(cls);
            cls = (jclass) class$->this$;

            WILDCARD_CHAR = env->getStaticCharField(cls, "WILDCARD_CHAR");
            WILDCARD_ESCAPE = env->getStaticCharField(cls, "WILDCARD_ESCAPE");
            WILDCARD_STRING = env->getStaticCharField(cls, "WILDCARD_STRING");
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        WildcardQuery::WildcardQuery(const ::org::apache::lucene::index::Term & a0) : ::org::apache::lucene::search::AutomatonQuery(env->newObject(initializeClass, &mids$, mid_init$_7eca6a81, a0.this$)) {}

        ::org::apache::lucene::index::Term WildcardQuery::getTerm() const
        {
          return ::org::apache::lucene::index::Term(env->callObjectMethod(this$, mids$[mid_getTerm_0f71f314]));
        }

        ::org::apache::lucene::util::automaton::Automaton WildcardQuery::toAutomaton(const ::org::apache::lucene::index::Term & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::util::automaton::Automaton(env->callStaticObjectMethod(cls, mids$[mid_toAutomaton_d07301d8], a0.this$));
        }

        ::java::lang::String WildcardQuery::toString(const ::java::lang::String & a0) const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_97a5258f], a0.this$));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_WildcardQuery_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_WildcardQuery_instance_(PyTypeObject *type, PyObject *arg);
        static int t_WildcardQuery_init_(t_WildcardQuery *self, PyObject *args, PyObject *kwds);
        static PyObject *t_WildcardQuery_getTerm(t_WildcardQuery *self);
        static PyObject *t_WildcardQuery_toAutomaton(PyTypeObject *type, PyObject *arg);
        static PyObject *t_WildcardQuery_toString(t_WildcardQuery *self, PyObject *args);
        static PyObject *t_WildcardQuery_get__term(t_WildcardQuery *self, void *data);
        static PyGetSetDef t_WildcardQuery__fields_[] = {
          DECLARE_GET_FIELD(t_WildcardQuery, term),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_WildcardQuery__methods_[] = {
          DECLARE_METHOD(t_WildcardQuery, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_WildcardQuery, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_WildcardQuery, getTerm, METH_NOARGS),
          DECLARE_METHOD(t_WildcardQuery, toAutomaton, METH_O | METH_CLASS),
          DECLARE_METHOD(t_WildcardQuery, toString, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(WildcardQuery, t_WildcardQuery, ::org::apache::lucene::search::AutomatonQuery, WildcardQuery, t_WildcardQuery_init_, 0, 0, t_WildcardQuery__fields_, 0, 0);

        void t_WildcardQuery::install(PyObject *module)
        {
          installType(&PY_TYPE(WildcardQuery), module, "WildcardQuery", 0);
        }

        void t_WildcardQuery::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(WildcardQuery).tp_dict, "class_", make_descriptor(WildcardQuery::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(WildcardQuery).tp_dict, "wrapfn_", make_descriptor(t_WildcardQuery::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(WildcardQuery).tp_dict, "boxfn_", make_descriptor(boxObject));
          env->getClass(WildcardQuery::initializeClass);
          PyDict_SetItemString(PY_TYPE(WildcardQuery).tp_dict, "WILDCARD_CHAR", make_descriptor(WildcardQuery::WILDCARD_CHAR));
          PyDict_SetItemString(PY_TYPE(WildcardQuery).tp_dict, "WILDCARD_ESCAPE", make_descriptor(WildcardQuery::WILDCARD_ESCAPE));
          PyDict_SetItemString(PY_TYPE(WildcardQuery).tp_dict, "WILDCARD_STRING", make_descriptor(WildcardQuery::WILDCARD_STRING));
        }

        static PyObject *t_WildcardQuery_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, WildcardQuery::initializeClass, 1)))
            return NULL;
          return t_WildcardQuery::wrap_Object(WildcardQuery(((t_WildcardQuery *) arg)->object.this$));
        }
        static PyObject *t_WildcardQuery_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, WildcardQuery::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_WildcardQuery_init_(t_WildcardQuery *self, PyObject *args, PyObject *kwds)
        {
          ::org::apache::lucene::index::Term a0((jobject) NULL);
          WildcardQuery object((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::index::Term::initializeClass, &a0))
          {
            INT_CALL(object = WildcardQuery(a0));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_WildcardQuery_getTerm(t_WildcardQuery *self)
        {
          ::org::apache::lucene::index::Term result((jobject) NULL);
          OBJ_CALL(result = self->object.getTerm());
          return ::org::apache::lucene::index::t_Term::wrap_Object(result);
        }

        static PyObject *t_WildcardQuery_toAutomaton(PyTypeObject *type, PyObject *arg)
        {
          ::org::apache::lucene::index::Term a0((jobject) NULL);
          ::org::apache::lucene::util::automaton::Automaton result((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::index::Term::initializeClass, &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::search::WildcardQuery::toAutomaton(a0));
            return ::org::apache::lucene::util::automaton::t_Automaton::wrap_Object(result);
          }

          PyErr_SetArgsError(type, "toAutomaton", arg);
          return NULL;
        }

        static PyObject *t_WildcardQuery_toString(t_WildcardQuery *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = self->object.toString(a0));
            return j2p(result);
          }

          return callSuper(&PY_TYPE(WildcardQuery), (PyObject *) self, "toString", args, 2);
        }

        static PyObject *t_WildcardQuery_get__term(t_WildcardQuery *self, void *data)
        {
          ::org::apache::lucene::index::Term value((jobject) NULL);
          OBJ_CALL(value = self->object.getTerm());
          return ::org::apache::lucene::index::t_Term::wrap_Object(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/grouping/term/TermSecondPassGroupingCollector.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "org/apache/lucene/search/grouping/SearchGroup.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "java/lang/String.h"
#include "java/util/Collection.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/search/Sort.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace grouping {
          namespace term {

            ::java::lang::Class *TermSecondPassGroupingCollector::class$ = NULL;
            jmethodID *TermSecondPassGroupingCollector::mids$ = NULL;
            bool TermSecondPassGroupingCollector::live$ = false;

            jclass TermSecondPassGroupingCollector::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/search/grouping/term/TermSecondPassGroupingCollector");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_11c7601a] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Ljava/util/Collection;Lorg/apache/lucene/search/Sort;Lorg/apache/lucene/search/Sort;IZZZ)V");
                mids$[mid_setNextReader_a6f59947] = env->getMethodID(cls, "setNextReader", "(Lorg/apache/lucene/index/AtomicReaderContext;)V");
                mids$[mid_retrieveGroup_e4de8d52] = env->getMethodID(cls, "retrieveGroup", "(I)Lorg/apache/lucene/search/grouping/AbstractSecondPassGroupingCollector$SearchGroupDocs;");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            TermSecondPassGroupingCollector::TermSecondPassGroupingCollector(const ::java::lang::String & a0, const ::java::util::Collection & a1, const ::org::apache::lucene::search::Sort & a2, const ::org::apache::lucene::search::Sort & a3, jint a4, jboolean a5, jboolean a6, jboolean a7) : ::org::apache::lucene::search::grouping::AbstractSecondPassGroupingCollector(env->newObject(initializeClass, &mids$, mid_init$_11c7601a, a0.this$, a1.this$, a2.this$, a3.this$, a4, a5, a6, a7)) {}

            void TermSecondPassGroupingCollector::setNextReader(const ::org::apache::lucene::index::AtomicReaderContext & a0) const
            {
              env->callVoidMethod(this$, mids$[mid_setNextReader_a6f59947], a0.this$);
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace grouping {
          namespace term {
            static PyObject *t_TermSecondPassGroupingCollector_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_TermSecondPassGroupingCollector_instance_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_TermSecondPassGroupingCollector_of_(t_TermSecondPassGroupingCollector *self, PyObject *args);
            static int t_TermSecondPassGroupingCollector_init_(t_TermSecondPassGroupingCollector *self, PyObject *args, PyObject *kwds);
            static PyObject *t_TermSecondPassGroupingCollector_setNextReader(t_TermSecondPassGroupingCollector *self, PyObject *args);
            static int t_TermSecondPassGroupingCollector_set__nextReader(t_TermSecondPassGroupingCollector *self, PyObject *arg, void *data);
            static PyObject *t_TermSecondPassGroupingCollector_get__parameters_(t_TermSecondPassGroupingCollector *self, void *data);
            static PyGetSetDef t_TermSecondPassGroupingCollector__fields_[] = {
              DECLARE_SET_FIELD(t_TermSecondPassGroupingCollector, nextReader),
              DECLARE_GET_FIELD(t_TermSecondPassGroupingCollector, parameters_),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_TermSecondPassGroupingCollector__methods_[] = {
              DECLARE_METHOD(t_TermSecondPassGroupingCollector, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_TermSecondPassGroupingCollector, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_TermSecondPassGroupingCollector, of_, METH_VARARGS),
              DECLARE_METHOD(t_TermSecondPassGroupingCollector, setNextReader, METH_VARARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(TermSecondPassGroupingCollector, t_TermSecondPassGroupingCollector, ::org::apache::lucene::search::grouping::AbstractSecondPassGroupingCollector, TermSecondPassGroupingCollector, t_TermSecondPassGroupingCollector_init_, 0, 0, t_TermSecondPassGroupingCollector__fields_, 0, 0);
            PyObject *t_TermSecondPassGroupingCollector::wrap_Object(const TermSecondPassGroupingCollector& object, PyTypeObject *p0)
            {
              PyObject *obj = t_TermSecondPassGroupingCollector::wrap_Object(object);
              if (obj != NULL && obj != Py_None)
              {
                t_TermSecondPassGroupingCollector *self = (t_TermSecondPassGroupingCollector *) obj;
                self->parameters[0] = p0;
              }
              return obj;
            }

            PyObject *t_TermSecondPassGroupingCollector::wrap_jobject(const jobject& object, PyTypeObject *p0)
            {
              PyObject *obj = t_TermSecondPassGroupingCollector::wrap_jobject(object);
              if (obj != NULL && obj != Py_None)
              {
                t_TermSecondPassGroupingCollector *self = (t_TermSecondPassGroupingCollector *) obj;
                self->parameters[0] = p0;
              }
              return obj;
            }

            void t_TermSecondPassGroupingCollector::install(PyObject *module)
            {
              installType(&PY_TYPE(TermSecondPassGroupingCollector), module, "TermSecondPassGroupingCollector", 0);
            }

            void t_TermSecondPassGroupingCollector::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(TermSecondPassGroupingCollector).tp_dict, "class_", make_descriptor(TermSecondPassGroupingCollector::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(TermSecondPassGroupingCollector).tp_dict, "wrapfn_", make_descriptor(t_TermSecondPassGroupingCollector::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(TermSecondPassGroupingCollector).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_TermSecondPassGroupingCollector_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, TermSecondPassGroupingCollector::initializeClass, 1)))
                return NULL;
              return t_TermSecondPassGroupingCollector::wrap_Object(TermSecondPassGroupingCollector(((t_TermSecondPassGroupingCollector *) arg)->object.this$));
            }
            static PyObject *t_TermSecondPassGroupingCollector_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, TermSecondPassGroupingCollector::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static PyObject *t_TermSecondPassGroupingCollector_of_(t_TermSecondPassGroupingCollector *self, PyObject *args)
            {
              if (!parseArg(args, "T", 1, &(self->parameters)))
                Py_RETURN_SELF;
              return PyErr_SetArgsError((PyObject *) self, "of_", args);
            }

            static int t_TermSecondPassGroupingCollector_init_(t_TermSecondPassGroupingCollector *self, PyObject *args, PyObject *kwds)
            {
              ::java::lang::String a0((jobject) NULL);
              ::java::util::Collection a1((jobject) NULL);
              PyTypeObject **p1;
              ::org::apache::lucene::search::Sort a2((jobject) NULL);
              ::org::apache::lucene::search::Sort a3((jobject) NULL);
              jint a4;
              jboolean a5;
              jboolean a6;
              jboolean a7;
              TermSecondPassGroupingCollector object((jobject) NULL);

              if (!parseArgs(args, "sKkkIZZZ", ::java::util::Collection::initializeClass, ::org::apache::lucene::search::Sort::initializeClass, ::org::apache::lucene::search::Sort::initializeClass, &a0, &a1, &p1, ::java::util::t_Collection::parameters_, &a2, &a3, &a4, &a5, &a6, &a7))
              {
                INT_CALL(object = TermSecondPassGroupingCollector(a0, a1, a2, a3, a4, a5, a6, a7));
                self->object = object;
                self->parameters[0] = &::org::apache::lucene::util::PY_TYPE(BytesRef);
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_TermSecondPassGroupingCollector_setNextReader(t_TermSecondPassGroupingCollector *self, PyObject *args)
            {
              ::org::apache::lucene::index::AtomicReaderContext a0((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &a0))
              {
                OBJ_CALL(self->object.setNextReader(a0));
                Py_RETURN_NONE;
              }

              return callSuper(&PY_TYPE(TermSecondPassGroupingCollector), (PyObject *) self, "setNextReader", args, 2);
            }
            static PyObject *t_TermSecondPassGroupingCollector_get__parameters_(t_TermSecondPassGroupingCollector *self, void *data)
            {
              return typeParameters(self->parameters, sizeof(self->parameters));
            }

            static int t_TermSecondPassGroupingCollector_set__nextReader(t_TermSecondPassGroupingCollector *self, PyObject *arg, void *data)
            {
              {
                ::org::apache::lucene::index::AtomicReaderContext value((jobject) NULL);
                if (!parseArg(arg, "k", ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &value))
                {
                  INT_CALL(self->object.setNextReader(value));
                  return 0;
                }
              }
              PyErr_SetArgsError((PyObject *) self, "nextReader", arg);
              return -1;
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/cz/CzechAnalyzer.h"
#include "org/apache/lucene/util/Version.h"
#include "java/lang/String.h"
#include "org/apache/lucene/analysis/util/CharArraySet.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace cz {

          ::java::lang::Class *CzechAnalyzer::class$ = NULL;
          jmethodID *CzechAnalyzer::mids$ = NULL;
          bool CzechAnalyzer::live$ = false;
          ::java::lang::String *CzechAnalyzer::DEFAULT_STOPWORD_FILE = NULL;

          jclass CzechAnalyzer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/cz/CzechAnalyzer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_0d96cf33] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;)V");
              mids$[mid_init$_83eafe28] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/analysis/util/CharArraySet;)V");
              mids$[mid_init$_c9d7e4a3] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/analysis/util/CharArraySet;Lorg/apache/lucene/analysis/util/CharArraySet;)V");
              mids$[mid_getDefaultStopSet_d2d3505c] = env->getStaticMethodID(cls, "getDefaultStopSet", "()Lorg/apache/lucene/analysis/util/CharArraySet;");
              mids$[mid_createComponents_1be39cae] = env->getMethodID(cls, "createComponents", "(Ljava/lang/String;Ljava/io/Reader;)Lorg/apache/lucene/analysis/Analyzer$TokenStreamComponents;");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              DEFAULT_STOPWORD_FILE = new ::java::lang::String(env->getStaticObjectField(cls, "DEFAULT_STOPWORD_FILE", "Ljava/lang/String;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          CzechAnalyzer::CzechAnalyzer(const ::org::apache::lucene::util::Version & a0) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_0d96cf33, a0.this$)) {}

          CzechAnalyzer::CzechAnalyzer(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::analysis::util::CharArraySet & a1) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_83eafe28, a0.this$, a1.this$)) {}

          CzechAnalyzer::CzechAnalyzer(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::analysis::util::CharArraySet & a1, const ::org::apache::lucene::analysis::util::CharArraySet & a2) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_c9d7e4a3, a0.this$, a1.this$, a2.this$)) {}

          ::org::apache::lucene::analysis::util::CharArraySet CzechAnalyzer::getDefaultStopSet()
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::analysis::util::CharArraySet(env->callStaticObjectMethod(cls, mids$[mid_getDefaultStopSet_d2d3505c]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace cz {
          static PyObject *t_CzechAnalyzer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_CzechAnalyzer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_CzechAnalyzer_init_(t_CzechAnalyzer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_CzechAnalyzer_getDefaultStopSet(PyTypeObject *type);
          static PyObject *t_CzechAnalyzer_get__defaultStopSet(t_CzechAnalyzer *self, void *data);
          static PyGetSetDef t_CzechAnalyzer__fields_[] = {
            DECLARE_GET_FIELD(t_CzechAnalyzer, defaultStopSet),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_CzechAnalyzer__methods_[] = {
            DECLARE_METHOD(t_CzechAnalyzer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CzechAnalyzer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CzechAnalyzer, getDefaultStopSet, METH_NOARGS | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(CzechAnalyzer, t_CzechAnalyzer, ::org::apache::lucene::analysis::util::StopwordAnalyzerBase, CzechAnalyzer, t_CzechAnalyzer_init_, 0, 0, t_CzechAnalyzer__fields_, 0, 0);

          void t_CzechAnalyzer::install(PyObject *module)
          {
            installType(&PY_TYPE(CzechAnalyzer), module, "CzechAnalyzer", 0);
          }

          void t_CzechAnalyzer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(CzechAnalyzer).tp_dict, "class_", make_descriptor(CzechAnalyzer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(CzechAnalyzer).tp_dict, "wrapfn_", make_descriptor(t_CzechAnalyzer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(CzechAnalyzer).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(CzechAnalyzer::initializeClass);
            PyDict_SetItemString(PY_TYPE(CzechAnalyzer).tp_dict, "DEFAULT_STOPWORD_FILE", make_descriptor(j2p(*CzechAnalyzer::DEFAULT_STOPWORD_FILE)));
          }

          static PyObject *t_CzechAnalyzer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, CzechAnalyzer::initializeClass, 1)))
              return NULL;
            return t_CzechAnalyzer::wrap_Object(CzechAnalyzer(((t_CzechAnalyzer *) arg)->object.this$));
          }
          static PyObject *t_CzechAnalyzer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, CzechAnalyzer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_CzechAnalyzer_init_(t_CzechAnalyzer *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                CzechAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "K", ::org::apache::lucene::util::Version::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_))
                {
                  INT_CALL(object = CzechAnalyzer(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 2:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                ::org::apache::lucene::analysis::util::CharArraySet a1((jobject) NULL);
                PyTypeObject **p1;
                CzechAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "KK", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1, &p1, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_))
                {
                  INT_CALL(object = CzechAnalyzer(a0, a1));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 3:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                ::org::apache::lucene::analysis::util::CharArraySet a1((jobject) NULL);
                PyTypeObject **p1;
                ::org::apache::lucene::analysis::util::CharArraySet a2((jobject) NULL);
                PyTypeObject **p2;
                CzechAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "KKK", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1, &p1, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_, &a2, &p2, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_))
                {
                  INT_CALL(object = CzechAnalyzer(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_CzechAnalyzer_getDefaultStopSet(PyTypeObject *type)
          {
            ::org::apache::lucene::analysis::util::CharArraySet result((jobject) NULL);
            OBJ_CALL(result = ::org::apache::lucene::analysis::cz::CzechAnalyzer::getDefaultStopSet());
            return ::org::apache::lucene::analysis::util::t_CharArraySet::wrap_Object(result);
          }

          static PyObject *t_CzechAnalyzer_get__defaultStopSet(t_CzechAnalyzer *self, void *data)
          {
            ::org::apache::lucene::analysis::util::CharArraySet value((jobject) NULL);
            OBJ_CALL(value = self->object.getDefaultStopSet());
            return ::org::apache::lucene::analysis::util::t_CharArraySet::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queries/function/valuesource/DivFloatFunction.h"
#include "org/apache/lucene/queries/function/ValueSource.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {

            ::java::lang::Class *DivFloatFunction::class$ = NULL;
            jmethodID *DivFloatFunction::mids$ = NULL;
            bool DivFloatFunction::live$ = false;

            jclass DivFloatFunction::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queries/function/valuesource/DivFloatFunction");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_74aa307e] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/queries/function/ValueSource;Lorg/apache/lucene/queries/function/ValueSource;)V");
                mids$[mid_name_14c7b5c5] = env->getMethodID(cls, "name", "()Ljava/lang/String;");
                mids$[mid_func_3711414a] = env->getMethodID(cls, "func", "(ILorg/apache/lucene/queries/function/FunctionValues;Lorg/apache/lucene/queries/function/FunctionValues;)F");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            DivFloatFunction::DivFloatFunction(const ::org::apache::lucene::queries::function::ValueSource & a0, const ::org::apache::lucene::queries::function::ValueSource & a1) : ::org::apache::lucene::queries::function::valuesource::DualFloatFunction(env->newObject(initializeClass, &mids$, mid_init$_74aa307e, a0.this$, a1.this$)) {}
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {
            static PyObject *t_DivFloatFunction_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_DivFloatFunction_instance_(PyTypeObject *type, PyObject *arg);
            static int t_DivFloatFunction_init_(t_DivFloatFunction *self, PyObject *args, PyObject *kwds);

            static PyMethodDef t_DivFloatFunction__methods_[] = {
              DECLARE_METHOD(t_DivFloatFunction, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_DivFloatFunction, instance_, METH_O | METH_CLASS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(DivFloatFunction, t_DivFloatFunction, ::org::apache::lucene::queries::function::valuesource::DualFloatFunction, DivFloatFunction, t_DivFloatFunction_init_, 0, 0, 0, 0, 0);

            void t_DivFloatFunction::install(PyObject *module)
            {
              installType(&PY_TYPE(DivFloatFunction), module, "DivFloatFunction", 0);
            }

            void t_DivFloatFunction::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(DivFloatFunction).tp_dict, "class_", make_descriptor(DivFloatFunction::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(DivFloatFunction).tp_dict, "wrapfn_", make_descriptor(t_DivFloatFunction::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(DivFloatFunction).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_DivFloatFunction_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, DivFloatFunction::initializeClass, 1)))
                return NULL;
              return t_DivFloatFunction::wrap_Object(DivFloatFunction(((t_DivFloatFunction *) arg)->object.this$));
            }
            static PyObject *t_DivFloatFunction_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, DivFloatFunction::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_DivFloatFunction_init_(t_DivFloatFunction *self, PyObject *args, PyObject *kwds)
            {
              ::org::apache::lucene::queries::function::ValueSource a0((jobject) NULL);
              ::org::apache::lucene::queries::function::ValueSource a1((jobject) NULL);
              DivFloatFunction object((jobject) NULL);

              if (!parseArgs(args, "kk", ::org::apache::lucene::queries::function::ValueSource::initializeClass, ::org::apache::lucene::queries::function::ValueSource::initializeClass, &a0, &a1))
              {
                INT_CALL(object = DivFloatFunction(a0, a1));
                self->object = object;
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/MaxNonCompetitiveBoostAttributeImpl.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "org/apache/lucene/search/MaxNonCompetitiveBoostAttribute.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *MaxNonCompetitiveBoostAttributeImpl::class$ = NULL;
        jmethodID *MaxNonCompetitiveBoostAttributeImpl::mids$ = NULL;
        bool MaxNonCompetitiveBoostAttributeImpl::live$ = false;

        jclass MaxNonCompetitiveBoostAttributeImpl::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/MaxNonCompetitiveBoostAttributeImpl");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_clear_54c6a166] = env->getMethodID(cls, "clear", "()V");
            mids$[mid_copyTo_d86caa9f] = env->getMethodID(cls, "copyTo", "(Lorg/apache/lucene/util/AttributeImpl;)V");
            mids$[mid_getCompetitiveTerm_4ae19461] = env->getMethodID(cls, "getCompetitiveTerm", "()Lorg/apache/lucene/util/BytesRef;");
            mids$[mid_getMaxNonCompetitiveBoost_54c6a176] = env->getMethodID(cls, "getMaxNonCompetitiveBoost", "()F");
            mids$[mid_setCompetitiveTerm_7bc03dc4] = env->getMethodID(cls, "setCompetitiveTerm", "(Lorg/apache/lucene/util/BytesRef;)V");
            mids$[mid_setMaxNonCompetitiveBoost_06298cab] = env->getMethodID(cls, "setMaxNonCompetitiveBoost", "(F)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        MaxNonCompetitiveBoostAttributeImpl::MaxNonCompetitiveBoostAttributeImpl() : ::org::apache::lucene::util::AttributeImpl(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        void MaxNonCompetitiveBoostAttributeImpl::clear() const
        {
          env->callVoidMethod(this$, mids$[mid_clear_54c6a166]);
        }

        void MaxNonCompetitiveBoostAttributeImpl::copyTo(const ::org::apache::lucene::util::AttributeImpl & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_copyTo_d86caa9f], a0.this$);
        }

        ::org::apache::lucene::util::BytesRef MaxNonCompetitiveBoostAttributeImpl::getCompetitiveTerm() const
        {
          return ::org::apache::lucene::util::BytesRef(env->callObjectMethod(this$, mids$[mid_getCompetitiveTerm_4ae19461]));
        }

        jfloat MaxNonCompetitiveBoostAttributeImpl::getMaxNonCompetitiveBoost() const
        {
          return env->callFloatMethod(this$, mids$[mid_getMaxNonCompetitiveBoost_54c6a176]);
        }

        void MaxNonCompetitiveBoostAttributeImpl::setCompetitiveTerm(const ::org::apache::lucene::util::BytesRef & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setCompetitiveTerm_7bc03dc4], a0.this$);
        }

        void MaxNonCompetitiveBoostAttributeImpl::setMaxNonCompetitiveBoost(jfloat a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setMaxNonCompetitiveBoost_06298cab], a0);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_MaxNonCompetitiveBoostAttributeImpl_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_MaxNonCompetitiveBoostAttributeImpl_instance_(PyTypeObject *type, PyObject *arg);
        static int t_MaxNonCompetitiveBoostAttributeImpl_init_(t_MaxNonCompetitiveBoostAttributeImpl *self, PyObject *args, PyObject *kwds);
        static PyObject *t_MaxNonCompetitiveBoostAttributeImpl_clear(t_MaxNonCompetitiveBoostAttributeImpl *self, PyObject *args);
        static PyObject *t_MaxNonCompetitiveBoostAttributeImpl_copyTo(t_MaxNonCompetitiveBoostAttributeImpl *self, PyObject *args);
        static PyObject *t_MaxNonCompetitiveBoostAttributeImpl_getCompetitiveTerm(t_MaxNonCompetitiveBoostAttributeImpl *self);
        static PyObject *t_MaxNonCompetitiveBoostAttributeImpl_getMaxNonCompetitiveBoost(t_MaxNonCompetitiveBoostAttributeImpl *self);
        static PyObject *t_MaxNonCompetitiveBoostAttributeImpl_setCompetitiveTerm(t_MaxNonCompetitiveBoostAttributeImpl *self, PyObject *arg);
        static PyObject *t_MaxNonCompetitiveBoostAttributeImpl_setMaxNonCompetitiveBoost(t_MaxNonCompetitiveBoostAttributeImpl *self, PyObject *arg);
        static PyObject *t_MaxNonCompetitiveBoostAttributeImpl_get__competitiveTerm(t_MaxNonCompetitiveBoostAttributeImpl *self, void *data);
        static int t_MaxNonCompetitiveBoostAttributeImpl_set__competitiveTerm(t_MaxNonCompetitiveBoostAttributeImpl *self, PyObject *arg, void *data);
        static PyObject *t_MaxNonCompetitiveBoostAttributeImpl_get__maxNonCompetitiveBoost(t_MaxNonCompetitiveBoostAttributeImpl *self, void *data);
        static int t_MaxNonCompetitiveBoostAttributeImpl_set__maxNonCompetitiveBoost(t_MaxNonCompetitiveBoostAttributeImpl *self, PyObject *arg, void *data);
        static PyGetSetDef t_MaxNonCompetitiveBoostAttributeImpl__fields_[] = {
          DECLARE_GETSET_FIELD(t_MaxNonCompetitiveBoostAttributeImpl, competitiveTerm),
          DECLARE_GETSET_FIELD(t_MaxNonCompetitiveBoostAttributeImpl, maxNonCompetitiveBoost),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_MaxNonCompetitiveBoostAttributeImpl__methods_[] = {
          DECLARE_METHOD(t_MaxNonCompetitiveBoostAttributeImpl, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MaxNonCompetitiveBoostAttributeImpl, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MaxNonCompetitiveBoostAttributeImpl, clear, METH_VARARGS),
          DECLARE_METHOD(t_MaxNonCompetitiveBoostAttributeImpl, copyTo, METH_VARARGS),
          DECLARE_METHOD(t_MaxNonCompetitiveBoostAttributeImpl, getCompetitiveTerm, METH_NOARGS),
          DECLARE_METHOD(t_MaxNonCompetitiveBoostAttributeImpl, getMaxNonCompetitiveBoost, METH_NOARGS),
          DECLARE_METHOD(t_MaxNonCompetitiveBoostAttributeImpl, setCompetitiveTerm, METH_O),
          DECLARE_METHOD(t_MaxNonCompetitiveBoostAttributeImpl, setMaxNonCompetitiveBoost, METH_O),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(MaxNonCompetitiveBoostAttributeImpl, t_MaxNonCompetitiveBoostAttributeImpl, ::org::apache::lucene::util::AttributeImpl, MaxNonCompetitiveBoostAttributeImpl, t_MaxNonCompetitiveBoostAttributeImpl_init_, 0, 0, t_MaxNonCompetitiveBoostAttributeImpl__fields_, 0, 0);

        void t_MaxNonCompetitiveBoostAttributeImpl::install(PyObject *module)
        {
          installType(&PY_TYPE(MaxNonCompetitiveBoostAttributeImpl), module, "MaxNonCompetitiveBoostAttributeImpl", 0);
        }

        void t_MaxNonCompetitiveBoostAttributeImpl::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(MaxNonCompetitiveBoostAttributeImpl).tp_dict, "class_", make_descriptor(MaxNonCompetitiveBoostAttributeImpl::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(MaxNonCompetitiveBoostAttributeImpl).tp_dict, "wrapfn_", make_descriptor(t_MaxNonCompetitiveBoostAttributeImpl::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(MaxNonCompetitiveBoostAttributeImpl).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_MaxNonCompetitiveBoostAttributeImpl_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, MaxNonCompetitiveBoostAttributeImpl::initializeClass, 1)))
            return NULL;
          return t_MaxNonCompetitiveBoostAttributeImpl::wrap_Object(MaxNonCompetitiveBoostAttributeImpl(((t_MaxNonCompetitiveBoostAttributeImpl *) arg)->object.this$));
        }
        static PyObject *t_MaxNonCompetitiveBoostAttributeImpl_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, MaxNonCompetitiveBoostAttributeImpl::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_MaxNonCompetitiveBoostAttributeImpl_init_(t_MaxNonCompetitiveBoostAttributeImpl *self, PyObject *args, PyObject *kwds)
        {
          MaxNonCompetitiveBoostAttributeImpl object((jobject) NULL);

          INT_CALL(object = MaxNonCompetitiveBoostAttributeImpl());
          self->object = object;

          return 0;
        }

        static PyObject *t_MaxNonCompetitiveBoostAttributeImpl_clear(t_MaxNonCompetitiveBoostAttributeImpl *self, PyObject *args)
        {

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(self->object.clear());
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(MaxNonCompetitiveBoostAttributeImpl), (PyObject *) self, "clear", args, 2);
        }

        static PyObject *t_MaxNonCompetitiveBoostAttributeImpl_copyTo(t_MaxNonCompetitiveBoostAttributeImpl *self, PyObject *args)
        {
          ::org::apache::lucene::util::AttributeImpl a0((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::util::AttributeImpl::initializeClass, &a0))
          {
            OBJ_CALL(self->object.copyTo(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(MaxNonCompetitiveBoostAttributeImpl), (PyObject *) self, "copyTo", args, 2);
        }

        static PyObject *t_MaxNonCompetitiveBoostAttributeImpl_getCompetitiveTerm(t_MaxNonCompetitiveBoostAttributeImpl *self)
        {
          ::org::apache::lucene::util::BytesRef result((jobject) NULL);
          OBJ_CALL(result = self->object.getCompetitiveTerm());
          return ::org::apache::lucene::util::t_BytesRef::wrap_Object(result);
        }

        static PyObject *t_MaxNonCompetitiveBoostAttributeImpl_getMaxNonCompetitiveBoost(t_MaxNonCompetitiveBoostAttributeImpl *self)
        {
          jfloat result;
          OBJ_CALL(result = self->object.getMaxNonCompetitiveBoost());
          return PyFloat_FromDouble((double) result);
        }

        static PyObject *t_MaxNonCompetitiveBoostAttributeImpl_setCompetitiveTerm(t_MaxNonCompetitiveBoostAttributeImpl *self, PyObject *arg)
        {
          ::org::apache::lucene::util::BytesRef a0((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::util::BytesRef::initializeClass, &a0))
          {
            OBJ_CALL(self->object.setCompetitiveTerm(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setCompetitiveTerm", arg);
          return NULL;
        }

        static PyObject *t_MaxNonCompetitiveBoostAttributeImpl_setMaxNonCompetitiveBoost(t_MaxNonCompetitiveBoostAttributeImpl *self, PyObject *arg)
        {
          jfloat a0;

          if (!parseArg(arg, "F", &a0))
          {
            OBJ_CALL(self->object.setMaxNonCompetitiveBoost(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setMaxNonCompetitiveBoost", arg);
          return NULL;
        }

        static PyObject *t_MaxNonCompetitiveBoostAttributeImpl_get__competitiveTerm(t_MaxNonCompetitiveBoostAttributeImpl *self, void *data)
        {
          ::org::apache::lucene::util::BytesRef value((jobject) NULL);
          OBJ_CALL(value = self->object.getCompetitiveTerm());
          return ::org::apache::lucene::util::t_BytesRef::wrap_Object(value);
        }
        static int t_MaxNonCompetitiveBoostAttributeImpl_set__competitiveTerm(t_MaxNonCompetitiveBoostAttributeImpl *self, PyObject *arg, void *data)
        {
          {
            ::org::apache::lucene::util::BytesRef value((jobject) NULL);
            if (!parseArg(arg, "k", ::org::apache::lucene::util::BytesRef::initializeClass, &value))
            {
              INT_CALL(self->object.setCompetitiveTerm(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "competitiveTerm", arg);
          return -1;
        }

        static PyObject *t_MaxNonCompetitiveBoostAttributeImpl_get__maxNonCompetitiveBoost(t_MaxNonCompetitiveBoostAttributeImpl *self, void *data)
        {
          jfloat value;
          OBJ_CALL(value = self->object.getMaxNonCompetitiveBoost());
          return PyFloat_FromDouble((double) value);
        }
        static int t_MaxNonCompetitiveBoostAttributeImpl_set__maxNonCompetitiveBoost(t_MaxNonCompetitiveBoostAttributeImpl *self, PyObject *arg, void *data)
        {
          {
            jfloat value;
            if (!parseArg(arg, "F", &value))
            {
              INT_CALL(self->object.setMaxNonCompetitiveBoost(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "maxNonCompetitiveBoost", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/document/FloatDocValuesField.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace document {

        ::java::lang::Class *FloatDocValuesField::class$ = NULL;
        jmethodID *FloatDocValuesField::mids$ = NULL;
        bool FloatDocValuesField::live$ = false;

        jclass FloatDocValuesField::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/document/FloatDocValuesField");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_f0649ce1] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;F)V");
            mids$[mid_setFloatValue_06298cab] = env->getMethodID(cls, "setFloatValue", "(F)V");
            mids$[mid_setLongValue_0ee6df2f] = env->getMethodID(cls, "setLongValue", "(J)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        FloatDocValuesField::FloatDocValuesField(const ::java::lang::String & a0, jfloat a1) : ::org::apache::lucene::document::NumericDocValuesField(env->newObject(initializeClass, &mids$, mid_init$_f0649ce1, a0.this$, a1)) {}

        void FloatDocValuesField::setFloatValue(jfloat a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setFloatValue_06298cab], a0);
        }

        void FloatDocValuesField::setLongValue(jlong a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setLongValue_0ee6df2f], a0);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace document {
        static PyObject *t_FloatDocValuesField_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FloatDocValuesField_instance_(PyTypeObject *type, PyObject *arg);
        static int t_FloatDocValuesField_init_(t_FloatDocValuesField *self, PyObject *args, PyObject *kwds);
        static PyObject *t_FloatDocValuesField_setFloatValue(t_FloatDocValuesField *self, PyObject *args);
        static PyObject *t_FloatDocValuesField_setLongValue(t_FloatDocValuesField *self, PyObject *args);
        static int t_FloatDocValuesField_set__floatValue(t_FloatDocValuesField *self, PyObject *arg, void *data);
        static int t_FloatDocValuesField_set__longValue(t_FloatDocValuesField *self, PyObject *arg, void *data);
        static PyGetSetDef t_FloatDocValuesField__fields_[] = {
          DECLARE_SET_FIELD(t_FloatDocValuesField, floatValue),
          DECLARE_SET_FIELD(t_FloatDocValuesField, longValue),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_FloatDocValuesField__methods_[] = {
          DECLARE_METHOD(t_FloatDocValuesField, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FloatDocValuesField, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FloatDocValuesField, setFloatValue, METH_VARARGS),
          DECLARE_METHOD(t_FloatDocValuesField, setLongValue, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(FloatDocValuesField, t_FloatDocValuesField, ::org::apache::lucene::document::NumericDocValuesField, FloatDocValuesField, t_FloatDocValuesField_init_, 0, 0, t_FloatDocValuesField__fields_, 0, 0);

        void t_FloatDocValuesField::install(PyObject *module)
        {
          installType(&PY_TYPE(FloatDocValuesField), module, "FloatDocValuesField", 0);
        }

        void t_FloatDocValuesField::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(FloatDocValuesField).tp_dict, "class_", make_descriptor(FloatDocValuesField::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(FloatDocValuesField).tp_dict, "wrapfn_", make_descriptor(t_FloatDocValuesField::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(FloatDocValuesField).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_FloatDocValuesField_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, FloatDocValuesField::initializeClass, 1)))
            return NULL;
          return t_FloatDocValuesField::wrap_Object(FloatDocValuesField(((t_FloatDocValuesField *) arg)->object.this$));
        }
        static PyObject *t_FloatDocValuesField_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, FloatDocValuesField::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_FloatDocValuesField_init_(t_FloatDocValuesField *self, PyObject *args, PyObject *kwds)
        {
          ::java::lang::String a0((jobject) NULL);
          jfloat a1;
          FloatDocValuesField object((jobject) NULL);

          if (!parseArgs(args, "sF", &a0, &a1))
          {
            INT_CALL(object = FloatDocValuesField(a0, a1));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_FloatDocValuesField_setFloatValue(t_FloatDocValuesField *self, PyObject *args)
        {
          jfloat a0;

          if (!parseArgs(args, "F", &a0))
          {
            OBJ_CALL(self->object.setFloatValue(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(FloatDocValuesField), (PyObject *) self, "setFloatValue", args, 2);
        }

        static PyObject *t_FloatDocValuesField_setLongValue(t_FloatDocValuesField *self, PyObject *args)
        {
          jlong a0;

          if (!parseArgs(args, "J", &a0))
          {
            OBJ_CALL(self->object.setLongValue(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(FloatDocValuesField), (PyObject *) self, "setLongValue", args, 2);
        }

        static int t_FloatDocValuesField_set__floatValue(t_FloatDocValuesField *self, PyObject *arg, void *data)
        {
          {
            jfloat value;
            if (!parseArg(arg, "F", &value))
            {
              INT_CALL(self->object.setFloatValue(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "floatValue", arg);
          return -1;
        }

        static int t_FloatDocValuesField_set__longValue(t_FloatDocValuesField *self, PyObject *arg, void *data)
        {
          {
            jlong value;
            if (!parseArg(arg, "J", &value))
            {
              INT_CALL(self->object.setLongValue(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "longValue", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/PagedBytes$PagedBytesDataOutput.h"
#include "org/apache/lucene/util/PagedBytes.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *PagedBytes$PagedBytesDataOutput::class$ = NULL;
        jmethodID *PagedBytes$PagedBytesDataOutput::mids$ = NULL;
        bool PagedBytes$PagedBytesDataOutput::live$ = false;

        jclass PagedBytes$PagedBytesDataOutput::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/PagedBytes$PagedBytesDataOutput");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_2279e4ea] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/PagedBytes;)V");
            mids$[mid_getPosition_54c6a17a] = env->getMethodID(cls, "getPosition", "()J");
            mids$[mid_writeByte_b2271687] = env->getMethodID(cls, "writeByte", "(B)V");
            mids$[mid_writeBytes_86f4435f] = env->getMethodID(cls, "writeBytes", "([BII)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        PagedBytes$PagedBytesDataOutput::PagedBytes$PagedBytesDataOutput(const ::org::apache::lucene::util::PagedBytes & a0) : ::org::apache::lucene::store::DataOutput(env->newObject(initializeClass, &mids$, mid_init$_2279e4ea, a0.this$)) {}

        jlong PagedBytes$PagedBytesDataOutput::getPosition() const
        {
          return env->callLongMethod(this$, mids$[mid_getPosition_54c6a17a]);
        }

        void PagedBytes$PagedBytesDataOutput::writeByte(jbyte a0) const
        {
          env->callVoidMethod(this$, mids$[mid_writeByte_b2271687], a0);
        }

        void PagedBytes$PagedBytesDataOutput::writeBytes(const JArray< jbyte > & a0, jint a1, jint a2) const
        {
          env->callVoidMethod(this$, mids$[mid_writeBytes_86f4435f], a0.this$, a1, a2);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_PagedBytes$PagedBytesDataOutput_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_PagedBytes$PagedBytesDataOutput_instance_(PyTypeObject *type, PyObject *arg);
        static int t_PagedBytes$PagedBytesDataOutput_init_(t_PagedBytes$PagedBytesDataOutput *self, PyObject *args, PyObject *kwds);
        static PyObject *t_PagedBytes$PagedBytesDataOutput_getPosition(t_PagedBytes$PagedBytesDataOutput *self);
        static PyObject *t_PagedBytes$PagedBytesDataOutput_writeByte(t_PagedBytes$PagedBytesDataOutput *self, PyObject *args);
        static PyObject *t_PagedBytes$PagedBytesDataOutput_writeBytes(t_PagedBytes$PagedBytesDataOutput *self, PyObject *args);
        static PyObject *t_PagedBytes$PagedBytesDataOutput_get__position(t_PagedBytes$PagedBytesDataOutput *self, void *data);
        static PyGetSetDef t_PagedBytes$PagedBytesDataOutput__fields_[] = {
          DECLARE_GET_FIELD(t_PagedBytes$PagedBytesDataOutput, position),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_PagedBytes$PagedBytesDataOutput__methods_[] = {
          DECLARE_METHOD(t_PagedBytes$PagedBytesDataOutput, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PagedBytes$PagedBytesDataOutput, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PagedBytes$PagedBytesDataOutput, getPosition, METH_NOARGS),
          DECLARE_METHOD(t_PagedBytes$PagedBytesDataOutput, writeByte, METH_VARARGS),
          DECLARE_METHOD(t_PagedBytes$PagedBytesDataOutput, writeBytes, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(PagedBytes$PagedBytesDataOutput, t_PagedBytes$PagedBytesDataOutput, ::org::apache::lucene::store::DataOutput, PagedBytes$PagedBytesDataOutput, t_PagedBytes$PagedBytesDataOutput_init_, 0, 0, t_PagedBytes$PagedBytesDataOutput__fields_, 0, 0);

        void t_PagedBytes$PagedBytesDataOutput::install(PyObject *module)
        {
          installType(&PY_TYPE(PagedBytes$PagedBytesDataOutput), module, "PagedBytes$PagedBytesDataOutput", 0);
        }

        void t_PagedBytes$PagedBytesDataOutput::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(PagedBytes$PagedBytesDataOutput).tp_dict, "class_", make_descriptor(PagedBytes$PagedBytesDataOutput::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(PagedBytes$PagedBytesDataOutput).tp_dict, "wrapfn_", make_descriptor(t_PagedBytes$PagedBytesDataOutput::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(PagedBytes$PagedBytesDataOutput).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_PagedBytes$PagedBytesDataOutput_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, PagedBytes$PagedBytesDataOutput::initializeClass, 1)))
            return NULL;
          return t_PagedBytes$PagedBytesDataOutput::wrap_Object(PagedBytes$PagedBytesDataOutput(((t_PagedBytes$PagedBytesDataOutput *) arg)->object.this$));
        }
        static PyObject *t_PagedBytes$PagedBytesDataOutput_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, PagedBytes$PagedBytesDataOutput::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_PagedBytes$PagedBytesDataOutput_init_(t_PagedBytes$PagedBytesDataOutput *self, PyObject *args, PyObject *kwds)
        {
          ::org::apache::lucene::util::PagedBytes a0((jobject) NULL);
          PagedBytes$PagedBytesDataOutput object((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::util::PagedBytes::initializeClass, &a0))
          {
            INT_CALL(object = PagedBytes$PagedBytesDataOutput(a0));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_PagedBytes$PagedBytesDataOutput_getPosition(t_PagedBytes$PagedBytesDataOutput *self)
        {
          jlong result;
          OBJ_CALL(result = self->object.getPosition());
          return PyLong_FromLongLong((PY_LONG_LONG) result);
        }

        static PyObject *t_PagedBytes$PagedBytesDataOutput_writeByte(t_PagedBytes$PagedBytesDataOutput *self, PyObject *args)
        {
          jbyte a0;

          if (!parseArgs(args, "B", &a0))
          {
            OBJ_CALL(self->object.writeByte(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(PagedBytes$PagedBytesDataOutput), (PyObject *) self, "writeByte", args, 2);
        }

        static PyObject *t_PagedBytes$PagedBytesDataOutput_writeBytes(t_PagedBytes$PagedBytesDataOutput *self, PyObject *args)
        {
          JArray< jbyte > a0((jobject) NULL);
          jint a1;
          jint a2;

          if (!parseArgs(args, "[BII", &a0, &a1, &a2))
          {
            OBJ_CALL(self->object.writeBytes(a0, a1, a2));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(PagedBytes$PagedBytesDataOutput), (PyObject *) self, "writeBytes", args, 2);
        }

        static PyObject *t_PagedBytes$PagedBytesDataOutput_get__position(t_PagedBytes$PagedBytesDataOutput *self, void *data)
        {
          jlong value;
          OBJ_CALL(value = self->object.getPosition());
          return PyLong_FromLongLong((PY_LONG_LONG) value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/Fields.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/index/Terms.h"
#include "java/util/Iterator.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "java/lang/Iterable.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *Fields::class$ = NULL;
        jmethodID *Fields::mids$ = NULL;
        bool Fields::live$ = false;
        JArray< Fields > *Fields::EMPTY_ARRAY = NULL;

        jclass Fields::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/Fields");

            mids$ = new jmethodID[max_mid];
            mids$[mid_getUniqueTermCount_54c6a17a] = env->getMethodID(cls, "getUniqueTermCount", "()J");
            mids$[mid_iterator_40858c90] = env->getMethodID(cls, "iterator", "()Ljava/util/Iterator;");
            mids$[mid_size_54c6a179] = env->getMethodID(cls, "size", "()I");
            mids$[mid_terms_ee262ab4] = env->getMethodID(cls, "terms", "(Ljava/lang/String;)Lorg/apache/lucene/index/Terms;");

            class$ = (::java::lang::Class *) new JObject(cls);
            cls = (jclass) class$->this$;

            EMPTY_ARRAY = new JArray< Fields >(env->getStaticObjectField(cls, "EMPTY_ARRAY", "[Lorg/apache/lucene/index/Fields;"));
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        jlong Fields::getUniqueTermCount() const
        {
          return env->callLongMethod(this$, mids$[mid_getUniqueTermCount_54c6a17a]);
        }

        ::java::util::Iterator Fields::iterator() const
        {
          return ::java::util::Iterator(env->callObjectMethod(this$, mids$[mid_iterator_40858c90]));
        }

        jint Fields::size() const
        {
          return env->callIntMethod(this$, mids$[mid_size_54c6a179]);
        }

        ::org::apache::lucene::index::Terms Fields::terms(const ::java::lang::String & a0) const
        {
          return ::org::apache::lucene::index::Terms(env->callObjectMethod(this$, mids$[mid_terms_ee262ab4], a0.this$));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_Fields_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_Fields_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_Fields_getUniqueTermCount(t_Fields *self);
        static PyObject *t_Fields_iterator(t_Fields *self);
        static PyObject *t_Fields_size(t_Fields *self);
        static PyObject *t_Fields_terms(t_Fields *self, PyObject *arg);
        static PyObject *t_Fields_get__uniqueTermCount(t_Fields *self, void *data);
        static PyGetSetDef t_Fields__fields_[] = {
          DECLARE_GET_FIELD(t_Fields, uniqueTermCount),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_Fields__methods_[] = {
          DECLARE_METHOD(t_Fields, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_Fields, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_Fields, getUniqueTermCount, METH_NOARGS),
          DECLARE_METHOD(t_Fields, iterator, METH_NOARGS),
          DECLARE_METHOD(t_Fields, size, METH_NOARGS),
          DECLARE_METHOD(t_Fields, terms, METH_O),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(Fields, t_Fields, ::java::lang::Object, Fields, abstract_init, ((PyObject *(*)(t_Fields *)) get_iterator< t_Fields >), 0, t_Fields__fields_, 0, 0);

        void t_Fields::install(PyObject *module)
        {
          installType(&PY_TYPE(Fields), module, "Fields", 0);
        }

        void t_Fields::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(Fields).tp_dict, "class_", make_descriptor(Fields::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(Fields).tp_dict, "wrapfn_", make_descriptor(t_Fields::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(Fields).tp_dict, "boxfn_", make_descriptor(boxObject));
          env->getClass(Fields::initializeClass);
          PyDict_SetItemString(PY_TYPE(Fields).tp_dict, "EMPTY_ARRAY", make_descriptor(JArray<jobject>(Fields::EMPTY_ARRAY->this$).wrap(t_Fields::wrap_jobject)));
        }

        static PyObject *t_Fields_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, Fields::initializeClass, 1)))
            return NULL;
          return t_Fields::wrap_Object(Fields(((t_Fields *) arg)->object.this$));
        }
        static PyObject *t_Fields_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, Fields::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_Fields_getUniqueTermCount(t_Fields *self)
        {
          jlong result;
          OBJ_CALL(result = self->object.getUniqueTermCount());
          return PyLong_FromLongLong((PY_LONG_LONG) result);
        }

        static PyObject *t_Fields_iterator(t_Fields *self)
        {
          ::java::util::Iterator result((jobject) NULL);
          OBJ_CALL(result = self->object.iterator());
          return ::java::util::t_Iterator::wrap_Object(result, &::java::lang::PY_TYPE(String));
        }

        static PyObject *t_Fields_size(t_Fields *self)
        {
          jint result;
          OBJ_CALL(result = self->object.size());
          return PyInt_FromLong((long) result);
        }

        static PyObject *t_Fields_terms(t_Fields *self, PyObject *arg)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::index::Terms result((jobject) NULL);

          if (!parseArg(arg, "s", &a0))
          {
            OBJ_CALL(result = self->object.terms(a0));
            return ::org::apache::lucene::index::t_Terms::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "terms", arg);
          return NULL;
        }

        static PyObject *t_Fields_get__uniqueTermCount(t_Fields *self, void *data)
        {
          jlong value;
          OBJ_CALL(value = self->object.getUniqueTermCount());
          return PyLong_FromLongLong((PY_LONG_LONG) value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/standard/std34/StandardTokenizerImpl34.h"
#include "org/apache/lucene/analysis/standard/StandardTokenizerInterface.h"
#include "java/lang/Class.h"
#include "java/io/Reader.h"
#include "org/apache/lucene/analysis/tokenattributes/CharTermAttribute.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace standard {
          namespace std34 {

            ::java::lang::Class *StandardTokenizerImpl34::class$ = NULL;
            jmethodID *StandardTokenizerImpl34::mids$ = NULL;
            bool StandardTokenizerImpl34::live$ = false;
            jint StandardTokenizerImpl34::HANGUL_TYPE = (jint) 0;
            jint StandardTokenizerImpl34::HIRAGANA_TYPE = (jint) 0;
            jint StandardTokenizerImpl34::IDEOGRAPHIC_TYPE = (jint) 0;
            jint StandardTokenizerImpl34::KATAKANA_TYPE = (jint) 0;
            jint StandardTokenizerImpl34::NUMERIC_TYPE = (jint) 0;
            jint StandardTokenizerImpl34::SOUTH_EAST_ASIAN_TYPE = (jint) 0;
            jint StandardTokenizerImpl34::WORD_TYPE = (jint) 0;
            jint StandardTokenizerImpl34::YYEOF = (jint) 0;
            jint StandardTokenizerImpl34::YYINITIAL = (jint) 0;

            jclass StandardTokenizerImpl34::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/standard/std34/StandardTokenizerImpl34");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_cf2e3c10] = env->getMethodID(cls, "<init>", "(Ljava/io/Reader;)V");
                mids$[mid_getNextToken_54c6a179] = env->getMethodID(cls, "getNextToken", "()I");
                mids$[mid_getText_64c709f2] = env->getMethodID(cls, "getText", "(Lorg/apache/lucene/analysis/tokenattributes/CharTermAttribute;)V");
                mids$[mid_yybegin_39c7bd3c] = env->getMethodID(cls, "yybegin", "(I)V");
                mids$[mid_yychar_54c6a179] = env->getMethodID(cls, "yychar", "()I");
                mids$[mid_yycharat_39c7bd29] = env->getMethodID(cls, "yycharat", "(I)C");
                mids$[mid_yyclose_54c6a166] = env->getMethodID(cls, "yyclose", "()V");
                mids$[mid_yylength_54c6a179] = env->getMethodID(cls, "yylength", "()I");
                mids$[mid_yypushback_39c7bd3c] = env->getMethodID(cls, "yypushback", "(I)V");
                mids$[mid_yyreset_cf2e3c10] = env->getMethodID(cls, "yyreset", "(Ljava/io/Reader;)V");
                mids$[mid_yystate_54c6a179] = env->getMethodID(cls, "yystate", "()I");
                mids$[mid_yytext_14c7b5c5] = env->getMethodID(cls, "yytext", "()Ljava/lang/String;");

                class$ = (::java::lang::Class *) new JObject(cls);
                cls = (jclass) class$->this$;

                HANGUL_TYPE = env->getStaticIntField(cls, "HANGUL_TYPE");
                HIRAGANA_TYPE = env->getStaticIntField(cls, "HIRAGANA_TYPE");
                IDEOGRAPHIC_TYPE = env->getStaticIntField(cls, "IDEOGRAPHIC_TYPE");
                KATAKANA_TYPE = env->getStaticIntField(cls, "KATAKANA_TYPE");
                NUMERIC_TYPE = env->getStaticIntField(cls, "NUMERIC_TYPE");
                SOUTH_EAST_ASIAN_TYPE = env->getStaticIntField(cls, "SOUTH_EAST_ASIAN_TYPE");
                WORD_TYPE = env->getStaticIntField(cls, "WORD_TYPE");
                YYEOF = env->getStaticIntField(cls, "YYEOF");
                YYINITIAL = env->getStaticIntField(cls, "YYINITIAL");
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            StandardTokenizerImpl34::StandardTokenizerImpl34(const ::java::io::Reader & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_cf2e3c10, a0.this$)) {}

            jint StandardTokenizerImpl34::getNextToken() const
            {
              return env->callIntMethod(this$, mids$[mid_getNextToken_54c6a179]);
            }

            void StandardTokenizerImpl34::getText(const ::org::apache::lucene::analysis::tokenattributes::CharTermAttribute & a0) const
            {
              env->callVoidMethod(this$, mids$[mid_getText_64c709f2], a0.this$);
            }

            void StandardTokenizerImpl34::yybegin(jint a0) const
            {
              env->callVoidMethod(this$, mids$[mid_yybegin_39c7bd3c], a0);
            }

            jint StandardTokenizerImpl34::yychar() const
            {
              return env->callIntMethod(this$, mids$[mid_yychar_54c6a179]);
            }

            jchar StandardTokenizerImpl34::yycharat(jint a0) const
            {
              return env->callCharMethod(this$, mids$[mid_yycharat_39c7bd29], a0);
            }

            void StandardTokenizerImpl34::yyclose() const
            {
              env->callVoidMethod(this$, mids$[mid_yyclose_54c6a166]);
            }

            jint StandardTokenizerImpl34::yylength() const
            {
              return env->callIntMethod(this$, mids$[mid_yylength_54c6a179]);
            }

            void StandardTokenizerImpl34::yypushback(jint a0) const
            {
              env->callVoidMethod(this$, mids$[mid_yypushback_39c7bd3c], a0);
            }

            void StandardTokenizerImpl34::yyreset(const ::java::io::Reader & a0) const
            {
              env->callVoidMethod(this$, mids$[mid_yyreset_cf2e3c10], a0.this$);
            }

            jint StandardTokenizerImpl34::yystate() const
            {
              return env->callIntMethod(this$, mids$[mid_yystate_54c6a179]);
            }

            ::java::lang::String StandardTokenizerImpl34::yytext() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_yytext_14c7b5c5]));
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace standard {
          namespace std34 {
            static PyObject *t_StandardTokenizerImpl34_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_StandardTokenizerImpl34_instance_(PyTypeObject *type, PyObject *arg);
            static int t_StandardTokenizerImpl34_init_(t_StandardTokenizerImpl34 *self, PyObject *args, PyObject *kwds);
            static PyObject *t_StandardTokenizerImpl34_getNextToken(t_StandardTokenizerImpl34 *self);
            static PyObject *t_StandardTokenizerImpl34_getText(t_StandardTokenizerImpl34 *self, PyObject *arg);
            static PyObject *t_StandardTokenizerImpl34_yybegin(t_StandardTokenizerImpl34 *self, PyObject *arg);
            static PyObject *t_StandardTokenizerImpl34_yychar(t_StandardTokenizerImpl34 *self);
            static PyObject *t_StandardTokenizerImpl34_yycharat(t_StandardTokenizerImpl34 *self, PyObject *arg);
            static PyObject *t_StandardTokenizerImpl34_yyclose(t_StandardTokenizerImpl34 *self);
            static PyObject *t_StandardTokenizerImpl34_yylength(t_StandardTokenizerImpl34 *self);
            static PyObject *t_StandardTokenizerImpl34_yypushback(t_StandardTokenizerImpl34 *self, PyObject *arg);
            static PyObject *t_StandardTokenizerImpl34_yyreset(t_StandardTokenizerImpl34 *self, PyObject *arg);
            static PyObject *t_StandardTokenizerImpl34_yystate(t_StandardTokenizerImpl34 *self);
            static PyObject *t_StandardTokenizerImpl34_yytext(t_StandardTokenizerImpl34 *self);
            static PyObject *t_StandardTokenizerImpl34_get__nextToken(t_StandardTokenizerImpl34 *self, void *data);
            static PyGetSetDef t_StandardTokenizerImpl34__fields_[] = {
              DECLARE_GET_FIELD(t_StandardTokenizerImpl34, nextToken),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_StandardTokenizerImpl34__methods_[] = {
              DECLARE_METHOD(t_StandardTokenizerImpl34, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_StandardTokenizerImpl34, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_StandardTokenizerImpl34, getNextToken, METH_NOARGS),
              DECLARE_METHOD(t_StandardTokenizerImpl34, getText, METH_O),
              DECLARE_METHOD(t_StandardTokenizerImpl34, yybegin, METH_O),
              DECLARE_METHOD(t_StandardTokenizerImpl34, yychar, METH_NOARGS),
              DECLARE_METHOD(t_StandardTokenizerImpl34, yycharat, METH_O),
              DECLARE_METHOD(t_StandardTokenizerImpl34, yyclose, METH_NOARGS),
              DECLARE_METHOD(t_StandardTokenizerImpl34, yylength, METH_NOARGS),
              DECLARE_METHOD(t_StandardTokenizerImpl34, yypushback, METH_O),
              DECLARE_METHOD(t_StandardTokenizerImpl34, yyreset, METH_O),
              DECLARE_METHOD(t_StandardTokenizerImpl34, yystate, METH_NOARGS),
              DECLARE_METHOD(t_StandardTokenizerImpl34, yytext, METH_NOARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(StandardTokenizerImpl34, t_StandardTokenizerImpl34, ::java::lang::Object, StandardTokenizerImpl34, t_StandardTokenizerImpl34_init_, 0, 0, t_StandardTokenizerImpl34__fields_, 0, 0);

            void t_StandardTokenizerImpl34::install(PyObject *module)
            {
              installType(&PY_TYPE(StandardTokenizerImpl34), module, "StandardTokenizerImpl34", 0);
            }

            void t_StandardTokenizerImpl34::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(StandardTokenizerImpl34).tp_dict, "class_", make_descriptor(StandardTokenizerImpl34::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(StandardTokenizerImpl34).tp_dict, "wrapfn_", make_descriptor(t_StandardTokenizerImpl34::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(StandardTokenizerImpl34).tp_dict, "boxfn_", make_descriptor(boxObject));
              env->getClass(StandardTokenizerImpl34::initializeClass);
              PyDict_SetItemString(PY_TYPE(StandardTokenizerImpl34).tp_dict, "HANGUL_TYPE", make_descriptor(StandardTokenizerImpl34::HANGUL_TYPE));
              PyDict_SetItemString(PY_TYPE(StandardTokenizerImpl34).tp_dict, "HIRAGANA_TYPE", make_descriptor(StandardTokenizerImpl34::HIRAGANA_TYPE));
              PyDict_SetItemString(PY_TYPE(StandardTokenizerImpl34).tp_dict, "IDEOGRAPHIC_TYPE", make_descriptor(StandardTokenizerImpl34::IDEOGRAPHIC_TYPE));
              PyDict_SetItemString(PY_TYPE(StandardTokenizerImpl34).tp_dict, "KATAKANA_TYPE", make_descriptor(StandardTokenizerImpl34::KATAKANA_TYPE));
              PyDict_SetItemString(PY_TYPE(StandardTokenizerImpl34).tp_dict, "NUMERIC_TYPE", make_descriptor(StandardTokenizerImpl34::NUMERIC_TYPE));
              PyDict_SetItemString(PY_TYPE(StandardTokenizerImpl34).tp_dict, "SOUTH_EAST_ASIAN_TYPE", make_descriptor(StandardTokenizerImpl34::SOUTH_EAST_ASIAN_TYPE));
              PyDict_SetItemString(PY_TYPE(StandardTokenizerImpl34).tp_dict, "WORD_TYPE", make_descriptor(StandardTokenizerImpl34::WORD_TYPE));
              PyDict_SetItemString(PY_TYPE(StandardTokenizerImpl34).tp_dict, "YYEOF", make_descriptor(StandardTokenizerImpl34::YYEOF));
              PyDict_SetItemString(PY_TYPE(StandardTokenizerImpl34).tp_dict, "YYINITIAL", make_descriptor(StandardTokenizerImpl34::YYINITIAL));
            }

            static PyObject *t_StandardTokenizerImpl34_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, StandardTokenizerImpl34::initializeClass, 1)))
                return NULL;
              return t_StandardTokenizerImpl34::wrap_Object(StandardTokenizerImpl34(((t_StandardTokenizerImpl34 *) arg)->object.this$));
            }
            static PyObject *t_StandardTokenizerImpl34_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, StandardTokenizerImpl34::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_StandardTokenizerImpl34_init_(t_StandardTokenizerImpl34 *self, PyObject *args, PyObject *kwds)
            {
              ::java::io::Reader a0((jobject) NULL);
              StandardTokenizerImpl34 object((jobject) NULL);

              if (!parseArgs(args, "k", ::java::io::Reader::initializeClass, &a0))
              {
                INT_CALL(object = StandardTokenizerImpl34(a0));
                self->object = object;
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_StandardTokenizerImpl34_getNextToken(t_StandardTokenizerImpl34 *self)
            {
              jint result;
              OBJ_CALL(result = self->object.getNextToken());
              return PyInt_FromLong((long) result);
            }

            static PyObject *t_StandardTokenizerImpl34_getText(t_StandardTokenizerImpl34 *self, PyObject *arg)
            {
              ::org::apache::lucene::analysis::tokenattributes::CharTermAttribute a0((jobject) NULL);

              if (!parseArg(arg, "k", ::org::apache::lucene::analysis::tokenattributes::CharTermAttribute::initializeClass, &a0))
              {
                OBJ_CALL(self->object.getText(a0));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "getText", arg);
              return NULL;
            }

            static PyObject *t_StandardTokenizerImpl34_yybegin(t_StandardTokenizerImpl34 *self, PyObject *arg)
            {
              jint a0;

              if (!parseArg(arg, "I", &a0))
              {
                OBJ_CALL(self->object.yybegin(a0));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "yybegin", arg);
              return NULL;
            }

            static PyObject *t_StandardTokenizerImpl34_yychar(t_StandardTokenizerImpl34 *self)
            {
              jint result;
              OBJ_CALL(result = self->object.yychar());
              return PyInt_FromLong((long) result);
            }

            static PyObject *t_StandardTokenizerImpl34_yycharat(t_StandardTokenizerImpl34 *self, PyObject *arg)
            {
              jint a0;
              jchar result;

              if (!parseArg(arg, "I", &a0))
              {
                OBJ_CALL(result = self->object.yycharat(a0));
                return PyUnicode_FromUnicode((Py_UNICODE *) &result, 1);
              }

              PyErr_SetArgsError((PyObject *) self, "yycharat", arg);
              return NULL;
            }

            static PyObject *t_StandardTokenizerImpl34_yyclose(t_StandardTokenizerImpl34 *self)
            {
              OBJ_CALL(self->object.yyclose());
              Py_RETURN_NONE;
            }

            static PyObject *t_StandardTokenizerImpl34_yylength(t_StandardTokenizerImpl34 *self)
            {
              jint result;
              OBJ_CALL(result = self->object.yylength());
              return PyInt_FromLong((long) result);
            }

            static PyObject *t_StandardTokenizerImpl34_yypushback(t_StandardTokenizerImpl34 *self, PyObject *arg)
            {
              jint a0;

              if (!parseArg(arg, "I", &a0))
              {
                OBJ_CALL(self->object.yypushback(a0));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "yypushback", arg);
              return NULL;
            }

            static PyObject *t_StandardTokenizerImpl34_yyreset(t_StandardTokenizerImpl34 *self, PyObject *arg)
            {
              ::java::io::Reader a0((jobject) NULL);

              if (!parseArg(arg, "k", ::java::io::Reader::initializeClass, &a0))
              {
                OBJ_CALL(self->object.yyreset(a0));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "yyreset", arg);
              return NULL;
            }

            static PyObject *t_StandardTokenizerImpl34_yystate(t_StandardTokenizerImpl34 *self)
            {
              jint result;
              OBJ_CALL(result = self->object.yystate());
              return PyInt_FromLong((long) result);
            }

            static PyObject *t_StandardTokenizerImpl34_yytext(t_StandardTokenizerImpl34 *self)
            {
              ::java::lang::String result((jobject) NULL);
              OBJ_CALL(result = self->object.yytext());
              return j2p(result);
            }

            static PyObject *t_StandardTokenizerImpl34_get__nextToken(t_StandardTokenizerImpl34 *self, void *data)
            {
              jint value;
              OBJ_CALL(value = self->object.getNextToken());
              return PyInt_FromLong((long) value);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/FieldComparator$TermValComparator.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *FieldComparator$TermValComparator::class$ = NULL;
        jmethodID *FieldComparator$TermValComparator::mids$ = NULL;
        bool FieldComparator$TermValComparator::live$ = false;

        jclass FieldComparator$TermValComparator::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/FieldComparator$TermValComparator");

            mids$ = new jmethodID[max_mid];
            mids$[mid_compare_d8d154b9] = env->getMethodID(cls, "compare", "(II)I");
            mids$[mid_compareBottom_39c7bd23] = env->getMethodID(cls, "compareBottom", "(I)I");
            mids$[mid_compareTop_39c7bd23] = env->getMethodID(cls, "compareTop", "(I)I");
            mids$[mid_compareValues_594e5ef9] = env->getMethodID(cls, "compareValues", "(Lorg/apache/lucene/util/BytesRef;Lorg/apache/lucene/util/BytesRef;)I");
            mids$[mid_copy_d8d154a6] = env->getMethodID(cls, "copy", "(II)V");
            mids$[mid_setBottom_39c7bd3c] = env->getMethodID(cls, "setBottom", "(I)V");
            mids$[mid_setNextReader_6329aed7] = env->getMethodID(cls, "setNextReader", "(Lorg/apache/lucene/index/AtomicReaderContext;)Lorg/apache/lucene/search/FieldComparator;");
            mids$[mid_setTopValue_7bc03dc4] = env->getMethodID(cls, "setTopValue", "(Lorg/apache/lucene/util/BytesRef;)V");
            mids$[mid_value_b57e9c3f] = env->getMethodID(cls, "value", "(I)Lorg/apache/lucene/util/BytesRef;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        jint FieldComparator$TermValComparator::compare(jint a0, jint a1) const
        {
          return env->callIntMethod(this$, mids$[mid_compare_d8d154b9], a0, a1);
        }

        jint FieldComparator$TermValComparator::compareBottom(jint a0) const
        {
          return env->callIntMethod(this$, mids$[mid_compareBottom_39c7bd23], a0);
        }

        jint FieldComparator$TermValComparator::compareTop(jint a0) const
        {
          return env->callIntMethod(this$, mids$[mid_compareTop_39c7bd23], a0);
        }

        jint FieldComparator$TermValComparator::compareValues(const ::org::apache::lucene::util::BytesRef & a0, const ::org::apache::lucene::util::BytesRef & a1) const
        {
          return env->callIntMethod(this$, mids$[mid_compareValues_594e5ef9], a0.this$, a1.this$);
        }

        void FieldComparator$TermValComparator::copy(jint a0, jint a1) const
        {
          env->callVoidMethod(this$, mids$[mid_copy_d8d154a6], a0, a1);
        }

        void FieldComparator$TermValComparator::setBottom(jint a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setBottom_39c7bd3c], a0);
        }

        ::org::apache::lucene::search::FieldComparator FieldComparator$TermValComparator::setNextReader(const ::org::apache::lucene::index::AtomicReaderContext & a0) const
        {
          return ::org::apache::lucene::search::FieldComparator(env->callObjectMethod(this$, mids$[mid_setNextReader_6329aed7], a0.this$));
        }

        void FieldComparator$TermValComparator::setTopValue(const ::org::apache::lucene::util::BytesRef & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setTopValue_7bc03dc4], a0.this$);
        }

        ::org::apache::lucene::util::BytesRef FieldComparator$TermValComparator::value(jint a0) const
        {
          return ::org::apache::lucene::util::BytesRef(env->callObjectMethod(this$, mids$[mid_value_b57e9c3f], a0));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_FieldComparator$TermValComparator_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FieldComparator$TermValComparator_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FieldComparator$TermValComparator_of_(t_FieldComparator$TermValComparator *self, PyObject *args);
        static PyObject *t_FieldComparator$TermValComparator_compare(t_FieldComparator$TermValComparator *self, PyObject *args);
        static PyObject *t_FieldComparator$TermValComparator_compareBottom(t_FieldComparator$TermValComparator *self, PyObject *args);
        static PyObject *t_FieldComparator$TermValComparator_compareTop(t_FieldComparator$TermValComparator *self, PyObject *args);
        static PyObject *t_FieldComparator$TermValComparator_compareValues(t_FieldComparator$TermValComparator *self, PyObject *args);
        static PyObject *t_FieldComparator$TermValComparator_copy(t_FieldComparator$TermValComparator *self, PyObject *args);
        static PyObject *t_FieldComparator$TermValComparator_setBottom(t_FieldComparator$TermValComparator *self, PyObject *args);
        static PyObject *t_FieldComparator$TermValComparator_setNextReader(t_FieldComparator$TermValComparator *self, PyObject *args);
        static PyObject *t_FieldComparator$TermValComparator_setTopValue(t_FieldComparator$TermValComparator *self, PyObject *args);
        static PyObject *t_FieldComparator$TermValComparator_value(t_FieldComparator$TermValComparator *self, PyObject *args);
        static int t_FieldComparator$TermValComparator_set__bottom(t_FieldComparator$TermValComparator *self, PyObject *arg, void *data);
        static int t_FieldComparator$TermValComparator_set__nextReader(t_FieldComparator$TermValComparator *self, PyObject *arg, void *data);
        static int t_FieldComparator$TermValComparator_set__topValue(t_FieldComparator$TermValComparator *self, PyObject *arg, void *data);
        static PyObject *t_FieldComparator$TermValComparator_get__parameters_(t_FieldComparator$TermValComparator *self, void *data);
        static PyGetSetDef t_FieldComparator$TermValComparator__fields_[] = {
          DECLARE_SET_FIELD(t_FieldComparator$TermValComparator, bottom),
          DECLARE_SET_FIELD(t_FieldComparator$TermValComparator, nextReader),
          DECLARE_SET_FIELD(t_FieldComparator$TermValComparator, topValue),
          DECLARE_GET_FIELD(t_FieldComparator$TermValComparator, parameters_),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_FieldComparator$TermValComparator__methods_[] = {
          DECLARE_METHOD(t_FieldComparator$TermValComparator, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FieldComparator$TermValComparator, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FieldComparator$TermValComparator, of_, METH_VARARGS),
          DECLARE_METHOD(t_FieldComparator$TermValComparator, compare, METH_VARARGS),
          DECLARE_METHOD(t_FieldComparator$TermValComparator, compareBottom, METH_VARARGS),
          DECLARE_METHOD(t_FieldComparator$TermValComparator, compareTop, METH_VARARGS),
          DECLARE_METHOD(t_FieldComparator$TermValComparator, compareValues, METH_VARARGS),
          DECLARE_METHOD(t_FieldComparator$TermValComparator, copy, METH_VARARGS),
          DECLARE_METHOD(t_FieldComparator$TermValComparator, setBottom, METH_VARARGS),
          DECLARE_METHOD(t_FieldComparator$TermValComparator, setNextReader, METH_VARARGS),
          DECLARE_METHOD(t_FieldComparator$TermValComparator, setTopValue, METH_VARARGS),
          DECLARE_METHOD(t_FieldComparator$TermValComparator, value, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(FieldComparator$TermValComparator, t_FieldComparator$TermValComparator, ::org::apache::lucene::search::FieldComparator, FieldComparator$TermValComparator, abstract_init, 0, 0, t_FieldComparator$TermValComparator__fields_, 0, 0);
        PyObject *t_FieldComparator$TermValComparator::wrap_Object(const FieldComparator$TermValComparator& object, PyTypeObject *p0)
        {
          PyObject *obj = t_FieldComparator$TermValComparator::wrap_Object(object);
          if (obj != NULL && obj != Py_None)
          {
            t_FieldComparator$TermValComparator *self = (t_FieldComparator$TermValComparator *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        PyObject *t_FieldComparator$TermValComparator::wrap_jobject(const jobject& object, PyTypeObject *p0)
        {
          PyObject *obj = t_FieldComparator$TermValComparator::wrap_jobject(object);
          if (obj != NULL && obj != Py_None)
          {
            t_FieldComparator$TermValComparator *self = (t_FieldComparator$TermValComparator *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        void t_FieldComparator$TermValComparator::install(PyObject *module)
        {
          installType(&PY_TYPE(FieldComparator$TermValComparator), module, "FieldComparator$TermValComparator", 0);
        }

        void t_FieldComparator$TermValComparator::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(FieldComparator$TermValComparator).tp_dict, "class_", make_descriptor(FieldComparator$TermValComparator::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(FieldComparator$TermValComparator).tp_dict, "wrapfn_", make_descriptor(t_FieldComparator$TermValComparator::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(FieldComparator$TermValComparator).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_FieldComparator$TermValComparator_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, FieldComparator$TermValComparator::initializeClass, 1)))
            return NULL;
          return t_FieldComparator$TermValComparator::wrap_Object(FieldComparator$TermValComparator(((t_FieldComparator$TermValComparator *) arg)->object.this$));
        }
        static PyObject *t_FieldComparator$TermValComparator_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, FieldComparator$TermValComparator::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_FieldComparator$TermValComparator_of_(t_FieldComparator$TermValComparator *self, PyObject *args)
        {
          if (!parseArg(args, "T", 1, &(self->parameters)))
            Py_RETURN_SELF;
          return PyErr_SetArgsError((PyObject *) self, "of_", args);
        }

        static PyObject *t_FieldComparator$TermValComparator_compare(t_FieldComparator$TermValComparator *self, PyObject *args)
        {
          jint a0;
          jint a1;
          jint result;

          if (!parseArgs(args, "II", &a0, &a1))
          {
            OBJ_CALL(result = self->object.compare(a0, a1));
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(FieldComparator$TermValComparator), (PyObject *) self, "compare", args, 2);
        }

        static PyObject *t_FieldComparator$TermValComparator_compareBottom(t_FieldComparator$TermValComparator *self, PyObject *args)
        {
          jint a0;
          jint result;

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(result = self->object.compareBottom(a0));
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(FieldComparator$TermValComparator), (PyObject *) self, "compareBottom", args, 2);
        }

        static PyObject *t_FieldComparator$TermValComparator_compareTop(t_FieldComparator$TermValComparator *self, PyObject *args)
        {
          jint a0;
          jint result;

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(result = self->object.compareTop(a0));
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(FieldComparator$TermValComparator), (PyObject *) self, "compareTop", args, 2);
        }

        static PyObject *t_FieldComparator$TermValComparator_compareValues(t_FieldComparator$TermValComparator *self, PyObject *args)
        {
          ::org::apache::lucene::util::BytesRef a0((jobject) NULL);
          ::org::apache::lucene::util::BytesRef a1((jobject) NULL);
          jint result;

          if (!parseArgs(args, "kk", ::org::apache::lucene::util::BytesRef::initializeClass, ::org::apache::lucene::util::BytesRef::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = self->object.compareValues(a0, a1));
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(FieldComparator$TermValComparator), (PyObject *) self, "compareValues", args, 2);
        }

        static PyObject *t_FieldComparator$TermValComparator_copy(t_FieldComparator$TermValComparator *self, PyObject *args)
        {
          jint a0;
          jint a1;

          if (!parseArgs(args, "II", &a0, &a1))
          {
            OBJ_CALL(self->object.copy(a0, a1));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(FieldComparator$TermValComparator), (PyObject *) self, "copy", args, 2);
        }

        static PyObject *t_FieldComparator$TermValComparator_setBottom(t_FieldComparator$TermValComparator *self, PyObject *args)
        {
          jint a0;

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(self->object.setBottom(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(FieldComparator$TermValComparator), (PyObject *) self, "setBottom", args, 2);
        }

        static PyObject *t_FieldComparator$TermValComparator_setNextReader(t_FieldComparator$TermValComparator *self, PyObject *args)
        {
          ::org::apache::lucene::index::AtomicReaderContext a0((jobject) NULL);
          ::org::apache::lucene::search::FieldComparator result((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.setNextReader(a0));
            return ::org::apache::lucene::search::t_FieldComparator::wrap_Object(result, &::org::apache::lucene::util::PY_TYPE(BytesRef));
          }

          return callSuper(&PY_TYPE(FieldComparator$TermValComparator), (PyObject *) self, "setNextReader", args, 2);
        }

        static PyObject *t_FieldComparator$TermValComparator_setTopValue(t_FieldComparator$TermValComparator *self, PyObject *args)
        {
          ::org::apache::lucene::util::BytesRef a0((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::util::BytesRef::initializeClass, &a0))
          {
            OBJ_CALL(self->object.setTopValue(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(FieldComparator$TermValComparator), (PyObject *) self, "setTopValue", args, 2);
        }

        static PyObject *t_FieldComparator$TermValComparator_value(t_FieldComparator$TermValComparator *self, PyObject *args)
        {
          jint a0;
          ::org::apache::lucene::util::BytesRef result((jobject) NULL);

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(result = self->object.value(a0));
            return ::org::apache::lucene::util::t_BytesRef::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(FieldComparator$TermValComparator), (PyObject *) self, "value", args, 2);
        }
        static PyObject *t_FieldComparator$TermValComparator_get__parameters_(t_FieldComparator$TermValComparator *self, void *data)
        {
          return typeParameters(self->parameters, sizeof(self->parameters));
        }

        static int t_FieldComparator$TermValComparator_set__bottom(t_FieldComparator$TermValComparator *self, PyObject *arg, void *data)
        {
          {
            jint value;
            if (!parseArg(arg, "I", &value))
            {
              INT_CALL(self->object.setBottom(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "bottom", arg);
          return -1;
        }

        static int t_FieldComparator$TermValComparator_set__nextReader(t_FieldComparator$TermValComparator *self, PyObject *arg, void *data)
        {
          {
            ::org::apache::lucene::index::AtomicReaderContext value((jobject) NULL);
            if (!parseArg(arg, "k", ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &value))
            {
              INT_CALL(self->object.setNextReader(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "nextReader", arg);
          return -1;
        }

        static int t_FieldComparator$TermValComparator_set__topValue(t_FieldComparator$TermValComparator *self, PyObject *arg, void *data)
        {
          {
            ::org::apache::lucene::util::BytesRef value((jobject) NULL);
            if (!parseArg(arg, "k", ::org::apache::lucene::util::BytesRef::initializeClass, &value))
            {
              INT_CALL(self->object.setTopValue(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "topValue", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/facet/range/LongRangeCounter$LongRangeNode.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace range {

          ::java::lang::Class *LongRangeCounter$LongRangeNode::class$ = NULL;
          jmethodID *LongRangeCounter$LongRangeNode::mids$ = NULL;
          bool LongRangeCounter$LongRangeNode::live$ = false;

          jclass LongRangeCounter$LongRangeNode::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/facet/range/LongRangeCounter$LongRangeNode");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_ec849fce] = env->getMethodID(cls, "<init>", "(JJLorg/apache/lucene/facet/range/LongRangeCounter$LongRangeNode;Lorg/apache/lucene/facet/range/LongRangeCounter$LongRangeNode;I)V");
              mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          LongRangeCounter$LongRangeNode::LongRangeCounter$LongRangeNode(jlong a0, jlong a1, const LongRangeCounter$LongRangeNode & a2, const LongRangeCounter$LongRangeNode & a3, jint a4) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_ec849fce, a0, a1, a2.this$, a3.this$, a4)) {}

          ::java::lang::String LongRangeCounter$LongRangeNode::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace range {
          static PyObject *t_LongRangeCounter$LongRangeNode_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_LongRangeCounter$LongRangeNode_instance_(PyTypeObject *type, PyObject *arg);
          static int t_LongRangeCounter$LongRangeNode_init_(t_LongRangeCounter$LongRangeNode *self, PyObject *args, PyObject *kwds);
          static PyObject *t_LongRangeCounter$LongRangeNode_toString(t_LongRangeCounter$LongRangeNode *self, PyObject *args);

          static PyMethodDef t_LongRangeCounter$LongRangeNode__methods_[] = {
            DECLARE_METHOD(t_LongRangeCounter$LongRangeNode, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_LongRangeCounter$LongRangeNode, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_LongRangeCounter$LongRangeNode, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(LongRangeCounter$LongRangeNode, t_LongRangeCounter$LongRangeNode, ::java::lang::Object, LongRangeCounter$LongRangeNode, t_LongRangeCounter$LongRangeNode_init_, 0, 0, 0, 0, 0);

          void t_LongRangeCounter$LongRangeNode::install(PyObject *module)
          {
            installType(&PY_TYPE(LongRangeCounter$LongRangeNode), module, "LongRangeCounter$LongRangeNode", 0);
          }

          void t_LongRangeCounter$LongRangeNode::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(LongRangeCounter$LongRangeNode).tp_dict, "class_", make_descriptor(LongRangeCounter$LongRangeNode::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(LongRangeCounter$LongRangeNode).tp_dict, "wrapfn_", make_descriptor(t_LongRangeCounter$LongRangeNode::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(LongRangeCounter$LongRangeNode).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_LongRangeCounter$LongRangeNode_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, LongRangeCounter$LongRangeNode::initializeClass, 1)))
              return NULL;
            return t_LongRangeCounter$LongRangeNode::wrap_Object(LongRangeCounter$LongRangeNode(((t_LongRangeCounter$LongRangeNode *) arg)->object.this$));
          }
          static PyObject *t_LongRangeCounter$LongRangeNode_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, LongRangeCounter$LongRangeNode::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_LongRangeCounter$LongRangeNode_init_(t_LongRangeCounter$LongRangeNode *self, PyObject *args, PyObject *kwds)
          {
            jlong a0;
            jlong a1;
            LongRangeCounter$LongRangeNode a2((jobject) NULL);
            LongRangeCounter$LongRangeNode a3((jobject) NULL);
            jint a4;
            LongRangeCounter$LongRangeNode object((jobject) NULL);

            if (!parseArgs(args, "JJkkI", LongRangeCounter$LongRangeNode::initializeClass, LongRangeCounter$LongRangeNode::initializeClass, &a0, &a1, &a2, &a3, &a4))
            {
              INT_CALL(object = LongRangeCounter$LongRangeNode(a0, a1, a2, a3, a4));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_LongRangeCounter$LongRangeNode_toString(t_LongRangeCounter$LongRangeNode *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(&PY_TYPE(LongRangeCounter$LongRangeNode), (PyObject *) self, "toString", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queries/function/valuesource/SimpleFloatFunction.h"
#include "org/apache/lucene/queries/function/FunctionValues.h"
#include "java/lang/Class.h"
#include "java/util/Map.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/queries/function/ValueSource.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {

            ::java::lang::Class *SimpleFloatFunction::class$ = NULL;
            jmethodID *SimpleFloatFunction::mids$ = NULL;
            bool SimpleFloatFunction::live$ = false;

            jclass SimpleFloatFunction::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queries/function/valuesource/SimpleFloatFunction");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_ca78fe7a] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/queries/function/ValueSource;)V");
                mids$[mid_getValues_4c566485] = env->getMethodID(cls, "getValues", "(Ljava/util/Map;Lorg/apache/lucene/index/AtomicReaderContext;)Lorg/apache/lucene/queries/function/FunctionValues;");
                mids$[mid_func_2223df21] = env->getMethodID(cls, "func", "(ILorg/apache/lucene/queries/function/FunctionValues;)F");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            SimpleFloatFunction::SimpleFloatFunction(const ::org::apache::lucene::queries::function::ValueSource & a0) : ::org::apache::lucene::queries::function::valuesource::SingleFunction(env->newObject(initializeClass, &mids$, mid_init$_ca78fe7a, a0.this$)) {}

            ::org::apache::lucene::queries::function::FunctionValues SimpleFloatFunction::getValues(const ::java::util::Map & a0, const ::org::apache::lucene::index::AtomicReaderContext & a1) const
            {
              return ::org::apache::lucene::queries::function::FunctionValues(env->callObjectMethod(this$, mids$[mid_getValues_4c566485], a0.this$, a1.this$));
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {
            static PyObject *t_SimpleFloatFunction_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_SimpleFloatFunction_instance_(PyTypeObject *type, PyObject *arg);
            static int t_SimpleFloatFunction_init_(t_SimpleFloatFunction *self, PyObject *args, PyObject *kwds);
            static PyObject *t_SimpleFloatFunction_getValues(t_SimpleFloatFunction *self, PyObject *args);

            static PyMethodDef t_SimpleFloatFunction__methods_[] = {
              DECLARE_METHOD(t_SimpleFloatFunction, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_SimpleFloatFunction, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_SimpleFloatFunction, getValues, METH_VARARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(SimpleFloatFunction, t_SimpleFloatFunction, ::org::apache::lucene::queries::function::valuesource::SingleFunction, SimpleFloatFunction, t_SimpleFloatFunction_init_, 0, 0, 0, 0, 0);

            void t_SimpleFloatFunction::install(PyObject *module)
            {
              installType(&PY_TYPE(SimpleFloatFunction), module, "SimpleFloatFunction", 0);
            }

            void t_SimpleFloatFunction::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(SimpleFloatFunction).tp_dict, "class_", make_descriptor(SimpleFloatFunction::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(SimpleFloatFunction).tp_dict, "wrapfn_", make_descriptor(t_SimpleFloatFunction::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(SimpleFloatFunction).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_SimpleFloatFunction_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, SimpleFloatFunction::initializeClass, 1)))
                return NULL;
              return t_SimpleFloatFunction::wrap_Object(SimpleFloatFunction(((t_SimpleFloatFunction *) arg)->object.this$));
            }
            static PyObject *t_SimpleFloatFunction_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, SimpleFloatFunction::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_SimpleFloatFunction_init_(t_SimpleFloatFunction *self, PyObject *args, PyObject *kwds)
            {
              ::org::apache::lucene::queries::function::ValueSource a0((jobject) NULL);
              SimpleFloatFunction object((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::queries::function::ValueSource::initializeClass, &a0))
              {
                INT_CALL(object = SimpleFloatFunction(a0));
                self->object = object;
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_SimpleFloatFunction_getValues(t_SimpleFloatFunction *self, PyObject *args)
            {
              ::java::util::Map a0((jobject) NULL);
              PyTypeObject **p0;
              ::org::apache::lucene::index::AtomicReaderContext a1((jobject) NULL);
              ::org::apache::lucene::queries::function::FunctionValues result((jobject) NULL);

              if (!parseArgs(args, "Kk", ::java::util::Map::initializeClass, ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_, &a1))
              {
                OBJ_CALL(result = self->object.getValues(a0, a1));
                return ::org::apache::lucene::queries::function::t_FunctionValues::wrap_Object(result);
              }

              return callSuper(&PY_TYPE(SimpleFloatFunction), (PyObject *) self, "getValues", args, 2);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/ckb/SoraniStemFilter.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ckb {

          ::java::lang::Class *SoraniStemFilter::class$ = NULL;
          jmethodID *SoraniStemFilter::mids$ = NULL;
          bool SoraniStemFilter::live$ = false;

          jclass SoraniStemFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/ckb/SoraniStemFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_c7c794dc] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;)V");
              mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          SoraniStemFilter::SoraniStemFilter(const ::org::apache::lucene::analysis::TokenStream & a0) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_c7c794dc, a0.this$)) {}

          jboolean SoraniStemFilter::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_54c6a16a]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ckb {
          static PyObject *t_SoraniStemFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SoraniStemFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_SoraniStemFilter_init_(t_SoraniStemFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_SoraniStemFilter_incrementToken(t_SoraniStemFilter *self, PyObject *args);

          static PyMethodDef t_SoraniStemFilter__methods_[] = {
            DECLARE_METHOD(t_SoraniStemFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SoraniStemFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SoraniStemFilter, incrementToken, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(SoraniStemFilter, t_SoraniStemFilter, ::org::apache::lucene::analysis::TokenFilter, SoraniStemFilter, t_SoraniStemFilter_init_, 0, 0, 0, 0, 0);

          void t_SoraniStemFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(SoraniStemFilter), module, "SoraniStemFilter", 0);
          }

          void t_SoraniStemFilter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(SoraniStemFilter).tp_dict, "class_", make_descriptor(SoraniStemFilter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(SoraniStemFilter).tp_dict, "wrapfn_", make_descriptor(t_SoraniStemFilter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(SoraniStemFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_SoraniStemFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, SoraniStemFilter::initializeClass, 1)))
              return NULL;
            return t_SoraniStemFilter::wrap_Object(SoraniStemFilter(((t_SoraniStemFilter *) arg)->object.this$));
          }
          static PyObject *t_SoraniStemFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, SoraniStemFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_SoraniStemFilter_init_(t_SoraniStemFilter *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            SoraniStemFilter object((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              INT_CALL(object = SoraniStemFilter(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_SoraniStemFilter_incrementToken(t_SoraniStemFilter *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(SoraniStemFilter), (PyObject *) self, "incrementToken", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/hu/HungarianLightStemFilter.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace hu {

          ::java::lang::Class *HungarianLightStemFilter::class$ = NULL;
          jmethodID *HungarianLightStemFilter::mids$ = NULL;
          bool HungarianLightStemFilter::live$ = false;

          jclass HungarianLightStemFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/hu/HungarianLightStemFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_c7c794dc] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;)V");
              mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          HungarianLightStemFilter::HungarianLightStemFilter(const ::org::apache::lucene::analysis::TokenStream & a0) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_c7c794dc, a0.this$)) {}

          jboolean HungarianLightStemFilter::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_54c6a16a]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace hu {
          static PyObject *t_HungarianLightStemFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_HungarianLightStemFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_HungarianLightStemFilter_init_(t_HungarianLightStemFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_HungarianLightStemFilter_incrementToken(t_HungarianLightStemFilter *self, PyObject *args);

          static PyMethodDef t_HungarianLightStemFilter__methods_[] = {
            DECLARE_METHOD(t_HungarianLightStemFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_HungarianLightStemFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_HungarianLightStemFilter, incrementToken, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(HungarianLightStemFilter, t_HungarianLightStemFilter, ::org::apache::lucene::analysis::TokenFilter, HungarianLightStemFilter, t_HungarianLightStemFilter_init_, 0, 0, 0, 0, 0);

          void t_HungarianLightStemFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(HungarianLightStemFilter), module, "HungarianLightStemFilter", 0);
          }

          void t_HungarianLightStemFilter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(HungarianLightStemFilter).tp_dict, "class_", make_descriptor(HungarianLightStemFilter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(HungarianLightStemFilter).tp_dict, "wrapfn_", make_descriptor(t_HungarianLightStemFilter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(HungarianLightStemFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_HungarianLightStemFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, HungarianLightStemFilter::initializeClass, 1)))
              return NULL;
            return t_HungarianLightStemFilter::wrap_Object(HungarianLightStemFilter(((t_HungarianLightStemFilter *) arg)->object.this$));
          }
          static PyObject *t_HungarianLightStemFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, HungarianLightStemFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_HungarianLightStemFilter_init_(t_HungarianLightStemFilter *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            HungarianLightStemFilter object((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              INT_CALL(object = HungarianLightStemFilter(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_HungarianLightStemFilter_incrementToken(t_HungarianLightStemFilter *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(HungarianLightStemFilter), (PyObject *) self, "incrementToken", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/payloads/PayloadFunction.h"
#include "java/lang/String.h"
#include "org/apache/lucene/search/Explanation.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace payloads {

          ::java::lang::Class *PayloadFunction::class$ = NULL;
          jmethodID *PayloadFunction::mids$ = NULL;
          bool PayloadFunction::live$ = false;

          jclass PayloadFunction::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/payloads/PayloadFunction");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_currentScore_9fe8c3f6] = env->getMethodID(cls, "currentScore", "(ILjava/lang/String;IIIFF)F");
              mids$[mid_docScore_08788a8d] = env->getMethodID(cls, "docScore", "(ILjava/lang/String;IF)F");
              mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
              mids$[mid_explain_33812a26] = env->getMethodID(cls, "explain", "(ILjava/lang/String;IF)Lorg/apache/lucene/search/Explanation;");
              mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          PayloadFunction::PayloadFunction() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          jfloat PayloadFunction::currentScore(jint a0, const ::java::lang::String & a1, jint a2, jint a3, jint a4, jfloat a5, jfloat a6) const
          {
            return env->callFloatMethod(this$, mids$[mid_currentScore_9fe8c3f6], a0, a1.this$, a2, a3, a4, a5, a6);
          }

          jfloat PayloadFunction::docScore(jint a0, const ::java::lang::String & a1, jint a2, jfloat a3) const
          {
            return env->callFloatMethod(this$, mids$[mid_docScore_08788a8d], a0, a1.this$, a2, a3);
          }

          jboolean PayloadFunction::equals(const ::java::lang::Object & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
          }

          ::org::apache::lucene::search::Explanation PayloadFunction::explain(jint a0, const ::java::lang::String & a1, jint a2, jfloat a3) const
          {
            return ::org::apache::lucene::search::Explanation(env->callObjectMethod(this$, mids$[mid_explain_33812a26], a0, a1.this$, a2, a3));
          }

          jint PayloadFunction::hashCode() const
          {
            return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace payloads {
          static PyObject *t_PayloadFunction_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PayloadFunction_instance_(PyTypeObject *type, PyObject *arg);
          static int t_PayloadFunction_init_(t_PayloadFunction *self, PyObject *args, PyObject *kwds);
          static PyObject *t_PayloadFunction_currentScore(t_PayloadFunction *self, PyObject *args);
          static PyObject *t_PayloadFunction_docScore(t_PayloadFunction *self, PyObject *args);
          static PyObject *t_PayloadFunction_equals(t_PayloadFunction *self, PyObject *args);
          static PyObject *t_PayloadFunction_explain(t_PayloadFunction *self, PyObject *args);
          static PyObject *t_PayloadFunction_hashCode(t_PayloadFunction *self, PyObject *args);

          static PyMethodDef t_PayloadFunction__methods_[] = {
            DECLARE_METHOD(t_PayloadFunction, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PayloadFunction, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PayloadFunction, currentScore, METH_VARARGS),
            DECLARE_METHOD(t_PayloadFunction, docScore, METH_VARARGS),
            DECLARE_METHOD(t_PayloadFunction, equals, METH_VARARGS),
            DECLARE_METHOD(t_PayloadFunction, explain, METH_VARARGS),
            DECLARE_METHOD(t_PayloadFunction, hashCode, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(PayloadFunction, t_PayloadFunction, ::java::lang::Object, PayloadFunction, t_PayloadFunction_init_, 0, 0, 0, 0, 0);

          void t_PayloadFunction::install(PyObject *module)
          {
            installType(&PY_TYPE(PayloadFunction), module, "PayloadFunction", 0);
          }

          void t_PayloadFunction::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(PayloadFunction).tp_dict, "class_", make_descriptor(PayloadFunction::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(PayloadFunction).tp_dict, "wrapfn_", make_descriptor(t_PayloadFunction::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(PayloadFunction).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_PayloadFunction_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, PayloadFunction::initializeClass, 1)))
              return NULL;
            return t_PayloadFunction::wrap_Object(PayloadFunction(((t_PayloadFunction *) arg)->object.this$));
          }
          static PyObject *t_PayloadFunction_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, PayloadFunction::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_PayloadFunction_init_(t_PayloadFunction *self, PyObject *args, PyObject *kwds)
          {
            PayloadFunction object((jobject) NULL);

            INT_CALL(object = PayloadFunction());
            self->object = object;

            return 0;
          }

          static PyObject *t_PayloadFunction_currentScore(t_PayloadFunction *self, PyObject *args)
          {
            jint a0;
            ::java::lang::String a1((jobject) NULL);
            jint a2;
            jint a3;
            jint a4;
            jfloat a5;
            jfloat a6;
            jfloat result;

            if (!parseArgs(args, "IsIIIFF", &a0, &a1, &a2, &a3, &a4, &a5, &a6))
            {
              OBJ_CALL(result = self->object.currentScore(a0, a1, a2, a3, a4, a5, a6));
              return PyFloat_FromDouble((double) result);
            }

            PyErr_SetArgsError((PyObject *) self, "currentScore", args);
            return NULL;
          }

          static PyObject *t_PayloadFunction_docScore(t_PayloadFunction *self, PyObject *args)
          {
            jint a0;
            ::java::lang::String a1((jobject) NULL);
            jint a2;
            jfloat a3;
            jfloat result;

            if (!parseArgs(args, "IsIF", &a0, &a1, &a2, &a3))
            {
              OBJ_CALL(result = self->object.docScore(a0, a1, a2, a3));
              return PyFloat_FromDouble((double) result);
            }

            PyErr_SetArgsError((PyObject *) self, "docScore", args);
            return NULL;
          }

          static PyObject *t_PayloadFunction_equals(t_PayloadFunction *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            jboolean result;

            if (!parseArgs(args, "o", &a0))
            {
              OBJ_CALL(result = self->object.equals(a0));
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(PayloadFunction), (PyObject *) self, "equals", args, 2);
          }

          static PyObject *t_PayloadFunction_explain(t_PayloadFunction *self, PyObject *args)
          {
            jint a0;
            ::java::lang::String a1((jobject) NULL);
            jint a2;
            jfloat a3;
            ::org::apache::lucene::search::Explanation result((jobject) NULL);

            if (!parseArgs(args, "IsIF", &a0, &a1, &a2, &a3))
            {
              OBJ_CALL(result = self->object.explain(a0, a1, a2, a3));
              return ::org::apache::lucene::search::t_Explanation::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "explain", args);
            return NULL;
          }

          static PyObject *t_PayloadFunction_hashCode(t_PayloadFunction *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.hashCode());
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(PayloadFunction), (PyObject *) self, "hashCode", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/de/GermanStemFilterFactory.h"
#include "org/apache/lucene/analysis/de/GermanStemFilter.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/String.h"
#include "java/util/Map.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace de {

          ::java::lang::Class *GermanStemFilterFactory::class$ = NULL;
          jmethodID *GermanStemFilterFactory::mids$ = NULL;
          bool GermanStemFilterFactory::live$ = false;

          jclass GermanStemFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/de/GermanStemFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4c9e2b1c] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_66272dff] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/de/GermanStemFilter;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          GermanStemFilterFactory::GermanStemFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_4c9e2b1c, a0.this$)) {}

          ::org::apache::lucene::analysis::de::GermanStemFilter GermanStemFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::de::GermanStemFilter(env->callObjectMethod(this$, mids$[mid_create_66272dff], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace de {
          static PyObject *t_GermanStemFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_GermanStemFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_GermanStemFilterFactory_init_(t_GermanStemFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_GermanStemFilterFactory_create(t_GermanStemFilterFactory *self, PyObject *args);

          static PyMethodDef t_GermanStemFilterFactory__methods_[] = {
            DECLARE_METHOD(t_GermanStemFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_GermanStemFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_GermanStemFilterFactory, create, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(GermanStemFilterFactory, t_GermanStemFilterFactory, ::org::apache::lucene::analysis::util::TokenFilterFactory, GermanStemFilterFactory, t_GermanStemFilterFactory_init_, 0, 0, 0, 0, 0);

          void t_GermanStemFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(GermanStemFilterFactory), module, "GermanStemFilterFactory", 0);
          }

          void t_GermanStemFilterFactory::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(GermanStemFilterFactory).tp_dict, "class_", make_descriptor(GermanStemFilterFactory::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(GermanStemFilterFactory).tp_dict, "wrapfn_", make_descriptor(t_GermanStemFilterFactory::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(GermanStemFilterFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_GermanStemFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, GermanStemFilterFactory::initializeClass, 1)))
              return NULL;
            return t_GermanStemFilterFactory::wrap_Object(GermanStemFilterFactory(((t_GermanStemFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_GermanStemFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, GermanStemFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_GermanStemFilterFactory_init_(t_GermanStemFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            GermanStemFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = GermanStemFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_GermanStemFilterFactory_create(t_GermanStemFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::de::GermanStemFilter result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::de::t_GermanStemFilter::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(GermanStemFilterFactory), (PyObject *) self, "create", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/TwoPhaseCommitTool$CommitFailException.h"
#include "java/lang/Throwable.h"
#include "org/apache/lucene/index/TwoPhaseCommit.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *TwoPhaseCommitTool$CommitFailException::class$ = NULL;
        jmethodID *TwoPhaseCommitTool$CommitFailException::mids$ = NULL;
        bool TwoPhaseCommitTool$CommitFailException::live$ = false;

        jclass TwoPhaseCommitTool$CommitFailException::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/TwoPhaseCommitTool$CommitFailException");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_52a0ac67] = env->getMethodID(cls, "<init>", "(Ljava/lang/Throwable;Lorg/apache/lucene/index/TwoPhaseCommit;)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        TwoPhaseCommitTool$CommitFailException::TwoPhaseCommitTool$CommitFailException(const ::java::lang::Throwable & a0, const ::org::apache::lucene::index::TwoPhaseCommit & a1) : ::java::io::IOException(env->newObject(initializeClass, &mids$, mid_init$_52a0ac67, a0.this$, a1.this$)) {}
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_TwoPhaseCommitTool$CommitFailException_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_TwoPhaseCommitTool$CommitFailException_instance_(PyTypeObject *type, PyObject *arg);
        static int t_TwoPhaseCommitTool$CommitFailException_init_(t_TwoPhaseCommitTool$CommitFailException *self, PyObject *args, PyObject *kwds);

        static PyMethodDef t_TwoPhaseCommitTool$CommitFailException__methods_[] = {
          DECLARE_METHOD(t_TwoPhaseCommitTool$CommitFailException, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_TwoPhaseCommitTool$CommitFailException, instance_, METH_O | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(TwoPhaseCommitTool$CommitFailException, t_TwoPhaseCommitTool$CommitFailException, ::java::io::IOException, TwoPhaseCommitTool$CommitFailException, t_TwoPhaseCommitTool$CommitFailException_init_, 0, 0, 0, 0, 0);

        void t_TwoPhaseCommitTool$CommitFailException::install(PyObject *module)
        {
          installType(&PY_TYPE(TwoPhaseCommitTool$CommitFailException), module, "TwoPhaseCommitTool$CommitFailException", 0);
        }

        void t_TwoPhaseCommitTool$CommitFailException::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(TwoPhaseCommitTool$CommitFailException).tp_dict, "class_", make_descriptor(TwoPhaseCommitTool$CommitFailException::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(TwoPhaseCommitTool$CommitFailException).tp_dict, "wrapfn_", make_descriptor(t_TwoPhaseCommitTool$CommitFailException::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(TwoPhaseCommitTool$CommitFailException).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_TwoPhaseCommitTool$CommitFailException_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, TwoPhaseCommitTool$CommitFailException::initializeClass, 1)))
            return NULL;
          return t_TwoPhaseCommitTool$CommitFailException::wrap_Object(TwoPhaseCommitTool$CommitFailException(((t_TwoPhaseCommitTool$CommitFailException *) arg)->object.this$));
        }
        static PyObject *t_TwoPhaseCommitTool$CommitFailException_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, TwoPhaseCommitTool$CommitFailException::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_TwoPhaseCommitTool$CommitFailException_init_(t_TwoPhaseCommitTool$CommitFailException *self, PyObject *args, PyObject *kwds)
        {
          ::java::lang::Throwable a0((jobject) NULL);
          ::org::apache::lucene::index::TwoPhaseCommit a1((jobject) NULL);
          TwoPhaseCommitTool$CommitFailException object((jobject) NULL);

          if (!parseArgs(args, "kk", ::java::lang::Throwable::initializeClass, ::org::apache::lucene::index::TwoPhaseCommit::initializeClass, &a0, &a1))
          {
            INT_CALL(object = TwoPhaseCommitTool$CommitFailException(a0, a1));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queries/function/valuesource/OrdFieldSource.h"
#include "org/apache/lucene/queries/function/FunctionValues.h"
#include "java/lang/Class.h"
#include "java/lang/Object.h"
#include "java/util/Map.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {

            ::java::lang::Class *OrdFieldSource::class$ = NULL;
            jmethodID *OrdFieldSource::mids$ = NULL;
            bool OrdFieldSource::live$ = false;

            jclass OrdFieldSource::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queries/function/valuesource/OrdFieldSource");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_5fdc3f48] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;)V");
                mids$[mid_description_14c7b5c5] = env->getMethodID(cls, "description", "()Ljava/lang/String;");
                mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
                mids$[mid_getValues_4c566485] = env->getMethodID(cls, "getValues", "(Ljava/util/Map;Lorg/apache/lucene/index/AtomicReaderContext;)Lorg/apache/lucene/queries/function/FunctionValues;");
                mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            OrdFieldSource::OrdFieldSource(const ::java::lang::String & a0) : ::org::apache::lucene::queries::function::ValueSource(env->newObject(initializeClass, &mids$, mid_init$_5fdc3f48, a0.this$)) {}

            ::java::lang::String OrdFieldSource::description() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_description_14c7b5c5]));
            }

            jboolean OrdFieldSource::equals(const ::java::lang::Object & a0) const
            {
              return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
            }

            ::org::apache::lucene::queries::function::FunctionValues OrdFieldSource::getValues(const ::java::util::Map & a0, const ::org::apache::lucene::index::AtomicReaderContext & a1) const
            {
              return ::org::apache::lucene::queries::function::FunctionValues(env->callObjectMethod(this$, mids$[mid_getValues_4c566485], a0.this$, a1.this$));
            }

            jint OrdFieldSource::hashCode() const
            {
              return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {
            static PyObject *t_OrdFieldSource_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_OrdFieldSource_instance_(PyTypeObject *type, PyObject *arg);
            static int t_OrdFieldSource_init_(t_OrdFieldSource *self, PyObject *args, PyObject *kwds);
            static PyObject *t_OrdFieldSource_description(t_OrdFieldSource *self, PyObject *args);
            static PyObject *t_OrdFieldSource_equals(t_OrdFieldSource *self, PyObject *args);
            static PyObject *t_OrdFieldSource_getValues(t_OrdFieldSource *self, PyObject *args);
            static PyObject *t_OrdFieldSource_hashCode(t_OrdFieldSource *self, PyObject *args);

            static PyMethodDef t_OrdFieldSource__methods_[] = {
              DECLARE_METHOD(t_OrdFieldSource, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_OrdFieldSource, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_OrdFieldSource, description, METH_VARARGS),
              DECLARE_METHOD(t_OrdFieldSource, equals, METH_VARARGS),
              DECLARE_METHOD(t_OrdFieldSource, getValues, METH_VARARGS),
              DECLARE_METHOD(t_OrdFieldSource, hashCode, METH_VARARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(OrdFieldSource, t_OrdFieldSource, ::org::apache::lucene::queries::function::ValueSource, OrdFieldSource, t_OrdFieldSource_init_, 0, 0, 0, 0, 0);

            void t_OrdFieldSource::install(PyObject *module)
            {
              installType(&PY_TYPE(OrdFieldSource), module, "OrdFieldSource", 0);
            }

            void t_OrdFieldSource::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(OrdFieldSource).tp_dict, "class_", make_descriptor(OrdFieldSource::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(OrdFieldSource).tp_dict, "wrapfn_", make_descriptor(t_OrdFieldSource::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(OrdFieldSource).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_OrdFieldSource_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, OrdFieldSource::initializeClass, 1)))
                return NULL;
              return t_OrdFieldSource::wrap_Object(OrdFieldSource(((t_OrdFieldSource *) arg)->object.this$));
            }
            static PyObject *t_OrdFieldSource_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, OrdFieldSource::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_OrdFieldSource_init_(t_OrdFieldSource *self, PyObject *args, PyObject *kwds)
            {
              ::java::lang::String a0((jobject) NULL);
              OrdFieldSource object((jobject) NULL);

              if (!parseArgs(args, "s", &a0))
              {
                INT_CALL(object = OrdFieldSource(a0));
                self->object = object;
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_OrdFieldSource_description(t_OrdFieldSource *self, PyObject *args)
            {
              ::java::lang::String result((jobject) NULL);

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.description());
                return j2p(result);
              }

              return callSuper(&PY_TYPE(OrdFieldSource), (PyObject *) self, "description", args, 2);
            }

            static PyObject *t_OrdFieldSource_equals(t_OrdFieldSource *self, PyObject *args)
            {
              ::java::lang::Object a0((jobject) NULL);
              jboolean result;

              if (!parseArgs(args, "o", &a0))
              {
                OBJ_CALL(result = self->object.equals(a0));
                Py_RETURN_BOOL(result);
              }

              return callSuper(&PY_TYPE(OrdFieldSource), (PyObject *) self, "equals", args, 2);
            }

            static PyObject *t_OrdFieldSource_getValues(t_OrdFieldSource *self, PyObject *args)
            {
              ::java::util::Map a0((jobject) NULL);
              PyTypeObject **p0;
              ::org::apache::lucene::index::AtomicReaderContext a1((jobject) NULL);
              ::org::apache::lucene::queries::function::FunctionValues result((jobject) NULL);

              if (!parseArgs(args, "Kk", ::java::util::Map::initializeClass, ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_, &a1))
              {
                OBJ_CALL(result = self->object.getValues(a0, a1));
                return ::org::apache::lucene::queries::function::t_FunctionValues::wrap_Object(result);
              }

              return callSuper(&PY_TYPE(OrdFieldSource), (PyObject *) self, "getValues", args, 2);
            }

            static PyObject *t_OrdFieldSource_hashCode(t_OrdFieldSource *self, PyObject *args)
            {
              jint result;

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.hashCode());
                return PyInt_FromLong((long) result);
              }

              return callSuper(&PY_TYPE(OrdFieldSource), (PyObject *) self, "hashCode", args, 2);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/ro/RomanianAnalyzer.h"
#include "org/apache/lucene/util/Version.h"
#include "java/lang/String.h"
#include "org/apache/lucene/analysis/util/CharArraySet.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ro {

          ::java::lang::Class *RomanianAnalyzer::class$ = NULL;
          jmethodID *RomanianAnalyzer::mids$ = NULL;
          bool RomanianAnalyzer::live$ = false;
          ::java::lang::String *RomanianAnalyzer::DEFAULT_STOPWORD_FILE = NULL;

          jclass RomanianAnalyzer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/ro/RomanianAnalyzer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_0d96cf33] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;)V");
              mids$[mid_init$_83eafe28] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/analysis/util/CharArraySet;)V");
              mids$[mid_init$_c9d7e4a3] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/analysis/util/CharArraySet;Lorg/apache/lucene/analysis/util/CharArraySet;)V");
              mids$[mid_getDefaultStopSet_d2d3505c] = env->getStaticMethodID(cls, "getDefaultStopSet", "()Lorg/apache/lucene/analysis/util/CharArraySet;");
              mids$[mid_createComponents_1be39cae] = env->getMethodID(cls, "createComponents", "(Ljava/lang/String;Ljava/io/Reader;)Lorg/apache/lucene/analysis/Analyzer$TokenStreamComponents;");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              DEFAULT_STOPWORD_FILE = new ::java::lang::String(env->getStaticObjectField(cls, "DEFAULT_STOPWORD_FILE", "Ljava/lang/String;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          RomanianAnalyzer::RomanianAnalyzer(const ::org::apache::lucene::util::Version & a0) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_0d96cf33, a0.this$)) {}

          RomanianAnalyzer::RomanianAnalyzer(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::analysis::util::CharArraySet & a1) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_83eafe28, a0.this$, a1.this$)) {}

          RomanianAnalyzer::RomanianAnalyzer(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::analysis::util::CharArraySet & a1, const ::org::apache::lucene::analysis::util::CharArraySet & a2) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_c9d7e4a3, a0.this$, a1.this$, a2.this$)) {}

          ::org::apache::lucene::analysis::util::CharArraySet RomanianAnalyzer::getDefaultStopSet()
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::analysis::util::CharArraySet(env->callStaticObjectMethod(cls, mids$[mid_getDefaultStopSet_d2d3505c]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ro {
          static PyObject *t_RomanianAnalyzer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_RomanianAnalyzer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_RomanianAnalyzer_init_(t_RomanianAnalyzer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_RomanianAnalyzer_getDefaultStopSet(PyTypeObject *type);
          static PyObject *t_RomanianAnalyzer_get__defaultStopSet(t_RomanianAnalyzer *self, void *data);
          static PyGetSetDef t_RomanianAnalyzer__fields_[] = {
            DECLARE_GET_FIELD(t_RomanianAnalyzer, defaultStopSet),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_RomanianAnalyzer__methods_[] = {
            DECLARE_METHOD(t_RomanianAnalyzer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_RomanianAnalyzer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_RomanianAnalyzer, getDefaultStopSet, METH_NOARGS | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(RomanianAnalyzer, t_RomanianAnalyzer, ::org::apache::lucene::analysis::util::StopwordAnalyzerBase, RomanianAnalyzer, t_RomanianAnalyzer_init_, 0, 0, t_RomanianAnalyzer__fields_, 0, 0);

          void t_RomanianAnalyzer::install(PyObject *module)
          {
            installType(&PY_TYPE(RomanianAnalyzer), module, "RomanianAnalyzer", 0);
          }

          void t_RomanianAnalyzer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(RomanianAnalyzer).tp_dict, "class_", make_descriptor(RomanianAnalyzer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(RomanianAnalyzer).tp_dict, "wrapfn_", make_descriptor(t_RomanianAnalyzer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(RomanianAnalyzer).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(RomanianAnalyzer::initializeClass);
            PyDict_SetItemString(PY_TYPE(RomanianAnalyzer).tp_dict, "DEFAULT_STOPWORD_FILE", make_descriptor(j2p(*RomanianAnalyzer::DEFAULT_STOPWORD_FILE)));
          }

          static PyObject *t_RomanianAnalyzer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, RomanianAnalyzer::initializeClass, 1)))
              return NULL;
            return t_RomanianAnalyzer::wrap_Object(RomanianAnalyzer(((t_RomanianAnalyzer *) arg)->object.this$));
          }
          static PyObject *t_RomanianAnalyzer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, RomanianAnalyzer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_RomanianAnalyzer_init_(t_RomanianAnalyzer *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                RomanianAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "K", ::org::apache::lucene::util::Version::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_))
                {
                  INT_CALL(object = RomanianAnalyzer(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 2:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                ::org::apache::lucene::analysis::util::CharArraySet a1((jobject) NULL);
                PyTypeObject **p1;
                RomanianAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "KK", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1, &p1, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_))
                {
                  INT_CALL(object = RomanianAnalyzer(a0, a1));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 3:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                ::org::apache::lucene::analysis::util::CharArraySet a1((jobject) NULL);
                PyTypeObject **p1;
                ::org::apache::lucene::analysis::util::CharArraySet a2((jobject) NULL);
                PyTypeObject **p2;
                RomanianAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "KKK", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1, &p1, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_, &a2, &p2, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_))
                {
                  INT_CALL(object = RomanianAnalyzer(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_RomanianAnalyzer_getDefaultStopSet(PyTypeObject *type)
          {
            ::org::apache::lucene::analysis::util::CharArraySet result((jobject) NULL);
            OBJ_CALL(result = ::org::apache::lucene::analysis::ro::RomanianAnalyzer::getDefaultStopSet());
            return ::org::apache::lucene::analysis::util::t_CharArraySet::wrap_Object(result);
          }

          static PyObject *t_RomanianAnalyzer_get__defaultStopSet(t_RomanianAnalyzer *self, void *data)
          {
            ::org::apache::lucene::analysis::util::CharArraySet value((jobject) NULL);
            OBJ_CALL(value = self->object.getDefaultStopSet());
            return ::org::apache::lucene::analysis::util::t_CharArraySet::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/br/BrazilianStemFilterFactory.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "org/apache/lucene/analysis/br/BrazilianStemFilter.h"
#include "java/lang/String.h"
#include "java/util/Map.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace br {

          ::java::lang::Class *BrazilianStemFilterFactory::class$ = NULL;
          jmethodID *BrazilianStemFilterFactory::mids$ = NULL;
          bool BrazilianStemFilterFactory::live$ = false;

          jclass BrazilianStemFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/br/BrazilianStemFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4c9e2b1c] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_84777f61] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/br/BrazilianStemFilter;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          BrazilianStemFilterFactory::BrazilianStemFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_4c9e2b1c, a0.this$)) {}

          ::org::apache::lucene::analysis::br::BrazilianStemFilter BrazilianStemFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::br::BrazilianStemFilter(env->callObjectMethod(this$, mids$[mid_create_84777f61], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace br {
          static PyObject *t_BrazilianStemFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_BrazilianStemFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_BrazilianStemFilterFactory_init_(t_BrazilianStemFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_BrazilianStemFilterFactory_create(t_BrazilianStemFilterFactory *self, PyObject *args);

          static PyMethodDef t_BrazilianStemFilterFactory__methods_[] = {
            DECLARE_METHOD(t_BrazilianStemFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_BrazilianStemFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_BrazilianStemFilterFactory, create, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(BrazilianStemFilterFactory, t_BrazilianStemFilterFactory, ::org::apache::lucene::analysis::util::TokenFilterFactory, BrazilianStemFilterFactory, t_BrazilianStemFilterFactory_init_, 0, 0, 0, 0, 0);

          void t_BrazilianStemFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(BrazilianStemFilterFactory), module, "BrazilianStemFilterFactory", 0);
          }

          void t_BrazilianStemFilterFactory::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(BrazilianStemFilterFactory).tp_dict, "class_", make_descriptor(BrazilianStemFilterFactory::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(BrazilianStemFilterFactory).tp_dict, "wrapfn_", make_descriptor(t_BrazilianStemFilterFactory::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(BrazilianStemFilterFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_BrazilianStemFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, BrazilianStemFilterFactory::initializeClass, 1)))
              return NULL;
            return t_BrazilianStemFilterFactory::wrap_Object(BrazilianStemFilterFactory(((t_BrazilianStemFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_BrazilianStemFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, BrazilianStemFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_BrazilianStemFilterFactory_init_(t_BrazilianStemFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            BrazilianStemFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = BrazilianStemFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_BrazilianStemFilterFactory_create(t_BrazilianStemFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::br::BrazilianStemFilter result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::br::t_BrazilianStemFilter::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(BrazilianStemFilterFactory), (PyObject *) self, "create", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/fr/FrenchLightStemmer.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace fr {

          ::java::lang::Class *FrenchLightStemmer::class$ = NULL;
          jmethodID *FrenchLightStemmer::mids$ = NULL;
          bool FrenchLightStemmer::live$ = false;

          jclass FrenchLightStemmer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/fr/FrenchLightStemmer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_stem_ec6430eb] = env->getMethodID(cls, "stem", "([CI)I");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          FrenchLightStemmer::FrenchLightStemmer() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          jint FrenchLightStemmer::stem(const JArray< jchar > & a0, jint a1) const
          {
            return env->callIntMethod(this$, mids$[mid_stem_ec6430eb], a0.this$, a1);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace fr {
          static PyObject *t_FrenchLightStemmer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_FrenchLightStemmer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_FrenchLightStemmer_init_(t_FrenchLightStemmer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_FrenchLightStemmer_stem(t_FrenchLightStemmer *self, PyObject *args);

          static PyMethodDef t_FrenchLightStemmer__methods_[] = {
            DECLARE_METHOD(t_FrenchLightStemmer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FrenchLightStemmer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FrenchLightStemmer, stem, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(FrenchLightStemmer, t_FrenchLightStemmer, ::java::lang::Object, FrenchLightStemmer, t_FrenchLightStemmer_init_, 0, 0, 0, 0, 0);

          void t_FrenchLightStemmer::install(PyObject *module)
          {
            installType(&PY_TYPE(FrenchLightStemmer), module, "FrenchLightStemmer", 0);
          }

          void t_FrenchLightStemmer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(FrenchLightStemmer).tp_dict, "class_", make_descriptor(FrenchLightStemmer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(FrenchLightStemmer).tp_dict, "wrapfn_", make_descriptor(t_FrenchLightStemmer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(FrenchLightStemmer).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_FrenchLightStemmer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, FrenchLightStemmer::initializeClass, 1)))
              return NULL;
            return t_FrenchLightStemmer::wrap_Object(FrenchLightStemmer(((t_FrenchLightStemmer *) arg)->object.this$));
          }
          static PyObject *t_FrenchLightStemmer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, FrenchLightStemmer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_FrenchLightStemmer_init_(t_FrenchLightStemmer *self, PyObject *args, PyObject *kwds)
          {
            FrenchLightStemmer object((jobject) NULL);

            INT_CALL(object = FrenchLightStemmer());
            self->object = object;

            return 0;
          }

          static PyObject *t_FrenchLightStemmer_stem(t_FrenchLightStemmer *self, PyObject *args)
          {
            JArray< jchar > a0((jobject) NULL);
            jint a1;
            jint result;

            if (!parseArgs(args, "[CI", &a0, &a1))
            {
              OBJ_CALL(result = self->object.stem(a0, a1));
              return PyInt_FromLong((long) result);
            }

            PyErr_SetArgsError((PyObject *) self, "stem", args);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/tartarus/snowball/ext/KpStemmer.h"
#include "java/lang/Object.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace tartarus {
    namespace snowball {
      namespace ext {

        ::java::lang::Class *KpStemmer::class$ = NULL;
        jmethodID *KpStemmer::mids$ = NULL;
        bool KpStemmer::live$ = false;

        jclass KpStemmer::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/tartarus/snowball/ext/KpStemmer");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
            mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
            mids$[mid_stem_54c6a16a] = env->getMethodID(cls, "stem", "()Z");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        KpStemmer::KpStemmer() : ::org::tartarus::snowball::SnowballProgram(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        jboolean KpStemmer::equals(const ::java::lang::Object & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
        }

        jint KpStemmer::hashCode() const
        {
          return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
        }

        jboolean KpStemmer::stem() const
        {
          return env->callBooleanMethod(this$, mids$[mid_stem_54c6a16a]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace tartarus {
    namespace snowball {
      namespace ext {
        static PyObject *t_KpStemmer_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_KpStemmer_instance_(PyTypeObject *type, PyObject *arg);
        static int t_KpStemmer_init_(t_KpStemmer *self, PyObject *args, PyObject *kwds);
        static PyObject *t_KpStemmer_equals(t_KpStemmer *self, PyObject *args);
        static PyObject *t_KpStemmer_hashCode(t_KpStemmer *self, PyObject *args);
        static PyObject *t_KpStemmer_stem(t_KpStemmer *self, PyObject *args);

        static PyMethodDef t_KpStemmer__methods_[] = {
          DECLARE_METHOD(t_KpStemmer, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_KpStemmer, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_KpStemmer, equals, METH_VARARGS),
          DECLARE_METHOD(t_KpStemmer, hashCode, METH_VARARGS),
          DECLARE_METHOD(t_KpStemmer, stem, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(KpStemmer, t_KpStemmer, ::org::tartarus::snowball::SnowballProgram, KpStemmer, t_KpStemmer_init_, 0, 0, 0, 0, 0);

        void t_KpStemmer::install(PyObject *module)
        {
          installType(&PY_TYPE(KpStemmer), module, "KpStemmer", 0);
        }

        void t_KpStemmer::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(KpStemmer).tp_dict, "class_", make_descriptor(KpStemmer::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(KpStemmer).tp_dict, "wrapfn_", make_descriptor(t_KpStemmer::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(KpStemmer).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_KpStemmer_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, KpStemmer::initializeClass, 1)))
            return NULL;
          return t_KpStemmer::wrap_Object(KpStemmer(((t_KpStemmer *) arg)->object.this$));
        }
        static PyObject *t_KpStemmer_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, KpStemmer::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_KpStemmer_init_(t_KpStemmer *self, PyObject *args, PyObject *kwds)
        {
          KpStemmer object((jobject) NULL);

          INT_CALL(object = KpStemmer());
          self->object = object;

          return 0;
        }

        static PyObject *t_KpStemmer_equals(t_KpStemmer *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.equals(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(KpStemmer), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_KpStemmer_hashCode(t_KpStemmer *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hashCode());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(KpStemmer), (PyObject *) self, "hashCode", args, 2);
        }

        static PyObject *t_KpStemmer_stem(t_KpStemmer *self, PyObject *args)
        {
          jboolean result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.stem());
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(KpStemmer), (PyObject *) self, "stem", args, 2);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/FieldInfos.h"
#include "java/lang/Iterable.h"
#include "org/apache/lucene/index/FieldInfo.h"
#include "java/util/Iterator.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *FieldInfos::class$ = NULL;
        jmethodID *FieldInfos::mids$ = NULL;
        bool FieldInfos::live$ = false;

        jclass FieldInfos::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/FieldInfos");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_32778cd0] = env->getMethodID(cls, "<init>", "([Lorg/apache/lucene/index/FieldInfo;)V");
            mids$[mid_fieldInfo_d44c031f] = env->getMethodID(cls, "fieldInfo", "(I)Lorg/apache/lucene/index/FieldInfo;");
            mids$[mid_fieldInfo_582c55ef] = env->getMethodID(cls, "fieldInfo", "(Ljava/lang/String;)Lorg/apache/lucene/index/FieldInfo;");
            mids$[mid_hasDocValues_54c6a16a] = env->getMethodID(cls, "hasDocValues", "()Z");
            mids$[mid_hasFreq_54c6a16a] = env->getMethodID(cls, "hasFreq", "()Z");
            mids$[mid_hasNorms_54c6a16a] = env->getMethodID(cls, "hasNorms", "()Z");
            mids$[mid_hasOffsets_54c6a16a] = env->getMethodID(cls, "hasOffsets", "()Z");
            mids$[mid_hasPayloads_54c6a16a] = env->getMethodID(cls, "hasPayloads", "()Z");
            mids$[mid_hasProx_54c6a16a] = env->getMethodID(cls, "hasProx", "()Z");
            mids$[mid_hasVectors_54c6a16a] = env->getMethodID(cls, "hasVectors", "()Z");
            mids$[mid_iterator_40858c90] = env->getMethodID(cls, "iterator", "()Ljava/util/Iterator;");
            mids$[mid_size_54c6a179] = env->getMethodID(cls, "size", "()I");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        FieldInfos::FieldInfos(const JArray< ::org::apache::lucene::index::FieldInfo > & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_32778cd0, a0.this$)) {}

        ::org::apache::lucene::index::FieldInfo FieldInfos::fieldInfo(jint a0) const
        {
          return ::org::apache::lucene::index::FieldInfo(env->callObjectMethod(this$, mids$[mid_fieldInfo_d44c031f], a0));
        }

        ::org::apache::lucene::index::FieldInfo FieldInfos::fieldInfo(const ::java::lang::String & a0) const
        {
          return ::org::apache::lucene::index::FieldInfo(env->callObjectMethod(this$, mids$[mid_fieldInfo_582c55ef], a0.this$));
        }

        jboolean FieldInfos::hasDocValues() const
        {
          return env->callBooleanMethod(this$, mids$[mid_hasDocValues_54c6a16a]);
        }

        jboolean FieldInfos::hasFreq() const
        {
          return env->callBooleanMethod(this$, mids$[mid_hasFreq_54c6a16a]);
        }

        jboolean FieldInfos::hasNorms() const
        {
          return env->callBooleanMethod(this$, mids$[mid_hasNorms_54c6a16a]);
        }

        jboolean FieldInfos::hasOffsets() const
        {
          return env->callBooleanMethod(this$, mids$[mid_hasOffsets_54c6a16a]);
        }

        jboolean FieldInfos::hasPayloads() const
        {
          return env->callBooleanMethod(this$, mids$[mid_hasPayloads_54c6a16a]);
        }

        jboolean FieldInfos::hasProx() const
        {
          return env->callBooleanMethod(this$, mids$[mid_hasProx_54c6a16a]);
        }

        jboolean FieldInfos::hasVectors() const
        {
          return env->callBooleanMethod(this$, mids$[mid_hasVectors_54c6a16a]);
        }

        ::java::util::Iterator FieldInfos::iterator() const
        {
          return ::java::util::Iterator(env->callObjectMethod(this$, mids$[mid_iterator_40858c90]));
        }

        jint FieldInfos::size() const
        {
          return env->callIntMethod(this$, mids$[mid_size_54c6a179]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_FieldInfos_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FieldInfos_instance_(PyTypeObject *type, PyObject *arg);
        static int t_FieldInfos_init_(t_FieldInfos *self, PyObject *args, PyObject *kwds);
        static PyObject *t_FieldInfos_fieldInfo(t_FieldInfos *self, PyObject *args);
        static PyObject *t_FieldInfos_hasDocValues(t_FieldInfos *self);
        static PyObject *t_FieldInfos_hasFreq(t_FieldInfos *self);
        static PyObject *t_FieldInfos_hasNorms(t_FieldInfos *self);
        static PyObject *t_FieldInfos_hasOffsets(t_FieldInfos *self);
        static PyObject *t_FieldInfos_hasPayloads(t_FieldInfos *self);
        static PyObject *t_FieldInfos_hasProx(t_FieldInfos *self);
        static PyObject *t_FieldInfos_hasVectors(t_FieldInfos *self);
        static PyObject *t_FieldInfos_iterator(t_FieldInfos *self);
        static PyObject *t_FieldInfos_size(t_FieldInfos *self);

        static PyMethodDef t_FieldInfos__methods_[] = {
          DECLARE_METHOD(t_FieldInfos, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FieldInfos, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FieldInfos, fieldInfo, METH_VARARGS),
          DECLARE_METHOD(t_FieldInfos, hasDocValues, METH_NOARGS),
          DECLARE_METHOD(t_FieldInfos, hasFreq, METH_NOARGS),
          DECLARE_METHOD(t_FieldInfos, hasNorms, METH_NOARGS),
          DECLARE_METHOD(t_FieldInfos, hasOffsets, METH_NOARGS),
          DECLARE_METHOD(t_FieldInfos, hasPayloads, METH_NOARGS),
          DECLARE_METHOD(t_FieldInfos, hasProx, METH_NOARGS),
          DECLARE_METHOD(t_FieldInfos, hasVectors, METH_NOARGS),
          DECLARE_METHOD(t_FieldInfos, iterator, METH_NOARGS),
          DECLARE_METHOD(t_FieldInfos, size, METH_NOARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(FieldInfos, t_FieldInfos, ::java::lang::Object, FieldInfos, t_FieldInfos_init_, ((PyObject *(*)(t_FieldInfos *)) get_iterator< t_FieldInfos >), 0, 0, 0, 0);

        void t_FieldInfos::install(PyObject *module)
        {
          installType(&PY_TYPE(FieldInfos), module, "FieldInfos", 0);
        }

        void t_FieldInfos::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(FieldInfos).tp_dict, "class_", make_descriptor(FieldInfos::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(FieldInfos).tp_dict, "wrapfn_", make_descriptor(t_FieldInfos::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(FieldInfos).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_FieldInfos_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, FieldInfos::initializeClass, 1)))
            return NULL;
          return t_FieldInfos::wrap_Object(FieldInfos(((t_FieldInfos *) arg)->object.this$));
        }
        static PyObject *t_FieldInfos_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, FieldInfos::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_FieldInfos_init_(t_FieldInfos *self, PyObject *args, PyObject *kwds)
        {
          JArray< ::org::apache::lucene::index::FieldInfo > a0((jobject) NULL);
          FieldInfos object((jobject) NULL);

          if (!parseArgs(args, "[k", ::org::apache::lucene::index::FieldInfo::initializeClass, &a0))
          {
            INT_CALL(object = FieldInfos(a0));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_FieldInfos_fieldInfo(t_FieldInfos *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              jint a0;
              ::org::apache::lucene::index::FieldInfo result((jobject) NULL);

              if (!parseArgs(args, "I", &a0))
              {
                OBJ_CALL(result = self->object.fieldInfo(a0));
                return ::org::apache::lucene::index::t_FieldInfo::wrap_Object(result);
              }
            }
            {
              ::java::lang::String a0((jobject) NULL);
              ::org::apache::lucene::index::FieldInfo result((jobject) NULL);

              if (!parseArgs(args, "s", &a0))
              {
                OBJ_CALL(result = self->object.fieldInfo(a0));
                return ::org::apache::lucene::index::t_FieldInfo::wrap_Object(result);
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "fieldInfo", args);
          return NULL;
        }

        static PyObject *t_FieldInfos_hasDocValues(t_FieldInfos *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.hasDocValues());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_FieldInfos_hasFreq(t_FieldInfos *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.hasFreq());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_FieldInfos_hasNorms(t_FieldInfos *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.hasNorms());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_FieldInfos_hasOffsets(t_FieldInfos *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.hasOffsets());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_FieldInfos_hasPayloads(t_FieldInfos *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.hasPayloads());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_FieldInfos_hasProx(t_FieldInfos *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.hasProx());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_FieldInfos_hasVectors(t_FieldInfos *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.hasVectors());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_FieldInfos_iterator(t_FieldInfos *self)
        {
          ::java::util::Iterator result((jobject) NULL);
          OBJ_CALL(result = self->object.iterator());
          return ::java::util::t_Iterator::wrap_Object(result, &::org::apache::lucene::index::PY_TYPE(FieldInfo));
        }

        static PyObject *t_FieldInfos_size(t_FieldInfos *self)
        {
          jint result;
          OBJ_CALL(result = self->object.size());
          return PyInt_FromLong((long) result);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/util/TokenizerFactory.h"
#include "org/apache/lucene/util/AttributeFactory.h"
#include "java/lang/Class.h"
#include "java/util/Set.h"
#include "org/apache/lucene/analysis/Tokenizer.h"
#include "java/util/Map.h"
#include "java/io/Reader.h"
#include "java/lang/String.h"
#include "java/lang/ClassLoader.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace util {

          ::java::lang::Class *TokenizerFactory::class$ = NULL;
          jmethodID *TokenizerFactory::mids$ = NULL;
          bool TokenizerFactory::live$ = false;

          jclass TokenizerFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/util/TokenizerFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_availableTokenizers_03e99967] = env->getStaticMethodID(cls, "availableTokenizers", "()Ljava/util/Set;");
              mids$[mid_create_02e4fecd] = env->getMethodID(cls, "create", "(Ljava/io/Reader;)Lorg/apache/lucene/analysis/Tokenizer;");
              mids$[mid_create_e51780e9] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/util/AttributeFactory;Ljava/io/Reader;)Lorg/apache/lucene/analysis/Tokenizer;");
              mids$[mid_forName_9ff0ca4e] = env->getStaticMethodID(cls, "forName", "(Ljava/lang/String;Ljava/util/Map;)Lorg/apache/lucene/analysis/util/TokenizerFactory;");
              mids$[mid_lookupClass_7d663d97] = env->getStaticMethodID(cls, "lookupClass", "(Ljava/lang/String;)Ljava/lang/Class;");
              mids$[mid_reloadTokenizers_9110048d] = env->getStaticMethodID(cls, "reloadTokenizers", "(Ljava/lang/ClassLoader;)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ::java::util::Set TokenizerFactory::availableTokenizers()
          {
            jclass cls = env->getClass(initializeClass);
            return ::java::util::Set(env->callStaticObjectMethod(cls, mids$[mid_availableTokenizers_03e99967]));
          }

          ::org::apache::lucene::analysis::Tokenizer TokenizerFactory::create(const ::java::io::Reader & a0) const
          {
            return ::org::apache::lucene::analysis::Tokenizer(env->callObjectMethod(this$, mids$[mid_create_02e4fecd], a0.this$));
          }

          ::org::apache::lucene::analysis::Tokenizer TokenizerFactory::create(const ::org::apache::lucene::util::AttributeFactory & a0, const ::java::io::Reader & a1) const
          {
            return ::org::apache::lucene::analysis::Tokenizer(env->callObjectMethod(this$, mids$[mid_create_e51780e9], a0.this$, a1.this$));
          }

          TokenizerFactory TokenizerFactory::forName(const ::java::lang::String & a0, const ::java::util::Map & a1)
          {
            jclass cls = env->getClass(initializeClass);
            return TokenizerFactory(env->callStaticObjectMethod(cls, mids$[mid_forName_9ff0ca4e], a0.this$, a1.this$));
          }

          ::java::lang::Class TokenizerFactory::lookupClass(const ::java::lang::String & a0)
          {
            jclass cls = env->getClass(initializeClass);
            return ::java::lang::Class(env->callStaticObjectMethod(cls, mids$[mid_lookupClass_7d663d97], a0.this$));
          }

          void TokenizerFactory::reloadTokenizers(const ::java::lang::ClassLoader & a0)
          {
            jclass cls = env->getClass(initializeClass);
            env->callStaticVoidMethod(cls, mids$[mid_reloadTokenizers_9110048d], a0.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace util {
          static PyObject *t_TokenizerFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_TokenizerFactory_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_TokenizerFactory_availableTokenizers(PyTypeObject *type);
          static PyObject *t_TokenizerFactory_create(t_TokenizerFactory *self, PyObject *args);
          static PyObject *t_TokenizerFactory_forName(PyTypeObject *type, PyObject *args);
          static PyObject *t_TokenizerFactory_lookupClass(PyTypeObject *type, PyObject *arg);
          static PyObject *t_TokenizerFactory_reloadTokenizers(PyTypeObject *type, PyObject *arg);

          static PyMethodDef t_TokenizerFactory__methods_[] = {
            DECLARE_METHOD(t_TokenizerFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_TokenizerFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_TokenizerFactory, availableTokenizers, METH_NOARGS | METH_CLASS),
            DECLARE_METHOD(t_TokenizerFactory, create, METH_VARARGS),
            DECLARE_METHOD(t_TokenizerFactory, forName, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_TokenizerFactory, lookupClass, METH_O | METH_CLASS),
            DECLARE_METHOD(t_TokenizerFactory, reloadTokenizers, METH_O | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(TokenizerFactory, t_TokenizerFactory, ::org::apache::lucene::analysis::util::AbstractAnalysisFactory, TokenizerFactory, abstract_init, 0, 0, 0, 0, 0);

          void t_TokenizerFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(TokenizerFactory), module, "TokenizerFactory", 0);
          }

          void t_TokenizerFactory::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(TokenizerFactory).tp_dict, "class_", make_descriptor(TokenizerFactory::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(TokenizerFactory).tp_dict, "wrapfn_", make_descriptor(t_TokenizerFactory::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(TokenizerFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_TokenizerFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, TokenizerFactory::initializeClass, 1)))
              return NULL;
            return t_TokenizerFactory::wrap_Object(TokenizerFactory(((t_TokenizerFactory *) arg)->object.this$));
          }
          static PyObject *t_TokenizerFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, TokenizerFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_TokenizerFactory_availableTokenizers(PyTypeObject *type)
          {
            ::java::util::Set result((jobject) NULL);
            OBJ_CALL(result = ::org::apache::lucene::analysis::util::TokenizerFactory::availableTokenizers());
            return ::java::util::t_Set::wrap_Object(result, &::java::lang::PY_TYPE(String));
          }

          static PyObject *t_TokenizerFactory_create(t_TokenizerFactory *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::java::io::Reader a0((jobject) NULL);
                ::org::apache::lucene::analysis::Tokenizer result((jobject) NULL);

                if (!parseArgs(args, "k", ::java::io::Reader::initializeClass, &a0))
                {
                  OBJ_CALL(result = self->object.create(a0));
                  return ::org::apache::lucene::analysis::t_Tokenizer::wrap_Object(result);
                }
              }
              break;
             case 2:
              {
                ::org::apache::lucene::util::AttributeFactory a0((jobject) NULL);
                ::java::io::Reader a1((jobject) NULL);
                ::org::apache::lucene::analysis::Tokenizer result((jobject) NULL);

                if (!parseArgs(args, "kk", ::org::apache::lucene::util::AttributeFactory::initializeClass, ::java::io::Reader::initializeClass, &a0, &a1))
                {
                  OBJ_CALL(result = self->object.create(a0, a1));
                  return ::org::apache::lucene::analysis::t_Tokenizer::wrap_Object(result);
                }
              }
            }

            PyErr_SetArgsError((PyObject *) self, "create", args);
            return NULL;
          }

          static PyObject *t_TokenizerFactory_forName(PyTypeObject *type, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            ::java::util::Map a1((jobject) NULL);
            PyTypeObject **p1;
            TokenizerFactory result((jobject) NULL);

            if (!parseArgs(args, "sK", ::java::util::Map::initializeClass, &a0, &a1, &p1, ::java::util::t_Map::parameters_))
            {
              OBJ_CALL(result = ::org::apache::lucene::analysis::util::TokenizerFactory::forName(a0, a1));
              return t_TokenizerFactory::wrap_Object(result);
            }

            PyErr_SetArgsError(type, "forName", args);
            return NULL;
          }

          static PyObject *t_TokenizerFactory_lookupClass(PyTypeObject *type, PyObject *arg)
          {
            ::java::lang::String a0((jobject) NULL);
            ::java::lang::Class result((jobject) NULL);

            if (!parseArg(arg, "s", &a0))
            {
              OBJ_CALL(result = ::org::apache::lucene::analysis::util::TokenizerFactory::lookupClass(a0));
              return ::java::lang::t_Class::wrap_Object(result);
            }

            PyErr_SetArgsError(type, "lookupClass", arg);
            return NULL;
          }

          static PyObject *t_TokenizerFactory_reloadTokenizers(PyTypeObject *type, PyObject *arg)
          {
            ::java::lang::ClassLoader a0((jobject) NULL);

            if (!parseArg(arg, "k", ::java::lang::ClassLoader::initializeClass, &a0))
            {
              OBJ_CALL(::org::apache::lucene::analysis::util::TokenizerFactory::reloadTokenizers(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError(type, "reloadTokenizers", arg);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/join/ToChildBlockJoinQuery.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "java/lang/Class.h"
#include "java/lang/Object.h"
#include "org/apache/lucene/search/Filter.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/search/Weight.h"
#include "java/util/Set.h"
#include "java/lang/String.h"
#include "org/apache/lucene/search/IndexSearcher.h"
#include "org/apache/lucene/index/Term.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace join {

          ::java::lang::Class *ToChildBlockJoinQuery::class$ = NULL;
          jmethodID *ToChildBlockJoinQuery::mids$ = NULL;
          bool ToChildBlockJoinQuery::live$ = false;

          jclass ToChildBlockJoinQuery::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/join/ToChildBlockJoinQuery");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4a597592] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/Query;Lorg/apache/lucene/search/Filter;Z)V");
              mids$[mid_clone_c3569be0] = env->getMethodID(cls, "clone", "()Lorg/apache/lucene/search/join/ToChildBlockJoinQuery;");
              mids$[mid_createWeight_367763cb] = env->getMethodID(cls, "createWeight", "(Lorg/apache/lucene/search/IndexSearcher;)Lorg/apache/lucene/search/Weight;");
              mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
              mids$[mid_extractTerms_fb4f2b26] = env->getMethodID(cls, "extractTerms", "(Ljava/util/Set;)V");
              mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
              mids$[mid_rewrite_7edcaa43] = env->getMethodID(cls, "rewrite", "(Lorg/apache/lucene/index/IndexReader;)Lorg/apache/lucene/search/Query;");
              mids$[mid_toString_97a5258f] = env->getMethodID(cls, "toString", "(Ljava/lang/String;)Ljava/lang/String;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ToChildBlockJoinQuery::ToChildBlockJoinQuery(const ::org::apache::lucene::search::Query & a0, const ::org::apache::lucene::search::Filter & a1, jboolean a2) : ::org::apache::lucene::search::Query(env->newObject(initializeClass, &mids$, mid_init$_4a597592, a0.this$, a1.this$, a2)) {}

          ToChildBlockJoinQuery ToChildBlockJoinQuery::clone() const
          {
            return ToChildBlockJoinQuery(env->callObjectMethod(this$, mids$[mid_clone_c3569be0]));
          }

          ::org::apache::lucene::search::Weight ToChildBlockJoinQuery::createWeight(const ::org::apache::lucene::search::IndexSearcher & a0) const
          {
            return ::org::apache::lucene::search::Weight(env->callObjectMethod(this$, mids$[mid_createWeight_367763cb], a0.this$));
          }

          jboolean ToChildBlockJoinQuery::equals(const ::java::lang::Object & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
          }

          void ToChildBlockJoinQuery::extractTerms(const ::java::util::Set & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_extractTerms_fb4f2b26], a0.this$);
          }

          jint ToChildBlockJoinQuery::hashCode() const
          {
            return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
          }

          ::org::apache::lucene::search::Query ToChildBlockJoinQuery::rewrite(const ::org::apache::lucene::index::IndexReader & a0) const
          {
            return ::org::apache::lucene::search::Query(env->callObjectMethod(this$, mids$[mid_rewrite_7edcaa43], a0.this$));
          }

          ::java::lang::String ToChildBlockJoinQuery::toString(const ::java::lang::String & a0) const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_97a5258f], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace join {
          static PyObject *t_ToChildBlockJoinQuery_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_ToChildBlockJoinQuery_instance_(PyTypeObject *type, PyObject *arg);
          static int t_ToChildBlockJoinQuery_init_(t_ToChildBlockJoinQuery *self, PyObject *args, PyObject *kwds);
          static PyObject *t_ToChildBlockJoinQuery_clone(t_ToChildBlockJoinQuery *self, PyObject *args);
          static PyObject *t_ToChildBlockJoinQuery_createWeight(t_ToChildBlockJoinQuery *self, PyObject *args);
          static PyObject *t_ToChildBlockJoinQuery_equals(t_ToChildBlockJoinQuery *self, PyObject *args);
          static PyObject *t_ToChildBlockJoinQuery_extractTerms(t_ToChildBlockJoinQuery *self, PyObject *args);
          static PyObject *t_ToChildBlockJoinQuery_hashCode(t_ToChildBlockJoinQuery *self, PyObject *args);
          static PyObject *t_ToChildBlockJoinQuery_rewrite(t_ToChildBlockJoinQuery *self, PyObject *args);
          static PyObject *t_ToChildBlockJoinQuery_toString(t_ToChildBlockJoinQuery *self, PyObject *args);

          static PyMethodDef t_ToChildBlockJoinQuery__methods_[] = {
            DECLARE_METHOD(t_ToChildBlockJoinQuery, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ToChildBlockJoinQuery, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ToChildBlockJoinQuery, clone, METH_VARARGS),
            DECLARE_METHOD(t_ToChildBlockJoinQuery, createWeight, METH_VARARGS),
            DECLARE_METHOD(t_ToChildBlockJoinQuery, equals, METH_VARARGS),
            DECLARE_METHOD(t_ToChildBlockJoinQuery, extractTerms, METH_VARARGS),
            DECLARE_METHOD(t_ToChildBlockJoinQuery, hashCode, METH_VARARGS),
            DECLARE_METHOD(t_ToChildBlockJoinQuery, rewrite, METH_VARARGS),
            DECLARE_METHOD(t_ToChildBlockJoinQuery, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(ToChildBlockJoinQuery, t_ToChildBlockJoinQuery, ::org::apache::lucene::search::Query, ToChildBlockJoinQuery, t_ToChildBlockJoinQuery_init_, 0, 0, 0, 0, 0);

          void t_ToChildBlockJoinQuery::install(PyObject *module)
          {
            installType(&PY_TYPE(ToChildBlockJoinQuery), module, "ToChildBlockJoinQuery", 0);
          }

          void t_ToChildBlockJoinQuery::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(ToChildBlockJoinQuery).tp_dict, "class_", make_descriptor(ToChildBlockJoinQuery::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(ToChildBlockJoinQuery).tp_dict, "wrapfn_", make_descriptor(t_ToChildBlockJoinQuery::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(ToChildBlockJoinQuery).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_ToChildBlockJoinQuery_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, ToChildBlockJoinQuery::initializeClass, 1)))
              return NULL;
            return t_ToChildBlockJoinQuery::wrap_Object(ToChildBlockJoinQuery(((t_ToChildBlockJoinQuery *) arg)->object.this$));
          }
          static PyObject *t_ToChildBlockJoinQuery_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, ToChildBlockJoinQuery::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_ToChildBlockJoinQuery_init_(t_ToChildBlockJoinQuery *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::search::Query a0((jobject) NULL);
            ::org::apache::lucene::search::Filter a1((jobject) NULL);
            jboolean a2;
            ToChildBlockJoinQuery object((jobject) NULL);

            if (!parseArgs(args, "kkZ", ::org::apache::lucene::search::Query::initializeClass, ::org::apache::lucene::search::Filter::initializeClass, &a0, &a1, &a2))
            {
              INT_CALL(object = ToChildBlockJoinQuery(a0, a1, a2));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_ToChildBlockJoinQuery_clone(t_ToChildBlockJoinQuery *self, PyObject *args)
          {
            ToChildBlockJoinQuery result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.clone());
              return t_ToChildBlockJoinQuery::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(ToChildBlockJoinQuery), (PyObject *) self, "clone", args, 2);
          }

          static PyObject *t_ToChildBlockJoinQuery_createWeight(t_ToChildBlockJoinQuery *self, PyObject *args)
          {
            ::org::apache::lucene::search::IndexSearcher a0((jobject) NULL);
            ::org::apache::lucene::search::Weight result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::search::IndexSearcher::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.createWeight(a0));
              return ::org::apache::lucene::search::t_Weight::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(ToChildBlockJoinQuery), (PyObject *) self, "createWeight", args, 2);
          }

          static PyObject *t_ToChildBlockJoinQuery_equals(t_ToChildBlockJoinQuery *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            jboolean result;

            if (!parseArgs(args, "o", &a0))
            {
              OBJ_CALL(result = self->object.equals(a0));
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(ToChildBlockJoinQuery), (PyObject *) self, "equals", args, 2);
          }

          static PyObject *t_ToChildBlockJoinQuery_extractTerms(t_ToChildBlockJoinQuery *self, PyObject *args)
          {
            ::java::util::Set a0((jobject) NULL);
            PyTypeObject **p0;

            if (!parseArgs(args, "K", ::java::util::Set::initializeClass, &a0, &p0, ::java::util::t_Set::parameters_))
            {
              OBJ_CALL(self->object.extractTerms(a0));
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(ToChildBlockJoinQuery), (PyObject *) self, "extractTerms", args, 2);
          }

          static PyObject *t_ToChildBlockJoinQuery_hashCode(t_ToChildBlockJoinQuery *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.hashCode());
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(ToChildBlockJoinQuery), (PyObject *) self, "hashCode", args, 2);
          }

          static PyObject *t_ToChildBlockJoinQuery_rewrite(t_ToChildBlockJoinQuery *self, PyObject *args)
          {
            ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
            ::org::apache::lucene::search::Query result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::index::IndexReader::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.rewrite(a0));
              return ::org::apache::lucene::search::t_Query::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(ToChildBlockJoinQuery), (PyObject *) self, "rewrite", args, 2);
          }

          static PyObject *t_ToChildBlockJoinQuery_toString(t_ToChildBlockJoinQuery *self, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, "s", &a0))
            {
              OBJ_CALL(result = self->object.toString(a0));
              return j2p(result);
            }

            return callSuper(&PY_TYPE(ToChildBlockJoinQuery), (PyObject *) self, "toString", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/egothor/stemmer/Diff.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/String.h"
#include "java/lang/CharSequence.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace egothor {
    namespace stemmer {

      ::java::lang::Class *Diff::class$ = NULL;
      jmethodID *Diff::mids$ = NULL;
      bool Diff::live$ = false;

      jclass Diff::initializeClass(bool getOnly)
      {
        if (getOnly)
          return (jclass) (live$ ? class$->this$ : NULL);
        if (class$ == NULL)
        {
          jclass cls = (jclass) env->findClass("org/egothor/stemmer/Diff");

          mids$ = new jmethodID[max_mid];
          mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
          mids$[mid_init$_ca5a6f66] = env->getMethodID(cls, "<init>", "(IIII)V");
          mids$[mid_apply_33cdba70] = env->getStaticMethodID(cls, "apply", "(Ljava/lang/StringBuilder;Ljava/lang/CharSequence;)V");
          mids$[mid_exec_aacea7e9] = env->getMethodID(cls, "exec", "(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;");

          class$ = (::java::lang::Class *) new JObject(cls);
          live$ = true;
        }
        return (jclass) class$->this$;
      }

      Diff::Diff() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

      Diff::Diff(jint a0, jint a1, jint a2, jint a3) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_ca5a6f66, a0, a1, a2, a3)) {}

      void Diff::apply(const ::java::lang::StringBuilder & a0, const ::java::lang::CharSequence & a1)
      {
        jclass cls = env->getClass(initializeClass);
        env->callStaticVoidMethod(cls, mids$[mid_apply_33cdba70], a0.this$, a1.this$);
      }

      ::java::lang::String Diff::exec(const ::java::lang::String & a0, const ::java::lang::String & a1) const
      {
        return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_exec_aacea7e9], a0.this$, a1.this$));
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace egothor {
    namespace stemmer {
      static PyObject *t_Diff_cast_(PyTypeObject *type, PyObject *arg);
      static PyObject *t_Diff_instance_(PyTypeObject *type, PyObject *arg);
      static int t_Diff_init_(t_Diff *self, PyObject *args, PyObject *kwds);
      static PyObject *t_Diff_apply(PyTypeObject *type, PyObject *args);
      static PyObject *t_Diff_exec(t_Diff *self, PyObject *args);

      static PyMethodDef t_Diff__methods_[] = {
        DECLARE_METHOD(t_Diff, cast_, METH_O | METH_CLASS),
        DECLARE_METHOD(t_Diff, instance_, METH_O | METH_CLASS),
        DECLARE_METHOD(t_Diff, apply, METH_VARARGS | METH_CLASS),
        DECLARE_METHOD(t_Diff, exec, METH_VARARGS),
        { NULL, NULL, 0, NULL }
      };

      DECLARE_TYPE(Diff, t_Diff, ::java::lang::Object, Diff, t_Diff_init_, 0, 0, 0, 0, 0);

      void t_Diff::install(PyObject *module)
      {
        installType(&PY_TYPE(Diff), module, "Diff", 0);
      }

      void t_Diff::initialize(PyObject *module)
      {
        PyDict_SetItemString(PY_TYPE(Diff).tp_dict, "class_", make_descriptor(Diff::initializeClass, 1));
        PyDict_SetItemString(PY_TYPE(Diff).tp_dict, "wrapfn_", make_descriptor(t_Diff::wrap_jobject));
        PyDict_SetItemString(PY_TYPE(Diff).tp_dict, "boxfn_", make_descriptor(boxObject));
      }

      static PyObject *t_Diff_cast_(PyTypeObject *type, PyObject *arg)
      {
        if (!(arg = castCheck(arg, Diff::initializeClass, 1)))
          return NULL;
        return t_Diff::wrap_Object(Diff(((t_Diff *) arg)->object.this$));
      }
      static PyObject *t_Diff_instance_(PyTypeObject *type, PyObject *arg)
      {
        if (!castCheck(arg, Diff::initializeClass, 0))
          Py_RETURN_FALSE;
        Py_RETURN_TRUE;
      }

      static int t_Diff_init_(t_Diff *self, PyObject *args, PyObject *kwds)
      {
        switch (PyTuple_GET_SIZE(args)) {
         case 0:
          {
            Diff object((jobject) NULL);

            INT_CALL(object = Diff());
            self->object = object;
            break;
          }
          goto err;
         case 4:
          {
            jint a0;
            jint a1;
            jint a2;
            jint a3;
            Diff object((jobject) NULL);

            if (!parseArgs(args, "IIII", &a0, &a1, &a2, &a3))
            {
              INT_CALL(object = Diff(a0, a1, a2, a3));
              self->object = object;
              break;
            }
          }
         default:
         err:
          PyErr_SetArgsError((PyObject *) self, "__init__", args);
          return -1;
        }

        return 0;
      }

      static PyObject *t_Diff_apply(PyTypeObject *type, PyObject *args)
      {
        ::java::lang::StringBuilder a0((jobject) NULL);
        ::java::lang::CharSequence a1((jobject) NULL);

        if (!parseArgs(args, "kO", ::java::lang::StringBuilder::initializeClass, &::java::lang::PY_TYPE(CharSequence), &a0, &a1))
        {
          OBJ_CALL(::org::egothor::stemmer::Diff::apply(a0, a1));
          Py_RETURN_NONE;
        }

        PyErr_SetArgsError(type, "apply", args);
        return NULL;
      }

      static PyObject *t_Diff_exec(t_Diff *self, PyObject *args)
      {
        ::java::lang::String a0((jobject) NULL);
        ::java::lang::String a1((jobject) NULL);
        ::java::lang::String result((jobject) NULL);

        if (!parseArgs(args, "ss", &a0, &a1))
        {
          OBJ_CALL(result = self->object.exec(a0, a1));
          return j2p(result);
        }

        PyErr_SetArgsError((PyObject *) self, "exec", args);
        return NULL;
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/lucene40/Lucene40PostingsReader.h"
#include "org/apache/lucene/util/Bits.h"
#include "org/apache/lucene/index/DocsAndPositionsEnum.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/index/FieldInfo.h"
#include "org/apache/lucene/store/DataInput.h"
#include "org/apache/lucene/store/IOContext.h"
#include "org/apache/lucene/store/Directory.h"
#include "org/apache/lucene/index/SegmentInfo.h"
#include "java/lang/String.h"
#include "org/apache/lucene/index/FieldInfos.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/codecs/BlockTermState.h"
#include "org/apache/lucene/store/IndexInput.h"
#include "org/apache/lucene/index/DocsEnum.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace lucene40 {

          ::java::lang::Class *Lucene40PostingsReader::class$ = NULL;
          jmethodID *Lucene40PostingsReader::mids$ = NULL;
          bool Lucene40PostingsReader::live$ = false;

          jclass Lucene40PostingsReader::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/lucene40/Lucene40PostingsReader");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_b18a8355] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/store/Directory;Lorg/apache/lucene/index/FieldInfos;Lorg/apache/lucene/index/SegmentInfo;Lorg/apache/lucene/store/IOContext;Ljava/lang/String;)V");
              mids$[mid_checkIntegrity_54c6a166] = env->getMethodID(cls, "checkIntegrity", "()V");
              mids$[mid_close_54c6a166] = env->getMethodID(cls, "close", "()V");
              mids$[mid_decodeTerm_0d1f34e8] = env->getMethodID(cls, "decodeTerm", "([JLorg/apache/lucene/store/DataInput;Lorg/apache/lucene/index/FieldInfo;Lorg/apache/lucene/codecs/BlockTermState;Z)V");
              mids$[mid_docs_4cca8a9c] = env->getMethodID(cls, "docs", "(Lorg/apache/lucene/index/FieldInfo;Lorg/apache/lucene/codecs/BlockTermState;Lorg/apache/lucene/util/Bits;Lorg/apache/lucene/index/DocsEnum;I)Lorg/apache/lucene/index/DocsEnum;");
              mids$[mid_docsAndPositions_3ae1ca58] = env->getMethodID(cls, "docsAndPositions", "(Lorg/apache/lucene/index/FieldInfo;Lorg/apache/lucene/codecs/BlockTermState;Lorg/apache/lucene/util/Bits;Lorg/apache/lucene/index/DocsAndPositionsEnum;I)Lorg/apache/lucene/index/DocsAndPositionsEnum;");
              mids$[mid_init_0441f0b2] = env->getMethodID(cls, "init", "(Lorg/apache/lucene/store/IndexInput;)V");
              mids$[mid_newTermState_9f93879c] = env->getMethodID(cls, "newTermState", "()Lorg/apache/lucene/codecs/BlockTermState;");
              mids$[mid_ramBytesUsed_54c6a17a] = env->getMethodID(cls, "ramBytesUsed", "()J");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          Lucene40PostingsReader::Lucene40PostingsReader(const ::org::apache::lucene::store::Directory & a0, const ::org::apache::lucene::index::FieldInfos & a1, const ::org::apache::lucene::index::SegmentInfo & a2, const ::org::apache::lucene::store::IOContext & a3, const ::java::lang::String & a4) : ::org::apache::lucene::codecs::PostingsReaderBase(env->newObject(initializeClass, &mids$, mid_init$_b18a8355, a0.this$, a1.this$, a2.this$, a3.this$, a4.this$)) {}

          void Lucene40PostingsReader::checkIntegrity() const
          {
            env->callVoidMethod(this$, mids$[mid_checkIntegrity_54c6a166]);
          }

          void Lucene40PostingsReader::close() const
          {
            env->callVoidMethod(this$, mids$[mid_close_54c6a166]);
          }

          void Lucene40PostingsReader::decodeTerm(const JArray< jlong > & a0, const ::org::apache::lucene::store::DataInput & a1, const ::org::apache::lucene::index::FieldInfo & a2, const ::org::apache::lucene::codecs::BlockTermState & a3, jboolean a4) const
          {
            env->callVoidMethod(this$, mids$[mid_decodeTerm_0d1f34e8], a0.this$, a1.this$, a2.this$, a3.this$, a4);
          }

          ::org::apache::lucene::index::DocsEnum Lucene40PostingsReader::docs(const ::org::apache::lucene::index::FieldInfo & a0, const ::org::apache::lucene::codecs::BlockTermState & a1, const ::org::apache::lucene::util::Bits & a2, const ::org::apache::lucene::index::DocsEnum & a3, jint a4) const
          {
            return ::org::apache::lucene::index::DocsEnum(env->callObjectMethod(this$, mids$[mid_docs_4cca8a9c], a0.this$, a1.this$, a2.this$, a3.this$, a4));
          }

          ::org::apache::lucene::index::DocsAndPositionsEnum Lucene40PostingsReader::docsAndPositions(const ::org::apache::lucene::index::FieldInfo & a0, const ::org::apache::lucene::codecs::BlockTermState & a1, const ::org::apache::lucene::util::Bits & a2, const ::org::apache::lucene::index::DocsAndPositionsEnum & a3, jint a4) const
          {
            return ::org::apache::lucene::index::DocsAndPositionsEnum(env->callObjectMethod(this$, mids$[mid_docsAndPositions_3ae1ca58], a0.this$, a1.this$, a2.this$, a3.this$, a4));
          }

          void Lucene40PostingsReader::init(const ::org::apache::lucene::store::IndexInput & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_init_0441f0b2], a0.this$);
          }

          ::org::apache::lucene::codecs::BlockTermState Lucene40PostingsReader::newTermState() const
          {
            return ::org::apache::lucene::codecs::BlockTermState(env->callObjectMethod(this$, mids$[mid_newTermState_9f93879c]));
          }

          jlong Lucene40PostingsReader::ramBytesUsed() const
          {
            return env->callLongMethod(this$, mids$[mid_ramBytesUsed_54c6a17a]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace lucene40 {
          static PyObject *t_Lucene40PostingsReader_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Lucene40PostingsReader_instance_(PyTypeObject *type, PyObject *arg);
          static int t_Lucene40PostingsReader_init_(t_Lucene40PostingsReader *self, PyObject *args, PyObject *kwds);
          static PyObject *t_Lucene40PostingsReader_checkIntegrity(t_Lucene40PostingsReader *self, PyObject *args);
          static PyObject *t_Lucene40PostingsReader_close(t_Lucene40PostingsReader *self, PyObject *args);
          static PyObject *t_Lucene40PostingsReader_decodeTerm(t_Lucene40PostingsReader *self, PyObject *args);
          static PyObject *t_Lucene40PostingsReader_docs(t_Lucene40PostingsReader *self, PyObject *args);
          static PyObject *t_Lucene40PostingsReader_docsAndPositions(t_Lucene40PostingsReader *self, PyObject *args);
          static PyObject *t_Lucene40PostingsReader_init(t_Lucene40PostingsReader *self, PyObject *args);
          static PyObject *t_Lucene40PostingsReader_newTermState(t_Lucene40PostingsReader *self, PyObject *args);
          static PyObject *t_Lucene40PostingsReader_ramBytesUsed(t_Lucene40PostingsReader *self, PyObject *args);

          static PyMethodDef t_Lucene40PostingsReader__methods_[] = {
            DECLARE_METHOD(t_Lucene40PostingsReader, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lucene40PostingsReader, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lucene40PostingsReader, checkIntegrity, METH_VARARGS),
            DECLARE_METHOD(t_Lucene40PostingsReader, close, METH_VARARGS),
            DECLARE_METHOD(t_Lucene40PostingsReader, decodeTerm, METH_VARARGS),
            DECLARE_METHOD(t_Lucene40PostingsReader, docs, METH_VARARGS),
            DECLARE_METHOD(t_Lucene40PostingsReader, docsAndPositions, METH_VARARGS),
            DECLARE_METHOD(t_Lucene40PostingsReader, init, METH_VARARGS),
            DECLARE_METHOD(t_Lucene40PostingsReader, newTermState, METH_VARARGS),
            DECLARE_METHOD(t_Lucene40PostingsReader, ramBytesUsed, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(Lucene40PostingsReader, t_Lucene40PostingsReader, ::org::apache::lucene::codecs::PostingsReaderBase, Lucene40PostingsReader, t_Lucene40PostingsReader_init_, 0, 0, 0, 0, 0);

          void t_Lucene40PostingsReader::install(PyObject *module)
          {
            installType(&PY_TYPE(Lucene40PostingsReader), module, "Lucene40PostingsReader", 0);
          }

          void t_Lucene40PostingsReader::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(Lucene40PostingsReader).tp_dict, "class_", make_descriptor(Lucene40PostingsReader::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(Lucene40PostingsReader).tp_dict, "wrapfn_", make_descriptor(t_Lucene40PostingsReader::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(Lucene40PostingsReader).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_Lucene40PostingsReader_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, Lucene40PostingsReader::initializeClass, 1)))
              return NULL;
            return t_Lucene40PostingsReader::wrap_Object(Lucene40PostingsReader(((t_Lucene40PostingsReader *) arg)->object.this$));
          }
          static PyObject *t_Lucene40PostingsReader_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, Lucene40PostingsReader::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_Lucene40PostingsReader_init_(t_Lucene40PostingsReader *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::store::Directory a0((jobject) NULL);
            ::org::apache::lucene::index::FieldInfos a1((jobject) NULL);
            ::org::apache::lucene::index::SegmentInfo a2((jobject) NULL);
            ::org::apache::lucene::store::IOContext a3((jobject) NULL);
            ::java::lang::String a4((jobject) NULL);
            Lucene40PostingsReader object((jobject) NULL);

            if (!parseArgs(args, "kkkks", ::org::apache::lucene::store::Directory::initializeClass, ::org::apache::lucene::index::FieldInfos::initializeClass, ::org::apache::lucene::index::SegmentInfo::initializeClass, ::org::apache::lucene::store::IOContext::initializeClass, &a0, &a1, &a2, &a3, &a4))
            {
              INT_CALL(object = Lucene40PostingsReader(a0, a1, a2, a3, a4));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_Lucene40PostingsReader_checkIntegrity(t_Lucene40PostingsReader *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.checkIntegrity());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(Lucene40PostingsReader), (PyObject *) self, "checkIntegrity", args, 2);
          }

          static PyObject *t_Lucene40PostingsReader_close(t_Lucene40PostingsReader *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.close());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(Lucene40PostingsReader), (PyObject *) self, "close", args, 2);
          }

          static PyObject *t_Lucene40PostingsReader_decodeTerm(t_Lucene40PostingsReader *self, PyObject *args)
          {
            JArray< jlong > a0((jobject) NULL);
            ::org::apache::lucene::store::DataInput a1((jobject) NULL);
            ::org::apache::lucene::index::FieldInfo a2((jobject) NULL);
            ::org::apache::lucene::codecs::BlockTermState a3((jobject) NULL);
            jboolean a4;

            if (!parseArgs(args, "[JkkkZ", ::org::apache::lucene::store::DataInput::initializeClass, ::org::apache::lucene::index::FieldInfo::initializeClass, ::org::apache::lucene::codecs::BlockTermState::initializeClass, &a0, &a1, &a2, &a3, &a4))
            {
              OBJ_CALL(self->object.decodeTerm(a0, a1, a2, a3, a4));
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(Lucene40PostingsReader), (PyObject *) self, "decodeTerm", args, 2);
          }

          static PyObject *t_Lucene40PostingsReader_docs(t_Lucene40PostingsReader *self, PyObject *args)
          {
            ::org::apache::lucene::index::FieldInfo a0((jobject) NULL);
            ::org::apache::lucene::codecs::BlockTermState a1((jobject) NULL);
            ::org::apache::lucene::util::Bits a2((jobject) NULL);
            ::org::apache::lucene::index::DocsEnum a3((jobject) NULL);
            jint a4;
            ::org::apache::lucene::index::DocsEnum result((jobject) NULL);

            if (!parseArgs(args, "kkkkI", ::org::apache::lucene::index::FieldInfo::initializeClass, ::org::apache::lucene::codecs::BlockTermState::initializeClass, ::org::apache::lucene::util::Bits::initializeClass, ::org::apache::lucene::index::DocsEnum::initializeClass, &a0, &a1, &a2, &a3, &a4))
            {
              OBJ_CALL(result = self->object.docs(a0, a1, a2, a3, a4));
              return ::org::apache::lucene::index::t_DocsEnum::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(Lucene40PostingsReader), (PyObject *) self, "docs", args, 2);
          }

          static PyObject *t_Lucene40PostingsReader_docsAndPositions(t_Lucene40PostingsReader *self, PyObject *args)
          {
            ::org::apache::lucene::index::FieldInfo a0((jobject) NULL);
            ::org::apache::lucene::codecs::BlockTermState a1((jobject) NULL);
            ::org::apache::lucene::util::Bits a2((jobject) NULL);
            ::org::apache::lucene::index::DocsAndPositionsEnum a3((jobject) NULL);
            jint a4;
            ::org::apache::lucene::index::DocsAndPositionsEnum result((jobject) NULL);

            if (!parseArgs(args, "kkkkI", ::org::apache::lucene::index::FieldInfo::initializeClass, ::org::apache::lucene::codecs::BlockTermState::initializeClass, ::org::apache::lucene::util::Bits::initializeClass, ::org::apache::lucene::index::DocsAndPositionsEnum::initializeClass, &a0, &a1, &a2, &a3, &a4))
            {
              OBJ_CALL(result = self->object.docsAndPositions(a0, a1, a2, a3, a4));
              return ::org::apache::lucene::index::t_DocsAndPositionsEnum::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(Lucene40PostingsReader), (PyObject *) self, "docsAndPositions", args, 2);
          }

          static PyObject *t_Lucene40PostingsReader_init(t_Lucene40PostingsReader *self, PyObject *args)
          {
            ::org::apache::lucene::store::IndexInput a0((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::store::IndexInput::initializeClass, &a0))
            {
              OBJ_CALL(self->object.init(a0));
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(Lucene40PostingsReader), (PyObject *) self, "init", args, 2);
          }

          static PyObject *t_Lucene40PostingsReader_newTermState(t_Lucene40PostingsReader *self, PyObject *args)
          {
            ::org::apache::lucene::codecs::BlockTermState result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.newTermState());
              return ::org::apache::lucene::codecs::t_BlockTermState::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(Lucene40PostingsReader), (PyObject *) self, "newTermState", args, 2);
          }

          static PyObject *t_Lucene40PostingsReader_ramBytesUsed(t_Lucene40PostingsReader *self, PyObject *args)
          {
            jlong result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.ramBytesUsed());
              return PyLong_FromLongLong((PY_LONG_LONG) result);
            }

            return callSuper(&PY_TYPE(Lucene40PostingsReader), (PyObject *) self, "ramBytesUsed", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/standard/processors/AllowLeadingWildcardProcessor.h"
#include "org/apache/lucene/queryparser/flexible/core/QueryNodeException.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/QueryNode.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace processors {

              ::java::lang::Class *AllowLeadingWildcardProcessor::class$ = NULL;
              jmethodID *AllowLeadingWildcardProcessor::mids$ = NULL;
              bool AllowLeadingWildcardProcessor::live$ = false;

              jclass AllowLeadingWildcardProcessor::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/standard/processors/AllowLeadingWildcardProcessor");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
                  mids$[mid_process_6705aed7] = env->getMethodID(cls, "process", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;)Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;");
                  mids$[mid_preProcessNode_6705aed7] = env->getMethodID(cls, "preProcessNode", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;)Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;");
                  mids$[mid_setChildrenOrder_4f378251] = env->getMethodID(cls, "setChildrenOrder", "(Ljava/util/List;)Ljava/util/List;");
                  mids$[mid_postProcessNode_6705aed7] = env->getMethodID(cls, "postProcessNode", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;)Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              AllowLeadingWildcardProcessor::AllowLeadingWildcardProcessor() : ::org::apache::lucene::queryparser::flexible::core::processors::QueryNodeProcessorImpl(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

              ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode AllowLeadingWildcardProcessor::process(const ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode & a0) const
              {
                return ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode(env->callObjectMethod(this$, mids$[mid_process_6705aed7], a0.this$));
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace processors {
              static PyObject *t_AllowLeadingWildcardProcessor_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_AllowLeadingWildcardProcessor_instance_(PyTypeObject *type, PyObject *arg);
              static int t_AllowLeadingWildcardProcessor_init_(t_AllowLeadingWildcardProcessor *self, PyObject *args, PyObject *kwds);
              static PyObject *t_AllowLeadingWildcardProcessor_process(t_AllowLeadingWildcardProcessor *self, PyObject *args);

              static PyMethodDef t_AllowLeadingWildcardProcessor__methods_[] = {
                DECLARE_METHOD(t_AllowLeadingWildcardProcessor, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_AllowLeadingWildcardProcessor, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_AllowLeadingWildcardProcessor, process, METH_VARARGS),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(AllowLeadingWildcardProcessor, t_AllowLeadingWildcardProcessor, ::org::apache::lucene::queryparser::flexible::core::processors::QueryNodeProcessorImpl, AllowLeadingWildcardProcessor, t_AllowLeadingWildcardProcessor_init_, 0, 0, 0, 0, 0);

              void t_AllowLeadingWildcardProcessor::install(PyObject *module)
              {
                installType(&PY_TYPE(AllowLeadingWildcardProcessor), module, "AllowLeadingWildcardProcessor", 0);
              }

              void t_AllowLeadingWildcardProcessor::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(AllowLeadingWildcardProcessor).tp_dict, "class_", make_descriptor(AllowLeadingWildcardProcessor::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(AllowLeadingWildcardProcessor).tp_dict, "wrapfn_", make_descriptor(t_AllowLeadingWildcardProcessor::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(AllowLeadingWildcardProcessor).tp_dict, "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_AllowLeadingWildcardProcessor_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, AllowLeadingWildcardProcessor::initializeClass, 1)))
                  return NULL;
                return t_AllowLeadingWildcardProcessor::wrap_Object(AllowLeadingWildcardProcessor(((t_AllowLeadingWildcardProcessor *) arg)->object.this$));
              }
              static PyObject *t_AllowLeadingWildcardProcessor_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, AllowLeadingWildcardProcessor::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_AllowLeadingWildcardProcessor_init_(t_AllowLeadingWildcardProcessor *self, PyObject *args, PyObject *kwds)
              {
                AllowLeadingWildcardProcessor object((jobject) NULL);

                INT_CALL(object = AllowLeadingWildcardProcessor());
                self->object = object;

                return 0;
              }

              static PyObject *t_AllowLeadingWildcardProcessor_process(t_AllowLeadingWildcardProcessor *self, PyObject *args)
              {
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode a0((jobject) NULL);
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode result((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode::initializeClass, &a0))
                {
                  OBJ_CALL(result = self->object.process(a0));
                  return ::org::apache::lucene::queryparser::flexible::core::nodes::t_QueryNode::wrap_Object(result);
                }

                return callSuper(&PY_TYPE(AllowLeadingWildcardProcessor), (PyObject *) self, "process", args, 2);
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/OpenBitSet.h"
#include "org/apache/lucene/util/Bits.h"
#include "org/apache/lucene/search/DocIdSetIterator.h"
#include "java/lang/Class.h"
#include "java/lang/Object.h"
#include "java/lang/Cloneable.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *OpenBitSet::class$ = NULL;
        jmethodID *OpenBitSet::mids$ = NULL;
        bool OpenBitSet::live$ = false;

        jclass OpenBitSet::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/OpenBitSet");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_init$_0ee6df2f] = env->getMethodID(cls, "<init>", "(J)V");
            mids$[mid_init$_ce93dbcb] = env->getMethodID(cls, "<init>", "([JI)V");
            mids$[mid_and_c2540e4f] = env->getMethodID(cls, "and", "(Lorg/apache/lucene/util/OpenBitSet;)V");
            mids$[mid_andNot_c2540e4f] = env->getMethodID(cls, "andNot", "(Lorg/apache/lucene/util/OpenBitSet;)V");
            mids$[mid_andNotCount_52061930] = env->getStaticMethodID(cls, "andNotCount", "(Lorg/apache/lucene/util/OpenBitSet;Lorg/apache/lucene/util/OpenBitSet;)J");
            mids$[mid_bits_03c2457d] = env->getMethodID(cls, "bits", "()Lorg/apache/lucene/util/Bits;");
            mids$[mid_bits2words_0ee6df30] = env->getStaticMethodID(cls, "bits2words", "(J)I");
            mids$[mid_capacity_54c6a17a] = env->getMethodID(cls, "capacity", "()J");
            mids$[mid_cardinality_54c6a17a] = env->getMethodID(cls, "cardinality", "()J");
            mids$[mid_clear_0ee6df2f] = env->getMethodID(cls, "clear", "(J)V");
            mids$[mid_clear_a7e12ca4] = env->getMethodID(cls, "clear", "(JJ)V");
            mids$[mid_clear_d8d154a6] = env->getMethodID(cls, "clear", "(II)V");
            mids$[mid_clone_23f9e142] = env->getMethodID(cls, "clone", "()Lorg/apache/lucene/util/OpenBitSet;");
            mids$[mid_ensureCapacity_0ee6df2f] = env->getMethodID(cls, "ensureCapacity", "(J)V");
            mids$[mid_ensureCapacityWords_39c7bd3c] = env->getMethodID(cls, "ensureCapacityWords", "(I)V");
            mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
            mids$[mid_fastClear_39c7bd3c] = env->getMethodID(cls, "fastClear", "(I)V");
            mids$[mid_fastClear_0ee6df2f] = env->getMethodID(cls, "fastClear", "(J)V");
            mids$[mid_fastFlip_0ee6df2f] = env->getMethodID(cls, "fastFlip", "(J)V");
            mids$[mid_fastFlip_39c7bd3c] = env->getMethodID(cls, "fastFlip", "(I)V");
            mids$[mid_fastGet_39c7bd30] = env->getMethodID(cls, "fastGet", "(I)Z");
            mids$[mid_fastGet_0ee6df23] = env->getMethodID(cls, "fastGet", "(J)Z");
            mids$[mid_fastSet_39c7bd3c] = env->getMethodID(cls, "fastSet", "(I)V");
            mids$[mid_fastSet_0ee6df2f] = env->getMethodID(cls, "fastSet", "(J)V");
            mids$[mid_flip_0ee6df2f] = env->getMethodID(cls, "flip", "(J)V");
            mids$[mid_flip_a7e12ca4] = env->getMethodID(cls, "flip", "(JJ)V");
            mids$[mid_flipAndGet_0ee6df23] = env->getMethodID(cls, "flipAndGet", "(J)Z");
            mids$[mid_flipAndGet_39c7bd30] = env->getMethodID(cls, "flipAndGet", "(I)Z");
            mids$[mid_get_0ee6df23] = env->getMethodID(cls, "get", "(J)Z");
            mids$[mid_get_39c7bd30] = env->getMethodID(cls, "get", "(I)Z");
            mids$[mid_getAndSet_39c7bd30] = env->getMethodID(cls, "getAndSet", "(I)Z");
            mids$[mid_getAndSet_0ee6df23] = env->getMethodID(cls, "getAndSet", "(J)Z");
            mids$[mid_getBit_39c7bd23] = env->getMethodID(cls, "getBit", "(I)I");
            mids$[mid_getBits_dab10e76] = env->getMethodID(cls, "getBits", "()[J");
            mids$[mid_getNumWords_54c6a179] = env->getMethodID(cls, "getNumWords", "()I");
            mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
            mids$[mid_intersect_c2540e4f] = env->getMethodID(cls, "intersect", "(Lorg/apache/lucene/util/OpenBitSet;)V");
            mids$[mid_intersectionCount_52061930] = env->getStaticMethodID(cls, "intersectionCount", "(Lorg/apache/lucene/util/OpenBitSet;Lorg/apache/lucene/util/OpenBitSet;)J");
            mids$[mid_intersects_c2540e43] = env->getMethodID(cls, "intersects", "(Lorg/apache/lucene/util/OpenBitSet;)Z");
            mids$[mid_isCacheable_54c6a16a] = env->getMethodID(cls, "isCacheable", "()Z");
            mids$[mid_isEmpty_54c6a16a] = env->getMethodID(cls, "isEmpty", "()Z");
            mids$[mid_iterator_dc23660c] = env->getMethodID(cls, "iterator", "()Lorg/apache/lucene/search/DocIdSetIterator;");
            mids$[mid_length_54c6a179] = env->getMethodID(cls, "length", "()I");
            mids$[mid_nextSetBit_0ee6df33] = env->getMethodID(cls, "nextSetBit", "(J)J");
            mids$[mid_nextSetBit_39c7bd23] = env->getMethodID(cls, "nextSetBit", "(I)I");
            mids$[mid_or_c2540e4f] = env->getMethodID(cls, "or", "(Lorg/apache/lucene/util/OpenBitSet;)V");
            mids$[mid_prevSetBit_0ee6df33] = env->getMethodID(cls, "prevSetBit", "(J)J");
            mids$[mid_prevSetBit_39c7bd23] = env->getMethodID(cls, "prevSetBit", "(I)I");
            mids$[mid_ramBytesUsed_54c6a17a] = env->getMethodID(cls, "ramBytesUsed", "()J");
            mids$[mid_remove_c2540e4f] = env->getMethodID(cls, "remove", "(Lorg/apache/lucene/util/OpenBitSet;)V");
            mids$[mid_set_0ee6df2f] = env->getMethodID(cls, "set", "(J)V");
            mids$[mid_set_a7e12ca4] = env->getMethodID(cls, "set", "(JJ)V");
            mids$[mid_size_54c6a17a] = env->getMethodID(cls, "size", "()J");
            mids$[mid_trimTrailingZeros_54c6a166] = env->getMethodID(cls, "trimTrailingZeros", "()V");
            mids$[mid_union_c2540e4f] = env->getMethodID(cls, "union", "(Lorg/apache/lucene/util/OpenBitSet;)V");
            mids$[mid_unionCount_52061930] = env->getStaticMethodID(cls, "unionCount", "(Lorg/apache/lucene/util/OpenBitSet;Lorg/apache/lucene/util/OpenBitSet;)J");
            mids$[mid_xor_c2540e4f] = env->getMethodID(cls, "xor", "(Lorg/apache/lucene/util/OpenBitSet;)V");
            mids$[mid_xorCount_52061930] = env->getStaticMethodID(cls, "xorCount", "(Lorg/apache/lucene/util/OpenBitSet;Lorg/apache/lucene/util/OpenBitSet;)J");
            mids$[mid_expandingWordNum_0ee6df30] = env->getMethodID(cls, "expandingWordNum", "(J)I");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        OpenBitSet::OpenBitSet() : ::org::apache::lucene::search::DocIdSet(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        OpenBitSet::OpenBitSet(jlong a0) : ::org::apache::lucene::search::DocIdSet(env->newObject(initializeClass, &mids$, mid_init$_0ee6df2f, a0)) {}

        OpenBitSet::OpenBitSet(const JArray< jlong > & a0, jint a1) : ::org::apache::lucene::search::DocIdSet(env->newObject(initializeClass, &mids$, mid_init$_ce93dbcb, a0.this$, a1)) {}

        void OpenBitSet::and$(const OpenBitSet & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_and_c2540e4f], a0.this$);
        }

        void OpenBitSet::andNot(const OpenBitSet & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_andNot_c2540e4f], a0.this$);
        }

        jlong OpenBitSet::andNotCount(const OpenBitSet & a0, const OpenBitSet & a1)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticLongMethod(cls, mids$[mid_andNotCount_52061930], a0.this$, a1.this$);
        }

        ::org::apache::lucene::util::Bits OpenBitSet::bits() const
        {
          return ::org::apache::lucene::util::Bits(env->callObjectMethod(this$, mids$[mid_bits_03c2457d]));
        }

        jint OpenBitSet::bits2words(jlong a0)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticIntMethod(cls, mids$[mid_bits2words_0ee6df30], a0);
        }

        jlong OpenBitSet::capacity() const
        {
          return env->callLongMethod(this$, mids$[mid_capacity_54c6a17a]);
        }

        jlong OpenBitSet::cardinality() const
        {
          return env->callLongMethod(this$, mids$[mid_cardinality_54c6a17a]);
        }

        void OpenBitSet::clear(jlong a0) const
        {
          env->callVoidMethod(this$, mids$[mid_clear_0ee6df2f], a0);
        }

        void OpenBitSet::clear(jlong a0, jlong a1) const
        {
          env->callVoidMethod(this$, mids$[mid_clear_a7e12ca4], a0, a1);
        }

        void OpenBitSet::clear(jint a0, jint a1) const
        {
          env->callVoidMethod(this$, mids$[mid_clear_d8d154a6], a0, a1);
        }

        OpenBitSet OpenBitSet::clone() const
        {
          return OpenBitSet(env->callObjectMethod(this$, mids$[mid_clone_23f9e142]));
        }

        void OpenBitSet::ensureCapacity(jlong a0) const
        {
          env->callVoidMethod(this$, mids$[mid_ensureCapacity_0ee6df2f], a0);
        }

        void OpenBitSet::ensureCapacityWords(jint a0) const
        {
          env->callVoidMethod(this$, mids$[mid_ensureCapacityWords_39c7bd3c], a0);
        }

        jboolean OpenBitSet::equals(const ::java::lang::Object & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
        }

        void OpenBitSet::fastClear(jint a0) const
        {
          env->callVoidMethod(this$, mids$[mid_fastClear_39c7bd3c], a0);
        }

        void OpenBitSet::fastClear(jlong a0) const
        {
          env->callVoidMethod(this$, mids$[mid_fastClear_0ee6df2f], a0);
        }

        void OpenBitSet::fastFlip(jlong a0) const
        {
          env->callVoidMethod(this$, mids$[mid_fastFlip_0ee6df2f], a0);
        }

        void OpenBitSet::fastFlip(jint a0) const
        {
          env->callVoidMethod(this$, mids$[mid_fastFlip_39c7bd3c], a0);
        }

        jboolean OpenBitSet::fastGet(jint a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_fastGet_39c7bd30], a0);
        }

        jboolean OpenBitSet::fastGet(jlong a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_fastGet_0ee6df23], a0);
        }

        void OpenBitSet::fastSet(jint a0) const
        {
          env->callVoidMethod(this$, mids$[mid_fastSet_39c7bd3c], a0);
        }

        void OpenBitSet::fastSet(jlong a0) const
        {
          env->callVoidMethod(this$, mids$[mid_fastSet_0ee6df2f], a0);
        }

        void OpenBitSet::flip(jlong a0) const
        {
          env->callVoidMethod(this$, mids$[mid_flip_0ee6df2f], a0);
        }

        void OpenBitSet::flip(jlong a0, jlong a1) const
        {
          env->callVoidMethod(this$, mids$[mid_flip_a7e12ca4], a0, a1);
        }

        jboolean OpenBitSet::flipAndGet(jlong a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_flipAndGet_0ee6df23], a0);
        }

        jboolean OpenBitSet::flipAndGet(jint a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_flipAndGet_39c7bd30], a0);
        }

        jboolean OpenBitSet::get(jlong a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_get_0ee6df23], a0);
        }

        jboolean OpenBitSet::get(jint a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_get_39c7bd30], a0);
        }

        jboolean OpenBitSet::getAndSet(jint a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_getAndSet_39c7bd30], a0);
        }

        jboolean OpenBitSet::getAndSet(jlong a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_getAndSet_0ee6df23], a0);
        }

        jint OpenBitSet::getBit(jint a0) const
        {
          return env->callIntMethod(this$, mids$[mid_getBit_39c7bd23], a0);
        }

        JArray< jlong > OpenBitSet::getBits() const
        {
          return JArray< jlong >(env->callObjectMethod(this$, mids$[mid_getBits_dab10e76]));
        }

        jint OpenBitSet::getNumWords() const
        {
          return env->callIntMethod(this$, mids$[mid_getNumWords_54c6a179]);
        }

        jint OpenBitSet::hashCode() const
        {
          return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
        }

        void OpenBitSet::intersect(const OpenBitSet & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_intersect_c2540e4f], a0.this$);
        }

        jlong OpenBitSet::intersectionCount(const OpenBitSet & a0, const OpenBitSet & a1)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticLongMethod(cls, mids$[mid_intersectionCount_52061930], a0.this$, a1.this$);
        }

        jboolean OpenBitSet::intersects(const OpenBitSet & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_intersects_c2540e43], a0.this$);
        }

        jboolean OpenBitSet::isCacheable() const
        {
          return env->callBooleanMethod(this$, mids$[mid_isCacheable_54c6a16a]);
        }

        jboolean OpenBitSet::isEmpty() const
        {
          return env->callBooleanMethod(this$, mids$[mid_isEmpty_54c6a16a]);
        }

        ::org::apache::lucene::search::DocIdSetIterator OpenBitSet::iterator() const
        {
          return ::org::apache::lucene::search::DocIdSetIterator(env->callObjectMethod(this$, mids$[mid_iterator_dc23660c]));
        }

        jint OpenBitSet::length() const
        {
          return env->callIntMethod(this$, mids$[mid_length_54c6a179]);
        }

        jlong OpenBitSet::nextSetBit(jlong a0) const
        {
          return env->callLongMethod(this$, mids$[mid_nextSetBit_0ee6df33], a0);
        }

        jint OpenBitSet::nextSetBit(jint a0) const
        {
          return env->callIntMethod(this$, mids$[mid_nextSetBit_39c7bd23], a0);
        }

        void OpenBitSet::or$(const OpenBitSet & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_or_c2540e4f], a0.this$);
        }

        jlong OpenBitSet::prevSetBit(jlong a0) const
        {
          return env->callLongMethod(this$, mids$[mid_prevSetBit_0ee6df33], a0);
        }

        jint OpenBitSet::prevSetBit(jint a0) const
        {
          return env->callIntMethod(this$, mids$[mid_prevSetBit_39c7bd23], a0);
        }

        jlong OpenBitSet::ramBytesUsed() const
        {
          return env->callLongMethod(this$, mids$[mid_ramBytesUsed_54c6a17a]);
        }

        void OpenBitSet::remove(const OpenBitSet & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_remove_c2540e4f], a0.this$);
        }

        void OpenBitSet::set(jlong a0) const
        {
          env->callVoidMethod(this$, mids$[mid_set_0ee6df2f], a0);
        }

        void OpenBitSet::set(jlong a0, jlong a1) const
        {
          env->callVoidMethod(this$, mids$[mid_set_a7e12ca4], a0, a1);
        }

        jlong OpenBitSet::size() const
        {
          return env->callLongMethod(this$, mids$[mid_size_54c6a17a]);
        }

        void OpenBitSet::trimTrailingZeros() const
        {
          env->callVoidMethod(this$, mids$[mid_trimTrailingZeros_54c6a166]);
        }

        void OpenBitSet::union$(const OpenBitSet & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_union_c2540e4f], a0.this$);
        }

        jlong OpenBitSet::unionCount(const OpenBitSet & a0, const OpenBitSet & a1)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticLongMethod(cls, mids$[mid_unionCount_52061930], a0.this$, a1.this$);
        }

        void OpenBitSet::xor$(const OpenBitSet & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_xor_c2540e4f], a0.this$);
        }

        jlong OpenBitSet::xorCount(const OpenBitSet & a0, const OpenBitSet & a1)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticLongMethod(cls, mids$[mid_xorCount_52061930], a0.this$, a1.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_OpenBitSet_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_OpenBitSet_instance_(PyTypeObject *type, PyObject *arg);
        static int t_OpenBitSet_init_(t_OpenBitSet *self, PyObject *args, PyObject *kwds);
        static PyObject *t_OpenBitSet_and(t_OpenBitSet *self, PyObject *arg);
        static PyObject *t_OpenBitSet_andNot(t_OpenBitSet *self, PyObject *arg);
        static PyObject *t_OpenBitSet_andNotCount(PyTypeObject *type, PyObject *args);
        static PyObject *t_OpenBitSet_bits(t_OpenBitSet *self, PyObject *args);
        static PyObject *t_OpenBitSet_bits2words(PyTypeObject *type, PyObject *arg);
        static PyObject *t_OpenBitSet_capacity(t_OpenBitSet *self);
        static PyObject *t_OpenBitSet_cardinality(t_OpenBitSet *self);
        static PyObject *t_OpenBitSet_clear(t_OpenBitSet *self, PyObject *args);
        static PyObject *t_OpenBitSet_clone(t_OpenBitSet *self);
        static PyObject *t_OpenBitSet_ensureCapacity(t_OpenBitSet *self, PyObject *arg);
        static PyObject *t_OpenBitSet_ensureCapacityWords(t_OpenBitSet *self, PyObject *arg);
        static PyObject *t_OpenBitSet_equals(t_OpenBitSet *self, PyObject *args);
        static PyObject *t_OpenBitSet_fastClear(t_OpenBitSet *self, PyObject *args);
        static PyObject *t_OpenBitSet_fastFlip(t_OpenBitSet *self, PyObject *args);
        static PyObject *t_OpenBitSet_fastGet(t_OpenBitSet *self, PyObject *args);
        static PyObject *t_OpenBitSet_fastSet(t_OpenBitSet *self, PyObject *args);
        static PyObject *t_OpenBitSet_flip(t_OpenBitSet *self, PyObject *args);
        static PyObject *t_OpenBitSet_flipAndGet(t_OpenBitSet *self, PyObject *args);
        static PyObject *t_OpenBitSet_get(t_OpenBitSet *self, PyObject *args);
        static PyObject *t_OpenBitSet_getAndSet(t_OpenBitSet *self, PyObject *args);
        static PyObject *t_OpenBitSet_getBit(t_OpenBitSet *self, PyObject *arg);
        static PyObject *t_OpenBitSet_getBits(t_OpenBitSet *self);
        static PyObject *t_OpenBitSet_getNumWords(t_OpenBitSet *self);
        static PyObject *t_OpenBitSet_hashCode(t_OpenBitSet *self, PyObject *args);
        static PyObject *t_OpenBitSet_intersect(t_OpenBitSet *self, PyObject *arg);
        static PyObject *t_OpenBitSet_intersectionCount(PyTypeObject *type, PyObject *args);
        static PyObject *t_OpenBitSet_intersects(t_OpenBitSet *self, PyObject *arg);
        static PyObject *t_OpenBitSet_isCacheable(t_OpenBitSet *self, PyObject *args);
        static PyObject *t_OpenBitSet_isEmpty(t_OpenBitSet *self);
        static PyObject *t_OpenBitSet_iterator(t_OpenBitSet *self, PyObject *args);
        static PyObject *t_OpenBitSet_length(t_OpenBitSet *self);
        static PyObject *t_OpenBitSet_nextSetBit(t_OpenBitSet *self, PyObject *args);
        static PyObject *t_OpenBitSet_or(t_OpenBitSet *self, PyObject *arg);
        static PyObject *t_OpenBitSet_prevSetBit(t_OpenBitSet *self, PyObject *args);
        static PyObject *t_OpenBitSet_ramBytesUsed(t_OpenBitSet *self, PyObject *args);
        static PyObject *t_OpenBitSet_remove(t_OpenBitSet *self, PyObject *arg);
        static PyObject *t_OpenBitSet_set(t_OpenBitSet *self, PyObject *args);
        static PyObject *t_OpenBitSet_size(t_OpenBitSet *self);
        static PyObject *t_OpenBitSet_trimTrailingZeros(t_OpenBitSet *self);
        static PyObject *t_OpenBitSet_union(t_OpenBitSet *self, PyObject *arg);
        static PyObject *t_OpenBitSet_unionCount(PyTypeObject *type, PyObject *args);
        static PyObject *t_OpenBitSet_xor(t_OpenBitSet *self, PyObject *arg);
        static PyObject *t_OpenBitSet_xorCount(PyTypeObject *type, PyObject *args);
        static PyObject *t_OpenBitSet_get__cacheable(t_OpenBitSet *self, void *data);
        static PyObject *t_OpenBitSet_get__empty(t_OpenBitSet *self, void *data);
        static PyObject *t_OpenBitSet_get__numWords(t_OpenBitSet *self, void *data);
        static PyGetSetDef t_OpenBitSet__fields_[] = {
          DECLARE_GET_FIELD(t_OpenBitSet, cacheable),
          DECLARE_GET_FIELD(t_OpenBitSet, empty),
          DECLARE_GET_FIELD(t_OpenBitSet, numWords),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_OpenBitSet__methods_[] = {
          DECLARE_METHOD(t_OpenBitSet, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_OpenBitSet, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_OpenBitSet, and, METH_O),
          DECLARE_METHOD(t_OpenBitSet, andNot, METH_O),
          DECLARE_METHOD(t_OpenBitSet, andNotCount, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_OpenBitSet, bits, METH_VARARGS),
          DECLARE_METHOD(t_OpenBitSet, bits2words, METH_O | METH_CLASS),
          DECLARE_METHOD(t_OpenBitSet, capacity, METH_NOARGS),
          DECLARE_METHOD(t_OpenBitSet, cardinality, METH_NOARGS),
          DECLARE_METHOD(t_OpenBitSet, clear, METH_VARARGS),
          DECLARE_METHOD(t_OpenBitSet, clone, METH_NOARGS),
          DECLARE_METHOD(t_OpenBitSet, ensureCapacity, METH_O),
          DECLARE_METHOD(t_OpenBitSet, ensureCapacityWords, METH_O),
          DECLARE_METHOD(t_OpenBitSet, equals, METH_VARARGS),
          DECLARE_METHOD(t_OpenBitSet, fastClear, METH_VARARGS),
          DECLARE_METHOD(t_OpenBitSet, fastFlip, METH_VARARGS),
          DECLARE_METHOD(t_OpenBitSet, fastGet, METH_VARARGS),
          DECLARE_METHOD(t_OpenBitSet, fastSet, METH_VARARGS),
          DECLARE_METHOD(t_OpenBitSet, flip, METH_VARARGS),
          DECLARE_METHOD(t_OpenBitSet, flipAndGet, METH_VARARGS),
          DECLARE_METHOD(t_OpenBitSet, get, METH_VARARGS),
          DECLARE_METHOD(t_OpenBitSet, getAndSet, METH_VARARGS),
          DECLARE_METHOD(t_OpenBitSet, getBit, METH_O),
          DECLARE_METHOD(t_OpenBitSet, getBits, METH_NOARGS),
          DECLARE_METHOD(t_OpenBitSet, getNumWords, METH_NOARGS),
          DECLARE_METHOD(t_OpenBitSet, hashCode, METH_VARARGS),
          DECLARE_METHOD(t_OpenBitSet, intersect, METH_O),
          DECLARE_METHOD(t_OpenBitSet, intersectionCount, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_OpenBitSet, intersects, METH_O),
          DECLARE_METHOD(t_OpenBitSet, isCacheable, METH_VARARGS),
          DECLARE_METHOD(t_OpenBitSet, isEmpty, METH_NOARGS),
          DECLARE_METHOD(t_OpenBitSet, iterator, METH_VARARGS),
          DECLARE_METHOD(t_OpenBitSet, length, METH_NOARGS),
          DECLARE_METHOD(t_OpenBitSet, nextSetBit, METH_VARARGS),
          DECLARE_METHOD(t_OpenBitSet, or, METH_O),
          DECLARE_METHOD(t_OpenBitSet, prevSetBit, METH_VARARGS),
          DECLARE_METHOD(t_OpenBitSet, ramBytesUsed, METH_VARARGS),
          DECLARE_METHOD(t_OpenBitSet, remove, METH_O),
          DECLARE_METHOD(t_OpenBitSet, set, METH_VARARGS),
          DECLARE_METHOD(t_OpenBitSet, size, METH_NOARGS),
          DECLARE_METHOD(t_OpenBitSet, trimTrailingZeros, METH_NOARGS),
          DECLARE_METHOD(t_OpenBitSet, union, METH_O),
          DECLARE_METHOD(t_OpenBitSet, unionCount, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_OpenBitSet, xor, METH_O),
          DECLARE_METHOD(t_OpenBitSet, xorCount, METH_VARARGS | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(OpenBitSet, t_OpenBitSet, ::org::apache::lucene::search::DocIdSet, OpenBitSet, t_OpenBitSet_init_, 0, 0, t_OpenBitSet__fields_, 0, 0);

        void t_OpenBitSet::install(PyObject *module)
        {
          installType(&PY_TYPE(OpenBitSet), module, "OpenBitSet", 0);
        }

        void t_OpenBitSet::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(OpenBitSet).tp_dict, "class_", make_descriptor(OpenBitSet::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(OpenBitSet).tp_dict, "wrapfn_", make_descriptor(t_OpenBitSet::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(OpenBitSet).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_OpenBitSet_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, OpenBitSet::initializeClass, 1)))
            return NULL;
          return t_OpenBitSet::wrap_Object(OpenBitSet(((t_OpenBitSet *) arg)->object.this$));
        }
        static PyObject *t_OpenBitSet_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, OpenBitSet::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_OpenBitSet_init_(t_OpenBitSet *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 0:
            {
              OpenBitSet object((jobject) NULL);

              INT_CALL(object = OpenBitSet());
              self->object = object;
              break;
            }
            goto err;
           case 1:
            {
              jlong a0;
              OpenBitSet object((jobject) NULL);

              if (!parseArgs(args, "J", &a0))
              {
                INT_CALL(object = OpenBitSet(a0));
                self->object = object;
                break;
              }
            }
            goto err;
           case 2:
            {
              JArray< jlong > a0((jobject) NULL);
              jint a1;
              OpenBitSet object((jobject) NULL);

              if (!parseArgs(args, "[JI", &a0, &a1))
              {
                INT_CALL(object = OpenBitSet(a0, a1));
                self->object = object;
                break;
              }
            }
           default:
           err:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_OpenBitSet_and(t_OpenBitSet *self, PyObject *arg)
        {
          OpenBitSet a0((jobject) NULL);

          if (!parseArg(arg, "k", OpenBitSet::initializeClass, &a0))
          {
            OBJ_CALL(self->object.and$(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "and", arg);
          return NULL;
        }

        static PyObject *t_OpenBitSet_andNot(t_OpenBitSet *self, PyObject *arg)
        {
          OpenBitSet a0((jobject) NULL);

          if (!parseArg(arg, "k", OpenBitSet::initializeClass, &a0))
          {
            OBJ_CALL(self->object.andNot(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "andNot", arg);
          return NULL;
        }

        static PyObject *t_OpenBitSet_andNotCount(PyTypeObject *type, PyObject *args)
        {
          OpenBitSet a0((jobject) NULL);
          OpenBitSet a1((jobject) NULL);
          jlong result;

          if (!parseArgs(args, "kk", OpenBitSet::initializeClass, OpenBitSet::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = ::org::apache::lucene::util::OpenBitSet::andNotCount(a0, a1));
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          PyErr_SetArgsError(type, "andNotCount", args);
          return NULL;
        }

        static PyObject *t_OpenBitSet_bits(t_OpenBitSet *self, PyObject *args)
        {
          ::org::apache::lucene::util::Bits result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.bits());
            return ::org::apache::lucene::util::t_Bits::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(OpenBitSet), (PyObject *) self, "bits", args, 2);
        }

        static PyObject *t_OpenBitSet_bits2words(PyTypeObject *type, PyObject *arg)
        {
          jlong a0;
          jint result;

          if (!parseArg(arg, "J", &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::util::OpenBitSet::bits2words(a0));
            return PyInt_FromLong((long) result);
          }

          PyErr_SetArgsError(type, "bits2words", arg);
          return NULL;
        }

        static PyObject *t_OpenBitSet_capacity(t_OpenBitSet *self)
        {
          jlong result;
          OBJ_CALL(result = self->object.capacity());
          return PyLong_FromLongLong((PY_LONG_LONG) result);
        }

        static PyObject *t_OpenBitSet_cardinality(t_OpenBitSet *self)
        {
          jlong result;
          OBJ_CALL(result = self->object.cardinality());
          return PyLong_FromLongLong((PY_LONG_LONG) result);
        }

        static PyObject *t_OpenBitSet_clear(t_OpenBitSet *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              jlong a0;

              if (!parseArgs(args, "J", &a0))
              {
                OBJ_CALL(self->object.clear(a0));
                Py_RETURN_NONE;
              }
            }
            break;
           case 2:
            {
              jlong a0;
              jlong a1;

              if (!parseArgs(args, "JJ", &a0, &a1))
              {
                OBJ_CALL(self->object.clear(a0, a1));
                Py_RETURN_NONE;
              }
            }
            {
              jint a0;
              jint a1;

              if (!parseArgs(args, "II", &a0, &a1))
              {
                OBJ_CALL(self->object.clear(a0, a1));
                Py_RETURN_NONE;
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "clear", args);
          return NULL;
        }

        static PyObject *t_OpenBitSet_clone(t_OpenBitSet *self)
        {
          OpenBitSet result((jobject) NULL);
          OBJ_CALL(result = self->object.clone());
          return t_OpenBitSet::wrap_Object(result);
        }

        static PyObject *t_OpenBitSet_ensureCapacity(t_OpenBitSet *self, PyObject *arg)
        {
          jlong a0;

          if (!parseArg(arg, "J", &a0))
          {
            OBJ_CALL(self->object.ensureCapacity(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "ensureCapacity", arg);
          return NULL;
        }

        static PyObject *t_OpenBitSet_ensureCapacityWords(t_OpenBitSet *self, PyObject *arg)
        {
          jint a0;

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(self->object.ensureCapacityWords(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "ensureCapacityWords", arg);
          return NULL;
        }

        static PyObject *t_OpenBitSet_equals(t_OpenBitSet *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.equals(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(OpenBitSet), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_OpenBitSet_fastClear(t_OpenBitSet *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              jint a0;

              if (!parseArgs(args, "I", &a0))
              {
                OBJ_CALL(self->object.fastClear(a0));
                Py_RETURN_NONE;
              }
            }
            {
              jlong a0;

              if (!parseArgs(args, "J", &a0))
              {
                OBJ_CALL(self->object.fastClear(a0));
                Py_RETURN_NONE;
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "fastClear", args);
          return NULL;
        }

        static PyObject *t_OpenBitSet_fastFlip(t_OpenBitSet *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              jlong a0;

              if (!parseArgs(args, "J", &a0))
              {
                OBJ_CALL(self->object.fastFlip(a0));
                Py_RETURN_NONE;
              }
            }
            {
              jint a0;

              if (!parseArgs(args, "I", &a0))
              {
                OBJ_CALL(self->object.fastFlip(a0));
                Py_RETURN_NONE;
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "fastFlip", args);
          return NULL;
        }

        static PyObject *t_OpenBitSet_fastGet(t_OpenBitSet *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              jint a0;
              jboolean result;

              if (!parseArgs(args, "I", &a0))
              {
                OBJ_CALL(result = self->object.fastGet(a0));
                Py_RETURN_BOOL(result);
              }
            }
            {
              jlong a0;
              jboolean result;

              if (!parseArgs(args, "J", &a0))
              {
                OBJ_CALL(result = self->object.fastGet(a0));
                Py_RETURN_BOOL(result);
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "fastGet", args);
          return NULL;
        }

        static PyObject *t_OpenBitSet_fastSet(t_OpenBitSet *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              jint a0;

              if (!parseArgs(args, "I", &a0))
              {
                OBJ_CALL(self->object.fastSet(a0));
                Py_RETURN_NONE;
              }
            }
            {
              jlong a0;

              if (!parseArgs(args, "J", &a0))
              {
                OBJ_CALL(self->object.fastSet(a0));
                Py_RETURN_NONE;
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "fastSet", args);
          return NULL;
        }

        static PyObject *t_OpenBitSet_flip(t_OpenBitSet *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              jlong a0;

              if (!parseArgs(args, "J", &a0))
              {
                OBJ_CALL(self->object.flip(a0));
                Py_RETURN_NONE;
              }
            }
            break;
           case 2:
            {
              jlong a0;
              jlong a1;

              if (!parseArgs(args, "JJ", &a0, &a1))
              {
                OBJ_CALL(self->object.flip(a0, a1));
                Py_RETURN_NONE;
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "flip", args);
          return NULL;
        }

        static PyObject *t_OpenBitSet_flipAndGet(t_OpenBitSet *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              jlong a0;
              jboolean result;

              if (!parseArgs(args, "J", &a0))
              {
                OBJ_CALL(result = self->object.flipAndGet(a0));
                Py_RETURN_BOOL(result);
              }
            }
            {
              jint a0;
              jboolean result;

              if (!parseArgs(args, "I", &a0))
              {
                OBJ_CALL(result = self->object.flipAndGet(a0));
                Py_RETURN_BOOL(result);
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "flipAndGet", args);
          return NULL;
        }

        static PyObject *t_OpenBitSet_get(t_OpenBitSet *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              jlong a0;
              jboolean result;

              if (!parseArgs(args, "J", &a0))
              {
                OBJ_CALL(result = self->object.get(a0));
                Py_RETURN_BOOL(result);
              }
            }
            {
              jint a0;
              jboolean result;

              if (!parseArgs(args, "I", &a0))
              {
                OBJ_CALL(result = self->object.get(a0));
                Py_RETURN_BOOL(result);
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "get", args);
          return NULL;
        }

        static PyObject *t_OpenBitSet_getAndSet(t_OpenBitSet *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              jint a0;
              jboolean result;

              if (!parseArgs(args, "I", &a0))
              {
                OBJ_CALL(result = self->object.getAndSet(a0));
                Py_RETURN_BOOL(result);
              }
            }
            {
              jlong a0;
              jboolean result;

              if (!parseArgs(args, "J", &a0))
              {
                OBJ_CALL(result = self->object.getAndSet(a0));
                Py_RETURN_BOOL(result);
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "getAndSet", args);
          return NULL;
        }

        static PyObject *t_OpenBitSet_getBit(t_OpenBitSet *self, PyObject *arg)
        {
          jint a0;
          jint result;

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(result = self->object.getBit(a0));
            return PyInt_FromLong((long) result);
          }

          PyErr_SetArgsError((PyObject *) self, "getBit", arg);
          return NULL;
        }

        static PyObject *t_OpenBitSet_getBits(t_OpenBitSet *self)
        {
          JArray< jlong > result((jobject) NULL);
          OBJ_CALL(result = self->object.getBits());
          return result.wrap();
        }

        static PyObject *t_OpenBitSet_getNumWords(t_OpenBitSet *self)
        {
          jint result;
          OBJ_CALL(result = self->object.getNumWords());
          return PyInt_FromLong((long) result);
        }

        static PyObject *t_OpenBitSet_hashCode(t_OpenBitSet *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hashCode());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(OpenBitSet), (PyObject *) self, "hashCode", args, 2);
        }

        static PyObject *t_OpenBitSet_intersect(t_OpenBitSet *self, PyObject *arg)
        {
          OpenBitSet a0((jobject) NULL);

          if (!parseArg(arg, "k", OpenBitSet::initializeClass, &a0))
          {
            OBJ_CALL(self->object.intersect(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "intersect", arg);
          return NULL;
        }

        static PyObject *t_OpenBitSet_intersectionCount(PyTypeObject *type, PyObject *args)
        {
          OpenBitSet a0((jobject) NULL);
          OpenBitSet a1((jobject) NULL);
          jlong result;

          if (!parseArgs(args, "kk", OpenBitSet::initializeClass, OpenBitSet::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = ::org::apache::lucene::util::OpenBitSet::intersectionCount(a0, a1));
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          PyErr_SetArgsError(type, "intersectionCount", args);
          return NULL;
        }

        static PyObject *t_OpenBitSet_intersects(t_OpenBitSet *self, PyObject *arg)
        {
          OpenBitSet a0((jobject) NULL);
          jboolean result;

          if (!parseArg(arg, "k", OpenBitSet::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.intersects(a0));
            Py_RETURN_BOOL(result);
          }

          PyErr_SetArgsError((PyObject *) self, "intersects", arg);
          return NULL;
        }

        static PyObject *t_OpenBitSet_isCacheable(t_OpenBitSet *self, PyObject *args)
        {
          jboolean result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.isCacheable());
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(OpenBitSet), (PyObject *) self, "isCacheable", args, 2);
        }

        static PyObject *t_OpenBitSet_isEmpty(t_OpenBitSet *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.isEmpty());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_OpenBitSet_iterator(t_OpenBitSet *self, PyObject *args)
        {
          ::org::apache::lucene::search::DocIdSetIterator result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.iterator());
            return ::org::apache::lucene::search::t_DocIdSetIterator::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(OpenBitSet), (PyObject *) self, "iterator", args, 2);
        }

        static PyObject *t_OpenBitSet_length(t_OpenBitSet *self)
        {
          jint result;
          OBJ_CALL(result = self->object.length());
          return PyInt_FromLong((long) result);
        }

        static PyObject *t_OpenBitSet_nextSetBit(t_OpenBitSet *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              jlong a0;
              jlong result;

              if (!parseArgs(args, "J", &a0))
              {
                OBJ_CALL(result = self->object.nextSetBit(a0));
                return PyLong_FromLongLong((PY_LONG_LONG) result);
              }
            }
            {
              jint a0;
              jint result;

              if (!parseArgs(args, "I", &a0))
              {
                OBJ_CALL(result = self->object.nextSetBit(a0));
                return PyInt_FromLong((long) result);
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "nextSetBit", args);
          return NULL;
        }

        static PyObject *t_OpenBitSet_or(t_OpenBitSet *self, PyObject *arg)
        {
          OpenBitSet a0((jobject) NULL);

          if (!parseArg(arg, "k", OpenBitSet::initializeClass, &a0))
          {
            OBJ_CALL(self->object.or$(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "or", arg);
          return NULL;
        }

        static PyObject *t_OpenBitSet_prevSetBit(t_OpenBitSet *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              jlong a0;
              jlong result;

              if (!parseArgs(args, "J", &a0))
              {
                OBJ_CALL(result = self->object.prevSetBit(a0));
                return PyLong_FromLongLong((PY_LONG_LONG) result);
              }
            }
            {
              jint a0;
              jint result;

              if (!parseArgs(args, "I", &a0))
              {
                OBJ_CALL(result = self->object.prevSetBit(a0));
                return PyInt_FromLong((long) result);
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "prevSetBit", args);
          return NULL;
        }

        static PyObject *t_OpenBitSet_ramBytesUsed(t_OpenBitSet *self, PyObject *args)
        {
          jlong result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.ramBytesUsed());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          return callSuper(&PY_TYPE(OpenBitSet), (PyObject *) self, "ramBytesUsed", args, 2);
        }

        static PyObject *t_OpenBitSet_remove(t_OpenBitSet *self, PyObject *arg)
        {
          OpenBitSet a0((jobject) NULL);

          if (!parseArg(arg, "k", OpenBitSet::initializeClass, &a0))
          {
            OBJ_CALL(self->object.remove(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "remove", arg);
          return NULL;
        }

        static PyObject *t_OpenBitSet_set(t_OpenBitSet *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              jlong a0;

              if (!parseArgs(args, "J", &a0))
              {
                OBJ_CALL(self->object.set(a0));
                Py_RETURN_NONE;
              }
            }
            break;
           case 2:
            {
              jlong a0;
              jlong a1;

              if (!parseArgs(args, "JJ", &a0, &a1))
              {
                OBJ_CALL(self->object.set(a0, a1));
                Py_RETURN_NONE;
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "set", args);
          return NULL;
        }

        static PyObject *t_OpenBitSet_size(t_OpenBitSet *self)
        {
          jlong result;
          OBJ_CALL(result = self->object.size());
          return PyLong_FromLongLong((PY_LONG_LONG) result);
        }

        static PyObject *t_OpenBitSet_trimTrailingZeros(t_OpenBitSet *self)
        {
          OBJ_CALL(self->object.trimTrailingZeros());
          Py_RETURN_NONE;
        }

        static PyObject *t_OpenBitSet_union(t_OpenBitSet *self, PyObject *arg)
        {
          OpenBitSet a0((jobject) NULL);

          if (!parseArg(arg, "k", OpenBitSet::initializeClass, &a0))
          {
            OBJ_CALL(self->object.union$(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "union", arg);
          return NULL;
        }

        static PyObject *t_OpenBitSet_unionCount(PyTypeObject *type, PyObject *args)
        {
          OpenBitSet a0((jobject) NULL);
          OpenBitSet a1((jobject) NULL);
          jlong result;

          if (!parseArgs(args, "kk", OpenBitSet::initializeClass, OpenBitSet::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = ::org::apache::lucene::util::OpenBitSet::unionCount(a0, a1));
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          PyErr_SetArgsError(type, "unionCount", args);
          return NULL;
        }

        static PyObject *t_OpenBitSet_xor(t_OpenBitSet *self, PyObject *arg)
        {
          OpenBitSet a0((jobject) NULL);

          if (!parseArg(arg, "k", OpenBitSet::initializeClass, &a0))
          {
            OBJ_CALL(self->object.xor$(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "xor", arg);
          return NULL;
        }

        static PyObject *t_OpenBitSet_xorCount(PyTypeObject *type, PyObject *args)
        {
          OpenBitSet a0((jobject) NULL);
          OpenBitSet a1((jobject) NULL);
          jlong result;

          if (!parseArgs(args, "kk", OpenBitSet::initializeClass, OpenBitSet::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = ::org::apache::lucene::util::OpenBitSet::xorCount(a0, a1));
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          PyErr_SetArgsError(type, "xorCount", args);
          return NULL;
        }

        static PyObject *t_OpenBitSet_get__cacheable(t_OpenBitSet *self, void *data)
        {
          jboolean value;
          OBJ_CALL(value = self->object.isCacheable());
          Py_RETURN_BOOL(value);
        }

        static PyObject *t_OpenBitSet_get__empty(t_OpenBitSet *self, void *data)
        {
          jboolean value;
          OBJ_CALL(value = self->object.isEmpty());
          Py_RETURN_BOOL(value);
        }

        static PyObject *t_OpenBitSet_get__numWords(t_OpenBitSet *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object.getNumWords());
          return PyInt_FromLong((long) value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/miscellaneous/LimitTokenCountAnalyzer.h"
#include "org/apache/lucene/analysis/Analyzer.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {

          ::java::lang::Class *LimitTokenCountAnalyzer::class$ = NULL;
          jmethodID *LimitTokenCountAnalyzer::mids$ = NULL;
          bool LimitTokenCountAnalyzer::live$ = false;

          jclass LimitTokenCountAnalyzer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/miscellaneous/LimitTokenCountAnalyzer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_e882998a] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/Analyzer;I)V");
              mids$[mid_init$_79b44903] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/Analyzer;IZ)V");
              mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");
              mids$[mid_wrapComponents_46d74455] = env->getMethodID(cls, "wrapComponents", "(Ljava/lang/String;Lorg/apache/lucene/analysis/Analyzer$TokenStreamComponents;)Lorg/apache/lucene/analysis/Analyzer$TokenStreamComponents;");
              mids$[mid_getWrappedAnalyzer_29a2299f] = env->getMethodID(cls, "getWrappedAnalyzer", "(Ljava/lang/String;)Lorg/apache/lucene/analysis/Analyzer;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          LimitTokenCountAnalyzer::LimitTokenCountAnalyzer(const ::org::apache::lucene::analysis::Analyzer & a0, jint a1) : ::org::apache::lucene::analysis::AnalyzerWrapper(env->newObject(initializeClass, &mids$, mid_init$_e882998a, a0.this$, a1)) {}

          LimitTokenCountAnalyzer::LimitTokenCountAnalyzer(const ::org::apache::lucene::analysis::Analyzer & a0, jint a1, jboolean a2) : ::org::apache::lucene::analysis::AnalyzerWrapper(env->newObject(initializeClass, &mids$, mid_init$_79b44903, a0.this$, a1, a2)) {}

          ::java::lang::String LimitTokenCountAnalyzer::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {
          static PyObject *t_LimitTokenCountAnalyzer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_LimitTokenCountAnalyzer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_LimitTokenCountAnalyzer_init_(t_LimitTokenCountAnalyzer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_LimitTokenCountAnalyzer_toString(t_LimitTokenCountAnalyzer *self, PyObject *args);

          static PyMethodDef t_LimitTokenCountAnalyzer__methods_[] = {
            DECLARE_METHOD(t_LimitTokenCountAnalyzer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_LimitTokenCountAnalyzer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_LimitTokenCountAnalyzer, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(LimitTokenCountAnalyzer, t_LimitTokenCountAnalyzer, ::org::apache::lucene::analysis::AnalyzerWrapper, LimitTokenCountAnalyzer, t_LimitTokenCountAnalyzer_init_, 0, 0, 0, 0, 0);

          void t_LimitTokenCountAnalyzer::install(PyObject *module)
          {
            installType(&PY_TYPE(LimitTokenCountAnalyzer), module, "LimitTokenCountAnalyzer", 0);
          }

          void t_LimitTokenCountAnalyzer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(LimitTokenCountAnalyzer).tp_dict, "class_", make_descriptor(LimitTokenCountAnalyzer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(LimitTokenCountAnalyzer).tp_dict, "wrapfn_", make_descriptor(t_LimitTokenCountAnalyzer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(LimitTokenCountAnalyzer).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_LimitTokenCountAnalyzer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, LimitTokenCountAnalyzer::initializeClass, 1)))
              return NULL;
            return t_LimitTokenCountAnalyzer::wrap_Object(LimitTokenCountAnalyzer(((t_LimitTokenCountAnalyzer *) arg)->object.this$));
          }
          static PyObject *t_LimitTokenCountAnalyzer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, LimitTokenCountAnalyzer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_LimitTokenCountAnalyzer_init_(t_LimitTokenCountAnalyzer *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 2:
              {
                ::org::apache::lucene::analysis::Analyzer a0((jobject) NULL);
                jint a1;
                LimitTokenCountAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "kI", ::org::apache::lucene::analysis::Analyzer::initializeClass, &a0, &a1))
                {
                  INT_CALL(object = LimitTokenCountAnalyzer(a0, a1));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 3:
              {
                ::org::apache::lucene::analysis::Analyzer a0((jobject) NULL);
                jint a1;
                jboolean a2;
                LimitTokenCountAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "kIZ", ::org::apache::lucene::analysis::Analyzer::initializeClass, &a0, &a1, &a2))
                {
                  INT_CALL(object = LimitTokenCountAnalyzer(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_LimitTokenCountAnalyzer_toString(t_LimitTokenCountAnalyzer *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(&PY_TYPE(LimitTokenCountAnalyzer), (PyObject *) self, "toString", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/OpenBitSetDISI.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/search/DocIdSetIterator.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *OpenBitSetDISI::class$ = NULL;
        jmethodID *OpenBitSetDISI::mids$ = NULL;
        bool OpenBitSetDISI::live$ = false;

        jclass OpenBitSetDISI::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/OpenBitSetDISI");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_39c7bd3c] = env->getMethodID(cls, "<init>", "(I)V");
            mids$[mid_init$_3742065d] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/DocIdSetIterator;I)V");
            mids$[mid_inPlaceAnd_c2b5607d] = env->getMethodID(cls, "inPlaceAnd", "(Lorg/apache/lucene/search/DocIdSetIterator;)V");
            mids$[mid_inPlaceNot_c2b5607d] = env->getMethodID(cls, "inPlaceNot", "(Lorg/apache/lucene/search/DocIdSetIterator;)V");
            mids$[mid_inPlaceOr_c2b5607d] = env->getMethodID(cls, "inPlaceOr", "(Lorg/apache/lucene/search/DocIdSetIterator;)V");
            mids$[mid_inPlaceXor_c2b5607d] = env->getMethodID(cls, "inPlaceXor", "(Lorg/apache/lucene/search/DocIdSetIterator;)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        OpenBitSetDISI::OpenBitSetDISI(jint a0) : ::org::apache::lucene::util::OpenBitSet(env->newObject(initializeClass, &mids$, mid_init$_39c7bd3c, a0)) {}

        OpenBitSetDISI::OpenBitSetDISI(const ::org::apache::lucene::search::DocIdSetIterator & a0, jint a1) : ::org::apache::lucene::util::OpenBitSet(env->newObject(initializeClass, &mids$, mid_init$_3742065d, a0.this$, a1)) {}

        void OpenBitSetDISI::inPlaceAnd(const ::org::apache::lucene::search::DocIdSetIterator & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_inPlaceAnd_c2b5607d], a0.this$);
        }

        void OpenBitSetDISI::inPlaceNot(const ::org::apache::lucene::search::DocIdSetIterator & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_inPlaceNot_c2b5607d], a0.this$);
        }

        void OpenBitSetDISI::inPlaceOr(const ::org::apache::lucene::search::DocIdSetIterator & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_inPlaceOr_c2b5607d], a0.this$);
        }

        void OpenBitSetDISI::inPlaceXor(const ::org::apache::lucene::search::DocIdSetIterator & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_inPlaceXor_c2b5607d], a0.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_OpenBitSetDISI_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_OpenBitSetDISI_instance_(PyTypeObject *type, PyObject *arg);
        static int t_OpenBitSetDISI_init_(t_OpenBitSetDISI *self, PyObject *args, PyObject *kwds);
        static PyObject *t_OpenBitSetDISI_inPlaceAnd(t_OpenBitSetDISI *self, PyObject *arg);
        static PyObject *t_OpenBitSetDISI_inPlaceNot(t_OpenBitSetDISI *self, PyObject *arg);
        static PyObject *t_OpenBitSetDISI_inPlaceOr(t_OpenBitSetDISI *self, PyObject *arg);
        static PyObject *t_OpenBitSetDISI_inPlaceXor(t_OpenBitSetDISI *self, PyObject *arg);

        static PyMethodDef t_OpenBitSetDISI__methods_[] = {
          DECLARE_METHOD(t_OpenBitSetDISI, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_OpenBitSetDISI, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_OpenBitSetDISI, inPlaceAnd, METH_O),
          DECLARE_METHOD(t_OpenBitSetDISI, inPlaceNot, METH_O),
          DECLARE_METHOD(t_OpenBitSetDISI, inPlaceOr, METH_O),
          DECLARE_METHOD(t_OpenBitSetDISI, inPlaceXor, METH_O),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(OpenBitSetDISI, t_OpenBitSetDISI, ::org::apache::lucene::util::OpenBitSet, OpenBitSetDISI, t_OpenBitSetDISI_init_, 0, 0, 0, 0, 0);

        void t_OpenBitSetDISI::install(PyObject *module)
        {
          installType(&PY_TYPE(OpenBitSetDISI), module, "OpenBitSetDISI", 0);
        }

        void t_OpenBitSetDISI::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(OpenBitSetDISI).tp_dict, "class_", make_descriptor(OpenBitSetDISI::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(OpenBitSetDISI).tp_dict, "wrapfn_", make_descriptor(t_OpenBitSetDISI::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(OpenBitSetDISI).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_OpenBitSetDISI_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, OpenBitSetDISI::initializeClass, 1)))
            return NULL;
          return t_OpenBitSetDISI::wrap_Object(OpenBitSetDISI(((t_OpenBitSetDISI *) arg)->object.this$));
        }
        static PyObject *t_OpenBitSetDISI_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, OpenBitSetDISI::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_OpenBitSetDISI_init_(t_OpenBitSetDISI *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              jint a0;
              OpenBitSetDISI object((jobject) NULL);

              if (!parseArgs(args, "I", &a0))
              {
                INT_CALL(object = OpenBitSetDISI(a0));
                self->object = object;
                break;
              }
            }
            goto err;
           case 2:
            {
              ::org::apache::lucene::search::DocIdSetIterator a0((jobject) NULL);
              jint a1;
              OpenBitSetDISI object((jobject) NULL);

              if (!parseArgs(args, "kI", ::org::apache::lucene::search::DocIdSetIterator::initializeClass, &a0, &a1))
              {
                INT_CALL(object = OpenBitSetDISI(a0, a1));
                self->object = object;
                break;
              }
            }
           default:
           err:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_OpenBitSetDISI_inPlaceAnd(t_OpenBitSetDISI *self, PyObject *arg)
        {
          ::org::apache::lucene::search::DocIdSetIterator a0((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::search::DocIdSetIterator::initializeClass, &a0))
          {
            OBJ_CALL(self->object.inPlaceAnd(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "inPlaceAnd", arg);
          return NULL;
        }

        static PyObject *t_OpenBitSetDISI_inPlaceNot(t_OpenBitSetDISI *self, PyObject *arg)
        {
          ::org::apache::lucene::search::DocIdSetIterator a0((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::search::DocIdSetIterator::initializeClass, &a0))
          {
            OBJ_CALL(self->object.inPlaceNot(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "inPlaceNot", arg);
          return NULL;
        }

        static PyObject *t_OpenBitSetDISI_inPlaceOr(t_OpenBitSetDISI *self, PyObject *arg)
        {
          ::org::apache::lucene::search::DocIdSetIterator a0((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::search::DocIdSetIterator::initializeClass, &a0))
          {
            OBJ_CALL(self->object.inPlaceOr(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "inPlaceOr", arg);
          return NULL;
        }

        static PyObject *t_OpenBitSetDISI_inPlaceXor(t_OpenBitSetDISI *self, PyObject *arg)
        {
          ::org::apache::lucene::search::DocIdSetIterator a0((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::search::DocIdSetIterator::initializeClass, &a0))
          {
            OBJ_CALL(self->object.inPlaceXor(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "inPlaceXor", arg);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/spans/NearSpansUnordered.h"
#include "org/apache/lucene/util/Bits.h"
#include "java/util/Collection.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/index/TermContext.h"
#include "java/util/Map.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "org/apache/lucene/index/Term.h"
#include "java/lang/String.h"
#include "org/apache/lucene/search/spans/SpanNearQuery.h"
#include "java/io/IOException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace spans {

          ::java::lang::Class *NearSpansUnordered::class$ = NULL;
          jmethodID *NearSpansUnordered::mids$ = NULL;
          bool NearSpansUnordered::live$ = false;

          jclass NearSpansUnordered::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/spans/NearSpansUnordered");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_a9b434a2] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/spans/SpanNearQuery;Lorg/apache/lucene/index/AtomicReaderContext;Lorg/apache/lucene/util/Bits;Ljava/util/Map;)V");
              mids$[mid_cost_54c6a17a] = env->getMethodID(cls, "cost", "()J");
              mids$[mid_doc_54c6a179] = env->getMethodID(cls, "doc", "()I");
              mids$[mid_end_54c6a179] = env->getMethodID(cls, "end", "()I");
              mids$[mid_getPayload_2d2d7de4] = env->getMethodID(cls, "getPayload", "()Ljava/util/Collection;");
              mids$[mid_getSubSpans_dd49b8eb] = env->getMethodID(cls, "getSubSpans", "()[Lorg/apache/lucene/search/spans/Spans;");
              mids$[mid_isPayloadAvailable_54c6a16a] = env->getMethodID(cls, "isPayloadAvailable", "()Z");
              mids$[mid_next_54c6a16a] = env->getMethodID(cls, "next", "()Z");
              mids$[mid_skipTo_39c7bd30] = env->getMethodID(cls, "skipTo", "(I)Z");
              mids$[mid_start_54c6a179] = env->getMethodID(cls, "start", "()I");
              mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          NearSpansUnordered::NearSpansUnordered(const ::org::apache::lucene::search::spans::SpanNearQuery & a0, const ::org::apache::lucene::index::AtomicReaderContext & a1, const ::org::apache::lucene::util::Bits & a2, const ::java::util::Map & a3) : ::org::apache::lucene::search::spans::Spans(env->newObject(initializeClass, &mids$, mid_init$_a9b434a2, a0.this$, a1.this$, a2.this$, a3.this$)) {}

          jlong NearSpansUnordered::cost() const
          {
            return env->callLongMethod(this$, mids$[mid_cost_54c6a17a]);
          }

          jint NearSpansUnordered::doc() const
          {
            return env->callIntMethod(this$, mids$[mid_doc_54c6a179]);
          }

          jint NearSpansUnordered::end() const
          {
            return env->callIntMethod(this$, mids$[mid_end_54c6a179]);
          }

          ::java::util::Collection NearSpansUnordered::getPayload() const
          {
            return ::java::util::Collection(env->callObjectMethod(this$, mids$[mid_getPayload_2d2d7de4]));
          }

          JArray< ::org::apache::lucene::search::spans::Spans > NearSpansUnordered::getSubSpans() const
          {
            return JArray< ::org::apache::lucene::search::spans::Spans >(env->callObjectMethod(this$, mids$[mid_getSubSpans_dd49b8eb]));
          }

          jboolean NearSpansUnordered::isPayloadAvailable() const
          {
            return env->callBooleanMethod(this$, mids$[mid_isPayloadAvailable_54c6a16a]);
          }

          jboolean NearSpansUnordered::next() const
          {
            return env->callBooleanMethod(this$, mids$[mid_next_54c6a16a]);
          }

          jboolean NearSpansUnordered::skipTo(jint a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_skipTo_39c7bd30], a0);
          }

          jint NearSpansUnordered::start() const
          {
            return env->callIntMethod(this$, mids$[mid_start_54c6a179]);
          }

          ::java::lang::String NearSpansUnordered::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace spans {
          static PyObject *t_NearSpansUnordered_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_NearSpansUnordered_instance_(PyTypeObject *type, PyObject *arg);
          static int t_NearSpansUnordered_init_(t_NearSpansUnordered *self, PyObject *args, PyObject *kwds);
          static PyObject *t_NearSpansUnordered_cost(t_NearSpansUnordered *self, PyObject *args);
          static PyObject *t_NearSpansUnordered_doc(t_NearSpansUnordered *self, PyObject *args);
          static PyObject *t_NearSpansUnordered_end(t_NearSpansUnordered *self, PyObject *args);
          static PyObject *t_NearSpansUnordered_getPayload(t_NearSpansUnordered *self, PyObject *args);
          static PyObject *t_NearSpansUnordered_getSubSpans(t_NearSpansUnordered *self);
          static PyObject *t_NearSpansUnordered_isPayloadAvailable(t_NearSpansUnordered *self, PyObject *args);
          static PyObject *t_NearSpansUnordered_next(t_NearSpansUnordered *self, PyObject *args);
          static PyObject *t_NearSpansUnordered_skipTo(t_NearSpansUnordered *self, PyObject *args);
          static PyObject *t_NearSpansUnordered_start(t_NearSpansUnordered *self, PyObject *args);
          static PyObject *t_NearSpansUnordered_toString(t_NearSpansUnordered *self, PyObject *args);
          static PyObject *t_NearSpansUnordered_get__payload(t_NearSpansUnordered *self, void *data);
          static PyObject *t_NearSpansUnordered_get__payloadAvailable(t_NearSpansUnordered *self, void *data);
          static PyObject *t_NearSpansUnordered_get__subSpans(t_NearSpansUnordered *self, void *data);
          static PyGetSetDef t_NearSpansUnordered__fields_[] = {
            DECLARE_GET_FIELD(t_NearSpansUnordered, payload),
            DECLARE_GET_FIELD(t_NearSpansUnordered, payloadAvailable),
            DECLARE_GET_FIELD(t_NearSpansUnordered, subSpans),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_NearSpansUnordered__methods_[] = {
            DECLARE_METHOD(t_NearSpansUnordered, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_NearSpansUnordered, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_NearSpansUnordered, cost, METH_VARARGS),
            DECLARE_METHOD(t_NearSpansUnordered, doc, METH_VARARGS),
            DECLARE_METHOD(t_NearSpansUnordered, end, METH_VARARGS),
            DECLARE_METHOD(t_NearSpansUnordered, getPayload, METH_VARARGS),
            DECLARE_METHOD(t_NearSpansUnordered, getSubSpans, METH_NOARGS),
            DECLARE_METHOD(t_NearSpansUnordered, isPayloadAvailable, METH_VARARGS),
            DECLARE_METHOD(t_NearSpansUnordered, next, METH_VARARGS),
            DECLARE_METHOD(t_NearSpansUnordered, skipTo, METH_VARARGS),
            DECLARE_METHOD(t_NearSpansUnordered, start, METH_VARARGS),
            DECLARE_METHOD(t_NearSpansUnordered, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(NearSpansUnordered, t_NearSpansUnordered, ::org::apache::lucene::search::spans::Spans, NearSpansUnordered, t_NearSpansUnordered_init_, 0, 0, t_NearSpansUnordered__fields_, 0, 0);

          void t_NearSpansUnordered::install(PyObject *module)
          {
            installType(&PY_TYPE(NearSpansUnordered), module, "NearSpansUnordered", 0);
          }

          void t_NearSpansUnordered::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(NearSpansUnordered).tp_dict, "class_", make_descriptor(NearSpansUnordered::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(NearSpansUnordered).tp_dict, "wrapfn_", make_descriptor(t_NearSpansUnordered::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(NearSpansUnordered).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_NearSpansUnordered_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, NearSpansUnordered::initializeClass, 1)))
              return NULL;
            return t_NearSpansUnordered::wrap_Object(NearSpansUnordered(((t_NearSpansUnordered *) arg)->object.this$));
          }
          static PyObject *t_NearSpansUnordered_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, NearSpansUnordered::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_NearSpansUnordered_init_(t_NearSpansUnordered *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::search::spans::SpanNearQuery a0((jobject) NULL);
            ::org::apache::lucene::index::AtomicReaderContext a1((jobject) NULL);
            ::org::apache::lucene::util::Bits a2((jobject) NULL);
            ::java::util::Map a3((jobject) NULL);
            PyTypeObject **p3;
            NearSpansUnordered object((jobject) NULL);

            if (!parseArgs(args, "kkkK", ::org::apache::lucene::search::spans::SpanNearQuery::initializeClass, ::org::apache::lucene::index::AtomicReaderContext::initializeClass, ::org::apache::lucene::util::Bits::initializeClass, ::java::util::Map::initializeClass, &a0, &a1, &a2, &a3, &p3, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = NearSpansUnordered(a0, a1, a2, a3));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_NearSpansUnordered_cost(t_NearSpansUnordered *self, PyObject *args)
          {
            jlong result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.cost());
              return PyLong_FromLongLong((PY_LONG_LONG) result);
            }

            return callSuper(&PY_TYPE(NearSpansUnordered), (PyObject *) self, "cost", args, 2);
          }

          static PyObject *t_NearSpansUnordered_doc(t_NearSpansUnordered *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.doc());
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(NearSpansUnordered), (PyObject *) self, "doc", args, 2);
          }

          static PyObject *t_NearSpansUnordered_end(t_NearSpansUnordered *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.end());
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(NearSpansUnordered), (PyObject *) self, "end", args, 2);
          }

          static PyObject *t_NearSpansUnordered_getPayload(t_NearSpansUnordered *self, PyObject *args)
          {
            ::java::util::Collection result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.getPayload());
              return ::java::util::t_Collection::wrap_Object(result, &::java::lang::PY_TYPE(Object));
            }

            return callSuper(&PY_TYPE(NearSpansUnordered), (PyObject *) self, "getPayload", args, 2);
          }

          static PyObject *t_NearSpansUnordered_getSubSpans(t_NearSpansUnordered *self)
          {
            JArray< ::org::apache::lucene::search::spans::Spans > result((jobject) NULL);
            OBJ_CALL(result = self->object.getSubSpans());
            return JArray<jobject>(result.this$).wrap(::org::apache::lucene::search::spans::t_Spans::wrap_jobject);
          }

          static PyObject *t_NearSpansUnordered_isPayloadAvailable(t_NearSpansUnordered *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.isPayloadAvailable());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(NearSpansUnordered), (PyObject *) self, "isPayloadAvailable", args, 2);
          }

          static PyObject *t_NearSpansUnordered_next(t_NearSpansUnordered *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.next());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(NearSpansUnordered), (PyObject *) self, "next", args, 2);
          }

          static PyObject *t_NearSpansUnordered_skipTo(t_NearSpansUnordered *self, PyObject *args)
          {
            jint a0;
            jboolean result;

            if (!parseArgs(args, "I", &a0))
            {
              OBJ_CALL(result = self->object.skipTo(a0));
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(NearSpansUnordered), (PyObject *) self, "skipTo", args, 2);
          }

          static PyObject *t_NearSpansUnordered_start(t_NearSpansUnordered *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.start());
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(NearSpansUnordered), (PyObject *) self, "start", args, 2);
          }

          static PyObject *t_NearSpansUnordered_toString(t_NearSpansUnordered *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(&PY_TYPE(NearSpansUnordered), (PyObject *) self, "toString", args, 2);
          }

          static PyObject *t_NearSpansUnordered_get__payload(t_NearSpansUnordered *self, void *data)
          {
            ::java::util::Collection value((jobject) NULL);
            OBJ_CALL(value = self->object.getPayload());
            return ::java::util::t_Collection::wrap_Object(value);
          }

          static PyObject *t_NearSpansUnordered_get__payloadAvailable(t_NearSpansUnordered *self, void *data)
          {
            jboolean value;
            OBJ_CALL(value = self->object.isPayloadAvailable());
            Py_RETURN_BOOL(value);
          }

          static PyObject *t_NearSpansUnordered_get__subSpans(t_NearSpansUnordered *self, void *data)
          {
            JArray< ::org::apache::lucene::search::spans::Spans > value((jobject) NULL);
            OBJ_CALL(value = self->object.getSubSpans());
            return JArray<jobject>(value.this$).wrap(::org::apache::lucene::search::spans::t_Spans::wrap_jobject);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/OrQueryNode.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/queryparser/flexible/core/parser/EscapeQuerySyntax.h"
#include "java/lang/CharSequence.h"
#include "java/lang/String.h"
#include "java/util/List.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/QueryNode.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace nodes {

              ::java::lang::Class *OrQueryNode::class$ = NULL;
              jmethodID *OrQueryNode::mids$ = NULL;
              bool OrQueryNode::live$ = false;

              jclass OrQueryNode::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/core/nodes/OrQueryNode");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_1fde8fc3] = env->getMethodID(cls, "<init>", "(Ljava/util/List;)V");
                  mids$[mid_toQueryString_99b8dfe1] = env->getMethodID(cls, "toQueryString", "(Lorg/apache/lucene/queryparser/flexible/core/parser/EscapeQuerySyntax;)Ljava/lang/CharSequence;");
                  mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              OrQueryNode::OrQueryNode(const ::java::util::List & a0) : ::org::apache::lucene::queryparser::flexible::core::nodes::BooleanQueryNode(env->newObject(initializeClass, &mids$, mid_init$_1fde8fc3, a0.this$)) {}

              ::java::lang::CharSequence OrQueryNode::toQueryString(const ::org::apache::lucene::queryparser::flexible::core::parser::EscapeQuerySyntax & a0) const
              {
                return ::java::lang::CharSequence(env->callObjectMethod(this$, mids$[mid_toQueryString_99b8dfe1], a0.this$));
              }

              ::java::lang::String OrQueryNode::toString() const
              {
                return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace nodes {
              static PyObject *t_OrQueryNode_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_OrQueryNode_instance_(PyTypeObject *type, PyObject *arg);
              static int t_OrQueryNode_init_(t_OrQueryNode *self, PyObject *args, PyObject *kwds);
              static PyObject *t_OrQueryNode_toQueryString(t_OrQueryNode *self, PyObject *args);
              static PyObject *t_OrQueryNode_toString(t_OrQueryNode *self, PyObject *args);

              static PyMethodDef t_OrQueryNode__methods_[] = {
                DECLARE_METHOD(t_OrQueryNode, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_OrQueryNode, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_OrQueryNode, toQueryString, METH_VARARGS),
                DECLARE_METHOD(t_OrQueryNode, toString, METH_VARARGS),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(OrQueryNode, t_OrQueryNode, ::org::apache::lucene::queryparser::flexible::core::nodes::BooleanQueryNode, OrQueryNode, t_OrQueryNode_init_, 0, 0, 0, 0, 0);

              void t_OrQueryNode::install(PyObject *module)
              {
                installType(&PY_TYPE(OrQueryNode), module, "OrQueryNode", 0);
              }

              void t_OrQueryNode::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(OrQueryNode).tp_dict, "class_", make_descriptor(OrQueryNode::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(OrQueryNode).tp_dict, "wrapfn_", make_descriptor(t_OrQueryNode::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(OrQueryNode).tp_dict, "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_OrQueryNode_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, OrQueryNode::initializeClass, 1)))
                  return NULL;
                return t_OrQueryNode::wrap_Object(OrQueryNode(((t_OrQueryNode *) arg)->object.this$));
              }
              static PyObject *t_OrQueryNode_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, OrQueryNode::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_OrQueryNode_init_(t_OrQueryNode *self, PyObject *args, PyObject *kwds)
              {
                ::java::util::List a0((jobject) NULL);
                PyTypeObject **p0;
                OrQueryNode object((jobject) NULL);

                if (!parseArgs(args, "K", ::java::util::List::initializeClass, &a0, &p0, ::java::util::t_List::parameters_))
                {
                  INT_CALL(object = OrQueryNode(a0));
                  self->object = object;
                }
                else
                {
                  PyErr_SetArgsError((PyObject *) self, "__init__", args);
                  return -1;
                }

                return 0;
              }

              static PyObject *t_OrQueryNode_toQueryString(t_OrQueryNode *self, PyObject *args)
              {
                ::org::apache::lucene::queryparser::flexible::core::parser::EscapeQuerySyntax a0((jobject) NULL);
                ::java::lang::CharSequence result((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::queryparser::flexible::core::parser::EscapeQuerySyntax::initializeClass, &a0))
                {
                  OBJ_CALL(result = self->object.toQueryString(a0));
                  return ::java::lang::t_CharSequence::wrap_Object(result);
                }

                return callSuper(&PY_TYPE(OrQueryNode), (PyObject *) self, "toQueryString", args, 2);
              }

              static PyObject *t_OrQueryNode_toString(t_OrQueryNode *self, PyObject *args)
              {
                ::java::lang::String result((jobject) NULL);

                if (!parseArgs(args, ""))
                {
                  OBJ_CALL(result = self->object.toString());
                  return j2p(result);
                }

                return callSuper(&PY_TYPE(OrQueryNode), (PyObject *) self, "toString", args, 2);
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/facet/taxonomy/writercache/CollisionMap.h"
#include "org/apache/lucene/facet/taxonomy/FacetLabel.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace taxonomy {
          namespace writercache {

            ::java::lang::Class *CollisionMap::class$ = NULL;
            jmethodID *CollisionMap::mids$ = NULL;
            bool CollisionMap::live$ = false;

            jclass CollisionMap::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/facet/taxonomy/writercache/CollisionMap");

                mids$ = new jmethodID[max_mid];
                mids$[mid_addLabel_71708aa9] = env->getMethodID(cls, "addLabel", "(Lorg/apache/lucene/facet/taxonomy/FacetLabel;II)I");
                mids$[mid_addLabelOffset_d3236aa4] = env->getMethodID(cls, "addLabelOffset", "(III)V");
                mids$[mid_capacity_54c6a179] = env->getMethodID(cls, "capacity", "()I");
                mids$[mid_get_7ba580b7] = env->getMethodID(cls, "get", "(Lorg/apache/lucene/facet/taxonomy/FacetLabel;I)I");
                mids$[mid_size_54c6a179] = env->getMethodID(cls, "size", "()I");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            jint CollisionMap::addLabel(const ::org::apache::lucene::facet::taxonomy::FacetLabel & a0, jint a1, jint a2) const
            {
              return env->callIntMethod(this$, mids$[mid_addLabel_71708aa9], a0.this$, a1, a2);
            }

            void CollisionMap::addLabelOffset(jint a0, jint a1, jint a2) const
            {
              env->callVoidMethod(this$, mids$[mid_addLabelOffset_d3236aa4], a0, a1, a2);
            }

            jint CollisionMap::capacity() const
            {
              return env->callIntMethod(this$, mids$[mid_capacity_54c6a179]);
            }

            jint CollisionMap::get(const ::org::apache::lucene::facet::taxonomy::FacetLabel & a0, jint a1) const
            {
              return env->callIntMethod(this$, mids$[mid_get_7ba580b7], a0.this$, a1);
            }

            jint CollisionMap::size() const
            {
              return env->callIntMethod(this$, mids$[mid_size_54c6a179]);
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace taxonomy {
          namespace writercache {
            static PyObject *t_CollisionMap_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_CollisionMap_instance_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_CollisionMap_addLabel(t_CollisionMap *self, PyObject *args);
            static PyObject *t_CollisionMap_addLabelOffset(t_CollisionMap *self, PyObject *args);
            static PyObject *t_CollisionMap_capacity(t_CollisionMap *self);
            static PyObject *t_CollisionMap_get(t_CollisionMap *self, PyObject *args);
            static PyObject *t_CollisionMap_size(t_CollisionMap *self);

            static PyMethodDef t_CollisionMap__methods_[] = {
              DECLARE_METHOD(t_CollisionMap, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_CollisionMap, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_CollisionMap, addLabel, METH_VARARGS),
              DECLARE_METHOD(t_CollisionMap, addLabelOffset, METH_VARARGS),
              DECLARE_METHOD(t_CollisionMap, capacity, METH_NOARGS),
              DECLARE_METHOD(t_CollisionMap, get, METH_VARARGS),
              DECLARE_METHOD(t_CollisionMap, size, METH_NOARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(CollisionMap, t_CollisionMap, ::java::lang::Object, CollisionMap, abstract_init, 0, 0, 0, 0, 0);

            void t_CollisionMap::install(PyObject *module)
            {
              installType(&PY_TYPE(CollisionMap), module, "CollisionMap", 0);
            }

            void t_CollisionMap::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(CollisionMap).tp_dict, "class_", make_descriptor(CollisionMap::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(CollisionMap).tp_dict, "wrapfn_", make_descriptor(t_CollisionMap::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(CollisionMap).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_CollisionMap_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, CollisionMap::initializeClass, 1)))
                return NULL;
              return t_CollisionMap::wrap_Object(CollisionMap(((t_CollisionMap *) arg)->object.this$));
            }
            static PyObject *t_CollisionMap_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, CollisionMap::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static PyObject *t_CollisionMap_addLabel(t_CollisionMap *self, PyObject *args)
            {
              ::org::apache::lucene::facet::taxonomy::FacetLabel a0((jobject) NULL);
              jint a1;
              jint a2;
              jint result;

              if (!parseArgs(args, "kII", ::org::apache::lucene::facet::taxonomy::FacetLabel::initializeClass, &a0, &a1, &a2))
              {
                OBJ_CALL(result = self->object.addLabel(a0, a1, a2));
                return PyInt_FromLong((long) result);
              }

              PyErr_SetArgsError((PyObject *) self, "addLabel", args);
              return NULL;
            }

            static PyObject *t_CollisionMap_addLabelOffset(t_CollisionMap *self, PyObject *args)
            {
              jint a0;
              jint a1;
              jint a2;

              if (!parseArgs(args, "III", &a0, &a1, &a2))
              {
                OBJ_CALL(self->object.addLabelOffset(a0, a1, a2));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "addLabelOffset", args);
              return NULL;
            }

            static PyObject *t_CollisionMap_capacity(t_CollisionMap *self)
            {
              jint result;
              OBJ_CALL(result = self->object.capacity());
              return PyInt_FromLong((long) result);
            }

            static PyObject *t_CollisionMap_get(t_CollisionMap *self, PyObject *args)
            {
              ::org::apache::lucene::facet::taxonomy::FacetLabel a0((jobject) NULL);
              jint a1;
              jint result;

              if (!parseArgs(args, "kI", ::org::apache::lucene::facet::taxonomy::FacetLabel::initializeClass, &a0, &a1))
              {
                OBJ_CALL(result = self->object.get(a0, a1));
                return PyInt_FromLong((long) result);
              }

              PyErr_SetArgsError((PyObject *) self, "get", args);
              return NULL;
            }

            static PyObject *t_CollisionMap_size(t_CollisionMap *self)
            {
              jint result;
              OBJ_CALL(result = self->object.size());
              return PyInt_FromLong((long) result);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/grouping/AbstractAllGroupHeadsCollector.h"
#include "org/apache/lucene/util/FixedBitSet.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace grouping {

          ::java::lang::Class *AbstractAllGroupHeadsCollector::class$ = NULL;
          jmethodID *AbstractAllGroupHeadsCollector::mids$ = NULL;
          bool AbstractAllGroupHeadsCollector::live$ = false;

          jclass AbstractAllGroupHeadsCollector::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/grouping/AbstractAllGroupHeadsCollector");

              mids$ = new jmethodID[max_mid];
              mids$[mid_acceptsDocsOutOfOrder_54c6a16a] = env->getMethodID(cls, "acceptsDocsOutOfOrder", "()Z");
              mids$[mid_collect_39c7bd3c] = env->getMethodID(cls, "collect", "(I)V");
              mids$[mid_groupHeadsSize_54c6a179] = env->getMethodID(cls, "groupHeadsSize", "()I");
              mids$[mid_retrieveGroupHeads_dab10e75] = env->getMethodID(cls, "retrieveGroupHeads", "()[I");
              mids$[mid_retrieveGroupHeads_e64a66db] = env->getMethodID(cls, "retrieveGroupHeads", "(I)Lorg/apache/lucene/util/FixedBitSet;");
              mids$[mid_retrieveGroupHeadAndAddIfNotExist_39c7bd3c] = env->getMethodID(cls, "retrieveGroupHeadAndAddIfNotExist", "(I)V");
              mids$[mid_getCollectedGroupHeads_2d2d7de4] = env->getMethodID(cls, "getCollectedGroupHeads", "()Ljava/util/Collection;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          jboolean AbstractAllGroupHeadsCollector::acceptsDocsOutOfOrder() const
          {
            return env->callBooleanMethod(this$, mids$[mid_acceptsDocsOutOfOrder_54c6a16a]);
          }

          void AbstractAllGroupHeadsCollector::collect(jint a0) const
          {
            env->callVoidMethod(this$, mids$[mid_collect_39c7bd3c], a0);
          }

          jint AbstractAllGroupHeadsCollector::groupHeadsSize() const
          {
            return env->callIntMethod(this$, mids$[mid_groupHeadsSize_54c6a179]);
          }

          JArray< jint > AbstractAllGroupHeadsCollector::retrieveGroupHeads() const
          {
            return JArray< jint >(env->callObjectMethod(this$, mids$[mid_retrieveGroupHeads_dab10e75]));
          }

          ::org::apache::lucene::util::FixedBitSet AbstractAllGroupHeadsCollector::retrieveGroupHeads(jint a0) const
          {
            return ::org::apache::lucene::util::FixedBitSet(env->callObjectMethod(this$, mids$[mid_retrieveGroupHeads_e64a66db], a0));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"
#include "org/apache/lucene/search/grouping/AbstractAllGroupHeadsCollector$GroupHead.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace grouping {
          static PyObject *t_AbstractAllGroupHeadsCollector_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_AbstractAllGroupHeadsCollector_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_AbstractAllGroupHeadsCollector_of_(t_AbstractAllGroupHeadsCollector *self, PyObject *args);
          static PyObject *t_AbstractAllGroupHeadsCollector_acceptsDocsOutOfOrder(t_AbstractAllGroupHeadsCollector *self, PyObject *args);
          static PyObject *t_AbstractAllGroupHeadsCollector_collect(t_AbstractAllGroupHeadsCollector *self, PyObject *args);
          static PyObject *t_AbstractAllGroupHeadsCollector_groupHeadsSize(t_AbstractAllGroupHeadsCollector *self);
          static PyObject *t_AbstractAllGroupHeadsCollector_retrieveGroupHeads(t_AbstractAllGroupHeadsCollector *self, PyObject *args);
          static PyObject *t_AbstractAllGroupHeadsCollector_get__parameters_(t_AbstractAllGroupHeadsCollector *self, void *data);
          static PyGetSetDef t_AbstractAllGroupHeadsCollector__fields_[] = {
            DECLARE_GET_FIELD(t_AbstractAllGroupHeadsCollector, parameters_),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_AbstractAllGroupHeadsCollector__methods_[] = {
            DECLARE_METHOD(t_AbstractAllGroupHeadsCollector, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_AbstractAllGroupHeadsCollector, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_AbstractAllGroupHeadsCollector, of_, METH_VARARGS),
            DECLARE_METHOD(t_AbstractAllGroupHeadsCollector, acceptsDocsOutOfOrder, METH_VARARGS),
            DECLARE_METHOD(t_AbstractAllGroupHeadsCollector, collect, METH_VARARGS),
            DECLARE_METHOD(t_AbstractAllGroupHeadsCollector, groupHeadsSize, METH_NOARGS),
            DECLARE_METHOD(t_AbstractAllGroupHeadsCollector, retrieveGroupHeads, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(AbstractAllGroupHeadsCollector, t_AbstractAllGroupHeadsCollector, ::org::apache::lucene::search::Collector, AbstractAllGroupHeadsCollector, abstract_init, 0, 0, t_AbstractAllGroupHeadsCollector__fields_, 0, 0);
          PyObject *t_AbstractAllGroupHeadsCollector::wrap_Object(const AbstractAllGroupHeadsCollector& object, PyTypeObject *p0)
          {
            PyObject *obj = t_AbstractAllGroupHeadsCollector::wrap_Object(object);
            if (obj != NULL && obj != Py_None)
            {
              t_AbstractAllGroupHeadsCollector *self = (t_AbstractAllGroupHeadsCollector *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          PyObject *t_AbstractAllGroupHeadsCollector::wrap_jobject(const jobject& object, PyTypeObject *p0)
          {
            PyObject *obj = t_AbstractAllGroupHeadsCollector::wrap_jobject(object);
            if (obj != NULL && obj != Py_None)
            {
              t_AbstractAllGroupHeadsCollector *self = (t_AbstractAllGroupHeadsCollector *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          void t_AbstractAllGroupHeadsCollector::install(PyObject *module)
          {
            installType(&PY_TYPE(AbstractAllGroupHeadsCollector), module, "AbstractAllGroupHeadsCollector", 0);
            PyDict_SetItemString(PY_TYPE(AbstractAllGroupHeadsCollector).tp_dict, "GroupHead", make_descriptor(&PY_TYPE(AbstractAllGroupHeadsCollector$GroupHead)));
          }

          void t_AbstractAllGroupHeadsCollector::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(AbstractAllGroupHeadsCollector).tp_dict, "class_", make_descriptor(AbstractAllGroupHeadsCollector::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(AbstractAllGroupHeadsCollector).tp_dict, "wrapfn_", make_descriptor(t_AbstractAllGroupHeadsCollector::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(AbstractAllGroupHeadsCollector).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_AbstractAllGroupHeadsCollector_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, AbstractAllGroupHeadsCollector::initializeClass, 1)))
              return NULL;
            return t_AbstractAllGroupHeadsCollector::wrap_Object(AbstractAllGroupHeadsCollector(((t_AbstractAllGroupHeadsCollector *) arg)->object.this$));
          }
          static PyObject *t_AbstractAllGroupHeadsCollector_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, AbstractAllGroupHeadsCollector::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_AbstractAllGroupHeadsCollector_of_(t_AbstractAllGroupHeadsCollector *self, PyObject *args)
          {
            if (!parseArg(args, "T", 1, &(self->parameters)))
              Py_RETURN_SELF;
            return PyErr_SetArgsError((PyObject *) self, "of_", args);
          }

          static PyObject *t_AbstractAllGroupHeadsCollector_acceptsDocsOutOfOrder(t_AbstractAllGroupHeadsCollector *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.acceptsDocsOutOfOrder());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(AbstractAllGroupHeadsCollector), (PyObject *) self, "acceptsDocsOutOfOrder", args, 2);
          }

          static PyObject *t_AbstractAllGroupHeadsCollector_collect(t_AbstractAllGroupHeadsCollector *self, PyObject *args)
          {
            jint a0;

            if (!parseArgs(args, "I", &a0))
            {
              OBJ_CALL(self->object.collect(a0));
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(AbstractAllGroupHeadsCollector), (PyObject *) self, "collect", args, 2);
          }

          static PyObject *t_AbstractAllGroupHeadsCollector_groupHeadsSize(t_AbstractAllGroupHeadsCollector *self)
          {
            jint result;
            OBJ_CALL(result = self->object.groupHeadsSize());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_AbstractAllGroupHeadsCollector_retrieveGroupHeads(t_AbstractAllGroupHeadsCollector *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 0:
              {
                JArray< jint > result((jobject) NULL);
                OBJ_CALL(result = self->object.retrieveGroupHeads());
                return result.wrap();
              }
              break;
             case 1:
              {
                jint a0;
                ::org::apache::lucene::util::FixedBitSet result((jobject) NULL);

                if (!parseArgs(args, "I", &a0))
                {
                  OBJ_CALL(result = self->object.retrieveGroupHeads(a0));
                  return ::org::apache::lucene::util::t_FixedBitSet::wrap_Object(result);
                }
              }
            }

            PyErr_SetArgsError((PyObject *) self, "retrieveGroupHeads", args);
            return NULL;
          }
          static PyObject *t_AbstractAllGroupHeadsCollector_get__parameters_(t_AbstractAllGroupHeadsCollector *self, void *data)
          {
            return typeParameters(self->parameters, sizeof(self->parameters));
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/sandbox/queries/DuplicateFilter.h"
#include "org/apache/lucene/util/Bits.h"
#include "org/apache/lucene/sandbox/queries/DuplicateFilter$KeepMode.h"
#include "java/lang/Object.h"
#include "org/apache/lucene/sandbox/queries/DuplicateFilter$ProcessingMode.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/search/DocIdSet.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace sandbox {
        namespace queries {

          ::java::lang::Class *DuplicateFilter::class$ = NULL;
          jmethodID *DuplicateFilter::mids$ = NULL;
          bool DuplicateFilter::live$ = false;

          jclass DuplicateFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/sandbox/queries/DuplicateFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_5fdc3f48] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;)V");
              mids$[mid_init$_0a23a3cc] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Lorg/apache/lucene/sandbox/queries/DuplicateFilter$KeepMode;Lorg/apache/lucene/sandbox/queries/DuplicateFilter$ProcessingMode;)V");
              mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
              mids$[mid_getDocIdSet_ccce0897] = env->getMethodID(cls, "getDocIdSet", "(Lorg/apache/lucene/index/AtomicReaderContext;Lorg/apache/lucene/util/Bits;)Lorg/apache/lucene/search/DocIdSet;");
              mids$[mid_getFieldName_14c7b5c5] = env->getMethodID(cls, "getFieldName", "()Ljava/lang/String;");
              mids$[mid_getKeepMode_c01b4463] = env->getMethodID(cls, "getKeepMode", "()Lorg/apache/lucene/sandbox/queries/DuplicateFilter$KeepMode;");
              mids$[mid_getProcessingMode_815046ab] = env->getMethodID(cls, "getProcessingMode", "()Lorg/apache/lucene/sandbox/queries/DuplicateFilter$ProcessingMode;");
              mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
              mids$[mid_setFieldName_5fdc3f48] = env->getMethodID(cls, "setFieldName", "(Ljava/lang/String;)V");
              mids$[mid_setKeepMode_9304b146] = env->getMethodID(cls, "setKeepMode", "(Lorg/apache/lucene/sandbox/queries/DuplicateFilter$KeepMode;)V");
              mids$[mid_setProcessingMode_a2322426] = env->getMethodID(cls, "setProcessingMode", "(Lorg/apache/lucene/sandbox/queries/DuplicateFilter$ProcessingMode;)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          DuplicateFilter::DuplicateFilter(const ::java::lang::String & a0) : ::org::apache::lucene::search::Filter(env->newObject(initializeClass, &mids$, mid_init$_5fdc3f48, a0.this$)) {}

          DuplicateFilter::DuplicateFilter(const ::java::lang::String & a0, const ::org::apache::lucene::sandbox::queries::DuplicateFilter$KeepMode & a1, const ::org::apache::lucene::sandbox::queries::DuplicateFilter$ProcessingMode & a2) : ::org::apache::lucene::search::Filter(env->newObject(initializeClass, &mids$, mid_init$_0a23a3cc, a0.this$, a1.this$, a2.this$)) {}

          jboolean DuplicateFilter::equals(const ::java::lang::Object & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
          }

          ::org::apache::lucene::search::DocIdSet DuplicateFilter::getDocIdSet(const ::org::apache::lucene::index::AtomicReaderContext & a0, const ::org::apache::lucene::util::Bits & a1) const
          {
            return ::org::apache::lucene::search::DocIdSet(env->callObjectMethod(this$, mids$[mid_getDocIdSet_ccce0897], a0.this$, a1.this$));
          }

          ::java::lang::String DuplicateFilter::getFieldName() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getFieldName_14c7b5c5]));
          }

          ::org::apache::lucene::sandbox::queries::DuplicateFilter$KeepMode DuplicateFilter::getKeepMode() const
          {
            return ::org::apache::lucene::sandbox::queries::DuplicateFilter$KeepMode(env->callObjectMethod(this$, mids$[mid_getKeepMode_c01b4463]));
          }

          ::org::apache::lucene::sandbox::queries::DuplicateFilter$ProcessingMode DuplicateFilter::getProcessingMode() const
          {
            return ::org::apache::lucene::sandbox::queries::DuplicateFilter$ProcessingMode(env->callObjectMethod(this$, mids$[mid_getProcessingMode_815046ab]));
          }

          jint DuplicateFilter::hashCode() const
          {
            return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
          }

          void DuplicateFilter::setFieldName(const ::java::lang::String & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setFieldName_5fdc3f48], a0.this$);
          }

          void DuplicateFilter::setKeepMode(const ::org::apache::lucene::sandbox::queries::DuplicateFilter$KeepMode & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setKeepMode_9304b146], a0.this$);
          }

          void DuplicateFilter::setProcessingMode(const ::org::apache::lucene::sandbox::queries::DuplicateFilter$ProcessingMode & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setProcessingMode_a2322426], a0.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace sandbox {
        namespace queries {
          static PyObject *t_DuplicateFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_DuplicateFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_DuplicateFilter_init_(t_DuplicateFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_DuplicateFilter_equals(t_DuplicateFilter *self, PyObject *args);
          static PyObject *t_DuplicateFilter_getDocIdSet(t_DuplicateFilter *self, PyObject *args);
          static PyObject *t_DuplicateFilter_getFieldName(t_DuplicateFilter *self);
          static PyObject *t_DuplicateFilter_getKeepMode(t_DuplicateFilter *self);
          static PyObject *t_DuplicateFilter_getProcessingMode(t_DuplicateFilter *self);
          static PyObject *t_DuplicateFilter_hashCode(t_DuplicateFilter *self, PyObject *args);
          static PyObject *t_DuplicateFilter_setFieldName(t_DuplicateFilter *self, PyObject *arg);
          static PyObject *t_DuplicateFilter_setKeepMode(t_DuplicateFilter *self, PyObject *arg);
          static PyObject *t_DuplicateFilter_setProcessingMode(t_DuplicateFilter *self, PyObject *arg);
          static PyObject *t_DuplicateFilter_get__fieldName(t_DuplicateFilter *self, void *data);
          static int t_DuplicateFilter_set__fieldName(t_DuplicateFilter *self, PyObject *arg, void *data);
          static PyObject *t_DuplicateFilter_get__keepMode(t_DuplicateFilter *self, void *data);
          static int t_DuplicateFilter_set__keepMode(t_DuplicateFilter *self, PyObject *arg, void *data);
          static PyObject *t_DuplicateFilter_get__processingMode(t_DuplicateFilter *self, void *data);
          static int t_DuplicateFilter_set__processingMode(t_DuplicateFilter *self, PyObject *arg, void *data);
          static PyGetSetDef t_DuplicateFilter__fields_[] = {
            DECLARE_GETSET_FIELD(t_DuplicateFilter, fieldName),
            DECLARE_GETSET_FIELD(t_DuplicateFilter, keepMode),
            DECLARE_GETSET_FIELD(t_DuplicateFilter, processingMode),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_DuplicateFilter__methods_[] = {
            DECLARE_METHOD(t_DuplicateFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_DuplicateFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_DuplicateFilter, equals, METH_VARARGS),
            DECLARE_METHOD(t_DuplicateFilter, getDocIdSet, METH_VARARGS),
            DECLARE_METHOD(t_DuplicateFilter, getFieldName, METH_NOARGS),
            DECLARE_METHOD(t_DuplicateFilter, getKeepMode, METH_NOARGS),
            DECLARE_METHOD(t_DuplicateFilter, getProcessingMode, METH_NOARGS),
            DECLARE_METHOD(t_DuplicateFilter, hashCode, METH_VARARGS),
            DECLARE_METHOD(t_DuplicateFilter, setFieldName, METH_O),
            DECLARE_METHOD(t_DuplicateFilter, setKeepMode, METH_O),
            DECLARE_METHOD(t_DuplicateFilter, setProcessingMode, METH_O),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(DuplicateFilter, t_DuplicateFilter, ::org::apache::lucene::search::Filter, DuplicateFilter, t_DuplicateFilter_init_, 0, 0, t_DuplicateFilter__fields_, 0, 0);

          void t_DuplicateFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(DuplicateFilter), module, "DuplicateFilter", 0);
            PyDict_SetItemString(PY_TYPE(DuplicateFilter).tp_dict, "ProcessingMode", make_descriptor(&PY_TYPE(DuplicateFilter$ProcessingMode)));
            PyDict_SetItemString(PY_TYPE(DuplicateFilter).tp_dict, "KeepMode", make_descriptor(&PY_TYPE(DuplicateFilter$KeepMode)));
          }

          void t_DuplicateFilter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(DuplicateFilter).tp_dict, "class_", make_descriptor(DuplicateFilter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(DuplicateFilter).tp_dict, "wrapfn_", make_descriptor(t_DuplicateFilter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(DuplicateFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_DuplicateFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, DuplicateFilter::initializeClass, 1)))
              return NULL;
            return t_DuplicateFilter::wrap_Object(DuplicateFilter(((t_DuplicateFilter *) arg)->object.this$));
          }
          static PyObject *t_DuplicateFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, DuplicateFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_DuplicateFilter_init_(t_DuplicateFilter *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::java::lang::String a0((jobject) NULL);
                DuplicateFilter object((jobject) NULL);

                if (!parseArgs(args, "s", &a0))
                {
                  INT_CALL(object = DuplicateFilter(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 3:
              {
                ::java::lang::String a0((jobject) NULL);
                ::org::apache::lucene::sandbox::queries::DuplicateFilter$KeepMode a1((jobject) NULL);
                PyTypeObject **p1;
                ::org::apache::lucene::sandbox::queries::DuplicateFilter$ProcessingMode a2((jobject) NULL);
                PyTypeObject **p2;
                DuplicateFilter object((jobject) NULL);

                if (!parseArgs(args, "sKK", ::org::apache::lucene::sandbox::queries::DuplicateFilter$KeepMode::initializeClass, ::org::apache::lucene::sandbox::queries::DuplicateFilter$ProcessingMode::initializeClass, &a0, &a1, &p1, ::org::apache::lucene::sandbox::queries::t_DuplicateFilter$KeepMode::parameters_, &a2, &p2, ::org::apache::lucene::sandbox::queries::t_DuplicateFilter$ProcessingMode::parameters_))
                {
                  INT_CALL(object = DuplicateFilter(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_DuplicateFilter_equals(t_DuplicateFilter *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            jboolean result;

            if (!parseArgs(args, "o", &a0))
            {
              OBJ_CALL(result = self->object.equals(a0));
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(DuplicateFilter), (PyObject *) self, "equals", args, 2);
          }

          static PyObject *t_DuplicateFilter_getDocIdSet(t_DuplicateFilter *self, PyObject *args)
          {
            ::org::apache::lucene::index::AtomicReaderContext a0((jobject) NULL);
            ::org::apache::lucene::util::Bits a1((jobject) NULL);
            ::org::apache::lucene::search::DocIdSet result((jobject) NULL);

            if (!parseArgs(args, "kk", ::org::apache::lucene::index::AtomicReaderContext::initializeClass, ::org::apache::lucene::util::Bits::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.getDocIdSet(a0, a1));
              return ::org::apache::lucene::search::t_DocIdSet::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(DuplicateFilter), (PyObject *) self, "getDocIdSet", args, 2);
          }

          static PyObject *t_DuplicateFilter_getFieldName(t_DuplicateFilter *self)
          {
            ::java::lang::String result((jobject) NULL);
            OBJ_CALL(result = self->object.getFieldName());
            return j2p(result);
          }

          static PyObject *t_DuplicateFilter_getKeepMode(t_DuplicateFilter *self)
          {
            ::org::apache::lucene::sandbox::queries::DuplicateFilter$KeepMode result((jobject) NULL);
            OBJ_CALL(result = self->object.getKeepMode());
            return ::org::apache::lucene::sandbox::queries::t_DuplicateFilter$KeepMode::wrap_Object(result);
          }

          static PyObject *t_DuplicateFilter_getProcessingMode(t_DuplicateFilter *self)
          {
            ::org::apache::lucene::sandbox::queries::DuplicateFilter$ProcessingMode result((jobject) NULL);
            OBJ_CALL(result = self->object.getProcessingMode());
            return ::org::apache::lucene::sandbox::queries::t_DuplicateFilter$ProcessingMode::wrap_Object(result);
          }

          static PyObject *t_DuplicateFilter_hashCode(t_DuplicateFilter *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.hashCode());
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(DuplicateFilter), (PyObject *) self, "hashCode", args, 2);
          }

          static PyObject *t_DuplicateFilter_setFieldName(t_DuplicateFilter *self, PyObject *arg)
          {
            ::java::lang::String a0((jobject) NULL);

            if (!parseArg(arg, "s", &a0))
            {
              OBJ_CALL(self->object.setFieldName(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setFieldName", arg);
            return NULL;
          }

          static PyObject *t_DuplicateFilter_setKeepMode(t_DuplicateFilter *self, PyObject *arg)
          {
            ::org::apache::lucene::sandbox::queries::DuplicateFilter$KeepMode a0((jobject) NULL);
            PyTypeObject **p0;

            if (!parseArg(arg, "K", ::org::apache::lucene::sandbox::queries::DuplicateFilter$KeepMode::initializeClass, &a0, &p0, ::org::apache::lucene::sandbox::queries::t_DuplicateFilter$KeepMode::parameters_))
            {
              OBJ_CALL(self->object.setKeepMode(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setKeepMode", arg);
            return NULL;
          }

          static PyObject *t_DuplicateFilter_setProcessingMode(t_DuplicateFilter *self, PyObject *arg)
          {
            ::org::apache::lucene::sandbox::queries::DuplicateFilter$ProcessingMode a0((jobject) NULL);
            PyTypeObject **p0;

            if (!parseArg(arg, "K", ::org::apache::lucene::sandbox::queries::DuplicateFilter$ProcessingMode::initializeClass, &a0, &p0, ::org::apache::lucene::sandbox::queries::t_DuplicateFilter$ProcessingMode::parameters_))
            {
              OBJ_CALL(self->object.setProcessingMode(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setProcessingMode", arg);
            return NULL;
          }

          static PyObject *t_DuplicateFilter_get__fieldName(t_DuplicateFilter *self, void *data)
          {
            ::java::lang::String value((jobject) NULL);
            OBJ_CALL(value = self->object.getFieldName());
            return j2p(value);
          }
          static int t_DuplicateFilter_set__fieldName(t_DuplicateFilter *self, PyObject *arg, void *data)
          {
            {
              ::java::lang::String value((jobject) NULL);
              if (!parseArg(arg, "s", &value))
              {
                INT_CALL(self->object.setFieldName(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "fieldName", arg);
            return -1;
          }

          static PyObject *t_DuplicateFilter_get__keepMode(t_DuplicateFilter *self, void *data)
          {
            ::org::apache::lucene::sandbox::queries::DuplicateFilter$KeepMode value((jobject) NULL);
            OBJ_CALL(value = self->object.getKeepMode());
            return ::org::apache::lucene::sandbox::queries::t_DuplicateFilter$KeepMode::wrap_Object(value);
          }
          static int t_DuplicateFilter_set__keepMode(t_DuplicateFilter *self, PyObject *arg, void *data)
          {
            {
              ::org::apache::lucene::sandbox::queries::DuplicateFilter$KeepMode value((jobject) NULL);
              if (!parseArg(arg, "k", ::org::apache::lucene::sandbox::queries::DuplicateFilter$KeepMode::initializeClass, &value))
              {
                INT_CALL(self->object.setKeepMode(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "keepMode", arg);
            return -1;
          }

          static PyObject *t_DuplicateFilter_get__processingMode(t_DuplicateFilter *self, void *data)
          {
            ::org::apache::lucene::sandbox::queries::DuplicateFilter$ProcessingMode value((jobject) NULL);
            OBJ_CALL(value = self->object.getProcessingMode());
            return ::org::apache::lucene::sandbox::queries::t_DuplicateFilter$ProcessingMode::wrap_Object(value);
          }
          static int t_DuplicateFilter_set__processingMode(t_DuplicateFilter *self, PyObject *arg, void *data)
          {
            {
              ::org::apache::lucene::sandbox::queries::DuplicateFilter$ProcessingMode value((jobject) NULL);
              if (!parseArg(arg, "k", ::org::apache::lucene::sandbox::queries::DuplicateFilter$ProcessingMode::initializeClass, &value))
              {
                INT_CALL(self->object.setProcessingMode(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "processingMode", arg);
            return -1;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/suggest/UnsortedInputIterator.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "org/apache/lucene/search/suggest/InputIterator.h"
#include "java/util/Set.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace suggest {

          ::java::lang::Class *UnsortedInputIterator::class$ = NULL;
          jmethodID *UnsortedInputIterator::mids$ = NULL;
          bool UnsortedInputIterator::live$ = false;

          jclass UnsortedInputIterator::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/suggest/UnsortedInputIterator");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_1754a234] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/suggest/InputIterator;)V");
              mids$[mid_contexts_03e99967] = env->getMethodID(cls, "contexts", "()Ljava/util/Set;");
              mids$[mid_next_4ae19461] = env->getMethodID(cls, "next", "()Lorg/apache/lucene/util/BytesRef;");
              mids$[mid_payload_4ae19461] = env->getMethodID(cls, "payload", "()Lorg/apache/lucene/util/BytesRef;");
              mids$[mid_weight_54c6a17a] = env->getMethodID(cls, "weight", "()J");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          UnsortedInputIterator::UnsortedInputIterator(const ::org::apache::lucene::search::suggest::InputIterator & a0) : ::org::apache::lucene::search::suggest::BufferedInputIterator(env->newObject(initializeClass, &mids$, mid_init$_1754a234, a0.this$)) {}

          ::java::util::Set UnsortedInputIterator::contexts() const
          {
            return ::java::util::Set(env->callObjectMethod(this$, mids$[mid_contexts_03e99967]));
          }

          ::org::apache::lucene::util::BytesRef UnsortedInputIterator::next() const
          {
            return ::org::apache::lucene::util::BytesRef(env->callObjectMethod(this$, mids$[mid_next_4ae19461]));
          }

          ::org::apache::lucene::util::BytesRef UnsortedInputIterator::payload() const
          {
            return ::org::apache::lucene::util::BytesRef(env->callObjectMethod(this$, mids$[mid_payload_4ae19461]));
          }

          jlong UnsortedInputIterator::weight() const
          {
            return env->callLongMethod(this$, mids$[mid_weight_54c6a17a]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace suggest {
          static PyObject *t_UnsortedInputIterator_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_UnsortedInputIterator_instance_(PyTypeObject *type, PyObject *arg);
          static int t_UnsortedInputIterator_init_(t_UnsortedInputIterator *self, PyObject *args, PyObject *kwds);
          static PyObject *t_UnsortedInputIterator_contexts(t_UnsortedInputIterator *self, PyObject *args);
          static PyObject *t_UnsortedInputIterator_next(t_UnsortedInputIterator *self, PyObject *args);
          static PyObject *t_UnsortedInputIterator_payload(t_UnsortedInputIterator *self, PyObject *args);
          static PyObject *t_UnsortedInputIterator_weight(t_UnsortedInputIterator *self, PyObject *args);

          static PyMethodDef t_UnsortedInputIterator__methods_[] = {
            DECLARE_METHOD(t_UnsortedInputIterator, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_UnsortedInputIterator, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_UnsortedInputIterator, contexts, METH_VARARGS),
            DECLARE_METHOD(t_UnsortedInputIterator, next, METH_VARARGS),
            DECLARE_METHOD(t_UnsortedInputIterator, payload, METH_VARARGS),
            DECLARE_METHOD(t_UnsortedInputIterator, weight, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(UnsortedInputIterator, t_UnsortedInputIterator, ::org::apache::lucene::search::suggest::BufferedInputIterator, UnsortedInputIterator, t_UnsortedInputIterator_init_, PyObject_SelfIter, ((PyObject *(*)(t_UnsortedInputIterator *)) get_next< t_UnsortedInputIterator,::org::apache::lucene::util::t_BytesRef,::org::apache::lucene::util::BytesRef >), 0, 0, 0);

          void t_UnsortedInputIterator::install(PyObject *module)
          {
            installType(&PY_TYPE(UnsortedInputIterator), module, "UnsortedInputIterator", 0);
          }

          void t_UnsortedInputIterator::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(UnsortedInputIterator).tp_dict, "class_", make_descriptor(UnsortedInputIterator::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(UnsortedInputIterator).tp_dict, "wrapfn_", make_descriptor(t_UnsortedInputIterator::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(UnsortedInputIterator).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_UnsortedInputIterator_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, UnsortedInputIterator::initializeClass, 1)))
              return NULL;
            return t_UnsortedInputIterator::wrap_Object(UnsortedInputIterator(((t_UnsortedInputIterator *) arg)->object.this$));
          }
          static PyObject *t_UnsortedInputIterator_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, UnsortedInputIterator::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_UnsortedInputIterator_init_(t_UnsortedInputIterator *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::search::suggest::InputIterator a0((jobject) NULL);
            UnsortedInputIterator object((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::search::suggest::InputIterator::initializeClass, &a0))
            {
              INT_CALL(object = UnsortedInputIterator(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_UnsortedInputIterator_contexts(t_UnsortedInputIterator *self, PyObject *args)
          {
            ::java::util::Set result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.contexts());
              return ::java::util::t_Set::wrap_Object(result, &::org::apache::lucene::util::PY_TYPE(BytesRef));
            }

            return callSuper(&PY_TYPE(UnsortedInputIterator), (PyObject *) self, "contexts", args, 2);
          }

          static PyObject *t_UnsortedInputIterator_next(t_UnsortedInputIterator *self, PyObject *args)
          {
            ::org::apache::lucene::util::BytesRef result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.next());
              return ::org::apache::lucene::util::t_BytesRef::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(UnsortedInputIterator), (PyObject *) self, "next", args, 2);
          }

          static PyObject *t_UnsortedInputIterator_payload(t_UnsortedInputIterator *self, PyObject *args)
          {
            ::org::apache::lucene::util::BytesRef result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.payload());
              return ::org::apache::lucene::util::t_BytesRef::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(UnsortedInputIterator), (PyObject *) self, "payload", args, 2);
          }

          static PyObject *t_UnsortedInputIterator_weight(t_UnsortedInputIterator *self, PyObject *args)
          {
            jlong result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.weight());
              return PyLong_FromLongLong((PY_LONG_LONG) result);
            }

            return callSuper(&PY_TYPE(UnsortedInputIterator), (PyObject *) self, "weight", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/suggest/analyzing/SuggestStopFilter.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "org/apache/lucene/analysis/util/CharArraySet.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace suggest {
          namespace analyzing {

            ::java::lang::Class *SuggestStopFilter::class$ = NULL;
            jmethodID *SuggestStopFilter::mids$ = NULL;
            bool SuggestStopFilter::live$ = false;

            jclass SuggestStopFilter::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/search/suggest/analyzing/SuggestStopFilter");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_64fb9de3] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;Lorg/apache/lucene/analysis/util/CharArraySet;)V");
                mids$[mid_end_54c6a166] = env->getMethodID(cls, "end", "()V");
                mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");
                mids$[mid_reset_54c6a166] = env->getMethodID(cls, "reset", "()V");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            SuggestStopFilter::SuggestStopFilter(const ::org::apache::lucene::analysis::TokenStream & a0, const ::org::apache::lucene::analysis::util::CharArraySet & a1) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_64fb9de3, a0.this$, a1.this$)) {}

            void SuggestStopFilter::end() const
            {
              env->callVoidMethod(this$, mids$[mid_end_54c6a166]);
            }

            jboolean SuggestStopFilter::incrementToken() const
            {
              return env->callBooleanMethod(this$, mids$[mid_incrementToken_54c6a16a]);
            }

            void SuggestStopFilter::reset() const
            {
              env->callVoidMethod(this$, mids$[mid_reset_54c6a166]);
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace suggest {
          namespace analyzing {
            static PyObject *t_SuggestStopFilter_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_SuggestStopFilter_instance_(PyTypeObject *type, PyObject *arg);
            static int t_SuggestStopFilter_init_(t_SuggestStopFilter *self, PyObject *args, PyObject *kwds);
            static PyObject *t_SuggestStopFilter_end(t_SuggestStopFilter *self, PyObject *args);
            static PyObject *t_SuggestStopFilter_incrementToken(t_SuggestStopFilter *self, PyObject *args);
            static PyObject *t_SuggestStopFilter_reset(t_SuggestStopFilter *self, PyObject *args);

            static PyMethodDef t_SuggestStopFilter__methods_[] = {
              DECLARE_METHOD(t_SuggestStopFilter, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_SuggestStopFilter, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_SuggestStopFilter, end, METH_VARARGS),
              DECLARE_METHOD(t_SuggestStopFilter, incrementToken, METH_VARARGS),
              DECLARE_METHOD(t_SuggestStopFilter, reset, METH_VARARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(SuggestStopFilter, t_SuggestStopFilter, ::org::apache::lucene::analysis::TokenFilter, SuggestStopFilter, t_SuggestStopFilter_init_, 0, 0, 0, 0, 0);

            void t_SuggestStopFilter::install(PyObject *module)
            {
              installType(&PY_TYPE(SuggestStopFilter), module, "SuggestStopFilter", 0);
            }

            void t_SuggestStopFilter::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(SuggestStopFilter).tp_dict, "class_", make_descriptor(SuggestStopFilter::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(SuggestStopFilter).tp_dict, "wrapfn_", make_descriptor(t_SuggestStopFilter::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(SuggestStopFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_SuggestStopFilter_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, SuggestStopFilter::initializeClass, 1)))
                return NULL;
              return t_SuggestStopFilter::wrap_Object(SuggestStopFilter(((t_SuggestStopFilter *) arg)->object.this$));
            }
            static PyObject *t_SuggestStopFilter_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, SuggestStopFilter::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_SuggestStopFilter_init_(t_SuggestStopFilter *self, PyObject *args, PyObject *kwds)
            {
              ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
              ::org::apache::lucene::analysis::util::CharArraySet a1((jobject) NULL);
              PyTypeObject **p1;
              SuggestStopFilter object((jobject) NULL);

              if (!parseArgs(args, "kK", ::org::apache::lucene::analysis::TokenStream::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, &a0, &a1, &p1, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_))
              {
                INT_CALL(object = SuggestStopFilter(a0, a1));
                self->object = object;
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_SuggestStopFilter_end(t_SuggestStopFilter *self, PyObject *args)
            {

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(self->object.end());
                Py_RETURN_NONE;
              }

              return callSuper(&PY_TYPE(SuggestStopFilter), (PyObject *) self, "end", args, 2);
            }

            static PyObject *t_SuggestStopFilter_incrementToken(t_SuggestStopFilter *self, PyObject *args)
            {
              jboolean result;

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.incrementToken());
                Py_RETURN_BOOL(result);
              }

              return callSuper(&PY_TYPE(SuggestStopFilter), (PyObject *) self, "incrementToken", args, 2);
            }

            static PyObject *t_SuggestStopFilter_reset(t_SuggestStopFilter *self, PyObject *args)
            {

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(self->object.reset());
                Py_RETURN_NONE;
              }

              return callSuper(&PY_TYPE(SuggestStopFilter), (PyObject *) self, "reset", args, 2);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/ar/ArabicLetterTokenizerFactory.h"
#include "org/apache/lucene/util/AttributeFactory.h"
#include "java/lang/Class.h"
#include "java/util/Map.h"
#include "java/io/Reader.h"
#include "org/apache/lucene/analysis/ar/ArabicLetterTokenizer.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ar {

          ::java::lang::Class *ArabicLetterTokenizerFactory::class$ = NULL;
          jmethodID *ArabicLetterTokenizerFactory::mids$ = NULL;
          bool ArabicLetterTokenizerFactory::live$ = false;

          jclass ArabicLetterTokenizerFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/ar/ArabicLetterTokenizerFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4c9e2b1c] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_ee4a774c] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/util/AttributeFactory;Ljava/io/Reader;)Lorg/apache/lucene/analysis/ar/ArabicLetterTokenizer;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ArabicLetterTokenizerFactory::ArabicLetterTokenizerFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenizerFactory(env->newObject(initializeClass, &mids$, mid_init$_4c9e2b1c, a0.this$)) {}

          ::org::apache::lucene::analysis::ar::ArabicLetterTokenizer ArabicLetterTokenizerFactory::create(const ::org::apache::lucene::util::AttributeFactory & a0, const ::java::io::Reader & a1) const
          {
            return ::org::apache::lucene::analysis::ar::ArabicLetterTokenizer(env->callObjectMethod(this$, mids$[mid_create_ee4a774c], a0.this$, a1.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ar {
          static PyObject *t_ArabicLetterTokenizerFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_ArabicLetterTokenizerFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_ArabicLetterTokenizerFactory_init_(t_ArabicLetterTokenizerFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_ArabicLetterTokenizerFactory_create(t_ArabicLetterTokenizerFactory *self, PyObject *args);

          static PyMethodDef t_ArabicLetterTokenizerFactory__methods_[] = {
            DECLARE_METHOD(t_ArabicLetterTokenizerFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ArabicLetterTokenizerFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ArabicLetterTokenizerFactory, create, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(ArabicLetterTokenizerFactory, t_ArabicLetterTokenizerFactory, ::org::apache::lucene::analysis::util::TokenizerFactory, ArabicLetterTokenizerFactory, t_ArabicLetterTokenizerFactory_init_, 0, 0, 0, 0, 0);

          void t_ArabicLetterTokenizerFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(ArabicLetterTokenizerFactory), module, "ArabicLetterTokenizerFactory", 0);
          }

          void t_ArabicLetterTokenizerFactory::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(ArabicLetterTokenizerFactory).tp_dict, "class_", make_descriptor(ArabicLetterTokenizerFactory::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(ArabicLetterTokenizerFactory).tp_dict, "wrapfn_", make_descriptor(t_ArabicLetterTokenizerFactory::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(ArabicLetterTokenizerFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_ArabicLetterTokenizerFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, ArabicLetterTokenizerFactory::initializeClass, 1)))
              return NULL;
            return t_ArabicLetterTokenizerFactory::wrap_Object(ArabicLetterTokenizerFactory(((t_ArabicLetterTokenizerFactory *) arg)->object.this$));
          }
          static PyObject *t_ArabicLetterTokenizerFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, ArabicLetterTokenizerFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_ArabicLetterTokenizerFactory_init_(t_ArabicLetterTokenizerFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            ArabicLetterTokenizerFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = ArabicLetterTokenizerFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_ArabicLetterTokenizerFactory_create(t_ArabicLetterTokenizerFactory *self, PyObject *args)
          {
            ::org::apache::lucene::util::AttributeFactory a0((jobject) NULL);
            ::java::io::Reader a1((jobject) NULL);
            ::org::apache::lucene::analysis::ar::ArabicLetterTokenizer result((jobject) NULL);

            if (!parseArgs(args, "kk", ::org::apache::lucene::util::AttributeFactory::initializeClass, ::java::io::Reader::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.create(a0, a1));
              return ::org::apache::lucene::analysis::ar::t_ArabicLetterTokenizer::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(ArabicLetterTokenizerFactory), (PyObject *) self, "create", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/LiveIndexWriterConfig.h"
#include "org/apache/lucene/index/IndexWriter$IndexReaderWarmer.h"
#include "org/apache/lucene/util/InfoStream.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/index/IndexDeletionPolicy.h"
#include "org/apache/lucene/index/IndexWriterConfig$OpenMode.h"
#include "org/apache/lucene/index/IndexCommit.h"
#include "org/apache/lucene/index/MergeScheduler.h"
#include "org/apache/lucene/analysis/Analyzer.h"
#include "java/lang/String.h"
#include "org/apache/lucene/search/similarities/Similarity.h"
#include "org/apache/lucene/codecs/Codec.h"
#include "org/apache/lucene/index/MergePolicy.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *LiveIndexWriterConfig::class$ = NULL;
        jmethodID *LiveIndexWriterConfig::mids$ = NULL;
        bool LiveIndexWriterConfig::live$ = false;

        jclass LiveIndexWriterConfig::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/LiveIndexWriterConfig");

            mids$ = new jmethodID[max_mid];
            mids$[mid_getAnalyzer_347f60a9] = env->getMethodID(cls, "getAnalyzer", "()Lorg/apache/lucene/analysis/Analyzer;");
            mids$[mid_getCheckIntegrityAtMerge_54c6a16a] = env->getMethodID(cls, "getCheckIntegrityAtMerge", "()Z");
            mids$[mid_getCodec_27f0a02b] = env->getMethodID(cls, "getCodec", "()Lorg/apache/lucene/codecs/Codec;");
            mids$[mid_getIndexCommit_09307276] = env->getMethodID(cls, "getIndexCommit", "()Lorg/apache/lucene/index/IndexCommit;");
            mids$[mid_getIndexDeletionPolicy_a18376c3] = env->getMethodID(cls, "getIndexDeletionPolicy", "()Lorg/apache/lucene/index/IndexDeletionPolicy;");
            mids$[mid_getInfoStream_1923150b] = env->getMethodID(cls, "getInfoStream", "()Lorg/apache/lucene/util/InfoStream;");
            mids$[mid_getMaxBufferedDeleteTerms_54c6a179] = env->getMethodID(cls, "getMaxBufferedDeleteTerms", "()I");
            mids$[mid_getMaxBufferedDocs_54c6a179] = env->getMethodID(cls, "getMaxBufferedDocs", "()I");
            mids$[mid_getMaxThreadStates_54c6a179] = env->getMethodID(cls, "getMaxThreadStates", "()I");
            mids$[mid_getMergePolicy_753f8dfd] = env->getMethodID(cls, "getMergePolicy", "()Lorg/apache/lucene/index/MergePolicy;");
            mids$[mid_getMergeScheduler_ff96d655] = env->getMethodID(cls, "getMergeScheduler", "()Lorg/apache/lucene/index/MergeScheduler;");
            mids$[mid_getMergedSegmentWarmer_b145c9d7] = env->getMethodID(cls, "getMergedSegmentWarmer", "()Lorg/apache/lucene/index/IndexWriter$IndexReaderWarmer;");
            mids$[mid_getOpenMode_4134b214] = env->getMethodID(cls, "getOpenMode", "()Lorg/apache/lucene/index/IndexWriterConfig$OpenMode;");
            mids$[mid_getRAMBufferSizeMB_54c6a174] = env->getMethodID(cls, "getRAMBufferSizeMB", "()D");
            mids$[mid_getRAMPerThreadHardLimitMB_54c6a179] = env->getMethodID(cls, "getRAMPerThreadHardLimitMB", "()I");
            mids$[mid_getReaderPooling_54c6a16a] = env->getMethodID(cls, "getReaderPooling", "()Z");
            mids$[mid_getReaderTermsIndexDivisor_54c6a179] = env->getMethodID(cls, "getReaderTermsIndexDivisor", "()I");
            mids$[mid_getSimilarity_efcb1233] = env->getMethodID(cls, "getSimilarity", "()Lorg/apache/lucene/search/similarities/Similarity;");
            mids$[mid_getTermIndexInterval_54c6a179] = env->getMethodID(cls, "getTermIndexInterval", "()I");
            mids$[mid_getUseCompoundFile_54c6a16a] = env->getMethodID(cls, "getUseCompoundFile", "()Z");
            mids$[mid_getWriteLockTimeout_54c6a17a] = env->getMethodID(cls, "getWriteLockTimeout", "()J");
            mids$[mid_setCheckIntegrityAtMerge_7cdcb09b] = env->getMethodID(cls, "setCheckIntegrityAtMerge", "(Z)Lorg/apache/lucene/index/LiveIndexWriterConfig;");
            mids$[mid_setMaxBufferedDeleteTerms_4e167404] = env->getMethodID(cls, "setMaxBufferedDeleteTerms", "(I)Lorg/apache/lucene/index/LiveIndexWriterConfig;");
            mids$[mid_setMaxBufferedDocs_4e167404] = env->getMethodID(cls, "setMaxBufferedDocs", "(I)Lorg/apache/lucene/index/LiveIndexWriterConfig;");
            mids$[mid_setMergedSegmentWarmer_02b4678e] = env->getMethodID(cls, "setMergedSegmentWarmer", "(Lorg/apache/lucene/index/IndexWriter$IndexReaderWarmer;)Lorg/apache/lucene/index/LiveIndexWriterConfig;");
            mids$[mid_setRAMBufferSizeMB_e14feba1] = env->getMethodID(cls, "setRAMBufferSizeMB", "(D)Lorg/apache/lucene/index/LiveIndexWriterConfig;");
            mids$[mid_setReaderTermsIndexDivisor_4e167404] = env->getMethodID(cls, "setReaderTermsIndexDivisor", "(I)Lorg/apache/lucene/index/LiveIndexWriterConfig;");
            mids$[mid_setTermIndexInterval_4e167404] = env->getMethodID(cls, "setTermIndexInterval", "(I)Lorg/apache/lucene/index/LiveIndexWriterConfig;");
            mids$[mid_setUseCompoundFile_7cdcb09b] = env->getMethodID(cls, "setUseCompoundFile", "(Z)Lorg/apache/lucene/index/LiveIndexWriterConfig;");
            mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        ::org::apache::lucene::analysis::Analyzer LiveIndexWriterConfig::getAnalyzer() const
        {
          return ::org::apache::lucene::analysis::Analyzer(env->callObjectMethod(this$, mids$[mid_getAnalyzer_347f60a9]));
        }

        jboolean LiveIndexWriterConfig::getCheckIntegrityAtMerge() const
        {
          return env->callBooleanMethod(this$, mids$[mid_getCheckIntegrityAtMerge_54c6a16a]);
        }

        ::org::apache::lucene::codecs::Codec LiveIndexWriterConfig::getCodec() const
        {
          return ::org::apache::lucene::codecs::Codec(env->callObjectMethod(this$, mids$[mid_getCodec_27f0a02b]));
        }

        ::org::apache::lucene::index::IndexCommit LiveIndexWriterConfig::getIndexCommit() const
        {
          return ::org::apache::lucene::index::IndexCommit(env->callObjectMethod(this$, mids$[mid_getIndexCommit_09307276]));
        }

        ::org::apache::lucene::index::IndexDeletionPolicy LiveIndexWriterConfig::getIndexDeletionPolicy() const
        {
          return ::org::apache::lucene::index::IndexDeletionPolicy(env->callObjectMethod(this$, mids$[mid_getIndexDeletionPolicy_a18376c3]));
        }

        ::org::apache::lucene::util::InfoStream LiveIndexWriterConfig::getInfoStream() const
        {
          return ::org::apache::lucene::util::InfoStream(env->callObjectMethod(this$, mids$[mid_getInfoStream_1923150b]));
        }

        jint LiveIndexWriterConfig::getMaxBufferedDeleteTerms() const
        {
          return env->callIntMethod(this$, mids$[mid_getMaxBufferedDeleteTerms_54c6a179]);
        }

        jint LiveIndexWriterConfig::getMaxBufferedDocs() const
        {
          return env->callIntMethod(this$, mids$[mid_getMaxBufferedDocs_54c6a179]);
        }

        jint LiveIndexWriterConfig::getMaxThreadStates() const
        {
          return env->callIntMethod(this$, mids$[mid_getMaxThreadStates_54c6a179]);
        }

        ::org::apache::lucene::index::MergePolicy LiveIndexWriterConfig::getMergePolicy() const
        {
          return ::org::apache::lucene::index::MergePolicy(env->callObjectMethod(this$, mids$[mid_getMergePolicy_753f8dfd]));
        }

        ::org::apache::lucene::index::MergeScheduler LiveIndexWriterConfig::getMergeScheduler() const
        {
          return ::org::apache::lucene::index::MergeScheduler(env->callObjectMethod(this$, mids$[mid_getMergeScheduler_ff96d655]));
        }

        ::org::apache::lucene::index::IndexWriter$IndexReaderWarmer LiveIndexWriterConfig::getMergedSegmentWarmer() const
        {
          return ::org::apache::lucene::index::IndexWriter$IndexReaderWarmer(env->callObjectMethod(this$, mids$[mid_getMergedSegmentWarmer_b145c9d7]));
        }

        ::org::apache::lucene::index::IndexWriterConfig$OpenMode LiveIndexWriterConfig::getOpenMode() const
        {
          return ::org::apache::lucene::index::IndexWriterConfig$OpenMode(env->callObjectMethod(this$, mids$[mid_getOpenMode_4134b214]));
        }

        jdouble LiveIndexWriterConfig::getRAMBufferSizeMB() const
        {
          return env->callDoubleMethod(this$, mids$[mid_getRAMBufferSizeMB_54c6a174]);
        }

        jint LiveIndexWriterConfig::getRAMPerThreadHardLimitMB() const
        {
          return env->callIntMethod(this$, mids$[mid_getRAMPerThreadHardLimitMB_54c6a179]);
        }

        jboolean LiveIndexWriterConfig::getReaderPooling() const
        {
          return env->callBooleanMethod(this$, mids$[mid_getReaderPooling_54c6a16a]);
        }

        jint LiveIndexWriterConfig::getReaderTermsIndexDivisor() const
        {
          return env->callIntMethod(this$, mids$[mid_getReaderTermsIndexDivisor_54c6a179]);
        }

        ::org::apache::lucene::search::similarities::Similarity LiveIndexWriterConfig::getSimilarity() const
        {
          return ::org::apache::lucene::search::similarities::Similarity(env->callObjectMethod(this$, mids$[mid_getSimilarity_efcb1233]));
        }

        jint LiveIndexWriterConfig::getTermIndexInterval() const
        {
          return env->callIntMethod(this$, mids$[mid_getTermIndexInterval_54c6a179]);
        }

        jboolean LiveIndexWriterConfig::getUseCompoundFile() const
        {
          return env->callBooleanMethod(this$, mids$[mid_getUseCompoundFile_54c6a16a]);
        }

        jlong LiveIndexWriterConfig::getWriteLockTimeout() const
        {
          return env->callLongMethod(this$, mids$[mid_getWriteLockTimeout_54c6a17a]);
        }

        LiveIndexWriterConfig LiveIndexWriterConfig::setCheckIntegrityAtMerge(jboolean a0) const
        {
          return LiveIndexWriterConfig(env->callObjectMethod(this$, mids$[mid_setCheckIntegrityAtMerge_7cdcb09b], a0));
        }

        LiveIndexWriterConfig LiveIndexWriterConfig::setMaxBufferedDeleteTerms(jint a0) const
        {
          return LiveIndexWriterConfig(env->callObjectMethod(this$, mids$[mid_setMaxBufferedDeleteTerms_4e167404], a0));
        }

        LiveIndexWriterConfig LiveIndexWriterConfig::setMaxBufferedDocs(jint a0) const
        {
          return LiveIndexWriterConfig(env->callObjectMethod(this$, mids$[mid_setMaxBufferedDocs_4e167404], a0));
        }

        LiveIndexWriterConfig LiveIndexWriterConfig::setMergedSegmentWarmer(const ::org::apache::lucene::index::IndexWriter$IndexReaderWarmer & a0) const
        {
          return LiveIndexWriterConfig(env->callObjectMethod(this$, mids$[mid_setMergedSegmentWarmer_02b4678e], a0.this$));
        }

        LiveIndexWriterConfig LiveIndexWriterConfig::setRAMBufferSizeMB(jdouble a0) const
        {
          return LiveIndexWriterConfig(env->callObjectMethod(this$, mids$[mid_setRAMBufferSizeMB_e14feba1], a0));
        }

        LiveIndexWriterConfig LiveIndexWriterConfig::setReaderTermsIndexDivisor(jint a0) const
        {
          return LiveIndexWriterConfig(env->callObjectMethod(this$, mids$[mid_setReaderTermsIndexDivisor_4e167404], a0));
        }

        LiveIndexWriterConfig LiveIndexWriterConfig::setTermIndexInterval(jint a0) const
        {
          return LiveIndexWriterConfig(env->callObjectMethod(this$, mids$[mid_setTermIndexInterval_4e167404], a0));
        }

        LiveIndexWriterConfig LiveIndexWriterConfig::setUseCompoundFile(jboolean a0) const
        {
          return LiveIndexWriterConfig(env->callObjectMethod(this$, mids$[mid_setUseCompoundFile_7cdcb09b], a0));
        }

        ::java::lang::String LiveIndexWriterConfig::toString() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_LiveIndexWriterConfig_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_LiveIndexWriterConfig_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_LiveIndexWriterConfig_getAnalyzer(t_LiveIndexWriterConfig *self);
        static PyObject *t_LiveIndexWriterConfig_getCheckIntegrityAtMerge(t_LiveIndexWriterConfig *self);
        static PyObject *t_LiveIndexWriterConfig_getCodec(t_LiveIndexWriterConfig *self);
        static PyObject *t_LiveIndexWriterConfig_getIndexCommit(t_LiveIndexWriterConfig *self);
        static PyObject *t_LiveIndexWriterConfig_getIndexDeletionPolicy(t_LiveIndexWriterConfig *self);
        static PyObject *t_LiveIndexWriterConfig_getInfoStream(t_LiveIndexWriterConfig *self);
        static PyObject *t_LiveIndexWriterConfig_getMaxBufferedDeleteTerms(t_LiveIndexWriterConfig *self);
        static PyObject *t_LiveIndexWriterConfig_getMaxBufferedDocs(t_LiveIndexWriterConfig *self);
        static PyObject *t_LiveIndexWriterConfig_getMaxThreadStates(t_LiveIndexWriterConfig *self);
        static PyObject *t_LiveIndexWriterConfig_getMergePolicy(t_LiveIndexWriterConfig *self);
        static PyObject *t_LiveIndexWriterConfig_getMergeScheduler(t_LiveIndexWriterConfig *self);
        static PyObject *t_LiveIndexWriterConfig_getMergedSegmentWarmer(t_LiveIndexWriterConfig *self);
        static PyObject *t_LiveIndexWriterConfig_getOpenMode(t_LiveIndexWriterConfig *self);
        static PyObject *t_LiveIndexWriterConfig_getRAMBufferSizeMB(t_LiveIndexWriterConfig *self);
        static PyObject *t_LiveIndexWriterConfig_getRAMPerThreadHardLimitMB(t_LiveIndexWriterConfig *self);
        static PyObject *t_LiveIndexWriterConfig_getReaderPooling(t_LiveIndexWriterConfig *self);
        static PyObject *t_LiveIndexWriterConfig_getReaderTermsIndexDivisor(t_LiveIndexWriterConfig *self);
        static PyObject *t_LiveIndexWriterConfig_getSimilarity(t_LiveIndexWriterConfig *self);
        static PyObject *t_LiveIndexWriterConfig_getTermIndexInterval(t_LiveIndexWriterConfig *self);
        static PyObject *t_LiveIndexWriterConfig_getUseCompoundFile(t_LiveIndexWriterConfig *self);
        static PyObject *t_LiveIndexWriterConfig_getWriteLockTimeout(t_LiveIndexWriterConfig *self);
        static PyObject *t_LiveIndexWriterConfig_setCheckIntegrityAtMerge(t_LiveIndexWriterConfig *self, PyObject *arg);
        static PyObject *t_LiveIndexWriterConfig_setMaxBufferedDeleteTerms(t_LiveIndexWriterConfig *self, PyObject *arg);
        static PyObject *t_LiveIndexWriterConfig_setMaxBufferedDocs(t_LiveIndexWriterConfig *self, PyObject *arg);
        static PyObject *t_LiveIndexWriterConfig_setMergedSegmentWarmer(t_LiveIndexWriterConfig *self, PyObject *arg);
        static PyObject *t_LiveIndexWriterConfig_setRAMBufferSizeMB(t_LiveIndexWriterConfig *self, PyObject *arg);
        static PyObject *t_LiveIndexWriterConfig_setReaderTermsIndexDivisor(t_LiveIndexWriterConfig *self, PyObject *arg);
        static PyObject *t_LiveIndexWriterConfig_setTermIndexInterval(t_LiveIndexWriterConfig *self, PyObject *arg);
        static PyObject *t_LiveIndexWriterConfig_setUseCompoundFile(t_LiveIndexWriterConfig *self, PyObject *arg);
        static PyObject *t_LiveIndexWriterConfig_toString(t_LiveIndexWriterConfig *self, PyObject *args);
        static PyObject *t_LiveIndexWriterConfig_get__analyzer(t_LiveIndexWriterConfig *self, void *data);
        static PyObject *t_LiveIndexWriterConfig_get__checkIntegrityAtMerge(t_LiveIndexWriterConfig *self, void *data);
        static int t_LiveIndexWriterConfig_set__checkIntegrityAtMerge(t_LiveIndexWriterConfig *self, PyObject *arg, void *data);
        static PyObject *t_LiveIndexWriterConfig_get__codec(t_LiveIndexWriterConfig *self, void *data);
        static PyObject *t_LiveIndexWriterConfig_get__indexCommit(t_LiveIndexWriterConfig *self, void *data);
        static PyObject *t_LiveIndexWriterConfig_get__indexDeletionPolicy(t_LiveIndexWriterConfig *self, void *data);
        static PyObject *t_LiveIndexWriterConfig_get__infoStream(t_LiveIndexWriterConfig *self, void *data);
        static PyObject *t_LiveIndexWriterConfig_get__maxBufferedDeleteTerms(t_LiveIndexWriterConfig *self, void *data);
        static int t_LiveIndexWriterConfig_set__maxBufferedDeleteTerms(t_LiveIndexWriterConfig *self, PyObject *arg, void *data);
        static PyObject *t_LiveIndexWriterConfig_get__maxBufferedDocs(t_LiveIndexWriterConfig *self, void *data);
        static int t_LiveIndexWriterConfig_set__maxBufferedDocs(t_LiveIndexWriterConfig *self, PyObject *arg, void *data);
        static PyObject *t_LiveIndexWriterConfig_get__maxThreadStates(t_LiveIndexWriterConfig *self, void *data);
        static PyObject *t_LiveIndexWriterConfig_get__mergePolicy(t_LiveIndexWriterConfig *self, void *data);
        static PyObject *t_LiveIndexWriterConfig_get__mergeScheduler(t_LiveIndexWriterConfig *self, void *data);
        static PyObject *t_LiveIndexWriterConfig_get__mergedSegmentWarmer(t_LiveIndexWriterConfig *self, void *data);
        static int t_LiveIndexWriterConfig_set__mergedSegmentWarmer(t_LiveIndexWriterConfig *self, PyObject *arg, void *data);
        static PyObject *t_LiveIndexWriterConfig_get__openMode(t_LiveIndexWriterConfig *self, void *data);
        static PyObject *t_LiveIndexWriterConfig_get__rAMBufferSizeMB(t_LiveIndexWriterConfig *self, void *data);
        static int t_LiveIndexWriterConfig_set__rAMBufferSizeMB(t_LiveIndexWriterConfig *self, PyObject *arg, void *data);
        static PyObject *t_LiveIndexWriterConfig_get__rAMPerThreadHardLimitMB(t_LiveIndexWriterConfig *self, void *data);
        static PyObject *t_LiveIndexWriterConfig_get__readerPooling(t_LiveIndexWriterConfig *self, void *data);
        static PyObject *t_LiveIndexWriterConfig_get__readerTermsIndexDivisor(t_LiveIndexWriterConfig *self, void *data);
        static int t_LiveIndexWriterConfig_set__readerTermsIndexDivisor(t_LiveIndexWriterConfig *self, PyObject *arg, void *data);
        static PyObject *t_LiveIndexWriterConfig_get__similarity(t_LiveIndexWriterConfig *self, void *data);
        static PyObject *t_LiveIndexWriterConfig_get__termIndexInterval(t_LiveIndexWriterConfig *self, void *data);
        static int t_LiveIndexWriterConfig_set__termIndexInterval(t_LiveIndexWriterConfig *self, PyObject *arg, void *data);
        static PyObject *t_LiveIndexWriterConfig_get__useCompoundFile(t_LiveIndexWriterConfig *self, void *data);
        static int t_LiveIndexWriterConfig_set__useCompoundFile(t_LiveIndexWriterConfig *self, PyObject *arg, void *data);
        static PyObject *t_LiveIndexWriterConfig_get__writeLockTimeout(t_LiveIndexWriterConfig *self, void *data);
        static PyGetSetDef t_LiveIndexWriterConfig__fields_[] = {
          DECLARE_GET_FIELD(t_LiveIndexWriterConfig, analyzer),
          DECLARE_GETSET_FIELD(t_LiveIndexWriterConfig, checkIntegrityAtMerge),
          DECLARE_GET_FIELD(t_LiveIndexWriterConfig, codec),
          DECLARE_GET_FIELD(t_LiveIndexWriterConfig, indexCommit),
          DECLARE_GET_FIELD(t_LiveIndexWriterConfig, indexDeletionPolicy),
          DECLARE_GET_FIELD(t_LiveIndexWriterConfig, infoStream),
          DECLARE_GETSET_FIELD(t_LiveIndexWriterConfig, maxBufferedDeleteTerms),
          DECLARE_GETSET_FIELD(t_LiveIndexWriterConfig, maxBufferedDocs),
          DECLARE_GET_FIELD(t_LiveIndexWriterConfig, maxThreadStates),
          DECLARE_GET_FIELD(t_LiveIndexWriterConfig, mergePolicy),
          DECLARE_GET_FIELD(t_LiveIndexWriterConfig, mergeScheduler),
          DECLARE_GETSET_FIELD(t_LiveIndexWriterConfig, mergedSegmentWarmer),
          DECLARE_GET_FIELD(t_LiveIndexWriterConfig, openMode),
          DECLARE_GETSET_FIELD(t_LiveIndexWriterConfig, rAMBufferSizeMB),
          DECLARE_GET_FIELD(t_LiveIndexWriterConfig, rAMPerThreadHardLimitMB),
          DECLARE_GET_FIELD(t_LiveIndexWriterConfig, readerPooling),
          DECLARE_GETSET_FIELD(t_LiveIndexWriterConfig, readerTermsIndexDivisor),
          DECLARE_GET_FIELD(t_LiveIndexWriterConfig, similarity),
          DECLARE_GETSET_FIELD(t_LiveIndexWriterConfig, termIndexInterval),
          DECLARE_GETSET_FIELD(t_LiveIndexWriterConfig, useCompoundFile),
          DECLARE_GET_FIELD(t_LiveIndexWriterConfig, writeLockTimeout),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_LiveIndexWriterConfig__methods_[] = {
          DECLARE_METHOD(t_LiveIndexWriterConfig, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_LiveIndexWriterConfig, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_LiveIndexWriterConfig, getAnalyzer, METH_NOARGS),
          DECLARE_METHOD(t_LiveIndexWriterConfig, getCheckIntegrityAtMerge, METH_NOARGS),
          DECLARE_METHOD(t_LiveIndexWriterConfig, getCodec, METH_NOARGS),
          DECLARE_METHOD(t_LiveIndexWriterConfig, getIndexCommit, METH_NOARGS),
          DECLARE_METHOD(t_LiveIndexWriterConfig, getIndexDeletionPolicy, METH_NOARGS),
          DECLARE_METHOD(t_LiveIndexWriterConfig, getInfoStream, METH_NOARGS),
          DECLARE_METHOD(t_LiveIndexWriterConfig, getMaxBufferedDeleteTerms, METH_NOARGS),
          DECLARE_METHOD(t_LiveIndexWriterConfig, getMaxBufferedDocs, METH_NOARGS),
          DECLARE_METHOD(t_LiveIndexWriterConfig, getMaxThreadStates, METH_NOARGS),
          DECLARE_METHOD(t_LiveIndexWriterConfig, getMergePolicy, METH_NOARGS),
          DECLARE_METHOD(t_LiveIndexWriterConfig, getMergeScheduler, METH_NOARGS),
          DECLARE_METHOD(t_LiveIndexWriterConfig, getMergedSegmentWarmer, METH_NOARGS),
          DECLARE_METHOD(t_LiveIndexWriterConfig, getOpenMode, METH_NOARGS),
          DECLARE_METHOD(t_LiveIndexWriterConfig, getRAMBufferSizeMB, METH_NOARGS),
          DECLARE_METHOD(t_LiveIndexWriterConfig, getRAMPerThreadHardLimitMB, METH_NOARGS),
          DECLARE_METHOD(t_LiveIndexWriterConfig, getReaderPooling, METH_NOARGS),
          DECLARE_METHOD(t_LiveIndexWriterConfig, getReaderTermsIndexDivisor, METH_NOARGS),
          DECLARE_METHOD(t_LiveIndexWriterConfig, getSimilarity, METH_NOARGS),
          DECLARE_METHOD(t_LiveIndexWriterConfig, getTermIndexInterval, METH_NOARGS),
          DECLARE_METHOD(t_LiveIndexWriterConfig, getUseCompoundFile, METH_NOARGS),
          DECLARE_METHOD(t_LiveIndexWriterConfig, getWriteLockTimeout, METH_NOARGS),
          DECLARE_METHOD(t_LiveIndexWriterConfig, setCheckIntegrityAtMerge, METH_O),
          DECLARE_METHOD(t_LiveIndexWriterConfig, setMaxBufferedDeleteTerms, METH_O),
          DECLARE_METHOD(t_LiveIndexWriterConfig, setMaxBufferedDocs, METH_O),
          DECLARE_METHOD(t_LiveIndexWriterConfig, setMergedSegmentWarmer, METH_O),
          DECLARE_METHOD(t_LiveIndexWriterConfig, setRAMBufferSizeMB, METH_O),
          DECLARE_METHOD(t_LiveIndexWriterConfig, setReaderTermsIndexDivisor, METH_O),
          DECLARE_METHOD(t_LiveIndexWriterConfig, setTermIndexInterval, METH_O),
          DECLARE_METHOD(t_LiveIndexWriterConfig, setUseCompoundFile, METH_O),
          DECLARE_METHOD(t_LiveIndexWriterConfig, toString, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(LiveIndexWriterConfig, t_LiveIndexWriterConfig, ::java::lang::Object, LiveIndexWriterConfig, abstract_init, 0, 0, t_LiveIndexWriterConfig__fields_, 0, 0);

        void t_LiveIndexWriterConfig::install(PyObject *module)
        {
          installType(&PY_TYPE(LiveIndexWriterConfig), module, "LiveIndexWriterConfig", 0);
        }

        void t_LiveIndexWriterConfig::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(LiveIndexWriterConfig).tp_dict, "class_", make_descriptor(LiveIndexWriterConfig::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(LiveIndexWriterConfig).tp_dict, "wrapfn_", make_descriptor(t_LiveIndexWriterConfig::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(LiveIndexWriterConfig).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_LiveIndexWriterConfig_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, LiveIndexWriterConfig::initializeClass, 1)))
            return NULL;
          return t_LiveIndexWriterConfig::wrap_Object(LiveIndexWriterConfig(((t_LiveIndexWriterConfig *) arg)->object.this$));
        }
        static PyObject *t_LiveIndexWriterConfig_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, LiveIndexWriterConfig::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_LiveIndexWriterConfig_getAnalyzer(t_LiveIndexWriterConfig *self)
        {
          ::org::apache::lucene::analysis::Analyzer result((jobject) NULL);
          OBJ_CALL(result = self->object.getAnalyzer());
          return ::org::apache::lucene::analysis::t_Analyzer::wrap_Object(result);
        }

        static PyObject *t_LiveIndexWriterConfig_getCheckIntegrityAtMerge(t_LiveIndexWriterConfig *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.getCheckIntegrityAtMerge());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_LiveIndexWriterConfig_getCodec(t_LiveIndexWriterConfig *self)
        {
          ::org::apache::lucene::codecs::Codec result((jobject) NULL);
          OBJ_CALL(result = self->object.getCodec());
          return ::org::apache::lucene::codecs::t_Codec::wrap_Object(result);
        }

        static PyObject *t_LiveIndexWriterConfig_getIndexCommit(t_LiveIndexWriterConfig *self)
        {
          ::org::apache::lucene::index::IndexCommit result((jobject) NULL);
          OBJ_CALL(result = self->object.getIndexCommit());
          return ::org::apache::lucene::index::t_IndexCommit::wrap_Object(result);
        }

        static PyObject *t_LiveIndexWriterConfig_getIndexDeletionPolicy(t_LiveIndexWriterConfig *self)
        {
          ::org::apache::lucene::index::IndexDeletionPolicy result((jobject) NULL);
          OBJ_CALL(result = self->object.getIndexDeletionPolicy());
          return ::org::apache::lucene::index::t_IndexDeletionPolicy::wrap_Object(result);
        }

        static PyObject *t_LiveIndexWriterConfig_getInfoStream(t_LiveIndexWriterConfig *self)
        {
          ::org::apache::lucene::util::InfoStream result((jobject) NULL);
          OBJ_CALL(result = self->object.getInfoStream());
          return ::org::apache::lucene::util::t_InfoStream::wrap_Object(result);
        }

        static PyObject *t_LiveIndexWriterConfig_getMaxBufferedDeleteTerms(t_LiveIndexWriterConfig *self)
        {
          jint result;
          OBJ_CALL(result = self->object.getMaxBufferedDeleteTerms());
          return PyInt_FromLong((long) result);
        }

        static PyObject *t_LiveIndexWriterConfig_getMaxBufferedDocs(t_LiveIndexWriterConfig *self)
        {
          jint result;
          OBJ_CALL(result = self->object.getMaxBufferedDocs());
          return PyInt_FromLong((long) result);
        }

        static PyObject *t_LiveIndexWriterConfig_getMaxThreadStates(t_LiveIndexWriterConfig *self)
        {
          jint result;
          OBJ_CALL(result = self->object.getMaxThreadStates());
          return PyInt_FromLong((long) result);
        }

        static PyObject *t_LiveIndexWriterConfig_getMergePolicy(t_LiveIndexWriterConfig *self)
        {
          ::org::apache::lucene::index::MergePolicy result((jobject) NULL);
          OBJ_CALL(result = self->object.getMergePolicy());
          return ::org::apache::lucene::index::t_MergePolicy::wrap_Object(result);
        }

        static PyObject *t_LiveIndexWriterConfig_getMergeScheduler(t_LiveIndexWriterConfig *self)
        {
          ::org::apache::lucene::index::MergeScheduler result((jobject) NULL);
          OBJ_CALL(result = self->object.getMergeScheduler());
          return ::org::apache::lucene::index::t_MergeScheduler::wrap_Object(result);
        }

        static PyObject *t_LiveIndexWriterConfig_getMergedSegmentWarmer(t_LiveIndexWriterConfig *self)
        {
          ::org::apache::lucene::index::IndexWriter$IndexReaderWarmer result((jobject) NULL);
          OBJ_CALL(result = self->object.getMergedSegmentWarmer());
          return ::org::apache::lucene::index::t_IndexWriter$IndexReaderWarmer::wrap_Object(result);
        }

        static PyObject *t_LiveIndexWriterConfig_getOpenMode(t_LiveIndexWriterConfig *self)
        {
          ::org::apache::lucene::index::IndexWriterConfig$OpenMode result((jobject) NULL);
          OBJ_CALL(result = self->object.getOpenMode());
          return ::org::apache::lucene::index::t_IndexWriterConfig$OpenMode::wrap_Object(result);
        }

        static PyObject *t_LiveIndexWriterConfig_getRAMBufferSizeMB(t_LiveIndexWriterConfig *self)
        {
          jdouble result;
          OBJ_CALL(result = self->object.getRAMBufferSizeMB());
          return PyFloat_FromDouble((double) result);
        }

        static PyObject *t_LiveIndexWriterConfig_getRAMPerThreadHardLimitMB(t_LiveIndexWriterConfig *self)
        {
          jint result;
          OBJ_CALL(result = self->object.getRAMPerThreadHardLimitMB());
          return PyInt_FromLong((long) result);
        }

        static PyObject *t_LiveIndexWriterConfig_getReaderPooling(t_LiveIndexWriterConfig *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.getReaderPooling());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_LiveIndexWriterConfig_getReaderTermsIndexDivisor(t_LiveIndexWriterConfig *self)
        {
          jint result;
          OBJ_CALL(result = self->object.getReaderTermsIndexDivisor());
          return PyInt_FromLong((long) result);
        }

        static PyObject *t_LiveIndexWriterConfig_getSimilarity(t_LiveIndexWriterConfig *self)
        {
          ::org::apache::lucene::search::similarities::Similarity result((jobject) NULL);
          OBJ_CALL(result = self->object.getSimilarity());
          return ::org::apache::lucene::search::similarities::t_Similarity::wrap_Object(result);
        }

        static PyObject *t_LiveIndexWriterConfig_getTermIndexInterval(t_LiveIndexWriterConfig *self)
        {
          jint result;
          OBJ_CALL(result = self->object.getTermIndexInterval());
          return PyInt_FromLong((long) result);
        }

        static PyObject *t_LiveIndexWriterConfig_getUseCompoundFile(t_LiveIndexWriterConfig *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.getUseCompoundFile());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_LiveIndexWriterConfig_getWriteLockTimeout(t_LiveIndexWriterConfig *self)
        {
          jlong result;
          OBJ_CALL(result = self->object.getWriteLockTimeout());
          return PyLong_FromLongLong((PY_LONG_LONG) result);
        }

        static PyObject *t_LiveIndexWriterConfig_setCheckIntegrityAtMerge(t_LiveIndexWriterConfig *self, PyObject *arg)
        {
          jboolean a0;
          LiveIndexWriterConfig result((jobject) NULL);

          if (!parseArg(arg, "Z", &a0))
          {
            OBJ_CALL(result = self->object.setCheckIntegrityAtMerge(a0));
            return t_LiveIndexWriterConfig::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "setCheckIntegrityAtMerge", arg);
          return NULL;
        }

        static PyObject *t_LiveIndexWriterConfig_setMaxBufferedDeleteTerms(t_LiveIndexWriterConfig *self, PyObject *arg)
        {
          jint a0;
          LiveIndexWriterConfig result((jobject) NULL);

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(result = self->object.setMaxBufferedDeleteTerms(a0));
            return t_LiveIndexWriterConfig::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "setMaxBufferedDeleteTerms", arg);
          return NULL;
        }

        static PyObject *t_LiveIndexWriterConfig_setMaxBufferedDocs(t_LiveIndexWriterConfig *self, PyObject *arg)
        {
          jint a0;
          LiveIndexWriterConfig result((jobject) NULL);

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(result = self->object.setMaxBufferedDocs(a0));
            return t_LiveIndexWriterConfig::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "setMaxBufferedDocs", arg);
          return NULL;
        }

        static PyObject *t_LiveIndexWriterConfig_setMergedSegmentWarmer(t_LiveIndexWriterConfig *self, PyObject *arg)
        {
          ::org::apache::lucene::index::IndexWriter$IndexReaderWarmer a0((jobject) NULL);
          LiveIndexWriterConfig result((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::index::IndexWriter$IndexReaderWarmer::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.setMergedSegmentWarmer(a0));
            return t_LiveIndexWriterConfig::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "setMergedSegmentWarmer", arg);
          return NULL;
        }

        static PyObject *t_LiveIndexWriterConfig_setRAMBufferSizeMB(t_LiveIndexWriterConfig *self, PyObject *arg)
        {
          jdouble a0;
          LiveIndexWriterConfig result((jobject) NULL);

          if (!parseArg(arg, "D", &a0))
          {
            OBJ_CALL(result = self->object.setRAMBufferSizeMB(a0));
            return t_LiveIndexWriterConfig::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "setRAMBufferSizeMB", arg);
          return NULL;
        }

        static PyObject *t_LiveIndexWriterConfig_setReaderTermsIndexDivisor(t_LiveIndexWriterConfig *self, PyObject *arg)
        {
          jint a0;
          LiveIndexWriterConfig result((jobject) NULL);

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(result = self->object.setReaderTermsIndexDivisor(a0));
            return t_LiveIndexWriterConfig::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "setReaderTermsIndexDivisor", arg);
          return NULL;
        }

        static PyObject *t_LiveIndexWriterConfig_setTermIndexInterval(t_LiveIndexWriterConfig *self, PyObject *arg)
        {
          jint a0;
          LiveIndexWriterConfig result((jobject) NULL);

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(result = self->object.setTermIndexInterval(a0));
            return t_LiveIndexWriterConfig::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "setTermIndexInterval", arg);
          return NULL;
        }

        static PyObject *t_LiveIndexWriterConfig_setUseCompoundFile(t_LiveIndexWriterConfig *self, PyObject *arg)
        {
          jboolean a0;
          LiveIndexWriterConfig result((jobject) NULL);

          if (!parseArg(arg, "Z", &a0))
          {
            OBJ_CALL(result = self->object.setUseCompoundFile(a0));
            return t_LiveIndexWriterConfig::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "setUseCompoundFile", arg);
          return NULL;
        }

        static PyObject *t_LiveIndexWriterConfig_toString(t_LiveIndexWriterConfig *self, PyObject *args)
        {
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.toString());
            return j2p(result);
          }

          return callSuper(&PY_TYPE(LiveIndexWriterConfig), (PyObject *) self, "toString", args, 2);
        }

        static PyObject *t_LiveIndexWriterConfig_get__analyzer(t_LiveIndexWriterConfig *self, void *data)
        {
          ::org::apache::lucene::analysis::Analyzer value((jobject) NULL);
          OBJ_CALL(value = self->object.getAnalyzer());
          return ::org::apache::lucene::analysis::t_Analyzer::wrap_Object(value);
        }

        static PyObject *t_LiveIndexWriterConfig_get__checkIntegrityAtMerge(t_LiveIndexWriterConfig *self, void *data)
        {
          jboolean value;
          OBJ_CALL(value = self->object.getCheckIntegrityAtMerge());
          Py_RETURN_BOOL(value);
        }
        static int t_LiveIndexWriterConfig_set__checkIntegrityAtMerge(t_LiveIndexWriterConfig *self, PyObject *arg, void *data)
        {
          {
            jboolean value;
            if (!parseArg(arg, "Z", &value))
            {
              INT_CALL(self->object.setCheckIntegrityAtMerge(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "checkIntegrityAtMerge", arg);
          return -1;
        }

        static PyObject *t_LiveIndexWriterConfig_get__codec(t_LiveIndexWriterConfig *self, void *data)
        {
          ::org::apache::lucene::codecs::Codec value((jobject) NULL);
          OBJ_CALL(value = self->object.getCodec());
          return ::org::apache::lucene::codecs::t_Codec::wrap_Object(value);
        }

        static PyObject *t_LiveIndexWriterConfig_get__indexCommit(t_LiveIndexWriterConfig *self, void *data)
        {
          ::org::apache::lucene::index::IndexCommit value((jobject) NULL);
          OBJ_CALL(value = self->object.getIndexCommit());
          return ::org::apache::lucene::index::t_IndexCommit::wrap_Object(value);
        }

        static PyObject *t_LiveIndexWriterConfig_get__indexDeletionPolicy(t_LiveIndexWriterConfig *self, void *data)
        {
          ::org::apache::lucene::index::IndexDeletionPolicy value((jobject) NULL);
          OBJ_CALL(value = self->object.getIndexDeletionPolicy());
          return ::org::apache::lucene::index::t_IndexDeletionPolicy::wrap_Object(value);
        }

        static PyObject *t_LiveIndexWriterConfig_get__infoStream(t_LiveIndexWriterConfig *self, void *data)
        {
          ::org::apache::lucene::util::InfoStream value((jobject) NULL);
          OBJ_CALL(value = self->object.getInfoStream());
          return ::org::apache::lucene::util::t_InfoStream::wrap_Object(value);
        }

        static PyObject *t_LiveIndexWriterConfig_get__maxBufferedDeleteTerms(t_LiveIndexWriterConfig *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object.getMaxBufferedDeleteTerms());
          return PyInt_FromLong((long) value);
        }
        static int t_LiveIndexWriterConfig_set__maxBufferedDeleteTerms(t_LiveIndexWriterConfig *self, PyObject *arg, void *data)
        {
          {
            jint value;
            if (!parseArg(arg, "I", &value))
            {
              INT_CALL(self->object.setMaxBufferedDeleteTerms(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "maxBufferedDeleteTerms", arg);
          return -1;
        }

        static PyObject *t_LiveIndexWriterConfig_get__maxBufferedDocs(t_LiveIndexWriterConfig *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object.getMaxBufferedDocs());
          return PyInt_FromLong((long) value);
        }
        static int t_LiveIndexWriterConfig_set__maxBufferedDocs(t_LiveIndexWriterConfig *self, PyObject *arg, void *data)
        {
          {
            jint value;
            if (!parseArg(arg, "I", &value))
            {
              INT_CALL(self->object.setMaxBufferedDocs(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "maxBufferedDocs", arg);
          return -1;
        }

        static PyObject *t_LiveIndexWriterConfig_get__maxThreadStates(t_LiveIndexWriterConfig *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object.getMaxThreadStates());
          return PyInt_FromLong((long) value);
        }

        static PyObject *t_LiveIndexWriterConfig_get__mergePolicy(t_LiveIndexWriterConfig *self, void *data)
        {
          ::org::apache::lucene::index::MergePolicy value((jobject) NULL);
          OBJ_CALL(value = self->object.getMergePolicy());
          return ::org::apache::lucene::index::t_MergePolicy::wrap_Object(value);
        }

        static PyObject *t_LiveIndexWriterConfig_get__mergeScheduler(t_LiveIndexWriterConfig *self, void *data)
        {
          ::org::apache::lucene::index::MergeScheduler value((jobject) NULL);
          OBJ_CALL(value = self->object.getMergeScheduler());
          return ::org::apache::lucene::index::t_MergeScheduler::wrap_Object(value);
        }

        static PyObject *t_LiveIndexWriterConfig_get__mergedSegmentWarmer(t_LiveIndexWriterConfig *self, void *data)
        {
          ::org::apache::lucene::index::IndexWriter$IndexReaderWarmer value((jobject) NULL);
          OBJ_CALL(value = self->object.getMergedSegmentWarmer());
          return ::org::apache::lucene::index::t_IndexWriter$IndexReaderWarmer::wrap_Object(value);
        }
        static int t_LiveIndexWriterConfig_set__mergedSegmentWarmer(t_LiveIndexWriterConfig *self, PyObject *arg, void *data)
        {
          {
            ::org::apache::lucene::index::IndexWriter$IndexReaderWarmer value((jobject) NULL);
            if (!parseArg(arg, "k", ::org::apache::lucene::index::IndexWriter$IndexReaderWarmer::initializeClass, &value))
            {
              INT_CALL(self->object.setMergedSegmentWarmer(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "mergedSegmentWarmer", arg);
          return -1;
        }

        static PyObject *t_LiveIndexWriterConfig_get__openMode(t_LiveIndexWriterConfig *self, void *data)
        {
          ::org::apache::lucene::index::IndexWriterConfig$OpenMode value((jobject) NULL);
          OBJ_CALL(value = self->object.getOpenMode());
          return ::org::apache::lucene::index::t_IndexWriterConfig$OpenMode::wrap_Object(value);
        }

        static PyObject *t_LiveIndexWriterConfig_get__rAMBufferSizeMB(t_LiveIndexWriterConfig *self, void *data)
        {
          jdouble value;
          OBJ_CALL(value = self->object.getRAMBufferSizeMB());
          return PyFloat_FromDouble((double) value);
        }
        static int t_LiveIndexWriterConfig_set__rAMBufferSizeMB(t_LiveIndexWriterConfig *self, PyObject *arg, void *data)
        {
          {
            jdouble value;
            if (!parseArg(arg, "D", &value))
            {
              INT_CALL(self->object.setRAMBufferSizeMB(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "rAMBufferSizeMB", arg);
          return -1;
        }

        static PyObject *t_LiveIndexWriterConfig_get__rAMPerThreadHardLimitMB(t_LiveIndexWriterConfig *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object.getRAMPerThreadHardLimitMB());
          return PyInt_FromLong((long) value);
        }

        static PyObject *t_LiveIndexWriterConfig_get__readerPooling(t_LiveIndexWriterConfig *self, void *data)
        {
          jboolean value;
          OBJ_CALL(value = self->object.getReaderPooling());
          Py_RETURN_BOOL(value);
        }

        static PyObject *t_LiveIndexWriterConfig_get__readerTermsIndexDivisor(t_LiveIndexWriterConfig *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object.getReaderTermsIndexDivisor());
          return PyInt_FromLong((long) value);
        }
        static int t_LiveIndexWriterConfig_set__readerTermsIndexDivisor(t_LiveIndexWriterConfig *self, PyObject *arg, void *data)
        {
          {
            jint value;
            if (!parseArg(arg, "I", &value))
            {
              INT_CALL(self->object.setReaderTermsIndexDivisor(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "readerTermsIndexDivisor", arg);
          return -1;
        }

        static PyObject *t_LiveIndexWriterConfig_get__similarity(t_LiveIndexWriterConfig *self, void *data)
        {
          ::org::apache::lucene::search::similarities::Similarity value((jobject) NULL);
          OBJ_CALL(value = self->object.getSimilarity());
          return ::org::apache::lucene::search::similarities::t_Similarity::wrap_Object(value);
        }

        static PyObject *t_LiveIndexWriterConfig_get__termIndexInterval(t_LiveIndexWriterConfig *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object.getTermIndexInterval());
          return PyInt_FromLong((long) value);
        }
        static int t_LiveIndexWriterConfig_set__termIndexInterval(t_LiveIndexWriterConfig *self, PyObject *arg, void *data)
        {
          {
            jint value;
            if (!parseArg(arg, "I", &value))
            {
              INT_CALL(self->object.setTermIndexInterval(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "termIndexInterval", arg);
          return -1;
        }

        static PyObject *t_LiveIndexWriterConfig_get__useCompoundFile(t_LiveIndexWriterConfig *self, void *data)
        {
          jboolean value;
          OBJ_CALL(value = self->object.getUseCompoundFile());
          Py_RETURN_BOOL(value);
        }
        static int t_LiveIndexWriterConfig_set__useCompoundFile(t_LiveIndexWriterConfig *self, PyObject *arg, void *data)
        {
          {
            jboolean value;
            if (!parseArg(arg, "Z", &value))
            {
              INT_CALL(self->object.setUseCompoundFile(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "useCompoundFile", arg);
          return -1;
        }

        static PyObject *t_LiveIndexWriterConfig_get__writeLockTimeout(t_LiveIndexWriterConfig *self, void *data)
        {
          jlong value;
          OBJ_CALL(value = self->object.getWriteLockTimeout());
          return PyLong_FromLongLong((PY_LONG_LONG) value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/pt/PortugueseStemmer.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace pt {

          ::java::lang::Class *PortugueseStemmer::class$ = NULL;
          jmethodID *PortugueseStemmer::mids$ = NULL;
          bool PortugueseStemmer::live$ = false;

          jclass PortugueseStemmer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/pt/PortugueseStemmer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_stem_ec6430eb] = env->getMethodID(cls, "stem", "([CI)I");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          PortugueseStemmer::PortugueseStemmer() : ::org::apache::lucene::analysis::pt::RSLPStemmerBase(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          jint PortugueseStemmer::stem(const JArray< jchar > & a0, jint a1) const
          {
            return env->callIntMethod(this$, mids$[mid_stem_ec6430eb], a0.this$, a1);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace pt {
          static PyObject *t_PortugueseStemmer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PortugueseStemmer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_PortugueseStemmer_init_(t_PortugueseStemmer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_PortugueseStemmer_stem(t_PortugueseStemmer *self, PyObject *args);

          static PyMethodDef t_PortugueseStemmer__methods_[] = {
            DECLARE_METHOD(t_PortugueseStemmer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PortugueseStemmer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PortugueseStemmer, stem, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(PortugueseStemmer, t_PortugueseStemmer, ::org::apache::lucene::analysis::pt::RSLPStemmerBase, PortugueseStemmer, t_PortugueseStemmer_init_, 0, 0, 0, 0, 0);

          void t_PortugueseStemmer::install(PyObject *module)
          {
            installType(&PY_TYPE(PortugueseStemmer), module, "PortugueseStemmer", 0);
          }

          void t_PortugueseStemmer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(PortugueseStemmer).tp_dict, "class_", make_descriptor(PortugueseStemmer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(PortugueseStemmer).tp_dict, "wrapfn_", make_descriptor(t_PortugueseStemmer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(PortugueseStemmer).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_PortugueseStemmer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, PortugueseStemmer::initializeClass, 1)))
              return NULL;
            return t_PortugueseStemmer::wrap_Object(PortugueseStemmer(((t_PortugueseStemmer *) arg)->object.this$));
          }
          static PyObject *t_PortugueseStemmer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, PortugueseStemmer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_PortugueseStemmer_init_(t_PortugueseStemmer *self, PyObject *args, PyObject *kwds)
          {
            PortugueseStemmer object((jobject) NULL);

            INT_CALL(object = PortugueseStemmer());
            self->object = object;

            return 0;
          }

          static PyObject *t_PortugueseStemmer_stem(t_PortugueseStemmer *self, PyObject *args)
          {
            JArray< jchar > a0((jobject) NULL);
            jint a1;
            jint result;

            if (!parseArgs(args, "[CI", &a0, &a1))
            {
              OBJ_CALL(result = self->object.stem(a0, a1));
              return PyInt_FromLong((long) result);
            }

            PyErr_SetArgsError((PyObject *) self, "stem", args);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/store/Lock.h"
#include "java/io/Closeable.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {

        ::java::lang::Class *Lock::class$ = NULL;
        jmethodID *Lock::mids$ = NULL;
        bool Lock::live$ = false;
        jlong Lock::LOCK_OBTAIN_WAIT_FOREVER = (jlong) 0;
        jlong Lock::LOCK_POLL_INTERVAL = (jlong) 0;

        jclass Lock::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/store/Lock");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_close_54c6a166] = env->getMethodID(cls, "close", "()V");
            mids$[mid_isLocked_54c6a16a] = env->getMethodID(cls, "isLocked", "()Z");
            mids$[mid_obtain_54c6a16a] = env->getMethodID(cls, "obtain", "()Z");
            mids$[mid_obtain_0ee6df23] = env->getMethodID(cls, "obtain", "(J)Z");

            class$ = (::java::lang::Class *) new JObject(cls);
            cls = (jclass) class$->this$;

            LOCK_OBTAIN_WAIT_FOREVER = env->getStaticLongField(cls, "LOCK_OBTAIN_WAIT_FOREVER");
            LOCK_POLL_INTERVAL = env->getStaticLongField(cls, "LOCK_POLL_INTERVAL");
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        Lock::Lock() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        void Lock::close() const
        {
          env->callVoidMethod(this$, mids$[mid_close_54c6a166]);
        }

        jboolean Lock::isLocked() const
        {
          return env->callBooleanMethod(this$, mids$[mid_isLocked_54c6a16a]);
        }

        jboolean Lock::obtain() const
        {
          return env->callBooleanMethod(this$, mids$[mid_obtain_54c6a16a]);
        }

        jboolean Lock::obtain(jlong a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_obtain_0ee6df23], a0);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"
#include "org/apache/lucene/store/Lock$With.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {
        static PyObject *t_Lock_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_Lock_instance_(PyTypeObject *type, PyObject *arg);
        static int t_Lock_init_(t_Lock *self, PyObject *args, PyObject *kwds);
        static PyObject *t_Lock_close(t_Lock *self);
        static PyObject *t_Lock_isLocked(t_Lock *self);
        static PyObject *t_Lock_obtain(t_Lock *self, PyObject *args);
        static PyObject *t_Lock_get__locked(t_Lock *self, void *data);
        static PyGetSetDef t_Lock__fields_[] = {
          DECLARE_GET_FIELD(t_Lock, locked),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_Lock__methods_[] = {
          DECLARE_METHOD(t_Lock, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_Lock, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_Lock, close, METH_NOARGS),
          DECLARE_METHOD(t_Lock, isLocked, METH_NOARGS),
          DECLARE_METHOD(t_Lock, obtain, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(Lock, t_Lock, ::java::lang::Object, Lock, t_Lock_init_, 0, 0, t_Lock__fields_, 0, 0);

        void t_Lock::install(PyObject *module)
        {
          installType(&PY_TYPE(Lock), module, "Lock", 0);
          PyDict_SetItemString(PY_TYPE(Lock).tp_dict, "With", make_descriptor(&PY_TYPE(Lock$With)));
        }

        void t_Lock::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(Lock).tp_dict, "class_", make_descriptor(Lock::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(Lock).tp_dict, "wrapfn_", make_descriptor(t_Lock::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(Lock).tp_dict, "boxfn_", make_descriptor(boxObject));
          env->getClass(Lock::initializeClass);
          PyDict_SetItemString(PY_TYPE(Lock).tp_dict, "LOCK_OBTAIN_WAIT_FOREVER", make_descriptor(Lock::LOCK_OBTAIN_WAIT_FOREVER));
          PyDict_SetItemString(PY_TYPE(Lock).tp_dict, "LOCK_POLL_INTERVAL", make_descriptor(Lock::LOCK_POLL_INTERVAL));
        }

        static PyObject *t_Lock_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, Lock::initializeClass, 1)))
            return NULL;
          return t_Lock::wrap_Object(Lock(((t_Lock *) arg)->object.this$));
        }
        static PyObject *t_Lock_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, Lock::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_Lock_init_(t_Lock *self, PyObject *args, PyObject *kwds)
        {
          Lock object((jobject) NULL);

          INT_CALL(object = Lock());
          self->object = object;

          return 0;
        }

        static PyObject *t_Lock_close(t_Lock *self)
        {
          OBJ_CALL(self->object.close());
          Py_RETURN_NONE;
        }

        static PyObject *t_Lock_isLocked(t_Lock *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.isLocked());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_Lock_obtain(t_Lock *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 0:
            {
              jboolean result;
              OBJ_CALL(result = self->object.obtain());
              Py_RETURN_BOOL(result);
            }
            break;
           case 1:
            {
              jlong a0;
              jboolean result;

              if (!parseArgs(args, "J", &a0))
              {
                OBJ_CALL(result = self->object.obtain(a0));
                Py_RETURN_BOOL(result);
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "obtain", args);
          return NULL;
        }

        static PyObject *t_Lock_get__locked(t_Lock *self, void *data)
        {
          jboolean value;
          OBJ_CALL(value = self->object.isLocked());
          Py_RETURN_BOOL(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/IndexSearcher.h"
#include "org/apache/lucene/search/Weight.h"
#include "org/apache/lucene/search/TermStatistics.h"
#include "org/apache/lucene/index/IndexReaderContext.h"
#include "org/apache/lucene/index/TermContext.h"
#include "org/apache/lucene/search/TopFieldDocs.h"
#include "java/lang/String.h"
#include "org/apache/lucene/search/Explanation.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/document/Document.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/search/Collector.h"
#include "org/apache/lucene/index/Term.h"
#include "java/util/Set.h"
#include "org/apache/lucene/search/ScoreDoc.h"
#include "org/apache/lucene/search/CollectionStatistics.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "org/apache/lucene/search/Filter.h"
#include "org/apache/lucene/search/Query.h"
#include "org/apache/lucene/search/similarities/Similarity.h"
#include "java/util/concurrent/ExecutorService.h"
#include "org/apache/lucene/search/Sort.h"
#include "org/apache/lucene/index/StoredFieldVisitor.h"
#include "org/apache/lucene/search/TopDocs.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *IndexSearcher::class$ = NULL;
        jmethodID *IndexSearcher::mids$ = NULL;
        bool IndexSearcher::live$ = false;

        jclass IndexSearcher::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/IndexSearcher");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_7d7eaea9] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/IndexReader;)V");
            mids$[mid_init$_4df5686b] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/IndexReaderContext;)V");
            mids$[mid_init$_b62f0212] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/IndexReaderContext;Ljava/util/concurrent/ExecutorService;)V");
            mids$[mid_init$_17c46694] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/IndexReader;Ljava/util/concurrent/ExecutorService;)V");
            mids$[mid_collectionStatistics_3acb4b2e] = env->getMethodID(cls, "collectionStatistics", "(Ljava/lang/String;)Lorg/apache/lucene/search/CollectionStatistics;");
            mids$[mid_createNormalizedWeight_fd935220] = env->getMethodID(cls, "createNormalizedWeight", "(Lorg/apache/lucene/search/Query;)Lorg/apache/lucene/search/Weight;");
            mids$[mid_doc_9c2cfcf9] = env->getMethodID(cls, "doc", "(I)Lorg/apache/lucene/document/Document;");
            mids$[mid_doc_f65cb155] = env->getMethodID(cls, "doc", "(ILjava/util/Set;)Lorg/apache/lucene/document/Document;");
            mids$[mid_doc_a2ea3ebe] = env->getMethodID(cls, "doc", "(ILorg/apache/lucene/index/StoredFieldVisitor;)V");
            mids$[mid_document_f65cb155] = env->getMethodID(cls, "document", "(ILjava/util/Set;)Lorg/apache/lucene/document/Document;");
            mids$[mid_explain_5241f7f4] = env->getMethodID(cls, "explain", "(Lorg/apache/lucene/search/Query;I)Lorg/apache/lucene/search/Explanation;");
            mids$[mid_getDefaultSimilarity_efcb1233] = env->getStaticMethodID(cls, "getDefaultSimilarity", "()Lorg/apache/lucene/search/similarities/Similarity;");
            mids$[mid_getIndexReader_94bbd010] = env->getMethodID(cls, "getIndexReader", "()Lorg/apache/lucene/index/IndexReader;");
            mids$[mid_getSimilarity_efcb1233] = env->getMethodID(cls, "getSimilarity", "()Lorg/apache/lucene/search/similarities/Similarity;");
            mids$[mid_getTopReaderContext_5823c99a] = env->getMethodID(cls, "getTopReaderContext", "()Lorg/apache/lucene/index/IndexReaderContext;");
            mids$[mid_rewrite_b1155c95] = env->getMethodID(cls, "rewrite", "(Lorg/apache/lucene/search/Query;)Lorg/apache/lucene/search/Query;");
            mids$[mid_search_01552069] = env->getMethodID(cls, "search", "(Lorg/apache/lucene/search/Query;Lorg/apache/lucene/search/Collector;)V");
            mids$[mid_search_5e8d6ed3] = env->getMethodID(cls, "search", "(Lorg/apache/lucene/search/Query;I)Lorg/apache/lucene/search/TopDocs;");
            mids$[mid_search_d8b721b3] = env->getMethodID(cls, "search", "(Lorg/apache/lucene/search/Query;Lorg/apache/lucene/search/Filter;Lorg/apache/lucene/search/Collector;)V");
            mids$[mid_search_8e69de9d] = env->getMethodID(cls, "search", "(Lorg/apache/lucene/search/Query;Lorg/apache/lucene/search/Filter;I)Lorg/apache/lucene/search/TopDocs;");
            mids$[mid_search_9a382bd2] = env->getMethodID(cls, "search", "(Lorg/apache/lucene/search/Query;ILorg/apache/lucene/search/Sort;)Lorg/apache/lucene/search/TopFieldDocs;");
            mids$[mid_search_e8c6fc04] = env->getMethodID(cls, "search", "(Lorg/apache/lucene/search/Query;Lorg/apache/lucene/search/Filter;ILorg/apache/lucene/search/Sort;)Lorg/apache/lucene/search/TopFieldDocs;");
            mids$[mid_search_e0d35976] = env->getMethodID(cls, "search", "(Lorg/apache/lucene/search/Query;Lorg/apache/lucene/search/Filter;ILorg/apache/lucene/search/Sort;ZZ)Lorg/apache/lucene/search/TopFieldDocs;");
            mids$[mid_searchAfter_131bd79f] = env->getMethodID(cls, "searchAfter", "(Lorg/apache/lucene/search/ScoreDoc;Lorg/apache/lucene/search/Query;I)Lorg/apache/lucene/search/TopDocs;");
            mids$[mid_searchAfter_fb33e921] = env->getMethodID(cls, "searchAfter", "(Lorg/apache/lucene/search/ScoreDoc;Lorg/apache/lucene/search/Query;ILorg/apache/lucene/search/Sort;)Lorg/apache/lucene/search/TopDocs;");
            mids$[mid_searchAfter_86183cf1] = env->getMethodID(cls, "searchAfter", "(Lorg/apache/lucene/search/ScoreDoc;Lorg/apache/lucene/search/Query;Lorg/apache/lucene/search/Filter;I)Lorg/apache/lucene/search/TopDocs;");
            mids$[mid_searchAfter_59c01c23] = env->getMethodID(cls, "searchAfter", "(Lorg/apache/lucene/search/ScoreDoc;Lorg/apache/lucene/search/Query;Lorg/apache/lucene/search/Filter;ILorg/apache/lucene/search/Sort;)Lorg/apache/lucene/search/TopDocs;");
            mids$[mid_searchAfter_3f95b001] = env->getMethodID(cls, "searchAfter", "(Lorg/apache/lucene/search/ScoreDoc;Lorg/apache/lucene/search/Query;Lorg/apache/lucene/search/Filter;ILorg/apache/lucene/search/Sort;ZZ)Lorg/apache/lucene/search/TopDocs;");
            mids$[mid_setSimilarity_3b778066] = env->getMethodID(cls, "setSimilarity", "(Lorg/apache/lucene/search/similarities/Similarity;)V");
            mids$[mid_termStatistics_699f82fc] = env->getMethodID(cls, "termStatistics", "(Lorg/apache/lucene/index/Term;Lorg/apache/lucene/index/TermContext;)Lorg/apache/lucene/search/TermStatistics;");
            mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");
            mids$[mid_search_d30ddef1] = env->getMethodID(cls, "search", "(Ljava/util/List;Lorg/apache/lucene/search/Weight;Lorg/apache/lucene/search/Collector;)V");
            mids$[mid_search_8ccf64e3] = env->getMethodID(cls, "search", "(Ljava/util/List;Lorg/apache/lucene/search/Weight;Lorg/apache/lucene/search/FieldDoc;ILorg/apache/lucene/search/Sort;ZZZ)Lorg/apache/lucene/search/TopFieldDocs;");
            mids$[mid_search_ec76ede8] = env->getMethodID(cls, "search", "(Lorg/apache/lucene/search/Weight;Lorg/apache/lucene/search/FieldDoc;ILorg/apache/lucene/search/Sort;ZZZ)Lorg/apache/lucene/search/TopFieldDocs;");
            mids$[mid_search_1352a6c3] = env->getMethodID(cls, "search", "(Lorg/apache/lucene/search/Weight;ILorg/apache/lucene/search/Sort;ZZ)Lorg/apache/lucene/search/TopFieldDocs;");
            mids$[mid_search_4d4907ad] = env->getMethodID(cls, "search", "(Ljava/util/List;Lorg/apache/lucene/search/Weight;Lorg/apache/lucene/search/ScoreDoc;I)Lorg/apache/lucene/search/TopDocs;");
            mids$[mid_search_5b056f10] = env->getMethodID(cls, "search", "(Lorg/apache/lucene/search/Weight;Lorg/apache/lucene/search/ScoreDoc;I)Lorg/apache/lucene/search/TopDocs;");
            mids$[mid_explain_423d06cb] = env->getMethodID(cls, "explain", "(Lorg/apache/lucene/search/Weight;I)Lorg/apache/lucene/search/Explanation;");
            mids$[mid_slices_240d90fc] = env->getMethodID(cls, "slices", "(Ljava/util/List;)[Lorg/apache/lucene/search/IndexSearcher$LeafSlice;");
            mids$[mid_wrapFilter_d642d32f] = env->getMethodID(cls, "wrapFilter", "(Lorg/apache/lucene/search/Query;Lorg/apache/lucene/search/Filter;)Lorg/apache/lucene/search/Query;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        IndexSearcher::IndexSearcher(const ::org::apache::lucene::index::IndexReader & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_7d7eaea9, a0.this$)) {}

        IndexSearcher::IndexSearcher(const ::org::apache::lucene::index::IndexReaderContext & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_4df5686b, a0.this$)) {}

        IndexSearcher::IndexSearcher(const ::org::apache::lucene::index::IndexReaderContext & a0, const ::java::util::concurrent::ExecutorService & a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_b62f0212, a0.this$, a1.this$)) {}

        IndexSearcher::IndexSearcher(const ::org::apache::lucene::index::IndexReader & a0, const ::java::util::concurrent::ExecutorService & a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_17c46694, a0.this$, a1.this$)) {}

        ::org::apache::lucene::search::CollectionStatistics IndexSearcher::collectionStatistics(const ::java::lang::String & a0) const
        {
          return ::org::apache::lucene::search::CollectionStatistics(env->callObjectMethod(this$, mids$[mid_collectionStatistics_3acb4b2e], a0.this$));
        }

        ::org::apache::lucene::search::Weight IndexSearcher::createNormalizedWeight(const ::org::apache::lucene::search::Query & a0) const
        {
          return ::org::apache::lucene::search::Weight(env->callObjectMethod(this$, mids$[mid_createNormalizedWeight_fd935220], a0.this$));
        }

        ::org::apache::lucene::document::Document IndexSearcher::doc(jint a0) const
        {
          return ::org::apache::lucene::document::Document(env->callObjectMethod(this$, mids$[mid_doc_9c2cfcf9], a0));
        }

        ::org::apache::lucene::document::Document IndexSearcher::doc(jint a0, const ::java::util::Set & a1) const
        {
          return ::org::apache::lucene::document::Document(env->callObjectMethod(this$, mids$[mid_doc_f65cb155], a0, a1.this$));
        }

        void IndexSearcher::doc(jint a0, const ::org::apache::lucene::index::StoredFieldVisitor & a1) const
        {
          env->callVoidMethod(this$, mids$[mid_doc_a2ea3ebe], a0, a1.this$);
        }

        ::org::apache::lucene::document::Document IndexSearcher::document(jint a0, const ::java::util::Set & a1) const
        {
          return ::org::apache::lucene::document::Document(env->callObjectMethod(this$, mids$[mid_document_f65cb155], a0, a1.this$));
        }

        ::org::apache::lucene::search::Explanation IndexSearcher::explain(const ::org::apache::lucene::search::Query & a0, jint a1) const
        {
          return ::org::apache::lucene::search::Explanation(env->callObjectMethod(this$, mids$[mid_explain_5241f7f4], a0.this$, a1));
        }

        ::org::apache::lucene::search::similarities::Similarity IndexSearcher::getDefaultSimilarity()
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::search::similarities::Similarity(env->callStaticObjectMethod(cls, mids$[mid_getDefaultSimilarity_efcb1233]));
        }

        ::org::apache::lucene::index::IndexReader IndexSearcher::getIndexReader() const
        {
          return ::org::apache::lucene::index::IndexReader(env->callObjectMethod(this$, mids$[mid_getIndexReader_94bbd010]));
        }

        ::org::apache::lucene::search::similarities::Similarity IndexSearcher::getSimilarity() const
        {
          return ::org::apache::lucene::search::similarities::Similarity(env->callObjectMethod(this$, mids$[mid_getSimilarity_efcb1233]));
        }

        ::org::apache::lucene::index::IndexReaderContext IndexSearcher::getTopReaderContext() const
        {
          return ::org::apache::lucene::index::IndexReaderContext(env->callObjectMethod(this$, mids$[mid_getTopReaderContext_5823c99a]));
        }

        ::org::apache::lucene::search::Query IndexSearcher::rewrite(const ::org::apache::lucene::search::Query & a0) const
        {
          return ::org::apache::lucene::search::Query(env->callObjectMethod(this$, mids$[mid_rewrite_b1155c95], a0.this$));
        }

        void IndexSearcher::search(const ::org::apache::lucene::search::Query & a0, const ::org::apache::lucene::search::Collector & a1) const
        {
          env->callVoidMethod(this$, mids$[mid_search_01552069], a0.this$, a1.this$);
        }

        ::org::apache::lucene::search::TopDocs IndexSearcher::search(const ::org::apache::lucene::search::Query & a0, jint a1) const
        {
          return ::org::apache::lucene::search::TopDocs(env->callObjectMethod(this$, mids$[mid_search_5e8d6ed3], a0.this$, a1));
        }

        void IndexSearcher::search(const ::org::apache::lucene::search::Query & a0, const ::org::apache::lucene::search::Filter & a1, const ::org::apache::lucene::search::Collector & a2) const
        {
          env->callVoidMethod(this$, mids$[mid_search_d8b721b3], a0.this$, a1.this$, a2.this$);
        }

        ::org::apache::lucene::search::TopDocs IndexSearcher::search(const ::org::apache::lucene::search::Query & a0, const ::org::apache::lucene::search::Filter & a1, jint a2) const
        {
          return ::org::apache::lucene::search::TopDocs(env->callObjectMethod(this$, mids$[mid_search_8e69de9d], a0.this$, a1.this$, a2));
        }

        ::org::apache::lucene::search::TopFieldDocs IndexSearcher::search(const ::org::apache::lucene::search::Query & a0, jint a1, const ::org::apache::lucene::search::Sort & a2) const
        {
          return ::org::apache::lucene::search::TopFieldDocs(env->callObjectMethod(this$, mids$[mid_search_9a382bd2], a0.this$, a1, a2.this$));
        }

        ::org::apache::lucene::search::TopFieldDocs IndexSearcher::search(const ::org::apache::lucene::search::Query & a0, const ::org::apache::lucene::search::Filter & a1, jint a2, const ::org::apache::lucene::search::Sort & a3) const
        {
          return ::org::apache::lucene::search::TopFieldDocs(env->callObjectMethod(this$, mids$[mid_search_e8c6fc04], a0.this$, a1.this$, a2, a3.this$));
        }

        ::org::apache::lucene::search::TopFieldDocs IndexSearcher::search(const ::org::apache::lucene::search::Query & a0, const ::org::apache::lucene::search::Filter & a1, jint a2, const ::org::apache::lucene::search::Sort & a3, jboolean a4, jboolean a5) const
        {
          return ::org::apache::lucene::search::TopFieldDocs(env->callObjectMethod(this$, mids$[mid_search_e0d35976], a0.this$, a1.this$, a2, a3.this$, a4, a5));
        }

        ::org::apache::lucene::search::TopDocs IndexSearcher::searchAfter(const ::org::apache::lucene::search::ScoreDoc & a0, const ::org::apache::lucene::search::Query & a1, jint a2) const
        {
          return ::org::apache::lucene::search::TopDocs(env->callObjectMethod(this$, mids$[mid_searchAfter_131bd79f], a0.this$, a1.this$, a2));
        }

        ::org::apache::lucene::search::TopDocs IndexSearcher::searchAfter(const ::org::apache::lucene::search::ScoreDoc & a0, const ::org::apache::lucene::search::Query & a1, jint a2, const ::org::apache::lucene::search::Sort & a3) const
        {
          return ::org::apache::lucene::search::TopDocs(env->callObjectMethod(this$, mids$[mid_searchAfter_fb33e921], a0.this$, a1.this$, a2, a3.this$));
        }

        ::org::apache::lucene::search::TopDocs IndexSearcher::searchAfter(const ::org::apache::lucene::search::ScoreDoc & a0, const ::org::apache::lucene::search::Query & a1, const ::org::apache::lucene::search::Filter & a2, jint a3) const
        {
          return ::org::apache::lucene::search::TopDocs(env->callObjectMethod(this$, mids$[mid_searchAfter_86183cf1], a0.this$, a1.this$, a2.this$, a3));
        }

        ::org::apache::lucene::search::TopDocs IndexSearcher::searchAfter(const ::org::apache::lucene::search::ScoreDoc & a0, const ::org::apache::lucene::search::Query & a1, const ::org::apache::lucene::search::Filter & a2, jint a3, const ::org::apache::lucene::search::Sort & a4) const
        {
          return ::org::apache::lucene::search::TopDocs(env->callObjectMethod(this$, mids$[mid_searchAfter_59c01c23], a0.this$, a1.this$, a2.this$, a3, a4.this$));
        }

        ::org::apache::lucene::search::TopDocs IndexSearcher::searchAfter(const ::org::apache::lucene::search::ScoreDoc & a0, const ::org::apache::lucene::search::Query & a1, const ::org::apache::lucene::search::Filter & a2, jint a3, const ::org::apache::lucene::search::Sort & a4, jboolean a5, jboolean a6) const
        {
          return ::org::apache::lucene::search::TopDocs(env->callObjectMethod(this$, mids$[mid_searchAfter_3f95b001], a0.this$, a1.this$, a2.this$, a3, a4.this$, a5, a6));
        }

        void IndexSearcher::setSimilarity(const ::org::apache::lucene::search::similarities::Similarity & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setSimilarity_3b778066], a0.this$);
        }

        ::org::apache::lucene::search::TermStatistics IndexSearcher::termStatistics(const ::org::apache::lucene::index::Term & a0, const ::org::apache::lucene::index::TermContext & a1) const
        {
          return ::org::apache::lucene::search::TermStatistics(env->callObjectMethod(this$, mids$[mid_termStatistics_699f82fc], a0.this$, a1.this$));
        }

        ::java::lang::String IndexSearcher::toString() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"
#include "org/apache/lucene/search/IndexSearcher$LeafSlice.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_IndexSearcher_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_IndexSearcher_instance_(PyTypeObject *type, PyObject *arg);
        static int t_IndexSearcher_init_(t_IndexSearcher *self, PyObject *args, PyObject *kwds);
        static PyObject *t_IndexSearcher_collectionStatistics(t_IndexSearcher *self, PyObject *arg);
        static PyObject *t_IndexSearcher_createNormalizedWeight(t_IndexSearcher *self, PyObject *arg);
        static PyObject *t_IndexSearcher_doc(t_IndexSearcher *self, PyObject *args);
        static PyObject *t_IndexSearcher_document(t_IndexSearcher *self, PyObject *args);
        static PyObject *t_IndexSearcher_explain(t_IndexSearcher *self, PyObject *args);
        static PyObject *t_IndexSearcher_getDefaultSimilarity(PyTypeObject *type);
        static PyObject *t_IndexSearcher_getIndexReader(t_IndexSearcher *self);
        static PyObject *t_IndexSearcher_getSimilarity(t_IndexSearcher *self);
        static PyObject *t_IndexSearcher_getTopReaderContext(t_IndexSearcher *self);
        static PyObject *t_IndexSearcher_rewrite(t_IndexSearcher *self, PyObject *arg);
        static PyObject *t_IndexSearcher_search(t_IndexSearcher *self, PyObject *args);
        static PyObject *t_IndexSearcher_searchAfter(t_IndexSearcher *self, PyObject *args);
        static PyObject *t_IndexSearcher_setSimilarity(t_IndexSearcher *self, PyObject *arg);
        static PyObject *t_IndexSearcher_termStatistics(t_IndexSearcher *self, PyObject *args);
        static PyObject *t_IndexSearcher_toString(t_IndexSearcher *self, PyObject *args);
        static PyObject *t_IndexSearcher_get__defaultSimilarity(t_IndexSearcher *self, void *data);
        static PyObject *t_IndexSearcher_get__indexReader(t_IndexSearcher *self, void *data);
        static PyObject *t_IndexSearcher_get__similarity(t_IndexSearcher *self, void *data);
        static int t_IndexSearcher_set__similarity(t_IndexSearcher *self, PyObject *arg, void *data);
        static PyObject *t_IndexSearcher_get__topReaderContext(t_IndexSearcher *self, void *data);
        static PyGetSetDef t_IndexSearcher__fields_[] = {
          DECLARE_GET_FIELD(t_IndexSearcher, defaultSimilarity),
          DECLARE_GET_FIELD(t_IndexSearcher, indexReader),
          DECLARE_GETSET_FIELD(t_IndexSearcher, similarity),
          DECLARE_GET_FIELD(t_IndexSearcher, topReaderContext),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_IndexSearcher__methods_[] = {
          DECLARE_METHOD(t_IndexSearcher, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_IndexSearcher, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_IndexSearcher, collectionStatistics, METH_O),
          DECLARE_METHOD(t_IndexSearcher, createNormalizedWeight, METH_O),
          DECLARE_METHOD(t_IndexSearcher, doc, METH_VARARGS),
          DECLARE_METHOD(t_IndexSearcher, document, METH_VARARGS),
          DECLARE_METHOD(t_IndexSearcher, explain, METH_VARARGS),
          DECLARE_METHOD(t_IndexSearcher, getDefaultSimilarity, METH_NOARGS | METH_CLASS),
          DECLARE_METHOD(t_IndexSearcher, getIndexReader, METH_NOARGS),
          DECLARE_METHOD(t_IndexSearcher, getSimilarity, METH_NOARGS),
          DECLARE_METHOD(t_IndexSearcher, getTopReaderContext, METH_NOARGS),
          DECLARE_METHOD(t_IndexSearcher, rewrite, METH_O),
          DECLARE_METHOD(t_IndexSearcher, search, METH_VARARGS),
          DECLARE_METHOD(t_IndexSearcher, searchAfter, METH_VARARGS),
          DECLARE_METHOD(t_IndexSearcher, setSimilarity, METH_O),
          DECLARE_METHOD(t_IndexSearcher, termStatistics, METH_VARARGS),
          DECLARE_METHOD(t_IndexSearcher, toString, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(IndexSearcher, t_IndexSearcher, ::java::lang::Object, IndexSearcher, t_IndexSearcher_init_, 0, 0, t_IndexSearcher__fields_, 0, 0);

        void t_IndexSearcher::install(PyObject *module)
        {
          installType(&PY_TYPE(IndexSearcher), module, "IndexSearcher", 0);
          PyDict_SetItemString(PY_TYPE(IndexSearcher).tp_dict, "LeafSlice", make_descriptor(&PY_TYPE(IndexSearcher$LeafSlice)));
        }

        void t_IndexSearcher::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(IndexSearcher).tp_dict, "class_", make_descriptor(IndexSearcher::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(IndexSearcher).tp_dict, "wrapfn_", make_descriptor(t_IndexSearcher::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(IndexSearcher).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_IndexSearcher_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, IndexSearcher::initializeClass, 1)))
            return NULL;
          return t_IndexSearcher::wrap_Object(IndexSearcher(((t_IndexSearcher *) arg)->object.this$));
        }
        static PyObject *t_IndexSearcher_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, IndexSearcher::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_IndexSearcher_init_(t_IndexSearcher *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
              IndexSearcher object((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::index::IndexReader::initializeClass, &a0))
              {
                INT_CALL(object = IndexSearcher(a0));
                self->object = object;
                break;
              }
            }
            {
              ::org::apache::lucene::index::IndexReaderContext a0((jobject) NULL);
              IndexSearcher object((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::index::IndexReaderContext::initializeClass, &a0))
              {
                INT_CALL(object = IndexSearcher(a0));
                self->object = object;
                break;
              }
            }
            goto err;
           case 2:
            {
              ::org::apache::lucene::index::IndexReaderContext a0((jobject) NULL);
              ::java::util::concurrent::ExecutorService a1((jobject) NULL);
              IndexSearcher object((jobject) NULL);

              if (!parseArgs(args, "kk", ::org::apache::lucene::index::IndexReaderContext::initializeClass, ::java::util::concurrent::ExecutorService::initializeClass, &a0, &a1))
              {
                INT_CALL(object = IndexSearcher(a0, a1));
                self->object = object;
                break;
              }
            }
            {
              ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
              ::java::util::concurrent::ExecutorService a1((jobject) NULL);
              IndexSearcher object((jobject) NULL);

              if (!parseArgs(args, "kk", ::org::apache::lucene::index::IndexReader::initializeClass, ::java::util::concurrent::ExecutorService::initializeClass, &a0, &a1))
              {
                INT_CALL(object = IndexSearcher(a0, a1));
                self->object = object;
                break;
              }
            }
           default:
           err:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_IndexSearcher_collectionStatistics(t_IndexSearcher *self, PyObject *arg)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::search::CollectionStatistics result((jobject) NULL);

          if (!parseArg(arg, "s", &a0))
          {
            OBJ_CALL(result = self->object.collectionStatistics(a0));
            return ::org::apache::lucene::search::t_CollectionStatistics::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "collectionStatistics", arg);
          return NULL;
        }

        static PyObject *t_IndexSearcher_createNormalizedWeight(t_IndexSearcher *self, PyObject *arg)
        {
          ::org::apache::lucene::search::Query a0((jobject) NULL);
          ::org::apache::lucene::search::Weight result((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::search::Query::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.createNormalizedWeight(a0));
            return ::org::apache::lucene::search::t_Weight::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "createNormalizedWeight", arg);
          return NULL;
        }

        static PyObject *t_IndexSearcher_doc(t_IndexSearcher *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              jint a0;
              ::org::apache::lucene::document::Document result((jobject) NULL);

              if (!parseArgs(args, "I", &a0))
              {
                OBJ_CALL(result = self->object.doc(a0));
                return ::org::apache::lucene::document::t_Document::wrap_Object(result);
              }
            }
            break;
           case 2:
            {
              jint a0;
              ::java::util::Set a1((jobject) NULL);
              PyTypeObject **p1;
              ::org::apache::lucene::document::Document result((jobject) NULL);

              if (!parseArgs(args, "IK", ::java::util::Set::initializeClass, &a0, &a1, &p1, ::java::util::t_Set::parameters_))
              {
                OBJ_CALL(result = self->object.doc(a0, a1));
                return ::org::apache::lucene::document::t_Document::wrap_Object(result);
              }
            }
            {
              jint a0;
              ::org::apache::lucene::index::StoredFieldVisitor a1((jobject) NULL);

              if (!parseArgs(args, "Ik", ::org::apache::lucene::index::StoredFieldVisitor::initializeClass, &a0, &a1))
              {
                OBJ_CALL(self->object.doc(a0, a1));
                Py_RETURN_NONE;
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "doc", args);
          return NULL;
        }

        static PyObject *t_IndexSearcher_document(t_IndexSearcher *self, PyObject *args)
        {
          jint a0;
          ::java::util::Set a1((jobject) NULL);
          PyTypeObject **p1;
          ::org::apache::lucene::document::Document result((jobject) NULL);

          if (!parseArgs(args, "IK", ::java::util::Set::initializeClass, &a0, &a1, &p1, ::java::util::t_Set::parameters_))
          {
            OBJ_CALL(result = self->object.document(a0, a1));
            return ::org::apache::lucene::document::t_Document::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "document", args);
          return NULL;
        }

        static PyObject *t_IndexSearcher_explain(t_IndexSearcher *self, PyObject *args)
        {
          ::org::apache::lucene::search::Query a0((jobject) NULL);
          jint a1;
          ::org::apache::lucene::search::Explanation result((jobject) NULL);

          if (!parseArgs(args, "kI", ::org::apache::lucene::search::Query::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = self->object.explain(a0, a1));
            return ::org::apache::lucene::search::t_Explanation::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "explain", args);
          return NULL;
        }

        static PyObject *t_IndexSearcher_getDefaultSimilarity(PyTypeObject *type)
        {
          ::org::apache::lucene::search::similarities::Similarity result((jobject) NULL);
          OBJ_CALL(result = ::org::apache::lucene::search::IndexSearcher::getDefaultSimilarity());
          return ::org::apache::lucene::search::similarities::t_Similarity::wrap_Object(result);
        }

        static PyObject *t_IndexSearcher_getIndexReader(t_IndexSearcher *self)
        {
          ::org::apache::lucene::index::IndexReader result((jobject) NULL);
          OBJ_CALL(result = self->object.getIndexReader());
          return ::org::apache::lucene::index::t_IndexReader::wrap_Object(result);
        }

        static PyObject *t_IndexSearcher_getSimilarity(t_IndexSearcher *self)
        {
          ::org::apache::lucene::search::similarities::Similarity result((jobject) NULL);
          OBJ_CALL(result = self->object.getSimilarity());
          return ::org::apache::lucene::search::similarities::t_Similarity::wrap_Object(result);
        }

        static PyObject *t_IndexSearcher_getTopReaderContext(t_IndexSearcher *self)
        {
          ::org::apache::lucene::index::IndexReaderContext result((jobject) NULL);
          OBJ_CALL(result = self->object.getTopReaderContext());
          return ::org::apache::lucene::index::t_IndexReaderContext::wrap_Object(result);
        }

        static PyObject *t_IndexSearcher_rewrite(t_IndexSearcher *self, PyObject *arg)
        {
          ::org::apache::lucene::search::Query a0((jobject) NULL);
          ::org::apache::lucene::search::Query result((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::search::Query::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.rewrite(a0));
            return ::org::apache::lucene::search::t_Query::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "rewrite", arg);
          return NULL;
        }

        static PyObject *t_IndexSearcher_search(t_IndexSearcher *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 2:
            {
              ::org::apache::lucene::search::Query a0((jobject) NULL);
              ::org::apache::lucene::search::Collector a1((jobject) NULL);

              if (!parseArgs(args, "kk", ::org::apache::lucene::search::Query::initializeClass, ::org::apache::lucene::search::Collector::initializeClass, &a0, &a1))
              {
                OBJ_CALL(self->object.search(a0, a1));
                Py_RETURN_NONE;
              }
            }
            {
              ::org::apache::lucene::search::Query a0((jobject) NULL);
              jint a1;
              ::org::apache::lucene::search::TopDocs result((jobject) NULL);

              if (!parseArgs(args, "kI", ::org::apache::lucene::search::Query::initializeClass, &a0, &a1))
              {
                OBJ_CALL(result = self->object.search(a0, a1));
                return ::org::apache::lucene::search::t_TopDocs::wrap_Object(result);
              }
            }
            break;
           case 3:
            {
              ::org::apache::lucene::search::Query a0((jobject) NULL);
              ::org::apache::lucene::search::Filter a1((jobject) NULL);
              ::org::apache::lucene::search::Collector a2((jobject) NULL);

              if (!parseArgs(args, "kkk", ::org::apache::lucene::search::Query::initializeClass, ::org::apache::lucene::search::Filter::initializeClass, ::org::apache::lucene::search::Collector::initializeClass, &a0, &a1, &a2))
              {
                OBJ_CALL(self->object.search(a0, a1, a2));
                Py_RETURN_NONE;
              }
            }
            {
              ::org::apache::lucene::search::Query a0((jobject) NULL);
              ::org::apache::lucene::search::Filter a1((jobject) NULL);
              jint a2;
              ::org::apache::lucene::search::TopDocs result((jobject) NULL);

              if (!parseArgs(args, "kkI", ::org::apache::lucene::search::Query::initializeClass, ::org::apache::lucene::search::Filter::initializeClass, &a0, &a1, &a2))
              {
                OBJ_CALL(result = self->object.search(a0, a1, a2));
                return ::org::apache::lucene::search::t_TopDocs::wrap_Object(result);
              }
            }
            {
              ::org::apache::lucene::search::Query a0((jobject) NULL);
              jint a1;
              ::org::apache::lucene::search::Sort a2((jobject) NULL);
              ::org::apache::lucene::search::TopFieldDocs result((jobject) NULL);

              if (!parseArgs(args, "kIk", ::org::apache::lucene::search::Query::initializeClass, ::org::apache::lucene::search::Sort::initializeClass, &a0, &a1, &a2))
              {
                OBJ_CALL(result = self->object.search(a0, a1, a2));
                return ::org::apache::lucene::search::t_TopFieldDocs::wrap_Object(result);
              }
            }
            break;
           case 4:
            {
              ::org::apache::lucene::search::Query a0((jobject) NULL);
              ::org::apache::lucene::search::Filter a1((jobject) NULL);
              jint a2;
              ::org::apache::lucene::search::Sort a3((jobject) NULL);
              ::org::apache::lucene::search::TopFieldDocs result((jobject) NULL);

              if (!parseArgs(args, "kkIk", ::org::apache::lucene::search::Query::initializeClass, ::org::apache::lucene::search::Filter::initializeClass, ::org::apache::lucene::search::Sort::initializeClass, &a0, &a1, &a2, &a3))
              {
                OBJ_CALL(result = self->object.search(a0, a1, a2, a3));
                return ::org::apache::lucene::search::t_TopFieldDocs::wrap_Object(result);
              }
            }
            break;
           case 6:
            {
              ::org::apache::lucene::search::Query a0((jobject) NULL);
              ::org::apache::lucene::search::Filter a1((jobject) NULL);
              jint a2;
              ::org::apache::lucene::search::Sort a3((jobject) NULL);
              jboolean a4;
              jboolean a5;
              ::org::apache::lucene::search::TopFieldDocs result((jobject) NULL);

              if (!parseArgs(args, "kkIkZZ", ::org::apache::lucene::search::Query::initializeClass, ::org::apache::lucene::search::Filter::initializeClass, ::org::apache::lucene::search::Sort::initializeClass, &a0, &a1, &a2, &a3, &a4, &a5))
              {
                OBJ_CALL(result = self->object.search(a0, a1, a2, a3, a4, a5));
                return ::org::apache::lucene::search::t_TopFieldDocs::wrap_Object(result);
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "search", args);
          return NULL;
        }

        static PyObject *t_IndexSearcher_searchAfter(t_IndexSearcher *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 3:
            {
              ::org::apache::lucene::search::ScoreDoc a0((jobject) NULL);
              ::org::apache::lucene::search::Query a1((jobject) NULL);
              jint a2;
              ::org::apache::lucene::search::TopDocs result((jobject) NULL);

              if (!parseArgs(args, "kkI", ::org::apache::lucene::search::ScoreDoc::initializeClass, ::org::apache::lucene::search::Query::initializeClass, &a0, &a1, &a2))
              {
                OBJ_CALL(result = self->object.searchAfter(a0, a1, a2));
                return ::org::apache::lucene::search::t_TopDocs::wrap_Object(result);
              }
            }
            break;
           case 4:
            {
              ::org::apache::lucene::search::ScoreDoc a0((jobject) NULL);
              ::org::apache::lucene::search::Query a1((jobject) NULL);
              jint a2;
              ::org::apache::lucene::search::Sort a3((jobject) NULL);
              ::org::apache::lucene::search::TopDocs result((jobject) NULL);

              if (!parseArgs(args, "kkIk", ::org::apache::lucene::search::ScoreDoc::initializeClass, ::org::apache::lucene::search::Query::initializeClass, ::org::apache::lucene::search::Sort::initializeClass, &a0, &a1, &a2, &a3))
              {
                OBJ_CALL(result = self->object.searchAfter(a0, a1, a2, a3));
                return ::org::apache::lucene::search::t_TopDocs::wrap_Object(result);
              }
            }
            {
              ::org::apache::lucene::search::ScoreDoc a0((jobject) NULL);
              ::org::apache::lucene::search::Query a1((jobject) NULL);
              ::org::apache::lucene::search::Filter a2((jobject) NULL);
              jint a3;
              ::org::apache::lucene::search::TopDocs result((jobject) NULL);

              if (!parseArgs(args, "kkkI", ::org::apache::lucene::search::ScoreDoc::initializeClass, ::org::apache::lucene::search::Query::initializeClass, ::org::apache::lucene::search::Filter::initializeClass, &a0, &a1, &a2, &a3))
              {
                OBJ_CALL(result = self->object.searchAfter(a0, a1, a2, a3));
                return ::org::apache::lucene::search::t_TopDocs::wrap_Object(result);
              }
            }
            break;
           case 5:
            {
              ::org::apache::lucene::search::ScoreDoc a0((jobject) NULL);
              ::org::apache::lucene::search::Query a1((jobject) NULL);
              ::org::apache::lucene::search::Filter a2((jobject) NULL);
              jint a3;
              ::org::apache::lucene::search::Sort a4((jobject) NULL);
              ::org::apache::lucene::search::TopDocs result((jobject) NULL);

              if (!parseArgs(args, "kkkIk", ::org::apache::lucene::search::ScoreDoc::initializeClass, ::org::apache::lucene::search::Query::initializeClass, ::org::apache::lucene::search::Filter::initializeClass, ::org::apache::lucene::search::Sort::initializeClass, &a0, &a1, &a2, &a3, &a4))
              {
                OBJ_CALL(result = self->object.searchAfter(a0, a1, a2, a3, a4));
                return ::org::apache::lucene::search::t_TopDocs::wrap_Object(result);
              }
            }
            break;
           case 7:
            {
              ::org::apache::lucene::search::ScoreDoc a0((jobject) NULL);
              ::org::apache::lucene::search::Query a1((jobject) NULL);
              ::org::apache::lucene::search::Filter a2((jobject) NULL);
              jint a3;
              ::org::apache::lucene::search::Sort a4((jobject) NULL);
              jboolean a5;
              jboolean a6;
              ::org::apache::lucene::search::TopDocs result((jobject) NULL);

              if (!parseArgs(args, "kkkIkZZ", ::org::apache::lucene::search::ScoreDoc::initializeClass, ::org::apache::lucene::search::Query::initializeClass, ::org::apache::lucene::search::Filter::initializeClass, ::org::apache::lucene::search::Sort::initializeClass, &a0, &a1, &a2, &a3, &a4, &a5, &a6))
              {
                OBJ_CALL(result = self->object.searchAfter(a0, a1, a2, a3, a4, a5, a6));
                return ::org::apache::lucene::search::t_TopDocs::wrap_Object(result);
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "searchAfter", args);
          return NULL;
        }

        static PyObject *t_IndexSearcher_setSimilarity(t_IndexSearcher *self, PyObject *arg)
        {
          ::org::apache::lucene::search::similarities::Similarity a0((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::search::similarities::Similarity::initializeClass, &a0))
          {
            OBJ_CALL(self->object.setSimilarity(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setSimilarity", arg);
          return NULL;
        }

        static PyObject *t_IndexSearcher_termStatistics(t_IndexSearcher *self, PyObject *args)
        {
          ::org::apache::lucene::index::Term a0((jobject) NULL);
          ::org::apache::lucene::index::TermContext a1((jobject) NULL);
          ::org::apache::lucene::search::TermStatistics result((jobject) NULL);

          if (!parseArgs(args, "kk", ::org::apache::lucene::index::Term::initializeClass, ::org::apache::lucene::index::TermContext::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = self->object.termStatistics(a0, a1));
            return ::org::apache::lucene::search::t_TermStatistics::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "termStatistics", args);
          return NULL;
        }

        static PyObject *t_IndexSearcher_toString(t_IndexSearcher *self, PyObject *args)
        {
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.toString());
            return j2p(result);
          }

          return callSuper(&PY_TYPE(IndexSearcher), (PyObject *) self, "toString", args, 2);
        }

        static PyObject *t_IndexSearcher_get__defaultSimilarity(t_IndexSearcher *self, void *data)
        {
          ::org::apache::lucene::search::similarities::Similarity value((jobject) NULL);
          OBJ_CALL(value = self->object.getDefaultSimilarity());
          return ::org::apache::lucene::search::similarities::t_Similarity::wrap_Object(value);
        }

        static PyObject *t_IndexSearcher_get__indexReader(t_IndexSearcher *self, void *data)
        {
          ::org::apache::lucene::index::IndexReader value((jobject) NULL);
          OBJ_CALL(value = self->object.getIndexReader());
          return ::org::apache::lucene::index::t_IndexReader::wrap_Object(value);
        }

        static PyObject *t_IndexSearcher_get__similarity(t_IndexSearcher *self, void *data)
        {
          ::org::apache::lucene::search::similarities::Similarity value((jobject) NULL);
          OBJ_CALL(value = self->object.getSimilarity());
          return ::org::apache::lucene::search::similarities::t_Similarity::wrap_Object(value);
        }
        static int t_IndexSearcher_set__similarity(t_IndexSearcher *self, PyObject *arg, void *data)
        {
          {
            ::org::apache::lucene::search::similarities::Similarity value((jobject) NULL);
            if (!parseArg(arg, "k", ::org::apache::lucene::search::similarities::Similarity::initializeClass, &value))
            {
              INT_CALL(self->object.setSimilarity(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "similarity", arg);
          return -1;
        }

        static PyObject *t_IndexSearcher_get__topReaderContext(t_IndexSearcher *self, void *data)
        {
          ::org::apache::lucene::index::IndexReaderContext value((jobject) NULL);
          OBJ_CALL(value = self->object.getTopReaderContext());
          return ::org::apache::lucene::index::t_IndexReaderContext::wrap_Object(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/payloads/AveragePayloadFunction.h"
#include "java/lang/Object.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace payloads {

          ::java::lang::Class *AveragePayloadFunction::class$ = NULL;
          jmethodID *AveragePayloadFunction::mids$ = NULL;
          bool AveragePayloadFunction::live$ = false;

          jclass AveragePayloadFunction::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/payloads/AveragePayloadFunction");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_currentScore_9fe8c3f6] = env->getMethodID(cls, "currentScore", "(ILjava/lang/String;IIIFF)F");
              mids$[mid_docScore_08788a8d] = env->getMethodID(cls, "docScore", "(ILjava/lang/String;IF)F");
              mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
              mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          AveragePayloadFunction::AveragePayloadFunction() : ::org::apache::lucene::search::payloads::PayloadFunction(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          jfloat AveragePayloadFunction::currentScore(jint a0, const ::java::lang::String & a1, jint a2, jint a3, jint a4, jfloat a5, jfloat a6) const
          {
            return env->callFloatMethod(this$, mids$[mid_currentScore_9fe8c3f6], a0, a1.this$, a2, a3, a4, a5, a6);
          }

          jfloat AveragePayloadFunction::docScore(jint a0, const ::java::lang::String & a1, jint a2, jfloat a3) const
          {
            return env->callFloatMethod(this$, mids$[mid_docScore_08788a8d], a0, a1.this$, a2, a3);
          }

          jboolean AveragePayloadFunction::equals(const ::java::lang::Object & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
          }

          jint AveragePayloadFunction::hashCode() const
          {
            return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace payloads {
          static PyObject *t_AveragePayloadFunction_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_AveragePayloadFunction_instance_(PyTypeObject *type, PyObject *arg);
          static int t_AveragePayloadFunction_init_(t_AveragePayloadFunction *self, PyObject *args, PyObject *kwds);
          static PyObject *t_AveragePayloadFunction_currentScore(t_AveragePayloadFunction *self, PyObject *args);
          static PyObject *t_AveragePayloadFunction_docScore(t_AveragePayloadFunction *self, PyObject *args);
          static PyObject *t_AveragePayloadFunction_equals(t_AveragePayloadFunction *self, PyObject *args);
          static PyObject *t_AveragePayloadFunction_hashCode(t_AveragePayloadFunction *self, PyObject *args);

          static PyMethodDef t_AveragePayloadFunction__methods_[] = {
            DECLARE_METHOD(t_AveragePayloadFunction, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_AveragePayloadFunction, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_AveragePayloadFunction, currentScore, METH_VARARGS),
            DECLARE_METHOD(t_AveragePayloadFunction, docScore, METH_VARARGS),
            DECLARE_METHOD(t_AveragePayloadFunction, equals, METH_VARARGS),
            DECLARE_METHOD(t_AveragePayloadFunction, hashCode, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(AveragePayloadFunction, t_AveragePayloadFunction, ::org::apache::lucene::search::payloads::PayloadFunction, AveragePayloadFunction, t_AveragePayloadFunction_init_, 0, 0, 0, 0, 0);

          void t_AveragePayloadFunction::install(PyObject *module)
          {
            installType(&PY_TYPE(AveragePayloadFunction), module, "AveragePayloadFunction", 0);
          }

          void t_AveragePayloadFunction::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(AveragePayloadFunction).tp_dict, "class_", make_descriptor(AveragePayloadFunction::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(AveragePayloadFunction).tp_dict, "wrapfn_", make_descriptor(t_AveragePayloadFunction::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(AveragePayloadFunction).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_AveragePayloadFunction_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, AveragePayloadFunction::initializeClass, 1)))
              return NULL;
            return t_AveragePayloadFunction::wrap_Object(AveragePayloadFunction(((t_AveragePayloadFunction *) arg)->object.this$));
          }
          static PyObject *t_AveragePayloadFunction_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, AveragePayloadFunction::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_AveragePayloadFunction_init_(t_AveragePayloadFunction *self, PyObject *args, PyObject *kwds)
          {
            AveragePayloadFunction object((jobject) NULL);

            INT_CALL(object = AveragePayloadFunction());
            self->object = object;

            return 0;
          }

          static PyObject *t_AveragePayloadFunction_currentScore(t_AveragePayloadFunction *self, PyObject *args)
          {
            jint a0;
            ::java::lang::String a1((jobject) NULL);
            jint a2;
            jint a3;
            jint a4;
            jfloat a5;
            jfloat a6;
            jfloat result;

            if (!parseArgs(args, "IsIIIFF", &a0, &a1, &a2, &a3, &a4, &a5, &a6))
            {
              OBJ_CALL(result = self->object.currentScore(a0, a1, a2, a3, a4, a5, a6));
              return PyFloat_FromDouble((double) result);
            }

            return callSuper(&PY_TYPE(AveragePayloadFunction), (PyObject *) self, "currentScore", args, 2);
          }

          static PyObject *t_AveragePayloadFunction_docScore(t_AveragePayloadFunction *self, PyObject *args)
          {
            jint a0;
            ::java::lang::String a1((jobject) NULL);
            jint a2;
            jfloat a3;
            jfloat result;

            if (!parseArgs(args, "IsIF", &a0, &a1, &a2, &a3))
            {
              OBJ_CALL(result = self->object.docScore(a0, a1, a2, a3));
              return PyFloat_FromDouble((double) result);
            }

            return callSuper(&PY_TYPE(AveragePayloadFunction), (PyObject *) self, "docScore", args, 2);
          }

          static PyObject *t_AveragePayloadFunction_equals(t_AveragePayloadFunction *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            jboolean result;

            if (!parseArgs(args, "o", &a0))
            {
              OBJ_CALL(result = self->object.equals(a0));
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(AveragePayloadFunction), (PyObject *) self, "equals", args, 2);
          }

          static PyObject *t_AveragePayloadFunction_hashCode(t_AveragePayloadFunction *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.hashCode());
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(AveragePayloadFunction), (PyObject *) self, "hashCode", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/automaton/ByteRunAutomaton.h"
#include "org/apache/lucene/util/automaton/Automaton.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace automaton {

          ::java::lang::Class *ByteRunAutomaton::class$ = NULL;
          jmethodID *ByteRunAutomaton::mids$ = NULL;
          bool ByteRunAutomaton::live$ = false;

          jclass ByteRunAutomaton::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/util/automaton/ByteRunAutomaton");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_fc7cf394] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/automaton/Automaton;)V");
              mids$[mid_init$_465e1031] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/automaton/Automaton;Z)V");
              mids$[mid_run_86f44353] = env->getMethodID(cls, "run", "([BII)Z");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ByteRunAutomaton::ByteRunAutomaton(const ::org::apache::lucene::util::automaton::Automaton & a0) : ::org::apache::lucene::util::automaton::RunAutomaton(env->newObject(initializeClass, &mids$, mid_init$_fc7cf394, a0.this$)) {}

          ByteRunAutomaton::ByteRunAutomaton(const ::org::apache::lucene::util::automaton::Automaton & a0, jboolean a1) : ::org::apache::lucene::util::automaton::RunAutomaton(env->newObject(initializeClass, &mids$, mid_init$_465e1031, a0.this$, a1)) {}

          jboolean ByteRunAutomaton::run(const JArray< jbyte > & a0, jint a1, jint a2) const
          {
            return env->callBooleanMethod(this$, mids$[mid_run_86f44353], a0.this$, a1, a2);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace automaton {
          static PyObject *t_ByteRunAutomaton_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_ByteRunAutomaton_instance_(PyTypeObject *type, PyObject *arg);
          static int t_ByteRunAutomaton_init_(t_ByteRunAutomaton *self, PyObject *args, PyObject *kwds);
          static PyObject *t_ByteRunAutomaton_run(t_ByteRunAutomaton *self, PyObject *args);

          static PyMethodDef t_ByteRunAutomaton__methods_[] = {
            DECLARE_METHOD(t_ByteRunAutomaton, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ByteRunAutomaton, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ByteRunAutomaton, run, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(ByteRunAutomaton, t_ByteRunAutomaton, ::org::apache::lucene::util::automaton::RunAutomaton, ByteRunAutomaton, t_ByteRunAutomaton_init_, 0, 0, 0, 0, 0);

          void t_ByteRunAutomaton::install(PyObject *module)
          {
            installType(&PY_TYPE(ByteRunAutomaton), module, "ByteRunAutomaton", 0);
          }

          void t_ByteRunAutomaton::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(ByteRunAutomaton).tp_dict, "class_", make_descriptor(ByteRunAutomaton::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(ByteRunAutomaton).tp_dict, "wrapfn_", make_descriptor(t_ByteRunAutomaton::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(ByteRunAutomaton).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_ByteRunAutomaton_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, ByteRunAutomaton::initializeClass, 1)))
              return NULL;
            return t_ByteRunAutomaton::wrap_Object(ByteRunAutomaton(((t_ByteRunAutomaton *) arg)->object.this$));
          }
          static PyObject *t_ByteRunAutomaton_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, ByteRunAutomaton::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_ByteRunAutomaton_init_(t_ByteRunAutomaton *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::org::apache::lucene::util::automaton::Automaton a0((jobject) NULL);
                ByteRunAutomaton object((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::util::automaton::Automaton::initializeClass, &a0))
                {
                  INT_CALL(object = ByteRunAutomaton(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 2:
              {
                ::org::apache::lucene::util::automaton::Automaton a0((jobject) NULL);
                jboolean a1;
                ByteRunAutomaton object((jobject) NULL);

                if (!parseArgs(args, "kZ", ::org::apache::lucene::util::automaton::Automaton::initializeClass, &a0, &a1))
                {
                  INT_CALL(object = ByteRunAutomaton(a0, a1));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_ByteRunAutomaton_run(t_ByteRunAutomaton *self, PyObject *args)
          {
            JArray< jbyte > a0((jobject) NULL);
            jint a1;
            jint a2;
            jboolean result;

            if (!parseArgs(args, "[BII", &a0, &a1, &a2))
            {
              OBJ_CALL(result = self->object.run(a0, a1, a2));
              Py_RETURN_BOOL(result);
            }

            PyErr_SetArgsError((PyObject *) self, "run", args);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/lucene40/Lucene40NormsFormat.h"
#include "org/apache/lucene/index/SegmentReadState.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/codecs/DocValuesConsumer.h"
#include "org/apache/lucene/index/SegmentWriteState.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/codecs/DocValuesProducer.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace lucene40 {

          ::java::lang::Class *Lucene40NormsFormat::class$ = NULL;
          jmethodID *Lucene40NormsFormat::mids$ = NULL;
          bool Lucene40NormsFormat::live$ = false;

          jclass Lucene40NormsFormat::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/lucene40/Lucene40NormsFormat");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_normsConsumer_025deb44] = env->getMethodID(cls, "normsConsumer", "(Lorg/apache/lucene/index/SegmentWriteState;)Lorg/apache/lucene/codecs/DocValuesConsumer;");
              mids$[mid_normsProducer_9b0d4e4a] = env->getMethodID(cls, "normsProducer", "(Lorg/apache/lucene/index/SegmentReadState;)Lorg/apache/lucene/codecs/DocValuesProducer;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          Lucene40NormsFormat::Lucene40NormsFormat() : ::org::apache::lucene::codecs::NormsFormat(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          ::org::apache::lucene::codecs::DocValuesConsumer Lucene40NormsFormat::normsConsumer(const ::org::apache::lucene::index::SegmentWriteState & a0) const
          {
            return ::org::apache::lucene::codecs::DocValuesConsumer(env->callObjectMethod(this$, mids$[mid_normsConsumer_025deb44], a0.this$));
          }

          ::org::apache::lucene::codecs::DocValuesProducer Lucene40NormsFormat::normsProducer(const ::org::apache::lucene::index::SegmentReadState & a0) const
          {
            return ::org::apache::lucene::codecs::DocValuesProducer(env->callObjectMethod(this$, mids$[mid_normsProducer_9b0d4e4a], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace lucene40 {
          static PyObject *t_Lucene40NormsFormat_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Lucene40NormsFormat_instance_(PyTypeObject *type, PyObject *arg);
          static int t_Lucene40NormsFormat_init_(t_Lucene40NormsFormat *self, PyObject *args, PyObject *kwds);
          static PyObject *t_Lucene40NormsFormat_normsConsumer(t_Lucene40NormsFormat *self, PyObject *args);
          static PyObject *t_Lucene40NormsFormat_normsProducer(t_Lucene40NormsFormat *self, PyObject *args);

          static PyMethodDef t_Lucene40NormsFormat__methods_[] = {
            DECLARE_METHOD(t_Lucene40NormsFormat, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lucene40NormsFormat, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lucene40NormsFormat, normsConsumer, METH_VARARGS),
            DECLARE_METHOD(t_Lucene40NormsFormat, normsProducer, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(Lucene40NormsFormat, t_Lucene40NormsFormat, ::org::apache::lucene::codecs::NormsFormat, Lucene40NormsFormat, t_Lucene40NormsFormat_init_, 0, 0, 0, 0, 0);

          void t_Lucene40NormsFormat::install(PyObject *module)
          {
            installType(&PY_TYPE(Lucene40NormsFormat), module, "Lucene40NormsFormat", 0);
          }

          void t_Lucene40NormsFormat::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(Lucene40NormsFormat).tp_dict, "class_", make_descriptor(Lucene40NormsFormat::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(Lucene40NormsFormat).tp_dict, "wrapfn_", make_descriptor(t_Lucene40NormsFormat::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(Lucene40NormsFormat).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_Lucene40NormsFormat_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, Lucene40NormsFormat::initializeClass, 1)))
              return NULL;
            return t_Lucene40NormsFormat::wrap_Object(Lucene40NormsFormat(((t_Lucene40NormsFormat *) arg)->object.this$));
          }
          static PyObject *t_Lucene40NormsFormat_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, Lucene40NormsFormat::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_Lucene40NormsFormat_init_(t_Lucene40NormsFormat *self, PyObject *args, PyObject *kwds)
          {
            Lucene40NormsFormat object((jobject) NULL);

            INT_CALL(object = Lucene40NormsFormat());
            self->object = object;

            return 0;
          }

          static PyObject *t_Lucene40NormsFormat_normsConsumer(t_Lucene40NormsFormat *self, PyObject *args)
          {
            ::org::apache::lucene::index::SegmentWriteState a0((jobject) NULL);
            ::org::apache::lucene::codecs::DocValuesConsumer result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::index::SegmentWriteState::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.normsConsumer(a0));
              return ::org::apache::lucene::codecs::t_DocValuesConsumer::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(Lucene40NormsFormat), (PyObject *) self, "normsConsumer", args, 2);
          }

          static PyObject *t_Lucene40NormsFormat_normsProducer(t_Lucene40NormsFormat *self, PyObject *args)
          {
            ::org::apache::lucene::index::SegmentReadState a0((jobject) NULL);
            ::org::apache::lucene::codecs::DocValuesProducer result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::index::SegmentReadState::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.normsProducer(a0));
              return ::org::apache::lucene::codecs::t_DocValuesProducer::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(Lucene40NormsFormat), (PyObject *) self, "normsProducer", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/sinks/TokenRangeSinkFilter.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/util/AttributeSource.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace sinks {

          ::java::lang::Class *TokenRangeSinkFilter::class$ = NULL;
          jmethodID *TokenRangeSinkFilter::mids$ = NULL;
          bool TokenRangeSinkFilter::live$ = false;

          jclass TokenRangeSinkFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/sinks/TokenRangeSinkFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_d8d154a6] = env->getMethodID(cls, "<init>", "(II)V");
              mids$[mid_accept_aea2d6e6] = env->getMethodID(cls, "accept", "(Lorg/apache/lucene/util/AttributeSource;)Z");
              mids$[mid_reset_54c6a166] = env->getMethodID(cls, "reset", "()V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          TokenRangeSinkFilter::TokenRangeSinkFilter(jint a0, jint a1) : ::org::apache::lucene::analysis::sinks::TeeSinkTokenFilter$SinkFilter(env->newObject(initializeClass, &mids$, mid_init$_d8d154a6, a0, a1)) {}

          jboolean TokenRangeSinkFilter::accept(const ::org::apache::lucene::util::AttributeSource & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_accept_aea2d6e6], a0.this$);
          }

          void TokenRangeSinkFilter::reset() const
          {
            env->callVoidMethod(this$, mids$[mid_reset_54c6a166]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace sinks {
          static PyObject *t_TokenRangeSinkFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_TokenRangeSinkFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_TokenRangeSinkFilter_init_(t_TokenRangeSinkFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_TokenRangeSinkFilter_accept(t_TokenRangeSinkFilter *self, PyObject *args);
          static PyObject *t_TokenRangeSinkFilter_reset(t_TokenRangeSinkFilter *self, PyObject *args);

          static PyMethodDef t_TokenRangeSinkFilter__methods_[] = {
            DECLARE_METHOD(t_TokenRangeSinkFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_TokenRangeSinkFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_TokenRangeSinkFilter, accept, METH_VARARGS),
            DECLARE_METHOD(t_TokenRangeSinkFilter, reset, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(TokenRangeSinkFilter, t_TokenRangeSinkFilter, ::org::apache::lucene::analysis::sinks::TeeSinkTokenFilter$SinkFilter, TokenRangeSinkFilter, t_TokenRangeSinkFilter_init_, 0, 0, 0, 0, 0);

          void t_TokenRangeSinkFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(TokenRangeSinkFilter), module, "TokenRangeSinkFilter", 0);
          }

          void t_TokenRangeSinkFilter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(TokenRangeSinkFilter).tp_dict, "class_", make_descriptor(TokenRangeSinkFilter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(TokenRangeSinkFilter).tp_dict, "wrapfn_", make_descriptor(t_TokenRangeSinkFilter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(TokenRangeSinkFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_TokenRangeSinkFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, TokenRangeSinkFilter::initializeClass, 1)))
              return NULL;
            return t_TokenRangeSinkFilter::wrap_Object(TokenRangeSinkFilter(((t_TokenRangeSinkFilter *) arg)->object.this$));
          }
          static PyObject *t_TokenRangeSinkFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, TokenRangeSinkFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_TokenRangeSinkFilter_init_(t_TokenRangeSinkFilter *self, PyObject *args, PyObject *kwds)
          {
            jint a0;
            jint a1;
            TokenRangeSinkFilter object((jobject) NULL);

            if (!parseArgs(args, "II", &a0, &a1))
            {
              INT_CALL(object = TokenRangeSinkFilter(a0, a1));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_TokenRangeSinkFilter_accept(t_TokenRangeSinkFilter *self, PyObject *args)
          {
            ::org::apache::lucene::util::AttributeSource a0((jobject) NULL);
            jboolean result;

            if (!parseArgs(args, "k", ::org::apache::lucene::util::AttributeSource::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.accept(a0));
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(TokenRangeSinkFilter), (PyObject *) self, "accept", args, 2);
          }

          static PyObject *t_TokenRangeSinkFilter_reset(t_TokenRangeSinkFilter *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.reset());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(TokenRangeSinkFilter), (PyObject *) self, "reset", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/standard/builders/MultiPhraseQueryNodeBuilder.h"
#include "org/apache/lucene/search/MultiPhraseQuery.h"
#include "org/apache/lucene/queryparser/flexible/core/QueryNodeException.h"
#include "org/apache/lucene/queryparser/flexible/standard/builders/StandardQueryBuilder.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/QueryNode.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace builders {

              ::java::lang::Class *MultiPhraseQueryNodeBuilder::class$ = NULL;
              jmethodID *MultiPhraseQueryNodeBuilder::mids$ = NULL;
              bool MultiPhraseQueryNodeBuilder::live$ = false;

              jclass MultiPhraseQueryNodeBuilder::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/standard/builders/MultiPhraseQueryNodeBuilder");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
                  mids$[mid_build_5363542a] = env->getMethodID(cls, "build", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;)Lorg/apache/lucene/search/MultiPhraseQuery;");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              MultiPhraseQueryNodeBuilder::MultiPhraseQueryNodeBuilder() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

              ::org::apache::lucene::search::MultiPhraseQuery MultiPhraseQueryNodeBuilder::build(const ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode & a0) const
              {
                return ::org::apache::lucene::search::MultiPhraseQuery(env->callObjectMethod(this$, mids$[mid_build_5363542a], a0.this$));
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace builders {
              static PyObject *t_MultiPhraseQueryNodeBuilder_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_MultiPhraseQueryNodeBuilder_instance_(PyTypeObject *type, PyObject *arg);
              static int t_MultiPhraseQueryNodeBuilder_init_(t_MultiPhraseQueryNodeBuilder *self, PyObject *args, PyObject *kwds);
              static PyObject *t_MultiPhraseQueryNodeBuilder_build(t_MultiPhraseQueryNodeBuilder *self, PyObject *arg);

              static PyMethodDef t_MultiPhraseQueryNodeBuilder__methods_[] = {
                DECLARE_METHOD(t_MultiPhraseQueryNodeBuilder, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_MultiPhraseQueryNodeBuilder, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_MultiPhraseQueryNodeBuilder, build, METH_O),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(MultiPhraseQueryNodeBuilder, t_MultiPhraseQueryNodeBuilder, ::java::lang::Object, MultiPhraseQueryNodeBuilder, t_MultiPhraseQueryNodeBuilder_init_, 0, 0, 0, 0, 0);

              void t_MultiPhraseQueryNodeBuilder::install(PyObject *module)
              {
                installType(&PY_TYPE(MultiPhraseQueryNodeBuilder), module, "MultiPhraseQueryNodeBuilder", 0);
              }

              void t_MultiPhraseQueryNodeBuilder::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(MultiPhraseQueryNodeBuilder).tp_dict, "class_", make_descriptor(MultiPhraseQueryNodeBuilder::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(MultiPhraseQueryNodeBuilder).tp_dict, "wrapfn_", make_descriptor(t_MultiPhraseQueryNodeBuilder::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(MultiPhraseQueryNodeBuilder).tp_dict, "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_MultiPhraseQueryNodeBuilder_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, MultiPhraseQueryNodeBuilder::initializeClass, 1)))
                  return NULL;
                return t_MultiPhraseQueryNodeBuilder::wrap_Object(MultiPhraseQueryNodeBuilder(((t_MultiPhraseQueryNodeBuilder *) arg)->object.this$));
              }
              static PyObject *t_MultiPhraseQueryNodeBuilder_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, MultiPhraseQueryNodeBuilder::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_MultiPhraseQueryNodeBuilder_init_(t_MultiPhraseQueryNodeBuilder *self, PyObject *args, PyObject *kwds)
              {
                MultiPhraseQueryNodeBuilder object((jobject) NULL);

                INT_CALL(object = MultiPhraseQueryNodeBuilder());
                self->object = object;

                return 0;
              }

              static PyObject *t_MultiPhraseQueryNodeBuilder_build(t_MultiPhraseQueryNodeBuilder *self, PyObject *arg)
              {
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode a0((jobject) NULL);
                ::org::apache::lucene::search::MultiPhraseQuery result((jobject) NULL);

                if (!parseArg(arg, "k", ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode::initializeClass, &a0))
                {
                  OBJ_CALL(result = self->object.build(a0));
                  return ::org::apache::lucene::search::t_MultiPhraseQuery::wrap_Object(result);
                }

                PyErr_SetArgsError((PyObject *) self, "build", arg);
                return NULL;
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/packed/AppendingPackedLongBuffer.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace packed {

          ::java::lang::Class *AppendingPackedLongBuffer::class$ = NULL;
          jmethodID *AppendingPackedLongBuffer::mids$ = NULL;
          bool AppendingPackedLongBuffer::live$ = false;

          jclass AppendingPackedLongBuffer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/util/packed/AppendingPackedLongBuffer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_init$_06298cab] = env->getMethodID(cls, "<init>", "(F)V");
              mids$[mid_init$_a74e6883] = env->getMethodID(cls, "<init>", "(IIF)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          AppendingPackedLongBuffer::AppendingPackedLongBuffer() : ::org::apache::lucene::util::packed::AbstractAppendingLongBuffer(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          AppendingPackedLongBuffer::AppendingPackedLongBuffer(jfloat a0) : ::org::apache::lucene::util::packed::AbstractAppendingLongBuffer(env->newObject(initializeClass, &mids$, mid_init$_06298cab, a0)) {}

          AppendingPackedLongBuffer::AppendingPackedLongBuffer(jint a0, jint a1, jfloat a2) : ::org::apache::lucene::util::packed::AbstractAppendingLongBuffer(env->newObject(initializeClass, &mids$, mid_init$_a74e6883, a0, a1, a2)) {}
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace packed {
          static PyObject *t_AppendingPackedLongBuffer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_AppendingPackedLongBuffer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_AppendingPackedLongBuffer_init_(t_AppendingPackedLongBuffer *self, PyObject *args, PyObject *kwds);

          static PyMethodDef t_AppendingPackedLongBuffer__methods_[] = {
            DECLARE_METHOD(t_AppendingPackedLongBuffer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_AppendingPackedLongBuffer, instance_, METH_O | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(AppendingPackedLongBuffer, t_AppendingPackedLongBuffer, ::org::apache::lucene::util::packed::AbstractAppendingLongBuffer, AppendingPackedLongBuffer, t_AppendingPackedLongBuffer_init_, 0, 0, 0, 0, 0);

          void t_AppendingPackedLongBuffer::install(PyObject *module)
          {
            installType(&PY_TYPE(AppendingPackedLongBuffer), module, "AppendingPackedLongBuffer", 0);
          }

          void t_AppendingPackedLongBuffer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(AppendingPackedLongBuffer).tp_dict, "class_", make_descriptor(AppendingPackedLongBuffer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(AppendingPackedLongBuffer).tp_dict, "wrapfn_", make_descriptor(t_AppendingPackedLongBuffer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(AppendingPackedLongBuffer).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_AppendingPackedLongBuffer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, AppendingPackedLongBuffer::initializeClass, 1)))
              return NULL;
            return t_AppendingPackedLongBuffer::wrap_Object(AppendingPackedLongBuffer(((t_AppendingPackedLongBuffer *) arg)->object.this$));
          }
          static PyObject *t_AppendingPackedLongBuffer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, AppendingPackedLongBuffer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_AppendingPackedLongBuffer_init_(t_AppendingPackedLongBuffer *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 0:
              {
                AppendingPackedLongBuffer object((jobject) NULL);

                INT_CALL(object = AppendingPackedLongBuffer());
                self->object = object;
                break;
              }
              goto err;
             case 1:
              {
                jfloat a0;
                AppendingPackedLongBuffer object((jobject) NULL);

                if (!parseArgs(args, "F", &a0))
                {
                  INT_CALL(object = AppendingPackedLongBuffer(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 3:
              {
                jint a0;
                jint a1;
                jfloat a2;
                AppendingPackedLongBuffer object((jobject) NULL);

                if (!parseArgs(args, "IIF", &a0, &a1, &a2))
                {
                  INT_CALL(object = AppendingPackedLongBuffer(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/similarities/BM25Similarity.h"
#include "org/apache/lucene/search/TermStatistics.h"
#include "org/apache/lucene/search/similarities/Similarity$SimScorer.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/index/FieldInvertState.h"
#include "org/apache/lucene/search/similarities/Similarity$SimWeight.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "java/lang/String.h"
#include "org/apache/lucene/search/CollectionStatistics.h"
#include "org/apache/lucene/search/Explanation.h"
#include "java/io/IOException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace similarities {

          ::java::lang::Class *BM25Similarity::class$ = NULL;
          jmethodID *BM25Similarity::mids$ = NULL;
          bool BM25Similarity::live$ = false;

          jclass BM25Similarity::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/similarities/BM25Similarity");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_init$_f1b0c004] = env->getMethodID(cls, "<init>", "(FF)V");
              mids$[mid_computeNorm_6ff84e0e] = env->getMethodID(cls, "computeNorm", "(Lorg/apache/lucene/index/FieldInvertState;)J");
              mids$[mid_computeWeight_8bb6ee0b] = env->getMethodID(cls, "computeWeight", "(FLorg/apache/lucene/search/CollectionStatistics;[Lorg/apache/lucene/search/TermStatistics;)Lorg/apache/lucene/search/similarities/Similarity$SimWeight;");
              mids$[mid_getB_54c6a176] = env->getMethodID(cls, "getB", "()F");
              mids$[mid_getDiscountOverlaps_54c6a16a] = env->getMethodID(cls, "getDiscountOverlaps", "()Z");
              mids$[mid_getK1_54c6a176] = env->getMethodID(cls, "getK1", "()F");
              mids$[mid_idfExplain_9dde2121] = env->getMethodID(cls, "idfExplain", "(Lorg/apache/lucene/search/CollectionStatistics;Lorg/apache/lucene/search/TermStatistics;)Lorg/apache/lucene/search/Explanation;");
              mids$[mid_idfExplain_be4c9f2b] = env->getMethodID(cls, "idfExplain", "(Lorg/apache/lucene/search/CollectionStatistics;[Lorg/apache/lucene/search/TermStatistics;)Lorg/apache/lucene/search/Explanation;");
              mids$[mid_setDiscountOverlaps_bb0c767f] = env->getMethodID(cls, "setDiscountOverlaps", "(Z)V");
              mids$[mid_simScorer_9a2cfed8] = env->getMethodID(cls, "simScorer", "(Lorg/apache/lucene/search/similarities/Similarity$SimWeight;Lorg/apache/lucene/index/AtomicReaderContext;)Lorg/apache/lucene/search/similarities/Similarity$SimScorer;");
              mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");
              mids$[mid_decodeNormValue_b2271697] = env->getMethodID(cls, "decodeNormValue", "(B)F");
              mids$[mid_sloppyFreq_39c7bd2c] = env->getMethodID(cls, "sloppyFreq", "(I)F");
              mids$[mid_scorePayload_ffd34a82] = env->getMethodID(cls, "scorePayload", "(IIILorg/apache/lucene/util/BytesRef;)F");
              mids$[mid_avgFieldLength_48af4d71] = env->getMethodID(cls, "avgFieldLength", "(Lorg/apache/lucene/search/CollectionStatistics;)F");
              mids$[mid_encodeNormValue_77691ed7] = env->getMethodID(cls, "encodeNormValue", "(FI)B");
              mids$[mid_idf_a7e12cb4] = env->getMethodID(cls, "idf", "(JJ)F");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          BM25Similarity::BM25Similarity() : ::org::apache::lucene::search::similarities::Similarity(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          BM25Similarity::BM25Similarity(jfloat a0, jfloat a1) : ::org::apache::lucene::search::similarities::Similarity(env->newObject(initializeClass, &mids$, mid_init$_f1b0c004, a0, a1)) {}

          jlong BM25Similarity::computeNorm(const ::org::apache::lucene::index::FieldInvertState & a0) const
          {
            return env->callLongMethod(this$, mids$[mid_computeNorm_6ff84e0e], a0.this$);
          }

          ::org::apache::lucene::search::similarities::Similarity$SimWeight BM25Similarity::computeWeight(jfloat a0, const ::org::apache::lucene::search::CollectionStatistics & a1, const JArray< ::org::apache::lucene::search::TermStatistics > & a2) const
          {
            return ::org::apache::lucene::search::similarities::Similarity$SimWeight(env->callObjectMethod(this$, mids$[mid_computeWeight_8bb6ee0b], a0, a1.this$, a2.this$));
          }

          jfloat BM25Similarity::getB() const
          {
            return env->callFloatMethod(this$, mids$[mid_getB_54c6a176]);
          }

          jboolean BM25Similarity::getDiscountOverlaps() const
          {
            return env->callBooleanMethod(this$, mids$[mid_getDiscountOverlaps_54c6a16a]);
          }

          jfloat BM25Similarity::getK1() const
          {
            return env->callFloatMethod(this$, mids$[mid_getK1_54c6a176]);
          }

          ::org::apache::lucene::search::Explanation BM25Similarity::idfExplain(const ::org::apache::lucene::search::CollectionStatistics & a0, const ::org::apache::lucene::search::TermStatistics & a1) const
          {
            return ::org::apache::lucene::search::Explanation(env->callObjectMethod(this$, mids$[mid_idfExplain_9dde2121], a0.this$, a1.this$));
          }

          ::org::apache::lucene::search::Explanation BM25Similarity::idfExplain(const ::org::apache::lucene::search::CollectionStatistics & a0, const JArray< ::org::apache::lucene::search::TermStatistics > & a1) const
          {
            return ::org::apache::lucene::search::Explanation(env->callObjectMethod(this$, mids$[mid_idfExplain_be4c9f2b], a0.this$, a1.this$));
          }

          void BM25Similarity::setDiscountOverlaps(jboolean a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setDiscountOverlaps_bb0c767f], a0);
          }

          ::org::apache::lucene::search::similarities::Similarity$SimScorer BM25Similarity::simScorer(const ::org::apache::lucene::search::similarities::Similarity$SimWeight & a0, const ::org::apache::lucene::index::AtomicReaderContext & a1) const
          {
            return ::org::apache::lucene::search::similarities::Similarity$SimScorer(env->callObjectMethod(this$, mids$[mid_simScorer_9a2cfed8], a0.this$, a1.this$));
          }

          ::java::lang::String BM25Similarity::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace similarities {
          static PyObject *t_BM25Similarity_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_BM25Similarity_instance_(PyTypeObject *type, PyObject *arg);
          static int t_BM25Similarity_init_(t_BM25Similarity *self, PyObject *args, PyObject *kwds);
          static PyObject *t_BM25Similarity_computeNorm(t_BM25Similarity *self, PyObject *args);
          static PyObject *t_BM25Similarity_computeWeight(t_BM25Similarity *self, PyObject *args);
          static PyObject *t_BM25Similarity_getB(t_BM25Similarity *self);
          static PyObject *t_BM25Similarity_getDiscountOverlaps(t_BM25Similarity *self);
          static PyObject *t_BM25Similarity_getK1(t_BM25Similarity *self);
          static PyObject *t_BM25Similarity_idfExplain(t_BM25Similarity *self, PyObject *args);
          static PyObject *t_BM25Similarity_setDiscountOverlaps(t_BM25Similarity *self, PyObject *arg);
          static PyObject *t_BM25Similarity_simScorer(t_BM25Similarity *self, PyObject *args);
          static PyObject *t_BM25Similarity_toString(t_BM25Similarity *self, PyObject *args);
          static PyObject *t_BM25Similarity_get__b(t_BM25Similarity *self, void *data);
          static PyObject *t_BM25Similarity_get__discountOverlaps(t_BM25Similarity *self, void *data);
          static int t_BM25Similarity_set__discountOverlaps(t_BM25Similarity *self, PyObject *arg, void *data);
          static PyObject *t_BM25Similarity_get__k1(t_BM25Similarity *self, void *data);
          static PyGetSetDef t_BM25Similarity__fields_[] = {
            DECLARE_GET_FIELD(t_BM25Similarity, b),
            DECLARE_GETSET_FIELD(t_BM25Similarity, discountOverlaps),
            DECLARE_GET_FIELD(t_BM25Similarity, k1),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_BM25Similarity__methods_[] = {
            DECLARE_METHOD(t_BM25Similarity, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_BM25Similarity, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_BM25Similarity, computeNorm, METH_VARARGS),
            DECLARE_METHOD(t_BM25Similarity, computeWeight, METH_VARARGS),
            DECLARE_METHOD(t_BM25Similarity, getB, METH_NOARGS),
            DECLARE_METHOD(t_BM25Similarity, getDiscountOverlaps, METH_NOARGS),
            DECLARE_METHOD(t_BM25Similarity, getK1, METH_NOARGS),
            DECLARE_METHOD(t_BM25Similarity, idfExplain, METH_VARARGS),
            DECLARE_METHOD(t_BM25Similarity, setDiscountOverlaps, METH_O),
            DECLARE_METHOD(t_BM25Similarity, simScorer, METH_VARARGS),
            DECLARE_METHOD(t_BM25Similarity, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(BM25Similarity, t_BM25Similarity, ::org::apache::lucene::search::similarities::Similarity, BM25Similarity, t_BM25Similarity_init_, 0, 0, t_BM25Similarity__fields_, 0, 0);

          void t_BM25Similarity::install(PyObject *module)
          {
            installType(&PY_TYPE(BM25Similarity), module, "BM25Similarity", 0);
          }

          void t_BM25Similarity::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(BM25Similarity).tp_dict, "class_", make_descriptor(BM25Similarity::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(BM25Similarity).tp_dict, "wrapfn_", make_descriptor(t_BM25Similarity::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(BM25Similarity).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_BM25Similarity_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, BM25Similarity::initializeClass, 1)))
              return NULL;
            return t_BM25Similarity::wrap_Object(BM25Similarity(((t_BM25Similarity *) arg)->object.this$));
          }
          static PyObject *t_BM25Similarity_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, BM25Similarity::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_BM25Similarity_init_(t_BM25Similarity *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 0:
              {
                BM25Similarity object((jobject) NULL);

                INT_CALL(object = BM25Similarity());
                self->object = object;
                break;
              }
              goto err;
             case 2:
              {
                jfloat a0;
                jfloat a1;
                BM25Similarity object((jobject) NULL);

                if (!parseArgs(args, "FF", &a0, &a1))
                {
                  INT_CALL(object = BM25Similarity(a0, a1));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_BM25Similarity_computeNorm(t_BM25Similarity *self, PyObject *args)
          {
            ::org::apache::lucene::index::FieldInvertState a0((jobject) NULL);
            jlong result;

            if (!parseArgs(args, "k", ::org::apache::lucene::index::FieldInvertState::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.computeNorm(a0));
              return PyLong_FromLongLong((PY_LONG_LONG) result);
            }

            return callSuper(&PY_TYPE(BM25Similarity), (PyObject *) self, "computeNorm", args, 2);
          }

          static PyObject *t_BM25Similarity_computeWeight(t_BM25Similarity *self, PyObject *args)
          {
            jfloat a0;
            ::org::apache::lucene::search::CollectionStatistics a1((jobject) NULL);
            JArray< ::org::apache::lucene::search::TermStatistics > a2((jobject) NULL);
            ::org::apache::lucene::search::similarities::Similarity$SimWeight result((jobject) NULL);

            if (!parseArgs(args, "Fk[k", ::org::apache::lucene::search::CollectionStatistics::initializeClass, ::org::apache::lucene::search::TermStatistics::initializeClass, &a0, &a1, &a2))
            {
              OBJ_CALL(result = self->object.computeWeight(a0, a1, a2));
              return ::org::apache::lucene::search::similarities::t_Similarity$SimWeight::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(BM25Similarity), (PyObject *) self, "computeWeight", args, 2);
          }

          static PyObject *t_BM25Similarity_getB(t_BM25Similarity *self)
          {
            jfloat result;
            OBJ_CALL(result = self->object.getB());
            return PyFloat_FromDouble((double) result);
          }

          static PyObject *t_BM25Similarity_getDiscountOverlaps(t_BM25Similarity *self)
          {
            jboolean result;
            OBJ_CALL(result = self->object.getDiscountOverlaps());
            Py_RETURN_BOOL(result);
          }

          static PyObject *t_BM25Similarity_getK1(t_BM25Similarity *self)
          {
            jfloat result;
            OBJ_CALL(result = self->object.getK1());
            return PyFloat_FromDouble((double) result);
          }

          static PyObject *t_BM25Similarity_idfExplain(t_BM25Similarity *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 2:
              {
                ::org::apache::lucene::search::CollectionStatistics a0((jobject) NULL);
                ::org::apache::lucene::search::TermStatistics a1((jobject) NULL);
                ::org::apache::lucene::search::Explanation result((jobject) NULL);

                if (!parseArgs(args, "kk", ::org::apache::lucene::search::CollectionStatistics::initializeClass, ::org::apache::lucene::search::TermStatistics::initializeClass, &a0, &a1))
                {
                  OBJ_CALL(result = self->object.idfExplain(a0, a1));
                  return ::org::apache::lucene::search::t_Explanation::wrap_Object(result);
                }
              }
              {
                ::org::apache::lucene::search::CollectionStatistics a0((jobject) NULL);
                JArray< ::org::apache::lucene::search::TermStatistics > a1((jobject) NULL);
                ::org::apache::lucene::search::Explanation result((jobject) NULL);

                if (!parseArgs(args, "k[k", ::org::apache::lucene::search::CollectionStatistics::initializeClass, ::org::apache::lucene::search::TermStatistics::initializeClass, &a0, &a1))
                {
                  OBJ_CALL(result = self->object.idfExplain(a0, a1));
                  return ::org::apache::lucene::search::t_Explanation::wrap_Object(result);
                }
              }
            }

            PyErr_SetArgsError((PyObject *) self, "idfExplain", args);
            return NULL;
          }

          static PyObject *t_BM25Similarity_setDiscountOverlaps(t_BM25Similarity *self, PyObject *arg)
          {
            jboolean a0;

            if (!parseArg(arg, "Z", &a0))
            {
              OBJ_CALL(self->object.setDiscountOverlaps(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setDiscountOverlaps", arg);
            return NULL;
          }

          static PyObject *t_BM25Similarity_simScorer(t_BM25Similarity *self, PyObject *args)
          {
            ::org::apache::lucene::search::similarities::Similarity$SimWeight a0((jobject) NULL);
            ::org::apache::lucene::index::AtomicReaderContext a1((jobject) NULL);
            ::org::apache::lucene::search::similarities::Similarity$SimScorer result((jobject) NULL);

            if (!parseArgs(args, "kk", ::org::apache::lucene::search::similarities::Similarity$SimWeight::initializeClass, ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.simScorer(a0, a1));
              return ::org::apache::lucene::search::similarities::t_Similarity$SimScorer::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(BM25Similarity), (PyObject *) self, "simScorer", args, 2);
          }

          static PyObject *t_BM25Similarity_toString(t_BM25Similarity *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(&PY_TYPE(BM25Similarity), (PyObject *) self, "toString", args, 2);
          }

          static PyObject *t_BM25Similarity_get__b(t_BM25Similarity *self, void *data)
          {
            jfloat value;
            OBJ_CALL(value = self->object.getB());
            return PyFloat_FromDouble((double) value);
          }

          static PyObject *t_BM25Similarity_get__discountOverlaps(t_BM25Similarity *self, void *data)
          {
            jboolean value;
            OBJ_CALL(value = self->object.getDiscountOverlaps());
            Py_RETURN_BOOL(value);
          }
          static int t_BM25Similarity_set__discountOverlaps(t_BM25Similarity *self, PyObject *arg, void *data)
          {
            {
              jboolean value;
              if (!parseArg(arg, "Z", &value))
              {
                INT_CALL(self->object.setDiscountOverlaps(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "discountOverlaps", arg);
            return -1;
          }

          static PyObject *t_BM25Similarity_get__k1(t_BM25Similarity *self, void *data)
          {
            jfloat value;
            OBJ_CALL(value = self->object.getK1());
            return PyFloat_FromDouble((double) value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/IntroSorter.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *IntroSorter::class$ = NULL;
        jmethodID *IntroSorter::mids$ = NULL;
        bool IntroSorter::live$ = false;

        jclass IntroSorter::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/IntroSorter");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_sort_d8d154a6] = env->getMethodID(cls, "sort", "(II)V");
            mids$[mid_comparePivot_39c7bd23] = env->getMethodID(cls, "comparePivot", "(I)I");
            mids$[mid_setPivot_39c7bd3c] = env->getMethodID(cls, "setPivot", "(I)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        IntroSorter::IntroSorter() : ::org::apache::lucene::util::Sorter(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        void IntroSorter::sort(jint a0, jint a1) const
        {
          env->callVoidMethod(this$, mids$[mid_sort_d8d154a6], a0, a1);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_IntroSorter_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_IntroSorter_instance_(PyTypeObject *type, PyObject *arg);
        static int t_IntroSorter_init_(t_IntroSorter *self, PyObject *args, PyObject *kwds);
        static PyObject *t_IntroSorter_sort(t_IntroSorter *self, PyObject *args);

        static PyMethodDef t_IntroSorter__methods_[] = {
          DECLARE_METHOD(t_IntroSorter, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_IntroSorter, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_IntroSorter, sort, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(IntroSorter, t_IntroSorter, ::org::apache::lucene::util::Sorter, IntroSorter, t_IntroSorter_init_, 0, 0, 0, 0, 0);

        void t_IntroSorter::install(PyObject *module)
        {
          installType(&PY_TYPE(IntroSorter), module, "IntroSorter", 0);
        }

        void t_IntroSorter::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(IntroSorter).tp_dict, "class_", make_descriptor(IntroSorter::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(IntroSorter).tp_dict, "wrapfn_", make_descriptor(t_IntroSorter::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(IntroSorter).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_IntroSorter_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, IntroSorter::initializeClass, 1)))
            return NULL;
          return t_IntroSorter::wrap_Object(IntroSorter(((t_IntroSorter *) arg)->object.this$));
        }
        static PyObject *t_IntroSorter_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, IntroSorter::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_IntroSorter_init_(t_IntroSorter *self, PyObject *args, PyObject *kwds)
        {
          IntroSorter object((jobject) NULL);

          INT_CALL(object = IntroSorter());
          self->object = object;

          return 0;
        }

        static PyObject *t_IntroSorter_sort(t_IntroSorter *self, PyObject *args)
        {
          jint a0;
          jint a1;

          if (!parseArgs(args, "II", &a0, &a1))
          {
            OBJ_CALL(self->object.sort(a0, a1));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(IntroSorter), (PyObject *) self, "sort", args, 2);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/facet/TopOrdAndFloatQueue.h"
#include "org/apache/lucene/facet/TopOrdAndFloatQueue$OrdAndValue.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {

        ::java::lang::Class *TopOrdAndFloatQueue::class$ = NULL;
        jmethodID *TopOrdAndFloatQueue::mids$ = NULL;
        bool TopOrdAndFloatQueue::live$ = false;

        jclass TopOrdAndFloatQueue::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/facet/TopOrdAndFloatQueue");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_39c7bd3c] = env->getMethodID(cls, "<init>", "(I)V");
            mids$[mid_lessThan_e2d62086] = env->getMethodID(cls, "lessThan", "(Lorg/apache/lucene/facet/TopOrdAndFloatQueue$OrdAndValue;Lorg/apache/lucene/facet/TopOrdAndFloatQueue$OrdAndValue;)Z");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        TopOrdAndFloatQueue::TopOrdAndFloatQueue(jint a0) : ::org::apache::lucene::util::PriorityQueue(env->newObject(initializeClass, &mids$, mid_init$_39c7bd3c, a0)) {}
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        static PyObject *t_TopOrdAndFloatQueue_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_TopOrdAndFloatQueue_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_TopOrdAndFloatQueue_of_(t_TopOrdAndFloatQueue *self, PyObject *args);
        static int t_TopOrdAndFloatQueue_init_(t_TopOrdAndFloatQueue *self, PyObject *args, PyObject *kwds);
        static PyObject *t_TopOrdAndFloatQueue_get__parameters_(t_TopOrdAndFloatQueue *self, void *data);
        static PyGetSetDef t_TopOrdAndFloatQueue__fields_[] = {
          DECLARE_GET_FIELD(t_TopOrdAndFloatQueue, parameters_),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_TopOrdAndFloatQueue__methods_[] = {
          DECLARE_METHOD(t_TopOrdAndFloatQueue, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_TopOrdAndFloatQueue, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_TopOrdAndFloatQueue, of_, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(TopOrdAndFloatQueue, t_TopOrdAndFloatQueue, ::org::apache::lucene::util::PriorityQueue, TopOrdAndFloatQueue, t_TopOrdAndFloatQueue_init_, 0, 0, t_TopOrdAndFloatQueue__fields_, 0, 0);
        PyObject *t_TopOrdAndFloatQueue::wrap_Object(const TopOrdAndFloatQueue& object, PyTypeObject *p0)
        {
          PyObject *obj = t_TopOrdAndFloatQueue::wrap_Object(object);
          if (obj != NULL && obj != Py_None)
          {
            t_TopOrdAndFloatQueue *self = (t_TopOrdAndFloatQueue *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        PyObject *t_TopOrdAndFloatQueue::wrap_jobject(const jobject& object, PyTypeObject *p0)
        {
          PyObject *obj = t_TopOrdAndFloatQueue::wrap_jobject(object);
          if (obj != NULL && obj != Py_None)
          {
            t_TopOrdAndFloatQueue *self = (t_TopOrdAndFloatQueue *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        void t_TopOrdAndFloatQueue::install(PyObject *module)
        {
          installType(&PY_TYPE(TopOrdAndFloatQueue), module, "TopOrdAndFloatQueue", 0);
          PyDict_SetItemString(PY_TYPE(TopOrdAndFloatQueue).tp_dict, "OrdAndValue", make_descriptor(&PY_TYPE(TopOrdAndFloatQueue$OrdAndValue)));
        }

        void t_TopOrdAndFloatQueue::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(TopOrdAndFloatQueue).tp_dict, "class_", make_descriptor(TopOrdAndFloatQueue::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(TopOrdAndFloatQueue).tp_dict, "wrapfn_", make_descriptor(t_TopOrdAndFloatQueue::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(TopOrdAndFloatQueue).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_TopOrdAndFloatQueue_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, TopOrdAndFloatQueue::initializeClass, 1)))
            return NULL;
          return t_TopOrdAndFloatQueue::wrap_Object(TopOrdAndFloatQueue(((t_TopOrdAndFloatQueue *) arg)->object.this$));
        }
        static PyObject *t_TopOrdAndFloatQueue_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, TopOrdAndFloatQueue::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_TopOrdAndFloatQueue_of_(t_TopOrdAndFloatQueue *self, PyObject *args)
        {
          if (!parseArg(args, "T", 1, &(self->parameters)))
            Py_RETURN_SELF;
          return PyErr_SetArgsError((PyObject *) self, "of_", args);
        }

        static int t_TopOrdAndFloatQueue_init_(t_TopOrdAndFloatQueue *self, PyObject *args, PyObject *kwds)
        {
          jint a0;
          TopOrdAndFloatQueue object((jobject) NULL);

          if (!parseArgs(args, "I", &a0))
          {
            INT_CALL(object = TopOrdAndFloatQueue(a0));
            self->object = object;
            self->parameters[0] = &::org::apache::lucene::facet::PY_TYPE(TopOrdAndFloatQueue$OrdAndValue);
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }
        static PyObject *t_TopOrdAndFloatQueue_get__parameters_(t_TopOrdAndFloatQueue *self, void *data)
        {
          return typeParameters(self->parameters, sizeof(self->parameters));
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/TokenizedPhraseQueryNode.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/queryparser/flexible/core/parser/EscapeQuerySyntax.h"
#include "java/lang/CloneNotSupportedException.h"
#include "java/lang/CharSequence.h"
#include "java/lang/String.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/FieldableNode.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/QueryNode.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace nodes {

              ::java::lang::Class *TokenizedPhraseQueryNode::class$ = NULL;
              jmethodID *TokenizedPhraseQueryNode::mids$ = NULL;
              bool TokenizedPhraseQueryNode::live$ = false;

              jclass TokenizedPhraseQueryNode::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/core/nodes/TokenizedPhraseQueryNode");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
                  mids$[mid_cloneTree_b387c5e6] = env->getMethodID(cls, "cloneTree", "()Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;");
                  mids$[mid_getField_e0adba2f] = env->getMethodID(cls, "getField", "()Ljava/lang/CharSequence;");
                  mids$[mid_setField_a8afc64a] = env->getMethodID(cls, "setField", "(Ljava/lang/CharSequence;)V");
                  mids$[mid_toQueryString_99b8dfe1] = env->getMethodID(cls, "toQueryString", "(Lorg/apache/lucene/queryparser/flexible/core/parser/EscapeQuerySyntax;)Ljava/lang/CharSequence;");
                  mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              TokenizedPhraseQueryNode::TokenizedPhraseQueryNode() : ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNodeImpl(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

              ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode TokenizedPhraseQueryNode::cloneTree() const
              {
                return ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode(env->callObjectMethod(this$, mids$[mid_cloneTree_b387c5e6]));
              }

              ::java::lang::CharSequence TokenizedPhraseQueryNode::getField() const
              {
                return ::java::lang::CharSequence(env->callObjectMethod(this$, mids$[mid_getField_e0adba2f]));
              }

              void TokenizedPhraseQueryNode::setField(const ::java::lang::CharSequence & a0) const
              {
                env->callVoidMethod(this$, mids$[mid_setField_a8afc64a], a0.this$);
              }

              ::java::lang::CharSequence TokenizedPhraseQueryNode::toQueryString(const ::org::apache::lucene::queryparser::flexible::core::parser::EscapeQuerySyntax & a0) const
              {
                return ::java::lang::CharSequence(env->callObjectMethod(this$, mids$[mid_toQueryString_99b8dfe1], a0.this$));
              }

              ::java::lang::String TokenizedPhraseQueryNode::toString() const
              {
                return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace nodes {
              static PyObject *t_TokenizedPhraseQueryNode_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_TokenizedPhraseQueryNode_instance_(PyTypeObject *type, PyObject *arg);
              static int t_TokenizedPhraseQueryNode_init_(t_TokenizedPhraseQueryNode *self, PyObject *args, PyObject *kwds);
              static PyObject *t_TokenizedPhraseQueryNode_cloneTree(t_TokenizedPhraseQueryNode *self, PyObject *args);
              static PyObject *t_TokenizedPhraseQueryNode_getField(t_TokenizedPhraseQueryNode *self);
              static PyObject *t_TokenizedPhraseQueryNode_setField(t_TokenizedPhraseQueryNode *self, PyObject *arg);
              static PyObject *t_TokenizedPhraseQueryNode_toQueryString(t_TokenizedPhraseQueryNode *self, PyObject *args);
              static PyObject *t_TokenizedPhraseQueryNode_toString(t_TokenizedPhraseQueryNode *self, PyObject *args);
              static PyObject *t_TokenizedPhraseQueryNode_get__field(t_TokenizedPhraseQueryNode *self, void *data);
              static int t_TokenizedPhraseQueryNode_set__field(t_TokenizedPhraseQueryNode *self, PyObject *arg, void *data);
              static PyGetSetDef t_TokenizedPhraseQueryNode__fields_[] = {
                DECLARE_GETSET_FIELD(t_TokenizedPhraseQueryNode, field),
                { NULL, NULL, NULL, NULL, NULL }
              };

              static PyMethodDef t_TokenizedPhraseQueryNode__methods_[] = {
                DECLARE_METHOD(t_TokenizedPhraseQueryNode, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_TokenizedPhraseQueryNode, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_TokenizedPhraseQueryNode, cloneTree, METH_VARARGS),
                DECLARE_METHOD(t_TokenizedPhraseQueryNode, getField, METH_NOARGS),
                DECLARE_METHOD(t_TokenizedPhraseQueryNode, setField, METH_O),
                DECLARE_METHOD(t_TokenizedPhraseQueryNode, toQueryString, METH_VARARGS),
                DECLARE_METHOD(t_TokenizedPhraseQueryNode, toString, METH_VARARGS),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(TokenizedPhraseQueryNode, t_TokenizedPhraseQueryNode, ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNodeImpl, TokenizedPhraseQueryNode, t_TokenizedPhraseQueryNode_init_, 0, 0, t_TokenizedPhraseQueryNode__fields_, 0, 0);

              void t_TokenizedPhraseQueryNode::install(PyObject *module)
              {
                installType(&PY_TYPE(TokenizedPhraseQueryNode), module, "TokenizedPhraseQueryNode", 0);
              }

              void t_TokenizedPhraseQueryNode::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(TokenizedPhraseQueryNode).tp_dict, "class_", make_descriptor(TokenizedPhraseQueryNode::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(TokenizedPhraseQueryNode).tp_dict, "wrapfn_", make_descriptor(t_TokenizedPhraseQueryNode::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(TokenizedPhraseQueryNode).tp_dict, "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_TokenizedPhraseQueryNode_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, TokenizedPhraseQueryNode::initializeClass, 1)))
                  return NULL;
                return t_TokenizedPhraseQueryNode::wrap_Object(TokenizedPhraseQueryNode(((t_TokenizedPhraseQueryNode *) arg)->object.this$));
              }
              static PyObject *t_TokenizedPhraseQueryNode_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, TokenizedPhraseQueryNode::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_TokenizedPhraseQueryNode_init_(t_TokenizedPhraseQueryNode *self, PyObject *args, PyObject *kwds)
              {
                TokenizedPhraseQueryNode object((jobject) NULL);

                INT_CALL(object = TokenizedPhraseQueryNode());
                self->object = object;

                return 0;
              }

              static PyObject *t_TokenizedPhraseQueryNode_cloneTree(t_TokenizedPhraseQueryNode *self, PyObject *args)
              {
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode result((jobject) NULL);

                if (!parseArgs(args, ""))
                {
                  OBJ_CALL(result = self->object.cloneTree());
                  return ::org::apache::lucene::queryparser::flexible::core::nodes::t_QueryNode::wrap_Object(result);
                }

                return callSuper(&PY_TYPE(TokenizedPhraseQueryNode), (PyObject *) self, "cloneTree", args, 2);
              }

              static PyObject *t_TokenizedPhraseQueryNode_getField(t_TokenizedPhraseQueryNode *self)
              {
                ::java::lang::CharSequence result((jobject) NULL);
                OBJ_CALL(result = self->object.getField());
                return ::java::lang::t_CharSequence::wrap_Object(result);
              }

              static PyObject *t_TokenizedPhraseQueryNode_setField(t_TokenizedPhraseQueryNode *self, PyObject *arg)
              {
                ::java::lang::CharSequence a0((jobject) NULL);

                if (!parseArg(arg, "O", &::java::lang::PY_TYPE(CharSequence), &a0))
                {
                  OBJ_CALL(self->object.setField(a0));
                  Py_RETURN_NONE;
                }

                PyErr_SetArgsError((PyObject *) self, "setField", arg);
                return NULL;
              }

              static PyObject *t_TokenizedPhraseQueryNode_toQueryString(t_TokenizedPhraseQueryNode *self, PyObject *args)
              {
                ::org::apache::lucene::queryparser::flexible::core::parser::EscapeQuerySyntax a0((jobject) NULL);
                ::java::lang::CharSequence result((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::queryparser::flexible::core::parser::EscapeQuerySyntax::initializeClass, &a0))
                {
                  OBJ_CALL(result = self->object.toQueryString(a0));
                  return ::java::lang::t_CharSequence::wrap_Object(result);
                }

                return callSuper(&PY_TYPE(TokenizedPhraseQueryNode), (PyObject *) self, "toQueryString", args, 2);
              }

              static PyObject *t_TokenizedPhraseQueryNode_toString(t_TokenizedPhraseQueryNode *self, PyObject *args)
              {
                ::java::lang::String result((jobject) NULL);

                if (!parseArgs(args, ""))
                {
                  OBJ_CALL(result = self->object.toString());
                  return j2p(result);
                }

                return callSuper(&PY_TYPE(TokenizedPhraseQueryNode), (PyObject *) self, "toString", args, 2);
              }

              static PyObject *t_TokenizedPhraseQueryNode_get__field(t_TokenizedPhraseQueryNode *self, void *data)
              {
                ::java::lang::CharSequence value((jobject) NULL);
                OBJ_CALL(value = self->object.getField());
                return ::java::lang::t_CharSequence::wrap_Object(value);
              }
              static int t_TokenizedPhraseQueryNode_set__field(t_TokenizedPhraseQueryNode *self, PyObject *arg, void *data)
              {
                {
                  ::java::lang::CharSequence value((jobject) NULL);
                  if (!parseArg(arg, "O", &::java::lang::PY_TYPE(CharSequence), &value))
                  {
                    INT_CALL(self->object.setField(value));
                    return 0;
                  }
                }
                PyErr_SetArgsError((PyObject *) self, "field", arg);
                return -1;
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/surround/query/ComposedQuery.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/queryparser/surround/query/BasicQueryFactory.h"
#include "java/util/Iterator.h"
#include "java/lang/String.h"
#include "java/util/List.h"
#include "org/apache/lucene/search/Query.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace surround {
          namespace query {

            ::java::lang::Class *ComposedQuery::class$ = NULL;
            jmethodID *ComposedQuery::mids$ = NULL;
            bool ComposedQuery::live$ = false;

            jclass ComposedQuery::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/surround/query/ComposedQuery");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_4136185e] = env->getMethodID(cls, "<init>", "(Ljava/util/List;ZLjava/lang/String;)V");
                mids$[mid_getNrSubQueries_54c6a179] = env->getMethodID(cls, "getNrSubQueries", "()I");
                mids$[mid_getOperatorName_14c7b5c5] = env->getMethodID(cls, "getOperatorName", "()Ljava/lang/String;");
                mids$[mid_getSubQueriesIterator_40858c90] = env->getMethodID(cls, "getSubQueriesIterator", "()Ljava/util/Iterator;");
                mids$[mid_getSubQuery_4fe040f0] = env->getMethodID(cls, "getSubQuery", "(I)Lorg/apache/lucene/queryparser/surround/query/SrndQuery;");
                mids$[mid_isFieldsSubQueryAcceptable_54c6a16a] = env->getMethodID(cls, "isFieldsSubQueryAcceptable", "()Z");
                mids$[mid_isOperatorInfix_54c6a16a] = env->getMethodID(cls, "isOperatorInfix", "()Z");
                mids$[mid_makeLuceneSubQueriesField_82c52c4c] = env->getMethodID(cls, "makeLuceneSubQueriesField", "(Ljava/lang/String;Lorg/apache/lucene/queryparser/surround/query/BasicQueryFactory;)Ljava/util/List;");
                mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");
                mids$[mid_getPrefixSeparator_14c7b5c5] = env->getMethodID(cls, "getPrefixSeparator", "()Ljava/lang/String;");
                mids$[mid_getBracketOpen_14c7b5c5] = env->getMethodID(cls, "getBracketOpen", "()Ljava/lang/String;");
                mids$[mid_getBracketClose_14c7b5c5] = env->getMethodID(cls, "getBracketClose", "()Ljava/lang/String;");
                mids$[mid_infixToString_9f94ae34] = env->getMethodID(cls, "infixToString", "(Ljava/lang/StringBuilder;)V");
                mids$[mid_prefixToString_9f94ae34] = env->getMethodID(cls, "prefixToString", "(Ljava/lang/StringBuilder;)V");
                mids$[mid_recompose_1fde8fc3] = env->getMethodID(cls, "recompose", "(Ljava/util/List;)V");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            ComposedQuery::ComposedQuery(const ::java::util::List & a0, jboolean a1, const ::java::lang::String & a2) : ::org::apache::lucene::queryparser::surround::query::SrndQuery(env->newObject(initializeClass, &mids$, mid_init$_4136185e, a0.this$, a1, a2.this$)) {}

            jint ComposedQuery::getNrSubQueries() const
            {
              return env->callIntMethod(this$, mids$[mid_getNrSubQueries_54c6a179]);
            }

            ::java::lang::String ComposedQuery::getOperatorName() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getOperatorName_14c7b5c5]));
            }

            ::java::util::Iterator ComposedQuery::getSubQueriesIterator() const
            {
              return ::java::util::Iterator(env->callObjectMethod(this$, mids$[mid_getSubQueriesIterator_40858c90]));
            }

            ::org::apache::lucene::queryparser::surround::query::SrndQuery ComposedQuery::getSubQuery(jint a0) const
            {
              return ::org::apache::lucene::queryparser::surround::query::SrndQuery(env->callObjectMethod(this$, mids$[mid_getSubQuery_4fe040f0], a0));
            }

            jboolean ComposedQuery::isFieldsSubQueryAcceptable() const
            {
              return env->callBooleanMethod(this$, mids$[mid_isFieldsSubQueryAcceptable_54c6a16a]);
            }

            jboolean ComposedQuery::isOperatorInfix() const
            {
              return env->callBooleanMethod(this$, mids$[mid_isOperatorInfix_54c6a16a]);
            }

            ::java::util::List ComposedQuery::makeLuceneSubQueriesField(const ::java::lang::String & a0, const ::org::apache::lucene::queryparser::surround::query::BasicQueryFactory & a1) const
            {
              return ::java::util::List(env->callObjectMethod(this$, mids$[mid_makeLuceneSubQueriesField_82c52c4c], a0.this$, a1.this$));
            }

            ::java::lang::String ComposedQuery::toString() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace surround {
          namespace query {
            static PyObject *t_ComposedQuery_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_ComposedQuery_instance_(PyTypeObject *type, PyObject *arg);
            static int t_ComposedQuery_init_(t_ComposedQuery *self, PyObject *args, PyObject *kwds);
            static PyObject *t_ComposedQuery_getNrSubQueries(t_ComposedQuery *self);
            static PyObject *t_ComposedQuery_getOperatorName(t_ComposedQuery *self);
            static PyObject *t_ComposedQuery_getSubQueriesIterator(t_ComposedQuery *self);
            static PyObject *t_ComposedQuery_getSubQuery(t_ComposedQuery *self, PyObject *arg);
            static PyObject *t_ComposedQuery_isFieldsSubQueryAcceptable(t_ComposedQuery *self, PyObject *args);
            static PyObject *t_ComposedQuery_isOperatorInfix(t_ComposedQuery *self);
            static PyObject *t_ComposedQuery_makeLuceneSubQueriesField(t_ComposedQuery *self, PyObject *args);
            static PyObject *t_ComposedQuery_toString(t_ComposedQuery *self, PyObject *args);
            static PyObject *t_ComposedQuery_get__fieldsSubQueryAcceptable(t_ComposedQuery *self, void *data);
            static PyObject *t_ComposedQuery_get__nrSubQueries(t_ComposedQuery *self, void *data);
            static PyObject *t_ComposedQuery_get__operatorInfix(t_ComposedQuery *self, void *data);
            static PyObject *t_ComposedQuery_get__operatorName(t_ComposedQuery *self, void *data);
            static PyObject *t_ComposedQuery_get__subQueriesIterator(t_ComposedQuery *self, void *data);
            static PyGetSetDef t_ComposedQuery__fields_[] = {
              DECLARE_GET_FIELD(t_ComposedQuery, fieldsSubQueryAcceptable),
              DECLARE_GET_FIELD(t_ComposedQuery, nrSubQueries),
              DECLARE_GET_FIELD(t_ComposedQuery, operatorInfix),
              DECLARE_GET_FIELD(t_ComposedQuery, operatorName),
              DECLARE_GET_FIELD(t_ComposedQuery, subQueriesIterator),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_ComposedQuery__methods_[] = {
              DECLARE_METHOD(t_ComposedQuery, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_ComposedQuery, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_ComposedQuery, getNrSubQueries, METH_NOARGS),
              DECLARE_METHOD(t_ComposedQuery, getOperatorName, METH_NOARGS),
              DECLARE_METHOD(t_ComposedQuery, getSubQueriesIterator, METH_NOARGS),
              DECLARE_METHOD(t_ComposedQuery, getSubQuery, METH_O),
              DECLARE_METHOD(t_ComposedQuery, isFieldsSubQueryAcceptable, METH_VARARGS),
              DECLARE_METHOD(t_ComposedQuery, isOperatorInfix, METH_NOARGS),
              DECLARE_METHOD(t_ComposedQuery, makeLuceneSubQueriesField, METH_VARARGS),
              DECLARE_METHOD(t_ComposedQuery, toString, METH_VARARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(ComposedQuery, t_ComposedQuery, ::org::apache::lucene::queryparser::surround::query::SrndQuery, ComposedQuery, t_ComposedQuery_init_, 0, 0, t_ComposedQuery__fields_, 0, 0);

            void t_ComposedQuery::install(PyObject *module)
            {
              installType(&PY_TYPE(ComposedQuery), module, "ComposedQuery", 0);
            }

            void t_ComposedQuery::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(ComposedQuery).tp_dict, "class_", make_descriptor(ComposedQuery::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(ComposedQuery).tp_dict, "wrapfn_", make_descriptor(t_ComposedQuery::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(ComposedQuery).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_ComposedQuery_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, ComposedQuery::initializeClass, 1)))
                return NULL;
              return t_ComposedQuery::wrap_Object(ComposedQuery(((t_ComposedQuery *) arg)->object.this$));
            }
            static PyObject *t_ComposedQuery_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, ComposedQuery::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_ComposedQuery_init_(t_ComposedQuery *self, PyObject *args, PyObject *kwds)
            {
              ::java::util::List a0((jobject) NULL);
              PyTypeObject **p0;
              jboolean a1;
              ::java::lang::String a2((jobject) NULL);
              ComposedQuery object((jobject) NULL);

              if (!parseArgs(args, "KZs", ::java::util::List::initializeClass, &a0, &p0, ::java::util::t_List::parameters_, &a1, &a2))
              {
                INT_CALL(object = ComposedQuery(a0, a1, a2));
                self->object = object;
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_ComposedQuery_getNrSubQueries(t_ComposedQuery *self)
            {
              jint result;
              OBJ_CALL(result = self->object.getNrSubQueries());
              return PyInt_FromLong((long) result);
            }

            static PyObject *t_ComposedQuery_getOperatorName(t_ComposedQuery *self)
            {
              ::java::lang::String result((jobject) NULL);
              OBJ_CALL(result = self->object.getOperatorName());
              return j2p(result);
            }

            static PyObject *t_ComposedQuery_getSubQueriesIterator(t_ComposedQuery *self)
            {
              ::java::util::Iterator result((jobject) NULL);
              OBJ_CALL(result = self->object.getSubQueriesIterator());
              return ::java::util::t_Iterator::wrap_Object(result, &::org::apache::lucene::queryparser::surround::query::PY_TYPE(SrndQuery));
            }

            static PyObject *t_ComposedQuery_getSubQuery(t_ComposedQuery *self, PyObject *arg)
            {
              jint a0;
              ::org::apache::lucene::queryparser::surround::query::SrndQuery result((jobject) NULL);

              if (!parseArg(arg, "I", &a0))
              {
                OBJ_CALL(result = self->object.getSubQuery(a0));
                return ::org::apache::lucene::queryparser::surround::query::t_SrndQuery::wrap_Object(result);
              }

              PyErr_SetArgsError((PyObject *) self, "getSubQuery", arg);
              return NULL;
            }

            static PyObject *t_ComposedQuery_isFieldsSubQueryAcceptable(t_ComposedQuery *self, PyObject *args)
            {
              jboolean result;

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.isFieldsSubQueryAcceptable());
                Py_RETURN_BOOL(result);
              }

              return callSuper(&PY_TYPE(ComposedQuery), (PyObject *) self, "isFieldsSubQueryAcceptable", args, 2);
            }

            static PyObject *t_ComposedQuery_isOperatorInfix(t_ComposedQuery *self)
            {
              jboolean result;
              OBJ_CALL(result = self->object.isOperatorInfix());
              Py_RETURN_BOOL(result);
            }

            static PyObject *t_ComposedQuery_makeLuceneSubQueriesField(t_ComposedQuery *self, PyObject *args)
            {
              ::java::lang::String a0((jobject) NULL);
              ::org::apache::lucene::queryparser::surround::query::BasicQueryFactory a1((jobject) NULL);
              ::java::util::List result((jobject) NULL);

              if (!parseArgs(args, "sk", ::org::apache::lucene::queryparser::surround::query::BasicQueryFactory::initializeClass, &a0, &a1))
              {
                OBJ_CALL(result = self->object.makeLuceneSubQueriesField(a0, a1));
                return ::java::util::t_List::wrap_Object(result, &::org::apache::lucene::search::PY_TYPE(Query));
              }

              PyErr_SetArgsError((PyObject *) self, "makeLuceneSubQueriesField", args);
              return NULL;
            }

            static PyObject *t_ComposedQuery_toString(t_ComposedQuery *self, PyObject *args)
            {
              ::java::lang::String result((jobject) NULL);

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.toString());
                return j2p(result);
              }

              return callSuper(&PY_TYPE(ComposedQuery), (PyObject *) self, "toString", args, 2);
            }

            static PyObject *t_ComposedQuery_get__fieldsSubQueryAcceptable(t_ComposedQuery *self, void *data)
            {
              jboolean value;
              OBJ_CALL(value = self->object.isFieldsSubQueryAcceptable());
              Py_RETURN_BOOL(value);
            }

            static PyObject *t_ComposedQuery_get__nrSubQueries(t_ComposedQuery *self, void *data)
            {
              jint value;
              OBJ_CALL(value = self->object.getNrSubQueries());
              return PyInt_FromLong((long) value);
            }

            static PyObject *t_ComposedQuery_get__operatorInfix(t_ComposedQuery *self, void *data)
            {
              jboolean value;
              OBJ_CALL(value = self->object.isOperatorInfix());
              Py_RETURN_BOOL(value);
            }

            static PyObject *t_ComposedQuery_get__operatorName(t_ComposedQuery *self, void *data)
            {
              ::java::lang::String value((jobject) NULL);
              OBJ_CALL(value = self->object.getOperatorName());
              return j2p(value);
            }

            static PyObject *t_ComposedQuery_get__subQueriesIterator(t_ComposedQuery *self, void *data)
            {
              ::java::util::Iterator value((jobject) NULL);
              OBJ_CALL(value = self->object.getSubQueriesIterator());
              return ::java::util::t_Iterator::wrap_Object(value);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/RollingBuffer.h"
#include "org/apache/lucene/util/RollingBuffer$Resettable.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *RollingBuffer::class$ = NULL;
        jmethodID *RollingBuffer::mids$ = NULL;
        bool RollingBuffer::live$ = false;

        jclass RollingBuffer::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/RollingBuffer");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_freeBefore_39c7bd3c] = env->getMethodID(cls, "freeBefore", "(I)V");
            mids$[mid_get_730fb8ff] = env->getMethodID(cls, "get", "(I)Lorg/apache/lucene/util/RollingBuffer$Resettable;");
            mids$[mid_getMaxPos_54c6a179] = env->getMethodID(cls, "getMaxPos", "()I");
            mids$[mid_reset_54c6a166] = env->getMethodID(cls, "reset", "()V");
            mids$[mid_newInstance_a57a1151] = env->getMethodID(cls, "newInstance", "()Lorg/apache/lucene/util/RollingBuffer$Resettable;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        RollingBuffer::RollingBuffer() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        void RollingBuffer::freeBefore(jint a0) const
        {
          env->callVoidMethod(this$, mids$[mid_freeBefore_39c7bd3c], a0);
        }

        ::org::apache::lucene::util::RollingBuffer$Resettable RollingBuffer::get(jint a0) const
        {
          return ::org::apache::lucene::util::RollingBuffer$Resettable(env->callObjectMethod(this$, mids$[mid_get_730fb8ff], a0));
        }

        jint RollingBuffer::getMaxPos() const
        {
          return env->callIntMethod(this$, mids$[mid_getMaxPos_54c6a179]);
        }

        void RollingBuffer::reset() const
        {
          env->callVoidMethod(this$, mids$[mid_reset_54c6a166]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_RollingBuffer_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_RollingBuffer_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_RollingBuffer_of_(t_RollingBuffer *self, PyObject *args);
        static int t_RollingBuffer_init_(t_RollingBuffer *self, PyObject *args, PyObject *kwds);
        static PyObject *t_RollingBuffer_freeBefore(t_RollingBuffer *self, PyObject *arg);
        static PyObject *t_RollingBuffer_get(t_RollingBuffer *self, PyObject *arg);
        static PyObject *t_RollingBuffer_getMaxPos(t_RollingBuffer *self);
        static PyObject *t_RollingBuffer_reset(t_RollingBuffer *self);
        static PyObject *t_RollingBuffer_get__maxPos(t_RollingBuffer *self, void *data);
        static PyObject *t_RollingBuffer_get__parameters_(t_RollingBuffer *self, void *data);
        static PyGetSetDef t_RollingBuffer__fields_[] = {
          DECLARE_GET_FIELD(t_RollingBuffer, maxPos),
          DECLARE_GET_FIELD(t_RollingBuffer, parameters_),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_RollingBuffer__methods_[] = {
          DECLARE_METHOD(t_RollingBuffer, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_RollingBuffer, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_RollingBuffer, of_, METH_VARARGS),
          DECLARE_METHOD(t_RollingBuffer, freeBefore, METH_O),
          DECLARE_METHOD(t_RollingBuffer, get, METH_O),
          DECLARE_METHOD(t_RollingBuffer, getMaxPos, METH_NOARGS),
          DECLARE_METHOD(t_RollingBuffer, reset, METH_NOARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(RollingBuffer, t_RollingBuffer, ::java::lang::Object, RollingBuffer, t_RollingBuffer_init_, 0, 0, t_RollingBuffer__fields_, 0, 0);
        PyObject *t_RollingBuffer::wrap_Object(const RollingBuffer& object, PyTypeObject *p0)
        {
          PyObject *obj = t_RollingBuffer::wrap_Object(object);
          if (obj != NULL && obj != Py_None)
          {
            t_RollingBuffer *self = (t_RollingBuffer *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        PyObject *t_RollingBuffer::wrap_jobject(const jobject& object, PyTypeObject *p0)
        {
          PyObject *obj = t_RollingBuffer::wrap_jobject(object);
          if (obj != NULL && obj != Py_None)
          {
            t_RollingBuffer *self = (t_RollingBuffer *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        void t_RollingBuffer::install(PyObject *module)
        {
          installType(&PY_TYPE(RollingBuffer), module, "RollingBuffer", 0);
          PyDict_SetItemString(PY_TYPE(RollingBuffer).tp_dict, "Resettable", make_descriptor(&PY_TYPE(RollingBuffer$Resettable)));
        }

        void t_RollingBuffer::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(RollingBuffer).tp_dict, "class_", make_descriptor(RollingBuffer::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(RollingBuffer).tp_dict, "wrapfn_", make_descriptor(t_RollingBuffer::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(RollingBuffer).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_RollingBuffer_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, RollingBuffer::initializeClass, 1)))
            return NULL;
          return t_RollingBuffer::wrap_Object(RollingBuffer(((t_RollingBuffer *) arg)->object.this$));
        }
        static PyObject *t_RollingBuffer_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, RollingBuffer::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_RollingBuffer_of_(t_RollingBuffer *self, PyObject *args)
        {
          if (!parseArg(args, "T", 1, &(self->parameters)))
            Py_RETURN_SELF;
          return PyErr_SetArgsError((PyObject *) self, "of_", args);
        }

        static int t_RollingBuffer_init_(t_RollingBuffer *self, PyObject *args, PyObject *kwds)
        {
          RollingBuffer object((jobject) NULL);

          INT_CALL(object = RollingBuffer());
          self->object = object;

          return 0;
        }

        static PyObject *t_RollingBuffer_freeBefore(t_RollingBuffer *self, PyObject *arg)
        {
          jint a0;

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(self->object.freeBefore(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "freeBefore", arg);
          return NULL;
        }

        static PyObject *t_RollingBuffer_get(t_RollingBuffer *self, PyObject *arg)
        {
          jint a0;
          ::org::apache::lucene::util::RollingBuffer$Resettable result((jobject) NULL);

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(result = self->object.get(a0));
            return self->parameters[0] != NULL ? wrapType(self->parameters[0], result.this$) : ::org::apache::lucene::util::t_RollingBuffer$Resettable::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "get", arg);
          return NULL;
        }

        static PyObject *t_RollingBuffer_getMaxPos(t_RollingBuffer *self)
        {
          jint result;
          OBJ_CALL(result = self->object.getMaxPos());
          return PyInt_FromLong((long) result);
        }

        static PyObject *t_RollingBuffer_reset(t_RollingBuffer *self)
        {
          OBJ_CALL(self->object.reset());
          Py_RETURN_NONE;
        }
        static PyObject *t_RollingBuffer_get__parameters_(t_RollingBuffer *self, void *data)
        {
          return typeParameters(self->parameters, sizeof(self->parameters));
        }

        static PyObject *t_RollingBuffer_get__maxPos(t_RollingBuffer *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object.getMaxPos());
          return PyInt_FromLong((long) value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/surround/query/FieldsQuery.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/queryparser/surround/query/BasicQueryFactory.h"
#include "java/lang/String.h"
#include "java/util/List.h"
#include "org/apache/lucene/search/Query.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace surround {
          namespace query {

            ::java::lang::Class *FieldsQuery::class$ = NULL;
            jmethodID *FieldsQuery::mids$ = NULL;
            bool FieldsQuery::live$ = false;

            jclass FieldsQuery::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/surround/query/FieldsQuery");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_2649f1ba] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/queryparser/surround/query/SrndQuery;Ljava/util/List;C)V");
                mids$[mid_init$_bcbc5f3f] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/queryparser/surround/query/SrndQuery;Ljava/lang/String;C)V");
                mids$[mid_getFieldNames_87851566] = env->getMethodID(cls, "getFieldNames", "()Ljava/util/List;");
                mids$[mid_getFieldOperator_54c6a173] = env->getMethodID(cls, "getFieldOperator", "()C");
                mids$[mid_isFieldsSubQueryAcceptable_54c6a16a] = env->getMethodID(cls, "isFieldsSubQueryAcceptable", "()Z");
                mids$[mid_makeLuceneQueryFieldNoBoost_1aaeee30] = env->getMethodID(cls, "makeLuceneQueryFieldNoBoost", "(Ljava/lang/String;Lorg/apache/lucene/queryparser/surround/query/BasicQueryFactory;)Lorg/apache/lucene/search/Query;");
                mids$[mid_makeLuceneQueryNoBoost_3d79835e] = env->getMethodID(cls, "makeLuceneQueryNoBoost", "(Lorg/apache/lucene/queryparser/surround/query/BasicQueryFactory;)Lorg/apache/lucene/search/Query;");
                mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");
                mids$[mid_fieldNamesToString_9f94ae34] = env->getMethodID(cls, "fieldNamesToString", "(Ljava/lang/StringBuilder;)V");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            FieldsQuery::FieldsQuery(const ::org::apache::lucene::queryparser::surround::query::SrndQuery & a0, const ::java::util::List & a1, jchar a2) : ::org::apache::lucene::queryparser::surround::query::SrndQuery(env->newObject(initializeClass, &mids$, mid_init$_2649f1ba, a0.this$, a1.this$, a2)) {}

            FieldsQuery::FieldsQuery(const ::org::apache::lucene::queryparser::surround::query::SrndQuery & a0, const ::java::lang::String & a1, jchar a2) : ::org::apache::lucene::queryparser::surround::query::SrndQuery(env->newObject(initializeClass, &mids$, mid_init$_bcbc5f3f, a0.this$, a1.this$, a2)) {}

            ::java::util::List FieldsQuery::getFieldNames() const
            {
              return ::java::util::List(env->callObjectMethod(this$, mids$[mid_getFieldNames_87851566]));
            }

            jchar FieldsQuery::getFieldOperator() const
            {
              return env->callCharMethod(this$, mids$[mid_getFieldOperator_54c6a173]);
            }

            jboolean FieldsQuery::isFieldsSubQueryAcceptable() const
            {
              return env->callBooleanMethod(this$, mids$[mid_isFieldsSubQueryAcceptable_54c6a16a]);
            }

            ::org::apache::lucene::search::Query FieldsQuery::makeLuceneQueryFieldNoBoost(const ::java::lang::String & a0, const ::org::apache::lucene::queryparser::surround::query::BasicQueryFactory & a1) const
            {
              return ::org::apache::lucene::search::Query(env->callObjectMethod(this$, mids$[mid_makeLuceneQueryFieldNoBoost_1aaeee30], a0.this$, a1.this$));
            }

            ::org::apache::lucene::search::Query FieldsQuery::makeLuceneQueryNoBoost(const ::org::apache::lucene::queryparser::surround::query::BasicQueryFactory & a0) const
            {
              return ::org::apache::lucene::search::Query(env->callObjectMethod(this$, mids$[mid_makeLuceneQueryNoBoost_3d79835e], a0.this$));
            }

            ::java::lang::String FieldsQuery::toString() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace surround {
          namespace query {
            static PyObject *t_FieldsQuery_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_FieldsQuery_instance_(PyTypeObject *type, PyObject *arg);
            static int t_FieldsQuery_init_(t_FieldsQuery *self, PyObject *args, PyObject *kwds);
            static PyObject *t_FieldsQuery_getFieldNames(t_FieldsQuery *self);
            static PyObject *t_FieldsQuery_getFieldOperator(t_FieldsQuery *self);
            static PyObject *t_FieldsQuery_isFieldsSubQueryAcceptable(t_FieldsQuery *self, PyObject *args);
            static PyObject *t_FieldsQuery_makeLuceneQueryFieldNoBoost(t_FieldsQuery *self, PyObject *args);
            static PyObject *t_FieldsQuery_makeLuceneQueryNoBoost(t_FieldsQuery *self, PyObject *arg);
            static PyObject *t_FieldsQuery_toString(t_FieldsQuery *self, PyObject *args);
            static PyObject *t_FieldsQuery_get__fieldNames(t_FieldsQuery *self, void *data);
            static PyObject *t_FieldsQuery_get__fieldOperator(t_FieldsQuery *self, void *data);
            static PyObject *t_FieldsQuery_get__fieldsSubQueryAcceptable(t_FieldsQuery *self, void *data);
            static PyGetSetDef t_FieldsQuery__fields_[] = {
              DECLARE_GET_FIELD(t_FieldsQuery, fieldNames),
              DECLARE_GET_FIELD(t_FieldsQuery, fieldOperator),
              DECLARE_GET_FIELD(t_FieldsQuery, fieldsSubQueryAcceptable),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_FieldsQuery__methods_[] = {
              DECLARE_METHOD(t_FieldsQuery, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_FieldsQuery, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_FieldsQuery, getFieldNames, METH_NOARGS),
              DECLARE_METHOD(t_FieldsQuery, getFieldOperator, METH_NOARGS),
              DECLARE_METHOD(t_FieldsQuery, isFieldsSubQueryAcceptable, METH_VARARGS),
              DECLARE_METHOD(t_FieldsQuery, makeLuceneQueryFieldNoBoost, METH_VARARGS),
              DECLARE_METHOD(t_FieldsQuery, makeLuceneQueryNoBoost, METH_O),
              DECLARE_METHOD(t_FieldsQuery, toString, METH_VARARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(FieldsQuery, t_FieldsQuery, ::org::apache::lucene::queryparser::surround::query::SrndQuery, FieldsQuery, t_FieldsQuery_init_, 0, 0, t_FieldsQuery__fields_, 0, 0);

            void t_FieldsQuery::install(PyObject *module)
            {
              installType(&PY_TYPE(FieldsQuery), module, "FieldsQuery", 0);
            }

            void t_FieldsQuery::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(FieldsQuery).tp_dict, "class_", make_descriptor(FieldsQuery::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(FieldsQuery).tp_dict, "wrapfn_", make_descriptor(t_FieldsQuery::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(FieldsQuery).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_FieldsQuery_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, FieldsQuery::initializeClass, 1)))
                return NULL;
              return t_FieldsQuery::wrap_Object(FieldsQuery(((t_FieldsQuery *) arg)->object.this$));
            }
            static PyObject *t_FieldsQuery_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, FieldsQuery::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_FieldsQuery_init_(t_FieldsQuery *self, PyObject *args, PyObject *kwds)
            {
              switch (PyTuple_GET_SIZE(args)) {
               case 3:
                {
                  ::org::apache::lucene::queryparser::surround::query::SrndQuery a0((jobject) NULL);
                  ::java::util::List a1((jobject) NULL);
                  PyTypeObject **p1;
                  jchar a2;
                  FieldsQuery object((jobject) NULL);

                  if (!parseArgs(args, "kKC", ::org::apache::lucene::queryparser::surround::query::SrndQuery::initializeClass, ::java::util::List::initializeClass, &a0, &a1, &p1, ::java::util::t_List::parameters_, &a2))
                  {
                    INT_CALL(object = FieldsQuery(a0, a1, a2));
                    self->object = object;
                    break;
                  }
                }
                {
                  ::org::apache::lucene::queryparser::surround::query::SrndQuery a0((jobject) NULL);
                  ::java::lang::String a1((jobject) NULL);
                  jchar a2;
                  FieldsQuery object((jobject) NULL);

                  if (!parseArgs(args, "ksC", ::org::apache::lucene::queryparser::surround::query::SrndQuery::initializeClass, &a0, &a1, &a2))
                  {
                    INT_CALL(object = FieldsQuery(a0, a1, a2));
                    self->object = object;
                    break;
                  }
                }
               default:
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_FieldsQuery_getFieldNames(t_FieldsQuery *self)
            {
              ::java::util::List result((jobject) NULL);
              OBJ_CALL(result = self->object.getFieldNames());
              return ::java::util::t_List::wrap_Object(result, &::java::lang::PY_TYPE(String));
            }

            static PyObject *t_FieldsQuery_getFieldOperator(t_FieldsQuery *self)
            {
              jchar result;
              OBJ_CALL(result = self->object.getFieldOperator());
              return PyUnicode_FromUnicode((Py_UNICODE *) &result, 1);
            }

            static PyObject *t_FieldsQuery_isFieldsSubQueryAcceptable(t_FieldsQuery *self, PyObject *args)
            {
              jboolean result;

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.isFieldsSubQueryAcceptable());
                Py_RETURN_BOOL(result);
              }

              return callSuper(&PY_TYPE(FieldsQuery), (PyObject *) self, "isFieldsSubQueryAcceptable", args, 2);
            }

            static PyObject *t_FieldsQuery_makeLuceneQueryFieldNoBoost(t_FieldsQuery *self, PyObject *args)
            {
              ::java::lang::String a0((jobject) NULL);
              ::org::apache::lucene::queryparser::surround::query::BasicQueryFactory a1((jobject) NULL);
              ::org::apache::lucene::search::Query result((jobject) NULL);

              if (!parseArgs(args, "sk", ::org::apache::lucene::queryparser::surround::query::BasicQueryFactory::initializeClass, &a0, &a1))
              {
                OBJ_CALL(result = self->object.makeLuceneQueryFieldNoBoost(a0, a1));
                return ::org::apache::lucene::search::t_Query::wrap_Object(result);
              }

              return callSuper(&PY_TYPE(FieldsQuery), (PyObject *) self, "makeLuceneQueryFieldNoBoost", args, 2);
            }

            static PyObject *t_FieldsQuery_makeLuceneQueryNoBoost(t_FieldsQuery *self, PyObject *arg)
            {
              ::org::apache::lucene::queryparser::surround::query::BasicQueryFactory a0((jobject) NULL);
              ::org::apache::lucene::search::Query result((jobject) NULL);

              if (!parseArg(arg, "k", ::org::apache::lucene::queryparser::surround::query::BasicQueryFactory::initializeClass, &a0))
              {
                OBJ_CALL(result = self->object.makeLuceneQueryNoBoost(a0));
                return ::org::apache::lucene::search::t_Query::wrap_Object(result);
              }

              PyErr_SetArgsError((PyObject *) self, "makeLuceneQueryNoBoost", arg);
              return NULL;
            }

            static PyObject *t_FieldsQuery_toString(t_FieldsQuery *self, PyObject *args)
            {
              ::java::lang::String result((jobject) NULL);

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.toString());
                return j2p(result);
              }

              return callSuper(&PY_TYPE(FieldsQuery), (PyObject *) self, "toString", args, 2);
            }

            static PyObject *t_FieldsQuery_get__fieldNames(t_FieldsQuery *self, void *data)
            {
              ::java::util::List value((jobject) NULL);
              OBJ_CALL(value = self->object.getFieldNames());
              return ::java::util::t_List::wrap_Object(value);
            }

            static PyObject *t_FieldsQuery_get__fieldOperator(t_FieldsQuery *self, void *data)
            {
              jchar value;
              OBJ_CALL(value = self->object.getFieldOperator());
              return PyUnicode_FromUnicode((Py_UNICODE *) &value, 1);
            }

            static PyObject *t_FieldsQuery_get__fieldsSubQueryAcceptable(t_FieldsQuery *self, void *data)
            {
              jboolean value;
              OBJ_CALL(value = self->object.isFieldsSubQueryAcceptable());
              Py_RETURN_BOOL(value);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/payloads/FloatEncoder.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace payloads {

          ::java::lang::Class *FloatEncoder::class$ = NULL;
          jmethodID *FloatEncoder::mids$ = NULL;
          bool FloatEncoder::live$ = false;

          jclass FloatEncoder::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/payloads/FloatEncoder");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_encode_871544e1] = env->getMethodID(cls, "encode", "([CII)Lorg/apache/lucene/util/BytesRef;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          FloatEncoder::FloatEncoder() : ::org::apache::lucene::analysis::payloads::AbstractEncoder(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          ::org::apache::lucene::util::BytesRef FloatEncoder::encode(const JArray< jchar > & a0, jint a1, jint a2) const
          {
            return ::org::apache::lucene::util::BytesRef(env->callObjectMethod(this$, mids$[mid_encode_871544e1], a0.this$, a1, a2));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace payloads {
          static PyObject *t_FloatEncoder_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_FloatEncoder_instance_(PyTypeObject *type, PyObject *arg);
          static int t_FloatEncoder_init_(t_FloatEncoder *self, PyObject *args, PyObject *kwds);
          static PyObject *t_FloatEncoder_encode(t_FloatEncoder *self, PyObject *args);

          static PyMethodDef t_FloatEncoder__methods_[] = {
            DECLARE_METHOD(t_FloatEncoder, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FloatEncoder, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FloatEncoder, encode, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(FloatEncoder, t_FloatEncoder, ::org::apache::lucene::analysis::payloads::AbstractEncoder, FloatEncoder, t_FloatEncoder_init_, 0, 0, 0, 0, 0);

          void t_FloatEncoder::install(PyObject *module)
          {
            installType(&PY_TYPE(FloatEncoder), module, "FloatEncoder", 0);
          }

          void t_FloatEncoder::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(FloatEncoder).tp_dict, "class_", make_descriptor(FloatEncoder::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(FloatEncoder).tp_dict, "wrapfn_", make_descriptor(t_FloatEncoder::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(FloatEncoder).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_FloatEncoder_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, FloatEncoder::initializeClass, 1)))
              return NULL;
            return t_FloatEncoder::wrap_Object(FloatEncoder(((t_FloatEncoder *) arg)->object.this$));
          }
          static PyObject *t_FloatEncoder_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, FloatEncoder::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_FloatEncoder_init_(t_FloatEncoder *self, PyObject *args, PyObject *kwds)
          {
            FloatEncoder object((jobject) NULL);

            INT_CALL(object = FloatEncoder());
            self->object = object;

            return 0;
          }

          static PyObject *t_FloatEncoder_encode(t_FloatEncoder *self, PyObject *args)
          {
            JArray< jchar > a0((jobject) NULL);
            jint a1;
            jint a2;
            ::org::apache::lucene::util::BytesRef result((jobject) NULL);

            if (!parseArgs(args, "[CII", &a0, &a1, &a2))
            {
              OBJ_CALL(result = self->object.encode(a0, a1, a2));
              return ::org::apache::lucene::util::t_BytesRef::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(FloatEncoder), (PyObject *) self, "encode", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "java/util/HashSet.h"
#include "java/lang/Class.h"
#include "java/util/Spliterator.h"
#include "java/lang/Object.h"
#include "java/lang/Cloneable.h"
#include "java/util/Iterator.h"
#include "java/util/Collection.h"
#include "java/io/Serializable.h"
#include "JArray.h"

namespace java {
  namespace util {

    ::java::lang::Class *HashSet::class$ = NULL;
    jmethodID *HashSet::mids$ = NULL;
    bool HashSet::live$ = false;

    jclass HashSet::initializeClass(bool getOnly)
    {
      if (getOnly)
        return (jclass) (live$ ? class$->this$ : NULL);
      if (class$ == NULL)
      {
        jclass cls = (jclass) env->findClass("java/util/HashSet");

        mids$ = new jmethodID[max_mid];
        mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
        mids$[mid_init$_39c7bd3c] = env->getMethodID(cls, "<init>", "(I)V");
        mids$[mid_init$_9bfb370d] = env->getMethodID(cls, "<init>", "(Ljava/util/Collection;)V");
        mids$[mid_init$_abdf2c51] = env->getMethodID(cls, "<init>", "(IF)V");
        mids$[mid_add_290588e2] = env->getMethodID(cls, "add", "(Ljava/lang/Object;)Z");
        mids$[mid_clear_54c6a166] = env->getMethodID(cls, "clear", "()V");
        mids$[mid_clone_846352c3] = env->getMethodID(cls, "clone", "()Ljava/lang/Object;");
        mids$[mid_contains_290588e2] = env->getMethodID(cls, "contains", "(Ljava/lang/Object;)Z");
        mids$[mid_isEmpty_54c6a16a] = env->getMethodID(cls, "isEmpty", "()Z");
        mids$[mid_iterator_40858c90] = env->getMethodID(cls, "iterator", "()Ljava/util/Iterator;");
        mids$[mid_remove_290588e2] = env->getMethodID(cls, "remove", "(Ljava/lang/Object;)Z");
        mids$[mid_size_54c6a179] = env->getMethodID(cls, "size", "()I");
        mids$[mid_spliterator_59b28390] = env->getMethodID(cls, "spliterator", "()Ljava/util/Spliterator;");

        class$ = (::java::lang::Class *) new JObject(cls);
        live$ = true;
      }
      return (jclass) class$->this$;
    }

    HashSet::HashSet() : ::java::util::AbstractSet(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

    HashSet::HashSet(jint a0) : ::java::util::AbstractSet(env->newObject(initializeClass, &mids$, mid_init$_39c7bd3c, a0)) {}

    HashSet::HashSet(const ::java::util::Collection & a0) : ::java::util::AbstractSet(env->newObject(initializeClass, &mids$, mid_init$_9bfb370d, a0.this$)) {}

    HashSet::HashSet(jint a0, jfloat a1) : ::java::util::AbstractSet(env->newObject(initializeClass, &mids$, mid_init$_abdf2c51, a0, a1)) {}

    jboolean HashSet::add(const ::java::lang::Object & a0) const
    {
      return env->callBooleanMethod(this$, mids$[mid_add_290588e2], a0.this$);
    }

    void HashSet::clear() const
    {
      env->callVoidMethod(this$, mids$[mid_clear_54c6a166]);
    }

    ::java::lang::Object HashSet::clone() const
    {
      return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_clone_846352c3]));
    }

    jboolean HashSet::contains(const ::java::lang::Object & a0) const
    {
      return env->callBooleanMethod(this$, mids$[mid_contains_290588e2], a0.this$);
    }

    jboolean HashSet::isEmpty() const
    {
      return env->callBooleanMethod(this$, mids$[mid_isEmpty_54c6a16a]);
    }

    ::java::util::Iterator HashSet::iterator() const
    {
      return ::java::util::Iterator(env->callObjectMethod(this$, mids$[mid_iterator_40858c90]));
    }

    jboolean HashSet::remove(const ::java::lang::Object & a0) const
    {
      return env->callBooleanMethod(this$, mids$[mid_remove_290588e2], a0.this$);
    }

    jint HashSet::size() const
    {
      return env->callIntMethod(this$, mids$[mid_size_54c6a179]);
    }

    ::java::util::Spliterator HashSet::spliterator() const
    {
      return ::java::util::Spliterator(env->callObjectMethod(this$, mids$[mid_spliterator_59b28390]));
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace java {
  namespace util {
    static PyObject *t_HashSet_cast_(PyTypeObject *type, PyObject *arg);
    static PyObject *t_HashSet_instance_(PyTypeObject *type, PyObject *arg);
    static PyObject *t_HashSet_of_(t_HashSet *self, PyObject *args);
    static int t_HashSet_init_(t_HashSet *self, PyObject *args, PyObject *kwds);
    static PyObject *t_HashSet_add(t_HashSet *self, PyObject *args);
    static PyObject *t_HashSet_clear(t_HashSet *self, PyObject *args);
    static PyObject *t_HashSet_clone(t_HashSet *self);
    static PyObject *t_HashSet_contains(t_HashSet *self, PyObject *args);
    static PyObject *t_HashSet_isEmpty(t_HashSet *self, PyObject *args);
    static PyObject *t_HashSet_iterator(t_HashSet *self, PyObject *args);
    static PyObject *t_HashSet_remove(t_HashSet *self, PyObject *args);
    static PyObject *t_HashSet_size(t_HashSet *self, PyObject *args);
    static PyObject *t_HashSet_spliterator(t_HashSet *self, PyObject *args);
    static PyObject *t_HashSet_get__empty(t_HashSet *self, void *data);
    static PyObject *t_HashSet_get__parameters_(t_HashSet *self, void *data);
    static PyGetSetDef t_HashSet__fields_[] = {
      DECLARE_GET_FIELD(t_HashSet, empty),
      DECLARE_GET_FIELD(t_HashSet, parameters_),
      { NULL, NULL, NULL, NULL, NULL }
    };

    static PyMethodDef t_HashSet__methods_[] = {
      DECLARE_METHOD(t_HashSet, cast_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_HashSet, instance_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_HashSet, of_, METH_VARARGS),
      DECLARE_METHOD(t_HashSet, add, METH_VARARGS),
      DECLARE_METHOD(t_HashSet, clear, METH_VARARGS),
      DECLARE_METHOD(t_HashSet, clone, METH_NOARGS),
      DECLARE_METHOD(t_HashSet, contains, METH_VARARGS),
      DECLARE_METHOD(t_HashSet, isEmpty, METH_VARARGS),
      DECLARE_METHOD(t_HashSet, iterator, METH_VARARGS),
      DECLARE_METHOD(t_HashSet, remove, METH_VARARGS),
      DECLARE_METHOD(t_HashSet, size, METH_VARARGS),
      DECLARE_METHOD(t_HashSet, spliterator, METH_VARARGS),
      { NULL, NULL, 0, NULL }
    };

    DECLARE_TYPE(HashSet, t_HashSet, ::java::util::AbstractSet, HashSet, t_HashSet_init_, ((PyObject *(*)(t_HashSet *)) get_generic_iterator< t_HashSet >), 0, t_HashSet__fields_, 0, 0);
    PyObject *t_HashSet::wrap_Object(const HashSet& object, PyTypeObject *p0)
    {
      PyObject *obj = t_HashSet::wrap_Object(object);
      if (obj != NULL && obj != Py_None)
      {
        t_HashSet *self = (t_HashSet *) obj;
        self->parameters[0] = p0;
      }
      return obj;
    }

    PyObject *t_HashSet::wrap_jobject(const jobject& object, PyTypeObject *p0)
    {
      PyObject *obj = t_HashSet::wrap_jobject(object);
      if (obj != NULL && obj != Py_None)
      {
        t_HashSet *self = (t_HashSet *) obj;
        self->parameters[0] = p0;
      }
      return obj;
    }

    void t_HashSet::install(PyObject *module)
    {
      installType(&PY_TYPE(HashSet), module, "HashSet", 0);
    }

    void t_HashSet::initialize(PyObject *module)
    {
      PyDict_SetItemString(PY_TYPE(HashSet).tp_dict, "class_", make_descriptor(HashSet::initializeClass, 1));
      PyDict_SetItemString(PY_TYPE(HashSet).tp_dict, "wrapfn_", make_descriptor(t_HashSet::wrap_jobject));
      PyDict_SetItemString(PY_TYPE(HashSet).tp_dict, "boxfn_", make_descriptor(boxObject));
    }

    static PyObject *t_HashSet_cast_(PyTypeObject *type, PyObject *arg)
    {
      if (!(arg = castCheck(arg, HashSet::initializeClass, 1)))
        return NULL;
      return t_HashSet::wrap_Object(HashSet(((t_HashSet *) arg)->object.this$));
    }
    static PyObject *t_HashSet_instance_(PyTypeObject *type, PyObject *arg)
    {
      if (!castCheck(arg, HashSet::initializeClass, 0))
        Py_RETURN_FALSE;
      Py_RETURN_TRUE;
    }

    static PyObject *t_HashSet_of_(t_HashSet *self, PyObject *args)
    {
      if (!parseArg(args, "T", 1, &(self->parameters)))
        Py_RETURN_SELF;
      return PyErr_SetArgsError((PyObject *) self, "of_", args);
    }

    static int t_HashSet_init_(t_HashSet *self, PyObject *args, PyObject *kwds)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 0:
        {
          HashSet object((jobject) NULL);

          INT_CALL(object = HashSet());
          self->object = object;
          break;
        }
        goto err;
       case 1:
        {
          jint a0;
          HashSet object((jobject) NULL);

          if (!parseArgs(args, "I", &a0))
          {
            INT_CALL(object = HashSet(a0));
            self->object = object;
            break;
          }
        }
        {
          ::java::util::Collection a0((jobject) NULL);
          PyTypeObject **p0;
          HashSet object((jobject) NULL);

          if (!parseArgs(args, "K", ::java::util::Collection::initializeClass, &a0, &p0, ::java::util::t_Collection::parameters_))
          {
            INT_CALL(object = HashSet(a0));
            self->object = object;
            break;
          }
        }
        goto err;
       case 2:
        {
          jint a0;
          jfloat a1;
          HashSet object((jobject) NULL);

          if (!parseArgs(args, "IF", &a0, &a1))
          {
            INT_CALL(object = HashSet(a0, a1));
            self->object = object;
            break;
          }
        }
       default:
       err:
        PyErr_SetArgsError((PyObject *) self, "__init__", args);
        return -1;
      }

      return 0;
    }

    static PyObject *t_HashSet_add(t_HashSet *self, PyObject *args)
    {
      ::java::lang::Object a0((jobject) NULL);
      jboolean result;

      if (!parseArgs(args, "O", self->parameters[0], &a0))
      {
        OBJ_CALL(result = self->object.add(a0));
        Py_RETURN_BOOL(result);
      }

      return callSuper(&PY_TYPE(HashSet), (PyObject *) self, "add", args, 2);
    }

    static PyObject *t_HashSet_clear(t_HashSet *self, PyObject *args)
    {

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(self->object.clear());
        Py_RETURN_NONE;
      }

      return callSuper(&PY_TYPE(HashSet), (PyObject *) self, "clear", args, 2);
    }

    static PyObject *t_HashSet_clone(t_HashSet *self)
    {
      ::java::lang::Object result((jobject) NULL);
      OBJ_CALL(result = self->object.clone());
      return ::java::lang::t_Object::wrap_Object(result);
    }

    static PyObject *t_HashSet_contains(t_HashSet *self, PyObject *args)
    {
      ::java::lang::Object a0((jobject) NULL);
      jboolean result;

      if (!parseArgs(args, "o", &a0))
      {
        OBJ_CALL(result = self->object.contains(a0));
        Py_RETURN_BOOL(result);
      }

      return callSuper(&PY_TYPE(HashSet), (PyObject *) self, "contains", args, 2);
    }

    static PyObject *t_HashSet_isEmpty(t_HashSet *self, PyObject *args)
    {
      jboolean result;

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.isEmpty());
        Py_RETURN_BOOL(result);
      }

      return callSuper(&PY_TYPE(HashSet), (PyObject *) self, "isEmpty", args, 2);
    }

    static PyObject *t_HashSet_iterator(t_HashSet *self, PyObject *args)
    {
      ::java::util::Iterator result((jobject) NULL);

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.iterator());
        return ::java::util::t_Iterator::wrap_Object(result, self->parameters[0]);
      }

      return callSuper(&PY_TYPE(HashSet), (PyObject *) self, "iterator", args, 2);
    }

    static PyObject *t_HashSet_remove(t_HashSet *self, PyObject *args)
    {
      ::java::lang::Object a0((jobject) NULL);
      jboolean result;

      if (!parseArgs(args, "o", &a0))
      {
        OBJ_CALL(result = self->object.remove(a0));
        Py_RETURN_BOOL(result);
      }

      return callSuper(&PY_TYPE(HashSet), (PyObject *) self, "remove", args, 2);
    }

    static PyObject *t_HashSet_size(t_HashSet *self, PyObject *args)
    {
      jint result;

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.size());
        return PyInt_FromLong((long) result);
      }

      return callSuper(&PY_TYPE(HashSet), (PyObject *) self, "size", args, 2);
    }

    static PyObject *t_HashSet_spliterator(t_HashSet *self, PyObject *args)
    {
      ::java::util::Spliterator result((jobject) NULL);

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.spliterator());
        return ::java::util::t_Spliterator::wrap_Object(result, self->parameters[0]);
      }

      return callSuper(&PY_TYPE(HashSet), (PyObject *) self, "spliterator", args, 2);
    }
    static PyObject *t_HashSet_get__parameters_(t_HashSet *self, void *data)
    {
      return typeParameters(self->parameters, sizeof(self->parameters));
    }

    static PyObject *t_HashSet_get__empty(t_HashSet *self, void *data)
    {
      jboolean value;
      OBJ_CALL(value = self->object.isEmpty());
      Py_RETURN_BOOL(value);
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queries/BoostingQuery.h"
#include "java/lang/Class.h"
#include "java/lang/Object.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {

        ::java::lang::Class *BoostingQuery::class$ = NULL;
        jmethodID *BoostingQuery::mids$ = NULL;
        bool BoostingQuery::live$ = false;

        jclass BoostingQuery::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/queries/BoostingQuery");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_7f23a8a3] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/Query;Lorg/apache/lucene/search/Query;F)V");
            mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
            mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
            mids$[mid_rewrite_7edcaa43] = env->getMethodID(cls, "rewrite", "(Lorg/apache/lucene/index/IndexReader;)Lorg/apache/lucene/search/Query;");
            mids$[mid_toString_97a5258f] = env->getMethodID(cls, "toString", "(Ljava/lang/String;)Ljava/lang/String;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        BoostingQuery::BoostingQuery(const ::org::apache::lucene::search::Query & a0, const ::org::apache::lucene::search::Query & a1, jfloat a2) : ::org::apache::lucene::search::Query(env->newObject(initializeClass, &mids$, mid_init$_7f23a8a3, a0.this$, a1.this$, a2)) {}

        jboolean BoostingQuery::equals(const ::java::lang::Object & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
        }

        jint BoostingQuery::hashCode() const
        {
          return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
        }

        ::org::apache::lucene::search::Query BoostingQuery::rewrite(const ::org::apache::lucene::index::IndexReader & a0) const
        {
          return ::org::apache::lucene::search::Query(env->callObjectMethod(this$, mids$[mid_rewrite_7edcaa43], a0.this$));
        }

        ::java::lang::String BoostingQuery::toString(const ::java::lang::String & a0) const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_97a5258f], a0.this$));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        static PyObject *t_BoostingQuery_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_BoostingQuery_instance_(PyTypeObject *type, PyObject *arg);
        static int t_BoostingQuery_init_(t_BoostingQuery *self, PyObject *args, PyObject *kwds);
        static PyObject *t_BoostingQuery_equals(t_BoostingQuery *self, PyObject *args);
        static PyObject *t_BoostingQuery_hashCode(t_BoostingQuery *self, PyObject *args);
        static PyObject *t_BoostingQuery_rewrite(t_BoostingQuery *self, PyObject *args);
        static PyObject *t_BoostingQuery_toString(t_BoostingQuery *self, PyObject *args);

        static PyMethodDef t_BoostingQuery__methods_[] = {
          DECLARE_METHOD(t_BoostingQuery, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_BoostingQuery, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_BoostingQuery, equals, METH_VARARGS),
          DECLARE_METHOD(t_BoostingQuery, hashCode, METH_VARARGS),
          DECLARE_METHOD(t_BoostingQuery, rewrite, METH_VARARGS),
          DECLARE_METHOD(t_BoostingQuery, toString, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(BoostingQuery, t_BoostingQuery, ::org::apache::lucene::search::Query, BoostingQuery, t_BoostingQuery_init_, 0, 0, 0, 0, 0);

        void t_BoostingQuery::install(PyObject *module)
        {
          installType(&PY_TYPE(BoostingQuery), module, "BoostingQuery", 0);
        }

        void t_BoostingQuery::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(BoostingQuery).tp_dict, "class_", make_descriptor(BoostingQuery::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(BoostingQuery).tp_dict, "wrapfn_", make_descriptor(t_BoostingQuery::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(BoostingQuery).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_BoostingQuery_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, BoostingQuery::initializeClass, 1)))
            return NULL;
          return t_BoostingQuery::wrap_Object(BoostingQuery(((t_BoostingQuery *) arg)->object.this$));
        }
        static PyObject *t_BoostingQuery_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, BoostingQuery::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_BoostingQuery_init_(t_BoostingQuery *self, PyObject *args, PyObject *kwds)
        {
          ::org::apache::lucene::search::Query a0((jobject) NULL);
          ::org::apache::lucene::search::Query a1((jobject) NULL);
          jfloat a2;
          BoostingQuery object((jobject) NULL);

          if (!parseArgs(args, "kkF", ::org::apache::lucene::search::Query::initializeClass, ::org::apache::lucene::search::Query::initializeClass, &a0, &a1, &a2))
          {
            INT_CALL(object = BoostingQuery(a0, a1, a2));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_BoostingQuery_equals(t_BoostingQuery *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.equals(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(BoostingQuery), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_BoostingQuery_hashCode(t_BoostingQuery *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hashCode());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(BoostingQuery), (PyObject *) self, "hashCode", args, 2);
        }

        static PyObject *t_BoostingQuery_rewrite(t_BoostingQuery *self, PyObject *args)
        {
          ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
          ::org::apache::lucene::search::Query result((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::index::IndexReader::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.rewrite(a0));
            return ::org::apache::lucene::search::t_Query::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(BoostingQuery), (PyObject *) self, "rewrite", args, 2);
        }

        static PyObject *t_BoostingQuery_toString(t_BoostingQuery *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = self->object.toString(a0));
            return j2p(result);
          }

          return callSuper(&PY_TYPE(BoostingQuery), (PyObject *) self, "toString", args, 2);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queries/function/valuesource/BytesRefFieldSource.h"
#include "org/apache/lucene/queries/function/FunctionValues.h"
#include "java/lang/Class.h"
#include "java/util/Map.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {

            ::java::lang::Class *BytesRefFieldSource::class$ = NULL;
            jmethodID *BytesRefFieldSource::mids$ = NULL;
            bool BytesRefFieldSource::live$ = false;

            jclass BytesRefFieldSource::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queries/function/valuesource/BytesRefFieldSource");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_5fdc3f48] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;)V");
                mids$[mid_getValues_4c566485] = env->getMethodID(cls, "getValues", "(Ljava/util/Map;Lorg/apache/lucene/index/AtomicReaderContext;)Lorg/apache/lucene/queries/function/FunctionValues;");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            BytesRefFieldSource::BytesRefFieldSource(const ::java::lang::String & a0) : ::org::apache::lucene::queries::function::valuesource::FieldCacheSource(env->newObject(initializeClass, &mids$, mid_init$_5fdc3f48, a0.this$)) {}

            ::org::apache::lucene::queries::function::FunctionValues BytesRefFieldSource::getValues(const ::java::util::Map & a0, const ::org::apache::lucene::index::AtomicReaderContext & a1) const
            {
              return ::org::apache::lucene::queries::function::FunctionValues(env->callObjectMethod(this$, mids$[mid_getValues_4c566485], a0.this$, a1.this$));
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {
            static PyObject *t_BytesRefFieldSource_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_BytesRefFieldSource_instance_(PyTypeObject *type, PyObject *arg);
            static int t_BytesRefFieldSource_init_(t_BytesRefFieldSource *self, PyObject *args, PyObject *kwds);
            static PyObject *t_BytesRefFieldSource_getValues(t_BytesRefFieldSource *self, PyObject *args);

            static PyMethodDef t_BytesRefFieldSource__methods_[] = {
              DECLARE_METHOD(t_BytesRefFieldSource, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_BytesRefFieldSource, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_BytesRefFieldSource, getValues, METH_VARARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(BytesRefFieldSource, t_BytesRefFieldSource, ::org::apache::lucene::queries::function::valuesource::FieldCacheSource, BytesRefFieldSource, t_BytesRefFieldSource_init_, 0, 0, 0, 0, 0);

            void t_BytesRefFieldSource::install(PyObject *module)
            {
              installType(&PY_TYPE(BytesRefFieldSource), module, "BytesRefFieldSource", 0);
            }

            void t_BytesRefFieldSource::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(BytesRefFieldSource).tp_dict, "class_", make_descriptor(BytesRefFieldSource::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(BytesRefFieldSource).tp_dict, "wrapfn_", make_descriptor(t_BytesRefFieldSource::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(BytesRefFieldSource).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_BytesRefFieldSource_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, BytesRefFieldSource::initializeClass, 1)))
                return NULL;
              return t_BytesRefFieldSource::wrap_Object(BytesRefFieldSource(((t_BytesRefFieldSource *) arg)->object.this$));
            }
            static PyObject *t_BytesRefFieldSource_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, BytesRefFieldSource::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_BytesRefFieldSource_init_(t_BytesRefFieldSource *self, PyObject *args, PyObject *kwds)
            {
              ::java::lang::String a0((jobject) NULL);
              BytesRefFieldSource object((jobject) NULL);

              if (!parseArgs(args, "s", &a0))
              {
                INT_CALL(object = BytesRefFieldSource(a0));
                self->object = object;
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_BytesRefFieldSource_getValues(t_BytesRefFieldSource *self, PyObject *args)
            {
              ::java::util::Map a0((jobject) NULL);
              PyTypeObject **p0;
              ::org::apache::lucene::index::AtomicReaderContext a1((jobject) NULL);
              ::org::apache::lucene::queries::function::FunctionValues result((jobject) NULL);

              if (!parseArgs(args, "Kk", ::java::util::Map::initializeClass, ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_, &a1))
              {
                OBJ_CALL(result = self->object.getValues(a0, a1));
                return ::org::apache::lucene::queries::function::t_FunctionValues::wrap_Object(result);
              }

              return callSuper(&PY_TYPE(BytesRefFieldSource), (PyObject *) self, "getValues", args, 2);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/no/NorwegianMinimalStemFilter.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace no {

          ::java::lang::Class *NorwegianMinimalStemFilter::class$ = NULL;
          jmethodID *NorwegianMinimalStemFilter::mids$ = NULL;
          bool NorwegianMinimalStemFilter::live$ = false;

          jclass NorwegianMinimalStemFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/no/NorwegianMinimalStemFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_c7c794dc] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;)V");
              mids$[mid_init$_d53bcf42] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;I)V");
              mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          NorwegianMinimalStemFilter::NorwegianMinimalStemFilter(const ::org::apache::lucene::analysis::TokenStream & a0) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_c7c794dc, a0.this$)) {}

          NorwegianMinimalStemFilter::NorwegianMinimalStemFilter(const ::org::apache::lucene::analysis::TokenStream & a0, jint a1) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_d53bcf42, a0.this$, a1)) {}

          jboolean NorwegianMinimalStemFilter::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_54c6a16a]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace no {
          static PyObject *t_NorwegianMinimalStemFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_NorwegianMinimalStemFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_NorwegianMinimalStemFilter_init_(t_NorwegianMinimalStemFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_NorwegianMinimalStemFilter_incrementToken(t_NorwegianMinimalStemFilter *self, PyObject *args);

          static PyMethodDef t_NorwegianMinimalStemFilter__methods_[] = {
            DECLARE_METHOD(t_NorwegianMinimalStemFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_NorwegianMinimalStemFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_NorwegianMinimalStemFilter, incrementToken, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(NorwegianMinimalStemFilter, t_NorwegianMinimalStemFilter, ::org::apache::lucene::analysis::TokenFilter, NorwegianMinimalStemFilter, t_NorwegianMinimalStemFilter_init_, 0, 0, 0, 0, 0);

          void t_NorwegianMinimalStemFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(NorwegianMinimalStemFilter), module, "NorwegianMinimalStemFilter", 0);
          }

          void t_NorwegianMinimalStemFilter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(NorwegianMinimalStemFilter).tp_dict, "class_", make_descriptor(NorwegianMinimalStemFilter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(NorwegianMinimalStemFilter).tp_dict, "wrapfn_", make_descriptor(t_NorwegianMinimalStemFilter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(NorwegianMinimalStemFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_NorwegianMinimalStemFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, NorwegianMinimalStemFilter::initializeClass, 1)))
              return NULL;
            return t_NorwegianMinimalStemFilter::wrap_Object(NorwegianMinimalStemFilter(((t_NorwegianMinimalStemFilter *) arg)->object.this$));
          }
          static PyObject *t_NorwegianMinimalStemFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, NorwegianMinimalStemFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_NorwegianMinimalStemFilter_init_(t_NorwegianMinimalStemFilter *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
                NorwegianMinimalStemFilter object((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
                {
                  INT_CALL(object = NorwegianMinimalStemFilter(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 2:
              {
                ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
                jint a1;
                NorwegianMinimalStemFilter object((jobject) NULL);

                if (!parseArgs(args, "kI", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0, &a1))
                {
                  INT_CALL(object = NorwegianMinimalStemFilter(a0, a1));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_NorwegianMinimalStemFilter_incrementToken(t_NorwegianMinimalStemFilter *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(NorwegianMinimalStemFilter), (PyObject *) self, "incrementToken", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/WAH8DocIdSet.h"
#include "java/util/Collection.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *WAH8DocIdSet::class$ = NULL;
        jmethodID *WAH8DocIdSet::mids$ = NULL;
        bool WAH8DocIdSet::live$ = false;
        jint WAH8DocIdSet::DEFAULT_INDEX_INTERVAL = (jint) 0;

        jclass WAH8DocIdSet::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/WAH8DocIdSet");

            mids$ = new jmethodID[max_mid];
            mids$[mid_cardinality_54c6a179] = env->getMethodID(cls, "cardinality", "()I");
            mids$[mid_intersect_b06562c3] = env->getStaticMethodID(cls, "intersect", "(Ljava/util/Collection;)Lorg/apache/lucene/util/WAH8DocIdSet;");
            mids$[mid_intersect_8ad105f3] = env->getStaticMethodID(cls, "intersect", "(Ljava/util/Collection;I)Lorg/apache/lucene/util/WAH8DocIdSet;");
            mids$[mid_isCacheable_54c6a16a] = env->getMethodID(cls, "isCacheable", "()Z");
            mids$[mid_ramBytesUsed_54c6a17a] = env->getMethodID(cls, "ramBytesUsed", "()J");
            mids$[mid_union_b06562c3] = env->getStaticMethodID(cls, "union", "(Ljava/util/Collection;)Lorg/apache/lucene/util/WAH8DocIdSet;");
            mids$[mid_union_8ad105f3] = env->getStaticMethodID(cls, "union", "(Ljava/util/Collection;I)Lorg/apache/lucene/util/WAH8DocIdSet;");

            class$ = (::java::lang::Class *) new JObject(cls);
            cls = (jclass) class$->this$;

            DEFAULT_INDEX_INTERVAL = env->getStaticIntField(cls, "DEFAULT_INDEX_INTERVAL");
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        jint WAH8DocIdSet::cardinality() const
        {
          return env->callIntMethod(this$, mids$[mid_cardinality_54c6a179]);
        }

        WAH8DocIdSet WAH8DocIdSet::intersect(const ::java::util::Collection & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return WAH8DocIdSet(env->callStaticObjectMethod(cls, mids$[mid_intersect_b06562c3], a0.this$));
        }

        WAH8DocIdSet WAH8DocIdSet::intersect(const ::java::util::Collection & a0, jint a1)
        {
          jclass cls = env->getClass(initializeClass);
          return WAH8DocIdSet(env->callStaticObjectMethod(cls, mids$[mid_intersect_8ad105f3], a0.this$, a1));
        }

        jboolean WAH8DocIdSet::isCacheable() const
        {
          return env->callBooleanMethod(this$, mids$[mid_isCacheable_54c6a16a]);
        }

        jlong WAH8DocIdSet::ramBytesUsed() const
        {
          return env->callLongMethod(this$, mids$[mid_ramBytesUsed_54c6a17a]);
        }

        WAH8DocIdSet WAH8DocIdSet::union$(const ::java::util::Collection & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return WAH8DocIdSet(env->callStaticObjectMethod(cls, mids$[mid_union_b06562c3], a0.this$));
        }

        WAH8DocIdSet WAH8DocIdSet::union$(const ::java::util::Collection & a0, jint a1)
        {
          jclass cls = env->getClass(initializeClass);
          return WAH8DocIdSet(env->callStaticObjectMethod(cls, mids$[mid_union_8ad105f3], a0.this$, a1));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"
#include "org/apache/lucene/util/WAH8DocIdSet$Builder.h"
#include "org/apache/lucene/util/WAH8DocIdSet$WordBuilder.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_WAH8DocIdSet_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_WAH8DocIdSet_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_WAH8DocIdSet_cardinality(t_WAH8DocIdSet *self);
        static PyObject *t_WAH8DocIdSet_intersect(PyTypeObject *type, PyObject *args);
        static PyObject *t_WAH8DocIdSet_isCacheable(t_WAH8DocIdSet *self, PyObject *args);
        static PyObject *t_WAH8DocIdSet_ramBytesUsed(t_WAH8DocIdSet *self, PyObject *args);
        static PyObject *t_WAH8DocIdSet_union(PyTypeObject *type, PyObject *args);
        static PyObject *t_WAH8DocIdSet_get__cacheable(t_WAH8DocIdSet *self, void *data);
        static PyGetSetDef t_WAH8DocIdSet__fields_[] = {
          DECLARE_GET_FIELD(t_WAH8DocIdSet, cacheable),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_WAH8DocIdSet__methods_[] = {
          DECLARE_METHOD(t_WAH8DocIdSet, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_WAH8DocIdSet, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_WAH8DocIdSet, cardinality, METH_NOARGS),
          DECLARE_METHOD(t_WAH8DocIdSet, intersect, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_WAH8DocIdSet, isCacheable, METH_VARARGS),
          DECLARE_METHOD(t_WAH8DocIdSet, ramBytesUsed, METH_VARARGS),
          DECLARE_METHOD(t_WAH8DocIdSet, union, METH_VARARGS | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(WAH8DocIdSet, t_WAH8DocIdSet, ::org::apache::lucene::search::DocIdSet, WAH8DocIdSet, abstract_init, 0, 0, t_WAH8DocIdSet__fields_, 0, 0);

        void t_WAH8DocIdSet::install(PyObject *module)
        {
          installType(&PY_TYPE(WAH8DocIdSet), module, "WAH8DocIdSet", 0);
          PyDict_SetItemString(PY_TYPE(WAH8DocIdSet).tp_dict, "Builder", make_descriptor(&PY_TYPE(WAH8DocIdSet$Builder)));
          PyDict_SetItemString(PY_TYPE(WAH8DocIdSet).tp_dict, "WordBuilder", make_descriptor(&PY_TYPE(WAH8DocIdSet$WordBuilder)));
        }

        void t_WAH8DocIdSet::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(WAH8DocIdSet).tp_dict, "class_", make_descriptor(WAH8DocIdSet::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(WAH8DocIdSet).tp_dict, "wrapfn_", make_descriptor(t_WAH8DocIdSet::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(WAH8DocIdSet).tp_dict, "boxfn_", make_descriptor(boxObject));
          env->getClass(WAH8DocIdSet::initializeClass);
          PyDict_SetItemString(PY_TYPE(WAH8DocIdSet).tp_dict, "DEFAULT_INDEX_INTERVAL", make_descriptor(WAH8DocIdSet::DEFAULT_INDEX_INTERVAL));
        }

        static PyObject *t_WAH8DocIdSet_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, WAH8DocIdSet::initializeClass, 1)))
            return NULL;
          return t_WAH8DocIdSet::wrap_Object(WAH8DocIdSet(((t_WAH8DocIdSet *) arg)->object.this$));
        }
        static PyObject *t_WAH8DocIdSet_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, WAH8DocIdSet::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_WAH8DocIdSet_cardinality(t_WAH8DocIdSet *self)
        {
          jint result;
          OBJ_CALL(result = self->object.cardinality());
          return PyInt_FromLong((long) result);
        }

        static PyObject *t_WAH8DocIdSet_intersect(PyTypeObject *type, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              ::java::util::Collection a0((jobject) NULL);
              PyTypeObject **p0;
              WAH8DocIdSet result((jobject) NULL);

              if (!parseArgs(args, "K", ::java::util::Collection::initializeClass, &a0, &p0, ::java::util::t_Collection::parameters_))
              {
                OBJ_CALL(result = ::org::apache::lucene::util::WAH8DocIdSet::intersect(a0));
                return t_WAH8DocIdSet::wrap_Object(result);
              }
            }
            break;
           case 2:
            {
              ::java::util::Collection a0((jobject) NULL);
              PyTypeObject **p0;
              jint a1;
              WAH8DocIdSet result((jobject) NULL);

              if (!parseArgs(args, "KI", ::java::util::Collection::initializeClass, &a0, &p0, ::java::util::t_Collection::parameters_, &a1))
              {
                OBJ_CALL(result = ::org::apache::lucene::util::WAH8DocIdSet::intersect(a0, a1));
                return t_WAH8DocIdSet::wrap_Object(result);
              }
            }
          }

          PyErr_SetArgsError(type, "intersect", args);
          return NULL;
        }

        static PyObject *t_WAH8DocIdSet_isCacheable(t_WAH8DocIdSet *self, PyObject *args)
        {
          jboolean result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.isCacheable());
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(WAH8DocIdSet), (PyObject *) self, "isCacheable", args, 2);
        }

        static PyObject *t_WAH8DocIdSet_ramBytesUsed(t_WAH8DocIdSet *self, PyObject *args)
        {
          jlong result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.ramBytesUsed());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          return callSuper(&PY_TYPE(WAH8DocIdSet), (PyObject *) self, "ramBytesUsed", args, 2);
        }

        static PyObject *t_WAH8DocIdSet_union(PyTypeObject *type, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              ::java::util::Collection a0((jobject) NULL);
              PyTypeObject **p0;
              WAH8DocIdSet result((jobject) NULL);

              if (!parseArgs(args, "K", ::java::util::Collection::initializeClass, &a0, &p0, ::java::util::t_Collection::parameters_))
              {
                OBJ_CALL(result = ::org::apache::lucene::util::WAH8DocIdSet::union$(a0));
                return t_WAH8DocIdSet::wrap_Object(result);
              }
            }
            break;
           case 2:
            {
              ::java::util::Collection a0((jobject) NULL);
              PyTypeObject **p0;
              jint a1;
              WAH8DocIdSet result((jobject) NULL);

              if (!parseArgs(args, "KI", ::java::util::Collection::initializeClass, &a0, &p0, ::java::util::t_Collection::parameters_, &a1))
              {
                OBJ_CALL(result = ::org::apache::lucene::util::WAH8DocIdSet::union$(a0, a1));
                return t_WAH8DocIdSet::wrap_Object(result);
              }
            }
          }

          PyErr_SetArgsError(type, "union", args);
          return NULL;
        }

        static PyObject *t_WAH8DocIdSet_get__cacheable(t_WAH8DocIdSet *self, void *data)
        {
          jboolean value;
          OBJ_CALL(value = self->object.isCacheable());
          Py_RETURN_BOOL(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/packed/MonotonicAppendingLongBuffer.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace packed {

          ::java::lang::Class *MonotonicAppendingLongBuffer::class$ = NULL;
          jmethodID *MonotonicAppendingLongBuffer::mids$ = NULL;
          bool MonotonicAppendingLongBuffer::live$ = false;

          jclass MonotonicAppendingLongBuffer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/util/packed/MonotonicAppendingLongBuffer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_init$_06298cab] = env->getMethodID(cls, "<init>", "(F)V");
              mids$[mid_init$_a74e6883] = env->getMethodID(cls, "<init>", "(IIF)V");
              mids$[mid_ramBytesUsed_54c6a17a] = env->getMethodID(cls, "ramBytesUsed", "()J");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          MonotonicAppendingLongBuffer::MonotonicAppendingLongBuffer() : ::org::apache::lucene::util::packed::AbstractAppendingLongBuffer(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          MonotonicAppendingLongBuffer::MonotonicAppendingLongBuffer(jfloat a0) : ::org::apache::lucene::util::packed::AbstractAppendingLongBuffer(env->newObject(initializeClass, &mids$, mid_init$_06298cab, a0)) {}

          MonotonicAppendingLongBuffer::MonotonicAppendingLongBuffer(jint a0, jint a1, jfloat a2) : ::org::apache::lucene::util::packed::AbstractAppendingLongBuffer(env->newObject(initializeClass, &mids$, mid_init$_a74e6883, a0, a1, a2)) {}

          jlong MonotonicAppendingLongBuffer::ramBytesUsed() const
          {
            return env->callLongMethod(this$, mids$[mid_ramBytesUsed_54c6a17a]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace packed {
          static PyObject *t_MonotonicAppendingLongBuffer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_MonotonicAppendingLongBuffer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_MonotonicAppendingLongBuffer_init_(t_MonotonicAppendingLongBuffer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_MonotonicAppendingLongBuffer_ramBytesUsed(t_MonotonicAppendingLongBuffer *self, PyObject *args);

          static PyMethodDef t_MonotonicAppendingLongBuffer__methods_[] = {
            DECLARE_METHOD(t_MonotonicAppendingLongBuffer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_MonotonicAppendingLongBuffer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_MonotonicAppendingLongBuffer, ramBytesUsed, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(MonotonicAppendingLongBuffer, t_MonotonicAppendingLongBuffer, ::org::apache::lucene::util::packed::AbstractAppendingLongBuffer, MonotonicAppendingLongBuffer, t_MonotonicAppendingLongBuffer_init_, 0, 0, 0, 0, 0);

          void t_MonotonicAppendingLongBuffer::install(PyObject *module)
          {
            installType(&PY_TYPE(MonotonicAppendingLongBuffer), module, "MonotonicAppendingLongBuffer", 0);
          }

          void t_MonotonicAppendingLongBuffer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(MonotonicAppendingLongBuffer).tp_dict, "class_", make_descriptor(MonotonicAppendingLongBuffer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(MonotonicAppendingLongBuffer).tp_dict, "wrapfn_", make_descriptor(t_MonotonicAppendingLongBuffer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(MonotonicAppendingLongBuffer).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_MonotonicAppendingLongBuffer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, MonotonicAppendingLongBuffer::initializeClass, 1)))
              return NULL;
            return t_MonotonicAppendingLongBuffer::wrap_Object(MonotonicAppendingLongBuffer(((t_MonotonicAppendingLongBuffer *) arg)->object.this$));
          }
          static PyObject *t_MonotonicAppendingLongBuffer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, MonotonicAppendingLongBuffer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_MonotonicAppendingLongBuffer_init_(t_MonotonicAppendingLongBuffer *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 0:
              {
                MonotonicAppendingLongBuffer object((jobject) NULL);

                INT_CALL(object = MonotonicAppendingLongBuffer());
                self->object = object;
                break;
              }
              goto err;
             case 1:
              {
                jfloat a0;
                MonotonicAppendingLongBuffer object((jobject) NULL);

                if (!parseArgs(args, "F", &a0))
                {
                  INT_CALL(object = MonotonicAppendingLongBuffer(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 3:
              {
                jint a0;
                jint a1;
                jfloat a2;
                MonotonicAppendingLongBuffer object((jobject) NULL);

                if (!parseArgs(args, "IIF", &a0, &a1, &a2))
                {
                  INT_CALL(object = MonotonicAppendingLongBuffer(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_MonotonicAppendingLongBuffer_ramBytesUsed(t_MonotonicAppendingLongBuffer *self, PyObject *args)
          {
            jlong result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.ramBytesUsed());
              return PyLong_FromLongLong((PY_LONG_LONG) result);
            }

            return callSuper(&PY_TYPE(MonotonicAppendingLongBuffer), (PyObject *) self, "ramBytesUsed", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/MergeTrigger.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *MergeTrigger::class$ = NULL;
        jmethodID *MergeTrigger::mids$ = NULL;
        bool MergeTrigger::live$ = false;
        MergeTrigger *MergeTrigger::CLOSING = NULL;
        MergeTrigger *MergeTrigger::EXPLICIT = NULL;
        MergeTrigger *MergeTrigger::FULL_FLUSH = NULL;
        MergeTrigger *MergeTrigger::MERGE_FINISHED = NULL;
        MergeTrigger *MergeTrigger::SEGMENT_FLUSH = NULL;

        jclass MergeTrigger::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/MergeTrigger");

            mids$ = new jmethodID[max_mid];
            mids$[mid_valueOf_c198d758] = env->getStaticMethodID(cls, "valueOf", "(Ljava/lang/String;)Lorg/apache/lucene/index/MergeTrigger;");
            mids$[mid_values_5144e632] = env->getStaticMethodID(cls, "values", "()[Lorg/apache/lucene/index/MergeTrigger;");

            class$ = (::java::lang::Class *) new JObject(cls);
            cls = (jclass) class$->this$;

            CLOSING = new MergeTrigger(env->getStaticObjectField(cls, "CLOSING", "Lorg/apache/lucene/index/MergeTrigger;"));
            EXPLICIT = new MergeTrigger(env->getStaticObjectField(cls, "EXPLICIT", "Lorg/apache/lucene/index/MergeTrigger;"));
            FULL_FLUSH = new MergeTrigger(env->getStaticObjectField(cls, "FULL_FLUSH", "Lorg/apache/lucene/index/MergeTrigger;"));
            MERGE_FINISHED = new MergeTrigger(env->getStaticObjectField(cls, "MERGE_FINISHED", "Lorg/apache/lucene/index/MergeTrigger;"));
            SEGMENT_FLUSH = new MergeTrigger(env->getStaticObjectField(cls, "SEGMENT_FLUSH", "Lorg/apache/lucene/index/MergeTrigger;"));
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        MergeTrigger MergeTrigger::valueOf(const ::java::lang::String & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return MergeTrigger(env->callStaticObjectMethod(cls, mids$[mid_valueOf_c198d758], a0.this$));
        }

        JArray< MergeTrigger > MergeTrigger::values()
        {
          jclass cls = env->getClass(initializeClass);
          return JArray< MergeTrigger >(env->callStaticObjectMethod(cls, mids$[mid_values_5144e632]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_MergeTrigger_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_MergeTrigger_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_MergeTrigger_of_(t_MergeTrigger *self, PyObject *args);
        static PyObject *t_MergeTrigger_valueOf(PyTypeObject *type, PyObject *args);
        static PyObject *t_MergeTrigger_values(PyTypeObject *type);
        static PyObject *t_MergeTrigger_get__parameters_(t_MergeTrigger *self, void *data);
        static PyGetSetDef t_MergeTrigger__fields_[] = {
          DECLARE_GET_FIELD(t_MergeTrigger, parameters_),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_MergeTrigger__methods_[] = {
          DECLARE_METHOD(t_MergeTrigger, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MergeTrigger, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MergeTrigger, of_, METH_VARARGS),
          DECLARE_METHOD(t_MergeTrigger, valueOf, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_MergeTrigger, values, METH_NOARGS | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(MergeTrigger, t_MergeTrigger, ::java::lang::Enum, MergeTrigger, abstract_init, 0, 0, t_MergeTrigger__fields_, 0, 0);
        PyObject *t_MergeTrigger::wrap_Object(const MergeTrigger& object, PyTypeObject *p0)
        {
          PyObject *obj = t_MergeTrigger::wrap_Object(object);
          if (obj != NULL && obj != Py_None)
          {
            t_MergeTrigger *self = (t_MergeTrigger *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        PyObject *t_MergeTrigger::wrap_jobject(const jobject& object, PyTypeObject *p0)
        {
          PyObject *obj = t_MergeTrigger::wrap_jobject(object);
          if (obj != NULL && obj != Py_None)
          {
            t_MergeTrigger *self = (t_MergeTrigger *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        void t_MergeTrigger::install(PyObject *module)
        {
          installType(&PY_TYPE(MergeTrigger), module, "MergeTrigger", 0);
        }

        void t_MergeTrigger::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(MergeTrigger).tp_dict, "class_", make_descriptor(MergeTrigger::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(MergeTrigger).tp_dict, "wrapfn_", make_descriptor(t_MergeTrigger::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(MergeTrigger).tp_dict, "boxfn_", make_descriptor(boxObject));
          env->getClass(MergeTrigger::initializeClass);
          PyDict_SetItemString(PY_TYPE(MergeTrigger).tp_dict, "CLOSING", make_descriptor(t_MergeTrigger::wrap_Object(*MergeTrigger::CLOSING)));
          PyDict_SetItemString(PY_TYPE(MergeTrigger).tp_dict, "EXPLICIT", make_descriptor(t_MergeTrigger::wrap_Object(*MergeTrigger::EXPLICIT)));
          PyDict_SetItemString(PY_TYPE(MergeTrigger).tp_dict, "FULL_FLUSH", make_descriptor(t_MergeTrigger::wrap_Object(*MergeTrigger::FULL_FLUSH)));
          PyDict_SetItemString(PY_TYPE(MergeTrigger).tp_dict, "MERGE_FINISHED", make_descriptor(t_MergeTrigger::wrap_Object(*MergeTrigger::MERGE_FINISHED)));
          PyDict_SetItemString(PY_TYPE(MergeTrigger).tp_dict, "SEGMENT_FLUSH", make_descriptor(t_MergeTrigger::wrap_Object(*MergeTrigger::SEGMENT_FLUSH)));
        }

        static PyObject *t_MergeTrigger_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, MergeTrigger::initializeClass, 1)))
            return NULL;
          return t_MergeTrigger::wrap_Object(MergeTrigger(((t_MergeTrigger *) arg)->object.this$));
        }
        static PyObject *t_MergeTrigger_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, MergeTrigger::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_MergeTrigger_of_(t_MergeTrigger *self, PyObject *args)
        {
          if (!parseArg(args, "T", 1, &(self->parameters)))
            Py_RETURN_SELF;
          return PyErr_SetArgsError((PyObject *) self, "of_", args);
        }

        static PyObject *t_MergeTrigger_valueOf(PyTypeObject *type, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          MergeTrigger result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::index::MergeTrigger::valueOf(a0));
            return t_MergeTrigger::wrap_Object(result);
          }

          return callSuper(type, "valueOf", args, 2);
        }

        static PyObject *t_MergeTrigger_values(PyTypeObject *type)
        {
          JArray< MergeTrigger > result((jobject) NULL);
          OBJ_CALL(result = ::org::apache::lucene::index::MergeTrigger::values());
          return JArray<jobject>(result.this$).wrap(t_MergeTrigger::wrap_jobject);
        }
        static PyObject *t_MergeTrigger_get__parameters_(t_MergeTrigger *self, void *data)
        {
          return typeParameters(self->parameters, sizeof(self->parameters));
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/xml/builders/MatchAllDocsQueryBuilder.h"
#include "org/apache/lucene/queryparser/xml/QueryBuilder.h"
#include "org/apache/lucene/search/Query.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace xml {
          namespace builders {

            ::java::lang::Class *MatchAllDocsQueryBuilder::class$ = NULL;
            jmethodID *MatchAllDocsQueryBuilder::mids$ = NULL;
            bool MatchAllDocsQueryBuilder::live$ = false;

            jclass MatchAllDocsQueryBuilder::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/xml/builders/MatchAllDocsQueryBuilder");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            MatchAllDocsQueryBuilder::MatchAllDocsQueryBuilder() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace xml {
          namespace builders {
            static PyObject *t_MatchAllDocsQueryBuilder_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_MatchAllDocsQueryBuilder_instance_(PyTypeObject *type, PyObject *arg);
            static int t_MatchAllDocsQueryBuilder_init_(t_MatchAllDocsQueryBuilder *self, PyObject *args, PyObject *kwds);

            static PyMethodDef t_MatchAllDocsQueryBuilder__methods_[] = {
              DECLARE_METHOD(t_MatchAllDocsQueryBuilder, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_MatchAllDocsQueryBuilder, instance_, METH_O | METH_CLASS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(MatchAllDocsQueryBuilder, t_MatchAllDocsQueryBuilder, ::java::lang::Object, MatchAllDocsQueryBuilder, t_MatchAllDocsQueryBuilder_init_, 0, 0, 0, 0, 0);

            void t_MatchAllDocsQueryBuilder::install(PyObject *module)
            {
              installType(&PY_TYPE(MatchAllDocsQueryBuilder), module, "MatchAllDocsQueryBuilder", 0);
            }

            void t_MatchAllDocsQueryBuilder::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(MatchAllDocsQueryBuilder).tp_dict, "class_", make_descriptor(MatchAllDocsQueryBuilder::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(MatchAllDocsQueryBuilder).tp_dict, "wrapfn_", make_descriptor(t_MatchAllDocsQueryBuilder::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(MatchAllDocsQueryBuilder).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_MatchAllDocsQueryBuilder_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, MatchAllDocsQueryBuilder::initializeClass, 1)))
                return NULL;
              return t_MatchAllDocsQueryBuilder::wrap_Object(MatchAllDocsQueryBuilder(((t_MatchAllDocsQueryBuilder *) arg)->object.this$));
            }
            static PyObject *t_MatchAllDocsQueryBuilder_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, MatchAllDocsQueryBuilder::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_MatchAllDocsQueryBuilder_init_(t_MatchAllDocsQueryBuilder *self, PyObject *args, PyObject *kwds)
            {
              MatchAllDocsQueryBuilder object((jobject) NULL);

              INT_CALL(object = MatchAllDocsQueryBuilder());
              self->object = object;

              return 0;
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/fst/FST$BytesReader.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace fst {

          ::java::lang::Class *FST$BytesReader::class$ = NULL;
          jmethodID *FST$BytesReader::mids$ = NULL;
          bool FST$BytesReader::live$ = false;

          jclass FST$BytesReader::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/util/fst/FST$BytesReader");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_getPosition_54c6a17a] = env->getMethodID(cls, "getPosition", "()J");
              mids$[mid_reversed_54c6a16a] = env->getMethodID(cls, "reversed", "()Z");
              mids$[mid_setPosition_0ee6df2f] = env->getMethodID(cls, "setPosition", "(J)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          FST$BytesReader::FST$BytesReader() : ::org::apache::lucene::store::DataInput(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          jlong FST$BytesReader::getPosition() const
          {
            return env->callLongMethod(this$, mids$[mid_getPosition_54c6a17a]);
          }

          jboolean FST$BytesReader::reversed() const
          {
            return env->callBooleanMethod(this$, mids$[mid_reversed_54c6a16a]);
          }

          void FST$BytesReader::setPosition(jlong a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setPosition_0ee6df2f], a0);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace fst {
          static PyObject *t_FST$BytesReader_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_FST$BytesReader_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_FST$BytesReader_of_(t_FST$BytesReader *self, PyObject *args);
          static int t_FST$BytesReader_init_(t_FST$BytesReader *self, PyObject *args, PyObject *kwds);
          static PyObject *t_FST$BytesReader_getPosition(t_FST$BytesReader *self);
          static PyObject *t_FST$BytesReader_reversed(t_FST$BytesReader *self);
          static PyObject *t_FST$BytesReader_setPosition(t_FST$BytesReader *self, PyObject *arg);
          static PyObject *t_FST$BytesReader_get__position(t_FST$BytesReader *self, void *data);
          static int t_FST$BytesReader_set__position(t_FST$BytesReader *self, PyObject *arg, void *data);
          static PyObject *t_FST$BytesReader_get__parameters_(t_FST$BytesReader *self, void *data);
          static PyGetSetDef t_FST$BytesReader__fields_[] = {
            DECLARE_GETSET_FIELD(t_FST$BytesReader, position),
            DECLARE_GET_FIELD(t_FST$BytesReader, parameters_),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_FST$BytesReader__methods_[] = {
            DECLARE_METHOD(t_FST$BytesReader, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FST$BytesReader, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FST$BytesReader, of_, METH_VARARGS),
            DECLARE_METHOD(t_FST$BytesReader, getPosition, METH_NOARGS),
            DECLARE_METHOD(t_FST$BytesReader, reversed, METH_NOARGS),
            DECLARE_METHOD(t_FST$BytesReader, setPosition, METH_O),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(FST$BytesReader, t_FST$BytesReader, ::org::apache::lucene::store::DataInput, FST$BytesReader, t_FST$BytesReader_init_, 0, 0, t_FST$BytesReader__fields_, 0, 0);
          PyObject *t_FST$BytesReader::wrap_Object(const FST$BytesReader& object, PyTypeObject *p0)
          {
            PyObject *obj = t_FST$BytesReader::wrap_Object(object);
            if (obj != NULL && obj != Py_None)
            {
              t_FST$BytesReader *self = (t_FST$BytesReader *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          PyObject *t_FST$BytesReader::wrap_jobject(const jobject& object, PyTypeObject *p0)
          {
            PyObject *obj = t_FST$BytesReader::wrap_jobject(object);
            if (obj != NULL && obj != Py_None)
            {
              t_FST$BytesReader *self = (t_FST$BytesReader *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          void t_FST$BytesReader::install(PyObject *module)
          {
            installType(&PY_TYPE(FST$BytesReader), module, "FST$BytesReader", 0);
          }

          void t_FST$BytesReader::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(FST$BytesReader).tp_dict, "class_", make_descriptor(FST$BytesReader::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(FST$BytesReader).tp_dict, "wrapfn_", make_descriptor(t_FST$BytesReader::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(FST$BytesReader).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_FST$BytesReader_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, FST$BytesReader::initializeClass, 1)))
              return NULL;
            return t_FST$BytesReader::wrap_Object(FST$BytesReader(((t_FST$BytesReader *) arg)->object.this$));
          }
          static PyObject *t_FST$BytesReader_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, FST$BytesReader::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_FST$BytesReader_of_(t_FST$BytesReader *self, PyObject *args)
          {
            if (!parseArg(args, "T", 1, &(self->parameters)))
              Py_RETURN_SELF;
            return PyErr_SetArgsError((PyObject *) self, "of_", args);
          }

          static int t_FST$BytesReader_init_(t_FST$BytesReader *self, PyObject *args, PyObject *kwds)
          {
            FST$BytesReader object((jobject) NULL);

            INT_CALL(object = FST$BytesReader());
            self->object = object;

            return 0;
          }

          static PyObject *t_FST$BytesReader_getPosition(t_FST$BytesReader *self)
          {
            jlong result;
            OBJ_CALL(result = self->object.getPosition());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          static PyObject *t_FST$BytesReader_reversed(t_FST$BytesReader *self)
          {
            jboolean result;
            OBJ_CALL(result = self->object.reversed());
            Py_RETURN_BOOL(result);
          }

          static PyObject *t_FST$BytesReader_setPosition(t_FST$BytesReader *self, PyObject *arg)
          {
            jlong a0;

            if (!parseArg(arg, "J", &a0))
            {
              OBJ_CALL(self->object.setPosition(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setPosition", arg);
            return NULL;
          }
          static PyObject *t_FST$BytesReader_get__parameters_(t_FST$BytesReader *self, void *data)
          {
            return typeParameters(self->parameters, sizeof(self->parameters));
          }

          static PyObject *t_FST$BytesReader_get__position(t_FST$BytesReader *self, void *data)
          {
            jlong value;
            OBJ_CALL(value = self->object.getPosition());
            return PyLong_FromLongLong((PY_LONG_LONG) value);
          }
          static int t_FST$BytesReader_set__position(t_FST$BytesReader *self, PyObject *arg, void *data)
          {
            {
              jlong value;
              if (!parseArg(arg, "J", &value))
              {
                INT_CALL(self->object.setPosition(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "position", arg);
            return -1;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/expressions/js/JavascriptParser$arguments_return.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace expressions {
        namespace js {

          ::java::lang::Class *JavascriptParser$arguments_return::class$ = NULL;
          jmethodID *JavascriptParser$arguments_return::mids$ = NULL;
          bool JavascriptParser$arguments_return::live$ = false;

          jclass JavascriptParser$arguments_return::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/expressions/js/JavascriptParser$arguments_return");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          JavascriptParser$arguments_return::JavascriptParser$arguments_return() : ::org::antlr::runtime::ParserRuleReturnScope(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace expressions {
        namespace js {
          static PyObject *t_JavascriptParser$arguments_return_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_JavascriptParser$arguments_return_instance_(PyTypeObject *type, PyObject *arg);
          static int t_JavascriptParser$arguments_return_init_(t_JavascriptParser$arguments_return *self, PyObject *args, PyObject *kwds);

          static PyMethodDef t_JavascriptParser$arguments_return__methods_[] = {
            DECLARE_METHOD(t_JavascriptParser$arguments_return, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_JavascriptParser$arguments_return, instance_, METH_O | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(JavascriptParser$arguments_return, t_JavascriptParser$arguments_return, ::org::antlr::runtime::ParserRuleReturnScope, JavascriptParser$arguments_return, t_JavascriptParser$arguments_return_init_, 0, 0, 0, 0, 0);

          void t_JavascriptParser$arguments_return::install(PyObject *module)
          {
            installType(&PY_TYPE(JavascriptParser$arguments_return), module, "JavascriptParser$arguments_return", 0);
          }

          void t_JavascriptParser$arguments_return::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(JavascriptParser$arguments_return).tp_dict, "class_", make_descriptor(JavascriptParser$arguments_return::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(JavascriptParser$arguments_return).tp_dict, "wrapfn_", make_descriptor(t_JavascriptParser$arguments_return::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(JavascriptParser$arguments_return).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_JavascriptParser$arguments_return_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, JavascriptParser$arguments_return::initializeClass, 1)))
              return NULL;
            return t_JavascriptParser$arguments_return::wrap_Object(JavascriptParser$arguments_return(((t_JavascriptParser$arguments_return *) arg)->object.this$));
          }
          static PyObject *t_JavascriptParser$arguments_return_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, JavascriptParser$arguments_return::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_JavascriptParser$arguments_return_init_(t_JavascriptParser$arguments_return *self, PyObject *args, PyObject *kwds)
          {
            JavascriptParser$arguments_return object((jobject) NULL);

            INT_CALL(object = JavascriptParser$arguments_return());
            self->object = object;

            return 0;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/Rescorer.h"
#include "org/apache/lucene/search/IndexSearcher.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/search/TopDocs.h"
#include "org/apache/lucene/search/Explanation.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *Rescorer::class$ = NULL;
        jmethodID *Rescorer::mids$ = NULL;
        bool Rescorer::live$ = false;

        jclass Rescorer::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/Rescorer");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_explain_2b38e623] = env->getMethodID(cls, "explain", "(Lorg/apache/lucene/search/IndexSearcher;Lorg/apache/lucene/search/Explanation;I)Lorg/apache/lucene/search/Explanation;");
            mids$[mid_rescore_bd3343d7] = env->getMethodID(cls, "rescore", "(Lorg/apache/lucene/search/IndexSearcher;Lorg/apache/lucene/search/TopDocs;I)Lorg/apache/lucene/search/TopDocs;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        Rescorer::Rescorer() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        ::org::apache::lucene::search::Explanation Rescorer::explain(const ::org::apache::lucene::search::IndexSearcher & a0, const ::org::apache::lucene::search::Explanation & a1, jint a2) const
        {
          return ::org::apache::lucene::search::Explanation(env->callObjectMethod(this$, mids$[mid_explain_2b38e623], a0.this$, a1.this$, a2));
        }

        ::org::apache::lucene::search::TopDocs Rescorer::rescore(const ::org::apache::lucene::search::IndexSearcher & a0, const ::org::apache::lucene::search::TopDocs & a1, jint a2) const
        {
          return ::org::apache::lucene::search::TopDocs(env->callObjectMethod(this$, mids$[mid_rescore_bd3343d7], a0.this$, a1.this$, a2));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_Rescorer_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_Rescorer_instance_(PyTypeObject *type, PyObject *arg);
        static int t_Rescorer_init_(t_Rescorer *self, PyObject *args, PyObject *kwds);
        static PyObject *t_Rescorer_explain(t_Rescorer *self, PyObject *args);
        static PyObject *t_Rescorer_rescore(t_Rescorer *self, PyObject *args);

        static PyMethodDef t_Rescorer__methods_[] = {
          DECLARE_METHOD(t_Rescorer, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_Rescorer, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_Rescorer, explain, METH_VARARGS),
          DECLARE_METHOD(t_Rescorer, rescore, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(Rescorer, t_Rescorer, ::java::lang::Object, Rescorer, t_Rescorer_init_, 0, 0, 0, 0, 0);

        void t_Rescorer::install(PyObject *module)
        {
          installType(&PY_TYPE(Rescorer), module, "Rescorer", 0);
        }

        void t_Rescorer::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(Rescorer).tp_dict, "class_", make_descriptor(Rescorer::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(Rescorer).tp_dict, "wrapfn_", make_descriptor(t_Rescorer::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(Rescorer).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_Rescorer_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, Rescorer::initializeClass, 1)))
            return NULL;
          return t_Rescorer::wrap_Object(Rescorer(((t_Rescorer *) arg)->object.this$));
        }
        static PyObject *t_Rescorer_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, Rescorer::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_Rescorer_init_(t_Rescorer *self, PyObject *args, PyObject *kwds)
        {
          Rescorer object((jobject) NULL);

          INT_CALL(object = Rescorer());
          self->object = object;

          return 0;
        }

        static PyObject *t_Rescorer_explain(t_Rescorer *self, PyObject *args)
        {
          ::org::apache::lucene::search::IndexSearcher a0((jobject) NULL);
          ::org::apache::lucene::search::Explanation a1((jobject) NULL);
          jint a2;
          ::org::apache::lucene::search::Explanation result((jobject) NULL);

          if (!parseArgs(args, "kkI", ::org::apache::lucene::search::IndexSearcher::initializeClass, ::org::apache::lucene::search::Explanation::initializeClass, &a0, &a1, &a2))
          {
            OBJ_CALL(result = self->object.explain(a0, a1, a2));
            return ::org::apache::lucene::search::t_Explanation::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "explain", args);
          return NULL;
        }

        static PyObject *t_Rescorer_rescore(t_Rescorer *self, PyObject *args)
        {
          ::org::apache::lucene::search::IndexSearcher a0((jobject) NULL);
          ::org::apache::lucene::search::TopDocs a1((jobject) NULL);
          jint a2;
          ::org::apache::lucene::search::TopDocs result((jobject) NULL);

          if (!parseArgs(args, "kkI", ::org::apache::lucene::search::IndexSearcher::initializeClass, ::org::apache::lucene::search::TopDocs::initializeClass, &a0, &a1, &a2))
          {
            OBJ_CALL(result = self->object.rescore(a0, a1, a2));
            return ::org::apache::lucene::search::t_TopDocs::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "rescore", args);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/document/DoubleField.h"
#include "org/apache/lucene/document/FieldType.h"
#include "java/lang/String.h"
#include "org/apache/lucene/document/Field$Store.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace document {

        ::java::lang::Class *DoubleField::class$ = NULL;
        jmethodID *DoubleField::mids$ = NULL;
        bool DoubleField::live$ = false;
        ::org::apache::lucene::document::FieldType *DoubleField::TYPE_NOT_STORED = NULL;
        ::org::apache::lucene::document::FieldType *DoubleField::TYPE_STORED = NULL;

        jclass DoubleField::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/document/DoubleField");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_d4f106f2] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;DLorg/apache/lucene/document/Field$Store;)V");
            mids$[mid_init$_1922fa29] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;DLorg/apache/lucene/document/FieldType;)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            cls = (jclass) class$->this$;

            TYPE_NOT_STORED = new ::org::apache::lucene::document::FieldType(env->getStaticObjectField(cls, "TYPE_NOT_STORED", "Lorg/apache/lucene/document/FieldType;"));
            TYPE_STORED = new ::org::apache::lucene::document::FieldType(env->getStaticObjectField(cls, "TYPE_STORED", "Lorg/apache/lucene/document/FieldType;"));
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        DoubleField::DoubleField(const ::java::lang::String & a0, jdouble a1, const ::org::apache::lucene::document::Field$Store & a2) : ::org::apache::lucene::document::Field(env->newObject(initializeClass, &mids$, mid_init$_d4f106f2, a0.this$, a1, a2.this$)) {}

        DoubleField::DoubleField(const ::java::lang::String & a0, jdouble a1, const ::org::apache::lucene::document::FieldType & a2) : ::org::apache::lucene::document::Field(env->newObject(initializeClass, &mids$, mid_init$_1922fa29, a0.this$, a1, a2.this$)) {}
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace document {
        static PyObject *t_DoubleField_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_DoubleField_instance_(PyTypeObject *type, PyObject *arg);
        static int t_DoubleField_init_(t_DoubleField *self, PyObject *args, PyObject *kwds);

        static PyMethodDef t_DoubleField__methods_[] = {
          DECLARE_METHOD(t_DoubleField, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_DoubleField, instance_, METH_O | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(DoubleField, t_DoubleField, ::org::apache::lucene::document::Field, DoubleField, t_DoubleField_init_, 0, 0, 0, 0, 0);

        void t_DoubleField::install(PyObject *module)
        {
          installType(&PY_TYPE(DoubleField), module, "DoubleField", 0);
        }

        void t_DoubleField::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(DoubleField).tp_dict, "class_", make_descriptor(DoubleField::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(DoubleField).tp_dict, "wrapfn_", make_descriptor(t_DoubleField::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(DoubleField).tp_dict, "boxfn_", make_descriptor(boxObject));
          env->getClass(DoubleField::initializeClass);
          PyDict_SetItemString(PY_TYPE(DoubleField).tp_dict, "TYPE_NOT_STORED", make_descriptor(::org::apache::lucene::document::t_FieldType::wrap_Object(*DoubleField::TYPE_NOT_STORED)));
          PyDict_SetItemString(PY_TYPE(DoubleField).tp_dict, "TYPE_STORED", make_descriptor(::org::apache::lucene::document::t_FieldType::wrap_Object(*DoubleField::TYPE_STORED)));
        }

        static PyObject *t_DoubleField_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, DoubleField::initializeClass, 1)))
            return NULL;
          return t_DoubleField::wrap_Object(DoubleField(((t_DoubleField *) arg)->object.this$));
        }
        static PyObject *t_DoubleField_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, DoubleField::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_DoubleField_init_(t_DoubleField *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 3:
            {
              ::java::lang::String a0((jobject) NULL);
              jdouble a1;
              ::org::apache::lucene::document::Field$Store a2((jobject) NULL);
              PyTypeObject **p2;
              DoubleField object((jobject) NULL);

              if (!parseArgs(args, "sDK", ::org::apache::lucene::document::Field$Store::initializeClass, &a0, &a1, &a2, &p2, ::org::apache::lucene::document::t_Field$Store::parameters_))
              {
                INT_CALL(object = DoubleField(a0, a1, a2));
                self->object = object;
                break;
              }
            }
            {
              ::java::lang::String a0((jobject) NULL);
              jdouble a1;
              ::org::apache::lucene::document::FieldType a2((jobject) NULL);
              DoubleField object((jobject) NULL);

              if (!parseArgs(args, "sDk", ::org::apache::lucene::document::FieldType::initializeClass, &a0, &a1, &a2))
              {
                INT_CALL(object = DoubleField(a0, a1, a2));
                self->object = object;
                break;
              }
            }
           default:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/pattern/PatternReplaceFilter.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/util/regex/Pattern.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace pattern {

          ::java::lang::Class *PatternReplaceFilter::class$ = NULL;
          jmethodID *PatternReplaceFilter::mids$ = NULL;
          bool PatternReplaceFilter::live$ = false;

          jclass PatternReplaceFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/pattern/PatternReplaceFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_afb3adc3] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;Ljava/util/regex/Pattern;Ljava/lang/String;Z)V");
              mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          PatternReplaceFilter::PatternReplaceFilter(const ::org::apache::lucene::analysis::TokenStream & a0, const ::java::util::regex::Pattern & a1, const ::java::lang::String & a2, jboolean a3) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_afb3adc3, a0.this$, a1.this$, a2.this$, a3)) {}

          jboolean PatternReplaceFilter::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_54c6a16a]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace pattern {
          static PyObject *t_PatternReplaceFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PatternReplaceFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_PatternReplaceFilter_init_(t_PatternReplaceFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_PatternReplaceFilter_incrementToken(t_PatternReplaceFilter *self, PyObject *args);

          static PyMethodDef t_PatternReplaceFilter__methods_[] = {
            DECLARE_METHOD(t_PatternReplaceFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PatternReplaceFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PatternReplaceFilter, incrementToken, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(PatternReplaceFilter, t_PatternReplaceFilter, ::org::apache::lucene::analysis::TokenFilter, PatternReplaceFilter, t_PatternReplaceFilter_init_, 0, 0, 0, 0, 0);

          void t_PatternReplaceFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(PatternReplaceFilter), module, "PatternReplaceFilter", 0);
          }

          void t_PatternReplaceFilter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(PatternReplaceFilter).tp_dict, "class_", make_descriptor(PatternReplaceFilter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(PatternReplaceFilter).tp_dict, "wrapfn_", make_descriptor(t_PatternReplaceFilter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(PatternReplaceFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_PatternReplaceFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, PatternReplaceFilter::initializeClass, 1)))
              return NULL;
            return t_PatternReplaceFilter::wrap_Object(PatternReplaceFilter(((t_PatternReplaceFilter *) arg)->object.this$));
          }
          static PyObject *t_PatternReplaceFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, PatternReplaceFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_PatternReplaceFilter_init_(t_PatternReplaceFilter *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::java::util::regex::Pattern a1((jobject) NULL);
            ::java::lang::String a2((jobject) NULL);
            jboolean a3;
            PatternReplaceFilter object((jobject) NULL);

            if (!parseArgs(args, "kksZ", ::org::apache::lucene::analysis::TokenStream::initializeClass, ::java::util::regex::Pattern::initializeClass, &a0, &a1, &a2, &a3))
            {
              INT_CALL(object = PatternReplaceFilter(a0, a1, a2, a3));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_PatternReplaceFilter_incrementToken(t_PatternReplaceFilter *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(PatternReplaceFilter), (PyObject *) self, "incrementToken", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/suggest/tst/TSTLookup.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "java/lang/Class.h"
#include "java/lang/Object.h"
#include "org/apache/lucene/search/suggest/Lookup$LookupResult.h"
#include "java/io/IOException.h"
#include "java/lang/CharSequence.h"
#include "org/apache/lucene/store/DataInput.h"
#include "java/util/Set.h"
#include "org/apache/lucene/store/DataOutput.h"
#include "org/apache/lucene/search/suggest/InputIterator.h"
#include "java/util/List.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace suggest {
          namespace tst {

            ::java::lang::Class *TSTLookup::class$ = NULL;
            jmethodID *TSTLookup::mids$ = NULL;
            bool TSTLookup::live$ = false;

            jclass TSTLookup::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/search/suggest/tst/TSTLookup");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
                mids$[mid_add_cb8bea96] = env->getMethodID(cls, "add", "(Ljava/lang/CharSequence;Ljava/lang/Object;)Z");
                mids$[mid_build_1754a234] = env->getMethodID(cls, "build", "(Lorg/apache/lucene/search/suggest/InputIterator;)V");
                mids$[mid_get_a739ccff] = env->getMethodID(cls, "get", "(Ljava/lang/CharSequence;)Ljava/lang/Object;");
                mids$[mid_getCount_54c6a17a] = env->getMethodID(cls, "getCount", "()J");
                mids$[mid_load_f5d6a55d] = env->getMethodID(cls, "load", "(Lorg/apache/lucene/store/DataInput;)Z");
                mids$[mid_lookup_dd3e9f51] = env->getMethodID(cls, "lookup", "(Ljava/lang/CharSequence;Ljava/util/Set;ZI)Ljava/util/List;");
                mids$[mid_ramBytesUsed_54c6a17a] = env->getMethodID(cls, "ramBytesUsed", "()J");
                mids$[mid_store_27875f5b] = env->getMethodID(cls, "store", "(Lorg/apache/lucene/store/DataOutput;)Z");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            TSTLookup::TSTLookup() : ::org::apache::lucene::search::suggest::Lookup(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

            jboolean TSTLookup::add(const ::java::lang::CharSequence & a0, const ::java::lang::Object & a1) const
            {
              return env->callBooleanMethod(this$, mids$[mid_add_cb8bea96], a0.this$, a1.this$);
            }

            void TSTLookup::build(const ::org::apache::lucene::search::suggest::InputIterator & a0) const
            {
              env->callVoidMethod(this$, mids$[mid_build_1754a234], a0.this$);
            }

            ::java::lang::Object TSTLookup::get(const ::java::lang::CharSequence & a0) const
            {
              return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_get_a739ccff], a0.this$));
            }

            jlong TSTLookup::getCount() const
            {
              return env->callLongMethod(this$, mids$[mid_getCount_54c6a17a]);
            }

            jboolean TSTLookup::load(const ::org::apache::lucene::store::DataInput & a0) const
            {
              return env->callBooleanMethod(this$, mids$[mid_load_f5d6a55d], a0.this$);
            }

            ::java::util::List TSTLookup::lookup(const ::java::lang::CharSequence & a0, const ::java::util::Set & a1, jboolean a2, jint a3) const
            {
              return ::java::util::List(env->callObjectMethod(this$, mids$[mid_lookup_dd3e9f51], a0.this$, a1.this$, a2, a3));
            }

            jlong TSTLookup::ramBytesUsed() const
            {
              return env->callLongMethod(this$, mids$[mid_ramBytesUsed_54c6a17a]);
            }

            jboolean TSTLookup::store(const ::org::apache::lucene::store::DataOutput & a0) const
            {
              return env->callBooleanMethod(this$, mids$[mid_store_27875f5b], a0.this$);
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace suggest {
          namespace tst {
            static PyObject *t_TSTLookup_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_TSTLookup_instance_(PyTypeObject *type, PyObject *arg);
            static int t_TSTLookup_init_(t_TSTLookup *self, PyObject *args, PyObject *kwds);
            static PyObject *t_TSTLookup_add(t_TSTLookup *self, PyObject *args);
            static PyObject *t_TSTLookup_build(t_TSTLookup *self, PyObject *args);
            static PyObject *t_TSTLookup_get(t_TSTLookup *self, PyObject *arg);
            static PyObject *t_TSTLookup_getCount(t_TSTLookup *self, PyObject *args);
            static PyObject *t_TSTLookup_load(t_TSTLookup *self, PyObject *args);
            static PyObject *t_TSTLookup_lookup(t_TSTLookup *self, PyObject *args);
            static PyObject *t_TSTLookup_ramBytesUsed(t_TSTLookup *self, PyObject *args);
            static PyObject *t_TSTLookup_store(t_TSTLookup *self, PyObject *args);
            static PyObject *t_TSTLookup_get__count(t_TSTLookup *self, void *data);
            static PyGetSetDef t_TSTLookup__fields_[] = {
              DECLARE_GET_FIELD(t_TSTLookup, count),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_TSTLookup__methods_[] = {
              DECLARE_METHOD(t_TSTLookup, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_TSTLookup, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_TSTLookup, add, METH_VARARGS),
              DECLARE_METHOD(t_TSTLookup, build, METH_VARARGS),
              DECLARE_METHOD(t_TSTLookup, get, METH_O),
              DECLARE_METHOD(t_TSTLookup, getCount, METH_VARARGS),
              DECLARE_METHOD(t_TSTLookup, load, METH_VARARGS),
              DECLARE_METHOD(t_TSTLookup, lookup, METH_VARARGS),
              DECLARE_METHOD(t_TSTLookup, ramBytesUsed, METH_VARARGS),
              DECLARE_METHOD(t_TSTLookup, store, METH_VARARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(TSTLookup, t_TSTLookup, ::org::apache::lucene::search::suggest::Lookup, TSTLookup, t_TSTLookup_init_, 0, 0, t_TSTLookup__fields_, 0, 0);

            void t_TSTLookup::install(PyObject *module)
            {
              installType(&PY_TYPE(TSTLookup), module, "TSTLookup", 0);
            }

            void t_TSTLookup::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(TSTLookup).tp_dict, "class_", make_descriptor(TSTLookup::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(TSTLookup).tp_dict, "wrapfn_", make_descriptor(t_TSTLookup::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(TSTLookup).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_TSTLookup_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, TSTLookup::initializeClass, 1)))
                return NULL;
              return t_TSTLookup::wrap_Object(TSTLookup(((t_TSTLookup *) arg)->object.this$));
            }
            static PyObject *t_TSTLookup_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, TSTLookup::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_TSTLookup_init_(t_TSTLookup *self, PyObject *args, PyObject *kwds)
            {
              TSTLookup object((jobject) NULL);

              INT_CALL(object = TSTLookup());
              self->object = object;

              return 0;
            }

            static PyObject *t_TSTLookup_add(t_TSTLookup *self, PyObject *args)
            {
              ::java::lang::CharSequence a0((jobject) NULL);
              ::java::lang::Object a1((jobject) NULL);
              jboolean result;

              if (!parseArgs(args, "Oo", &::java::lang::PY_TYPE(CharSequence), &a0, &a1))
              {
                OBJ_CALL(result = self->object.add(a0, a1));
                Py_RETURN_BOOL(result);
              }

              PyErr_SetArgsError((PyObject *) self, "add", args);
              return NULL;
            }

            static PyObject *t_TSTLookup_build(t_TSTLookup *self, PyObject *args)
            {
              ::org::apache::lucene::search::suggest::InputIterator a0((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::search::suggest::InputIterator::initializeClass, &a0))
              {
                OBJ_CALL(self->object.build(a0));
                Py_RETURN_NONE;
              }

              return callSuper(&PY_TYPE(TSTLookup), (PyObject *) self, "build", args, 2);
            }

            static PyObject *t_TSTLookup_get(t_TSTLookup *self, PyObject *arg)
            {
              ::java::lang::CharSequence a0((jobject) NULL);
              ::java::lang::Object result((jobject) NULL);

              if (!parseArg(arg, "O", &::java::lang::PY_TYPE(CharSequence), &a0))
              {
                OBJ_CALL(result = self->object.get(a0));
                return ::java::lang::t_Object::wrap_Object(result);
              }

              PyErr_SetArgsError((PyObject *) self, "get", arg);
              return NULL;
            }

            static PyObject *t_TSTLookup_getCount(t_TSTLookup *self, PyObject *args)
            {
              jlong result;

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.getCount());
                return PyLong_FromLongLong((PY_LONG_LONG) result);
              }

              return callSuper(&PY_TYPE(TSTLookup), (PyObject *) self, "getCount", args, 2);
            }

            static PyObject *t_TSTLookup_load(t_TSTLookup *self, PyObject *args)
            {
              ::org::apache::lucene::store::DataInput a0((jobject) NULL);
              jboolean result;

              if (!parseArgs(args, "k", ::org::apache::lucene::store::DataInput::initializeClass, &a0))
              {
                OBJ_CALL(result = self->object.load(a0));
                Py_RETURN_BOOL(result);
              }

              return callSuper(&PY_TYPE(TSTLookup), (PyObject *) self, "load", args, 2);
            }

            static PyObject *t_TSTLookup_lookup(t_TSTLookup *self, PyObject *args)
            {
              ::java::lang::CharSequence a0((jobject) NULL);
              ::java::util::Set a1((jobject) NULL);
              PyTypeObject **p1;
              jboolean a2;
              jint a3;
              ::java::util::List result((jobject) NULL);

              if (!parseArgs(args, "OKZI", &::java::lang::PY_TYPE(CharSequence), ::java::util::Set::initializeClass, &a0, &a1, &p1, ::java::util::t_Set::parameters_, &a2, &a3))
              {
                OBJ_CALL(result = self->object.lookup(a0, a1, a2, a3));
                return ::java::util::t_List::wrap_Object(result, &::org::apache::lucene::search::suggest::PY_TYPE(Lookup$LookupResult));
              }

              return callSuper(&PY_TYPE(TSTLookup), (PyObject *) self, "lookup", args, 2);
            }

            static PyObject *t_TSTLookup_ramBytesUsed(t_TSTLookup *self, PyObject *args)
            {
              jlong result;

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.ramBytesUsed());
                return PyLong_FromLongLong((PY_LONG_LONG) result);
              }

              return callSuper(&PY_TYPE(TSTLookup), (PyObject *) self, "ramBytesUsed", args, 2);
            }

            static PyObject *t_TSTLookup_store(t_TSTLookup *self, PyObject *args)
            {
              ::org::apache::lucene::store::DataOutput a0((jobject) NULL);
              jboolean result;

              if (!parseArgs(args, "k", ::org::apache::lucene::store::DataOutput::initializeClass, &a0))
              {
                OBJ_CALL(result = self->object.store(a0));
                Py_RETURN_BOOL(result);
              }

              return callSuper(&PY_TYPE(TSTLookup), (PyObject *) self, "store", args, 2);
            }

            static PyObject *t_TSTLookup_get__count(t_TSTLookup *self, void *data)
            {
              jlong value;
              OBJ_CALL(value = self->object.getCount());
              return PyLong_FromLongLong((PY_LONG_LONG) value);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/ckb/SoraniNormalizationFilter.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ckb {

          ::java::lang::Class *SoraniNormalizationFilter::class$ = NULL;
          jmethodID *SoraniNormalizationFilter::mids$ = NULL;
          bool SoraniNormalizationFilter::live$ = false;

          jclass SoraniNormalizationFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/ckb/SoraniNormalizationFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_c7c794dc] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;)V");
              mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          SoraniNormalizationFilter::SoraniNormalizationFilter(const ::org::apache::lucene::analysis::TokenStream & a0) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_c7c794dc, a0.this$)) {}

          jboolean SoraniNormalizationFilter::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_54c6a16a]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ckb {
          static PyObject *t_SoraniNormalizationFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SoraniNormalizationFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_SoraniNormalizationFilter_init_(t_SoraniNormalizationFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_SoraniNormalizationFilter_incrementToken(t_SoraniNormalizationFilter *self, PyObject *args);

          static PyMethodDef t_SoraniNormalizationFilter__methods_[] = {
            DECLARE_METHOD(t_SoraniNormalizationFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SoraniNormalizationFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SoraniNormalizationFilter, incrementToken, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(SoraniNormalizationFilter, t_SoraniNormalizationFilter, ::org::apache::lucene::analysis::TokenFilter, SoraniNormalizationFilter, t_SoraniNormalizationFilter_init_, 0, 0, 0, 0, 0);

          void t_SoraniNormalizationFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(SoraniNormalizationFilter), module, "SoraniNormalizationFilter", 0);
          }

          void t_SoraniNormalizationFilter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(SoraniNormalizationFilter).tp_dict, "class_", make_descriptor(SoraniNormalizationFilter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(SoraniNormalizationFilter).tp_dict, "wrapfn_", make_descriptor(t_SoraniNormalizationFilter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(SoraniNormalizationFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_SoraniNormalizationFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, SoraniNormalizationFilter::initializeClass, 1)))
              return NULL;
            return t_SoraniNormalizationFilter::wrap_Object(SoraniNormalizationFilter(((t_SoraniNormalizationFilter *) arg)->object.this$));
          }
          static PyObject *t_SoraniNormalizationFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, SoraniNormalizationFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_SoraniNormalizationFilter_init_(t_SoraniNormalizationFilter *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            SoraniNormalizationFilter object((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              INT_CALL(object = SoraniNormalizationFilter(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_SoraniNormalizationFilter_incrementToken(t_SoraniNormalizationFilter *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(SoraniNormalizationFilter), (PyObject *) self, "incrementToken", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/pylucene/util/PythonAttribute.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace pylucene {
      namespace util {

        ::java::lang::Class *PythonAttribute::class$ = NULL;
        jmethodID *PythonAttribute::mids$ = NULL;
        bool PythonAttribute::live$ = false;

        jclass PythonAttribute::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/pylucene/util/PythonAttribute");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace pylucene {
      namespace util {
        static PyObject *t_PythonAttribute_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_PythonAttribute_instance_(PyTypeObject *type, PyObject *arg);

        static PyMethodDef t_PythonAttribute__methods_[] = {
          DECLARE_METHOD(t_PythonAttribute, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PythonAttribute, instance_, METH_O | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(PythonAttribute, t_PythonAttribute, ::org::apache::lucene::util::Attribute, PythonAttribute, abstract_init, 0, 0, 0, 0, 0);

        void t_PythonAttribute::install(PyObject *module)
        {
          installType(&PY_TYPE(PythonAttribute), module, "PythonAttribute", 0);
        }

        void t_PythonAttribute::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(PythonAttribute).tp_dict, "class_", make_descriptor(PythonAttribute::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(PythonAttribute).tp_dict, "wrapfn_", make_descriptor(t_PythonAttribute::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(PythonAttribute).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_PythonAttribute_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, PythonAttribute::initializeClass, 1)))
            return NULL;
          return t_PythonAttribute::wrap_Object(PythonAttribute(((t_PythonAttribute *) arg)->object.this$));
        }
        static PyObject *t_PythonAttribute_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, PythonAttribute::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/facet/taxonomy/OrdinalsReader$OrdinalsSegmentReader.h"
#include "org/apache/lucene/util/IntsRef.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace taxonomy {

          ::java::lang::Class *OrdinalsReader$OrdinalsSegmentReader::class$ = NULL;
          jmethodID *OrdinalsReader$OrdinalsSegmentReader::mids$ = NULL;
          bool OrdinalsReader$OrdinalsSegmentReader::live$ = false;

          jclass OrdinalsReader$OrdinalsSegmentReader::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/facet/taxonomy/OrdinalsReader$OrdinalsSegmentReader");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_get_e6e32052] = env->getMethodID(cls, "get", "(ILorg/apache/lucene/util/IntsRef;)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          OrdinalsReader$OrdinalsSegmentReader::OrdinalsReader$OrdinalsSegmentReader() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          void OrdinalsReader$OrdinalsSegmentReader::get(jint a0, const ::org::apache::lucene::util::IntsRef & a1) const
          {
            env->callVoidMethod(this$, mids$[mid_get_e6e32052], a0, a1.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace taxonomy {
          static PyObject *t_OrdinalsReader$OrdinalsSegmentReader_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_OrdinalsReader$OrdinalsSegmentReader_instance_(PyTypeObject *type, PyObject *arg);
          static int t_OrdinalsReader$OrdinalsSegmentReader_init_(t_OrdinalsReader$OrdinalsSegmentReader *self, PyObject *args, PyObject *kwds);
          static PyObject *t_OrdinalsReader$OrdinalsSegmentReader_get(t_OrdinalsReader$OrdinalsSegmentReader *self, PyObject *args);

          static PyMethodDef t_OrdinalsReader$OrdinalsSegmentReader__methods_[] = {
            DECLARE_METHOD(t_OrdinalsReader$OrdinalsSegmentReader, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_OrdinalsReader$OrdinalsSegmentReader, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_OrdinalsReader$OrdinalsSegmentReader, get, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(OrdinalsReader$OrdinalsSegmentReader, t_OrdinalsReader$OrdinalsSegmentReader, ::java::lang::Object, OrdinalsReader$OrdinalsSegmentReader, t_OrdinalsReader$OrdinalsSegmentReader_init_, 0, 0, 0, 0, 0);

          void t_OrdinalsReader$OrdinalsSegmentReader::install(PyObject *module)
          {
            installType(&PY_TYPE(OrdinalsReader$OrdinalsSegmentReader), module, "OrdinalsReader$OrdinalsSegmentReader", 0);
          }

          void t_OrdinalsReader$OrdinalsSegmentReader::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(OrdinalsReader$OrdinalsSegmentReader).tp_dict, "class_", make_descriptor(OrdinalsReader$OrdinalsSegmentReader::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(OrdinalsReader$OrdinalsSegmentReader).tp_dict, "wrapfn_", make_descriptor(t_OrdinalsReader$OrdinalsSegmentReader::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(OrdinalsReader$OrdinalsSegmentReader).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_OrdinalsReader$OrdinalsSegmentReader_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, OrdinalsReader$OrdinalsSegmentReader::initializeClass, 1)))
              return NULL;
            return t_OrdinalsReader$OrdinalsSegmentReader::wrap_Object(OrdinalsReader$OrdinalsSegmentReader(((t_OrdinalsReader$OrdinalsSegmentReader *) arg)->object.this$));
          }
          static PyObject *t_OrdinalsReader$OrdinalsSegmentReader_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, OrdinalsReader$OrdinalsSegmentReader::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_OrdinalsReader$OrdinalsSegmentReader_init_(t_OrdinalsReader$OrdinalsSegmentReader *self, PyObject *args, PyObject *kwds)
          {
            OrdinalsReader$OrdinalsSegmentReader object((jobject) NULL);

            INT_CALL(object = OrdinalsReader$OrdinalsSegmentReader());
            self->object = object;

            return 0;
          }

          static PyObject *t_OrdinalsReader$OrdinalsSegmentReader_get(t_OrdinalsReader$OrdinalsSegmentReader *self, PyObject *args)
          {
            jint a0;
            ::org::apache::lucene::util::IntsRef a1((jobject) NULL);

            if (!parseArgs(args, "Ik", ::org::apache::lucene::util::IntsRef::initializeClass, &a0, &a1))
            {
              OBJ_CALL(self->object.get(a0, a1));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "get", args);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/InPlaceMergeSorter.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *InPlaceMergeSorter::class$ = NULL;
        jmethodID *InPlaceMergeSorter::mids$ = NULL;
        bool InPlaceMergeSorter::live$ = false;

        jclass InPlaceMergeSorter::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/InPlaceMergeSorter");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_sort_d8d154a6] = env->getMethodID(cls, "sort", "(II)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        InPlaceMergeSorter::InPlaceMergeSorter() : ::org::apache::lucene::util::Sorter(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        void InPlaceMergeSorter::sort(jint a0, jint a1) const
        {
          env->callVoidMethod(this$, mids$[mid_sort_d8d154a6], a0, a1);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_InPlaceMergeSorter_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_InPlaceMergeSorter_instance_(PyTypeObject *type, PyObject *arg);
        static int t_InPlaceMergeSorter_init_(t_InPlaceMergeSorter *self, PyObject *args, PyObject *kwds);
        static PyObject *t_InPlaceMergeSorter_sort(t_InPlaceMergeSorter *self, PyObject *args);

        static PyMethodDef t_InPlaceMergeSorter__methods_[] = {
          DECLARE_METHOD(t_InPlaceMergeSorter, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_InPlaceMergeSorter, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_InPlaceMergeSorter, sort, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(InPlaceMergeSorter, t_InPlaceMergeSorter, ::org::apache::lucene::util::Sorter, InPlaceMergeSorter, t_InPlaceMergeSorter_init_, 0, 0, 0, 0, 0);

        void t_InPlaceMergeSorter::install(PyObject *module)
        {
          installType(&PY_TYPE(InPlaceMergeSorter), module, "InPlaceMergeSorter", 0);
        }

        void t_InPlaceMergeSorter::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(InPlaceMergeSorter).tp_dict, "class_", make_descriptor(InPlaceMergeSorter::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(InPlaceMergeSorter).tp_dict, "wrapfn_", make_descriptor(t_InPlaceMergeSorter::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(InPlaceMergeSorter).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_InPlaceMergeSorter_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, InPlaceMergeSorter::initializeClass, 1)))
            return NULL;
          return t_InPlaceMergeSorter::wrap_Object(InPlaceMergeSorter(((t_InPlaceMergeSorter *) arg)->object.this$));
        }
        static PyObject *t_InPlaceMergeSorter_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, InPlaceMergeSorter::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_InPlaceMergeSorter_init_(t_InPlaceMergeSorter *self, PyObject *args, PyObject *kwds)
        {
          InPlaceMergeSorter object((jobject) NULL);

          INT_CALL(object = InPlaceMergeSorter());
          self->object = object;

          return 0;
        }

        static PyObject *t_InPlaceMergeSorter_sort(t_InPlaceMergeSorter *self, PyObject *args)
        {
          jint a0;
          jint a1;

          if (!parseArgs(args, "II", &a0, &a1))
          {
            OBJ_CALL(self->object.sort(a0, a1));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(InPlaceMergeSorter), (PyObject *) self, "sort", args, 2);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/classic/QueryParserConstants.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace classic {

          ::java::lang::Class *QueryParserConstants::class$ = NULL;
          jmethodID *QueryParserConstants::mids$ = NULL;
          bool QueryParserConstants::live$ = false;
          jint QueryParserConstants::AND = (jint) 0;
          jint QueryParserConstants::BAREOPER = (jint) 0;
          jint QueryParserConstants::Boost = (jint) 0;
          jint QueryParserConstants::CARAT = (jint) 0;
          jint QueryParserConstants::COLON = (jint) 0;
          jint QueryParserConstants::DEFAULT = (jint) 0;
          jint QueryParserConstants::EOF = (jint) 0;
          jint QueryParserConstants::FUZZY_SLOP = (jint) 0;
          jint QueryParserConstants::LPAREN = (jint) 0;
          jint QueryParserConstants::MINUS = (jint) 0;
          jint QueryParserConstants::NOT = (jint) 0;
          jint QueryParserConstants::NUMBER = (jint) 0;
          jint QueryParserConstants::OR = (jint) 0;
          jint QueryParserConstants::PLUS = (jint) 0;
          jint QueryParserConstants::PREFIXTERM = (jint) 0;
          jint QueryParserConstants::QUOTED = (jint) 0;
          jint QueryParserConstants::RANGEEX_END = (jint) 0;
          jint QueryParserConstants::RANGEEX_START = (jint) 0;
          jint QueryParserConstants::RANGEIN_END = (jint) 0;
          jint QueryParserConstants::RANGEIN_START = (jint) 0;
          jint QueryParserConstants::RANGE_GOOP = (jint) 0;
          jint QueryParserConstants::RANGE_QUOTED = (jint) 0;
          jint QueryParserConstants::RANGE_TO = (jint) 0;
          jint QueryParserConstants::REGEXPTERM = (jint) 0;
          jint QueryParserConstants::RPAREN = (jint) 0;
          jint QueryParserConstants::Range = (jint) 0;
          jint QueryParserConstants::STAR = (jint) 0;
          jint QueryParserConstants::TERM = (jint) 0;
          jint QueryParserConstants::WILDTERM = (jint) 0;
          jint QueryParserConstants::_ESCAPED_CHAR = (jint) 0;
          jint QueryParserConstants::_NUM_CHAR = (jint) 0;
          jint QueryParserConstants::_QUOTED_CHAR = (jint) 0;
          jint QueryParserConstants::_TERM_CHAR = (jint) 0;
          jint QueryParserConstants::_TERM_START_CHAR = (jint) 0;
          jint QueryParserConstants::_WHITESPACE = (jint) 0;
          JArray< ::java::lang::String > *QueryParserConstants::tokenImage = NULL;

          jclass QueryParserConstants::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/classic/QueryParserConstants");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              AND = env->getStaticIntField(cls, "AND");
              BAREOPER = env->getStaticIntField(cls, "BAREOPER");
              Boost = env->getStaticIntField(cls, "Boost");
              CARAT = env->getStaticIntField(cls, "CARAT");
              COLON = env->getStaticIntField(cls, "COLON");
              DEFAULT = env->getStaticIntField(cls, "DEFAULT");
              EOF = env->getStaticIntField(cls, "EOF");
              FUZZY_SLOP = env->getStaticIntField(cls, "FUZZY_SLOP");
              LPAREN = env->getStaticIntField(cls, "LPAREN");
              MINUS = env->getStaticIntField(cls, "MINUS");
              NOT = env->getStaticIntField(cls, "NOT");
              NUMBER = env->getStaticIntField(cls, "NUMBER");
              OR = env->getStaticIntField(cls, "OR");
              PLUS = env->getStaticIntField(cls, "PLUS");
              PREFIXTERM = env->getStaticIntField(cls, "PREFIXTERM");
              QUOTED = env->getStaticIntField(cls, "QUOTED");
              RANGEEX_END = env->getStaticIntField(cls, "RANGEEX_END");
              RANGEEX_START = env->getStaticIntField(cls, "RANGEEX_START");
              RANGEIN_END = env->getStaticIntField(cls, "RANGEIN_END");
              RANGEIN_START = env->getStaticIntField(cls, "RANGEIN_START");
              RANGE_GOOP = env->getStaticIntField(cls, "RANGE_GOOP");
              RANGE_QUOTED = env->getStaticIntField(cls, "RANGE_QUOTED");
              RANGE_TO = env->getStaticIntField(cls, "RANGE_TO");
              REGEXPTERM = env->getStaticIntField(cls, "REGEXPTERM");
              RPAREN = env->getStaticIntField(cls, "RPAREN");
              Range = env->getStaticIntField(cls, "Range");
              STAR = env->getStaticIntField(cls, "STAR");
              TERM = env->getStaticIntField(cls, "TERM");
              WILDTERM = env->getStaticIntField(cls, "WILDTERM");
              _ESCAPED_CHAR = env->getStaticIntField(cls, "_ESCAPED_CHAR");
              _NUM_CHAR = env->getStaticIntField(cls, "_NUM_CHAR");
              _QUOTED_CHAR = env->getStaticIntField(cls, "_QUOTED_CHAR");
              _TERM_CHAR = env->getStaticIntField(cls, "_TERM_CHAR");
              _TERM_START_CHAR = env->getStaticIntField(cls, "_TERM_START_CHAR");
              _WHITESPACE = env->getStaticIntField(cls, "_WHITESPACE");
              tokenImage = new JArray< ::java::lang::String >(env->getStaticObjectField(cls, "tokenImage", "[Ljava/lang/String;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace classic {
          static PyObject *t_QueryParserConstants_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_QueryParserConstants_instance_(PyTypeObject *type, PyObject *arg);

          static PyMethodDef t_QueryParserConstants__methods_[] = {
            DECLARE_METHOD(t_QueryParserConstants, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_QueryParserConstants, instance_, METH_O | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(QueryParserConstants, t_QueryParserConstants, ::java::lang::Object, QueryParserConstants, abstract_init, 0, 0, 0, 0, 0);

          void t_QueryParserConstants::install(PyObject *module)
          {
            installType(&PY_TYPE(QueryParserConstants), module, "QueryParserConstants", 0);
          }

          void t_QueryParserConstants::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(QueryParserConstants).tp_dict, "class_", make_descriptor(QueryParserConstants::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(QueryParserConstants).tp_dict, "wrapfn_", make_descriptor(t_QueryParserConstants::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(QueryParserConstants).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(QueryParserConstants::initializeClass);
            PyDict_SetItemString(PY_TYPE(QueryParserConstants).tp_dict, "AND", make_descriptor(QueryParserConstants::AND));
            PyDict_SetItemString(PY_TYPE(QueryParserConstants).tp_dict, "BAREOPER", make_descriptor(QueryParserConstants::BAREOPER));
            PyDict_SetItemString(PY_TYPE(QueryParserConstants).tp_dict, "Boost", make_descriptor(QueryParserConstants::Boost));
            PyDict_SetItemString(PY_TYPE(QueryParserConstants).tp_dict, "CARAT", make_descriptor(QueryParserConstants::CARAT));
            PyDict_SetItemString(PY_TYPE(QueryParserConstants).tp_dict, "COLON", make_descriptor(QueryParserConstants::COLON));
            PyDict_SetItemString(PY_TYPE(QueryParserConstants).tp_dict, "DEFAULT", make_descriptor(QueryParserConstants::DEFAULT));
            PyDict_SetItemString(PY_TYPE(QueryParserConstants).tp_dict, "EOF", make_descriptor(QueryParserConstants::EOF));
            PyDict_SetItemString(PY_TYPE(QueryParserConstants).tp_dict, "FUZZY_SLOP", make_descriptor(QueryParserConstants::FUZZY_SLOP));
            PyDict_SetItemString(PY_TYPE(QueryParserConstants).tp_dict, "LPAREN", make_descriptor(QueryParserConstants::LPAREN));
            PyDict_SetItemString(PY_TYPE(QueryParserConstants).tp_dict, "MINUS", make_descriptor(QueryParserConstants::MINUS));
            PyDict_SetItemString(PY_TYPE(QueryParserConstants).tp_dict, "NOT", make_descriptor(QueryParserConstants::NOT));
            PyDict_SetItemString(PY_TYPE(QueryParserConstants).tp_dict, "NUMBER", make_descriptor(QueryParserConstants::NUMBER));
            PyDict_SetItemString(PY_TYPE(QueryParserConstants).tp_dict, "OR", make_descriptor(QueryParserConstants::OR));
            PyDict_SetItemString(PY_TYPE(QueryParserConstants).tp_dict, "PLUS", make_descriptor(QueryParserConstants::PLUS));
            PyDict_SetItemString(PY_TYPE(QueryParserConstants).tp_dict, "PREFIXTERM", make_descriptor(QueryParserConstants::PREFIXTERM));
            PyDict_SetItemString(PY_TYPE(QueryParserConstants).tp_dict, "QUOTED", make_descriptor(QueryParserConstants::QUOTED));
            PyDict_SetItemString(PY_TYPE(QueryParserConstants).tp_dict, "RANGEEX_END", make_descriptor(QueryParserConstants::RANGEEX_END));
            PyDict_SetItemString(PY_TYPE(QueryParserConstants).tp_dict, "RANGEEX_START", make_descriptor(QueryParserConstants::RANGEEX_START));
            PyDict_SetItemString(PY_TYPE(QueryParserConstants).tp_dict, "RANGEIN_END", make_descriptor(QueryParserConstants::RANGEIN_END));
            PyDict_SetItemString(PY_TYPE(QueryParserConstants).tp_dict, "RANGEIN_START", make_descriptor(QueryParserConstants::RANGEIN_START));
            PyDict_SetItemString(PY_TYPE(QueryParserConstants).tp_dict, "RANGE_GOOP", make_descriptor(QueryParserConstants::RANGE_GOOP));
            PyDict_SetItemString(PY_TYPE(QueryParserConstants).tp_dict, "RANGE_QUOTED", make_descriptor(QueryParserConstants::RANGE_QUOTED));
            PyDict_SetItemString(PY_TYPE(QueryParserConstants).tp_dict, "RANGE_TO", make_descriptor(QueryParserConstants::RANGE_TO));
            PyDict_SetItemString(PY_TYPE(QueryParserConstants).tp_dict, "REGEXPTERM", make_descriptor(QueryParserConstants::REGEXPTERM));
            PyDict_SetItemString(PY_TYPE(QueryParserConstants).tp_dict, "RPAREN", make_descriptor(QueryParserConstants::RPAREN));
            PyDict_SetItemString(PY_TYPE(QueryParserConstants).tp_dict, "Range", make_descriptor(QueryParserConstants::Range));
            PyDict_SetItemString(PY_TYPE(QueryParserConstants).tp_dict, "STAR", make_descriptor(QueryParserConstants::STAR));
            PyDict_SetItemString(PY_TYPE(QueryParserConstants).tp_dict, "TERM", make_descriptor(QueryParserConstants::TERM));
            PyDict_SetItemString(PY_TYPE(QueryParserConstants).tp_dict, "WILDTERM", make_descriptor(QueryParserConstants::WILDTERM));
            PyDict_SetItemString(PY_TYPE(QueryParserConstants).tp_dict, "_ESCAPED_CHAR", make_descriptor(QueryParserConstants::_ESCAPED_CHAR));
            PyDict_SetItemString(PY_TYPE(QueryParserConstants).tp_dict, "_NUM_CHAR", make_descriptor(QueryParserConstants::_NUM_CHAR));
            PyDict_SetItemString(PY_TYPE(QueryParserConstants).tp_dict, "_QUOTED_CHAR", make_descriptor(QueryParserConstants::_QUOTED_CHAR));
            PyDict_SetItemString(PY_TYPE(QueryParserConstants).tp_dict, "_TERM_CHAR", make_descriptor(QueryParserConstants::_TERM_CHAR));
            PyDict_SetItemString(PY_TYPE(QueryParserConstants).tp_dict, "_TERM_START_CHAR", make_descriptor(QueryParserConstants::_TERM_START_CHAR));
            PyDict_SetItemString(PY_TYPE(QueryParserConstants).tp_dict, "_WHITESPACE", make_descriptor(QueryParserConstants::_WHITESPACE));
            PyDict_SetItemString(PY_TYPE(QueryParserConstants).tp_dict, "tokenImage", make_descriptor(JArray<jstring>(QueryParserConstants::tokenImage->this$).wrap()));
          }

          static PyObject *t_QueryParserConstants_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, QueryParserConstants::initializeClass, 1)))
              return NULL;
            return t_QueryParserConstants::wrap_Object(QueryParserConstants(((t_QueryParserConstants *) arg)->object.this$));
          }
          static PyObject *t_QueryParserConstants_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, QueryParserConstants::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/store/RateLimitedDirectoryWrapper.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/store/RateLimiter.h"
#include "java/lang/Double.h"
#include "org/apache/lucene/store/Directory.h"
#include "java/lang/String.h"
#include "org/apache/lucene/store/IOContext.h"
#include "org/apache/lucene/store/IOContext$Context.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/store/IndexOutput.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {

        ::java::lang::Class *RateLimitedDirectoryWrapper::class$ = NULL;
        jmethodID *RateLimitedDirectoryWrapper::mids$ = NULL;
        bool RateLimitedDirectoryWrapper::live$ = false;

        jclass RateLimitedDirectoryWrapper::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/store/RateLimitedDirectoryWrapper");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_2e261ef2] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/store/Directory;)V");
            mids$[mid_copy_146bec62] = env->getMethodID(cls, "copy", "(Lorg/apache/lucene/store/Directory;Ljava/lang/String;Ljava/lang/String;Lorg/apache/lucene/store/IOContext;)V");
            mids$[mid_createOutput_5ad5358d] = env->getMethodID(cls, "createOutput", "(Ljava/lang/String;Lorg/apache/lucene/store/IOContext;)Lorg/apache/lucene/store/IndexOutput;");
            mids$[mid_getMaxWriteMBPerSec_c79e30dc] = env->getMethodID(cls, "getMaxWriteMBPerSec", "(Lorg/apache/lucene/store/IOContext$Context;)Ljava/lang/Double;");
            mids$[mid_setMaxWriteMBPerSec_947ec9bf] = env->getMethodID(cls, "setMaxWriteMBPerSec", "(Ljava/lang/Double;Lorg/apache/lucene/store/IOContext$Context;)V");
            mids$[mid_setRateLimiter_6afce4a8] = env->getMethodID(cls, "setRateLimiter", "(Lorg/apache/lucene/store/RateLimiter;Lorg/apache/lucene/store/IOContext$Context;)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        RateLimitedDirectoryWrapper::RateLimitedDirectoryWrapper(const ::org::apache::lucene::store::Directory & a0) : ::org::apache::lucene::store::FilterDirectory(env->newObject(initializeClass, &mids$, mid_init$_2e261ef2, a0.this$)) {}

        void RateLimitedDirectoryWrapper::copy(const ::org::apache::lucene::store::Directory & a0, const ::java::lang::String & a1, const ::java::lang::String & a2, const ::org::apache::lucene::store::IOContext & a3) const
        {
          env->callVoidMethod(this$, mids$[mid_copy_146bec62], a0.this$, a1.this$, a2.this$, a3.this$);
        }

        ::org::apache::lucene::store::IndexOutput RateLimitedDirectoryWrapper::createOutput(const ::java::lang::String & a0, const ::org::apache::lucene::store::IOContext & a1) const
        {
          return ::org::apache::lucene::store::IndexOutput(env->callObjectMethod(this$, mids$[mid_createOutput_5ad5358d], a0.this$, a1.this$));
        }

        ::java::lang::Double RateLimitedDirectoryWrapper::getMaxWriteMBPerSec(const ::org::apache::lucene::store::IOContext$Context & a0) const
        {
          return ::java::lang::Double(env->callObjectMethod(this$, mids$[mid_getMaxWriteMBPerSec_c79e30dc], a0.this$));
        }

        void RateLimitedDirectoryWrapper::setMaxWriteMBPerSec(const ::java::lang::Double & a0, const ::org::apache::lucene::store::IOContext$Context & a1) const
        {
          env->callVoidMethod(this$, mids$[mid_setMaxWriteMBPerSec_947ec9bf], a0.this$, a1.this$);
        }

        void RateLimitedDirectoryWrapper::setRateLimiter(const ::org::apache::lucene::store::RateLimiter & a0, const ::org::apache::lucene::store::IOContext$Context & a1) const
        {
          env->callVoidMethod(this$, mids$[mid_setRateLimiter_6afce4a8], a0.this$, a1.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {
        static PyObject *t_RateLimitedDirectoryWrapper_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_RateLimitedDirectoryWrapper_instance_(PyTypeObject *type, PyObject *arg);
        static int t_RateLimitedDirectoryWrapper_init_(t_RateLimitedDirectoryWrapper *self, PyObject *args, PyObject *kwds);
        static PyObject *t_RateLimitedDirectoryWrapper_copy(t_RateLimitedDirectoryWrapper *self, PyObject *args);
        static PyObject *t_RateLimitedDirectoryWrapper_createOutput(t_RateLimitedDirectoryWrapper *self, PyObject *args);
        static PyObject *t_RateLimitedDirectoryWrapper_getMaxWriteMBPerSec(t_RateLimitedDirectoryWrapper *self, PyObject *arg);
        static PyObject *t_RateLimitedDirectoryWrapper_setMaxWriteMBPerSec(t_RateLimitedDirectoryWrapper *self, PyObject *args);
        static PyObject *t_RateLimitedDirectoryWrapper_setRateLimiter(t_RateLimitedDirectoryWrapper *self, PyObject *args);

        static PyMethodDef t_RateLimitedDirectoryWrapper__methods_[] = {
          DECLARE_METHOD(t_RateLimitedDirectoryWrapper, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_RateLimitedDirectoryWrapper, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_RateLimitedDirectoryWrapper, copy, METH_VARARGS),
          DECLARE_METHOD(t_RateLimitedDirectoryWrapper, createOutput, METH_VARARGS),
          DECLARE_METHOD(t_RateLimitedDirectoryWrapper, getMaxWriteMBPerSec, METH_O),
          DECLARE_METHOD(t_RateLimitedDirectoryWrapper, setMaxWriteMBPerSec, METH_VARARGS),
          DECLARE_METHOD(t_RateLimitedDirectoryWrapper, setRateLimiter, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(RateLimitedDirectoryWrapper, t_RateLimitedDirectoryWrapper, ::org::apache::lucene::store::FilterDirectory, RateLimitedDirectoryWrapper, t_RateLimitedDirectoryWrapper_init_, 0, 0, 0, 0, 0);

        void t_RateLimitedDirectoryWrapper::install(PyObject *module)
        {
          installType(&PY_TYPE(RateLimitedDirectoryWrapper), module, "RateLimitedDirectoryWrapper", 0);
        }

        void t_RateLimitedDirectoryWrapper::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(RateLimitedDirectoryWrapper).tp_dict, "class_", make_descriptor(RateLimitedDirectoryWrapper::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(RateLimitedDirectoryWrapper).tp_dict, "wrapfn_", make_descriptor(t_RateLimitedDirectoryWrapper::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(RateLimitedDirectoryWrapper).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_RateLimitedDirectoryWrapper_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, RateLimitedDirectoryWrapper::initializeClass, 1)))
            return NULL;
          return t_RateLimitedDirectoryWrapper::wrap_Object(RateLimitedDirectoryWrapper(((t_RateLimitedDirectoryWrapper *) arg)->object.this$));
        }
        static PyObject *t_RateLimitedDirectoryWrapper_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, RateLimitedDirectoryWrapper::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_RateLimitedDirectoryWrapper_init_(t_RateLimitedDirectoryWrapper *self, PyObject *args, PyObject *kwds)
        {
          ::org::apache::lucene::store::Directory a0((jobject) NULL);
          RateLimitedDirectoryWrapper object((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::store::Directory::initializeClass, &a0))
          {
            INT_CALL(object = RateLimitedDirectoryWrapper(a0));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_RateLimitedDirectoryWrapper_copy(t_RateLimitedDirectoryWrapper *self, PyObject *args)
        {
          ::org::apache::lucene::store::Directory a0((jobject) NULL);
          ::java::lang::String a1((jobject) NULL);
          ::java::lang::String a2((jobject) NULL);
          ::org::apache::lucene::store::IOContext a3((jobject) NULL);

          if (!parseArgs(args, "kssk", ::org::apache::lucene::store::Directory::initializeClass, ::org::apache::lucene::store::IOContext::initializeClass, &a0, &a1, &a2, &a3))
          {
            OBJ_CALL(self->object.copy(a0, a1, a2, a3));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(RateLimitedDirectoryWrapper), (PyObject *) self, "copy", args, 2);
        }

        static PyObject *t_RateLimitedDirectoryWrapper_createOutput(t_RateLimitedDirectoryWrapper *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::store::IOContext a1((jobject) NULL);
          ::org::apache::lucene::store::IndexOutput result((jobject) NULL);

          if (!parseArgs(args, "sk", ::org::apache::lucene::store::IOContext::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = self->object.createOutput(a0, a1));
            return ::org::apache::lucene::store::t_IndexOutput::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(RateLimitedDirectoryWrapper), (PyObject *) self, "createOutput", args, 2);
        }

        static PyObject *t_RateLimitedDirectoryWrapper_getMaxWriteMBPerSec(t_RateLimitedDirectoryWrapper *self, PyObject *arg)
        {
          ::org::apache::lucene::store::IOContext$Context a0((jobject) NULL);
          PyTypeObject **p0;
          ::java::lang::Double result((jobject) NULL);

          if (!parseArg(arg, "K", ::org::apache::lucene::store::IOContext$Context::initializeClass, &a0, &p0, ::org::apache::lucene::store::t_IOContext$Context::parameters_))
          {
            OBJ_CALL(result = self->object.getMaxWriteMBPerSec(a0));
            return ::java::lang::t_Double::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "getMaxWriteMBPerSec", arg);
          return NULL;
        }

        static PyObject *t_RateLimitedDirectoryWrapper_setMaxWriteMBPerSec(t_RateLimitedDirectoryWrapper *self, PyObject *args)
        {
          ::java::lang::Double a0((jobject) NULL);
          ::org::apache::lucene::store::IOContext$Context a1((jobject) NULL);
          PyTypeObject **p1;

          if (!parseArgs(args, "OK", &::java::lang::PY_TYPE(Double), ::org::apache::lucene::store::IOContext$Context::initializeClass, &a0, &a1, &p1, ::org::apache::lucene::store::t_IOContext$Context::parameters_))
          {
            OBJ_CALL(self->object.setMaxWriteMBPerSec(a0, a1));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setMaxWriteMBPerSec", args);
          return NULL;
        }

        static PyObject *t_RateLimitedDirectoryWrapper_setRateLimiter(t_RateLimitedDirectoryWrapper *self, PyObject *args)
        {
          ::org::apache::lucene::store::RateLimiter a0((jobject) NULL);
          ::org::apache::lucene::store::IOContext$Context a1((jobject) NULL);
          PyTypeObject **p1;

          if (!parseArgs(args, "kK", ::org::apache::lucene::store::RateLimiter::initializeClass, ::org::apache::lucene::store::IOContext$Context::initializeClass, &a0, &a1, &p1, ::org::apache::lucene::store::t_IOContext$Context::parameters_))
          {
            OBJ_CALL(self->object.setRateLimiter(a0, a1));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setRateLimiter", args);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/lucene40/Lucene40PostingsFormat.h"
#include "org/apache/lucene/index/SegmentReadState.h"
#include "org/apache/lucene/codecs/FieldsConsumer.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "org/apache/lucene/index/SegmentWriteState.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/codecs/FieldsProducer.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace lucene40 {

          ::java::lang::Class *Lucene40PostingsFormat::class$ = NULL;
          jmethodID *Lucene40PostingsFormat::mids$ = NULL;
          bool Lucene40PostingsFormat::live$ = false;

          jclass Lucene40PostingsFormat::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/lucene40/Lucene40PostingsFormat");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_fieldsConsumer_a15793c6] = env->getMethodID(cls, "fieldsConsumer", "(Lorg/apache/lucene/index/SegmentWriteState;)Lorg/apache/lucene/codecs/FieldsConsumer;");
              mids$[mid_fieldsProducer_c86c62bc] = env->getMethodID(cls, "fieldsProducer", "(Lorg/apache/lucene/index/SegmentReadState;)Lorg/apache/lucene/codecs/FieldsProducer;");
              mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          Lucene40PostingsFormat::Lucene40PostingsFormat() : ::org::apache::lucene::codecs::PostingsFormat(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          ::org::apache::lucene::codecs::FieldsConsumer Lucene40PostingsFormat::fieldsConsumer(const ::org::apache::lucene::index::SegmentWriteState & a0) const
          {
            return ::org::apache::lucene::codecs::FieldsConsumer(env->callObjectMethod(this$, mids$[mid_fieldsConsumer_a15793c6], a0.this$));
          }

          ::org::apache::lucene::codecs::FieldsProducer Lucene40PostingsFormat::fieldsProducer(const ::org::apache::lucene::index::SegmentReadState & a0) const
          {
            return ::org::apache::lucene::codecs::FieldsProducer(env->callObjectMethod(this$, mids$[mid_fieldsProducer_c86c62bc], a0.this$));
          }

          ::java::lang::String Lucene40PostingsFormat::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace lucene40 {
          static PyObject *t_Lucene40PostingsFormat_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Lucene40PostingsFormat_instance_(PyTypeObject *type, PyObject *arg);
          static int t_Lucene40PostingsFormat_init_(t_Lucene40PostingsFormat *self, PyObject *args, PyObject *kwds);
          static PyObject *t_Lucene40PostingsFormat_fieldsConsumer(t_Lucene40PostingsFormat *self, PyObject *args);
          static PyObject *t_Lucene40PostingsFormat_fieldsProducer(t_Lucene40PostingsFormat *self, PyObject *args);
          static PyObject *t_Lucene40PostingsFormat_toString(t_Lucene40PostingsFormat *self, PyObject *args);

          static PyMethodDef t_Lucene40PostingsFormat__methods_[] = {
            DECLARE_METHOD(t_Lucene40PostingsFormat, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lucene40PostingsFormat, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lucene40PostingsFormat, fieldsConsumer, METH_VARARGS),
            DECLARE_METHOD(t_Lucene40PostingsFormat, fieldsProducer, METH_VARARGS),
            DECLARE_METHOD(t_Lucene40PostingsFormat, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(Lucene40PostingsFormat, t_Lucene40PostingsFormat, ::org::apache::lucene::codecs::PostingsFormat, Lucene40PostingsFormat, t_Lucene40PostingsFormat_init_, 0, 0, 0, 0, 0);

          void t_Lucene40PostingsFormat::install(PyObject *module)
          {
            installType(&PY_TYPE(Lucene40PostingsFormat), module, "Lucene40PostingsFormat", 0);
          }

          void t_Lucene40PostingsFormat::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(Lucene40PostingsFormat).tp_dict, "class_", make_descriptor(Lucene40PostingsFormat::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(Lucene40PostingsFormat).tp_dict, "wrapfn_", make_descriptor(t_Lucene40PostingsFormat::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(Lucene40PostingsFormat).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_Lucene40PostingsFormat_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, Lucene40PostingsFormat::initializeClass, 1)))
              return NULL;
            return t_Lucene40PostingsFormat::wrap_Object(Lucene40PostingsFormat(((t_Lucene40PostingsFormat *) arg)->object.this$));
          }
          static PyObject *t_Lucene40PostingsFormat_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, Lucene40PostingsFormat::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_Lucene40PostingsFormat_init_(t_Lucene40PostingsFormat *self, PyObject *args, PyObject *kwds)
          {
            Lucene40PostingsFormat object((jobject) NULL);

            INT_CALL(object = Lucene40PostingsFormat());
            self->object = object;

            return 0;
          }

          static PyObject *t_Lucene40PostingsFormat_fieldsConsumer(t_Lucene40PostingsFormat *self, PyObject *args)
          {
            ::org::apache::lucene::index::SegmentWriteState a0((jobject) NULL);
            ::org::apache::lucene::codecs::FieldsConsumer result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::index::SegmentWriteState::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.fieldsConsumer(a0));
              return ::org::apache::lucene::codecs::t_FieldsConsumer::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(Lucene40PostingsFormat), (PyObject *) self, "fieldsConsumer", args, 2);
          }

          static PyObject *t_Lucene40PostingsFormat_fieldsProducer(t_Lucene40PostingsFormat *self, PyObject *args)
          {
            ::org::apache::lucene::index::SegmentReadState a0((jobject) NULL);
            ::org::apache::lucene::codecs::FieldsProducer result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::index::SegmentReadState::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.fieldsProducer(a0));
              return ::org::apache::lucene::codecs::t_FieldsProducer::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(Lucene40PostingsFormat), (PyObject *) self, "fieldsProducer", args, 2);
          }

          static PyObject *t_Lucene40PostingsFormat_toString(t_Lucene40PostingsFormat *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(&PY_TYPE(Lucene40PostingsFormat), (PyObject *) self, "toString", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/TimSorter.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *TimSorter::class$ = NULL;
        jmethodID *TimSorter::mids$ = NULL;
        bool TimSorter::live$ = false;

        jclass TimSorter::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/TimSorter");

            mids$ = new jmethodID[max_mid];
            mids$[mid_sort_d8d154a6] = env->getMethodID(cls, "sort", "(II)V");
            mids$[mid_save_d8d154a6] = env->getMethodID(cls, "save", "(II)V");
            mids$[mid_copy_d8d154a6] = env->getMethodID(cls, "copy", "(II)V");
            mids$[mid_compareSaved_d8d154b9] = env->getMethodID(cls, "compareSaved", "(II)I");
            mids$[mid_restore_d8d154a6] = env->getMethodID(cls, "restore", "(II)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        void TimSorter::sort(jint a0, jint a1) const
        {
          env->callVoidMethod(this$, mids$[mid_sort_d8d154a6], a0, a1);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_TimSorter_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_TimSorter_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_TimSorter_sort(t_TimSorter *self, PyObject *args);

        static PyMethodDef t_TimSorter__methods_[] = {
          DECLARE_METHOD(t_TimSorter, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_TimSorter, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_TimSorter, sort, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(TimSorter, t_TimSorter, ::org::apache::lucene::util::Sorter, TimSorter, abstract_init, 0, 0, 0, 0, 0);

        void t_TimSorter::install(PyObject *module)
        {
          installType(&PY_TYPE(TimSorter), module, "TimSorter", 0);
        }

        void t_TimSorter::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(TimSorter).tp_dict, "class_", make_descriptor(TimSorter::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(TimSorter).tp_dict, "wrapfn_", make_descriptor(t_TimSorter::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(TimSorter).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_TimSorter_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, TimSorter::initializeClass, 1)))
            return NULL;
          return t_TimSorter::wrap_Object(TimSorter(((t_TimSorter *) arg)->object.this$));
        }
        static PyObject *t_TimSorter_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, TimSorter::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_TimSorter_sort(t_TimSorter *self, PyObject *args)
        {
          jint a0;
          jint a1;

          if (!parseArgs(args, "II", &a0, &a1))
          {
            OBJ_CALL(self->object.sort(a0, a1));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(TimSorter), (PyObject *) self, "sort", args, 2);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/lv/LatvianStemFilterFactory.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/String.h"
#include "java/util/Map.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace lv {

          ::java::lang::Class *LatvianStemFilterFactory::class$ = NULL;
          jmethodID *LatvianStemFilterFactory::mids$ = NULL;
          bool LatvianStemFilterFactory::live$ = false;

          jclass LatvianStemFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/lv/LatvianStemFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4c9e2b1c] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_a65cd6ab] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/TokenStream;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          LatvianStemFilterFactory::LatvianStemFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_4c9e2b1c, a0.this$)) {}

          ::org::apache::lucene::analysis::TokenStream LatvianStemFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::TokenStream(env->callObjectMethod(this$, mids$[mid_create_a65cd6ab], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace lv {
          static PyObject *t_LatvianStemFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_LatvianStemFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_LatvianStemFilterFactory_init_(t_LatvianStemFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_LatvianStemFilterFactory_create(t_LatvianStemFilterFactory *self, PyObject *args);

          static PyMethodDef t_LatvianStemFilterFactory__methods_[] = {
            DECLARE_METHOD(t_LatvianStemFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_LatvianStemFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_LatvianStemFilterFactory, create, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(LatvianStemFilterFactory, t_LatvianStemFilterFactory, ::org::apache::lucene::analysis::util::TokenFilterFactory, LatvianStemFilterFactory, t_LatvianStemFilterFactory_init_, 0, 0, 0, 0, 0);

          void t_LatvianStemFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(LatvianStemFilterFactory), module, "LatvianStemFilterFactory", 0);
          }

          void t_LatvianStemFilterFactory::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(LatvianStemFilterFactory).tp_dict, "class_", make_descriptor(LatvianStemFilterFactory::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(LatvianStemFilterFactory).tp_dict, "wrapfn_", make_descriptor(t_LatvianStemFilterFactory::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(LatvianStemFilterFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_LatvianStemFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, LatvianStemFilterFactory::initializeClass, 1)))
              return NULL;
            return t_LatvianStemFilterFactory::wrap_Object(LatvianStemFilterFactory(((t_LatvianStemFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_LatvianStemFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, LatvianStemFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_LatvianStemFilterFactory_init_(t_LatvianStemFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            LatvianStemFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = LatvianStemFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_LatvianStemFilterFactory_create(t_LatvianStemFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::TokenStream result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::t_TokenStream::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(LatvianStemFilterFactory), (PyObject *) self, "create", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/classic/ParseException.h"
#include "java/lang/String.h"
#include "org/apache/lucene/queryparser/classic/Token.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace classic {

          ::java::lang::Class *ParseException::class$ = NULL;
          jmethodID *ParseException::mids$ = NULL;
          jfieldID *ParseException::fids$ = NULL;
          bool ParseException::live$ = false;

          jclass ParseException::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/classic/ParseException");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_init$_5fdc3f48] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;)V");
              mids$[mid_init$_8f0beb0f] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/queryparser/classic/Token;[[I[Ljava/lang/String;)V");

              fids$ = new jfieldID[max_fid];
              fids$[fid_currentToken] = env->getFieldID(cls, "currentToken", "Lorg/apache/lucene/queryparser/classic/Token;");
              fids$[fid_expectedTokenSequences] = env->getFieldID(cls, "expectedTokenSequences", "[[I");
              fids$[fid_tokenImage] = env->getFieldID(cls, "tokenImage", "[Ljava/lang/String;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ParseException::ParseException() : ::java::lang::Exception(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          ParseException::ParseException(const ::java::lang::String & a0) : ::java::lang::Exception(env->newObject(initializeClass, &mids$, mid_init$_5fdc3f48, a0.this$)) {}

          ParseException::ParseException(const ::org::apache::lucene::queryparser::classic::Token & a0, const JArray< JArray< jint > > & a1, const JArray< ::java::lang::String > & a2) : ::java::lang::Exception(env->newObject(initializeClass, &mids$, mid_init$_8f0beb0f, a0.this$, a1.this$, a2.this$)) {}

          ::org::apache::lucene::queryparser::classic::Token ParseException::_get_currentToken() const
          {
            return ::org::apache::lucene::queryparser::classic::Token(env->getObjectField(this$, fids$[fid_currentToken]));
          }

          void ParseException::_set_currentToken(const ::org::apache::lucene::queryparser::classic::Token & a0) const
          {
            env->setObjectField(this$, fids$[fid_currentToken], a0.this$);
          }

          JArray< JArray< jint > > ParseException::_get_expectedTokenSequences() const
          {
            return JArray< JArray< jint > >(env->getObjectField(this$, fids$[fid_expectedTokenSequences]));
          }

          void ParseException::_set_expectedTokenSequences(const JArray< JArray< jint > > & a0) const
          {
            env->setObjectField(this$, fids$[fid_expectedTokenSequences], a0.this$);
          }

          JArray< ::java::lang::String > ParseException::_get_tokenImage() const
          {
            return JArray< ::java::lang::String >(env->getObjectField(this$, fids$[fid_tokenImage]));
          }

          void ParseException::_set_tokenImage(const JArray< ::java::lang::String > & a0) const
          {
            env->setObjectField(this$, fids$[fid_tokenImage], a0.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace classic {
          static PyObject *t_ParseException_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_ParseException_instance_(PyTypeObject *type, PyObject *arg);
          static int t_ParseException_init_(t_ParseException *self, PyObject *args, PyObject *kwds);
          static PyObject *t_ParseException_get__currentToken(t_ParseException *self, void *data);
          static int t_ParseException_set__currentToken(t_ParseException *self, PyObject *arg, void *data);
          static PyObject *t_ParseException_get__expectedTokenSequences(t_ParseException *self, void *data);
          static int t_ParseException_set__expectedTokenSequences(t_ParseException *self, PyObject *arg, void *data);
          static PyObject *t_ParseException_get__tokenImage(t_ParseException *self, void *data);
          static int t_ParseException_set__tokenImage(t_ParseException *self, PyObject *arg, void *data);

          static PyGetSetDef t_ParseException__fields_[] = {
            DECLARE_GETSET_FIELD(t_ParseException, currentToken),
            DECLARE_GETSET_FIELD(t_ParseException, expectedTokenSequences),
            DECLARE_GETSET_FIELD(t_ParseException, tokenImage),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_ParseException__methods_[] = {
            DECLARE_METHOD(t_ParseException, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ParseException, instance_, METH_O | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(ParseException, t_ParseException, ::java::lang::Exception, ParseException, t_ParseException_init_, 0, 0, t_ParseException__fields_, 0, 0);

          void t_ParseException::install(PyObject *module)
          {
            installType(&PY_TYPE(ParseException), module, "ParseException", 0);
          }

          void t_ParseException::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(ParseException).tp_dict, "class_", make_descriptor(ParseException::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(ParseException).tp_dict, "wrapfn_", make_descriptor(t_ParseException::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(ParseException).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_ParseException_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, ParseException::initializeClass, 1)))
              return NULL;
            return t_ParseException::wrap_Object(ParseException(((t_ParseException *) arg)->object.this$));
          }
          static PyObject *t_ParseException_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, ParseException::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_ParseException_init_(t_ParseException *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 0:
              {
                ParseException object((jobject) NULL);

                INT_CALL(object = ParseException());
                self->object = object;
                break;
              }
              goto err;
             case 1:
              {
                ::java::lang::String a0((jobject) NULL);
                ParseException object((jobject) NULL);

                if (!parseArgs(args, "s", &a0))
                {
                  INT_CALL(object = ParseException(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 3:
              {
                ::org::apache::lucene::queryparser::classic::Token a0((jobject) NULL);
                JArray< JArray< jint > > a1((jobject) NULL);
                JArray< ::java::lang::String > a2((jobject) NULL);
                ParseException object((jobject) NULL);

                if (!parseArgs(args, "k[[I[s", ::org::apache::lucene::queryparser::classic::Token::initializeClass, &a0, &a1, &a2))
                {
                  INT_CALL(object = ParseException(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_ParseException_get__currentToken(t_ParseException *self, void *data)
          {
            ::org::apache::lucene::queryparser::classic::Token value((jobject) NULL);
            OBJ_CALL(value = self->object._get_currentToken());
            return ::org::apache::lucene::queryparser::classic::t_Token::wrap_Object(value);
          }
          static int t_ParseException_set__currentToken(t_ParseException *self, PyObject *arg, void *data)
          {
            ::org::apache::lucene::queryparser::classic::Token value((jobject) NULL);
            if (!parseArg(arg, "k", ::org::apache::lucene::queryparser::classic::Token::initializeClass, &value))
            {
              INT_CALL(self->object._set_currentToken(value));
              return 0;
            }
            PyErr_SetArgsError((PyObject *) self, "currentToken", arg);
            return -1;
          }

          static PyObject *t_ParseException_get__expectedTokenSequences(t_ParseException *self, void *data)
          {
            JArray< JArray< jint > > value((jobject) NULL);
            OBJ_CALL(value = self->object._get_expectedTokenSequences());
            return JArray<jobject>(value.this$).wrap(NULL);
          }
          static int t_ParseException_set__expectedTokenSequences(t_ParseException *self, PyObject *arg, void *data)
          {
            JArray< JArray< jint > > value((jobject) NULL);
            if (!parseArg(arg, "[[I", &value))
            {
              INT_CALL(self->object._set_expectedTokenSequences(value));
              return 0;
            }
            PyErr_SetArgsError((PyObject *) self, "expectedTokenSequences", arg);
            return -1;
          }

          static PyObject *t_ParseException_get__tokenImage(t_ParseException *self, void *data)
          {
            JArray< ::java::lang::String > value((jobject) NULL);
            OBJ_CALL(value = self->object._get_tokenImage());
            return JArray<jstring>(value.this$).wrap();
          }
          static int t_ParseException_set__tokenImage(t_ParseException *self, PyObject *arg, void *data)
          {
            JArray< ::java::lang::String > value((jobject) NULL);
            if (!parseArg(arg, "[s", &value))
            {
              INT_CALL(self->object._set_tokenImage(value));
              return 0;
            }
            PyErr_SetArgsError((PyObject *) self, "tokenImage", arg);
            return -1;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/xml/builders/SpanOrBuilder.h"
#include "org/apache/lucene/queryparser/xml/builders/SpanQueryBuilder.h"
#include "org/apache/lucene/search/spans/SpanQuery.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace xml {
          namespace builders {

            ::java::lang::Class *SpanOrBuilder::class$ = NULL;
            jmethodID *SpanOrBuilder::mids$ = NULL;
            bool SpanOrBuilder::live$ = false;

            jclass SpanOrBuilder::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/xml/builders/SpanOrBuilder");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_d9ca31a9] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/queryparser/xml/builders/SpanQueryBuilder;)V");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            SpanOrBuilder::SpanOrBuilder(const ::org::apache::lucene::queryparser::xml::builders::SpanQueryBuilder & a0) : ::org::apache::lucene::queryparser::xml::builders::SpanBuilderBase(env->newObject(initializeClass, &mids$, mid_init$_d9ca31a9, a0.this$)) {}
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace xml {
          namespace builders {
            static PyObject *t_SpanOrBuilder_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_SpanOrBuilder_instance_(PyTypeObject *type, PyObject *arg);
            static int t_SpanOrBuilder_init_(t_SpanOrBuilder *self, PyObject *args, PyObject *kwds);

            static PyMethodDef t_SpanOrBuilder__methods_[] = {
              DECLARE_METHOD(t_SpanOrBuilder, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_SpanOrBuilder, instance_, METH_O | METH_CLASS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(SpanOrBuilder, t_SpanOrBuilder, ::org::apache::lucene::queryparser::xml::builders::SpanBuilderBase, SpanOrBuilder, t_SpanOrBuilder_init_, 0, 0, 0, 0, 0);

            void t_SpanOrBuilder::install(PyObject *module)
            {
              installType(&PY_TYPE(SpanOrBuilder), module, "SpanOrBuilder", 0);
            }

            void t_SpanOrBuilder::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(SpanOrBuilder).tp_dict, "class_", make_descriptor(SpanOrBuilder::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(SpanOrBuilder).tp_dict, "wrapfn_", make_descriptor(t_SpanOrBuilder::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(SpanOrBuilder).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_SpanOrBuilder_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, SpanOrBuilder::initializeClass, 1)))
                return NULL;
              return t_SpanOrBuilder::wrap_Object(SpanOrBuilder(((t_SpanOrBuilder *) arg)->object.this$));
            }
            static PyObject *t_SpanOrBuilder_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, SpanOrBuilder::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_SpanOrBuilder_init_(t_SpanOrBuilder *self, PyObject *args, PyObject *kwds)
            {
              ::org::apache::lucene::queryparser::xml::builders::SpanQueryBuilder a0((jobject) NULL);
              SpanOrBuilder object((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::queryparser::xml::builders::SpanQueryBuilder::initializeClass, &a0))
              {
                INT_CALL(object = SpanOrBuilder(a0));
                self->object = object;
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/fst/Outputs.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/store/DataInput.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/store/DataOutput.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace fst {

          ::java::lang::Class *Outputs::class$ = NULL;
          jmethodID *Outputs::mids$ = NULL;
          bool Outputs::live$ = false;

          jclass Outputs::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/util/fst/Outputs");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_add_537d5bdf] = env->getMethodID(cls, "add", "(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;");
              mids$[mid_common_537d5bdf] = env->getMethodID(cls, "common", "(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;");
              mids$[mid_getNoOutput_846352c3] = env->getMethodID(cls, "getNoOutput", "()Ljava/lang/Object;");
              mids$[mid_merge_537d5bdf] = env->getMethodID(cls, "merge", "(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;");
              mids$[mid_outputToString_c9db4eed] = env->getMethodID(cls, "outputToString", "(Ljava/lang/Object;)Ljava/lang/String;");
              mids$[mid_ramBytesUsed_290588f2] = env->getMethodID(cls, "ramBytesUsed", "(Ljava/lang/Object;)J");
              mids$[mid_read_7d5f44e2] = env->getMethodID(cls, "read", "(Lorg/apache/lucene/store/DataInput;)Ljava/lang/Object;");
              mids$[mid_readFinalOutput_7d5f44e2] = env->getMethodID(cls, "readFinalOutput", "(Lorg/apache/lucene/store/DataInput;)Ljava/lang/Object;");
              mids$[mid_skipFinalOutput_f5d6a551] = env->getMethodID(cls, "skipFinalOutput", "(Lorg/apache/lucene/store/DataInput;)V");
              mids$[mid_skipOutput_f5d6a551] = env->getMethodID(cls, "skipOutput", "(Lorg/apache/lucene/store/DataInput;)V");
              mids$[mid_subtract_537d5bdf] = env->getMethodID(cls, "subtract", "(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;");
              mids$[mid_write_208ac1fb] = env->getMethodID(cls, "write", "(Ljava/lang/Object;Lorg/apache/lucene/store/DataOutput;)V");
              mids$[mid_writeFinalOutput_208ac1fb] = env->getMethodID(cls, "writeFinalOutput", "(Ljava/lang/Object;Lorg/apache/lucene/store/DataOutput;)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          Outputs::Outputs() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          ::java::lang::Object Outputs::add(const ::java::lang::Object & a0, const ::java::lang::Object & a1) const
          {
            return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_add_537d5bdf], a0.this$, a1.this$));
          }

          ::java::lang::Object Outputs::common(const ::java::lang::Object & a0, const ::java::lang::Object & a1) const
          {
            return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_common_537d5bdf], a0.this$, a1.this$));
          }

          ::java::lang::Object Outputs::getNoOutput() const
          {
            return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_getNoOutput_846352c3]));
          }

          ::java::lang::Object Outputs::merge(const ::java::lang::Object & a0, const ::java::lang::Object & a1) const
          {
            return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_merge_537d5bdf], a0.this$, a1.this$));
          }

          ::java::lang::String Outputs::outputToString(const ::java::lang::Object & a0) const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_outputToString_c9db4eed], a0.this$));
          }

          jlong Outputs::ramBytesUsed(const ::java::lang::Object & a0) const
          {
            return env->callLongMethod(this$, mids$[mid_ramBytesUsed_290588f2], a0.this$);
          }

          ::java::lang::Object Outputs::read(const ::org::apache::lucene::store::DataInput & a0) const
          {
            return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_read_7d5f44e2], a0.this$));
          }

          ::java::lang::Object Outputs::readFinalOutput(const ::org::apache::lucene::store::DataInput & a0) const
          {
            return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_readFinalOutput_7d5f44e2], a0.this$));
          }

          void Outputs::skipFinalOutput(const ::org::apache::lucene::store::DataInput & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_skipFinalOutput_f5d6a551], a0.this$);
          }

          void Outputs::skipOutput(const ::org::apache::lucene::store::DataInput & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_skipOutput_f5d6a551], a0.this$);
          }

          ::java::lang::Object Outputs::subtract(const ::java::lang::Object & a0, const ::java::lang::Object & a1) const
          {
            return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_subtract_537d5bdf], a0.this$, a1.this$));
          }

          void Outputs::write(const ::java::lang::Object & a0, const ::org::apache::lucene::store::DataOutput & a1) const
          {
            env->callVoidMethod(this$, mids$[mid_write_208ac1fb], a0.this$, a1.this$);
          }

          void Outputs::writeFinalOutput(const ::java::lang::Object & a0, const ::org::apache::lucene::store::DataOutput & a1) const
          {
            env->callVoidMethod(this$, mids$[mid_writeFinalOutput_208ac1fb], a0.this$, a1.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace fst {
          static PyObject *t_Outputs_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Outputs_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Outputs_of_(t_Outputs *self, PyObject *args);
          static int t_Outputs_init_(t_Outputs *self, PyObject *args, PyObject *kwds);
          static PyObject *t_Outputs_add(t_Outputs *self, PyObject *args);
          static PyObject *t_Outputs_common(t_Outputs *self, PyObject *args);
          static PyObject *t_Outputs_getNoOutput(t_Outputs *self);
          static PyObject *t_Outputs_merge(t_Outputs *self, PyObject *args);
          static PyObject *t_Outputs_outputToString(t_Outputs *self, PyObject *arg);
          static PyObject *t_Outputs_ramBytesUsed(t_Outputs *self, PyObject *arg);
          static PyObject *t_Outputs_read(t_Outputs *self, PyObject *arg);
          static PyObject *t_Outputs_readFinalOutput(t_Outputs *self, PyObject *arg);
          static PyObject *t_Outputs_skipFinalOutput(t_Outputs *self, PyObject *arg);
          static PyObject *t_Outputs_skipOutput(t_Outputs *self, PyObject *arg);
          static PyObject *t_Outputs_subtract(t_Outputs *self, PyObject *args);
          static PyObject *t_Outputs_write(t_Outputs *self, PyObject *args);
          static PyObject *t_Outputs_writeFinalOutput(t_Outputs *self, PyObject *args);
          static PyObject *t_Outputs_get__noOutput(t_Outputs *self, void *data);
          static PyObject *t_Outputs_get__parameters_(t_Outputs *self, void *data);
          static PyGetSetDef t_Outputs__fields_[] = {
            DECLARE_GET_FIELD(t_Outputs, noOutput),
            DECLARE_GET_FIELD(t_Outputs, parameters_),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_Outputs__methods_[] = {
            DECLARE_METHOD(t_Outputs, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Outputs, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Outputs, of_, METH_VARARGS),
            DECLARE_METHOD(t_Outputs, add, METH_VARARGS),
            DECLARE_METHOD(t_Outputs, common, METH_VARARGS),
            DECLARE_METHOD(t_Outputs, getNoOutput, METH_NOARGS),
            DECLARE_METHOD(t_Outputs, merge, METH_VARARGS),
            DECLARE_METHOD(t_Outputs, outputToString, METH_O),
            DECLARE_METHOD(t_Outputs, ramBytesUsed, METH_O),
            DECLARE_METHOD(t_Outputs, read, METH_O),
            DECLARE_METHOD(t_Outputs, readFinalOutput, METH_O),
            DECLARE_METHOD(t_Outputs, skipFinalOutput, METH_O),
            DECLARE_METHOD(t_Outputs, skipOutput, METH_O),
            DECLARE_METHOD(t_Outputs, subtract, METH_VARARGS),
            DECLARE_METHOD(t_Outputs, write, METH_VARARGS),
            DECLARE_METHOD(t_Outputs, writeFinalOutput, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(Outputs, t_Outputs, ::java::lang::Object, Outputs, t_Outputs_init_, 0, 0, t_Outputs__fields_, 0, 0);
          PyObject *t_Outputs::wrap_Object(const Outputs& object, PyTypeObject *p0)
          {
            PyObject *obj = t_Outputs::wrap_Object(object);
            if (obj != NULL && obj != Py_None)
            {
              t_Outputs *self = (t_Outputs *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          PyObject *t_Outputs::wrap_jobject(const jobject& object, PyTypeObject *p0)
          {
            PyObject *obj = t_Outputs::wrap_jobject(object);
            if (obj != NULL && obj != Py_None)
            {
              t_Outputs *self = (t_Outputs *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          void t_Outputs::install(PyObject *module)
          {
            installType(&PY_TYPE(Outputs), module, "Outputs", 0);
          }

          void t_Outputs::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(Outputs).tp_dict, "class_", make_descriptor(Outputs::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(Outputs).tp_dict, "wrapfn_", make_descriptor(t_Outputs::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(Outputs).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_Outputs_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, Outputs::initializeClass, 1)))
              return NULL;
            return t_Outputs::wrap_Object(Outputs(((t_Outputs *) arg)->object.this$));
          }
          static PyObject *t_Outputs_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, Outputs::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_Outputs_of_(t_Outputs *self, PyObject *args)
          {
            if (!parseArg(args, "T", 1, &(self->parameters)))
              Py_RETURN_SELF;
            return PyErr_SetArgsError((PyObject *) self, "of_", args);
          }

          static int t_Outputs_init_(t_Outputs *self, PyObject *args, PyObject *kwds)
          {
            Outputs object((jobject) NULL);

            INT_CALL(object = Outputs());
            self->object = object;

            return 0;
          }

          static PyObject *t_Outputs_add(t_Outputs *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            ::java::lang::Object a1((jobject) NULL);
            ::java::lang::Object result((jobject) NULL);

            if (!parseArgs(args, "OO", self->parameters[0], self->parameters[0], &a0, &a1))
            {
              OBJ_CALL(result = self->object.add(a0, a1));
              return self->parameters[0] != NULL ? wrapType(self->parameters[0], result.this$) : ::java::lang::t_Object::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "add", args);
            return NULL;
          }

          static PyObject *t_Outputs_common(t_Outputs *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            ::java::lang::Object a1((jobject) NULL);
            ::java::lang::Object result((jobject) NULL);

            if (!parseArgs(args, "OO", self->parameters[0], self->parameters[0], &a0, &a1))
            {
              OBJ_CALL(result = self->object.common(a0, a1));
              return self->parameters[0] != NULL ? wrapType(self->parameters[0], result.this$) : ::java::lang::t_Object::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "common", args);
            return NULL;
          }

          static PyObject *t_Outputs_getNoOutput(t_Outputs *self)
          {
            ::java::lang::Object result((jobject) NULL);
            OBJ_CALL(result = self->object.getNoOutput());
            return self->parameters[0] != NULL ? wrapType(self->parameters[0], result.this$) : ::java::lang::t_Object::wrap_Object(result);
          }

          static PyObject *t_Outputs_merge(t_Outputs *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            ::java::lang::Object a1((jobject) NULL);
            ::java::lang::Object result((jobject) NULL);

            if (!parseArgs(args, "OO", self->parameters[0], self->parameters[0], &a0, &a1))
            {
              OBJ_CALL(result = self->object.merge(a0, a1));
              return self->parameters[0] != NULL ? wrapType(self->parameters[0], result.this$) : ::java::lang::t_Object::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "merge", args);
            return NULL;
          }

          static PyObject *t_Outputs_outputToString(t_Outputs *self, PyObject *arg)
          {
            ::java::lang::Object a0((jobject) NULL);
            ::java::lang::String result((jobject) NULL);

            if (!parseArg(arg, "O", self->parameters[0], &a0))
            {
              OBJ_CALL(result = self->object.outputToString(a0));
              return j2p(result);
            }

            PyErr_SetArgsError((PyObject *) self, "outputToString", arg);
            return NULL;
          }

          static PyObject *t_Outputs_ramBytesUsed(t_Outputs *self, PyObject *arg)
          {
            ::java::lang::Object a0((jobject) NULL);
            jlong result;

            if (!parseArg(arg, "O", self->parameters[0], &a0))
            {
              OBJ_CALL(result = self->object.ramBytesUsed(a0));
              return PyLong_FromLongLong((PY_LONG_LONG) result);
            }

            PyErr_SetArgsError((PyObject *) self, "ramBytesUsed", arg);
            return NULL;
          }

          static PyObject *t_Outputs_read(t_Outputs *self, PyObject *arg)
          {
            ::org::apache::lucene::store::DataInput a0((jobject) NULL);
            ::java::lang::Object result((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::store::DataInput::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.read(a0));
              return self->parameters[0] != NULL ? wrapType(self->parameters[0], result.this$) : ::java::lang::t_Object::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "read", arg);
            return NULL;
          }

          static PyObject *t_Outputs_readFinalOutput(t_Outputs *self, PyObject *arg)
          {
            ::org::apache::lucene::store::DataInput a0((jobject) NULL);
            ::java::lang::Object result((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::store::DataInput::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.readFinalOutput(a0));
              return self->parameters[0] != NULL ? wrapType(self->parameters[0], result.this$) : ::java::lang::t_Object::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "readFinalOutput", arg);
            return NULL;
          }

          static PyObject *t_Outputs_skipFinalOutput(t_Outputs *self, PyObject *arg)
          {
            ::org::apache::lucene::store::DataInput a0((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::store::DataInput::initializeClass, &a0))
            {
              OBJ_CALL(self->object.skipFinalOutput(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "skipFinalOutput", arg);
            return NULL;
          }

          static PyObject *t_Outputs_skipOutput(t_Outputs *self, PyObject *arg)
          {
            ::org::apache::lucene::store::DataInput a0((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::store::DataInput::initializeClass, &a0))
            {
              OBJ_CALL(self->object.skipOutput(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "skipOutput", arg);
            return NULL;
          }

          static PyObject *t_Outputs_subtract(t_Outputs *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            ::java::lang::Object a1((jobject) NULL);
            ::java::lang::Object result((jobject) NULL);

            if (!parseArgs(args, "OO", self->parameters[0], self->parameters[0], &a0, &a1))
            {
              OBJ_CALL(result = self->object.subtract(a0, a1));
              return self->parameters[0] != NULL ? wrapType(self->parameters[0], result.this$) : ::java::lang::t_Object::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "subtract", args);
            return NULL;
          }

          static PyObject *t_Outputs_write(t_Outputs *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            ::org::apache::lucene::store::DataOutput a1((jobject) NULL);

            if (!parseArgs(args, "Ok", self->parameters[0], ::org::apache::lucene::store::DataOutput::initializeClass, &a0, &a1))
            {
              OBJ_CALL(self->object.write(a0, a1));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "write", args);
            return NULL;
          }

          static PyObject *t_Outputs_writeFinalOutput(t_Outputs *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            ::org::apache::lucene::store::DataOutput a1((jobject) NULL);

            if (!parseArgs(args, "Ok", self->parameters[0], ::org::apache::lucene::store::DataOutput::initializeClass, &a0, &a1))
            {
              OBJ_CALL(self->object.writeFinalOutput(a0, a1));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "writeFinalOutput", args);
            return NULL;
          }
          static PyObject *t_Outputs_get__parameters_(t_Outputs *self, void *data)
          {
            return typeParameters(self->parameters, sizeof(self->parameters));
          }

          static PyObject *t_Outputs_get__noOutput(t_Outputs *self, void *data)
          {
            ::java::lang::Object value((jobject) NULL);
            OBJ_CALL(value = self->object.getNoOutput());
            return ::java::lang::t_Object::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/util/MultiTermAwareComponent.h"
#include "org/apache/lucene/analysis/util/AbstractAnalysisFactory.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace util {

          ::java::lang::Class *MultiTermAwareComponent::class$ = NULL;
          jmethodID *MultiTermAwareComponent::mids$ = NULL;
          bool MultiTermAwareComponent::live$ = false;

          jclass MultiTermAwareComponent::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/util/MultiTermAwareComponent");

              mids$ = new jmethodID[max_mid];
              mids$[mid_getMultiTermComponent_0a3f1d72] = env->getMethodID(cls, "getMultiTermComponent", "()Lorg/apache/lucene/analysis/util/AbstractAnalysisFactory;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ::org::apache::lucene::analysis::util::AbstractAnalysisFactory MultiTermAwareComponent::getMultiTermComponent() const
          {
            return ::org::apache::lucene::analysis::util::AbstractAnalysisFactory(env->callObjectMethod(this$, mids$[mid_getMultiTermComponent_0a3f1d72]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace util {
          static PyObject *t_MultiTermAwareComponent_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_MultiTermAwareComponent_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_MultiTermAwareComponent_getMultiTermComponent(t_MultiTermAwareComponent *self);
          static PyObject *t_MultiTermAwareComponent_get__multiTermComponent(t_MultiTermAwareComponent *self, void *data);
          static PyGetSetDef t_MultiTermAwareComponent__fields_[] = {
            DECLARE_GET_FIELD(t_MultiTermAwareComponent, multiTermComponent),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_MultiTermAwareComponent__methods_[] = {
            DECLARE_METHOD(t_MultiTermAwareComponent, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_MultiTermAwareComponent, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_MultiTermAwareComponent, getMultiTermComponent, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(MultiTermAwareComponent, t_MultiTermAwareComponent, ::java::lang::Object, MultiTermAwareComponent, abstract_init, 0, 0, t_MultiTermAwareComponent__fields_, 0, 0);

          void t_MultiTermAwareComponent::install(PyObject *module)
          {
            installType(&PY_TYPE(MultiTermAwareComponent), module, "MultiTermAwareComponent", 0);
          }

          void t_MultiTermAwareComponent::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(MultiTermAwareComponent).tp_dict, "class_", make_descriptor(MultiTermAwareComponent::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(MultiTermAwareComponent).tp_dict, "wrapfn_", make_descriptor(t_MultiTermAwareComponent::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(MultiTermAwareComponent).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_MultiTermAwareComponent_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, MultiTermAwareComponent::initializeClass, 1)))
              return NULL;
            return t_MultiTermAwareComponent::wrap_Object(MultiTermAwareComponent(((t_MultiTermAwareComponent *) arg)->object.this$));
          }
          static PyObject *t_MultiTermAwareComponent_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, MultiTermAwareComponent::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_MultiTermAwareComponent_getMultiTermComponent(t_MultiTermAwareComponent *self)
          {
            ::org::apache::lucene::analysis::util::AbstractAnalysisFactory result((jobject) NULL);
            OBJ_CALL(result = self->object.getMultiTermComponent());
            return ::org::apache::lucene::analysis::util::t_AbstractAnalysisFactory::wrap_Object(result);
          }

          static PyObject *t_MultiTermAwareComponent_get__multiTermComponent(t_MultiTermAwareComponent *self, void *data)
          {
            ::org::apache::lucene::analysis::util::AbstractAnalysisFactory value((jobject) NULL);
            OBJ_CALL(value = self->object.getMultiTermComponent());
            return ::org::apache::lucene::analysis::util::t_AbstractAnalysisFactory::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/MultiTermsEnum.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "org/apache/lucene/util/Bits.h"
#include "org/apache/lucene/index/ReaderSlice.h"
#include "java/lang/Class.h"
#include "java/util/Comparator.h"
#include "org/apache/lucene/index/TermsEnum$SeekStatus.h"
#include "java/lang/String.h"
#include "org/apache/lucene/index/DocsEnum.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/index/DocsAndPositionsEnum.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *MultiTermsEnum::class$ = NULL;
        jmethodID *MultiTermsEnum::mids$ = NULL;
        bool MultiTermsEnum::live$ = false;

        jclass MultiTermsEnum::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/MultiTermsEnum");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_a8f03305] = env->getMethodID(cls, "<init>", "([Lorg/apache/lucene/index/ReaderSlice;)V");
            mids$[mid_docFreq_54c6a179] = env->getMethodID(cls, "docFreq", "()I");
            mids$[mid_docs_e6d4c3ef] = env->getMethodID(cls, "docs", "(Lorg/apache/lucene/util/Bits;Lorg/apache/lucene/index/DocsEnum;I)Lorg/apache/lucene/index/DocsEnum;");
            mids$[mid_docsAndPositions_b5d9c11b] = env->getMethodID(cls, "docsAndPositions", "(Lorg/apache/lucene/util/Bits;Lorg/apache/lucene/index/DocsAndPositionsEnum;I)Lorg/apache/lucene/index/DocsAndPositionsEnum;");
            mids$[mid_getComparator_5a7ff2fc] = env->getMethodID(cls, "getComparator", "()Ljava/util/Comparator;");
            mids$[mid_getMatchCount_54c6a179] = env->getMethodID(cls, "getMatchCount", "()I");
            mids$[mid_next_4ae19461] = env->getMethodID(cls, "next", "()Lorg/apache/lucene/util/BytesRef;");
            mids$[mid_ord_54c6a17a] = env->getMethodID(cls, "ord", "()J");
            mids$[mid_seekCeil_fa9d72c4] = env->getMethodID(cls, "seekCeil", "(Lorg/apache/lucene/util/BytesRef;)Lorg/apache/lucene/index/TermsEnum$SeekStatus;");
            mids$[mid_seekExact_7bc03dc8] = env->getMethodID(cls, "seekExact", "(Lorg/apache/lucene/util/BytesRef;)Z");
            mids$[mid_seekExact_0ee6df2f] = env->getMethodID(cls, "seekExact", "(J)V");
            mids$[mid_term_4ae19461] = env->getMethodID(cls, "term", "()Lorg/apache/lucene/util/BytesRef;");
            mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");
            mids$[mid_totalTermFreq_54c6a17a] = env->getMethodID(cls, "totalTermFreq", "()J");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        MultiTermsEnum::MultiTermsEnum(const JArray< ::org::apache::lucene::index::ReaderSlice > & a0) : ::org::apache::lucene::index::TermsEnum(env->newObject(initializeClass, &mids$, mid_init$_a8f03305, a0.this$)) {}

        jint MultiTermsEnum::docFreq() const
        {
          return env->callIntMethod(this$, mids$[mid_docFreq_54c6a179]);
        }

        ::org::apache::lucene::index::DocsEnum MultiTermsEnum::docs(const ::org::apache::lucene::util::Bits & a0, const ::org::apache::lucene::index::DocsEnum & a1, jint a2) const
        {
          return ::org::apache::lucene::index::DocsEnum(env->callObjectMethod(this$, mids$[mid_docs_e6d4c3ef], a0.this$, a1.this$, a2));
        }

        ::org::apache::lucene::index::DocsAndPositionsEnum MultiTermsEnum::docsAndPositions(const ::org::apache::lucene::util::Bits & a0, const ::org::apache::lucene::index::DocsAndPositionsEnum & a1, jint a2) const
        {
          return ::org::apache::lucene::index::DocsAndPositionsEnum(env->callObjectMethod(this$, mids$[mid_docsAndPositions_b5d9c11b], a0.this$, a1.this$, a2));
        }

        ::java::util::Comparator MultiTermsEnum::getComparator() const
        {
          return ::java::util::Comparator(env->callObjectMethod(this$, mids$[mid_getComparator_5a7ff2fc]));
        }

        jint MultiTermsEnum::getMatchCount() const
        {
          return env->callIntMethod(this$, mids$[mid_getMatchCount_54c6a179]);
        }

        ::org::apache::lucene::util::BytesRef MultiTermsEnum::next() const
        {
          return ::org::apache::lucene::util::BytesRef(env->callObjectMethod(this$, mids$[mid_next_4ae19461]));
        }

        jlong MultiTermsEnum::ord() const
        {
          return env->callLongMethod(this$, mids$[mid_ord_54c6a17a]);
        }

        ::org::apache::lucene::index::TermsEnum$SeekStatus MultiTermsEnum::seekCeil(const ::org::apache::lucene::util::BytesRef & a0) const
        {
          return ::org::apache::lucene::index::TermsEnum$SeekStatus(env->callObjectMethod(this$, mids$[mid_seekCeil_fa9d72c4], a0.this$));
        }

        jboolean MultiTermsEnum::seekExact(const ::org::apache::lucene::util::BytesRef & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_seekExact_7bc03dc8], a0.this$);
        }

        void MultiTermsEnum::seekExact(jlong a0) const
        {
          env->callVoidMethod(this$, mids$[mid_seekExact_0ee6df2f], a0);
        }

        ::org::apache::lucene::util::BytesRef MultiTermsEnum::term() const
        {
          return ::org::apache::lucene::util::BytesRef(env->callObjectMethod(this$, mids$[mid_term_4ae19461]));
        }

        ::java::lang::String MultiTermsEnum::toString() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
        }

        jlong MultiTermsEnum::totalTermFreq() const
        {
          return env->callLongMethod(this$, mids$[mid_totalTermFreq_54c6a17a]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_MultiTermsEnum_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_MultiTermsEnum_instance_(PyTypeObject *type, PyObject *arg);
        static int t_MultiTermsEnum_init_(t_MultiTermsEnum *self, PyObject *args, PyObject *kwds);
        static PyObject *t_MultiTermsEnum_docFreq(t_MultiTermsEnum *self, PyObject *args);
        static PyObject *t_MultiTermsEnum_docs(t_MultiTermsEnum *self, PyObject *args);
        static PyObject *t_MultiTermsEnum_docsAndPositions(t_MultiTermsEnum *self, PyObject *args);
        static PyObject *t_MultiTermsEnum_getComparator(t_MultiTermsEnum *self, PyObject *args);
        static PyObject *t_MultiTermsEnum_getMatchCount(t_MultiTermsEnum *self);
        static PyObject *t_MultiTermsEnum_next(t_MultiTermsEnum *self, PyObject *args);
        static PyObject *t_MultiTermsEnum_ord(t_MultiTermsEnum *self, PyObject *args);
        static PyObject *t_MultiTermsEnum_seekCeil(t_MultiTermsEnum *self, PyObject *args);
        static PyObject *t_MultiTermsEnum_seekExact(t_MultiTermsEnum *self, PyObject *args);
        static PyObject *t_MultiTermsEnum_term(t_MultiTermsEnum *self, PyObject *args);
        static PyObject *t_MultiTermsEnum_toString(t_MultiTermsEnum *self, PyObject *args);
        static PyObject *t_MultiTermsEnum_totalTermFreq(t_MultiTermsEnum *self, PyObject *args);
        static PyObject *t_MultiTermsEnum_get__comparator(t_MultiTermsEnum *self, void *data);
        static PyObject *t_MultiTermsEnum_get__matchCount(t_MultiTermsEnum *self, void *data);
        static PyGetSetDef t_MultiTermsEnum__fields_[] = {
          DECLARE_GET_FIELD(t_MultiTermsEnum, comparator),
          DECLARE_GET_FIELD(t_MultiTermsEnum, matchCount),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_MultiTermsEnum__methods_[] = {
          DECLARE_METHOD(t_MultiTermsEnum, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MultiTermsEnum, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MultiTermsEnum, docFreq, METH_VARARGS),
          DECLARE_METHOD(t_MultiTermsEnum, docs, METH_VARARGS),
          DECLARE_METHOD(t_MultiTermsEnum, docsAndPositions, METH_VARARGS),
          DECLARE_METHOD(t_MultiTermsEnum, getComparator, METH_VARARGS),
          DECLARE_METHOD(t_MultiTermsEnum, getMatchCount, METH_NOARGS),
          DECLARE_METHOD(t_MultiTermsEnum, next, METH_VARARGS),
          DECLARE_METHOD(t_MultiTermsEnum, ord, METH_VARARGS),
          DECLARE_METHOD(t_MultiTermsEnum, seekCeil, METH_VARARGS),
          DECLARE_METHOD(t_MultiTermsEnum, seekExact, METH_VARARGS),
          DECLARE_METHOD(t_MultiTermsEnum, term, METH_VARARGS),
          DECLARE_METHOD(t_MultiTermsEnum, toString, METH_VARARGS),
          DECLARE_METHOD(t_MultiTermsEnum, totalTermFreq, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(MultiTermsEnum, t_MultiTermsEnum, ::org::apache::lucene::index::TermsEnum, MultiTermsEnum, t_MultiTermsEnum_init_, PyObject_SelfIter, ((PyObject *(*)(t_MultiTermsEnum *)) get_next< t_MultiTermsEnum,::org::apache::lucene::util::t_BytesRef,::org::apache::lucene::util::BytesRef >), t_MultiTermsEnum__fields_, 0, 0);

        void t_MultiTermsEnum::install(PyObject *module)
        {
          installType(&PY_TYPE(MultiTermsEnum), module, "MultiTermsEnum", 0);
        }

        void t_MultiTermsEnum::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(MultiTermsEnum).tp_dict, "class_", make_descriptor(MultiTermsEnum::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(MultiTermsEnum).tp_dict, "wrapfn_", make_descriptor(t_MultiTermsEnum::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(MultiTermsEnum).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_MultiTermsEnum_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, MultiTermsEnum::initializeClass, 1)))
            return NULL;
          return t_MultiTermsEnum::wrap_Object(MultiTermsEnum(((t_MultiTermsEnum *) arg)->object.this$));
        }
        static PyObject *t_MultiTermsEnum_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, MultiTermsEnum::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_MultiTermsEnum_init_(t_MultiTermsEnum *self, PyObject *args, PyObject *kwds)
        {
          JArray< ::org::apache::lucene::index::ReaderSlice > a0((jobject) NULL);
          MultiTermsEnum object((jobject) NULL);

          if (!parseArgs(args, "[k", ::org::apache::lucene::index::ReaderSlice::initializeClass, &a0))
          {
            INT_CALL(object = MultiTermsEnum(a0));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_MultiTermsEnum_docFreq(t_MultiTermsEnum *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.docFreq());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(MultiTermsEnum), (PyObject *) self, "docFreq", args, 2);
        }

        static PyObject *t_MultiTermsEnum_docs(t_MultiTermsEnum *self, PyObject *args)
        {
          ::org::apache::lucene::util::Bits a0((jobject) NULL);
          ::org::apache::lucene::index::DocsEnum a1((jobject) NULL);
          jint a2;
          ::org::apache::lucene::index::DocsEnum result((jobject) NULL);

          if (!parseArgs(args, "kkI", ::org::apache::lucene::util::Bits::initializeClass, ::org::apache::lucene::index::DocsEnum::initializeClass, &a0, &a1, &a2))
          {
            OBJ_CALL(result = self->object.docs(a0, a1, a2));
            return ::org::apache::lucene::index::t_DocsEnum::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(MultiTermsEnum), (PyObject *) self, "docs", args, 2);
        }

        static PyObject *t_MultiTermsEnum_docsAndPositions(t_MultiTermsEnum *self, PyObject *args)
        {
          ::org::apache::lucene::util::Bits a0((jobject) NULL);
          ::org::apache::lucene::index::DocsAndPositionsEnum a1((jobject) NULL);
          jint a2;
          ::org::apache::lucene::index::DocsAndPositionsEnum result((jobject) NULL);

          if (!parseArgs(args, "kkI", ::org::apache::lucene::util::Bits::initializeClass, ::org::apache::lucene::index::DocsAndPositionsEnum::initializeClass, &a0, &a1, &a2))
          {
            OBJ_CALL(result = self->object.docsAndPositions(a0, a1, a2));
            return ::org::apache::lucene::index::t_DocsAndPositionsEnum::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(MultiTermsEnum), (PyObject *) self, "docsAndPositions", args, 2);
        }

        static PyObject *t_MultiTermsEnum_getComparator(t_MultiTermsEnum *self, PyObject *args)
        {
          ::java::util::Comparator result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.getComparator());
            return ::java::util::t_Comparator::wrap_Object(result, &::org::apache::lucene::util::PY_TYPE(BytesRef));
          }

          return callSuper(&PY_TYPE(MultiTermsEnum), (PyObject *) self, "getComparator", args, 2);
        }

        static PyObject *t_MultiTermsEnum_getMatchCount(t_MultiTermsEnum *self)
        {
          jint result;
          OBJ_CALL(result = self->object.getMatchCount());
          return PyInt_FromLong((long) result);
        }

        static PyObject *t_MultiTermsEnum_next(t_MultiTermsEnum *self, PyObject *args)
        {
          ::org::apache::lucene::util::BytesRef result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.next());
            return ::org::apache::lucene::util::t_BytesRef::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(MultiTermsEnum), (PyObject *) self, "next", args, 2);
        }

        static PyObject *t_MultiTermsEnum_ord(t_MultiTermsEnum *self, PyObject *args)
        {
          jlong result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.ord());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          return callSuper(&PY_TYPE(MultiTermsEnum), (PyObject *) self, "ord", args, 2);
        }

        static PyObject *t_MultiTermsEnum_seekCeil(t_MultiTermsEnum *self, PyObject *args)
        {
          ::org::apache::lucene::util::BytesRef a0((jobject) NULL);
          ::org::apache::lucene::index::TermsEnum$SeekStatus result((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::util::BytesRef::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.seekCeil(a0));
            return ::org::apache::lucene::index::t_TermsEnum$SeekStatus::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(MultiTermsEnum), (PyObject *) self, "seekCeil", args, 2);
        }

        static PyObject *t_MultiTermsEnum_seekExact(t_MultiTermsEnum *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              ::org::apache::lucene::util::BytesRef a0((jobject) NULL);
              jboolean result;

              if (!parseArgs(args, "k", ::org::apache::lucene::util::BytesRef::initializeClass, &a0))
              {
                OBJ_CALL(result = self->object.seekExact(a0));
                Py_RETURN_BOOL(result);
              }
            }
            {
              jlong a0;

              if (!parseArgs(args, "J", &a0))
              {
                OBJ_CALL(self->object.seekExact(a0));
                Py_RETURN_NONE;
              }
            }
          }

          return callSuper(&PY_TYPE(MultiTermsEnum), (PyObject *) self, "seekExact", args, 2);
        }

        static PyObject *t_MultiTermsEnum_term(t_MultiTermsEnum *self, PyObject *args)
        {
          ::org::apache::lucene::util::BytesRef result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.term());
            return ::org::apache::lucene::util::t_BytesRef::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(MultiTermsEnum), (PyObject *) self, "term", args, 2);
        }

        static PyObject *t_MultiTermsEnum_toString(t_MultiTermsEnum *self, PyObject *args)
        {
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.toString());
            return j2p(result);
          }

          return callSuper(&PY_TYPE(MultiTermsEnum), (PyObject *) self, "toString", args, 2);
        }

        static PyObject *t_MultiTermsEnum_totalTermFreq(t_MultiTermsEnum *self, PyObject *args)
        {
          jlong result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.totalTermFreq());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          return callSuper(&PY_TYPE(MultiTermsEnum), (PyObject *) self, "totalTermFreq", args, 2);
        }

        static PyObject *t_MultiTermsEnum_get__comparator(t_MultiTermsEnum *self, void *data)
        {
          ::java::util::Comparator value((jobject) NULL);
          OBJ_CALL(value = self->object.getComparator());
          return ::java::util::t_Comparator::wrap_Object(value);
        }

        static PyObject *t_MultiTermsEnum_get__matchCount(t_MultiTermsEnum *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object.getMatchCount());
          return PyInt_FromLong((long) value);
        }
      }
    }
  }
}
