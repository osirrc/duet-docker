#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/en/EnglishMinimalStemFilter.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace en {

          ::java::lang::Class *EnglishMinimalStemFilter::class$ = NULL;
          jmethodID *EnglishMinimalStemFilter::mids$ = NULL;
          bool EnglishMinimalStemFilter::live$ = false;

          jclass EnglishMinimalStemFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/en/EnglishMinimalStemFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_c7c794dc] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;)V");
              mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          EnglishMinimalStemFilter::EnglishMinimalStemFilter(const ::org::apache::lucene::analysis::TokenStream & a0) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_c7c794dc, a0.this$)) {}

          jboolean EnglishMinimalStemFilter::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_54c6a16a]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace en {
          static PyObject *t_EnglishMinimalStemFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_EnglishMinimalStemFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_EnglishMinimalStemFilter_init_(t_EnglishMinimalStemFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_EnglishMinimalStemFilter_incrementToken(t_EnglishMinimalStemFilter *self, PyObject *args);

          static PyMethodDef t_EnglishMinimalStemFilter__methods_[] = {
            DECLARE_METHOD(t_EnglishMinimalStemFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_EnglishMinimalStemFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_EnglishMinimalStemFilter, incrementToken, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(EnglishMinimalStemFilter, t_EnglishMinimalStemFilter, ::org::apache::lucene::analysis::TokenFilter, EnglishMinimalStemFilter, t_EnglishMinimalStemFilter_init_, 0, 0, 0, 0, 0);

          void t_EnglishMinimalStemFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(EnglishMinimalStemFilter), module, "EnglishMinimalStemFilter", 0);
          }

          void t_EnglishMinimalStemFilter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(EnglishMinimalStemFilter).tp_dict, "class_", make_descriptor(EnglishMinimalStemFilter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(EnglishMinimalStemFilter).tp_dict, "wrapfn_", make_descriptor(t_EnglishMinimalStemFilter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(EnglishMinimalStemFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_EnglishMinimalStemFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, EnglishMinimalStemFilter::initializeClass, 1)))
              return NULL;
            return t_EnglishMinimalStemFilter::wrap_Object(EnglishMinimalStemFilter(((t_EnglishMinimalStemFilter *) arg)->object.this$));
          }
          static PyObject *t_EnglishMinimalStemFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, EnglishMinimalStemFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_EnglishMinimalStemFilter_init_(t_EnglishMinimalStemFilter *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            EnglishMinimalStemFilter object((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              INT_CALL(object = EnglishMinimalStemFilter(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_EnglishMinimalStemFilter_incrementToken(t_EnglishMinimalStemFilter *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(EnglishMinimalStemFilter), (PyObject *) self, "incrementToken", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queries/function/valuesource/DoubleConstValueSource.h"
#include "java/lang/Number.h"
#include "org/apache/lucene/queries/function/FunctionValues.h"
#include "java/lang/Class.h"
#include "java/lang/Object.h"
#include "java/util/Map.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {

            ::java::lang::Class *DoubleConstValueSource::class$ = NULL;
            jmethodID *DoubleConstValueSource::mids$ = NULL;
            bool DoubleConstValueSource::live$ = false;

            jclass DoubleConstValueSource::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queries/function/valuesource/DoubleConstValueSource");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_5d1c7645] = env->getMethodID(cls, "<init>", "(D)V");
                mids$[mid_description_14c7b5c5] = env->getMethodID(cls, "description", "()Ljava/lang/String;");
                mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
                mids$[mid_getBool_54c6a16a] = env->getMethodID(cls, "getBool", "()Z");
                mids$[mid_getDouble_54c6a174] = env->getMethodID(cls, "getDouble", "()D");
                mids$[mid_getFloat_54c6a176] = env->getMethodID(cls, "getFloat", "()F");
                mids$[mid_getInt_54c6a179] = env->getMethodID(cls, "getInt", "()I");
                mids$[mid_getLong_54c6a17a] = env->getMethodID(cls, "getLong", "()J");
                mids$[mid_getNumber_ee47e3e1] = env->getMethodID(cls, "getNumber", "()Ljava/lang/Number;");
                mids$[mid_getValues_4c566485] = env->getMethodID(cls, "getValues", "(Ljava/util/Map;Lorg/apache/lucene/index/AtomicReaderContext;)Lorg/apache/lucene/queries/function/FunctionValues;");
                mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            DoubleConstValueSource::DoubleConstValueSource(jdouble a0) : ::org::apache::lucene::queries::function::valuesource::ConstNumberSource(env->newObject(initializeClass, &mids$, mid_init$_5d1c7645, a0)) {}

            ::java::lang::String DoubleConstValueSource::description() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_description_14c7b5c5]));
            }

            jboolean DoubleConstValueSource::equals(const ::java::lang::Object & a0) const
            {
              return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
            }

            jboolean DoubleConstValueSource::getBool() const
            {
              return env->callBooleanMethod(this$, mids$[mid_getBool_54c6a16a]);
            }

            jdouble DoubleConstValueSource::getDouble() const
            {
              return env->callDoubleMethod(this$, mids$[mid_getDouble_54c6a174]);
            }

            jfloat DoubleConstValueSource::getFloat() const
            {
              return env->callFloatMethod(this$, mids$[mid_getFloat_54c6a176]);
            }

            jint DoubleConstValueSource::getInt() const
            {
              return env->callIntMethod(this$, mids$[mid_getInt_54c6a179]);
            }

            jlong DoubleConstValueSource::getLong() const
            {
              return env->callLongMethod(this$, mids$[mid_getLong_54c6a17a]);
            }

            ::java::lang::Number DoubleConstValueSource::getNumber() const
            {
              return ::java::lang::Number(env->callObjectMethod(this$, mids$[mid_getNumber_ee47e3e1]));
            }

            ::org::apache::lucene::queries::function::FunctionValues DoubleConstValueSource::getValues(const ::java::util::Map & a0, const ::org::apache::lucene::index::AtomicReaderContext & a1) const
            {
              return ::org::apache::lucene::queries::function::FunctionValues(env->callObjectMethod(this$, mids$[mid_getValues_4c566485], a0.this$, a1.this$));
            }

            jint DoubleConstValueSource::hashCode() const
            {
              return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {
            static PyObject *t_DoubleConstValueSource_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_DoubleConstValueSource_instance_(PyTypeObject *type, PyObject *arg);
            static int t_DoubleConstValueSource_init_(t_DoubleConstValueSource *self, PyObject *args, PyObject *kwds);
            static PyObject *t_DoubleConstValueSource_description(t_DoubleConstValueSource *self, PyObject *args);
            static PyObject *t_DoubleConstValueSource_equals(t_DoubleConstValueSource *self, PyObject *args);
            static PyObject *t_DoubleConstValueSource_getBool(t_DoubleConstValueSource *self, PyObject *args);
            static PyObject *t_DoubleConstValueSource_getDouble(t_DoubleConstValueSource *self, PyObject *args);
            static PyObject *t_DoubleConstValueSource_getFloat(t_DoubleConstValueSource *self, PyObject *args);
            static PyObject *t_DoubleConstValueSource_getInt(t_DoubleConstValueSource *self, PyObject *args);
            static PyObject *t_DoubleConstValueSource_getLong(t_DoubleConstValueSource *self, PyObject *args);
            static PyObject *t_DoubleConstValueSource_getNumber(t_DoubleConstValueSource *self, PyObject *args);
            static PyObject *t_DoubleConstValueSource_getValues(t_DoubleConstValueSource *self, PyObject *args);
            static PyObject *t_DoubleConstValueSource_hashCode(t_DoubleConstValueSource *self, PyObject *args);
            static PyObject *t_DoubleConstValueSource_get__bool(t_DoubleConstValueSource *self, void *data);
            static PyObject *t_DoubleConstValueSource_get__double(t_DoubleConstValueSource *self, void *data);
            static PyObject *t_DoubleConstValueSource_get__float(t_DoubleConstValueSource *self, void *data);
            static PyObject *t_DoubleConstValueSource_get__int(t_DoubleConstValueSource *self, void *data);
            static PyObject *t_DoubleConstValueSource_get__long(t_DoubleConstValueSource *self, void *data);
            static PyObject *t_DoubleConstValueSource_get__number(t_DoubleConstValueSource *self, void *data);
            static PyGetSetDef t_DoubleConstValueSource__fields_[] = {
              DECLARE_GET_FIELD(t_DoubleConstValueSource, bool),
              DECLARE_GET_FIELD(t_DoubleConstValueSource, double),
              DECLARE_GET_FIELD(t_DoubleConstValueSource, float),
              DECLARE_GET_FIELD(t_DoubleConstValueSource, int),
              DECLARE_GET_FIELD(t_DoubleConstValueSource, long),
              DECLARE_GET_FIELD(t_DoubleConstValueSource, number),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_DoubleConstValueSource__methods_[] = {
              DECLARE_METHOD(t_DoubleConstValueSource, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_DoubleConstValueSource, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_DoubleConstValueSource, description, METH_VARARGS),
              DECLARE_METHOD(t_DoubleConstValueSource, equals, METH_VARARGS),
              DECLARE_METHOD(t_DoubleConstValueSource, getBool, METH_VARARGS),
              DECLARE_METHOD(t_DoubleConstValueSource, getDouble, METH_VARARGS),
              DECLARE_METHOD(t_DoubleConstValueSource, getFloat, METH_VARARGS),
              DECLARE_METHOD(t_DoubleConstValueSource, getInt, METH_VARARGS),
              DECLARE_METHOD(t_DoubleConstValueSource, getLong, METH_VARARGS),
              DECLARE_METHOD(t_DoubleConstValueSource, getNumber, METH_VARARGS),
              DECLARE_METHOD(t_DoubleConstValueSource, getValues, METH_VARARGS),
              DECLARE_METHOD(t_DoubleConstValueSource, hashCode, METH_VARARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(DoubleConstValueSource, t_DoubleConstValueSource, ::org::apache::lucene::queries::function::valuesource::ConstNumberSource, DoubleConstValueSource, t_DoubleConstValueSource_init_, 0, 0, t_DoubleConstValueSource__fields_, 0, 0);

            void t_DoubleConstValueSource::install(PyObject *module)
            {
              installType(&PY_TYPE(DoubleConstValueSource), module, "DoubleConstValueSource", 0);
            }

            void t_DoubleConstValueSource::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(DoubleConstValueSource).tp_dict, "class_", make_descriptor(DoubleConstValueSource::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(DoubleConstValueSource).tp_dict, "wrapfn_", make_descriptor(t_DoubleConstValueSource::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(DoubleConstValueSource).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_DoubleConstValueSource_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, DoubleConstValueSource::initializeClass, 1)))
                return NULL;
              return t_DoubleConstValueSource::wrap_Object(DoubleConstValueSource(((t_DoubleConstValueSource *) arg)->object.this$));
            }
            static PyObject *t_DoubleConstValueSource_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, DoubleConstValueSource::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_DoubleConstValueSource_init_(t_DoubleConstValueSource *self, PyObject *args, PyObject *kwds)
            {
              jdouble a0;
              DoubleConstValueSource object((jobject) NULL);

              if (!parseArgs(args, "D", &a0))
              {
                INT_CALL(object = DoubleConstValueSource(a0));
                self->object = object;
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_DoubleConstValueSource_description(t_DoubleConstValueSource *self, PyObject *args)
            {
              ::java::lang::String result((jobject) NULL);

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.description());
                return j2p(result);
              }

              return callSuper(&PY_TYPE(DoubleConstValueSource), (PyObject *) self, "description", args, 2);
            }

            static PyObject *t_DoubleConstValueSource_equals(t_DoubleConstValueSource *self, PyObject *args)
            {
              ::java::lang::Object a0((jobject) NULL);
              jboolean result;

              if (!parseArgs(args, "o", &a0))
              {
                OBJ_CALL(result = self->object.equals(a0));
                Py_RETURN_BOOL(result);
              }

              return callSuper(&PY_TYPE(DoubleConstValueSource), (PyObject *) self, "equals", args, 2);
            }

            static PyObject *t_DoubleConstValueSource_getBool(t_DoubleConstValueSource *self, PyObject *args)
            {
              jboolean result;

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.getBool());
                Py_RETURN_BOOL(result);
              }

              return callSuper(&PY_TYPE(DoubleConstValueSource), (PyObject *) self, "getBool", args, 2);
            }

            static PyObject *t_DoubleConstValueSource_getDouble(t_DoubleConstValueSource *self, PyObject *args)
            {
              jdouble result;

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.getDouble());
                return PyFloat_FromDouble((double) result);
              }

              return callSuper(&PY_TYPE(DoubleConstValueSource), (PyObject *) self, "getDouble", args, 2);
            }

            static PyObject *t_DoubleConstValueSource_getFloat(t_DoubleConstValueSource *self, PyObject *args)
            {
              jfloat result;

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.getFloat());
                return PyFloat_FromDouble((double) result);
              }

              return callSuper(&PY_TYPE(DoubleConstValueSource), (PyObject *) self, "getFloat", args, 2);
            }

            static PyObject *t_DoubleConstValueSource_getInt(t_DoubleConstValueSource *self, PyObject *args)
            {
              jint result;

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.getInt());
                return PyInt_FromLong((long) result);
              }

              return callSuper(&PY_TYPE(DoubleConstValueSource), (PyObject *) self, "getInt", args, 2);
            }

            static PyObject *t_DoubleConstValueSource_getLong(t_DoubleConstValueSource *self, PyObject *args)
            {
              jlong result;

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.getLong());
                return PyLong_FromLongLong((PY_LONG_LONG) result);
              }

              return callSuper(&PY_TYPE(DoubleConstValueSource), (PyObject *) self, "getLong", args, 2);
            }

            static PyObject *t_DoubleConstValueSource_getNumber(t_DoubleConstValueSource *self, PyObject *args)
            {
              ::java::lang::Number result((jobject) NULL);

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.getNumber());
                return ::java::lang::t_Number::wrap_Object(result);
              }

              return callSuper(&PY_TYPE(DoubleConstValueSource), (PyObject *) self, "getNumber", args, 2);
            }

            static PyObject *t_DoubleConstValueSource_getValues(t_DoubleConstValueSource *self, PyObject *args)
            {
              ::java::util::Map a0((jobject) NULL);
              PyTypeObject **p0;
              ::org::apache::lucene::index::AtomicReaderContext a1((jobject) NULL);
              ::org::apache::lucene::queries::function::FunctionValues result((jobject) NULL);

              if (!parseArgs(args, "Kk", ::java::util::Map::initializeClass, ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_, &a1))
              {
                OBJ_CALL(result = self->object.getValues(a0, a1));
                return ::org::apache::lucene::queries::function::t_FunctionValues::wrap_Object(result);
              }

              return callSuper(&PY_TYPE(DoubleConstValueSource), (PyObject *) self, "getValues", args, 2);
            }

            static PyObject *t_DoubleConstValueSource_hashCode(t_DoubleConstValueSource *self, PyObject *args)
            {
              jint result;

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.hashCode());
                return PyInt_FromLong((long) result);
              }

              return callSuper(&PY_TYPE(DoubleConstValueSource), (PyObject *) self, "hashCode", args, 2);
            }

            static PyObject *t_DoubleConstValueSource_get__bool(t_DoubleConstValueSource *self, void *data)
            {
              jboolean value;
              OBJ_CALL(value = self->object.getBool());
              Py_RETURN_BOOL(value);
            }

            static PyObject *t_DoubleConstValueSource_get__double(t_DoubleConstValueSource *self, void *data)
            {
              jdouble value;
              OBJ_CALL(value = self->object.getDouble());
              return PyFloat_FromDouble((double) value);
            }

            static PyObject *t_DoubleConstValueSource_get__float(t_DoubleConstValueSource *self, void *data)
            {
              jfloat value;
              OBJ_CALL(value = self->object.getFloat());
              return PyFloat_FromDouble((double) value);
            }

            static PyObject *t_DoubleConstValueSource_get__int(t_DoubleConstValueSource *self, void *data)
            {
              jint value;
              OBJ_CALL(value = self->object.getInt());
              return PyInt_FromLong((long) value);
            }

            static PyObject *t_DoubleConstValueSource_get__long(t_DoubleConstValueSource *self, void *data)
            {
              jlong value;
              OBJ_CALL(value = self->object.getLong());
              return PyLong_FromLongLong((PY_LONG_LONG) value);
            }

            static PyObject *t_DoubleConstValueSource_get__number(t_DoubleConstValueSource *self, void *data)
            {
              ::java::lang::Number value((jobject) NULL);
              OBJ_CALL(value = self->object.getNumber());
              return ::java::lang::t_Number::wrap_Object(value);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/miscellaneous/ScandinavianFoldingFilterFactory.h"
#include "org/apache/lucene/analysis/miscellaneous/ScandinavianFoldingFilter.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/String.h"
#include "java/util/Map.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {

          ::java::lang::Class *ScandinavianFoldingFilterFactory::class$ = NULL;
          jmethodID *ScandinavianFoldingFilterFactory::mids$ = NULL;
          bool ScandinavianFoldingFilterFactory::live$ = false;

          jclass ScandinavianFoldingFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/miscellaneous/ScandinavianFoldingFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4c9e2b1c] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_507bf659] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/miscellaneous/ScandinavianFoldingFilter;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ScandinavianFoldingFilterFactory::ScandinavianFoldingFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_4c9e2b1c, a0.this$)) {}

          ::org::apache::lucene::analysis::miscellaneous::ScandinavianFoldingFilter ScandinavianFoldingFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::miscellaneous::ScandinavianFoldingFilter(env->callObjectMethod(this$, mids$[mid_create_507bf659], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {
          static PyObject *t_ScandinavianFoldingFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_ScandinavianFoldingFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_ScandinavianFoldingFilterFactory_init_(t_ScandinavianFoldingFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_ScandinavianFoldingFilterFactory_create(t_ScandinavianFoldingFilterFactory *self, PyObject *args);

          static PyMethodDef t_ScandinavianFoldingFilterFactory__methods_[] = {
            DECLARE_METHOD(t_ScandinavianFoldingFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ScandinavianFoldingFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ScandinavianFoldingFilterFactory, create, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(ScandinavianFoldingFilterFactory, t_ScandinavianFoldingFilterFactory, ::org::apache::lucene::analysis::util::TokenFilterFactory, ScandinavianFoldingFilterFactory, t_ScandinavianFoldingFilterFactory_init_, 0, 0, 0, 0, 0);

          void t_ScandinavianFoldingFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(ScandinavianFoldingFilterFactory), module, "ScandinavianFoldingFilterFactory", 0);
          }

          void t_ScandinavianFoldingFilterFactory::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(ScandinavianFoldingFilterFactory).tp_dict, "class_", make_descriptor(ScandinavianFoldingFilterFactory::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(ScandinavianFoldingFilterFactory).tp_dict, "wrapfn_", make_descriptor(t_ScandinavianFoldingFilterFactory::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(ScandinavianFoldingFilterFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_ScandinavianFoldingFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, ScandinavianFoldingFilterFactory::initializeClass, 1)))
              return NULL;
            return t_ScandinavianFoldingFilterFactory::wrap_Object(ScandinavianFoldingFilterFactory(((t_ScandinavianFoldingFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_ScandinavianFoldingFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, ScandinavianFoldingFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_ScandinavianFoldingFilterFactory_init_(t_ScandinavianFoldingFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            ScandinavianFoldingFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = ScandinavianFoldingFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_ScandinavianFoldingFilterFactory_create(t_ScandinavianFoldingFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::miscellaneous::ScandinavianFoldingFilter result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::miscellaneous::t_ScandinavianFoldingFilter::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(ScandinavianFoldingFilterFactory), (PyObject *) self, "create", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/standard/builders/FieldQueryNodeBuilder.h"
#include "org/apache/lucene/search/TermQuery.h"
#include "org/apache/lucene/queryparser/flexible/core/QueryNodeException.h"
#include "org/apache/lucene/queryparser/flexible/standard/builders/StandardQueryBuilder.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/QueryNode.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace builders {

              ::java::lang::Class *FieldQueryNodeBuilder::class$ = NULL;
              jmethodID *FieldQueryNodeBuilder::mids$ = NULL;
              bool FieldQueryNodeBuilder::live$ = false;

              jclass FieldQueryNodeBuilder::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/standard/builders/FieldQueryNodeBuilder");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
                  mids$[mid_build_0cc6eb13] = env->getMethodID(cls, "build", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;)Lorg/apache/lucene/search/TermQuery;");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              FieldQueryNodeBuilder::FieldQueryNodeBuilder() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

              ::org::apache::lucene::search::TermQuery FieldQueryNodeBuilder::build(const ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode & a0) const
              {
                return ::org::apache::lucene::search::TermQuery(env->callObjectMethod(this$, mids$[mid_build_0cc6eb13], a0.this$));
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace builders {
              static PyObject *t_FieldQueryNodeBuilder_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_FieldQueryNodeBuilder_instance_(PyTypeObject *type, PyObject *arg);
              static int t_FieldQueryNodeBuilder_init_(t_FieldQueryNodeBuilder *self, PyObject *args, PyObject *kwds);
              static PyObject *t_FieldQueryNodeBuilder_build(t_FieldQueryNodeBuilder *self, PyObject *arg);

              static PyMethodDef t_FieldQueryNodeBuilder__methods_[] = {
                DECLARE_METHOD(t_FieldQueryNodeBuilder, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_FieldQueryNodeBuilder, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_FieldQueryNodeBuilder, build, METH_O),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(FieldQueryNodeBuilder, t_FieldQueryNodeBuilder, ::java::lang::Object, FieldQueryNodeBuilder, t_FieldQueryNodeBuilder_init_, 0, 0, 0, 0, 0);

              void t_FieldQueryNodeBuilder::install(PyObject *module)
              {
                installType(&PY_TYPE(FieldQueryNodeBuilder), module, "FieldQueryNodeBuilder", 0);
              }

              void t_FieldQueryNodeBuilder::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(FieldQueryNodeBuilder).tp_dict, "class_", make_descriptor(FieldQueryNodeBuilder::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(FieldQueryNodeBuilder).tp_dict, "wrapfn_", make_descriptor(t_FieldQueryNodeBuilder::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(FieldQueryNodeBuilder).tp_dict, "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_FieldQueryNodeBuilder_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, FieldQueryNodeBuilder::initializeClass, 1)))
                  return NULL;
                return t_FieldQueryNodeBuilder::wrap_Object(FieldQueryNodeBuilder(((t_FieldQueryNodeBuilder *) arg)->object.this$));
              }
              static PyObject *t_FieldQueryNodeBuilder_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, FieldQueryNodeBuilder::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_FieldQueryNodeBuilder_init_(t_FieldQueryNodeBuilder *self, PyObject *args, PyObject *kwds)
              {
                FieldQueryNodeBuilder object((jobject) NULL);

                INT_CALL(object = FieldQueryNodeBuilder());
                self->object = object;

                return 0;
              }

              static PyObject *t_FieldQueryNodeBuilder_build(t_FieldQueryNodeBuilder *self, PyObject *arg)
              {
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode a0((jobject) NULL);
                ::org::apache::lucene::search::TermQuery result((jobject) NULL);

                if (!parseArg(arg, "k", ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode::initializeClass, &a0))
                {
                  OBJ_CALL(result = self->object.build(a0));
                  return ::org::apache::lucene::search::t_TermQuery::wrap_Object(result);
                }

                PyErr_SetArgsError((PyObject *) self, "build", arg);
                return NULL;
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/suggest/jaspell/JaspellLookup.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "java/lang/Class.h"
#include "java/lang/Object.h"
#include "org/apache/lucene/search/suggest/Lookup$LookupResult.h"
#include "java/io/IOException.h"
#include "java/lang/CharSequence.h"
#include "org/apache/lucene/store/DataInput.h"
#include "java/util/Set.h"
#include "org/apache/lucene/store/DataOutput.h"
#include "org/apache/lucene/search/suggest/InputIterator.h"
#include "java/util/List.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace suggest {
          namespace jaspell {

            ::java::lang::Class *JaspellLookup::class$ = NULL;
            jmethodID *JaspellLookup::mids$ = NULL;
            bool JaspellLookup::live$ = false;

            jclass JaspellLookup::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/search/suggest/jaspell/JaspellLookup");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
                mids$[mid_add_cb8bea96] = env->getMethodID(cls, "add", "(Ljava/lang/CharSequence;Ljava/lang/Object;)Z");
                mids$[mid_build_1754a234] = env->getMethodID(cls, "build", "(Lorg/apache/lucene/search/suggest/InputIterator;)V");
                mids$[mid_get_a739ccff] = env->getMethodID(cls, "get", "(Ljava/lang/CharSequence;)Ljava/lang/Object;");
                mids$[mid_getCount_54c6a17a] = env->getMethodID(cls, "getCount", "()J");
                mids$[mid_load_f5d6a55d] = env->getMethodID(cls, "load", "(Lorg/apache/lucene/store/DataInput;)Z");
                mids$[mid_lookup_dd3e9f51] = env->getMethodID(cls, "lookup", "(Ljava/lang/CharSequence;Ljava/util/Set;ZI)Ljava/util/List;");
                mids$[mid_ramBytesUsed_54c6a17a] = env->getMethodID(cls, "ramBytesUsed", "()J");
                mids$[mid_store_27875f5b] = env->getMethodID(cls, "store", "(Lorg/apache/lucene/store/DataOutput;)Z");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            JaspellLookup::JaspellLookup() : ::org::apache::lucene::search::suggest::Lookup(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

            jboolean JaspellLookup::add(const ::java::lang::CharSequence & a0, const ::java::lang::Object & a1) const
            {
              return env->callBooleanMethod(this$, mids$[mid_add_cb8bea96], a0.this$, a1.this$);
            }

            void JaspellLookup::build(const ::org::apache::lucene::search::suggest::InputIterator & a0) const
            {
              env->callVoidMethod(this$, mids$[mid_build_1754a234], a0.this$);
            }

            ::java::lang::Object JaspellLookup::get(const ::java::lang::CharSequence & a0) const
            {
              return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_get_a739ccff], a0.this$));
            }

            jlong JaspellLookup::getCount() const
            {
              return env->callLongMethod(this$, mids$[mid_getCount_54c6a17a]);
            }

            jboolean JaspellLookup::load(const ::org::apache::lucene::store::DataInput & a0) const
            {
              return env->callBooleanMethod(this$, mids$[mid_load_f5d6a55d], a0.this$);
            }

            ::java::util::List JaspellLookup::lookup(const ::java::lang::CharSequence & a0, const ::java::util::Set & a1, jboolean a2, jint a3) const
            {
              return ::java::util::List(env->callObjectMethod(this$, mids$[mid_lookup_dd3e9f51], a0.this$, a1.this$, a2, a3));
            }

            jlong JaspellLookup::ramBytesUsed() const
            {
              return env->callLongMethod(this$, mids$[mid_ramBytesUsed_54c6a17a]);
            }

            jboolean JaspellLookup::store(const ::org::apache::lucene::store::DataOutput & a0) const
            {
              return env->callBooleanMethod(this$, mids$[mid_store_27875f5b], a0.this$);
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace suggest {
          namespace jaspell {
            static PyObject *t_JaspellLookup_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_JaspellLookup_instance_(PyTypeObject *type, PyObject *arg);
            static int t_JaspellLookup_init_(t_JaspellLookup *self, PyObject *args, PyObject *kwds);
            static PyObject *t_JaspellLookup_add(t_JaspellLookup *self, PyObject *args);
            static PyObject *t_JaspellLookup_build(t_JaspellLookup *self, PyObject *args);
            static PyObject *t_JaspellLookup_get(t_JaspellLookup *self, PyObject *arg);
            static PyObject *t_JaspellLookup_getCount(t_JaspellLookup *self, PyObject *args);
            static PyObject *t_JaspellLookup_load(t_JaspellLookup *self, PyObject *args);
            static PyObject *t_JaspellLookup_lookup(t_JaspellLookup *self, PyObject *args);
            static PyObject *t_JaspellLookup_ramBytesUsed(t_JaspellLookup *self, PyObject *args);
            static PyObject *t_JaspellLookup_store(t_JaspellLookup *self, PyObject *args);
            static PyObject *t_JaspellLookup_get__count(t_JaspellLookup *self, void *data);
            static PyGetSetDef t_JaspellLookup__fields_[] = {
              DECLARE_GET_FIELD(t_JaspellLookup, count),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_JaspellLookup__methods_[] = {
              DECLARE_METHOD(t_JaspellLookup, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_JaspellLookup, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_JaspellLookup, add, METH_VARARGS),
              DECLARE_METHOD(t_JaspellLookup, build, METH_VARARGS),
              DECLARE_METHOD(t_JaspellLookup, get, METH_O),
              DECLARE_METHOD(t_JaspellLookup, getCount, METH_VARARGS),
              DECLARE_METHOD(t_JaspellLookup, load, METH_VARARGS),
              DECLARE_METHOD(t_JaspellLookup, lookup, METH_VARARGS),
              DECLARE_METHOD(t_JaspellLookup, ramBytesUsed, METH_VARARGS),
              DECLARE_METHOD(t_JaspellLookup, store, METH_VARARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(JaspellLookup, t_JaspellLookup, ::org::apache::lucene::search::suggest::Lookup, JaspellLookup, t_JaspellLookup_init_, 0, 0, t_JaspellLookup__fields_, 0, 0);

            void t_JaspellLookup::install(PyObject *module)
            {
              installType(&PY_TYPE(JaspellLookup), module, "JaspellLookup", 0);
            }

            void t_JaspellLookup::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(JaspellLookup).tp_dict, "class_", make_descriptor(JaspellLookup::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(JaspellLookup).tp_dict, "wrapfn_", make_descriptor(t_JaspellLookup::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(JaspellLookup).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_JaspellLookup_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, JaspellLookup::initializeClass, 1)))
                return NULL;
              return t_JaspellLookup::wrap_Object(JaspellLookup(((t_JaspellLookup *) arg)->object.this$));
            }
            static PyObject *t_JaspellLookup_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, JaspellLookup::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_JaspellLookup_init_(t_JaspellLookup *self, PyObject *args, PyObject *kwds)
            {
              JaspellLookup object((jobject) NULL);

              INT_CALL(object = JaspellLookup());
              self->object = object;

              return 0;
            }

            static PyObject *t_JaspellLookup_add(t_JaspellLookup *self, PyObject *args)
            {
              ::java::lang::CharSequence a0((jobject) NULL);
              ::java::lang::Object a1((jobject) NULL);
              jboolean result;

              if (!parseArgs(args, "Oo", &::java::lang::PY_TYPE(CharSequence), &a0, &a1))
              {
                OBJ_CALL(result = self->object.add(a0, a1));
                Py_RETURN_BOOL(result);
              }

              PyErr_SetArgsError((PyObject *) self, "add", args);
              return NULL;
            }

            static PyObject *t_JaspellLookup_build(t_JaspellLookup *self, PyObject *args)
            {
              ::org::apache::lucene::search::suggest::InputIterator a0((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::search::suggest::InputIterator::initializeClass, &a0))
              {
                OBJ_CALL(self->object.build(a0));
                Py_RETURN_NONE;
              }

              return callSuper(&PY_TYPE(JaspellLookup), (PyObject *) self, "build", args, 2);
            }

            static PyObject *t_JaspellLookup_get(t_JaspellLookup *self, PyObject *arg)
            {
              ::java::lang::CharSequence a0((jobject) NULL);
              ::java::lang::Object result((jobject) NULL);

              if (!parseArg(arg, "O", &::java::lang::PY_TYPE(CharSequence), &a0))
              {
                OBJ_CALL(result = self->object.get(a0));
                return ::java::lang::t_Object::wrap_Object(result);
              }

              PyErr_SetArgsError((PyObject *) self, "get", arg);
              return NULL;
            }

            static PyObject *t_JaspellLookup_getCount(t_JaspellLookup *self, PyObject *args)
            {
              jlong result;

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.getCount());
                return PyLong_FromLongLong((PY_LONG_LONG) result);
              }

              return callSuper(&PY_TYPE(JaspellLookup), (PyObject *) self, "getCount", args, 2);
            }

            static PyObject *t_JaspellLookup_load(t_JaspellLookup *self, PyObject *args)
            {
              ::org::apache::lucene::store::DataInput a0((jobject) NULL);
              jboolean result;

              if (!parseArgs(args, "k", ::org::apache::lucene::store::DataInput::initializeClass, &a0))
              {
                OBJ_CALL(result = self->object.load(a0));
                Py_RETURN_BOOL(result);
              }

              return callSuper(&PY_TYPE(JaspellLookup), (PyObject *) self, "load", args, 2);
            }

            static PyObject *t_JaspellLookup_lookup(t_JaspellLookup *self, PyObject *args)
            {
              ::java::lang::CharSequence a0((jobject) NULL);
              ::java::util::Set a1((jobject) NULL);
              PyTypeObject **p1;
              jboolean a2;
              jint a3;
              ::java::util::List result((jobject) NULL);

              if (!parseArgs(args, "OKZI", &::java::lang::PY_TYPE(CharSequence), ::java::util::Set::initializeClass, &a0, &a1, &p1, ::java::util::t_Set::parameters_, &a2, &a3))
              {
                OBJ_CALL(result = self->object.lookup(a0, a1, a2, a3));
                return ::java::util::t_List::wrap_Object(result, &::org::apache::lucene::search::suggest::PY_TYPE(Lookup$LookupResult));
              }

              return callSuper(&PY_TYPE(JaspellLookup), (PyObject *) self, "lookup", args, 2);
            }

            static PyObject *t_JaspellLookup_ramBytesUsed(t_JaspellLookup *self, PyObject *args)
            {
              jlong result;

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.ramBytesUsed());
                return PyLong_FromLongLong((PY_LONG_LONG) result);
              }

              return callSuper(&PY_TYPE(JaspellLookup), (PyObject *) self, "ramBytesUsed", args, 2);
            }

            static PyObject *t_JaspellLookup_store(t_JaspellLookup *self, PyObject *args)
            {
              ::org::apache::lucene::store::DataOutput a0((jobject) NULL);
              jboolean result;

              if (!parseArgs(args, "k", ::org::apache::lucene::store::DataOutput::initializeClass, &a0))
              {
                OBJ_CALL(result = self->object.store(a0));
                Py_RETURN_BOOL(result);
              }

              return callSuper(&PY_TYPE(JaspellLookup), (PyObject *) self, "store", args, 2);
            }

            static PyObject *t_JaspellLookup_get__count(t_JaspellLookup *self, void *data)
            {
              jlong value;
              OBJ_CALL(value = self->object.getCount());
              return PyLong_FromLongLong((PY_LONG_LONG) value);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/ProximityQueryNode.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/ProximityQueryNode$Type.h"
#include "org/apache/lucene/queryparser/flexible/core/parser/EscapeQuerySyntax.h"
#include "java/lang/CloneNotSupportedException.h"
#include "java/lang/CharSequence.h"
#include "java/lang/String.h"
#include "java/util/List.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/QueryNode.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace nodes {

              ::java::lang::Class *ProximityQueryNode::class$ = NULL;
              jmethodID *ProximityQueryNode::mids$ = NULL;
              bool ProximityQueryNode::live$ = false;

              jclass ProximityQueryNode::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/core/nodes/ProximityQueryNode");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_8db4cd70] = env->getMethodID(cls, "<init>", "(Ljava/util/List;Ljava/lang/CharSequence;Lorg/apache/lucene/queryparser/flexible/core/nodes/ProximityQueryNode$Type;Z)V");
                  mids$[mid_init$_0740981c] = env->getMethodID(cls, "<init>", "(Ljava/util/List;Ljava/lang/CharSequence;Lorg/apache/lucene/queryparser/flexible/core/nodes/ProximityQueryNode$Type;IZ)V");
                  mids$[mid_cloneTree_b387c5e6] = env->getMethodID(cls, "cloneTree", "()Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;");
                  mids$[mid_getDistance_54c6a179] = env->getMethodID(cls, "getDistance", "()I");
                  mids$[mid_getField_e0adba2f] = env->getMethodID(cls, "getField", "()Ljava/lang/CharSequence;");
                  mids$[mid_getFieldAsString_14c7b5c5] = env->getMethodID(cls, "getFieldAsString", "()Ljava/lang/String;");
                  mids$[mid_getProximityType_9b7235cd] = env->getMethodID(cls, "getProximityType", "()Lorg/apache/lucene/queryparser/flexible/core/nodes/ProximityQueryNode$Type;");
                  mids$[mid_isInOrder_54c6a16a] = env->getMethodID(cls, "isInOrder", "()Z");
                  mids$[mid_setField_a8afc64a] = env->getMethodID(cls, "setField", "(Ljava/lang/CharSequence;)V");
                  mids$[mid_toQueryString_99b8dfe1] = env->getMethodID(cls, "toQueryString", "(Lorg/apache/lucene/queryparser/flexible/core/parser/EscapeQuerySyntax;)Ljava/lang/CharSequence;");
                  mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              ProximityQueryNode::ProximityQueryNode(const ::java::util::List & a0, const ::java::lang::CharSequence & a1, const ::org::apache::lucene::queryparser::flexible::core::nodes::ProximityQueryNode$Type & a2, jboolean a3) : ::org::apache::lucene::queryparser::flexible::core::nodes::BooleanQueryNode(env->newObject(initializeClass, &mids$, mid_init$_8db4cd70, a0.this$, a1.this$, a2.this$, a3)) {}

              ProximityQueryNode::ProximityQueryNode(const ::java::util::List & a0, const ::java::lang::CharSequence & a1, const ::org::apache::lucene::queryparser::flexible::core::nodes::ProximityQueryNode$Type & a2, jint a3, jboolean a4) : ::org::apache::lucene::queryparser::flexible::core::nodes::BooleanQueryNode(env->newObject(initializeClass, &mids$, mid_init$_0740981c, a0.this$, a1.this$, a2.this$, a3, a4)) {}

              ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode ProximityQueryNode::cloneTree() const
              {
                return ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode(env->callObjectMethod(this$, mids$[mid_cloneTree_b387c5e6]));
              }

              jint ProximityQueryNode::getDistance() const
              {
                return env->callIntMethod(this$, mids$[mid_getDistance_54c6a179]);
              }

              ::java::lang::CharSequence ProximityQueryNode::getField() const
              {
                return ::java::lang::CharSequence(env->callObjectMethod(this$, mids$[mid_getField_e0adba2f]));
              }

              ::java::lang::String ProximityQueryNode::getFieldAsString() const
              {
                return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getFieldAsString_14c7b5c5]));
              }

              ::org::apache::lucene::queryparser::flexible::core::nodes::ProximityQueryNode$Type ProximityQueryNode::getProximityType() const
              {
                return ::org::apache::lucene::queryparser::flexible::core::nodes::ProximityQueryNode$Type(env->callObjectMethod(this$, mids$[mid_getProximityType_9b7235cd]));
              }

              jboolean ProximityQueryNode::isInOrder() const
              {
                return env->callBooleanMethod(this$, mids$[mid_isInOrder_54c6a16a]);
              }

              void ProximityQueryNode::setField(const ::java::lang::CharSequence & a0) const
              {
                env->callVoidMethod(this$, mids$[mid_setField_a8afc64a], a0.this$);
              }

              ::java::lang::CharSequence ProximityQueryNode::toQueryString(const ::org::apache::lucene::queryparser::flexible::core::parser::EscapeQuerySyntax & a0) const
              {
                return ::java::lang::CharSequence(env->callObjectMethod(this$, mids$[mid_toQueryString_99b8dfe1], a0.this$));
              }

              ::java::lang::String ProximityQueryNode::toString() const
              {
                return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/ProximityQueryNode$ProximityType.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace nodes {
              static PyObject *t_ProximityQueryNode_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_ProximityQueryNode_instance_(PyTypeObject *type, PyObject *arg);
              static int t_ProximityQueryNode_init_(t_ProximityQueryNode *self, PyObject *args, PyObject *kwds);
              static PyObject *t_ProximityQueryNode_cloneTree(t_ProximityQueryNode *self, PyObject *args);
              static PyObject *t_ProximityQueryNode_getDistance(t_ProximityQueryNode *self);
              static PyObject *t_ProximityQueryNode_getField(t_ProximityQueryNode *self);
              static PyObject *t_ProximityQueryNode_getFieldAsString(t_ProximityQueryNode *self);
              static PyObject *t_ProximityQueryNode_getProximityType(t_ProximityQueryNode *self);
              static PyObject *t_ProximityQueryNode_isInOrder(t_ProximityQueryNode *self);
              static PyObject *t_ProximityQueryNode_setField(t_ProximityQueryNode *self, PyObject *arg);
              static PyObject *t_ProximityQueryNode_toQueryString(t_ProximityQueryNode *self, PyObject *args);
              static PyObject *t_ProximityQueryNode_toString(t_ProximityQueryNode *self, PyObject *args);
              static PyObject *t_ProximityQueryNode_get__distance(t_ProximityQueryNode *self, void *data);
              static PyObject *t_ProximityQueryNode_get__field(t_ProximityQueryNode *self, void *data);
              static int t_ProximityQueryNode_set__field(t_ProximityQueryNode *self, PyObject *arg, void *data);
              static PyObject *t_ProximityQueryNode_get__fieldAsString(t_ProximityQueryNode *self, void *data);
              static PyObject *t_ProximityQueryNode_get__inOrder(t_ProximityQueryNode *self, void *data);
              static PyObject *t_ProximityQueryNode_get__proximityType(t_ProximityQueryNode *self, void *data);
              static PyGetSetDef t_ProximityQueryNode__fields_[] = {
                DECLARE_GET_FIELD(t_ProximityQueryNode, distance),
                DECLARE_GETSET_FIELD(t_ProximityQueryNode, field),
                DECLARE_GET_FIELD(t_ProximityQueryNode, fieldAsString),
                DECLARE_GET_FIELD(t_ProximityQueryNode, inOrder),
                DECLARE_GET_FIELD(t_ProximityQueryNode, proximityType),
                { NULL, NULL, NULL, NULL, NULL }
              };

              static PyMethodDef t_ProximityQueryNode__methods_[] = {
                DECLARE_METHOD(t_ProximityQueryNode, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_ProximityQueryNode, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_ProximityQueryNode, cloneTree, METH_VARARGS),
                DECLARE_METHOD(t_ProximityQueryNode, getDistance, METH_NOARGS),
                DECLARE_METHOD(t_ProximityQueryNode, getField, METH_NOARGS),
                DECLARE_METHOD(t_ProximityQueryNode, getFieldAsString, METH_NOARGS),
                DECLARE_METHOD(t_ProximityQueryNode, getProximityType, METH_NOARGS),
                DECLARE_METHOD(t_ProximityQueryNode, isInOrder, METH_NOARGS),
                DECLARE_METHOD(t_ProximityQueryNode, setField, METH_O),
                DECLARE_METHOD(t_ProximityQueryNode, toQueryString, METH_VARARGS),
                DECLARE_METHOD(t_ProximityQueryNode, toString, METH_VARARGS),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(ProximityQueryNode, t_ProximityQueryNode, ::org::apache::lucene::queryparser::flexible::core::nodes::BooleanQueryNode, ProximityQueryNode, t_ProximityQueryNode_init_, 0, 0, t_ProximityQueryNode__fields_, 0, 0);

              void t_ProximityQueryNode::install(PyObject *module)
              {
                installType(&PY_TYPE(ProximityQueryNode), module, "ProximityQueryNode", 0);
                PyDict_SetItemString(PY_TYPE(ProximityQueryNode).tp_dict, "ProximityType", make_descriptor(&PY_TYPE(ProximityQueryNode$ProximityType)));
                PyDict_SetItemString(PY_TYPE(ProximityQueryNode).tp_dict, "Type", make_descriptor(&PY_TYPE(ProximityQueryNode$Type)));
              }

              void t_ProximityQueryNode::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(ProximityQueryNode).tp_dict, "class_", make_descriptor(ProximityQueryNode::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(ProximityQueryNode).tp_dict, "wrapfn_", make_descriptor(t_ProximityQueryNode::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(ProximityQueryNode).tp_dict, "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_ProximityQueryNode_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, ProximityQueryNode::initializeClass, 1)))
                  return NULL;
                return t_ProximityQueryNode::wrap_Object(ProximityQueryNode(((t_ProximityQueryNode *) arg)->object.this$));
              }
              static PyObject *t_ProximityQueryNode_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, ProximityQueryNode::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_ProximityQueryNode_init_(t_ProximityQueryNode *self, PyObject *args, PyObject *kwds)
              {
                switch (PyTuple_GET_SIZE(args)) {
                 case 4:
                  {
                    ::java::util::List a0((jobject) NULL);
                    PyTypeObject **p0;
                    ::java::lang::CharSequence a1((jobject) NULL);
                    ::org::apache::lucene::queryparser::flexible::core::nodes::ProximityQueryNode$Type a2((jobject) NULL);
                    PyTypeObject **p2;
                    jboolean a3;
                    ProximityQueryNode object((jobject) NULL);

                    if (!parseArgs(args, "KOKZ", ::java::util::List::initializeClass, &::java::lang::PY_TYPE(CharSequence), ::org::apache::lucene::queryparser::flexible::core::nodes::ProximityQueryNode$Type::initializeClass, &a0, &p0, ::java::util::t_List::parameters_, &a1, &a2, &p2, ::org::apache::lucene::queryparser::flexible::core::nodes::t_ProximityQueryNode$Type::parameters_, &a3))
                    {
                      INT_CALL(object = ProximityQueryNode(a0, a1, a2, a3));
                      self->object = object;
                      break;
                    }
                  }
                  goto err;
                 case 5:
                  {
                    ::java::util::List a0((jobject) NULL);
                    PyTypeObject **p0;
                    ::java::lang::CharSequence a1((jobject) NULL);
                    ::org::apache::lucene::queryparser::flexible::core::nodes::ProximityQueryNode$Type a2((jobject) NULL);
                    PyTypeObject **p2;
                    jint a3;
                    jboolean a4;
                    ProximityQueryNode object((jobject) NULL);

                    if (!parseArgs(args, "KOKIZ", ::java::util::List::initializeClass, &::java::lang::PY_TYPE(CharSequence), ::org::apache::lucene::queryparser::flexible::core::nodes::ProximityQueryNode$Type::initializeClass, &a0, &p0, ::java::util::t_List::parameters_, &a1, &a2, &p2, ::org::apache::lucene::queryparser::flexible::core::nodes::t_ProximityQueryNode$Type::parameters_, &a3, &a4))
                    {
                      INT_CALL(object = ProximityQueryNode(a0, a1, a2, a3, a4));
                      self->object = object;
                      break;
                    }
                  }
                 default:
                 err:
                  PyErr_SetArgsError((PyObject *) self, "__init__", args);
                  return -1;
                }

                return 0;
              }

              static PyObject *t_ProximityQueryNode_cloneTree(t_ProximityQueryNode *self, PyObject *args)
              {
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode result((jobject) NULL);

                if (!parseArgs(args, ""))
                {
                  OBJ_CALL(result = self->object.cloneTree());
                  return ::org::apache::lucene::queryparser::flexible::core::nodes::t_QueryNode::wrap_Object(result);
                }

                return callSuper(&PY_TYPE(ProximityQueryNode), (PyObject *) self, "cloneTree", args, 2);
              }

              static PyObject *t_ProximityQueryNode_getDistance(t_ProximityQueryNode *self)
              {
                jint result;
                OBJ_CALL(result = self->object.getDistance());
                return PyInt_FromLong((long) result);
              }

              static PyObject *t_ProximityQueryNode_getField(t_ProximityQueryNode *self)
              {
                ::java::lang::CharSequence result((jobject) NULL);
                OBJ_CALL(result = self->object.getField());
                return ::java::lang::t_CharSequence::wrap_Object(result);
              }

              static PyObject *t_ProximityQueryNode_getFieldAsString(t_ProximityQueryNode *self)
              {
                ::java::lang::String result((jobject) NULL);
                OBJ_CALL(result = self->object.getFieldAsString());
                return j2p(result);
              }

              static PyObject *t_ProximityQueryNode_getProximityType(t_ProximityQueryNode *self)
              {
                ::org::apache::lucene::queryparser::flexible::core::nodes::ProximityQueryNode$Type result((jobject) NULL);
                OBJ_CALL(result = self->object.getProximityType());
                return ::org::apache::lucene::queryparser::flexible::core::nodes::t_ProximityQueryNode$Type::wrap_Object(result);
              }

              static PyObject *t_ProximityQueryNode_isInOrder(t_ProximityQueryNode *self)
              {
                jboolean result;
                OBJ_CALL(result = self->object.isInOrder());
                Py_RETURN_BOOL(result);
              }

              static PyObject *t_ProximityQueryNode_setField(t_ProximityQueryNode *self, PyObject *arg)
              {
                ::java::lang::CharSequence a0((jobject) NULL);

                if (!parseArg(arg, "O", &::java::lang::PY_TYPE(CharSequence), &a0))
                {
                  OBJ_CALL(self->object.setField(a0));
                  Py_RETURN_NONE;
                }

                PyErr_SetArgsError((PyObject *) self, "setField", arg);
                return NULL;
              }

              static PyObject *t_ProximityQueryNode_toQueryString(t_ProximityQueryNode *self, PyObject *args)
              {
                ::org::apache::lucene::queryparser::flexible::core::parser::EscapeQuerySyntax a0((jobject) NULL);
                ::java::lang::CharSequence result((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::queryparser::flexible::core::parser::EscapeQuerySyntax::initializeClass, &a0))
                {
                  OBJ_CALL(result = self->object.toQueryString(a0));
                  return ::java::lang::t_CharSequence::wrap_Object(result);
                }

                return callSuper(&PY_TYPE(ProximityQueryNode), (PyObject *) self, "toQueryString", args, 2);
              }

              static PyObject *t_ProximityQueryNode_toString(t_ProximityQueryNode *self, PyObject *args)
              {
                ::java::lang::String result((jobject) NULL);

                if (!parseArgs(args, ""))
                {
                  OBJ_CALL(result = self->object.toString());
                  return j2p(result);
                }

                return callSuper(&PY_TYPE(ProximityQueryNode), (PyObject *) self, "toString", args, 2);
              }

              static PyObject *t_ProximityQueryNode_get__distance(t_ProximityQueryNode *self, void *data)
              {
                jint value;
                OBJ_CALL(value = self->object.getDistance());
                return PyInt_FromLong((long) value);
              }

              static PyObject *t_ProximityQueryNode_get__field(t_ProximityQueryNode *self, void *data)
              {
                ::java::lang::CharSequence value((jobject) NULL);
                OBJ_CALL(value = self->object.getField());
                return ::java::lang::t_CharSequence::wrap_Object(value);
              }
              static int t_ProximityQueryNode_set__field(t_ProximityQueryNode *self, PyObject *arg, void *data)
              {
                {
                  ::java::lang::CharSequence value((jobject) NULL);
                  if (!parseArg(arg, "O", &::java::lang::PY_TYPE(CharSequence), &value))
                  {
                    INT_CALL(self->object.setField(value));
                    return 0;
                  }
                }
                PyErr_SetArgsError((PyObject *) self, "field", arg);
                return -1;
              }

              static PyObject *t_ProximityQueryNode_get__fieldAsString(t_ProximityQueryNode *self, void *data)
              {
                ::java::lang::String value((jobject) NULL);
                OBJ_CALL(value = self->object.getFieldAsString());
                return j2p(value);
              }

              static PyObject *t_ProximityQueryNode_get__inOrder(t_ProximityQueryNode *self, void *data)
              {
                jboolean value;
                OBJ_CALL(value = self->object.isInOrder());
                Py_RETURN_BOOL(value);
              }

              static PyObject *t_ProximityQueryNode_get__proximityType(t_ProximityQueryNode *self, void *data)
              {
                ::org::apache::lucene::queryparser::flexible::core::nodes::ProximityQueryNode$Type value((jobject) NULL);
                OBJ_CALL(value = self->object.getProximityType());
                return ::org::apache::lucene::queryparser::flexible::core::nodes::t_ProximityQueryNode$Type::wrap_Object(value);
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/FuzzyQuery.h"
#include "java/lang/Object.h"
#include "org/apache/lucene/index/Term.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *FuzzyQuery::class$ = NULL;
        jmethodID *FuzzyQuery::mids$ = NULL;
        bool FuzzyQuery::live$ = false;
        jint FuzzyQuery::defaultMaxEdits = (jint) 0;
        jint FuzzyQuery::defaultMaxExpansions = (jint) 0;
        jfloat FuzzyQuery::defaultMinSimilarity = (jfloat) 0;
        jint FuzzyQuery::defaultPrefixLength = (jint) 0;
        jboolean FuzzyQuery::defaultTranspositions = (jboolean) 0;

        jclass FuzzyQuery::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/FuzzyQuery");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_7eca6a81] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/Term;)V");
            mids$[mid_init$_05555589] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/Term;I)V");
            mids$[mid_init$_10c66029] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/Term;II)V");
            mids$[mid_init$_12e80fe2] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/Term;IIIZ)V");
            mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
            mids$[mid_floatToEdits_77691edc] = env->getStaticMethodID(cls, "floatToEdits", "(FI)I");
            mids$[mid_getMaxEdits_54c6a179] = env->getMethodID(cls, "getMaxEdits", "()I");
            mids$[mid_getPrefixLength_54c6a179] = env->getMethodID(cls, "getPrefixLength", "()I");
            mids$[mid_getTerm_0f71f314] = env->getMethodID(cls, "getTerm", "()Lorg/apache/lucene/index/Term;");
            mids$[mid_getTranspositions_54c6a16a] = env->getMethodID(cls, "getTranspositions", "()Z");
            mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
            mids$[mid_toString_97a5258f] = env->getMethodID(cls, "toString", "(Ljava/lang/String;)Ljava/lang/String;");
            mids$[mid_getTermsEnum_67b5a29a] = env->getMethodID(cls, "getTermsEnum", "(Lorg/apache/lucene/index/Terms;Lorg/apache/lucene/util/AttributeSource;)Lorg/apache/lucene/index/TermsEnum;");

            class$ = (::java::lang::Class *) new JObject(cls);
            cls = (jclass) class$->this$;

            defaultMaxEdits = env->getStaticIntField(cls, "defaultMaxEdits");
            defaultMaxExpansions = env->getStaticIntField(cls, "defaultMaxExpansions");
            defaultMinSimilarity = env->getStaticFloatField(cls, "defaultMinSimilarity");
            defaultPrefixLength = env->getStaticIntField(cls, "defaultPrefixLength");
            defaultTranspositions = env->getStaticBooleanField(cls, "defaultTranspositions");
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        FuzzyQuery::FuzzyQuery(const ::org::apache::lucene::index::Term & a0) : ::org::apache::lucene::search::MultiTermQuery(env->newObject(initializeClass, &mids$, mid_init$_7eca6a81, a0.this$)) {}

        FuzzyQuery::FuzzyQuery(const ::org::apache::lucene::index::Term & a0, jint a1) : ::org::apache::lucene::search::MultiTermQuery(env->newObject(initializeClass, &mids$, mid_init$_05555589, a0.this$, a1)) {}

        FuzzyQuery::FuzzyQuery(const ::org::apache::lucene::index::Term & a0, jint a1, jint a2) : ::org::apache::lucene::search::MultiTermQuery(env->newObject(initializeClass, &mids$, mid_init$_10c66029, a0.this$, a1, a2)) {}

        FuzzyQuery::FuzzyQuery(const ::org::apache::lucene::index::Term & a0, jint a1, jint a2, jint a3, jboolean a4) : ::org::apache::lucene::search::MultiTermQuery(env->newObject(initializeClass, &mids$, mid_init$_12e80fe2, a0.this$, a1, a2, a3, a4)) {}

        jboolean FuzzyQuery::equals(const ::java::lang::Object & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
        }

        jint FuzzyQuery::floatToEdits(jfloat a0, jint a1)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticIntMethod(cls, mids$[mid_floatToEdits_77691edc], a0, a1);
        }

        jint FuzzyQuery::getMaxEdits() const
        {
          return env->callIntMethod(this$, mids$[mid_getMaxEdits_54c6a179]);
        }

        jint FuzzyQuery::getPrefixLength() const
        {
          return env->callIntMethod(this$, mids$[mid_getPrefixLength_54c6a179]);
        }

        ::org::apache::lucene::index::Term FuzzyQuery::getTerm() const
        {
          return ::org::apache::lucene::index::Term(env->callObjectMethod(this$, mids$[mid_getTerm_0f71f314]));
        }

        jboolean FuzzyQuery::getTranspositions() const
        {
          return env->callBooleanMethod(this$, mids$[mid_getTranspositions_54c6a16a]);
        }

        jint FuzzyQuery::hashCode() const
        {
          return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
        }

        ::java::lang::String FuzzyQuery::toString(const ::java::lang::String & a0) const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_97a5258f], a0.this$));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_FuzzyQuery_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FuzzyQuery_instance_(PyTypeObject *type, PyObject *arg);
        static int t_FuzzyQuery_init_(t_FuzzyQuery *self, PyObject *args, PyObject *kwds);
        static PyObject *t_FuzzyQuery_equals(t_FuzzyQuery *self, PyObject *args);
        static PyObject *t_FuzzyQuery_floatToEdits(PyTypeObject *type, PyObject *args);
        static PyObject *t_FuzzyQuery_getMaxEdits(t_FuzzyQuery *self);
        static PyObject *t_FuzzyQuery_getPrefixLength(t_FuzzyQuery *self);
        static PyObject *t_FuzzyQuery_getTerm(t_FuzzyQuery *self);
        static PyObject *t_FuzzyQuery_getTranspositions(t_FuzzyQuery *self);
        static PyObject *t_FuzzyQuery_hashCode(t_FuzzyQuery *self, PyObject *args);
        static PyObject *t_FuzzyQuery_toString(t_FuzzyQuery *self, PyObject *args);
        static PyObject *t_FuzzyQuery_get__maxEdits(t_FuzzyQuery *self, void *data);
        static PyObject *t_FuzzyQuery_get__prefixLength(t_FuzzyQuery *self, void *data);
        static PyObject *t_FuzzyQuery_get__term(t_FuzzyQuery *self, void *data);
        static PyObject *t_FuzzyQuery_get__transpositions(t_FuzzyQuery *self, void *data);
        static PyGetSetDef t_FuzzyQuery__fields_[] = {
          DECLARE_GET_FIELD(t_FuzzyQuery, maxEdits),
          DECLARE_GET_FIELD(t_FuzzyQuery, prefixLength),
          DECLARE_GET_FIELD(t_FuzzyQuery, term),
          DECLARE_GET_FIELD(t_FuzzyQuery, transpositions),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_FuzzyQuery__methods_[] = {
          DECLARE_METHOD(t_FuzzyQuery, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FuzzyQuery, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FuzzyQuery, equals, METH_VARARGS),
          DECLARE_METHOD(t_FuzzyQuery, floatToEdits, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_FuzzyQuery, getMaxEdits, METH_NOARGS),
          DECLARE_METHOD(t_FuzzyQuery, getPrefixLength, METH_NOARGS),
          DECLARE_METHOD(t_FuzzyQuery, getTerm, METH_NOARGS),
          DECLARE_METHOD(t_FuzzyQuery, getTranspositions, METH_NOARGS),
          DECLARE_METHOD(t_FuzzyQuery, hashCode, METH_VARARGS),
          DECLARE_METHOD(t_FuzzyQuery, toString, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(FuzzyQuery, t_FuzzyQuery, ::org::apache::lucene::search::MultiTermQuery, FuzzyQuery, t_FuzzyQuery_init_, 0, 0, t_FuzzyQuery__fields_, 0, 0);

        void t_FuzzyQuery::install(PyObject *module)
        {
          installType(&PY_TYPE(FuzzyQuery), module, "FuzzyQuery", 0);
        }

        void t_FuzzyQuery::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(FuzzyQuery).tp_dict, "class_", make_descriptor(FuzzyQuery::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(FuzzyQuery).tp_dict, "wrapfn_", make_descriptor(t_FuzzyQuery::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(FuzzyQuery).tp_dict, "boxfn_", make_descriptor(boxObject));
          env->getClass(FuzzyQuery::initializeClass);
          PyDict_SetItemString(PY_TYPE(FuzzyQuery).tp_dict, "defaultMaxEdits", make_descriptor(FuzzyQuery::defaultMaxEdits));
          PyDict_SetItemString(PY_TYPE(FuzzyQuery).tp_dict, "defaultMaxExpansions", make_descriptor(FuzzyQuery::defaultMaxExpansions));
          PyDict_SetItemString(PY_TYPE(FuzzyQuery).tp_dict, "defaultMinSimilarity", make_descriptor(FuzzyQuery::defaultMinSimilarity));
          PyDict_SetItemString(PY_TYPE(FuzzyQuery).tp_dict, "defaultPrefixLength", make_descriptor(FuzzyQuery::defaultPrefixLength));
          PyDict_SetItemString(PY_TYPE(FuzzyQuery).tp_dict, "defaultTranspositions", make_descriptor(FuzzyQuery::defaultTranspositions));
        }

        static PyObject *t_FuzzyQuery_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, FuzzyQuery::initializeClass, 1)))
            return NULL;
          return t_FuzzyQuery::wrap_Object(FuzzyQuery(((t_FuzzyQuery *) arg)->object.this$));
        }
        static PyObject *t_FuzzyQuery_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, FuzzyQuery::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_FuzzyQuery_init_(t_FuzzyQuery *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              ::org::apache::lucene::index::Term a0((jobject) NULL);
              FuzzyQuery object((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::index::Term::initializeClass, &a0))
              {
                INT_CALL(object = FuzzyQuery(a0));
                self->object = object;
                break;
              }
            }
            goto err;
           case 2:
            {
              ::org::apache::lucene::index::Term a0((jobject) NULL);
              jint a1;
              FuzzyQuery object((jobject) NULL);

              if (!parseArgs(args, "kI", ::org::apache::lucene::index::Term::initializeClass, &a0, &a1))
              {
                INT_CALL(object = FuzzyQuery(a0, a1));
                self->object = object;
                break;
              }
            }
            goto err;
           case 3:
            {
              ::org::apache::lucene::index::Term a0((jobject) NULL);
              jint a1;
              jint a2;
              FuzzyQuery object((jobject) NULL);

              if (!parseArgs(args, "kII", ::org::apache::lucene::index::Term::initializeClass, &a0, &a1, &a2))
              {
                INT_CALL(object = FuzzyQuery(a0, a1, a2));
                self->object = object;
                break;
              }
            }
            goto err;
           case 5:
            {
              ::org::apache::lucene::index::Term a0((jobject) NULL);
              jint a1;
              jint a2;
              jint a3;
              jboolean a4;
              FuzzyQuery object((jobject) NULL);

              if (!parseArgs(args, "kIIIZ", ::org::apache::lucene::index::Term::initializeClass, &a0, &a1, &a2, &a3, &a4))
              {
                INT_CALL(object = FuzzyQuery(a0, a1, a2, a3, a4));
                self->object = object;
                break;
              }
            }
           default:
           err:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_FuzzyQuery_equals(t_FuzzyQuery *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.equals(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(FuzzyQuery), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_FuzzyQuery_floatToEdits(PyTypeObject *type, PyObject *args)
        {
          jfloat a0;
          jint a1;
          jint result;

          if (!parseArgs(args, "FI", &a0, &a1))
          {
            OBJ_CALL(result = ::org::apache::lucene::search::FuzzyQuery::floatToEdits(a0, a1));
            return PyInt_FromLong((long) result);
          }

          PyErr_SetArgsError(type, "floatToEdits", args);
          return NULL;
        }

        static PyObject *t_FuzzyQuery_getMaxEdits(t_FuzzyQuery *self)
        {
          jint result;
          OBJ_CALL(result = self->object.getMaxEdits());
          return PyInt_FromLong((long) result);
        }

        static PyObject *t_FuzzyQuery_getPrefixLength(t_FuzzyQuery *self)
        {
          jint result;
          OBJ_CALL(result = self->object.getPrefixLength());
          return PyInt_FromLong((long) result);
        }

        static PyObject *t_FuzzyQuery_getTerm(t_FuzzyQuery *self)
        {
          ::org::apache::lucene::index::Term result((jobject) NULL);
          OBJ_CALL(result = self->object.getTerm());
          return ::org::apache::lucene::index::t_Term::wrap_Object(result);
        }

        static PyObject *t_FuzzyQuery_getTranspositions(t_FuzzyQuery *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.getTranspositions());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_FuzzyQuery_hashCode(t_FuzzyQuery *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hashCode());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(FuzzyQuery), (PyObject *) self, "hashCode", args, 2);
        }

        static PyObject *t_FuzzyQuery_toString(t_FuzzyQuery *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = self->object.toString(a0));
            return j2p(result);
          }

          return callSuper(&PY_TYPE(FuzzyQuery), (PyObject *) self, "toString", args, 2);
        }

        static PyObject *t_FuzzyQuery_get__maxEdits(t_FuzzyQuery *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object.getMaxEdits());
          return PyInt_FromLong((long) value);
        }

        static PyObject *t_FuzzyQuery_get__prefixLength(t_FuzzyQuery *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object.getPrefixLength());
          return PyInt_FromLong((long) value);
        }

        static PyObject *t_FuzzyQuery_get__term(t_FuzzyQuery *self, void *data)
        {
          ::org::apache::lucene::index::Term value((jobject) NULL);
          OBJ_CALL(value = self->object.getTerm());
          return ::org::apache::lucene::index::t_Term::wrap_Object(value);
        }

        static PyObject *t_FuzzyQuery_get__transpositions(t_FuzzyQuery *self, void *data)
        {
          jboolean value;
          OBJ_CALL(value = self->object.getTranspositions());
          Py_RETURN_BOOL(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/pt/PortugueseStemFilter.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace pt {

          ::java::lang::Class *PortugueseStemFilter::class$ = NULL;
          jmethodID *PortugueseStemFilter::mids$ = NULL;
          bool PortugueseStemFilter::live$ = false;

          jclass PortugueseStemFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/pt/PortugueseStemFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_c7c794dc] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;)V");
              mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          PortugueseStemFilter::PortugueseStemFilter(const ::org::apache::lucene::analysis::TokenStream & a0) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_c7c794dc, a0.this$)) {}

          jboolean PortugueseStemFilter::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_54c6a16a]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace pt {
          static PyObject *t_PortugueseStemFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PortugueseStemFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_PortugueseStemFilter_init_(t_PortugueseStemFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_PortugueseStemFilter_incrementToken(t_PortugueseStemFilter *self, PyObject *args);

          static PyMethodDef t_PortugueseStemFilter__methods_[] = {
            DECLARE_METHOD(t_PortugueseStemFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PortugueseStemFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PortugueseStemFilter, incrementToken, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(PortugueseStemFilter, t_PortugueseStemFilter, ::org::apache::lucene::analysis::TokenFilter, PortugueseStemFilter, t_PortugueseStemFilter_init_, 0, 0, 0, 0, 0);

          void t_PortugueseStemFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(PortugueseStemFilter), module, "PortugueseStemFilter", 0);
          }

          void t_PortugueseStemFilter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(PortugueseStemFilter).tp_dict, "class_", make_descriptor(PortugueseStemFilter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(PortugueseStemFilter).tp_dict, "wrapfn_", make_descriptor(t_PortugueseStemFilter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(PortugueseStemFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_PortugueseStemFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, PortugueseStemFilter::initializeClass, 1)))
              return NULL;
            return t_PortugueseStemFilter::wrap_Object(PortugueseStemFilter(((t_PortugueseStemFilter *) arg)->object.this$));
          }
          static PyObject *t_PortugueseStemFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, PortugueseStemFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_PortugueseStemFilter_init_(t_PortugueseStemFilter *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            PortugueseStemFilter object((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              INT_CALL(object = PortugueseStemFilter(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_PortugueseStemFilter_incrementToken(t_PortugueseStemFilter *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(PortugueseStemFilter), (PyObject *) self, "incrementToken", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/cn/ChineseFilterFactory.h"
#include "org/apache/lucene/analysis/cn/ChineseFilter.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/String.h"
#include "java/util/Map.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace cn {

          ::java::lang::Class *ChineseFilterFactory::class$ = NULL;
          jmethodID *ChineseFilterFactory::mids$ = NULL;
          bool ChineseFilterFactory::live$ = false;

          jclass ChineseFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/cn/ChineseFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4c9e2b1c] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_08dbb372] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/cn/ChineseFilter;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ChineseFilterFactory::ChineseFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_4c9e2b1c, a0.this$)) {}

          ::org::apache::lucene::analysis::cn::ChineseFilter ChineseFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::cn::ChineseFilter(env->callObjectMethod(this$, mids$[mid_create_08dbb372], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace cn {
          static PyObject *t_ChineseFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_ChineseFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_ChineseFilterFactory_init_(t_ChineseFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_ChineseFilterFactory_create(t_ChineseFilterFactory *self, PyObject *args);

          static PyMethodDef t_ChineseFilterFactory__methods_[] = {
            DECLARE_METHOD(t_ChineseFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ChineseFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ChineseFilterFactory, create, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(ChineseFilterFactory, t_ChineseFilterFactory, ::org::apache::lucene::analysis::util::TokenFilterFactory, ChineseFilterFactory, t_ChineseFilterFactory_init_, 0, 0, 0, 0, 0);

          void t_ChineseFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(ChineseFilterFactory), module, "ChineseFilterFactory", 0);
          }

          void t_ChineseFilterFactory::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(ChineseFilterFactory).tp_dict, "class_", make_descriptor(ChineseFilterFactory::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(ChineseFilterFactory).tp_dict, "wrapfn_", make_descriptor(t_ChineseFilterFactory::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(ChineseFilterFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_ChineseFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, ChineseFilterFactory::initializeClass, 1)))
              return NULL;
            return t_ChineseFilterFactory::wrap_Object(ChineseFilterFactory(((t_ChineseFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_ChineseFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, ChineseFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_ChineseFilterFactory_init_(t_ChineseFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            ChineseFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = ChineseFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_ChineseFilterFactory_create(t_ChineseFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::cn::ChineseFilter result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::cn::t_ChineseFilter::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(ChineseFilterFactory), (PyObject *) self, "create", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/AttributeSource.h"
#include "org/apache/lucene/util/AttributeFactory.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/util/AttributeReflector.h"
#include "org/apache/lucene/util/Attribute.h"
#include "java/util/Iterator.h"
#include "org/apache/lucene/util/AttributeImpl.h"
#include "java/lang/String.h"
#include "org/apache/lucene/util/AttributeSource$State.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *AttributeSource::class$ = NULL;
        jmethodID *AttributeSource::mids$ = NULL;
        bool AttributeSource::live$ = false;
        ::org::apache::lucene::util::AttributeFactory *AttributeSource::DEFAULT_ATTRIBUTE_FACTORY = NULL;

        jclass AttributeSource::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/AttributeSource");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_init$_a5f989be] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/AttributeFactory;)V");
            mids$[mid_addAttribute_2e7bf8aa] = env->getMethodID(cls, "addAttribute", "(Ljava/lang/Class;)Lorg/apache/lucene/util/Attribute;");
            mids$[mid_addAttributeImpl_d86caa9f] = env->getMethodID(cls, "addAttributeImpl", "(Lorg/apache/lucene/util/AttributeImpl;)V");
            mids$[mid_captureState_0f9ed4d4] = env->getMethodID(cls, "captureState", "()Lorg/apache/lucene/util/AttributeSource$State;");
            mids$[mid_clearAttributes_54c6a166] = env->getMethodID(cls, "clearAttributes", "()V");
            mids$[mid_cloneAttributes_f901022b] = env->getMethodID(cls, "cloneAttributes", "()Lorg/apache/lucene/util/AttributeSource;");
            mids$[mid_copyTo_aea2d6ea] = env->getMethodID(cls, "copyTo", "(Lorg/apache/lucene/util/AttributeSource;)V");
            mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
            mids$[mid_getAttribute_2e7bf8aa] = env->getMethodID(cls, "getAttribute", "(Ljava/lang/Class;)Lorg/apache/lucene/util/Attribute;");
            mids$[mid_getAttributeClassesIterator_40858c90] = env->getMethodID(cls, "getAttributeClassesIterator", "()Ljava/util/Iterator;");
            mids$[mid_getAttributeFactory_bb394e5b] = env->getMethodID(cls, "getAttributeFactory", "()Lorg/apache/lucene/util/AttributeFactory;");
            mids$[mid_getAttributeImplsIterator_40858c90] = env->getMethodID(cls, "getAttributeImplsIterator", "()Ljava/util/Iterator;");
            mids$[mid_hasAttribute_a5deaff8] = env->getMethodID(cls, "hasAttribute", "(Ljava/lang/Class;)Z");
            mids$[mid_hasAttributes_54c6a16a] = env->getMethodID(cls, "hasAttributes", "()Z");
            mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
            mids$[mid_reflectAsString_445a175e] = env->getMethodID(cls, "reflectAsString", "(Z)Ljava/lang/String;");
            mids$[mid_reflectWith_5f3f5102] = env->getMethodID(cls, "reflectWith", "(Lorg/apache/lucene/util/AttributeReflector;)V");
            mids$[mid_restoreState_b31fff69] = env->getMethodID(cls, "restoreState", "(Lorg/apache/lucene/util/AttributeSource$State;)V");
            mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

            class$ = (::java::lang::Class *) new JObject(cls);
            cls = (jclass) class$->this$;

            DEFAULT_ATTRIBUTE_FACTORY = new ::org::apache::lucene::util::AttributeFactory(env->getStaticObjectField(cls, "DEFAULT_ATTRIBUTE_FACTORY", "Lorg/apache/lucene/util/AttributeFactory;"));
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        AttributeSource::AttributeSource() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        AttributeSource::AttributeSource(const ::org::apache::lucene::util::AttributeFactory & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_a5f989be, a0.this$)) {}

        ::org::apache::lucene::util::Attribute AttributeSource::addAttribute(const ::java::lang::Class & a0) const
        {
          return ::org::apache::lucene::util::Attribute(env->callObjectMethod(this$, mids$[mid_addAttribute_2e7bf8aa], a0.this$));
        }

        void AttributeSource::addAttributeImpl(const ::org::apache::lucene::util::AttributeImpl & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_addAttributeImpl_d86caa9f], a0.this$);
        }

        ::org::apache::lucene::util::AttributeSource$State AttributeSource::captureState() const
        {
          return ::org::apache::lucene::util::AttributeSource$State(env->callObjectMethod(this$, mids$[mid_captureState_0f9ed4d4]));
        }

        void AttributeSource::clearAttributes() const
        {
          env->callVoidMethod(this$, mids$[mid_clearAttributes_54c6a166]);
        }

        AttributeSource AttributeSource::cloneAttributes() const
        {
          return AttributeSource(env->callObjectMethod(this$, mids$[mid_cloneAttributes_f901022b]));
        }

        void AttributeSource::copyTo(const AttributeSource & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_copyTo_aea2d6ea], a0.this$);
        }

        jboolean AttributeSource::equals(const ::java::lang::Object & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
        }

        ::org::apache::lucene::util::Attribute AttributeSource::getAttribute(const ::java::lang::Class & a0) const
        {
          return ::org::apache::lucene::util::Attribute(env->callObjectMethod(this$, mids$[mid_getAttribute_2e7bf8aa], a0.this$));
        }

        ::java::util::Iterator AttributeSource::getAttributeClassesIterator() const
        {
          return ::java::util::Iterator(env->callObjectMethod(this$, mids$[mid_getAttributeClassesIterator_40858c90]));
        }

        ::org::apache::lucene::util::AttributeFactory AttributeSource::getAttributeFactory() const
        {
          return ::org::apache::lucene::util::AttributeFactory(env->callObjectMethod(this$, mids$[mid_getAttributeFactory_bb394e5b]));
        }

        ::java::util::Iterator AttributeSource::getAttributeImplsIterator() const
        {
          return ::java::util::Iterator(env->callObjectMethod(this$, mids$[mid_getAttributeImplsIterator_40858c90]));
        }

        jboolean AttributeSource::hasAttribute(const ::java::lang::Class & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_hasAttribute_a5deaff8], a0.this$);
        }

        jboolean AttributeSource::hasAttributes() const
        {
          return env->callBooleanMethod(this$, mids$[mid_hasAttributes_54c6a16a]);
        }

        jint AttributeSource::hashCode() const
        {
          return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
        }

        ::java::lang::String AttributeSource::reflectAsString(jboolean a0) const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_reflectAsString_445a175e], a0));
        }

        void AttributeSource::reflectWith(const ::org::apache::lucene::util::AttributeReflector & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_reflectWith_5f3f5102], a0.this$);
        }

        void AttributeSource::restoreState(const ::org::apache::lucene::util::AttributeSource$State & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_restoreState_b31fff69], a0.this$);
        }

        ::java::lang::String AttributeSource::toString() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_AttributeSource_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_AttributeSource_instance_(PyTypeObject *type, PyObject *arg);
        static int t_AttributeSource_init_(t_AttributeSource *self, PyObject *args, PyObject *kwds);
        static PyObject *t_AttributeSource_addAttribute(t_AttributeSource *self, PyObject *arg);
        static PyObject *t_AttributeSource_addAttributeImpl(t_AttributeSource *self, PyObject *arg);
        static PyObject *t_AttributeSource_captureState(t_AttributeSource *self);
        static PyObject *t_AttributeSource_clearAttributes(t_AttributeSource *self);
        static PyObject *t_AttributeSource_cloneAttributes(t_AttributeSource *self);
        static PyObject *t_AttributeSource_copyTo(t_AttributeSource *self, PyObject *arg);
        static PyObject *t_AttributeSource_equals(t_AttributeSource *self, PyObject *args);
        static PyObject *t_AttributeSource_getAttribute(t_AttributeSource *self, PyObject *arg);
        static PyObject *t_AttributeSource_getAttributeClassesIterator(t_AttributeSource *self);
        static PyObject *t_AttributeSource_getAttributeFactory(t_AttributeSource *self);
        static PyObject *t_AttributeSource_getAttributeImplsIterator(t_AttributeSource *self);
        static PyObject *t_AttributeSource_hasAttribute(t_AttributeSource *self, PyObject *arg);
        static PyObject *t_AttributeSource_hasAttributes(t_AttributeSource *self);
        static PyObject *t_AttributeSource_hashCode(t_AttributeSource *self, PyObject *args);
        static PyObject *t_AttributeSource_reflectAsString(t_AttributeSource *self, PyObject *arg);
        static PyObject *t_AttributeSource_reflectWith(t_AttributeSource *self, PyObject *arg);
        static PyObject *t_AttributeSource_restoreState(t_AttributeSource *self, PyObject *arg);
        static PyObject *t_AttributeSource_toString(t_AttributeSource *self, PyObject *args);
        static PyObject *t_AttributeSource_get__attributeClassesIterator(t_AttributeSource *self, void *data);
        static PyObject *t_AttributeSource_get__attributeFactory(t_AttributeSource *self, void *data);
        static PyObject *t_AttributeSource_get__attributeImplsIterator(t_AttributeSource *self, void *data);
        static PyGetSetDef t_AttributeSource__fields_[] = {
          DECLARE_GET_FIELD(t_AttributeSource, attributeClassesIterator),
          DECLARE_GET_FIELD(t_AttributeSource, attributeFactory),
          DECLARE_GET_FIELD(t_AttributeSource, attributeImplsIterator),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_AttributeSource__methods_[] = {
          DECLARE_METHOD(t_AttributeSource, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_AttributeSource, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_AttributeSource, addAttribute, METH_O),
          DECLARE_METHOD(t_AttributeSource, addAttributeImpl, METH_O),
          DECLARE_METHOD(t_AttributeSource, captureState, METH_NOARGS),
          DECLARE_METHOD(t_AttributeSource, clearAttributes, METH_NOARGS),
          DECLARE_METHOD(t_AttributeSource, cloneAttributes, METH_NOARGS),
          DECLARE_METHOD(t_AttributeSource, copyTo, METH_O),
          DECLARE_METHOD(t_AttributeSource, equals, METH_VARARGS),
          DECLARE_METHOD(t_AttributeSource, getAttribute, METH_O),
          DECLARE_METHOD(t_AttributeSource, getAttributeClassesIterator, METH_NOARGS),
          DECLARE_METHOD(t_AttributeSource, getAttributeFactory, METH_NOARGS),
          DECLARE_METHOD(t_AttributeSource, getAttributeImplsIterator, METH_NOARGS),
          DECLARE_METHOD(t_AttributeSource, hasAttribute, METH_O),
          DECLARE_METHOD(t_AttributeSource, hasAttributes, METH_NOARGS),
          DECLARE_METHOD(t_AttributeSource, hashCode, METH_VARARGS),
          DECLARE_METHOD(t_AttributeSource, reflectAsString, METH_O),
          DECLARE_METHOD(t_AttributeSource, reflectWith, METH_O),
          DECLARE_METHOD(t_AttributeSource, restoreState, METH_O),
          DECLARE_METHOD(t_AttributeSource, toString, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(AttributeSource, t_AttributeSource, ::java::lang::Object, AttributeSource, t_AttributeSource_init_, 0, 0, t_AttributeSource__fields_, 0, 0);

        void t_AttributeSource::install(PyObject *module)
        {
          installType(&PY_TYPE(AttributeSource), module, "AttributeSource", 0);
          PyDict_SetItemString(PY_TYPE(AttributeSource).tp_dict, "State", make_descriptor(&PY_TYPE(AttributeSource$State)));
        }

        void t_AttributeSource::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(AttributeSource).tp_dict, "class_", make_descriptor(AttributeSource::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(AttributeSource).tp_dict, "wrapfn_", make_descriptor(t_AttributeSource::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(AttributeSource).tp_dict, "boxfn_", make_descriptor(boxObject));
          env->getClass(AttributeSource::initializeClass);
          PyDict_SetItemString(PY_TYPE(AttributeSource).tp_dict, "DEFAULT_ATTRIBUTE_FACTORY", make_descriptor(::org::apache::lucene::util::t_AttributeFactory::wrap_Object(*AttributeSource::DEFAULT_ATTRIBUTE_FACTORY)));
        }

        static PyObject *t_AttributeSource_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, AttributeSource::initializeClass, 1)))
            return NULL;
          return t_AttributeSource::wrap_Object(AttributeSource(((t_AttributeSource *) arg)->object.this$));
        }
        static PyObject *t_AttributeSource_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, AttributeSource::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_AttributeSource_init_(t_AttributeSource *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 0:
            {
              AttributeSource object((jobject) NULL);

              INT_CALL(object = AttributeSource());
              self->object = object;
              break;
            }
            goto err;
           case 1:
            {
              ::org::apache::lucene::util::AttributeFactory a0((jobject) NULL);
              AttributeSource object((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::util::AttributeFactory::initializeClass, &a0))
              {
                INT_CALL(object = AttributeSource(a0));
                self->object = object;
                break;
              }
            }
           default:
           err:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_AttributeSource_addAttribute(t_AttributeSource *self, PyObject *arg)
        {
          ::java::lang::Class a0((jobject) NULL);
          PyTypeObject **p0;
          ::org::apache::lucene::util::Attribute result((jobject) NULL);

          if (!parseArg(arg, "K", ::java::lang::Class::initializeClass, &a0, &p0, ::java::lang::t_Class::parameters_))
          {
            OBJ_CALL(result = self->object.addAttribute(a0));
            return p0 != NULL && p0[0] != NULL ? wrapType(p0[0], result.this$) : ::org::apache::lucene::util::t_Attribute::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "addAttribute", arg);
          return NULL;
        }

        static PyObject *t_AttributeSource_addAttributeImpl(t_AttributeSource *self, PyObject *arg)
        {
          ::org::apache::lucene::util::AttributeImpl a0((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::util::AttributeImpl::initializeClass, &a0))
          {
            OBJ_CALL(self->object.addAttributeImpl(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "addAttributeImpl", arg);
          return NULL;
        }

        static PyObject *t_AttributeSource_captureState(t_AttributeSource *self)
        {
          ::org::apache::lucene::util::AttributeSource$State result((jobject) NULL);
          OBJ_CALL(result = self->object.captureState());
          return ::org::apache::lucene::util::t_AttributeSource$State::wrap_Object(result);
        }

        static PyObject *t_AttributeSource_clearAttributes(t_AttributeSource *self)
        {
          OBJ_CALL(self->object.clearAttributes());
          Py_RETURN_NONE;
        }

        static PyObject *t_AttributeSource_cloneAttributes(t_AttributeSource *self)
        {
          AttributeSource result((jobject) NULL);
          OBJ_CALL(result = self->object.cloneAttributes());
          return t_AttributeSource::wrap_Object(result);
        }

        static PyObject *t_AttributeSource_copyTo(t_AttributeSource *self, PyObject *arg)
        {
          AttributeSource a0((jobject) NULL);

          if (!parseArg(arg, "k", AttributeSource::initializeClass, &a0))
          {
            OBJ_CALL(self->object.copyTo(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "copyTo", arg);
          return NULL;
        }

        static PyObject *t_AttributeSource_equals(t_AttributeSource *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.equals(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(AttributeSource), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_AttributeSource_getAttribute(t_AttributeSource *self, PyObject *arg)
        {
          ::java::lang::Class a0((jobject) NULL);
          PyTypeObject **p0;
          ::org::apache::lucene::util::Attribute result((jobject) NULL);

          if (!parseArg(arg, "K", ::java::lang::Class::initializeClass, &a0, &p0, ::java::lang::t_Class::parameters_))
          {
            OBJ_CALL(result = self->object.getAttribute(a0));
            return p0 != NULL && p0[0] != NULL ? wrapType(p0[0], result.this$) : ::org::apache::lucene::util::t_Attribute::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "getAttribute", arg);
          return NULL;
        }

        static PyObject *t_AttributeSource_getAttributeClassesIterator(t_AttributeSource *self)
        {
          ::java::util::Iterator result((jobject) NULL);
          OBJ_CALL(result = self->object.getAttributeClassesIterator());
          return ::java::util::t_Iterator::wrap_Object(result);
        }

        static PyObject *t_AttributeSource_getAttributeFactory(t_AttributeSource *self)
        {
          ::org::apache::lucene::util::AttributeFactory result((jobject) NULL);
          OBJ_CALL(result = self->object.getAttributeFactory());
          return ::org::apache::lucene::util::t_AttributeFactory::wrap_Object(result);
        }

        static PyObject *t_AttributeSource_getAttributeImplsIterator(t_AttributeSource *self)
        {
          ::java::util::Iterator result((jobject) NULL);
          OBJ_CALL(result = self->object.getAttributeImplsIterator());
          return ::java::util::t_Iterator::wrap_Object(result, &::org::apache::lucene::util::PY_TYPE(AttributeImpl));
        }

        static PyObject *t_AttributeSource_hasAttribute(t_AttributeSource *self, PyObject *arg)
        {
          ::java::lang::Class a0((jobject) NULL);
          PyTypeObject **p0;
          jboolean result;

          if (!parseArg(arg, "K", ::java::lang::Class::initializeClass, &a0, &p0, ::java::lang::t_Class::parameters_))
          {
            OBJ_CALL(result = self->object.hasAttribute(a0));
            Py_RETURN_BOOL(result);
          }

          PyErr_SetArgsError((PyObject *) self, "hasAttribute", arg);
          return NULL;
        }

        static PyObject *t_AttributeSource_hasAttributes(t_AttributeSource *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.hasAttributes());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_AttributeSource_hashCode(t_AttributeSource *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hashCode());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(AttributeSource), (PyObject *) self, "hashCode", args, 2);
        }

        static PyObject *t_AttributeSource_reflectAsString(t_AttributeSource *self, PyObject *arg)
        {
          jboolean a0;
          ::java::lang::String result((jobject) NULL);

          if (!parseArg(arg, "Z", &a0))
          {
            OBJ_CALL(result = self->object.reflectAsString(a0));
            return j2p(result);
          }

          PyErr_SetArgsError((PyObject *) self, "reflectAsString", arg);
          return NULL;
        }

        static PyObject *t_AttributeSource_reflectWith(t_AttributeSource *self, PyObject *arg)
        {
          ::org::apache::lucene::util::AttributeReflector a0((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::util::AttributeReflector::initializeClass, &a0))
          {
            OBJ_CALL(self->object.reflectWith(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "reflectWith", arg);
          return NULL;
        }

        static PyObject *t_AttributeSource_restoreState(t_AttributeSource *self, PyObject *arg)
        {
          ::org::apache::lucene::util::AttributeSource$State a0((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::util::AttributeSource$State::initializeClass, &a0))
          {
            OBJ_CALL(self->object.restoreState(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "restoreState", arg);
          return NULL;
        }

        static PyObject *t_AttributeSource_toString(t_AttributeSource *self, PyObject *args)
        {
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.toString());
            return j2p(result);
          }

          return callSuper(&PY_TYPE(AttributeSource), (PyObject *) self, "toString", args, 2);
        }

        static PyObject *t_AttributeSource_get__attributeClassesIterator(t_AttributeSource *self, void *data)
        {
          ::java::util::Iterator value((jobject) NULL);
          OBJ_CALL(value = self->object.getAttributeClassesIterator());
          return ::java::util::t_Iterator::wrap_Object(value);
        }

        static PyObject *t_AttributeSource_get__attributeFactory(t_AttributeSource *self, void *data)
        {
          ::org::apache::lucene::util::AttributeFactory value((jobject) NULL);
          OBJ_CALL(value = self->object.getAttributeFactory());
          return ::org::apache::lucene::util::t_AttributeFactory::wrap_Object(value);
        }

        static PyObject *t_AttributeSource_get__attributeImplsIterator(t_AttributeSource *self, void *data)
        {
          ::java::util::Iterator value((jobject) NULL);
          OBJ_CALL(value = self->object.getAttributeImplsIterator());
          return ::java::util::t_Iterator::wrap_Object(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/highlight/WeightedSpanTerm.h"
#include "java/lang/String.h"
#include "org/apache/lucene/search/highlight/PositionSpan.h"
#include "java/util/List.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace highlight {

          ::java::lang::Class *WeightedSpanTerm::class$ = NULL;
          jmethodID *WeightedSpanTerm::mids$ = NULL;
          bool WeightedSpanTerm::live$ = false;

          jclass WeightedSpanTerm::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/highlight/WeightedSpanTerm");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_f3ab5075] = env->getMethodID(cls, "<init>", "(FLjava/lang/String;)V");
              mids$[mid_init$_126740fe] = env->getMethodID(cls, "<init>", "(FLjava/lang/String;Z)V");
              mids$[mid_addPositionSpans_1fde8fc3] = env->getMethodID(cls, "addPositionSpans", "(Ljava/util/List;)V");
              mids$[mid_checkPosition_39c7bd30] = env->getMethodID(cls, "checkPosition", "(I)Z");
              mids$[mid_getPositionSpans_87851566] = env->getMethodID(cls, "getPositionSpans", "()Ljava/util/List;");
              mids$[mid_isPositionSensitive_54c6a16a] = env->getMethodID(cls, "isPositionSensitive", "()Z");
              mids$[mid_setPositionSensitive_bb0c767f] = env->getMethodID(cls, "setPositionSensitive", "(Z)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          WeightedSpanTerm::WeightedSpanTerm(jfloat a0, const ::java::lang::String & a1) : ::org::apache::lucene::search::highlight::WeightedTerm(env->newObject(initializeClass, &mids$, mid_init$_f3ab5075, a0, a1.this$)) {}

          WeightedSpanTerm::WeightedSpanTerm(jfloat a0, const ::java::lang::String & a1, jboolean a2) : ::org::apache::lucene::search::highlight::WeightedTerm(env->newObject(initializeClass, &mids$, mid_init$_126740fe, a0, a1.this$, a2)) {}

          void WeightedSpanTerm::addPositionSpans(const ::java::util::List & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_addPositionSpans_1fde8fc3], a0.this$);
          }

          jboolean WeightedSpanTerm::checkPosition(jint a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_checkPosition_39c7bd30], a0);
          }

          ::java::util::List WeightedSpanTerm::getPositionSpans() const
          {
            return ::java::util::List(env->callObjectMethod(this$, mids$[mid_getPositionSpans_87851566]));
          }

          jboolean WeightedSpanTerm::isPositionSensitive() const
          {
            return env->callBooleanMethod(this$, mids$[mid_isPositionSensitive_54c6a16a]);
          }

          void WeightedSpanTerm::setPositionSensitive(jboolean a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setPositionSensitive_bb0c767f], a0);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace highlight {
          static PyObject *t_WeightedSpanTerm_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_WeightedSpanTerm_instance_(PyTypeObject *type, PyObject *arg);
          static int t_WeightedSpanTerm_init_(t_WeightedSpanTerm *self, PyObject *args, PyObject *kwds);
          static PyObject *t_WeightedSpanTerm_addPositionSpans(t_WeightedSpanTerm *self, PyObject *arg);
          static PyObject *t_WeightedSpanTerm_checkPosition(t_WeightedSpanTerm *self, PyObject *arg);
          static PyObject *t_WeightedSpanTerm_getPositionSpans(t_WeightedSpanTerm *self);
          static PyObject *t_WeightedSpanTerm_isPositionSensitive(t_WeightedSpanTerm *self);
          static PyObject *t_WeightedSpanTerm_setPositionSensitive(t_WeightedSpanTerm *self, PyObject *arg);
          static PyObject *t_WeightedSpanTerm_get__positionSensitive(t_WeightedSpanTerm *self, void *data);
          static int t_WeightedSpanTerm_set__positionSensitive(t_WeightedSpanTerm *self, PyObject *arg, void *data);
          static PyObject *t_WeightedSpanTerm_get__positionSpans(t_WeightedSpanTerm *self, void *data);
          static PyGetSetDef t_WeightedSpanTerm__fields_[] = {
            DECLARE_GETSET_FIELD(t_WeightedSpanTerm, positionSensitive),
            DECLARE_GET_FIELD(t_WeightedSpanTerm, positionSpans),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_WeightedSpanTerm__methods_[] = {
            DECLARE_METHOD(t_WeightedSpanTerm, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_WeightedSpanTerm, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_WeightedSpanTerm, addPositionSpans, METH_O),
            DECLARE_METHOD(t_WeightedSpanTerm, checkPosition, METH_O),
            DECLARE_METHOD(t_WeightedSpanTerm, getPositionSpans, METH_NOARGS),
            DECLARE_METHOD(t_WeightedSpanTerm, isPositionSensitive, METH_NOARGS),
            DECLARE_METHOD(t_WeightedSpanTerm, setPositionSensitive, METH_O),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(WeightedSpanTerm, t_WeightedSpanTerm, ::org::apache::lucene::search::highlight::WeightedTerm, WeightedSpanTerm, t_WeightedSpanTerm_init_, 0, 0, t_WeightedSpanTerm__fields_, 0, 0);

          void t_WeightedSpanTerm::install(PyObject *module)
          {
            installType(&PY_TYPE(WeightedSpanTerm), module, "WeightedSpanTerm", 0);
          }

          void t_WeightedSpanTerm::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(WeightedSpanTerm).tp_dict, "class_", make_descriptor(WeightedSpanTerm::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(WeightedSpanTerm).tp_dict, "wrapfn_", make_descriptor(t_WeightedSpanTerm::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(WeightedSpanTerm).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_WeightedSpanTerm_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, WeightedSpanTerm::initializeClass, 1)))
              return NULL;
            return t_WeightedSpanTerm::wrap_Object(WeightedSpanTerm(((t_WeightedSpanTerm *) arg)->object.this$));
          }
          static PyObject *t_WeightedSpanTerm_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, WeightedSpanTerm::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_WeightedSpanTerm_init_(t_WeightedSpanTerm *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 2:
              {
                jfloat a0;
                ::java::lang::String a1((jobject) NULL);
                WeightedSpanTerm object((jobject) NULL);

                if (!parseArgs(args, "Fs", &a0, &a1))
                {
                  INT_CALL(object = WeightedSpanTerm(a0, a1));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 3:
              {
                jfloat a0;
                ::java::lang::String a1((jobject) NULL);
                jboolean a2;
                WeightedSpanTerm object((jobject) NULL);

                if (!parseArgs(args, "FsZ", &a0, &a1, &a2))
                {
                  INT_CALL(object = WeightedSpanTerm(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_WeightedSpanTerm_addPositionSpans(t_WeightedSpanTerm *self, PyObject *arg)
          {
            ::java::util::List a0((jobject) NULL);
            PyTypeObject **p0;

            if (!parseArg(arg, "K", ::java::util::List::initializeClass, &a0, &p0, ::java::util::t_List::parameters_))
            {
              OBJ_CALL(self->object.addPositionSpans(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "addPositionSpans", arg);
            return NULL;
          }

          static PyObject *t_WeightedSpanTerm_checkPosition(t_WeightedSpanTerm *self, PyObject *arg)
          {
            jint a0;
            jboolean result;

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(result = self->object.checkPosition(a0));
              Py_RETURN_BOOL(result);
            }

            PyErr_SetArgsError((PyObject *) self, "checkPosition", arg);
            return NULL;
          }

          static PyObject *t_WeightedSpanTerm_getPositionSpans(t_WeightedSpanTerm *self)
          {
            ::java::util::List result((jobject) NULL);
            OBJ_CALL(result = self->object.getPositionSpans());
            return ::java::util::t_List::wrap_Object(result, &::org::apache::lucene::search::highlight::PY_TYPE(PositionSpan));
          }

          static PyObject *t_WeightedSpanTerm_isPositionSensitive(t_WeightedSpanTerm *self)
          {
            jboolean result;
            OBJ_CALL(result = self->object.isPositionSensitive());
            Py_RETURN_BOOL(result);
          }

          static PyObject *t_WeightedSpanTerm_setPositionSensitive(t_WeightedSpanTerm *self, PyObject *arg)
          {
            jboolean a0;

            if (!parseArg(arg, "Z", &a0))
            {
              OBJ_CALL(self->object.setPositionSensitive(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setPositionSensitive", arg);
            return NULL;
          }

          static PyObject *t_WeightedSpanTerm_get__positionSensitive(t_WeightedSpanTerm *self, void *data)
          {
            jboolean value;
            OBJ_CALL(value = self->object.isPositionSensitive());
            Py_RETURN_BOOL(value);
          }
          static int t_WeightedSpanTerm_set__positionSensitive(t_WeightedSpanTerm *self, PyObject *arg, void *data)
          {
            {
              jboolean value;
              if (!parseArg(arg, "Z", &value))
              {
                INT_CALL(self->object.setPositionSensitive(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "positionSensitive", arg);
            return -1;
          }

          static PyObject *t_WeightedSpanTerm_get__positionSpans(t_WeightedSpanTerm *self, void *data)
          {
            ::java::util::List value((jobject) NULL);
            OBJ_CALL(value = self->object.getPositionSpans());
            return ::java::util::t_List::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/similarities/AfterEffect$NoAfterEffect.h"
#include "org/apache/lucene/search/similarities/BasicStats.h"
#include "java/lang/String.h"
#include "org/apache/lucene/search/Explanation.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace similarities {

          ::java::lang::Class *AfterEffect$NoAfterEffect::class$ = NULL;
          jmethodID *AfterEffect$NoAfterEffect::mids$ = NULL;
          bool AfterEffect$NoAfterEffect::live$ = false;

          jclass AfterEffect$NoAfterEffect::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/similarities/AfterEffect$NoAfterEffect");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_explain_05d4946a] = env->getMethodID(cls, "explain", "(Lorg/apache/lucene/search/similarities/BasicStats;F)Lorg/apache/lucene/search/Explanation;");
              mids$[mid_score_076760a9] = env->getMethodID(cls, "score", "(Lorg/apache/lucene/search/similarities/BasicStats;F)F");
              mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          AfterEffect$NoAfterEffect::AfterEffect$NoAfterEffect() : ::org::apache::lucene::search::similarities::AfterEffect(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          ::org::apache::lucene::search::Explanation AfterEffect$NoAfterEffect::explain(const ::org::apache::lucene::search::similarities::BasicStats & a0, jfloat a1) const
          {
            return ::org::apache::lucene::search::Explanation(env->callObjectMethod(this$, mids$[mid_explain_05d4946a], a0.this$, a1));
          }

          jfloat AfterEffect$NoAfterEffect::score(const ::org::apache::lucene::search::similarities::BasicStats & a0, jfloat a1) const
          {
            return env->callFloatMethod(this$, mids$[mid_score_076760a9], a0.this$, a1);
          }

          ::java::lang::String AfterEffect$NoAfterEffect::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace similarities {
          static PyObject *t_AfterEffect$NoAfterEffect_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_AfterEffect$NoAfterEffect_instance_(PyTypeObject *type, PyObject *arg);
          static int t_AfterEffect$NoAfterEffect_init_(t_AfterEffect$NoAfterEffect *self, PyObject *args, PyObject *kwds);
          static PyObject *t_AfterEffect$NoAfterEffect_explain(t_AfterEffect$NoAfterEffect *self, PyObject *args);
          static PyObject *t_AfterEffect$NoAfterEffect_score(t_AfterEffect$NoAfterEffect *self, PyObject *args);
          static PyObject *t_AfterEffect$NoAfterEffect_toString(t_AfterEffect$NoAfterEffect *self, PyObject *args);

          static PyMethodDef t_AfterEffect$NoAfterEffect__methods_[] = {
            DECLARE_METHOD(t_AfterEffect$NoAfterEffect, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_AfterEffect$NoAfterEffect, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_AfterEffect$NoAfterEffect, explain, METH_VARARGS),
            DECLARE_METHOD(t_AfterEffect$NoAfterEffect, score, METH_VARARGS),
            DECLARE_METHOD(t_AfterEffect$NoAfterEffect, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(AfterEffect$NoAfterEffect, t_AfterEffect$NoAfterEffect, ::org::apache::lucene::search::similarities::AfterEffect, AfterEffect$NoAfterEffect, t_AfterEffect$NoAfterEffect_init_, 0, 0, 0, 0, 0);

          void t_AfterEffect$NoAfterEffect::install(PyObject *module)
          {
            installType(&PY_TYPE(AfterEffect$NoAfterEffect), module, "AfterEffect$NoAfterEffect", 0);
          }

          void t_AfterEffect$NoAfterEffect::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(AfterEffect$NoAfterEffect).tp_dict, "class_", make_descriptor(AfterEffect$NoAfterEffect::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(AfterEffect$NoAfterEffect).tp_dict, "wrapfn_", make_descriptor(t_AfterEffect$NoAfterEffect::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(AfterEffect$NoAfterEffect).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_AfterEffect$NoAfterEffect_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, AfterEffect$NoAfterEffect::initializeClass, 1)))
              return NULL;
            return t_AfterEffect$NoAfterEffect::wrap_Object(AfterEffect$NoAfterEffect(((t_AfterEffect$NoAfterEffect *) arg)->object.this$));
          }
          static PyObject *t_AfterEffect$NoAfterEffect_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, AfterEffect$NoAfterEffect::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_AfterEffect$NoAfterEffect_init_(t_AfterEffect$NoAfterEffect *self, PyObject *args, PyObject *kwds)
          {
            AfterEffect$NoAfterEffect object((jobject) NULL);

            INT_CALL(object = AfterEffect$NoAfterEffect());
            self->object = object;

            return 0;
          }

          static PyObject *t_AfterEffect$NoAfterEffect_explain(t_AfterEffect$NoAfterEffect *self, PyObject *args)
          {
            ::org::apache::lucene::search::similarities::BasicStats a0((jobject) NULL);
            jfloat a1;
            ::org::apache::lucene::search::Explanation result((jobject) NULL);

            if (!parseArgs(args, "kF", ::org::apache::lucene::search::similarities::BasicStats::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.explain(a0, a1));
              return ::org::apache::lucene::search::t_Explanation::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(AfterEffect$NoAfterEffect), (PyObject *) self, "explain", args, 2);
          }

          static PyObject *t_AfterEffect$NoAfterEffect_score(t_AfterEffect$NoAfterEffect *self, PyObject *args)
          {
            ::org::apache::lucene::search::similarities::BasicStats a0((jobject) NULL);
            jfloat a1;
            jfloat result;

            if (!parseArgs(args, "kF", ::org::apache::lucene::search::similarities::BasicStats::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.score(a0, a1));
              return PyFloat_FromDouble((double) result);
            }

            return callSuper(&PY_TYPE(AfterEffect$NoAfterEffect), (PyObject *) self, "score", args, 2);
          }

          static PyObject *t_AfterEffect$NoAfterEffect_toString(t_AfterEffect$NoAfterEffect *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(&PY_TYPE(AfterEffect$NoAfterEffect), (PyObject *) self, "toString", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/packed/PackedDataOutput.h"
#include "org/apache/lucene/store/DataOutput.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace packed {

          ::java::lang::Class *PackedDataOutput::class$ = NULL;
          jmethodID *PackedDataOutput::mids$ = NULL;
          bool PackedDataOutput::live$ = false;

          jclass PackedDataOutput::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/util/packed/PackedDataOutput");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_27875f57] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/store/DataOutput;)V");
              mids$[mid_flush_54c6a166] = env->getMethodID(cls, "flush", "()V");
              mids$[mid_writeLong_25d05c8f] = env->getMethodID(cls, "writeLong", "(JI)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          PackedDataOutput::PackedDataOutput(const ::org::apache::lucene::store::DataOutput & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_27875f57, a0.this$)) {}

          void PackedDataOutput::flush() const
          {
            env->callVoidMethod(this$, mids$[mid_flush_54c6a166]);
          }

          void PackedDataOutput::writeLong(jlong a0, jint a1) const
          {
            env->callVoidMethod(this$, mids$[mid_writeLong_25d05c8f], a0, a1);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace packed {
          static PyObject *t_PackedDataOutput_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PackedDataOutput_instance_(PyTypeObject *type, PyObject *arg);
          static int t_PackedDataOutput_init_(t_PackedDataOutput *self, PyObject *args, PyObject *kwds);
          static PyObject *t_PackedDataOutput_flush(t_PackedDataOutput *self);
          static PyObject *t_PackedDataOutput_writeLong(t_PackedDataOutput *self, PyObject *args);

          static PyMethodDef t_PackedDataOutput__methods_[] = {
            DECLARE_METHOD(t_PackedDataOutput, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PackedDataOutput, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PackedDataOutput, flush, METH_NOARGS),
            DECLARE_METHOD(t_PackedDataOutput, writeLong, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(PackedDataOutput, t_PackedDataOutput, ::java::lang::Object, PackedDataOutput, t_PackedDataOutput_init_, 0, 0, 0, 0, 0);

          void t_PackedDataOutput::install(PyObject *module)
          {
            installType(&PY_TYPE(PackedDataOutput), module, "PackedDataOutput", 0);
          }

          void t_PackedDataOutput::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(PackedDataOutput).tp_dict, "class_", make_descriptor(PackedDataOutput::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(PackedDataOutput).tp_dict, "wrapfn_", make_descriptor(t_PackedDataOutput::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(PackedDataOutput).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_PackedDataOutput_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, PackedDataOutput::initializeClass, 1)))
              return NULL;
            return t_PackedDataOutput::wrap_Object(PackedDataOutput(((t_PackedDataOutput *) arg)->object.this$));
          }
          static PyObject *t_PackedDataOutput_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, PackedDataOutput::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_PackedDataOutput_init_(t_PackedDataOutput *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::store::DataOutput a0((jobject) NULL);
            PackedDataOutput object((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::store::DataOutput::initializeClass, &a0))
            {
              INT_CALL(object = PackedDataOutput(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_PackedDataOutput_flush(t_PackedDataOutput *self)
          {
            OBJ_CALL(self->object.flush());
            Py_RETURN_NONE;
          }

          static PyObject *t_PackedDataOutput_writeLong(t_PackedDataOutput *self, PyObject *args)
          {
            jlong a0;
            jint a1;

            if (!parseArgs(args, "JI", &a0, &a1))
            {
              OBJ_CALL(self->object.writeLong(a0, a1));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "writeLong", args);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/miscellaneous/StemmerOverrideFilter.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/miscellaneous/StemmerOverrideFilter$StemmerOverrideMap.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {

          ::java::lang::Class *StemmerOverrideFilter::class$ = NULL;
          jmethodID *StemmerOverrideFilter::mids$ = NULL;
          bool StemmerOverrideFilter::live$ = false;

          jclass StemmerOverrideFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/miscellaneous/StemmerOverrideFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_d4e7ec87] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;Lorg/apache/lucene/analysis/miscellaneous/StemmerOverrideFilter$StemmerOverrideMap;)V");
              mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          StemmerOverrideFilter::StemmerOverrideFilter(const ::org::apache::lucene::analysis::TokenStream & a0, const ::org::apache::lucene::analysis::miscellaneous::StemmerOverrideFilter$StemmerOverrideMap & a1) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_d4e7ec87, a0.this$, a1.this$)) {}

          jboolean StemmerOverrideFilter::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_54c6a16a]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"
#include "org/apache/lucene/analysis/miscellaneous/StemmerOverrideFilter$Builder.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {
          static PyObject *t_StemmerOverrideFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_StemmerOverrideFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_StemmerOverrideFilter_init_(t_StemmerOverrideFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_StemmerOverrideFilter_incrementToken(t_StemmerOverrideFilter *self, PyObject *args);

          static PyMethodDef t_StemmerOverrideFilter__methods_[] = {
            DECLARE_METHOD(t_StemmerOverrideFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_StemmerOverrideFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_StemmerOverrideFilter, incrementToken, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(StemmerOverrideFilter, t_StemmerOverrideFilter, ::org::apache::lucene::analysis::TokenFilter, StemmerOverrideFilter, t_StemmerOverrideFilter_init_, 0, 0, 0, 0, 0);

          void t_StemmerOverrideFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(StemmerOverrideFilter), module, "StemmerOverrideFilter", 0);
            PyDict_SetItemString(PY_TYPE(StemmerOverrideFilter).tp_dict, "Builder", make_descriptor(&PY_TYPE(StemmerOverrideFilter$Builder)));
            PyDict_SetItemString(PY_TYPE(StemmerOverrideFilter).tp_dict, "StemmerOverrideMap", make_descriptor(&PY_TYPE(StemmerOverrideFilter$StemmerOverrideMap)));
          }

          void t_StemmerOverrideFilter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(StemmerOverrideFilter).tp_dict, "class_", make_descriptor(StemmerOverrideFilter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(StemmerOverrideFilter).tp_dict, "wrapfn_", make_descriptor(t_StemmerOverrideFilter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(StemmerOverrideFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_StemmerOverrideFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, StemmerOverrideFilter::initializeClass, 1)))
              return NULL;
            return t_StemmerOverrideFilter::wrap_Object(StemmerOverrideFilter(((t_StemmerOverrideFilter *) arg)->object.this$));
          }
          static PyObject *t_StemmerOverrideFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, StemmerOverrideFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_StemmerOverrideFilter_init_(t_StemmerOverrideFilter *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::miscellaneous::StemmerOverrideFilter$StemmerOverrideMap a1((jobject) NULL);
            StemmerOverrideFilter object((jobject) NULL);

            if (!parseArgs(args, "kk", ::org::apache::lucene::analysis::TokenStream::initializeClass, ::org::apache::lucene::analysis::miscellaneous::StemmerOverrideFilter$StemmerOverrideMap::initializeClass, &a0, &a1))
            {
              INT_CALL(object = StemmerOverrideFilter(a0, a1));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_StemmerOverrideFilter_incrementToken(t_StemmerOverrideFilter *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(StemmerOverrideFilter), (PyObject *) self, "incrementToken", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/FilterScorer.h"
#include "org/apache/lucene/search/Scorer$ChildScorer.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/util/AttributeSource.h"
#include "java/util/Collection.h"
#include "java/io/IOException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *FilterScorer::class$ = NULL;
        jmethodID *FilterScorer::mids$ = NULL;
        bool FilterScorer::live$ = false;

        jclass FilterScorer::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/FilterScorer");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_8be0880c] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/Scorer;)V");
            mids$[mid_advance_39c7bd23] = env->getMethodID(cls, "advance", "(I)I");
            mids$[mid_attributes_f901022b] = env->getMethodID(cls, "attributes", "()Lorg/apache/lucene/util/AttributeSource;");
            mids$[mid_cost_54c6a17a] = env->getMethodID(cls, "cost", "()J");
            mids$[mid_docID_54c6a179] = env->getMethodID(cls, "docID", "()I");
            mids$[mid_freq_54c6a179] = env->getMethodID(cls, "freq", "()I");
            mids$[mid_getChildren_2d2d7de4] = env->getMethodID(cls, "getChildren", "()Ljava/util/Collection;");
            mids$[mid_nextDoc_54c6a179] = env->getMethodID(cls, "nextDoc", "()I");
            mids$[mid_score_54c6a176] = env->getMethodID(cls, "score", "()F");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        FilterScorer::FilterScorer(const ::org::apache::lucene::search::Scorer & a0) : ::org::apache::lucene::search::Scorer(env->newObject(initializeClass, &mids$, mid_init$_8be0880c, a0.this$)) {}

        jint FilterScorer::advance(jint a0) const
        {
          return env->callIntMethod(this$, mids$[mid_advance_39c7bd23], a0);
        }

        ::org::apache::lucene::util::AttributeSource FilterScorer::attributes() const
        {
          return ::org::apache::lucene::util::AttributeSource(env->callObjectMethod(this$, mids$[mid_attributes_f901022b]));
        }

        jlong FilterScorer::cost() const
        {
          return env->callLongMethod(this$, mids$[mid_cost_54c6a17a]);
        }

        jint FilterScorer::docID() const
        {
          return env->callIntMethod(this$, mids$[mid_docID_54c6a179]);
        }

        jint FilterScorer::freq() const
        {
          return env->callIntMethod(this$, mids$[mid_freq_54c6a179]);
        }

        ::java::util::Collection FilterScorer::getChildren() const
        {
          return ::java::util::Collection(env->callObjectMethod(this$, mids$[mid_getChildren_2d2d7de4]));
        }

        jint FilterScorer::nextDoc() const
        {
          return env->callIntMethod(this$, mids$[mid_nextDoc_54c6a179]);
        }

        jfloat FilterScorer::score() const
        {
          return env->callFloatMethod(this$, mids$[mid_score_54c6a176]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_FilterScorer_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FilterScorer_instance_(PyTypeObject *type, PyObject *arg);
        static int t_FilterScorer_init_(t_FilterScorer *self, PyObject *args, PyObject *kwds);
        static PyObject *t_FilterScorer_advance(t_FilterScorer *self, PyObject *args);
        static PyObject *t_FilterScorer_attributes(t_FilterScorer *self, PyObject *args);
        static PyObject *t_FilterScorer_cost(t_FilterScorer *self, PyObject *args);
        static PyObject *t_FilterScorer_docID(t_FilterScorer *self, PyObject *args);
        static PyObject *t_FilterScorer_freq(t_FilterScorer *self, PyObject *args);
        static PyObject *t_FilterScorer_getChildren(t_FilterScorer *self, PyObject *args);
        static PyObject *t_FilterScorer_nextDoc(t_FilterScorer *self, PyObject *args);
        static PyObject *t_FilterScorer_score(t_FilterScorer *self, PyObject *args);
        static PyObject *t_FilterScorer_get__children(t_FilterScorer *self, void *data);
        static PyGetSetDef t_FilterScorer__fields_[] = {
          DECLARE_GET_FIELD(t_FilterScorer, children),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_FilterScorer__methods_[] = {
          DECLARE_METHOD(t_FilterScorer, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FilterScorer, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FilterScorer, advance, METH_VARARGS),
          DECLARE_METHOD(t_FilterScorer, attributes, METH_VARARGS),
          DECLARE_METHOD(t_FilterScorer, cost, METH_VARARGS),
          DECLARE_METHOD(t_FilterScorer, docID, METH_VARARGS),
          DECLARE_METHOD(t_FilterScorer, freq, METH_VARARGS),
          DECLARE_METHOD(t_FilterScorer, getChildren, METH_VARARGS),
          DECLARE_METHOD(t_FilterScorer, nextDoc, METH_VARARGS),
          DECLARE_METHOD(t_FilterScorer, score, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(FilterScorer, t_FilterScorer, ::org::apache::lucene::search::Scorer, FilterScorer, t_FilterScorer_init_, 0, 0, t_FilterScorer__fields_, 0, 0);

        void t_FilterScorer::install(PyObject *module)
        {
          installType(&PY_TYPE(FilterScorer), module, "FilterScorer", 0);
        }

        void t_FilterScorer::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(FilterScorer).tp_dict, "class_", make_descriptor(FilterScorer::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(FilterScorer).tp_dict, "wrapfn_", make_descriptor(t_FilterScorer::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(FilterScorer).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_FilterScorer_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, FilterScorer::initializeClass, 1)))
            return NULL;
          return t_FilterScorer::wrap_Object(FilterScorer(((t_FilterScorer *) arg)->object.this$));
        }
        static PyObject *t_FilterScorer_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, FilterScorer::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_FilterScorer_init_(t_FilterScorer *self, PyObject *args, PyObject *kwds)
        {
          ::org::apache::lucene::search::Scorer a0((jobject) NULL);
          FilterScorer object((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::search::Scorer::initializeClass, &a0))
          {
            INT_CALL(object = FilterScorer(a0));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_FilterScorer_advance(t_FilterScorer *self, PyObject *args)
        {
          jint a0;
          jint result;

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(result = self->object.advance(a0));
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(FilterScorer), (PyObject *) self, "advance", args, 2);
        }

        static PyObject *t_FilterScorer_attributes(t_FilterScorer *self, PyObject *args)
        {
          ::org::apache::lucene::util::AttributeSource result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.attributes());
            return ::org::apache::lucene::util::t_AttributeSource::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(FilterScorer), (PyObject *) self, "attributes", args, 2);
        }

        static PyObject *t_FilterScorer_cost(t_FilterScorer *self, PyObject *args)
        {
          jlong result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.cost());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          return callSuper(&PY_TYPE(FilterScorer), (PyObject *) self, "cost", args, 2);
        }

        static PyObject *t_FilterScorer_docID(t_FilterScorer *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.docID());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(FilterScorer), (PyObject *) self, "docID", args, 2);
        }

        static PyObject *t_FilterScorer_freq(t_FilterScorer *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.freq());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(FilterScorer), (PyObject *) self, "freq", args, 2);
        }

        static PyObject *t_FilterScorer_getChildren(t_FilterScorer *self, PyObject *args)
        {
          ::java::util::Collection result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.getChildren());
            return ::java::util::t_Collection::wrap_Object(result, &::org::apache::lucene::search::PY_TYPE(Scorer$ChildScorer));
          }

          return callSuper(&PY_TYPE(FilterScorer), (PyObject *) self, "getChildren", args, 2);
        }

        static PyObject *t_FilterScorer_nextDoc(t_FilterScorer *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.nextDoc());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(FilterScorer), (PyObject *) self, "nextDoc", args, 2);
        }

        static PyObject *t_FilterScorer_score(t_FilterScorer *self, PyObject *args)
        {
          jfloat result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.score());
            return PyFloat_FromDouble((double) result);
          }

          return callSuper(&PY_TYPE(FilterScorer), (PyObject *) self, "score", args, 2);
        }

        static PyObject *t_FilterScorer_get__children(t_FilterScorer *self, void *data)
        {
          ::java::util::Collection value((jobject) NULL);
          OBJ_CALL(value = self->object.getChildren());
          return ::java::util::t_Collection::wrap_Object(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/NumericTokenStream$NumericTermAttribute.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {

        ::java::lang::Class *NumericTokenStream$NumericTermAttribute::class$ = NULL;
        jmethodID *NumericTokenStream$NumericTermAttribute::mids$ = NULL;
        bool NumericTokenStream$NumericTermAttribute::live$ = false;

        jclass NumericTokenStream$NumericTermAttribute::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/NumericTokenStream$NumericTermAttribute");

            mids$ = new jmethodID[max_mid];
            mids$[mid_getRawValue_54c6a17a] = env->getMethodID(cls, "getRawValue", "()J");
            mids$[mid_getShift_54c6a179] = env->getMethodID(cls, "getShift", "()I");
            mids$[mid_getValueSize_54c6a179] = env->getMethodID(cls, "getValueSize", "()I");
            mids$[mid_incShift_54c6a179] = env->getMethodID(cls, "incShift", "()I");
            mids$[mid_init_72e1d373] = env->getMethodID(cls, "init", "(JIII)V");
            mids$[mid_setShift_39c7bd3c] = env->getMethodID(cls, "setShift", "(I)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        jlong NumericTokenStream$NumericTermAttribute::getRawValue() const
        {
          return env->callLongMethod(this$, mids$[mid_getRawValue_54c6a17a]);
        }

        jint NumericTokenStream$NumericTermAttribute::getShift() const
        {
          return env->callIntMethod(this$, mids$[mid_getShift_54c6a179]);
        }

        jint NumericTokenStream$NumericTermAttribute::getValueSize() const
        {
          return env->callIntMethod(this$, mids$[mid_getValueSize_54c6a179]);
        }

        jint NumericTokenStream$NumericTermAttribute::incShift() const
        {
          return env->callIntMethod(this$, mids$[mid_incShift_54c6a179]);
        }

        void NumericTokenStream$NumericTermAttribute::init(jlong a0, jint a1, jint a2, jint a3) const
        {
          env->callVoidMethod(this$, mids$[mid_init_72e1d373], a0, a1, a2, a3);
        }

        void NumericTokenStream$NumericTermAttribute::setShift(jint a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setShift_39c7bd3c], a0);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        static PyObject *t_NumericTokenStream$NumericTermAttribute_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_NumericTokenStream$NumericTermAttribute_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_NumericTokenStream$NumericTermAttribute_getRawValue(t_NumericTokenStream$NumericTermAttribute *self);
        static PyObject *t_NumericTokenStream$NumericTermAttribute_getShift(t_NumericTokenStream$NumericTermAttribute *self);
        static PyObject *t_NumericTokenStream$NumericTermAttribute_getValueSize(t_NumericTokenStream$NumericTermAttribute *self);
        static PyObject *t_NumericTokenStream$NumericTermAttribute_incShift(t_NumericTokenStream$NumericTermAttribute *self);
        static PyObject *t_NumericTokenStream$NumericTermAttribute_init(t_NumericTokenStream$NumericTermAttribute *self, PyObject *args);
        static PyObject *t_NumericTokenStream$NumericTermAttribute_setShift(t_NumericTokenStream$NumericTermAttribute *self, PyObject *arg);
        static PyObject *t_NumericTokenStream$NumericTermAttribute_get__rawValue(t_NumericTokenStream$NumericTermAttribute *self, void *data);
        static PyObject *t_NumericTokenStream$NumericTermAttribute_get__shift(t_NumericTokenStream$NumericTermAttribute *self, void *data);
        static int t_NumericTokenStream$NumericTermAttribute_set__shift(t_NumericTokenStream$NumericTermAttribute *self, PyObject *arg, void *data);
        static PyObject *t_NumericTokenStream$NumericTermAttribute_get__valueSize(t_NumericTokenStream$NumericTermAttribute *self, void *data);
        static PyGetSetDef t_NumericTokenStream$NumericTermAttribute__fields_[] = {
          DECLARE_GET_FIELD(t_NumericTokenStream$NumericTermAttribute, rawValue),
          DECLARE_GETSET_FIELD(t_NumericTokenStream$NumericTermAttribute, shift),
          DECLARE_GET_FIELD(t_NumericTokenStream$NumericTermAttribute, valueSize),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_NumericTokenStream$NumericTermAttribute__methods_[] = {
          DECLARE_METHOD(t_NumericTokenStream$NumericTermAttribute, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_NumericTokenStream$NumericTermAttribute, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_NumericTokenStream$NumericTermAttribute, getRawValue, METH_NOARGS),
          DECLARE_METHOD(t_NumericTokenStream$NumericTermAttribute, getShift, METH_NOARGS),
          DECLARE_METHOD(t_NumericTokenStream$NumericTermAttribute, getValueSize, METH_NOARGS),
          DECLARE_METHOD(t_NumericTokenStream$NumericTermAttribute, incShift, METH_NOARGS),
          DECLARE_METHOD(t_NumericTokenStream$NumericTermAttribute, init, METH_VARARGS),
          DECLARE_METHOD(t_NumericTokenStream$NumericTermAttribute, setShift, METH_O),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(NumericTokenStream$NumericTermAttribute, t_NumericTokenStream$NumericTermAttribute, ::org::apache::lucene::util::Attribute, NumericTokenStream$NumericTermAttribute, abstract_init, 0, 0, t_NumericTokenStream$NumericTermAttribute__fields_, 0, 0);

        void t_NumericTokenStream$NumericTermAttribute::install(PyObject *module)
        {
          installType(&PY_TYPE(NumericTokenStream$NumericTermAttribute), module, "NumericTokenStream$NumericTermAttribute", 0);
        }

        void t_NumericTokenStream$NumericTermAttribute::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(NumericTokenStream$NumericTermAttribute).tp_dict, "class_", make_descriptor(NumericTokenStream$NumericTermAttribute::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(NumericTokenStream$NumericTermAttribute).tp_dict, "wrapfn_", make_descriptor(t_NumericTokenStream$NumericTermAttribute::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(NumericTokenStream$NumericTermAttribute).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_NumericTokenStream$NumericTermAttribute_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, NumericTokenStream$NumericTermAttribute::initializeClass, 1)))
            return NULL;
          return t_NumericTokenStream$NumericTermAttribute::wrap_Object(NumericTokenStream$NumericTermAttribute(((t_NumericTokenStream$NumericTermAttribute *) arg)->object.this$));
        }
        static PyObject *t_NumericTokenStream$NumericTermAttribute_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, NumericTokenStream$NumericTermAttribute::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_NumericTokenStream$NumericTermAttribute_getRawValue(t_NumericTokenStream$NumericTermAttribute *self)
        {
          jlong result;
          OBJ_CALL(result = self->object.getRawValue());
          return PyLong_FromLongLong((PY_LONG_LONG) result);
        }

        static PyObject *t_NumericTokenStream$NumericTermAttribute_getShift(t_NumericTokenStream$NumericTermAttribute *self)
        {
          jint result;
          OBJ_CALL(result = self->object.getShift());
          return PyInt_FromLong((long) result);
        }

        static PyObject *t_NumericTokenStream$NumericTermAttribute_getValueSize(t_NumericTokenStream$NumericTermAttribute *self)
        {
          jint result;
          OBJ_CALL(result = self->object.getValueSize());
          return PyInt_FromLong((long) result);
        }

        static PyObject *t_NumericTokenStream$NumericTermAttribute_incShift(t_NumericTokenStream$NumericTermAttribute *self)
        {
          jint result;
          OBJ_CALL(result = self->object.incShift());
          return PyInt_FromLong((long) result);
        }

        static PyObject *t_NumericTokenStream$NumericTermAttribute_init(t_NumericTokenStream$NumericTermAttribute *self, PyObject *args)
        {
          jlong a0;
          jint a1;
          jint a2;
          jint a3;

          if (!parseArgs(args, "JIII", &a0, &a1, &a2, &a3))
          {
            OBJ_CALL(self->object.init(a0, a1, a2, a3));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "init", args);
          return NULL;
        }

        static PyObject *t_NumericTokenStream$NumericTermAttribute_setShift(t_NumericTokenStream$NumericTermAttribute *self, PyObject *arg)
        {
          jint a0;

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(self->object.setShift(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setShift", arg);
          return NULL;
        }

        static PyObject *t_NumericTokenStream$NumericTermAttribute_get__rawValue(t_NumericTokenStream$NumericTermAttribute *self, void *data)
        {
          jlong value;
          OBJ_CALL(value = self->object.getRawValue());
          return PyLong_FromLongLong((PY_LONG_LONG) value);
        }

        static PyObject *t_NumericTokenStream$NumericTermAttribute_get__shift(t_NumericTokenStream$NumericTermAttribute *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object.getShift());
          return PyInt_FromLong((long) value);
        }
        static int t_NumericTokenStream$NumericTermAttribute_set__shift(t_NumericTokenStream$NumericTermAttribute *self, PyObject *arg, void *data)
        {
          {
            jint value;
            if (!parseArg(arg, "I", &value))
            {
              INT_CALL(self->object.setShift(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "shift", arg);
          return -1;
        }

        static PyObject *t_NumericTokenStream$NumericTermAttribute_get__valueSize(t_NumericTokenStream$NumericTermAttribute *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object.getValueSize());
          return PyInt_FromLong((long) value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/charfilter/HTMLStripCharFilter.h"
#include "java/util/Set.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "java/io/Reader.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace charfilter {

          ::java::lang::Class *HTMLStripCharFilter::class$ = NULL;
          jmethodID *HTMLStripCharFilter::mids$ = NULL;
          bool HTMLStripCharFilter::live$ = false;

          jclass HTMLStripCharFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/charfilter/HTMLStripCharFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_cf2e3c10] = env->getMethodID(cls, "<init>", "(Ljava/io/Reader;)V");
              mids$[mid_init$_2df021b4] = env->getMethodID(cls, "<init>", "(Ljava/io/Reader;Ljava/util/Set;)V");
              mids$[mid_close_54c6a166] = env->getMethodID(cls, "close", "()V");
              mids$[mid_read_54c6a179] = env->getMethodID(cls, "read", "()I");
              mids$[mid_read_6f0bb349] = env->getMethodID(cls, "read", "([CII)I");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          HTMLStripCharFilter::HTMLStripCharFilter(const ::java::io::Reader & a0) : ::org::apache::lucene::analysis::charfilter::BaseCharFilter(env->newObject(initializeClass, &mids$, mid_init$_cf2e3c10, a0.this$)) {}

          HTMLStripCharFilter::HTMLStripCharFilter(const ::java::io::Reader & a0, const ::java::util::Set & a1) : ::org::apache::lucene::analysis::charfilter::BaseCharFilter(env->newObject(initializeClass, &mids$, mid_init$_2df021b4, a0.this$, a1.this$)) {}

          void HTMLStripCharFilter::close() const
          {
            env->callVoidMethod(this$, mids$[mid_close_54c6a166]);
          }

          jint HTMLStripCharFilter::read() const
          {
            return env->callIntMethod(this$, mids$[mid_read_54c6a179]);
          }

          jint HTMLStripCharFilter::read(const JArray< jchar > & a0, jint a1, jint a2) const
          {
            return env->callIntMethod(this$, mids$[mid_read_6f0bb349], a0.this$, a1, a2);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace charfilter {
          static PyObject *t_HTMLStripCharFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_HTMLStripCharFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_HTMLStripCharFilter_init_(t_HTMLStripCharFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_HTMLStripCharFilter_close(t_HTMLStripCharFilter *self, PyObject *args);
          static PyObject *t_HTMLStripCharFilter_read(t_HTMLStripCharFilter *self, PyObject *args);

          static PyMethodDef t_HTMLStripCharFilter__methods_[] = {
            DECLARE_METHOD(t_HTMLStripCharFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_HTMLStripCharFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_HTMLStripCharFilter, close, METH_VARARGS),
            DECLARE_METHOD(t_HTMLStripCharFilter, read, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(HTMLStripCharFilter, t_HTMLStripCharFilter, ::org::apache::lucene::analysis::charfilter::BaseCharFilter, HTMLStripCharFilter, t_HTMLStripCharFilter_init_, 0, 0, 0, 0, 0);

          void t_HTMLStripCharFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(HTMLStripCharFilter), module, "HTMLStripCharFilter", 0);
          }

          void t_HTMLStripCharFilter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(HTMLStripCharFilter).tp_dict, "class_", make_descriptor(HTMLStripCharFilter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(HTMLStripCharFilter).tp_dict, "wrapfn_", make_descriptor(t_HTMLStripCharFilter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(HTMLStripCharFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_HTMLStripCharFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, HTMLStripCharFilter::initializeClass, 1)))
              return NULL;
            return t_HTMLStripCharFilter::wrap_Object(HTMLStripCharFilter(((t_HTMLStripCharFilter *) arg)->object.this$));
          }
          static PyObject *t_HTMLStripCharFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, HTMLStripCharFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_HTMLStripCharFilter_init_(t_HTMLStripCharFilter *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::java::io::Reader a0((jobject) NULL);
                HTMLStripCharFilter object((jobject) NULL);

                if (!parseArgs(args, "k", ::java::io::Reader::initializeClass, &a0))
                {
                  INT_CALL(object = HTMLStripCharFilter(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 2:
              {
                ::java::io::Reader a0((jobject) NULL);
                ::java::util::Set a1((jobject) NULL);
                PyTypeObject **p1;
                HTMLStripCharFilter object((jobject) NULL);

                if (!parseArgs(args, "kK", ::java::io::Reader::initializeClass, ::java::util::Set::initializeClass, &a0, &a1, &p1, ::java::util::t_Set::parameters_))
                {
                  INT_CALL(object = HTMLStripCharFilter(a0, a1));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_HTMLStripCharFilter_close(t_HTMLStripCharFilter *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.close());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(HTMLStripCharFilter), (PyObject *) self, "close", args, 2);
          }

          static PyObject *t_HTMLStripCharFilter_read(t_HTMLStripCharFilter *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 0:
              {
                jint result;
                OBJ_CALL(result = self->object.read());
                return PyInt_FromLong((long) result);
              }
              break;
             case 3:
              {
                JArray< jchar > a0((jobject) NULL);
                jint a1;
                jint a2;
                jint result;

                if (!parseArgs(args, "[CII", &a0, &a1, &a2))
                {
                  OBJ_CALL(result = self->object.read(a0, a1, a2));
                  return PyInt_FromLong((long) result);
                }
              }
            }

            return callSuper(&PY_TYPE(HTMLStripCharFilter), (PyObject *) self, "read", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/core/QueryNodeException.h"
#include "org/apache/lucene/queryparser/flexible/messages/Message.h"
#include "java/util/Locale.h"
#include "org/apache/lucene/queryparser/flexible/messages/NLSException.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "java/lang/Throwable.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {

            ::java::lang::Class *QueryNodeException::class$ = NULL;
            jmethodID *QueryNodeException::mids$ = NULL;
            bool QueryNodeException::live$ = false;

            jclass QueryNodeException::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/core/QueryNodeException");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_c5ec8ca4] = env->getMethodID(cls, "<init>", "(Ljava/lang/Throwable;)V");
                mids$[mid_init$_1dde9d59] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/queryparser/flexible/messages/Message;)V");
                mids$[mid_init$_41dcc0ed] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/queryparser/flexible/messages/Message;Ljava/lang/Throwable;)V");
                mids$[mid_getLocalizedMessage_14c7b5c5] = env->getMethodID(cls, "getLocalizedMessage", "()Ljava/lang/String;");
                mids$[mid_getLocalizedMessage_c0fb304e] = env->getMethodID(cls, "getLocalizedMessage", "(Ljava/util/Locale;)Ljava/lang/String;");
                mids$[mid_getMessage_14c7b5c5] = env->getMethodID(cls, "getMessage", "()Ljava/lang/String;");
                mids$[mid_getMessageObject_1bceed44] = env->getMethodID(cls, "getMessageObject", "()Lorg/apache/lucene/queryparser/flexible/messages/Message;");
                mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            QueryNodeException::QueryNodeException(const ::java::lang::Throwable & a0) : ::java::lang::Exception(env->newObject(initializeClass, &mids$, mid_init$_c5ec8ca4, a0.this$)) {}

            QueryNodeException::QueryNodeException(const ::org::apache::lucene::queryparser::flexible::messages::Message & a0) : ::java::lang::Exception(env->newObject(initializeClass, &mids$, mid_init$_1dde9d59, a0.this$)) {}

            QueryNodeException::QueryNodeException(const ::org::apache::lucene::queryparser::flexible::messages::Message & a0, const ::java::lang::Throwable & a1) : ::java::lang::Exception(env->newObject(initializeClass, &mids$, mid_init$_41dcc0ed, a0.this$, a1.this$)) {}

            ::java::lang::String QueryNodeException::getLocalizedMessage() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getLocalizedMessage_14c7b5c5]));
            }

            ::java::lang::String QueryNodeException::getLocalizedMessage(const ::java::util::Locale & a0) const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getLocalizedMessage_c0fb304e], a0.this$));
            }

            ::java::lang::String QueryNodeException::getMessage() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getMessage_14c7b5c5]));
            }

            ::org::apache::lucene::queryparser::flexible::messages::Message QueryNodeException::getMessageObject() const
            {
              return ::org::apache::lucene::queryparser::flexible::messages::Message(env->callObjectMethod(this$, mids$[mid_getMessageObject_1bceed44]));
            }

            ::java::lang::String QueryNodeException::toString() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            static PyObject *t_QueryNodeException_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_QueryNodeException_instance_(PyTypeObject *type, PyObject *arg);
            static int t_QueryNodeException_init_(t_QueryNodeException *self, PyObject *args, PyObject *kwds);
            static PyObject *t_QueryNodeException_getLocalizedMessage(t_QueryNodeException *self, PyObject *args);
            static PyObject *t_QueryNodeException_getMessage(t_QueryNodeException *self, PyObject *args);
            static PyObject *t_QueryNodeException_getMessageObject(t_QueryNodeException *self);
            static PyObject *t_QueryNodeException_toString(t_QueryNodeException *self, PyObject *args);
            static PyObject *t_QueryNodeException_get__localizedMessage(t_QueryNodeException *self, void *data);
            static PyObject *t_QueryNodeException_get__message(t_QueryNodeException *self, void *data);
            static PyObject *t_QueryNodeException_get__messageObject(t_QueryNodeException *self, void *data);
            static PyGetSetDef t_QueryNodeException__fields_[] = {
              DECLARE_GET_FIELD(t_QueryNodeException, localizedMessage),
              DECLARE_GET_FIELD(t_QueryNodeException, message),
              DECLARE_GET_FIELD(t_QueryNodeException, messageObject),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_QueryNodeException__methods_[] = {
              DECLARE_METHOD(t_QueryNodeException, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_QueryNodeException, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_QueryNodeException, getLocalizedMessage, METH_VARARGS),
              DECLARE_METHOD(t_QueryNodeException, getMessage, METH_VARARGS),
              DECLARE_METHOD(t_QueryNodeException, getMessageObject, METH_NOARGS),
              DECLARE_METHOD(t_QueryNodeException, toString, METH_VARARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(QueryNodeException, t_QueryNodeException, ::java::lang::Exception, QueryNodeException, t_QueryNodeException_init_, 0, 0, t_QueryNodeException__fields_, 0, 0);

            void t_QueryNodeException::install(PyObject *module)
            {
              installType(&PY_TYPE(QueryNodeException), module, "QueryNodeException", 0);
            }

            void t_QueryNodeException::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(QueryNodeException).tp_dict, "class_", make_descriptor(QueryNodeException::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(QueryNodeException).tp_dict, "wrapfn_", make_descriptor(t_QueryNodeException::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(QueryNodeException).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_QueryNodeException_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, QueryNodeException::initializeClass, 1)))
                return NULL;
              return t_QueryNodeException::wrap_Object(QueryNodeException(((t_QueryNodeException *) arg)->object.this$));
            }
            static PyObject *t_QueryNodeException_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, QueryNodeException::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_QueryNodeException_init_(t_QueryNodeException *self, PyObject *args, PyObject *kwds)
            {
              switch (PyTuple_GET_SIZE(args)) {
               case 1:
                {
                  ::java::lang::Throwable a0((jobject) NULL);
                  QueryNodeException object((jobject) NULL);

                  if (!parseArgs(args, "k", ::java::lang::Throwable::initializeClass, &a0))
                  {
                    INT_CALL(object = QueryNodeException(a0));
                    self->object = object;
                    break;
                  }
                }
                {
                  ::org::apache::lucene::queryparser::flexible::messages::Message a0((jobject) NULL);
                  QueryNodeException object((jobject) NULL);

                  if (!parseArgs(args, "k", ::org::apache::lucene::queryparser::flexible::messages::Message::initializeClass, &a0))
                  {
                    INT_CALL(object = QueryNodeException(a0));
                    self->object = object;
                    break;
                  }
                }
                goto err;
               case 2:
                {
                  ::org::apache::lucene::queryparser::flexible::messages::Message a0((jobject) NULL);
                  ::java::lang::Throwable a1((jobject) NULL);
                  QueryNodeException object((jobject) NULL);

                  if (!parseArgs(args, "kk", ::org::apache::lucene::queryparser::flexible::messages::Message::initializeClass, ::java::lang::Throwable::initializeClass, &a0, &a1))
                  {
                    INT_CALL(object = QueryNodeException(a0, a1));
                    self->object = object;
                    break;
                  }
                }
               default:
               err:
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_QueryNodeException_getLocalizedMessage(t_QueryNodeException *self, PyObject *args)
            {
              switch (PyTuple_GET_SIZE(args)) {
               case 0:
                {
                  ::java::lang::String result((jobject) NULL);
                  OBJ_CALL(result = self->object.getLocalizedMessage());
                  return j2p(result);
                }
                break;
               case 1:
                {
                  ::java::util::Locale a0((jobject) NULL);
                  ::java::lang::String result((jobject) NULL);

                  if (!parseArgs(args, "k", ::java::util::Locale::initializeClass, &a0))
                  {
                    OBJ_CALL(result = self->object.getLocalizedMessage(a0));
                    return j2p(result);
                  }
                }
              }

              return callSuper(&PY_TYPE(QueryNodeException), (PyObject *) self, "getLocalizedMessage", args, 2);
            }

            static PyObject *t_QueryNodeException_getMessage(t_QueryNodeException *self, PyObject *args)
            {
              ::java::lang::String result((jobject) NULL);

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.getMessage());
                return j2p(result);
              }

              return callSuper(&PY_TYPE(QueryNodeException), (PyObject *) self, "getMessage", args, 2);
            }

            static PyObject *t_QueryNodeException_getMessageObject(t_QueryNodeException *self)
            {
              ::org::apache::lucene::queryparser::flexible::messages::Message result((jobject) NULL);
              OBJ_CALL(result = self->object.getMessageObject());
              return ::org::apache::lucene::queryparser::flexible::messages::t_Message::wrap_Object(result);
            }

            static PyObject *t_QueryNodeException_toString(t_QueryNodeException *self, PyObject *args)
            {
              ::java::lang::String result((jobject) NULL);

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.toString());
                return j2p(result);
              }

              return callSuper(&PY_TYPE(QueryNodeException), (PyObject *) self, "toString", args, 2);
            }

            static PyObject *t_QueryNodeException_get__localizedMessage(t_QueryNodeException *self, void *data)
            {
              ::java::lang::String value((jobject) NULL);
              OBJ_CALL(value = self->object.getLocalizedMessage());
              return j2p(value);
            }

            static PyObject *t_QueryNodeException_get__message(t_QueryNodeException *self, void *data)
            {
              ::java::lang::String value((jobject) NULL);
              OBJ_CALL(value = self->object.getMessage());
              return j2p(value);
            }

            static PyObject *t_QueryNodeException_get__messageObject(t_QueryNodeException *self, void *data)
            {
              ::org::apache::lucene::queryparser::flexible::messages::Message value((jobject) NULL);
              OBJ_CALL(value = self->object.getMessageObject());
              return ::org::apache::lucene::queryparser::flexible::messages::t_Message::wrap_Object(value);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/AnyQueryNode.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/queryparser/flexible/core/parser/EscapeQuerySyntax.h"
#include "java/lang/CloneNotSupportedException.h"
#include "java/lang/CharSequence.h"
#include "java/lang/String.h"
#include "java/util/List.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/QueryNode.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace nodes {

              ::java::lang::Class *AnyQueryNode::class$ = NULL;
              jmethodID *AnyQueryNode::mids$ = NULL;
              bool AnyQueryNode::live$ = false;

              jclass AnyQueryNode::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/core/nodes/AnyQueryNode");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_0236cab3] = env->getMethodID(cls, "<init>", "(Ljava/util/List;Ljava/lang/CharSequence;I)V");
                  mids$[mid_cloneTree_b387c5e6] = env->getMethodID(cls, "cloneTree", "()Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;");
                  mids$[mid_getField_e0adba2f] = env->getMethodID(cls, "getField", "()Ljava/lang/CharSequence;");
                  mids$[mid_getFieldAsString_14c7b5c5] = env->getMethodID(cls, "getFieldAsString", "()Ljava/lang/String;");
                  mids$[mid_getMinimumMatchingElements_54c6a179] = env->getMethodID(cls, "getMinimumMatchingElements", "()I");
                  mids$[mid_setField_a8afc64a] = env->getMethodID(cls, "setField", "(Ljava/lang/CharSequence;)V");
                  mids$[mid_toQueryString_99b8dfe1] = env->getMethodID(cls, "toQueryString", "(Lorg/apache/lucene/queryparser/flexible/core/parser/EscapeQuerySyntax;)Ljava/lang/CharSequence;");
                  mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              AnyQueryNode::AnyQueryNode(const ::java::util::List & a0, const ::java::lang::CharSequence & a1, jint a2) : ::org::apache::lucene::queryparser::flexible::core::nodes::AndQueryNode(env->newObject(initializeClass, &mids$, mid_init$_0236cab3, a0.this$, a1.this$, a2)) {}

              ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode AnyQueryNode::cloneTree() const
              {
                return ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode(env->callObjectMethod(this$, mids$[mid_cloneTree_b387c5e6]));
              }

              ::java::lang::CharSequence AnyQueryNode::getField() const
              {
                return ::java::lang::CharSequence(env->callObjectMethod(this$, mids$[mid_getField_e0adba2f]));
              }

              ::java::lang::String AnyQueryNode::getFieldAsString() const
              {
                return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getFieldAsString_14c7b5c5]));
              }

              jint AnyQueryNode::getMinimumMatchingElements() const
              {
                return env->callIntMethod(this$, mids$[mid_getMinimumMatchingElements_54c6a179]);
              }

              void AnyQueryNode::setField(const ::java::lang::CharSequence & a0) const
              {
                env->callVoidMethod(this$, mids$[mid_setField_a8afc64a], a0.this$);
              }

              ::java::lang::CharSequence AnyQueryNode::toQueryString(const ::org::apache::lucene::queryparser::flexible::core::parser::EscapeQuerySyntax & a0) const
              {
                return ::java::lang::CharSequence(env->callObjectMethod(this$, mids$[mid_toQueryString_99b8dfe1], a0.this$));
              }

              ::java::lang::String AnyQueryNode::toString() const
              {
                return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace nodes {
              static PyObject *t_AnyQueryNode_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_AnyQueryNode_instance_(PyTypeObject *type, PyObject *arg);
              static int t_AnyQueryNode_init_(t_AnyQueryNode *self, PyObject *args, PyObject *kwds);
              static PyObject *t_AnyQueryNode_cloneTree(t_AnyQueryNode *self, PyObject *args);
              static PyObject *t_AnyQueryNode_getField(t_AnyQueryNode *self);
              static PyObject *t_AnyQueryNode_getFieldAsString(t_AnyQueryNode *self);
              static PyObject *t_AnyQueryNode_getMinimumMatchingElements(t_AnyQueryNode *self);
              static PyObject *t_AnyQueryNode_setField(t_AnyQueryNode *self, PyObject *arg);
              static PyObject *t_AnyQueryNode_toQueryString(t_AnyQueryNode *self, PyObject *args);
              static PyObject *t_AnyQueryNode_toString(t_AnyQueryNode *self, PyObject *args);
              static PyObject *t_AnyQueryNode_get__field(t_AnyQueryNode *self, void *data);
              static int t_AnyQueryNode_set__field(t_AnyQueryNode *self, PyObject *arg, void *data);
              static PyObject *t_AnyQueryNode_get__fieldAsString(t_AnyQueryNode *self, void *data);
              static PyObject *t_AnyQueryNode_get__minimumMatchingElements(t_AnyQueryNode *self, void *data);
              static PyGetSetDef t_AnyQueryNode__fields_[] = {
                DECLARE_GETSET_FIELD(t_AnyQueryNode, field),
                DECLARE_GET_FIELD(t_AnyQueryNode, fieldAsString),
                DECLARE_GET_FIELD(t_AnyQueryNode, minimumMatchingElements),
                { NULL, NULL, NULL, NULL, NULL }
              };

              static PyMethodDef t_AnyQueryNode__methods_[] = {
                DECLARE_METHOD(t_AnyQueryNode, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_AnyQueryNode, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_AnyQueryNode, cloneTree, METH_VARARGS),
                DECLARE_METHOD(t_AnyQueryNode, getField, METH_NOARGS),
                DECLARE_METHOD(t_AnyQueryNode, getFieldAsString, METH_NOARGS),
                DECLARE_METHOD(t_AnyQueryNode, getMinimumMatchingElements, METH_NOARGS),
                DECLARE_METHOD(t_AnyQueryNode, setField, METH_O),
                DECLARE_METHOD(t_AnyQueryNode, toQueryString, METH_VARARGS),
                DECLARE_METHOD(t_AnyQueryNode, toString, METH_VARARGS),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(AnyQueryNode, t_AnyQueryNode, ::org::apache::lucene::queryparser::flexible::core::nodes::AndQueryNode, AnyQueryNode, t_AnyQueryNode_init_, 0, 0, t_AnyQueryNode__fields_, 0, 0);

              void t_AnyQueryNode::install(PyObject *module)
              {
                installType(&PY_TYPE(AnyQueryNode), module, "AnyQueryNode", 0);
              }

              void t_AnyQueryNode::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(AnyQueryNode).tp_dict, "class_", make_descriptor(AnyQueryNode::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(AnyQueryNode).tp_dict, "wrapfn_", make_descriptor(t_AnyQueryNode::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(AnyQueryNode).tp_dict, "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_AnyQueryNode_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, AnyQueryNode::initializeClass, 1)))
                  return NULL;
                return t_AnyQueryNode::wrap_Object(AnyQueryNode(((t_AnyQueryNode *) arg)->object.this$));
              }
              static PyObject *t_AnyQueryNode_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, AnyQueryNode::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_AnyQueryNode_init_(t_AnyQueryNode *self, PyObject *args, PyObject *kwds)
              {
                ::java::util::List a0((jobject) NULL);
                PyTypeObject **p0;
                ::java::lang::CharSequence a1((jobject) NULL);
                jint a2;
                AnyQueryNode object((jobject) NULL);

                if (!parseArgs(args, "KOI", ::java::util::List::initializeClass, &::java::lang::PY_TYPE(CharSequence), &a0, &p0, ::java::util::t_List::parameters_, &a1, &a2))
                {
                  INT_CALL(object = AnyQueryNode(a0, a1, a2));
                  self->object = object;
                }
                else
                {
                  PyErr_SetArgsError((PyObject *) self, "__init__", args);
                  return -1;
                }

                return 0;
              }

              static PyObject *t_AnyQueryNode_cloneTree(t_AnyQueryNode *self, PyObject *args)
              {
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode result((jobject) NULL);

                if (!parseArgs(args, ""))
                {
                  OBJ_CALL(result = self->object.cloneTree());
                  return ::org::apache::lucene::queryparser::flexible::core::nodes::t_QueryNode::wrap_Object(result);
                }

                return callSuper(&PY_TYPE(AnyQueryNode), (PyObject *) self, "cloneTree", args, 2);
              }

              static PyObject *t_AnyQueryNode_getField(t_AnyQueryNode *self)
              {
                ::java::lang::CharSequence result((jobject) NULL);
                OBJ_CALL(result = self->object.getField());
                return ::java::lang::t_CharSequence::wrap_Object(result);
              }

              static PyObject *t_AnyQueryNode_getFieldAsString(t_AnyQueryNode *self)
              {
                ::java::lang::String result((jobject) NULL);
                OBJ_CALL(result = self->object.getFieldAsString());
                return j2p(result);
              }

              static PyObject *t_AnyQueryNode_getMinimumMatchingElements(t_AnyQueryNode *self)
              {
                jint result;
                OBJ_CALL(result = self->object.getMinimumMatchingElements());
                return PyInt_FromLong((long) result);
              }

              static PyObject *t_AnyQueryNode_setField(t_AnyQueryNode *self, PyObject *arg)
              {
                ::java::lang::CharSequence a0((jobject) NULL);

                if (!parseArg(arg, "O", &::java::lang::PY_TYPE(CharSequence), &a0))
                {
                  OBJ_CALL(self->object.setField(a0));
                  Py_RETURN_NONE;
                }

                PyErr_SetArgsError((PyObject *) self, "setField", arg);
                return NULL;
              }

              static PyObject *t_AnyQueryNode_toQueryString(t_AnyQueryNode *self, PyObject *args)
              {
                ::org::apache::lucene::queryparser::flexible::core::parser::EscapeQuerySyntax a0((jobject) NULL);
                ::java::lang::CharSequence result((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::queryparser::flexible::core::parser::EscapeQuerySyntax::initializeClass, &a0))
                {
                  OBJ_CALL(result = self->object.toQueryString(a0));
                  return ::java::lang::t_CharSequence::wrap_Object(result);
                }

                return callSuper(&PY_TYPE(AnyQueryNode), (PyObject *) self, "toQueryString", args, 2);
              }

              static PyObject *t_AnyQueryNode_toString(t_AnyQueryNode *self, PyObject *args)
              {
                ::java::lang::String result((jobject) NULL);

                if (!parseArgs(args, ""))
                {
                  OBJ_CALL(result = self->object.toString());
                  return j2p(result);
                }

                return callSuper(&PY_TYPE(AnyQueryNode), (PyObject *) self, "toString", args, 2);
              }

              static PyObject *t_AnyQueryNode_get__field(t_AnyQueryNode *self, void *data)
              {
                ::java::lang::CharSequence value((jobject) NULL);
                OBJ_CALL(value = self->object.getField());
                return ::java::lang::t_CharSequence::wrap_Object(value);
              }
              static int t_AnyQueryNode_set__field(t_AnyQueryNode *self, PyObject *arg, void *data)
              {
                {
                  ::java::lang::CharSequence value((jobject) NULL);
                  if (!parseArg(arg, "O", &::java::lang::PY_TYPE(CharSequence), &value))
                  {
                    INT_CALL(self->object.setField(value));
                    return 0;
                  }
                }
                PyErr_SetArgsError((PyObject *) self, "field", arg);
                return -1;
              }

              static PyObject *t_AnyQueryNode_get__fieldAsString(t_AnyQueryNode *self, void *data)
              {
                ::java::lang::String value((jobject) NULL);
                OBJ_CALL(value = self->object.getFieldAsString());
                return j2p(value);
              }

              static PyObject *t_AnyQueryNode_get__minimumMatchingElements(t_AnyQueryNode *self, void *data)
              {
                jint value;
                OBJ_CALL(value = self->object.getMinimumMatchingElements());
                return PyInt_FromLong((long) value);
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "java/util/LinkedHashMap.h"
#include "java/lang/Class.h"
#include "java/lang/Object.h"
#include "java/util/Map.h"
#include "java/util/Map$Entry.h"
#include "java/util/Collection.h"
#include "java/util/Set.h"
#include "JArray.h"

namespace java {
  namespace util {

    ::java::lang::Class *LinkedHashMap::class$ = NULL;
    jmethodID *LinkedHashMap::mids$ = NULL;
    bool LinkedHashMap::live$ = false;

    jclass LinkedHashMap::initializeClass(bool getOnly)
    {
      if (getOnly)
        return (jclass) (live$ ? class$->this$ : NULL);
      if (class$ == NULL)
      {
        jclass cls = (jclass) env->findClass("java/util/LinkedHashMap");

        mids$ = new jmethodID[max_mid];
        mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
        mids$[mid_init$_4c9e2b1c] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
        mids$[mid_init$_39c7bd3c] = env->getMethodID(cls, "<init>", "(I)V");
        mids$[mid_init$_abdf2c51] = env->getMethodID(cls, "<init>", "(IF)V");
        mids$[mid_init$_514f44c2] = env->getMethodID(cls, "<init>", "(IFZ)V");
        mids$[mid_clear_54c6a166] = env->getMethodID(cls, "clear", "()V");
        mids$[mid_containsValue_290588e2] = env->getMethodID(cls, "containsValue", "(Ljava/lang/Object;)Z");
        mids$[mid_entrySet_03e99967] = env->getMethodID(cls, "entrySet", "()Ljava/util/Set;");
        mids$[mid_get_a932a95f] = env->getMethodID(cls, "get", "(Ljava/lang/Object;)Ljava/lang/Object;");
        mids$[mid_getOrDefault_537d5bdf] = env->getMethodID(cls, "getOrDefault", "(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;");
        mids$[mid_keySet_03e99967] = env->getMethodID(cls, "keySet", "()Ljava/util/Set;");
        mids$[mid_values_2d2d7de4] = env->getMethodID(cls, "values", "()Ljava/util/Collection;");
        mids$[mid_removeEldestEntry_8e61453a] = env->getMethodID(cls, "removeEldestEntry", "(Ljava/util/Map$Entry;)Z");

        class$ = (::java::lang::Class *) new JObject(cls);
        live$ = true;
      }
      return (jclass) class$->this$;
    }

    LinkedHashMap::LinkedHashMap() : ::java::util::HashMap(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

    LinkedHashMap::LinkedHashMap(const ::java::util::Map & a0) : ::java::util::HashMap(env->newObject(initializeClass, &mids$, mid_init$_4c9e2b1c, a0.this$)) {}

    LinkedHashMap::LinkedHashMap(jint a0) : ::java::util::HashMap(env->newObject(initializeClass, &mids$, mid_init$_39c7bd3c, a0)) {}

    LinkedHashMap::LinkedHashMap(jint a0, jfloat a1) : ::java::util::HashMap(env->newObject(initializeClass, &mids$, mid_init$_abdf2c51, a0, a1)) {}

    LinkedHashMap::LinkedHashMap(jint a0, jfloat a1, jboolean a2) : ::java::util::HashMap(env->newObject(initializeClass, &mids$, mid_init$_514f44c2, a0, a1, a2)) {}

    void LinkedHashMap::clear() const
    {
      env->callVoidMethod(this$, mids$[mid_clear_54c6a166]);
    }

    jboolean LinkedHashMap::containsValue(const ::java::lang::Object & a0) const
    {
      return env->callBooleanMethod(this$, mids$[mid_containsValue_290588e2], a0.this$);
    }

    ::java::util::Set LinkedHashMap::entrySet() const
    {
      return ::java::util::Set(env->callObjectMethod(this$, mids$[mid_entrySet_03e99967]));
    }

    ::java::lang::Object LinkedHashMap::get(const ::java::lang::Object & a0) const
    {
      return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_get_a932a95f], a0.this$));
    }

    ::java::lang::Object LinkedHashMap::getOrDefault(const ::java::lang::Object & a0, const ::java::lang::Object & a1) const
    {
      return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_getOrDefault_537d5bdf], a0.this$, a1.this$));
    }

    ::java::util::Set LinkedHashMap::keySet() const
    {
      return ::java::util::Set(env->callObjectMethod(this$, mids$[mid_keySet_03e99967]));
    }

    ::java::util::Collection LinkedHashMap::values() const
    {
      return ::java::util::Collection(env->callObjectMethod(this$, mids$[mid_values_2d2d7de4]));
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace java {
  namespace util {
    static PyObject *t_LinkedHashMap_cast_(PyTypeObject *type, PyObject *arg);
    static PyObject *t_LinkedHashMap_instance_(PyTypeObject *type, PyObject *arg);
    static PyObject *t_LinkedHashMap_of_(t_LinkedHashMap *self, PyObject *args);
    static int t_LinkedHashMap_init_(t_LinkedHashMap *self, PyObject *args, PyObject *kwds);
    static PyObject *t_LinkedHashMap_clear(t_LinkedHashMap *self, PyObject *args);
    static PyObject *t_LinkedHashMap_containsValue(t_LinkedHashMap *self, PyObject *args);
    static PyObject *t_LinkedHashMap_entrySet(t_LinkedHashMap *self, PyObject *args);
    static PyObject *t_LinkedHashMap_get(t_LinkedHashMap *self, PyObject *args);
    static PyObject *t_LinkedHashMap_getOrDefault(t_LinkedHashMap *self, PyObject *args);
    static PyObject *t_LinkedHashMap_keySet(t_LinkedHashMap *self, PyObject *args);
    static PyObject *t_LinkedHashMap_values(t_LinkedHashMap *self, PyObject *args);
    static PyObject *t_LinkedHashMap_get__parameters_(t_LinkedHashMap *self, void *data);
    static PyGetSetDef t_LinkedHashMap__fields_[] = {
      DECLARE_GET_FIELD(t_LinkedHashMap, parameters_),
      { NULL, NULL, NULL, NULL, NULL }
    };

    static PyMethodDef t_LinkedHashMap__methods_[] = {
      DECLARE_METHOD(t_LinkedHashMap, cast_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_LinkedHashMap, instance_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_LinkedHashMap, of_, METH_VARARGS),
      DECLARE_METHOD(t_LinkedHashMap, clear, METH_VARARGS),
      DECLARE_METHOD(t_LinkedHashMap, containsValue, METH_VARARGS),
      DECLARE_METHOD(t_LinkedHashMap, entrySet, METH_VARARGS),
      DECLARE_METHOD(t_LinkedHashMap, get, METH_VARARGS),
      DECLARE_METHOD(t_LinkedHashMap, getOrDefault, METH_VARARGS),
      DECLARE_METHOD(t_LinkedHashMap, keySet, METH_VARARGS),
      DECLARE_METHOD(t_LinkedHashMap, values, METH_VARARGS),
      { NULL, NULL, 0, NULL }
    };

    DECLARE_TYPE(LinkedHashMap, t_LinkedHashMap, ::java::util::HashMap, LinkedHashMap, t_LinkedHashMap_init_, 0, 0, t_LinkedHashMap__fields_, 0, 0);
    PyObject *t_LinkedHashMap::wrap_Object(const LinkedHashMap& object, PyTypeObject *p0, PyTypeObject *p1)
    {
      PyObject *obj = t_LinkedHashMap::wrap_Object(object);
      if (obj != NULL && obj != Py_None)
      {
        t_LinkedHashMap *self = (t_LinkedHashMap *) obj;
        self->parameters[0] = p0;
        self->parameters[1] = p1;
      }
      return obj;
    }

    PyObject *t_LinkedHashMap::wrap_jobject(const jobject& object, PyTypeObject *p0, PyTypeObject *p1)
    {
      PyObject *obj = t_LinkedHashMap::wrap_jobject(object);
      if (obj != NULL && obj != Py_None)
      {
        t_LinkedHashMap *self = (t_LinkedHashMap *) obj;
        self->parameters[0] = p0;
        self->parameters[1] = p1;
      }
      return obj;
    }

    void t_LinkedHashMap::install(PyObject *module)
    {
      installType(&PY_TYPE(LinkedHashMap), module, "LinkedHashMap", 0);
    }

    void t_LinkedHashMap::initialize(PyObject *module)
    {
      PyDict_SetItemString(PY_TYPE(LinkedHashMap).tp_dict, "class_", make_descriptor(LinkedHashMap::initializeClass, 1));
      PyDict_SetItemString(PY_TYPE(LinkedHashMap).tp_dict, "wrapfn_", make_descriptor(t_LinkedHashMap::wrap_jobject));
      PyDict_SetItemString(PY_TYPE(LinkedHashMap).tp_dict, "boxfn_", make_descriptor(boxObject));
    }

    static PyObject *t_LinkedHashMap_cast_(PyTypeObject *type, PyObject *arg)
    {
      if (!(arg = castCheck(arg, LinkedHashMap::initializeClass, 1)))
        return NULL;
      return t_LinkedHashMap::wrap_Object(LinkedHashMap(((t_LinkedHashMap *) arg)->object.this$));
    }
    static PyObject *t_LinkedHashMap_instance_(PyTypeObject *type, PyObject *arg)
    {
      if (!castCheck(arg, LinkedHashMap::initializeClass, 0))
        Py_RETURN_FALSE;
      Py_RETURN_TRUE;
    }

    static PyObject *t_LinkedHashMap_of_(t_LinkedHashMap *self, PyObject *args)
    {
      if (!parseArg(args, "T", 2, &(self->parameters)))
        Py_RETURN_SELF;
      return PyErr_SetArgsError((PyObject *) self, "of_", args);
    }

    static int t_LinkedHashMap_init_(t_LinkedHashMap *self, PyObject *args, PyObject *kwds)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 0:
        {
          LinkedHashMap object((jobject) NULL);

          INT_CALL(object = LinkedHashMap());
          self->object = object;
          break;
        }
        goto err;
       case 1:
        {
          ::java::util::Map a0((jobject) NULL);
          PyTypeObject **p0;
          LinkedHashMap object((jobject) NULL);

          if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
          {
            INT_CALL(object = LinkedHashMap(a0));
            self->object = object;
            break;
          }
        }
        {
          jint a0;
          LinkedHashMap object((jobject) NULL);

          if (!parseArgs(args, "I", &a0))
          {
            INT_CALL(object = LinkedHashMap(a0));
            self->object = object;
            break;
          }
        }
        goto err;
       case 2:
        {
          jint a0;
          jfloat a1;
          LinkedHashMap object((jobject) NULL);

          if (!parseArgs(args, "IF", &a0, &a1))
          {
            INT_CALL(object = LinkedHashMap(a0, a1));
            self->object = object;
            break;
          }
        }
        goto err;
       case 3:
        {
          jint a0;
          jfloat a1;
          jboolean a2;
          LinkedHashMap object((jobject) NULL);

          if (!parseArgs(args, "IFZ", &a0, &a1, &a2))
          {
            INT_CALL(object = LinkedHashMap(a0, a1, a2));
            self->object = object;
            break;
          }
        }
       default:
       err:
        PyErr_SetArgsError((PyObject *) self, "__init__", args);
        return -1;
      }

      return 0;
    }

    static PyObject *t_LinkedHashMap_clear(t_LinkedHashMap *self, PyObject *args)
    {

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(self->object.clear());
        Py_RETURN_NONE;
      }

      return callSuper(&PY_TYPE(LinkedHashMap), (PyObject *) self, "clear", args, 2);
    }

    static PyObject *t_LinkedHashMap_containsValue(t_LinkedHashMap *self, PyObject *args)
    {
      ::java::lang::Object a0((jobject) NULL);
      jboolean result;

      if (!parseArgs(args, "o", &a0))
      {
        OBJ_CALL(result = self->object.containsValue(a0));
        Py_RETURN_BOOL(result);
      }

      return callSuper(&PY_TYPE(LinkedHashMap), (PyObject *) self, "containsValue", args, 2);
    }

    static PyObject *t_LinkedHashMap_entrySet(t_LinkedHashMap *self, PyObject *args)
    {
      ::java::util::Set result((jobject) NULL);

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.entrySet());
        return ::java::util::t_Set::wrap_Object(result);
      }

      return callSuper(&PY_TYPE(LinkedHashMap), (PyObject *) self, "entrySet", args, 2);
    }

    static PyObject *t_LinkedHashMap_get(t_LinkedHashMap *self, PyObject *args)
    {
      ::java::lang::Object a0((jobject) NULL);
      ::java::lang::Object result((jobject) NULL);

      if (!parseArgs(args, "o", &a0))
      {
        OBJ_CALL(result = self->object.get(a0));
        return self->parameters[1] != NULL ? wrapType(self->parameters[1], result.this$) : ::java::lang::t_Object::wrap_Object(result);
      }

      return callSuper(&PY_TYPE(LinkedHashMap), (PyObject *) self, "get", args, 2);
    }

    static PyObject *t_LinkedHashMap_getOrDefault(t_LinkedHashMap *self, PyObject *args)
    {
      ::java::lang::Object a0((jobject) NULL);
      ::java::lang::Object a1((jobject) NULL);
      ::java::lang::Object result((jobject) NULL);

      if (!parseArgs(args, "oO", self->parameters[1], &a0, &a1))
      {
        OBJ_CALL(result = self->object.getOrDefault(a0, a1));
        return self->parameters[1] != NULL ? wrapType(self->parameters[1], result.this$) : ::java::lang::t_Object::wrap_Object(result);
      }

      return callSuper(&PY_TYPE(LinkedHashMap), (PyObject *) self, "getOrDefault", args, 2);
    }

    static PyObject *t_LinkedHashMap_keySet(t_LinkedHashMap *self, PyObject *args)
    {
      ::java::util::Set result((jobject) NULL);

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.keySet());
        return ::java::util::t_Set::wrap_Object(result, self->parameters[0]);
      }

      return callSuper(&PY_TYPE(LinkedHashMap), (PyObject *) self, "keySet", args, 2);
    }

    static PyObject *t_LinkedHashMap_values(t_LinkedHashMap *self, PyObject *args)
    {
      ::java::util::Collection result((jobject) NULL);

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.values());
        return ::java::util::t_Collection::wrap_Object(result, self->parameters[1]);
      }

      return callSuper(&PY_TYPE(LinkedHashMap), (PyObject *) self, "values", args, 2);
    }
    static PyObject *t_LinkedHashMap_get__parameters_(t_LinkedHashMap *self, void *data)
    {
      return typeParameters(self->parameters, sizeof(self->parameters));
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/pt/PortugueseMinimalStemmer.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace pt {

          ::java::lang::Class *PortugueseMinimalStemmer::class$ = NULL;
          jmethodID *PortugueseMinimalStemmer::mids$ = NULL;
          bool PortugueseMinimalStemmer::live$ = false;

          jclass PortugueseMinimalStemmer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/pt/PortugueseMinimalStemmer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_stem_ec6430eb] = env->getMethodID(cls, "stem", "([CI)I");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          PortugueseMinimalStemmer::PortugueseMinimalStemmer() : ::org::apache::lucene::analysis::pt::RSLPStemmerBase(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          jint PortugueseMinimalStemmer::stem(const JArray< jchar > & a0, jint a1) const
          {
            return env->callIntMethod(this$, mids$[mid_stem_ec6430eb], a0.this$, a1);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace pt {
          static PyObject *t_PortugueseMinimalStemmer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PortugueseMinimalStemmer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_PortugueseMinimalStemmer_init_(t_PortugueseMinimalStemmer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_PortugueseMinimalStemmer_stem(t_PortugueseMinimalStemmer *self, PyObject *args);

          static PyMethodDef t_PortugueseMinimalStemmer__methods_[] = {
            DECLARE_METHOD(t_PortugueseMinimalStemmer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PortugueseMinimalStemmer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PortugueseMinimalStemmer, stem, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(PortugueseMinimalStemmer, t_PortugueseMinimalStemmer, ::org::apache::lucene::analysis::pt::RSLPStemmerBase, PortugueseMinimalStemmer, t_PortugueseMinimalStemmer_init_, 0, 0, 0, 0, 0);

          void t_PortugueseMinimalStemmer::install(PyObject *module)
          {
            installType(&PY_TYPE(PortugueseMinimalStemmer), module, "PortugueseMinimalStemmer", 0);
          }

          void t_PortugueseMinimalStemmer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(PortugueseMinimalStemmer).tp_dict, "class_", make_descriptor(PortugueseMinimalStemmer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(PortugueseMinimalStemmer).tp_dict, "wrapfn_", make_descriptor(t_PortugueseMinimalStemmer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(PortugueseMinimalStemmer).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_PortugueseMinimalStemmer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, PortugueseMinimalStemmer::initializeClass, 1)))
              return NULL;
            return t_PortugueseMinimalStemmer::wrap_Object(PortugueseMinimalStemmer(((t_PortugueseMinimalStemmer *) arg)->object.this$));
          }
          static PyObject *t_PortugueseMinimalStemmer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, PortugueseMinimalStemmer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_PortugueseMinimalStemmer_init_(t_PortugueseMinimalStemmer *self, PyObject *args, PyObject *kwds)
          {
            PortugueseMinimalStemmer object((jobject) NULL);

            INT_CALL(object = PortugueseMinimalStemmer());
            self->object = object;

            return 0;
          }

          static PyObject *t_PortugueseMinimalStemmer_stem(t_PortugueseMinimalStemmer *self, PyObject *args)
          {
            JArray< jchar > a0((jobject) NULL);
            jint a1;
            jint result;

            if (!parseArgs(args, "[CI", &a0, &a1))
            {
              OBJ_CALL(result = self->object.stem(a0, a1));
              return PyInt_FromLong((long) result);
            }

            PyErr_SetArgsError((PyObject *) self, "stem", args);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/no/NorwegianMinimalStemFilterFactory.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/String.h"
#include "java/util/Map.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace no {

          ::java::lang::Class *NorwegianMinimalStemFilterFactory::class$ = NULL;
          jmethodID *NorwegianMinimalStemFilterFactory::mids$ = NULL;
          bool NorwegianMinimalStemFilterFactory::live$ = false;

          jclass NorwegianMinimalStemFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/no/NorwegianMinimalStemFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4c9e2b1c] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_a65cd6ab] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/TokenStream;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          NorwegianMinimalStemFilterFactory::NorwegianMinimalStemFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_4c9e2b1c, a0.this$)) {}

          ::org::apache::lucene::analysis::TokenStream NorwegianMinimalStemFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::TokenStream(env->callObjectMethod(this$, mids$[mid_create_a65cd6ab], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace no {
          static PyObject *t_NorwegianMinimalStemFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_NorwegianMinimalStemFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_NorwegianMinimalStemFilterFactory_init_(t_NorwegianMinimalStemFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_NorwegianMinimalStemFilterFactory_create(t_NorwegianMinimalStemFilterFactory *self, PyObject *args);

          static PyMethodDef t_NorwegianMinimalStemFilterFactory__methods_[] = {
            DECLARE_METHOD(t_NorwegianMinimalStemFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_NorwegianMinimalStemFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_NorwegianMinimalStemFilterFactory, create, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(NorwegianMinimalStemFilterFactory, t_NorwegianMinimalStemFilterFactory, ::org::apache::lucene::analysis::util::TokenFilterFactory, NorwegianMinimalStemFilterFactory, t_NorwegianMinimalStemFilterFactory_init_, 0, 0, 0, 0, 0);

          void t_NorwegianMinimalStemFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(NorwegianMinimalStemFilterFactory), module, "NorwegianMinimalStemFilterFactory", 0);
          }

          void t_NorwegianMinimalStemFilterFactory::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(NorwegianMinimalStemFilterFactory).tp_dict, "class_", make_descriptor(NorwegianMinimalStemFilterFactory::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(NorwegianMinimalStemFilterFactory).tp_dict, "wrapfn_", make_descriptor(t_NorwegianMinimalStemFilterFactory::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(NorwegianMinimalStemFilterFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_NorwegianMinimalStemFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, NorwegianMinimalStemFilterFactory::initializeClass, 1)))
              return NULL;
            return t_NorwegianMinimalStemFilterFactory::wrap_Object(NorwegianMinimalStemFilterFactory(((t_NorwegianMinimalStemFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_NorwegianMinimalStemFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, NorwegianMinimalStemFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_NorwegianMinimalStemFilterFactory_init_(t_NorwegianMinimalStemFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            NorwegianMinimalStemFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = NorwegianMinimalStemFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_NorwegianMinimalStemFilterFactory_create(t_NorwegianMinimalStemFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::TokenStream result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::t_TokenStream::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(NorwegianMinimalStemFilterFactory), (PyObject *) self, "create", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/automaton/AutomatonProvider.h"
#include "org/apache/lucene/util/automaton/Automaton.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace automaton {

          ::java::lang::Class *AutomatonProvider::class$ = NULL;
          jmethodID *AutomatonProvider::mids$ = NULL;
          bool AutomatonProvider::live$ = false;

          jclass AutomatonProvider::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/util/automaton/AutomatonProvider");

              mids$ = new jmethodID[max_mid];
              mids$[mid_getAutomaton_af13056f] = env->getMethodID(cls, "getAutomaton", "(Ljava/lang/String;)Lorg/apache/lucene/util/automaton/Automaton;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ::org::apache::lucene::util::automaton::Automaton AutomatonProvider::getAutomaton(const ::java::lang::String & a0) const
          {
            return ::org::apache::lucene::util::automaton::Automaton(env->callObjectMethod(this$, mids$[mid_getAutomaton_af13056f], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace automaton {
          static PyObject *t_AutomatonProvider_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_AutomatonProvider_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_AutomatonProvider_getAutomaton(t_AutomatonProvider *self, PyObject *arg);

          static PyMethodDef t_AutomatonProvider__methods_[] = {
            DECLARE_METHOD(t_AutomatonProvider, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_AutomatonProvider, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_AutomatonProvider, getAutomaton, METH_O),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(AutomatonProvider, t_AutomatonProvider, ::java::lang::Object, AutomatonProvider, abstract_init, 0, 0, 0, 0, 0);

          void t_AutomatonProvider::install(PyObject *module)
          {
            installType(&PY_TYPE(AutomatonProvider), module, "AutomatonProvider", 0);
          }

          void t_AutomatonProvider::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(AutomatonProvider).tp_dict, "class_", make_descriptor(AutomatonProvider::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(AutomatonProvider).tp_dict, "wrapfn_", make_descriptor(t_AutomatonProvider::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(AutomatonProvider).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_AutomatonProvider_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, AutomatonProvider::initializeClass, 1)))
              return NULL;
            return t_AutomatonProvider::wrap_Object(AutomatonProvider(((t_AutomatonProvider *) arg)->object.this$));
          }
          static PyObject *t_AutomatonProvider_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, AutomatonProvider::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_AutomatonProvider_getAutomaton(t_AutomatonProvider *self, PyObject *arg)
          {
            ::java::lang::String a0((jobject) NULL);
            ::org::apache::lucene::util::automaton::Automaton result((jobject) NULL);

            if (!parseArg(arg, "s", &a0))
            {
              OBJ_CALL(result = self->object.getAutomaton(a0));
              return ::org::apache::lucene::util::automaton::t_Automaton::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "getAutomaton", arg);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/standard/nodes/StandardBooleanQueryNode.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/QueryNode.h"
#include "java/util/List.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace nodes {

              ::java::lang::Class *StandardBooleanQueryNode::class$ = NULL;
              jmethodID *StandardBooleanQueryNode::mids$ = NULL;
              bool StandardBooleanQueryNode::live$ = false;

              jclass StandardBooleanQueryNode::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/standard/nodes/StandardBooleanQueryNode");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_7eb182ec] = env->getMethodID(cls, "<init>", "(Ljava/util/List;Z)V");
                  mids$[mid_isDisableCoord_54c6a16a] = env->getMethodID(cls, "isDisableCoord", "()Z");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              StandardBooleanQueryNode::StandardBooleanQueryNode(const ::java::util::List & a0, jboolean a1) : ::org::apache::lucene::queryparser::flexible::core::nodes::BooleanQueryNode(env->newObject(initializeClass, &mids$, mid_init$_7eb182ec, a0.this$, a1)) {}

              jboolean StandardBooleanQueryNode::isDisableCoord() const
              {
                return env->callBooleanMethod(this$, mids$[mid_isDisableCoord_54c6a16a]);
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace nodes {
              static PyObject *t_StandardBooleanQueryNode_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_StandardBooleanQueryNode_instance_(PyTypeObject *type, PyObject *arg);
              static int t_StandardBooleanQueryNode_init_(t_StandardBooleanQueryNode *self, PyObject *args, PyObject *kwds);
              static PyObject *t_StandardBooleanQueryNode_isDisableCoord(t_StandardBooleanQueryNode *self);
              static PyObject *t_StandardBooleanQueryNode_get__disableCoord(t_StandardBooleanQueryNode *self, void *data);
              static PyGetSetDef t_StandardBooleanQueryNode__fields_[] = {
                DECLARE_GET_FIELD(t_StandardBooleanQueryNode, disableCoord),
                { NULL, NULL, NULL, NULL, NULL }
              };

              static PyMethodDef t_StandardBooleanQueryNode__methods_[] = {
                DECLARE_METHOD(t_StandardBooleanQueryNode, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_StandardBooleanQueryNode, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_StandardBooleanQueryNode, isDisableCoord, METH_NOARGS),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(StandardBooleanQueryNode, t_StandardBooleanQueryNode, ::org::apache::lucene::queryparser::flexible::core::nodes::BooleanQueryNode, StandardBooleanQueryNode, t_StandardBooleanQueryNode_init_, 0, 0, t_StandardBooleanQueryNode__fields_, 0, 0);

              void t_StandardBooleanQueryNode::install(PyObject *module)
              {
                installType(&PY_TYPE(StandardBooleanQueryNode), module, "StandardBooleanQueryNode", 0);
              }

              void t_StandardBooleanQueryNode::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(StandardBooleanQueryNode).tp_dict, "class_", make_descriptor(StandardBooleanQueryNode::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(StandardBooleanQueryNode).tp_dict, "wrapfn_", make_descriptor(t_StandardBooleanQueryNode::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(StandardBooleanQueryNode).tp_dict, "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_StandardBooleanQueryNode_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, StandardBooleanQueryNode::initializeClass, 1)))
                  return NULL;
                return t_StandardBooleanQueryNode::wrap_Object(StandardBooleanQueryNode(((t_StandardBooleanQueryNode *) arg)->object.this$));
              }
              static PyObject *t_StandardBooleanQueryNode_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, StandardBooleanQueryNode::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_StandardBooleanQueryNode_init_(t_StandardBooleanQueryNode *self, PyObject *args, PyObject *kwds)
              {
                ::java::util::List a0((jobject) NULL);
                PyTypeObject **p0;
                jboolean a1;
                StandardBooleanQueryNode object((jobject) NULL);

                if (!parseArgs(args, "KZ", ::java::util::List::initializeClass, &a0, &p0, ::java::util::t_List::parameters_, &a1))
                {
                  INT_CALL(object = StandardBooleanQueryNode(a0, a1));
                  self->object = object;
                }
                else
                {
                  PyErr_SetArgsError((PyObject *) self, "__init__", args);
                  return -1;
                }

                return 0;
              }

              static PyObject *t_StandardBooleanQueryNode_isDisableCoord(t_StandardBooleanQueryNode *self)
              {
                jboolean result;
                OBJ_CALL(result = self->object.isDisableCoord());
                Py_RETURN_BOOL(result);
              }

              static PyObject *t_StandardBooleanQueryNode_get__disableCoord(t_StandardBooleanQueryNode *self, void *data)
              {
                jboolean value;
                OBJ_CALL(value = self->object.isDisableCoord());
                Py_RETURN_BOOL(value);
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/SingleTermsEnum.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "org/apache/lucene/index/TermsEnum.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *SingleTermsEnum::class$ = NULL;
        jmethodID *SingleTermsEnum::mids$ = NULL;
        bool SingleTermsEnum::live$ = false;

        jclass SingleTermsEnum::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/SingleTermsEnum");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_acc8615c] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/TermsEnum;Lorg/apache/lucene/util/BytesRef;)V");
            mids$[mid_accept_30bc08e1] = env->getMethodID(cls, "accept", "(Lorg/apache/lucene/util/BytesRef;)Lorg/apache/lucene/index/FilteredTermsEnum$AcceptStatus;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        SingleTermsEnum::SingleTermsEnum(const ::org::apache::lucene::index::TermsEnum & a0, const ::org::apache::lucene::util::BytesRef & a1) : ::org::apache::lucene::index::FilteredTermsEnum(env->newObject(initializeClass, &mids$, mid_init$_acc8615c, a0.this$, a1.this$)) {}
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_SingleTermsEnum_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_SingleTermsEnum_instance_(PyTypeObject *type, PyObject *arg);
        static int t_SingleTermsEnum_init_(t_SingleTermsEnum *self, PyObject *args, PyObject *kwds);

        static PyMethodDef t_SingleTermsEnum__methods_[] = {
          DECLARE_METHOD(t_SingleTermsEnum, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SingleTermsEnum, instance_, METH_O | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(SingleTermsEnum, t_SingleTermsEnum, ::org::apache::lucene::index::FilteredTermsEnum, SingleTermsEnum, t_SingleTermsEnum_init_, 0, 0, 0, 0, 0);

        void t_SingleTermsEnum::install(PyObject *module)
        {
          installType(&PY_TYPE(SingleTermsEnum), module, "SingleTermsEnum", 0);
        }

        void t_SingleTermsEnum::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(SingleTermsEnum).tp_dict, "class_", make_descriptor(SingleTermsEnum::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(SingleTermsEnum).tp_dict, "wrapfn_", make_descriptor(t_SingleTermsEnum::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(SingleTermsEnum).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_SingleTermsEnum_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, SingleTermsEnum::initializeClass, 1)))
            return NULL;
          return t_SingleTermsEnum::wrap_Object(SingleTermsEnum(((t_SingleTermsEnum *) arg)->object.this$));
        }
        static PyObject *t_SingleTermsEnum_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, SingleTermsEnum::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_SingleTermsEnum_init_(t_SingleTermsEnum *self, PyObject *args, PyObject *kwds)
        {
          ::org::apache::lucene::index::TermsEnum a0((jobject) NULL);
          ::org::apache::lucene::util::BytesRef a1((jobject) NULL);
          SingleTermsEnum object((jobject) NULL);

          if (!parseArgs(args, "kk", ::org::apache::lucene::index::TermsEnum::initializeClass, ::org::apache::lucene::util::BytesRef::initializeClass, &a0, &a1))
          {
            INT_CALL(object = SingleTermsEnum(a0, a1));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/cn/ChineseTokenizerFactory.h"
#include "org/apache/lucene/util/AttributeFactory.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/analysis/cn/ChineseTokenizer.h"
#include "java/util/Map.h"
#include "java/io/Reader.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace cn {

          ::java::lang::Class *ChineseTokenizerFactory::class$ = NULL;
          jmethodID *ChineseTokenizerFactory::mids$ = NULL;
          bool ChineseTokenizerFactory::live$ = false;

          jclass ChineseTokenizerFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/cn/ChineseTokenizerFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4c9e2b1c] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_3378b1fc] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/util/AttributeFactory;Ljava/io/Reader;)Lorg/apache/lucene/analysis/cn/ChineseTokenizer;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ChineseTokenizerFactory::ChineseTokenizerFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenizerFactory(env->newObject(initializeClass, &mids$, mid_init$_4c9e2b1c, a0.this$)) {}

          ::org::apache::lucene::analysis::cn::ChineseTokenizer ChineseTokenizerFactory::create(const ::org::apache::lucene::util::AttributeFactory & a0, const ::java::io::Reader & a1) const
          {
            return ::org::apache::lucene::analysis::cn::ChineseTokenizer(env->callObjectMethod(this$, mids$[mid_create_3378b1fc], a0.this$, a1.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace cn {
          static PyObject *t_ChineseTokenizerFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_ChineseTokenizerFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_ChineseTokenizerFactory_init_(t_ChineseTokenizerFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_ChineseTokenizerFactory_create(t_ChineseTokenizerFactory *self, PyObject *args);

          static PyMethodDef t_ChineseTokenizerFactory__methods_[] = {
            DECLARE_METHOD(t_ChineseTokenizerFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ChineseTokenizerFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ChineseTokenizerFactory, create, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(ChineseTokenizerFactory, t_ChineseTokenizerFactory, ::org::apache::lucene::analysis::util::TokenizerFactory, ChineseTokenizerFactory, t_ChineseTokenizerFactory_init_, 0, 0, 0, 0, 0);

          void t_ChineseTokenizerFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(ChineseTokenizerFactory), module, "ChineseTokenizerFactory", 0);
          }

          void t_ChineseTokenizerFactory::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(ChineseTokenizerFactory).tp_dict, "class_", make_descriptor(ChineseTokenizerFactory::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(ChineseTokenizerFactory).tp_dict, "wrapfn_", make_descriptor(t_ChineseTokenizerFactory::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(ChineseTokenizerFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_ChineseTokenizerFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, ChineseTokenizerFactory::initializeClass, 1)))
              return NULL;
            return t_ChineseTokenizerFactory::wrap_Object(ChineseTokenizerFactory(((t_ChineseTokenizerFactory *) arg)->object.this$));
          }
          static PyObject *t_ChineseTokenizerFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, ChineseTokenizerFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_ChineseTokenizerFactory_init_(t_ChineseTokenizerFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            ChineseTokenizerFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = ChineseTokenizerFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_ChineseTokenizerFactory_create(t_ChineseTokenizerFactory *self, PyObject *args)
          {
            ::org::apache::lucene::util::AttributeFactory a0((jobject) NULL);
            ::java::io::Reader a1((jobject) NULL);
            ::org::apache::lucene::analysis::cn::ChineseTokenizer result((jobject) NULL);

            if (!parseArgs(args, "kk", ::org::apache::lucene::util::AttributeFactory::initializeClass, ::java::io::Reader::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.create(a0, a1));
              return ::org::apache::lucene::analysis::cn::t_ChineseTokenizer::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(ChineseTokenizerFactory), (PyObject *) self, "create", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "java/text/Format.h"
#include "java/lang/Class.h"
#include "java/lang/Cloneable.h"
#include "java/lang/StringBuffer.h"
#include "java/lang/String.h"
#include "java/io/Serializable.h"
#include "JArray.h"

namespace java {
  namespace text {

    ::java::lang::Class *Format::class$ = NULL;
    jmethodID *Format::mids$ = NULL;
    bool Format::live$ = false;

    jclass Format::initializeClass(bool getOnly)
    {
      if (getOnly)
        return (jclass) (live$ ? class$->this$ : NULL);
      if (class$ == NULL)
      {
        jclass cls = (jclass) env->findClass("java/text/Format");

        mids$ = new jmethodID[max_mid];
        mids$[mid_clone_846352c3] = env->getMethodID(cls, "clone", "()Ljava/lang/Object;");
        mids$[mid_format_c9db4eed] = env->getMethodID(cls, "format", "(Ljava/lang/Object;)Ljava/lang/String;");
        mids$[mid_parseObject_2a1c4d09] = env->getMethodID(cls, "parseObject", "(Ljava/lang/String;)Ljava/lang/Object;");

        class$ = (::java::lang::Class *) new JObject(cls);
        live$ = true;
      }
      return (jclass) class$->this$;
    }

    ::java::lang::Object Format::clone() const
    {
      return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_clone_846352c3]));
    }

    ::java::lang::String Format::format(const ::java::lang::Object & a0) const
    {
      return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_format_c9db4eed], a0.this$));
    }

    ::java::lang::Object Format::parseObject(const ::java::lang::String & a0) const
    {
      return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_parseObject_2a1c4d09], a0.this$));
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace java {
  namespace text {
    static PyObject *t_Format_cast_(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Format_instance_(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Format_clone(t_Format *self);
    static PyObject *t_Format_format(t_Format *self, PyObject *arg);
    static PyObject *t_Format_parseObject(t_Format *self, PyObject *arg);

    static PyMethodDef t_Format__methods_[] = {
      DECLARE_METHOD(t_Format, cast_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Format, instance_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Format, clone, METH_NOARGS),
      DECLARE_METHOD(t_Format, format, METH_O),
      DECLARE_METHOD(t_Format, parseObject, METH_O),
      { NULL, NULL, 0, NULL }
    };

    DECLARE_TYPE(Format, t_Format, ::java::lang::Object, Format, abstract_init, 0, 0, 0, 0, 0);

    void t_Format::install(PyObject *module)
    {
      installType(&PY_TYPE(Format), module, "Format", 0);
    }

    void t_Format::initialize(PyObject *module)
    {
      PyDict_SetItemString(PY_TYPE(Format).tp_dict, "class_", make_descriptor(Format::initializeClass, 1));
      PyDict_SetItemString(PY_TYPE(Format).tp_dict, "wrapfn_", make_descriptor(t_Format::wrap_jobject));
      PyDict_SetItemString(PY_TYPE(Format).tp_dict, "boxfn_", make_descriptor(boxObject));
    }

    static PyObject *t_Format_cast_(PyTypeObject *type, PyObject *arg)
    {
      if (!(arg = castCheck(arg, Format::initializeClass, 1)))
        return NULL;
      return t_Format::wrap_Object(Format(((t_Format *) arg)->object.this$));
    }
    static PyObject *t_Format_instance_(PyTypeObject *type, PyObject *arg)
    {
      if (!castCheck(arg, Format::initializeClass, 0))
        Py_RETURN_FALSE;
      Py_RETURN_TRUE;
    }

    static PyObject *t_Format_clone(t_Format *self)
    {
      ::java::lang::Object result((jobject) NULL);
      OBJ_CALL(result = self->object.clone());
      return ::java::lang::t_Object::wrap_Object(result);
    }

    static PyObject *t_Format_format(t_Format *self, PyObject *arg)
    {
      ::java::lang::Object a0((jobject) NULL);
      ::java::lang::String result((jobject) NULL);

      if (!parseArg(arg, "o", &a0))
      {
        OBJ_CALL(result = self->object.format(a0));
        return j2p(result);
      }

      PyErr_SetArgsError((PyObject *) self, "format", arg);
      return NULL;
    }

    static PyObject *t_Format_parseObject(t_Format *self, PyObject *arg)
    {
      ::java::lang::String a0((jobject) NULL);
      ::java::lang::Object result((jobject) NULL);

      if (!parseArg(arg, "s", &a0))
      {
        OBJ_CALL(result = self->object.parseObject(a0));
        return ::java::lang::t_Object::wrap_Object(result);
      }

      PyErr_SetArgsError((PyObject *) self, "parseObject", arg);
      return NULL;
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/en/EnglishAnalyzer.h"
#include "org/apache/lucene/util/Version.h"
#include "org/apache/lucene/analysis/util/CharArraySet.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace en {

          ::java::lang::Class *EnglishAnalyzer::class$ = NULL;
          jmethodID *EnglishAnalyzer::mids$ = NULL;
          bool EnglishAnalyzer::live$ = false;

          jclass EnglishAnalyzer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/en/EnglishAnalyzer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_0d96cf33] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;)V");
              mids$[mid_init$_83eafe28] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/analysis/util/CharArraySet;)V");
              mids$[mid_init$_c9d7e4a3] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/analysis/util/CharArraySet;Lorg/apache/lucene/analysis/util/CharArraySet;)V");
              mids$[mid_getDefaultStopSet_d2d3505c] = env->getStaticMethodID(cls, "getDefaultStopSet", "()Lorg/apache/lucene/analysis/util/CharArraySet;");
              mids$[mid_createComponents_1be39cae] = env->getMethodID(cls, "createComponents", "(Ljava/lang/String;Ljava/io/Reader;)Lorg/apache/lucene/analysis/Analyzer$TokenStreamComponents;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          EnglishAnalyzer::EnglishAnalyzer(const ::org::apache::lucene::util::Version & a0) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_0d96cf33, a0.this$)) {}

          EnglishAnalyzer::EnglishAnalyzer(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::analysis::util::CharArraySet & a1) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_83eafe28, a0.this$, a1.this$)) {}

          EnglishAnalyzer::EnglishAnalyzer(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::analysis::util::CharArraySet & a1, const ::org::apache::lucene::analysis::util::CharArraySet & a2) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_c9d7e4a3, a0.this$, a1.this$, a2.this$)) {}

          ::org::apache::lucene::analysis::util::CharArraySet EnglishAnalyzer::getDefaultStopSet()
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::analysis::util::CharArraySet(env->callStaticObjectMethod(cls, mids$[mid_getDefaultStopSet_d2d3505c]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace en {
          static PyObject *t_EnglishAnalyzer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_EnglishAnalyzer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_EnglishAnalyzer_init_(t_EnglishAnalyzer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_EnglishAnalyzer_getDefaultStopSet(PyTypeObject *type);
          static PyObject *t_EnglishAnalyzer_get__defaultStopSet(t_EnglishAnalyzer *self, void *data);
          static PyGetSetDef t_EnglishAnalyzer__fields_[] = {
            DECLARE_GET_FIELD(t_EnglishAnalyzer, defaultStopSet),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_EnglishAnalyzer__methods_[] = {
            DECLARE_METHOD(t_EnglishAnalyzer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_EnglishAnalyzer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_EnglishAnalyzer, getDefaultStopSet, METH_NOARGS | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(EnglishAnalyzer, t_EnglishAnalyzer, ::org::apache::lucene::analysis::util::StopwordAnalyzerBase, EnglishAnalyzer, t_EnglishAnalyzer_init_, 0, 0, t_EnglishAnalyzer__fields_, 0, 0);

          void t_EnglishAnalyzer::install(PyObject *module)
          {
            installType(&PY_TYPE(EnglishAnalyzer), module, "EnglishAnalyzer", 0);
          }

          void t_EnglishAnalyzer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(EnglishAnalyzer).tp_dict, "class_", make_descriptor(EnglishAnalyzer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(EnglishAnalyzer).tp_dict, "wrapfn_", make_descriptor(t_EnglishAnalyzer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(EnglishAnalyzer).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_EnglishAnalyzer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, EnglishAnalyzer::initializeClass, 1)))
              return NULL;
            return t_EnglishAnalyzer::wrap_Object(EnglishAnalyzer(((t_EnglishAnalyzer *) arg)->object.this$));
          }
          static PyObject *t_EnglishAnalyzer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, EnglishAnalyzer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_EnglishAnalyzer_init_(t_EnglishAnalyzer *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                EnglishAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "K", ::org::apache::lucene::util::Version::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_))
                {
                  INT_CALL(object = EnglishAnalyzer(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 2:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                ::org::apache::lucene::analysis::util::CharArraySet a1((jobject) NULL);
                PyTypeObject **p1;
                EnglishAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "KK", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1, &p1, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_))
                {
                  INT_CALL(object = EnglishAnalyzer(a0, a1));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 3:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                ::org::apache::lucene::analysis::util::CharArraySet a1((jobject) NULL);
                PyTypeObject **p1;
                ::org::apache::lucene::analysis::util::CharArraySet a2((jobject) NULL);
                PyTypeObject **p2;
                EnglishAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "KKK", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1, &p1, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_, &a2, &p2, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_))
                {
                  INT_CALL(object = EnglishAnalyzer(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_EnglishAnalyzer_getDefaultStopSet(PyTypeObject *type)
          {
            ::org::apache::lucene::analysis::util::CharArraySet result((jobject) NULL);
            OBJ_CALL(result = ::org::apache::lucene::analysis::en::EnglishAnalyzer::getDefaultStopSet());
            return ::org::apache::lucene::analysis::util::t_CharArraySet::wrap_Object(result);
          }

          static PyObject *t_EnglishAnalyzer_get__defaultStopSet(t_EnglishAnalyzer *self, void *data)
          {
            ::org::apache::lucene::analysis::util::CharArraySet value((jobject) NULL);
            OBJ_CALL(value = self->object.getDefaultStopSet());
            return ::org::apache::lucene::analysis::util::t_CharArraySet::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/facet/taxonomy/IntAssociationFacetField.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace taxonomy {

          ::java::lang::Class *IntAssociationFacetField::class$ = NULL;
          jmethodID *IntAssociationFacetField::mids$ = NULL;
          bool IntAssociationFacetField::live$ = false;

          jclass IntAssociationFacetField::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/facet/taxonomy/IntAssociationFacetField");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_6b7c0b54] = env->getMethodID(cls, "<init>", "(ILjava/lang/String;[Ljava/lang/String;)V");
              mids$[mid_bytesRefToInt_7bc03ddb] = env->getStaticMethodID(cls, "bytesRefToInt", "(Lorg/apache/lucene/util/BytesRef;)I");
              mids$[mid_intToBytesRef_b57e9c3f] = env->getStaticMethodID(cls, "intToBytesRef", "(I)Lorg/apache/lucene/util/BytesRef;");
              mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          IntAssociationFacetField::IntAssociationFacetField(jint a0, const ::java::lang::String & a1, const JArray< ::java::lang::String > & a2) : ::org::apache::lucene::facet::taxonomy::AssociationFacetField(env->newObject(initializeClass, &mids$, mid_init$_6b7c0b54, a0, a1.this$, a2.this$)) {}

          jint IntAssociationFacetField::bytesRefToInt(const ::org::apache::lucene::util::BytesRef & a0)
          {
            jclass cls = env->getClass(initializeClass);
            return env->callStaticIntMethod(cls, mids$[mid_bytesRefToInt_7bc03ddb], a0.this$);
          }

          ::org::apache::lucene::util::BytesRef IntAssociationFacetField::intToBytesRef(jint a0)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::util::BytesRef(env->callStaticObjectMethod(cls, mids$[mid_intToBytesRef_b57e9c3f], a0));
          }

          ::java::lang::String IntAssociationFacetField::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace taxonomy {
          static PyObject *t_IntAssociationFacetField_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_IntAssociationFacetField_instance_(PyTypeObject *type, PyObject *arg);
          static int t_IntAssociationFacetField_init_(t_IntAssociationFacetField *self, PyObject *args, PyObject *kwds);
          static PyObject *t_IntAssociationFacetField_bytesRefToInt(PyTypeObject *type, PyObject *arg);
          static PyObject *t_IntAssociationFacetField_intToBytesRef(PyTypeObject *type, PyObject *arg);
          static PyObject *t_IntAssociationFacetField_toString(t_IntAssociationFacetField *self, PyObject *args);

          static PyMethodDef t_IntAssociationFacetField__methods_[] = {
            DECLARE_METHOD(t_IntAssociationFacetField, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_IntAssociationFacetField, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_IntAssociationFacetField, bytesRefToInt, METH_O | METH_CLASS),
            DECLARE_METHOD(t_IntAssociationFacetField, intToBytesRef, METH_O | METH_CLASS),
            DECLARE_METHOD(t_IntAssociationFacetField, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(IntAssociationFacetField, t_IntAssociationFacetField, ::org::apache::lucene::facet::taxonomy::AssociationFacetField, IntAssociationFacetField, t_IntAssociationFacetField_init_, 0, 0, 0, 0, 0);

          void t_IntAssociationFacetField::install(PyObject *module)
          {
            installType(&PY_TYPE(IntAssociationFacetField), module, "IntAssociationFacetField", 0);
          }

          void t_IntAssociationFacetField::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(IntAssociationFacetField).tp_dict, "class_", make_descriptor(IntAssociationFacetField::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(IntAssociationFacetField).tp_dict, "wrapfn_", make_descriptor(t_IntAssociationFacetField::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(IntAssociationFacetField).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_IntAssociationFacetField_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, IntAssociationFacetField::initializeClass, 1)))
              return NULL;
            return t_IntAssociationFacetField::wrap_Object(IntAssociationFacetField(((t_IntAssociationFacetField *) arg)->object.this$));
          }
          static PyObject *t_IntAssociationFacetField_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, IntAssociationFacetField::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_IntAssociationFacetField_init_(t_IntAssociationFacetField *self, PyObject *args, PyObject *kwds)
          {
            jint a0;
            ::java::lang::String a1((jobject) NULL);
            JArray< ::java::lang::String > a2((jobject) NULL);
            IntAssociationFacetField object((jobject) NULL);

            if (!parseArgs(args, "Is[s", &a0, &a1, &a2))
            {
              INT_CALL(object = IntAssociationFacetField(a0, a1, a2));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_IntAssociationFacetField_bytesRefToInt(PyTypeObject *type, PyObject *arg)
          {
            ::org::apache::lucene::util::BytesRef a0((jobject) NULL);
            jint result;

            if (!parseArg(arg, "k", ::org::apache::lucene::util::BytesRef::initializeClass, &a0))
            {
              OBJ_CALL(result = ::org::apache::lucene::facet::taxonomy::IntAssociationFacetField::bytesRefToInt(a0));
              return PyInt_FromLong((long) result);
            }

            PyErr_SetArgsError(type, "bytesRefToInt", arg);
            return NULL;
          }

          static PyObject *t_IntAssociationFacetField_intToBytesRef(PyTypeObject *type, PyObject *arg)
          {
            jint a0;
            ::org::apache::lucene::util::BytesRef result((jobject) NULL);

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(result = ::org::apache::lucene::facet::taxonomy::IntAssociationFacetField::intToBytesRef(a0));
              return ::org::apache::lucene::util::t_BytesRef::wrap_Object(result);
            }

            PyErr_SetArgsError(type, "intToBytesRef", arg);
            return NULL;
          }

          static PyObject *t_IntAssociationFacetField_toString(t_IntAssociationFacetField *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(&PY_TYPE(IntAssociationFacetField), (PyObject *) self, "toString", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/lucene40/Lucene40SkipListReader.h"
#include "org/apache/lucene/store/IndexInput.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace lucene40 {

          ::java::lang::Class *Lucene40SkipListReader::class$ = NULL;
          jmethodID *Lucene40SkipListReader::mids$ = NULL;
          bool Lucene40SkipListReader::live$ = false;

          jclass Lucene40SkipListReader::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/lucene40/Lucene40SkipListReader");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_949015ba] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/store/IndexInput;II)V");
              mids$[mid_getFreqPointer_54c6a17a] = env->getMethodID(cls, "getFreqPointer", "()J");
              mids$[mid_getOffsetLength_54c6a179] = env->getMethodID(cls, "getOffsetLength", "()I");
              mids$[mid_getPayloadLength_54c6a179] = env->getMethodID(cls, "getPayloadLength", "()I");
              mids$[mid_getProxPointer_54c6a17a] = env->getMethodID(cls, "getProxPointer", "()J");
              mids$[mid_init_05c5678f] = env->getMethodID(cls, "init", "(JJJIZZ)V");
              mids$[mid_seekChild_39c7bd3c] = env->getMethodID(cls, "seekChild", "(I)V");
              mids$[mid_setLastSkipData_39c7bd3c] = env->getMethodID(cls, "setLastSkipData", "(I)V");
              mids$[mid_readSkipData_5203bb2b] = env->getMethodID(cls, "readSkipData", "(ILorg/apache/lucene/store/IndexInput;)I");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          Lucene40SkipListReader::Lucene40SkipListReader(const ::org::apache::lucene::store::IndexInput & a0, jint a1, jint a2) : ::org::apache::lucene::codecs::MultiLevelSkipListReader(env->newObject(initializeClass, &mids$, mid_init$_949015ba, a0.this$, a1, a2)) {}

          jlong Lucene40SkipListReader::getFreqPointer() const
          {
            return env->callLongMethod(this$, mids$[mid_getFreqPointer_54c6a17a]);
          }

          jint Lucene40SkipListReader::getOffsetLength() const
          {
            return env->callIntMethod(this$, mids$[mid_getOffsetLength_54c6a179]);
          }

          jint Lucene40SkipListReader::getPayloadLength() const
          {
            return env->callIntMethod(this$, mids$[mid_getPayloadLength_54c6a179]);
          }

          jlong Lucene40SkipListReader::getProxPointer() const
          {
            return env->callLongMethod(this$, mids$[mid_getProxPointer_54c6a17a]);
          }

          void Lucene40SkipListReader::init(jlong a0, jlong a1, jlong a2, jint a3, jboolean a4, jboolean a5) const
          {
            env->callVoidMethod(this$, mids$[mid_init_05c5678f], a0, a1, a2, a3, a4, a5);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace lucene40 {
          static PyObject *t_Lucene40SkipListReader_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Lucene40SkipListReader_instance_(PyTypeObject *type, PyObject *arg);
          static int t_Lucene40SkipListReader_init_(t_Lucene40SkipListReader *self, PyObject *args, PyObject *kwds);
          static PyObject *t_Lucene40SkipListReader_getFreqPointer(t_Lucene40SkipListReader *self);
          static PyObject *t_Lucene40SkipListReader_getOffsetLength(t_Lucene40SkipListReader *self);
          static PyObject *t_Lucene40SkipListReader_getPayloadLength(t_Lucene40SkipListReader *self);
          static PyObject *t_Lucene40SkipListReader_getProxPointer(t_Lucene40SkipListReader *self);
          static PyObject *t_Lucene40SkipListReader_init(t_Lucene40SkipListReader *self, PyObject *args);
          static PyObject *t_Lucene40SkipListReader_get__freqPointer(t_Lucene40SkipListReader *self, void *data);
          static PyObject *t_Lucene40SkipListReader_get__offsetLength(t_Lucene40SkipListReader *self, void *data);
          static PyObject *t_Lucene40SkipListReader_get__payloadLength(t_Lucene40SkipListReader *self, void *data);
          static PyObject *t_Lucene40SkipListReader_get__proxPointer(t_Lucene40SkipListReader *self, void *data);
          static PyGetSetDef t_Lucene40SkipListReader__fields_[] = {
            DECLARE_GET_FIELD(t_Lucene40SkipListReader, freqPointer),
            DECLARE_GET_FIELD(t_Lucene40SkipListReader, offsetLength),
            DECLARE_GET_FIELD(t_Lucene40SkipListReader, payloadLength),
            DECLARE_GET_FIELD(t_Lucene40SkipListReader, proxPointer),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_Lucene40SkipListReader__methods_[] = {
            DECLARE_METHOD(t_Lucene40SkipListReader, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lucene40SkipListReader, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lucene40SkipListReader, getFreqPointer, METH_NOARGS),
            DECLARE_METHOD(t_Lucene40SkipListReader, getOffsetLength, METH_NOARGS),
            DECLARE_METHOD(t_Lucene40SkipListReader, getPayloadLength, METH_NOARGS),
            DECLARE_METHOD(t_Lucene40SkipListReader, getProxPointer, METH_NOARGS),
            DECLARE_METHOD(t_Lucene40SkipListReader, init, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(Lucene40SkipListReader, t_Lucene40SkipListReader, ::org::apache::lucene::codecs::MultiLevelSkipListReader, Lucene40SkipListReader, t_Lucene40SkipListReader_init_, 0, 0, t_Lucene40SkipListReader__fields_, 0, 0);

          void t_Lucene40SkipListReader::install(PyObject *module)
          {
            installType(&PY_TYPE(Lucene40SkipListReader), module, "Lucene40SkipListReader", 0);
          }

          void t_Lucene40SkipListReader::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(Lucene40SkipListReader).tp_dict, "class_", make_descriptor(Lucene40SkipListReader::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(Lucene40SkipListReader).tp_dict, "wrapfn_", make_descriptor(t_Lucene40SkipListReader::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(Lucene40SkipListReader).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_Lucene40SkipListReader_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, Lucene40SkipListReader::initializeClass, 1)))
              return NULL;
            return t_Lucene40SkipListReader::wrap_Object(Lucene40SkipListReader(((t_Lucene40SkipListReader *) arg)->object.this$));
          }
          static PyObject *t_Lucene40SkipListReader_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, Lucene40SkipListReader::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_Lucene40SkipListReader_init_(t_Lucene40SkipListReader *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::store::IndexInput a0((jobject) NULL);
            jint a1;
            jint a2;
            Lucene40SkipListReader object((jobject) NULL);

            if (!parseArgs(args, "kII", ::org::apache::lucene::store::IndexInput::initializeClass, &a0, &a1, &a2))
            {
              INT_CALL(object = Lucene40SkipListReader(a0, a1, a2));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_Lucene40SkipListReader_getFreqPointer(t_Lucene40SkipListReader *self)
          {
            jlong result;
            OBJ_CALL(result = self->object.getFreqPointer());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          static PyObject *t_Lucene40SkipListReader_getOffsetLength(t_Lucene40SkipListReader *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getOffsetLength());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_Lucene40SkipListReader_getPayloadLength(t_Lucene40SkipListReader *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getPayloadLength());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_Lucene40SkipListReader_getProxPointer(t_Lucene40SkipListReader *self)
          {
            jlong result;
            OBJ_CALL(result = self->object.getProxPointer());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          static PyObject *t_Lucene40SkipListReader_init(t_Lucene40SkipListReader *self, PyObject *args)
          {
            jlong a0;
            jlong a1;
            jlong a2;
            jint a3;
            jboolean a4;
            jboolean a5;

            if (!parseArgs(args, "JJJIZZ", &a0, &a1, &a2, &a3, &a4, &a5))
            {
              OBJ_CALL(self->object.init(a0, a1, a2, a3, a4, a5));
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(Lucene40SkipListReader), (PyObject *) self, "init", args, 2);
          }

          static PyObject *t_Lucene40SkipListReader_get__freqPointer(t_Lucene40SkipListReader *self, void *data)
          {
            jlong value;
            OBJ_CALL(value = self->object.getFreqPointer());
            return PyLong_FromLongLong((PY_LONG_LONG) value);
          }

          static PyObject *t_Lucene40SkipListReader_get__offsetLength(t_Lucene40SkipListReader *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getOffsetLength());
            return PyInt_FromLong((long) value);
          }

          static PyObject *t_Lucene40SkipListReader_get__payloadLength(t_Lucene40SkipListReader *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getPayloadLength());
            return PyInt_FromLong((long) value);
          }

          static PyObject *t_Lucene40SkipListReader_get__proxPointer(t_Lucene40SkipListReader *self, void *data)
          {
            jlong value;
            OBJ_CALL(value = self->object.getProxPointer());
            return PyLong_FromLongLong((PY_LONG_LONG) value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/store/InputStreamDataInput.h"
#include "java/io/Closeable.h"
#include "java/io/IOException.h"
#include "java/io/InputStream.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {

        ::java::lang::Class *InputStreamDataInput::class$ = NULL;
        jmethodID *InputStreamDataInput::mids$ = NULL;
        bool InputStreamDataInput::live$ = false;

        jclass InputStreamDataInput::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/store/InputStreamDataInput");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_be2e4f90] = env->getMethodID(cls, "<init>", "(Ljava/io/InputStream;)V");
            mids$[mid_close_54c6a166] = env->getMethodID(cls, "close", "()V");
            mids$[mid_readByte_54c6a172] = env->getMethodID(cls, "readByte", "()B");
            mids$[mid_readBytes_86f4435f] = env->getMethodID(cls, "readBytes", "([BII)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        InputStreamDataInput::InputStreamDataInput(const ::java::io::InputStream & a0) : ::org::apache::lucene::store::DataInput(env->newObject(initializeClass, &mids$, mid_init$_be2e4f90, a0.this$)) {}

        void InputStreamDataInput::close() const
        {
          env->callVoidMethod(this$, mids$[mid_close_54c6a166]);
        }

        jbyte InputStreamDataInput::readByte() const
        {
          return env->callByteMethod(this$, mids$[mid_readByte_54c6a172]);
        }

        void InputStreamDataInput::readBytes(const JArray< jbyte > & a0, jint a1, jint a2) const
        {
          env->callVoidMethod(this$, mids$[mid_readBytes_86f4435f], a0.this$, a1, a2);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {
        static PyObject *t_InputStreamDataInput_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_InputStreamDataInput_instance_(PyTypeObject *type, PyObject *arg);
        static int t_InputStreamDataInput_init_(t_InputStreamDataInput *self, PyObject *args, PyObject *kwds);
        static PyObject *t_InputStreamDataInput_close(t_InputStreamDataInput *self);
        static PyObject *t_InputStreamDataInput_readByte(t_InputStreamDataInput *self, PyObject *args);
        static PyObject *t_InputStreamDataInput_readBytes(t_InputStreamDataInput *self, PyObject *args);

        static PyMethodDef t_InputStreamDataInput__methods_[] = {
          DECLARE_METHOD(t_InputStreamDataInput, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_InputStreamDataInput, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_InputStreamDataInput, close, METH_NOARGS),
          DECLARE_METHOD(t_InputStreamDataInput, readByte, METH_VARARGS),
          DECLARE_METHOD(t_InputStreamDataInput, readBytes, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(InputStreamDataInput, t_InputStreamDataInput, ::org::apache::lucene::store::DataInput, InputStreamDataInput, t_InputStreamDataInput_init_, 0, 0, 0, 0, 0);

        void t_InputStreamDataInput::install(PyObject *module)
        {
          installType(&PY_TYPE(InputStreamDataInput), module, "InputStreamDataInput", 0);
        }

        void t_InputStreamDataInput::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(InputStreamDataInput).tp_dict, "class_", make_descriptor(InputStreamDataInput::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(InputStreamDataInput).tp_dict, "wrapfn_", make_descriptor(t_InputStreamDataInput::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(InputStreamDataInput).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_InputStreamDataInput_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, InputStreamDataInput::initializeClass, 1)))
            return NULL;
          return t_InputStreamDataInput::wrap_Object(InputStreamDataInput(((t_InputStreamDataInput *) arg)->object.this$));
        }
        static PyObject *t_InputStreamDataInput_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, InputStreamDataInput::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_InputStreamDataInput_init_(t_InputStreamDataInput *self, PyObject *args, PyObject *kwds)
        {
          ::java::io::InputStream a0((jobject) NULL);
          InputStreamDataInput object((jobject) NULL);

          if (!parseArgs(args, "k", ::java::io::InputStream::initializeClass, &a0))
          {
            INT_CALL(object = InputStreamDataInput(a0));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_InputStreamDataInput_close(t_InputStreamDataInput *self)
        {
          OBJ_CALL(self->object.close());
          Py_RETURN_NONE;
        }

        static PyObject *t_InputStreamDataInput_readByte(t_InputStreamDataInput *self, PyObject *args)
        {
          jbyte result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.readByte());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(InputStreamDataInput), (PyObject *) self, "readByte", args, 2);
        }

        static PyObject *t_InputStreamDataInput_readBytes(t_InputStreamDataInput *self, PyObject *args)
        {
          JArray< jbyte > a0((jobject) NULL);
          jint a1;
          jint a2;

          if (!parseArgs(args, "[BII", &a0, &a1, &a2))
          {
            OBJ_CALL(self->object.readBytes(a0, a1, a2));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(InputStreamDataInput), (PyObject *) self, "readBytes", args, 2);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/xml/builders/DuplicateFilterBuilder.h"
#include "org/apache/lucene/queryparser/xml/FilterBuilder.h"
#include "org/apache/lucene/search/Filter.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace xml {
          namespace builders {

            ::java::lang::Class *DuplicateFilterBuilder::class$ = NULL;
            jmethodID *DuplicateFilterBuilder::mids$ = NULL;
            bool DuplicateFilterBuilder::live$ = false;

            jclass DuplicateFilterBuilder::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/xml/builders/DuplicateFilterBuilder");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            DuplicateFilterBuilder::DuplicateFilterBuilder() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace xml {
          namespace builders {
            static PyObject *t_DuplicateFilterBuilder_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_DuplicateFilterBuilder_instance_(PyTypeObject *type, PyObject *arg);
            static int t_DuplicateFilterBuilder_init_(t_DuplicateFilterBuilder *self, PyObject *args, PyObject *kwds);

            static PyMethodDef t_DuplicateFilterBuilder__methods_[] = {
              DECLARE_METHOD(t_DuplicateFilterBuilder, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_DuplicateFilterBuilder, instance_, METH_O | METH_CLASS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(DuplicateFilterBuilder, t_DuplicateFilterBuilder, ::java::lang::Object, DuplicateFilterBuilder, t_DuplicateFilterBuilder_init_, 0, 0, 0, 0, 0);

            void t_DuplicateFilterBuilder::install(PyObject *module)
            {
              installType(&PY_TYPE(DuplicateFilterBuilder), module, "DuplicateFilterBuilder", 0);
            }

            void t_DuplicateFilterBuilder::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(DuplicateFilterBuilder).tp_dict, "class_", make_descriptor(DuplicateFilterBuilder::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(DuplicateFilterBuilder).tp_dict, "wrapfn_", make_descriptor(t_DuplicateFilterBuilder::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(DuplicateFilterBuilder).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_DuplicateFilterBuilder_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, DuplicateFilterBuilder::initializeClass, 1)))
                return NULL;
              return t_DuplicateFilterBuilder::wrap_Object(DuplicateFilterBuilder(((t_DuplicateFilterBuilder *) arg)->object.this$));
            }
            static PyObject *t_DuplicateFilterBuilder_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, DuplicateFilterBuilder::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_DuplicateFilterBuilder_init_(t_DuplicateFilterBuilder *self, PyObject *args, PyObject *kwds)
            {
              DuplicateFilterBuilder object((jobject) NULL);

              INT_CALL(object = DuplicateFilterBuilder());
              self->object = object;

              return 0;
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/document/DateTools$Resolution.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace document {

        ::java::lang::Class *DateTools$Resolution::class$ = NULL;
        jmethodID *DateTools$Resolution::mids$ = NULL;
        bool DateTools$Resolution::live$ = false;
        DateTools$Resolution *DateTools$Resolution::DAY = NULL;
        DateTools$Resolution *DateTools$Resolution::HOUR = NULL;
        DateTools$Resolution *DateTools$Resolution::MILLISECOND = NULL;
        DateTools$Resolution *DateTools$Resolution::MINUTE = NULL;
        DateTools$Resolution *DateTools$Resolution::MONTH = NULL;
        DateTools$Resolution *DateTools$Resolution::SECOND = NULL;
        DateTools$Resolution *DateTools$Resolution::YEAR = NULL;

        jclass DateTools$Resolution::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/document/DateTools$Resolution");

            mids$ = new jmethodID[max_mid];
            mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");
            mids$[mid_valueOf_65edc44f] = env->getStaticMethodID(cls, "valueOf", "(Ljava/lang/String;)Lorg/apache/lucene/document/DateTools$Resolution;");
            mids$[mid_values_aa4de4a9] = env->getStaticMethodID(cls, "values", "()[Lorg/apache/lucene/document/DateTools$Resolution;");

            class$ = (::java::lang::Class *) new JObject(cls);
            cls = (jclass) class$->this$;

            DAY = new DateTools$Resolution(env->getStaticObjectField(cls, "DAY", "Lorg/apache/lucene/document/DateTools$Resolution;"));
            HOUR = new DateTools$Resolution(env->getStaticObjectField(cls, "HOUR", "Lorg/apache/lucene/document/DateTools$Resolution;"));
            MILLISECOND = new DateTools$Resolution(env->getStaticObjectField(cls, "MILLISECOND", "Lorg/apache/lucene/document/DateTools$Resolution;"));
            MINUTE = new DateTools$Resolution(env->getStaticObjectField(cls, "MINUTE", "Lorg/apache/lucene/document/DateTools$Resolution;"));
            MONTH = new DateTools$Resolution(env->getStaticObjectField(cls, "MONTH", "Lorg/apache/lucene/document/DateTools$Resolution;"));
            SECOND = new DateTools$Resolution(env->getStaticObjectField(cls, "SECOND", "Lorg/apache/lucene/document/DateTools$Resolution;"));
            YEAR = new DateTools$Resolution(env->getStaticObjectField(cls, "YEAR", "Lorg/apache/lucene/document/DateTools$Resolution;"));
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        ::java::lang::String DateTools$Resolution::toString() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
        }

        DateTools$Resolution DateTools$Resolution::valueOf(const ::java::lang::String & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return DateTools$Resolution(env->callStaticObjectMethod(cls, mids$[mid_valueOf_65edc44f], a0.this$));
        }

        JArray< DateTools$Resolution > DateTools$Resolution::values()
        {
          jclass cls = env->getClass(initializeClass);
          return JArray< DateTools$Resolution >(env->callStaticObjectMethod(cls, mids$[mid_values_aa4de4a9]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace document {
        static PyObject *t_DateTools$Resolution_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_DateTools$Resolution_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_DateTools$Resolution_of_(t_DateTools$Resolution *self, PyObject *args);
        static PyObject *t_DateTools$Resolution_toString(t_DateTools$Resolution *self, PyObject *args);
        static PyObject *t_DateTools$Resolution_valueOf(PyTypeObject *type, PyObject *args);
        static PyObject *t_DateTools$Resolution_values(PyTypeObject *type);
        static PyObject *t_DateTools$Resolution_get__parameters_(t_DateTools$Resolution *self, void *data);
        static PyGetSetDef t_DateTools$Resolution__fields_[] = {
          DECLARE_GET_FIELD(t_DateTools$Resolution, parameters_),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_DateTools$Resolution__methods_[] = {
          DECLARE_METHOD(t_DateTools$Resolution, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_DateTools$Resolution, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_DateTools$Resolution, of_, METH_VARARGS),
          DECLARE_METHOD(t_DateTools$Resolution, toString, METH_VARARGS),
          DECLARE_METHOD(t_DateTools$Resolution, valueOf, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_DateTools$Resolution, values, METH_NOARGS | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(DateTools$Resolution, t_DateTools$Resolution, ::java::lang::Enum, DateTools$Resolution, abstract_init, 0, 0, t_DateTools$Resolution__fields_, 0, 0);
        PyObject *t_DateTools$Resolution::wrap_Object(const DateTools$Resolution& object, PyTypeObject *p0)
        {
          PyObject *obj = t_DateTools$Resolution::wrap_Object(object);
          if (obj != NULL && obj != Py_None)
          {
            t_DateTools$Resolution *self = (t_DateTools$Resolution *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        PyObject *t_DateTools$Resolution::wrap_jobject(const jobject& object, PyTypeObject *p0)
        {
          PyObject *obj = t_DateTools$Resolution::wrap_jobject(object);
          if (obj != NULL && obj != Py_None)
          {
            t_DateTools$Resolution *self = (t_DateTools$Resolution *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        void t_DateTools$Resolution::install(PyObject *module)
        {
          installType(&PY_TYPE(DateTools$Resolution), module, "DateTools$Resolution", 0);
        }

        void t_DateTools$Resolution::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(DateTools$Resolution).tp_dict, "class_", make_descriptor(DateTools$Resolution::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(DateTools$Resolution).tp_dict, "wrapfn_", make_descriptor(t_DateTools$Resolution::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(DateTools$Resolution).tp_dict, "boxfn_", make_descriptor(boxObject));
          env->getClass(DateTools$Resolution::initializeClass);
          PyDict_SetItemString(PY_TYPE(DateTools$Resolution).tp_dict, "DAY", make_descriptor(t_DateTools$Resolution::wrap_Object(*DateTools$Resolution::DAY)));
          PyDict_SetItemString(PY_TYPE(DateTools$Resolution).tp_dict, "HOUR", make_descriptor(t_DateTools$Resolution::wrap_Object(*DateTools$Resolution::HOUR)));
          PyDict_SetItemString(PY_TYPE(DateTools$Resolution).tp_dict, "MILLISECOND", make_descriptor(t_DateTools$Resolution::wrap_Object(*DateTools$Resolution::MILLISECOND)));
          PyDict_SetItemString(PY_TYPE(DateTools$Resolution).tp_dict, "MINUTE", make_descriptor(t_DateTools$Resolution::wrap_Object(*DateTools$Resolution::MINUTE)));
          PyDict_SetItemString(PY_TYPE(DateTools$Resolution).tp_dict, "MONTH", make_descriptor(t_DateTools$Resolution::wrap_Object(*DateTools$Resolution::MONTH)));
          PyDict_SetItemString(PY_TYPE(DateTools$Resolution).tp_dict, "SECOND", make_descriptor(t_DateTools$Resolution::wrap_Object(*DateTools$Resolution::SECOND)));
          PyDict_SetItemString(PY_TYPE(DateTools$Resolution).tp_dict, "YEAR", make_descriptor(t_DateTools$Resolution::wrap_Object(*DateTools$Resolution::YEAR)));
        }

        static PyObject *t_DateTools$Resolution_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, DateTools$Resolution::initializeClass, 1)))
            return NULL;
          return t_DateTools$Resolution::wrap_Object(DateTools$Resolution(((t_DateTools$Resolution *) arg)->object.this$));
        }
        static PyObject *t_DateTools$Resolution_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, DateTools$Resolution::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_DateTools$Resolution_of_(t_DateTools$Resolution *self, PyObject *args)
        {
          if (!parseArg(args, "T", 1, &(self->parameters)))
            Py_RETURN_SELF;
          return PyErr_SetArgsError((PyObject *) self, "of_", args);
        }

        static PyObject *t_DateTools$Resolution_toString(t_DateTools$Resolution *self, PyObject *args)
        {
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.toString());
            return j2p(result);
          }

          return callSuper(&PY_TYPE(DateTools$Resolution), (PyObject *) self, "toString", args, 2);
        }

        static PyObject *t_DateTools$Resolution_valueOf(PyTypeObject *type, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          DateTools$Resolution result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::document::DateTools$Resolution::valueOf(a0));
            return t_DateTools$Resolution::wrap_Object(result);
          }

          return callSuper(type, "valueOf", args, 2);
        }

        static PyObject *t_DateTools$Resolution_values(PyTypeObject *type)
        {
          JArray< DateTools$Resolution > result((jobject) NULL);
          OBJ_CALL(result = ::org::apache::lucene::document::DateTools$Resolution::values());
          return JArray<jobject>(result.this$).wrap(t_DateTools$Resolution::wrap_jobject);
        }
        static PyObject *t_DateTools$Resolution_get__parameters_(t_DateTools$Resolution *self, void *data)
        {
          return typeParameters(self->parameters, sizeof(self->parameters));
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/hi/HindiAnalyzer.h"
#include "org/apache/lucene/util/Version.h"
#include "java/lang/String.h"
#include "org/apache/lucene/analysis/util/CharArraySet.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace hi {

          ::java::lang::Class *HindiAnalyzer::class$ = NULL;
          jmethodID *HindiAnalyzer::mids$ = NULL;
          bool HindiAnalyzer::live$ = false;
          ::java::lang::String *HindiAnalyzer::DEFAULT_STOPWORD_FILE = NULL;

          jclass HindiAnalyzer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/hi/HindiAnalyzer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_0d96cf33] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;)V");
              mids$[mid_init$_83eafe28] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/analysis/util/CharArraySet;)V");
              mids$[mid_init$_c9d7e4a3] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/analysis/util/CharArraySet;Lorg/apache/lucene/analysis/util/CharArraySet;)V");
              mids$[mid_getDefaultStopSet_d2d3505c] = env->getStaticMethodID(cls, "getDefaultStopSet", "()Lorg/apache/lucene/analysis/util/CharArraySet;");
              mids$[mid_createComponents_1be39cae] = env->getMethodID(cls, "createComponents", "(Ljava/lang/String;Ljava/io/Reader;)Lorg/apache/lucene/analysis/Analyzer$TokenStreamComponents;");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              DEFAULT_STOPWORD_FILE = new ::java::lang::String(env->getStaticObjectField(cls, "DEFAULT_STOPWORD_FILE", "Ljava/lang/String;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          HindiAnalyzer::HindiAnalyzer(const ::org::apache::lucene::util::Version & a0) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_0d96cf33, a0.this$)) {}

          HindiAnalyzer::HindiAnalyzer(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::analysis::util::CharArraySet & a1) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_83eafe28, a0.this$, a1.this$)) {}

          HindiAnalyzer::HindiAnalyzer(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::analysis::util::CharArraySet & a1, const ::org::apache::lucene::analysis::util::CharArraySet & a2) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_c9d7e4a3, a0.this$, a1.this$, a2.this$)) {}

          ::org::apache::lucene::analysis::util::CharArraySet HindiAnalyzer::getDefaultStopSet()
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::analysis::util::CharArraySet(env->callStaticObjectMethod(cls, mids$[mid_getDefaultStopSet_d2d3505c]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace hi {
          static PyObject *t_HindiAnalyzer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_HindiAnalyzer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_HindiAnalyzer_init_(t_HindiAnalyzer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_HindiAnalyzer_getDefaultStopSet(PyTypeObject *type);
          static PyObject *t_HindiAnalyzer_get__defaultStopSet(t_HindiAnalyzer *self, void *data);
          static PyGetSetDef t_HindiAnalyzer__fields_[] = {
            DECLARE_GET_FIELD(t_HindiAnalyzer, defaultStopSet),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_HindiAnalyzer__methods_[] = {
            DECLARE_METHOD(t_HindiAnalyzer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_HindiAnalyzer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_HindiAnalyzer, getDefaultStopSet, METH_NOARGS | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(HindiAnalyzer, t_HindiAnalyzer, ::org::apache::lucene::analysis::util::StopwordAnalyzerBase, HindiAnalyzer, t_HindiAnalyzer_init_, 0, 0, t_HindiAnalyzer__fields_, 0, 0);

          void t_HindiAnalyzer::install(PyObject *module)
          {
            installType(&PY_TYPE(HindiAnalyzer), module, "HindiAnalyzer", 0);
          }

          void t_HindiAnalyzer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(HindiAnalyzer).tp_dict, "class_", make_descriptor(HindiAnalyzer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(HindiAnalyzer).tp_dict, "wrapfn_", make_descriptor(t_HindiAnalyzer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(HindiAnalyzer).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(HindiAnalyzer::initializeClass);
            PyDict_SetItemString(PY_TYPE(HindiAnalyzer).tp_dict, "DEFAULT_STOPWORD_FILE", make_descriptor(j2p(*HindiAnalyzer::DEFAULT_STOPWORD_FILE)));
          }

          static PyObject *t_HindiAnalyzer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, HindiAnalyzer::initializeClass, 1)))
              return NULL;
            return t_HindiAnalyzer::wrap_Object(HindiAnalyzer(((t_HindiAnalyzer *) arg)->object.this$));
          }
          static PyObject *t_HindiAnalyzer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, HindiAnalyzer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_HindiAnalyzer_init_(t_HindiAnalyzer *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                HindiAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "K", ::org::apache::lucene::util::Version::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_))
                {
                  INT_CALL(object = HindiAnalyzer(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 2:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                ::org::apache::lucene::analysis::util::CharArraySet a1((jobject) NULL);
                PyTypeObject **p1;
                HindiAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "KK", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1, &p1, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_))
                {
                  INT_CALL(object = HindiAnalyzer(a0, a1));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 3:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                ::org::apache::lucene::analysis::util::CharArraySet a1((jobject) NULL);
                PyTypeObject **p1;
                ::org::apache::lucene::analysis::util::CharArraySet a2((jobject) NULL);
                PyTypeObject **p2;
                HindiAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "KKK", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1, &p1, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_, &a2, &p2, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_))
                {
                  INT_CALL(object = HindiAnalyzer(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_HindiAnalyzer_getDefaultStopSet(PyTypeObject *type)
          {
            ::org::apache::lucene::analysis::util::CharArraySet result((jobject) NULL);
            OBJ_CALL(result = ::org::apache::lucene::analysis::hi::HindiAnalyzer::getDefaultStopSet());
            return ::org::apache::lucene::analysis::util::t_CharArraySet::wrap_Object(result);
          }

          static PyObject *t_HindiAnalyzer_get__defaultStopSet(t_HindiAnalyzer *self, void *data)
          {
            ::org::apache::lucene::analysis::util::CharArraySet value((jobject) NULL);
            OBJ_CALL(value = self->object.getDefaultStopSet());
            return ::org::apache::lucene::analysis::util::t_CharArraySet::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/ngram/EdgeNGramTokenizerFactory.h"
#include "org/apache/lucene/util/AttributeFactory.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/analysis/Tokenizer.h"
#include "java/util/Map.h"
#include "java/io/Reader.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ngram {

          ::java::lang::Class *EdgeNGramTokenizerFactory::class$ = NULL;
          jmethodID *EdgeNGramTokenizerFactory::mids$ = NULL;
          bool EdgeNGramTokenizerFactory::live$ = false;

          jclass EdgeNGramTokenizerFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/ngram/EdgeNGramTokenizerFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4c9e2b1c] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_e51780e9] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/util/AttributeFactory;Ljava/io/Reader;)Lorg/apache/lucene/analysis/Tokenizer;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          EdgeNGramTokenizerFactory::EdgeNGramTokenizerFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenizerFactory(env->newObject(initializeClass, &mids$, mid_init$_4c9e2b1c, a0.this$)) {}

          ::org::apache::lucene::analysis::Tokenizer EdgeNGramTokenizerFactory::create(const ::org::apache::lucene::util::AttributeFactory & a0, const ::java::io::Reader & a1) const
          {
            return ::org::apache::lucene::analysis::Tokenizer(env->callObjectMethod(this$, mids$[mid_create_e51780e9], a0.this$, a1.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ngram {
          static PyObject *t_EdgeNGramTokenizerFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_EdgeNGramTokenizerFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_EdgeNGramTokenizerFactory_init_(t_EdgeNGramTokenizerFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_EdgeNGramTokenizerFactory_create(t_EdgeNGramTokenizerFactory *self, PyObject *args);

          static PyMethodDef t_EdgeNGramTokenizerFactory__methods_[] = {
            DECLARE_METHOD(t_EdgeNGramTokenizerFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_EdgeNGramTokenizerFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_EdgeNGramTokenizerFactory, create, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(EdgeNGramTokenizerFactory, t_EdgeNGramTokenizerFactory, ::org::apache::lucene::analysis::util::TokenizerFactory, EdgeNGramTokenizerFactory, t_EdgeNGramTokenizerFactory_init_, 0, 0, 0, 0, 0);

          void t_EdgeNGramTokenizerFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(EdgeNGramTokenizerFactory), module, "EdgeNGramTokenizerFactory", 0);
          }

          void t_EdgeNGramTokenizerFactory::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(EdgeNGramTokenizerFactory).tp_dict, "class_", make_descriptor(EdgeNGramTokenizerFactory::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(EdgeNGramTokenizerFactory).tp_dict, "wrapfn_", make_descriptor(t_EdgeNGramTokenizerFactory::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(EdgeNGramTokenizerFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_EdgeNGramTokenizerFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, EdgeNGramTokenizerFactory::initializeClass, 1)))
              return NULL;
            return t_EdgeNGramTokenizerFactory::wrap_Object(EdgeNGramTokenizerFactory(((t_EdgeNGramTokenizerFactory *) arg)->object.this$));
          }
          static PyObject *t_EdgeNGramTokenizerFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, EdgeNGramTokenizerFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_EdgeNGramTokenizerFactory_init_(t_EdgeNGramTokenizerFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            EdgeNGramTokenizerFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = EdgeNGramTokenizerFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_EdgeNGramTokenizerFactory_create(t_EdgeNGramTokenizerFactory *self, PyObject *args)
          {
            ::org::apache::lucene::util::AttributeFactory a0((jobject) NULL);
            ::java::io::Reader a1((jobject) NULL);
            ::org::apache::lucene::analysis::Tokenizer result((jobject) NULL);

            if (!parseArgs(args, "kk", ::org::apache::lucene::util::AttributeFactory::initializeClass, ::java::io::Reader::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.create(a0, a1));
              return ::org::apache::lucene::analysis::t_Tokenizer::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(EdgeNGramTokenizerFactory), (PyObject *) self, "create", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/compressing/CompressingTermVectorsWriter.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/index/MergeState.h"
#include "org/apache/lucene/index/FieldInfo.h"
#include "org/apache/lucene/store/DataInput.h"
#include "org/apache/lucene/store/IOContext.h"
#include "org/apache/lucene/store/Directory.h"
#include "org/apache/lucene/index/SegmentInfo.h"
#include "org/apache/lucene/codecs/compressing/CompressionMode.h"
#include "java/lang/String.h"
#include "org/apache/lucene/index/FieldInfos.h"
#include "java/io/IOException.h"
#include "java/util/Comparator.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace compressing {

          ::java::lang::Class *CompressingTermVectorsWriter::class$ = NULL;
          jmethodID *CompressingTermVectorsWriter::mids$ = NULL;
          bool CompressingTermVectorsWriter::live$ = false;

          jclass CompressingTermVectorsWriter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/compressing/CompressingTermVectorsWriter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_999e6287] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/store/Directory;Lorg/apache/lucene/index/SegmentInfo;Ljava/lang/String;Lorg/apache/lucene/store/IOContext;Ljava/lang/String;Lorg/apache/lucene/codecs/compressing/CompressionMode;I)V");
              mids$[mid_abort_54c6a166] = env->getMethodID(cls, "abort", "()V");
              mids$[mid_addPosition_ffd34a92] = env->getMethodID(cls, "addPosition", "(IIILorg/apache/lucene/util/BytesRef;)V");
              mids$[mid_addProx_395d0aa2] = env->getMethodID(cls, "addProx", "(ILorg/apache/lucene/store/DataInput;Lorg/apache/lucene/store/DataInput;)V");
              mids$[mid_close_54c6a166] = env->getMethodID(cls, "close", "()V");
              mids$[mid_finish_48f050c2] = env->getMethodID(cls, "finish", "(Lorg/apache/lucene/index/FieldInfos;I)V");
              mids$[mid_finishDocument_54c6a166] = env->getMethodID(cls, "finishDocument", "()V");
              mids$[mid_finishField_54c6a166] = env->getMethodID(cls, "finishField", "()V");
              mids$[mid_getComparator_5a7ff2fc] = env->getMethodID(cls, "getComparator", "()Ljava/util/Comparator;");
              mids$[mid_merge_fd0cfdeb] = env->getMethodID(cls, "merge", "(Lorg/apache/lucene/index/MergeState;)I");
              mids$[mid_startDocument_39c7bd3c] = env->getMethodID(cls, "startDocument", "(I)V");
              mids$[mid_startField_07c4def5] = env->getMethodID(cls, "startField", "(Lorg/apache/lucene/index/FieldInfo;IZZZ)V");
              mids$[mid_startTerm_738fc2ce] = env->getMethodID(cls, "startTerm", "(Lorg/apache/lucene/util/BytesRef;I)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          CompressingTermVectorsWriter::CompressingTermVectorsWriter(const ::org::apache::lucene::store::Directory & a0, const ::org::apache::lucene::index::SegmentInfo & a1, const ::java::lang::String & a2, const ::org::apache::lucene::store::IOContext & a3, const ::java::lang::String & a4, const ::org::apache::lucene::codecs::compressing::CompressionMode & a5, jint a6) : ::org::apache::lucene::codecs::TermVectorsWriter(env->newObject(initializeClass, &mids$, mid_init$_999e6287, a0.this$, a1.this$, a2.this$, a3.this$, a4.this$, a5.this$, a6)) {}

          void CompressingTermVectorsWriter::abort() const
          {
            env->callVoidMethod(this$, mids$[mid_abort_54c6a166]);
          }

          void CompressingTermVectorsWriter::addPosition(jint a0, jint a1, jint a2, const ::org::apache::lucene::util::BytesRef & a3) const
          {
            env->callVoidMethod(this$, mids$[mid_addPosition_ffd34a92], a0, a1, a2, a3.this$);
          }

          void CompressingTermVectorsWriter::addProx(jint a0, const ::org::apache::lucene::store::DataInput & a1, const ::org::apache::lucene::store::DataInput & a2) const
          {
            env->callVoidMethod(this$, mids$[mid_addProx_395d0aa2], a0, a1.this$, a2.this$);
          }

          void CompressingTermVectorsWriter::close() const
          {
            env->callVoidMethod(this$, mids$[mid_close_54c6a166]);
          }

          void CompressingTermVectorsWriter::finish(const ::org::apache::lucene::index::FieldInfos & a0, jint a1) const
          {
            env->callVoidMethod(this$, mids$[mid_finish_48f050c2], a0.this$, a1);
          }

          void CompressingTermVectorsWriter::finishDocument() const
          {
            env->callVoidMethod(this$, mids$[mid_finishDocument_54c6a166]);
          }

          void CompressingTermVectorsWriter::finishField() const
          {
            env->callVoidMethod(this$, mids$[mid_finishField_54c6a166]);
          }

          ::java::util::Comparator CompressingTermVectorsWriter::getComparator() const
          {
            return ::java::util::Comparator(env->callObjectMethod(this$, mids$[mid_getComparator_5a7ff2fc]));
          }

          jint CompressingTermVectorsWriter::merge(const ::org::apache::lucene::index::MergeState & a0) const
          {
            return env->callIntMethod(this$, mids$[mid_merge_fd0cfdeb], a0.this$);
          }

          void CompressingTermVectorsWriter::startDocument(jint a0) const
          {
            env->callVoidMethod(this$, mids$[mid_startDocument_39c7bd3c], a0);
          }

          void CompressingTermVectorsWriter::startField(const ::org::apache::lucene::index::FieldInfo & a0, jint a1, jboolean a2, jboolean a3, jboolean a4) const
          {
            env->callVoidMethod(this$, mids$[mid_startField_07c4def5], a0.this$, a1, a2, a3, a4);
          }

          void CompressingTermVectorsWriter::startTerm(const ::org::apache::lucene::util::BytesRef & a0, jint a1) const
          {
            env->callVoidMethod(this$, mids$[mid_startTerm_738fc2ce], a0.this$, a1);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace compressing {
          static PyObject *t_CompressingTermVectorsWriter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_CompressingTermVectorsWriter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_CompressingTermVectorsWriter_init_(t_CompressingTermVectorsWriter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_CompressingTermVectorsWriter_abort(t_CompressingTermVectorsWriter *self, PyObject *args);
          static PyObject *t_CompressingTermVectorsWriter_addPosition(t_CompressingTermVectorsWriter *self, PyObject *args);
          static PyObject *t_CompressingTermVectorsWriter_addProx(t_CompressingTermVectorsWriter *self, PyObject *args);
          static PyObject *t_CompressingTermVectorsWriter_close(t_CompressingTermVectorsWriter *self, PyObject *args);
          static PyObject *t_CompressingTermVectorsWriter_finish(t_CompressingTermVectorsWriter *self, PyObject *args);
          static PyObject *t_CompressingTermVectorsWriter_finishDocument(t_CompressingTermVectorsWriter *self, PyObject *args);
          static PyObject *t_CompressingTermVectorsWriter_finishField(t_CompressingTermVectorsWriter *self, PyObject *args);
          static PyObject *t_CompressingTermVectorsWriter_getComparator(t_CompressingTermVectorsWriter *self, PyObject *args);
          static PyObject *t_CompressingTermVectorsWriter_merge(t_CompressingTermVectorsWriter *self, PyObject *args);
          static PyObject *t_CompressingTermVectorsWriter_startDocument(t_CompressingTermVectorsWriter *self, PyObject *args);
          static PyObject *t_CompressingTermVectorsWriter_startField(t_CompressingTermVectorsWriter *self, PyObject *args);
          static PyObject *t_CompressingTermVectorsWriter_startTerm(t_CompressingTermVectorsWriter *self, PyObject *args);
          static PyObject *t_CompressingTermVectorsWriter_get__comparator(t_CompressingTermVectorsWriter *self, void *data);
          static PyGetSetDef t_CompressingTermVectorsWriter__fields_[] = {
            DECLARE_GET_FIELD(t_CompressingTermVectorsWriter, comparator),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_CompressingTermVectorsWriter__methods_[] = {
            DECLARE_METHOD(t_CompressingTermVectorsWriter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CompressingTermVectorsWriter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CompressingTermVectorsWriter, abort, METH_VARARGS),
            DECLARE_METHOD(t_CompressingTermVectorsWriter, addPosition, METH_VARARGS),
            DECLARE_METHOD(t_CompressingTermVectorsWriter, addProx, METH_VARARGS),
            DECLARE_METHOD(t_CompressingTermVectorsWriter, close, METH_VARARGS),
            DECLARE_METHOD(t_CompressingTermVectorsWriter, finish, METH_VARARGS),
            DECLARE_METHOD(t_CompressingTermVectorsWriter, finishDocument, METH_VARARGS),
            DECLARE_METHOD(t_CompressingTermVectorsWriter, finishField, METH_VARARGS),
            DECLARE_METHOD(t_CompressingTermVectorsWriter, getComparator, METH_VARARGS),
            DECLARE_METHOD(t_CompressingTermVectorsWriter, merge, METH_VARARGS),
            DECLARE_METHOD(t_CompressingTermVectorsWriter, startDocument, METH_VARARGS),
            DECLARE_METHOD(t_CompressingTermVectorsWriter, startField, METH_VARARGS),
            DECLARE_METHOD(t_CompressingTermVectorsWriter, startTerm, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(CompressingTermVectorsWriter, t_CompressingTermVectorsWriter, ::org::apache::lucene::codecs::TermVectorsWriter, CompressingTermVectorsWriter, t_CompressingTermVectorsWriter_init_, 0, 0, t_CompressingTermVectorsWriter__fields_, 0, 0);

          void t_CompressingTermVectorsWriter::install(PyObject *module)
          {
            installType(&PY_TYPE(CompressingTermVectorsWriter), module, "CompressingTermVectorsWriter", 0);
          }

          void t_CompressingTermVectorsWriter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(CompressingTermVectorsWriter).tp_dict, "class_", make_descriptor(CompressingTermVectorsWriter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(CompressingTermVectorsWriter).tp_dict, "wrapfn_", make_descriptor(t_CompressingTermVectorsWriter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(CompressingTermVectorsWriter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_CompressingTermVectorsWriter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, CompressingTermVectorsWriter::initializeClass, 1)))
              return NULL;
            return t_CompressingTermVectorsWriter::wrap_Object(CompressingTermVectorsWriter(((t_CompressingTermVectorsWriter *) arg)->object.this$));
          }
          static PyObject *t_CompressingTermVectorsWriter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, CompressingTermVectorsWriter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_CompressingTermVectorsWriter_init_(t_CompressingTermVectorsWriter *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::store::Directory a0((jobject) NULL);
            ::org::apache::lucene::index::SegmentInfo a1((jobject) NULL);
            ::java::lang::String a2((jobject) NULL);
            ::org::apache::lucene::store::IOContext a3((jobject) NULL);
            ::java::lang::String a4((jobject) NULL);
            ::org::apache::lucene::codecs::compressing::CompressionMode a5((jobject) NULL);
            jint a6;
            CompressingTermVectorsWriter object((jobject) NULL);

            if (!parseArgs(args, "kkskskI", ::org::apache::lucene::store::Directory::initializeClass, ::org::apache::lucene::index::SegmentInfo::initializeClass, ::org::apache::lucene::store::IOContext::initializeClass, ::org::apache::lucene::codecs::compressing::CompressionMode::initializeClass, &a0, &a1, &a2, &a3, &a4, &a5, &a6))
            {
              INT_CALL(object = CompressingTermVectorsWriter(a0, a1, a2, a3, a4, a5, a6));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_CompressingTermVectorsWriter_abort(t_CompressingTermVectorsWriter *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.abort());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(CompressingTermVectorsWriter), (PyObject *) self, "abort", args, 2);
          }

          static PyObject *t_CompressingTermVectorsWriter_addPosition(t_CompressingTermVectorsWriter *self, PyObject *args)
          {
            jint a0;
            jint a1;
            jint a2;
            ::org::apache::lucene::util::BytesRef a3((jobject) NULL);

            if (!parseArgs(args, "IIIk", ::org::apache::lucene::util::BytesRef::initializeClass, &a0, &a1, &a2, &a3))
            {
              OBJ_CALL(self->object.addPosition(a0, a1, a2, a3));
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(CompressingTermVectorsWriter), (PyObject *) self, "addPosition", args, 2);
          }

          static PyObject *t_CompressingTermVectorsWriter_addProx(t_CompressingTermVectorsWriter *self, PyObject *args)
          {
            jint a0;
            ::org::apache::lucene::store::DataInput a1((jobject) NULL);
            ::org::apache::lucene::store::DataInput a2((jobject) NULL);

            if (!parseArgs(args, "Ikk", ::org::apache::lucene::store::DataInput::initializeClass, ::org::apache::lucene::store::DataInput::initializeClass, &a0, &a1, &a2))
            {
              OBJ_CALL(self->object.addProx(a0, a1, a2));
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(CompressingTermVectorsWriter), (PyObject *) self, "addProx", args, 2);
          }

          static PyObject *t_CompressingTermVectorsWriter_close(t_CompressingTermVectorsWriter *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.close());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(CompressingTermVectorsWriter), (PyObject *) self, "close", args, 2);
          }

          static PyObject *t_CompressingTermVectorsWriter_finish(t_CompressingTermVectorsWriter *self, PyObject *args)
          {
            ::org::apache::lucene::index::FieldInfos a0((jobject) NULL);
            jint a1;

            if (!parseArgs(args, "kI", ::org::apache::lucene::index::FieldInfos::initializeClass, &a0, &a1))
            {
              OBJ_CALL(self->object.finish(a0, a1));
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(CompressingTermVectorsWriter), (PyObject *) self, "finish", args, 2);
          }

          static PyObject *t_CompressingTermVectorsWriter_finishDocument(t_CompressingTermVectorsWriter *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.finishDocument());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(CompressingTermVectorsWriter), (PyObject *) self, "finishDocument", args, 2);
          }

          static PyObject *t_CompressingTermVectorsWriter_finishField(t_CompressingTermVectorsWriter *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.finishField());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(CompressingTermVectorsWriter), (PyObject *) self, "finishField", args, 2);
          }

          static PyObject *t_CompressingTermVectorsWriter_getComparator(t_CompressingTermVectorsWriter *self, PyObject *args)
          {
            ::java::util::Comparator result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.getComparator());
              return ::java::util::t_Comparator::wrap_Object(result, &::org::apache::lucene::util::PY_TYPE(BytesRef));
            }

            return callSuper(&PY_TYPE(CompressingTermVectorsWriter), (PyObject *) self, "getComparator", args, 2);
          }

          static PyObject *t_CompressingTermVectorsWriter_merge(t_CompressingTermVectorsWriter *self, PyObject *args)
          {
            ::org::apache::lucene::index::MergeState a0((jobject) NULL);
            jint result;

            if (!parseArgs(args, "k", ::org::apache::lucene::index::MergeState::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.merge(a0));
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(CompressingTermVectorsWriter), (PyObject *) self, "merge", args, 2);
          }

          static PyObject *t_CompressingTermVectorsWriter_startDocument(t_CompressingTermVectorsWriter *self, PyObject *args)
          {
            jint a0;

            if (!parseArgs(args, "I", &a0))
            {
              OBJ_CALL(self->object.startDocument(a0));
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(CompressingTermVectorsWriter), (PyObject *) self, "startDocument", args, 2);
          }

          static PyObject *t_CompressingTermVectorsWriter_startField(t_CompressingTermVectorsWriter *self, PyObject *args)
          {
            ::org::apache::lucene::index::FieldInfo a0((jobject) NULL);
            jint a1;
            jboolean a2;
            jboolean a3;
            jboolean a4;

            if (!parseArgs(args, "kIZZZ", ::org::apache::lucene::index::FieldInfo::initializeClass, &a0, &a1, &a2, &a3, &a4))
            {
              OBJ_CALL(self->object.startField(a0, a1, a2, a3, a4));
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(CompressingTermVectorsWriter), (PyObject *) self, "startField", args, 2);
          }

          static PyObject *t_CompressingTermVectorsWriter_startTerm(t_CompressingTermVectorsWriter *self, PyObject *args)
          {
            ::org::apache::lucene::util::BytesRef a0((jobject) NULL);
            jint a1;

            if (!parseArgs(args, "kI", ::org::apache::lucene::util::BytesRef::initializeClass, &a0, &a1))
            {
              OBJ_CALL(self->object.startTerm(a0, a1));
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(CompressingTermVectorsWriter), (PyObject *) self, "startTerm", args, 2);
          }

          static PyObject *t_CompressingTermVectorsWriter_get__comparator(t_CompressingTermVectorsWriter *self, void *data)
          {
            ::java::util::Comparator value((jobject) NULL);
            OBJ_CALL(value = self->object.getComparator());
            return ::java::util::t_Comparator::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/miscellaneous/KeywordRepeatFilter.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {

          ::java::lang::Class *KeywordRepeatFilter::class$ = NULL;
          jmethodID *KeywordRepeatFilter::mids$ = NULL;
          bool KeywordRepeatFilter::live$ = false;

          jclass KeywordRepeatFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/miscellaneous/KeywordRepeatFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_c7c794dc] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;)V");
              mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");
              mids$[mid_reset_54c6a166] = env->getMethodID(cls, "reset", "()V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          KeywordRepeatFilter::KeywordRepeatFilter(const ::org::apache::lucene::analysis::TokenStream & a0) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_c7c794dc, a0.this$)) {}

          jboolean KeywordRepeatFilter::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_54c6a16a]);
          }

          void KeywordRepeatFilter::reset() const
          {
            env->callVoidMethod(this$, mids$[mid_reset_54c6a166]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {
          static PyObject *t_KeywordRepeatFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_KeywordRepeatFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_KeywordRepeatFilter_init_(t_KeywordRepeatFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_KeywordRepeatFilter_incrementToken(t_KeywordRepeatFilter *self, PyObject *args);
          static PyObject *t_KeywordRepeatFilter_reset(t_KeywordRepeatFilter *self, PyObject *args);

          static PyMethodDef t_KeywordRepeatFilter__methods_[] = {
            DECLARE_METHOD(t_KeywordRepeatFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_KeywordRepeatFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_KeywordRepeatFilter, incrementToken, METH_VARARGS),
            DECLARE_METHOD(t_KeywordRepeatFilter, reset, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(KeywordRepeatFilter, t_KeywordRepeatFilter, ::org::apache::lucene::analysis::TokenFilter, KeywordRepeatFilter, t_KeywordRepeatFilter_init_, 0, 0, 0, 0, 0);

          void t_KeywordRepeatFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(KeywordRepeatFilter), module, "KeywordRepeatFilter", 0);
          }

          void t_KeywordRepeatFilter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(KeywordRepeatFilter).tp_dict, "class_", make_descriptor(KeywordRepeatFilter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(KeywordRepeatFilter).tp_dict, "wrapfn_", make_descriptor(t_KeywordRepeatFilter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(KeywordRepeatFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_KeywordRepeatFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, KeywordRepeatFilter::initializeClass, 1)))
              return NULL;
            return t_KeywordRepeatFilter::wrap_Object(KeywordRepeatFilter(((t_KeywordRepeatFilter *) arg)->object.this$));
          }
          static PyObject *t_KeywordRepeatFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, KeywordRepeatFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_KeywordRepeatFilter_init_(t_KeywordRepeatFilter *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            KeywordRepeatFilter object((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              INT_CALL(object = KeywordRepeatFilter(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_KeywordRepeatFilter_incrementToken(t_KeywordRepeatFilter *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(KeywordRepeatFilter), (PyObject *) self, "incrementToken", args, 2);
          }

          static PyObject *t_KeywordRepeatFilter_reset(t_KeywordRepeatFilter *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.reset());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(KeywordRepeatFilter), (PyObject *) self, "reset", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queries/function/valuesource/LinearFloatFunction.h"
#include "org/apache/lucene/queries/function/FunctionValues.h"
#include "java/lang/Class.h"
#include "java/lang/Object.h"
#include "java/io/IOException.h"
#include "java/util/Map.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "java/lang/String.h"
#include "org/apache/lucene/search/IndexSearcher.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {

            ::java::lang::Class *LinearFloatFunction::class$ = NULL;
            jmethodID *LinearFloatFunction::mids$ = NULL;
            bool LinearFloatFunction::live$ = false;

            jclass LinearFloatFunction::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queries/function/valuesource/LinearFloatFunction");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_bdda54b0] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/queries/function/ValueSource;FF)V");
                mids$[mid_createWeight_1b6125ba] = env->getMethodID(cls, "createWeight", "(Ljava/util/Map;Lorg/apache/lucene/search/IndexSearcher;)V");
                mids$[mid_description_14c7b5c5] = env->getMethodID(cls, "description", "()Ljava/lang/String;");
                mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
                mids$[mid_getValues_4c566485] = env->getMethodID(cls, "getValues", "(Ljava/util/Map;Lorg/apache/lucene/index/AtomicReaderContext;)Lorg/apache/lucene/queries/function/FunctionValues;");
                mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            LinearFloatFunction::LinearFloatFunction(const ::org::apache::lucene::queries::function::ValueSource & a0, jfloat a1, jfloat a2) : ::org::apache::lucene::queries::function::ValueSource(env->newObject(initializeClass, &mids$, mid_init$_bdda54b0, a0.this$, a1, a2)) {}

            void LinearFloatFunction::createWeight(const ::java::util::Map & a0, const ::org::apache::lucene::search::IndexSearcher & a1) const
            {
              env->callVoidMethod(this$, mids$[mid_createWeight_1b6125ba], a0.this$, a1.this$);
            }

            ::java::lang::String LinearFloatFunction::description() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_description_14c7b5c5]));
            }

            jboolean LinearFloatFunction::equals(const ::java::lang::Object & a0) const
            {
              return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
            }

            ::org::apache::lucene::queries::function::FunctionValues LinearFloatFunction::getValues(const ::java::util::Map & a0, const ::org::apache::lucene::index::AtomicReaderContext & a1) const
            {
              return ::org::apache::lucene::queries::function::FunctionValues(env->callObjectMethod(this$, mids$[mid_getValues_4c566485], a0.this$, a1.this$));
            }

            jint LinearFloatFunction::hashCode() const
            {
              return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {
            static PyObject *t_LinearFloatFunction_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_LinearFloatFunction_instance_(PyTypeObject *type, PyObject *arg);
            static int t_LinearFloatFunction_init_(t_LinearFloatFunction *self, PyObject *args, PyObject *kwds);
            static PyObject *t_LinearFloatFunction_createWeight(t_LinearFloatFunction *self, PyObject *args);
            static PyObject *t_LinearFloatFunction_description(t_LinearFloatFunction *self, PyObject *args);
            static PyObject *t_LinearFloatFunction_equals(t_LinearFloatFunction *self, PyObject *args);
            static PyObject *t_LinearFloatFunction_getValues(t_LinearFloatFunction *self, PyObject *args);
            static PyObject *t_LinearFloatFunction_hashCode(t_LinearFloatFunction *self, PyObject *args);

            static PyMethodDef t_LinearFloatFunction__methods_[] = {
              DECLARE_METHOD(t_LinearFloatFunction, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_LinearFloatFunction, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_LinearFloatFunction, createWeight, METH_VARARGS),
              DECLARE_METHOD(t_LinearFloatFunction, description, METH_VARARGS),
              DECLARE_METHOD(t_LinearFloatFunction, equals, METH_VARARGS),
              DECLARE_METHOD(t_LinearFloatFunction, getValues, METH_VARARGS),
              DECLARE_METHOD(t_LinearFloatFunction, hashCode, METH_VARARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(LinearFloatFunction, t_LinearFloatFunction, ::org::apache::lucene::queries::function::ValueSource, LinearFloatFunction, t_LinearFloatFunction_init_, 0, 0, 0, 0, 0);

            void t_LinearFloatFunction::install(PyObject *module)
            {
              installType(&PY_TYPE(LinearFloatFunction), module, "LinearFloatFunction", 0);
            }

            void t_LinearFloatFunction::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(LinearFloatFunction).tp_dict, "class_", make_descriptor(LinearFloatFunction::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(LinearFloatFunction).tp_dict, "wrapfn_", make_descriptor(t_LinearFloatFunction::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(LinearFloatFunction).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_LinearFloatFunction_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, LinearFloatFunction::initializeClass, 1)))
                return NULL;
              return t_LinearFloatFunction::wrap_Object(LinearFloatFunction(((t_LinearFloatFunction *) arg)->object.this$));
            }
            static PyObject *t_LinearFloatFunction_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, LinearFloatFunction::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_LinearFloatFunction_init_(t_LinearFloatFunction *self, PyObject *args, PyObject *kwds)
            {
              ::org::apache::lucene::queries::function::ValueSource a0((jobject) NULL);
              jfloat a1;
              jfloat a2;
              LinearFloatFunction object((jobject) NULL);

              if (!parseArgs(args, "kFF", ::org::apache::lucene::queries::function::ValueSource::initializeClass, &a0, &a1, &a2))
              {
                INT_CALL(object = LinearFloatFunction(a0, a1, a2));
                self->object = object;
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_LinearFloatFunction_createWeight(t_LinearFloatFunction *self, PyObject *args)
            {
              ::java::util::Map a0((jobject) NULL);
              PyTypeObject **p0;
              ::org::apache::lucene::search::IndexSearcher a1((jobject) NULL);

              if (!parseArgs(args, "Kk", ::java::util::Map::initializeClass, ::org::apache::lucene::search::IndexSearcher::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_, &a1))
              {
                OBJ_CALL(self->object.createWeight(a0, a1));
                Py_RETURN_NONE;
              }

              return callSuper(&PY_TYPE(LinearFloatFunction), (PyObject *) self, "createWeight", args, 2);
            }

            static PyObject *t_LinearFloatFunction_description(t_LinearFloatFunction *self, PyObject *args)
            {
              ::java::lang::String result((jobject) NULL);

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.description());
                return j2p(result);
              }

              return callSuper(&PY_TYPE(LinearFloatFunction), (PyObject *) self, "description", args, 2);
            }

            static PyObject *t_LinearFloatFunction_equals(t_LinearFloatFunction *self, PyObject *args)
            {
              ::java::lang::Object a0((jobject) NULL);
              jboolean result;

              if (!parseArgs(args, "o", &a0))
              {
                OBJ_CALL(result = self->object.equals(a0));
                Py_RETURN_BOOL(result);
              }

              return callSuper(&PY_TYPE(LinearFloatFunction), (PyObject *) self, "equals", args, 2);
            }

            static PyObject *t_LinearFloatFunction_getValues(t_LinearFloatFunction *self, PyObject *args)
            {
              ::java::util::Map a0((jobject) NULL);
              PyTypeObject **p0;
              ::org::apache::lucene::index::AtomicReaderContext a1((jobject) NULL);
              ::org::apache::lucene::queries::function::FunctionValues result((jobject) NULL);

              if (!parseArgs(args, "Kk", ::java::util::Map::initializeClass, ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_, &a1))
              {
                OBJ_CALL(result = self->object.getValues(a0, a1));
                return ::org::apache::lucene::queries::function::t_FunctionValues::wrap_Object(result);
              }

              return callSuper(&PY_TYPE(LinearFloatFunction), (PyObject *) self, "getValues", args, 2);
            }

            static PyObject *t_LinearFloatFunction_hashCode(t_LinearFloatFunction *self, PyObject *args)
            {
              jint result;

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.hashCode());
                return PyInt_FromLong((long) result);
              }

              return callSuper(&PY_TYPE(LinearFloatFunction), (PyObject *) self, "hashCode", args, 2);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/AtomicReader$CoreClosedListener.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *AtomicReader$CoreClosedListener::class$ = NULL;
        jmethodID *AtomicReader$CoreClosedListener::mids$ = NULL;
        bool AtomicReader$CoreClosedListener::live$ = false;

        jclass AtomicReader$CoreClosedListener::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/AtomicReader$CoreClosedListener");

            mids$ = new jmethodID[max_mid];
            mids$[mid_onClose_290588ee] = env->getMethodID(cls, "onClose", "(Ljava/lang/Object;)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        void AtomicReader$CoreClosedListener::onClose(const ::java::lang::Object & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_onClose_290588ee], a0.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_AtomicReader$CoreClosedListener_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_AtomicReader$CoreClosedListener_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_AtomicReader$CoreClosedListener_onClose(t_AtomicReader$CoreClosedListener *self, PyObject *arg);

        static PyMethodDef t_AtomicReader$CoreClosedListener__methods_[] = {
          DECLARE_METHOD(t_AtomicReader$CoreClosedListener, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_AtomicReader$CoreClosedListener, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_AtomicReader$CoreClosedListener, onClose, METH_O),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(AtomicReader$CoreClosedListener, t_AtomicReader$CoreClosedListener, ::java::lang::Object, AtomicReader$CoreClosedListener, abstract_init, 0, 0, 0, 0, 0);

        void t_AtomicReader$CoreClosedListener::install(PyObject *module)
        {
          installType(&PY_TYPE(AtomicReader$CoreClosedListener), module, "AtomicReader$CoreClosedListener", 0);
        }

        void t_AtomicReader$CoreClosedListener::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(AtomicReader$CoreClosedListener).tp_dict, "class_", make_descriptor(AtomicReader$CoreClosedListener::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(AtomicReader$CoreClosedListener).tp_dict, "wrapfn_", make_descriptor(t_AtomicReader$CoreClosedListener::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(AtomicReader$CoreClosedListener).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_AtomicReader$CoreClosedListener_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, AtomicReader$CoreClosedListener::initializeClass, 1)))
            return NULL;
          return t_AtomicReader$CoreClosedListener::wrap_Object(AtomicReader$CoreClosedListener(((t_AtomicReader$CoreClosedListener *) arg)->object.this$));
        }
        static PyObject *t_AtomicReader$CoreClosedListener_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, AtomicReader$CoreClosedListener::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_AtomicReader$CoreClosedListener_onClose(t_AtomicReader$CoreClosedListener *self, PyObject *arg)
        {
          ::java::lang::Object a0((jobject) NULL);

          if (!parseArg(arg, "o", &a0))
          {
            OBJ_CALL(self->object.onClose(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "onClose", arg);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/core/UpperCaseFilterFactory.h"
#include "org/apache/lucene/analysis/core/UpperCaseFilter.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "org/apache/lucene/analysis/util/MultiTermAwareComponent.h"
#include "java/lang/Class.h"
#include "java/util/Map.h"
#include "java/lang/String.h"
#include "org/apache/lucene/analysis/util/AbstractAnalysisFactory.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace core {

          ::java::lang::Class *UpperCaseFilterFactory::class$ = NULL;
          jmethodID *UpperCaseFilterFactory::mids$ = NULL;
          bool UpperCaseFilterFactory::live$ = false;

          jclass UpperCaseFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/core/UpperCaseFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4c9e2b1c] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_da6c60eb] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/core/UpperCaseFilter;");
              mids$[mid_getMultiTermComponent_0a3f1d72] = env->getMethodID(cls, "getMultiTermComponent", "()Lorg/apache/lucene/analysis/util/AbstractAnalysisFactory;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          UpperCaseFilterFactory::UpperCaseFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_4c9e2b1c, a0.this$)) {}

          ::org::apache::lucene::analysis::core::UpperCaseFilter UpperCaseFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::core::UpperCaseFilter(env->callObjectMethod(this$, mids$[mid_create_da6c60eb], a0.this$));
          }

          ::org::apache::lucene::analysis::util::AbstractAnalysisFactory UpperCaseFilterFactory::getMultiTermComponent() const
          {
            return ::org::apache::lucene::analysis::util::AbstractAnalysisFactory(env->callObjectMethod(this$, mids$[mid_getMultiTermComponent_0a3f1d72]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace core {
          static PyObject *t_UpperCaseFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_UpperCaseFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_UpperCaseFilterFactory_init_(t_UpperCaseFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_UpperCaseFilterFactory_create(t_UpperCaseFilterFactory *self, PyObject *args);
          static PyObject *t_UpperCaseFilterFactory_getMultiTermComponent(t_UpperCaseFilterFactory *self);
          static PyObject *t_UpperCaseFilterFactory_get__multiTermComponent(t_UpperCaseFilterFactory *self, void *data);
          static PyGetSetDef t_UpperCaseFilterFactory__fields_[] = {
            DECLARE_GET_FIELD(t_UpperCaseFilterFactory, multiTermComponent),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_UpperCaseFilterFactory__methods_[] = {
            DECLARE_METHOD(t_UpperCaseFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_UpperCaseFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_UpperCaseFilterFactory, create, METH_VARARGS),
            DECLARE_METHOD(t_UpperCaseFilterFactory, getMultiTermComponent, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(UpperCaseFilterFactory, t_UpperCaseFilterFactory, ::org::apache::lucene::analysis::util::TokenFilterFactory, UpperCaseFilterFactory, t_UpperCaseFilterFactory_init_, 0, 0, t_UpperCaseFilterFactory__fields_, 0, 0);

          void t_UpperCaseFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(UpperCaseFilterFactory), module, "UpperCaseFilterFactory", 0);
          }

          void t_UpperCaseFilterFactory::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(UpperCaseFilterFactory).tp_dict, "class_", make_descriptor(UpperCaseFilterFactory::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(UpperCaseFilterFactory).tp_dict, "wrapfn_", make_descriptor(t_UpperCaseFilterFactory::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(UpperCaseFilterFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_UpperCaseFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, UpperCaseFilterFactory::initializeClass, 1)))
              return NULL;
            return t_UpperCaseFilterFactory::wrap_Object(UpperCaseFilterFactory(((t_UpperCaseFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_UpperCaseFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, UpperCaseFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_UpperCaseFilterFactory_init_(t_UpperCaseFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            UpperCaseFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = UpperCaseFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_UpperCaseFilterFactory_create(t_UpperCaseFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::core::UpperCaseFilter result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::core::t_UpperCaseFilter::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(UpperCaseFilterFactory), (PyObject *) self, "create", args, 2);
          }

          static PyObject *t_UpperCaseFilterFactory_getMultiTermComponent(t_UpperCaseFilterFactory *self)
          {
            ::org::apache::lucene::analysis::util::AbstractAnalysisFactory result((jobject) NULL);
            OBJ_CALL(result = self->object.getMultiTermComponent());
            return ::org::apache::lucene::analysis::util::t_AbstractAnalysisFactory::wrap_Object(result);
          }

          static PyObject *t_UpperCaseFilterFactory_get__multiTermComponent(t_UpperCaseFilterFactory *self, void *data)
          {
            ::org::apache::lucene::analysis::util::AbstractAnalysisFactory value((jobject) NULL);
            OBJ_CALL(value = self->object.getMultiTermComponent());
            return ::org::apache::lucene::analysis::util::t_AbstractAnalysisFactory::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/cjk/CJKAnalyzer.h"
#include "org/apache/lucene/util/Version.h"
#include "java/lang/String.h"
#include "org/apache/lucene/analysis/util/CharArraySet.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace cjk {

          ::java::lang::Class *CJKAnalyzer::class$ = NULL;
          jmethodID *CJKAnalyzer::mids$ = NULL;
          bool CJKAnalyzer::live$ = false;
          ::java::lang::String *CJKAnalyzer::DEFAULT_STOPWORD_FILE = NULL;

          jclass CJKAnalyzer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/cjk/CJKAnalyzer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_0d96cf33] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;)V");
              mids$[mid_init$_83eafe28] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/analysis/util/CharArraySet;)V");
              mids$[mid_getDefaultStopSet_d2d3505c] = env->getStaticMethodID(cls, "getDefaultStopSet", "()Lorg/apache/lucene/analysis/util/CharArraySet;");
              mids$[mid_createComponents_1be39cae] = env->getMethodID(cls, "createComponents", "(Ljava/lang/String;Ljava/io/Reader;)Lorg/apache/lucene/analysis/Analyzer$TokenStreamComponents;");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              DEFAULT_STOPWORD_FILE = new ::java::lang::String(env->getStaticObjectField(cls, "DEFAULT_STOPWORD_FILE", "Ljava/lang/String;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          CJKAnalyzer::CJKAnalyzer(const ::org::apache::lucene::util::Version & a0) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_0d96cf33, a0.this$)) {}

          CJKAnalyzer::CJKAnalyzer(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::analysis::util::CharArraySet & a1) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_83eafe28, a0.this$, a1.this$)) {}

          ::org::apache::lucene::analysis::util::CharArraySet CJKAnalyzer::getDefaultStopSet()
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::analysis::util::CharArraySet(env->callStaticObjectMethod(cls, mids$[mid_getDefaultStopSet_d2d3505c]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace cjk {
          static PyObject *t_CJKAnalyzer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_CJKAnalyzer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_CJKAnalyzer_init_(t_CJKAnalyzer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_CJKAnalyzer_getDefaultStopSet(PyTypeObject *type);
          static PyObject *t_CJKAnalyzer_get__defaultStopSet(t_CJKAnalyzer *self, void *data);
          static PyGetSetDef t_CJKAnalyzer__fields_[] = {
            DECLARE_GET_FIELD(t_CJKAnalyzer, defaultStopSet),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_CJKAnalyzer__methods_[] = {
            DECLARE_METHOD(t_CJKAnalyzer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CJKAnalyzer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CJKAnalyzer, getDefaultStopSet, METH_NOARGS | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(CJKAnalyzer, t_CJKAnalyzer, ::org::apache::lucene::analysis::util::StopwordAnalyzerBase, CJKAnalyzer, t_CJKAnalyzer_init_, 0, 0, t_CJKAnalyzer__fields_, 0, 0);

          void t_CJKAnalyzer::install(PyObject *module)
          {
            installType(&PY_TYPE(CJKAnalyzer), module, "CJKAnalyzer", 0);
          }

          void t_CJKAnalyzer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(CJKAnalyzer).tp_dict, "class_", make_descriptor(CJKAnalyzer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(CJKAnalyzer).tp_dict, "wrapfn_", make_descriptor(t_CJKAnalyzer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(CJKAnalyzer).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(CJKAnalyzer::initializeClass);
            PyDict_SetItemString(PY_TYPE(CJKAnalyzer).tp_dict, "DEFAULT_STOPWORD_FILE", make_descriptor(j2p(*CJKAnalyzer::DEFAULT_STOPWORD_FILE)));
          }

          static PyObject *t_CJKAnalyzer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, CJKAnalyzer::initializeClass, 1)))
              return NULL;
            return t_CJKAnalyzer::wrap_Object(CJKAnalyzer(((t_CJKAnalyzer *) arg)->object.this$));
          }
          static PyObject *t_CJKAnalyzer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, CJKAnalyzer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_CJKAnalyzer_init_(t_CJKAnalyzer *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                CJKAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "K", ::org::apache::lucene::util::Version::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_))
                {
                  INT_CALL(object = CJKAnalyzer(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 2:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                ::org::apache::lucene::analysis::util::CharArraySet a1((jobject) NULL);
                PyTypeObject **p1;
                CJKAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "KK", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1, &p1, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_))
                {
                  INT_CALL(object = CJKAnalyzer(a0, a1));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_CJKAnalyzer_getDefaultStopSet(PyTypeObject *type)
          {
            ::org::apache::lucene::analysis::util::CharArraySet result((jobject) NULL);
            OBJ_CALL(result = ::org::apache::lucene::analysis::cjk::CJKAnalyzer::getDefaultStopSet());
            return ::org::apache::lucene::analysis::util::t_CharArraySet::wrap_Object(result);
          }

          static PyObject *t_CJKAnalyzer_get__defaultStopSet(t_CJKAnalyzer *self, void *data)
          {
            ::org::apache::lucene::analysis::util::CharArraySet value((jobject) NULL);
            OBJ_CALL(value = self->object.getDefaultStopSet());
            return ::org::apache::lucene::analysis::util::t_CharArraySet::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/Analyzer$ReuseStrategy.h"
#include "org/apache/lucene/analysis/Analyzer.h"
#include "java/lang/String.h"
#include "org/apache/lucene/analysis/Analyzer$TokenStreamComponents.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {

        ::java::lang::Class *Analyzer$ReuseStrategy::class$ = NULL;
        jmethodID *Analyzer$ReuseStrategy::mids$ = NULL;
        bool Analyzer$ReuseStrategy::live$ = false;

        jclass Analyzer$ReuseStrategy::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/Analyzer$ReuseStrategy");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_getReusableComponents_19769f4a] = env->getMethodID(cls, "getReusableComponents", "(Lorg/apache/lucene/analysis/Analyzer;Ljava/lang/String;)Lorg/apache/lucene/analysis/Analyzer$TokenStreamComponents;");
            mids$[mid_setReusableComponents_66577a3f] = env->getMethodID(cls, "setReusableComponents", "(Lorg/apache/lucene/analysis/Analyzer;Ljava/lang/String;Lorg/apache/lucene/analysis/Analyzer$TokenStreamComponents;)V");
            mids$[mid_getStoredValue_166fef79] = env->getMethodID(cls, "getStoredValue", "(Lorg/apache/lucene/analysis/Analyzer;)Ljava/lang/Object;");
            mids$[mid_setStoredValue_798d4388] = env->getMethodID(cls, "setStoredValue", "(Lorg/apache/lucene/analysis/Analyzer;Ljava/lang/Object;)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        Analyzer$ReuseStrategy::Analyzer$ReuseStrategy() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        ::org::apache::lucene::analysis::Analyzer$TokenStreamComponents Analyzer$ReuseStrategy::getReusableComponents(const ::org::apache::lucene::analysis::Analyzer & a0, const ::java::lang::String & a1) const
        {
          return ::org::apache::lucene::analysis::Analyzer$TokenStreamComponents(env->callObjectMethod(this$, mids$[mid_getReusableComponents_19769f4a], a0.this$, a1.this$));
        }

        void Analyzer$ReuseStrategy::setReusableComponents(const ::org::apache::lucene::analysis::Analyzer & a0, const ::java::lang::String & a1, const ::org::apache::lucene::analysis::Analyzer$TokenStreamComponents & a2) const
        {
          env->callVoidMethod(this$, mids$[mid_setReusableComponents_66577a3f], a0.this$, a1.this$, a2.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        static PyObject *t_Analyzer$ReuseStrategy_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_Analyzer$ReuseStrategy_instance_(PyTypeObject *type, PyObject *arg);
        static int t_Analyzer$ReuseStrategy_init_(t_Analyzer$ReuseStrategy *self, PyObject *args, PyObject *kwds);
        static PyObject *t_Analyzer$ReuseStrategy_getReusableComponents(t_Analyzer$ReuseStrategy *self, PyObject *args);
        static PyObject *t_Analyzer$ReuseStrategy_setReusableComponents(t_Analyzer$ReuseStrategy *self, PyObject *args);

        static PyMethodDef t_Analyzer$ReuseStrategy__methods_[] = {
          DECLARE_METHOD(t_Analyzer$ReuseStrategy, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_Analyzer$ReuseStrategy, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_Analyzer$ReuseStrategy, getReusableComponents, METH_VARARGS),
          DECLARE_METHOD(t_Analyzer$ReuseStrategy, setReusableComponents, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(Analyzer$ReuseStrategy, t_Analyzer$ReuseStrategy, ::java::lang::Object, Analyzer$ReuseStrategy, t_Analyzer$ReuseStrategy_init_, 0, 0, 0, 0, 0);

        void t_Analyzer$ReuseStrategy::install(PyObject *module)
        {
          installType(&PY_TYPE(Analyzer$ReuseStrategy), module, "Analyzer$ReuseStrategy", 0);
        }

        void t_Analyzer$ReuseStrategy::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(Analyzer$ReuseStrategy).tp_dict, "class_", make_descriptor(Analyzer$ReuseStrategy::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(Analyzer$ReuseStrategy).tp_dict, "wrapfn_", make_descriptor(t_Analyzer$ReuseStrategy::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(Analyzer$ReuseStrategy).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_Analyzer$ReuseStrategy_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, Analyzer$ReuseStrategy::initializeClass, 1)))
            return NULL;
          return t_Analyzer$ReuseStrategy::wrap_Object(Analyzer$ReuseStrategy(((t_Analyzer$ReuseStrategy *) arg)->object.this$));
        }
        static PyObject *t_Analyzer$ReuseStrategy_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, Analyzer$ReuseStrategy::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_Analyzer$ReuseStrategy_init_(t_Analyzer$ReuseStrategy *self, PyObject *args, PyObject *kwds)
        {
          Analyzer$ReuseStrategy object((jobject) NULL);

          INT_CALL(object = Analyzer$ReuseStrategy());
          self->object = object;

          return 0;
        }

        static PyObject *t_Analyzer$ReuseStrategy_getReusableComponents(t_Analyzer$ReuseStrategy *self, PyObject *args)
        {
          ::org::apache::lucene::analysis::Analyzer a0((jobject) NULL);
          ::java::lang::String a1((jobject) NULL);
          ::org::apache::lucene::analysis::Analyzer$TokenStreamComponents result((jobject) NULL);

          if (!parseArgs(args, "ks", ::org::apache::lucene::analysis::Analyzer::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = self->object.getReusableComponents(a0, a1));
            return ::org::apache::lucene::analysis::t_Analyzer$TokenStreamComponents::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "getReusableComponents", args);
          return NULL;
        }

        static PyObject *t_Analyzer$ReuseStrategy_setReusableComponents(t_Analyzer$ReuseStrategy *self, PyObject *args)
        {
          ::org::apache::lucene::analysis::Analyzer a0((jobject) NULL);
          ::java::lang::String a1((jobject) NULL);
          ::org::apache::lucene::analysis::Analyzer$TokenStreamComponents a2((jobject) NULL);

          if (!parseArgs(args, "ksk", ::org::apache::lucene::analysis::Analyzer::initializeClass, ::org::apache::lucene::analysis::Analyzer$TokenStreamComponents::initializeClass, &a0, &a1, &a2))
          {
            OBJ_CALL(self->object.setReusableComponents(a0, a1, a2));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setReusableComponents", args);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/xml/CorePlusExtensionsParser.h"
#include "java/lang/String.h"
#include "org/apache/lucene/analysis/Analyzer.h"
#include "org/apache/lucene/queryparser/classic/QueryParser.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace xml {

          ::java::lang::Class *CorePlusExtensionsParser::class$ = NULL;
          jmethodID *CorePlusExtensionsParser::mids$ = NULL;
          bool CorePlusExtensionsParser::live$ = false;

          jclass CorePlusExtensionsParser::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/xml/CorePlusExtensionsParser");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_64322899] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/Analyzer;Lorg/apache/lucene/queryparser/classic/QueryParser;)V");
              mids$[mid_init$_d77cc89a] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Lorg/apache/lucene/analysis/Analyzer;)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          CorePlusExtensionsParser::CorePlusExtensionsParser(const ::org::apache::lucene::analysis::Analyzer & a0, const ::org::apache::lucene::queryparser::classic::QueryParser & a1) : ::org::apache::lucene::queryparser::xml::CoreParser(env->newObject(initializeClass, &mids$, mid_init$_64322899, a0.this$, a1.this$)) {}

          CorePlusExtensionsParser::CorePlusExtensionsParser(const ::java::lang::String & a0, const ::org::apache::lucene::analysis::Analyzer & a1) : ::org::apache::lucene::queryparser::xml::CoreParser(env->newObject(initializeClass, &mids$, mid_init$_d77cc89a, a0.this$, a1.this$)) {}
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace xml {
          static PyObject *t_CorePlusExtensionsParser_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_CorePlusExtensionsParser_instance_(PyTypeObject *type, PyObject *arg);
          static int t_CorePlusExtensionsParser_init_(t_CorePlusExtensionsParser *self, PyObject *args, PyObject *kwds);

          static PyMethodDef t_CorePlusExtensionsParser__methods_[] = {
            DECLARE_METHOD(t_CorePlusExtensionsParser, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CorePlusExtensionsParser, instance_, METH_O | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(CorePlusExtensionsParser, t_CorePlusExtensionsParser, ::org::apache::lucene::queryparser::xml::CoreParser, CorePlusExtensionsParser, t_CorePlusExtensionsParser_init_, 0, 0, 0, 0, 0);

          void t_CorePlusExtensionsParser::install(PyObject *module)
          {
            installType(&PY_TYPE(CorePlusExtensionsParser), module, "CorePlusExtensionsParser", 0);
          }

          void t_CorePlusExtensionsParser::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(CorePlusExtensionsParser).tp_dict, "class_", make_descriptor(CorePlusExtensionsParser::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(CorePlusExtensionsParser).tp_dict, "wrapfn_", make_descriptor(t_CorePlusExtensionsParser::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(CorePlusExtensionsParser).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_CorePlusExtensionsParser_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, CorePlusExtensionsParser::initializeClass, 1)))
              return NULL;
            return t_CorePlusExtensionsParser::wrap_Object(CorePlusExtensionsParser(((t_CorePlusExtensionsParser *) arg)->object.this$));
          }
          static PyObject *t_CorePlusExtensionsParser_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, CorePlusExtensionsParser::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_CorePlusExtensionsParser_init_(t_CorePlusExtensionsParser *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 2:
              {
                ::org::apache::lucene::analysis::Analyzer a0((jobject) NULL);
                ::org::apache::lucene::queryparser::classic::QueryParser a1((jobject) NULL);
                CorePlusExtensionsParser object((jobject) NULL);

                if (!parseArgs(args, "kk", ::org::apache::lucene::analysis::Analyzer::initializeClass, ::org::apache::lucene::queryparser::classic::QueryParser::initializeClass, &a0, &a1))
                {
                  INT_CALL(object = CorePlusExtensionsParser(a0, a1));
                  self->object = object;
                  break;
                }
              }
              {
                ::java::lang::String a0((jobject) NULL);
                ::org::apache::lucene::analysis::Analyzer a1((jobject) NULL);
                CorePlusExtensionsParser object((jobject) NULL);

                if (!parseArgs(args, "sk", ::org::apache::lucene::analysis::Analyzer::initializeClass, &a0, &a1))
                {
                  INT_CALL(object = CorePlusExtensionsParser(a0, a1));
                  self->object = object;
                  break;
                }
              }
             default:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/FilterDirectoryReader$SubReaderWrapper.h"
#include "org/apache/lucene/index/AtomicReader.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *FilterDirectoryReader$SubReaderWrapper::class$ = NULL;
        jmethodID *FilterDirectoryReader$SubReaderWrapper::mids$ = NULL;
        bool FilterDirectoryReader$SubReaderWrapper::live$ = false;

        jclass FilterDirectoryReader$SubReaderWrapper::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/FilterDirectoryReader$SubReaderWrapper");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_wrap_3b1ad795] = env->getMethodID(cls, "wrap", "(Lorg/apache/lucene/index/AtomicReader;)Lorg/apache/lucene/index/AtomicReader;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        FilterDirectoryReader$SubReaderWrapper::FilterDirectoryReader$SubReaderWrapper() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        ::org::apache::lucene::index::AtomicReader FilterDirectoryReader$SubReaderWrapper::wrap(const ::org::apache::lucene::index::AtomicReader & a0) const
        {
          return ::org::apache::lucene::index::AtomicReader(env->callObjectMethod(this$, mids$[mid_wrap_3b1ad795], a0.this$));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_FilterDirectoryReader$SubReaderWrapper_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FilterDirectoryReader$SubReaderWrapper_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FilterDirectoryReader$SubReaderWrapper_of_(t_FilterDirectoryReader$SubReaderWrapper *self, PyObject *args);
        static int t_FilterDirectoryReader$SubReaderWrapper_init_(t_FilterDirectoryReader$SubReaderWrapper *self, PyObject *args, PyObject *kwds);
        static PyObject *t_FilterDirectoryReader$SubReaderWrapper_wrap(t_FilterDirectoryReader$SubReaderWrapper *self, PyObject *arg);
        static PyObject *t_FilterDirectoryReader$SubReaderWrapper_get__parameters_(t_FilterDirectoryReader$SubReaderWrapper *self, void *data);
        static PyGetSetDef t_FilterDirectoryReader$SubReaderWrapper__fields_[] = {
          DECLARE_GET_FIELD(t_FilterDirectoryReader$SubReaderWrapper, parameters_),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_FilterDirectoryReader$SubReaderWrapper__methods_[] = {
          DECLARE_METHOD(t_FilterDirectoryReader$SubReaderWrapper, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FilterDirectoryReader$SubReaderWrapper, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FilterDirectoryReader$SubReaderWrapper, of_, METH_VARARGS),
          DECLARE_METHOD(t_FilterDirectoryReader$SubReaderWrapper, wrap, METH_O),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(FilterDirectoryReader$SubReaderWrapper, t_FilterDirectoryReader$SubReaderWrapper, ::java::lang::Object, FilterDirectoryReader$SubReaderWrapper, t_FilterDirectoryReader$SubReaderWrapper_init_, 0, 0, t_FilterDirectoryReader$SubReaderWrapper__fields_, 0, 0);
        PyObject *t_FilterDirectoryReader$SubReaderWrapper::wrap_Object(const FilterDirectoryReader$SubReaderWrapper& object, PyTypeObject *p0)
        {
          PyObject *obj = t_FilterDirectoryReader$SubReaderWrapper::wrap_Object(object);
          if (obj != NULL && obj != Py_None)
          {
            t_FilterDirectoryReader$SubReaderWrapper *self = (t_FilterDirectoryReader$SubReaderWrapper *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        PyObject *t_FilterDirectoryReader$SubReaderWrapper::wrap_jobject(const jobject& object, PyTypeObject *p0)
        {
          PyObject *obj = t_FilterDirectoryReader$SubReaderWrapper::wrap_jobject(object);
          if (obj != NULL && obj != Py_None)
          {
            t_FilterDirectoryReader$SubReaderWrapper *self = (t_FilterDirectoryReader$SubReaderWrapper *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        void t_FilterDirectoryReader$SubReaderWrapper::install(PyObject *module)
        {
          installType(&PY_TYPE(FilterDirectoryReader$SubReaderWrapper), module, "FilterDirectoryReader$SubReaderWrapper", 0);
        }

        void t_FilterDirectoryReader$SubReaderWrapper::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(FilterDirectoryReader$SubReaderWrapper).tp_dict, "class_", make_descriptor(FilterDirectoryReader$SubReaderWrapper::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(FilterDirectoryReader$SubReaderWrapper).tp_dict, "wrapfn_", make_descriptor(t_FilterDirectoryReader$SubReaderWrapper::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(FilterDirectoryReader$SubReaderWrapper).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_FilterDirectoryReader$SubReaderWrapper_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, FilterDirectoryReader$SubReaderWrapper::initializeClass, 1)))
            return NULL;
          return t_FilterDirectoryReader$SubReaderWrapper::wrap_Object(FilterDirectoryReader$SubReaderWrapper(((t_FilterDirectoryReader$SubReaderWrapper *) arg)->object.this$));
        }
        static PyObject *t_FilterDirectoryReader$SubReaderWrapper_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, FilterDirectoryReader$SubReaderWrapper::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_FilterDirectoryReader$SubReaderWrapper_of_(t_FilterDirectoryReader$SubReaderWrapper *self, PyObject *args)
        {
          if (!parseArg(args, "T", 1, &(self->parameters)))
            Py_RETURN_SELF;
          return PyErr_SetArgsError((PyObject *) self, "of_", args);
        }

        static int t_FilterDirectoryReader$SubReaderWrapper_init_(t_FilterDirectoryReader$SubReaderWrapper *self, PyObject *args, PyObject *kwds)
        {
          FilterDirectoryReader$SubReaderWrapper object((jobject) NULL);

          INT_CALL(object = FilterDirectoryReader$SubReaderWrapper());
          self->object = object;
          self->parameters[0] = &::org::apache::lucene::index::PY_TYPE(AtomicReader);

          return 0;
        }

        static PyObject *t_FilterDirectoryReader$SubReaderWrapper_wrap(t_FilterDirectoryReader$SubReaderWrapper *self, PyObject *arg)
        {
          ::org::apache::lucene::index::AtomicReader a0((jobject) NULL);
          ::org::apache::lucene::index::AtomicReader result((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::index::AtomicReader::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.wrap(a0));
            return ::org::apache::lucene::index::t_AtomicReader::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "wrap", arg);
          return NULL;
        }
        static PyObject *t_FilterDirectoryReader$SubReaderWrapper_get__parameters_(t_FilterDirectoryReader$SubReaderWrapper *self, void *data)
        {
          return typeParameters(self->parameters, sizeof(self->parameters));
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/FieldCache$Ints.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *FieldCache$Ints::class$ = NULL;
        jmethodID *FieldCache$Ints::mids$ = NULL;
        bool FieldCache$Ints::live$ = false;
        FieldCache$Ints *FieldCache$Ints::EMPTY = NULL;

        jclass FieldCache$Ints::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/FieldCache$Ints");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_get_39c7bd23] = env->getMethodID(cls, "get", "(I)I");

            class$ = (::java::lang::Class *) new JObject(cls);
            cls = (jclass) class$->this$;

            EMPTY = new FieldCache$Ints(env->getStaticObjectField(cls, "EMPTY", "Lorg/apache/lucene/search/FieldCache$Ints;"));
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        FieldCache$Ints::FieldCache$Ints() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        jint FieldCache$Ints::get(jint a0) const
        {
          return env->callIntMethod(this$, mids$[mid_get_39c7bd23], a0);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_FieldCache$Ints_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FieldCache$Ints_instance_(PyTypeObject *type, PyObject *arg);
        static int t_FieldCache$Ints_init_(t_FieldCache$Ints *self, PyObject *args, PyObject *kwds);
        static PyObject *t_FieldCache$Ints_get(t_FieldCache$Ints *self, PyObject *arg);

        static PyMethodDef t_FieldCache$Ints__methods_[] = {
          DECLARE_METHOD(t_FieldCache$Ints, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FieldCache$Ints, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FieldCache$Ints, get, METH_O),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(FieldCache$Ints, t_FieldCache$Ints, ::java::lang::Object, FieldCache$Ints, t_FieldCache$Ints_init_, 0, 0, 0, 0, 0);

        void t_FieldCache$Ints::install(PyObject *module)
        {
          installType(&PY_TYPE(FieldCache$Ints), module, "FieldCache$Ints", 0);
        }

        void t_FieldCache$Ints::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(FieldCache$Ints).tp_dict, "class_", make_descriptor(FieldCache$Ints::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(FieldCache$Ints).tp_dict, "wrapfn_", make_descriptor(t_FieldCache$Ints::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(FieldCache$Ints).tp_dict, "boxfn_", make_descriptor(boxObject));
          env->getClass(FieldCache$Ints::initializeClass);
          PyDict_SetItemString(PY_TYPE(FieldCache$Ints).tp_dict, "EMPTY", make_descriptor(t_FieldCache$Ints::wrap_Object(*FieldCache$Ints::EMPTY)));
        }

        static PyObject *t_FieldCache$Ints_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, FieldCache$Ints::initializeClass, 1)))
            return NULL;
          return t_FieldCache$Ints::wrap_Object(FieldCache$Ints(((t_FieldCache$Ints *) arg)->object.this$));
        }
        static PyObject *t_FieldCache$Ints_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, FieldCache$Ints::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_FieldCache$Ints_init_(t_FieldCache$Ints *self, PyObject *args, PyObject *kwds)
        {
          FieldCache$Ints object((jobject) NULL);

          INT_CALL(object = FieldCache$Ints());
          self->object = object;

          return 0;
        }

        static PyObject *t_FieldCache$Ints_get(t_FieldCache$Ints *self, PyObject *arg)
        {
          jint a0;
          jint result;

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(result = self->object.get(a0));
            return PyInt_FromLong((long) result);
          }

          PyErr_SetArgsError((PyObject *) self, "get", arg);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queries/function/FunctionValues$ValueFiller.h"
#include "org/apache/lucene/util/mutable/MutableValue.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {

          ::java::lang::Class *FunctionValues$ValueFiller::class$ = NULL;
          jmethodID *FunctionValues$ValueFiller::mids$ = NULL;
          bool FunctionValues$ValueFiller::live$ = false;

          jclass FunctionValues$ValueFiller::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/queries/function/FunctionValues$ValueFiller");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_fillValue_39c7bd3c] = env->getMethodID(cls, "fillValue", "(I)V");
              mids$[mid_getValue_15ab3811] = env->getMethodID(cls, "getValue", "()Lorg/apache/lucene/util/mutable/MutableValue;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          FunctionValues$ValueFiller::FunctionValues$ValueFiller() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          void FunctionValues$ValueFiller::fillValue(jint a0) const
          {
            env->callVoidMethod(this$, mids$[mid_fillValue_39c7bd3c], a0);
          }

          ::org::apache::lucene::util::mutable$::MutableValue FunctionValues$ValueFiller::getValue() const
          {
            return ::org::apache::lucene::util::mutable$::MutableValue(env->callObjectMethod(this$, mids$[mid_getValue_15ab3811]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          static PyObject *t_FunctionValues$ValueFiller_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_FunctionValues$ValueFiller_instance_(PyTypeObject *type, PyObject *arg);
          static int t_FunctionValues$ValueFiller_init_(t_FunctionValues$ValueFiller *self, PyObject *args, PyObject *kwds);
          static PyObject *t_FunctionValues$ValueFiller_fillValue(t_FunctionValues$ValueFiller *self, PyObject *arg);
          static PyObject *t_FunctionValues$ValueFiller_getValue(t_FunctionValues$ValueFiller *self);
          static PyObject *t_FunctionValues$ValueFiller_get__value(t_FunctionValues$ValueFiller *self, void *data);
          static PyGetSetDef t_FunctionValues$ValueFiller__fields_[] = {
            DECLARE_GET_FIELD(t_FunctionValues$ValueFiller, value),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_FunctionValues$ValueFiller__methods_[] = {
            DECLARE_METHOD(t_FunctionValues$ValueFiller, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FunctionValues$ValueFiller, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FunctionValues$ValueFiller, fillValue, METH_O),
            DECLARE_METHOD(t_FunctionValues$ValueFiller, getValue, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(FunctionValues$ValueFiller, t_FunctionValues$ValueFiller, ::java::lang::Object, FunctionValues$ValueFiller, t_FunctionValues$ValueFiller_init_, 0, 0, t_FunctionValues$ValueFiller__fields_, 0, 0);

          void t_FunctionValues$ValueFiller::install(PyObject *module)
          {
            installType(&PY_TYPE(FunctionValues$ValueFiller), module, "FunctionValues$ValueFiller", 0);
          }

          void t_FunctionValues$ValueFiller::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(FunctionValues$ValueFiller).tp_dict, "class_", make_descriptor(FunctionValues$ValueFiller::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(FunctionValues$ValueFiller).tp_dict, "wrapfn_", make_descriptor(t_FunctionValues$ValueFiller::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(FunctionValues$ValueFiller).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_FunctionValues$ValueFiller_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, FunctionValues$ValueFiller::initializeClass, 1)))
              return NULL;
            return t_FunctionValues$ValueFiller::wrap_Object(FunctionValues$ValueFiller(((t_FunctionValues$ValueFiller *) arg)->object.this$));
          }
          static PyObject *t_FunctionValues$ValueFiller_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, FunctionValues$ValueFiller::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_FunctionValues$ValueFiller_init_(t_FunctionValues$ValueFiller *self, PyObject *args, PyObject *kwds)
          {
            FunctionValues$ValueFiller object((jobject) NULL);

            INT_CALL(object = FunctionValues$ValueFiller());
            self->object = object;

            return 0;
          }

          static PyObject *t_FunctionValues$ValueFiller_fillValue(t_FunctionValues$ValueFiller *self, PyObject *arg)
          {
            jint a0;

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(self->object.fillValue(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "fillValue", arg);
            return NULL;
          }

          static PyObject *t_FunctionValues$ValueFiller_getValue(t_FunctionValues$ValueFiller *self)
          {
            ::org::apache::lucene::util::mutable$::MutableValue result((jobject) NULL);
            OBJ_CALL(result = self->object.getValue());
            return ::org::apache::lucene::util::mutable$::t_MutableValue::wrap_Object(result);
          }

          static PyObject *t_FunctionValues$ValueFiller_get__value(t_FunctionValues$ValueFiller *self, void *data)
          {
            ::org::apache::lucene::util::mutable$::MutableValue value((jobject) NULL);
            OBJ_CALL(value = self->object.getValue());
            return ::org::apache::lucene::util::mutable$::t_MutableValue::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/no/NorwegianMinimalStemmer.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace no {

          ::java::lang::Class *NorwegianMinimalStemmer::class$ = NULL;
          jmethodID *NorwegianMinimalStemmer::mids$ = NULL;
          bool NorwegianMinimalStemmer::live$ = false;

          jclass NorwegianMinimalStemmer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/no/NorwegianMinimalStemmer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_39c7bd3c] = env->getMethodID(cls, "<init>", "(I)V");
              mids$[mid_stem_ec6430eb] = env->getMethodID(cls, "stem", "([CI)I");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          NorwegianMinimalStemmer::NorwegianMinimalStemmer(jint a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_39c7bd3c, a0)) {}

          jint NorwegianMinimalStemmer::stem(const JArray< jchar > & a0, jint a1) const
          {
            return env->callIntMethod(this$, mids$[mid_stem_ec6430eb], a0.this$, a1);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace no {
          static PyObject *t_NorwegianMinimalStemmer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_NorwegianMinimalStemmer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_NorwegianMinimalStemmer_init_(t_NorwegianMinimalStemmer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_NorwegianMinimalStemmer_stem(t_NorwegianMinimalStemmer *self, PyObject *args);

          static PyMethodDef t_NorwegianMinimalStemmer__methods_[] = {
            DECLARE_METHOD(t_NorwegianMinimalStemmer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_NorwegianMinimalStemmer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_NorwegianMinimalStemmer, stem, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(NorwegianMinimalStemmer, t_NorwegianMinimalStemmer, ::java::lang::Object, NorwegianMinimalStemmer, t_NorwegianMinimalStemmer_init_, 0, 0, 0, 0, 0);

          void t_NorwegianMinimalStemmer::install(PyObject *module)
          {
            installType(&PY_TYPE(NorwegianMinimalStemmer), module, "NorwegianMinimalStemmer", 0);
          }

          void t_NorwegianMinimalStemmer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(NorwegianMinimalStemmer).tp_dict, "class_", make_descriptor(NorwegianMinimalStemmer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(NorwegianMinimalStemmer).tp_dict, "wrapfn_", make_descriptor(t_NorwegianMinimalStemmer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(NorwegianMinimalStemmer).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_NorwegianMinimalStemmer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, NorwegianMinimalStemmer::initializeClass, 1)))
              return NULL;
            return t_NorwegianMinimalStemmer::wrap_Object(NorwegianMinimalStemmer(((t_NorwegianMinimalStemmer *) arg)->object.this$));
          }
          static PyObject *t_NorwegianMinimalStemmer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, NorwegianMinimalStemmer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_NorwegianMinimalStemmer_init_(t_NorwegianMinimalStemmer *self, PyObject *args, PyObject *kwds)
          {
            jint a0;
            NorwegianMinimalStemmer object((jobject) NULL);

            if (!parseArgs(args, "I", &a0))
            {
              INT_CALL(object = NorwegianMinimalStemmer(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_NorwegianMinimalStemmer_stem(t_NorwegianMinimalStemmer *self, PyObject *args)
          {
            JArray< jchar > a0((jobject) NULL);
            jint a1;
            jint result;

            if (!parseArgs(args, "[CI", &a0, &a1))
            {
              OBJ_CALL(result = self->object.stem(a0, a1));
              return PyInt_FromLong((long) result);
            }

            PyErr_SetArgsError((PyObject *) self, "stem", args);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/highlight/Scorer.h"
#include "org/apache/lucene/search/highlight/TextFragment.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace highlight {

          ::java::lang::Class *Scorer::class$ = NULL;
          jmethodID *Scorer::mids$ = NULL;
          bool Scorer::live$ = false;

          jclass Scorer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/highlight/Scorer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_getFragmentScore_54c6a176] = env->getMethodID(cls, "getFragmentScore", "()F");
              mids$[mid_getTokenScore_54c6a176] = env->getMethodID(cls, "getTokenScore", "()F");
              mids$[mid_init_a65cd6ab] = env->getMethodID(cls, "init", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/TokenStream;");
              mids$[mid_startFragment_0335a78a] = env->getMethodID(cls, "startFragment", "(Lorg/apache/lucene/search/highlight/TextFragment;)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          jfloat Scorer::getFragmentScore() const
          {
            return env->callFloatMethod(this$, mids$[mid_getFragmentScore_54c6a176]);
          }

          jfloat Scorer::getTokenScore() const
          {
            return env->callFloatMethod(this$, mids$[mid_getTokenScore_54c6a176]);
          }

          ::org::apache::lucene::analysis::TokenStream Scorer::init(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::TokenStream(env->callObjectMethod(this$, mids$[mid_init_a65cd6ab], a0.this$));
          }

          void Scorer::startFragment(const ::org::apache::lucene::search::highlight::TextFragment & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_startFragment_0335a78a], a0.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace highlight {
          static PyObject *t_Scorer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Scorer_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Scorer_getFragmentScore(t_Scorer *self);
          static PyObject *t_Scorer_getTokenScore(t_Scorer *self);
          static PyObject *t_Scorer_init(t_Scorer *self, PyObject *arg);
          static PyObject *t_Scorer_startFragment(t_Scorer *self, PyObject *arg);
          static PyObject *t_Scorer_get__fragmentScore(t_Scorer *self, void *data);
          static PyObject *t_Scorer_get__tokenScore(t_Scorer *self, void *data);
          static PyGetSetDef t_Scorer__fields_[] = {
            DECLARE_GET_FIELD(t_Scorer, fragmentScore),
            DECLARE_GET_FIELD(t_Scorer, tokenScore),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_Scorer__methods_[] = {
            DECLARE_METHOD(t_Scorer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Scorer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Scorer, getFragmentScore, METH_NOARGS),
            DECLARE_METHOD(t_Scorer, getTokenScore, METH_NOARGS),
            DECLARE_METHOD(t_Scorer, init, METH_O),
            DECLARE_METHOD(t_Scorer, startFragment, METH_O),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(Scorer, t_Scorer, ::java::lang::Object, Scorer, abstract_init, 0, 0, t_Scorer__fields_, 0, 0);

          void t_Scorer::install(PyObject *module)
          {
            installType(&PY_TYPE(Scorer), module, "Scorer", 0);
          }

          void t_Scorer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(Scorer).tp_dict, "class_", make_descriptor(Scorer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(Scorer).tp_dict, "wrapfn_", make_descriptor(t_Scorer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(Scorer).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_Scorer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, Scorer::initializeClass, 1)))
              return NULL;
            return t_Scorer::wrap_Object(Scorer(((t_Scorer *) arg)->object.this$));
          }
          static PyObject *t_Scorer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, Scorer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_Scorer_getFragmentScore(t_Scorer *self)
          {
            jfloat result;
            OBJ_CALL(result = self->object.getFragmentScore());
            return PyFloat_FromDouble((double) result);
          }

          static PyObject *t_Scorer_getTokenScore(t_Scorer *self)
          {
            jfloat result;
            OBJ_CALL(result = self->object.getTokenScore());
            return PyFloat_FromDouble((double) result);
          }

          static PyObject *t_Scorer_init(t_Scorer *self, PyObject *arg)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::TokenStream result((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.init(a0));
              return ::org::apache::lucene::analysis::t_TokenStream::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "init", arg);
            return NULL;
          }

          static PyObject *t_Scorer_startFragment(t_Scorer *self, PyObject *arg)
          {
            ::org::apache::lucene::search::highlight::TextFragment a0((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::search::highlight::TextFragment::initializeClass, &a0))
            {
              OBJ_CALL(self->object.startFragment(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "startFragment", arg);
            return NULL;
          }

          static PyObject *t_Scorer_get__fragmentScore(t_Scorer *self, void *data)
          {
            jfloat value;
            OBJ_CALL(value = self->object.getFragmentScore());
            return PyFloat_FromDouble((double) value);
          }

          static PyObject *t_Scorer_get__tokenScore(t_Scorer *self, void *data)
          {
            jfloat value;
            OBJ_CALL(value = self->object.getTokenScore());
            return PyFloat_FromDouble((double) value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/pylucene/search/PythonFloatParser.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/index/Terms.h"
#include "org/apache/lucene/index/TermsEnum.h"
#include "org/apache/lucene/search/FieldCache$FloatParser.h"
#include "java/io/IOException.h"
#include "java/lang/Throwable.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace pylucene {
      namespace search {

        ::java::lang::Class *PythonFloatParser::class$ = NULL;
        jmethodID *PythonFloatParser::mids$ = NULL;
        bool PythonFloatParser::live$ = false;

        jclass PythonFloatParser::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/pylucene/search/PythonFloatParser");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_finalize_54c6a166] = env->getMethodID(cls, "finalize", "()V");
            mids$[mid_parseFloat_7bc03dd4] = env->getMethodID(cls, "parseFloat", "(Lorg/apache/lucene/util/BytesRef;)F");
            mids$[mid_pythonDecRef_54c6a166] = env->getMethodID(cls, "pythonDecRef", "()V");
            mids$[mid_pythonExtension_54c6a17a] = env->getMethodID(cls, "pythonExtension", "()J");
            mids$[mid_pythonExtension_0ee6df2f] = env->getMethodID(cls, "pythonExtension", "(J)V");
            mids$[mid_termsEnum_fb3ac14e] = env->getMethodID(cls, "termsEnum", "(Lorg/apache/lucene/index/Terms;)Lorg/apache/lucene/index/TermsEnum;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        PythonFloatParser::PythonFloatParser() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        void PythonFloatParser::finalize() const
        {
          env->callVoidMethod(this$, mids$[mid_finalize_54c6a166]);
        }

        jlong PythonFloatParser::pythonExtension() const
        {
          return env->callLongMethod(this$, mids$[mid_pythonExtension_54c6a17a]);
        }

        void PythonFloatParser::pythonExtension(jlong a0) const
        {
          env->callVoidMethod(this$, mids$[mid_pythonExtension_0ee6df2f], a0);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace pylucene {
      namespace search {
        static PyObject *t_PythonFloatParser_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_PythonFloatParser_instance_(PyTypeObject *type, PyObject *arg);
        static int t_PythonFloatParser_init_(t_PythonFloatParser *self, PyObject *args, PyObject *kwds);
        static PyObject *t_PythonFloatParser_finalize(t_PythonFloatParser *self);
        static PyObject *t_PythonFloatParser_pythonExtension(t_PythonFloatParser *self, PyObject *args);
        static jfloat JNICALL t_PythonFloatParser_parseFloat0(JNIEnv *jenv, jobject jobj, jobject a0);
        static void JNICALL t_PythonFloatParser_pythonDecRef1(JNIEnv *jenv, jobject jobj);
        static jobject JNICALL t_PythonFloatParser_termsEnum2(JNIEnv *jenv, jobject jobj, jobject a0);
        static PyObject *t_PythonFloatParser_get__self(t_PythonFloatParser *self, void *data);
        static PyGetSetDef t_PythonFloatParser__fields_[] = {
          DECLARE_GET_FIELD(t_PythonFloatParser, self),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_PythonFloatParser__methods_[] = {
          DECLARE_METHOD(t_PythonFloatParser, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PythonFloatParser, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PythonFloatParser, finalize, METH_NOARGS),
          DECLARE_METHOD(t_PythonFloatParser, pythonExtension, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(PythonFloatParser, t_PythonFloatParser, ::java::lang::Object, PythonFloatParser, t_PythonFloatParser_init_, 0, 0, t_PythonFloatParser__fields_, 0, 0);

        void t_PythonFloatParser::install(PyObject *module)
        {
          installType(&PY_TYPE(PythonFloatParser), module, "PythonFloatParser", 1);
        }

        void t_PythonFloatParser::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(PythonFloatParser).tp_dict, "class_", make_descriptor(PythonFloatParser::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(PythonFloatParser).tp_dict, "wrapfn_", make_descriptor(t_PythonFloatParser::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(PythonFloatParser).tp_dict, "boxfn_", make_descriptor(boxObject));
          jclass cls = env->getClass(PythonFloatParser::initializeClass);
          JNINativeMethod methods[] = {
            { "parseFloat", "(Lorg/apache/lucene/util/BytesRef;)F", (void *) t_PythonFloatParser_parseFloat0 },
            { "pythonDecRef", "()V", (void *) t_PythonFloatParser_pythonDecRef1 },
            { "termsEnum", "(Lorg/apache/lucene/index/Terms;)Lorg/apache/lucene/index/TermsEnum;", (void *) t_PythonFloatParser_termsEnum2 },
          };
          env->registerNatives(cls, methods, 3);
        }

        static PyObject *t_PythonFloatParser_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, PythonFloatParser::initializeClass, 1)))
            return NULL;
          return t_PythonFloatParser::wrap_Object(PythonFloatParser(((t_PythonFloatParser *) arg)->object.this$));
        }
        static PyObject *t_PythonFloatParser_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, PythonFloatParser::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_PythonFloatParser_init_(t_PythonFloatParser *self, PyObject *args, PyObject *kwds)
        {
          PythonFloatParser object((jobject) NULL);

          INT_CALL(object = PythonFloatParser());
          self->object = object;

          Py_INCREF((PyObject *) self);
          self->object.pythonExtension((jlong) (Py_intptr_t) (void *) self);

          return 0;
        }

        static PyObject *t_PythonFloatParser_finalize(t_PythonFloatParser *self)
        {
          OBJ_CALL(self->object.finalize());
          Py_RETURN_NONE;
        }

        static PyObject *t_PythonFloatParser_pythonExtension(t_PythonFloatParser *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 0:
            {
              jlong result;
              OBJ_CALL(result = self->object.pythonExtension());
              return PyLong_FromLongLong((PY_LONG_LONG) result);
            }
            break;
           case 1:
            {
              jlong a0;

              if (!parseArgs(args, "J", &a0))
              {
                OBJ_CALL(self->object.pythonExtension(a0));
                Py_RETURN_NONE;
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "pythonExtension", args);
          return NULL;
        }

        static jfloat JNICALL t_PythonFloatParser_parseFloat0(JNIEnv *jenv, jobject jobj, jobject a0)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonFloatParser::mids$[PythonFloatParser::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          jfloat value;
          PyObject *o0 = ::org::apache::lucene::util::t_BytesRef::wrap_Object(::org::apache::lucene::util::BytesRef(a0));
          PyObject *result = PyObject_CallMethod(obj, "parseFloat", "O", o0);
          Py_DECREF(o0);
          if (!result)
            throwPythonError();
          else if (parseArg(result, "F", &value))
          {
            throwTypeError("parseFloat", result);
            Py_DECREF(result);
          }
          else
          {
            Py_DECREF(result);
            return value;
          }

          return (jfloat) 0;
        }

        static void JNICALL t_PythonFloatParser_pythonDecRef1(JNIEnv *jenv, jobject jobj)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonFloatParser::mids$[PythonFloatParser::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;

          if (obj != NULL)
          {
            jenv->CallVoidMethod(jobj, PythonFloatParser::mids$[PythonFloatParser::mid_pythonExtension_0ee6df2f], (jlong) 0);
            env->finalizeObject(jenv, obj);
          }
        }

        static jobject JNICALL t_PythonFloatParser_termsEnum2(JNIEnv *jenv, jobject jobj, jobject a0)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonFloatParser::mids$[PythonFloatParser::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          ::org::apache::lucene::index::TermsEnum value((jobject) NULL);
          PyObject *o0 = ::org::apache::lucene::index::t_Terms::wrap_Object(::org::apache::lucene::index::Terms(a0));
          PyObject *result = PyObject_CallMethod(obj, "termsEnum", "O", o0);
          Py_DECREF(o0);
          if (!result)
            throwPythonError();
          else if (parseArg(result, "k", ::org::apache::lucene::index::TermsEnum::initializeClass, &value))
          {
            throwTypeError("termsEnum", result);
            Py_DECREF(result);
          }
          else
          {
            jobj = jenv->NewLocalRef(value.this$);
            Py_DECREF(result);
            return jobj;
          }

          return (jobject) NULL;
        }

        static PyObject *t_PythonFloatParser_get__self(t_PythonFloatParser *self, void *data)
        {
          jlong ptr;
          OBJ_CALL(ptr = self->object.pythonExtension());
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;

          if (obj != NULL)
          {
            Py_INCREF(obj);
            return obj;
          }
          else
            Py_RETURN_NONE;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/br/BrazilianStemmer.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace br {

          ::java::lang::Class *BrazilianStemmer::class$ = NULL;
          jmethodID *BrazilianStemmer::mids$ = NULL;
          bool BrazilianStemmer::live$ = false;

          jclass BrazilianStemmer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/br/BrazilianStemmer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_log_14c7b5c5] = env->getMethodID(cls, "log", "()Ljava/lang/String;");
              mids$[mid_stem_97a5258f] = env->getMethodID(cls, "stem", "(Ljava/lang/String;)Ljava/lang/String;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          BrazilianStemmer::BrazilianStemmer() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          ::java::lang::String BrazilianStemmer::log() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_log_14c7b5c5]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace br {
          static PyObject *t_BrazilianStemmer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_BrazilianStemmer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_BrazilianStemmer_init_(t_BrazilianStemmer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_BrazilianStemmer_log(t_BrazilianStemmer *self);

          static PyMethodDef t_BrazilianStemmer__methods_[] = {
            DECLARE_METHOD(t_BrazilianStemmer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_BrazilianStemmer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_BrazilianStemmer, log, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(BrazilianStemmer, t_BrazilianStemmer, ::java::lang::Object, BrazilianStemmer, t_BrazilianStemmer_init_, 0, 0, 0, 0, 0);

          void t_BrazilianStemmer::install(PyObject *module)
          {
            installType(&PY_TYPE(BrazilianStemmer), module, "BrazilianStemmer", 0);
          }

          void t_BrazilianStemmer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(BrazilianStemmer).tp_dict, "class_", make_descriptor(BrazilianStemmer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(BrazilianStemmer).tp_dict, "wrapfn_", make_descriptor(t_BrazilianStemmer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(BrazilianStemmer).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_BrazilianStemmer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, BrazilianStemmer::initializeClass, 1)))
              return NULL;
            return t_BrazilianStemmer::wrap_Object(BrazilianStemmer(((t_BrazilianStemmer *) arg)->object.this$));
          }
          static PyObject *t_BrazilianStemmer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, BrazilianStemmer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_BrazilianStemmer_init_(t_BrazilianStemmer *self, PyObject *args, PyObject *kwds)
          {
            BrazilianStemmer object((jobject) NULL);

            INT_CALL(object = BrazilianStemmer());
            self->object = object;

            return 0;
          }

          static PyObject *t_BrazilianStemmer_log(t_BrazilianStemmer *self)
          {
            ::java::lang::String result((jobject) NULL);
            OBJ_CALL(result = self->object.log());
            return j2p(result);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/mutable/MutableValueStr.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "java/lang/Object.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace mutable$ {

          ::java::lang::Class *MutableValueStr::class$ = NULL;
          jmethodID *MutableValueStr::mids$ = NULL;
          jfieldID *MutableValueStr::fids$ = NULL;
          bool MutableValueStr::live$ = false;

          jclass MutableValueStr::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/util/mutable/MutableValueStr");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_compareSameType_290588f1] = env->getMethodID(cls, "compareSameType", "(Ljava/lang/Object;)I");
              mids$[mid_copy_d590ce7c] = env->getMethodID(cls, "copy", "(Lorg/apache/lucene/util/mutable/MutableValue;)V");
              mids$[mid_duplicate_15ab3811] = env->getMethodID(cls, "duplicate", "()Lorg/apache/lucene/util/mutable/MutableValue;");
              mids$[mid_equalsSameType_290588e2] = env->getMethodID(cls, "equalsSameType", "(Ljava/lang/Object;)Z");
              mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
              mids$[mid_toObject_846352c3] = env->getMethodID(cls, "toObject", "()Ljava/lang/Object;");

              fids$ = new jfieldID[max_fid];
              fids$[fid_value] = env->getFieldID(cls, "value", "Lorg/apache/lucene/util/BytesRef;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          MutableValueStr::MutableValueStr() : ::org::apache::lucene::util::mutable$::MutableValue(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          jint MutableValueStr::compareSameType(const ::java::lang::Object & a0) const
          {
            return env->callIntMethod(this$, mids$[mid_compareSameType_290588f1], a0.this$);
          }

          void MutableValueStr::copy(const ::org::apache::lucene::util::mutable$::MutableValue & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_copy_d590ce7c], a0.this$);
          }

          ::org::apache::lucene::util::mutable$::MutableValue MutableValueStr::duplicate() const
          {
            return ::org::apache::lucene::util::mutable$::MutableValue(env->callObjectMethod(this$, mids$[mid_duplicate_15ab3811]));
          }

          jboolean MutableValueStr::equalsSameType(const ::java::lang::Object & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_equalsSameType_290588e2], a0.this$);
          }

          jint MutableValueStr::hashCode() const
          {
            return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
          }

          ::java::lang::Object MutableValueStr::toObject() const
          {
            return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_toObject_846352c3]));
          }

          ::org::apache::lucene::util::BytesRef MutableValueStr::_get_value() const
          {
            return ::org::apache::lucene::util::BytesRef(env->getObjectField(this$, fids$[fid_value]));
          }

          void MutableValueStr::_set_value(const ::org::apache::lucene::util::BytesRef & a0) const
          {
            env->setObjectField(this$, fids$[fid_value], a0.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace mutable$ {
          static PyObject *t_MutableValueStr_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_MutableValueStr_instance_(PyTypeObject *type, PyObject *arg);
          static int t_MutableValueStr_init_(t_MutableValueStr *self, PyObject *args, PyObject *kwds);
          static PyObject *t_MutableValueStr_compareSameType(t_MutableValueStr *self, PyObject *args);
          static PyObject *t_MutableValueStr_copy(t_MutableValueStr *self, PyObject *args);
          static PyObject *t_MutableValueStr_duplicate(t_MutableValueStr *self, PyObject *args);
          static PyObject *t_MutableValueStr_equalsSameType(t_MutableValueStr *self, PyObject *args);
          static PyObject *t_MutableValueStr_hashCode(t_MutableValueStr *self, PyObject *args);
          static PyObject *t_MutableValueStr_toObject(t_MutableValueStr *self, PyObject *args);
          static PyObject *t_MutableValueStr_get__value(t_MutableValueStr *self, void *data);
          static int t_MutableValueStr_set__value(t_MutableValueStr *self, PyObject *arg, void *data);

          static PyGetSetDef t_MutableValueStr__fields_[] = {
            DECLARE_GETSET_FIELD(t_MutableValueStr, value),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_MutableValueStr__methods_[] = {
            DECLARE_METHOD(t_MutableValueStr, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_MutableValueStr, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_MutableValueStr, compareSameType, METH_VARARGS),
            DECLARE_METHOD(t_MutableValueStr, copy, METH_VARARGS),
            DECLARE_METHOD(t_MutableValueStr, duplicate, METH_VARARGS),
            DECLARE_METHOD(t_MutableValueStr, equalsSameType, METH_VARARGS),
            DECLARE_METHOD(t_MutableValueStr, hashCode, METH_VARARGS),
            DECLARE_METHOD(t_MutableValueStr, toObject, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(MutableValueStr, t_MutableValueStr, ::org::apache::lucene::util::mutable$::MutableValue, MutableValueStr, t_MutableValueStr_init_, 0, 0, t_MutableValueStr__fields_, 0, 0);

          void t_MutableValueStr::install(PyObject *module)
          {
            installType(&PY_TYPE(MutableValueStr), module, "MutableValueStr", 0);
          }

          void t_MutableValueStr::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(MutableValueStr).tp_dict, "class_", make_descriptor(MutableValueStr::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(MutableValueStr).tp_dict, "wrapfn_", make_descriptor(t_MutableValueStr::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(MutableValueStr).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_MutableValueStr_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, MutableValueStr::initializeClass, 1)))
              return NULL;
            return t_MutableValueStr::wrap_Object(MutableValueStr(((t_MutableValueStr *) arg)->object.this$));
          }
          static PyObject *t_MutableValueStr_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, MutableValueStr::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_MutableValueStr_init_(t_MutableValueStr *self, PyObject *args, PyObject *kwds)
          {
            MutableValueStr object((jobject) NULL);

            INT_CALL(object = MutableValueStr());
            self->object = object;

            return 0;
          }

          static PyObject *t_MutableValueStr_compareSameType(t_MutableValueStr *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            jint result;

            if (!parseArgs(args, "o", &a0))
            {
              OBJ_CALL(result = self->object.compareSameType(a0));
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(MutableValueStr), (PyObject *) self, "compareSameType", args, 2);
          }

          static PyObject *t_MutableValueStr_copy(t_MutableValueStr *self, PyObject *args)
          {
            ::org::apache::lucene::util::mutable$::MutableValue a0((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::util::mutable$::MutableValue::initializeClass, &a0))
            {
              OBJ_CALL(self->object.copy(a0));
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(MutableValueStr), (PyObject *) self, "copy", args, 2);
          }

          static PyObject *t_MutableValueStr_duplicate(t_MutableValueStr *self, PyObject *args)
          {
            ::org::apache::lucene::util::mutable$::MutableValue result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.duplicate());
              return ::org::apache::lucene::util::mutable$::t_MutableValue::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(MutableValueStr), (PyObject *) self, "duplicate", args, 2);
          }

          static PyObject *t_MutableValueStr_equalsSameType(t_MutableValueStr *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            jboolean result;

            if (!parseArgs(args, "o", &a0))
            {
              OBJ_CALL(result = self->object.equalsSameType(a0));
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(MutableValueStr), (PyObject *) self, "equalsSameType", args, 2);
          }

          static PyObject *t_MutableValueStr_hashCode(t_MutableValueStr *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.hashCode());
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(MutableValueStr), (PyObject *) self, "hashCode", args, 2);
          }

          static PyObject *t_MutableValueStr_toObject(t_MutableValueStr *self, PyObject *args)
          {
            ::java::lang::Object result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toObject());
              return ::java::lang::t_Object::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(MutableValueStr), (PyObject *) self, "toObject", args, 2);
          }

          static PyObject *t_MutableValueStr_get__value(t_MutableValueStr *self, void *data)
          {
            ::org::apache::lucene::util::BytesRef value((jobject) NULL);
            OBJ_CALL(value = self->object._get_value());
            return ::org::apache::lucene::util::t_BytesRef::wrap_Object(value);
          }
          static int t_MutableValueStr_set__value(t_MutableValueStr *self, PyObject *arg, void *data)
          {
            ::org::apache::lucene::util::BytesRef value((jobject) NULL);
            if (!parseArg(arg, "k", ::org::apache::lucene::util::BytesRef::initializeClass, &value))
            {
              INT_CALL(self->object._set_value(value));
              return 0;
            }
            PyErr_SetArgsError((PyObject *) self, "value", arg);
            return -1;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/store/IndexOutput.h"
#include "java/io/Closeable.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {

        ::java::lang::Class *IndexOutput::class$ = NULL;
        jmethodID *IndexOutput::mids$ = NULL;
        bool IndexOutput::live$ = false;

        jclass IndexOutput::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/store/IndexOutput");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_close_54c6a166] = env->getMethodID(cls, "close", "()V");
            mids$[mid_flush_54c6a166] = env->getMethodID(cls, "flush", "()V");
            mids$[mid_getChecksum_54c6a17a] = env->getMethodID(cls, "getChecksum", "()J");
            mids$[mid_getFilePointer_54c6a17a] = env->getMethodID(cls, "getFilePointer", "()J");
            mids$[mid_length_54c6a17a] = env->getMethodID(cls, "length", "()J");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        IndexOutput::IndexOutput() : ::org::apache::lucene::store::DataOutput(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        void IndexOutput::close() const
        {
          env->callVoidMethod(this$, mids$[mid_close_54c6a166]);
        }

        void IndexOutput::flush() const
        {
          env->callVoidMethod(this$, mids$[mid_flush_54c6a166]);
        }

        jlong IndexOutput::getChecksum() const
        {
          return env->callLongMethod(this$, mids$[mid_getChecksum_54c6a17a]);
        }

        jlong IndexOutput::getFilePointer() const
        {
          return env->callLongMethod(this$, mids$[mid_getFilePointer_54c6a17a]);
        }

        jlong IndexOutput::length() const
        {
          return env->callLongMethod(this$, mids$[mid_length_54c6a17a]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {
        static PyObject *t_IndexOutput_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_IndexOutput_instance_(PyTypeObject *type, PyObject *arg);
        static int t_IndexOutput_init_(t_IndexOutput *self, PyObject *args, PyObject *kwds);
        static PyObject *t_IndexOutput_close(t_IndexOutput *self);
        static PyObject *t_IndexOutput_flush(t_IndexOutput *self);
        static PyObject *t_IndexOutput_getChecksum(t_IndexOutput *self);
        static PyObject *t_IndexOutput_getFilePointer(t_IndexOutput *self);
        static PyObject *t_IndexOutput_length(t_IndexOutput *self);
        static PyObject *t_IndexOutput_get__checksum(t_IndexOutput *self, void *data);
        static PyObject *t_IndexOutput_get__filePointer(t_IndexOutput *self, void *data);
        static PyGetSetDef t_IndexOutput__fields_[] = {
          DECLARE_GET_FIELD(t_IndexOutput, checksum),
          DECLARE_GET_FIELD(t_IndexOutput, filePointer),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_IndexOutput__methods_[] = {
          DECLARE_METHOD(t_IndexOutput, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_IndexOutput, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_IndexOutput, close, METH_NOARGS),
          DECLARE_METHOD(t_IndexOutput, flush, METH_NOARGS),
          DECLARE_METHOD(t_IndexOutput, getChecksum, METH_NOARGS),
          DECLARE_METHOD(t_IndexOutput, getFilePointer, METH_NOARGS),
          DECLARE_METHOD(t_IndexOutput, length, METH_NOARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(IndexOutput, t_IndexOutput, ::org::apache::lucene::store::DataOutput, IndexOutput, t_IndexOutput_init_, 0, 0, t_IndexOutput__fields_, 0, 0);

        void t_IndexOutput::install(PyObject *module)
        {
          installType(&PY_TYPE(IndexOutput), module, "IndexOutput", 0);
        }

        void t_IndexOutput::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(IndexOutput).tp_dict, "class_", make_descriptor(IndexOutput::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(IndexOutput).tp_dict, "wrapfn_", make_descriptor(t_IndexOutput::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(IndexOutput).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_IndexOutput_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, IndexOutput::initializeClass, 1)))
            return NULL;
          return t_IndexOutput::wrap_Object(IndexOutput(((t_IndexOutput *) arg)->object.this$));
        }
        static PyObject *t_IndexOutput_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, IndexOutput::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_IndexOutput_init_(t_IndexOutput *self, PyObject *args, PyObject *kwds)
        {
          IndexOutput object((jobject) NULL);

          INT_CALL(object = IndexOutput());
          self->object = object;

          return 0;
        }

        static PyObject *t_IndexOutput_close(t_IndexOutput *self)
        {
          OBJ_CALL(self->object.close());
          Py_RETURN_NONE;
        }

        static PyObject *t_IndexOutput_flush(t_IndexOutput *self)
        {
          OBJ_CALL(self->object.flush());
          Py_RETURN_NONE;
        }

        static PyObject *t_IndexOutput_getChecksum(t_IndexOutput *self)
        {
          jlong result;
          OBJ_CALL(result = self->object.getChecksum());
          return PyLong_FromLongLong((PY_LONG_LONG) result);
        }

        static PyObject *t_IndexOutput_getFilePointer(t_IndexOutput *self)
        {
          jlong result;
          OBJ_CALL(result = self->object.getFilePointer());
          return PyLong_FromLongLong((PY_LONG_LONG) result);
        }

        static PyObject *t_IndexOutput_length(t_IndexOutput *self)
        {
          jlong result;
          OBJ_CALL(result = self->object.length());
          return PyLong_FromLongLong((PY_LONG_LONG) result);
        }

        static PyObject *t_IndexOutput_get__checksum(t_IndexOutput *self, void *data)
        {
          jlong value;
          OBJ_CALL(value = self->object.getChecksum());
          return PyLong_FromLongLong((PY_LONG_LONG) value);
        }

        static PyObject *t_IndexOutput_get__filePointer(t_IndexOutput *self, void *data)
        {
          jlong value;
          OBJ_CALL(value = self->object.getFilePointer());
          return PyLong_FromLongLong((PY_LONG_LONG) value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/SegmentInfoWriter.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/store/IOContext.h"
#include "org/apache/lucene/store/Directory.h"
#include "org/apache/lucene/index/SegmentInfo.h"
#include "org/apache/lucene/index/FieldInfos.h"
#include "java/io/IOException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {

        ::java::lang::Class *SegmentInfoWriter::class$ = NULL;
        jmethodID *SegmentInfoWriter::mids$ = NULL;
        bool SegmentInfoWriter::live$ = false;

        jclass SegmentInfoWriter::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/SegmentInfoWriter");

            mids$ = new jmethodID[max_mid];
            mids$[mid_write_3589180f] = env->getMethodID(cls, "write", "(Lorg/apache/lucene/store/Directory;Lorg/apache/lucene/index/SegmentInfo;Lorg/apache/lucene/index/FieldInfos;Lorg/apache/lucene/store/IOContext;)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        void SegmentInfoWriter::write(const ::org::apache::lucene::store::Directory & a0, const ::org::apache::lucene::index::SegmentInfo & a1, const ::org::apache::lucene::index::FieldInfos & a2, const ::org::apache::lucene::store::IOContext & a3) const
        {
          env->callVoidMethod(this$, mids$[mid_write_3589180f], a0.this$, a1.this$, a2.this$, a3.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        static PyObject *t_SegmentInfoWriter_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_SegmentInfoWriter_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_SegmentInfoWriter_write(t_SegmentInfoWriter *self, PyObject *args);

        static PyMethodDef t_SegmentInfoWriter__methods_[] = {
          DECLARE_METHOD(t_SegmentInfoWriter, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SegmentInfoWriter, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SegmentInfoWriter, write, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(SegmentInfoWriter, t_SegmentInfoWriter, ::java::lang::Object, SegmentInfoWriter, abstract_init, 0, 0, 0, 0, 0);

        void t_SegmentInfoWriter::install(PyObject *module)
        {
          installType(&PY_TYPE(SegmentInfoWriter), module, "SegmentInfoWriter", 0);
        }

        void t_SegmentInfoWriter::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(SegmentInfoWriter).tp_dict, "class_", make_descriptor(SegmentInfoWriter::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(SegmentInfoWriter).tp_dict, "wrapfn_", make_descriptor(t_SegmentInfoWriter::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(SegmentInfoWriter).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_SegmentInfoWriter_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, SegmentInfoWriter::initializeClass, 1)))
            return NULL;
          return t_SegmentInfoWriter::wrap_Object(SegmentInfoWriter(((t_SegmentInfoWriter *) arg)->object.this$));
        }
        static PyObject *t_SegmentInfoWriter_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, SegmentInfoWriter::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_SegmentInfoWriter_write(t_SegmentInfoWriter *self, PyObject *args)
        {
          ::org::apache::lucene::store::Directory a0((jobject) NULL);
          ::org::apache::lucene::index::SegmentInfo a1((jobject) NULL);
          ::org::apache::lucene::index::FieldInfos a2((jobject) NULL);
          ::org::apache::lucene::store::IOContext a3((jobject) NULL);

          if (!parseArgs(args, "kkkk", ::org::apache::lucene::store::Directory::initializeClass, ::org::apache::lucene::index::SegmentInfo::initializeClass, ::org::apache::lucene::index::FieldInfos::initializeClass, ::org::apache::lucene::store::IOContext::initializeClass, &a0, &a1, &a2, &a3))
          {
            OBJ_CALL(self->object.write(a0, a1, a2, a3));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "write", args);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/perfield/PerFieldDocValuesFormat.h"
#include "org/apache/lucene/index/SegmentReadState.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "org/apache/lucene/index/SegmentWriteState.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/codecs/DocValuesProducer.h"
#include "org/apache/lucene/codecs/DocValuesConsumer.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace perfield {

          ::java::lang::Class *PerFieldDocValuesFormat::class$ = NULL;
          jmethodID *PerFieldDocValuesFormat::mids$ = NULL;
          bool PerFieldDocValuesFormat::live$ = false;
          ::java::lang::String *PerFieldDocValuesFormat::PER_FIELD_FORMAT_KEY = NULL;
          ::java::lang::String *PerFieldDocValuesFormat::PER_FIELD_NAME = NULL;
          ::java::lang::String *PerFieldDocValuesFormat::PER_FIELD_SUFFIX_KEY = NULL;

          jclass PerFieldDocValuesFormat::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/perfield/PerFieldDocValuesFormat");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_fieldsConsumer_025deb44] = env->getMethodID(cls, "fieldsConsumer", "(Lorg/apache/lucene/index/SegmentWriteState;)Lorg/apache/lucene/codecs/DocValuesConsumer;");
              mids$[mid_fieldsProducer_9b0d4e4a] = env->getMethodID(cls, "fieldsProducer", "(Lorg/apache/lucene/index/SegmentReadState;)Lorg/apache/lucene/codecs/DocValuesProducer;");
              mids$[mid_getDocValuesFormatForField_36ef78ba] = env->getMethodID(cls, "getDocValuesFormatForField", "(Ljava/lang/String;)Lorg/apache/lucene/codecs/DocValuesFormat;");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              PER_FIELD_FORMAT_KEY = new ::java::lang::String(env->getStaticObjectField(cls, "PER_FIELD_FORMAT_KEY", "Ljava/lang/String;"));
              PER_FIELD_NAME = new ::java::lang::String(env->getStaticObjectField(cls, "PER_FIELD_NAME", "Ljava/lang/String;"));
              PER_FIELD_SUFFIX_KEY = new ::java::lang::String(env->getStaticObjectField(cls, "PER_FIELD_SUFFIX_KEY", "Ljava/lang/String;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          PerFieldDocValuesFormat::PerFieldDocValuesFormat() : ::org::apache::lucene::codecs::DocValuesFormat(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          ::org::apache::lucene::codecs::DocValuesConsumer PerFieldDocValuesFormat::fieldsConsumer(const ::org::apache::lucene::index::SegmentWriteState & a0) const
          {
            return ::org::apache::lucene::codecs::DocValuesConsumer(env->callObjectMethod(this$, mids$[mid_fieldsConsumer_025deb44], a0.this$));
          }

          ::org::apache::lucene::codecs::DocValuesProducer PerFieldDocValuesFormat::fieldsProducer(const ::org::apache::lucene::index::SegmentReadState & a0) const
          {
            return ::org::apache::lucene::codecs::DocValuesProducer(env->callObjectMethod(this$, mids$[mid_fieldsProducer_9b0d4e4a], a0.this$));
          }

          ::org::apache::lucene::codecs::DocValuesFormat PerFieldDocValuesFormat::getDocValuesFormatForField(const ::java::lang::String & a0) const
          {
            return ::org::apache::lucene::codecs::DocValuesFormat(env->callObjectMethod(this$, mids$[mid_getDocValuesFormatForField_36ef78ba], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace perfield {
          static PyObject *t_PerFieldDocValuesFormat_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PerFieldDocValuesFormat_instance_(PyTypeObject *type, PyObject *arg);
          static int t_PerFieldDocValuesFormat_init_(t_PerFieldDocValuesFormat *self, PyObject *args, PyObject *kwds);
          static PyObject *t_PerFieldDocValuesFormat_fieldsConsumer(t_PerFieldDocValuesFormat *self, PyObject *args);
          static PyObject *t_PerFieldDocValuesFormat_fieldsProducer(t_PerFieldDocValuesFormat *self, PyObject *args);
          static PyObject *t_PerFieldDocValuesFormat_getDocValuesFormatForField(t_PerFieldDocValuesFormat *self, PyObject *arg);

          static PyMethodDef t_PerFieldDocValuesFormat__methods_[] = {
            DECLARE_METHOD(t_PerFieldDocValuesFormat, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PerFieldDocValuesFormat, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PerFieldDocValuesFormat, fieldsConsumer, METH_VARARGS),
            DECLARE_METHOD(t_PerFieldDocValuesFormat, fieldsProducer, METH_VARARGS),
            DECLARE_METHOD(t_PerFieldDocValuesFormat, getDocValuesFormatForField, METH_O),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(PerFieldDocValuesFormat, t_PerFieldDocValuesFormat, ::org::apache::lucene::codecs::DocValuesFormat, PerFieldDocValuesFormat, t_PerFieldDocValuesFormat_init_, 0, 0, 0, 0, 0);

          void t_PerFieldDocValuesFormat::install(PyObject *module)
          {
            installType(&PY_TYPE(PerFieldDocValuesFormat), module, "PerFieldDocValuesFormat", 0);
          }

          void t_PerFieldDocValuesFormat::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(PerFieldDocValuesFormat).tp_dict, "class_", make_descriptor(PerFieldDocValuesFormat::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(PerFieldDocValuesFormat).tp_dict, "wrapfn_", make_descriptor(t_PerFieldDocValuesFormat::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(PerFieldDocValuesFormat).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(PerFieldDocValuesFormat::initializeClass);
            PyDict_SetItemString(PY_TYPE(PerFieldDocValuesFormat).tp_dict, "PER_FIELD_FORMAT_KEY", make_descriptor(j2p(*PerFieldDocValuesFormat::PER_FIELD_FORMAT_KEY)));
            PyDict_SetItemString(PY_TYPE(PerFieldDocValuesFormat).tp_dict, "PER_FIELD_NAME", make_descriptor(j2p(*PerFieldDocValuesFormat::PER_FIELD_NAME)));
            PyDict_SetItemString(PY_TYPE(PerFieldDocValuesFormat).tp_dict, "PER_FIELD_SUFFIX_KEY", make_descriptor(j2p(*PerFieldDocValuesFormat::PER_FIELD_SUFFIX_KEY)));
          }

          static PyObject *t_PerFieldDocValuesFormat_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, PerFieldDocValuesFormat::initializeClass, 1)))
              return NULL;
            return t_PerFieldDocValuesFormat::wrap_Object(PerFieldDocValuesFormat(((t_PerFieldDocValuesFormat *) arg)->object.this$));
          }
          static PyObject *t_PerFieldDocValuesFormat_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, PerFieldDocValuesFormat::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_PerFieldDocValuesFormat_init_(t_PerFieldDocValuesFormat *self, PyObject *args, PyObject *kwds)
          {
            PerFieldDocValuesFormat object((jobject) NULL);

            INT_CALL(object = PerFieldDocValuesFormat());
            self->object = object;

            return 0;
          }

          static PyObject *t_PerFieldDocValuesFormat_fieldsConsumer(t_PerFieldDocValuesFormat *self, PyObject *args)
          {
            ::org::apache::lucene::index::SegmentWriteState a0((jobject) NULL);
            ::org::apache::lucene::codecs::DocValuesConsumer result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::index::SegmentWriteState::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.fieldsConsumer(a0));
              return ::org::apache::lucene::codecs::t_DocValuesConsumer::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(PerFieldDocValuesFormat), (PyObject *) self, "fieldsConsumer", args, 2);
          }

          static PyObject *t_PerFieldDocValuesFormat_fieldsProducer(t_PerFieldDocValuesFormat *self, PyObject *args)
          {
            ::org::apache::lucene::index::SegmentReadState a0((jobject) NULL);
            ::org::apache::lucene::codecs::DocValuesProducer result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::index::SegmentReadState::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.fieldsProducer(a0));
              return ::org::apache::lucene::codecs::t_DocValuesProducer::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(PerFieldDocValuesFormat), (PyObject *) self, "fieldsProducer", args, 2);
          }

          static PyObject *t_PerFieldDocValuesFormat_getDocValuesFormatForField(t_PerFieldDocValuesFormat *self, PyObject *arg)
          {
            ::java::lang::String a0((jobject) NULL);
            ::org::apache::lucene::codecs::DocValuesFormat result((jobject) NULL);

            if (!parseArg(arg, "s", &a0))
            {
              OBJ_CALL(result = self->object.getDocValuesFormatForField(a0));
              return ::org::apache::lucene::codecs::t_DocValuesFormat::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "getDocValuesFormatForField", arg);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/compound/HyphenationCompoundWordTokenFilterFactory.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "java/io/IOException.h"
#include "java/util/Map.h"
#include "org/apache/lucene/analysis/compound/HyphenationCompoundWordTokenFilter.h"
#include "java/lang/String.h"
#include "org/apache/lucene/analysis/util/ResourceLoader.h"
#include "org/apache/lucene/analysis/util/ResourceLoaderAware.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace compound {

          ::java::lang::Class *HyphenationCompoundWordTokenFilterFactory::class$ = NULL;
          jmethodID *HyphenationCompoundWordTokenFilterFactory::mids$ = NULL;
          bool HyphenationCompoundWordTokenFilterFactory::live$ = false;

          jclass HyphenationCompoundWordTokenFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/compound/HyphenationCompoundWordTokenFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4c9e2b1c] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_bdbb32a7] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/compound/HyphenationCompoundWordTokenFilter;");
              mids$[mid_inform_d6a4bc97] = env->getMethodID(cls, "inform", "(Lorg/apache/lucene/analysis/util/ResourceLoader;)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          HyphenationCompoundWordTokenFilterFactory::HyphenationCompoundWordTokenFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_4c9e2b1c, a0.this$)) {}

          ::org::apache::lucene::analysis::compound::HyphenationCompoundWordTokenFilter HyphenationCompoundWordTokenFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::compound::HyphenationCompoundWordTokenFilter(env->callObjectMethod(this$, mids$[mid_create_bdbb32a7], a0.this$));
          }

          void HyphenationCompoundWordTokenFilterFactory::inform(const ::org::apache::lucene::analysis::util::ResourceLoader & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_inform_d6a4bc97], a0.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace compound {
          static PyObject *t_HyphenationCompoundWordTokenFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_HyphenationCompoundWordTokenFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_HyphenationCompoundWordTokenFilterFactory_init_(t_HyphenationCompoundWordTokenFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_HyphenationCompoundWordTokenFilterFactory_create(t_HyphenationCompoundWordTokenFilterFactory *self, PyObject *args);
          static PyObject *t_HyphenationCompoundWordTokenFilterFactory_inform(t_HyphenationCompoundWordTokenFilterFactory *self, PyObject *arg);

          static PyMethodDef t_HyphenationCompoundWordTokenFilterFactory__methods_[] = {
            DECLARE_METHOD(t_HyphenationCompoundWordTokenFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_HyphenationCompoundWordTokenFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_HyphenationCompoundWordTokenFilterFactory, create, METH_VARARGS),
            DECLARE_METHOD(t_HyphenationCompoundWordTokenFilterFactory, inform, METH_O),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(HyphenationCompoundWordTokenFilterFactory, t_HyphenationCompoundWordTokenFilterFactory, ::org::apache::lucene::analysis::util::TokenFilterFactory, HyphenationCompoundWordTokenFilterFactory, t_HyphenationCompoundWordTokenFilterFactory_init_, 0, 0, 0, 0, 0);

          void t_HyphenationCompoundWordTokenFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(HyphenationCompoundWordTokenFilterFactory), module, "HyphenationCompoundWordTokenFilterFactory", 0);
          }

          void t_HyphenationCompoundWordTokenFilterFactory::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(HyphenationCompoundWordTokenFilterFactory).tp_dict, "class_", make_descriptor(HyphenationCompoundWordTokenFilterFactory::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(HyphenationCompoundWordTokenFilterFactory).tp_dict, "wrapfn_", make_descriptor(t_HyphenationCompoundWordTokenFilterFactory::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(HyphenationCompoundWordTokenFilterFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_HyphenationCompoundWordTokenFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, HyphenationCompoundWordTokenFilterFactory::initializeClass, 1)))
              return NULL;
            return t_HyphenationCompoundWordTokenFilterFactory::wrap_Object(HyphenationCompoundWordTokenFilterFactory(((t_HyphenationCompoundWordTokenFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_HyphenationCompoundWordTokenFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, HyphenationCompoundWordTokenFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_HyphenationCompoundWordTokenFilterFactory_init_(t_HyphenationCompoundWordTokenFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            HyphenationCompoundWordTokenFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = HyphenationCompoundWordTokenFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_HyphenationCompoundWordTokenFilterFactory_create(t_HyphenationCompoundWordTokenFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::compound::HyphenationCompoundWordTokenFilter result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::compound::t_HyphenationCompoundWordTokenFilter::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(HyphenationCompoundWordTokenFilterFactory), (PyObject *) self, "create", args, 2);
          }

          static PyObject *t_HyphenationCompoundWordTokenFilterFactory_inform(t_HyphenationCompoundWordTokenFilterFactory *self, PyObject *arg)
          {
            ::org::apache::lucene::analysis::util::ResourceLoader a0((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::analysis::util::ResourceLoader::initializeClass, &a0))
            {
              OBJ_CALL(self->object.inform(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "inform", arg);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/expressions/SimpleBindings.h"
#include "org/apache/lucene/expressions/Expression.h"
#include "org/apache/lucene/queries/function/ValueSource.h"
#include "java/lang/String.h"
#include "org/apache/lucene/search/SortField.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace expressions {

        ::java::lang::Class *SimpleBindings::class$ = NULL;
        jmethodID *SimpleBindings::mids$ = NULL;
        bool SimpleBindings::live$ = false;

        jclass SimpleBindings::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/expressions/SimpleBindings");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_add_3578f7bf] = env->getMethodID(cls, "add", "(Lorg/apache/lucene/search/SortField;)V");
            mids$[mid_add_bca05986] = env->getMethodID(cls, "add", "(Ljava/lang/String;Lorg/apache/lucene/expressions/Expression;)V");
            mids$[mid_getValueSource_3afe260d] = env->getMethodID(cls, "getValueSource", "(Ljava/lang/String;)Lorg/apache/lucene/queries/function/ValueSource;");
            mids$[mid_validate_54c6a166] = env->getMethodID(cls, "validate", "()V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        SimpleBindings::SimpleBindings() : ::org::apache::lucene::expressions::Bindings(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        void SimpleBindings::add(const ::org::apache::lucene::search::SortField & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_add_3578f7bf], a0.this$);
        }

        void SimpleBindings::add(const ::java::lang::String & a0, const ::org::apache::lucene::expressions::Expression & a1) const
        {
          env->callVoidMethod(this$, mids$[mid_add_bca05986], a0.this$, a1.this$);
        }

        ::org::apache::lucene::queries::function::ValueSource SimpleBindings::getValueSource(const ::java::lang::String & a0) const
        {
          return ::org::apache::lucene::queries::function::ValueSource(env->callObjectMethod(this$, mids$[mid_getValueSource_3afe260d], a0.this$));
        }

        void SimpleBindings::validate() const
        {
          env->callVoidMethod(this$, mids$[mid_validate_54c6a166]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace expressions {
        static PyObject *t_SimpleBindings_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_SimpleBindings_instance_(PyTypeObject *type, PyObject *arg);
        static int t_SimpleBindings_init_(t_SimpleBindings *self, PyObject *args, PyObject *kwds);
        static PyObject *t_SimpleBindings_add(t_SimpleBindings *self, PyObject *args);
        static PyObject *t_SimpleBindings_getValueSource(t_SimpleBindings *self, PyObject *args);
        static PyObject *t_SimpleBindings_validate(t_SimpleBindings *self);

        static PyMethodDef t_SimpleBindings__methods_[] = {
          DECLARE_METHOD(t_SimpleBindings, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SimpleBindings, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SimpleBindings, add, METH_VARARGS),
          DECLARE_METHOD(t_SimpleBindings, getValueSource, METH_VARARGS),
          DECLARE_METHOD(t_SimpleBindings, validate, METH_NOARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(SimpleBindings, t_SimpleBindings, ::org::apache::lucene::expressions::Bindings, SimpleBindings, t_SimpleBindings_init_, 0, 0, 0, 0, 0);

        void t_SimpleBindings::install(PyObject *module)
        {
          installType(&PY_TYPE(SimpleBindings), module, "SimpleBindings", 0);
        }

        void t_SimpleBindings::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(SimpleBindings).tp_dict, "class_", make_descriptor(SimpleBindings::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(SimpleBindings).tp_dict, "wrapfn_", make_descriptor(t_SimpleBindings::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(SimpleBindings).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_SimpleBindings_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, SimpleBindings::initializeClass, 1)))
            return NULL;
          return t_SimpleBindings::wrap_Object(SimpleBindings(((t_SimpleBindings *) arg)->object.this$));
        }
        static PyObject *t_SimpleBindings_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, SimpleBindings::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_SimpleBindings_init_(t_SimpleBindings *self, PyObject *args, PyObject *kwds)
        {
          SimpleBindings object((jobject) NULL);

          INT_CALL(object = SimpleBindings());
          self->object = object;

          return 0;
        }

        static PyObject *t_SimpleBindings_add(t_SimpleBindings *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              ::org::apache::lucene::search::SortField a0((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::search::SortField::initializeClass, &a0))
              {
                OBJ_CALL(self->object.add(a0));
                Py_RETURN_NONE;
              }
            }
            break;
           case 2:
            {
              ::java::lang::String a0((jobject) NULL);
              ::org::apache::lucene::expressions::Expression a1((jobject) NULL);

              if (!parseArgs(args, "sk", ::org::apache::lucene::expressions::Expression::initializeClass, &a0, &a1))
              {
                OBJ_CALL(self->object.add(a0, a1));
                Py_RETURN_NONE;
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "add", args);
          return NULL;
        }

        static PyObject *t_SimpleBindings_getValueSource(t_SimpleBindings *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::queries::function::ValueSource result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = self->object.getValueSource(a0));
            return ::org::apache::lucene::queries::function::t_ValueSource::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(SimpleBindings), (PyObject *) self, "getValueSource", args, 2);
        }

        static PyObject *t_SimpleBindings_validate(t_SimpleBindings *self)
        {
          OBJ_CALL(self->object.validate());
          Py_RETURN_NONE;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/TermContext.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/index/IndexReaderContext.h"
#include "org/apache/lucene/index/Term.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/index/TermState.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *TermContext::class$ = NULL;
        jmethodID *TermContext::mids$ = NULL;
        jfieldID *TermContext::fids$ = NULL;
        bool TermContext::live$ = false;

        jclass TermContext::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/TermContext");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_4df5686b] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/IndexReaderContext;)V");
            mids$[mid_init$_5a9a23d9] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/IndexReaderContext;Lorg/apache/lucene/index/TermState;IIJ)V");
            mids$[mid_build_9d3a5124] = env->getStaticMethodID(cls, "build", "(Lorg/apache/lucene/index/IndexReaderContext;Lorg/apache/lucene/index/Term;)Lorg/apache/lucene/index/TermContext;");
            mids$[mid_clear_54c6a166] = env->getMethodID(cls, "clear", "()V");
            mids$[mid_docFreq_54c6a179] = env->getMethodID(cls, "docFreq", "()I");
            mids$[mid_get_17d8f64c] = env->getMethodID(cls, "get", "(I)Lorg/apache/lucene/index/TermState;");
            mids$[mid_register_edacd7f4] = env->getMethodID(cls, "register", "(Lorg/apache/lucene/index/TermState;IIJ)V");
            mids$[mid_setDocFreq_39c7bd3c] = env->getMethodID(cls, "setDocFreq", "(I)V");
            mids$[mid_totalTermFreq_54c6a17a] = env->getMethodID(cls, "totalTermFreq", "()J");

            fids$ = new jfieldID[max_fid];
            fids$[fid_topReaderContext] = env->getFieldID(cls, "topReaderContext", "Lorg/apache/lucene/index/IndexReaderContext;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        TermContext::TermContext(const ::org::apache::lucene::index::IndexReaderContext & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_4df5686b, a0.this$)) {}

        TermContext::TermContext(const ::org::apache::lucene::index::IndexReaderContext & a0, const ::org::apache::lucene::index::TermState & a1, jint a2, jint a3, jlong a4) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_5a9a23d9, a0.this$, a1.this$, a2, a3, a4)) {}

        TermContext TermContext::build(const ::org::apache::lucene::index::IndexReaderContext & a0, const ::org::apache::lucene::index::Term & a1)
        {
          jclass cls = env->getClass(initializeClass);
          return TermContext(env->callStaticObjectMethod(cls, mids$[mid_build_9d3a5124], a0.this$, a1.this$));
        }

        void TermContext::clear() const
        {
          env->callVoidMethod(this$, mids$[mid_clear_54c6a166]);
        }

        jint TermContext::docFreq() const
        {
          return env->callIntMethod(this$, mids$[mid_docFreq_54c6a179]);
        }

        ::org::apache::lucene::index::TermState TermContext::get(jint a0) const
        {
          return ::org::apache::lucene::index::TermState(env->callObjectMethod(this$, mids$[mid_get_17d8f64c], a0));
        }

        void TermContext::register$(const ::org::apache::lucene::index::TermState & a0, jint a1, jint a2, jlong a3) const
        {
          env->callVoidMethod(this$, mids$[mid_register_edacd7f4], a0.this$, a1, a2, a3);
        }

        void TermContext::setDocFreq(jint a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setDocFreq_39c7bd3c], a0);
        }

        jlong TermContext::totalTermFreq() const
        {
          return env->callLongMethod(this$, mids$[mid_totalTermFreq_54c6a17a]);
        }

        ::org::apache::lucene::index::IndexReaderContext TermContext::_get_topReaderContext() const
        {
          return ::org::apache::lucene::index::IndexReaderContext(env->getObjectField(this$, fids$[fid_topReaderContext]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_TermContext_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_TermContext_instance_(PyTypeObject *type, PyObject *arg);
        static int t_TermContext_init_(t_TermContext *self, PyObject *args, PyObject *kwds);
        static PyObject *t_TermContext_build(PyTypeObject *type, PyObject *args);
        static PyObject *t_TermContext_clear(t_TermContext *self);
        static PyObject *t_TermContext_docFreq(t_TermContext *self);
        static PyObject *t_TermContext_get(t_TermContext *self, PyObject *arg);
        static PyObject *t_TermContext_register(t_TermContext *self, PyObject *args);
        static PyObject *t_TermContext_setDocFreq(t_TermContext *self, PyObject *arg);
        static PyObject *t_TermContext_totalTermFreq(t_TermContext *self);
        static PyObject *t_TermContext_get__topReaderContext(t_TermContext *self, void *data);

        static PyGetSetDef t_TermContext__fields_[] = {
          DECLARE_GET_FIELD(t_TermContext, topReaderContext),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_TermContext__methods_[] = {
          DECLARE_METHOD(t_TermContext, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_TermContext, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_TermContext, build, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_TermContext, clear, METH_NOARGS),
          DECLARE_METHOD(t_TermContext, docFreq, METH_NOARGS),
          DECLARE_METHOD(t_TermContext, get, METH_O),
          DECLARE_METHOD(t_TermContext, register, METH_VARARGS),
          DECLARE_METHOD(t_TermContext, setDocFreq, METH_O),
          DECLARE_METHOD(t_TermContext, totalTermFreq, METH_NOARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(TermContext, t_TermContext, ::java::lang::Object, TermContext, t_TermContext_init_, 0, 0, t_TermContext__fields_, 0, 0);

        void t_TermContext::install(PyObject *module)
        {
          installType(&PY_TYPE(TermContext), module, "TermContext", 0);
        }

        void t_TermContext::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(TermContext).tp_dict, "class_", make_descriptor(TermContext::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(TermContext).tp_dict, "wrapfn_", make_descriptor(t_TermContext::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(TermContext).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_TermContext_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, TermContext::initializeClass, 1)))
            return NULL;
          return t_TermContext::wrap_Object(TermContext(((t_TermContext *) arg)->object.this$));
        }
        static PyObject *t_TermContext_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, TermContext::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_TermContext_init_(t_TermContext *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              ::org::apache::lucene::index::IndexReaderContext a0((jobject) NULL);
              TermContext object((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::index::IndexReaderContext::initializeClass, &a0))
              {
                INT_CALL(object = TermContext(a0));
                self->object = object;
                break;
              }
            }
            goto err;
           case 5:
            {
              ::org::apache::lucene::index::IndexReaderContext a0((jobject) NULL);
              ::org::apache::lucene::index::TermState a1((jobject) NULL);
              jint a2;
              jint a3;
              jlong a4;
              TermContext object((jobject) NULL);

              if (!parseArgs(args, "kkIIJ", ::org::apache::lucene::index::IndexReaderContext::initializeClass, ::org::apache::lucene::index::TermState::initializeClass, &a0, &a1, &a2, &a3, &a4))
              {
                INT_CALL(object = TermContext(a0, a1, a2, a3, a4));
                self->object = object;
                break;
              }
            }
           default:
           err:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_TermContext_build(PyTypeObject *type, PyObject *args)
        {
          ::org::apache::lucene::index::IndexReaderContext a0((jobject) NULL);
          ::org::apache::lucene::index::Term a1((jobject) NULL);
          TermContext result((jobject) NULL);

          if (!parseArgs(args, "kk", ::org::apache::lucene::index::IndexReaderContext::initializeClass, ::org::apache::lucene::index::Term::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = ::org::apache::lucene::index::TermContext::build(a0, a1));
            return t_TermContext::wrap_Object(result);
          }

          PyErr_SetArgsError(type, "build", args);
          return NULL;
        }

        static PyObject *t_TermContext_clear(t_TermContext *self)
        {
          OBJ_CALL(self->object.clear());
          Py_RETURN_NONE;
        }

        static PyObject *t_TermContext_docFreq(t_TermContext *self)
        {
          jint result;
          OBJ_CALL(result = self->object.docFreq());
          return PyInt_FromLong((long) result);
        }

        static PyObject *t_TermContext_get(t_TermContext *self, PyObject *arg)
        {
          jint a0;
          ::org::apache::lucene::index::TermState result((jobject) NULL);

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(result = self->object.get(a0));
            return ::org::apache::lucene::index::t_TermState::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "get", arg);
          return NULL;
        }

        static PyObject *t_TermContext_register(t_TermContext *self, PyObject *args)
        {
          ::org::apache::lucene::index::TermState a0((jobject) NULL);
          jint a1;
          jint a2;
          jlong a3;

          if (!parseArgs(args, "kIIJ", ::org::apache::lucene::index::TermState::initializeClass, &a0, &a1, &a2, &a3))
          {
            OBJ_CALL(self->object.register$(a0, a1, a2, a3));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "register", args);
          return NULL;
        }

        static PyObject *t_TermContext_setDocFreq(t_TermContext *self, PyObject *arg)
        {
          jint a0;

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(self->object.setDocFreq(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setDocFreq", arg);
          return NULL;
        }

        static PyObject *t_TermContext_totalTermFreq(t_TermContext *self)
        {
          jlong result;
          OBJ_CALL(result = self->object.totalTermFreq());
          return PyLong_FromLongLong((PY_LONG_LONG) result);
        }

        static PyObject *t_TermContext_get__topReaderContext(t_TermContext *self, void *data)
        {
          ::org::apache::lucene::index::IndexReaderContext value((jobject) NULL);
          OBJ_CALL(value = self->object._get_topReaderContext());
          return ::org::apache::lucene::index::t_IndexReaderContext::wrap_Object(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/compound/DictionaryCompoundWordTokenFilter.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "org/apache/lucene/util/Version.h"
#include "org/apache/lucene/analysis/util/CharArraySet.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace compound {

          ::java::lang::Class *DictionaryCompoundWordTokenFilter::class$ = NULL;
          jmethodID *DictionaryCompoundWordTokenFilter::mids$ = NULL;
          bool DictionaryCompoundWordTokenFilter::live$ = false;

          jclass DictionaryCompoundWordTokenFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/compound/DictionaryCompoundWordTokenFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_e67dd59e] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/analysis/TokenStream;Lorg/apache/lucene/analysis/util/CharArraySet;)V");
              mids$[mid_init$_42fe450d] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/analysis/TokenStream;Lorg/apache/lucene/analysis/util/CharArraySet;IIIZ)V");
              mids$[mid_decompose_54c6a166] = env->getMethodID(cls, "decompose", "()V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          DictionaryCompoundWordTokenFilter::DictionaryCompoundWordTokenFilter(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::analysis::TokenStream & a1, const ::org::apache::lucene::analysis::util::CharArraySet & a2) : ::org::apache::lucene::analysis::compound::CompoundWordTokenFilterBase(env->newObject(initializeClass, &mids$, mid_init$_e67dd59e, a0.this$, a1.this$, a2.this$)) {}

          DictionaryCompoundWordTokenFilter::DictionaryCompoundWordTokenFilter(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::analysis::TokenStream & a1, const ::org::apache::lucene::analysis::util::CharArraySet & a2, jint a3, jint a4, jint a5, jboolean a6) : ::org::apache::lucene::analysis::compound::CompoundWordTokenFilterBase(env->newObject(initializeClass, &mids$, mid_init$_42fe450d, a0.this$, a1.this$, a2.this$, a3, a4, a5, a6)) {}
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace compound {
          static PyObject *t_DictionaryCompoundWordTokenFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_DictionaryCompoundWordTokenFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_DictionaryCompoundWordTokenFilter_init_(t_DictionaryCompoundWordTokenFilter *self, PyObject *args, PyObject *kwds);

          static PyMethodDef t_DictionaryCompoundWordTokenFilter__methods_[] = {
            DECLARE_METHOD(t_DictionaryCompoundWordTokenFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_DictionaryCompoundWordTokenFilter, instance_, METH_O | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(DictionaryCompoundWordTokenFilter, t_DictionaryCompoundWordTokenFilter, ::org::apache::lucene::analysis::compound::CompoundWordTokenFilterBase, DictionaryCompoundWordTokenFilter, t_DictionaryCompoundWordTokenFilter_init_, 0, 0, 0, 0, 0);

          void t_DictionaryCompoundWordTokenFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(DictionaryCompoundWordTokenFilter), module, "DictionaryCompoundWordTokenFilter", 0);
          }

          void t_DictionaryCompoundWordTokenFilter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(DictionaryCompoundWordTokenFilter).tp_dict, "class_", make_descriptor(DictionaryCompoundWordTokenFilter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(DictionaryCompoundWordTokenFilter).tp_dict, "wrapfn_", make_descriptor(t_DictionaryCompoundWordTokenFilter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(DictionaryCompoundWordTokenFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_DictionaryCompoundWordTokenFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, DictionaryCompoundWordTokenFilter::initializeClass, 1)))
              return NULL;
            return t_DictionaryCompoundWordTokenFilter::wrap_Object(DictionaryCompoundWordTokenFilter(((t_DictionaryCompoundWordTokenFilter *) arg)->object.this$));
          }
          static PyObject *t_DictionaryCompoundWordTokenFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, DictionaryCompoundWordTokenFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_DictionaryCompoundWordTokenFilter_init_(t_DictionaryCompoundWordTokenFilter *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 3:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                ::org::apache::lucene::analysis::TokenStream a1((jobject) NULL);
                ::org::apache::lucene::analysis::util::CharArraySet a2((jobject) NULL);
                PyTypeObject **p2;
                DictionaryCompoundWordTokenFilter object((jobject) NULL);

                if (!parseArgs(args, "KkK", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::TokenStream::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1, &a2, &p2, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_))
                {
                  INT_CALL(object = DictionaryCompoundWordTokenFilter(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 7:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                ::org::apache::lucene::analysis::TokenStream a1((jobject) NULL);
                ::org::apache::lucene::analysis::util::CharArraySet a2((jobject) NULL);
                PyTypeObject **p2;
                jint a3;
                jint a4;
                jint a5;
                jboolean a6;
                DictionaryCompoundWordTokenFilter object((jobject) NULL);

                if (!parseArgs(args, "KkKIIIZ", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::TokenStream::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1, &a2, &p2, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_, &a3, &a4, &a5, &a6))
                {
                  INT_CALL(object = DictionaryCompoundWordTokenFilter(a0, a1, a2, a3, a4, a5, a6));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/pattern/PatternTokenizerFactory.h"
#include "org/apache/lucene/util/AttributeFactory.h"
#include "java/lang/Class.h"
#include "java/util/Map.h"
#include "java/io/Reader.h"
#include "java/lang/String.h"
#include "org/apache/lucene/analysis/pattern/PatternTokenizer.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace pattern {

          ::java::lang::Class *PatternTokenizerFactory::class$ = NULL;
          jmethodID *PatternTokenizerFactory::mids$ = NULL;
          bool PatternTokenizerFactory::live$ = false;
          ::java::lang::String *PatternTokenizerFactory::GROUP = NULL;
          ::java::lang::String *PatternTokenizerFactory::PATTERN = NULL;

          jclass PatternTokenizerFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/pattern/PatternTokenizerFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4c9e2b1c] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_79576cd1] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/util/AttributeFactory;Ljava/io/Reader;)Lorg/apache/lucene/analysis/pattern/PatternTokenizer;");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              GROUP = new ::java::lang::String(env->getStaticObjectField(cls, "GROUP", "Ljava/lang/String;"));
              PATTERN = new ::java::lang::String(env->getStaticObjectField(cls, "PATTERN", "Ljava/lang/String;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          PatternTokenizerFactory::PatternTokenizerFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenizerFactory(env->newObject(initializeClass, &mids$, mid_init$_4c9e2b1c, a0.this$)) {}

          ::org::apache::lucene::analysis::pattern::PatternTokenizer PatternTokenizerFactory::create(const ::org::apache::lucene::util::AttributeFactory & a0, const ::java::io::Reader & a1) const
          {
            return ::org::apache::lucene::analysis::pattern::PatternTokenizer(env->callObjectMethod(this$, mids$[mid_create_79576cd1], a0.this$, a1.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace pattern {
          static PyObject *t_PatternTokenizerFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PatternTokenizerFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_PatternTokenizerFactory_init_(t_PatternTokenizerFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_PatternTokenizerFactory_create(t_PatternTokenizerFactory *self, PyObject *args);

          static PyMethodDef t_PatternTokenizerFactory__methods_[] = {
            DECLARE_METHOD(t_PatternTokenizerFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PatternTokenizerFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PatternTokenizerFactory, create, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(PatternTokenizerFactory, t_PatternTokenizerFactory, ::org::apache::lucene::analysis::util::TokenizerFactory, PatternTokenizerFactory, t_PatternTokenizerFactory_init_, 0, 0, 0, 0, 0);

          void t_PatternTokenizerFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(PatternTokenizerFactory), module, "PatternTokenizerFactory", 0);
          }

          void t_PatternTokenizerFactory::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(PatternTokenizerFactory).tp_dict, "class_", make_descriptor(PatternTokenizerFactory::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(PatternTokenizerFactory).tp_dict, "wrapfn_", make_descriptor(t_PatternTokenizerFactory::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(PatternTokenizerFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(PatternTokenizerFactory::initializeClass);
            PyDict_SetItemString(PY_TYPE(PatternTokenizerFactory).tp_dict, "GROUP", make_descriptor(j2p(*PatternTokenizerFactory::GROUP)));
            PyDict_SetItemString(PY_TYPE(PatternTokenizerFactory).tp_dict, "PATTERN", make_descriptor(j2p(*PatternTokenizerFactory::PATTERN)));
          }

          static PyObject *t_PatternTokenizerFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, PatternTokenizerFactory::initializeClass, 1)))
              return NULL;
            return t_PatternTokenizerFactory::wrap_Object(PatternTokenizerFactory(((t_PatternTokenizerFactory *) arg)->object.this$));
          }
          static PyObject *t_PatternTokenizerFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, PatternTokenizerFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_PatternTokenizerFactory_init_(t_PatternTokenizerFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            PatternTokenizerFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = PatternTokenizerFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_PatternTokenizerFactory_create(t_PatternTokenizerFactory *self, PyObject *args)
          {
            ::org::apache::lucene::util::AttributeFactory a0((jobject) NULL);
            ::java::io::Reader a1((jobject) NULL);
            ::org::apache::lucene::analysis::pattern::PatternTokenizer result((jobject) NULL);

            if (!parseArgs(args, "kk", ::org::apache::lucene::util::AttributeFactory::initializeClass, ::java::io::Reader::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.create(a0, a1));
              return ::org::apache::lucene::analysis::pattern::t_PatternTokenizer::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(PatternTokenizerFactory), (PyObject *) self, "create", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/TopFieldDocs.h"
#include "org/apache/lucene/search/SortField.h"
#include "org/apache/lucene/search/ScoreDoc.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *TopFieldDocs::class$ = NULL;
        jmethodID *TopFieldDocs::mids$ = NULL;
        jfieldID *TopFieldDocs::fids$ = NULL;
        bool TopFieldDocs::live$ = false;

        jclass TopFieldDocs::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/TopFieldDocs");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_e6001f02] = env->getMethodID(cls, "<init>", "(I[Lorg/apache/lucene/search/ScoreDoc;[Lorg/apache/lucene/search/SortField;F)V");

            fids$ = new jfieldID[max_fid];
            fids$[fid_fields] = env->getFieldID(cls, "fields", "[Lorg/apache/lucene/search/SortField;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        TopFieldDocs::TopFieldDocs(jint a0, const JArray< ::org::apache::lucene::search::ScoreDoc > & a1, const JArray< ::org::apache::lucene::search::SortField > & a2, jfloat a3) : ::org::apache::lucene::search::TopDocs(env->newObject(initializeClass, &mids$, mid_init$_e6001f02, a0, a1.this$, a2.this$, a3)) {}

        JArray< ::org::apache::lucene::search::SortField > TopFieldDocs::_get_fields() const
        {
          return JArray< ::org::apache::lucene::search::SortField >(env->getObjectField(this$, fids$[fid_fields]));
        }

        void TopFieldDocs::_set_fields(const JArray< ::org::apache::lucene::search::SortField > & a0) const
        {
          env->setObjectField(this$, fids$[fid_fields], a0.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_TopFieldDocs_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_TopFieldDocs_instance_(PyTypeObject *type, PyObject *arg);
        static int t_TopFieldDocs_init_(t_TopFieldDocs *self, PyObject *args, PyObject *kwds);
        static PyObject *t_TopFieldDocs_get__fields(t_TopFieldDocs *self, void *data);
        static int t_TopFieldDocs_set__fields(t_TopFieldDocs *self, PyObject *arg, void *data);

        static PyGetSetDef t_TopFieldDocs__fields_[] = {
          DECLARE_GETSET_FIELD(t_TopFieldDocs, fields),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_TopFieldDocs__methods_[] = {
          DECLARE_METHOD(t_TopFieldDocs, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_TopFieldDocs, instance_, METH_O | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(TopFieldDocs, t_TopFieldDocs, ::org::apache::lucene::search::TopDocs, TopFieldDocs, t_TopFieldDocs_init_, 0, 0, t_TopFieldDocs__fields_, 0, 0);

        void t_TopFieldDocs::install(PyObject *module)
        {
          installType(&PY_TYPE(TopFieldDocs), module, "TopFieldDocs", 0);
        }

        void t_TopFieldDocs::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(TopFieldDocs).tp_dict, "class_", make_descriptor(TopFieldDocs::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(TopFieldDocs).tp_dict, "wrapfn_", make_descriptor(t_TopFieldDocs::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(TopFieldDocs).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_TopFieldDocs_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, TopFieldDocs::initializeClass, 1)))
            return NULL;
          return t_TopFieldDocs::wrap_Object(TopFieldDocs(((t_TopFieldDocs *) arg)->object.this$));
        }
        static PyObject *t_TopFieldDocs_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, TopFieldDocs::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_TopFieldDocs_init_(t_TopFieldDocs *self, PyObject *args, PyObject *kwds)
        {
          jint a0;
          JArray< ::org::apache::lucene::search::ScoreDoc > a1((jobject) NULL);
          JArray< ::org::apache::lucene::search::SortField > a2((jobject) NULL);
          jfloat a3;
          TopFieldDocs object((jobject) NULL);

          if (!parseArgs(args, "I[k[kF", ::org::apache::lucene::search::ScoreDoc::initializeClass, ::org::apache::lucene::search::SortField::initializeClass, &a0, &a1, &a2, &a3))
          {
            INT_CALL(object = TopFieldDocs(a0, a1, a2, a3));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_TopFieldDocs_get__fields(t_TopFieldDocs *self, void *data)
        {
          JArray< ::org::apache::lucene::search::SortField > value((jobject) NULL);
          OBJ_CALL(value = self->object._get_fields());
          return JArray<jobject>(value.this$).wrap(::org::apache::lucene::search::t_SortField::wrap_jobject);
        }
        static int t_TopFieldDocs_set__fields(t_TopFieldDocs *self, PyObject *arg, void *data)
        {
          JArray< ::org::apache::lucene::search::SortField > value((jobject) NULL);
          if (!parseArg(arg, "[k", ::org::apache::lucene::search::SortField::initializeClass, &value))
          {
            INT_CALL(self->object._set_fields(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "fields", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/expressions/js/JavascriptParser$conditional_return.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace expressions {
        namespace js {

          ::java::lang::Class *JavascriptParser$conditional_return::class$ = NULL;
          jmethodID *JavascriptParser$conditional_return::mids$ = NULL;
          bool JavascriptParser$conditional_return::live$ = false;

          jclass JavascriptParser$conditional_return::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/expressions/js/JavascriptParser$conditional_return");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          JavascriptParser$conditional_return::JavascriptParser$conditional_return() : ::org::antlr::runtime::ParserRuleReturnScope(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace expressions {
        namespace js {
          static PyObject *t_JavascriptParser$conditional_return_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_JavascriptParser$conditional_return_instance_(PyTypeObject *type, PyObject *arg);
          static int t_JavascriptParser$conditional_return_init_(t_JavascriptParser$conditional_return *self, PyObject *args, PyObject *kwds);

          static PyMethodDef t_JavascriptParser$conditional_return__methods_[] = {
            DECLARE_METHOD(t_JavascriptParser$conditional_return, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_JavascriptParser$conditional_return, instance_, METH_O | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(JavascriptParser$conditional_return, t_JavascriptParser$conditional_return, ::org::antlr::runtime::ParserRuleReturnScope, JavascriptParser$conditional_return, t_JavascriptParser$conditional_return_init_, 0, 0, 0, 0, 0);

          void t_JavascriptParser$conditional_return::install(PyObject *module)
          {
            installType(&PY_TYPE(JavascriptParser$conditional_return), module, "JavascriptParser$conditional_return", 0);
          }

          void t_JavascriptParser$conditional_return::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(JavascriptParser$conditional_return).tp_dict, "class_", make_descriptor(JavascriptParser$conditional_return::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(JavascriptParser$conditional_return).tp_dict, "wrapfn_", make_descriptor(t_JavascriptParser$conditional_return::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(JavascriptParser$conditional_return).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_JavascriptParser$conditional_return_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, JavascriptParser$conditional_return::initializeClass, 1)))
              return NULL;
            return t_JavascriptParser$conditional_return::wrap_Object(JavascriptParser$conditional_return(((t_JavascriptParser$conditional_return *) arg)->object.this$));
          }
          static PyObject *t_JavascriptParser$conditional_return_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, JavascriptParser$conditional_return::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_JavascriptParser$conditional_return_init_(t_JavascriptParser$conditional_return *self, PyObject *args, PyObject *kwds)
          {
            JavascriptParser$conditional_return object((jobject) NULL);

            INT_CALL(object = JavascriptParser$conditional_return());
            self->object = object;

            return 0;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/document/FieldType$NumericType.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace document {

        ::java::lang::Class *FieldType$NumericType::class$ = NULL;
        jmethodID *FieldType$NumericType::mids$ = NULL;
        bool FieldType$NumericType::live$ = false;
        FieldType$NumericType *FieldType$NumericType::DOUBLE = NULL;
        FieldType$NumericType *FieldType$NumericType::FLOAT = NULL;
        FieldType$NumericType *FieldType$NumericType::INT = NULL;
        FieldType$NumericType *FieldType$NumericType::LONG = NULL;

        jclass FieldType$NumericType::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/document/FieldType$NumericType");

            mids$ = new jmethodID[max_mid];
            mids$[mid_valueOf_197ea958] = env->getStaticMethodID(cls, "valueOf", "(Ljava/lang/String;)Lorg/apache/lucene/document/FieldType$NumericType;");
            mids$[mid_values_68701482] = env->getStaticMethodID(cls, "values", "()[Lorg/apache/lucene/document/FieldType$NumericType;");

            class$ = (::java::lang::Class *) new JObject(cls);
            cls = (jclass) class$->this$;

            DOUBLE = new FieldType$NumericType(env->getStaticObjectField(cls, "DOUBLE", "Lorg/apache/lucene/document/FieldType$NumericType;"));
            FLOAT = new FieldType$NumericType(env->getStaticObjectField(cls, "FLOAT", "Lorg/apache/lucene/document/FieldType$NumericType;"));
            INT = new FieldType$NumericType(env->getStaticObjectField(cls, "INT", "Lorg/apache/lucene/document/FieldType$NumericType;"));
            LONG = new FieldType$NumericType(env->getStaticObjectField(cls, "LONG", "Lorg/apache/lucene/document/FieldType$NumericType;"));
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        FieldType$NumericType FieldType$NumericType::valueOf(const ::java::lang::String & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return FieldType$NumericType(env->callStaticObjectMethod(cls, mids$[mid_valueOf_197ea958], a0.this$));
        }

        JArray< FieldType$NumericType > FieldType$NumericType::values()
        {
          jclass cls = env->getClass(initializeClass);
          return JArray< FieldType$NumericType >(env->callStaticObjectMethod(cls, mids$[mid_values_68701482]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace document {
        static PyObject *t_FieldType$NumericType_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FieldType$NumericType_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FieldType$NumericType_of_(t_FieldType$NumericType *self, PyObject *args);
        static PyObject *t_FieldType$NumericType_valueOf(PyTypeObject *type, PyObject *args);
        static PyObject *t_FieldType$NumericType_values(PyTypeObject *type);
        static PyObject *t_FieldType$NumericType_get__parameters_(t_FieldType$NumericType *self, void *data);
        static PyGetSetDef t_FieldType$NumericType__fields_[] = {
          DECLARE_GET_FIELD(t_FieldType$NumericType, parameters_),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_FieldType$NumericType__methods_[] = {
          DECLARE_METHOD(t_FieldType$NumericType, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FieldType$NumericType, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FieldType$NumericType, of_, METH_VARARGS),
          DECLARE_METHOD(t_FieldType$NumericType, valueOf, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_FieldType$NumericType, values, METH_NOARGS | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(FieldType$NumericType, t_FieldType$NumericType, ::java::lang::Enum, FieldType$NumericType, abstract_init, 0, 0, t_FieldType$NumericType__fields_, 0, 0);
        PyObject *t_FieldType$NumericType::wrap_Object(const FieldType$NumericType& object, PyTypeObject *p0)
        {
          PyObject *obj = t_FieldType$NumericType::wrap_Object(object);
          if (obj != NULL && obj != Py_None)
          {
            t_FieldType$NumericType *self = (t_FieldType$NumericType *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        PyObject *t_FieldType$NumericType::wrap_jobject(const jobject& object, PyTypeObject *p0)
        {
          PyObject *obj = t_FieldType$NumericType::wrap_jobject(object);
          if (obj != NULL && obj != Py_None)
          {
            t_FieldType$NumericType *self = (t_FieldType$NumericType *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        void t_FieldType$NumericType::install(PyObject *module)
        {
          installType(&PY_TYPE(FieldType$NumericType), module, "FieldType$NumericType", 0);
        }

        void t_FieldType$NumericType::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(FieldType$NumericType).tp_dict, "class_", make_descriptor(FieldType$NumericType::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(FieldType$NumericType).tp_dict, "wrapfn_", make_descriptor(t_FieldType$NumericType::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(FieldType$NumericType).tp_dict, "boxfn_", make_descriptor(boxObject));
          env->getClass(FieldType$NumericType::initializeClass);
          PyDict_SetItemString(PY_TYPE(FieldType$NumericType).tp_dict, "DOUBLE", make_descriptor(t_FieldType$NumericType::wrap_Object(*FieldType$NumericType::DOUBLE)));
          PyDict_SetItemString(PY_TYPE(FieldType$NumericType).tp_dict, "FLOAT", make_descriptor(t_FieldType$NumericType::wrap_Object(*FieldType$NumericType::FLOAT)));
          PyDict_SetItemString(PY_TYPE(FieldType$NumericType).tp_dict, "INT", make_descriptor(t_FieldType$NumericType::wrap_Object(*FieldType$NumericType::INT)));
          PyDict_SetItemString(PY_TYPE(FieldType$NumericType).tp_dict, "LONG", make_descriptor(t_FieldType$NumericType::wrap_Object(*FieldType$NumericType::LONG)));
        }

        static PyObject *t_FieldType$NumericType_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, FieldType$NumericType::initializeClass, 1)))
            return NULL;
          return t_FieldType$NumericType::wrap_Object(FieldType$NumericType(((t_FieldType$NumericType *) arg)->object.this$));
        }
        static PyObject *t_FieldType$NumericType_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, FieldType$NumericType::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_FieldType$NumericType_of_(t_FieldType$NumericType *self, PyObject *args)
        {
          if (!parseArg(args, "T", 1, &(self->parameters)))
            Py_RETURN_SELF;
          return PyErr_SetArgsError((PyObject *) self, "of_", args);
        }

        static PyObject *t_FieldType$NumericType_valueOf(PyTypeObject *type, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          FieldType$NumericType result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::document::FieldType$NumericType::valueOf(a0));
            return t_FieldType$NumericType::wrap_Object(result);
          }

          return callSuper(type, "valueOf", args, 2);
        }

        static PyObject *t_FieldType$NumericType_values(PyTypeObject *type)
        {
          JArray< FieldType$NumericType > result((jobject) NULL);
          OBJ_CALL(result = ::org::apache::lucene::document::FieldType$NumericType::values());
          return JArray<jobject>(result.this$).wrap(t_FieldType$NumericType::wrap_jobject);
        }
        static PyObject *t_FieldType$NumericType_get__parameters_(t_FieldType$NumericType *self, void *data)
        {
          return typeParameters(self->parameters, sizeof(self->parameters));
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/IndexableBinaryStringTools.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *IndexableBinaryStringTools::class$ = NULL;
        jmethodID *IndexableBinaryStringTools::mids$ = NULL;
        bool IndexableBinaryStringTools::live$ = false;

        jclass IndexableBinaryStringTools::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/IndexableBinaryStringTools");

            mids$ = new jmethodID[max_mid];
            mids$[mid_decode_af6092ff] = env->getStaticMethodID(cls, "decode", "([CII[BII)V");
            mids$[mid_encode_f24ebb03] = env->getStaticMethodID(cls, "encode", "([BII[CII)V");
            mids$[mid_getDecodedLength_6f0bb349] = env->getStaticMethodID(cls, "getDecodedLength", "([CII)I");
            mids$[mid_getEncodedLength_86f44340] = env->getStaticMethodID(cls, "getEncodedLength", "([BII)I");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        void IndexableBinaryStringTools::decode(const JArray< jchar > & a0, jint a1, jint a2, const JArray< jbyte > & a3, jint a4, jint a5)
        {
          jclass cls = env->getClass(initializeClass);
          env->callStaticVoidMethod(cls, mids$[mid_decode_af6092ff], a0.this$, a1, a2, a3.this$, a4, a5);
        }

        void IndexableBinaryStringTools::encode(const JArray< jbyte > & a0, jint a1, jint a2, const JArray< jchar > & a3, jint a4, jint a5)
        {
          jclass cls = env->getClass(initializeClass);
          env->callStaticVoidMethod(cls, mids$[mid_encode_f24ebb03], a0.this$, a1, a2, a3.this$, a4, a5);
        }

        jint IndexableBinaryStringTools::getDecodedLength(const JArray< jchar > & a0, jint a1, jint a2)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticIntMethod(cls, mids$[mid_getDecodedLength_6f0bb349], a0.this$, a1, a2);
        }

        jint IndexableBinaryStringTools::getEncodedLength(const JArray< jbyte > & a0, jint a1, jint a2)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticIntMethod(cls, mids$[mid_getEncodedLength_86f44340], a0.this$, a1, a2);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_IndexableBinaryStringTools_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_IndexableBinaryStringTools_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_IndexableBinaryStringTools_decode(PyTypeObject *type, PyObject *args);
        static PyObject *t_IndexableBinaryStringTools_encode(PyTypeObject *type, PyObject *args);
        static PyObject *t_IndexableBinaryStringTools_getDecodedLength(PyTypeObject *type, PyObject *args);
        static PyObject *t_IndexableBinaryStringTools_getEncodedLength(PyTypeObject *type, PyObject *args);

        static PyMethodDef t_IndexableBinaryStringTools__methods_[] = {
          DECLARE_METHOD(t_IndexableBinaryStringTools, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_IndexableBinaryStringTools, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_IndexableBinaryStringTools, decode, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_IndexableBinaryStringTools, encode, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_IndexableBinaryStringTools, getDecodedLength, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_IndexableBinaryStringTools, getEncodedLength, METH_VARARGS | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(IndexableBinaryStringTools, t_IndexableBinaryStringTools, ::java::lang::Object, IndexableBinaryStringTools, abstract_init, 0, 0, 0, 0, 0);

        void t_IndexableBinaryStringTools::install(PyObject *module)
        {
          installType(&PY_TYPE(IndexableBinaryStringTools), module, "IndexableBinaryStringTools", 0);
        }

        void t_IndexableBinaryStringTools::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(IndexableBinaryStringTools).tp_dict, "class_", make_descriptor(IndexableBinaryStringTools::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(IndexableBinaryStringTools).tp_dict, "wrapfn_", make_descriptor(t_IndexableBinaryStringTools::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(IndexableBinaryStringTools).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_IndexableBinaryStringTools_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, IndexableBinaryStringTools::initializeClass, 1)))
            return NULL;
          return t_IndexableBinaryStringTools::wrap_Object(IndexableBinaryStringTools(((t_IndexableBinaryStringTools *) arg)->object.this$));
        }
        static PyObject *t_IndexableBinaryStringTools_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, IndexableBinaryStringTools::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_IndexableBinaryStringTools_decode(PyTypeObject *type, PyObject *args)
        {
          JArray< jchar > a0((jobject) NULL);
          jint a1;
          jint a2;
          JArray< jbyte > a3((jobject) NULL);
          jint a4;
          jint a5;

          if (!parseArgs(args, "[CII[BII", &a0, &a1, &a2, &a3, &a4, &a5))
          {
            OBJ_CALL(::org::apache::lucene::util::IndexableBinaryStringTools::decode(a0, a1, a2, a3, a4, a5));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError(type, "decode", args);
          return NULL;
        }

        static PyObject *t_IndexableBinaryStringTools_encode(PyTypeObject *type, PyObject *args)
        {
          JArray< jbyte > a0((jobject) NULL);
          jint a1;
          jint a2;
          JArray< jchar > a3((jobject) NULL);
          jint a4;
          jint a5;

          if (!parseArgs(args, "[BII[CII", &a0, &a1, &a2, &a3, &a4, &a5))
          {
            OBJ_CALL(::org::apache::lucene::util::IndexableBinaryStringTools::encode(a0, a1, a2, a3, a4, a5));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError(type, "encode", args);
          return NULL;
        }

        static PyObject *t_IndexableBinaryStringTools_getDecodedLength(PyTypeObject *type, PyObject *args)
        {
          JArray< jchar > a0((jobject) NULL);
          jint a1;
          jint a2;
          jint result;

          if (!parseArgs(args, "[CII", &a0, &a1, &a2))
          {
            OBJ_CALL(result = ::org::apache::lucene::util::IndexableBinaryStringTools::getDecodedLength(a0, a1, a2));
            return PyInt_FromLong((long) result);
          }

          PyErr_SetArgsError(type, "getDecodedLength", args);
          return NULL;
        }

        static PyObject *t_IndexableBinaryStringTools_getEncodedLength(PyTypeObject *type, PyObject *args)
        {
          JArray< jbyte > a0((jobject) NULL);
          jint a1;
          jint a2;
          jint result;

          if (!parseArgs(args, "[BII", &a0, &a1, &a2))
          {
            OBJ_CALL(result = ::org::apache::lucene::util::IndexableBinaryStringTools::getEncodedLength(a0, a1, a2));
            return PyInt_FromLong((long) result);
          }

          PyErr_SetArgsError(type, "getEncodedLength", args);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/MultiDocsEnum$EnumWithSlice.h"
#include "org/apache/lucene/index/ReaderSlice.h"
#include "java/lang/String.h"
#include "org/apache/lucene/index/DocsEnum.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *MultiDocsEnum$EnumWithSlice::class$ = NULL;
        jmethodID *MultiDocsEnum$EnumWithSlice::mids$ = NULL;
        jfieldID *MultiDocsEnum$EnumWithSlice::fids$ = NULL;
        bool MultiDocsEnum$EnumWithSlice::live$ = false;

        jclass MultiDocsEnum$EnumWithSlice::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/MultiDocsEnum$EnumWithSlice");

            mids$ = new jmethodID[max_mid];
            mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

            fids$ = new jfieldID[max_fid];
            fids$[fid_docsEnum] = env->getFieldID(cls, "docsEnum", "Lorg/apache/lucene/index/DocsEnum;");
            fids$[fid_slice] = env->getFieldID(cls, "slice", "Lorg/apache/lucene/index/ReaderSlice;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        ::java::lang::String MultiDocsEnum$EnumWithSlice::toString() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
        }

        ::org::apache::lucene::index::DocsEnum MultiDocsEnum$EnumWithSlice::_get_docsEnum() const
        {
          return ::org::apache::lucene::index::DocsEnum(env->getObjectField(this$, fids$[fid_docsEnum]));
        }

        void MultiDocsEnum$EnumWithSlice::_set_docsEnum(const ::org::apache::lucene::index::DocsEnum & a0) const
        {
          env->setObjectField(this$, fids$[fid_docsEnum], a0.this$);
        }

        ::org::apache::lucene::index::ReaderSlice MultiDocsEnum$EnumWithSlice::_get_slice() const
        {
          return ::org::apache::lucene::index::ReaderSlice(env->getObjectField(this$, fids$[fid_slice]));
        }

        void MultiDocsEnum$EnumWithSlice::_set_slice(const ::org::apache::lucene::index::ReaderSlice & a0) const
        {
          env->setObjectField(this$, fids$[fid_slice], a0.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_MultiDocsEnum$EnumWithSlice_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_MultiDocsEnum$EnumWithSlice_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_MultiDocsEnum$EnumWithSlice_toString(t_MultiDocsEnum$EnumWithSlice *self, PyObject *args);
        static PyObject *t_MultiDocsEnum$EnumWithSlice_get__docsEnum(t_MultiDocsEnum$EnumWithSlice *self, void *data);
        static int t_MultiDocsEnum$EnumWithSlice_set__docsEnum(t_MultiDocsEnum$EnumWithSlice *self, PyObject *arg, void *data);
        static PyObject *t_MultiDocsEnum$EnumWithSlice_get__slice(t_MultiDocsEnum$EnumWithSlice *self, void *data);
        static int t_MultiDocsEnum$EnumWithSlice_set__slice(t_MultiDocsEnum$EnumWithSlice *self, PyObject *arg, void *data);

        static PyGetSetDef t_MultiDocsEnum$EnumWithSlice__fields_[] = {
          DECLARE_GETSET_FIELD(t_MultiDocsEnum$EnumWithSlice, docsEnum),
          DECLARE_GETSET_FIELD(t_MultiDocsEnum$EnumWithSlice, slice),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_MultiDocsEnum$EnumWithSlice__methods_[] = {
          DECLARE_METHOD(t_MultiDocsEnum$EnumWithSlice, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MultiDocsEnum$EnumWithSlice, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MultiDocsEnum$EnumWithSlice, toString, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(MultiDocsEnum$EnumWithSlice, t_MultiDocsEnum$EnumWithSlice, ::java::lang::Object, MultiDocsEnum$EnumWithSlice, abstract_init, 0, 0, t_MultiDocsEnum$EnumWithSlice__fields_, 0, 0);

        void t_MultiDocsEnum$EnumWithSlice::install(PyObject *module)
        {
          installType(&PY_TYPE(MultiDocsEnum$EnumWithSlice), module, "MultiDocsEnum$EnumWithSlice", 0);
        }

        void t_MultiDocsEnum$EnumWithSlice::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(MultiDocsEnum$EnumWithSlice).tp_dict, "class_", make_descriptor(MultiDocsEnum$EnumWithSlice::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(MultiDocsEnum$EnumWithSlice).tp_dict, "wrapfn_", make_descriptor(t_MultiDocsEnum$EnumWithSlice::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(MultiDocsEnum$EnumWithSlice).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_MultiDocsEnum$EnumWithSlice_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, MultiDocsEnum$EnumWithSlice::initializeClass, 1)))
            return NULL;
          return t_MultiDocsEnum$EnumWithSlice::wrap_Object(MultiDocsEnum$EnumWithSlice(((t_MultiDocsEnum$EnumWithSlice *) arg)->object.this$));
        }
        static PyObject *t_MultiDocsEnum$EnumWithSlice_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, MultiDocsEnum$EnumWithSlice::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_MultiDocsEnum$EnumWithSlice_toString(t_MultiDocsEnum$EnumWithSlice *self, PyObject *args)
        {
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.toString());
            return j2p(result);
          }

          return callSuper(&PY_TYPE(MultiDocsEnum$EnumWithSlice), (PyObject *) self, "toString", args, 2);
        }

        static PyObject *t_MultiDocsEnum$EnumWithSlice_get__docsEnum(t_MultiDocsEnum$EnumWithSlice *self, void *data)
        {
          ::org::apache::lucene::index::DocsEnum value((jobject) NULL);
          OBJ_CALL(value = self->object._get_docsEnum());
          return ::org::apache::lucene::index::t_DocsEnum::wrap_Object(value);
        }
        static int t_MultiDocsEnum$EnumWithSlice_set__docsEnum(t_MultiDocsEnum$EnumWithSlice *self, PyObject *arg, void *data)
        {
          ::org::apache::lucene::index::DocsEnum value((jobject) NULL);
          if (!parseArg(arg, "k", ::org::apache::lucene::index::DocsEnum::initializeClass, &value))
          {
            INT_CALL(self->object._set_docsEnum(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "docsEnum", arg);
          return -1;
        }

        static PyObject *t_MultiDocsEnum$EnumWithSlice_get__slice(t_MultiDocsEnum$EnumWithSlice *self, void *data)
        {
          ::org::apache::lucene::index::ReaderSlice value((jobject) NULL);
          OBJ_CALL(value = self->object._get_slice());
          return ::org::apache::lucene::index::t_ReaderSlice::wrap_Object(value);
        }
        static int t_MultiDocsEnum$EnumWithSlice_set__slice(t_MultiDocsEnum$EnumWithSlice *self, PyObject *arg, void *data)
        {
          ::org::apache::lucene::index::ReaderSlice value((jobject) NULL);
          if (!parseArg(arg, "k", ::org::apache::lucene::index::ReaderSlice::initializeClass, &value))
          {
            INT_CALL(self->object._set_slice(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "slice", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/facet/TopOrdAndIntQueue$OrdAndValue.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {

        ::java::lang::Class *TopOrdAndIntQueue$OrdAndValue::class$ = NULL;
        jmethodID *TopOrdAndIntQueue$OrdAndValue::mids$ = NULL;
        jfieldID *TopOrdAndIntQueue$OrdAndValue::fids$ = NULL;
        bool TopOrdAndIntQueue$OrdAndValue::live$ = false;

        jclass TopOrdAndIntQueue$OrdAndValue::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/facet/TopOrdAndIntQueue$OrdAndValue");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");

            fids$ = new jfieldID[max_fid];
            fids$[fid_ord] = env->getFieldID(cls, "ord", "I");
            fids$[fid_value] = env->getFieldID(cls, "value", "I");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        TopOrdAndIntQueue$OrdAndValue::TopOrdAndIntQueue$OrdAndValue() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        jint TopOrdAndIntQueue$OrdAndValue::_get_ord() const
        {
          return env->getIntField(this$, fids$[fid_ord]);
        }

        void TopOrdAndIntQueue$OrdAndValue::_set_ord(jint a0) const
        {
          env->setIntField(this$, fids$[fid_ord], a0);
        }

        jint TopOrdAndIntQueue$OrdAndValue::_get_value() const
        {
          return env->getIntField(this$, fids$[fid_value]);
        }

        void TopOrdAndIntQueue$OrdAndValue::_set_value(jint a0) const
        {
          env->setIntField(this$, fids$[fid_value], a0);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        static PyObject *t_TopOrdAndIntQueue$OrdAndValue_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_TopOrdAndIntQueue$OrdAndValue_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_TopOrdAndIntQueue$OrdAndValue_of_(t_TopOrdAndIntQueue$OrdAndValue *self, PyObject *args);
        static int t_TopOrdAndIntQueue$OrdAndValue_init_(t_TopOrdAndIntQueue$OrdAndValue *self, PyObject *args, PyObject *kwds);
        static PyObject *t_TopOrdAndIntQueue$OrdAndValue_get__ord(t_TopOrdAndIntQueue$OrdAndValue *self, void *data);
        static int t_TopOrdAndIntQueue$OrdAndValue_set__ord(t_TopOrdAndIntQueue$OrdAndValue *self, PyObject *arg, void *data);
        static PyObject *t_TopOrdAndIntQueue$OrdAndValue_get__value(t_TopOrdAndIntQueue$OrdAndValue *self, void *data);
        static int t_TopOrdAndIntQueue$OrdAndValue_set__value(t_TopOrdAndIntQueue$OrdAndValue *self, PyObject *arg, void *data);

        static PyObject *t_TopOrdAndIntQueue$OrdAndValue_get__parameters_(t_TopOrdAndIntQueue$OrdAndValue *self, void *data);
        static PyGetSetDef t_TopOrdAndIntQueue$OrdAndValue__fields_[] = {
          DECLARE_GETSET_FIELD(t_TopOrdAndIntQueue$OrdAndValue, ord),
          DECLARE_GETSET_FIELD(t_TopOrdAndIntQueue$OrdAndValue, value),
          DECLARE_GET_FIELD(t_TopOrdAndIntQueue$OrdAndValue, parameters_),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_TopOrdAndIntQueue$OrdAndValue__methods_[] = {
          DECLARE_METHOD(t_TopOrdAndIntQueue$OrdAndValue, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_TopOrdAndIntQueue$OrdAndValue, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_TopOrdAndIntQueue$OrdAndValue, of_, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(TopOrdAndIntQueue$OrdAndValue, t_TopOrdAndIntQueue$OrdAndValue, ::java::lang::Object, TopOrdAndIntQueue$OrdAndValue, t_TopOrdAndIntQueue$OrdAndValue_init_, 0, 0, t_TopOrdAndIntQueue$OrdAndValue__fields_, 0, 0);
        PyObject *t_TopOrdAndIntQueue$OrdAndValue::wrap_Object(const TopOrdAndIntQueue$OrdAndValue& object, PyTypeObject *p0)
        {
          PyObject *obj = t_TopOrdAndIntQueue$OrdAndValue::wrap_Object(object);
          if (obj != NULL && obj != Py_None)
          {
            t_TopOrdAndIntQueue$OrdAndValue *self = (t_TopOrdAndIntQueue$OrdAndValue *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        PyObject *t_TopOrdAndIntQueue$OrdAndValue::wrap_jobject(const jobject& object, PyTypeObject *p0)
        {
          PyObject *obj = t_TopOrdAndIntQueue$OrdAndValue::wrap_jobject(object);
          if (obj != NULL && obj != Py_None)
          {
            t_TopOrdAndIntQueue$OrdAndValue *self = (t_TopOrdAndIntQueue$OrdAndValue *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        void t_TopOrdAndIntQueue$OrdAndValue::install(PyObject *module)
        {
          installType(&PY_TYPE(TopOrdAndIntQueue$OrdAndValue), module, "TopOrdAndIntQueue$OrdAndValue", 0);
        }

        void t_TopOrdAndIntQueue$OrdAndValue::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(TopOrdAndIntQueue$OrdAndValue).tp_dict, "class_", make_descriptor(TopOrdAndIntQueue$OrdAndValue::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(TopOrdAndIntQueue$OrdAndValue).tp_dict, "wrapfn_", make_descriptor(t_TopOrdAndIntQueue$OrdAndValue::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(TopOrdAndIntQueue$OrdAndValue).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_TopOrdAndIntQueue$OrdAndValue_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, TopOrdAndIntQueue$OrdAndValue::initializeClass, 1)))
            return NULL;
          return t_TopOrdAndIntQueue$OrdAndValue::wrap_Object(TopOrdAndIntQueue$OrdAndValue(((t_TopOrdAndIntQueue$OrdAndValue *) arg)->object.this$));
        }
        static PyObject *t_TopOrdAndIntQueue$OrdAndValue_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, TopOrdAndIntQueue$OrdAndValue::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_TopOrdAndIntQueue$OrdAndValue_of_(t_TopOrdAndIntQueue$OrdAndValue *self, PyObject *args)
        {
          if (!parseArg(args, "T", 1, &(self->parameters)))
            Py_RETURN_SELF;
          return PyErr_SetArgsError((PyObject *) self, "of_", args);
        }

        static int t_TopOrdAndIntQueue$OrdAndValue_init_(t_TopOrdAndIntQueue$OrdAndValue *self, PyObject *args, PyObject *kwds)
        {
          TopOrdAndIntQueue$OrdAndValue object((jobject) NULL);

          INT_CALL(object = TopOrdAndIntQueue$OrdAndValue());
          self->object = object;
          self->parameters[0] = &::org::apache::lucene::facet::PY_TYPE(TopOrdAndIntQueue$OrdAndValue);

          return 0;
        }
        static PyObject *t_TopOrdAndIntQueue$OrdAndValue_get__parameters_(t_TopOrdAndIntQueue$OrdAndValue *self, void *data)
        {
          return typeParameters(self->parameters, sizeof(self->parameters));
        }

        static PyObject *t_TopOrdAndIntQueue$OrdAndValue_get__ord(t_TopOrdAndIntQueue$OrdAndValue *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object._get_ord());
          return PyInt_FromLong((long) value);
        }
        static int t_TopOrdAndIntQueue$OrdAndValue_set__ord(t_TopOrdAndIntQueue$OrdAndValue *self, PyObject *arg, void *data)
        {
          jint value;
          if (!parseArg(arg, "I", &value))
          {
            INT_CALL(self->object._set_ord(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "ord", arg);
          return -1;
        }

        static PyObject *t_TopOrdAndIntQueue$OrdAndValue_get__value(t_TopOrdAndIntQueue$OrdAndValue *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object._get_value());
          return PyInt_FromLong((long) value);
        }
        static int t_TopOrdAndIntQueue$OrdAndValue_set__value(t_TopOrdAndIntQueue$OrdAndValue *self, PyObject *arg, void *data)
        {
          jint value;
          if (!parseArg(arg, "I", &value))
          {
            INT_CALL(self->object._set_value(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "value", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/DirectoryReader.h"
#include "org/apache/lucene/index/IndexWriter.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/store/Directory.h"
#include "org/apache/lucene/index/AtomicReader.h"
#include "org/apache/lucene/index/IndexCommit.h"
#include "java/io/IOException.h"
#include "java/util/List.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *DirectoryReader::class$ = NULL;
        jmethodID *DirectoryReader::mids$ = NULL;
        bool DirectoryReader::live$ = false;
        jint DirectoryReader::DEFAULT_TERMS_INDEX_DIVISOR = (jint) 0;

        jclass DirectoryReader::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/DirectoryReader");

            mids$ = new jmethodID[max_mid];
            mids$[mid_directory_1f3934bb] = env->getMethodID(cls, "directory", "()Lorg/apache/lucene/store/Directory;");
            mids$[mid_getIndexCommit_09307276] = env->getMethodID(cls, "getIndexCommit", "()Lorg/apache/lucene/index/IndexCommit;");
            mids$[mid_getVersion_54c6a17a] = env->getMethodID(cls, "getVersion", "()J");
            mids$[mid_indexExists_2e261efe] = env->getStaticMethodID(cls, "indexExists", "(Lorg/apache/lucene/store/Directory;)Z");
            mids$[mid_isCurrent_54c6a16a] = env->getMethodID(cls, "isCurrent", "()Z");
            mids$[mid_listCommits_a0981b9a] = env->getStaticMethodID(cls, "listCommits", "(Lorg/apache/lucene/store/Directory;)Ljava/util/List;");
            mids$[mid_open_109b8ac7] = env->getStaticMethodID(cls, "open", "(Lorg/apache/lucene/store/Directory;)Lorg/apache/lucene/index/DirectoryReader;");
            mids$[mid_open_26fd6272] = env->getStaticMethodID(cls, "open", "(Lorg/apache/lucene/index/IndexCommit;)Lorg/apache/lucene/index/DirectoryReader;");
            mids$[mid_open_e4ee522b] = env->getStaticMethodID(cls, "open", "(Lorg/apache/lucene/index/IndexWriter;Z)Lorg/apache/lucene/index/DirectoryReader;");
            mids$[mid_open_d7b74111] = env->getStaticMethodID(cls, "open", "(Lorg/apache/lucene/store/Directory;I)Lorg/apache/lucene/index/DirectoryReader;");
            mids$[mid_open_13bade12] = env->getStaticMethodID(cls, "open", "(Lorg/apache/lucene/index/IndexCommit;I)Lorg/apache/lucene/index/DirectoryReader;");
            mids$[mid_openIfChanged_5bb3c60f] = env->getStaticMethodID(cls, "openIfChanged", "(Lorg/apache/lucene/index/DirectoryReader;)Lorg/apache/lucene/index/DirectoryReader;");
            mids$[mid_openIfChanged_bf41593a] = env->getStaticMethodID(cls, "openIfChanged", "(Lorg/apache/lucene/index/DirectoryReader;Lorg/apache/lucene/index/IndexCommit;)Lorg/apache/lucene/index/DirectoryReader;");
            mids$[mid_openIfChanged_dbc531b7] = env->getStaticMethodID(cls, "openIfChanged", "(Lorg/apache/lucene/index/DirectoryReader;Lorg/apache/lucene/index/IndexWriter;Z)Lorg/apache/lucene/index/DirectoryReader;");
            mids$[mid_doOpenIfChanged_1de06693] = env->getMethodID(cls, "doOpenIfChanged", "()Lorg/apache/lucene/index/DirectoryReader;");
            mids$[mid_doOpenIfChanged_e4ee522b] = env->getMethodID(cls, "doOpenIfChanged", "(Lorg/apache/lucene/index/IndexWriter;Z)Lorg/apache/lucene/index/DirectoryReader;");
            mids$[mid_doOpenIfChanged_26fd6272] = env->getMethodID(cls, "doOpenIfChanged", "(Lorg/apache/lucene/index/IndexCommit;)Lorg/apache/lucene/index/DirectoryReader;");

            class$ = (::java::lang::Class *) new JObject(cls);
            cls = (jclass) class$->this$;

            DEFAULT_TERMS_INDEX_DIVISOR = env->getStaticIntField(cls, "DEFAULT_TERMS_INDEX_DIVISOR");
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        ::org::apache::lucene::store::Directory DirectoryReader::directory() const
        {
          return ::org::apache::lucene::store::Directory(env->callObjectMethod(this$, mids$[mid_directory_1f3934bb]));
        }

        ::org::apache::lucene::index::IndexCommit DirectoryReader::getIndexCommit() const
        {
          return ::org::apache::lucene::index::IndexCommit(env->callObjectMethod(this$, mids$[mid_getIndexCommit_09307276]));
        }

        jlong DirectoryReader::getVersion() const
        {
          return env->callLongMethod(this$, mids$[mid_getVersion_54c6a17a]);
        }

        jboolean DirectoryReader::indexExists(const ::org::apache::lucene::store::Directory & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticBooleanMethod(cls, mids$[mid_indexExists_2e261efe], a0.this$);
        }

        jboolean DirectoryReader::isCurrent() const
        {
          return env->callBooleanMethod(this$, mids$[mid_isCurrent_54c6a16a]);
        }

        ::java::util::List DirectoryReader::listCommits(const ::org::apache::lucene::store::Directory & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return ::java::util::List(env->callStaticObjectMethod(cls, mids$[mid_listCommits_a0981b9a], a0.this$));
        }

        DirectoryReader DirectoryReader::open(const ::org::apache::lucene::store::Directory & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return DirectoryReader(env->callStaticObjectMethod(cls, mids$[mid_open_109b8ac7], a0.this$));
        }

        DirectoryReader DirectoryReader::open(const ::org::apache::lucene::index::IndexCommit & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return DirectoryReader(env->callStaticObjectMethod(cls, mids$[mid_open_26fd6272], a0.this$));
        }

        DirectoryReader DirectoryReader::open(const ::org::apache::lucene::index::IndexWriter & a0, jboolean a1)
        {
          jclass cls = env->getClass(initializeClass);
          return DirectoryReader(env->callStaticObjectMethod(cls, mids$[mid_open_e4ee522b], a0.this$, a1));
        }

        DirectoryReader DirectoryReader::open(const ::org::apache::lucene::store::Directory & a0, jint a1)
        {
          jclass cls = env->getClass(initializeClass);
          return DirectoryReader(env->callStaticObjectMethod(cls, mids$[mid_open_d7b74111], a0.this$, a1));
        }

        DirectoryReader DirectoryReader::open(const ::org::apache::lucene::index::IndexCommit & a0, jint a1)
        {
          jclass cls = env->getClass(initializeClass);
          return DirectoryReader(env->callStaticObjectMethod(cls, mids$[mid_open_13bade12], a0.this$, a1));
        }

        DirectoryReader DirectoryReader::openIfChanged(const DirectoryReader & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return DirectoryReader(env->callStaticObjectMethod(cls, mids$[mid_openIfChanged_5bb3c60f], a0.this$));
        }

        DirectoryReader DirectoryReader::openIfChanged(const DirectoryReader & a0, const ::org::apache::lucene::index::IndexCommit & a1)
        {
          jclass cls = env->getClass(initializeClass);
          return DirectoryReader(env->callStaticObjectMethod(cls, mids$[mid_openIfChanged_bf41593a], a0.this$, a1.this$));
        }

        DirectoryReader DirectoryReader::openIfChanged(const DirectoryReader & a0, const ::org::apache::lucene::index::IndexWriter & a1, jboolean a2)
        {
          jclass cls = env->getClass(initializeClass);
          return DirectoryReader(env->callStaticObjectMethod(cls, mids$[mid_openIfChanged_dbc531b7], a0.this$, a1.this$, a2));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_DirectoryReader_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_DirectoryReader_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_DirectoryReader_of_(t_DirectoryReader *self, PyObject *args);
        static PyObject *t_DirectoryReader_directory(t_DirectoryReader *self);
        static PyObject *t_DirectoryReader_getIndexCommit(t_DirectoryReader *self);
        static PyObject *t_DirectoryReader_getVersion(t_DirectoryReader *self);
        static PyObject *t_DirectoryReader_indexExists(PyTypeObject *type, PyObject *arg);
        static PyObject *t_DirectoryReader_isCurrent(t_DirectoryReader *self);
        static PyObject *t_DirectoryReader_listCommits(PyTypeObject *type, PyObject *arg);
        static PyObject *t_DirectoryReader_open(PyTypeObject *type, PyObject *args);
        static PyObject *t_DirectoryReader_openIfChanged(PyTypeObject *type, PyObject *args);
        static PyObject *t_DirectoryReader_get__current(t_DirectoryReader *self, void *data);
        static PyObject *t_DirectoryReader_get__indexCommit(t_DirectoryReader *self, void *data);
        static PyObject *t_DirectoryReader_get__version(t_DirectoryReader *self, void *data);
        static PyObject *t_DirectoryReader_get__parameters_(t_DirectoryReader *self, void *data);
        static PyGetSetDef t_DirectoryReader__fields_[] = {
          DECLARE_GET_FIELD(t_DirectoryReader, current),
          DECLARE_GET_FIELD(t_DirectoryReader, indexCommit),
          DECLARE_GET_FIELD(t_DirectoryReader, version),
          DECLARE_GET_FIELD(t_DirectoryReader, parameters_),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_DirectoryReader__methods_[] = {
          DECLARE_METHOD(t_DirectoryReader, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_DirectoryReader, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_DirectoryReader, of_, METH_VARARGS),
          DECLARE_METHOD(t_DirectoryReader, directory, METH_NOARGS),
          DECLARE_METHOD(t_DirectoryReader, getIndexCommit, METH_NOARGS),
          DECLARE_METHOD(t_DirectoryReader, getVersion, METH_NOARGS),
          DECLARE_METHOD(t_DirectoryReader, indexExists, METH_O | METH_CLASS),
          DECLARE_METHOD(t_DirectoryReader, isCurrent, METH_NOARGS),
          DECLARE_METHOD(t_DirectoryReader, listCommits, METH_O | METH_CLASS),
          DECLARE_METHOD(t_DirectoryReader, open, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_DirectoryReader, openIfChanged, METH_VARARGS | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(DirectoryReader, t_DirectoryReader, ::org::apache::lucene::index::BaseCompositeReader, DirectoryReader, abstract_init, 0, 0, t_DirectoryReader__fields_, 0, 0);
        PyObject *t_DirectoryReader::wrap_Object(const DirectoryReader& object, PyTypeObject *p0)
        {
          PyObject *obj = t_DirectoryReader::wrap_Object(object);
          if (obj != NULL && obj != Py_None)
          {
            t_DirectoryReader *self = (t_DirectoryReader *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        PyObject *t_DirectoryReader::wrap_jobject(const jobject& object, PyTypeObject *p0)
        {
          PyObject *obj = t_DirectoryReader::wrap_jobject(object);
          if (obj != NULL && obj != Py_None)
          {
            t_DirectoryReader *self = (t_DirectoryReader *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        void t_DirectoryReader::install(PyObject *module)
        {
          installType(&PY_TYPE(DirectoryReader), module, "DirectoryReader", 0);
        }

        void t_DirectoryReader::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(DirectoryReader).tp_dict, "class_", make_descriptor(DirectoryReader::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(DirectoryReader).tp_dict, "wrapfn_", make_descriptor(t_DirectoryReader::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(DirectoryReader).tp_dict, "boxfn_", make_descriptor(boxObject));
          env->getClass(DirectoryReader::initializeClass);
          PyDict_SetItemString(PY_TYPE(DirectoryReader).tp_dict, "DEFAULT_TERMS_INDEX_DIVISOR", make_descriptor(DirectoryReader::DEFAULT_TERMS_INDEX_DIVISOR));
        }

        static PyObject *t_DirectoryReader_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, DirectoryReader::initializeClass, 1)))
            return NULL;
          return t_DirectoryReader::wrap_Object(DirectoryReader(((t_DirectoryReader *) arg)->object.this$));
        }
        static PyObject *t_DirectoryReader_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, DirectoryReader::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_DirectoryReader_of_(t_DirectoryReader *self, PyObject *args)
        {
          if (!parseArg(args, "T", 1, &(self->parameters)))
            Py_RETURN_SELF;
          return PyErr_SetArgsError((PyObject *) self, "of_", args);
        }

        static PyObject *t_DirectoryReader_directory(t_DirectoryReader *self)
        {
          ::org::apache::lucene::store::Directory result((jobject) NULL);
          OBJ_CALL(result = self->object.directory());
          return ::org::apache::lucene::store::t_Directory::wrap_Object(result);
        }

        static PyObject *t_DirectoryReader_getIndexCommit(t_DirectoryReader *self)
        {
          ::org::apache::lucene::index::IndexCommit result((jobject) NULL);
          OBJ_CALL(result = self->object.getIndexCommit());
          return ::org::apache::lucene::index::t_IndexCommit::wrap_Object(result);
        }

        static PyObject *t_DirectoryReader_getVersion(t_DirectoryReader *self)
        {
          jlong result;
          OBJ_CALL(result = self->object.getVersion());
          return PyLong_FromLongLong((PY_LONG_LONG) result);
        }

        static PyObject *t_DirectoryReader_indexExists(PyTypeObject *type, PyObject *arg)
        {
          ::org::apache::lucene::store::Directory a0((jobject) NULL);
          jboolean result;

          if (!parseArg(arg, "k", ::org::apache::lucene::store::Directory::initializeClass, &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::index::DirectoryReader::indexExists(a0));
            Py_RETURN_BOOL(result);
          }

          PyErr_SetArgsError(type, "indexExists", arg);
          return NULL;
        }

        static PyObject *t_DirectoryReader_isCurrent(t_DirectoryReader *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.isCurrent());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_DirectoryReader_listCommits(PyTypeObject *type, PyObject *arg)
        {
          ::org::apache::lucene::store::Directory a0((jobject) NULL);
          ::java::util::List result((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::store::Directory::initializeClass, &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::index::DirectoryReader::listCommits(a0));
            return ::java::util::t_List::wrap_Object(result, &::org::apache::lucene::index::PY_TYPE(IndexCommit));
          }

          PyErr_SetArgsError(type, "listCommits", arg);
          return NULL;
        }

        static PyObject *t_DirectoryReader_open(PyTypeObject *type, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              ::org::apache::lucene::store::Directory a0((jobject) NULL);
              DirectoryReader result((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::store::Directory::initializeClass, &a0))
              {
                OBJ_CALL(result = ::org::apache::lucene::index::DirectoryReader::open(a0));
                return t_DirectoryReader::wrap_Object(result);
              }
            }
            {
              ::org::apache::lucene::index::IndexCommit a0((jobject) NULL);
              DirectoryReader result((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::index::IndexCommit::initializeClass, &a0))
              {
                OBJ_CALL(result = ::org::apache::lucene::index::DirectoryReader::open(a0));
                return t_DirectoryReader::wrap_Object(result);
              }
            }
            break;
           case 2:
            {
              ::org::apache::lucene::index::IndexWriter a0((jobject) NULL);
              jboolean a1;
              DirectoryReader result((jobject) NULL);

              if (!parseArgs(args, "kZ", ::org::apache::lucene::index::IndexWriter::initializeClass, &a0, &a1))
              {
                OBJ_CALL(result = ::org::apache::lucene::index::DirectoryReader::open(a0, a1));
                return t_DirectoryReader::wrap_Object(result);
              }
            }
            {
              ::org::apache::lucene::store::Directory a0((jobject) NULL);
              jint a1;
              DirectoryReader result((jobject) NULL);

              if (!parseArgs(args, "kI", ::org::apache::lucene::store::Directory::initializeClass, &a0, &a1))
              {
                OBJ_CALL(result = ::org::apache::lucene::index::DirectoryReader::open(a0, a1));
                return t_DirectoryReader::wrap_Object(result);
              }
            }
            {
              ::org::apache::lucene::index::IndexCommit a0((jobject) NULL);
              jint a1;
              DirectoryReader result((jobject) NULL);

              if (!parseArgs(args, "kI", ::org::apache::lucene::index::IndexCommit::initializeClass, &a0, &a1))
              {
                OBJ_CALL(result = ::org::apache::lucene::index::DirectoryReader::open(a0, a1));
                return t_DirectoryReader::wrap_Object(result);
              }
            }
          }

          return callSuper(type, "open", args, 2);
        }

        static PyObject *t_DirectoryReader_openIfChanged(PyTypeObject *type, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              DirectoryReader a0((jobject) NULL);
              PyTypeObject **p0;
              DirectoryReader result((jobject) NULL);

              if (!parseArgs(args, "K", DirectoryReader::initializeClass, &a0, &p0, t_DirectoryReader::parameters_))
              {
                OBJ_CALL(result = ::org::apache::lucene::index::DirectoryReader::openIfChanged(a0));
                return t_DirectoryReader::wrap_Object(result);
              }
            }
            break;
           case 2:
            {
              DirectoryReader a0((jobject) NULL);
              PyTypeObject **p0;
              ::org::apache::lucene::index::IndexCommit a1((jobject) NULL);
              DirectoryReader result((jobject) NULL);

              if (!parseArgs(args, "Kk", DirectoryReader::initializeClass, ::org::apache::lucene::index::IndexCommit::initializeClass, &a0, &p0, t_DirectoryReader::parameters_, &a1))
              {
                OBJ_CALL(result = ::org::apache::lucene::index::DirectoryReader::openIfChanged(a0, a1));
                return t_DirectoryReader::wrap_Object(result);
              }
            }
            break;
           case 3:
            {
              DirectoryReader a0((jobject) NULL);
              PyTypeObject **p0;
              ::org::apache::lucene::index::IndexWriter a1((jobject) NULL);
              jboolean a2;
              DirectoryReader result((jobject) NULL);

              if (!parseArgs(args, "KkZ", DirectoryReader::initializeClass, ::org::apache::lucene::index::IndexWriter::initializeClass, &a0, &p0, t_DirectoryReader::parameters_, &a1, &a2))
              {
                OBJ_CALL(result = ::org::apache::lucene::index::DirectoryReader::openIfChanged(a0, a1, a2));
                return t_DirectoryReader::wrap_Object(result);
              }
            }
          }

          PyErr_SetArgsError(type, "openIfChanged", args);
          return NULL;
        }
        static PyObject *t_DirectoryReader_get__parameters_(t_DirectoryReader *self, void *data)
        {
          return typeParameters(self->parameters, sizeof(self->parameters));
        }

        static PyObject *t_DirectoryReader_get__current(t_DirectoryReader *self, void *data)
        {
          jboolean value;
          OBJ_CALL(value = self->object.isCurrent());
          Py_RETURN_BOOL(value);
        }

        static PyObject *t_DirectoryReader_get__indexCommit(t_DirectoryReader *self, void *data)
        {
          ::org::apache::lucene::index::IndexCommit value((jobject) NULL);
          OBJ_CALL(value = self->object.getIndexCommit());
          return ::org::apache::lucene::index::t_IndexCommit::wrap_Object(value);
        }

        static PyObject *t_DirectoryReader_get__version(t_DirectoryReader *self, void *data)
        {
          jlong value;
          OBJ_CALL(value = self->object.getVersion());
          return PyLong_FromLongLong((PY_LONG_LONG) value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/document/DoubleDocValuesField.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace document {

        ::java::lang::Class *DoubleDocValuesField::class$ = NULL;
        jmethodID *DoubleDocValuesField::mids$ = NULL;
        bool DoubleDocValuesField::live$ = false;

        jclass DoubleDocValuesField::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/document/DoubleDocValuesField");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_493fce5f] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;D)V");
            mids$[mid_setDoubleValue_5d1c7645] = env->getMethodID(cls, "setDoubleValue", "(D)V");
            mids$[mid_setLongValue_0ee6df2f] = env->getMethodID(cls, "setLongValue", "(J)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        DoubleDocValuesField::DoubleDocValuesField(const ::java::lang::String & a0, jdouble a1) : ::org::apache::lucene::document::NumericDocValuesField(env->newObject(initializeClass, &mids$, mid_init$_493fce5f, a0.this$, a1)) {}

        void DoubleDocValuesField::setDoubleValue(jdouble a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setDoubleValue_5d1c7645], a0);
        }

        void DoubleDocValuesField::setLongValue(jlong a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setLongValue_0ee6df2f], a0);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace document {
        static PyObject *t_DoubleDocValuesField_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_DoubleDocValuesField_instance_(PyTypeObject *type, PyObject *arg);
        static int t_DoubleDocValuesField_init_(t_DoubleDocValuesField *self, PyObject *args, PyObject *kwds);
        static PyObject *t_DoubleDocValuesField_setDoubleValue(t_DoubleDocValuesField *self, PyObject *args);
        static PyObject *t_DoubleDocValuesField_setLongValue(t_DoubleDocValuesField *self, PyObject *args);
        static int t_DoubleDocValuesField_set__doubleValue(t_DoubleDocValuesField *self, PyObject *arg, void *data);
        static int t_DoubleDocValuesField_set__longValue(t_DoubleDocValuesField *self, PyObject *arg, void *data);
        static PyGetSetDef t_DoubleDocValuesField__fields_[] = {
          DECLARE_SET_FIELD(t_DoubleDocValuesField, doubleValue),
          DECLARE_SET_FIELD(t_DoubleDocValuesField, longValue),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_DoubleDocValuesField__methods_[] = {
          DECLARE_METHOD(t_DoubleDocValuesField, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_DoubleDocValuesField, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_DoubleDocValuesField, setDoubleValue, METH_VARARGS),
          DECLARE_METHOD(t_DoubleDocValuesField, setLongValue, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(DoubleDocValuesField, t_DoubleDocValuesField, ::org::apache::lucene::document::NumericDocValuesField, DoubleDocValuesField, t_DoubleDocValuesField_init_, 0, 0, t_DoubleDocValuesField__fields_, 0, 0);

        void t_DoubleDocValuesField::install(PyObject *module)
        {
          installType(&PY_TYPE(DoubleDocValuesField), module, "DoubleDocValuesField", 0);
        }

        void t_DoubleDocValuesField::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(DoubleDocValuesField).tp_dict, "class_", make_descriptor(DoubleDocValuesField::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(DoubleDocValuesField).tp_dict, "wrapfn_", make_descriptor(t_DoubleDocValuesField::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(DoubleDocValuesField).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_DoubleDocValuesField_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, DoubleDocValuesField::initializeClass, 1)))
            return NULL;
          return t_DoubleDocValuesField::wrap_Object(DoubleDocValuesField(((t_DoubleDocValuesField *) arg)->object.this$));
        }
        static PyObject *t_DoubleDocValuesField_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, DoubleDocValuesField::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_DoubleDocValuesField_init_(t_DoubleDocValuesField *self, PyObject *args, PyObject *kwds)
        {
          ::java::lang::String a0((jobject) NULL);
          jdouble a1;
          DoubleDocValuesField object((jobject) NULL);

          if (!parseArgs(args, "sD", &a0, &a1))
          {
            INT_CALL(object = DoubleDocValuesField(a0, a1));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_DoubleDocValuesField_setDoubleValue(t_DoubleDocValuesField *self, PyObject *args)
        {
          jdouble a0;

          if (!parseArgs(args, "D", &a0))
          {
            OBJ_CALL(self->object.setDoubleValue(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(DoubleDocValuesField), (PyObject *) self, "setDoubleValue", args, 2);
        }

        static PyObject *t_DoubleDocValuesField_setLongValue(t_DoubleDocValuesField *self, PyObject *args)
        {
          jlong a0;

          if (!parseArgs(args, "J", &a0))
          {
            OBJ_CALL(self->object.setLongValue(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(DoubleDocValuesField), (PyObject *) self, "setLongValue", args, 2);
        }

        static int t_DoubleDocValuesField_set__doubleValue(t_DoubleDocValuesField *self, PyObject *arg, void *data)
        {
          {
            jdouble value;
            if (!parseArg(arg, "D", &value))
            {
              INT_CALL(self->object.setDoubleValue(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "doubleValue", arg);
          return -1;
        }

        static int t_DoubleDocValuesField_set__longValue(t_DoubleDocValuesField *self, PyObject *arg, void *data)
        {
          {
            jlong value;
            if (!parseArg(arg, "J", &value))
            {
              INT_CALL(self->object.setLongValue(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "longValue", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/sinks/TokenTypeSinkFilter.h"
#include "java/lang/String.h"
#include "org/apache/lucene/util/AttributeSource.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace sinks {

          ::java::lang::Class *TokenTypeSinkFilter::class$ = NULL;
          jmethodID *TokenTypeSinkFilter::mids$ = NULL;
          bool TokenTypeSinkFilter::live$ = false;

          jclass TokenTypeSinkFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/sinks/TokenTypeSinkFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_5fdc3f48] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;)V");
              mids$[mid_accept_aea2d6e6] = env->getMethodID(cls, "accept", "(Lorg/apache/lucene/util/AttributeSource;)Z");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          TokenTypeSinkFilter::TokenTypeSinkFilter(const ::java::lang::String & a0) : ::org::apache::lucene::analysis::sinks::TeeSinkTokenFilter$SinkFilter(env->newObject(initializeClass, &mids$, mid_init$_5fdc3f48, a0.this$)) {}

          jboolean TokenTypeSinkFilter::accept(const ::org::apache::lucene::util::AttributeSource & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_accept_aea2d6e6], a0.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace sinks {
          static PyObject *t_TokenTypeSinkFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_TokenTypeSinkFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_TokenTypeSinkFilter_init_(t_TokenTypeSinkFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_TokenTypeSinkFilter_accept(t_TokenTypeSinkFilter *self, PyObject *args);

          static PyMethodDef t_TokenTypeSinkFilter__methods_[] = {
            DECLARE_METHOD(t_TokenTypeSinkFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_TokenTypeSinkFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_TokenTypeSinkFilter, accept, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(TokenTypeSinkFilter, t_TokenTypeSinkFilter, ::org::apache::lucene::analysis::sinks::TeeSinkTokenFilter$SinkFilter, TokenTypeSinkFilter, t_TokenTypeSinkFilter_init_, 0, 0, 0, 0, 0);

          void t_TokenTypeSinkFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(TokenTypeSinkFilter), module, "TokenTypeSinkFilter", 0);
          }

          void t_TokenTypeSinkFilter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(TokenTypeSinkFilter).tp_dict, "class_", make_descriptor(TokenTypeSinkFilter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(TokenTypeSinkFilter).tp_dict, "wrapfn_", make_descriptor(t_TokenTypeSinkFilter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(TokenTypeSinkFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_TokenTypeSinkFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, TokenTypeSinkFilter::initializeClass, 1)))
              return NULL;
            return t_TokenTypeSinkFilter::wrap_Object(TokenTypeSinkFilter(((t_TokenTypeSinkFilter *) arg)->object.this$));
          }
          static PyObject *t_TokenTypeSinkFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, TokenTypeSinkFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_TokenTypeSinkFilter_init_(t_TokenTypeSinkFilter *self, PyObject *args, PyObject *kwds)
          {
            ::java::lang::String a0((jobject) NULL);
            TokenTypeSinkFilter object((jobject) NULL);

            if (!parseArgs(args, "s", &a0))
            {
              INT_CALL(object = TokenTypeSinkFilter(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_TokenTypeSinkFilter_accept(t_TokenTypeSinkFilter *self, PyObject *args)
          {
            ::org::apache::lucene::util::AttributeSource a0((jobject) NULL);
            jboolean result;

            if (!parseArgs(args, "k", ::org::apache::lucene::util::AttributeSource::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.accept(a0));
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(TokenTypeSinkFilter), (PyObject *) self, "accept", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/BooleanQuery.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/search/BooleanClause$Occur.h"
#include "java/lang/Class.h"
#include "java/lang/Object.h"
#include "org/apache/lucene/search/Weight.h"
#include "java/util/Iterator.h"
#include "java/util/Set.h"
#include "java/lang/String.h"
#include "java/util/List.h"
#include "org/apache/lucene/search/IndexSearcher.h"
#include "java/lang/Iterable.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "org/apache/lucene/search/BooleanClause.h"
#include "org/apache/lucene/index/Term.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *BooleanQuery::class$ = NULL;
        jmethodID *BooleanQuery::mids$ = NULL;
        bool BooleanQuery::live$ = false;

        jclass BooleanQuery::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/BooleanQuery");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_init$_bb0c767f] = env->getMethodID(cls, "<init>", "(Z)V");
            mids$[mid_add_982477b6] = env->getMethodID(cls, "add", "(Lorg/apache/lucene/search/BooleanClause;)V");
            mids$[mid_add_827be425] = env->getMethodID(cls, "add", "(Lorg/apache/lucene/search/Query;Lorg/apache/lucene/search/BooleanClause$Occur;)V");
            mids$[mid_clauses_87851566] = env->getMethodID(cls, "clauses", "()Ljava/util/List;");
            mids$[mid_clone_6f9339e7] = env->getMethodID(cls, "clone", "()Lorg/apache/lucene/search/BooleanQuery;");
            mids$[mid_createWeight_367763cb] = env->getMethodID(cls, "createWeight", "(Lorg/apache/lucene/search/IndexSearcher;)Lorg/apache/lucene/search/Weight;");
            mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
            mids$[mid_extractTerms_fb4f2b26] = env->getMethodID(cls, "extractTerms", "(Ljava/util/Set;)V");
            mids$[mid_getClauses_e6b4c83b] = env->getMethodID(cls, "getClauses", "()[Lorg/apache/lucene/search/BooleanClause;");
            mids$[mid_getMaxClauseCount_54c6a179] = env->getStaticMethodID(cls, "getMaxClauseCount", "()I");
            mids$[mid_getMinimumNumberShouldMatch_54c6a179] = env->getMethodID(cls, "getMinimumNumberShouldMatch", "()I");
            mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
            mids$[mid_isCoordDisabled_54c6a16a] = env->getMethodID(cls, "isCoordDisabled", "()Z");
            mids$[mid_iterator_40858c90] = env->getMethodID(cls, "iterator", "()Ljava/util/Iterator;");
            mids$[mid_rewrite_7edcaa43] = env->getMethodID(cls, "rewrite", "(Lorg/apache/lucene/index/IndexReader;)Lorg/apache/lucene/search/Query;");
            mids$[mid_setMaxClauseCount_39c7bd3c] = env->getStaticMethodID(cls, "setMaxClauseCount", "(I)V");
            mids$[mid_setMinimumNumberShouldMatch_39c7bd3c] = env->getMethodID(cls, "setMinimumNumberShouldMatch", "(I)V");
            mids$[mid_toString_97a5258f] = env->getMethodID(cls, "toString", "(Ljava/lang/String;)Ljava/lang/String;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        BooleanQuery::BooleanQuery() : ::org::apache::lucene::search::Query(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        BooleanQuery::BooleanQuery(jboolean a0) : ::org::apache::lucene::search::Query(env->newObject(initializeClass, &mids$, mid_init$_bb0c767f, a0)) {}

        void BooleanQuery::add(const ::org::apache::lucene::search::BooleanClause & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_add_982477b6], a0.this$);
        }

        void BooleanQuery::add(const ::org::apache::lucene::search::Query & a0, const ::org::apache::lucene::search::BooleanClause$Occur & a1) const
        {
          env->callVoidMethod(this$, mids$[mid_add_827be425], a0.this$, a1.this$);
        }

        ::java::util::List BooleanQuery::clauses() const
        {
          return ::java::util::List(env->callObjectMethod(this$, mids$[mid_clauses_87851566]));
        }

        BooleanQuery BooleanQuery::clone() const
        {
          return BooleanQuery(env->callObjectMethod(this$, mids$[mid_clone_6f9339e7]));
        }

        ::org::apache::lucene::search::Weight BooleanQuery::createWeight(const ::org::apache::lucene::search::IndexSearcher & a0) const
        {
          return ::org::apache::lucene::search::Weight(env->callObjectMethod(this$, mids$[mid_createWeight_367763cb], a0.this$));
        }

        jboolean BooleanQuery::equals(const ::java::lang::Object & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
        }

        void BooleanQuery::extractTerms(const ::java::util::Set & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_extractTerms_fb4f2b26], a0.this$);
        }

        JArray< ::org::apache::lucene::search::BooleanClause > BooleanQuery::getClauses() const
        {
          return JArray< ::org::apache::lucene::search::BooleanClause >(env->callObjectMethod(this$, mids$[mid_getClauses_e6b4c83b]));
        }

        jint BooleanQuery::getMaxClauseCount()
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticIntMethod(cls, mids$[mid_getMaxClauseCount_54c6a179]);
        }

        jint BooleanQuery::getMinimumNumberShouldMatch() const
        {
          return env->callIntMethod(this$, mids$[mid_getMinimumNumberShouldMatch_54c6a179]);
        }

        jint BooleanQuery::hashCode() const
        {
          return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
        }

        jboolean BooleanQuery::isCoordDisabled() const
        {
          return env->callBooleanMethod(this$, mids$[mid_isCoordDisabled_54c6a16a]);
        }

        ::java::util::Iterator BooleanQuery::iterator() const
        {
          return ::java::util::Iterator(env->callObjectMethod(this$, mids$[mid_iterator_40858c90]));
        }

        ::org::apache::lucene::search::Query BooleanQuery::rewrite(const ::org::apache::lucene::index::IndexReader & a0) const
        {
          return ::org::apache::lucene::search::Query(env->callObjectMethod(this$, mids$[mid_rewrite_7edcaa43], a0.this$));
        }

        void BooleanQuery::setMaxClauseCount(jint a0)
        {
          jclass cls = env->getClass(initializeClass);
          env->callStaticVoidMethod(cls, mids$[mid_setMaxClauseCount_39c7bd3c], a0);
        }

        void BooleanQuery::setMinimumNumberShouldMatch(jint a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setMinimumNumberShouldMatch_39c7bd3c], a0);
        }

        ::java::lang::String BooleanQuery::toString(const ::java::lang::String & a0) const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_97a5258f], a0.this$));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"
#include "org/apache/lucene/search/BooleanQuery$TooManyClauses.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_BooleanQuery_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_BooleanQuery_instance_(PyTypeObject *type, PyObject *arg);
        static int t_BooleanQuery_init_(t_BooleanQuery *self, PyObject *args, PyObject *kwds);
        static PyObject *t_BooleanQuery_add(t_BooleanQuery *self, PyObject *args);
        static PyObject *t_BooleanQuery_clauses(t_BooleanQuery *self);
        static PyObject *t_BooleanQuery_clone(t_BooleanQuery *self, PyObject *args);
        static PyObject *t_BooleanQuery_createWeight(t_BooleanQuery *self, PyObject *args);
        static PyObject *t_BooleanQuery_equals(t_BooleanQuery *self, PyObject *args);
        static PyObject *t_BooleanQuery_extractTerms(t_BooleanQuery *self, PyObject *args);
        static PyObject *t_BooleanQuery_getClauses(t_BooleanQuery *self);
        static PyObject *t_BooleanQuery_getMaxClauseCount(PyTypeObject *type);
        static PyObject *t_BooleanQuery_getMinimumNumberShouldMatch(t_BooleanQuery *self);
        static PyObject *t_BooleanQuery_hashCode(t_BooleanQuery *self, PyObject *args);
        static PyObject *t_BooleanQuery_isCoordDisabled(t_BooleanQuery *self);
        static PyObject *t_BooleanQuery_iterator(t_BooleanQuery *self);
        static PyObject *t_BooleanQuery_rewrite(t_BooleanQuery *self, PyObject *args);
        static PyObject *t_BooleanQuery_setMaxClauseCount(PyTypeObject *type, PyObject *arg);
        static PyObject *t_BooleanQuery_setMinimumNumberShouldMatch(t_BooleanQuery *self, PyObject *arg);
        static PyObject *t_BooleanQuery_toString(t_BooleanQuery *self, PyObject *args);
        static PyObject *t_BooleanQuery_get__coordDisabled(t_BooleanQuery *self, void *data);
        static PyObject *t_BooleanQuery_get__maxClauseCount(t_BooleanQuery *self, void *data);
        static int t_BooleanQuery_set__maxClauseCount(t_BooleanQuery *self, PyObject *arg, void *data);
        static PyObject *t_BooleanQuery_get__minimumNumberShouldMatch(t_BooleanQuery *self, void *data);
        static int t_BooleanQuery_set__minimumNumberShouldMatch(t_BooleanQuery *self, PyObject *arg, void *data);
        static PyGetSetDef t_BooleanQuery__fields_[] = {
          DECLARE_GET_FIELD(t_BooleanQuery, coordDisabled),
          DECLARE_GETSET_FIELD(t_BooleanQuery, maxClauseCount),
          DECLARE_GETSET_FIELD(t_BooleanQuery, minimumNumberShouldMatch),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_BooleanQuery__methods_[] = {
          DECLARE_METHOD(t_BooleanQuery, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_BooleanQuery, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_BooleanQuery, add, METH_VARARGS),
          DECLARE_METHOD(t_BooleanQuery, clauses, METH_NOARGS),
          DECLARE_METHOD(t_BooleanQuery, clone, METH_VARARGS),
          DECLARE_METHOD(t_BooleanQuery, createWeight, METH_VARARGS),
          DECLARE_METHOD(t_BooleanQuery, equals, METH_VARARGS),
          DECLARE_METHOD(t_BooleanQuery, extractTerms, METH_VARARGS),
          DECLARE_METHOD(t_BooleanQuery, getClauses, METH_NOARGS),
          DECLARE_METHOD(t_BooleanQuery, getMaxClauseCount, METH_NOARGS | METH_CLASS),
          DECLARE_METHOD(t_BooleanQuery, getMinimumNumberShouldMatch, METH_NOARGS),
          DECLARE_METHOD(t_BooleanQuery, hashCode, METH_VARARGS),
          DECLARE_METHOD(t_BooleanQuery, isCoordDisabled, METH_NOARGS),
          DECLARE_METHOD(t_BooleanQuery, iterator, METH_NOARGS),
          DECLARE_METHOD(t_BooleanQuery, rewrite, METH_VARARGS),
          DECLARE_METHOD(t_BooleanQuery, setMaxClauseCount, METH_O | METH_CLASS),
          DECLARE_METHOD(t_BooleanQuery, setMinimumNumberShouldMatch, METH_O),
          DECLARE_METHOD(t_BooleanQuery, toString, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(BooleanQuery, t_BooleanQuery, ::org::apache::lucene::search::Query, BooleanQuery, t_BooleanQuery_init_, ((PyObject *(*)(t_BooleanQuery *)) get_iterator< t_BooleanQuery >), 0, t_BooleanQuery__fields_, 0, 0);

        void t_BooleanQuery::install(PyObject *module)
        {
          installType(&PY_TYPE(BooleanQuery), module, "BooleanQuery", 0);
          PyDict_SetItemString(PY_TYPE(BooleanQuery).tp_dict, "TooManyClauses", make_descriptor(&PY_TYPE(BooleanQuery$TooManyClauses)));
        }

        void t_BooleanQuery::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(BooleanQuery).tp_dict, "class_", make_descriptor(BooleanQuery::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(BooleanQuery).tp_dict, "wrapfn_", make_descriptor(t_BooleanQuery::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(BooleanQuery).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_BooleanQuery_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, BooleanQuery::initializeClass, 1)))
            return NULL;
          return t_BooleanQuery::wrap_Object(BooleanQuery(((t_BooleanQuery *) arg)->object.this$));
        }
        static PyObject *t_BooleanQuery_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, BooleanQuery::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_BooleanQuery_init_(t_BooleanQuery *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 0:
            {
              BooleanQuery object((jobject) NULL);

              INT_CALL(object = BooleanQuery());
              self->object = object;
              break;
            }
            goto err;
           case 1:
            {
              jboolean a0;
              BooleanQuery object((jobject) NULL);

              if (!parseArgs(args, "Z", &a0))
              {
                INT_CALL(object = BooleanQuery(a0));
                self->object = object;
                break;
              }
            }
           default:
           err:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_BooleanQuery_add(t_BooleanQuery *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              ::org::apache::lucene::search::BooleanClause a0((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::search::BooleanClause::initializeClass, &a0))
              {
                OBJ_CALL(self->object.add(a0));
                Py_RETURN_NONE;
              }
            }
            break;
           case 2:
            {
              ::org::apache::lucene::search::Query a0((jobject) NULL);
              ::org::apache::lucene::search::BooleanClause$Occur a1((jobject) NULL);
              PyTypeObject **p1;

              if (!parseArgs(args, "kK", ::org::apache::lucene::search::Query::initializeClass, ::org::apache::lucene::search::BooleanClause$Occur::initializeClass, &a0, &a1, &p1, ::org::apache::lucene::search::t_BooleanClause$Occur::parameters_))
              {
                OBJ_CALL(self->object.add(a0, a1));
                Py_RETURN_NONE;
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "add", args);
          return NULL;
        }

        static PyObject *t_BooleanQuery_clauses(t_BooleanQuery *self)
        {
          ::java::util::List result((jobject) NULL);
          OBJ_CALL(result = self->object.clauses());
          return ::java::util::t_List::wrap_Object(result, &::org::apache::lucene::search::PY_TYPE(BooleanClause));
        }

        static PyObject *t_BooleanQuery_clone(t_BooleanQuery *self, PyObject *args)
        {
          BooleanQuery result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.clone());
            return t_BooleanQuery::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(BooleanQuery), (PyObject *) self, "clone", args, 2);
        }

        static PyObject *t_BooleanQuery_createWeight(t_BooleanQuery *self, PyObject *args)
        {
          ::org::apache::lucene::search::IndexSearcher a0((jobject) NULL);
          ::org::apache::lucene::search::Weight result((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::search::IndexSearcher::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.createWeight(a0));
            return ::org::apache::lucene::search::t_Weight::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(BooleanQuery), (PyObject *) self, "createWeight", args, 2);
        }

        static PyObject *t_BooleanQuery_equals(t_BooleanQuery *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.equals(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(BooleanQuery), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_BooleanQuery_extractTerms(t_BooleanQuery *self, PyObject *args)
        {
          ::java::util::Set a0((jobject) NULL);
          PyTypeObject **p0;

          if (!parseArgs(args, "K", ::java::util::Set::initializeClass, &a0, &p0, ::java::util::t_Set::parameters_))
          {
            OBJ_CALL(self->object.extractTerms(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(BooleanQuery), (PyObject *) self, "extractTerms", args, 2);
        }

        static PyObject *t_BooleanQuery_getClauses(t_BooleanQuery *self)
        {
          JArray< ::org::apache::lucene::search::BooleanClause > result((jobject) NULL);
          OBJ_CALL(result = self->object.getClauses());
          return JArray<jobject>(result.this$).wrap(::org::apache::lucene::search::t_BooleanClause::wrap_jobject);
        }

        static PyObject *t_BooleanQuery_getMaxClauseCount(PyTypeObject *type)
        {
          jint result;
          OBJ_CALL(result = ::org::apache::lucene::search::BooleanQuery::getMaxClauseCount());
          return PyInt_FromLong((long) result);
        }

        static PyObject *t_BooleanQuery_getMinimumNumberShouldMatch(t_BooleanQuery *self)
        {
          jint result;
          OBJ_CALL(result = self->object.getMinimumNumberShouldMatch());
          return PyInt_FromLong((long) result);
        }

        static PyObject *t_BooleanQuery_hashCode(t_BooleanQuery *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hashCode());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(BooleanQuery), (PyObject *) self, "hashCode", args, 2);
        }

        static PyObject *t_BooleanQuery_isCoordDisabled(t_BooleanQuery *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.isCoordDisabled());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_BooleanQuery_iterator(t_BooleanQuery *self)
        {
          ::java::util::Iterator result((jobject) NULL);
          OBJ_CALL(result = self->object.iterator());
          return ::java::util::t_Iterator::wrap_Object(result, &::org::apache::lucene::search::PY_TYPE(BooleanClause));
        }

        static PyObject *t_BooleanQuery_rewrite(t_BooleanQuery *self, PyObject *args)
        {
          ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
          ::org::apache::lucene::search::Query result((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::index::IndexReader::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.rewrite(a0));
            return ::org::apache::lucene::search::t_Query::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(BooleanQuery), (PyObject *) self, "rewrite", args, 2);
        }

        static PyObject *t_BooleanQuery_setMaxClauseCount(PyTypeObject *type, PyObject *arg)
        {
          jint a0;

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(::org::apache::lucene::search::BooleanQuery::setMaxClauseCount(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError(type, "setMaxClauseCount", arg);
          return NULL;
        }

        static PyObject *t_BooleanQuery_setMinimumNumberShouldMatch(t_BooleanQuery *self, PyObject *arg)
        {
          jint a0;

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(self->object.setMinimumNumberShouldMatch(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setMinimumNumberShouldMatch", arg);
          return NULL;
        }

        static PyObject *t_BooleanQuery_toString(t_BooleanQuery *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = self->object.toString(a0));
            return j2p(result);
          }

          return callSuper(&PY_TYPE(BooleanQuery), (PyObject *) self, "toString", args, 2);
        }

        static PyObject *t_BooleanQuery_get__coordDisabled(t_BooleanQuery *self, void *data)
        {
          jboolean value;
          OBJ_CALL(value = self->object.isCoordDisabled());
          Py_RETURN_BOOL(value);
        }

        static PyObject *t_BooleanQuery_get__maxClauseCount(t_BooleanQuery *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object.getMaxClauseCount());
          return PyInt_FromLong((long) value);
        }
        static int t_BooleanQuery_set__maxClauseCount(t_BooleanQuery *self, PyObject *arg, void *data)
        {
          {
            jint value;
            if (!parseArg(arg, "I", &value))
            {
              INT_CALL(self->object.setMaxClauseCount(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "maxClauseCount", arg);
          return -1;
        }

        static PyObject *t_BooleanQuery_get__minimumNumberShouldMatch(t_BooleanQuery *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object.getMinimumNumberShouldMatch());
          return PyInt_FromLong((long) value);
        }
        static int t_BooleanQuery_set__minimumNumberShouldMatch(t_BooleanQuery *self, PyObject *arg, void *data)
        {
          {
            jint value;
            if (!parseArg(arg, "I", &value))
            {
              INT_CALL(self->object.setMinimumNumberShouldMatch(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "minimumNumberShouldMatch", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/highlight/SimpleFragmenter.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/String.h"
#include "org/apache/lucene/search/highlight/Fragmenter.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace highlight {

          ::java::lang::Class *SimpleFragmenter::class$ = NULL;
          jmethodID *SimpleFragmenter::mids$ = NULL;
          bool SimpleFragmenter::live$ = false;

          jclass SimpleFragmenter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/highlight/SimpleFragmenter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_init$_39c7bd3c] = env->getMethodID(cls, "<init>", "(I)V");
              mids$[mid_getFragmentSize_54c6a179] = env->getMethodID(cls, "getFragmentSize", "()I");
              mids$[mid_isNewFragment_54c6a16a] = env->getMethodID(cls, "isNewFragment", "()Z");
              mids$[mid_setFragmentSize_39c7bd3c] = env->getMethodID(cls, "setFragmentSize", "(I)V");
              mids$[mid_start_7d0c5392] = env->getMethodID(cls, "start", "(Ljava/lang/String;Lorg/apache/lucene/analysis/TokenStream;)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          SimpleFragmenter::SimpleFragmenter() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          SimpleFragmenter::SimpleFragmenter(jint a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_39c7bd3c, a0)) {}

          jint SimpleFragmenter::getFragmentSize() const
          {
            return env->callIntMethod(this$, mids$[mid_getFragmentSize_54c6a179]);
          }

          jboolean SimpleFragmenter::isNewFragment() const
          {
            return env->callBooleanMethod(this$, mids$[mid_isNewFragment_54c6a16a]);
          }

          void SimpleFragmenter::setFragmentSize(jint a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setFragmentSize_39c7bd3c], a0);
          }

          void SimpleFragmenter::start(const ::java::lang::String & a0, const ::org::apache::lucene::analysis::TokenStream & a1) const
          {
            env->callVoidMethod(this$, mids$[mid_start_7d0c5392], a0.this$, a1.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace highlight {
          static PyObject *t_SimpleFragmenter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SimpleFragmenter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_SimpleFragmenter_init_(t_SimpleFragmenter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_SimpleFragmenter_getFragmentSize(t_SimpleFragmenter *self);
          static PyObject *t_SimpleFragmenter_isNewFragment(t_SimpleFragmenter *self);
          static PyObject *t_SimpleFragmenter_setFragmentSize(t_SimpleFragmenter *self, PyObject *arg);
          static PyObject *t_SimpleFragmenter_start(t_SimpleFragmenter *self, PyObject *args);
          static PyObject *t_SimpleFragmenter_get__fragmentSize(t_SimpleFragmenter *self, void *data);
          static int t_SimpleFragmenter_set__fragmentSize(t_SimpleFragmenter *self, PyObject *arg, void *data);
          static PyObject *t_SimpleFragmenter_get__newFragment(t_SimpleFragmenter *self, void *data);
          static PyGetSetDef t_SimpleFragmenter__fields_[] = {
            DECLARE_GETSET_FIELD(t_SimpleFragmenter, fragmentSize),
            DECLARE_GET_FIELD(t_SimpleFragmenter, newFragment),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_SimpleFragmenter__methods_[] = {
            DECLARE_METHOD(t_SimpleFragmenter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SimpleFragmenter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SimpleFragmenter, getFragmentSize, METH_NOARGS),
            DECLARE_METHOD(t_SimpleFragmenter, isNewFragment, METH_NOARGS),
            DECLARE_METHOD(t_SimpleFragmenter, setFragmentSize, METH_O),
            DECLARE_METHOD(t_SimpleFragmenter, start, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(SimpleFragmenter, t_SimpleFragmenter, ::java::lang::Object, SimpleFragmenter, t_SimpleFragmenter_init_, 0, 0, t_SimpleFragmenter__fields_, 0, 0);

          void t_SimpleFragmenter::install(PyObject *module)
          {
            installType(&PY_TYPE(SimpleFragmenter), module, "SimpleFragmenter", 0);
          }

          void t_SimpleFragmenter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(SimpleFragmenter).tp_dict, "class_", make_descriptor(SimpleFragmenter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(SimpleFragmenter).tp_dict, "wrapfn_", make_descriptor(t_SimpleFragmenter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(SimpleFragmenter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_SimpleFragmenter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, SimpleFragmenter::initializeClass, 1)))
              return NULL;
            return t_SimpleFragmenter::wrap_Object(SimpleFragmenter(((t_SimpleFragmenter *) arg)->object.this$));
          }
          static PyObject *t_SimpleFragmenter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, SimpleFragmenter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_SimpleFragmenter_init_(t_SimpleFragmenter *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 0:
              {
                SimpleFragmenter object((jobject) NULL);

                INT_CALL(object = SimpleFragmenter());
                self->object = object;
                break;
              }
              goto err;
             case 1:
              {
                jint a0;
                SimpleFragmenter object((jobject) NULL);

                if (!parseArgs(args, "I", &a0))
                {
                  INT_CALL(object = SimpleFragmenter(a0));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_SimpleFragmenter_getFragmentSize(t_SimpleFragmenter *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getFragmentSize());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_SimpleFragmenter_isNewFragment(t_SimpleFragmenter *self)
          {
            jboolean result;
            OBJ_CALL(result = self->object.isNewFragment());
            Py_RETURN_BOOL(result);
          }

          static PyObject *t_SimpleFragmenter_setFragmentSize(t_SimpleFragmenter *self, PyObject *arg)
          {
            jint a0;

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(self->object.setFragmentSize(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setFragmentSize", arg);
            return NULL;
          }

          static PyObject *t_SimpleFragmenter_start(t_SimpleFragmenter *self, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            ::org::apache::lucene::analysis::TokenStream a1((jobject) NULL);

            if (!parseArgs(args, "sk", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0, &a1))
            {
              OBJ_CALL(self->object.start(a0, a1));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "start", args);
            return NULL;
          }

          static PyObject *t_SimpleFragmenter_get__fragmentSize(t_SimpleFragmenter *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getFragmentSize());
            return PyInt_FromLong((long) value);
          }
          static int t_SimpleFragmenter_set__fragmentSize(t_SimpleFragmenter *self, PyObject *arg, void *data)
          {
            {
              jint value;
              if (!parseArg(arg, "I", &value))
              {
                INT_CALL(self->object.setFragmentSize(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "fragmentSize", arg);
            return -1;
          }

          static PyObject *t_SimpleFragmenter_get__newFragment(t_SimpleFragmenter *self, void *data)
          {
            jboolean value;
            OBJ_CALL(value = self->object.isNewFragment());
            Py_RETURN_BOOL(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/standard/builders/DummyQueryNodeBuilder.h"
#include "org/apache/lucene/search/TermQuery.h"
#include "org/apache/lucene/queryparser/flexible/core/QueryNodeException.h"
#include "org/apache/lucene/queryparser/flexible/standard/builders/StandardQueryBuilder.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/QueryNode.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace builders {

              ::java::lang::Class *DummyQueryNodeBuilder::class$ = NULL;
              jmethodID *DummyQueryNodeBuilder::mids$ = NULL;
              bool DummyQueryNodeBuilder::live$ = false;

              jclass DummyQueryNodeBuilder::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/standard/builders/DummyQueryNodeBuilder");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
                  mids$[mid_build_0cc6eb13] = env->getMethodID(cls, "build", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;)Lorg/apache/lucene/search/TermQuery;");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              DummyQueryNodeBuilder::DummyQueryNodeBuilder() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

              ::org::apache::lucene::search::TermQuery DummyQueryNodeBuilder::build(const ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode & a0) const
              {
                return ::org::apache::lucene::search::TermQuery(env->callObjectMethod(this$, mids$[mid_build_0cc6eb13], a0.this$));
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace builders {
              static PyObject *t_DummyQueryNodeBuilder_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_DummyQueryNodeBuilder_instance_(PyTypeObject *type, PyObject *arg);
              static int t_DummyQueryNodeBuilder_init_(t_DummyQueryNodeBuilder *self, PyObject *args, PyObject *kwds);
              static PyObject *t_DummyQueryNodeBuilder_build(t_DummyQueryNodeBuilder *self, PyObject *arg);

              static PyMethodDef t_DummyQueryNodeBuilder__methods_[] = {
                DECLARE_METHOD(t_DummyQueryNodeBuilder, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_DummyQueryNodeBuilder, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_DummyQueryNodeBuilder, build, METH_O),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(DummyQueryNodeBuilder, t_DummyQueryNodeBuilder, ::java::lang::Object, DummyQueryNodeBuilder, t_DummyQueryNodeBuilder_init_, 0, 0, 0, 0, 0);

              void t_DummyQueryNodeBuilder::install(PyObject *module)
              {
                installType(&PY_TYPE(DummyQueryNodeBuilder), module, "DummyQueryNodeBuilder", 0);
              }

              void t_DummyQueryNodeBuilder::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(DummyQueryNodeBuilder).tp_dict, "class_", make_descriptor(DummyQueryNodeBuilder::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(DummyQueryNodeBuilder).tp_dict, "wrapfn_", make_descriptor(t_DummyQueryNodeBuilder::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(DummyQueryNodeBuilder).tp_dict, "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_DummyQueryNodeBuilder_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, DummyQueryNodeBuilder::initializeClass, 1)))
                  return NULL;
                return t_DummyQueryNodeBuilder::wrap_Object(DummyQueryNodeBuilder(((t_DummyQueryNodeBuilder *) arg)->object.this$));
              }
              static PyObject *t_DummyQueryNodeBuilder_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, DummyQueryNodeBuilder::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_DummyQueryNodeBuilder_init_(t_DummyQueryNodeBuilder *self, PyObject *args, PyObject *kwds)
              {
                DummyQueryNodeBuilder object((jobject) NULL);

                INT_CALL(object = DummyQueryNodeBuilder());
                self->object = object;

                return 0;
              }

              static PyObject *t_DummyQueryNodeBuilder_build(t_DummyQueryNodeBuilder *self, PyObject *arg)
              {
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode a0((jobject) NULL);
                ::org::apache::lucene::search::TermQuery result((jobject) NULL);

                if (!parseArg(arg, "k", ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode::initializeClass, &a0))
                {
                  OBJ_CALL(result = self->object.build(a0));
                  return ::org::apache::lucene::search::t_TermQuery::wrap_Object(result);
                }

                PyErr_SetArgsError((PyObject *) self, "build", arg);
                return NULL;
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/gl/GalicianMinimalStemFilterFactory.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/String.h"
#include "java/util/Map.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace gl {

          ::java::lang::Class *GalicianMinimalStemFilterFactory::class$ = NULL;
          jmethodID *GalicianMinimalStemFilterFactory::mids$ = NULL;
          bool GalicianMinimalStemFilterFactory::live$ = false;

          jclass GalicianMinimalStemFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/gl/GalicianMinimalStemFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4c9e2b1c] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_a65cd6ab] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/TokenStream;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          GalicianMinimalStemFilterFactory::GalicianMinimalStemFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_4c9e2b1c, a0.this$)) {}

          ::org::apache::lucene::analysis::TokenStream GalicianMinimalStemFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::TokenStream(env->callObjectMethod(this$, mids$[mid_create_a65cd6ab], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace gl {
          static PyObject *t_GalicianMinimalStemFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_GalicianMinimalStemFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_GalicianMinimalStemFilterFactory_init_(t_GalicianMinimalStemFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_GalicianMinimalStemFilterFactory_create(t_GalicianMinimalStemFilterFactory *self, PyObject *args);

          static PyMethodDef t_GalicianMinimalStemFilterFactory__methods_[] = {
            DECLARE_METHOD(t_GalicianMinimalStemFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_GalicianMinimalStemFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_GalicianMinimalStemFilterFactory, create, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(GalicianMinimalStemFilterFactory, t_GalicianMinimalStemFilterFactory, ::org::apache::lucene::analysis::util::TokenFilterFactory, GalicianMinimalStemFilterFactory, t_GalicianMinimalStemFilterFactory_init_, 0, 0, 0, 0, 0);

          void t_GalicianMinimalStemFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(GalicianMinimalStemFilterFactory), module, "GalicianMinimalStemFilterFactory", 0);
          }

          void t_GalicianMinimalStemFilterFactory::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(GalicianMinimalStemFilterFactory).tp_dict, "class_", make_descriptor(GalicianMinimalStemFilterFactory::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(GalicianMinimalStemFilterFactory).tp_dict, "wrapfn_", make_descriptor(t_GalicianMinimalStemFilterFactory::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(GalicianMinimalStemFilterFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_GalicianMinimalStemFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, GalicianMinimalStemFilterFactory::initializeClass, 1)))
              return NULL;
            return t_GalicianMinimalStemFilterFactory::wrap_Object(GalicianMinimalStemFilterFactory(((t_GalicianMinimalStemFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_GalicianMinimalStemFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, GalicianMinimalStemFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_GalicianMinimalStemFilterFactory_init_(t_GalicianMinimalStemFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            GalicianMinimalStemFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = GalicianMinimalStemFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_GalicianMinimalStemFilterFactory_create(t_GalicianMinimalStemFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::TokenStream result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::t_TokenStream::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(GalicianMinimalStemFilterFactory), (PyObject *) self, "create", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/suggest/Lookup$LookupPriorityQueue.h"
#include "org/apache/lucene/search/suggest/Lookup$LookupResult.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace suggest {

          ::java::lang::Class *Lookup$LookupPriorityQueue::class$ = NULL;
          jmethodID *Lookup$LookupPriorityQueue::mids$ = NULL;
          bool Lookup$LookupPriorityQueue::live$ = false;

          jclass Lookup$LookupPriorityQueue::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/suggest/Lookup$LookupPriorityQueue");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_39c7bd3c] = env->getMethodID(cls, "<init>", "(I)V");
              mids$[mid_getResults_95554974] = env->getMethodID(cls, "getResults", "()[Lorg/apache/lucene/search/suggest/Lookup$LookupResult;");
              mids$[mid_lessThan_4deadb0a] = env->getMethodID(cls, "lessThan", "(Lorg/apache/lucene/search/suggest/Lookup$LookupResult;Lorg/apache/lucene/search/suggest/Lookup$LookupResult;)Z");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          Lookup$LookupPriorityQueue::Lookup$LookupPriorityQueue(jint a0) : ::org::apache::lucene::util::PriorityQueue(env->newObject(initializeClass, &mids$, mid_init$_39c7bd3c, a0)) {}

          JArray< ::org::apache::lucene::search::suggest::Lookup$LookupResult > Lookup$LookupPriorityQueue::getResults() const
          {
            return JArray< ::org::apache::lucene::search::suggest::Lookup$LookupResult >(env->callObjectMethod(this$, mids$[mid_getResults_95554974]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace suggest {
          static PyObject *t_Lookup$LookupPriorityQueue_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Lookup$LookupPriorityQueue_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Lookup$LookupPriorityQueue_of_(t_Lookup$LookupPriorityQueue *self, PyObject *args);
          static int t_Lookup$LookupPriorityQueue_init_(t_Lookup$LookupPriorityQueue *self, PyObject *args, PyObject *kwds);
          static PyObject *t_Lookup$LookupPriorityQueue_getResults(t_Lookup$LookupPriorityQueue *self);
          static PyObject *t_Lookup$LookupPriorityQueue_get__results(t_Lookup$LookupPriorityQueue *self, void *data);
          static PyObject *t_Lookup$LookupPriorityQueue_get__parameters_(t_Lookup$LookupPriorityQueue *self, void *data);
          static PyGetSetDef t_Lookup$LookupPriorityQueue__fields_[] = {
            DECLARE_GET_FIELD(t_Lookup$LookupPriorityQueue, results),
            DECLARE_GET_FIELD(t_Lookup$LookupPriorityQueue, parameters_),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_Lookup$LookupPriorityQueue__methods_[] = {
            DECLARE_METHOD(t_Lookup$LookupPriorityQueue, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lookup$LookupPriorityQueue, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lookup$LookupPriorityQueue, of_, METH_VARARGS),
            DECLARE_METHOD(t_Lookup$LookupPriorityQueue, getResults, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(Lookup$LookupPriorityQueue, t_Lookup$LookupPriorityQueue, ::org::apache::lucene::util::PriorityQueue, Lookup$LookupPriorityQueue, t_Lookup$LookupPriorityQueue_init_, 0, 0, t_Lookup$LookupPriorityQueue__fields_, 0, 0);
          PyObject *t_Lookup$LookupPriorityQueue::wrap_Object(const Lookup$LookupPriorityQueue& object, PyTypeObject *p0)
          {
            PyObject *obj = t_Lookup$LookupPriorityQueue::wrap_Object(object);
            if (obj != NULL && obj != Py_None)
            {
              t_Lookup$LookupPriorityQueue *self = (t_Lookup$LookupPriorityQueue *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          PyObject *t_Lookup$LookupPriorityQueue::wrap_jobject(const jobject& object, PyTypeObject *p0)
          {
            PyObject *obj = t_Lookup$LookupPriorityQueue::wrap_jobject(object);
            if (obj != NULL && obj != Py_None)
            {
              t_Lookup$LookupPriorityQueue *self = (t_Lookup$LookupPriorityQueue *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          void t_Lookup$LookupPriorityQueue::install(PyObject *module)
          {
            installType(&PY_TYPE(Lookup$LookupPriorityQueue), module, "Lookup$LookupPriorityQueue", 0);
          }

          void t_Lookup$LookupPriorityQueue::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(Lookup$LookupPriorityQueue).tp_dict, "class_", make_descriptor(Lookup$LookupPriorityQueue::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(Lookup$LookupPriorityQueue).tp_dict, "wrapfn_", make_descriptor(t_Lookup$LookupPriorityQueue::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(Lookup$LookupPriorityQueue).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_Lookup$LookupPriorityQueue_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, Lookup$LookupPriorityQueue::initializeClass, 1)))
              return NULL;
            return t_Lookup$LookupPriorityQueue::wrap_Object(Lookup$LookupPriorityQueue(((t_Lookup$LookupPriorityQueue *) arg)->object.this$));
          }
          static PyObject *t_Lookup$LookupPriorityQueue_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, Lookup$LookupPriorityQueue::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_Lookup$LookupPriorityQueue_of_(t_Lookup$LookupPriorityQueue *self, PyObject *args)
          {
            if (!parseArg(args, "T", 1, &(self->parameters)))
              Py_RETURN_SELF;
            return PyErr_SetArgsError((PyObject *) self, "of_", args);
          }

          static int t_Lookup$LookupPriorityQueue_init_(t_Lookup$LookupPriorityQueue *self, PyObject *args, PyObject *kwds)
          {
            jint a0;
            Lookup$LookupPriorityQueue object((jobject) NULL);

            if (!parseArgs(args, "I", &a0))
            {
              INT_CALL(object = Lookup$LookupPriorityQueue(a0));
              self->object = object;
              self->parameters[0] = &::org::apache::lucene::search::suggest::PY_TYPE(Lookup$LookupResult);
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_Lookup$LookupPriorityQueue_getResults(t_Lookup$LookupPriorityQueue *self)
          {
            JArray< ::org::apache::lucene::search::suggest::Lookup$LookupResult > result((jobject) NULL);
            OBJ_CALL(result = self->object.getResults());
            return JArray<jobject>(result.this$).wrap(::org::apache::lucene::search::suggest::t_Lookup$LookupResult::wrap_jobject);
          }
          static PyObject *t_Lookup$LookupPriorityQueue_get__parameters_(t_Lookup$LookupPriorityQueue *self, void *data)
          {
            return typeParameters(self->parameters, sizeof(self->parameters));
          }

          static PyObject *t_Lookup$LookupPriorityQueue_get__results(t_Lookup$LookupPriorityQueue *self, void *data)
          {
            JArray< ::org::apache::lucene::search::suggest::Lookup$LookupResult > value((jobject) NULL);
            OBJ_CALL(value = self->object.getResults());
            return JArray<jobject>(value.this$).wrap(::org::apache::lucene::search::suggest::t_Lookup$LookupResult::wrap_jobject);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/fr/FrenchStemmer.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace fr {

          ::java::lang::Class *FrenchStemmer::class$ = NULL;
          jmethodID *FrenchStemmer::mids$ = NULL;
          bool FrenchStemmer::live$ = false;

          jclass FrenchStemmer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/fr/FrenchStemmer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_stem_97a5258f] = env->getMethodID(cls, "stem", "(Ljava/lang/String;)Ljava/lang/String;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          FrenchStemmer::FrenchStemmer() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace fr {
          static PyObject *t_FrenchStemmer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_FrenchStemmer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_FrenchStemmer_init_(t_FrenchStemmer *self, PyObject *args, PyObject *kwds);

          static PyMethodDef t_FrenchStemmer__methods_[] = {
            DECLARE_METHOD(t_FrenchStemmer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FrenchStemmer, instance_, METH_O | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(FrenchStemmer, t_FrenchStemmer, ::java::lang::Object, FrenchStemmer, t_FrenchStemmer_init_, 0, 0, 0, 0, 0);

          void t_FrenchStemmer::install(PyObject *module)
          {
            installType(&PY_TYPE(FrenchStemmer), module, "FrenchStemmer", 0);
          }

          void t_FrenchStemmer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(FrenchStemmer).tp_dict, "class_", make_descriptor(FrenchStemmer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(FrenchStemmer).tp_dict, "wrapfn_", make_descriptor(t_FrenchStemmer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(FrenchStemmer).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_FrenchStemmer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, FrenchStemmer::initializeClass, 1)))
              return NULL;
            return t_FrenchStemmer::wrap_Object(FrenchStemmer(((t_FrenchStemmer *) arg)->object.this$));
          }
          static PyObject *t_FrenchStemmer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, FrenchStemmer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_FrenchStemmer_init_(t_FrenchStemmer *self, PyObject *args, PyObject *kwds)
          {
            FrenchStemmer object((jobject) NULL);

            INT_CALL(object = FrenchStemmer());
            self->object = object;

            return 0;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/suggest/BufferingTermFreqIteratorWrapper.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "java/util/Comparator.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/search/spell/TermFreqIterator.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace suggest {

          ::java::lang::Class *BufferingTermFreqIteratorWrapper::class$ = NULL;
          jmethodID *BufferingTermFreqIteratorWrapper::mids$ = NULL;
          bool BufferingTermFreqIteratorWrapper::live$ = false;

          jclass BufferingTermFreqIteratorWrapper::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/suggest/BufferingTermFreqIteratorWrapper");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_b57afdd1] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/spell/TermFreqIterator;)V");
              mids$[mid_getComparator_5a7ff2fc] = env->getMethodID(cls, "getComparator", "()Ljava/util/Comparator;");
              mids$[mid_next_4ae19461] = env->getMethodID(cls, "next", "()Lorg/apache/lucene/util/BytesRef;");
              mids$[mid_weight_54c6a17a] = env->getMethodID(cls, "weight", "()J");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          BufferingTermFreqIteratorWrapper::BufferingTermFreqIteratorWrapper(const ::org::apache::lucene::search::spell::TermFreqIterator & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_b57afdd1, a0.this$)) {}

          ::java::util::Comparator BufferingTermFreqIteratorWrapper::getComparator() const
          {
            return ::java::util::Comparator(env->callObjectMethod(this$, mids$[mid_getComparator_5a7ff2fc]));
          }

          ::org::apache::lucene::util::BytesRef BufferingTermFreqIteratorWrapper::next() const
          {
            return ::org::apache::lucene::util::BytesRef(env->callObjectMethod(this$, mids$[mid_next_4ae19461]));
          }

          jlong BufferingTermFreqIteratorWrapper::weight() const
          {
            return env->callLongMethod(this$, mids$[mid_weight_54c6a17a]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace suggest {
          static PyObject *t_BufferingTermFreqIteratorWrapper_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_BufferingTermFreqIteratorWrapper_instance_(PyTypeObject *type, PyObject *arg);
          static int t_BufferingTermFreqIteratorWrapper_init_(t_BufferingTermFreqIteratorWrapper *self, PyObject *args, PyObject *kwds);
          static PyObject *t_BufferingTermFreqIteratorWrapper_getComparator(t_BufferingTermFreqIteratorWrapper *self);
          static PyObject *t_BufferingTermFreqIteratorWrapper_next(t_BufferingTermFreqIteratorWrapper *self);
          static PyObject *t_BufferingTermFreqIteratorWrapper_weight(t_BufferingTermFreqIteratorWrapper *self);
          static PyObject *t_BufferingTermFreqIteratorWrapper_get__comparator(t_BufferingTermFreqIteratorWrapper *self, void *data);
          static PyGetSetDef t_BufferingTermFreqIteratorWrapper__fields_[] = {
            DECLARE_GET_FIELD(t_BufferingTermFreqIteratorWrapper, comparator),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_BufferingTermFreqIteratorWrapper__methods_[] = {
            DECLARE_METHOD(t_BufferingTermFreqIteratorWrapper, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_BufferingTermFreqIteratorWrapper, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_BufferingTermFreqIteratorWrapper, getComparator, METH_NOARGS),
            DECLARE_METHOD(t_BufferingTermFreqIteratorWrapper, next, METH_NOARGS),
            DECLARE_METHOD(t_BufferingTermFreqIteratorWrapper, weight, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(BufferingTermFreqIteratorWrapper, t_BufferingTermFreqIteratorWrapper, ::java::lang::Object, BufferingTermFreqIteratorWrapper, t_BufferingTermFreqIteratorWrapper_init_, PyObject_SelfIter, ((PyObject *(*)(t_BufferingTermFreqIteratorWrapper *)) get_next< t_BufferingTermFreqIteratorWrapper,::org::apache::lucene::util::t_BytesRef,::org::apache::lucene::util::BytesRef >), t_BufferingTermFreqIteratorWrapper__fields_, 0, 0);

          void t_BufferingTermFreqIteratorWrapper::install(PyObject *module)
          {
            installType(&PY_TYPE(BufferingTermFreqIteratorWrapper), module, "BufferingTermFreqIteratorWrapper", 0);
          }

          void t_BufferingTermFreqIteratorWrapper::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(BufferingTermFreqIteratorWrapper).tp_dict, "class_", make_descriptor(BufferingTermFreqIteratorWrapper::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(BufferingTermFreqIteratorWrapper).tp_dict, "wrapfn_", make_descriptor(t_BufferingTermFreqIteratorWrapper::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(BufferingTermFreqIteratorWrapper).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_BufferingTermFreqIteratorWrapper_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, BufferingTermFreqIteratorWrapper::initializeClass, 1)))
              return NULL;
            return t_BufferingTermFreqIteratorWrapper::wrap_Object(BufferingTermFreqIteratorWrapper(((t_BufferingTermFreqIteratorWrapper *) arg)->object.this$));
          }
          static PyObject *t_BufferingTermFreqIteratorWrapper_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, BufferingTermFreqIteratorWrapper::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_BufferingTermFreqIteratorWrapper_init_(t_BufferingTermFreqIteratorWrapper *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::search::spell::TermFreqIterator a0((jobject) NULL);
            BufferingTermFreqIteratorWrapper object((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::search::spell::TermFreqIterator::initializeClass, &a0))
            {
              INT_CALL(object = BufferingTermFreqIteratorWrapper(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_BufferingTermFreqIteratorWrapper_getComparator(t_BufferingTermFreqIteratorWrapper *self)
          {
            ::java::util::Comparator result((jobject) NULL);
            OBJ_CALL(result = self->object.getComparator());
            return ::java::util::t_Comparator::wrap_Object(result, &::org::apache::lucene::util::PY_TYPE(BytesRef));
          }

          static PyObject *t_BufferingTermFreqIteratorWrapper_next(t_BufferingTermFreqIteratorWrapper *self)
          {
            ::org::apache::lucene::util::BytesRef result((jobject) NULL);
            OBJ_CALL(result = self->object.next());
            return ::org::apache::lucene::util::t_BytesRef::wrap_Object(result);
          }

          static PyObject *t_BufferingTermFreqIteratorWrapper_weight(t_BufferingTermFreqIteratorWrapper *self)
          {
            jlong result;
            OBJ_CALL(result = self->object.weight());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          static PyObject *t_BufferingTermFreqIteratorWrapper_get__comparator(t_BufferingTermFreqIteratorWrapper *self, void *data)
          {
            ::java::util::Comparator value((jobject) NULL);
            OBJ_CALL(value = self->object.getComparator());
            return ::java::util::t_Comparator::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/lucene45/Lucene45DocValuesFormat.h"
#include "org/apache/lucene/index/SegmentReadState.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/codecs/DocValuesConsumer.h"
#include "org/apache/lucene/index/SegmentWriteState.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/codecs/DocValuesProducer.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace lucene45 {

          ::java::lang::Class *Lucene45DocValuesFormat::class$ = NULL;
          jmethodID *Lucene45DocValuesFormat::mids$ = NULL;
          bool Lucene45DocValuesFormat::live$ = false;

          jclass Lucene45DocValuesFormat::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/lucene45/Lucene45DocValuesFormat");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_fieldsConsumer_025deb44] = env->getMethodID(cls, "fieldsConsumer", "(Lorg/apache/lucene/index/SegmentWriteState;)Lorg/apache/lucene/codecs/DocValuesConsumer;");
              mids$[mid_fieldsProducer_9b0d4e4a] = env->getMethodID(cls, "fieldsProducer", "(Lorg/apache/lucene/index/SegmentReadState;)Lorg/apache/lucene/codecs/DocValuesProducer;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          Lucene45DocValuesFormat::Lucene45DocValuesFormat() : ::org::apache::lucene::codecs::DocValuesFormat(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          ::org::apache::lucene::codecs::DocValuesConsumer Lucene45DocValuesFormat::fieldsConsumer(const ::org::apache::lucene::index::SegmentWriteState & a0) const
          {
            return ::org::apache::lucene::codecs::DocValuesConsumer(env->callObjectMethod(this$, mids$[mid_fieldsConsumer_025deb44], a0.this$));
          }

          ::org::apache::lucene::codecs::DocValuesProducer Lucene45DocValuesFormat::fieldsProducer(const ::org::apache::lucene::index::SegmentReadState & a0) const
          {
            return ::org::apache::lucene::codecs::DocValuesProducer(env->callObjectMethod(this$, mids$[mid_fieldsProducer_9b0d4e4a], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace lucene45 {
          static PyObject *t_Lucene45DocValuesFormat_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Lucene45DocValuesFormat_instance_(PyTypeObject *type, PyObject *arg);
          static int t_Lucene45DocValuesFormat_init_(t_Lucene45DocValuesFormat *self, PyObject *args, PyObject *kwds);
          static PyObject *t_Lucene45DocValuesFormat_fieldsConsumer(t_Lucene45DocValuesFormat *self, PyObject *args);
          static PyObject *t_Lucene45DocValuesFormat_fieldsProducer(t_Lucene45DocValuesFormat *self, PyObject *args);

          static PyMethodDef t_Lucene45DocValuesFormat__methods_[] = {
            DECLARE_METHOD(t_Lucene45DocValuesFormat, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lucene45DocValuesFormat, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lucene45DocValuesFormat, fieldsConsumer, METH_VARARGS),
            DECLARE_METHOD(t_Lucene45DocValuesFormat, fieldsProducer, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(Lucene45DocValuesFormat, t_Lucene45DocValuesFormat, ::org::apache::lucene::codecs::DocValuesFormat, Lucene45DocValuesFormat, t_Lucene45DocValuesFormat_init_, 0, 0, 0, 0, 0);

          void t_Lucene45DocValuesFormat::install(PyObject *module)
          {
            installType(&PY_TYPE(Lucene45DocValuesFormat), module, "Lucene45DocValuesFormat", 0);
          }

          void t_Lucene45DocValuesFormat::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(Lucene45DocValuesFormat).tp_dict, "class_", make_descriptor(Lucene45DocValuesFormat::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(Lucene45DocValuesFormat).tp_dict, "wrapfn_", make_descriptor(t_Lucene45DocValuesFormat::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(Lucene45DocValuesFormat).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_Lucene45DocValuesFormat_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, Lucene45DocValuesFormat::initializeClass, 1)))
              return NULL;
            return t_Lucene45DocValuesFormat::wrap_Object(Lucene45DocValuesFormat(((t_Lucene45DocValuesFormat *) arg)->object.this$));
          }
          static PyObject *t_Lucene45DocValuesFormat_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, Lucene45DocValuesFormat::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_Lucene45DocValuesFormat_init_(t_Lucene45DocValuesFormat *self, PyObject *args, PyObject *kwds)
          {
            Lucene45DocValuesFormat object((jobject) NULL);

            INT_CALL(object = Lucene45DocValuesFormat());
            self->object = object;

            return 0;
          }

          static PyObject *t_Lucene45DocValuesFormat_fieldsConsumer(t_Lucene45DocValuesFormat *self, PyObject *args)
          {
            ::org::apache::lucene::index::SegmentWriteState a0((jobject) NULL);
            ::org::apache::lucene::codecs::DocValuesConsumer result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::index::SegmentWriteState::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.fieldsConsumer(a0));
              return ::org::apache::lucene::codecs::t_DocValuesConsumer::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(Lucene45DocValuesFormat), (PyObject *) self, "fieldsConsumer", args, 2);
          }

          static PyObject *t_Lucene45DocValuesFormat_fieldsProducer(t_Lucene45DocValuesFormat *self, PyObject *args)
          {
            ::org::apache::lucene::index::SegmentReadState a0((jobject) NULL);
            ::org::apache::lucene::codecs::DocValuesProducer result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::index::SegmentReadState::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.fieldsProducer(a0));
              return ::org::apache::lucene::codecs::t_DocValuesProducer::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(Lucene45DocValuesFormat), (PyObject *) self, "fieldsProducer", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/sandbox/queries/DuplicateFilter$KeepMode.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace sandbox {
        namespace queries {

          ::java::lang::Class *DuplicateFilter$KeepMode::class$ = NULL;
          jmethodID *DuplicateFilter$KeepMode::mids$ = NULL;
          bool DuplicateFilter$KeepMode::live$ = false;
          DuplicateFilter$KeepMode *DuplicateFilter$KeepMode::KM_USE_FIRST_OCCURRENCE = NULL;
          DuplicateFilter$KeepMode *DuplicateFilter$KeepMode::KM_USE_LAST_OCCURRENCE = NULL;

          jclass DuplicateFilter$KeepMode::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/sandbox/queries/DuplicateFilter$KeepMode");

              mids$ = new jmethodID[max_mid];
              mids$[mid_valueOf_06462cf5] = env->getStaticMethodID(cls, "valueOf", "(Ljava/lang/String;)Lorg/apache/lucene/sandbox/queries/DuplicateFilter$KeepMode;");
              mids$[mid_values_3fb3ce7b] = env->getStaticMethodID(cls, "values", "()[Lorg/apache/lucene/sandbox/queries/DuplicateFilter$KeepMode;");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              KM_USE_FIRST_OCCURRENCE = new DuplicateFilter$KeepMode(env->getStaticObjectField(cls, "KM_USE_FIRST_OCCURRENCE", "Lorg/apache/lucene/sandbox/queries/DuplicateFilter$KeepMode;"));
              KM_USE_LAST_OCCURRENCE = new DuplicateFilter$KeepMode(env->getStaticObjectField(cls, "KM_USE_LAST_OCCURRENCE", "Lorg/apache/lucene/sandbox/queries/DuplicateFilter$KeepMode;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          DuplicateFilter$KeepMode DuplicateFilter$KeepMode::valueOf(const ::java::lang::String & a0)
          {
            jclass cls = env->getClass(initializeClass);
            return DuplicateFilter$KeepMode(env->callStaticObjectMethod(cls, mids$[mid_valueOf_06462cf5], a0.this$));
          }

          JArray< DuplicateFilter$KeepMode > DuplicateFilter$KeepMode::values()
          {
            jclass cls = env->getClass(initializeClass);
            return JArray< DuplicateFilter$KeepMode >(env->callStaticObjectMethod(cls, mids$[mid_values_3fb3ce7b]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace sandbox {
        namespace queries {
          static PyObject *t_DuplicateFilter$KeepMode_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_DuplicateFilter$KeepMode_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_DuplicateFilter$KeepMode_of_(t_DuplicateFilter$KeepMode *self, PyObject *args);
          static PyObject *t_DuplicateFilter$KeepMode_valueOf(PyTypeObject *type, PyObject *args);
          static PyObject *t_DuplicateFilter$KeepMode_values(PyTypeObject *type);
          static PyObject *t_DuplicateFilter$KeepMode_get__parameters_(t_DuplicateFilter$KeepMode *self, void *data);
          static PyGetSetDef t_DuplicateFilter$KeepMode__fields_[] = {
            DECLARE_GET_FIELD(t_DuplicateFilter$KeepMode, parameters_),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_DuplicateFilter$KeepMode__methods_[] = {
            DECLARE_METHOD(t_DuplicateFilter$KeepMode, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_DuplicateFilter$KeepMode, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_DuplicateFilter$KeepMode, of_, METH_VARARGS),
            DECLARE_METHOD(t_DuplicateFilter$KeepMode, valueOf, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_DuplicateFilter$KeepMode, values, METH_NOARGS | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(DuplicateFilter$KeepMode, t_DuplicateFilter$KeepMode, ::java::lang::Enum, DuplicateFilter$KeepMode, abstract_init, 0, 0, t_DuplicateFilter$KeepMode__fields_, 0, 0);
          PyObject *t_DuplicateFilter$KeepMode::wrap_Object(const DuplicateFilter$KeepMode& object, PyTypeObject *p0)
          {
            PyObject *obj = t_DuplicateFilter$KeepMode::wrap_Object(object);
            if (obj != NULL && obj != Py_None)
            {
              t_DuplicateFilter$KeepMode *self = (t_DuplicateFilter$KeepMode *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          PyObject *t_DuplicateFilter$KeepMode::wrap_jobject(const jobject& object, PyTypeObject *p0)
          {
            PyObject *obj = t_DuplicateFilter$KeepMode::wrap_jobject(object);
            if (obj != NULL && obj != Py_None)
            {
              t_DuplicateFilter$KeepMode *self = (t_DuplicateFilter$KeepMode *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          void t_DuplicateFilter$KeepMode::install(PyObject *module)
          {
            installType(&PY_TYPE(DuplicateFilter$KeepMode), module, "DuplicateFilter$KeepMode", 0);
          }

          void t_DuplicateFilter$KeepMode::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(DuplicateFilter$KeepMode).tp_dict, "class_", make_descriptor(DuplicateFilter$KeepMode::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(DuplicateFilter$KeepMode).tp_dict, "wrapfn_", make_descriptor(t_DuplicateFilter$KeepMode::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(DuplicateFilter$KeepMode).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(DuplicateFilter$KeepMode::initializeClass);
            PyDict_SetItemString(PY_TYPE(DuplicateFilter$KeepMode).tp_dict, "KM_USE_FIRST_OCCURRENCE", make_descriptor(t_DuplicateFilter$KeepMode::wrap_Object(*DuplicateFilter$KeepMode::KM_USE_FIRST_OCCURRENCE)));
            PyDict_SetItemString(PY_TYPE(DuplicateFilter$KeepMode).tp_dict, "KM_USE_LAST_OCCURRENCE", make_descriptor(t_DuplicateFilter$KeepMode::wrap_Object(*DuplicateFilter$KeepMode::KM_USE_LAST_OCCURRENCE)));
          }

          static PyObject *t_DuplicateFilter$KeepMode_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, DuplicateFilter$KeepMode::initializeClass, 1)))
              return NULL;
            return t_DuplicateFilter$KeepMode::wrap_Object(DuplicateFilter$KeepMode(((t_DuplicateFilter$KeepMode *) arg)->object.this$));
          }
          static PyObject *t_DuplicateFilter$KeepMode_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, DuplicateFilter$KeepMode::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_DuplicateFilter$KeepMode_of_(t_DuplicateFilter$KeepMode *self, PyObject *args)
          {
            if (!parseArg(args, "T", 1, &(self->parameters)))
              Py_RETURN_SELF;
            return PyErr_SetArgsError((PyObject *) self, "of_", args);
          }

          static PyObject *t_DuplicateFilter$KeepMode_valueOf(PyTypeObject *type, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            DuplicateFilter$KeepMode result((jobject) NULL);

            if (!parseArgs(args, "s", &a0))
            {
              OBJ_CALL(result = ::org::apache::lucene::sandbox::queries::DuplicateFilter$KeepMode::valueOf(a0));
              return t_DuplicateFilter$KeepMode::wrap_Object(result);
            }

            return callSuper(type, "valueOf", args, 2);
          }

          static PyObject *t_DuplicateFilter$KeepMode_values(PyTypeObject *type)
          {
            JArray< DuplicateFilter$KeepMode > result((jobject) NULL);
            OBJ_CALL(result = ::org::apache::lucene::sandbox::queries::DuplicateFilter$KeepMode::values());
            return JArray<jobject>(result.this$).wrap(t_DuplicateFilter$KeepMode::wrap_jobject);
          }
          static PyObject *t_DuplicateFilter$KeepMode_get__parameters_(t_DuplicateFilter$KeepMode *self, void *data)
          {
            return typeParameters(self->parameters, sizeof(self->parameters));
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/SearcherLifetimeManager$Pruner.h"
#include "org/apache/lucene/search/IndexSearcher.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *SearcherLifetimeManager$Pruner::class$ = NULL;
        jmethodID *SearcherLifetimeManager$Pruner::mids$ = NULL;
        bool SearcherLifetimeManager$Pruner::live$ = false;

        jclass SearcherLifetimeManager$Pruner::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/SearcherLifetimeManager$Pruner");

            mids$ = new jmethodID[max_mid];
            mids$[mid_doPrune_362c747b] = env->getMethodID(cls, "doPrune", "(DLorg/apache/lucene/search/IndexSearcher;)Z");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        jboolean SearcherLifetimeManager$Pruner::doPrune(jdouble a0, const ::org::apache::lucene::search::IndexSearcher & a1) const
        {
          return env->callBooleanMethod(this$, mids$[mid_doPrune_362c747b], a0, a1.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_SearcherLifetimeManager$Pruner_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_SearcherLifetimeManager$Pruner_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_SearcherLifetimeManager$Pruner_doPrune(t_SearcherLifetimeManager$Pruner *self, PyObject *args);

        static PyMethodDef t_SearcherLifetimeManager$Pruner__methods_[] = {
          DECLARE_METHOD(t_SearcherLifetimeManager$Pruner, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SearcherLifetimeManager$Pruner, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SearcherLifetimeManager$Pruner, doPrune, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(SearcherLifetimeManager$Pruner, t_SearcherLifetimeManager$Pruner, ::java::lang::Object, SearcherLifetimeManager$Pruner, abstract_init, 0, 0, 0, 0, 0);

        void t_SearcherLifetimeManager$Pruner::install(PyObject *module)
        {
          installType(&PY_TYPE(SearcherLifetimeManager$Pruner), module, "SearcherLifetimeManager$Pruner", 0);
        }

        void t_SearcherLifetimeManager$Pruner::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(SearcherLifetimeManager$Pruner).tp_dict, "class_", make_descriptor(SearcherLifetimeManager$Pruner::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(SearcherLifetimeManager$Pruner).tp_dict, "wrapfn_", make_descriptor(t_SearcherLifetimeManager$Pruner::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(SearcherLifetimeManager$Pruner).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_SearcherLifetimeManager$Pruner_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, SearcherLifetimeManager$Pruner::initializeClass, 1)))
            return NULL;
          return t_SearcherLifetimeManager$Pruner::wrap_Object(SearcherLifetimeManager$Pruner(((t_SearcherLifetimeManager$Pruner *) arg)->object.this$));
        }
        static PyObject *t_SearcherLifetimeManager$Pruner_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, SearcherLifetimeManager$Pruner::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_SearcherLifetimeManager$Pruner_doPrune(t_SearcherLifetimeManager$Pruner *self, PyObject *args)
        {
          jdouble a0;
          ::org::apache::lucene::search::IndexSearcher a1((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "Dk", ::org::apache::lucene::search::IndexSearcher::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = self->object.doPrune(a0, a1));
            Py_RETURN_BOOL(result);
          }

          PyErr_SetArgsError((PyObject *) self, "doPrune", args);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queries/function/valuesource/MaxDocValueSource.h"
#include "org/apache/lucene/queries/function/FunctionValues.h"
#include "java/lang/Class.h"
#include "java/lang/Object.h"
#include "java/io/IOException.h"
#include "java/util/Map.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "java/lang/String.h"
#include "org/apache/lucene/search/IndexSearcher.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {

            ::java::lang::Class *MaxDocValueSource::class$ = NULL;
            jmethodID *MaxDocValueSource::mids$ = NULL;
            bool MaxDocValueSource::live$ = false;

            jclass MaxDocValueSource::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queries/function/valuesource/MaxDocValueSource");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
                mids$[mid_createWeight_1b6125ba] = env->getMethodID(cls, "createWeight", "(Ljava/util/Map;Lorg/apache/lucene/search/IndexSearcher;)V");
                mids$[mid_description_14c7b5c5] = env->getMethodID(cls, "description", "()Ljava/lang/String;");
                mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
                mids$[mid_getValues_4c566485] = env->getMethodID(cls, "getValues", "(Ljava/util/Map;Lorg/apache/lucene/index/AtomicReaderContext;)Lorg/apache/lucene/queries/function/FunctionValues;");
                mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
                mids$[mid_name_14c7b5c5] = env->getMethodID(cls, "name", "()Ljava/lang/String;");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            MaxDocValueSource::MaxDocValueSource() : ::org::apache::lucene::queries::function::ValueSource(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

            void MaxDocValueSource::createWeight(const ::java::util::Map & a0, const ::org::apache::lucene::search::IndexSearcher & a1) const
            {
              env->callVoidMethod(this$, mids$[mid_createWeight_1b6125ba], a0.this$, a1.this$);
            }

            ::java::lang::String MaxDocValueSource::description() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_description_14c7b5c5]));
            }

            jboolean MaxDocValueSource::equals(const ::java::lang::Object & a0) const
            {
              return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
            }

            ::org::apache::lucene::queries::function::FunctionValues MaxDocValueSource::getValues(const ::java::util::Map & a0, const ::org::apache::lucene::index::AtomicReaderContext & a1) const
            {
              return ::org::apache::lucene::queries::function::FunctionValues(env->callObjectMethod(this$, mids$[mid_getValues_4c566485], a0.this$, a1.this$));
            }

            jint MaxDocValueSource::hashCode() const
            {
              return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
            }

            ::java::lang::String MaxDocValueSource::name() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_name_14c7b5c5]));
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {
            static PyObject *t_MaxDocValueSource_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_MaxDocValueSource_instance_(PyTypeObject *type, PyObject *arg);
            static int t_MaxDocValueSource_init_(t_MaxDocValueSource *self, PyObject *args, PyObject *kwds);
            static PyObject *t_MaxDocValueSource_createWeight(t_MaxDocValueSource *self, PyObject *args);
            static PyObject *t_MaxDocValueSource_description(t_MaxDocValueSource *self, PyObject *args);
            static PyObject *t_MaxDocValueSource_equals(t_MaxDocValueSource *self, PyObject *args);
            static PyObject *t_MaxDocValueSource_getValues(t_MaxDocValueSource *self, PyObject *args);
            static PyObject *t_MaxDocValueSource_hashCode(t_MaxDocValueSource *self, PyObject *args);
            static PyObject *t_MaxDocValueSource_name(t_MaxDocValueSource *self);

            static PyMethodDef t_MaxDocValueSource__methods_[] = {
              DECLARE_METHOD(t_MaxDocValueSource, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_MaxDocValueSource, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_MaxDocValueSource, createWeight, METH_VARARGS),
              DECLARE_METHOD(t_MaxDocValueSource, description, METH_VARARGS),
              DECLARE_METHOD(t_MaxDocValueSource, equals, METH_VARARGS),
              DECLARE_METHOD(t_MaxDocValueSource, getValues, METH_VARARGS),
              DECLARE_METHOD(t_MaxDocValueSource, hashCode, METH_VARARGS),
              DECLARE_METHOD(t_MaxDocValueSource, name, METH_NOARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(MaxDocValueSource, t_MaxDocValueSource, ::org::apache::lucene::queries::function::ValueSource, MaxDocValueSource, t_MaxDocValueSource_init_, 0, 0, 0, 0, 0);

            void t_MaxDocValueSource::install(PyObject *module)
            {
              installType(&PY_TYPE(MaxDocValueSource), module, "MaxDocValueSource", 0);
            }

            void t_MaxDocValueSource::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(MaxDocValueSource).tp_dict, "class_", make_descriptor(MaxDocValueSource::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(MaxDocValueSource).tp_dict, "wrapfn_", make_descriptor(t_MaxDocValueSource::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(MaxDocValueSource).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_MaxDocValueSource_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, MaxDocValueSource::initializeClass, 1)))
                return NULL;
              return t_MaxDocValueSource::wrap_Object(MaxDocValueSource(((t_MaxDocValueSource *) arg)->object.this$));
            }
            static PyObject *t_MaxDocValueSource_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, MaxDocValueSource::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_MaxDocValueSource_init_(t_MaxDocValueSource *self, PyObject *args, PyObject *kwds)
            {
              MaxDocValueSource object((jobject) NULL);

              INT_CALL(object = MaxDocValueSource());
              self->object = object;

              return 0;
            }

            static PyObject *t_MaxDocValueSource_createWeight(t_MaxDocValueSource *self, PyObject *args)
            {
              ::java::util::Map a0((jobject) NULL);
              PyTypeObject **p0;
              ::org::apache::lucene::search::IndexSearcher a1((jobject) NULL);

              if (!parseArgs(args, "Kk", ::java::util::Map::initializeClass, ::org::apache::lucene::search::IndexSearcher::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_, &a1))
              {
                OBJ_CALL(self->object.createWeight(a0, a1));
                Py_RETURN_NONE;
              }

              return callSuper(&PY_TYPE(MaxDocValueSource), (PyObject *) self, "createWeight", args, 2);
            }

            static PyObject *t_MaxDocValueSource_description(t_MaxDocValueSource *self, PyObject *args)
            {
              ::java::lang::String result((jobject) NULL);

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.description());
                return j2p(result);
              }

              return callSuper(&PY_TYPE(MaxDocValueSource), (PyObject *) self, "description", args, 2);
            }

            static PyObject *t_MaxDocValueSource_equals(t_MaxDocValueSource *self, PyObject *args)
            {
              ::java::lang::Object a0((jobject) NULL);
              jboolean result;

              if (!parseArgs(args, "o", &a0))
              {
                OBJ_CALL(result = self->object.equals(a0));
                Py_RETURN_BOOL(result);
              }

              return callSuper(&PY_TYPE(MaxDocValueSource), (PyObject *) self, "equals", args, 2);
            }

            static PyObject *t_MaxDocValueSource_getValues(t_MaxDocValueSource *self, PyObject *args)
            {
              ::java::util::Map a0((jobject) NULL);
              PyTypeObject **p0;
              ::org::apache::lucene::index::AtomicReaderContext a1((jobject) NULL);
              ::org::apache::lucene::queries::function::FunctionValues result((jobject) NULL);

              if (!parseArgs(args, "Kk", ::java::util::Map::initializeClass, ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_, &a1))
              {
                OBJ_CALL(result = self->object.getValues(a0, a1));
                return ::org::apache::lucene::queries::function::t_FunctionValues::wrap_Object(result);
              }

              return callSuper(&PY_TYPE(MaxDocValueSource), (PyObject *) self, "getValues", args, 2);
            }

            static PyObject *t_MaxDocValueSource_hashCode(t_MaxDocValueSource *self, PyObject *args)
            {
              jint result;

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.hashCode());
                return PyInt_FromLong((long) result);
              }

              return callSuper(&PY_TYPE(MaxDocValueSource), (PyObject *) self, "hashCode", args, 2);
            }

            static PyObject *t_MaxDocValueSource_name(t_MaxDocValueSource *self)
            {
              ::java::lang::String result((jobject) NULL);
              OBJ_CALL(result = self->object.name());
              return j2p(result);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/Explanation.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *Explanation::class$ = NULL;
        jmethodID *Explanation::mids$ = NULL;
        bool Explanation::live$ = false;

        jclass Explanation::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/Explanation");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_init$_f3ab5075] = env->getMethodID(cls, "<init>", "(FLjava/lang/String;)V");
            mids$[mid_addDetail_398cd45a] = env->getMethodID(cls, "addDetail", "(Lorg/apache/lucene/search/Explanation;)V");
            mids$[mid_getDescription_14c7b5c5] = env->getMethodID(cls, "getDescription", "()Ljava/lang/String;");
            mids$[mid_getDetails_1ee90723] = env->getMethodID(cls, "getDetails", "()[Lorg/apache/lucene/search/Explanation;");
            mids$[mid_getValue_54c6a176] = env->getMethodID(cls, "getValue", "()F");
            mids$[mid_isMatch_54c6a16a] = env->getMethodID(cls, "isMatch", "()Z");
            mids$[mid_setDescription_5fdc3f48] = env->getMethodID(cls, "setDescription", "(Ljava/lang/String;)V");
            mids$[mid_setValue_06298cab] = env->getMethodID(cls, "setValue", "(F)V");
            mids$[mid_toHtml_14c7b5c5] = env->getMethodID(cls, "toHtml", "()Ljava/lang/String;");
            mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");
            mids$[mid_toString_141401b3] = env->getMethodID(cls, "toString", "(I)Ljava/lang/String;");
            mids$[mid_getSummary_14c7b5c5] = env->getMethodID(cls, "getSummary", "()Ljava/lang/String;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        Explanation::Explanation() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        Explanation::Explanation(jfloat a0, const ::java::lang::String & a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_f3ab5075, a0, a1.this$)) {}

        void Explanation::addDetail(const Explanation & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_addDetail_398cd45a], a0.this$);
        }

        ::java::lang::String Explanation::getDescription() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getDescription_14c7b5c5]));
        }

        JArray< Explanation > Explanation::getDetails() const
        {
          return JArray< Explanation >(env->callObjectMethod(this$, mids$[mid_getDetails_1ee90723]));
        }

        jfloat Explanation::getValue() const
        {
          return env->callFloatMethod(this$, mids$[mid_getValue_54c6a176]);
        }

        jboolean Explanation::isMatch() const
        {
          return env->callBooleanMethod(this$, mids$[mid_isMatch_54c6a16a]);
        }

        void Explanation::setDescription(const ::java::lang::String & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setDescription_5fdc3f48], a0.this$);
        }

        void Explanation::setValue(jfloat a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setValue_06298cab], a0);
        }

        ::java::lang::String Explanation::toHtml() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toHtml_14c7b5c5]));
        }

        ::java::lang::String Explanation::toString() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_Explanation_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_Explanation_instance_(PyTypeObject *type, PyObject *arg);
        static int t_Explanation_init_(t_Explanation *self, PyObject *args, PyObject *kwds);
        static PyObject *t_Explanation_addDetail(t_Explanation *self, PyObject *arg);
        static PyObject *t_Explanation_getDescription(t_Explanation *self);
        static PyObject *t_Explanation_getDetails(t_Explanation *self);
        static PyObject *t_Explanation_getValue(t_Explanation *self);
        static PyObject *t_Explanation_isMatch(t_Explanation *self);
        static PyObject *t_Explanation_setDescription(t_Explanation *self, PyObject *arg);
        static PyObject *t_Explanation_setValue(t_Explanation *self, PyObject *arg);
        static PyObject *t_Explanation_toHtml(t_Explanation *self);
        static PyObject *t_Explanation_toString(t_Explanation *self, PyObject *args);
        static PyObject *t_Explanation_get__description(t_Explanation *self, void *data);
        static int t_Explanation_set__description(t_Explanation *self, PyObject *arg, void *data);
        static PyObject *t_Explanation_get__details(t_Explanation *self, void *data);
        static PyObject *t_Explanation_get__match(t_Explanation *self, void *data);
        static PyObject *t_Explanation_get__value(t_Explanation *self, void *data);
        static int t_Explanation_set__value(t_Explanation *self, PyObject *arg, void *data);
        static PyGetSetDef t_Explanation__fields_[] = {
          DECLARE_GETSET_FIELD(t_Explanation, description),
          DECLARE_GET_FIELD(t_Explanation, details),
          DECLARE_GET_FIELD(t_Explanation, match),
          DECLARE_GETSET_FIELD(t_Explanation, value),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_Explanation__methods_[] = {
          DECLARE_METHOD(t_Explanation, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_Explanation, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_Explanation, addDetail, METH_O),
          DECLARE_METHOD(t_Explanation, getDescription, METH_NOARGS),
          DECLARE_METHOD(t_Explanation, getDetails, METH_NOARGS),
          DECLARE_METHOD(t_Explanation, getValue, METH_NOARGS),
          DECLARE_METHOD(t_Explanation, isMatch, METH_NOARGS),
          DECLARE_METHOD(t_Explanation, setDescription, METH_O),
          DECLARE_METHOD(t_Explanation, setValue, METH_O),
          DECLARE_METHOD(t_Explanation, toHtml, METH_NOARGS),
          DECLARE_METHOD(t_Explanation, toString, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(Explanation, t_Explanation, ::java::lang::Object, Explanation, t_Explanation_init_, 0, 0, t_Explanation__fields_, 0, 0);

        void t_Explanation::install(PyObject *module)
        {
          installType(&PY_TYPE(Explanation), module, "Explanation", 0);
        }

        void t_Explanation::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(Explanation).tp_dict, "class_", make_descriptor(Explanation::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(Explanation).tp_dict, "wrapfn_", make_descriptor(t_Explanation::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(Explanation).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_Explanation_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, Explanation::initializeClass, 1)))
            return NULL;
          return t_Explanation::wrap_Object(Explanation(((t_Explanation *) arg)->object.this$));
        }
        static PyObject *t_Explanation_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, Explanation::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_Explanation_init_(t_Explanation *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 0:
            {
              Explanation object((jobject) NULL);

              INT_CALL(object = Explanation());
              self->object = object;
              break;
            }
            goto err;
           case 2:
            {
              jfloat a0;
              ::java::lang::String a1((jobject) NULL);
              Explanation object((jobject) NULL);

              if (!parseArgs(args, "Fs", &a0, &a1))
              {
                INT_CALL(object = Explanation(a0, a1));
                self->object = object;
                break;
              }
            }
           default:
           err:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_Explanation_addDetail(t_Explanation *self, PyObject *arg)
        {
          Explanation a0((jobject) NULL);

          if (!parseArg(arg, "k", Explanation::initializeClass, &a0))
          {
            OBJ_CALL(self->object.addDetail(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "addDetail", arg);
          return NULL;
        }

        static PyObject *t_Explanation_getDescription(t_Explanation *self)
        {
          ::java::lang::String result((jobject) NULL);
          OBJ_CALL(result = self->object.getDescription());
          return j2p(result);
        }

        static PyObject *t_Explanation_getDetails(t_Explanation *self)
        {
          JArray< Explanation > result((jobject) NULL);
          OBJ_CALL(result = self->object.getDetails());
          return JArray<jobject>(result.this$).wrap(t_Explanation::wrap_jobject);
        }

        static PyObject *t_Explanation_getValue(t_Explanation *self)
        {
          jfloat result;
          OBJ_CALL(result = self->object.getValue());
          return PyFloat_FromDouble((double) result);
        }

        static PyObject *t_Explanation_isMatch(t_Explanation *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.isMatch());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_Explanation_setDescription(t_Explanation *self, PyObject *arg)
        {
          ::java::lang::String a0((jobject) NULL);

          if (!parseArg(arg, "s", &a0))
          {
            OBJ_CALL(self->object.setDescription(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setDescription", arg);
          return NULL;
        }

        static PyObject *t_Explanation_setValue(t_Explanation *self, PyObject *arg)
        {
          jfloat a0;

          if (!parseArg(arg, "F", &a0))
          {
            OBJ_CALL(self->object.setValue(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setValue", arg);
          return NULL;
        }

        static PyObject *t_Explanation_toHtml(t_Explanation *self)
        {
          ::java::lang::String result((jobject) NULL);
          OBJ_CALL(result = self->object.toHtml());
          return j2p(result);
        }

        static PyObject *t_Explanation_toString(t_Explanation *self, PyObject *args)
        {
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.toString());
            return j2p(result);
          }

          return callSuper(&PY_TYPE(Explanation), (PyObject *) self, "toString", args, 2);
        }

        static PyObject *t_Explanation_get__description(t_Explanation *self, void *data)
        {
          ::java::lang::String value((jobject) NULL);
          OBJ_CALL(value = self->object.getDescription());
          return j2p(value);
        }
        static int t_Explanation_set__description(t_Explanation *self, PyObject *arg, void *data)
        {
          {
            ::java::lang::String value((jobject) NULL);
            if (!parseArg(arg, "s", &value))
            {
              INT_CALL(self->object.setDescription(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "description", arg);
          return -1;
        }

        static PyObject *t_Explanation_get__details(t_Explanation *self, void *data)
        {
          JArray< Explanation > value((jobject) NULL);
          OBJ_CALL(value = self->object.getDetails());
          return JArray<jobject>(value.this$).wrap(t_Explanation::wrap_jobject);
        }

        static PyObject *t_Explanation_get__match(t_Explanation *self, void *data)
        {
          jboolean value;
          OBJ_CALL(value = self->object.isMatch());
          Py_RETURN_BOOL(value);
        }

        static PyObject *t_Explanation_get__value(t_Explanation *self, void *data)
        {
          jfloat value;
          OBJ_CALL(value = self->object.getValue());
          return PyFloat_FromDouble((double) value);
        }
        static int t_Explanation_set__value(t_Explanation *self, PyObject *arg, void *data)
        {
          {
            jfloat value;
            if (!parseArg(arg, "F", &value))
            {
              INT_CALL(self->object.setValue(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "value", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/compound/CompoundWordTokenFilterBase.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace compound {

          ::java::lang::Class *CompoundWordTokenFilterBase::class$ = NULL;
          jmethodID *CompoundWordTokenFilterBase::mids$ = NULL;
          bool CompoundWordTokenFilterBase::live$ = false;
          jint CompoundWordTokenFilterBase::DEFAULT_MAX_SUBWORD_SIZE = (jint) 0;
          jint CompoundWordTokenFilterBase::DEFAULT_MIN_SUBWORD_SIZE = (jint) 0;
          jint CompoundWordTokenFilterBase::DEFAULT_MIN_WORD_SIZE = (jint) 0;

          jclass CompoundWordTokenFilterBase::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/compound/CompoundWordTokenFilterBase");

              mids$ = new jmethodID[max_mid];
              mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");
              mids$[mid_reset_54c6a166] = env->getMethodID(cls, "reset", "()V");
              mids$[mid_decompose_54c6a166] = env->getMethodID(cls, "decompose", "()V");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              DEFAULT_MAX_SUBWORD_SIZE = env->getStaticIntField(cls, "DEFAULT_MAX_SUBWORD_SIZE");
              DEFAULT_MIN_SUBWORD_SIZE = env->getStaticIntField(cls, "DEFAULT_MIN_SUBWORD_SIZE");
              DEFAULT_MIN_WORD_SIZE = env->getStaticIntField(cls, "DEFAULT_MIN_WORD_SIZE");
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          jboolean CompoundWordTokenFilterBase::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_54c6a16a]);
          }

          void CompoundWordTokenFilterBase::reset() const
          {
            env->callVoidMethod(this$, mids$[mid_reset_54c6a166]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace compound {
          static PyObject *t_CompoundWordTokenFilterBase_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_CompoundWordTokenFilterBase_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_CompoundWordTokenFilterBase_incrementToken(t_CompoundWordTokenFilterBase *self, PyObject *args);
          static PyObject *t_CompoundWordTokenFilterBase_reset(t_CompoundWordTokenFilterBase *self, PyObject *args);

          static PyMethodDef t_CompoundWordTokenFilterBase__methods_[] = {
            DECLARE_METHOD(t_CompoundWordTokenFilterBase, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CompoundWordTokenFilterBase, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CompoundWordTokenFilterBase, incrementToken, METH_VARARGS),
            DECLARE_METHOD(t_CompoundWordTokenFilterBase, reset, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(CompoundWordTokenFilterBase, t_CompoundWordTokenFilterBase, ::org::apache::lucene::analysis::TokenFilter, CompoundWordTokenFilterBase, abstract_init, 0, 0, 0, 0, 0);

          void t_CompoundWordTokenFilterBase::install(PyObject *module)
          {
            installType(&PY_TYPE(CompoundWordTokenFilterBase), module, "CompoundWordTokenFilterBase", 0);
          }

          void t_CompoundWordTokenFilterBase::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(CompoundWordTokenFilterBase).tp_dict, "class_", make_descriptor(CompoundWordTokenFilterBase::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(CompoundWordTokenFilterBase).tp_dict, "wrapfn_", make_descriptor(t_CompoundWordTokenFilterBase::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(CompoundWordTokenFilterBase).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(CompoundWordTokenFilterBase::initializeClass);
            PyDict_SetItemString(PY_TYPE(CompoundWordTokenFilterBase).tp_dict, "DEFAULT_MAX_SUBWORD_SIZE", make_descriptor(CompoundWordTokenFilterBase::DEFAULT_MAX_SUBWORD_SIZE));
            PyDict_SetItemString(PY_TYPE(CompoundWordTokenFilterBase).tp_dict, "DEFAULT_MIN_SUBWORD_SIZE", make_descriptor(CompoundWordTokenFilterBase::DEFAULT_MIN_SUBWORD_SIZE));
            PyDict_SetItemString(PY_TYPE(CompoundWordTokenFilterBase).tp_dict, "DEFAULT_MIN_WORD_SIZE", make_descriptor(CompoundWordTokenFilterBase::DEFAULT_MIN_WORD_SIZE));
          }

          static PyObject *t_CompoundWordTokenFilterBase_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, CompoundWordTokenFilterBase::initializeClass, 1)))
              return NULL;
            return t_CompoundWordTokenFilterBase::wrap_Object(CompoundWordTokenFilterBase(((t_CompoundWordTokenFilterBase *) arg)->object.this$));
          }
          static PyObject *t_CompoundWordTokenFilterBase_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, CompoundWordTokenFilterBase::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_CompoundWordTokenFilterBase_incrementToken(t_CompoundWordTokenFilterBase *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(CompoundWordTokenFilterBase), (PyObject *) self, "incrementToken", args, 2);
          }

          static PyObject *t_CompoundWordTokenFilterBase_reset(t_CompoundWordTokenFilterBase *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.reset());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(CompoundWordTokenFilterBase), (PyObject *) self, "reset", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/BitsFilteredDocIdSet.h"
#include "org/apache/lucene/util/Bits.h"
#include "org/apache/lucene/search/DocIdSet.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *BitsFilteredDocIdSet::class$ = NULL;
        jmethodID *BitsFilteredDocIdSet::mids$ = NULL;
        bool BitsFilteredDocIdSet::live$ = false;

        jclass BitsFilteredDocIdSet::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/BitsFilteredDocIdSet");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_042197af] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/DocIdSet;Lorg/apache/lucene/util/Bits;)V");
            mids$[mid_wrap_e3d48bdb] = env->getStaticMethodID(cls, "wrap", "(Lorg/apache/lucene/search/DocIdSet;Lorg/apache/lucene/util/Bits;)Lorg/apache/lucene/search/DocIdSet;");
            mids$[mid_match_39c7bd30] = env->getMethodID(cls, "match", "(I)Z");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        BitsFilteredDocIdSet::BitsFilteredDocIdSet(const ::org::apache::lucene::search::DocIdSet & a0, const ::org::apache::lucene::util::Bits & a1) : ::org::apache::lucene::search::FilteredDocIdSet(env->newObject(initializeClass, &mids$, mid_init$_042197af, a0.this$, a1.this$)) {}

        ::org::apache::lucene::search::DocIdSet BitsFilteredDocIdSet::wrap(const ::org::apache::lucene::search::DocIdSet & a0, const ::org::apache::lucene::util::Bits & a1)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::search::DocIdSet(env->callStaticObjectMethod(cls, mids$[mid_wrap_e3d48bdb], a0.this$, a1.this$));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_BitsFilteredDocIdSet_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_BitsFilteredDocIdSet_instance_(PyTypeObject *type, PyObject *arg);
        static int t_BitsFilteredDocIdSet_init_(t_BitsFilteredDocIdSet *self, PyObject *args, PyObject *kwds);
        static PyObject *t_BitsFilteredDocIdSet_wrap(PyTypeObject *type, PyObject *args);

        static PyMethodDef t_BitsFilteredDocIdSet__methods_[] = {
          DECLARE_METHOD(t_BitsFilteredDocIdSet, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_BitsFilteredDocIdSet, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_BitsFilteredDocIdSet, wrap, METH_VARARGS | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(BitsFilteredDocIdSet, t_BitsFilteredDocIdSet, ::org::apache::lucene::search::FilteredDocIdSet, BitsFilteredDocIdSet, t_BitsFilteredDocIdSet_init_, 0, 0, 0, 0, 0);

        void t_BitsFilteredDocIdSet::install(PyObject *module)
        {
          installType(&PY_TYPE(BitsFilteredDocIdSet), module, "BitsFilteredDocIdSet", 0);
        }

        void t_BitsFilteredDocIdSet::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(BitsFilteredDocIdSet).tp_dict, "class_", make_descriptor(BitsFilteredDocIdSet::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(BitsFilteredDocIdSet).tp_dict, "wrapfn_", make_descriptor(t_BitsFilteredDocIdSet::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(BitsFilteredDocIdSet).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_BitsFilteredDocIdSet_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, BitsFilteredDocIdSet::initializeClass, 1)))
            return NULL;
          return t_BitsFilteredDocIdSet::wrap_Object(BitsFilteredDocIdSet(((t_BitsFilteredDocIdSet *) arg)->object.this$));
        }
        static PyObject *t_BitsFilteredDocIdSet_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, BitsFilteredDocIdSet::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_BitsFilteredDocIdSet_init_(t_BitsFilteredDocIdSet *self, PyObject *args, PyObject *kwds)
        {
          ::org::apache::lucene::search::DocIdSet a0((jobject) NULL);
          ::org::apache::lucene::util::Bits a1((jobject) NULL);
          BitsFilteredDocIdSet object((jobject) NULL);

          if (!parseArgs(args, "kk", ::org::apache::lucene::search::DocIdSet::initializeClass, ::org::apache::lucene::util::Bits::initializeClass, &a0, &a1))
          {
            INT_CALL(object = BitsFilteredDocIdSet(a0, a1));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_BitsFilteredDocIdSet_wrap(PyTypeObject *type, PyObject *args)
        {
          ::org::apache::lucene::search::DocIdSet a0((jobject) NULL);
          ::org::apache::lucene::util::Bits a1((jobject) NULL);
          ::org::apache::lucene::search::DocIdSet result((jobject) NULL);

          if (!parseArgs(args, "kk", ::org::apache::lucene::search::DocIdSet::initializeClass, ::org::apache::lucene::util::Bits::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = ::org::apache::lucene::search::BitsFilteredDocIdSet::wrap(a0, a1));
            return ::org::apache::lucene::search::t_DocIdSet::wrap_Object(result);
          }

          PyErr_SetArgsError(type, "wrap", args);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/standard/processors/DefaultPhraseSlopQueryNodeProcessor.h"
#include "org/apache/lucene/queryparser/flexible/core/QueryNodeException.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/QueryNode.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace processors {

              ::java::lang::Class *DefaultPhraseSlopQueryNodeProcessor::class$ = NULL;
              jmethodID *DefaultPhraseSlopQueryNodeProcessor::mids$ = NULL;
              bool DefaultPhraseSlopQueryNodeProcessor::live$ = false;

              jclass DefaultPhraseSlopQueryNodeProcessor::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/standard/processors/DefaultPhraseSlopQueryNodeProcessor");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
                  mids$[mid_process_6705aed7] = env->getMethodID(cls, "process", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;)Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;");
                  mids$[mid_processChildren_cc04aeef] = env->getMethodID(cls, "processChildren", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;)V");
                  mids$[mid_preProcessNode_6705aed7] = env->getMethodID(cls, "preProcessNode", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;)Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;");
                  mids$[mid_setChildrenOrder_4f378251] = env->getMethodID(cls, "setChildrenOrder", "(Ljava/util/List;)Ljava/util/List;");
                  mids$[mid_postProcessNode_6705aed7] = env->getMethodID(cls, "postProcessNode", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;)Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              DefaultPhraseSlopQueryNodeProcessor::DefaultPhraseSlopQueryNodeProcessor() : ::org::apache::lucene::queryparser::flexible::core::processors::QueryNodeProcessorImpl(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

              ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode DefaultPhraseSlopQueryNodeProcessor::process(const ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode & a0) const
              {
                return ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode(env->callObjectMethod(this$, mids$[mid_process_6705aed7], a0.this$));
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace processors {
              static PyObject *t_DefaultPhraseSlopQueryNodeProcessor_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_DefaultPhraseSlopQueryNodeProcessor_instance_(PyTypeObject *type, PyObject *arg);
              static int t_DefaultPhraseSlopQueryNodeProcessor_init_(t_DefaultPhraseSlopQueryNodeProcessor *self, PyObject *args, PyObject *kwds);
              static PyObject *t_DefaultPhraseSlopQueryNodeProcessor_process(t_DefaultPhraseSlopQueryNodeProcessor *self, PyObject *args);

              static PyMethodDef t_DefaultPhraseSlopQueryNodeProcessor__methods_[] = {
                DECLARE_METHOD(t_DefaultPhraseSlopQueryNodeProcessor, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_DefaultPhraseSlopQueryNodeProcessor, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_DefaultPhraseSlopQueryNodeProcessor, process, METH_VARARGS),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(DefaultPhraseSlopQueryNodeProcessor, t_DefaultPhraseSlopQueryNodeProcessor, ::org::apache::lucene::queryparser::flexible::core::processors::QueryNodeProcessorImpl, DefaultPhraseSlopQueryNodeProcessor, t_DefaultPhraseSlopQueryNodeProcessor_init_, 0, 0, 0, 0, 0);

              void t_DefaultPhraseSlopQueryNodeProcessor::install(PyObject *module)
              {
                installType(&PY_TYPE(DefaultPhraseSlopQueryNodeProcessor), module, "DefaultPhraseSlopQueryNodeProcessor", 0);
              }

              void t_DefaultPhraseSlopQueryNodeProcessor::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(DefaultPhraseSlopQueryNodeProcessor).tp_dict, "class_", make_descriptor(DefaultPhraseSlopQueryNodeProcessor::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(DefaultPhraseSlopQueryNodeProcessor).tp_dict, "wrapfn_", make_descriptor(t_DefaultPhraseSlopQueryNodeProcessor::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(DefaultPhraseSlopQueryNodeProcessor).tp_dict, "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_DefaultPhraseSlopQueryNodeProcessor_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, DefaultPhraseSlopQueryNodeProcessor::initializeClass, 1)))
                  return NULL;
                return t_DefaultPhraseSlopQueryNodeProcessor::wrap_Object(DefaultPhraseSlopQueryNodeProcessor(((t_DefaultPhraseSlopQueryNodeProcessor *) arg)->object.this$));
              }
              static PyObject *t_DefaultPhraseSlopQueryNodeProcessor_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, DefaultPhraseSlopQueryNodeProcessor::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_DefaultPhraseSlopQueryNodeProcessor_init_(t_DefaultPhraseSlopQueryNodeProcessor *self, PyObject *args, PyObject *kwds)
              {
                DefaultPhraseSlopQueryNodeProcessor object((jobject) NULL);

                INT_CALL(object = DefaultPhraseSlopQueryNodeProcessor());
                self->object = object;

                return 0;
              }

              static PyObject *t_DefaultPhraseSlopQueryNodeProcessor_process(t_DefaultPhraseSlopQueryNodeProcessor *self, PyObject *args)
              {
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode a0((jobject) NULL);
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode result((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode::initializeClass, &a0))
                {
                  OBJ_CALL(result = self->object.process(a0));
                  return ::org::apache::lucene::queryparser::flexible::core::nodes::t_QueryNode::wrap_Object(result);
                }

                return callSuper(&PY_TYPE(DefaultPhraseSlopQueryNodeProcessor), (PyObject *) self, "process", args, 2);
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/expressions/Expression.h"
#include "org/apache/lucene/queries/function/FunctionValues.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/expressions/Bindings.h"
#include "java/lang/String.h"
#include "org/apache/lucene/search/Rescorer.h"
#include "org/apache/lucene/queries/function/ValueSource.h"
#include "org/apache/lucene/search/SortField.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace expressions {

        ::java::lang::Class *Expression::class$ = NULL;
        jmethodID *Expression::mids$ = NULL;
        jfieldID *Expression::fids$ = NULL;
        bool Expression::live$ = false;

        jclass Expression::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/expressions/Expression");

            mids$ = new jmethodID[max_mid];
            mids$[mid_evaluate_d2e34bbb] = env->getMethodID(cls, "evaluate", "(I[Lorg/apache/lucene/queries/function/FunctionValues;)D");
            mids$[mid_getRescorer_2fab3242] = env->getMethodID(cls, "getRescorer", "(Lorg/apache/lucene/expressions/Bindings;)Lorg/apache/lucene/search/Rescorer;");
            mids$[mid_getSortField_5395b0cd] = env->getMethodID(cls, "getSortField", "(Lorg/apache/lucene/expressions/Bindings;Z)Lorg/apache/lucene/search/SortField;");
            mids$[mid_getValueSource_125265df] = env->getMethodID(cls, "getValueSource", "(Lorg/apache/lucene/expressions/Bindings;)Lorg/apache/lucene/queries/function/ValueSource;");

            fids$ = new jfieldID[max_fid];
            fids$[fid_sourceText] = env->getFieldID(cls, "sourceText", "Ljava/lang/String;");
            fids$[fid_variables] = env->getFieldID(cls, "variables", "[Ljava/lang/String;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        jdouble Expression::evaluate(jint a0, const JArray< ::org::apache::lucene::queries::function::FunctionValues > & a1) const
        {
          return env->callDoubleMethod(this$, mids$[mid_evaluate_d2e34bbb], a0, a1.this$);
        }

        ::org::apache::lucene::search::Rescorer Expression::getRescorer(const ::org::apache::lucene::expressions::Bindings & a0) const
        {
          return ::org::apache::lucene::search::Rescorer(env->callObjectMethod(this$, mids$[mid_getRescorer_2fab3242], a0.this$));
        }

        ::org::apache::lucene::search::SortField Expression::getSortField(const ::org::apache::lucene::expressions::Bindings & a0, jboolean a1) const
        {
          return ::org::apache::lucene::search::SortField(env->callObjectMethod(this$, mids$[mid_getSortField_5395b0cd], a0.this$, a1));
        }

        ::org::apache::lucene::queries::function::ValueSource Expression::getValueSource(const ::org::apache::lucene::expressions::Bindings & a0) const
        {
          return ::org::apache::lucene::queries::function::ValueSource(env->callObjectMethod(this$, mids$[mid_getValueSource_125265df], a0.this$));
        }

        ::java::lang::String Expression::_get_sourceText() const
        {
          return ::java::lang::String(env->getObjectField(this$, fids$[fid_sourceText]));
        }

        JArray< ::java::lang::String > Expression::_get_variables() const
        {
          return JArray< ::java::lang::String >(env->getObjectField(this$, fids$[fid_variables]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace expressions {
        static PyObject *t_Expression_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_Expression_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_Expression_evaluate(t_Expression *self, PyObject *args);
        static PyObject *t_Expression_getRescorer(t_Expression *self, PyObject *arg);
        static PyObject *t_Expression_getSortField(t_Expression *self, PyObject *args);
        static PyObject *t_Expression_getValueSource(t_Expression *self, PyObject *arg);
        static PyObject *t_Expression_get__sourceText(t_Expression *self, void *data);
        static PyObject *t_Expression_get__variables(t_Expression *self, void *data);

        static PyGetSetDef t_Expression__fields_[] = {
          DECLARE_GET_FIELD(t_Expression, sourceText),
          DECLARE_GET_FIELD(t_Expression, variables),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_Expression__methods_[] = {
          DECLARE_METHOD(t_Expression, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_Expression, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_Expression, evaluate, METH_VARARGS),
          DECLARE_METHOD(t_Expression, getRescorer, METH_O),
          DECLARE_METHOD(t_Expression, getSortField, METH_VARARGS),
          DECLARE_METHOD(t_Expression, getValueSource, METH_O),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(Expression, t_Expression, ::java::lang::Object, Expression, abstract_init, 0, 0, t_Expression__fields_, 0, 0);

        void t_Expression::install(PyObject *module)
        {
          installType(&PY_TYPE(Expression), module, "Expression", 0);
        }

        void t_Expression::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(Expression).tp_dict, "class_", make_descriptor(Expression::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(Expression).tp_dict, "wrapfn_", make_descriptor(t_Expression::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(Expression).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_Expression_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, Expression::initializeClass, 1)))
            return NULL;
          return t_Expression::wrap_Object(Expression(((t_Expression *) arg)->object.this$));
        }
        static PyObject *t_Expression_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, Expression::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_Expression_evaluate(t_Expression *self, PyObject *args)
        {
          jint a0;
          JArray< ::org::apache::lucene::queries::function::FunctionValues > a1((jobject) NULL);
          jdouble result;

          if (!parseArgs(args, "I[k", ::org::apache::lucene::queries::function::FunctionValues::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = self->object.evaluate(a0, a1));
            return PyFloat_FromDouble((double) result);
          }

          PyErr_SetArgsError((PyObject *) self, "evaluate", args);
          return NULL;
        }

        static PyObject *t_Expression_getRescorer(t_Expression *self, PyObject *arg)
        {
          ::org::apache::lucene::expressions::Bindings a0((jobject) NULL);
          ::org::apache::lucene::search::Rescorer result((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::expressions::Bindings::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.getRescorer(a0));
            return ::org::apache::lucene::search::t_Rescorer::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "getRescorer", arg);
          return NULL;
        }

        static PyObject *t_Expression_getSortField(t_Expression *self, PyObject *args)
        {
          ::org::apache::lucene::expressions::Bindings a0((jobject) NULL);
          jboolean a1;
          ::org::apache::lucene::search::SortField result((jobject) NULL);

          if (!parseArgs(args, "kZ", ::org::apache::lucene::expressions::Bindings::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = self->object.getSortField(a0, a1));
            return ::org::apache::lucene::search::t_SortField::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "getSortField", args);
          return NULL;
        }

        static PyObject *t_Expression_getValueSource(t_Expression *self, PyObject *arg)
        {
          ::org::apache::lucene::expressions::Bindings a0((jobject) NULL);
          ::org::apache::lucene::queries::function::ValueSource result((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::expressions::Bindings::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.getValueSource(a0));
            return ::org::apache::lucene::queries::function::t_ValueSource::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "getValueSource", arg);
          return NULL;
        }

        static PyObject *t_Expression_get__sourceText(t_Expression *self, void *data)
        {
          ::java::lang::String value((jobject) NULL);
          OBJ_CALL(value = self->object._get_sourceText());
          return j2p(value);
        }

        static PyObject *t_Expression_get__variables(t_Expression *self, void *data)
        {
          JArray< ::java::lang::String > value((jobject) NULL);
          OBJ_CALL(value = self->object._get_variables());
          return JArray<jstring>(value.this$).wrap();
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/xml/builders/SpanBuilderBase.h"
#include "org/apache/lucene/queryparser/xml/builders/SpanQueryBuilder.h"
#include "org/apache/lucene/search/Query.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace xml {
          namespace builders {

            ::java::lang::Class *SpanBuilderBase::class$ = NULL;
            jmethodID *SpanBuilderBase::mids$ = NULL;
            bool SpanBuilderBase::live$ = false;

            jclass SpanBuilderBase::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/xml/builders/SpanBuilderBase");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            SpanBuilderBase::SpanBuilderBase() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace xml {
          namespace builders {
            static PyObject *t_SpanBuilderBase_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_SpanBuilderBase_instance_(PyTypeObject *type, PyObject *arg);
            static int t_SpanBuilderBase_init_(t_SpanBuilderBase *self, PyObject *args, PyObject *kwds);

            static PyMethodDef t_SpanBuilderBase__methods_[] = {
              DECLARE_METHOD(t_SpanBuilderBase, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_SpanBuilderBase, instance_, METH_O | METH_CLASS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(SpanBuilderBase, t_SpanBuilderBase, ::java::lang::Object, SpanBuilderBase, t_SpanBuilderBase_init_, 0, 0, 0, 0, 0);

            void t_SpanBuilderBase::install(PyObject *module)
            {
              installType(&PY_TYPE(SpanBuilderBase), module, "SpanBuilderBase", 0);
            }

            void t_SpanBuilderBase::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(SpanBuilderBase).tp_dict, "class_", make_descriptor(SpanBuilderBase::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(SpanBuilderBase).tp_dict, "wrapfn_", make_descriptor(t_SpanBuilderBase::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(SpanBuilderBase).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_SpanBuilderBase_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, SpanBuilderBase::initializeClass, 1)))
                return NULL;
              return t_SpanBuilderBase::wrap_Object(SpanBuilderBase(((t_SpanBuilderBase *) arg)->object.this$));
            }
            static PyObject *t_SpanBuilderBase_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, SpanBuilderBase::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_SpanBuilderBase_init_(t_SpanBuilderBase *self, PyObject *args, PyObject *kwds)
            {
              SpanBuilderBase object((jobject) NULL);

              INT_CALL(object = SpanBuilderBase());
              self->object = object;

              return 0;
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/LogMergePolicy.h"
#include "org/apache/lucene/index/IndexWriter.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/index/MergeTrigger.h"
#include "org/apache/lucene/index/SegmentInfos.h"
#include "org/apache/lucene/index/SegmentCommitInfo.h"
#include "java/util/Map.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "java/lang/Boolean.h"
#include "org/apache/lucene/index/MergePolicy$MergeSpecification.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *LogMergePolicy::class$ = NULL;
        jmethodID *LogMergePolicy::mids$ = NULL;
        bool LogMergePolicy::live$ = false;
        jint LogMergePolicy::DEFAULT_MAX_MERGE_DOCS = (jint) 0;
        jint LogMergePolicy::DEFAULT_MERGE_FACTOR = (jint) 0;
        jdouble LogMergePolicy::DEFAULT_NO_CFS_RATIO = (jdouble) 0;
        jdouble LogMergePolicy::LEVEL_LOG_SPAN = (jdouble) 0;

        jclass LogMergePolicy::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/LogMergePolicy");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_close_54c6a166] = env->getMethodID(cls, "close", "()V");
            mids$[mid_findForcedDeletesMerges_581dbc49] = env->getMethodID(cls, "findForcedDeletesMerges", "(Lorg/apache/lucene/index/SegmentInfos;Lorg/apache/lucene/index/IndexWriter;)Lorg/apache/lucene/index/MergePolicy$MergeSpecification;");
            mids$[mid_findForcedMerges_4fe4a5b5] = env->getMethodID(cls, "findForcedMerges", "(Lorg/apache/lucene/index/SegmentInfos;ILjava/util/Map;Lorg/apache/lucene/index/IndexWriter;)Lorg/apache/lucene/index/MergePolicy$MergeSpecification;");
            mids$[mid_findMerges_cada0df0] = env->getMethodID(cls, "findMerges", "(Lorg/apache/lucene/index/MergeTrigger;Lorg/apache/lucene/index/SegmentInfos;Lorg/apache/lucene/index/IndexWriter;)Lorg/apache/lucene/index/MergePolicy$MergeSpecification;");
            mids$[mid_getCalibrateSizeByDeletes_54c6a16a] = env->getMethodID(cls, "getCalibrateSizeByDeletes", "()Z");
            mids$[mid_getMaxMergeDocs_54c6a179] = env->getMethodID(cls, "getMaxMergeDocs", "()I");
            mids$[mid_getMergeFactor_54c6a179] = env->getMethodID(cls, "getMergeFactor", "()I");
            mids$[mid_setCalibrateSizeByDeletes_bb0c767f] = env->getMethodID(cls, "setCalibrateSizeByDeletes", "(Z)V");
            mids$[mid_setMaxMergeDocs_39c7bd3c] = env->getMethodID(cls, "setMaxMergeDocs", "(I)V");
            mids$[mid_setMergeFactor_39c7bd3c] = env->getMethodID(cls, "setMergeFactor", "(I)V");
            mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");
            mids$[mid_message_dcbb03ef] = env->getMethodID(cls, "message", "(Ljava/lang/String;Lorg/apache/lucene/index/IndexWriter;)V");
            mids$[mid_isMerged_2ee943c8] = env->getMethodID(cls, "isMerged", "(Lorg/apache/lucene/index/SegmentInfos;ILjava/util/Map;Lorg/apache/lucene/index/IndexWriter;)Z");
            mids$[mid_verbose_4f2fb7d9] = env->getMethodID(cls, "verbose", "(Lorg/apache/lucene/index/IndexWriter;)Z");
            mids$[mid_sizeBytes_5454cb07] = env->getMethodID(cls, "sizeBytes", "(Lorg/apache/lucene/index/SegmentCommitInfo;Lorg/apache/lucene/index/IndexWriter;)J");
            mids$[mid_sizeDocs_5454cb07] = env->getMethodID(cls, "sizeDocs", "(Lorg/apache/lucene/index/SegmentCommitInfo;Lorg/apache/lucene/index/IndexWriter;)J");

            class$ = (::java::lang::Class *) new JObject(cls);
            cls = (jclass) class$->this$;

            DEFAULT_MAX_MERGE_DOCS = env->getStaticIntField(cls, "DEFAULT_MAX_MERGE_DOCS");
            DEFAULT_MERGE_FACTOR = env->getStaticIntField(cls, "DEFAULT_MERGE_FACTOR");
            DEFAULT_NO_CFS_RATIO = env->getStaticDoubleField(cls, "DEFAULT_NO_CFS_RATIO");
            LEVEL_LOG_SPAN = env->getStaticDoubleField(cls, "LEVEL_LOG_SPAN");
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        LogMergePolicy::LogMergePolicy() : ::org::apache::lucene::index::MergePolicy(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        void LogMergePolicy::close() const
        {
          env->callVoidMethod(this$, mids$[mid_close_54c6a166]);
        }

        ::org::apache::lucene::index::MergePolicy$MergeSpecification LogMergePolicy::findForcedDeletesMerges(const ::org::apache::lucene::index::SegmentInfos & a0, const ::org::apache::lucene::index::IndexWriter & a1) const
        {
          return ::org::apache::lucene::index::MergePolicy$MergeSpecification(env->callObjectMethod(this$, mids$[mid_findForcedDeletesMerges_581dbc49], a0.this$, a1.this$));
        }

        ::org::apache::lucene::index::MergePolicy$MergeSpecification LogMergePolicy::findForcedMerges(const ::org::apache::lucene::index::SegmentInfos & a0, jint a1, const ::java::util::Map & a2, const ::org::apache::lucene::index::IndexWriter & a3) const
        {
          return ::org::apache::lucene::index::MergePolicy$MergeSpecification(env->callObjectMethod(this$, mids$[mid_findForcedMerges_4fe4a5b5], a0.this$, a1, a2.this$, a3.this$));
        }

        ::org::apache::lucene::index::MergePolicy$MergeSpecification LogMergePolicy::findMerges(const ::org::apache::lucene::index::MergeTrigger & a0, const ::org::apache::lucene::index::SegmentInfos & a1, const ::org::apache::lucene::index::IndexWriter & a2) const
        {
          return ::org::apache::lucene::index::MergePolicy$MergeSpecification(env->callObjectMethod(this$, mids$[mid_findMerges_cada0df0], a0.this$, a1.this$, a2.this$));
        }

        jboolean LogMergePolicy::getCalibrateSizeByDeletes() const
        {
          return env->callBooleanMethod(this$, mids$[mid_getCalibrateSizeByDeletes_54c6a16a]);
        }

        jint LogMergePolicy::getMaxMergeDocs() const
        {
          return env->callIntMethod(this$, mids$[mid_getMaxMergeDocs_54c6a179]);
        }

        jint LogMergePolicy::getMergeFactor() const
        {
          return env->callIntMethod(this$, mids$[mid_getMergeFactor_54c6a179]);
        }

        void LogMergePolicy::setCalibrateSizeByDeletes(jboolean a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setCalibrateSizeByDeletes_bb0c767f], a0);
        }

        void LogMergePolicy::setMaxMergeDocs(jint a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setMaxMergeDocs_39c7bd3c], a0);
        }

        void LogMergePolicy::setMergeFactor(jint a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setMergeFactor_39c7bd3c], a0);
        }

        ::java::lang::String LogMergePolicy::toString() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_LogMergePolicy_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_LogMergePolicy_instance_(PyTypeObject *type, PyObject *arg);
        static int t_LogMergePolicy_init_(t_LogMergePolicy *self, PyObject *args, PyObject *kwds);
        static PyObject *t_LogMergePolicy_close(t_LogMergePolicy *self, PyObject *args);
        static PyObject *t_LogMergePolicy_findForcedDeletesMerges(t_LogMergePolicy *self, PyObject *args);
        static PyObject *t_LogMergePolicy_findForcedMerges(t_LogMergePolicy *self, PyObject *args);
        static PyObject *t_LogMergePolicy_findMerges(t_LogMergePolicy *self, PyObject *args);
        static PyObject *t_LogMergePolicy_getCalibrateSizeByDeletes(t_LogMergePolicy *self);
        static PyObject *t_LogMergePolicy_getMaxMergeDocs(t_LogMergePolicy *self);
        static PyObject *t_LogMergePolicy_getMergeFactor(t_LogMergePolicy *self);
        static PyObject *t_LogMergePolicy_setCalibrateSizeByDeletes(t_LogMergePolicy *self, PyObject *arg);
        static PyObject *t_LogMergePolicy_setMaxMergeDocs(t_LogMergePolicy *self, PyObject *arg);
        static PyObject *t_LogMergePolicy_setMergeFactor(t_LogMergePolicy *self, PyObject *arg);
        static PyObject *t_LogMergePolicy_toString(t_LogMergePolicy *self, PyObject *args);
        static PyObject *t_LogMergePolicy_get__calibrateSizeByDeletes(t_LogMergePolicy *self, void *data);
        static int t_LogMergePolicy_set__calibrateSizeByDeletes(t_LogMergePolicy *self, PyObject *arg, void *data);
        static PyObject *t_LogMergePolicy_get__maxMergeDocs(t_LogMergePolicy *self, void *data);
        static int t_LogMergePolicy_set__maxMergeDocs(t_LogMergePolicy *self, PyObject *arg, void *data);
        static PyObject *t_LogMergePolicy_get__mergeFactor(t_LogMergePolicy *self, void *data);
        static int t_LogMergePolicy_set__mergeFactor(t_LogMergePolicy *self, PyObject *arg, void *data);
        static PyGetSetDef t_LogMergePolicy__fields_[] = {
          DECLARE_GETSET_FIELD(t_LogMergePolicy, calibrateSizeByDeletes),
          DECLARE_GETSET_FIELD(t_LogMergePolicy, maxMergeDocs),
          DECLARE_GETSET_FIELD(t_LogMergePolicy, mergeFactor),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_LogMergePolicy__methods_[] = {
          DECLARE_METHOD(t_LogMergePolicy, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_LogMergePolicy, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_LogMergePolicy, close, METH_VARARGS),
          DECLARE_METHOD(t_LogMergePolicy, findForcedDeletesMerges, METH_VARARGS),
          DECLARE_METHOD(t_LogMergePolicy, findForcedMerges, METH_VARARGS),
          DECLARE_METHOD(t_LogMergePolicy, findMerges, METH_VARARGS),
          DECLARE_METHOD(t_LogMergePolicy, getCalibrateSizeByDeletes, METH_NOARGS),
          DECLARE_METHOD(t_LogMergePolicy, getMaxMergeDocs, METH_NOARGS),
          DECLARE_METHOD(t_LogMergePolicy, getMergeFactor, METH_NOARGS),
          DECLARE_METHOD(t_LogMergePolicy, setCalibrateSizeByDeletes, METH_O),
          DECLARE_METHOD(t_LogMergePolicy, setMaxMergeDocs, METH_O),
          DECLARE_METHOD(t_LogMergePolicy, setMergeFactor, METH_O),
          DECLARE_METHOD(t_LogMergePolicy, toString, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(LogMergePolicy, t_LogMergePolicy, ::org::apache::lucene::index::MergePolicy, LogMergePolicy, t_LogMergePolicy_init_, 0, 0, t_LogMergePolicy__fields_, 0, 0);

        void t_LogMergePolicy::install(PyObject *module)
        {
          installType(&PY_TYPE(LogMergePolicy), module, "LogMergePolicy", 0);
        }

        void t_LogMergePolicy::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(LogMergePolicy).tp_dict, "class_", make_descriptor(LogMergePolicy::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(LogMergePolicy).tp_dict, "wrapfn_", make_descriptor(t_LogMergePolicy::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(LogMergePolicy).tp_dict, "boxfn_", make_descriptor(boxObject));
          env->getClass(LogMergePolicy::initializeClass);
          PyDict_SetItemString(PY_TYPE(LogMergePolicy).tp_dict, "DEFAULT_MAX_MERGE_DOCS", make_descriptor(LogMergePolicy::DEFAULT_MAX_MERGE_DOCS));
          PyDict_SetItemString(PY_TYPE(LogMergePolicy).tp_dict, "DEFAULT_MERGE_FACTOR", make_descriptor(LogMergePolicy::DEFAULT_MERGE_FACTOR));
          PyDict_SetItemString(PY_TYPE(LogMergePolicy).tp_dict, "DEFAULT_NO_CFS_RATIO", make_descriptor(LogMergePolicy::DEFAULT_NO_CFS_RATIO));
          PyDict_SetItemString(PY_TYPE(LogMergePolicy).tp_dict, "LEVEL_LOG_SPAN", make_descriptor(LogMergePolicy::LEVEL_LOG_SPAN));
        }

        static PyObject *t_LogMergePolicy_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, LogMergePolicy::initializeClass, 1)))
            return NULL;
          return t_LogMergePolicy::wrap_Object(LogMergePolicy(((t_LogMergePolicy *) arg)->object.this$));
        }
        static PyObject *t_LogMergePolicy_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, LogMergePolicy::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_LogMergePolicy_init_(t_LogMergePolicy *self, PyObject *args, PyObject *kwds)
        {
          LogMergePolicy object((jobject) NULL);

          INT_CALL(object = LogMergePolicy());
          self->object = object;

          return 0;
        }

        static PyObject *t_LogMergePolicy_close(t_LogMergePolicy *self, PyObject *args)
        {

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(self->object.close());
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(LogMergePolicy), (PyObject *) self, "close", args, 2);
        }

        static PyObject *t_LogMergePolicy_findForcedDeletesMerges(t_LogMergePolicy *self, PyObject *args)
        {
          ::org::apache::lucene::index::SegmentInfos a0((jobject) NULL);
          ::org::apache::lucene::index::IndexWriter a1((jobject) NULL);
          ::org::apache::lucene::index::MergePolicy$MergeSpecification result((jobject) NULL);

          if (!parseArgs(args, "kk", ::org::apache::lucene::index::SegmentInfos::initializeClass, ::org::apache::lucene::index::IndexWriter::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = self->object.findForcedDeletesMerges(a0, a1));
            return ::org::apache::lucene::index::t_MergePolicy$MergeSpecification::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(LogMergePolicy), (PyObject *) self, "findForcedDeletesMerges", args, 2);
        }

        static PyObject *t_LogMergePolicy_findForcedMerges(t_LogMergePolicy *self, PyObject *args)
        {
          ::org::apache::lucene::index::SegmentInfos a0((jobject) NULL);
          jint a1;
          ::java::util::Map a2((jobject) NULL);
          PyTypeObject **p2;
          ::org::apache::lucene::index::IndexWriter a3((jobject) NULL);
          ::org::apache::lucene::index::MergePolicy$MergeSpecification result((jobject) NULL);

          if (!parseArgs(args, "kIKk", ::org::apache::lucene::index::SegmentInfos::initializeClass, ::java::util::Map::initializeClass, ::org::apache::lucene::index::IndexWriter::initializeClass, &a0, &a1, &a2, &p2, ::java::util::t_Map::parameters_, &a3))
          {
            OBJ_CALL(result = self->object.findForcedMerges(a0, a1, a2, a3));
            return ::org::apache::lucene::index::t_MergePolicy$MergeSpecification::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(LogMergePolicy), (PyObject *) self, "findForcedMerges", args, 2);
        }

        static PyObject *t_LogMergePolicy_findMerges(t_LogMergePolicy *self, PyObject *args)
        {
          ::org::apache::lucene::index::MergeTrigger a0((jobject) NULL);
          PyTypeObject **p0;
          ::org::apache::lucene::index::SegmentInfos a1((jobject) NULL);
          ::org::apache::lucene::index::IndexWriter a2((jobject) NULL);
          ::org::apache::lucene::index::MergePolicy$MergeSpecification result((jobject) NULL);

          if (!parseArgs(args, "Kkk", ::org::apache::lucene::index::MergeTrigger::initializeClass, ::org::apache::lucene::index::SegmentInfos::initializeClass, ::org::apache::lucene::index::IndexWriter::initializeClass, &a0, &p0, ::org::apache::lucene::index::t_MergeTrigger::parameters_, &a1, &a2))
          {
            OBJ_CALL(result = self->object.findMerges(a0, a1, a2));
            return ::org::apache::lucene::index::t_MergePolicy$MergeSpecification::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(LogMergePolicy), (PyObject *) self, "findMerges", args, 2);
        }

        static PyObject *t_LogMergePolicy_getCalibrateSizeByDeletes(t_LogMergePolicy *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.getCalibrateSizeByDeletes());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_LogMergePolicy_getMaxMergeDocs(t_LogMergePolicy *self)
        {
          jint result;
          OBJ_CALL(result = self->object.getMaxMergeDocs());
          return PyInt_FromLong((long) result);
        }

        static PyObject *t_LogMergePolicy_getMergeFactor(t_LogMergePolicy *self)
        {
          jint result;
          OBJ_CALL(result = self->object.getMergeFactor());
          return PyInt_FromLong((long) result);
        }

        static PyObject *t_LogMergePolicy_setCalibrateSizeByDeletes(t_LogMergePolicy *self, PyObject *arg)
        {
          jboolean a0;

          if (!parseArg(arg, "Z", &a0))
          {
            OBJ_CALL(self->object.setCalibrateSizeByDeletes(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setCalibrateSizeByDeletes", arg);
          return NULL;
        }

        static PyObject *t_LogMergePolicy_setMaxMergeDocs(t_LogMergePolicy *self, PyObject *arg)
        {
          jint a0;

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(self->object.setMaxMergeDocs(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setMaxMergeDocs", arg);
          return NULL;
        }

        static PyObject *t_LogMergePolicy_setMergeFactor(t_LogMergePolicy *self, PyObject *arg)
        {
          jint a0;

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(self->object.setMergeFactor(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setMergeFactor", arg);
          return NULL;
        }

        static PyObject *t_LogMergePolicy_toString(t_LogMergePolicy *self, PyObject *args)
        {
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.toString());
            return j2p(result);
          }

          return callSuper(&PY_TYPE(LogMergePolicy), (PyObject *) self, "toString", args, 2);
        }

        static PyObject *t_LogMergePolicy_get__calibrateSizeByDeletes(t_LogMergePolicy *self, void *data)
        {
          jboolean value;
          OBJ_CALL(value = self->object.getCalibrateSizeByDeletes());
          Py_RETURN_BOOL(value);
        }
        static int t_LogMergePolicy_set__calibrateSizeByDeletes(t_LogMergePolicy *self, PyObject *arg, void *data)
        {
          {
            jboolean value;
            if (!parseArg(arg, "Z", &value))
            {
              INT_CALL(self->object.setCalibrateSizeByDeletes(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "calibrateSizeByDeletes", arg);
          return -1;
        }

        static PyObject *t_LogMergePolicy_get__maxMergeDocs(t_LogMergePolicy *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object.getMaxMergeDocs());
          return PyInt_FromLong((long) value);
        }
        static int t_LogMergePolicy_set__maxMergeDocs(t_LogMergePolicy *self, PyObject *arg, void *data)
        {
          {
            jint value;
            if (!parseArg(arg, "I", &value))
            {
              INT_CALL(self->object.setMaxMergeDocs(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "maxMergeDocs", arg);
          return -1;
        }

        static PyObject *t_LogMergePolicy_get__mergeFactor(t_LogMergePolicy *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object.getMergeFactor());
          return PyInt_FromLong((long) value);
        }
        static int t_LogMergePolicy_set__mergeFactor(t_LogMergePolicy *self, PyObject *arg, void *data)
        {
          {
            jint value;
            if (!parseArg(arg, "I", &value))
            {
              INT_CALL(self->object.setMergeFactor(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "mergeFactor", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/miscellaneous/PrefixAwareTokenFilter.h"
#include "org/apache/lucene/analysis/Token.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {

          ::java::lang::Class *PrefixAwareTokenFilter::class$ = NULL;
          jmethodID *PrefixAwareTokenFilter::mids$ = NULL;
          bool PrefixAwareTokenFilter::live$ = false;

          jclass PrefixAwareTokenFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/miscellaneous/PrefixAwareTokenFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_74ceae3e] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;Lorg/apache/lucene/analysis/TokenStream;)V");
              mids$[mid_close_54c6a166] = env->getMethodID(cls, "close", "()V");
              mids$[mid_end_54c6a166] = env->getMethodID(cls, "end", "()V");
              mids$[mid_getPrefix_71f550c9] = env->getMethodID(cls, "getPrefix", "()Lorg/apache/lucene/analysis/TokenStream;");
              mids$[mid_getSuffix_71f550c9] = env->getMethodID(cls, "getSuffix", "()Lorg/apache/lucene/analysis/TokenStream;");
              mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");
              mids$[mid_reset_54c6a166] = env->getMethodID(cls, "reset", "()V");
              mids$[mid_setPrefix_c7c794dc] = env->getMethodID(cls, "setPrefix", "(Lorg/apache/lucene/analysis/TokenStream;)V");
              mids$[mid_setSuffix_c7c794dc] = env->getMethodID(cls, "setSuffix", "(Lorg/apache/lucene/analysis/TokenStream;)V");
              mids$[mid_updateSuffixToken_a810a20b] = env->getMethodID(cls, "updateSuffixToken", "(Lorg/apache/lucene/analysis/Token;Lorg/apache/lucene/analysis/Token;)Lorg/apache/lucene/analysis/Token;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          PrefixAwareTokenFilter::PrefixAwareTokenFilter(const ::org::apache::lucene::analysis::TokenStream & a0, const ::org::apache::lucene::analysis::TokenStream & a1) : ::org::apache::lucene::analysis::TokenStream(env->newObject(initializeClass, &mids$, mid_init$_74ceae3e, a0.this$, a1.this$)) {}

          void PrefixAwareTokenFilter::close() const
          {
            env->callVoidMethod(this$, mids$[mid_close_54c6a166]);
          }

          void PrefixAwareTokenFilter::end() const
          {
            env->callVoidMethod(this$, mids$[mid_end_54c6a166]);
          }

          ::org::apache::lucene::analysis::TokenStream PrefixAwareTokenFilter::getPrefix() const
          {
            return ::org::apache::lucene::analysis::TokenStream(env->callObjectMethod(this$, mids$[mid_getPrefix_71f550c9]));
          }

          ::org::apache::lucene::analysis::TokenStream PrefixAwareTokenFilter::getSuffix() const
          {
            return ::org::apache::lucene::analysis::TokenStream(env->callObjectMethod(this$, mids$[mid_getSuffix_71f550c9]));
          }

          jboolean PrefixAwareTokenFilter::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_54c6a16a]);
          }

          void PrefixAwareTokenFilter::reset() const
          {
            env->callVoidMethod(this$, mids$[mid_reset_54c6a166]);
          }

          void PrefixAwareTokenFilter::setPrefix(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setPrefix_c7c794dc], a0.this$);
          }

          void PrefixAwareTokenFilter::setSuffix(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setSuffix_c7c794dc], a0.this$);
          }

          ::org::apache::lucene::analysis::Token PrefixAwareTokenFilter::updateSuffixToken(const ::org::apache::lucene::analysis::Token & a0, const ::org::apache::lucene::analysis::Token & a1) const
          {
            return ::org::apache::lucene::analysis::Token(env->callObjectMethod(this$, mids$[mid_updateSuffixToken_a810a20b], a0.this$, a1.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {
          static PyObject *t_PrefixAwareTokenFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PrefixAwareTokenFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_PrefixAwareTokenFilter_init_(t_PrefixAwareTokenFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_PrefixAwareTokenFilter_close(t_PrefixAwareTokenFilter *self, PyObject *args);
          static PyObject *t_PrefixAwareTokenFilter_end(t_PrefixAwareTokenFilter *self, PyObject *args);
          static PyObject *t_PrefixAwareTokenFilter_getPrefix(t_PrefixAwareTokenFilter *self);
          static PyObject *t_PrefixAwareTokenFilter_getSuffix(t_PrefixAwareTokenFilter *self);
          static PyObject *t_PrefixAwareTokenFilter_incrementToken(t_PrefixAwareTokenFilter *self, PyObject *args);
          static PyObject *t_PrefixAwareTokenFilter_reset(t_PrefixAwareTokenFilter *self, PyObject *args);
          static PyObject *t_PrefixAwareTokenFilter_setPrefix(t_PrefixAwareTokenFilter *self, PyObject *arg);
          static PyObject *t_PrefixAwareTokenFilter_setSuffix(t_PrefixAwareTokenFilter *self, PyObject *arg);
          static PyObject *t_PrefixAwareTokenFilter_updateSuffixToken(t_PrefixAwareTokenFilter *self, PyObject *args);
          static PyObject *t_PrefixAwareTokenFilter_get__prefix(t_PrefixAwareTokenFilter *self, void *data);
          static int t_PrefixAwareTokenFilter_set__prefix(t_PrefixAwareTokenFilter *self, PyObject *arg, void *data);
          static PyObject *t_PrefixAwareTokenFilter_get__suffix(t_PrefixAwareTokenFilter *self, void *data);
          static int t_PrefixAwareTokenFilter_set__suffix(t_PrefixAwareTokenFilter *self, PyObject *arg, void *data);
          static PyGetSetDef t_PrefixAwareTokenFilter__fields_[] = {
            DECLARE_GETSET_FIELD(t_PrefixAwareTokenFilter, prefix),
            DECLARE_GETSET_FIELD(t_PrefixAwareTokenFilter, suffix),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_PrefixAwareTokenFilter__methods_[] = {
            DECLARE_METHOD(t_PrefixAwareTokenFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PrefixAwareTokenFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PrefixAwareTokenFilter, close, METH_VARARGS),
            DECLARE_METHOD(t_PrefixAwareTokenFilter, end, METH_VARARGS),
            DECLARE_METHOD(t_PrefixAwareTokenFilter, getPrefix, METH_NOARGS),
            DECLARE_METHOD(t_PrefixAwareTokenFilter, getSuffix, METH_NOARGS),
            DECLARE_METHOD(t_PrefixAwareTokenFilter, incrementToken, METH_VARARGS),
            DECLARE_METHOD(t_PrefixAwareTokenFilter, reset, METH_VARARGS),
            DECLARE_METHOD(t_PrefixAwareTokenFilter, setPrefix, METH_O),
            DECLARE_METHOD(t_PrefixAwareTokenFilter, setSuffix, METH_O),
            DECLARE_METHOD(t_PrefixAwareTokenFilter, updateSuffixToken, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(PrefixAwareTokenFilter, t_PrefixAwareTokenFilter, ::org::apache::lucene::analysis::TokenStream, PrefixAwareTokenFilter, t_PrefixAwareTokenFilter_init_, 0, 0, t_PrefixAwareTokenFilter__fields_, 0, 0);

          void t_PrefixAwareTokenFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(PrefixAwareTokenFilter), module, "PrefixAwareTokenFilter", 0);
          }

          void t_PrefixAwareTokenFilter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(PrefixAwareTokenFilter).tp_dict, "class_", make_descriptor(PrefixAwareTokenFilter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(PrefixAwareTokenFilter).tp_dict, "wrapfn_", make_descriptor(t_PrefixAwareTokenFilter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(PrefixAwareTokenFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_PrefixAwareTokenFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, PrefixAwareTokenFilter::initializeClass, 1)))
              return NULL;
            return t_PrefixAwareTokenFilter::wrap_Object(PrefixAwareTokenFilter(((t_PrefixAwareTokenFilter *) arg)->object.this$));
          }
          static PyObject *t_PrefixAwareTokenFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, PrefixAwareTokenFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_PrefixAwareTokenFilter_init_(t_PrefixAwareTokenFilter *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::TokenStream a1((jobject) NULL);
            PrefixAwareTokenFilter object((jobject) NULL);

            if (!parseArgs(args, "kk", ::org::apache::lucene::analysis::TokenStream::initializeClass, ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0, &a1))
            {
              INT_CALL(object = PrefixAwareTokenFilter(a0, a1));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_PrefixAwareTokenFilter_close(t_PrefixAwareTokenFilter *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.close());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(PrefixAwareTokenFilter), (PyObject *) self, "close", args, 2);
          }

          static PyObject *t_PrefixAwareTokenFilter_end(t_PrefixAwareTokenFilter *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.end());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(PrefixAwareTokenFilter), (PyObject *) self, "end", args, 2);
          }

          static PyObject *t_PrefixAwareTokenFilter_getPrefix(t_PrefixAwareTokenFilter *self)
          {
            ::org::apache::lucene::analysis::TokenStream result((jobject) NULL);
            OBJ_CALL(result = self->object.getPrefix());
            return ::org::apache::lucene::analysis::t_TokenStream::wrap_Object(result);
          }

          static PyObject *t_PrefixAwareTokenFilter_getSuffix(t_PrefixAwareTokenFilter *self)
          {
            ::org::apache::lucene::analysis::TokenStream result((jobject) NULL);
            OBJ_CALL(result = self->object.getSuffix());
            return ::org::apache::lucene::analysis::t_TokenStream::wrap_Object(result);
          }

          static PyObject *t_PrefixAwareTokenFilter_incrementToken(t_PrefixAwareTokenFilter *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(PrefixAwareTokenFilter), (PyObject *) self, "incrementToken", args, 2);
          }

          static PyObject *t_PrefixAwareTokenFilter_reset(t_PrefixAwareTokenFilter *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.reset());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(PrefixAwareTokenFilter), (PyObject *) self, "reset", args, 2);
          }

          static PyObject *t_PrefixAwareTokenFilter_setPrefix(t_PrefixAwareTokenFilter *self, PyObject *arg)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(self->object.setPrefix(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setPrefix", arg);
            return NULL;
          }

          static PyObject *t_PrefixAwareTokenFilter_setSuffix(t_PrefixAwareTokenFilter *self, PyObject *arg)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(self->object.setSuffix(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setSuffix", arg);
            return NULL;
          }

          static PyObject *t_PrefixAwareTokenFilter_updateSuffixToken(t_PrefixAwareTokenFilter *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::Token a0((jobject) NULL);
            ::org::apache::lucene::analysis::Token a1((jobject) NULL);
            ::org::apache::lucene::analysis::Token result((jobject) NULL);

            if (!parseArgs(args, "kk", ::org::apache::lucene::analysis::Token::initializeClass, ::org::apache::lucene::analysis::Token::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.updateSuffixToken(a0, a1));
              return ::org::apache::lucene::analysis::t_Token::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "updateSuffixToken", args);
            return NULL;
          }

          static PyObject *t_PrefixAwareTokenFilter_get__prefix(t_PrefixAwareTokenFilter *self, void *data)
          {
            ::org::apache::lucene::analysis::TokenStream value((jobject) NULL);
            OBJ_CALL(value = self->object.getPrefix());
            return ::org::apache::lucene::analysis::t_TokenStream::wrap_Object(value);
          }
          static int t_PrefixAwareTokenFilter_set__prefix(t_PrefixAwareTokenFilter *self, PyObject *arg, void *data)
          {
            {
              ::org::apache::lucene::analysis::TokenStream value((jobject) NULL);
              if (!parseArg(arg, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &value))
              {
                INT_CALL(self->object.setPrefix(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "prefix", arg);
            return -1;
          }

          static PyObject *t_PrefixAwareTokenFilter_get__suffix(t_PrefixAwareTokenFilter *self, void *data)
          {
            ::org::apache::lucene::analysis::TokenStream value((jobject) NULL);
            OBJ_CALL(value = self->object.getSuffix());
            return ::org::apache::lucene::analysis::t_TokenStream::wrap_Object(value);
          }
          static int t_PrefixAwareTokenFilter_set__suffix(t_PrefixAwareTokenFilter *self, PyObject *arg, void *data)
          {
            {
              ::org::apache::lucene::analysis::TokenStream value((jobject) NULL);
              if (!parseArg(arg, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &value))
              {
                INT_CALL(self->object.setSuffix(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "suffix", arg);
            return -1;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/bg/BulgarianStemFilterFactory.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/String.h"
#include "java/util/Map.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace bg {

          ::java::lang::Class *BulgarianStemFilterFactory::class$ = NULL;
          jmethodID *BulgarianStemFilterFactory::mids$ = NULL;
          bool BulgarianStemFilterFactory::live$ = false;

          jclass BulgarianStemFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/bg/BulgarianStemFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4c9e2b1c] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_a65cd6ab] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/TokenStream;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          BulgarianStemFilterFactory::BulgarianStemFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_4c9e2b1c, a0.this$)) {}

          ::org::apache::lucene::analysis::TokenStream BulgarianStemFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::TokenStream(env->callObjectMethod(this$, mids$[mid_create_a65cd6ab], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace bg {
          static PyObject *t_BulgarianStemFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_BulgarianStemFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_BulgarianStemFilterFactory_init_(t_BulgarianStemFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_BulgarianStemFilterFactory_create(t_BulgarianStemFilterFactory *self, PyObject *args);

          static PyMethodDef t_BulgarianStemFilterFactory__methods_[] = {
            DECLARE_METHOD(t_BulgarianStemFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_BulgarianStemFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_BulgarianStemFilterFactory, create, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(BulgarianStemFilterFactory, t_BulgarianStemFilterFactory, ::org::apache::lucene::analysis::util::TokenFilterFactory, BulgarianStemFilterFactory, t_BulgarianStemFilterFactory_init_, 0, 0, 0, 0, 0);

          void t_BulgarianStemFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(BulgarianStemFilterFactory), module, "BulgarianStemFilterFactory", 0);
          }

          void t_BulgarianStemFilterFactory::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(BulgarianStemFilterFactory).tp_dict, "class_", make_descriptor(BulgarianStemFilterFactory::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(BulgarianStemFilterFactory).tp_dict, "wrapfn_", make_descriptor(t_BulgarianStemFilterFactory::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(BulgarianStemFilterFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_BulgarianStemFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, BulgarianStemFilterFactory::initializeClass, 1)))
              return NULL;
            return t_BulgarianStemFilterFactory::wrap_Object(BulgarianStemFilterFactory(((t_BulgarianStemFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_BulgarianStemFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, BulgarianStemFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_BulgarianStemFilterFactory_init_(t_BulgarianStemFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            BulgarianStemFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = BulgarianStemFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_BulgarianStemFilterFactory_create(t_BulgarianStemFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::TokenStream result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::t_TokenStream::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(BulgarianStemFilterFactory), (PyObject *) self, "create", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/FieldCache$DoubleParser.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *FieldCache$DoubleParser::class$ = NULL;
        jmethodID *FieldCache$DoubleParser::mids$ = NULL;
        bool FieldCache$DoubleParser::live$ = false;

        jclass FieldCache$DoubleParser::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/FieldCache$DoubleParser");

            mids$ = new jmethodID[max_mid];
            mids$[mid_parseDouble_7bc03dd6] = env->getMethodID(cls, "parseDouble", "(Lorg/apache/lucene/util/BytesRef;)D");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        jdouble FieldCache$DoubleParser::parseDouble(const ::org::apache::lucene::util::BytesRef & a0) const
        {
          return env->callDoubleMethod(this$, mids$[mid_parseDouble_7bc03dd6], a0.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_FieldCache$DoubleParser_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FieldCache$DoubleParser_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FieldCache$DoubleParser_parseDouble(t_FieldCache$DoubleParser *self, PyObject *arg);

        static PyMethodDef t_FieldCache$DoubleParser__methods_[] = {
          DECLARE_METHOD(t_FieldCache$DoubleParser, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FieldCache$DoubleParser, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FieldCache$DoubleParser, parseDouble, METH_O),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(FieldCache$DoubleParser, t_FieldCache$DoubleParser, ::org::apache::lucene::search::FieldCache$Parser, FieldCache$DoubleParser, abstract_init, 0, 0, 0, 0, 0);

        void t_FieldCache$DoubleParser::install(PyObject *module)
        {
          installType(&PY_TYPE(FieldCache$DoubleParser), module, "FieldCache$DoubleParser", 0);
        }

        void t_FieldCache$DoubleParser::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(FieldCache$DoubleParser).tp_dict, "class_", make_descriptor(FieldCache$DoubleParser::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(FieldCache$DoubleParser).tp_dict, "wrapfn_", make_descriptor(t_FieldCache$DoubleParser::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(FieldCache$DoubleParser).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_FieldCache$DoubleParser_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, FieldCache$DoubleParser::initializeClass, 1)))
            return NULL;
          return t_FieldCache$DoubleParser::wrap_Object(FieldCache$DoubleParser(((t_FieldCache$DoubleParser *) arg)->object.this$));
        }
        static PyObject *t_FieldCache$DoubleParser_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, FieldCache$DoubleParser::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_FieldCache$DoubleParser_parseDouble(t_FieldCache$DoubleParser *self, PyObject *arg)
        {
          ::org::apache::lucene::util::BytesRef a0((jobject) NULL);
          jdouble result;

          if (!parseArg(arg, "k", ::org::apache::lucene::util::BytesRef::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.parseDouble(a0));
            return PyFloat_FromDouble((double) result);
          }

          PyErr_SetArgsError((PyObject *) self, "parseDouble", arg);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/similarities/PerFieldSimilarityWrapper.h"
#include "org/apache/lucene/search/TermStatistics.h"
#include "org/apache/lucene/search/similarities/Similarity$SimScorer.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/index/FieldInvertState.h"
#include "org/apache/lucene/search/similarities/Similarity$SimWeight.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "java/lang/String.h"
#include "org/apache/lucene/search/CollectionStatistics.h"
#include "java/io/IOException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace similarities {

          ::java::lang::Class *PerFieldSimilarityWrapper::class$ = NULL;
          jmethodID *PerFieldSimilarityWrapper::mids$ = NULL;
          bool PerFieldSimilarityWrapper::live$ = false;

          jclass PerFieldSimilarityWrapper::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/similarities/PerFieldSimilarityWrapper");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_computeNorm_6ff84e0e] = env->getMethodID(cls, "computeNorm", "(Lorg/apache/lucene/index/FieldInvertState;)J");
              mids$[mid_computeWeight_8bb6ee0b] = env->getMethodID(cls, "computeWeight", "(FLorg/apache/lucene/search/CollectionStatistics;[Lorg/apache/lucene/search/TermStatistics;)Lorg/apache/lucene/search/similarities/Similarity$SimWeight;");
              mids$[mid_get_951784a9] = env->getMethodID(cls, "get", "(Ljava/lang/String;)Lorg/apache/lucene/search/similarities/Similarity;");
              mids$[mid_simScorer_9a2cfed8] = env->getMethodID(cls, "simScorer", "(Lorg/apache/lucene/search/similarities/Similarity$SimWeight;Lorg/apache/lucene/index/AtomicReaderContext;)Lorg/apache/lucene/search/similarities/Similarity$SimScorer;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          PerFieldSimilarityWrapper::PerFieldSimilarityWrapper() : ::org::apache::lucene::search::similarities::Similarity(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          jlong PerFieldSimilarityWrapper::computeNorm(const ::org::apache::lucene::index::FieldInvertState & a0) const
          {
            return env->callLongMethod(this$, mids$[mid_computeNorm_6ff84e0e], a0.this$);
          }

          ::org::apache::lucene::search::similarities::Similarity$SimWeight PerFieldSimilarityWrapper::computeWeight(jfloat a0, const ::org::apache::lucene::search::CollectionStatistics & a1, const JArray< ::org::apache::lucene::search::TermStatistics > & a2) const
          {
            return ::org::apache::lucene::search::similarities::Similarity$SimWeight(env->callObjectMethod(this$, mids$[mid_computeWeight_8bb6ee0b], a0, a1.this$, a2.this$));
          }

          ::org::apache::lucene::search::similarities::Similarity PerFieldSimilarityWrapper::get(const ::java::lang::String & a0) const
          {
            return ::org::apache::lucene::search::similarities::Similarity(env->callObjectMethod(this$, mids$[mid_get_951784a9], a0.this$));
          }

          ::org::apache::lucene::search::similarities::Similarity$SimScorer PerFieldSimilarityWrapper::simScorer(const ::org::apache::lucene::search::similarities::Similarity$SimWeight & a0, const ::org::apache::lucene::index::AtomicReaderContext & a1) const
          {
            return ::org::apache::lucene::search::similarities::Similarity$SimScorer(env->callObjectMethod(this$, mids$[mid_simScorer_9a2cfed8], a0.this$, a1.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace similarities {
          static PyObject *t_PerFieldSimilarityWrapper_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PerFieldSimilarityWrapper_instance_(PyTypeObject *type, PyObject *arg);
          static int t_PerFieldSimilarityWrapper_init_(t_PerFieldSimilarityWrapper *self, PyObject *args, PyObject *kwds);
          static PyObject *t_PerFieldSimilarityWrapper_computeNorm(t_PerFieldSimilarityWrapper *self, PyObject *args);
          static PyObject *t_PerFieldSimilarityWrapper_computeWeight(t_PerFieldSimilarityWrapper *self, PyObject *args);
          static PyObject *t_PerFieldSimilarityWrapper_get(t_PerFieldSimilarityWrapper *self, PyObject *arg);
          static PyObject *t_PerFieldSimilarityWrapper_simScorer(t_PerFieldSimilarityWrapper *self, PyObject *args);

          static PyMethodDef t_PerFieldSimilarityWrapper__methods_[] = {
            DECLARE_METHOD(t_PerFieldSimilarityWrapper, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PerFieldSimilarityWrapper, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PerFieldSimilarityWrapper, computeNorm, METH_VARARGS),
            DECLARE_METHOD(t_PerFieldSimilarityWrapper, computeWeight, METH_VARARGS),
            DECLARE_METHOD(t_PerFieldSimilarityWrapper, get, METH_O),
            DECLARE_METHOD(t_PerFieldSimilarityWrapper, simScorer, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(PerFieldSimilarityWrapper, t_PerFieldSimilarityWrapper, ::org::apache::lucene::search::similarities::Similarity, PerFieldSimilarityWrapper, t_PerFieldSimilarityWrapper_init_, 0, 0, 0, 0, 0);

          void t_PerFieldSimilarityWrapper::install(PyObject *module)
          {
            installType(&PY_TYPE(PerFieldSimilarityWrapper), module, "PerFieldSimilarityWrapper", 0);
          }

          void t_PerFieldSimilarityWrapper::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(PerFieldSimilarityWrapper).tp_dict, "class_", make_descriptor(PerFieldSimilarityWrapper::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(PerFieldSimilarityWrapper).tp_dict, "wrapfn_", make_descriptor(t_PerFieldSimilarityWrapper::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(PerFieldSimilarityWrapper).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_PerFieldSimilarityWrapper_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, PerFieldSimilarityWrapper::initializeClass, 1)))
              return NULL;
            return t_PerFieldSimilarityWrapper::wrap_Object(PerFieldSimilarityWrapper(((t_PerFieldSimilarityWrapper *) arg)->object.this$));
          }
          static PyObject *t_PerFieldSimilarityWrapper_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, PerFieldSimilarityWrapper::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_PerFieldSimilarityWrapper_init_(t_PerFieldSimilarityWrapper *self, PyObject *args, PyObject *kwds)
          {
            PerFieldSimilarityWrapper object((jobject) NULL);

            INT_CALL(object = PerFieldSimilarityWrapper());
            self->object = object;

            return 0;
          }

          static PyObject *t_PerFieldSimilarityWrapper_computeNorm(t_PerFieldSimilarityWrapper *self, PyObject *args)
          {
            ::org::apache::lucene::index::FieldInvertState a0((jobject) NULL);
            jlong result;

            if (!parseArgs(args, "k", ::org::apache::lucene::index::FieldInvertState::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.computeNorm(a0));
              return PyLong_FromLongLong((PY_LONG_LONG) result);
            }

            return callSuper(&PY_TYPE(PerFieldSimilarityWrapper), (PyObject *) self, "computeNorm", args, 2);
          }

          static PyObject *t_PerFieldSimilarityWrapper_computeWeight(t_PerFieldSimilarityWrapper *self, PyObject *args)
          {
            jfloat a0;
            ::org::apache::lucene::search::CollectionStatistics a1((jobject) NULL);
            JArray< ::org::apache::lucene::search::TermStatistics > a2((jobject) NULL);
            ::org::apache::lucene::search::similarities::Similarity$SimWeight result((jobject) NULL);

            if (!parseArgs(args, "Fk[k", ::org::apache::lucene::search::CollectionStatistics::initializeClass, ::org::apache::lucene::search::TermStatistics::initializeClass, &a0, &a1, &a2))
            {
              OBJ_CALL(result = self->object.computeWeight(a0, a1, a2));
              return ::org::apache::lucene::search::similarities::t_Similarity$SimWeight::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(PerFieldSimilarityWrapper), (PyObject *) self, "computeWeight", args, 2);
          }

          static PyObject *t_PerFieldSimilarityWrapper_get(t_PerFieldSimilarityWrapper *self, PyObject *arg)
          {
            ::java::lang::String a0((jobject) NULL);
            ::org::apache::lucene::search::similarities::Similarity result((jobject) NULL);

            if (!parseArg(arg, "s", &a0))
            {
              OBJ_CALL(result = self->object.get(a0));
              return ::org::apache::lucene::search::similarities::t_Similarity::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "get", arg);
            return NULL;
          }

          static PyObject *t_PerFieldSimilarityWrapper_simScorer(t_PerFieldSimilarityWrapper *self, PyObject *args)
          {
            ::org::apache::lucene::search::similarities::Similarity$SimWeight a0((jobject) NULL);
            ::org::apache::lucene::index::AtomicReaderContext a1((jobject) NULL);
            ::org::apache::lucene::search::similarities::Similarity$SimScorer result((jobject) NULL);

            if (!parseArgs(args, "kk", ::org::apache::lucene::search::similarities::Similarity$SimWeight::initializeClass, ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.simScorer(a0, a1));
              return ::org::apache::lucene::search::similarities::t_Similarity$SimScorer::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(PerFieldSimilarityWrapper), (PyObject *) self, "simScorer", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/store/Directory.h"
#include "java/io/Closeable.h"
#include "org/apache/lucene/store/ChecksumIndexInput.h"
#include "org/apache/lucene/store/Lock.h"
#include "java/lang/Class.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/store/IOContext.h"
#include "java/lang/String.h"
#include "org/apache/lucene/store/IndexOutput.h"
#include "java/util/Collection.h"
#include "org/apache/lucene/store/LockFactory.h"
#include "org/apache/lucene/store/IndexInput.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {

        ::java::lang::Class *Directory::class$ = NULL;
        jmethodID *Directory::mids$ = NULL;
        bool Directory::live$ = false;

        jclass Directory::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/store/Directory");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_clearLock_5fdc3f48] = env->getMethodID(cls, "clearLock", "(Ljava/lang/String;)V");
            mids$[mid_close_54c6a166] = env->getMethodID(cls, "close", "()V");
            mids$[mid_copy_146bec62] = env->getMethodID(cls, "copy", "(Lorg/apache/lucene/store/Directory;Ljava/lang/String;Ljava/lang/String;Lorg/apache/lucene/store/IOContext;)V");
            mids$[mid_createOutput_5ad5358d] = env->getMethodID(cls, "createOutput", "(Ljava/lang/String;Lorg/apache/lucene/store/IOContext;)Lorg/apache/lucene/store/IndexOutput;");
            mids$[mid_deleteFile_5fdc3f48] = env->getMethodID(cls, "deleteFile", "(Ljava/lang/String;)V");
            mids$[mid_fileExists_5fdc3f44] = env->getMethodID(cls, "fileExists", "(Ljava/lang/String;)Z");
            mids$[mid_fileLength_5fdc3f54] = env->getMethodID(cls, "fileLength", "(Ljava/lang/String;)J");
            mids$[mid_getLockFactory_e4e9c36d] = env->getMethodID(cls, "getLockFactory", "()Lorg/apache/lucene/store/LockFactory;");
            mids$[mid_getLockID_14c7b5c5] = env->getMethodID(cls, "getLockID", "()Ljava/lang/String;");
            mids$[mid_listAll_2e6d5245] = env->getMethodID(cls, "listAll", "()[Ljava/lang/String;");
            mids$[mid_makeLock_f26bb9a8] = env->getMethodID(cls, "makeLock", "(Ljava/lang/String;)Lorg/apache/lucene/store/Lock;");
            mids$[mid_openChecksumInput_dab98306] = env->getMethodID(cls, "openChecksumInput", "(Ljava/lang/String;Lorg/apache/lucene/store/IOContext;)Lorg/apache/lucene/store/ChecksumIndexInput;");
            mids$[mid_openInput_3e1b5375] = env->getMethodID(cls, "openInput", "(Ljava/lang/String;Lorg/apache/lucene/store/IOContext;)Lorg/apache/lucene/store/IndexInput;");
            mids$[mid_setLockFactory_9892eb8c] = env->getMethodID(cls, "setLockFactory", "(Lorg/apache/lucene/store/LockFactory;)V");
            mids$[mid_sync_9bfb370d] = env->getMethodID(cls, "sync", "(Ljava/util/Collection;)V");
            mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");
            mids$[mid_ensureOpen_54c6a166] = env->getMethodID(cls, "ensureOpen", "()V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        Directory::Directory() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        void Directory::clearLock(const ::java::lang::String & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_clearLock_5fdc3f48], a0.this$);
        }

        void Directory::close() const
        {
          env->callVoidMethod(this$, mids$[mid_close_54c6a166]);
        }

        void Directory::copy(const Directory & a0, const ::java::lang::String & a1, const ::java::lang::String & a2, const ::org::apache::lucene::store::IOContext & a3) const
        {
          env->callVoidMethod(this$, mids$[mid_copy_146bec62], a0.this$, a1.this$, a2.this$, a3.this$);
        }

        ::org::apache::lucene::store::IndexOutput Directory::createOutput(const ::java::lang::String & a0, const ::org::apache::lucene::store::IOContext & a1) const
        {
          return ::org::apache::lucene::store::IndexOutput(env->callObjectMethod(this$, mids$[mid_createOutput_5ad5358d], a0.this$, a1.this$));
        }

        void Directory::deleteFile(const ::java::lang::String & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_deleteFile_5fdc3f48], a0.this$);
        }

        jboolean Directory::fileExists(const ::java::lang::String & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_fileExists_5fdc3f44], a0.this$);
        }

        jlong Directory::fileLength(const ::java::lang::String & a0) const
        {
          return env->callLongMethod(this$, mids$[mid_fileLength_5fdc3f54], a0.this$);
        }

        ::org::apache::lucene::store::LockFactory Directory::getLockFactory() const
        {
          return ::org::apache::lucene::store::LockFactory(env->callObjectMethod(this$, mids$[mid_getLockFactory_e4e9c36d]));
        }

        ::java::lang::String Directory::getLockID() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getLockID_14c7b5c5]));
        }

        JArray< ::java::lang::String > Directory::listAll() const
        {
          return JArray< ::java::lang::String >(env->callObjectMethod(this$, mids$[mid_listAll_2e6d5245]));
        }

        ::org::apache::lucene::store::Lock Directory::makeLock(const ::java::lang::String & a0) const
        {
          return ::org::apache::lucene::store::Lock(env->callObjectMethod(this$, mids$[mid_makeLock_f26bb9a8], a0.this$));
        }

        ::org::apache::lucene::store::ChecksumIndexInput Directory::openChecksumInput(const ::java::lang::String & a0, const ::org::apache::lucene::store::IOContext & a1) const
        {
          return ::org::apache::lucene::store::ChecksumIndexInput(env->callObjectMethod(this$, mids$[mid_openChecksumInput_dab98306], a0.this$, a1.this$));
        }

        ::org::apache::lucene::store::IndexInput Directory::openInput(const ::java::lang::String & a0, const ::org::apache::lucene::store::IOContext & a1) const
        {
          return ::org::apache::lucene::store::IndexInput(env->callObjectMethod(this$, mids$[mid_openInput_3e1b5375], a0.this$, a1.this$));
        }

        void Directory::setLockFactory(const ::org::apache::lucene::store::LockFactory & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setLockFactory_9892eb8c], a0.this$);
        }

        void Directory::sync(const ::java::util::Collection & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_sync_9bfb370d], a0.this$);
        }

        ::java::lang::String Directory::toString() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {
        static PyObject *t_Directory_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_Directory_instance_(PyTypeObject *type, PyObject *arg);
        static int t_Directory_init_(t_Directory *self, PyObject *args, PyObject *kwds);
        static PyObject *t_Directory_clearLock(t_Directory *self, PyObject *arg);
        static PyObject *t_Directory_close(t_Directory *self);
        static PyObject *t_Directory_copy(t_Directory *self, PyObject *args);
        static PyObject *t_Directory_createOutput(t_Directory *self, PyObject *args);
        static PyObject *t_Directory_deleteFile(t_Directory *self, PyObject *arg);
        static PyObject *t_Directory_fileExists(t_Directory *self, PyObject *arg);
        static PyObject *t_Directory_fileLength(t_Directory *self, PyObject *arg);
        static PyObject *t_Directory_getLockFactory(t_Directory *self);
        static PyObject *t_Directory_getLockID(t_Directory *self);
        static PyObject *t_Directory_listAll(t_Directory *self);
        static PyObject *t_Directory_makeLock(t_Directory *self, PyObject *arg);
        static PyObject *t_Directory_openChecksumInput(t_Directory *self, PyObject *args);
        static PyObject *t_Directory_openInput(t_Directory *self, PyObject *args);
        static PyObject *t_Directory_setLockFactory(t_Directory *self, PyObject *arg);
        static PyObject *t_Directory_sync(t_Directory *self, PyObject *arg);
        static PyObject *t_Directory_toString(t_Directory *self, PyObject *args);
        static PyObject *t_Directory_get__lockFactory(t_Directory *self, void *data);
        static int t_Directory_set__lockFactory(t_Directory *self, PyObject *arg, void *data);
        static PyObject *t_Directory_get__lockID(t_Directory *self, void *data);
        static PyGetSetDef t_Directory__fields_[] = {
          DECLARE_GETSET_FIELD(t_Directory, lockFactory),
          DECLARE_GET_FIELD(t_Directory, lockID),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_Directory__methods_[] = {
          DECLARE_METHOD(t_Directory, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_Directory, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_Directory, clearLock, METH_O),
          DECLARE_METHOD(t_Directory, close, METH_NOARGS),
          DECLARE_METHOD(t_Directory, copy, METH_VARARGS),
          DECLARE_METHOD(t_Directory, createOutput, METH_VARARGS),
          DECLARE_METHOD(t_Directory, deleteFile, METH_O),
          DECLARE_METHOD(t_Directory, fileExists, METH_O),
          DECLARE_METHOD(t_Directory, fileLength, METH_O),
          DECLARE_METHOD(t_Directory, getLockFactory, METH_NOARGS),
          DECLARE_METHOD(t_Directory, getLockID, METH_NOARGS),
          DECLARE_METHOD(t_Directory, listAll, METH_NOARGS),
          DECLARE_METHOD(t_Directory, makeLock, METH_O),
          DECLARE_METHOD(t_Directory, openChecksumInput, METH_VARARGS),
          DECLARE_METHOD(t_Directory, openInput, METH_VARARGS),
          DECLARE_METHOD(t_Directory, setLockFactory, METH_O),
          DECLARE_METHOD(t_Directory, sync, METH_O),
          DECLARE_METHOD(t_Directory, toString, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(Directory, t_Directory, ::java::lang::Object, Directory, t_Directory_init_, 0, 0, t_Directory__fields_, 0, 0);

        void t_Directory::install(PyObject *module)
        {
          installType(&PY_TYPE(Directory), module, "Directory", 0);
        }

        void t_Directory::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(Directory).tp_dict, "class_", make_descriptor(Directory::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(Directory).tp_dict, "wrapfn_", make_descriptor(t_Directory::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(Directory).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_Directory_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, Directory::initializeClass, 1)))
            return NULL;
          return t_Directory::wrap_Object(Directory(((t_Directory *) arg)->object.this$));
        }
        static PyObject *t_Directory_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, Directory::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_Directory_init_(t_Directory *self, PyObject *args, PyObject *kwds)
        {
          Directory object((jobject) NULL);

          INT_CALL(object = Directory());
          self->object = object;

          return 0;
        }

        static PyObject *t_Directory_clearLock(t_Directory *self, PyObject *arg)
        {
          ::java::lang::String a0((jobject) NULL);

          if (!parseArg(arg, "s", &a0))
          {
            OBJ_CALL(self->object.clearLock(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "clearLock", arg);
          return NULL;
        }

        static PyObject *t_Directory_close(t_Directory *self)
        {
          OBJ_CALL(self->object.close());
          Py_RETURN_NONE;
        }

        static PyObject *t_Directory_copy(t_Directory *self, PyObject *args)
        {
          Directory a0((jobject) NULL);
          ::java::lang::String a1((jobject) NULL);
          ::java::lang::String a2((jobject) NULL);
          ::org::apache::lucene::store::IOContext a3((jobject) NULL);

          if (!parseArgs(args, "kssk", Directory::initializeClass, ::org::apache::lucene::store::IOContext::initializeClass, &a0, &a1, &a2, &a3))
          {
            OBJ_CALL(self->object.copy(a0, a1, a2, a3));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "copy", args);
          return NULL;
        }

        static PyObject *t_Directory_createOutput(t_Directory *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::store::IOContext a1((jobject) NULL);
          ::org::apache::lucene::store::IndexOutput result((jobject) NULL);

          if (!parseArgs(args, "sk", ::org::apache::lucene::store::IOContext::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = self->object.createOutput(a0, a1));
            return ::org::apache::lucene::store::t_IndexOutput::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "createOutput", args);
          return NULL;
        }

        static PyObject *t_Directory_deleteFile(t_Directory *self, PyObject *arg)
        {
          ::java::lang::String a0((jobject) NULL);

          if (!parseArg(arg, "s", &a0))
          {
            OBJ_CALL(self->object.deleteFile(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "deleteFile", arg);
          return NULL;
        }

        static PyObject *t_Directory_fileExists(t_Directory *self, PyObject *arg)
        {
          ::java::lang::String a0((jobject) NULL);
          jboolean result;

          if (!parseArg(arg, "s", &a0))
          {
            OBJ_CALL(result = self->object.fileExists(a0));
            Py_RETURN_BOOL(result);
          }

          PyErr_SetArgsError((PyObject *) self, "fileExists", arg);
          return NULL;
        }

        static PyObject *t_Directory_fileLength(t_Directory *self, PyObject *arg)
        {
          ::java::lang::String a0((jobject) NULL);
          jlong result;

          if (!parseArg(arg, "s", &a0))
          {
            OBJ_CALL(result = self->object.fileLength(a0));
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          PyErr_SetArgsError((PyObject *) self, "fileLength", arg);
          return NULL;
        }

        static PyObject *t_Directory_getLockFactory(t_Directory *self)
        {
          ::org::apache::lucene::store::LockFactory result((jobject) NULL);
          OBJ_CALL(result = self->object.getLockFactory());
          return ::org::apache::lucene::store::t_LockFactory::wrap_Object(result);
        }

        static PyObject *t_Directory_getLockID(t_Directory *self)
        {
          ::java::lang::String result((jobject) NULL);
          OBJ_CALL(result = self->object.getLockID());
          return j2p(result);
        }

        static PyObject *t_Directory_listAll(t_Directory *self)
        {
          JArray< ::java::lang::String > result((jobject) NULL);
          OBJ_CALL(result = self->object.listAll());
          return JArray<jstring>(result.this$).wrap();
        }

        static PyObject *t_Directory_makeLock(t_Directory *self, PyObject *arg)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::store::Lock result((jobject) NULL);

          if (!parseArg(arg, "s", &a0))
          {
            OBJ_CALL(result = self->object.makeLock(a0));
            return ::org::apache::lucene::store::t_Lock::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "makeLock", arg);
          return NULL;
        }

        static PyObject *t_Directory_openChecksumInput(t_Directory *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::store::IOContext a1((jobject) NULL);
          ::org::apache::lucene::store::ChecksumIndexInput result((jobject) NULL);

          if (!parseArgs(args, "sk", ::org::apache::lucene::store::IOContext::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = self->object.openChecksumInput(a0, a1));
            return ::org::apache::lucene::store::t_ChecksumIndexInput::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "openChecksumInput", args);
          return NULL;
        }

        static PyObject *t_Directory_openInput(t_Directory *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::store::IOContext a1((jobject) NULL);
          ::org::apache::lucene::store::IndexInput result((jobject) NULL);

          if (!parseArgs(args, "sk", ::org::apache::lucene::store::IOContext::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = self->object.openInput(a0, a1));
            return ::org::apache::lucene::store::t_IndexInput::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "openInput", args);
          return NULL;
        }

        static PyObject *t_Directory_setLockFactory(t_Directory *self, PyObject *arg)
        {
          ::org::apache::lucene::store::LockFactory a0((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::store::LockFactory::initializeClass, &a0))
          {
            OBJ_CALL(self->object.setLockFactory(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setLockFactory", arg);
          return NULL;
        }

        static PyObject *t_Directory_sync(t_Directory *self, PyObject *arg)
        {
          ::java::util::Collection a0((jobject) NULL);
          PyTypeObject **p0;

          if (!parseArg(arg, "K", ::java::util::Collection::initializeClass, &a0, &p0, ::java::util::t_Collection::parameters_))
          {
            OBJ_CALL(self->object.sync(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "sync", arg);
          return NULL;
        }

        static PyObject *t_Directory_toString(t_Directory *self, PyObject *args)
        {
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.toString());
            return j2p(result);
          }

          return callSuper(&PY_TYPE(Directory), (PyObject *) self, "toString", args, 2);
        }

        static PyObject *t_Directory_get__lockFactory(t_Directory *self, void *data)
        {
          ::org::apache::lucene::store::LockFactory value((jobject) NULL);
          OBJ_CALL(value = self->object.getLockFactory());
          return ::org::apache::lucene::store::t_LockFactory::wrap_Object(value);
        }
        static int t_Directory_set__lockFactory(t_Directory *self, PyObject *arg, void *data)
        {
          {
            ::org::apache::lucene::store::LockFactory value((jobject) NULL);
            if (!parseArg(arg, "k", ::org::apache::lucene::store::LockFactory::initializeClass, &value))
            {
              INT_CALL(self->object.setLockFactory(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "lockFactory", arg);
          return -1;
        }

        static PyObject *t_Directory_get__lockID(t_Directory *self, void *data)
        {
          ::java::lang::String value((jobject) NULL);
          OBJ_CALL(value = self->object.getLockID());
          return j2p(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/hu/HungarianLightStemmer.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace hu {

          ::java::lang::Class *HungarianLightStemmer::class$ = NULL;
          jmethodID *HungarianLightStemmer::mids$ = NULL;
          bool HungarianLightStemmer::live$ = false;

          jclass HungarianLightStemmer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/hu/HungarianLightStemmer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_stem_ec6430eb] = env->getMethodID(cls, "stem", "([CI)I");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          HungarianLightStemmer::HungarianLightStemmer() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          jint HungarianLightStemmer::stem(const JArray< jchar > & a0, jint a1) const
          {
            return env->callIntMethod(this$, mids$[mid_stem_ec6430eb], a0.this$, a1);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace hu {
          static PyObject *t_HungarianLightStemmer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_HungarianLightStemmer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_HungarianLightStemmer_init_(t_HungarianLightStemmer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_HungarianLightStemmer_stem(t_HungarianLightStemmer *self, PyObject *args);

          static PyMethodDef t_HungarianLightStemmer__methods_[] = {
            DECLARE_METHOD(t_HungarianLightStemmer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_HungarianLightStemmer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_HungarianLightStemmer, stem, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(HungarianLightStemmer, t_HungarianLightStemmer, ::java::lang::Object, HungarianLightStemmer, t_HungarianLightStemmer_init_, 0, 0, 0, 0, 0);

          void t_HungarianLightStemmer::install(PyObject *module)
          {
            installType(&PY_TYPE(HungarianLightStemmer), module, "HungarianLightStemmer", 0);
          }

          void t_HungarianLightStemmer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(HungarianLightStemmer).tp_dict, "class_", make_descriptor(HungarianLightStemmer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(HungarianLightStemmer).tp_dict, "wrapfn_", make_descriptor(t_HungarianLightStemmer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(HungarianLightStemmer).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_HungarianLightStemmer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, HungarianLightStemmer::initializeClass, 1)))
              return NULL;
            return t_HungarianLightStemmer::wrap_Object(HungarianLightStemmer(((t_HungarianLightStemmer *) arg)->object.this$));
          }
          static PyObject *t_HungarianLightStemmer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, HungarianLightStemmer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_HungarianLightStemmer_init_(t_HungarianLightStemmer *self, PyObject *args, PyObject *kwds)
          {
            HungarianLightStemmer object((jobject) NULL);

            INT_CALL(object = HungarianLightStemmer());
            self->object = object;

            return 0;
          }

          static PyObject *t_HungarianLightStemmer_stem(t_HungarianLightStemmer *self, PyObject *args)
          {
            JArray< jchar > a0((jobject) NULL);
            jint a1;
            jint result;

            if (!parseArgs(args, "[CI", &a0, &a1))
            {
              OBJ_CALL(result = self->object.stem(a0, a1));
              return PyInt_FromLong((long) result);
            }

            PyErr_SetArgsError((PyObject *) self, "stem", args);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/facet/DrillSideways$DrillSidewaysResult.h"
#include "org/apache/lucene/facet/Facets.h"
#include "org/apache/lucene/search/TopDocs.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {

        ::java::lang::Class *DrillSideways$DrillSidewaysResult::class$ = NULL;
        jmethodID *DrillSideways$DrillSidewaysResult::mids$ = NULL;
        jfieldID *DrillSideways$DrillSidewaysResult::fids$ = NULL;
        bool DrillSideways$DrillSidewaysResult::live$ = false;

        jclass DrillSideways$DrillSidewaysResult::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/facet/DrillSideways$DrillSidewaysResult");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_34005d2b] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/facet/Facets;Lorg/apache/lucene/search/TopDocs;)V");

            fids$ = new jfieldID[max_fid];
            fids$[fid_facets] = env->getFieldID(cls, "facets", "Lorg/apache/lucene/facet/Facets;");
            fids$[fid_hits] = env->getFieldID(cls, "hits", "Lorg/apache/lucene/search/TopDocs;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        DrillSideways$DrillSidewaysResult::DrillSideways$DrillSidewaysResult(const ::org::apache::lucene::facet::Facets & a0, const ::org::apache::lucene::search::TopDocs & a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_34005d2b, a0.this$, a1.this$)) {}

        ::org::apache::lucene::facet::Facets DrillSideways$DrillSidewaysResult::_get_facets() const
        {
          return ::org::apache::lucene::facet::Facets(env->getObjectField(this$, fids$[fid_facets]));
        }

        ::org::apache::lucene::search::TopDocs DrillSideways$DrillSidewaysResult::_get_hits() const
        {
          return ::org::apache::lucene::search::TopDocs(env->getObjectField(this$, fids$[fid_hits]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        static PyObject *t_DrillSideways$DrillSidewaysResult_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_DrillSideways$DrillSidewaysResult_instance_(PyTypeObject *type, PyObject *arg);
        static int t_DrillSideways$DrillSidewaysResult_init_(t_DrillSideways$DrillSidewaysResult *self, PyObject *args, PyObject *kwds);
        static PyObject *t_DrillSideways$DrillSidewaysResult_get__facets(t_DrillSideways$DrillSidewaysResult *self, void *data);
        static PyObject *t_DrillSideways$DrillSidewaysResult_get__hits(t_DrillSideways$DrillSidewaysResult *self, void *data);

        static PyGetSetDef t_DrillSideways$DrillSidewaysResult__fields_[] = {
          DECLARE_GET_FIELD(t_DrillSideways$DrillSidewaysResult, facets),
          DECLARE_GET_FIELD(t_DrillSideways$DrillSidewaysResult, hits),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_DrillSideways$DrillSidewaysResult__methods_[] = {
          DECLARE_METHOD(t_DrillSideways$DrillSidewaysResult, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_DrillSideways$DrillSidewaysResult, instance_, METH_O | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(DrillSideways$DrillSidewaysResult, t_DrillSideways$DrillSidewaysResult, ::java::lang::Object, DrillSideways$DrillSidewaysResult, t_DrillSideways$DrillSidewaysResult_init_, 0, 0, t_DrillSideways$DrillSidewaysResult__fields_, 0, 0);

        void t_DrillSideways$DrillSidewaysResult::install(PyObject *module)
        {
          installType(&PY_TYPE(DrillSideways$DrillSidewaysResult), module, "DrillSideways$DrillSidewaysResult", 0);
        }

        void t_DrillSideways$DrillSidewaysResult::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(DrillSideways$DrillSidewaysResult).tp_dict, "class_", make_descriptor(DrillSideways$DrillSidewaysResult::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(DrillSideways$DrillSidewaysResult).tp_dict, "wrapfn_", make_descriptor(t_DrillSideways$DrillSidewaysResult::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(DrillSideways$DrillSidewaysResult).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_DrillSideways$DrillSidewaysResult_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, DrillSideways$DrillSidewaysResult::initializeClass, 1)))
            return NULL;
          return t_DrillSideways$DrillSidewaysResult::wrap_Object(DrillSideways$DrillSidewaysResult(((t_DrillSideways$DrillSidewaysResult *) arg)->object.this$));
        }
        static PyObject *t_DrillSideways$DrillSidewaysResult_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, DrillSideways$DrillSidewaysResult::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_DrillSideways$DrillSidewaysResult_init_(t_DrillSideways$DrillSidewaysResult *self, PyObject *args, PyObject *kwds)
        {
          ::org::apache::lucene::facet::Facets a0((jobject) NULL);
          ::org::apache::lucene::search::TopDocs a1((jobject) NULL);
          DrillSideways$DrillSidewaysResult object((jobject) NULL);

          if (!parseArgs(args, "kk", ::org::apache::lucene::facet::Facets::initializeClass, ::org::apache::lucene::search::TopDocs::initializeClass, &a0, &a1))
          {
            INT_CALL(object = DrillSideways$DrillSidewaysResult(a0, a1));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_DrillSideways$DrillSidewaysResult_get__facets(t_DrillSideways$DrillSidewaysResult *self, void *data)
        {
          ::org::apache::lucene::facet::Facets value((jobject) NULL);
          OBJ_CALL(value = self->object._get_facets());
          return ::org::apache::lucene::facet::t_Facets::wrap_Object(value);
        }

        static PyObject *t_DrillSideways$DrillSidewaysResult_get__hits(t_DrillSideways$DrillSidewaysResult *self, void *data)
        {
          ::org::apache::lucene::search::TopDocs value((jobject) NULL);
          OBJ_CALL(value = self->object._get_hits());
          return ::org::apache::lucene::search::t_TopDocs::wrap_Object(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/Token.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "org/apache/lucene/util/AttributeFactory.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/util/AttributeReflector.h"
#include "java/lang/Object.h"
#include "org/apache/lucene/analysis/tokenattributes/FlagsAttribute.h"
#include "org/apache/lucene/util/AttributeImpl.h"
#include "org/apache/lucene/analysis/tokenattributes/PayloadAttribute.h"
#include "java/lang/CharSequence.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {

        ::java::lang::Class *Token::class$ = NULL;
        jmethodID *Token::mids$ = NULL;
        bool Token::live$ = false;
        ::org::apache::lucene::util::AttributeFactory *Token::TOKEN_ATTRIBUTE_FACTORY = NULL;

        jclass Token::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/Token");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_init$_d8d154a6] = env->getMethodID(cls, "<init>", "(II)V");
            mids$[mid_init$_6cc8d7e2] = env->getMethodID(cls, "<init>", "(Ljava/lang/CharSequence;II)V");
            mids$[mid_init$_490a7ef0] = env->getMethodID(cls, "<init>", "(IILjava/lang/String;)V");
            mids$[mid_init$_d3236aa4] = env->getMethodID(cls, "<init>", "(III)V");
            mids$[mid_init$_734c49c6] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;IILjava/lang/String;)V");
            mids$[mid_init$_b8e753a2] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;III)V");
            mids$[mid_init$_f453acf6] = env->getMethodID(cls, "<init>", "([CIIII)V");
            mids$[mid_clear_54c6a166] = env->getMethodID(cls, "clear", "()V");
            mids$[mid_clone_55852c17] = env->getMethodID(cls, "clone", "()Lorg/apache/lucene/analysis/Token;");
            mids$[mid_copyTo_d86caa9f] = env->getMethodID(cls, "copyTo", "(Lorg/apache/lucene/util/AttributeImpl;)V");
            mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
            mids$[mid_getFlags_54c6a179] = env->getMethodID(cls, "getFlags", "()I");
            mids$[mid_getPayload_4ae19461] = env->getMethodID(cls, "getPayload", "()Lorg/apache/lucene/util/BytesRef;");
            mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
            mids$[mid_reflectWith_5f3f5102] = env->getMethodID(cls, "reflectWith", "(Lorg/apache/lucene/util/AttributeReflector;)V");
            mids$[mid_reinit_4f6e7002] = env->getMethodID(cls, "reinit", "(Lorg/apache/lucene/analysis/Token;)V");
            mids$[mid_reinit_4b41519c] = env->getMethodID(cls, "reinit", "(Lorg/apache/lucene/analysis/Token;Ljava/lang/String;)V");
            mids$[mid_reinit_fca163e5] = env->getMethodID(cls, "reinit", "(Ljava/lang/String;II)Lorg/apache/lucene/analysis/Token;");
            mids$[mid_reinit_9e1b3a5a] = env->getMethodID(cls, "reinit", "(Lorg/apache/lucene/analysis/Token;[CII)V");
            mids$[mid_reinit_ca2a1773] = env->getMethodID(cls, "reinit", "(Ljava/lang/String;IILjava/lang/String;)Lorg/apache/lucene/analysis/Token;");
            mids$[mid_reinit_53bb4fe3] = env->getMethodID(cls, "reinit", "([CIIII)Lorg/apache/lucene/analysis/Token;");
            mids$[mid_reinit_d4354d15] = env->getMethodID(cls, "reinit", "(Ljava/lang/String;IIII)Lorg/apache/lucene/analysis/Token;");
            mids$[mid_reinit_4c56913b] = env->getMethodID(cls, "reinit", "(Ljava/lang/String;IIIILjava/lang/String;)Lorg/apache/lucene/analysis/Token;");
            mids$[mid_reinit_6aec2009] = env->getMethodID(cls, "reinit", "([CIIIILjava/lang/String;)Lorg/apache/lucene/analysis/Token;");
            mids$[mid_setFlags_39c7bd3c] = env->getMethodID(cls, "setFlags", "(I)V");
            mids$[mid_setPayload_7bc03dc4] = env->getMethodID(cls, "setPayload", "(Lorg/apache/lucene/util/BytesRef;)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            cls = (jclass) class$->this$;

            TOKEN_ATTRIBUTE_FACTORY = new ::org::apache::lucene::util::AttributeFactory(env->getStaticObjectField(cls, "TOKEN_ATTRIBUTE_FACTORY", "Lorg/apache/lucene/util/AttributeFactory;"));
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        Token::Token() : ::org::apache::lucene::analysis::tokenattributes::PackedTokenAttributeImpl(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        Token::Token(jint a0, jint a1) : ::org::apache::lucene::analysis::tokenattributes::PackedTokenAttributeImpl(env->newObject(initializeClass, &mids$, mid_init$_d8d154a6, a0, a1)) {}

        Token::Token(const ::java::lang::CharSequence & a0, jint a1, jint a2) : ::org::apache::lucene::analysis::tokenattributes::PackedTokenAttributeImpl(env->newObject(initializeClass, &mids$, mid_init$_6cc8d7e2, a0.this$, a1, a2)) {}

        Token::Token(jint a0, jint a1, const ::java::lang::String & a2) : ::org::apache::lucene::analysis::tokenattributes::PackedTokenAttributeImpl(env->newObject(initializeClass, &mids$, mid_init$_490a7ef0, a0, a1, a2.this$)) {}

        Token::Token(jint a0, jint a1, jint a2) : ::org::apache::lucene::analysis::tokenattributes::PackedTokenAttributeImpl(env->newObject(initializeClass, &mids$, mid_init$_d3236aa4, a0, a1, a2)) {}

        Token::Token(const ::java::lang::String & a0, jint a1, jint a2, const ::java::lang::String & a3) : ::org::apache::lucene::analysis::tokenattributes::PackedTokenAttributeImpl(env->newObject(initializeClass, &mids$, mid_init$_734c49c6, a0.this$, a1, a2, a3.this$)) {}

        Token::Token(const ::java::lang::String & a0, jint a1, jint a2, jint a3) : ::org::apache::lucene::analysis::tokenattributes::PackedTokenAttributeImpl(env->newObject(initializeClass, &mids$, mid_init$_b8e753a2, a0.this$, a1, a2, a3)) {}

        Token::Token(const JArray< jchar > & a0, jint a1, jint a2, jint a3, jint a4) : ::org::apache::lucene::analysis::tokenattributes::PackedTokenAttributeImpl(env->newObject(initializeClass, &mids$, mid_init$_f453acf6, a0.this$, a1, a2, a3, a4)) {}

        void Token::clear() const
        {
          env->callVoidMethod(this$, mids$[mid_clear_54c6a166]);
        }

        Token Token::clone() const
        {
          return Token(env->callObjectMethod(this$, mids$[mid_clone_55852c17]));
        }

        void Token::copyTo(const ::org::apache::lucene::util::AttributeImpl & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_copyTo_d86caa9f], a0.this$);
        }

        jboolean Token::equals(const ::java::lang::Object & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
        }

        jint Token::getFlags() const
        {
          return env->callIntMethod(this$, mids$[mid_getFlags_54c6a179]);
        }

        ::org::apache::lucene::util::BytesRef Token::getPayload() const
        {
          return ::org::apache::lucene::util::BytesRef(env->callObjectMethod(this$, mids$[mid_getPayload_4ae19461]));
        }

        jint Token::hashCode() const
        {
          return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
        }

        void Token::reflectWith(const ::org::apache::lucene::util::AttributeReflector & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_reflectWith_5f3f5102], a0.this$);
        }

        void Token::reinit(const Token & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_reinit_4f6e7002], a0.this$);
        }

        void Token::reinit(const Token & a0, const ::java::lang::String & a1) const
        {
          env->callVoidMethod(this$, mids$[mid_reinit_4b41519c], a0.this$, a1.this$);
        }

        Token Token::reinit(const ::java::lang::String & a0, jint a1, jint a2) const
        {
          return Token(env->callObjectMethod(this$, mids$[mid_reinit_fca163e5], a0.this$, a1, a2));
        }

        void Token::reinit(const Token & a0, const JArray< jchar > & a1, jint a2, jint a3) const
        {
          env->callVoidMethod(this$, mids$[mid_reinit_9e1b3a5a], a0.this$, a1.this$, a2, a3);
        }

        Token Token::reinit(const ::java::lang::String & a0, jint a1, jint a2, const ::java::lang::String & a3) const
        {
          return Token(env->callObjectMethod(this$, mids$[mid_reinit_ca2a1773], a0.this$, a1, a2, a3.this$));
        }

        Token Token::reinit(const JArray< jchar > & a0, jint a1, jint a2, jint a3, jint a4) const
        {
          return Token(env->callObjectMethod(this$, mids$[mid_reinit_53bb4fe3], a0.this$, a1, a2, a3, a4));
        }

        Token Token::reinit(const ::java::lang::String & a0, jint a1, jint a2, jint a3, jint a4) const
        {
          return Token(env->callObjectMethod(this$, mids$[mid_reinit_d4354d15], a0.this$, a1, a2, a3, a4));
        }

        Token Token::reinit(const ::java::lang::String & a0, jint a1, jint a2, jint a3, jint a4, const ::java::lang::String & a5) const
        {
          return Token(env->callObjectMethod(this$, mids$[mid_reinit_4c56913b], a0.this$, a1, a2, a3, a4, a5.this$));
        }

        Token Token::reinit(const JArray< jchar > & a0, jint a1, jint a2, jint a3, jint a4, const ::java::lang::String & a5) const
        {
          return Token(env->callObjectMethod(this$, mids$[mid_reinit_6aec2009], a0.this$, a1, a2, a3, a4, a5.this$));
        }

        void Token::setFlags(jint a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setFlags_39c7bd3c], a0);
        }

        void Token::setPayload(const ::org::apache::lucene::util::BytesRef & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setPayload_7bc03dc4], a0.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        static PyObject *t_Token_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_Token_instance_(PyTypeObject *type, PyObject *arg);
        static int t_Token_init_(t_Token *self, PyObject *args, PyObject *kwds);
        static PyObject *t_Token_clear(t_Token *self, PyObject *args);
        static PyObject *t_Token_clone(t_Token *self, PyObject *args);
        static PyObject *t_Token_copyTo(t_Token *self, PyObject *args);
        static PyObject *t_Token_equals(t_Token *self, PyObject *args);
        static PyObject *t_Token_getFlags(t_Token *self);
        static PyObject *t_Token_getPayload(t_Token *self);
        static PyObject *t_Token_hashCode(t_Token *self, PyObject *args);
        static PyObject *t_Token_reflectWith(t_Token *self, PyObject *args);
        static PyObject *t_Token_reinit(t_Token *self, PyObject *args);
        static PyObject *t_Token_setFlags(t_Token *self, PyObject *arg);
        static PyObject *t_Token_setPayload(t_Token *self, PyObject *arg);
        static PyObject *t_Token_get__flags(t_Token *self, void *data);
        static int t_Token_set__flags(t_Token *self, PyObject *arg, void *data);
        static PyObject *t_Token_get__payload(t_Token *self, void *data);
        static int t_Token_set__payload(t_Token *self, PyObject *arg, void *data);
        static PyGetSetDef t_Token__fields_[] = {
          DECLARE_GETSET_FIELD(t_Token, flags),
          DECLARE_GETSET_FIELD(t_Token, payload),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_Token__methods_[] = {
          DECLARE_METHOD(t_Token, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_Token, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_Token, clear, METH_VARARGS),
          DECLARE_METHOD(t_Token, clone, METH_VARARGS),
          DECLARE_METHOD(t_Token, copyTo, METH_VARARGS),
          DECLARE_METHOD(t_Token, equals, METH_VARARGS),
          DECLARE_METHOD(t_Token, getFlags, METH_NOARGS),
          DECLARE_METHOD(t_Token, getPayload, METH_NOARGS),
          DECLARE_METHOD(t_Token, hashCode, METH_VARARGS),
          DECLARE_METHOD(t_Token, reflectWith, METH_VARARGS),
          DECLARE_METHOD(t_Token, reinit, METH_VARARGS),
          DECLARE_METHOD(t_Token, setFlags, METH_O),
          DECLARE_METHOD(t_Token, setPayload, METH_O),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(Token, t_Token, ::org::apache::lucene::analysis::tokenattributes::PackedTokenAttributeImpl, Token, t_Token_init_, 0, 0, t_Token__fields_, 0, 0);

        void t_Token::install(PyObject *module)
        {
          installType(&PY_TYPE(Token), module, "Token", 0);
        }

        void t_Token::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(Token).tp_dict, "class_", make_descriptor(Token::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(Token).tp_dict, "wrapfn_", make_descriptor(t_Token::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(Token).tp_dict, "boxfn_", make_descriptor(boxObject));
          env->getClass(Token::initializeClass);
          PyDict_SetItemString(PY_TYPE(Token).tp_dict, "TOKEN_ATTRIBUTE_FACTORY", make_descriptor(::org::apache::lucene::util::t_AttributeFactory::wrap_Object(*Token::TOKEN_ATTRIBUTE_FACTORY)));
        }

        static PyObject *t_Token_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, Token::initializeClass, 1)))
            return NULL;
          return t_Token::wrap_Object(Token(((t_Token *) arg)->object.this$));
        }
        static PyObject *t_Token_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, Token::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_Token_init_(t_Token *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 0:
            {
              Token object((jobject) NULL);

              INT_CALL(object = Token());
              self->object = object;
              break;
            }
            goto err;
           case 2:
            {
              jint a0;
              jint a1;
              Token object((jobject) NULL);

              if (!parseArgs(args, "II", &a0, &a1))
              {
                INT_CALL(object = Token(a0, a1));
                self->object = object;
                break;
              }
            }
            goto err;
           case 3:
            {
              ::java::lang::CharSequence a0((jobject) NULL);
              jint a1;
              jint a2;
              Token object((jobject) NULL);

              if (!parseArgs(args, "OII", &::java::lang::PY_TYPE(CharSequence), &a0, &a1, &a2))
              {
                INT_CALL(object = Token(a0, a1, a2));
                self->object = object;
                break;
              }
            }
            {
              jint a0;
              jint a1;
              ::java::lang::String a2((jobject) NULL);
              Token object((jobject) NULL);

              if (!parseArgs(args, "IIs", &a0, &a1, &a2))
              {
                INT_CALL(object = Token(a0, a1, a2));
                self->object = object;
                break;
              }
            }
            {
              jint a0;
              jint a1;
              jint a2;
              Token object((jobject) NULL);

              if (!parseArgs(args, "III", &a0, &a1, &a2))
              {
                INT_CALL(object = Token(a0, a1, a2));
                self->object = object;
                break;
              }
            }
            goto err;
           case 4:
            {
              ::java::lang::String a0((jobject) NULL);
              jint a1;
              jint a2;
              ::java::lang::String a3((jobject) NULL);
              Token object((jobject) NULL);

              if (!parseArgs(args, "sIIs", &a0, &a1, &a2, &a3))
              {
                INT_CALL(object = Token(a0, a1, a2, a3));
                self->object = object;
                break;
              }
            }
            {
              ::java::lang::String a0((jobject) NULL);
              jint a1;
              jint a2;
              jint a3;
              Token object((jobject) NULL);

              if (!parseArgs(args, "sIII", &a0, &a1, &a2, &a3))
              {
                INT_CALL(object = Token(a0, a1, a2, a3));
                self->object = object;
                break;
              }
            }
            goto err;
           case 5:
            {
              JArray< jchar > a0((jobject) NULL);
              jint a1;
              jint a2;
              jint a3;
              jint a4;
              Token object((jobject) NULL);

              if (!parseArgs(args, "[CIIII", &a0, &a1, &a2, &a3, &a4))
              {
                INT_CALL(object = Token(a0, a1, a2, a3, a4));
                self->object = object;
                break;
              }
            }
           default:
           err:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_Token_clear(t_Token *self, PyObject *args)
        {

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(self->object.clear());
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(Token), (PyObject *) self, "clear", args, 2);
        }

        static PyObject *t_Token_clone(t_Token *self, PyObject *args)
        {
          Token result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.clone());
            return t_Token::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(Token), (PyObject *) self, "clone", args, 2);
        }

        static PyObject *t_Token_copyTo(t_Token *self, PyObject *args)
        {
          ::org::apache::lucene::util::AttributeImpl a0((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::util::AttributeImpl::initializeClass, &a0))
          {
            OBJ_CALL(self->object.copyTo(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(Token), (PyObject *) self, "copyTo", args, 2);
        }

        static PyObject *t_Token_equals(t_Token *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.equals(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(Token), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_Token_getFlags(t_Token *self)
        {
          jint result;
          OBJ_CALL(result = self->object.getFlags());
          return PyInt_FromLong((long) result);
        }

        static PyObject *t_Token_getPayload(t_Token *self)
        {
          ::org::apache::lucene::util::BytesRef result((jobject) NULL);
          OBJ_CALL(result = self->object.getPayload());
          return ::org::apache::lucene::util::t_BytesRef::wrap_Object(result);
        }

        static PyObject *t_Token_hashCode(t_Token *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hashCode());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(Token), (PyObject *) self, "hashCode", args, 2);
        }

        static PyObject *t_Token_reflectWith(t_Token *self, PyObject *args)
        {
          ::org::apache::lucene::util::AttributeReflector a0((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::util::AttributeReflector::initializeClass, &a0))
          {
            OBJ_CALL(self->object.reflectWith(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(Token), (PyObject *) self, "reflectWith", args, 2);
        }

        static PyObject *t_Token_reinit(t_Token *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              Token a0((jobject) NULL);

              if (!parseArgs(args, "k", Token::initializeClass, &a0))
              {
                OBJ_CALL(self->object.reinit(a0));
                Py_RETURN_NONE;
              }
            }
            break;
           case 2:
            {
              Token a0((jobject) NULL);
              ::java::lang::String a1((jobject) NULL);

              if (!parseArgs(args, "ks", Token::initializeClass, &a0, &a1))
              {
                OBJ_CALL(self->object.reinit(a0, a1));
                Py_RETURN_NONE;
              }
            }
            break;
           case 3:
            {
              ::java::lang::String a0((jobject) NULL);
              jint a1;
              jint a2;
              Token result((jobject) NULL);

              if (!parseArgs(args, "sII", &a0, &a1, &a2))
              {
                OBJ_CALL(result = self->object.reinit(a0, a1, a2));
                return t_Token::wrap_Object(result);
              }
            }
            break;
           case 4:
            {
              Token a0((jobject) NULL);
              JArray< jchar > a1((jobject) NULL);
              jint a2;
              jint a3;

              if (!parseArgs(args, "k[CII", Token::initializeClass, &a0, &a1, &a2, &a3))
              {
                OBJ_CALL(self->object.reinit(a0, a1, a2, a3));
                Py_RETURN_NONE;
              }
            }
            {
              ::java::lang::String a0((jobject) NULL);
              jint a1;
              jint a2;
              ::java::lang::String a3((jobject) NULL);
              Token result((jobject) NULL);

              if (!parseArgs(args, "sIIs", &a0, &a1, &a2, &a3))
              {
                OBJ_CALL(result = self->object.reinit(a0, a1, a2, a3));
                return t_Token::wrap_Object(result);
              }
            }
            break;
           case 5:
            {
              JArray< jchar > a0((jobject) NULL);
              jint a1;
              jint a2;
              jint a3;
              jint a4;
              Token result((jobject) NULL);

              if (!parseArgs(args, "[CIIII", &a0, &a1, &a2, &a3, &a4))
              {
                OBJ_CALL(result = self->object.reinit(a0, a1, a2, a3, a4));
                return t_Token::wrap_Object(result);
              }
            }
            {
              ::java::lang::String a0((jobject) NULL);
              jint a1;
              jint a2;
              jint a3;
              jint a4;
              Token result((jobject) NULL);

              if (!parseArgs(args, "sIIII", &a0, &a1, &a2, &a3, &a4))
              {
                OBJ_CALL(result = self->object.reinit(a0, a1, a2, a3, a4));
                return t_Token::wrap_Object(result);
              }
            }
            break;
           case 6:
            {
              ::java::lang::String a0((jobject) NULL);
              jint a1;
              jint a2;
              jint a3;
              jint a4;
              ::java::lang::String a5((jobject) NULL);
              Token result((jobject) NULL);

              if (!parseArgs(args, "sIIIIs", &a0, &a1, &a2, &a3, &a4, &a5))
              {
                OBJ_CALL(result = self->object.reinit(a0, a1, a2, a3, a4, a5));
                return t_Token::wrap_Object(result);
              }
            }
            {
              JArray< jchar > a0((jobject) NULL);
              jint a1;
              jint a2;
              jint a3;
              jint a4;
              ::java::lang::String a5((jobject) NULL);
              Token result((jobject) NULL);

              if (!parseArgs(args, "[CIIIIs", &a0, &a1, &a2, &a3, &a4, &a5))
              {
                OBJ_CALL(result = self->object.reinit(a0, a1, a2, a3, a4, a5));
                return t_Token::wrap_Object(result);
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "reinit", args);
          return NULL;
        }

        static PyObject *t_Token_setFlags(t_Token *self, PyObject *arg)
        {
          jint a0;

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(self->object.setFlags(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setFlags", arg);
          return NULL;
        }

        static PyObject *t_Token_setPayload(t_Token *self, PyObject *arg)
        {
          ::org::apache::lucene::util::BytesRef a0((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::util::BytesRef::initializeClass, &a0))
          {
            OBJ_CALL(self->object.setPayload(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setPayload", arg);
          return NULL;
        }

        static PyObject *t_Token_get__flags(t_Token *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object.getFlags());
          return PyInt_FromLong((long) value);
        }
        static int t_Token_set__flags(t_Token *self, PyObject *arg, void *data)
        {
          {
            jint value;
            if (!parseArg(arg, "I", &value))
            {
              INT_CALL(self->object.setFlags(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "flags", arg);
          return -1;
        }

        static PyObject *t_Token_get__payload(t_Token *self, void *data)
        {
          ::org::apache::lucene::util::BytesRef value((jobject) NULL);
          OBJ_CALL(value = self->object.getPayload());
          return ::org::apache::lucene::util::t_BytesRef::wrap_Object(value);
        }
        static int t_Token_set__payload(t_Token *self, PyObject *arg, void *data)
        {
          {
            ::org::apache::lucene::util::BytesRef value((jobject) NULL);
            if (!parseArg(arg, "k", ::org::apache::lucene::util::BytesRef::initializeClass, &value))
            {
              INT_CALL(self->object.setPayload(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "payload", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/spell/NGramDistance.h"
#include "java/lang/String.h"
#include "org/apache/lucene/search/spell/StringDistance.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace spell {

          ::java::lang::Class *NGramDistance::class$ = NULL;
          jmethodID *NGramDistance::mids$ = NULL;
          bool NGramDistance::live$ = false;

          jclass NGramDistance::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/spell/NGramDistance");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_init$_39c7bd3c] = env->getMethodID(cls, "<init>", "(I)V");
              mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
              mids$[mid_getDistance_4a264752] = env->getMethodID(cls, "getDistance", "(Ljava/lang/String;Ljava/lang/String;)F");
              mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
              mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          NGramDistance::NGramDistance() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          NGramDistance::NGramDistance(jint a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_39c7bd3c, a0)) {}

          jboolean NGramDistance::equals(const ::java::lang::Object & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
          }

          jfloat NGramDistance::getDistance(const ::java::lang::String & a0, const ::java::lang::String & a1) const
          {
            return env->callFloatMethod(this$, mids$[mid_getDistance_4a264752], a0.this$, a1.this$);
          }

          jint NGramDistance::hashCode() const
          {
            return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
          }

          ::java::lang::String NGramDistance::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace spell {
          static PyObject *t_NGramDistance_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_NGramDistance_instance_(PyTypeObject *type, PyObject *arg);
          static int t_NGramDistance_init_(t_NGramDistance *self, PyObject *args, PyObject *kwds);
          static PyObject *t_NGramDistance_equals(t_NGramDistance *self, PyObject *args);
          static PyObject *t_NGramDistance_getDistance(t_NGramDistance *self, PyObject *args);
          static PyObject *t_NGramDistance_hashCode(t_NGramDistance *self, PyObject *args);
          static PyObject *t_NGramDistance_toString(t_NGramDistance *self, PyObject *args);

          static PyMethodDef t_NGramDistance__methods_[] = {
            DECLARE_METHOD(t_NGramDistance, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_NGramDistance, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_NGramDistance, equals, METH_VARARGS),
            DECLARE_METHOD(t_NGramDistance, getDistance, METH_VARARGS),
            DECLARE_METHOD(t_NGramDistance, hashCode, METH_VARARGS),
            DECLARE_METHOD(t_NGramDistance, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(NGramDistance, t_NGramDistance, ::java::lang::Object, NGramDistance, t_NGramDistance_init_, 0, 0, 0, 0, 0);

          void t_NGramDistance::install(PyObject *module)
          {
            installType(&PY_TYPE(NGramDistance), module, "NGramDistance", 0);
          }

          void t_NGramDistance::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(NGramDistance).tp_dict, "class_", make_descriptor(NGramDistance::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(NGramDistance).tp_dict, "wrapfn_", make_descriptor(t_NGramDistance::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(NGramDistance).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_NGramDistance_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, NGramDistance::initializeClass, 1)))
              return NULL;
            return t_NGramDistance::wrap_Object(NGramDistance(((t_NGramDistance *) arg)->object.this$));
          }
          static PyObject *t_NGramDistance_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, NGramDistance::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_NGramDistance_init_(t_NGramDistance *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 0:
              {
                NGramDistance object((jobject) NULL);

                INT_CALL(object = NGramDistance());
                self->object = object;
                break;
              }
              goto err;
             case 1:
              {
                jint a0;
                NGramDistance object((jobject) NULL);

                if (!parseArgs(args, "I", &a0))
                {
                  INT_CALL(object = NGramDistance(a0));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_NGramDistance_equals(t_NGramDistance *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            jboolean result;

            if (!parseArgs(args, "o", &a0))
            {
              OBJ_CALL(result = self->object.equals(a0));
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(NGramDistance), (PyObject *) self, "equals", args, 2);
          }

          static PyObject *t_NGramDistance_getDistance(t_NGramDistance *self, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            ::java::lang::String a1((jobject) NULL);
            jfloat result;

            if (!parseArgs(args, "ss", &a0, &a1))
            {
              OBJ_CALL(result = self->object.getDistance(a0, a1));
              return PyFloat_FromDouble((double) result);
            }

            PyErr_SetArgsError((PyObject *) self, "getDistance", args);
            return NULL;
          }

          static PyObject *t_NGramDistance_hashCode(t_NGramDistance *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.hashCode());
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(NGramDistance), (PyObject *) self, "hashCode", args, 2);
          }

          static PyObject *t_NGramDistance_toString(t_NGramDistance *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(&PY_TYPE(NGramDistance), (PyObject *) self, "toString", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/packed/PackedInts$ReaderIterator.h"
#include "org/apache/lucene/util/LongsRef.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace packed {

          ::java::lang::Class *PackedInts$ReaderIterator::class$ = NULL;
          jmethodID *PackedInts$ReaderIterator::mids$ = NULL;
          bool PackedInts$ReaderIterator::live$ = false;

          jclass PackedInts$ReaderIterator::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/util/packed/PackedInts$ReaderIterator");

              mids$ = new jmethodID[max_mid];
              mids$[mid_getBitsPerValue_54c6a179] = env->getMethodID(cls, "getBitsPerValue", "()I");
              mids$[mid_next_54c6a17a] = env->getMethodID(cls, "next", "()J");
              mids$[mid_next_a3d07a9b] = env->getMethodID(cls, "next", "(I)Lorg/apache/lucene/util/LongsRef;");
              mids$[mid_ord_54c6a179] = env->getMethodID(cls, "ord", "()I");
              mids$[mid_size_54c6a179] = env->getMethodID(cls, "size", "()I");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          jint PackedInts$ReaderIterator::getBitsPerValue() const
          {
            return env->callIntMethod(this$, mids$[mid_getBitsPerValue_54c6a179]);
          }

          jlong PackedInts$ReaderIterator::next() const
          {
            return env->callLongMethod(this$, mids$[mid_next_54c6a17a]);
          }

          ::org::apache::lucene::util::LongsRef PackedInts$ReaderIterator::next(jint a0) const
          {
            return ::org::apache::lucene::util::LongsRef(env->callObjectMethod(this$, mids$[mid_next_a3d07a9b], a0));
          }

          jint PackedInts$ReaderIterator::ord() const
          {
            return env->callIntMethod(this$, mids$[mid_ord_54c6a179]);
          }

          jint PackedInts$ReaderIterator::size() const
          {
            return env->callIntMethod(this$, mids$[mid_size_54c6a179]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace packed {
          static PyObject *t_PackedInts$ReaderIterator_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PackedInts$ReaderIterator_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PackedInts$ReaderIterator_getBitsPerValue(t_PackedInts$ReaderIterator *self);
          static PyObject *t_PackedInts$ReaderIterator_next(t_PackedInts$ReaderIterator *self, PyObject *args);
          static PyObject *t_PackedInts$ReaderIterator_ord(t_PackedInts$ReaderIterator *self);
          static PyObject *t_PackedInts$ReaderIterator_size(t_PackedInts$ReaderIterator *self);
          static PyObject *t_PackedInts$ReaderIterator_get__bitsPerValue(t_PackedInts$ReaderIterator *self, void *data);
          static PyGetSetDef t_PackedInts$ReaderIterator__fields_[] = {
            DECLARE_GET_FIELD(t_PackedInts$ReaderIterator, bitsPerValue),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_PackedInts$ReaderIterator__methods_[] = {
            DECLARE_METHOD(t_PackedInts$ReaderIterator, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PackedInts$ReaderIterator, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PackedInts$ReaderIterator, getBitsPerValue, METH_NOARGS),
            DECLARE_METHOD(t_PackedInts$ReaderIterator, next, METH_VARARGS),
            DECLARE_METHOD(t_PackedInts$ReaderIterator, ord, METH_NOARGS),
            DECLARE_METHOD(t_PackedInts$ReaderIterator, size, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(PackedInts$ReaderIterator, t_PackedInts$ReaderIterator, ::java::lang::Object, PackedInts$ReaderIterator, abstract_init, 0, 0, t_PackedInts$ReaderIterator__fields_, 0, 0);

          void t_PackedInts$ReaderIterator::install(PyObject *module)
          {
            installType(&PY_TYPE(PackedInts$ReaderIterator), module, "PackedInts$ReaderIterator", 0);
          }

          void t_PackedInts$ReaderIterator::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(PackedInts$ReaderIterator).tp_dict, "class_", make_descriptor(PackedInts$ReaderIterator::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(PackedInts$ReaderIterator).tp_dict, "wrapfn_", make_descriptor(t_PackedInts$ReaderIterator::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(PackedInts$ReaderIterator).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_PackedInts$ReaderIterator_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, PackedInts$ReaderIterator::initializeClass, 1)))
              return NULL;
            return t_PackedInts$ReaderIterator::wrap_Object(PackedInts$ReaderIterator(((t_PackedInts$ReaderIterator *) arg)->object.this$));
          }
          static PyObject *t_PackedInts$ReaderIterator_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, PackedInts$ReaderIterator::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_PackedInts$ReaderIterator_getBitsPerValue(t_PackedInts$ReaderIterator *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getBitsPerValue());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_PackedInts$ReaderIterator_next(t_PackedInts$ReaderIterator *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 0:
              {
                jlong result;
                OBJ_CALL(result = self->object.next());
                return PyLong_FromLongLong((PY_LONG_LONG) result);
              }
              break;
             case 1:
              {
                jint a0;
                ::org::apache::lucene::util::LongsRef result((jobject) NULL);

                if (!parseArgs(args, "I", &a0))
                {
                  OBJ_CALL(result = self->object.next(a0));
                  return ::org::apache::lucene::util::t_LongsRef::wrap_Object(result);
                }
              }
            }

            PyErr_SetArgsError((PyObject *) self, "next", args);
            return NULL;
          }

          static PyObject *t_PackedInts$ReaderIterator_ord(t_PackedInts$ReaderIterator *self)
          {
            jint result;
            OBJ_CALL(result = self->object.ord());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_PackedInts$ReaderIterator_size(t_PackedInts$ReaderIterator *self)
          {
            jint result;
            OBJ_CALL(result = self->object.size());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_PackedInts$ReaderIterator_get__bitsPerValue(t_PackedInts$ReaderIterator *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getBitsPerValue());
            return PyInt_FromLong((long) value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/fst/IntSequenceOutputs.h"
#include "org/apache/lucene/util/IntsRef.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/store/DataInput.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/store/DataOutput.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace fst {

          ::java::lang::Class *IntSequenceOutputs::class$ = NULL;
          jmethodID *IntSequenceOutputs::mids$ = NULL;
          bool IntSequenceOutputs::live$ = false;

          jclass IntSequenceOutputs::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/util/fst/IntSequenceOutputs");

              mids$ = new jmethodID[max_mid];
              mids$[mid_add_d1486e01] = env->getMethodID(cls, "add", "(Lorg/apache/lucene/util/IntsRef;Lorg/apache/lucene/util/IntsRef;)Lorg/apache/lucene/util/IntsRef;");
              mids$[mid_common_d1486e01] = env->getMethodID(cls, "common", "(Lorg/apache/lucene/util/IntsRef;Lorg/apache/lucene/util/IntsRef;)Lorg/apache/lucene/util/IntsRef;");
              mids$[mid_getNoOutput_5b734841] = env->getMethodID(cls, "getNoOutput", "()Lorg/apache/lucene/util/IntsRef;");
              mids$[mid_getSingleton_5d304c4b] = env->getStaticMethodID(cls, "getSingleton", "()Lorg/apache/lucene/util/fst/IntSequenceOutputs;");
              mids$[mid_outputToString_6c8ec0cf] = env->getMethodID(cls, "outputToString", "(Lorg/apache/lucene/util/IntsRef;)Ljava/lang/String;");
              mids$[mid_read_7ae3e2dc] = env->getMethodID(cls, "read", "(Lorg/apache/lucene/store/DataInput;)Lorg/apache/lucene/util/IntsRef;");
              mids$[mid_skipOutput_f5d6a551] = env->getMethodID(cls, "skipOutput", "(Lorg/apache/lucene/store/DataInput;)V");
              mids$[mid_subtract_d1486e01] = env->getMethodID(cls, "subtract", "(Lorg/apache/lucene/util/IntsRef;Lorg/apache/lucene/util/IntsRef;)Lorg/apache/lucene/util/IntsRef;");
              mids$[mid_write_e1973ab5] = env->getMethodID(cls, "write", "(Lorg/apache/lucene/util/IntsRef;Lorg/apache/lucene/store/DataOutput;)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ::org::apache::lucene::util::IntsRef IntSequenceOutputs::add(const ::org::apache::lucene::util::IntsRef & a0, const ::org::apache::lucene::util::IntsRef & a1) const
          {
            return ::org::apache::lucene::util::IntsRef(env->callObjectMethod(this$, mids$[mid_add_d1486e01], a0.this$, a1.this$));
          }

          ::org::apache::lucene::util::IntsRef IntSequenceOutputs::common(const ::org::apache::lucene::util::IntsRef & a0, const ::org::apache::lucene::util::IntsRef & a1) const
          {
            return ::org::apache::lucene::util::IntsRef(env->callObjectMethod(this$, mids$[mid_common_d1486e01], a0.this$, a1.this$));
          }

          ::org::apache::lucene::util::IntsRef IntSequenceOutputs::getNoOutput() const
          {
            return ::org::apache::lucene::util::IntsRef(env->callObjectMethod(this$, mids$[mid_getNoOutput_5b734841]));
          }

          IntSequenceOutputs IntSequenceOutputs::getSingleton()
          {
            jclass cls = env->getClass(initializeClass);
            return IntSequenceOutputs(env->callStaticObjectMethod(cls, mids$[mid_getSingleton_5d304c4b]));
          }

          ::java::lang::String IntSequenceOutputs::outputToString(const ::org::apache::lucene::util::IntsRef & a0) const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_outputToString_6c8ec0cf], a0.this$));
          }

          ::org::apache::lucene::util::IntsRef IntSequenceOutputs::read(const ::org::apache::lucene::store::DataInput & a0) const
          {
            return ::org::apache::lucene::util::IntsRef(env->callObjectMethod(this$, mids$[mid_read_7ae3e2dc], a0.this$));
          }

          void IntSequenceOutputs::skipOutput(const ::org::apache::lucene::store::DataInput & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_skipOutput_f5d6a551], a0.this$);
          }

          ::org::apache::lucene::util::IntsRef IntSequenceOutputs::subtract(const ::org::apache::lucene::util::IntsRef & a0, const ::org::apache::lucene::util::IntsRef & a1) const
          {
            return ::org::apache::lucene::util::IntsRef(env->callObjectMethod(this$, mids$[mid_subtract_d1486e01], a0.this$, a1.this$));
          }

          void IntSequenceOutputs::write(const ::org::apache::lucene::util::IntsRef & a0, const ::org::apache::lucene::store::DataOutput & a1) const
          {
            env->callVoidMethod(this$, mids$[mid_write_e1973ab5], a0.this$, a1.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace fst {
          static PyObject *t_IntSequenceOutputs_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_IntSequenceOutputs_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_IntSequenceOutputs_of_(t_IntSequenceOutputs *self, PyObject *args);
          static PyObject *t_IntSequenceOutputs_add(t_IntSequenceOutputs *self, PyObject *args);
          static PyObject *t_IntSequenceOutputs_common(t_IntSequenceOutputs *self, PyObject *args);
          static PyObject *t_IntSequenceOutputs_getNoOutput(t_IntSequenceOutputs *self, PyObject *args);
          static PyObject *t_IntSequenceOutputs_getSingleton(PyTypeObject *type);
          static PyObject *t_IntSequenceOutputs_outputToString(t_IntSequenceOutputs *self, PyObject *args);
          static PyObject *t_IntSequenceOutputs_read(t_IntSequenceOutputs *self, PyObject *args);
          static PyObject *t_IntSequenceOutputs_skipOutput(t_IntSequenceOutputs *self, PyObject *args);
          static PyObject *t_IntSequenceOutputs_subtract(t_IntSequenceOutputs *self, PyObject *args);
          static PyObject *t_IntSequenceOutputs_write(t_IntSequenceOutputs *self, PyObject *args);
          static PyObject *t_IntSequenceOutputs_get__noOutput(t_IntSequenceOutputs *self, void *data);
          static PyObject *t_IntSequenceOutputs_get__singleton(t_IntSequenceOutputs *self, void *data);
          static PyObject *t_IntSequenceOutputs_get__parameters_(t_IntSequenceOutputs *self, void *data);
          static PyGetSetDef t_IntSequenceOutputs__fields_[] = {
            DECLARE_GET_FIELD(t_IntSequenceOutputs, noOutput),
            DECLARE_GET_FIELD(t_IntSequenceOutputs, singleton),
            DECLARE_GET_FIELD(t_IntSequenceOutputs, parameters_),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_IntSequenceOutputs__methods_[] = {
            DECLARE_METHOD(t_IntSequenceOutputs, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_IntSequenceOutputs, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_IntSequenceOutputs, of_, METH_VARARGS),
            DECLARE_METHOD(t_IntSequenceOutputs, add, METH_VARARGS),
            DECLARE_METHOD(t_IntSequenceOutputs, common, METH_VARARGS),
            DECLARE_METHOD(t_IntSequenceOutputs, getNoOutput, METH_VARARGS),
            DECLARE_METHOD(t_IntSequenceOutputs, getSingleton, METH_NOARGS | METH_CLASS),
            DECLARE_METHOD(t_IntSequenceOutputs, outputToString, METH_VARARGS),
            DECLARE_METHOD(t_IntSequenceOutputs, read, METH_VARARGS),
            DECLARE_METHOD(t_IntSequenceOutputs, skipOutput, METH_VARARGS),
            DECLARE_METHOD(t_IntSequenceOutputs, subtract, METH_VARARGS),
            DECLARE_METHOD(t_IntSequenceOutputs, write, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(IntSequenceOutputs, t_IntSequenceOutputs, ::org::apache::lucene::util::fst::Outputs, IntSequenceOutputs, abstract_init, 0, 0, t_IntSequenceOutputs__fields_, 0, 0);
          PyObject *t_IntSequenceOutputs::wrap_Object(const IntSequenceOutputs& object, PyTypeObject *p0)
          {
            PyObject *obj = t_IntSequenceOutputs::wrap_Object(object);
            if (obj != NULL && obj != Py_None)
            {
              t_IntSequenceOutputs *self = (t_IntSequenceOutputs *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          PyObject *t_IntSequenceOutputs::wrap_jobject(const jobject& object, PyTypeObject *p0)
          {
            PyObject *obj = t_IntSequenceOutputs::wrap_jobject(object);
            if (obj != NULL && obj != Py_None)
            {
              t_IntSequenceOutputs *self = (t_IntSequenceOutputs *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          void t_IntSequenceOutputs::install(PyObject *module)
          {
            installType(&PY_TYPE(IntSequenceOutputs), module, "IntSequenceOutputs", 0);
          }

          void t_IntSequenceOutputs::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(IntSequenceOutputs).tp_dict, "class_", make_descriptor(IntSequenceOutputs::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(IntSequenceOutputs).tp_dict, "wrapfn_", make_descriptor(t_IntSequenceOutputs::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(IntSequenceOutputs).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_IntSequenceOutputs_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, IntSequenceOutputs::initializeClass, 1)))
              return NULL;
            return t_IntSequenceOutputs::wrap_Object(IntSequenceOutputs(((t_IntSequenceOutputs *) arg)->object.this$));
          }
          static PyObject *t_IntSequenceOutputs_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, IntSequenceOutputs::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_IntSequenceOutputs_of_(t_IntSequenceOutputs *self, PyObject *args)
          {
            if (!parseArg(args, "T", 1, &(self->parameters)))
              Py_RETURN_SELF;
            return PyErr_SetArgsError((PyObject *) self, "of_", args);
          }

          static PyObject *t_IntSequenceOutputs_add(t_IntSequenceOutputs *self, PyObject *args)
          {
            ::org::apache::lucene::util::IntsRef a0((jobject) NULL);
            ::org::apache::lucene::util::IntsRef a1((jobject) NULL);
            ::org::apache::lucene::util::IntsRef result((jobject) NULL);

            if (!parseArgs(args, "kk", ::org::apache::lucene::util::IntsRef::initializeClass, ::org::apache::lucene::util::IntsRef::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.add(a0, a1));
              return ::org::apache::lucene::util::t_IntsRef::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(IntSequenceOutputs), (PyObject *) self, "add", args, 2);
          }

          static PyObject *t_IntSequenceOutputs_common(t_IntSequenceOutputs *self, PyObject *args)
          {
            ::org::apache::lucene::util::IntsRef a0((jobject) NULL);
            ::org::apache::lucene::util::IntsRef a1((jobject) NULL);
            ::org::apache::lucene::util::IntsRef result((jobject) NULL);

            if (!parseArgs(args, "kk", ::org::apache::lucene::util::IntsRef::initializeClass, ::org::apache::lucene::util::IntsRef::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.common(a0, a1));
              return ::org::apache::lucene::util::t_IntsRef::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(IntSequenceOutputs), (PyObject *) self, "common", args, 2);
          }

          static PyObject *t_IntSequenceOutputs_getNoOutput(t_IntSequenceOutputs *self, PyObject *args)
          {
            ::org::apache::lucene::util::IntsRef result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.getNoOutput());
              return ::org::apache::lucene::util::t_IntsRef::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(IntSequenceOutputs), (PyObject *) self, "getNoOutput", args, 2);
          }

          static PyObject *t_IntSequenceOutputs_getSingleton(PyTypeObject *type)
          {
            IntSequenceOutputs result((jobject) NULL);
            OBJ_CALL(result = ::org::apache::lucene::util::fst::IntSequenceOutputs::getSingleton());
            return t_IntSequenceOutputs::wrap_Object(result);
          }

          static PyObject *t_IntSequenceOutputs_outputToString(t_IntSequenceOutputs *self, PyObject *args)
          {
            ::org::apache::lucene::util::IntsRef a0((jobject) NULL);
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::util::IntsRef::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.outputToString(a0));
              return j2p(result);
            }

            return callSuper(&PY_TYPE(IntSequenceOutputs), (PyObject *) self, "outputToString", args, 2);
          }

          static PyObject *t_IntSequenceOutputs_read(t_IntSequenceOutputs *self, PyObject *args)
          {
            ::org::apache::lucene::store::DataInput a0((jobject) NULL);
            ::org::apache::lucene::util::IntsRef result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::store::DataInput::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.read(a0));
              return ::org::apache::lucene::util::t_IntsRef::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(IntSequenceOutputs), (PyObject *) self, "read", args, 2);
          }

          static PyObject *t_IntSequenceOutputs_skipOutput(t_IntSequenceOutputs *self, PyObject *args)
          {
            ::org::apache::lucene::store::DataInput a0((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::store::DataInput::initializeClass, &a0))
            {
              OBJ_CALL(self->object.skipOutput(a0));
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(IntSequenceOutputs), (PyObject *) self, "skipOutput", args, 2);
          }

          static PyObject *t_IntSequenceOutputs_subtract(t_IntSequenceOutputs *self, PyObject *args)
          {
            ::org::apache::lucene::util::IntsRef a0((jobject) NULL);
            ::org::apache::lucene::util::IntsRef a1((jobject) NULL);
            ::org::apache::lucene::util::IntsRef result((jobject) NULL);

            if (!parseArgs(args, "kk", ::org::apache::lucene::util::IntsRef::initializeClass, ::org::apache::lucene::util::IntsRef::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.subtract(a0, a1));
              return ::org::apache::lucene::util::t_IntsRef::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(IntSequenceOutputs), (PyObject *) self, "subtract", args, 2);
          }

          static PyObject *t_IntSequenceOutputs_write(t_IntSequenceOutputs *self, PyObject *args)
          {
            ::org::apache::lucene::util::IntsRef a0((jobject) NULL);
            ::org::apache::lucene::store::DataOutput a1((jobject) NULL);

            if (!parseArgs(args, "kk", ::org::apache::lucene::util::IntsRef::initializeClass, ::org::apache::lucene::store::DataOutput::initializeClass, &a0, &a1))
            {
              OBJ_CALL(self->object.write(a0, a1));
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(IntSequenceOutputs), (PyObject *) self, "write", args, 2);
          }
          static PyObject *t_IntSequenceOutputs_get__parameters_(t_IntSequenceOutputs *self, void *data)
          {
            return typeParameters(self->parameters, sizeof(self->parameters));
          }

          static PyObject *t_IntSequenceOutputs_get__noOutput(t_IntSequenceOutputs *self, void *data)
          {
            ::org::apache::lucene::util::IntsRef value((jobject) NULL);
            OBJ_CALL(value = self->object.getNoOutput());
            return ::org::apache::lucene::util::t_IntsRef::wrap_Object(value);
          }

          static PyObject *t_IntSequenceOutputs_get__singleton(t_IntSequenceOutputs *self, void *data)
          {
            IntSequenceOutputs value((jobject) NULL);
            OBJ_CALL(value = self->object.getSingleton());
            return t_IntSequenceOutputs::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/util/ResourceLoaderAware.h"
#include "org/apache/lucene/analysis/util/ResourceLoader.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace util {

          ::java::lang::Class *ResourceLoaderAware::class$ = NULL;
          jmethodID *ResourceLoaderAware::mids$ = NULL;
          bool ResourceLoaderAware::live$ = false;

          jclass ResourceLoaderAware::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/util/ResourceLoaderAware");

              mids$ = new jmethodID[max_mid];
              mids$[mid_inform_d6a4bc97] = env->getMethodID(cls, "inform", "(Lorg/apache/lucene/analysis/util/ResourceLoader;)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          void ResourceLoaderAware::inform(const ::org::apache::lucene::analysis::util::ResourceLoader & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_inform_d6a4bc97], a0.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace util {
          static PyObject *t_ResourceLoaderAware_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_ResourceLoaderAware_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_ResourceLoaderAware_inform(t_ResourceLoaderAware *self, PyObject *arg);

          static PyMethodDef t_ResourceLoaderAware__methods_[] = {
            DECLARE_METHOD(t_ResourceLoaderAware, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ResourceLoaderAware, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ResourceLoaderAware, inform, METH_O),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(ResourceLoaderAware, t_ResourceLoaderAware, ::java::lang::Object, ResourceLoaderAware, abstract_init, 0, 0, 0, 0, 0);

          void t_ResourceLoaderAware::install(PyObject *module)
          {
            installType(&PY_TYPE(ResourceLoaderAware), module, "ResourceLoaderAware", 0);
          }

          void t_ResourceLoaderAware::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(ResourceLoaderAware).tp_dict, "class_", make_descriptor(ResourceLoaderAware::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(ResourceLoaderAware).tp_dict, "wrapfn_", make_descriptor(t_ResourceLoaderAware::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(ResourceLoaderAware).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_ResourceLoaderAware_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, ResourceLoaderAware::initializeClass, 1)))
              return NULL;
            return t_ResourceLoaderAware::wrap_Object(ResourceLoaderAware(((t_ResourceLoaderAware *) arg)->object.this$));
          }
          static PyObject *t_ResourceLoaderAware_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, ResourceLoaderAware::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_ResourceLoaderAware_inform(t_ResourceLoaderAware *self, PyObject *arg)
          {
            ::org::apache::lucene::analysis::util::ResourceLoader a0((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::analysis::util::ResourceLoader::initializeClass, &a0))
            {
              OBJ_CALL(self->object.inform(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "inform", arg);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "java/io/FileNotFoundException.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace java {
  namespace io {

    ::java::lang::Class *FileNotFoundException::class$ = NULL;
    jmethodID *FileNotFoundException::mids$ = NULL;
    bool FileNotFoundException::live$ = false;

    jclass FileNotFoundException::initializeClass(bool getOnly)
    {
      if (getOnly)
        return (jclass) (live$ ? class$->this$ : NULL);
      if (class$ == NULL)
      {
        jclass cls = (jclass) env->findClass("java/io/FileNotFoundException");

        mids$ = new jmethodID[max_mid];
        mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
        mids$[mid_init$_5fdc3f48] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;)V");

        class$ = (::java::lang::Class *) new JObject(cls);
        live$ = true;
      }
      return (jclass) class$->this$;
    }

    FileNotFoundException::FileNotFoundException() : ::java::io::IOException(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

    FileNotFoundException::FileNotFoundException(const ::java::lang::String & a0) : ::java::io::IOException(env->newObject(initializeClass, &mids$, mid_init$_5fdc3f48, a0.this$)) {}
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace java {
  namespace io {
    static PyObject *t_FileNotFoundException_cast_(PyTypeObject *type, PyObject *arg);
    static PyObject *t_FileNotFoundException_instance_(PyTypeObject *type, PyObject *arg);
    static int t_FileNotFoundException_init_(t_FileNotFoundException *self, PyObject *args, PyObject *kwds);

    static PyMethodDef t_FileNotFoundException__methods_[] = {
      DECLARE_METHOD(t_FileNotFoundException, cast_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_FileNotFoundException, instance_, METH_O | METH_CLASS),
      { NULL, NULL, 0, NULL }
    };

    DECLARE_TYPE(FileNotFoundException, t_FileNotFoundException, ::java::io::IOException, FileNotFoundException, t_FileNotFoundException_init_, 0, 0, 0, 0, 0);

    void t_FileNotFoundException::install(PyObject *module)
    {
      installType(&PY_TYPE(FileNotFoundException), module, "FileNotFoundException", 0);
    }

    void t_FileNotFoundException::initialize(PyObject *module)
    {
      PyDict_SetItemString(PY_TYPE(FileNotFoundException).tp_dict, "class_", make_descriptor(FileNotFoundException::initializeClass, 1));
      PyDict_SetItemString(PY_TYPE(FileNotFoundException).tp_dict, "wrapfn_", make_descriptor(t_FileNotFoundException::wrap_jobject));
      PyDict_SetItemString(PY_TYPE(FileNotFoundException).tp_dict, "boxfn_", make_descriptor(boxObject));
    }

    static PyObject *t_FileNotFoundException_cast_(PyTypeObject *type, PyObject *arg)
    {
      if (!(arg = castCheck(arg, FileNotFoundException::initializeClass, 1)))
        return NULL;
      return t_FileNotFoundException::wrap_Object(FileNotFoundException(((t_FileNotFoundException *) arg)->object.this$));
    }
    static PyObject *t_FileNotFoundException_instance_(PyTypeObject *type, PyObject *arg)
    {
      if (!castCheck(arg, FileNotFoundException::initializeClass, 0))
        Py_RETURN_FALSE;
      Py_RETURN_TRUE;
    }

    static int t_FileNotFoundException_init_(t_FileNotFoundException *self, PyObject *args, PyObject *kwds)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 0:
        {
          FileNotFoundException object((jobject) NULL);

          INT_CALL(object = FileNotFoundException());
          self->object = object;
          break;
        }
        goto err;
       case 1:
        {
          ::java::lang::String a0((jobject) NULL);
          FileNotFoundException object((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            INT_CALL(object = FileNotFoundException(a0));
            self->object = object;
            break;
          }
        }
       default:
       err:
        PyErr_SetArgsError((PyObject *) self, "__init__", args);
        return -1;
      }

      return 0;
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/grouping/SearchGroup.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "java/util/Collection.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/search/Sort.h"
#include "java/util/List.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace grouping {

          ::java::lang::Class *SearchGroup::class$ = NULL;
          jmethodID *SearchGroup::mids$ = NULL;
          jfieldID *SearchGroup::fids$ = NULL;
          bool SearchGroup::live$ = false;

          jclass SearchGroup::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/grouping/SearchGroup");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
              mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
              mids$[mid_merge_8879ded5] = env->getStaticMethodID(cls, "merge", "(Ljava/util/List;IILorg/apache/lucene/search/Sort;)Ljava/util/Collection;");
              mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

              fids$ = new jfieldID[max_fid];
              fids$[fid_groupValue] = env->getFieldID(cls, "groupValue", "Ljava/lang/Object;");
              fids$[fid_sortValues] = env->getFieldID(cls, "sortValues", "[Ljava/lang/Object;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          SearchGroup::SearchGroup() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          jboolean SearchGroup::equals(const ::java::lang::Object & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
          }

          jint SearchGroup::hashCode() const
          {
            return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
          }

          ::java::util::Collection SearchGroup::merge(const ::java::util::List & a0, jint a1, jint a2, const ::org::apache::lucene::search::Sort & a3)
          {
            jclass cls = env->getClass(initializeClass);
            return ::java::util::Collection(env->callStaticObjectMethod(cls, mids$[mid_merge_8879ded5], a0.this$, a1, a2, a3.this$));
          }

          ::java::lang::String SearchGroup::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
          }

          ::java::lang::Object SearchGroup::_get_groupValue() const
          {
            return ::java::lang::Object(env->getObjectField(this$, fids$[fid_groupValue]));
          }

          void SearchGroup::_set_groupValue(const ::java::lang::Object & a0) const
          {
            env->setObjectField(this$, fids$[fid_groupValue], a0.this$);
          }

          JArray< ::java::lang::Object > SearchGroup::_get_sortValues() const
          {
            return JArray< ::java::lang::Object >(env->getObjectField(this$, fids$[fid_sortValues]));
          }

          void SearchGroup::_set_sortValues(const JArray< ::java::lang::Object > & a0) const
          {
            env->setObjectField(this$, fids$[fid_sortValues], a0.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace grouping {
          static PyObject *t_SearchGroup_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SearchGroup_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SearchGroup_of_(t_SearchGroup *self, PyObject *args);
          static int t_SearchGroup_init_(t_SearchGroup *self, PyObject *args, PyObject *kwds);
          static PyObject *t_SearchGroup_equals(t_SearchGroup *self, PyObject *args);
          static PyObject *t_SearchGroup_hashCode(t_SearchGroup *self, PyObject *args);
          static PyObject *t_SearchGroup_merge(PyTypeObject *type, PyObject *args);
          static PyObject *t_SearchGroup_toString(t_SearchGroup *self, PyObject *args);
          static PyObject *t_SearchGroup_get__groupValue(t_SearchGroup *self, void *data);
          static int t_SearchGroup_set__groupValue(t_SearchGroup *self, PyObject *arg, void *data);
          static PyObject *t_SearchGroup_get__sortValues(t_SearchGroup *self, void *data);
          static int t_SearchGroup_set__sortValues(t_SearchGroup *self, PyObject *arg, void *data);

          static PyObject *t_SearchGroup_get__parameters_(t_SearchGroup *self, void *data);
          static PyGetSetDef t_SearchGroup__fields_[] = {
            DECLARE_GETSET_FIELD(t_SearchGroup, groupValue),
            DECLARE_GETSET_FIELD(t_SearchGroup, sortValues),
            DECLARE_GET_FIELD(t_SearchGroup, parameters_),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_SearchGroup__methods_[] = {
            DECLARE_METHOD(t_SearchGroup, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SearchGroup, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SearchGroup, of_, METH_VARARGS),
            DECLARE_METHOD(t_SearchGroup, equals, METH_VARARGS),
            DECLARE_METHOD(t_SearchGroup, hashCode, METH_VARARGS),
            DECLARE_METHOD(t_SearchGroup, merge, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_SearchGroup, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(SearchGroup, t_SearchGroup, ::java::lang::Object, SearchGroup, t_SearchGroup_init_, 0, 0, t_SearchGroup__fields_, 0, 0);
          PyObject *t_SearchGroup::wrap_Object(const SearchGroup& object, PyTypeObject *p0)
          {
            PyObject *obj = t_SearchGroup::wrap_Object(object);
            if (obj != NULL && obj != Py_None)
            {
              t_SearchGroup *self = (t_SearchGroup *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          PyObject *t_SearchGroup::wrap_jobject(const jobject& object, PyTypeObject *p0)
          {
            PyObject *obj = t_SearchGroup::wrap_jobject(object);
            if (obj != NULL && obj != Py_None)
            {
              t_SearchGroup *self = (t_SearchGroup *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          void t_SearchGroup::install(PyObject *module)
          {
            installType(&PY_TYPE(SearchGroup), module, "SearchGroup", 0);
          }

          void t_SearchGroup::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(SearchGroup).tp_dict, "class_", make_descriptor(SearchGroup::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(SearchGroup).tp_dict, "wrapfn_", make_descriptor(t_SearchGroup::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(SearchGroup).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_SearchGroup_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, SearchGroup::initializeClass, 1)))
              return NULL;
            return t_SearchGroup::wrap_Object(SearchGroup(((t_SearchGroup *) arg)->object.this$));
          }
          static PyObject *t_SearchGroup_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, SearchGroup::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_SearchGroup_of_(t_SearchGroup *self, PyObject *args)
          {
            if (!parseArg(args, "T", 1, &(self->parameters)))
              Py_RETURN_SELF;
            return PyErr_SetArgsError((PyObject *) self, "of_", args);
          }

          static int t_SearchGroup_init_(t_SearchGroup *self, PyObject *args, PyObject *kwds)
          {
            SearchGroup object((jobject) NULL);

            INT_CALL(object = SearchGroup());
            self->object = object;

            return 0;
          }

          static PyObject *t_SearchGroup_equals(t_SearchGroup *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            jboolean result;

            if (!parseArgs(args, "o", &a0))
            {
              OBJ_CALL(result = self->object.equals(a0));
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(SearchGroup), (PyObject *) self, "equals", args, 2);
          }

          static PyObject *t_SearchGroup_hashCode(t_SearchGroup *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.hashCode());
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(SearchGroup), (PyObject *) self, "hashCode", args, 2);
          }

          static PyObject *t_SearchGroup_merge(PyTypeObject *type, PyObject *args)
          {
            ::java::util::List a0((jobject) NULL);
            PyTypeObject **p0;
            jint a1;
            jint a2;
            ::org::apache::lucene::search::Sort a3((jobject) NULL);
            ::java::util::Collection result((jobject) NULL);

            if (!parseArgs(args, "KIIk", ::java::util::List::initializeClass, ::org::apache::lucene::search::Sort::initializeClass, &a0, &p0, ::java::util::t_List::parameters_, &a1, &a2, &a3))
            {
              OBJ_CALL(result = ::org::apache::lucene::search::grouping::SearchGroup::merge(a0, a1, a2, a3));
              return ::java::util::t_Collection::wrap_Object(result);
            }

            PyErr_SetArgsError(type, "merge", args);
            return NULL;
          }

          static PyObject *t_SearchGroup_toString(t_SearchGroup *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(&PY_TYPE(SearchGroup), (PyObject *) self, "toString", args, 2);
          }
          static PyObject *t_SearchGroup_get__parameters_(t_SearchGroup *self, void *data)
          {
            return typeParameters(self->parameters, sizeof(self->parameters));
          }

          static PyObject *t_SearchGroup_get__groupValue(t_SearchGroup *self, void *data)
          {
            ::java::lang::Object value((jobject) NULL);
            OBJ_CALL(value = self->object._get_groupValue());
            return ::java::lang::t_Object::wrap_Object(value);
          }
          static int t_SearchGroup_set__groupValue(t_SearchGroup *self, PyObject *arg, void *data)
          {
            ::java::lang::Object value((jobject) NULL);
            if (!parseArg(arg, "o", &value))
            {
              INT_CALL(self->object._set_groupValue(value));
              return 0;
            }
            PyErr_SetArgsError((PyObject *) self, "groupValue", arg);
            return -1;
          }

          static PyObject *t_SearchGroup_get__sortValues(t_SearchGroup *self, void *data)
          {
            JArray< ::java::lang::Object > value((jobject) NULL);
            OBJ_CALL(value = self->object._get_sortValues());
            return JArray<jobject>(value.this$).wrap(::java::lang::t_Object::wrap_jobject);
          }
          static int t_SearchGroup_set__sortValues(t_SearchGroup *self, PyObject *arg, void *data)
          {
            JArray< ::java::lang::Object > value((jobject) NULL);
            if (!parseArg(arg, "[o", &value))
            {
              INT_CALL(self->object._set_sortValues(value));
              return 0;
            }
            PyErr_SetArgsError((PyObject *) self, "sortValues", arg);
            return -1;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/standard/StandardTokenizer.h"
#include "org/apache/lucene/util/AttributeFactory.h"
#include "java/lang/Class.h"
#include "java/io/Reader.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/util/Version.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace standard {

          ::java::lang::Class *StandardTokenizer::class$ = NULL;
          jmethodID *StandardTokenizer::mids$ = NULL;
          bool StandardTokenizer::live$ = false;
          jint StandardTokenizer::ACRONYM = (jint) 0;
          jint StandardTokenizer::ACRONYM_DEP = (jint) 0;
          jint StandardTokenizer::ALPHANUM = (jint) 0;
          jint StandardTokenizer::APOSTROPHE = (jint) 0;
          jint StandardTokenizer::CJ = (jint) 0;
          jint StandardTokenizer::COMPANY = (jint) 0;
          jint StandardTokenizer::EMAIL = (jint) 0;
          jint StandardTokenizer::HANGUL = (jint) 0;
          jint StandardTokenizer::HIRAGANA = (jint) 0;
          jint StandardTokenizer::HOST = (jint) 0;
          jint StandardTokenizer::IDEOGRAPHIC = (jint) 0;
          jint StandardTokenizer::KATAKANA = (jint) 0;
          jint StandardTokenizer::NUM = (jint) 0;
          jint StandardTokenizer::SOUTHEAST_ASIAN = (jint) 0;
          JArray< ::java::lang::String > *StandardTokenizer::TOKEN_TYPES = NULL;

          jclass StandardTokenizer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/standard/StandardTokenizer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_7997a391] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Ljava/io/Reader;)V");
              mids$[mid_init$_be7a3ecf] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/util/AttributeFactory;Ljava/io/Reader;)V");
              mids$[mid_close_54c6a166] = env->getMethodID(cls, "close", "()V");
              mids$[mid_end_54c6a166] = env->getMethodID(cls, "end", "()V");
              mids$[mid_getMaxTokenLength_54c6a179] = env->getMethodID(cls, "getMaxTokenLength", "()I");
              mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");
              mids$[mid_reset_54c6a166] = env->getMethodID(cls, "reset", "()V");
              mids$[mid_setMaxTokenLength_39c7bd3c] = env->getMethodID(cls, "setMaxTokenLength", "(I)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              ACRONYM = env->getStaticIntField(cls, "ACRONYM");
              ACRONYM_DEP = env->getStaticIntField(cls, "ACRONYM_DEP");
              ALPHANUM = env->getStaticIntField(cls, "ALPHANUM");
              APOSTROPHE = env->getStaticIntField(cls, "APOSTROPHE");
              CJ = env->getStaticIntField(cls, "CJ");
              COMPANY = env->getStaticIntField(cls, "COMPANY");
              EMAIL = env->getStaticIntField(cls, "EMAIL");
              HANGUL = env->getStaticIntField(cls, "HANGUL");
              HIRAGANA = env->getStaticIntField(cls, "HIRAGANA");
              HOST = env->getStaticIntField(cls, "HOST");
              IDEOGRAPHIC = env->getStaticIntField(cls, "IDEOGRAPHIC");
              KATAKANA = env->getStaticIntField(cls, "KATAKANA");
              NUM = env->getStaticIntField(cls, "NUM");
              SOUTHEAST_ASIAN = env->getStaticIntField(cls, "SOUTHEAST_ASIAN");
              TOKEN_TYPES = new JArray< ::java::lang::String >(env->getStaticObjectField(cls, "TOKEN_TYPES", "[Ljava/lang/String;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          StandardTokenizer::StandardTokenizer(const ::org::apache::lucene::util::Version & a0, const ::java::io::Reader & a1) : ::org::apache::lucene::analysis::Tokenizer(env->newObject(initializeClass, &mids$, mid_init$_7997a391, a0.this$, a1.this$)) {}

          StandardTokenizer::StandardTokenizer(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::util::AttributeFactory & a1, const ::java::io::Reader & a2) : ::org::apache::lucene::analysis::Tokenizer(env->newObject(initializeClass, &mids$, mid_init$_be7a3ecf, a0.this$, a1.this$, a2.this$)) {}

          void StandardTokenizer::close() const
          {
            env->callVoidMethod(this$, mids$[mid_close_54c6a166]);
          }

          void StandardTokenizer::end() const
          {
            env->callVoidMethod(this$, mids$[mid_end_54c6a166]);
          }

          jint StandardTokenizer::getMaxTokenLength() const
          {
            return env->callIntMethod(this$, mids$[mid_getMaxTokenLength_54c6a179]);
          }

          jboolean StandardTokenizer::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_54c6a16a]);
          }

          void StandardTokenizer::reset() const
          {
            env->callVoidMethod(this$, mids$[mid_reset_54c6a166]);
          }

          void StandardTokenizer::setMaxTokenLength(jint a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setMaxTokenLength_39c7bd3c], a0);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace standard {
          static PyObject *t_StandardTokenizer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_StandardTokenizer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_StandardTokenizer_init_(t_StandardTokenizer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_StandardTokenizer_close(t_StandardTokenizer *self, PyObject *args);
          static PyObject *t_StandardTokenizer_end(t_StandardTokenizer *self, PyObject *args);
          static PyObject *t_StandardTokenizer_getMaxTokenLength(t_StandardTokenizer *self);
          static PyObject *t_StandardTokenizer_incrementToken(t_StandardTokenizer *self, PyObject *args);
          static PyObject *t_StandardTokenizer_reset(t_StandardTokenizer *self, PyObject *args);
          static PyObject *t_StandardTokenizer_setMaxTokenLength(t_StandardTokenizer *self, PyObject *arg);
          static PyObject *t_StandardTokenizer_get__maxTokenLength(t_StandardTokenizer *self, void *data);
          static int t_StandardTokenizer_set__maxTokenLength(t_StandardTokenizer *self, PyObject *arg, void *data);
          static PyGetSetDef t_StandardTokenizer__fields_[] = {
            DECLARE_GETSET_FIELD(t_StandardTokenizer, maxTokenLength),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_StandardTokenizer__methods_[] = {
            DECLARE_METHOD(t_StandardTokenizer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_StandardTokenizer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_StandardTokenizer, close, METH_VARARGS),
            DECLARE_METHOD(t_StandardTokenizer, end, METH_VARARGS),
            DECLARE_METHOD(t_StandardTokenizer, getMaxTokenLength, METH_NOARGS),
            DECLARE_METHOD(t_StandardTokenizer, incrementToken, METH_VARARGS),
            DECLARE_METHOD(t_StandardTokenizer, reset, METH_VARARGS),
            DECLARE_METHOD(t_StandardTokenizer, setMaxTokenLength, METH_O),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(StandardTokenizer, t_StandardTokenizer, ::org::apache::lucene::analysis::Tokenizer, StandardTokenizer, t_StandardTokenizer_init_, 0, 0, t_StandardTokenizer__fields_, 0, 0);

          void t_StandardTokenizer::install(PyObject *module)
          {
            installType(&PY_TYPE(StandardTokenizer), module, "StandardTokenizer", 0);
          }

          void t_StandardTokenizer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(StandardTokenizer).tp_dict, "class_", make_descriptor(StandardTokenizer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(StandardTokenizer).tp_dict, "wrapfn_", make_descriptor(t_StandardTokenizer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(StandardTokenizer).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(StandardTokenizer::initializeClass);
            PyDict_SetItemString(PY_TYPE(StandardTokenizer).tp_dict, "ACRONYM", make_descriptor(StandardTokenizer::ACRONYM));
            PyDict_SetItemString(PY_TYPE(StandardTokenizer).tp_dict, "ACRONYM_DEP", make_descriptor(StandardTokenizer::ACRONYM_DEP));
            PyDict_SetItemString(PY_TYPE(StandardTokenizer).tp_dict, "ALPHANUM", make_descriptor(StandardTokenizer::ALPHANUM));
            PyDict_SetItemString(PY_TYPE(StandardTokenizer).tp_dict, "APOSTROPHE", make_descriptor(StandardTokenizer::APOSTROPHE));
            PyDict_SetItemString(PY_TYPE(StandardTokenizer).tp_dict, "CJ", make_descriptor(StandardTokenizer::CJ));
            PyDict_SetItemString(PY_TYPE(StandardTokenizer).tp_dict, "COMPANY", make_descriptor(StandardTokenizer::COMPANY));
            PyDict_SetItemString(PY_TYPE(StandardTokenizer).tp_dict, "EMAIL", make_descriptor(StandardTokenizer::EMAIL));
            PyDict_SetItemString(PY_TYPE(StandardTokenizer).tp_dict, "HANGUL", make_descriptor(StandardTokenizer::HANGUL));
            PyDict_SetItemString(PY_TYPE(StandardTokenizer).tp_dict, "HIRAGANA", make_descriptor(StandardTokenizer::HIRAGANA));
            PyDict_SetItemString(PY_TYPE(StandardTokenizer).tp_dict, "HOST", make_descriptor(StandardTokenizer::HOST));
            PyDict_SetItemString(PY_TYPE(StandardTokenizer).tp_dict, "IDEOGRAPHIC", make_descriptor(StandardTokenizer::IDEOGRAPHIC));
            PyDict_SetItemString(PY_TYPE(StandardTokenizer).tp_dict, "KATAKANA", make_descriptor(StandardTokenizer::KATAKANA));
            PyDict_SetItemString(PY_TYPE(StandardTokenizer).tp_dict, "NUM", make_descriptor(StandardTokenizer::NUM));
            PyDict_SetItemString(PY_TYPE(StandardTokenizer).tp_dict, "SOUTHEAST_ASIAN", make_descriptor(StandardTokenizer::SOUTHEAST_ASIAN));
            PyDict_SetItemString(PY_TYPE(StandardTokenizer).tp_dict, "TOKEN_TYPES", make_descriptor(JArray<jstring>(StandardTokenizer::TOKEN_TYPES->this$).wrap()));
          }

          static PyObject *t_StandardTokenizer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, StandardTokenizer::initializeClass, 1)))
              return NULL;
            return t_StandardTokenizer::wrap_Object(StandardTokenizer(((t_StandardTokenizer *) arg)->object.this$));
          }
          static PyObject *t_StandardTokenizer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, StandardTokenizer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_StandardTokenizer_init_(t_StandardTokenizer *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 2:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                ::java::io::Reader a1((jobject) NULL);
                StandardTokenizer object((jobject) NULL);

                if (!parseArgs(args, "Kk", ::org::apache::lucene::util::Version::initializeClass, ::java::io::Reader::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1))
                {
                  INT_CALL(object = StandardTokenizer(a0, a1));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 3:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                ::org::apache::lucene::util::AttributeFactory a1((jobject) NULL);
                ::java::io::Reader a2((jobject) NULL);
                StandardTokenizer object((jobject) NULL);

                if (!parseArgs(args, "Kkk", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::util::AttributeFactory::initializeClass, ::java::io::Reader::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1, &a2))
                {
                  INT_CALL(object = StandardTokenizer(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_StandardTokenizer_close(t_StandardTokenizer *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.close());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(StandardTokenizer), (PyObject *) self, "close", args, 2);
          }

          static PyObject *t_StandardTokenizer_end(t_StandardTokenizer *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.end());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(StandardTokenizer), (PyObject *) self, "end", args, 2);
          }

          static PyObject *t_StandardTokenizer_getMaxTokenLength(t_StandardTokenizer *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getMaxTokenLength());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_StandardTokenizer_incrementToken(t_StandardTokenizer *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(StandardTokenizer), (PyObject *) self, "incrementToken", args, 2);
          }

          static PyObject *t_StandardTokenizer_reset(t_StandardTokenizer *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.reset());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(StandardTokenizer), (PyObject *) self, "reset", args, 2);
          }

          static PyObject *t_StandardTokenizer_setMaxTokenLength(t_StandardTokenizer *self, PyObject *arg)
          {
            jint a0;

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(self->object.setMaxTokenLength(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setMaxTokenLength", arg);
            return NULL;
          }

          static PyObject *t_StandardTokenizer_get__maxTokenLength(t_StandardTokenizer *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getMaxTokenLength());
            return PyInt_FromLong((long) value);
          }
          static int t_StandardTokenizer_set__maxTokenLength(t_StandardTokenizer *self, PyObject *arg, void *data)
          {
            {
              jint value;
              if (!parseArg(arg, "I", &value))
              {
                INT_CALL(self->object.setMaxTokenLength(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "maxTokenLength", arg);
            return -1;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/similarities/BasicModelG.h"
#include "org/apache/lucene/search/similarities/BasicStats.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace similarities {

          ::java::lang::Class *BasicModelG::class$ = NULL;
          jmethodID *BasicModelG::mids$ = NULL;
          bool BasicModelG::live$ = false;

          jclass BasicModelG::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/similarities/BasicModelG");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_score_076760a9] = env->getMethodID(cls, "score", "(Lorg/apache/lucene/search/similarities/BasicStats;F)F");
              mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          BasicModelG::BasicModelG() : ::org::apache::lucene::search::similarities::BasicModel(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          jfloat BasicModelG::score(const ::org::apache::lucene::search::similarities::BasicStats & a0, jfloat a1) const
          {
            return env->callFloatMethod(this$, mids$[mid_score_076760a9], a0.this$, a1);
          }

          ::java::lang::String BasicModelG::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace similarities {
          static PyObject *t_BasicModelG_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_BasicModelG_instance_(PyTypeObject *type, PyObject *arg);
          static int t_BasicModelG_init_(t_BasicModelG *self, PyObject *args, PyObject *kwds);
          static PyObject *t_BasicModelG_score(t_BasicModelG *self, PyObject *args);
          static PyObject *t_BasicModelG_toString(t_BasicModelG *self, PyObject *args);

          static PyMethodDef t_BasicModelG__methods_[] = {
            DECLARE_METHOD(t_BasicModelG, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_BasicModelG, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_BasicModelG, score, METH_VARARGS),
            DECLARE_METHOD(t_BasicModelG, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(BasicModelG, t_BasicModelG, ::org::apache::lucene::search::similarities::BasicModel, BasicModelG, t_BasicModelG_init_, 0, 0, 0, 0, 0);

          void t_BasicModelG::install(PyObject *module)
          {
            installType(&PY_TYPE(BasicModelG), module, "BasicModelG", 0);
          }

          void t_BasicModelG::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(BasicModelG).tp_dict, "class_", make_descriptor(BasicModelG::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(BasicModelG).tp_dict, "wrapfn_", make_descriptor(t_BasicModelG::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(BasicModelG).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_BasicModelG_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, BasicModelG::initializeClass, 1)))
              return NULL;
            return t_BasicModelG::wrap_Object(BasicModelG(((t_BasicModelG *) arg)->object.this$));
          }
          static PyObject *t_BasicModelG_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, BasicModelG::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_BasicModelG_init_(t_BasicModelG *self, PyObject *args, PyObject *kwds)
          {
            BasicModelG object((jobject) NULL);

            INT_CALL(object = BasicModelG());
            self->object = object;

            return 0;
          }

          static PyObject *t_BasicModelG_score(t_BasicModelG *self, PyObject *args)
          {
            ::org::apache::lucene::search::similarities::BasicStats a0((jobject) NULL);
            jfloat a1;
            jfloat result;

            if (!parseArgs(args, "kF", ::org::apache::lucene::search::similarities::BasicStats::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.score(a0, a1));
              return PyFloat_FromDouble((double) result);
            }

            return callSuper(&PY_TYPE(BasicModelG), (PyObject *) self, "score", args, 2);
          }

          static PyObject *t_BasicModelG_toString(t_BasicModelG *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(&PY_TYPE(BasicModelG), (PyObject *) self, "toString", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/highlight/TokenStreamFromTermPositionVector.h"
#include "org/apache/lucene/index/Terms.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace highlight {

          ::java::lang::Class *TokenStreamFromTermPositionVector::class$ = NULL;
          jmethodID *TokenStreamFromTermPositionVector::mids$ = NULL;
          bool TokenStreamFromTermPositionVector::live$ = false;

          jclass TokenStreamFromTermPositionVector::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/highlight/TokenStreamFromTermPositionVector");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_d0b7bb17] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/Terms;)V");
              mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");
              mids$[mid_reset_54c6a166] = env->getMethodID(cls, "reset", "()V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          TokenStreamFromTermPositionVector::TokenStreamFromTermPositionVector(const ::org::apache::lucene::index::Terms & a0) : ::org::apache::lucene::analysis::TokenStream(env->newObject(initializeClass, &mids$, mid_init$_d0b7bb17, a0.this$)) {}

          jboolean TokenStreamFromTermPositionVector::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_54c6a16a]);
          }

          void TokenStreamFromTermPositionVector::reset() const
          {
            env->callVoidMethod(this$, mids$[mid_reset_54c6a166]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace highlight {
          static PyObject *t_TokenStreamFromTermPositionVector_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_TokenStreamFromTermPositionVector_instance_(PyTypeObject *type, PyObject *arg);
          static int t_TokenStreamFromTermPositionVector_init_(t_TokenStreamFromTermPositionVector *self, PyObject *args, PyObject *kwds);
          static PyObject *t_TokenStreamFromTermPositionVector_incrementToken(t_TokenStreamFromTermPositionVector *self, PyObject *args);
          static PyObject *t_TokenStreamFromTermPositionVector_reset(t_TokenStreamFromTermPositionVector *self, PyObject *args);

          static PyMethodDef t_TokenStreamFromTermPositionVector__methods_[] = {
            DECLARE_METHOD(t_TokenStreamFromTermPositionVector, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_TokenStreamFromTermPositionVector, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_TokenStreamFromTermPositionVector, incrementToken, METH_VARARGS),
            DECLARE_METHOD(t_TokenStreamFromTermPositionVector, reset, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(TokenStreamFromTermPositionVector, t_TokenStreamFromTermPositionVector, ::org::apache::lucene::analysis::TokenStream, TokenStreamFromTermPositionVector, t_TokenStreamFromTermPositionVector_init_, 0, 0, 0, 0, 0);

          void t_TokenStreamFromTermPositionVector::install(PyObject *module)
          {
            installType(&PY_TYPE(TokenStreamFromTermPositionVector), module, "TokenStreamFromTermPositionVector", 0);
          }

          void t_TokenStreamFromTermPositionVector::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(TokenStreamFromTermPositionVector).tp_dict, "class_", make_descriptor(TokenStreamFromTermPositionVector::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(TokenStreamFromTermPositionVector).tp_dict, "wrapfn_", make_descriptor(t_TokenStreamFromTermPositionVector::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(TokenStreamFromTermPositionVector).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_TokenStreamFromTermPositionVector_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, TokenStreamFromTermPositionVector::initializeClass, 1)))
              return NULL;
            return t_TokenStreamFromTermPositionVector::wrap_Object(TokenStreamFromTermPositionVector(((t_TokenStreamFromTermPositionVector *) arg)->object.this$));
          }
          static PyObject *t_TokenStreamFromTermPositionVector_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, TokenStreamFromTermPositionVector::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_TokenStreamFromTermPositionVector_init_(t_TokenStreamFromTermPositionVector *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::index::Terms a0((jobject) NULL);
            TokenStreamFromTermPositionVector object((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::index::Terms::initializeClass, &a0))
            {
              INT_CALL(object = TokenStreamFromTermPositionVector(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_TokenStreamFromTermPositionVector_incrementToken(t_TokenStreamFromTermPositionVector *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(TokenStreamFromTermPositionVector), (PyObject *) self, "incrementToken", args, 2);
          }

          static PyObject *t_TokenStreamFromTermPositionVector_reset(t_TokenStreamFromTermPositionVector *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.reset());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(TokenStreamFromTermPositionVector), (PyObject *) self, "reset", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/lucene49/Lucene49NormsFormat.h"
#include "org/apache/lucene/index/SegmentReadState.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/codecs/DocValuesConsumer.h"
#include "org/apache/lucene/index/SegmentWriteState.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/codecs/DocValuesProducer.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace lucene49 {

          ::java::lang::Class *Lucene49NormsFormat::class$ = NULL;
          jmethodID *Lucene49NormsFormat::mids$ = NULL;
          bool Lucene49NormsFormat::live$ = false;

          jclass Lucene49NormsFormat::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/lucene49/Lucene49NormsFormat");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_normsConsumer_025deb44] = env->getMethodID(cls, "normsConsumer", "(Lorg/apache/lucene/index/SegmentWriteState;)Lorg/apache/lucene/codecs/DocValuesConsumer;");
              mids$[mid_normsProducer_9b0d4e4a] = env->getMethodID(cls, "normsProducer", "(Lorg/apache/lucene/index/SegmentReadState;)Lorg/apache/lucene/codecs/DocValuesProducer;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          Lucene49NormsFormat::Lucene49NormsFormat() : ::org::apache::lucene::codecs::NormsFormat(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          ::org::apache::lucene::codecs::DocValuesConsumer Lucene49NormsFormat::normsConsumer(const ::org::apache::lucene::index::SegmentWriteState & a0) const
          {
            return ::org::apache::lucene::codecs::DocValuesConsumer(env->callObjectMethod(this$, mids$[mid_normsConsumer_025deb44], a0.this$));
          }

          ::org::apache::lucene::codecs::DocValuesProducer Lucene49NormsFormat::normsProducer(const ::org::apache::lucene::index::SegmentReadState & a0) const
          {
            return ::org::apache::lucene::codecs::DocValuesProducer(env->callObjectMethod(this$, mids$[mid_normsProducer_9b0d4e4a], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace lucene49 {
          static PyObject *t_Lucene49NormsFormat_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Lucene49NormsFormat_instance_(PyTypeObject *type, PyObject *arg);
          static int t_Lucene49NormsFormat_init_(t_Lucene49NormsFormat *self, PyObject *args, PyObject *kwds);
          static PyObject *t_Lucene49NormsFormat_normsConsumer(t_Lucene49NormsFormat *self, PyObject *args);
          static PyObject *t_Lucene49NormsFormat_normsProducer(t_Lucene49NormsFormat *self, PyObject *args);

          static PyMethodDef t_Lucene49NormsFormat__methods_[] = {
            DECLARE_METHOD(t_Lucene49NormsFormat, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lucene49NormsFormat, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lucene49NormsFormat, normsConsumer, METH_VARARGS),
            DECLARE_METHOD(t_Lucene49NormsFormat, normsProducer, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(Lucene49NormsFormat, t_Lucene49NormsFormat, ::org::apache::lucene::codecs::NormsFormat, Lucene49NormsFormat, t_Lucene49NormsFormat_init_, 0, 0, 0, 0, 0);

          void t_Lucene49NormsFormat::install(PyObject *module)
          {
            installType(&PY_TYPE(Lucene49NormsFormat), module, "Lucene49NormsFormat", 0);
          }

          void t_Lucene49NormsFormat::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(Lucene49NormsFormat).tp_dict, "class_", make_descriptor(Lucene49NormsFormat::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(Lucene49NormsFormat).tp_dict, "wrapfn_", make_descriptor(t_Lucene49NormsFormat::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(Lucene49NormsFormat).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_Lucene49NormsFormat_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, Lucene49NormsFormat::initializeClass, 1)))
              return NULL;
            return t_Lucene49NormsFormat::wrap_Object(Lucene49NormsFormat(((t_Lucene49NormsFormat *) arg)->object.this$));
          }
          static PyObject *t_Lucene49NormsFormat_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, Lucene49NormsFormat::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_Lucene49NormsFormat_init_(t_Lucene49NormsFormat *self, PyObject *args, PyObject *kwds)
          {
            Lucene49NormsFormat object((jobject) NULL);

            INT_CALL(object = Lucene49NormsFormat());
            self->object = object;

            return 0;
          }

          static PyObject *t_Lucene49NormsFormat_normsConsumer(t_Lucene49NormsFormat *self, PyObject *args)
          {
            ::org::apache::lucene::index::SegmentWriteState a0((jobject) NULL);
            ::org::apache::lucene::codecs::DocValuesConsumer result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::index::SegmentWriteState::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.normsConsumer(a0));
              return ::org::apache::lucene::codecs::t_DocValuesConsumer::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(Lucene49NormsFormat), (PyObject *) self, "normsConsumer", args, 2);
          }

          static PyObject *t_Lucene49NormsFormat_normsProducer(t_Lucene49NormsFormat *self, PyObject *args)
          {
            ::org::apache::lucene::index::SegmentReadState a0((jobject) NULL);
            ::org::apache::lucene::codecs::DocValuesProducer result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::index::SegmentReadState::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.normsProducer(a0));
              return ::org::apache::lucene::codecs::t_DocValuesProducer::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(Lucene49NormsFormat), (PyObject *) self, "normsProducer", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/surround/parser/QueryParserConstants.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace surround {
          namespace parser {

            ::java::lang::Class *QueryParserConstants::class$ = NULL;
            jmethodID *QueryParserConstants::mids$ = NULL;
            bool QueryParserConstants::live$ = false;
            jint QueryParserConstants::AND = (jint) 0;
            jint QueryParserConstants::Boost = (jint) 0;
            jint QueryParserConstants::CARAT = (jint) 0;
            jint QueryParserConstants::COLON = (jint) 0;
            jint QueryParserConstants::COMMA = (jint) 0;
            jint QueryParserConstants::DEFAULT = (jint) 0;
            jint QueryParserConstants::EOF = (jint) 0;
            jint QueryParserConstants::LPAREN = (jint) 0;
            jint QueryParserConstants::N = (jint) 0;
            jint QueryParserConstants::NOT = (jint) 0;
            jint QueryParserConstants::NUMBER = (jint) 0;
            jint QueryParserConstants::OR = (jint) 0;
            jint QueryParserConstants::QUOTED = (jint) 0;
            jint QueryParserConstants::RPAREN = (jint) 0;
            jint QueryParserConstants::SUFFIXTERM = (jint) 0;
            jint QueryParserConstants::TERM = (jint) 0;
            jint QueryParserConstants::TRUNCQUOTED = (jint) 0;
            jint QueryParserConstants::TRUNCTERM = (jint) 0;
            jint QueryParserConstants::W = (jint) 0;
            jint QueryParserConstants::_DISTOP_NUM = (jint) 0;
            jint QueryParserConstants::_NUM_CHAR = (jint) 0;
            jint QueryParserConstants::_ONE_CHAR = (jint) 0;
            jint QueryParserConstants::_STAR = (jint) 0;
            jint QueryParserConstants::_TERM_CHAR = (jint) 0;
            jint QueryParserConstants::_WHITESPACE = (jint) 0;
            JArray< ::java::lang::String > *QueryParserConstants::tokenImage = NULL;

            jclass QueryParserConstants::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/surround/parser/QueryParserConstants");

                class$ = (::java::lang::Class *) new JObject(cls);
                cls = (jclass) class$->this$;

                AND = env->getStaticIntField(cls, "AND");
                Boost = env->getStaticIntField(cls, "Boost");
                CARAT = env->getStaticIntField(cls, "CARAT");
                COLON = env->getStaticIntField(cls, "COLON");
                COMMA = env->getStaticIntField(cls, "COMMA");
                DEFAULT = env->getStaticIntField(cls, "DEFAULT");
                EOF = env->getStaticIntField(cls, "EOF");
                LPAREN = env->getStaticIntField(cls, "LPAREN");
                N = env->getStaticIntField(cls, "N");
                NOT = env->getStaticIntField(cls, "NOT");
                NUMBER = env->getStaticIntField(cls, "NUMBER");
                OR = env->getStaticIntField(cls, "OR");
                QUOTED = env->getStaticIntField(cls, "QUOTED");
                RPAREN = env->getStaticIntField(cls, "RPAREN");
                SUFFIXTERM = env->getStaticIntField(cls, "SUFFIXTERM");
                TERM = env->getStaticIntField(cls, "TERM");
                TRUNCQUOTED = env->getStaticIntField(cls, "TRUNCQUOTED");
                TRUNCTERM = env->getStaticIntField(cls, "TRUNCTERM");
                W = env->getStaticIntField(cls, "W");
                _DISTOP_NUM = env->getStaticIntField(cls, "_DISTOP_NUM");
                _NUM_CHAR = env->getStaticIntField(cls, "_NUM_CHAR");
                _ONE_CHAR = env->getStaticIntField(cls, "_ONE_CHAR");
                _STAR = env->getStaticIntField(cls, "_STAR");
                _TERM_CHAR = env->getStaticIntField(cls, "_TERM_CHAR");
                _WHITESPACE = env->getStaticIntField(cls, "_WHITESPACE");
                tokenImage = new JArray< ::java::lang::String >(env->getStaticObjectField(cls, "tokenImage", "[Ljava/lang/String;"));
                live$ = true;
              }
              return (jclass) class$->this$;
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace surround {
          namespace parser {
            static PyObject *t_QueryParserConstants_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_QueryParserConstants_instance_(PyTypeObject *type, PyObject *arg);

            static PyMethodDef t_QueryParserConstants__methods_[] = {
              DECLARE_METHOD(t_QueryParserConstants, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_QueryParserConstants, instance_, METH_O | METH_CLASS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(QueryParserConstants, t_QueryParserConstants, ::java::lang::Object, QueryParserConstants, abstract_init, 0, 0, 0, 0, 0);

            void t_QueryParserConstants::install(PyObject *module)
            {
              installType(&PY_TYPE(QueryParserConstants), module, "QueryParserConstants", 0);
            }

            void t_QueryParserConstants::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(QueryParserConstants).tp_dict, "class_", make_descriptor(QueryParserConstants::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(QueryParserConstants).tp_dict, "wrapfn_", make_descriptor(t_QueryParserConstants::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(QueryParserConstants).tp_dict, "boxfn_", make_descriptor(boxObject));
              env->getClass(QueryParserConstants::initializeClass);
              PyDict_SetItemString(PY_TYPE(QueryParserConstants).tp_dict, "AND", make_descriptor(QueryParserConstants::AND));
              PyDict_SetItemString(PY_TYPE(QueryParserConstants).tp_dict, "Boost", make_descriptor(QueryParserConstants::Boost));
              PyDict_SetItemString(PY_TYPE(QueryParserConstants).tp_dict, "CARAT", make_descriptor(QueryParserConstants::CARAT));
              PyDict_SetItemString(PY_TYPE(QueryParserConstants).tp_dict, "COLON", make_descriptor(QueryParserConstants::COLON));
              PyDict_SetItemString(PY_TYPE(QueryParserConstants).tp_dict, "COMMA", make_descriptor(QueryParserConstants::COMMA));
              PyDict_SetItemString(PY_TYPE(QueryParserConstants).tp_dict, "DEFAULT", make_descriptor(QueryParserConstants::DEFAULT));
              PyDict_SetItemString(PY_TYPE(QueryParserConstants).tp_dict, "EOF", make_descriptor(QueryParserConstants::EOF));
              PyDict_SetItemString(PY_TYPE(QueryParserConstants).tp_dict, "LPAREN", make_descriptor(QueryParserConstants::LPAREN));
              PyDict_SetItemString(PY_TYPE(QueryParserConstants).tp_dict, "N", make_descriptor(QueryParserConstants::N));
              PyDict_SetItemString(PY_TYPE(QueryParserConstants).tp_dict, "NOT", make_descriptor(QueryParserConstants::NOT));
              PyDict_SetItemString(PY_TYPE(QueryParserConstants).tp_dict, "NUMBER", make_descriptor(QueryParserConstants::NUMBER));
              PyDict_SetItemString(PY_TYPE(QueryParserConstants).tp_dict, "OR", make_descriptor(QueryParserConstants::OR));
              PyDict_SetItemString(PY_TYPE(QueryParserConstants).tp_dict, "QUOTED", make_descriptor(QueryParserConstants::QUOTED));
              PyDict_SetItemString(PY_TYPE(QueryParserConstants).tp_dict, "RPAREN", make_descriptor(QueryParserConstants::RPAREN));
              PyDict_SetItemString(PY_TYPE(QueryParserConstants).tp_dict, "SUFFIXTERM", make_descriptor(QueryParserConstants::SUFFIXTERM));
              PyDict_SetItemString(PY_TYPE(QueryParserConstants).tp_dict, "TERM", make_descriptor(QueryParserConstants::TERM));
              PyDict_SetItemString(PY_TYPE(QueryParserConstants).tp_dict, "TRUNCQUOTED", make_descriptor(QueryParserConstants::TRUNCQUOTED));
              PyDict_SetItemString(PY_TYPE(QueryParserConstants).tp_dict, "TRUNCTERM", make_descriptor(QueryParserConstants::TRUNCTERM));
              PyDict_SetItemString(PY_TYPE(QueryParserConstants).tp_dict, "W", make_descriptor(QueryParserConstants::W));
              PyDict_SetItemString(PY_TYPE(QueryParserConstants).tp_dict, "_DISTOP_NUM", make_descriptor(QueryParserConstants::_DISTOP_NUM));
              PyDict_SetItemString(PY_TYPE(QueryParserConstants).tp_dict, "_NUM_CHAR", make_descriptor(QueryParserConstants::_NUM_CHAR));
              PyDict_SetItemString(PY_TYPE(QueryParserConstants).tp_dict, "_ONE_CHAR", make_descriptor(QueryParserConstants::_ONE_CHAR));
              PyDict_SetItemString(PY_TYPE(QueryParserConstants).tp_dict, "_STAR", make_descriptor(QueryParserConstants::_STAR));
              PyDict_SetItemString(PY_TYPE(QueryParserConstants).tp_dict, "_TERM_CHAR", make_descriptor(QueryParserConstants::_TERM_CHAR));
              PyDict_SetItemString(PY_TYPE(QueryParserConstants).tp_dict, "_WHITESPACE", make_descriptor(QueryParserConstants::_WHITESPACE));
              PyDict_SetItemString(PY_TYPE(QueryParserConstants).tp_dict, "tokenImage", make_descriptor(JArray<jstring>(QueryParserConstants::tokenImage->this$).wrap()));
            }

            static PyObject *t_QueryParserConstants_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, QueryParserConstants::initializeClass, 1)))
                return NULL;
              return t_QueryParserConstants::wrap_Object(QueryParserConstants(((t_QueryParserConstants *) arg)->object.this$));
            }
            static PyObject *t_QueryParserConstants_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, QueryParserConstants::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/core/builders/QueryBuilder.h"
#include "org/apache/lucene/queryparser/flexible/core/QueryNodeException.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/QueryNode.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace builders {

              ::java::lang::Class *QueryBuilder::class$ = NULL;
              jmethodID *QueryBuilder::mids$ = NULL;
              bool QueryBuilder::live$ = false;

              jclass QueryBuilder::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/core/builders/QueryBuilder");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_build_30efaf9c] = env->getMethodID(cls, "build", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;)Ljava/lang/Object;");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              ::java::lang::Object QueryBuilder::build(const ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode & a0) const
              {
                return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_build_30efaf9c], a0.this$));
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace builders {
              static PyObject *t_QueryBuilder_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_QueryBuilder_instance_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_QueryBuilder_build(t_QueryBuilder *self, PyObject *arg);

              static PyMethodDef t_QueryBuilder__methods_[] = {
                DECLARE_METHOD(t_QueryBuilder, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_QueryBuilder, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_QueryBuilder, build, METH_O),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(QueryBuilder, t_QueryBuilder, ::java::lang::Object, QueryBuilder, abstract_init, 0, 0, 0, 0, 0);

              void t_QueryBuilder::install(PyObject *module)
              {
                installType(&PY_TYPE(QueryBuilder), module, "QueryBuilder", 0);
              }

              void t_QueryBuilder::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(QueryBuilder).tp_dict, "class_", make_descriptor(QueryBuilder::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(QueryBuilder).tp_dict, "wrapfn_", make_descriptor(t_QueryBuilder::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(QueryBuilder).tp_dict, "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_QueryBuilder_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, QueryBuilder::initializeClass, 1)))
                  return NULL;
                return t_QueryBuilder::wrap_Object(QueryBuilder(((t_QueryBuilder *) arg)->object.this$));
              }
              static PyObject *t_QueryBuilder_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, QueryBuilder::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static PyObject *t_QueryBuilder_build(t_QueryBuilder *self, PyObject *arg)
              {
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode a0((jobject) NULL);
                ::java::lang::Object result((jobject) NULL);

                if (!parseArg(arg, "k", ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode::initializeClass, &a0))
                {
                  OBJ_CALL(result = self->object.build(a0));
                  return ::java::lang::t_Object::wrap_Object(result);
                }

                PyErr_SetArgsError((PyObject *) self, "build", arg);
                return NULL;
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/join/ScoreMode.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace join {

          ::java::lang::Class *ScoreMode::class$ = NULL;
          jmethodID *ScoreMode::mids$ = NULL;
          bool ScoreMode::live$ = false;
          ScoreMode *ScoreMode::Avg = NULL;
          ScoreMode *ScoreMode::Max = NULL;
          ScoreMode *ScoreMode::None = NULL;
          ScoreMode *ScoreMode::Total = NULL;

          jclass ScoreMode::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/join/ScoreMode");

              mids$ = new jmethodID[max_mid];
              mids$[mid_valueOf_0d6e5195] = env->getStaticMethodID(cls, "valueOf", "(Ljava/lang/String;)Lorg/apache/lucene/search/join/ScoreMode;");
              mids$[mid_values_dbd87c7b] = env->getStaticMethodID(cls, "values", "()[Lorg/apache/lucene/search/join/ScoreMode;");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              Avg = new ScoreMode(env->getStaticObjectField(cls, "Avg", "Lorg/apache/lucene/search/join/ScoreMode;"));
              Max = new ScoreMode(env->getStaticObjectField(cls, "Max", "Lorg/apache/lucene/search/join/ScoreMode;"));
              None = new ScoreMode(env->getStaticObjectField(cls, "None", "Lorg/apache/lucene/search/join/ScoreMode;"));
              Total = new ScoreMode(env->getStaticObjectField(cls, "Total", "Lorg/apache/lucene/search/join/ScoreMode;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ScoreMode ScoreMode::valueOf(const ::java::lang::String & a0)
          {
            jclass cls = env->getClass(initializeClass);
            return ScoreMode(env->callStaticObjectMethod(cls, mids$[mid_valueOf_0d6e5195], a0.this$));
          }

          JArray< ScoreMode > ScoreMode::values()
          {
            jclass cls = env->getClass(initializeClass);
            return JArray< ScoreMode >(env->callStaticObjectMethod(cls, mids$[mid_values_dbd87c7b]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace join {
          static PyObject *t_ScoreMode_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_ScoreMode_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_ScoreMode_of_(t_ScoreMode *self, PyObject *args);
          static PyObject *t_ScoreMode_valueOf(PyTypeObject *type, PyObject *args);
          static PyObject *t_ScoreMode_values(PyTypeObject *type);
          static PyObject *t_ScoreMode_get__parameters_(t_ScoreMode *self, void *data);
          static PyGetSetDef t_ScoreMode__fields_[] = {
            DECLARE_GET_FIELD(t_ScoreMode, parameters_),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_ScoreMode__methods_[] = {
            DECLARE_METHOD(t_ScoreMode, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ScoreMode, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ScoreMode, of_, METH_VARARGS),
            DECLARE_METHOD(t_ScoreMode, valueOf, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_ScoreMode, values, METH_NOARGS | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(ScoreMode, t_ScoreMode, ::java::lang::Enum, ScoreMode, abstract_init, 0, 0, t_ScoreMode__fields_, 0, 0);
          PyObject *t_ScoreMode::wrap_Object(const ScoreMode& object, PyTypeObject *p0)
          {
            PyObject *obj = t_ScoreMode::wrap_Object(object);
            if (obj != NULL && obj != Py_None)
            {
              t_ScoreMode *self = (t_ScoreMode *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          PyObject *t_ScoreMode::wrap_jobject(const jobject& object, PyTypeObject *p0)
          {
            PyObject *obj = t_ScoreMode::wrap_jobject(object);
            if (obj != NULL && obj != Py_None)
            {
              t_ScoreMode *self = (t_ScoreMode *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          void t_ScoreMode::install(PyObject *module)
          {
            installType(&PY_TYPE(ScoreMode), module, "ScoreMode", 0);
          }

          void t_ScoreMode::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(ScoreMode).tp_dict, "class_", make_descriptor(ScoreMode::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(ScoreMode).tp_dict, "wrapfn_", make_descriptor(t_ScoreMode::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(ScoreMode).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(ScoreMode::initializeClass);
            PyDict_SetItemString(PY_TYPE(ScoreMode).tp_dict, "Avg", make_descriptor(t_ScoreMode::wrap_Object(*ScoreMode::Avg)));
            PyDict_SetItemString(PY_TYPE(ScoreMode).tp_dict, "Max", make_descriptor(t_ScoreMode::wrap_Object(*ScoreMode::Max)));
            PyDict_SetItemString(PY_TYPE(ScoreMode).tp_dict, "None", make_descriptor(t_ScoreMode::wrap_Object(*ScoreMode::None)));
            PyDict_SetItemString(PY_TYPE(ScoreMode).tp_dict, "Total", make_descriptor(t_ScoreMode::wrap_Object(*ScoreMode::Total)));
          }

          static PyObject *t_ScoreMode_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, ScoreMode::initializeClass, 1)))
              return NULL;
            return t_ScoreMode::wrap_Object(ScoreMode(((t_ScoreMode *) arg)->object.this$));
          }
          static PyObject *t_ScoreMode_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, ScoreMode::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_ScoreMode_of_(t_ScoreMode *self, PyObject *args)
          {
            if (!parseArg(args, "T", 1, &(self->parameters)))
              Py_RETURN_SELF;
            return PyErr_SetArgsError((PyObject *) self, "of_", args);
          }

          static PyObject *t_ScoreMode_valueOf(PyTypeObject *type, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            ScoreMode result((jobject) NULL);

            if (!parseArgs(args, "s", &a0))
            {
              OBJ_CALL(result = ::org::apache::lucene::search::join::ScoreMode::valueOf(a0));
              return t_ScoreMode::wrap_Object(result);
            }

            return callSuper(type, "valueOf", args, 2);
          }

          static PyObject *t_ScoreMode_values(PyTypeObject *type)
          {
            JArray< ScoreMode > result((jobject) NULL);
            OBJ_CALL(result = ::org::apache::lucene::search::join::ScoreMode::values());
            return JArray<jobject>(result.this$).wrap(t_ScoreMode::wrap_jobject);
          }
          static PyObject *t_ScoreMode_get__parameters_(t_ScoreMode *self, void *data)
          {
            return typeParameters(self->parameters, sizeof(self->parameters));
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/spans/TermSpans.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/index/Term.h"
#include "java/lang/String.h"
#include "org/apache/lucene/index/DocsAndPositionsEnum.h"
#include "java/util/Collection.h"
#include "java/io/IOException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace spans {

          ::java::lang::Class *TermSpans::class$ = NULL;
          jmethodID *TermSpans::mids$ = NULL;
          bool TermSpans::live$ = false;
          TermSpans *TermSpans::EMPTY_TERM_SPANS = NULL;

          jclass TermSpans::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/spans/TermSpans");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_33ebef71] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/DocsAndPositionsEnum;Lorg/apache/lucene/index/Term;)V");
              mids$[mid_cost_54c6a17a] = env->getMethodID(cls, "cost", "()J");
              mids$[mid_doc_54c6a179] = env->getMethodID(cls, "doc", "()I");
              mids$[mid_end_54c6a179] = env->getMethodID(cls, "end", "()I");
              mids$[mid_getPayload_2d2d7de4] = env->getMethodID(cls, "getPayload", "()Ljava/util/Collection;");
              mids$[mid_getPostings_548e5d87] = env->getMethodID(cls, "getPostings", "()Lorg/apache/lucene/index/DocsAndPositionsEnum;");
              mids$[mid_isPayloadAvailable_54c6a16a] = env->getMethodID(cls, "isPayloadAvailable", "()Z");
              mids$[mid_next_54c6a16a] = env->getMethodID(cls, "next", "()Z");
              mids$[mid_skipTo_39c7bd30] = env->getMethodID(cls, "skipTo", "(I)Z");
              mids$[mid_start_54c6a179] = env->getMethodID(cls, "start", "()I");
              mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              EMPTY_TERM_SPANS = new TermSpans(env->getStaticObjectField(cls, "EMPTY_TERM_SPANS", "Lorg/apache/lucene/search/spans/TermSpans;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          TermSpans::TermSpans(const ::org::apache::lucene::index::DocsAndPositionsEnum & a0, const ::org::apache::lucene::index::Term & a1) : ::org::apache::lucene::search::spans::Spans(env->newObject(initializeClass, &mids$, mid_init$_33ebef71, a0.this$, a1.this$)) {}

          jlong TermSpans::cost() const
          {
            return env->callLongMethod(this$, mids$[mid_cost_54c6a17a]);
          }

          jint TermSpans::doc() const
          {
            return env->callIntMethod(this$, mids$[mid_doc_54c6a179]);
          }

          jint TermSpans::end() const
          {
            return env->callIntMethod(this$, mids$[mid_end_54c6a179]);
          }

          ::java::util::Collection TermSpans::getPayload() const
          {
            return ::java::util::Collection(env->callObjectMethod(this$, mids$[mid_getPayload_2d2d7de4]));
          }

          ::org::apache::lucene::index::DocsAndPositionsEnum TermSpans::getPostings() const
          {
            return ::org::apache::lucene::index::DocsAndPositionsEnum(env->callObjectMethod(this$, mids$[mid_getPostings_548e5d87]));
          }

          jboolean TermSpans::isPayloadAvailable() const
          {
            return env->callBooleanMethod(this$, mids$[mid_isPayloadAvailable_54c6a16a]);
          }

          jboolean TermSpans::next() const
          {
            return env->callBooleanMethod(this$, mids$[mid_next_54c6a16a]);
          }

          jboolean TermSpans::skipTo(jint a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_skipTo_39c7bd30], a0);
          }

          jint TermSpans::start() const
          {
            return env->callIntMethod(this$, mids$[mid_start_54c6a179]);
          }

          ::java::lang::String TermSpans::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace spans {
          static PyObject *t_TermSpans_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_TermSpans_instance_(PyTypeObject *type, PyObject *arg);
          static int t_TermSpans_init_(t_TermSpans *self, PyObject *args, PyObject *kwds);
          static PyObject *t_TermSpans_cost(t_TermSpans *self, PyObject *args);
          static PyObject *t_TermSpans_doc(t_TermSpans *self, PyObject *args);
          static PyObject *t_TermSpans_end(t_TermSpans *self, PyObject *args);
          static PyObject *t_TermSpans_getPayload(t_TermSpans *self, PyObject *args);
          static PyObject *t_TermSpans_getPostings(t_TermSpans *self);
          static PyObject *t_TermSpans_isPayloadAvailable(t_TermSpans *self, PyObject *args);
          static PyObject *t_TermSpans_next(t_TermSpans *self, PyObject *args);
          static PyObject *t_TermSpans_skipTo(t_TermSpans *self, PyObject *args);
          static PyObject *t_TermSpans_start(t_TermSpans *self, PyObject *args);
          static PyObject *t_TermSpans_toString(t_TermSpans *self, PyObject *args);
          static PyObject *t_TermSpans_get__payload(t_TermSpans *self, void *data);
          static PyObject *t_TermSpans_get__payloadAvailable(t_TermSpans *self, void *data);
          static PyObject *t_TermSpans_get__postings(t_TermSpans *self, void *data);
          static PyGetSetDef t_TermSpans__fields_[] = {
            DECLARE_GET_FIELD(t_TermSpans, payload),
            DECLARE_GET_FIELD(t_TermSpans, payloadAvailable),
            DECLARE_GET_FIELD(t_TermSpans, postings),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_TermSpans__methods_[] = {
            DECLARE_METHOD(t_TermSpans, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_TermSpans, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_TermSpans, cost, METH_VARARGS),
            DECLARE_METHOD(t_TermSpans, doc, METH_VARARGS),
            DECLARE_METHOD(t_TermSpans, end, METH_VARARGS),
            DECLARE_METHOD(t_TermSpans, getPayload, METH_VARARGS),
            DECLARE_METHOD(t_TermSpans, getPostings, METH_NOARGS),
            DECLARE_METHOD(t_TermSpans, isPayloadAvailable, METH_VARARGS),
            DECLARE_METHOD(t_TermSpans, next, METH_VARARGS),
            DECLARE_METHOD(t_TermSpans, skipTo, METH_VARARGS),
            DECLARE_METHOD(t_TermSpans, start, METH_VARARGS),
            DECLARE_METHOD(t_TermSpans, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(TermSpans, t_TermSpans, ::org::apache::lucene::search::spans::Spans, TermSpans, t_TermSpans_init_, 0, 0, t_TermSpans__fields_, 0, 0);

          void t_TermSpans::install(PyObject *module)
          {
            installType(&PY_TYPE(TermSpans), module, "TermSpans", 0);
          }

          void t_TermSpans::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(TermSpans).tp_dict, "class_", make_descriptor(TermSpans::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(TermSpans).tp_dict, "wrapfn_", make_descriptor(t_TermSpans::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(TermSpans).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(TermSpans::initializeClass);
            PyDict_SetItemString(PY_TYPE(TermSpans).tp_dict, "EMPTY_TERM_SPANS", make_descriptor(t_TermSpans::wrap_Object(*TermSpans::EMPTY_TERM_SPANS)));
          }

          static PyObject *t_TermSpans_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, TermSpans::initializeClass, 1)))
              return NULL;
            return t_TermSpans::wrap_Object(TermSpans(((t_TermSpans *) arg)->object.this$));
          }
          static PyObject *t_TermSpans_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, TermSpans::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_TermSpans_init_(t_TermSpans *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::index::DocsAndPositionsEnum a0((jobject) NULL);
            ::org::apache::lucene::index::Term a1((jobject) NULL);
            TermSpans object((jobject) NULL);

            if (!parseArgs(args, "kk", ::org::apache::lucene::index::DocsAndPositionsEnum::initializeClass, ::org::apache::lucene::index::Term::initializeClass, &a0, &a1))
            {
              INT_CALL(object = TermSpans(a0, a1));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_TermSpans_cost(t_TermSpans *self, PyObject *args)
          {
            jlong result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.cost());
              return PyLong_FromLongLong((PY_LONG_LONG) result);
            }

            return callSuper(&PY_TYPE(TermSpans), (PyObject *) self, "cost", args, 2);
          }

          static PyObject *t_TermSpans_doc(t_TermSpans *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.doc());
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(TermSpans), (PyObject *) self, "doc", args, 2);
          }

          static PyObject *t_TermSpans_end(t_TermSpans *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.end());
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(TermSpans), (PyObject *) self, "end", args, 2);
          }

          static PyObject *t_TermSpans_getPayload(t_TermSpans *self, PyObject *args)
          {
            ::java::util::Collection result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.getPayload());
              return ::java::util::t_Collection::wrap_Object(result, &::java::lang::PY_TYPE(Object));
            }

            return callSuper(&PY_TYPE(TermSpans), (PyObject *) self, "getPayload", args, 2);
          }

          static PyObject *t_TermSpans_getPostings(t_TermSpans *self)
          {
            ::org::apache::lucene::index::DocsAndPositionsEnum result((jobject) NULL);
            OBJ_CALL(result = self->object.getPostings());
            return ::org::apache::lucene::index::t_DocsAndPositionsEnum::wrap_Object(result);
          }

          static PyObject *t_TermSpans_isPayloadAvailable(t_TermSpans *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.isPayloadAvailable());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(TermSpans), (PyObject *) self, "isPayloadAvailable", args, 2);
          }

          static PyObject *t_TermSpans_next(t_TermSpans *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.next());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(TermSpans), (PyObject *) self, "next", args, 2);
          }

          static PyObject *t_TermSpans_skipTo(t_TermSpans *self, PyObject *args)
          {
            jint a0;
            jboolean result;

            if (!parseArgs(args, "I", &a0))
            {
              OBJ_CALL(result = self->object.skipTo(a0));
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(TermSpans), (PyObject *) self, "skipTo", args, 2);
          }

          static PyObject *t_TermSpans_start(t_TermSpans *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.start());
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(TermSpans), (PyObject *) self, "start", args, 2);
          }

          static PyObject *t_TermSpans_toString(t_TermSpans *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(&PY_TYPE(TermSpans), (PyObject *) self, "toString", args, 2);
          }

          static PyObject *t_TermSpans_get__payload(t_TermSpans *self, void *data)
          {
            ::java::util::Collection value((jobject) NULL);
            OBJ_CALL(value = self->object.getPayload());
            return ::java::util::t_Collection::wrap_Object(value);
          }

          static PyObject *t_TermSpans_get__payloadAvailable(t_TermSpans *self, void *data)
          {
            jboolean value;
            OBJ_CALL(value = self->object.isPayloadAvailable());
            Py_RETURN_BOOL(value);
          }

          static PyObject *t_TermSpans_get__postings(t_TermSpans *self, void *data)
          {
            ::org::apache::lucene::index::DocsAndPositionsEnum value((jobject) NULL);
            OBJ_CALL(value = self->object.getPostings());
            return ::org::apache::lucene::index::t_DocsAndPositionsEnum::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/packed/MonotonicBlockPackedReader.h"
#include "org/apache/lucene/util/Accountable.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/store/IndexInput.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace packed {

          ::java::lang::Class *MonotonicBlockPackedReader::class$ = NULL;
          jmethodID *MonotonicBlockPackedReader::mids$ = NULL;
          bool MonotonicBlockPackedReader::live$ = false;

          jclass MonotonicBlockPackedReader::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/util/packed/MonotonicBlockPackedReader");

              mids$ = new jmethodID[max_mid];
              mids$[mid_get_0ee6df33] = env->getMethodID(cls, "get", "(J)J");
              mids$[mid_of_796f5dbd] = env->getStaticMethodID(cls, "of", "(Lorg/apache/lucene/store/IndexInput;IIJZ)Lorg/apache/lucene/util/packed/MonotonicBlockPackedReader;");
              mids$[mid_ramBytesUsed_54c6a17a] = env->getMethodID(cls, "ramBytesUsed", "()J");
              mids$[mid_size_54c6a17a] = env->getMethodID(cls, "size", "()J");
              mids$[mid_decodeDelta_0ee6df33] = env->getMethodID(cls, "decodeDelta", "(J)J");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          jlong MonotonicBlockPackedReader::get(jlong a0) const
          {
            return env->callLongMethod(this$, mids$[mid_get_0ee6df33], a0);
          }

          MonotonicBlockPackedReader MonotonicBlockPackedReader::of(const ::org::apache::lucene::store::IndexInput & a0, jint a1, jint a2, jlong a3, jboolean a4)
          {
            jclass cls = env->getClass(initializeClass);
            return MonotonicBlockPackedReader(env->callStaticObjectMethod(cls, mids$[mid_of_796f5dbd], a0.this$, a1, a2, a3, a4));
          }

          jlong MonotonicBlockPackedReader::ramBytesUsed() const
          {
            return env->callLongMethod(this$, mids$[mid_ramBytesUsed_54c6a17a]);
          }

          jlong MonotonicBlockPackedReader::size() const
          {
            return env->callLongMethod(this$, mids$[mid_size_54c6a17a]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace packed {
          static PyObject *t_MonotonicBlockPackedReader_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_MonotonicBlockPackedReader_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_MonotonicBlockPackedReader_get(t_MonotonicBlockPackedReader *self, PyObject *args);
          static PyObject *t_MonotonicBlockPackedReader_of(PyTypeObject *type, PyObject *args);
          static PyObject *t_MonotonicBlockPackedReader_ramBytesUsed(t_MonotonicBlockPackedReader *self);
          static PyObject *t_MonotonicBlockPackedReader_size(t_MonotonicBlockPackedReader *self);

          static PyMethodDef t_MonotonicBlockPackedReader__methods_[] = {
            DECLARE_METHOD(t_MonotonicBlockPackedReader, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_MonotonicBlockPackedReader, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_MonotonicBlockPackedReader, get, METH_VARARGS),
            DECLARE_METHOD(t_MonotonicBlockPackedReader, of, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_MonotonicBlockPackedReader, ramBytesUsed, METH_NOARGS),
            DECLARE_METHOD(t_MonotonicBlockPackedReader, size, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(MonotonicBlockPackedReader, t_MonotonicBlockPackedReader, ::org::apache::lucene::util::LongValues, MonotonicBlockPackedReader, abstract_init, 0, 0, 0, 0, 0);

          void t_MonotonicBlockPackedReader::install(PyObject *module)
          {
            installType(&PY_TYPE(MonotonicBlockPackedReader), module, "MonotonicBlockPackedReader", 0);
          }

          void t_MonotonicBlockPackedReader::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(MonotonicBlockPackedReader).tp_dict, "class_", make_descriptor(MonotonicBlockPackedReader::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(MonotonicBlockPackedReader).tp_dict, "wrapfn_", make_descriptor(t_MonotonicBlockPackedReader::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(MonotonicBlockPackedReader).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_MonotonicBlockPackedReader_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, MonotonicBlockPackedReader::initializeClass, 1)))
              return NULL;
            return t_MonotonicBlockPackedReader::wrap_Object(MonotonicBlockPackedReader(((t_MonotonicBlockPackedReader *) arg)->object.this$));
          }
          static PyObject *t_MonotonicBlockPackedReader_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, MonotonicBlockPackedReader::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_MonotonicBlockPackedReader_get(t_MonotonicBlockPackedReader *self, PyObject *args)
          {
            jlong a0;
            jlong result;

            if (!parseArgs(args, "J", &a0))
            {
              OBJ_CALL(result = self->object.get(a0));
              return PyLong_FromLongLong((PY_LONG_LONG) result);
            }

            return callSuper(&PY_TYPE(MonotonicBlockPackedReader), (PyObject *) self, "get", args, 2);
          }

          static PyObject *t_MonotonicBlockPackedReader_of(PyTypeObject *type, PyObject *args)
          {
            ::org::apache::lucene::store::IndexInput a0((jobject) NULL);
            jint a1;
            jint a2;
            jlong a3;
            jboolean a4;
            MonotonicBlockPackedReader result((jobject) NULL);

            if (!parseArgs(args, "kIIJZ", ::org::apache::lucene::store::IndexInput::initializeClass, &a0, &a1, &a2, &a3, &a4))
            {
              OBJ_CALL(result = ::org::apache::lucene::util::packed::MonotonicBlockPackedReader::of(a0, a1, a2, a3, a4));
              return t_MonotonicBlockPackedReader::wrap_Object(result);
            }

            PyErr_SetArgsError(type, "of", args);
            return NULL;
          }

          static PyObject *t_MonotonicBlockPackedReader_ramBytesUsed(t_MonotonicBlockPackedReader *self)
          {
            jlong result;
            OBJ_CALL(result = self->object.ramBytesUsed());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          static PyObject *t_MonotonicBlockPackedReader_size(t_MonotonicBlockPackedReader *self)
          {
            jlong result;
            OBJ_CALL(result = self->object.size());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/MultiTermQuery$TopTermsScoringBooleanQueryRewrite.h"
#include "org/apache/lucene/search/BooleanQuery.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *MultiTermQuery$TopTermsScoringBooleanQueryRewrite::class$ = NULL;
        jmethodID *MultiTermQuery$TopTermsScoringBooleanQueryRewrite::mids$ = NULL;
        bool MultiTermQuery$TopTermsScoringBooleanQueryRewrite::live$ = false;

        jclass MultiTermQuery$TopTermsScoringBooleanQueryRewrite::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/MultiTermQuery$TopTermsScoringBooleanQueryRewrite");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_39c7bd3c] = env->getMethodID(cls, "<init>", "(I)V");
            mids$[mid_getMaxSize_54c6a179] = env->getMethodID(cls, "getMaxSize", "()I");
            mids$[mid_addClause_82a56efb] = env->getMethodID(cls, "addClause", "(Lorg/apache/lucene/search/BooleanQuery;Lorg/apache/lucene/index/Term;IFLorg/apache/lucene/index/TermContext;)V");
            mids$[mid_getTopLevelQuery_6f9339e7] = env->getMethodID(cls, "getTopLevelQuery", "()Lorg/apache/lucene/search/BooleanQuery;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        MultiTermQuery$TopTermsScoringBooleanQueryRewrite::MultiTermQuery$TopTermsScoringBooleanQueryRewrite(jint a0) : ::org::apache::lucene::search::TopTermsRewrite(env->newObject(initializeClass, &mids$, mid_init$_39c7bd3c, a0)) {}
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_MultiTermQuery$TopTermsScoringBooleanQueryRewrite_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_MultiTermQuery$TopTermsScoringBooleanQueryRewrite_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_MultiTermQuery$TopTermsScoringBooleanQueryRewrite_of_(t_MultiTermQuery$TopTermsScoringBooleanQueryRewrite *self, PyObject *args);
        static int t_MultiTermQuery$TopTermsScoringBooleanQueryRewrite_init_(t_MultiTermQuery$TopTermsScoringBooleanQueryRewrite *self, PyObject *args, PyObject *kwds);
        static PyObject *t_MultiTermQuery$TopTermsScoringBooleanQueryRewrite_get__parameters_(t_MultiTermQuery$TopTermsScoringBooleanQueryRewrite *self, void *data);
        static PyGetSetDef t_MultiTermQuery$TopTermsScoringBooleanQueryRewrite__fields_[] = {
          DECLARE_GET_FIELD(t_MultiTermQuery$TopTermsScoringBooleanQueryRewrite, parameters_),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_MultiTermQuery$TopTermsScoringBooleanQueryRewrite__methods_[] = {
          DECLARE_METHOD(t_MultiTermQuery$TopTermsScoringBooleanQueryRewrite, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MultiTermQuery$TopTermsScoringBooleanQueryRewrite, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MultiTermQuery$TopTermsScoringBooleanQueryRewrite, of_, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(MultiTermQuery$TopTermsScoringBooleanQueryRewrite, t_MultiTermQuery$TopTermsScoringBooleanQueryRewrite, ::org::apache::lucene::search::TopTermsRewrite, MultiTermQuery$TopTermsScoringBooleanQueryRewrite, t_MultiTermQuery$TopTermsScoringBooleanQueryRewrite_init_, 0, 0, t_MultiTermQuery$TopTermsScoringBooleanQueryRewrite__fields_, 0, 0);
        PyObject *t_MultiTermQuery$TopTermsScoringBooleanQueryRewrite::wrap_Object(const MultiTermQuery$TopTermsScoringBooleanQueryRewrite& object, PyTypeObject *p0)
        {
          PyObject *obj = t_MultiTermQuery$TopTermsScoringBooleanQueryRewrite::wrap_Object(object);
          if (obj != NULL && obj != Py_None)
          {
            t_MultiTermQuery$TopTermsScoringBooleanQueryRewrite *self = (t_MultiTermQuery$TopTermsScoringBooleanQueryRewrite *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        PyObject *t_MultiTermQuery$TopTermsScoringBooleanQueryRewrite::wrap_jobject(const jobject& object, PyTypeObject *p0)
        {
          PyObject *obj = t_MultiTermQuery$TopTermsScoringBooleanQueryRewrite::wrap_jobject(object);
          if (obj != NULL && obj != Py_None)
          {
            t_MultiTermQuery$TopTermsScoringBooleanQueryRewrite *self = (t_MultiTermQuery$TopTermsScoringBooleanQueryRewrite *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        void t_MultiTermQuery$TopTermsScoringBooleanQueryRewrite::install(PyObject *module)
        {
          installType(&PY_TYPE(MultiTermQuery$TopTermsScoringBooleanQueryRewrite), module, "MultiTermQuery$TopTermsScoringBooleanQueryRewrite", 0);
        }

        void t_MultiTermQuery$TopTermsScoringBooleanQueryRewrite::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(MultiTermQuery$TopTermsScoringBooleanQueryRewrite).tp_dict, "class_", make_descriptor(MultiTermQuery$TopTermsScoringBooleanQueryRewrite::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(MultiTermQuery$TopTermsScoringBooleanQueryRewrite).tp_dict, "wrapfn_", make_descriptor(t_MultiTermQuery$TopTermsScoringBooleanQueryRewrite::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(MultiTermQuery$TopTermsScoringBooleanQueryRewrite).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_MultiTermQuery$TopTermsScoringBooleanQueryRewrite_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, MultiTermQuery$TopTermsScoringBooleanQueryRewrite::initializeClass, 1)))
            return NULL;
          return t_MultiTermQuery$TopTermsScoringBooleanQueryRewrite::wrap_Object(MultiTermQuery$TopTermsScoringBooleanQueryRewrite(((t_MultiTermQuery$TopTermsScoringBooleanQueryRewrite *) arg)->object.this$));
        }
        static PyObject *t_MultiTermQuery$TopTermsScoringBooleanQueryRewrite_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, MultiTermQuery$TopTermsScoringBooleanQueryRewrite::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_MultiTermQuery$TopTermsScoringBooleanQueryRewrite_of_(t_MultiTermQuery$TopTermsScoringBooleanQueryRewrite *self, PyObject *args)
        {
          if (!parseArg(args, "T", 1, &(self->parameters)))
            Py_RETURN_SELF;
          return PyErr_SetArgsError((PyObject *) self, "of_", args);
        }

        static int t_MultiTermQuery$TopTermsScoringBooleanQueryRewrite_init_(t_MultiTermQuery$TopTermsScoringBooleanQueryRewrite *self, PyObject *args, PyObject *kwds)
        {
          jint a0;
          MultiTermQuery$TopTermsScoringBooleanQueryRewrite object((jobject) NULL);

          if (!parseArgs(args, "I", &a0))
          {
            INT_CALL(object = MultiTermQuery$TopTermsScoringBooleanQueryRewrite(a0));
            self->object = object;
            self->parameters[0] = &::org::apache::lucene::search::PY_TYPE(BooleanQuery);
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }
        static PyObject *t_MultiTermQuery$TopTermsScoringBooleanQueryRewrite_get__parameters_(t_MultiTermQuery$TopTermsScoringBooleanQueryRewrite *self, void *data)
        {
          return typeParameters(self->parameters, sizeof(self->parameters));
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/standard/config/FuzzyConfig.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace config {

              ::java::lang::Class *FuzzyConfig::class$ = NULL;
              jmethodID *FuzzyConfig::mids$ = NULL;
              bool FuzzyConfig::live$ = false;

              jclass FuzzyConfig::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/standard/config/FuzzyConfig");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
                  mids$[mid_getMinSimilarity_54c6a176] = env->getMethodID(cls, "getMinSimilarity", "()F");
                  mids$[mid_getPrefixLength_54c6a179] = env->getMethodID(cls, "getPrefixLength", "()I");
                  mids$[mid_setMinSimilarity_06298cab] = env->getMethodID(cls, "setMinSimilarity", "(F)V");
                  mids$[mid_setPrefixLength_39c7bd3c] = env->getMethodID(cls, "setPrefixLength", "(I)V");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              FuzzyConfig::FuzzyConfig() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

              jfloat FuzzyConfig::getMinSimilarity() const
              {
                return env->callFloatMethod(this$, mids$[mid_getMinSimilarity_54c6a176]);
              }

              jint FuzzyConfig::getPrefixLength() const
              {
                return env->callIntMethod(this$, mids$[mid_getPrefixLength_54c6a179]);
              }

              void FuzzyConfig::setMinSimilarity(jfloat a0) const
              {
                env->callVoidMethod(this$, mids$[mid_setMinSimilarity_06298cab], a0);
              }

              void FuzzyConfig::setPrefixLength(jint a0) const
              {
                env->callVoidMethod(this$, mids$[mid_setPrefixLength_39c7bd3c], a0);
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace config {
              static PyObject *t_FuzzyConfig_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_FuzzyConfig_instance_(PyTypeObject *type, PyObject *arg);
              static int t_FuzzyConfig_init_(t_FuzzyConfig *self, PyObject *args, PyObject *kwds);
              static PyObject *t_FuzzyConfig_getMinSimilarity(t_FuzzyConfig *self);
              static PyObject *t_FuzzyConfig_getPrefixLength(t_FuzzyConfig *self);
              static PyObject *t_FuzzyConfig_setMinSimilarity(t_FuzzyConfig *self, PyObject *arg);
              static PyObject *t_FuzzyConfig_setPrefixLength(t_FuzzyConfig *self, PyObject *arg);
              static PyObject *t_FuzzyConfig_get__minSimilarity(t_FuzzyConfig *self, void *data);
              static int t_FuzzyConfig_set__minSimilarity(t_FuzzyConfig *self, PyObject *arg, void *data);
              static PyObject *t_FuzzyConfig_get__prefixLength(t_FuzzyConfig *self, void *data);
              static int t_FuzzyConfig_set__prefixLength(t_FuzzyConfig *self, PyObject *arg, void *data);
              static PyGetSetDef t_FuzzyConfig__fields_[] = {
                DECLARE_GETSET_FIELD(t_FuzzyConfig, minSimilarity),
                DECLARE_GETSET_FIELD(t_FuzzyConfig, prefixLength),
                { NULL, NULL, NULL, NULL, NULL }
              };

              static PyMethodDef t_FuzzyConfig__methods_[] = {
                DECLARE_METHOD(t_FuzzyConfig, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_FuzzyConfig, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_FuzzyConfig, getMinSimilarity, METH_NOARGS),
                DECLARE_METHOD(t_FuzzyConfig, getPrefixLength, METH_NOARGS),
                DECLARE_METHOD(t_FuzzyConfig, setMinSimilarity, METH_O),
                DECLARE_METHOD(t_FuzzyConfig, setPrefixLength, METH_O),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(FuzzyConfig, t_FuzzyConfig, ::java::lang::Object, FuzzyConfig, t_FuzzyConfig_init_, 0, 0, t_FuzzyConfig__fields_, 0, 0);

              void t_FuzzyConfig::install(PyObject *module)
              {
                installType(&PY_TYPE(FuzzyConfig), module, "FuzzyConfig", 0);
              }

              void t_FuzzyConfig::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(FuzzyConfig).tp_dict, "class_", make_descriptor(FuzzyConfig::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(FuzzyConfig).tp_dict, "wrapfn_", make_descriptor(t_FuzzyConfig::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(FuzzyConfig).tp_dict, "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_FuzzyConfig_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, FuzzyConfig::initializeClass, 1)))
                  return NULL;
                return t_FuzzyConfig::wrap_Object(FuzzyConfig(((t_FuzzyConfig *) arg)->object.this$));
              }
              static PyObject *t_FuzzyConfig_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, FuzzyConfig::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_FuzzyConfig_init_(t_FuzzyConfig *self, PyObject *args, PyObject *kwds)
              {
                FuzzyConfig object((jobject) NULL);

                INT_CALL(object = FuzzyConfig());
                self->object = object;

                return 0;
              }

              static PyObject *t_FuzzyConfig_getMinSimilarity(t_FuzzyConfig *self)
              {
                jfloat result;
                OBJ_CALL(result = self->object.getMinSimilarity());
                return PyFloat_FromDouble((double) result);
              }

              static PyObject *t_FuzzyConfig_getPrefixLength(t_FuzzyConfig *self)
              {
                jint result;
                OBJ_CALL(result = self->object.getPrefixLength());
                return PyInt_FromLong((long) result);
              }

              static PyObject *t_FuzzyConfig_setMinSimilarity(t_FuzzyConfig *self, PyObject *arg)
              {
                jfloat a0;

                if (!parseArg(arg, "F", &a0))
                {
                  OBJ_CALL(self->object.setMinSimilarity(a0));
                  Py_RETURN_NONE;
                }

                PyErr_SetArgsError((PyObject *) self, "setMinSimilarity", arg);
                return NULL;
              }

              static PyObject *t_FuzzyConfig_setPrefixLength(t_FuzzyConfig *self, PyObject *arg)
              {
                jint a0;

                if (!parseArg(arg, "I", &a0))
                {
                  OBJ_CALL(self->object.setPrefixLength(a0));
                  Py_RETURN_NONE;
                }

                PyErr_SetArgsError((PyObject *) self, "setPrefixLength", arg);
                return NULL;
              }

              static PyObject *t_FuzzyConfig_get__minSimilarity(t_FuzzyConfig *self, void *data)
              {
                jfloat value;
                OBJ_CALL(value = self->object.getMinSimilarity());
                return PyFloat_FromDouble((double) value);
              }
              static int t_FuzzyConfig_set__minSimilarity(t_FuzzyConfig *self, PyObject *arg, void *data)
              {
                {
                  jfloat value;
                  if (!parseArg(arg, "F", &value))
                  {
                    INT_CALL(self->object.setMinSimilarity(value));
                    return 0;
                  }
                }
                PyErr_SetArgsError((PyObject *) self, "minSimilarity", arg);
                return -1;
              }

              static PyObject *t_FuzzyConfig_get__prefixLength(t_FuzzyConfig *self, void *data)
              {
                jint value;
                OBJ_CALL(value = self->object.getPrefixLength());
                return PyInt_FromLong((long) value);
              }
              static int t_FuzzyConfig_set__prefixLength(t_FuzzyConfig *self, PyObject *arg, void *data)
              {
                {
                  jint value;
                  if (!parseArg(arg, "I", &value))
                  {
                    INT_CALL(self->object.setPrefixLength(value));
                    return 0;
                  }
                }
                PyErr_SetArgsError((PyObject *) self, "prefixLength", arg);
                return -1;
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/surround/query/SpanNearClauseFactory.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/queryparser/surround/query/BasicQueryFactory.h"
#include "java/lang/String.h"
#include "org/apache/lucene/search/spans/SpanQuery.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "org/apache/lucene/index/Term.h"
#include "org/apache/lucene/search/Query.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace surround {
          namespace query {

            ::java::lang::Class *SpanNearClauseFactory::class$ = NULL;
            jmethodID *SpanNearClauseFactory::mids$ = NULL;
            bool SpanNearClauseFactory::live$ = false;

            jclass SpanNearClauseFactory::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/surround/query/SpanNearClauseFactory");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_e15223d7] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/IndexReader;Ljava/lang/String;Lorg/apache/lucene/queryparser/surround/query/BasicQueryFactory;)V");
                mids$[mid_addSpanQuery_6e301113] = env->getMethodID(cls, "addSpanQuery", "(Lorg/apache/lucene/search/Query;)V");
                mids$[mid_addTermWeighted_286d05ee] = env->getMethodID(cls, "addTermWeighted", "(Lorg/apache/lucene/index/Term;F)V");
                mids$[mid_clear_54c6a166] = env->getMethodID(cls, "clear", "()V");
                mids$[mid_getBasicQueryFactory_d652c3af] = env->getMethodID(cls, "getBasicQueryFactory", "()Lorg/apache/lucene/queryparser/surround/query/BasicQueryFactory;");
                mids$[mid_getFieldName_14c7b5c5] = env->getMethodID(cls, "getFieldName", "()Ljava/lang/String;");
                mids$[mid_getIndexReader_94bbd010] = env->getMethodID(cls, "getIndexReader", "()Lorg/apache/lucene/index/IndexReader;");
                mids$[mid_makeSpanClause_d3aa0332] = env->getMethodID(cls, "makeSpanClause", "()Lorg/apache/lucene/search/spans/SpanQuery;");
                mids$[mid_size_54c6a179] = env->getMethodID(cls, "size", "()I");
                mids$[mid_addSpanQueryWeighted_3125e560] = env->getMethodID(cls, "addSpanQueryWeighted", "(Lorg/apache/lucene/search/spans/SpanQuery;F)V");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            SpanNearClauseFactory::SpanNearClauseFactory(const ::org::apache::lucene::index::IndexReader & a0, const ::java::lang::String & a1, const ::org::apache::lucene::queryparser::surround::query::BasicQueryFactory & a2) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_e15223d7, a0.this$, a1.this$, a2.this$)) {}

            void SpanNearClauseFactory::addSpanQuery(const ::org::apache::lucene::search::Query & a0) const
            {
              env->callVoidMethod(this$, mids$[mid_addSpanQuery_6e301113], a0.this$);
            }

            void SpanNearClauseFactory::addTermWeighted(const ::org::apache::lucene::index::Term & a0, jfloat a1) const
            {
              env->callVoidMethod(this$, mids$[mid_addTermWeighted_286d05ee], a0.this$, a1);
            }

            void SpanNearClauseFactory::clear() const
            {
              env->callVoidMethod(this$, mids$[mid_clear_54c6a166]);
            }

            ::org::apache::lucene::queryparser::surround::query::BasicQueryFactory SpanNearClauseFactory::getBasicQueryFactory() const
            {
              return ::org::apache::lucene::queryparser::surround::query::BasicQueryFactory(env->callObjectMethod(this$, mids$[mid_getBasicQueryFactory_d652c3af]));
            }

            ::java::lang::String SpanNearClauseFactory::getFieldName() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getFieldName_14c7b5c5]));
            }

            ::org::apache::lucene::index::IndexReader SpanNearClauseFactory::getIndexReader() const
            {
              return ::org::apache::lucene::index::IndexReader(env->callObjectMethod(this$, mids$[mid_getIndexReader_94bbd010]));
            }

            ::org::apache::lucene::search::spans::SpanQuery SpanNearClauseFactory::makeSpanClause() const
            {
              return ::org::apache::lucene::search::spans::SpanQuery(env->callObjectMethod(this$, mids$[mid_makeSpanClause_d3aa0332]));
            }

            jint SpanNearClauseFactory::size() const
            {
              return env->callIntMethod(this$, mids$[mid_size_54c6a179]);
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace surround {
          namespace query {
            static PyObject *t_SpanNearClauseFactory_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_SpanNearClauseFactory_instance_(PyTypeObject *type, PyObject *arg);
            static int t_SpanNearClauseFactory_init_(t_SpanNearClauseFactory *self, PyObject *args, PyObject *kwds);
            static PyObject *t_SpanNearClauseFactory_addSpanQuery(t_SpanNearClauseFactory *self, PyObject *arg);
            static PyObject *t_SpanNearClauseFactory_addTermWeighted(t_SpanNearClauseFactory *self, PyObject *args);
            static PyObject *t_SpanNearClauseFactory_clear(t_SpanNearClauseFactory *self);
            static PyObject *t_SpanNearClauseFactory_getBasicQueryFactory(t_SpanNearClauseFactory *self);
            static PyObject *t_SpanNearClauseFactory_getFieldName(t_SpanNearClauseFactory *self);
            static PyObject *t_SpanNearClauseFactory_getIndexReader(t_SpanNearClauseFactory *self);
            static PyObject *t_SpanNearClauseFactory_makeSpanClause(t_SpanNearClauseFactory *self);
            static PyObject *t_SpanNearClauseFactory_size(t_SpanNearClauseFactory *self);
            static PyObject *t_SpanNearClauseFactory_get__basicQueryFactory(t_SpanNearClauseFactory *self, void *data);
            static PyObject *t_SpanNearClauseFactory_get__fieldName(t_SpanNearClauseFactory *self, void *data);
            static PyObject *t_SpanNearClauseFactory_get__indexReader(t_SpanNearClauseFactory *self, void *data);
            static PyGetSetDef t_SpanNearClauseFactory__fields_[] = {
              DECLARE_GET_FIELD(t_SpanNearClauseFactory, basicQueryFactory),
              DECLARE_GET_FIELD(t_SpanNearClauseFactory, fieldName),
              DECLARE_GET_FIELD(t_SpanNearClauseFactory, indexReader),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_SpanNearClauseFactory__methods_[] = {
              DECLARE_METHOD(t_SpanNearClauseFactory, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_SpanNearClauseFactory, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_SpanNearClauseFactory, addSpanQuery, METH_O),
              DECLARE_METHOD(t_SpanNearClauseFactory, addTermWeighted, METH_VARARGS),
              DECLARE_METHOD(t_SpanNearClauseFactory, clear, METH_NOARGS),
              DECLARE_METHOD(t_SpanNearClauseFactory, getBasicQueryFactory, METH_NOARGS),
              DECLARE_METHOD(t_SpanNearClauseFactory, getFieldName, METH_NOARGS),
              DECLARE_METHOD(t_SpanNearClauseFactory, getIndexReader, METH_NOARGS),
              DECLARE_METHOD(t_SpanNearClauseFactory, makeSpanClause, METH_NOARGS),
              DECLARE_METHOD(t_SpanNearClauseFactory, size, METH_NOARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(SpanNearClauseFactory, t_SpanNearClauseFactory, ::java::lang::Object, SpanNearClauseFactory, t_SpanNearClauseFactory_init_, 0, 0, t_SpanNearClauseFactory__fields_, 0, 0);

            void t_SpanNearClauseFactory::install(PyObject *module)
            {
              installType(&PY_TYPE(SpanNearClauseFactory), module, "SpanNearClauseFactory", 0);
            }

            void t_SpanNearClauseFactory::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(SpanNearClauseFactory).tp_dict, "class_", make_descriptor(SpanNearClauseFactory::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(SpanNearClauseFactory).tp_dict, "wrapfn_", make_descriptor(t_SpanNearClauseFactory::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(SpanNearClauseFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_SpanNearClauseFactory_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, SpanNearClauseFactory::initializeClass, 1)))
                return NULL;
              return t_SpanNearClauseFactory::wrap_Object(SpanNearClauseFactory(((t_SpanNearClauseFactory *) arg)->object.this$));
            }
            static PyObject *t_SpanNearClauseFactory_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, SpanNearClauseFactory::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_SpanNearClauseFactory_init_(t_SpanNearClauseFactory *self, PyObject *args, PyObject *kwds)
            {
              ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
              ::java::lang::String a1((jobject) NULL);
              ::org::apache::lucene::queryparser::surround::query::BasicQueryFactory a2((jobject) NULL);
              SpanNearClauseFactory object((jobject) NULL);

              if (!parseArgs(args, "ksk", ::org::apache::lucene::index::IndexReader::initializeClass, ::org::apache::lucene::queryparser::surround::query::BasicQueryFactory::initializeClass, &a0, &a1, &a2))
              {
                INT_CALL(object = SpanNearClauseFactory(a0, a1, a2));
                self->object = object;
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_SpanNearClauseFactory_addSpanQuery(t_SpanNearClauseFactory *self, PyObject *arg)
            {
              ::org::apache::lucene::search::Query a0((jobject) NULL);

              if (!parseArg(arg, "k", ::org::apache::lucene::search::Query::initializeClass, &a0))
              {
                OBJ_CALL(self->object.addSpanQuery(a0));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "addSpanQuery", arg);
              return NULL;
            }

            static PyObject *t_SpanNearClauseFactory_addTermWeighted(t_SpanNearClauseFactory *self, PyObject *args)
            {
              ::org::apache::lucene::index::Term a0((jobject) NULL);
              jfloat a1;

              if (!parseArgs(args, "kF", ::org::apache::lucene::index::Term::initializeClass, &a0, &a1))
              {
                OBJ_CALL(self->object.addTermWeighted(a0, a1));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "addTermWeighted", args);
              return NULL;
            }

            static PyObject *t_SpanNearClauseFactory_clear(t_SpanNearClauseFactory *self)
            {
              OBJ_CALL(self->object.clear());
              Py_RETURN_NONE;
            }

            static PyObject *t_SpanNearClauseFactory_getBasicQueryFactory(t_SpanNearClauseFactory *self)
            {
              ::org::apache::lucene::queryparser::surround::query::BasicQueryFactory result((jobject) NULL);
              OBJ_CALL(result = self->object.getBasicQueryFactory());
              return ::org::apache::lucene::queryparser::surround::query::t_BasicQueryFactory::wrap_Object(result);
            }

            static PyObject *t_SpanNearClauseFactory_getFieldName(t_SpanNearClauseFactory *self)
            {
              ::java::lang::String result((jobject) NULL);
              OBJ_CALL(result = self->object.getFieldName());
              return j2p(result);
            }

            static PyObject *t_SpanNearClauseFactory_getIndexReader(t_SpanNearClauseFactory *self)
            {
              ::org::apache::lucene::index::IndexReader result((jobject) NULL);
              OBJ_CALL(result = self->object.getIndexReader());
              return ::org::apache::lucene::index::t_IndexReader::wrap_Object(result);
            }

            static PyObject *t_SpanNearClauseFactory_makeSpanClause(t_SpanNearClauseFactory *self)
            {
              ::org::apache::lucene::search::spans::SpanQuery result((jobject) NULL);
              OBJ_CALL(result = self->object.makeSpanClause());
              return ::org::apache::lucene::search::spans::t_SpanQuery::wrap_Object(result);
            }

            static PyObject *t_SpanNearClauseFactory_size(t_SpanNearClauseFactory *self)
            {
              jint result;
              OBJ_CALL(result = self->object.size());
              return PyInt_FromLong((long) result);
            }

            static PyObject *t_SpanNearClauseFactory_get__basicQueryFactory(t_SpanNearClauseFactory *self, void *data)
            {
              ::org::apache::lucene::queryparser::surround::query::BasicQueryFactory value((jobject) NULL);
              OBJ_CALL(value = self->object.getBasicQueryFactory());
              return ::org::apache::lucene::queryparser::surround::query::t_BasicQueryFactory::wrap_Object(value);
            }

            static PyObject *t_SpanNearClauseFactory_get__fieldName(t_SpanNearClauseFactory *self, void *data)
            {
              ::java::lang::String value((jobject) NULL);
              OBJ_CALL(value = self->object.getFieldName());
              return j2p(value);
            }

            static PyObject *t_SpanNearClauseFactory_get__indexReader(t_SpanNearClauseFactory *self, void *data)
            {
              ::org::apache::lucene::index::IndexReader value((jobject) NULL);
              OBJ_CALL(value = self->object.getIndexReader());
              return ::org::apache::lucene::index::t_IndexReader::wrap_Object(value);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/FieldInfo$DocValuesType.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *FieldInfo$DocValuesType::class$ = NULL;
        jmethodID *FieldInfo$DocValuesType::mids$ = NULL;
        bool FieldInfo$DocValuesType::live$ = false;
        FieldInfo$DocValuesType *FieldInfo$DocValuesType::BINARY = NULL;
        FieldInfo$DocValuesType *FieldInfo$DocValuesType::NUMERIC = NULL;
        FieldInfo$DocValuesType *FieldInfo$DocValuesType::SORTED = NULL;
        FieldInfo$DocValuesType *FieldInfo$DocValuesType::SORTED_NUMERIC = NULL;
        FieldInfo$DocValuesType *FieldInfo$DocValuesType::SORTED_SET = NULL;

        jclass FieldInfo$DocValuesType::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/FieldInfo$DocValuesType");

            mids$ = new jmethodID[max_mid];
            mids$[mid_valueOf_df70c72d] = env->getStaticMethodID(cls, "valueOf", "(Ljava/lang/String;)Lorg/apache/lucene/index/FieldInfo$DocValuesType;");
            mids$[mid_values_3d388c3f] = env->getStaticMethodID(cls, "values", "()[Lorg/apache/lucene/index/FieldInfo$DocValuesType;");

            class$ = (::java::lang::Class *) new JObject(cls);
            cls = (jclass) class$->this$;

            BINARY = new FieldInfo$DocValuesType(env->getStaticObjectField(cls, "BINARY", "Lorg/apache/lucene/index/FieldInfo$DocValuesType;"));
            NUMERIC = new FieldInfo$DocValuesType(env->getStaticObjectField(cls, "NUMERIC", "Lorg/apache/lucene/index/FieldInfo$DocValuesType;"));
            SORTED = new FieldInfo$DocValuesType(env->getStaticObjectField(cls, "SORTED", "Lorg/apache/lucene/index/FieldInfo$DocValuesType;"));
            SORTED_NUMERIC = new FieldInfo$DocValuesType(env->getStaticObjectField(cls, "SORTED_NUMERIC", "Lorg/apache/lucene/index/FieldInfo$DocValuesType;"));
            SORTED_SET = new FieldInfo$DocValuesType(env->getStaticObjectField(cls, "SORTED_SET", "Lorg/apache/lucene/index/FieldInfo$DocValuesType;"));
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        FieldInfo$DocValuesType FieldInfo$DocValuesType::valueOf(const ::java::lang::String & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return FieldInfo$DocValuesType(env->callStaticObjectMethod(cls, mids$[mid_valueOf_df70c72d], a0.this$));
        }

        JArray< FieldInfo$DocValuesType > FieldInfo$DocValuesType::values()
        {
          jclass cls = env->getClass(initializeClass);
          return JArray< FieldInfo$DocValuesType >(env->callStaticObjectMethod(cls, mids$[mid_values_3d388c3f]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_FieldInfo$DocValuesType_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FieldInfo$DocValuesType_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FieldInfo$DocValuesType_of_(t_FieldInfo$DocValuesType *self, PyObject *args);
        static PyObject *t_FieldInfo$DocValuesType_valueOf(PyTypeObject *type, PyObject *args);
        static PyObject *t_FieldInfo$DocValuesType_values(PyTypeObject *type);
        static PyObject *t_FieldInfo$DocValuesType_get__parameters_(t_FieldInfo$DocValuesType *self, void *data);
        static PyGetSetDef t_FieldInfo$DocValuesType__fields_[] = {
          DECLARE_GET_FIELD(t_FieldInfo$DocValuesType, parameters_),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_FieldInfo$DocValuesType__methods_[] = {
          DECLARE_METHOD(t_FieldInfo$DocValuesType, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FieldInfo$DocValuesType, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FieldInfo$DocValuesType, of_, METH_VARARGS),
          DECLARE_METHOD(t_FieldInfo$DocValuesType, valueOf, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_FieldInfo$DocValuesType, values, METH_NOARGS | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(FieldInfo$DocValuesType, t_FieldInfo$DocValuesType, ::java::lang::Enum, FieldInfo$DocValuesType, abstract_init, 0, 0, t_FieldInfo$DocValuesType__fields_, 0, 0);
        PyObject *t_FieldInfo$DocValuesType::wrap_Object(const FieldInfo$DocValuesType& object, PyTypeObject *p0)
        {
          PyObject *obj = t_FieldInfo$DocValuesType::wrap_Object(object);
          if (obj != NULL && obj != Py_None)
          {
            t_FieldInfo$DocValuesType *self = (t_FieldInfo$DocValuesType *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        PyObject *t_FieldInfo$DocValuesType::wrap_jobject(const jobject& object, PyTypeObject *p0)
        {
          PyObject *obj = t_FieldInfo$DocValuesType::wrap_jobject(object);
          if (obj != NULL && obj != Py_None)
          {
            t_FieldInfo$DocValuesType *self = (t_FieldInfo$DocValuesType *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        void t_FieldInfo$DocValuesType::install(PyObject *module)
        {
          installType(&PY_TYPE(FieldInfo$DocValuesType), module, "FieldInfo$DocValuesType", 0);
        }

        void t_FieldInfo$DocValuesType::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(FieldInfo$DocValuesType).tp_dict, "class_", make_descriptor(FieldInfo$DocValuesType::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(FieldInfo$DocValuesType).tp_dict, "wrapfn_", make_descriptor(t_FieldInfo$DocValuesType::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(FieldInfo$DocValuesType).tp_dict, "boxfn_", make_descriptor(boxObject));
          env->getClass(FieldInfo$DocValuesType::initializeClass);
          PyDict_SetItemString(PY_TYPE(FieldInfo$DocValuesType).tp_dict, "BINARY", make_descriptor(t_FieldInfo$DocValuesType::wrap_Object(*FieldInfo$DocValuesType::BINARY)));
          PyDict_SetItemString(PY_TYPE(FieldInfo$DocValuesType).tp_dict, "NUMERIC", make_descriptor(t_FieldInfo$DocValuesType::wrap_Object(*FieldInfo$DocValuesType::NUMERIC)));
          PyDict_SetItemString(PY_TYPE(FieldInfo$DocValuesType).tp_dict, "SORTED", make_descriptor(t_FieldInfo$DocValuesType::wrap_Object(*FieldInfo$DocValuesType::SORTED)));
          PyDict_SetItemString(PY_TYPE(FieldInfo$DocValuesType).tp_dict, "SORTED_NUMERIC", make_descriptor(t_FieldInfo$DocValuesType::wrap_Object(*FieldInfo$DocValuesType::SORTED_NUMERIC)));
          PyDict_SetItemString(PY_TYPE(FieldInfo$DocValuesType).tp_dict, "SORTED_SET", make_descriptor(t_FieldInfo$DocValuesType::wrap_Object(*FieldInfo$DocValuesType::SORTED_SET)));
        }

        static PyObject *t_FieldInfo$DocValuesType_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, FieldInfo$DocValuesType::initializeClass, 1)))
            return NULL;
          return t_FieldInfo$DocValuesType::wrap_Object(FieldInfo$DocValuesType(((t_FieldInfo$DocValuesType *) arg)->object.this$));
        }
        static PyObject *t_FieldInfo$DocValuesType_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, FieldInfo$DocValuesType::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_FieldInfo$DocValuesType_of_(t_FieldInfo$DocValuesType *self, PyObject *args)
        {
          if (!parseArg(args, "T", 1, &(self->parameters)))
            Py_RETURN_SELF;
          return PyErr_SetArgsError((PyObject *) self, "of_", args);
        }

        static PyObject *t_FieldInfo$DocValuesType_valueOf(PyTypeObject *type, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          FieldInfo$DocValuesType result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::index::FieldInfo$DocValuesType::valueOf(a0));
            return t_FieldInfo$DocValuesType::wrap_Object(result);
          }

          return callSuper(type, "valueOf", args, 2);
        }

        static PyObject *t_FieldInfo$DocValuesType_values(PyTypeObject *type)
        {
          JArray< FieldInfo$DocValuesType > result((jobject) NULL);
          OBJ_CALL(result = ::org::apache::lucene::index::FieldInfo$DocValuesType::values());
          return JArray<jobject>(result.this$).wrap(t_FieldInfo$DocValuesType::wrap_jobject);
        }
        static PyObject *t_FieldInfo$DocValuesType_get__parameters_(t_FieldInfo$DocValuesType *self, void *data)
        {
          return typeParameters(self->parameters, sizeof(self->parameters));
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/OrdTermState.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *OrdTermState::class$ = NULL;
        jmethodID *OrdTermState::mids$ = NULL;
        jfieldID *OrdTermState::fids$ = NULL;
        bool OrdTermState::live$ = false;

        jclass OrdTermState::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/OrdTermState");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_copyFrom_d506ca07] = env->getMethodID(cls, "copyFrom", "(Lorg/apache/lucene/index/TermState;)V");
            mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

            fids$ = new jfieldID[max_fid];
            fids$[fid_ord] = env->getFieldID(cls, "ord", "J");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        OrdTermState::OrdTermState() : ::org::apache::lucene::index::TermState(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        void OrdTermState::copyFrom(const ::org::apache::lucene::index::TermState & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_copyFrom_d506ca07], a0.this$);
        }

        ::java::lang::String OrdTermState::toString() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
        }

        jlong OrdTermState::_get_ord() const
        {
          return env->getLongField(this$, fids$[fid_ord]);
        }

        void OrdTermState::_set_ord(jlong a0) const
        {
          env->setLongField(this$, fids$[fid_ord], a0);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_OrdTermState_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_OrdTermState_instance_(PyTypeObject *type, PyObject *arg);
        static int t_OrdTermState_init_(t_OrdTermState *self, PyObject *args, PyObject *kwds);
        static PyObject *t_OrdTermState_copyFrom(t_OrdTermState *self, PyObject *args);
        static PyObject *t_OrdTermState_toString(t_OrdTermState *self, PyObject *args);
        static PyObject *t_OrdTermState_get__ord(t_OrdTermState *self, void *data);
        static int t_OrdTermState_set__ord(t_OrdTermState *self, PyObject *arg, void *data);

        static PyGetSetDef t_OrdTermState__fields_[] = {
          DECLARE_GETSET_FIELD(t_OrdTermState, ord),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_OrdTermState__methods_[] = {
          DECLARE_METHOD(t_OrdTermState, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_OrdTermState, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_OrdTermState, copyFrom, METH_VARARGS),
          DECLARE_METHOD(t_OrdTermState, toString, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(OrdTermState, t_OrdTermState, ::org::apache::lucene::index::TermState, OrdTermState, t_OrdTermState_init_, 0, 0, t_OrdTermState__fields_, 0, 0);

        void t_OrdTermState::install(PyObject *module)
        {
          installType(&PY_TYPE(OrdTermState), module, "OrdTermState", 0);
        }

        void t_OrdTermState::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(OrdTermState).tp_dict, "class_", make_descriptor(OrdTermState::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(OrdTermState).tp_dict, "wrapfn_", make_descriptor(t_OrdTermState::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(OrdTermState).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_OrdTermState_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, OrdTermState::initializeClass, 1)))
            return NULL;
          return t_OrdTermState::wrap_Object(OrdTermState(((t_OrdTermState *) arg)->object.this$));
        }
        static PyObject *t_OrdTermState_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, OrdTermState::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_OrdTermState_init_(t_OrdTermState *self, PyObject *args, PyObject *kwds)
        {
          OrdTermState object((jobject) NULL);

          INT_CALL(object = OrdTermState());
          self->object = object;

          return 0;
        }

        static PyObject *t_OrdTermState_copyFrom(t_OrdTermState *self, PyObject *args)
        {
          ::org::apache::lucene::index::TermState a0((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::index::TermState::initializeClass, &a0))
          {
            OBJ_CALL(self->object.copyFrom(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(OrdTermState), (PyObject *) self, "copyFrom", args, 2);
        }

        static PyObject *t_OrdTermState_toString(t_OrdTermState *self, PyObject *args)
        {
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.toString());
            return j2p(result);
          }

          return callSuper(&PY_TYPE(OrdTermState), (PyObject *) self, "toString", args, 2);
        }

        static PyObject *t_OrdTermState_get__ord(t_OrdTermState *self, void *data)
        {
          jlong value;
          OBJ_CALL(value = self->object._get_ord());
          return PyLong_FromLongLong((PY_LONG_LONG) value);
        }
        static int t_OrdTermState_set__ord(t_OrdTermState *self, PyObject *arg, void *data)
        {
          jlong value;
          if (!parseArg(arg, "J", &value))
          {
            INT_CALL(self->object._set_ord(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "ord", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/lucene40/Lucene40SegmentInfoFormat.h"
#include "org/apache/lucene/codecs/SegmentInfoWriter.h"
#include "java/lang/String.h"
#include "org/apache/lucene/codecs/SegmentInfoReader.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace lucene40 {

          ::java::lang::Class *Lucene40SegmentInfoFormat::class$ = NULL;
          jmethodID *Lucene40SegmentInfoFormat::mids$ = NULL;
          bool Lucene40SegmentInfoFormat::live$ = false;
          ::java::lang::String *Lucene40SegmentInfoFormat::SI_EXTENSION = NULL;

          jclass Lucene40SegmentInfoFormat::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/lucene40/Lucene40SegmentInfoFormat");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_getSegmentInfoReader_1e88b6e7] = env->getMethodID(cls, "getSegmentInfoReader", "()Lorg/apache/lucene/codecs/SegmentInfoReader;");
              mids$[mid_getSegmentInfoWriter_2d4ab533] = env->getMethodID(cls, "getSegmentInfoWriter", "()Lorg/apache/lucene/codecs/SegmentInfoWriter;");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              SI_EXTENSION = new ::java::lang::String(env->getStaticObjectField(cls, "SI_EXTENSION", "Ljava/lang/String;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          Lucene40SegmentInfoFormat::Lucene40SegmentInfoFormat() : ::org::apache::lucene::codecs::SegmentInfoFormat(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          ::org::apache::lucene::codecs::SegmentInfoReader Lucene40SegmentInfoFormat::getSegmentInfoReader() const
          {
            return ::org::apache::lucene::codecs::SegmentInfoReader(env->callObjectMethod(this$, mids$[mid_getSegmentInfoReader_1e88b6e7]));
          }

          ::org::apache::lucene::codecs::SegmentInfoWriter Lucene40SegmentInfoFormat::getSegmentInfoWriter() const
          {
            return ::org::apache::lucene::codecs::SegmentInfoWriter(env->callObjectMethod(this$, mids$[mid_getSegmentInfoWriter_2d4ab533]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace lucene40 {
          static PyObject *t_Lucene40SegmentInfoFormat_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Lucene40SegmentInfoFormat_instance_(PyTypeObject *type, PyObject *arg);
          static int t_Lucene40SegmentInfoFormat_init_(t_Lucene40SegmentInfoFormat *self, PyObject *args, PyObject *kwds);
          static PyObject *t_Lucene40SegmentInfoFormat_getSegmentInfoReader(t_Lucene40SegmentInfoFormat *self, PyObject *args);
          static PyObject *t_Lucene40SegmentInfoFormat_getSegmentInfoWriter(t_Lucene40SegmentInfoFormat *self, PyObject *args);
          static PyObject *t_Lucene40SegmentInfoFormat_get__segmentInfoReader(t_Lucene40SegmentInfoFormat *self, void *data);
          static PyObject *t_Lucene40SegmentInfoFormat_get__segmentInfoWriter(t_Lucene40SegmentInfoFormat *self, void *data);
          static PyGetSetDef t_Lucene40SegmentInfoFormat__fields_[] = {
            DECLARE_GET_FIELD(t_Lucene40SegmentInfoFormat, segmentInfoReader),
            DECLARE_GET_FIELD(t_Lucene40SegmentInfoFormat, segmentInfoWriter),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_Lucene40SegmentInfoFormat__methods_[] = {
            DECLARE_METHOD(t_Lucene40SegmentInfoFormat, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lucene40SegmentInfoFormat, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lucene40SegmentInfoFormat, getSegmentInfoReader, METH_VARARGS),
            DECLARE_METHOD(t_Lucene40SegmentInfoFormat, getSegmentInfoWriter, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(Lucene40SegmentInfoFormat, t_Lucene40SegmentInfoFormat, ::org::apache::lucene::codecs::SegmentInfoFormat, Lucene40SegmentInfoFormat, t_Lucene40SegmentInfoFormat_init_, 0, 0, t_Lucene40SegmentInfoFormat__fields_, 0, 0);

          void t_Lucene40SegmentInfoFormat::install(PyObject *module)
          {
            installType(&PY_TYPE(Lucene40SegmentInfoFormat), module, "Lucene40SegmentInfoFormat", 0);
          }

          void t_Lucene40SegmentInfoFormat::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(Lucene40SegmentInfoFormat).tp_dict, "class_", make_descriptor(Lucene40SegmentInfoFormat::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(Lucene40SegmentInfoFormat).tp_dict, "wrapfn_", make_descriptor(t_Lucene40SegmentInfoFormat::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(Lucene40SegmentInfoFormat).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(Lucene40SegmentInfoFormat::initializeClass);
            PyDict_SetItemString(PY_TYPE(Lucene40SegmentInfoFormat).tp_dict, "SI_EXTENSION", make_descriptor(j2p(*Lucene40SegmentInfoFormat::SI_EXTENSION)));
          }

          static PyObject *t_Lucene40SegmentInfoFormat_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, Lucene40SegmentInfoFormat::initializeClass, 1)))
              return NULL;
            return t_Lucene40SegmentInfoFormat::wrap_Object(Lucene40SegmentInfoFormat(((t_Lucene40SegmentInfoFormat *) arg)->object.this$));
          }
          static PyObject *t_Lucene40SegmentInfoFormat_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, Lucene40SegmentInfoFormat::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_Lucene40SegmentInfoFormat_init_(t_Lucene40SegmentInfoFormat *self, PyObject *args, PyObject *kwds)
          {
            Lucene40SegmentInfoFormat object((jobject) NULL);

            INT_CALL(object = Lucene40SegmentInfoFormat());
            self->object = object;

            return 0;
          }

          static PyObject *t_Lucene40SegmentInfoFormat_getSegmentInfoReader(t_Lucene40SegmentInfoFormat *self, PyObject *args)
          {
            ::org::apache::lucene::codecs::SegmentInfoReader result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.getSegmentInfoReader());
              return ::org::apache::lucene::codecs::t_SegmentInfoReader::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(Lucene40SegmentInfoFormat), (PyObject *) self, "getSegmentInfoReader", args, 2);
          }

          static PyObject *t_Lucene40SegmentInfoFormat_getSegmentInfoWriter(t_Lucene40SegmentInfoFormat *self, PyObject *args)
          {
            ::org::apache::lucene::codecs::SegmentInfoWriter result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.getSegmentInfoWriter());
              return ::org::apache::lucene::codecs::t_SegmentInfoWriter::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(Lucene40SegmentInfoFormat), (PyObject *) self, "getSegmentInfoWriter", args, 2);
          }

          static PyObject *t_Lucene40SegmentInfoFormat_get__segmentInfoReader(t_Lucene40SegmentInfoFormat *self, void *data)
          {
            ::org::apache::lucene::codecs::SegmentInfoReader value((jobject) NULL);
            OBJ_CALL(value = self->object.getSegmentInfoReader());
            return ::org::apache::lucene::codecs::t_SegmentInfoReader::wrap_Object(value);
          }

          static PyObject *t_Lucene40SegmentInfoFormat_get__segmentInfoWriter(t_Lucene40SegmentInfoFormat *self, void *data)
          {
            ::org::apache::lucene::codecs::SegmentInfoWriter value((jobject) NULL);
            OBJ_CALL(value = self->object.getSegmentInfoWriter());
            return ::org::apache::lucene::codecs::t_SegmentInfoWriter::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/Bits$MatchNoBits.h"
#include "org/apache/lucene/util/Bits.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *Bits$MatchNoBits::class$ = NULL;
        jmethodID *Bits$MatchNoBits::mids$ = NULL;
        bool Bits$MatchNoBits::live$ = false;

        jclass Bits$MatchNoBits::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/Bits$MatchNoBits");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_39c7bd3c] = env->getMethodID(cls, "<init>", "(I)V");
            mids$[mid_get_39c7bd30] = env->getMethodID(cls, "get", "(I)Z");
            mids$[mid_length_54c6a179] = env->getMethodID(cls, "length", "()I");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        Bits$MatchNoBits::Bits$MatchNoBits(jint a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_39c7bd3c, a0)) {}

        jboolean Bits$MatchNoBits::get(jint a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_get_39c7bd30], a0);
        }

        jint Bits$MatchNoBits::length() const
        {
          return env->callIntMethod(this$, mids$[mid_length_54c6a179]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_Bits$MatchNoBits_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_Bits$MatchNoBits_instance_(PyTypeObject *type, PyObject *arg);
        static int t_Bits$MatchNoBits_init_(t_Bits$MatchNoBits *self, PyObject *args, PyObject *kwds);
        static PyObject *t_Bits$MatchNoBits_get(t_Bits$MatchNoBits *self, PyObject *arg);
        static PyObject *t_Bits$MatchNoBits_length(t_Bits$MatchNoBits *self);

        static PyMethodDef t_Bits$MatchNoBits__methods_[] = {
          DECLARE_METHOD(t_Bits$MatchNoBits, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_Bits$MatchNoBits, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_Bits$MatchNoBits, get, METH_O),
          DECLARE_METHOD(t_Bits$MatchNoBits, length, METH_NOARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(Bits$MatchNoBits, t_Bits$MatchNoBits, ::java::lang::Object, Bits$MatchNoBits, t_Bits$MatchNoBits_init_, 0, 0, 0, 0, 0);

        void t_Bits$MatchNoBits::install(PyObject *module)
        {
          installType(&PY_TYPE(Bits$MatchNoBits), module, "Bits$MatchNoBits", 0);
        }

        void t_Bits$MatchNoBits::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(Bits$MatchNoBits).tp_dict, "class_", make_descriptor(Bits$MatchNoBits::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(Bits$MatchNoBits).tp_dict, "wrapfn_", make_descriptor(t_Bits$MatchNoBits::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(Bits$MatchNoBits).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_Bits$MatchNoBits_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, Bits$MatchNoBits::initializeClass, 1)))
            return NULL;
          return t_Bits$MatchNoBits::wrap_Object(Bits$MatchNoBits(((t_Bits$MatchNoBits *) arg)->object.this$));
        }
        static PyObject *t_Bits$MatchNoBits_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, Bits$MatchNoBits::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_Bits$MatchNoBits_init_(t_Bits$MatchNoBits *self, PyObject *args, PyObject *kwds)
        {
          jint a0;
          Bits$MatchNoBits object((jobject) NULL);

          if (!parseArgs(args, "I", &a0))
          {
            INT_CALL(object = Bits$MatchNoBits(a0));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_Bits$MatchNoBits_get(t_Bits$MatchNoBits *self, PyObject *arg)
        {
          jint a0;
          jboolean result;

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(result = self->object.get(a0));
            Py_RETURN_BOOL(result);
          }

          PyErr_SetArgsError((PyObject *) self, "get", arg);
          return NULL;
        }

        static PyObject *t_Bits$MatchNoBits_length(t_Bits$MatchNoBits *self)
        {
          jint result;
          OBJ_CALL(result = self->object.length());
          return PyInt_FromLong((long) result);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/AutomatonQuery.h"
#include "org/apache/lucene/util/automaton/Automaton.h"
#include "java/lang/Object.h"
#include "org/apache/lucene/index/Term.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *AutomatonQuery::class$ = NULL;
        jmethodID *AutomatonQuery::mids$ = NULL;
        bool AutomatonQuery::live$ = false;

        jclass AutomatonQuery::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/AutomatonQuery");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_1b49cba7] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/Term;Lorg/apache/lucene/util/automaton/Automaton;)V");
            mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
            mids$[mid_getAutomaton_9b0d5999] = env->getMethodID(cls, "getAutomaton", "()Lorg/apache/lucene/util/automaton/Automaton;");
            mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
            mids$[mid_toString_97a5258f] = env->getMethodID(cls, "toString", "(Ljava/lang/String;)Ljava/lang/String;");
            mids$[mid_getTermsEnum_67b5a29a] = env->getMethodID(cls, "getTermsEnum", "(Lorg/apache/lucene/index/Terms;Lorg/apache/lucene/util/AttributeSource;)Lorg/apache/lucene/index/TermsEnum;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        AutomatonQuery::AutomatonQuery(const ::org::apache::lucene::index::Term & a0, const ::org::apache::lucene::util::automaton::Automaton & a1) : ::org::apache::lucene::search::MultiTermQuery(env->newObject(initializeClass, &mids$, mid_init$_1b49cba7, a0.this$, a1.this$)) {}

        jboolean AutomatonQuery::equals(const ::java::lang::Object & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
        }

        ::org::apache::lucene::util::automaton::Automaton AutomatonQuery::getAutomaton() const
        {
          return ::org::apache::lucene::util::automaton::Automaton(env->callObjectMethod(this$, mids$[mid_getAutomaton_9b0d5999]));
        }

        jint AutomatonQuery::hashCode() const
        {
          return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
        }

        ::java::lang::String AutomatonQuery::toString(const ::java::lang::String & a0) const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_97a5258f], a0.this$));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_AutomatonQuery_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_AutomatonQuery_instance_(PyTypeObject *type, PyObject *arg);
        static int t_AutomatonQuery_init_(t_AutomatonQuery *self, PyObject *args, PyObject *kwds);
        static PyObject *t_AutomatonQuery_equals(t_AutomatonQuery *self, PyObject *args);
        static PyObject *t_AutomatonQuery_getAutomaton(t_AutomatonQuery *self);
        static PyObject *t_AutomatonQuery_hashCode(t_AutomatonQuery *self, PyObject *args);
        static PyObject *t_AutomatonQuery_toString(t_AutomatonQuery *self, PyObject *args);
        static PyObject *t_AutomatonQuery_get__automaton(t_AutomatonQuery *self, void *data);
        static PyGetSetDef t_AutomatonQuery__fields_[] = {
          DECLARE_GET_FIELD(t_AutomatonQuery, automaton),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_AutomatonQuery__methods_[] = {
          DECLARE_METHOD(t_AutomatonQuery, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_AutomatonQuery, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_AutomatonQuery, equals, METH_VARARGS),
          DECLARE_METHOD(t_AutomatonQuery, getAutomaton, METH_NOARGS),
          DECLARE_METHOD(t_AutomatonQuery, hashCode, METH_VARARGS),
          DECLARE_METHOD(t_AutomatonQuery, toString, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(AutomatonQuery, t_AutomatonQuery, ::org::apache::lucene::search::MultiTermQuery, AutomatonQuery, t_AutomatonQuery_init_, 0, 0, t_AutomatonQuery__fields_, 0, 0);

        void t_AutomatonQuery::install(PyObject *module)
        {
          installType(&PY_TYPE(AutomatonQuery), module, "AutomatonQuery", 0);
        }

        void t_AutomatonQuery::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(AutomatonQuery).tp_dict, "class_", make_descriptor(AutomatonQuery::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(AutomatonQuery).tp_dict, "wrapfn_", make_descriptor(t_AutomatonQuery::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(AutomatonQuery).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_AutomatonQuery_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, AutomatonQuery::initializeClass, 1)))
            return NULL;
          return t_AutomatonQuery::wrap_Object(AutomatonQuery(((t_AutomatonQuery *) arg)->object.this$));
        }
        static PyObject *t_AutomatonQuery_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, AutomatonQuery::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_AutomatonQuery_init_(t_AutomatonQuery *self, PyObject *args, PyObject *kwds)
        {
          ::org::apache::lucene::index::Term a0((jobject) NULL);
          ::org::apache::lucene::util::automaton::Automaton a1((jobject) NULL);
          AutomatonQuery object((jobject) NULL);

          if (!parseArgs(args, "kk", ::org::apache::lucene::index::Term::initializeClass, ::org::apache::lucene::util::automaton::Automaton::initializeClass, &a0, &a1))
          {
            INT_CALL(object = AutomatonQuery(a0, a1));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_AutomatonQuery_equals(t_AutomatonQuery *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.equals(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(AutomatonQuery), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_AutomatonQuery_getAutomaton(t_AutomatonQuery *self)
        {
          ::org::apache::lucene::util::automaton::Automaton result((jobject) NULL);
          OBJ_CALL(result = self->object.getAutomaton());
          return ::org::apache::lucene::util::automaton::t_Automaton::wrap_Object(result);
        }

        static PyObject *t_AutomatonQuery_hashCode(t_AutomatonQuery *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hashCode());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(AutomatonQuery), (PyObject *) self, "hashCode", args, 2);
        }

        static PyObject *t_AutomatonQuery_toString(t_AutomatonQuery *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = self->object.toString(a0));
            return j2p(result);
          }

          return callSuper(&PY_TYPE(AutomatonQuery), (PyObject *) self, "toString", args, 2);
        }

        static PyObject *t_AutomatonQuery_get__automaton(t_AutomatonQuery *self, void *data)
        {
          ::org::apache::lucene::util::automaton::Automaton value((jobject) NULL);
          OBJ_CALL(value = self->object.getAutomaton());
          return ::org::apache::lucene::util::automaton::t_Automaton::wrap_Object(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/CollectionStatistics.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *CollectionStatistics::class$ = NULL;
        jmethodID *CollectionStatistics::mids$ = NULL;
        bool CollectionStatistics::live$ = false;

        jclass CollectionStatistics::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/CollectionStatistics");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_2d72e40c] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;JJJJ)V");
            mids$[mid_docCount_54c6a17a] = env->getMethodID(cls, "docCount", "()J");
            mids$[mid_field_14c7b5c5] = env->getMethodID(cls, "field", "()Ljava/lang/String;");
            mids$[mid_maxDoc_54c6a17a] = env->getMethodID(cls, "maxDoc", "()J");
            mids$[mid_sumDocFreq_54c6a17a] = env->getMethodID(cls, "sumDocFreq", "()J");
            mids$[mid_sumTotalTermFreq_54c6a17a] = env->getMethodID(cls, "sumTotalTermFreq", "()J");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        CollectionStatistics::CollectionStatistics(const ::java::lang::String & a0, jlong a1, jlong a2, jlong a3, jlong a4) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_2d72e40c, a0.this$, a1, a2, a3, a4)) {}

        jlong CollectionStatistics::docCount() const
        {
          return env->callLongMethod(this$, mids$[mid_docCount_54c6a17a]);
        }

        ::java::lang::String CollectionStatistics::field() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_field_14c7b5c5]));
        }

        jlong CollectionStatistics::maxDoc() const
        {
          return env->callLongMethod(this$, mids$[mid_maxDoc_54c6a17a]);
        }

        jlong CollectionStatistics::sumDocFreq() const
        {
          return env->callLongMethod(this$, mids$[mid_sumDocFreq_54c6a17a]);
        }

        jlong CollectionStatistics::sumTotalTermFreq() const
        {
          return env->callLongMethod(this$, mids$[mid_sumTotalTermFreq_54c6a17a]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_CollectionStatistics_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_CollectionStatistics_instance_(PyTypeObject *type, PyObject *arg);
        static int t_CollectionStatistics_init_(t_CollectionStatistics *self, PyObject *args, PyObject *kwds);
        static PyObject *t_CollectionStatistics_docCount(t_CollectionStatistics *self);
        static PyObject *t_CollectionStatistics_field(t_CollectionStatistics *self);
        static PyObject *t_CollectionStatistics_maxDoc(t_CollectionStatistics *self);
        static PyObject *t_CollectionStatistics_sumDocFreq(t_CollectionStatistics *self);
        static PyObject *t_CollectionStatistics_sumTotalTermFreq(t_CollectionStatistics *self);

        static PyMethodDef t_CollectionStatistics__methods_[] = {
          DECLARE_METHOD(t_CollectionStatistics, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_CollectionStatistics, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_CollectionStatistics, docCount, METH_NOARGS),
          DECLARE_METHOD(t_CollectionStatistics, field, METH_NOARGS),
          DECLARE_METHOD(t_CollectionStatistics, maxDoc, METH_NOARGS),
          DECLARE_METHOD(t_CollectionStatistics, sumDocFreq, METH_NOARGS),
          DECLARE_METHOD(t_CollectionStatistics, sumTotalTermFreq, METH_NOARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(CollectionStatistics, t_CollectionStatistics, ::java::lang::Object, CollectionStatistics, t_CollectionStatistics_init_, 0, 0, 0, 0, 0);

        void t_CollectionStatistics::install(PyObject *module)
        {
          installType(&PY_TYPE(CollectionStatistics), module, "CollectionStatistics", 0);
        }

        void t_CollectionStatistics::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(CollectionStatistics).tp_dict, "class_", make_descriptor(CollectionStatistics::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(CollectionStatistics).tp_dict, "wrapfn_", make_descriptor(t_CollectionStatistics::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(CollectionStatistics).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_CollectionStatistics_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, CollectionStatistics::initializeClass, 1)))
            return NULL;
          return t_CollectionStatistics::wrap_Object(CollectionStatistics(((t_CollectionStatistics *) arg)->object.this$));
        }
        static PyObject *t_CollectionStatistics_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, CollectionStatistics::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_CollectionStatistics_init_(t_CollectionStatistics *self, PyObject *args, PyObject *kwds)
        {
          ::java::lang::String a0((jobject) NULL);
          jlong a1;
          jlong a2;
          jlong a3;
          jlong a4;
          CollectionStatistics object((jobject) NULL);

          if (!parseArgs(args, "sJJJJ", &a0, &a1, &a2, &a3, &a4))
          {
            INT_CALL(object = CollectionStatistics(a0, a1, a2, a3, a4));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_CollectionStatistics_docCount(t_CollectionStatistics *self)
        {
          jlong result;
          OBJ_CALL(result = self->object.docCount());
          return PyLong_FromLongLong((PY_LONG_LONG) result);
        }

        static PyObject *t_CollectionStatistics_field(t_CollectionStatistics *self)
        {
          ::java::lang::String result((jobject) NULL);
          OBJ_CALL(result = self->object.field());
          return j2p(result);
        }

        static PyObject *t_CollectionStatistics_maxDoc(t_CollectionStatistics *self)
        {
          jlong result;
          OBJ_CALL(result = self->object.maxDoc());
          return PyLong_FromLongLong((PY_LONG_LONG) result);
        }

        static PyObject *t_CollectionStatistics_sumDocFreq(t_CollectionStatistics *self)
        {
          jlong result;
          OBJ_CALL(result = self->object.sumDocFreq());
          return PyLong_FromLongLong((PY_LONG_LONG) result);
        }

        static PyObject *t_CollectionStatistics_sumTotalTermFreq(t_CollectionStatistics *self)
        {
          jlong result;
          OBJ_CALL(result = self->object.sumTotalTermFreq());
          return PyLong_FromLongLong((PY_LONG_LONG) result);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/store/LockFactory.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/store/Lock.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {

        ::java::lang::Class *LockFactory::class$ = NULL;
        jmethodID *LockFactory::mids$ = NULL;
        bool LockFactory::live$ = false;

        jclass LockFactory::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/store/LockFactory");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_clearLock_5fdc3f48] = env->getMethodID(cls, "clearLock", "(Ljava/lang/String;)V");
            mids$[mid_getLockPrefix_14c7b5c5] = env->getMethodID(cls, "getLockPrefix", "()Ljava/lang/String;");
            mids$[mid_makeLock_f26bb9a8] = env->getMethodID(cls, "makeLock", "(Ljava/lang/String;)Lorg/apache/lucene/store/Lock;");
            mids$[mid_setLockPrefix_5fdc3f48] = env->getMethodID(cls, "setLockPrefix", "(Ljava/lang/String;)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        LockFactory::LockFactory() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        void LockFactory::clearLock(const ::java::lang::String & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_clearLock_5fdc3f48], a0.this$);
        }

        ::java::lang::String LockFactory::getLockPrefix() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getLockPrefix_14c7b5c5]));
        }

        ::org::apache::lucene::store::Lock LockFactory::makeLock(const ::java::lang::String & a0) const
        {
          return ::org::apache::lucene::store::Lock(env->callObjectMethod(this$, mids$[mid_makeLock_f26bb9a8], a0.this$));
        }

        void LockFactory::setLockPrefix(const ::java::lang::String & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setLockPrefix_5fdc3f48], a0.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {
        static PyObject *t_LockFactory_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_LockFactory_instance_(PyTypeObject *type, PyObject *arg);
        static int t_LockFactory_init_(t_LockFactory *self, PyObject *args, PyObject *kwds);
        static PyObject *t_LockFactory_clearLock(t_LockFactory *self, PyObject *arg);
        static PyObject *t_LockFactory_getLockPrefix(t_LockFactory *self);
        static PyObject *t_LockFactory_makeLock(t_LockFactory *self, PyObject *arg);
        static PyObject *t_LockFactory_setLockPrefix(t_LockFactory *self, PyObject *arg);
        static PyObject *t_LockFactory_get__lockPrefix(t_LockFactory *self, void *data);
        static int t_LockFactory_set__lockPrefix(t_LockFactory *self, PyObject *arg, void *data);
        static PyGetSetDef t_LockFactory__fields_[] = {
          DECLARE_GETSET_FIELD(t_LockFactory, lockPrefix),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_LockFactory__methods_[] = {
          DECLARE_METHOD(t_LockFactory, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_LockFactory, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_LockFactory, clearLock, METH_O),
          DECLARE_METHOD(t_LockFactory, getLockPrefix, METH_NOARGS),
          DECLARE_METHOD(t_LockFactory, makeLock, METH_O),
          DECLARE_METHOD(t_LockFactory, setLockPrefix, METH_O),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(LockFactory, t_LockFactory, ::java::lang::Object, LockFactory, t_LockFactory_init_, 0, 0, t_LockFactory__fields_, 0, 0);

        void t_LockFactory::install(PyObject *module)
        {
          installType(&PY_TYPE(LockFactory), module, "LockFactory", 0);
        }

        void t_LockFactory::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(LockFactory).tp_dict, "class_", make_descriptor(LockFactory::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(LockFactory).tp_dict, "wrapfn_", make_descriptor(t_LockFactory::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(LockFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_LockFactory_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, LockFactory::initializeClass, 1)))
            return NULL;
          return t_LockFactory::wrap_Object(LockFactory(((t_LockFactory *) arg)->object.this$));
        }
        static PyObject *t_LockFactory_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, LockFactory::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_LockFactory_init_(t_LockFactory *self, PyObject *args, PyObject *kwds)
        {
          LockFactory object((jobject) NULL);

          INT_CALL(object = LockFactory());
          self->object = object;

          return 0;
        }

        static PyObject *t_LockFactory_clearLock(t_LockFactory *self, PyObject *arg)
        {
          ::java::lang::String a0((jobject) NULL);

          if (!parseArg(arg, "s", &a0))
          {
            OBJ_CALL(self->object.clearLock(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "clearLock", arg);
          return NULL;
        }

        static PyObject *t_LockFactory_getLockPrefix(t_LockFactory *self)
        {
          ::java::lang::String result((jobject) NULL);
          OBJ_CALL(result = self->object.getLockPrefix());
          return j2p(result);
        }

        static PyObject *t_LockFactory_makeLock(t_LockFactory *self, PyObject *arg)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::store::Lock result((jobject) NULL);

          if (!parseArg(arg, "s", &a0))
          {
            OBJ_CALL(result = self->object.makeLock(a0));
            return ::org::apache::lucene::store::t_Lock::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "makeLock", arg);
          return NULL;
        }

        static PyObject *t_LockFactory_setLockPrefix(t_LockFactory *self, PyObject *arg)
        {
          ::java::lang::String a0((jobject) NULL);

          if (!parseArg(arg, "s", &a0))
          {
            OBJ_CALL(self->object.setLockPrefix(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setLockPrefix", arg);
          return NULL;
        }

        static PyObject *t_LockFactory_get__lockPrefix(t_LockFactory *self, void *data)
        {
          ::java::lang::String value((jobject) NULL);
          OBJ_CALL(value = self->object.getLockPrefix());
          return j2p(value);
        }
        static int t_LockFactory_set__lockPrefix(t_LockFactory *self, PyObject *arg, void *data)
        {
          {
            ::java::lang::String value((jobject) NULL);
            if (!parseArg(arg, "s", &value))
            {
              INT_CALL(self->object.setLockPrefix(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "lockPrefix", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/OfflineSorter$ByteSequencesWriter.h"
#include "java/io/Closeable.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "java/lang/Class.h"
#include "java/io/DataOutput.h"
#include "java/io/File.h"
#include "java/io/IOException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *OfflineSorter$ByteSequencesWriter::class$ = NULL;
        jmethodID *OfflineSorter$ByteSequencesWriter::mids$ = NULL;
        bool OfflineSorter$ByteSequencesWriter::live$ = false;

        jclass OfflineSorter$ByteSequencesWriter::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/OfflineSorter$ByteSequencesWriter");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_c3dacf57] = env->getMethodID(cls, "<init>", "(Ljava/io/File;)V");
            mids$[mid_init$_cfb051e6] = env->getMethodID(cls, "<init>", "(Ljava/io/DataOutput;)V");
            mids$[mid_close_54c6a166] = env->getMethodID(cls, "close", "()V");
            mids$[mid_write_7bc03dc4] = env->getMethodID(cls, "write", "(Lorg/apache/lucene/util/BytesRef;)V");
            mids$[mid_write_49b4f12b] = env->getMethodID(cls, "write", "([B)V");
            mids$[mid_write_86f4435f] = env->getMethodID(cls, "write", "([BII)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        OfflineSorter$ByteSequencesWriter::OfflineSorter$ByteSequencesWriter(const ::java::io::File & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_c3dacf57, a0.this$)) {}

        OfflineSorter$ByteSequencesWriter::OfflineSorter$ByteSequencesWriter(const ::java::io::DataOutput & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_cfb051e6, a0.this$)) {}

        void OfflineSorter$ByteSequencesWriter::close() const
        {
          env->callVoidMethod(this$, mids$[mid_close_54c6a166]);
        }

        void OfflineSorter$ByteSequencesWriter::write(const ::org::apache::lucene::util::BytesRef & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_write_7bc03dc4], a0.this$);
        }

        void OfflineSorter$ByteSequencesWriter::write(const JArray< jbyte > & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_write_49b4f12b], a0.this$);
        }

        void OfflineSorter$ByteSequencesWriter::write(const JArray< jbyte > & a0, jint a1, jint a2) const
        {
          env->callVoidMethod(this$, mids$[mid_write_86f4435f], a0.this$, a1, a2);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_OfflineSorter$ByteSequencesWriter_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_OfflineSorter$ByteSequencesWriter_instance_(PyTypeObject *type, PyObject *arg);
        static int t_OfflineSorter$ByteSequencesWriter_init_(t_OfflineSorter$ByteSequencesWriter *self, PyObject *args, PyObject *kwds);
        static PyObject *t_OfflineSorter$ByteSequencesWriter_close(t_OfflineSorter$ByteSequencesWriter *self);
        static PyObject *t_OfflineSorter$ByteSequencesWriter_write(t_OfflineSorter$ByteSequencesWriter *self, PyObject *args);

        static PyMethodDef t_OfflineSorter$ByteSequencesWriter__methods_[] = {
          DECLARE_METHOD(t_OfflineSorter$ByteSequencesWriter, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_OfflineSorter$ByteSequencesWriter, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_OfflineSorter$ByteSequencesWriter, close, METH_NOARGS),
          DECLARE_METHOD(t_OfflineSorter$ByteSequencesWriter, write, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(OfflineSorter$ByteSequencesWriter, t_OfflineSorter$ByteSequencesWriter, ::java::lang::Object, OfflineSorter$ByteSequencesWriter, t_OfflineSorter$ByteSequencesWriter_init_, 0, 0, 0, 0, 0);

        void t_OfflineSorter$ByteSequencesWriter::install(PyObject *module)
        {
          installType(&PY_TYPE(OfflineSorter$ByteSequencesWriter), module, "OfflineSorter$ByteSequencesWriter", 0);
        }

        void t_OfflineSorter$ByteSequencesWriter::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(OfflineSorter$ByteSequencesWriter).tp_dict, "class_", make_descriptor(OfflineSorter$ByteSequencesWriter::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(OfflineSorter$ByteSequencesWriter).tp_dict, "wrapfn_", make_descriptor(t_OfflineSorter$ByteSequencesWriter::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(OfflineSorter$ByteSequencesWriter).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_OfflineSorter$ByteSequencesWriter_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, OfflineSorter$ByteSequencesWriter::initializeClass, 1)))
            return NULL;
          return t_OfflineSorter$ByteSequencesWriter::wrap_Object(OfflineSorter$ByteSequencesWriter(((t_OfflineSorter$ByteSequencesWriter *) arg)->object.this$));
        }
        static PyObject *t_OfflineSorter$ByteSequencesWriter_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, OfflineSorter$ByteSequencesWriter::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_OfflineSorter$ByteSequencesWriter_init_(t_OfflineSorter$ByteSequencesWriter *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              ::java::io::File a0((jobject) NULL);
              OfflineSorter$ByteSequencesWriter object((jobject) NULL);

              if (!parseArgs(args, "k", ::java::io::File::initializeClass, &a0))
              {
                INT_CALL(object = OfflineSorter$ByteSequencesWriter(a0));
                self->object = object;
                break;
              }
            }
            {
              ::java::io::DataOutput a0((jobject) NULL);
              OfflineSorter$ByteSequencesWriter object((jobject) NULL);

              if (!parseArgs(args, "k", ::java::io::DataOutput::initializeClass, &a0))
              {
                INT_CALL(object = OfflineSorter$ByteSequencesWriter(a0));
                self->object = object;
                break;
              }
            }
           default:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_OfflineSorter$ByteSequencesWriter_close(t_OfflineSorter$ByteSequencesWriter *self)
        {
          OBJ_CALL(self->object.close());
          Py_RETURN_NONE;
        }

        static PyObject *t_OfflineSorter$ByteSequencesWriter_write(t_OfflineSorter$ByteSequencesWriter *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              ::org::apache::lucene::util::BytesRef a0((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::util::BytesRef::initializeClass, &a0))
              {
                OBJ_CALL(self->object.write(a0));
                Py_RETURN_NONE;
              }
            }
            {
              JArray< jbyte > a0((jobject) NULL);

              if (!parseArgs(args, "[B", &a0))
              {
                OBJ_CALL(self->object.write(a0));
                Py_RETURN_NONE;
              }
            }
            break;
           case 3:
            {
              JArray< jbyte > a0((jobject) NULL);
              jint a1;
              jint a2;

              if (!parseArgs(args, "[BII", &a0, &a1, &a2))
              {
                OBJ_CALL(self->object.write(a0, a1, a2));
                Py_RETURN_NONE;
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "write", args);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/egothor/stemmer/Optimizer2.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace egothor {
    namespace stemmer {

      ::java::lang::Class *Optimizer2::class$ = NULL;
      jmethodID *Optimizer2::mids$ = NULL;
      bool Optimizer2::live$ = false;

      jclass Optimizer2::initializeClass(bool getOnly)
      {
        if (getOnly)
          return (jclass) (live$ ? class$->this$ : NULL);
        if (class$ == NULL)
        {
          jclass cls = (jclass) env->findClass("org/egothor/stemmer/Optimizer2");

          mids$ = new jmethodID[max_mid];
          mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");

          class$ = (::java::lang::Class *) new JObject(cls);
          live$ = true;
        }
        return (jclass) class$->this$;
      }

      Optimizer2::Optimizer2() : ::org::egothor::stemmer::Optimizer(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace egothor {
    namespace stemmer {
      static PyObject *t_Optimizer2_cast_(PyTypeObject *type, PyObject *arg);
      static PyObject *t_Optimizer2_instance_(PyTypeObject *type, PyObject *arg);
      static int t_Optimizer2_init_(t_Optimizer2 *self, PyObject *args, PyObject *kwds);

      static PyMethodDef t_Optimizer2__methods_[] = {
        DECLARE_METHOD(t_Optimizer2, cast_, METH_O | METH_CLASS),
        DECLARE_METHOD(t_Optimizer2, instance_, METH_O | METH_CLASS),
        { NULL, NULL, 0, NULL }
      };

      DECLARE_TYPE(Optimizer2, t_Optimizer2, ::org::egothor::stemmer::Optimizer, Optimizer2, t_Optimizer2_init_, 0, 0, 0, 0, 0);

      void t_Optimizer2::install(PyObject *module)
      {
        installType(&PY_TYPE(Optimizer2), module, "Optimizer2", 0);
      }

      void t_Optimizer2::initialize(PyObject *module)
      {
        PyDict_SetItemString(PY_TYPE(Optimizer2).tp_dict, "class_", make_descriptor(Optimizer2::initializeClass, 1));
        PyDict_SetItemString(PY_TYPE(Optimizer2).tp_dict, "wrapfn_", make_descriptor(t_Optimizer2::wrap_jobject));
        PyDict_SetItemString(PY_TYPE(Optimizer2).tp_dict, "boxfn_", make_descriptor(boxObject));
      }

      static PyObject *t_Optimizer2_cast_(PyTypeObject *type, PyObject *arg)
      {
        if (!(arg = castCheck(arg, Optimizer2::initializeClass, 1)))
          return NULL;
        return t_Optimizer2::wrap_Object(Optimizer2(((t_Optimizer2 *) arg)->object.this$));
      }
      static PyObject *t_Optimizer2_instance_(PyTypeObject *type, PyObject *arg)
      {
        if (!castCheck(arg, Optimizer2::initializeClass, 0))
          Py_RETURN_FALSE;
        Py_RETURN_TRUE;
      }

      static int t_Optimizer2_init_(t_Optimizer2 *self, PyObject *args, PyObject *kwds)
      {
        Optimizer2 object((jobject) NULL);

        INT_CALL(object = Optimizer2());
        self->object = object;

        return 0;
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/FilterDirectoryReader.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/index/FilterDirectoryReader$SubReaderWrapper.h"
#include "org/apache/lucene/index/AtomicReader.h"
#include "org/apache/lucene/index/IndexCommit.h"
#include "java/io/IOException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *FilterDirectoryReader::class$ = NULL;
        jmethodID *FilterDirectoryReader::mids$ = NULL;
        bool FilterDirectoryReader::live$ = false;

        jclass FilterDirectoryReader::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/FilterDirectoryReader");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_1e43081e] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/DirectoryReader;)V");
            mids$[mid_init$_c3fa2163] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/DirectoryReader;Lorg/apache/lucene/index/FilterDirectoryReader$SubReaderWrapper;)V");
            mids$[mid_getIndexCommit_09307276] = env->getMethodID(cls, "getIndexCommit", "()Lorg/apache/lucene/index/IndexCommit;");
            mids$[mid_getVersion_54c6a17a] = env->getMethodID(cls, "getVersion", "()J");
            mids$[mid_isCurrent_54c6a16a] = env->getMethodID(cls, "isCurrent", "()Z");
            mids$[mid_doClose_54c6a166] = env->getMethodID(cls, "doClose", "()V");
            mids$[mid_doWrapDirectoryReader_5bb3c60f] = env->getMethodID(cls, "doWrapDirectoryReader", "(Lorg/apache/lucene/index/DirectoryReader;)Lorg/apache/lucene/index/DirectoryReader;");
            mids$[mid_doOpenIfChanged_26fd6272] = env->getMethodID(cls, "doOpenIfChanged", "(Lorg/apache/lucene/index/IndexCommit;)Lorg/apache/lucene/index/DirectoryReader;");
            mids$[mid_doOpenIfChanged_1de06693] = env->getMethodID(cls, "doOpenIfChanged", "()Lorg/apache/lucene/index/DirectoryReader;");
            mids$[mid_doOpenIfChanged_e4ee522b] = env->getMethodID(cls, "doOpenIfChanged", "(Lorg/apache/lucene/index/IndexWriter;Z)Lorg/apache/lucene/index/DirectoryReader;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        FilterDirectoryReader::FilterDirectoryReader(const ::org::apache::lucene::index::DirectoryReader & a0) : ::org::apache::lucene::index::DirectoryReader(env->newObject(initializeClass, &mids$, mid_init$_1e43081e, a0.this$)) {}

        FilterDirectoryReader::FilterDirectoryReader(const ::org::apache::lucene::index::DirectoryReader & a0, const ::org::apache::lucene::index::FilterDirectoryReader$SubReaderWrapper & a1) : ::org::apache::lucene::index::DirectoryReader(env->newObject(initializeClass, &mids$, mid_init$_c3fa2163, a0.this$, a1.this$)) {}

        ::org::apache::lucene::index::IndexCommit FilterDirectoryReader::getIndexCommit() const
        {
          return ::org::apache::lucene::index::IndexCommit(env->callObjectMethod(this$, mids$[mid_getIndexCommit_09307276]));
        }

        jlong FilterDirectoryReader::getVersion() const
        {
          return env->callLongMethod(this$, mids$[mid_getVersion_54c6a17a]);
        }

        jboolean FilterDirectoryReader::isCurrent() const
        {
          return env->callBooleanMethod(this$, mids$[mid_isCurrent_54c6a16a]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"
#include "org/apache/lucene/index/FilterDirectoryReader$StandardReaderWrapper.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_FilterDirectoryReader_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FilterDirectoryReader_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FilterDirectoryReader_of_(t_FilterDirectoryReader *self, PyObject *args);
        static int t_FilterDirectoryReader_init_(t_FilterDirectoryReader *self, PyObject *args, PyObject *kwds);
        static PyObject *t_FilterDirectoryReader_getIndexCommit(t_FilterDirectoryReader *self, PyObject *args);
        static PyObject *t_FilterDirectoryReader_getVersion(t_FilterDirectoryReader *self, PyObject *args);
        static PyObject *t_FilterDirectoryReader_isCurrent(t_FilterDirectoryReader *self, PyObject *args);
        static PyObject *t_FilterDirectoryReader_get__current(t_FilterDirectoryReader *self, void *data);
        static PyObject *t_FilterDirectoryReader_get__indexCommit(t_FilterDirectoryReader *self, void *data);
        static PyObject *t_FilterDirectoryReader_get__version(t_FilterDirectoryReader *self, void *data);
        static PyObject *t_FilterDirectoryReader_get__parameters_(t_FilterDirectoryReader *self, void *data);
        static PyGetSetDef t_FilterDirectoryReader__fields_[] = {
          DECLARE_GET_FIELD(t_FilterDirectoryReader, current),
          DECLARE_GET_FIELD(t_FilterDirectoryReader, indexCommit),
          DECLARE_GET_FIELD(t_FilterDirectoryReader, version),
          DECLARE_GET_FIELD(t_FilterDirectoryReader, parameters_),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_FilterDirectoryReader__methods_[] = {
          DECLARE_METHOD(t_FilterDirectoryReader, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FilterDirectoryReader, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FilterDirectoryReader, of_, METH_VARARGS),
          DECLARE_METHOD(t_FilterDirectoryReader, getIndexCommit, METH_VARARGS),
          DECLARE_METHOD(t_FilterDirectoryReader, getVersion, METH_VARARGS),
          DECLARE_METHOD(t_FilterDirectoryReader, isCurrent, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(FilterDirectoryReader, t_FilterDirectoryReader, ::org::apache::lucene::index::DirectoryReader, FilterDirectoryReader, t_FilterDirectoryReader_init_, 0, 0, t_FilterDirectoryReader__fields_, 0, 0);
        PyObject *t_FilterDirectoryReader::wrap_Object(const FilterDirectoryReader& object, PyTypeObject *p0)
        {
          PyObject *obj = t_FilterDirectoryReader::wrap_Object(object);
          if (obj != NULL && obj != Py_None)
          {
            t_FilterDirectoryReader *self = (t_FilterDirectoryReader *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        PyObject *t_FilterDirectoryReader::wrap_jobject(const jobject& object, PyTypeObject *p0)
        {
          PyObject *obj = t_FilterDirectoryReader::wrap_jobject(object);
          if (obj != NULL && obj != Py_None)
          {
            t_FilterDirectoryReader *self = (t_FilterDirectoryReader *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        void t_FilterDirectoryReader::install(PyObject *module)
        {
          installType(&PY_TYPE(FilterDirectoryReader), module, "FilterDirectoryReader", 0);
          PyDict_SetItemString(PY_TYPE(FilterDirectoryReader).tp_dict, "StandardReaderWrapper", make_descriptor(&PY_TYPE(FilterDirectoryReader$StandardReaderWrapper)));
          PyDict_SetItemString(PY_TYPE(FilterDirectoryReader).tp_dict, "SubReaderWrapper", make_descriptor(&PY_TYPE(FilterDirectoryReader$SubReaderWrapper)));
        }

        void t_FilterDirectoryReader::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(FilterDirectoryReader).tp_dict, "class_", make_descriptor(FilterDirectoryReader::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(FilterDirectoryReader).tp_dict, "wrapfn_", make_descriptor(t_FilterDirectoryReader::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(FilterDirectoryReader).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_FilterDirectoryReader_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, FilterDirectoryReader::initializeClass, 1)))
            return NULL;
          return t_FilterDirectoryReader::wrap_Object(FilterDirectoryReader(((t_FilterDirectoryReader *) arg)->object.this$));
        }
        static PyObject *t_FilterDirectoryReader_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, FilterDirectoryReader::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_FilterDirectoryReader_of_(t_FilterDirectoryReader *self, PyObject *args)
        {
          if (!parseArg(args, "T", 1, &(self->parameters)))
            Py_RETURN_SELF;
          return PyErr_SetArgsError((PyObject *) self, "of_", args);
        }

        static int t_FilterDirectoryReader_init_(t_FilterDirectoryReader *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              ::org::apache::lucene::index::DirectoryReader a0((jobject) NULL);
              PyTypeObject **p0;
              FilterDirectoryReader object((jobject) NULL);

              if (!parseArgs(args, "K", ::org::apache::lucene::index::DirectoryReader::initializeClass, &a0, &p0, ::org::apache::lucene::index::t_DirectoryReader::parameters_))
              {
                INT_CALL(object = FilterDirectoryReader(a0));
                self->object = object;
                self->parameters[0] = &::org::apache::lucene::index::PY_TYPE(AtomicReader);
                break;
              }
            }
            goto err;
           case 2:
            {
              ::org::apache::lucene::index::DirectoryReader a0((jobject) NULL);
              PyTypeObject **p0;
              ::org::apache::lucene::index::FilterDirectoryReader$SubReaderWrapper a1((jobject) NULL);
              PyTypeObject **p1;
              FilterDirectoryReader object((jobject) NULL);

              if (!parseArgs(args, "KK", ::org::apache::lucene::index::DirectoryReader::initializeClass, ::org::apache::lucene::index::FilterDirectoryReader$SubReaderWrapper::initializeClass, &a0, &p0, ::org::apache::lucene::index::t_DirectoryReader::parameters_, &a1, &p1, ::org::apache::lucene::index::t_FilterDirectoryReader$SubReaderWrapper::parameters_))
              {
                INT_CALL(object = FilterDirectoryReader(a0, a1));
                self->object = object;
                self->parameters[0] = &::org::apache::lucene::index::PY_TYPE(AtomicReader);
                break;
              }
            }
           default:
           err:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_FilterDirectoryReader_getIndexCommit(t_FilterDirectoryReader *self, PyObject *args)
        {
          ::org::apache::lucene::index::IndexCommit result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.getIndexCommit());
            return ::org::apache::lucene::index::t_IndexCommit::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(FilterDirectoryReader), (PyObject *) self, "getIndexCommit", args, 2);
        }

        static PyObject *t_FilterDirectoryReader_getVersion(t_FilterDirectoryReader *self, PyObject *args)
        {
          jlong result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.getVersion());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          return callSuper(&PY_TYPE(FilterDirectoryReader), (PyObject *) self, "getVersion", args, 2);
        }

        static PyObject *t_FilterDirectoryReader_isCurrent(t_FilterDirectoryReader *self, PyObject *args)
        {
          jboolean result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.isCurrent());
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(FilterDirectoryReader), (PyObject *) self, "isCurrent", args, 2);
        }
        static PyObject *t_FilterDirectoryReader_get__parameters_(t_FilterDirectoryReader *self, void *data)
        {
          return typeParameters(self->parameters, sizeof(self->parameters));
        }

        static PyObject *t_FilterDirectoryReader_get__current(t_FilterDirectoryReader *self, void *data)
        {
          jboolean value;
          OBJ_CALL(value = self->object.isCurrent());
          Py_RETURN_BOOL(value);
        }

        static PyObject *t_FilterDirectoryReader_get__indexCommit(t_FilterDirectoryReader *self, void *data)
        {
          ::org::apache::lucene::index::IndexCommit value((jobject) NULL);
          OBJ_CALL(value = self->object.getIndexCommit());
          return ::org::apache::lucene::index::t_IndexCommit::wrap_Object(value);
        }

        static PyObject *t_FilterDirectoryReader_get__version(t_FilterDirectoryReader *self, void *data)
        {
          jlong value;
          OBJ_CALL(value = self->object.getVersion());
          return PyLong_FromLongLong((PY_LONG_LONG) value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/util/ClasspathResourceLoader.h"
#include "java/lang/Class.h"
#include "java/io/IOException.h"
#include "java/io/InputStream.h"
#include "java/lang/String.h"
#include "java/lang/ClassLoader.h"
#include "org/apache/lucene/analysis/util/ResourceLoader.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace util {

          ::java::lang::Class *ClasspathResourceLoader::class$ = NULL;
          jmethodID *ClasspathResourceLoader::mids$ = NULL;
          bool ClasspathResourceLoader::live$ = false;

          jclass ClasspathResourceLoader::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/util/ClasspathResourceLoader");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_init$_a5deaff4] = env->getMethodID(cls, "<init>", "(Ljava/lang/Class;)V");
              mids$[mid_init$_9110048d] = env->getMethodID(cls, "<init>", "(Ljava/lang/ClassLoader;)V");
              mids$[mid_findClass_4aee1c89] = env->getMethodID(cls, "findClass", "(Ljava/lang/String;Ljava/lang/Class;)Ljava/lang/Class;");
              mids$[mid_newInstance_61899367] = env->getMethodID(cls, "newInstance", "(Ljava/lang/String;Ljava/lang/Class;)Ljava/lang/Object;");
              mids$[mid_openResource_222e59eb] = env->getMethodID(cls, "openResource", "(Ljava/lang/String;)Ljava/io/InputStream;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ClasspathResourceLoader::ClasspathResourceLoader() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          ClasspathResourceLoader::ClasspathResourceLoader(const ::java::lang::Class & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_a5deaff4, a0.this$)) {}

          ClasspathResourceLoader::ClasspathResourceLoader(const ::java::lang::ClassLoader & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_9110048d, a0.this$)) {}

          ::java::lang::Class ClasspathResourceLoader::findClass(const ::java::lang::String & a0, const ::java::lang::Class & a1) const
          {
            return ::java::lang::Class(env->callObjectMethod(this$, mids$[mid_findClass_4aee1c89], a0.this$, a1.this$));
          }

          ::java::lang::Object ClasspathResourceLoader::newInstance(const ::java::lang::String & a0, const ::java::lang::Class & a1) const
          {
            return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_newInstance_61899367], a0.this$, a1.this$));
          }

          ::java::io::InputStream ClasspathResourceLoader::openResource(const ::java::lang::String & a0) const
          {
            return ::java::io::InputStream(env->callObjectMethod(this$, mids$[mid_openResource_222e59eb], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace util {
          static PyObject *t_ClasspathResourceLoader_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_ClasspathResourceLoader_instance_(PyTypeObject *type, PyObject *arg);
          static int t_ClasspathResourceLoader_init_(t_ClasspathResourceLoader *self, PyObject *args, PyObject *kwds);
          static PyObject *t_ClasspathResourceLoader_findClass(t_ClasspathResourceLoader *self, PyObject *args);
          static PyObject *t_ClasspathResourceLoader_newInstance(t_ClasspathResourceLoader *self, PyObject *args);
          static PyObject *t_ClasspathResourceLoader_openResource(t_ClasspathResourceLoader *self, PyObject *arg);

          static PyMethodDef t_ClasspathResourceLoader__methods_[] = {
            DECLARE_METHOD(t_ClasspathResourceLoader, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ClasspathResourceLoader, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ClasspathResourceLoader, findClass, METH_VARARGS),
            DECLARE_METHOD(t_ClasspathResourceLoader, newInstance, METH_VARARGS),
            DECLARE_METHOD(t_ClasspathResourceLoader, openResource, METH_O),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(ClasspathResourceLoader, t_ClasspathResourceLoader, ::java::lang::Object, ClasspathResourceLoader, t_ClasspathResourceLoader_init_, 0, 0, 0, 0, 0);

          void t_ClasspathResourceLoader::install(PyObject *module)
          {
            installType(&PY_TYPE(ClasspathResourceLoader), module, "ClasspathResourceLoader", 0);
          }

          void t_ClasspathResourceLoader::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(ClasspathResourceLoader).tp_dict, "class_", make_descriptor(ClasspathResourceLoader::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(ClasspathResourceLoader).tp_dict, "wrapfn_", make_descriptor(t_ClasspathResourceLoader::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(ClasspathResourceLoader).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_ClasspathResourceLoader_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, ClasspathResourceLoader::initializeClass, 1)))
              return NULL;
            return t_ClasspathResourceLoader::wrap_Object(ClasspathResourceLoader(((t_ClasspathResourceLoader *) arg)->object.this$));
          }
          static PyObject *t_ClasspathResourceLoader_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, ClasspathResourceLoader::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_ClasspathResourceLoader_init_(t_ClasspathResourceLoader *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 0:
              {
                ClasspathResourceLoader object((jobject) NULL);

                INT_CALL(object = ClasspathResourceLoader());
                self->object = object;
                break;
              }
              goto err;
             case 1:
              {
                ::java::lang::Class a0((jobject) NULL);
                PyTypeObject **p0;
                ClasspathResourceLoader object((jobject) NULL);

                if (!parseArgs(args, "K", ::java::lang::Class::initializeClass, &a0, &p0, ::java::lang::t_Class::parameters_))
                {
                  INT_CALL(object = ClasspathResourceLoader(a0));
                  self->object = object;
                  break;
                }
              }
              {
                ::java::lang::ClassLoader a0((jobject) NULL);
                ClasspathResourceLoader object((jobject) NULL);

                if (!parseArgs(args, "k", ::java::lang::ClassLoader::initializeClass, &a0))
                {
                  INT_CALL(object = ClasspathResourceLoader(a0));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_ClasspathResourceLoader_findClass(t_ClasspathResourceLoader *self, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            ::java::lang::Class a1((jobject) NULL);
            PyTypeObject **p1;
            ::java::lang::Class result((jobject) NULL);

            if (!parseArgs(args, "sK", ::java::lang::Class::initializeClass, &a0, &a1, &p1, ::java::lang::t_Class::parameters_))
            {
              OBJ_CALL(result = self->object.findClass(a0, a1));
              return ::java::lang::t_Class::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "findClass", args);
            return NULL;
          }

          static PyObject *t_ClasspathResourceLoader_newInstance(t_ClasspathResourceLoader *self, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            ::java::lang::Class a1((jobject) NULL);
            PyTypeObject **p1;
            ::java::lang::Object result((jobject) NULL);

            if (!parseArgs(args, "sK", ::java::lang::Class::initializeClass, &a0, &a1, &p1, ::java::lang::t_Class::parameters_))
            {
              OBJ_CALL(result = self->object.newInstance(a0, a1));
              return ::java::lang::t_Object::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "newInstance", args);
            return NULL;
          }

          static PyObject *t_ClasspathResourceLoader_openResource(t_ClasspathResourceLoader *self, PyObject *arg)
          {
            ::java::lang::String a0((jobject) NULL);
            ::java::io::InputStream result((jobject) NULL);

            if (!parseArg(arg, "s", &a0))
            {
              OBJ_CALL(result = self->object.openResource(a0));
              return ::java::io::t_InputStream::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "openResource", arg);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/payloads/PayloadEncoder.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace payloads {

          ::java::lang::Class *PayloadEncoder::class$ = NULL;
          jmethodID *PayloadEncoder::mids$ = NULL;
          bool PayloadEncoder::live$ = false;

          jclass PayloadEncoder::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/payloads/PayloadEncoder");

              mids$ = new jmethodID[max_mid];
              mids$[mid_encode_09e96eed] = env->getMethodID(cls, "encode", "([C)Lorg/apache/lucene/util/BytesRef;");
              mids$[mid_encode_871544e1] = env->getMethodID(cls, "encode", "([CII)Lorg/apache/lucene/util/BytesRef;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ::org::apache::lucene::util::BytesRef PayloadEncoder::encode(const JArray< jchar > & a0) const
          {
            return ::org::apache::lucene::util::BytesRef(env->callObjectMethod(this$, mids$[mid_encode_09e96eed], a0.this$));
          }

          ::org::apache::lucene::util::BytesRef PayloadEncoder::encode(const JArray< jchar > & a0, jint a1, jint a2) const
          {
            return ::org::apache::lucene::util::BytesRef(env->callObjectMethod(this$, mids$[mid_encode_871544e1], a0.this$, a1, a2));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace payloads {
          static PyObject *t_PayloadEncoder_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PayloadEncoder_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PayloadEncoder_encode(t_PayloadEncoder *self, PyObject *args);

          static PyMethodDef t_PayloadEncoder__methods_[] = {
            DECLARE_METHOD(t_PayloadEncoder, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PayloadEncoder, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PayloadEncoder, encode, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(PayloadEncoder, t_PayloadEncoder, ::java::lang::Object, PayloadEncoder, abstract_init, 0, 0, 0, 0, 0);

          void t_PayloadEncoder::install(PyObject *module)
          {
            installType(&PY_TYPE(PayloadEncoder), module, "PayloadEncoder", 0);
          }

          void t_PayloadEncoder::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(PayloadEncoder).tp_dict, "class_", make_descriptor(PayloadEncoder::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(PayloadEncoder).tp_dict, "wrapfn_", make_descriptor(t_PayloadEncoder::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(PayloadEncoder).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_PayloadEncoder_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, PayloadEncoder::initializeClass, 1)))
              return NULL;
            return t_PayloadEncoder::wrap_Object(PayloadEncoder(((t_PayloadEncoder *) arg)->object.this$));
          }
          static PyObject *t_PayloadEncoder_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, PayloadEncoder::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_PayloadEncoder_encode(t_PayloadEncoder *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                JArray< jchar > a0((jobject) NULL);
                ::org::apache::lucene::util::BytesRef result((jobject) NULL);

                if (!parseArgs(args, "[C", &a0))
                {
                  OBJ_CALL(result = self->object.encode(a0));
                  return ::org::apache::lucene::util::t_BytesRef::wrap_Object(result);
                }
              }
              break;
             case 3:
              {
                JArray< jchar > a0((jobject) NULL);
                jint a1;
                jint a2;
                ::org::apache::lucene::util::BytesRef result((jobject) NULL);

                if (!parseArgs(args, "[CII", &a0, &a1, &a2))
                {
                  OBJ_CALL(result = self->object.encode(a0, a1, a2));
                  return ::org::apache::lucene::util::t_BytesRef::wrap_Object(result);
                }
              }
            }

            PyErr_SetArgsError((PyObject *) self, "encode", args);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/cn/ChineseAnalyzer.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace cn {

          ::java::lang::Class *ChineseAnalyzer::class$ = NULL;
          jmethodID *ChineseAnalyzer::mids$ = NULL;
          bool ChineseAnalyzer::live$ = false;

          jclass ChineseAnalyzer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/cn/ChineseAnalyzer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_createComponents_1be39cae] = env->getMethodID(cls, "createComponents", "(Ljava/lang/String;Ljava/io/Reader;)Lorg/apache/lucene/analysis/Analyzer$TokenStreamComponents;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ChineseAnalyzer::ChineseAnalyzer() : ::org::apache::lucene::analysis::Analyzer(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace cn {
          static PyObject *t_ChineseAnalyzer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_ChineseAnalyzer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_ChineseAnalyzer_init_(t_ChineseAnalyzer *self, PyObject *args, PyObject *kwds);

          static PyMethodDef t_ChineseAnalyzer__methods_[] = {
            DECLARE_METHOD(t_ChineseAnalyzer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ChineseAnalyzer, instance_, METH_O | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(ChineseAnalyzer, t_ChineseAnalyzer, ::org::apache::lucene::analysis::Analyzer, ChineseAnalyzer, t_ChineseAnalyzer_init_, 0, 0, 0, 0, 0);

          void t_ChineseAnalyzer::install(PyObject *module)
          {
            installType(&PY_TYPE(ChineseAnalyzer), module, "ChineseAnalyzer", 0);
          }

          void t_ChineseAnalyzer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(ChineseAnalyzer).tp_dict, "class_", make_descriptor(ChineseAnalyzer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(ChineseAnalyzer).tp_dict, "wrapfn_", make_descriptor(t_ChineseAnalyzer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(ChineseAnalyzer).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_ChineseAnalyzer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, ChineseAnalyzer::initializeClass, 1)))
              return NULL;
            return t_ChineseAnalyzer::wrap_Object(ChineseAnalyzer(((t_ChineseAnalyzer *) arg)->object.this$));
          }
          static PyObject *t_ChineseAnalyzer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, ChineseAnalyzer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_ChineseAnalyzer_init_(t_ChineseAnalyzer *self, PyObject *args, PyObject *kwds)
          {
            ChineseAnalyzer object((jobject) NULL);

            INT_CALL(object = ChineseAnalyzer());
            self->object = object;

            return 0;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "java/lang/Error.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace java {
  namespace lang {

    ::java::lang::Class *Error::class$ = NULL;
    jmethodID *Error::mids$ = NULL;
    bool Error::live$ = false;

    jclass Error::initializeClass(bool getOnly)
    {
      if (getOnly)
        return (jclass) (live$ ? class$->this$ : NULL);
      if (class$ == NULL)
      {
        jclass cls = (jclass) env->findClass("java/lang/Error");

        mids$ = new jmethodID[max_mid];
        mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
        mids$[mid_init$_c5ec8ca4] = env->getMethodID(cls, "<init>", "(Ljava/lang/Throwable;)V");
        mids$[mid_init$_5fdc3f48] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;)V");
        mids$[mid_init$_01646a2e] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Ljava/lang/Throwable;)V");

        class$ = (::java::lang::Class *) new JObject(cls);
        live$ = true;
      }
      return (jclass) class$->this$;
    }

    Error::Error() : ::java::lang::Throwable(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

    Error::Error(const ::java::lang::Throwable & a0) : ::java::lang::Throwable(env->newObject(initializeClass, &mids$, mid_init$_c5ec8ca4, a0.this$)) {}

    Error::Error(const ::java::lang::String & a0) : ::java::lang::Throwable(env->newObject(initializeClass, &mids$, mid_init$_5fdc3f48, a0.this$)) {}

    Error::Error(const ::java::lang::String & a0, const ::java::lang::Throwable & a1) : ::java::lang::Throwable(env->newObject(initializeClass, &mids$, mid_init$_01646a2e, a0.this$, a1.this$)) {}
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace java {
  namespace lang {
    static PyObject *t_Error_cast_(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Error_instance_(PyTypeObject *type, PyObject *arg);
    static int t_Error_init_(t_Error *self, PyObject *args, PyObject *kwds);

    static PyMethodDef t_Error__methods_[] = {
      DECLARE_METHOD(t_Error, cast_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Error, instance_, METH_O | METH_CLASS),
      { NULL, NULL, 0, NULL }
    };

    DECLARE_TYPE(Error, t_Error, ::java::lang::Throwable, Error, t_Error_init_, 0, 0, 0, 0, 0);

    void t_Error::install(PyObject *module)
    {
      installType(&PY_TYPE(Error), module, "Error", 0);
    }

    void t_Error::initialize(PyObject *module)
    {
      PyDict_SetItemString(PY_TYPE(Error).tp_dict, "class_", make_descriptor(Error::initializeClass, 1));
      PyDict_SetItemString(PY_TYPE(Error).tp_dict, "wrapfn_", make_descriptor(t_Error::wrap_jobject));
      PyDict_SetItemString(PY_TYPE(Error).tp_dict, "boxfn_", make_descriptor(boxObject));
    }

    static PyObject *t_Error_cast_(PyTypeObject *type, PyObject *arg)
    {
      if (!(arg = castCheck(arg, Error::initializeClass, 1)))
        return NULL;
      return t_Error::wrap_Object(Error(((t_Error *) arg)->object.this$));
    }
    static PyObject *t_Error_instance_(PyTypeObject *type, PyObject *arg)
    {
      if (!castCheck(arg, Error::initializeClass, 0))
        Py_RETURN_FALSE;
      Py_RETURN_TRUE;
    }

    static int t_Error_init_(t_Error *self, PyObject *args, PyObject *kwds)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 0:
        {
          Error object((jobject) NULL);

          INT_CALL(object = Error());
          self->object = object;
          break;
        }
        goto err;
       case 1:
        {
          ::java::lang::Throwable a0((jobject) NULL);
          Error object((jobject) NULL);

          if (!parseArgs(args, "k", ::java::lang::Throwable::initializeClass, &a0))
          {
            INT_CALL(object = Error(a0));
            self->object = object;
            break;
          }
        }
        {
          ::java::lang::String a0((jobject) NULL);
          Error object((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            INT_CALL(object = Error(a0));
            self->object = object;
            break;
          }
        }
        goto err;
       case 2:
        {
          ::java::lang::String a0((jobject) NULL);
          ::java::lang::Throwable a1((jobject) NULL);
          Error object((jobject) NULL);

          if (!parseArgs(args, "sk", ::java::lang::Throwable::initializeClass, &a0, &a1))
          {
            INT_CALL(object = Error(a0, a1));
            self->object = object;
            break;
          }
        }
       default:
       err:
        PyErr_SetArgsError((PyObject *) self, "__init__", args);
        return -1;
      }

      return 0;
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/pylucene/util/PythonSet.h"
#include "java/lang/Class.h"
#include "java/util/Iterator.h"
#include "java/util/Collection.h"
#include "java/util/Set.h"
#include "java/lang/Throwable.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace pylucene {
      namespace util {

        ::java::lang::Class *PythonSet::class$ = NULL;
        jmethodID *PythonSet::mids$ = NULL;
        bool PythonSet::live$ = false;

        jclass PythonSet::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/pylucene/util/PythonSet");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_add_290588e2] = env->getMethodID(cls, "add", "(Ljava/lang/Object;)Z");
            mids$[mid_addAll_9bfb3701] = env->getMethodID(cls, "addAll", "(Ljava/util/Collection;)Z");
            mids$[mid_clear_54c6a166] = env->getMethodID(cls, "clear", "()V");
            mids$[mid_contains_290588e2] = env->getMethodID(cls, "contains", "(Ljava/lang/Object;)Z");
            mids$[mid_containsAll_9bfb3701] = env->getMethodID(cls, "containsAll", "(Ljava/util/Collection;)Z");
            mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
            mids$[mid_finalize_54c6a166] = env->getMethodID(cls, "finalize", "()V");
            mids$[mid_isEmpty_54c6a16a] = env->getMethodID(cls, "isEmpty", "()Z");
            mids$[mid_iterator_40858c90] = env->getMethodID(cls, "iterator", "()Ljava/util/Iterator;");
            mids$[mid_pythonDecRef_54c6a166] = env->getMethodID(cls, "pythonDecRef", "()V");
            mids$[mid_pythonExtension_54c6a17a] = env->getMethodID(cls, "pythonExtension", "()J");
            mids$[mid_pythonExtension_0ee6df2f] = env->getMethodID(cls, "pythonExtension", "(J)V");
            mids$[mid_remove_290588e2] = env->getMethodID(cls, "remove", "(Ljava/lang/Object;)Z");
            mids$[mid_removeAll_9bfb3701] = env->getMethodID(cls, "removeAll", "(Ljava/util/Collection;)Z");
            mids$[mid_retainAll_9bfb3701] = env->getMethodID(cls, "retainAll", "(Ljava/util/Collection;)Z");
            mids$[mid_size_54c6a179] = env->getMethodID(cls, "size", "()I");
            mids$[mid_toArray_94e49c77] = env->getMethodID(cls, "toArray", "()[Ljava/lang/Object;");
            mids$[mid_toArray_ae67dbcf] = env->getMethodID(cls, "toArray", "([Ljava/lang/Object;)[Ljava/lang/Object;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        PythonSet::PythonSet() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        jboolean PythonSet::equals(const ::java::lang::Object & a0) const
        {
          return env->callNonvirtualBooleanMethod(this$, (jclass) ::java::lang::Object::class$->this$, ::java::lang::Object::mids$[::java::lang::Object::mid_equals_290588e2], a0.this$);
        }

        void PythonSet::finalize() const
        {
          env->callVoidMethod(this$, mids$[mid_finalize_54c6a166]);
        }

        jlong PythonSet::pythonExtension() const
        {
          return env->callLongMethod(this$, mids$[mid_pythonExtension_54c6a17a]);
        }

        void PythonSet::pythonExtension(jlong a0) const
        {
          env->callVoidMethod(this$, mids$[mid_pythonExtension_0ee6df2f], a0);
        }

        JArray< ::java::lang::Object > PythonSet::toArray(const JArray< ::java::lang::Object > & a0) const
        {
          return JArray< ::java::lang::Object >(env->callObjectMethod(this$, mids$[mid_toArray_ae67dbcf], a0.this$));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace pylucene {
      namespace util {
        static PyObject *t_PythonSet_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_PythonSet_instance_(PyTypeObject *type, PyObject *arg);
        static int t_PythonSet_init_(t_PythonSet *self, PyObject *args, PyObject *kwds);
        static PyObject *t_PythonSet_equals(t_PythonSet *self, PyObject *args);
        static PyObject *t_PythonSet_finalize(t_PythonSet *self);
        static PyObject *t_PythonSet_pythonExtension(t_PythonSet *self, PyObject *args);
        static PyObject *t_PythonSet_toArray(t_PythonSet *self, PyObject *arg);
        static jboolean JNICALL t_PythonSet_add0(JNIEnv *jenv, jobject jobj, jobject a0);
        static jboolean JNICALL t_PythonSet_addAll1(JNIEnv *jenv, jobject jobj, jobject a0);
        static void JNICALL t_PythonSet_clear2(JNIEnv *jenv, jobject jobj);
        static jboolean JNICALL t_PythonSet_contains3(JNIEnv *jenv, jobject jobj, jobject a0);
        static jboolean JNICALL t_PythonSet_containsAll4(JNIEnv *jenv, jobject jobj, jobject a0);
        static jboolean JNICALL t_PythonSet_equals5(JNIEnv *jenv, jobject jobj, jobject a0);
        static jboolean JNICALL t_PythonSet_isEmpty6(JNIEnv *jenv, jobject jobj);
        static jobject JNICALL t_PythonSet_iterator7(JNIEnv *jenv, jobject jobj);
        static void JNICALL t_PythonSet_pythonDecRef8(JNIEnv *jenv, jobject jobj);
        static jboolean JNICALL t_PythonSet_remove9(JNIEnv *jenv, jobject jobj, jobject a0);
        static jboolean JNICALL t_PythonSet_removeAll10(JNIEnv *jenv, jobject jobj, jobject a0);
        static jboolean JNICALL t_PythonSet_retainAll11(JNIEnv *jenv, jobject jobj, jobject a0);
        static jint JNICALL t_PythonSet_size12(JNIEnv *jenv, jobject jobj);
        static jobject JNICALL t_PythonSet_toArray13(JNIEnv *jenv, jobject jobj);
        static PyObject *t_PythonSet_get__self(t_PythonSet *self, void *data);
        static PyGetSetDef t_PythonSet__fields_[] = {
          DECLARE_GET_FIELD(t_PythonSet, self),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_PythonSet__methods_[] = {
          DECLARE_METHOD(t_PythonSet, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PythonSet, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PythonSet, equals, METH_VARARGS),
          DECLARE_METHOD(t_PythonSet, finalize, METH_NOARGS),
          DECLARE_METHOD(t_PythonSet, pythonExtension, METH_VARARGS),
          DECLARE_METHOD(t_PythonSet, toArray, METH_O),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(PythonSet, t_PythonSet, ::java::lang::Object, PythonSet, t_PythonSet_init_, get_extension_iterator, 0, t_PythonSet__fields_, 0, 0);

        void t_PythonSet::install(PyObject *module)
        {
          installType(&PY_TYPE(PythonSet), module, "PythonSet", 1);
        }

        void t_PythonSet::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(PythonSet).tp_dict, "class_", make_descriptor(PythonSet::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(PythonSet).tp_dict, "wrapfn_", make_descriptor(t_PythonSet::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(PythonSet).tp_dict, "boxfn_", make_descriptor(boxObject));
          jclass cls = env->getClass(PythonSet::initializeClass);
          JNINativeMethod methods[] = {
            { "add", "(Ljava/lang/Object;)Z", (void *) t_PythonSet_add0 },
            { "addAll", "(Ljava/util/Collection;)Z", (void *) t_PythonSet_addAll1 },
            { "clear", "()V", (void *) t_PythonSet_clear2 },
            { "contains", "(Ljava/lang/Object;)Z", (void *) t_PythonSet_contains3 },
            { "containsAll", "(Ljava/util/Collection;)Z", (void *) t_PythonSet_containsAll4 },
            { "equals", "(Ljava/lang/Object;)Z", (void *) t_PythonSet_equals5 },
            { "isEmpty", "()Z", (void *) t_PythonSet_isEmpty6 },
            { "iterator", "()Ljava/util/Iterator;", (void *) t_PythonSet_iterator7 },
            { "pythonDecRef", "()V", (void *) t_PythonSet_pythonDecRef8 },
            { "remove", "(Ljava/lang/Object;)Z", (void *) t_PythonSet_remove9 },
            { "removeAll", "(Ljava/util/Collection;)Z", (void *) t_PythonSet_removeAll10 },
            { "retainAll", "(Ljava/util/Collection;)Z", (void *) t_PythonSet_retainAll11 },
            { "size", "()I", (void *) t_PythonSet_size12 },
            { "toArray", "()[Ljava/lang/Object;", (void *) t_PythonSet_toArray13 },
          };
          env->registerNatives(cls, methods, 14);
        }

        static PyObject *t_PythonSet_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, PythonSet::initializeClass, 1)))
            return NULL;
          return t_PythonSet::wrap_Object(PythonSet(((t_PythonSet *) arg)->object.this$));
        }
        static PyObject *t_PythonSet_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, PythonSet::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_PythonSet_init_(t_PythonSet *self, PyObject *args, PyObject *kwds)
        {
          PythonSet object((jobject) NULL);

          INT_CALL(object = PythonSet());
          self->object = object;

          Py_INCREF((PyObject *) self);
          self->object.pythonExtension((jlong) (Py_intptr_t) (void *) self);

          return 0;
        }

        static PyObject *t_PythonSet_equals(t_PythonSet *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.equals(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(PythonSet), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_PythonSet_finalize(t_PythonSet *self)
        {
          OBJ_CALL(self->object.finalize());
          Py_RETURN_NONE;
        }

        static PyObject *t_PythonSet_pythonExtension(t_PythonSet *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 0:
            {
              jlong result;
              OBJ_CALL(result = self->object.pythonExtension());
              return PyLong_FromLongLong((PY_LONG_LONG) result);
            }
            break;
           case 1:
            {
              jlong a0;

              if (!parseArgs(args, "J", &a0))
              {
                OBJ_CALL(self->object.pythonExtension(a0));
                Py_RETURN_NONE;
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "pythonExtension", args);
          return NULL;
        }

        static PyObject *t_PythonSet_toArray(t_PythonSet *self, PyObject *arg)
        {
          JArray< ::java::lang::Object > a0((jobject) NULL);
          JArray< ::java::lang::Object > result((jobject) NULL);

          if (!parseArg(arg, "[o", &a0))
          {
            OBJ_CALL(result = self->object.toArray(a0));
            return JArray<jobject>(result.this$).wrap(::java::lang::t_Object::wrap_jobject);
          }

          PyErr_SetArgsError((PyObject *) self, "toArray", arg);
          return NULL;
        }

        static jboolean JNICALL t_PythonSet_add0(JNIEnv *jenv, jobject jobj, jobject a0)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonSet::mids$[PythonSet::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          jboolean value;
          PyObject *o0 = ::java::lang::t_Object::wrap_Object(::java::lang::Object(a0));
          PyObject *result = PyObject_CallMethod(obj, "add", "O", o0);
          Py_DECREF(o0);
          if (!result)
            throwPythonError();
          else if (parseArg(result, "Z", &value))
          {
            throwTypeError("add", result);
            Py_DECREF(result);
          }
          else
          {
            Py_DECREF(result);
            return value;
          }

          return (jboolean) 0;
        }

        static jboolean JNICALL t_PythonSet_addAll1(JNIEnv *jenv, jobject jobj, jobject a0)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonSet::mids$[PythonSet::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          jboolean value;
          PyObject *o0 = ::java::util::t_Collection::wrap_Object(::java::util::Collection(a0));
          PyObject *result = PyObject_CallMethod(obj, "addAll", "O", o0);
          Py_DECREF(o0);
          if (!result)
            throwPythonError();
          else if (parseArg(result, "Z", &value))
          {
            throwTypeError("addAll", result);
            Py_DECREF(result);
          }
          else
          {
            Py_DECREF(result);
            return value;
          }

          return (jboolean) 0;
        }

        static void JNICALL t_PythonSet_clear2(JNIEnv *jenv, jobject jobj)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonSet::mids$[PythonSet::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          PyObject *result = PyObject_CallMethod(obj, "clear", "");
          if (!result)
            throwPythonError();
          else
            Py_DECREF(result);
        }

        static jboolean JNICALL t_PythonSet_contains3(JNIEnv *jenv, jobject jobj, jobject a0)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonSet::mids$[PythonSet::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          jboolean value;
          PyObject *o0 = ::java::lang::t_Object::wrap_Object(::java::lang::Object(a0));
          PyObject *result = PyObject_CallMethod(obj, "contains", "O", o0);
          Py_DECREF(o0);
          if (!result)
            throwPythonError();
          else if (parseArg(result, "Z", &value))
          {
            throwTypeError("contains", result);
            Py_DECREF(result);
          }
          else
          {
            Py_DECREF(result);
            return value;
          }

          return (jboolean) 0;
        }

        static jboolean JNICALL t_PythonSet_containsAll4(JNIEnv *jenv, jobject jobj, jobject a0)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonSet::mids$[PythonSet::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          jboolean value;
          PyObject *o0 = ::java::util::t_Collection::wrap_Object(::java::util::Collection(a0));
          PyObject *result = PyObject_CallMethod(obj, "containsAll", "O", o0);
          Py_DECREF(o0);
          if (!result)
            throwPythonError();
          else if (parseArg(result, "Z", &value))
          {
            throwTypeError("containsAll", result);
            Py_DECREF(result);
          }
          else
          {
            Py_DECREF(result);
            return value;
          }

          return (jboolean) 0;
        }

        static jboolean JNICALL t_PythonSet_equals5(JNIEnv *jenv, jobject jobj, jobject a0)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonSet::mids$[PythonSet::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          jboolean value;
          PyObject *o0 = ::java::lang::t_Object::wrap_Object(::java::lang::Object(a0));
          PyObject *result = PyObject_CallMethod(obj, "equals", "O", o0);
          Py_DECREF(o0);
          if (!result)
            throwPythonError();
          else if (parseArg(result, "Z", &value))
          {
            throwTypeError("equals", result);
            Py_DECREF(result);
          }
          else
          {
            Py_DECREF(result);
            return value;
          }

          return (jboolean) 0;
        }

        static jboolean JNICALL t_PythonSet_isEmpty6(JNIEnv *jenv, jobject jobj)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonSet::mids$[PythonSet::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          jboolean value;
          PyObject *result = PyObject_CallMethod(obj, "isEmpty", "");
          if (!result)
            throwPythonError();
          else if (parseArg(result, "Z", &value))
          {
            throwTypeError("isEmpty", result);
            Py_DECREF(result);
          }
          else
          {
            Py_DECREF(result);
            return value;
          }

          return (jboolean) 0;
        }

        static jobject JNICALL t_PythonSet_iterator7(JNIEnv *jenv, jobject jobj)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonSet::mids$[PythonSet::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          ::java::util::Iterator value((jobject) NULL);
          PyObject *result = PyObject_CallMethod(obj, "iterator", "");
          if (!result)
            throwPythonError();
          else if (parseArg(result, "k", ::java::util::Iterator::initializeClass, &value))
          {
            throwTypeError("iterator", result);
            Py_DECREF(result);
          }
          else
          {
            jobj = jenv->NewLocalRef(value.this$);
            Py_DECREF(result);
            return jobj;
          }

          return (jobject) NULL;
        }

        static void JNICALL t_PythonSet_pythonDecRef8(JNIEnv *jenv, jobject jobj)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonSet::mids$[PythonSet::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;

          if (obj != NULL)
          {
            jenv->CallVoidMethod(jobj, PythonSet::mids$[PythonSet::mid_pythonExtension_0ee6df2f], (jlong) 0);
            env->finalizeObject(jenv, obj);
          }
        }

        static jboolean JNICALL t_PythonSet_remove9(JNIEnv *jenv, jobject jobj, jobject a0)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonSet::mids$[PythonSet::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          jboolean value;
          PyObject *o0 = ::java::lang::t_Object::wrap_Object(::java::lang::Object(a0));
          PyObject *result = PyObject_CallMethod(obj, "remove", "O", o0);
          Py_DECREF(o0);
          if (!result)
            throwPythonError();
          else if (parseArg(result, "Z", &value))
          {
            throwTypeError("remove", result);
            Py_DECREF(result);
          }
          else
          {
            Py_DECREF(result);
            return value;
          }

          return (jboolean) 0;
        }

        static jboolean JNICALL t_PythonSet_removeAll10(JNIEnv *jenv, jobject jobj, jobject a0)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonSet::mids$[PythonSet::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          jboolean value;
          PyObject *o0 = ::java::util::t_Collection::wrap_Object(::java::util::Collection(a0));
          PyObject *result = PyObject_CallMethod(obj, "removeAll", "O", o0);
          Py_DECREF(o0);
          if (!result)
            throwPythonError();
          else if (parseArg(result, "Z", &value))
          {
            throwTypeError("removeAll", result);
            Py_DECREF(result);
          }
          else
          {
            Py_DECREF(result);
            return value;
          }

          return (jboolean) 0;
        }

        static jboolean JNICALL t_PythonSet_retainAll11(JNIEnv *jenv, jobject jobj, jobject a0)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonSet::mids$[PythonSet::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          jboolean value;
          PyObject *o0 = ::java::util::t_Collection::wrap_Object(::java::util::Collection(a0));
          PyObject *result = PyObject_CallMethod(obj, "retainAll", "O", o0);
          Py_DECREF(o0);
          if (!result)
            throwPythonError();
          else if (parseArg(result, "Z", &value))
          {
            throwTypeError("retainAll", result);
            Py_DECREF(result);
          }
          else
          {
            Py_DECREF(result);
            return value;
          }

          return (jboolean) 0;
        }

        static jint JNICALL t_PythonSet_size12(JNIEnv *jenv, jobject jobj)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonSet::mids$[PythonSet::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          jint value;
          PyObject *result = PyObject_CallMethod(obj, "size", "");
          if (!result)
            throwPythonError();
          else if (parseArg(result, "I", &value))
          {
            throwTypeError("size", result);
            Py_DECREF(result);
          }
          else
          {
            Py_DECREF(result);
            return value;
          }

          return (jint) 0;
        }

        static jobject JNICALL t_PythonSet_toArray13(JNIEnv *jenv, jobject jobj)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonSet::mids$[PythonSet::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          JArray< ::java::lang::Object > value((jobject) NULL);
          PyObject *result = PyObject_CallMethod(obj, "toArray", "");
          if (!result)
            throwPythonError();
          else if (parseArg(result, "[o", &value))
          {
            throwTypeError("toArray", result);
            Py_DECREF(result);
          }
          else
          {
            jobj = jenv->NewLocalRef(value.this$);
            Py_DECREF(result);
            return jobj;
          }

          return (jobject) NULL;
        }

        static PyObject *t_PythonSet_get__self(t_PythonSet *self, void *data)
        {
          jlong ptr;
          OBJ_CALL(ptr = self->object.pythonExtension());
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;

          if (obj != NULL)
          {
            Py_INCREF(obj);
            return obj;
          }
          else
            Py_RETURN_NONE;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/expressions/js/JavascriptParser$bitwise_xor_return.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace expressions {
        namespace js {

          ::java::lang::Class *JavascriptParser$bitwise_xor_return::class$ = NULL;
          jmethodID *JavascriptParser$bitwise_xor_return::mids$ = NULL;
          bool JavascriptParser$bitwise_xor_return::live$ = false;

          jclass JavascriptParser$bitwise_xor_return::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/expressions/js/JavascriptParser$bitwise_xor_return");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          JavascriptParser$bitwise_xor_return::JavascriptParser$bitwise_xor_return() : ::org::antlr::runtime::ParserRuleReturnScope(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace expressions {
        namespace js {
          static PyObject *t_JavascriptParser$bitwise_xor_return_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_JavascriptParser$bitwise_xor_return_instance_(PyTypeObject *type, PyObject *arg);
          static int t_JavascriptParser$bitwise_xor_return_init_(t_JavascriptParser$bitwise_xor_return *self, PyObject *args, PyObject *kwds);

          static PyMethodDef t_JavascriptParser$bitwise_xor_return__methods_[] = {
            DECLARE_METHOD(t_JavascriptParser$bitwise_xor_return, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_JavascriptParser$bitwise_xor_return, instance_, METH_O | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(JavascriptParser$bitwise_xor_return, t_JavascriptParser$bitwise_xor_return, ::org::antlr::runtime::ParserRuleReturnScope, JavascriptParser$bitwise_xor_return, t_JavascriptParser$bitwise_xor_return_init_, 0, 0, 0, 0, 0);

          void t_JavascriptParser$bitwise_xor_return::install(PyObject *module)
          {
            installType(&PY_TYPE(JavascriptParser$bitwise_xor_return), module, "JavascriptParser$bitwise_xor_return", 0);
          }

          void t_JavascriptParser$bitwise_xor_return::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(JavascriptParser$bitwise_xor_return).tp_dict, "class_", make_descriptor(JavascriptParser$bitwise_xor_return::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(JavascriptParser$bitwise_xor_return).tp_dict, "wrapfn_", make_descriptor(t_JavascriptParser$bitwise_xor_return::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(JavascriptParser$bitwise_xor_return).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_JavascriptParser$bitwise_xor_return_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, JavascriptParser$bitwise_xor_return::initializeClass, 1)))
              return NULL;
            return t_JavascriptParser$bitwise_xor_return::wrap_Object(JavascriptParser$bitwise_xor_return(((t_JavascriptParser$bitwise_xor_return *) arg)->object.this$));
          }
          static PyObject *t_JavascriptParser$bitwise_xor_return_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, JavascriptParser$bitwise_xor_return::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_JavascriptParser$bitwise_xor_return_init_(t_JavascriptParser$bitwise_xor_return *self, PyObject *args, PyObject *kwds)
          {
            JavascriptParser$bitwise_xor_return object((jobject) NULL);

            INT_CALL(object = JavascriptParser$bitwise_xor_return());
            self->object = object;

            return 0;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/surround/parser/Token.h"
#include "java/io/Serializable.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace surround {
          namespace parser {

            ::java::lang::Class *Token::class$ = NULL;
            jmethodID *Token::mids$ = NULL;
            jfieldID *Token::fids$ = NULL;
            bool Token::live$ = false;

            jclass Token::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/surround/parser/Token");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
                mids$[mid_init$_39c7bd3c] = env->getMethodID(cls, "<init>", "(I)V");
                mids$[mid_init$_d40a4f2e] = env->getMethodID(cls, "<init>", "(ILjava/lang/String;)V");
                mids$[mid_getValue_846352c3] = env->getMethodID(cls, "getValue", "()Ljava/lang/Object;");
                mids$[mid_newToken_1162c488] = env->getStaticMethodID(cls, "newToken", "(I)Lorg/apache/lucene/queryparser/surround/parser/Token;");
                mids$[mid_newToken_b6d076fa] = env->getStaticMethodID(cls, "newToken", "(ILjava/lang/String;)Lorg/apache/lucene/queryparser/surround/parser/Token;");
                mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

                fids$ = new jfieldID[max_fid];
                fids$[fid_beginColumn] = env->getFieldID(cls, "beginColumn", "I");
                fids$[fid_beginLine] = env->getFieldID(cls, "beginLine", "I");
                fids$[fid_endColumn] = env->getFieldID(cls, "endColumn", "I");
                fids$[fid_endLine] = env->getFieldID(cls, "endLine", "I");
                fids$[fid_image] = env->getFieldID(cls, "image", "Ljava/lang/String;");
                fids$[fid_kind] = env->getFieldID(cls, "kind", "I");
                fids$[fid_next] = env->getFieldID(cls, "next", "Lorg/apache/lucene/queryparser/surround/parser/Token;");
                fids$[fid_specialToken] = env->getFieldID(cls, "specialToken", "Lorg/apache/lucene/queryparser/surround/parser/Token;");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            Token::Token() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

            Token::Token(jint a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_39c7bd3c, a0)) {}

            Token::Token(jint a0, const ::java::lang::String & a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_d40a4f2e, a0, a1.this$)) {}

            ::java::lang::Object Token::getValue() const
            {
              return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_getValue_846352c3]));
            }

            Token Token::newToken(jint a0)
            {
              jclass cls = env->getClass(initializeClass);
              return Token(env->callStaticObjectMethod(cls, mids$[mid_newToken_1162c488], a0));
            }

            Token Token::newToken(jint a0, const ::java::lang::String & a1)
            {
              jclass cls = env->getClass(initializeClass);
              return Token(env->callStaticObjectMethod(cls, mids$[mid_newToken_b6d076fa], a0, a1.this$));
            }

            ::java::lang::String Token::toString() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
            }

            jint Token::_get_beginColumn() const
            {
              return env->getIntField(this$, fids$[fid_beginColumn]);
            }

            void Token::_set_beginColumn(jint a0) const
            {
              env->setIntField(this$, fids$[fid_beginColumn], a0);
            }

            jint Token::_get_beginLine() const
            {
              return env->getIntField(this$, fids$[fid_beginLine]);
            }

            void Token::_set_beginLine(jint a0) const
            {
              env->setIntField(this$, fids$[fid_beginLine], a0);
            }

            jint Token::_get_endColumn() const
            {
              return env->getIntField(this$, fids$[fid_endColumn]);
            }

            void Token::_set_endColumn(jint a0) const
            {
              env->setIntField(this$, fids$[fid_endColumn], a0);
            }

            jint Token::_get_endLine() const
            {
              return env->getIntField(this$, fids$[fid_endLine]);
            }

            void Token::_set_endLine(jint a0) const
            {
              env->setIntField(this$, fids$[fid_endLine], a0);
            }

            ::java::lang::String Token::_get_image() const
            {
              return ::java::lang::String(env->getObjectField(this$, fids$[fid_image]));
            }

            void Token::_set_image(const ::java::lang::String & a0) const
            {
              env->setObjectField(this$, fids$[fid_image], a0.this$);
            }

            jint Token::_get_kind() const
            {
              return env->getIntField(this$, fids$[fid_kind]);
            }

            void Token::_set_kind(jint a0) const
            {
              env->setIntField(this$, fids$[fid_kind], a0);
            }

            Token Token::_get_next() const
            {
              return Token(env->getObjectField(this$, fids$[fid_next]));
            }

            void Token::_set_next(const Token & a0) const
            {
              env->setObjectField(this$, fids$[fid_next], a0.this$);
            }

            Token Token::_get_specialToken() const
            {
              return Token(env->getObjectField(this$, fids$[fid_specialToken]));
            }

            void Token::_set_specialToken(const Token & a0) const
            {
              env->setObjectField(this$, fids$[fid_specialToken], a0.this$);
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace surround {
          namespace parser {
            static PyObject *t_Token_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_Token_instance_(PyTypeObject *type, PyObject *arg);
            static int t_Token_init_(t_Token *self, PyObject *args, PyObject *kwds);
            static PyObject *t_Token_getValue(t_Token *self);
            static PyObject *t_Token_newToken(PyTypeObject *type, PyObject *args);
            static PyObject *t_Token_toString(t_Token *self, PyObject *args);
            static PyObject *t_Token_get__beginColumn(t_Token *self, void *data);
            static int t_Token_set__beginColumn(t_Token *self, PyObject *arg, void *data);
            static PyObject *t_Token_get__beginLine(t_Token *self, void *data);
            static int t_Token_set__beginLine(t_Token *self, PyObject *arg, void *data);
            static PyObject *t_Token_get__endColumn(t_Token *self, void *data);
            static int t_Token_set__endColumn(t_Token *self, PyObject *arg, void *data);
            static PyObject *t_Token_get__endLine(t_Token *self, void *data);
            static int t_Token_set__endLine(t_Token *self, PyObject *arg, void *data);
            static PyObject *t_Token_get__image(t_Token *self, void *data);
            static int t_Token_set__image(t_Token *self, PyObject *arg, void *data);
            static PyObject *t_Token_get__kind(t_Token *self, void *data);
            static int t_Token_set__kind(t_Token *self, PyObject *arg, void *data);
            static PyObject *t_Token_get__next(t_Token *self, void *data);
            static int t_Token_set__next(t_Token *self, PyObject *arg, void *data);
            static PyObject *t_Token_get__specialToken(t_Token *self, void *data);
            static int t_Token_set__specialToken(t_Token *self, PyObject *arg, void *data);

            static PyObject *t_Token_get__value(t_Token *self, void *data);
            static PyGetSetDef t_Token__fields_[] = {
              DECLARE_GETSET_FIELD(t_Token, beginColumn),
              DECLARE_GETSET_FIELD(t_Token, beginLine),
              DECLARE_GETSET_FIELD(t_Token, endColumn),
              DECLARE_GETSET_FIELD(t_Token, endLine),
              DECLARE_GETSET_FIELD(t_Token, image),
              DECLARE_GETSET_FIELD(t_Token, kind),
              DECLARE_GETSET_FIELD(t_Token, next),
              DECLARE_GETSET_FIELD(t_Token, specialToken),
              DECLARE_GET_FIELD(t_Token, value),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_Token__methods_[] = {
              DECLARE_METHOD(t_Token, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_Token, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_Token, getValue, METH_NOARGS),
              DECLARE_METHOD(t_Token, newToken, METH_VARARGS | METH_CLASS),
              DECLARE_METHOD(t_Token, toString, METH_VARARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(Token, t_Token, ::java::lang::Object, Token, t_Token_init_, 0, 0, t_Token__fields_, 0, 0);

            void t_Token::install(PyObject *module)
            {
              installType(&PY_TYPE(Token), module, "Token", 0);
            }

            void t_Token::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(Token).tp_dict, "class_", make_descriptor(Token::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(Token).tp_dict, "wrapfn_", make_descriptor(t_Token::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(Token).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_Token_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, Token::initializeClass, 1)))
                return NULL;
              return t_Token::wrap_Object(Token(((t_Token *) arg)->object.this$));
            }
            static PyObject *t_Token_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, Token::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_Token_init_(t_Token *self, PyObject *args, PyObject *kwds)
            {
              switch (PyTuple_GET_SIZE(args)) {
               case 0:
                {
                  Token object((jobject) NULL);

                  INT_CALL(object = Token());
                  self->object = object;
                  break;
                }
                goto err;
               case 1:
                {
                  jint a0;
                  Token object((jobject) NULL);

                  if (!parseArgs(args, "I", &a0))
                  {
                    INT_CALL(object = Token(a0));
                    self->object = object;
                    break;
                  }
                }
                goto err;
               case 2:
                {
                  jint a0;
                  ::java::lang::String a1((jobject) NULL);
                  Token object((jobject) NULL);

                  if (!parseArgs(args, "Is", &a0, &a1))
                  {
                    INT_CALL(object = Token(a0, a1));
                    self->object = object;
                    break;
                  }
                }
               default:
               err:
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_Token_getValue(t_Token *self)
            {
              ::java::lang::Object result((jobject) NULL);
              OBJ_CALL(result = self->object.getValue());
              return ::java::lang::t_Object::wrap_Object(result);
            }

            static PyObject *t_Token_newToken(PyTypeObject *type, PyObject *args)
            {
              switch (PyTuple_GET_SIZE(args)) {
               case 1:
                {
                  jint a0;
                  Token result((jobject) NULL);

                  if (!parseArgs(args, "I", &a0))
                  {
                    OBJ_CALL(result = ::org::apache::lucene::queryparser::surround::parser::Token::newToken(a0));
                    return t_Token::wrap_Object(result);
                  }
                }
                break;
               case 2:
                {
                  jint a0;
                  ::java::lang::String a1((jobject) NULL);
                  Token result((jobject) NULL);

                  if (!parseArgs(args, "Is", &a0, &a1))
                  {
                    OBJ_CALL(result = ::org::apache::lucene::queryparser::surround::parser::Token::newToken(a0, a1));
                    return t_Token::wrap_Object(result);
                  }
                }
              }

              PyErr_SetArgsError(type, "newToken", args);
              return NULL;
            }

            static PyObject *t_Token_toString(t_Token *self, PyObject *args)
            {
              ::java::lang::String result((jobject) NULL);

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.toString());
                return j2p(result);
              }

              return callSuper(&PY_TYPE(Token), (PyObject *) self, "toString", args, 2);
            }

            static PyObject *t_Token_get__beginColumn(t_Token *self, void *data)
            {
              jint value;
              OBJ_CALL(value = self->object._get_beginColumn());
              return PyInt_FromLong((long) value);
            }
            static int t_Token_set__beginColumn(t_Token *self, PyObject *arg, void *data)
            {
              jint value;
              if (!parseArg(arg, "I", &value))
              {
                INT_CALL(self->object._set_beginColumn(value));
                return 0;
              }
              PyErr_SetArgsError((PyObject *) self, "beginColumn", arg);
              return -1;
            }

            static PyObject *t_Token_get__beginLine(t_Token *self, void *data)
            {
              jint value;
              OBJ_CALL(value = self->object._get_beginLine());
              return PyInt_FromLong((long) value);
            }
            static int t_Token_set__beginLine(t_Token *self, PyObject *arg, void *data)
            {
              jint value;
              if (!parseArg(arg, "I", &value))
              {
                INT_CALL(self->object._set_beginLine(value));
                return 0;
              }
              PyErr_SetArgsError((PyObject *) self, "beginLine", arg);
              return -1;
            }

            static PyObject *t_Token_get__endColumn(t_Token *self, void *data)
            {
              jint value;
              OBJ_CALL(value = self->object._get_endColumn());
              return PyInt_FromLong((long) value);
            }
            static int t_Token_set__endColumn(t_Token *self, PyObject *arg, void *data)
            {
              jint value;
              if (!parseArg(arg, "I", &value))
              {
                INT_CALL(self->object._set_endColumn(value));
                return 0;
              }
              PyErr_SetArgsError((PyObject *) self, "endColumn", arg);
              return -1;
            }

            static PyObject *t_Token_get__endLine(t_Token *self, void *data)
            {
              jint value;
              OBJ_CALL(value = self->object._get_endLine());
              return PyInt_FromLong((long) value);
            }
            static int t_Token_set__endLine(t_Token *self, PyObject *arg, void *data)
            {
              jint value;
              if (!parseArg(arg, "I", &value))
              {
                INT_CALL(self->object._set_endLine(value));
                return 0;
              }
              PyErr_SetArgsError((PyObject *) self, "endLine", arg);
              return -1;
            }

            static PyObject *t_Token_get__image(t_Token *self, void *data)
            {
              ::java::lang::String value((jobject) NULL);
              OBJ_CALL(value = self->object._get_image());
              return j2p(value);
            }
            static int t_Token_set__image(t_Token *self, PyObject *arg, void *data)
            {
              ::java::lang::String value((jobject) NULL);
              if (!parseArg(arg, "s", &value))
              {
                INT_CALL(self->object._set_image(value));
                return 0;
              }
              PyErr_SetArgsError((PyObject *) self, "image", arg);
              return -1;
            }

            static PyObject *t_Token_get__kind(t_Token *self, void *data)
            {
              jint value;
              OBJ_CALL(value = self->object._get_kind());
              return PyInt_FromLong((long) value);
            }
            static int t_Token_set__kind(t_Token *self, PyObject *arg, void *data)
            {
              jint value;
              if (!parseArg(arg, "I", &value))
              {
                INT_CALL(self->object._set_kind(value));
                return 0;
              }
              PyErr_SetArgsError((PyObject *) self, "kind", arg);
              return -1;
            }

            static PyObject *t_Token_get__next(t_Token *self, void *data)
            {
              Token value((jobject) NULL);
              OBJ_CALL(value = self->object._get_next());
              return t_Token::wrap_Object(value);
            }
            static int t_Token_set__next(t_Token *self, PyObject *arg, void *data)
            {
              Token value((jobject) NULL);
              if (!parseArg(arg, "k", Token::initializeClass, &value))
              {
                INT_CALL(self->object._set_next(value));
                return 0;
              }
              PyErr_SetArgsError((PyObject *) self, "next", arg);
              return -1;
            }

            static PyObject *t_Token_get__specialToken(t_Token *self, void *data)
            {
              Token value((jobject) NULL);
              OBJ_CALL(value = self->object._get_specialToken());
              return t_Token::wrap_Object(value);
            }
            static int t_Token_set__specialToken(t_Token *self, PyObject *arg, void *data)
            {
              Token value((jobject) NULL);
              if (!parseArg(arg, "k", Token::initializeClass, &value))
              {
                INT_CALL(self->object._set_specialToken(value));
                return 0;
              }
              PyErr_SetArgsError((PyObject *) self, "specialToken", arg);
              return -1;
            }

            static PyObject *t_Token_get__value(t_Token *self, void *data)
            {
              ::java::lang::Object value((jobject) NULL);
              OBJ_CALL(value = self->object.getValue());
              return ::java::lang::t_Object::wrap_Object(value);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/facet/FacetField.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {

        ::java::lang::Class *FacetField::class$ = NULL;
        jmethodID *FacetField::mids$ = NULL;
        jfieldID *FacetField::fids$ = NULL;
        bool FacetField::live$ = false;

        jclass FacetField::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/facet/FacetField");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_ba45d66a] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;[Ljava/lang/String;)V");
            mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");
            mids$[mid_verifyLabel_5fdc3f48] = env->getStaticMethodID(cls, "verifyLabel", "(Ljava/lang/String;)V");

            fids$ = new jfieldID[max_fid];
            fids$[fid_dim] = env->getFieldID(cls, "dim", "Ljava/lang/String;");
            fids$[fid_path] = env->getFieldID(cls, "path", "[Ljava/lang/String;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        FacetField::FacetField(const ::java::lang::String & a0, const JArray< ::java::lang::String > & a1) : ::org::apache::lucene::document::Field(env->newObject(initializeClass, &mids$, mid_init$_ba45d66a, a0.this$, a1.this$)) {}

        ::java::lang::String FacetField::toString() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
        }

        void FacetField::verifyLabel(const ::java::lang::String & a0)
        {
          jclass cls = env->getClass(initializeClass);
          env->callStaticVoidMethod(cls, mids$[mid_verifyLabel_5fdc3f48], a0.this$);
        }

        ::java::lang::String FacetField::_get_dim() const
        {
          return ::java::lang::String(env->getObjectField(this$, fids$[fid_dim]));
        }

        JArray< ::java::lang::String > FacetField::_get_path() const
        {
          return JArray< ::java::lang::String >(env->getObjectField(this$, fids$[fid_path]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        static PyObject *t_FacetField_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FacetField_instance_(PyTypeObject *type, PyObject *arg);
        static int t_FacetField_init_(t_FacetField *self, PyObject *args, PyObject *kwds);
        static PyObject *t_FacetField_toString(t_FacetField *self, PyObject *args);
        static PyObject *t_FacetField_verifyLabel(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FacetField_get__dim(t_FacetField *self, void *data);
        static PyObject *t_FacetField_get__path(t_FacetField *self, void *data);

        static PyGetSetDef t_FacetField__fields_[] = {
          DECLARE_GET_FIELD(t_FacetField, dim),
          DECLARE_GET_FIELD(t_FacetField, path),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_FacetField__methods_[] = {
          DECLARE_METHOD(t_FacetField, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FacetField, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FacetField, toString, METH_VARARGS),
          DECLARE_METHOD(t_FacetField, verifyLabel, METH_O | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(FacetField, t_FacetField, ::org::apache::lucene::document::Field, FacetField, t_FacetField_init_, 0, 0, t_FacetField__fields_, 0, 0);

        void t_FacetField::install(PyObject *module)
        {
          installType(&PY_TYPE(FacetField), module, "FacetField", 0);
        }

        void t_FacetField::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(FacetField).tp_dict, "class_", make_descriptor(FacetField::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(FacetField).tp_dict, "wrapfn_", make_descriptor(t_FacetField::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(FacetField).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_FacetField_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, FacetField::initializeClass, 1)))
            return NULL;
          return t_FacetField::wrap_Object(FacetField(((t_FacetField *) arg)->object.this$));
        }
        static PyObject *t_FacetField_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, FacetField::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_FacetField_init_(t_FacetField *self, PyObject *args, PyObject *kwds)
        {
          ::java::lang::String a0((jobject) NULL);
          JArray< ::java::lang::String > a1((jobject) NULL);
          FacetField object((jobject) NULL);

          if (!parseArgs(args, "s[s", &a0, &a1))
          {
            INT_CALL(object = FacetField(a0, a1));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_FacetField_toString(t_FacetField *self, PyObject *args)
        {
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.toString());
            return j2p(result);
          }

          return callSuper(&PY_TYPE(FacetField), (PyObject *) self, "toString", args, 2);
        }

        static PyObject *t_FacetField_verifyLabel(PyTypeObject *type, PyObject *arg)
        {
          ::java::lang::String a0((jobject) NULL);

          if (!parseArg(arg, "s", &a0))
          {
            OBJ_CALL(::org::apache::lucene::facet::FacetField::verifyLabel(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError(type, "verifyLabel", arg);
          return NULL;
        }

        static PyObject *t_FacetField_get__dim(t_FacetField *self, void *data)
        {
          ::java::lang::String value((jobject) NULL);
          OBJ_CALL(value = self->object._get_dim());
          return j2p(value);
        }

        static PyObject *t_FacetField_get__path(t_FacetField *self, void *data)
        {
          JArray< ::java::lang::String > value((jobject) NULL);
          OBJ_CALL(value = self->object._get_path());
          return JArray<jstring>(value.this$).wrap();
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/grouping/AbstractSecondPassGroupingCollector.h"
#include "org/apache/lucene/search/grouping/SearchGroup.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/search/grouping/TopGroups.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "java/util/Collection.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/search/Sort.h"
#include "org/apache/lucene/search/Scorer.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace grouping {

          ::java::lang::Class *AbstractSecondPassGroupingCollector::class$ = NULL;
          jmethodID *AbstractSecondPassGroupingCollector::mids$ = NULL;
          bool AbstractSecondPassGroupingCollector::live$ = false;

          jclass AbstractSecondPassGroupingCollector::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/grouping/AbstractSecondPassGroupingCollector");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_e70f2194] = env->getMethodID(cls, "<init>", "(Ljava/util/Collection;Lorg/apache/lucene/search/Sort;Lorg/apache/lucene/search/Sort;IZZZ)V");
              mids$[mid_acceptsDocsOutOfOrder_54c6a16a] = env->getMethodID(cls, "acceptsDocsOutOfOrder", "()Z");
              mids$[mid_collect_39c7bd3c] = env->getMethodID(cls, "collect", "(I)V");
              mids$[mid_getTopGroups_f6dd2ce2] = env->getMethodID(cls, "getTopGroups", "(I)Lorg/apache/lucene/search/grouping/TopGroups;");
              mids$[mid_setNextReader_a6f59947] = env->getMethodID(cls, "setNextReader", "(Lorg/apache/lucene/index/AtomicReaderContext;)V");
              mids$[mid_setScorer_8be0880c] = env->getMethodID(cls, "setScorer", "(Lorg/apache/lucene/search/Scorer;)V");
              mids$[mid_retrieveGroup_e4de8d52] = env->getMethodID(cls, "retrieveGroup", "(I)Lorg/apache/lucene/search/grouping/AbstractSecondPassGroupingCollector$SearchGroupDocs;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          AbstractSecondPassGroupingCollector::AbstractSecondPassGroupingCollector(const ::java::util::Collection & a0, const ::org::apache::lucene::search::Sort & a1, const ::org::apache::lucene::search::Sort & a2, jint a3, jboolean a4, jboolean a5, jboolean a6) : ::org::apache::lucene::search::Collector(env->newObject(initializeClass, &mids$, mid_init$_e70f2194, a0.this$, a1.this$, a2.this$, a3, a4, a5, a6)) {}

          jboolean AbstractSecondPassGroupingCollector::acceptsDocsOutOfOrder() const
          {
            return env->callBooleanMethod(this$, mids$[mid_acceptsDocsOutOfOrder_54c6a16a]);
          }

          void AbstractSecondPassGroupingCollector::collect(jint a0) const
          {
            env->callVoidMethod(this$, mids$[mid_collect_39c7bd3c], a0);
          }

          ::org::apache::lucene::search::grouping::TopGroups AbstractSecondPassGroupingCollector::getTopGroups(jint a0) const
          {
            return ::org::apache::lucene::search::grouping::TopGroups(env->callObjectMethod(this$, mids$[mid_getTopGroups_f6dd2ce2], a0));
          }

          void AbstractSecondPassGroupingCollector::setNextReader(const ::org::apache::lucene::index::AtomicReaderContext & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setNextReader_a6f59947], a0.this$);
          }

          void AbstractSecondPassGroupingCollector::setScorer(const ::org::apache::lucene::search::Scorer & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setScorer_8be0880c], a0.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace grouping {
          static PyObject *t_AbstractSecondPassGroupingCollector_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_AbstractSecondPassGroupingCollector_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_AbstractSecondPassGroupingCollector_of_(t_AbstractSecondPassGroupingCollector *self, PyObject *args);
          static int t_AbstractSecondPassGroupingCollector_init_(t_AbstractSecondPassGroupingCollector *self, PyObject *args, PyObject *kwds);
          static PyObject *t_AbstractSecondPassGroupingCollector_acceptsDocsOutOfOrder(t_AbstractSecondPassGroupingCollector *self, PyObject *args);
          static PyObject *t_AbstractSecondPassGroupingCollector_collect(t_AbstractSecondPassGroupingCollector *self, PyObject *args);
          static PyObject *t_AbstractSecondPassGroupingCollector_getTopGroups(t_AbstractSecondPassGroupingCollector *self, PyObject *arg);
          static PyObject *t_AbstractSecondPassGroupingCollector_setNextReader(t_AbstractSecondPassGroupingCollector *self, PyObject *args);
          static PyObject *t_AbstractSecondPassGroupingCollector_setScorer(t_AbstractSecondPassGroupingCollector *self, PyObject *args);
          static int t_AbstractSecondPassGroupingCollector_set__nextReader(t_AbstractSecondPassGroupingCollector *self, PyObject *arg, void *data);
          static int t_AbstractSecondPassGroupingCollector_set__scorer(t_AbstractSecondPassGroupingCollector *self, PyObject *arg, void *data);
          static PyObject *t_AbstractSecondPassGroupingCollector_get__parameters_(t_AbstractSecondPassGroupingCollector *self, void *data);
          static PyGetSetDef t_AbstractSecondPassGroupingCollector__fields_[] = {
            DECLARE_SET_FIELD(t_AbstractSecondPassGroupingCollector, nextReader),
            DECLARE_SET_FIELD(t_AbstractSecondPassGroupingCollector, scorer),
            DECLARE_GET_FIELD(t_AbstractSecondPassGroupingCollector, parameters_),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_AbstractSecondPassGroupingCollector__methods_[] = {
            DECLARE_METHOD(t_AbstractSecondPassGroupingCollector, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_AbstractSecondPassGroupingCollector, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_AbstractSecondPassGroupingCollector, of_, METH_VARARGS),
            DECLARE_METHOD(t_AbstractSecondPassGroupingCollector, acceptsDocsOutOfOrder, METH_VARARGS),
            DECLARE_METHOD(t_AbstractSecondPassGroupingCollector, collect, METH_VARARGS),
            DECLARE_METHOD(t_AbstractSecondPassGroupingCollector, getTopGroups, METH_O),
            DECLARE_METHOD(t_AbstractSecondPassGroupingCollector, setNextReader, METH_VARARGS),
            DECLARE_METHOD(t_AbstractSecondPassGroupingCollector, setScorer, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(AbstractSecondPassGroupingCollector, t_AbstractSecondPassGroupingCollector, ::org::apache::lucene::search::Collector, AbstractSecondPassGroupingCollector, t_AbstractSecondPassGroupingCollector_init_, 0, 0, t_AbstractSecondPassGroupingCollector__fields_, 0, 0);
          PyObject *t_AbstractSecondPassGroupingCollector::wrap_Object(const AbstractSecondPassGroupingCollector& object, PyTypeObject *p0)
          {
            PyObject *obj = t_AbstractSecondPassGroupingCollector::wrap_Object(object);
            if (obj != NULL && obj != Py_None)
            {
              t_AbstractSecondPassGroupingCollector *self = (t_AbstractSecondPassGroupingCollector *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          PyObject *t_AbstractSecondPassGroupingCollector::wrap_jobject(const jobject& object, PyTypeObject *p0)
          {
            PyObject *obj = t_AbstractSecondPassGroupingCollector::wrap_jobject(object);
            if (obj != NULL && obj != Py_None)
            {
              t_AbstractSecondPassGroupingCollector *self = (t_AbstractSecondPassGroupingCollector *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          void t_AbstractSecondPassGroupingCollector::install(PyObject *module)
          {
            installType(&PY_TYPE(AbstractSecondPassGroupingCollector), module, "AbstractSecondPassGroupingCollector", 0);
          }

          void t_AbstractSecondPassGroupingCollector::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(AbstractSecondPassGroupingCollector).tp_dict, "class_", make_descriptor(AbstractSecondPassGroupingCollector::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(AbstractSecondPassGroupingCollector).tp_dict, "wrapfn_", make_descriptor(t_AbstractSecondPassGroupingCollector::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(AbstractSecondPassGroupingCollector).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_AbstractSecondPassGroupingCollector_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, AbstractSecondPassGroupingCollector::initializeClass, 1)))
              return NULL;
            return t_AbstractSecondPassGroupingCollector::wrap_Object(AbstractSecondPassGroupingCollector(((t_AbstractSecondPassGroupingCollector *) arg)->object.this$));
          }
          static PyObject *t_AbstractSecondPassGroupingCollector_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, AbstractSecondPassGroupingCollector::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_AbstractSecondPassGroupingCollector_of_(t_AbstractSecondPassGroupingCollector *self, PyObject *args)
          {
            if (!parseArg(args, "T", 1, &(self->parameters)))
              Py_RETURN_SELF;
            return PyErr_SetArgsError((PyObject *) self, "of_", args);
          }

          static int t_AbstractSecondPassGroupingCollector_init_(t_AbstractSecondPassGroupingCollector *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Collection a0((jobject) NULL);
            PyTypeObject **p0;
            ::org::apache::lucene::search::Sort a1((jobject) NULL);
            ::org::apache::lucene::search::Sort a2((jobject) NULL);
            jint a3;
            jboolean a4;
            jboolean a5;
            jboolean a6;
            AbstractSecondPassGroupingCollector object((jobject) NULL);

            if (!parseArgs(args, "KkkIZZZ", ::java::util::Collection::initializeClass, ::org::apache::lucene::search::Sort::initializeClass, ::org::apache::lucene::search::Sort::initializeClass, &a0, &p0, ::java::util::t_Collection::parameters_, &a1, &a2, &a3, &a4, &a5, &a6))
            {
              INT_CALL(object = AbstractSecondPassGroupingCollector(a0, a1, a2, a3, a4, a5, a6));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_AbstractSecondPassGroupingCollector_acceptsDocsOutOfOrder(t_AbstractSecondPassGroupingCollector *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.acceptsDocsOutOfOrder());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(AbstractSecondPassGroupingCollector), (PyObject *) self, "acceptsDocsOutOfOrder", args, 2);
          }

          static PyObject *t_AbstractSecondPassGroupingCollector_collect(t_AbstractSecondPassGroupingCollector *self, PyObject *args)
          {
            jint a0;

            if (!parseArgs(args, "I", &a0))
            {
              OBJ_CALL(self->object.collect(a0));
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(AbstractSecondPassGroupingCollector), (PyObject *) self, "collect", args, 2);
          }

          static PyObject *t_AbstractSecondPassGroupingCollector_getTopGroups(t_AbstractSecondPassGroupingCollector *self, PyObject *arg)
          {
            jint a0;
            ::org::apache::lucene::search::grouping::TopGroups result((jobject) NULL);

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(result = self->object.getTopGroups(a0));
              return ::org::apache::lucene::search::grouping::t_TopGroups::wrap_Object(result, self->parameters[0]);
            }

            PyErr_SetArgsError((PyObject *) self, "getTopGroups", arg);
            return NULL;
          }

          static PyObject *t_AbstractSecondPassGroupingCollector_setNextReader(t_AbstractSecondPassGroupingCollector *self, PyObject *args)
          {
            ::org::apache::lucene::index::AtomicReaderContext a0((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &a0))
            {
              OBJ_CALL(self->object.setNextReader(a0));
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(AbstractSecondPassGroupingCollector), (PyObject *) self, "setNextReader", args, 2);
          }

          static PyObject *t_AbstractSecondPassGroupingCollector_setScorer(t_AbstractSecondPassGroupingCollector *self, PyObject *args)
          {
            ::org::apache::lucene::search::Scorer a0((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::search::Scorer::initializeClass, &a0))
            {
              OBJ_CALL(self->object.setScorer(a0));
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(AbstractSecondPassGroupingCollector), (PyObject *) self, "setScorer", args, 2);
          }
          static PyObject *t_AbstractSecondPassGroupingCollector_get__parameters_(t_AbstractSecondPassGroupingCollector *self, void *data)
          {
            return typeParameters(self->parameters, sizeof(self->parameters));
          }

          static int t_AbstractSecondPassGroupingCollector_set__nextReader(t_AbstractSecondPassGroupingCollector *self, PyObject *arg, void *data)
          {
            {
              ::org::apache::lucene::index::AtomicReaderContext value((jobject) NULL);
              if (!parseArg(arg, "k", ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &value))
              {
                INT_CALL(self->object.setNextReader(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "nextReader", arg);
            return -1;
          }

          static int t_AbstractSecondPassGroupingCollector_set__scorer(t_AbstractSecondPassGroupingCollector *self, PyObject *arg, void *data)
          {
            {
              ::org::apache::lucene::search::Scorer value((jobject) NULL);
              if (!parseArg(arg, "k", ::org::apache::lucene::search::Scorer::initializeClass, &value))
              {
                INT_CALL(self->object.setScorer(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "scorer", arg);
            return -1;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/grouping/term/TermDistinctValuesCollector$GroupCount.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace grouping {
          namespace term {

            ::java::lang::Class *TermDistinctValuesCollector$GroupCount::class$ = NULL;
            jmethodID *TermDistinctValuesCollector$GroupCount::mids$ = NULL;
            bool TermDistinctValuesCollector$GroupCount::live$ = false;

            jclass TermDistinctValuesCollector$GroupCount::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/search/grouping/term/TermDistinctValuesCollector$GroupCount");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace grouping {
          namespace term {
            static PyObject *t_TermDistinctValuesCollector$GroupCount_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_TermDistinctValuesCollector$GroupCount_instance_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_TermDistinctValuesCollector$GroupCount_of_(t_TermDistinctValuesCollector$GroupCount *self, PyObject *args);
            static PyObject *t_TermDistinctValuesCollector$GroupCount_get__parameters_(t_TermDistinctValuesCollector$GroupCount *self, void *data);
            static PyGetSetDef t_TermDistinctValuesCollector$GroupCount__fields_[] = {
              DECLARE_GET_FIELD(t_TermDistinctValuesCollector$GroupCount, parameters_),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_TermDistinctValuesCollector$GroupCount__methods_[] = {
              DECLARE_METHOD(t_TermDistinctValuesCollector$GroupCount, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_TermDistinctValuesCollector$GroupCount, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_TermDistinctValuesCollector$GroupCount, of_, METH_VARARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(TermDistinctValuesCollector$GroupCount, t_TermDistinctValuesCollector$GroupCount, ::org::apache::lucene::search::grouping::AbstractDistinctValuesCollector$GroupCount, TermDistinctValuesCollector$GroupCount, abstract_init, 0, 0, t_TermDistinctValuesCollector$GroupCount__fields_, 0, 0);
            PyObject *t_TermDistinctValuesCollector$GroupCount::wrap_Object(const TermDistinctValuesCollector$GroupCount& object, PyTypeObject *p0)
            {
              PyObject *obj = t_TermDistinctValuesCollector$GroupCount::wrap_Object(object);
              if (obj != NULL && obj != Py_None)
              {
                t_TermDistinctValuesCollector$GroupCount *self = (t_TermDistinctValuesCollector$GroupCount *) obj;
                self->parameters[0] = p0;
              }
              return obj;
            }

            PyObject *t_TermDistinctValuesCollector$GroupCount::wrap_jobject(const jobject& object, PyTypeObject *p0)
            {
              PyObject *obj = t_TermDistinctValuesCollector$GroupCount::wrap_jobject(object);
              if (obj != NULL && obj != Py_None)
              {
                t_TermDistinctValuesCollector$GroupCount *self = (t_TermDistinctValuesCollector$GroupCount *) obj;
                self->parameters[0] = p0;
              }
              return obj;
            }

            void t_TermDistinctValuesCollector$GroupCount::install(PyObject *module)
            {
              installType(&PY_TYPE(TermDistinctValuesCollector$GroupCount), module, "TermDistinctValuesCollector$GroupCount", 0);
            }

            void t_TermDistinctValuesCollector$GroupCount::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(TermDistinctValuesCollector$GroupCount).tp_dict, "class_", make_descriptor(TermDistinctValuesCollector$GroupCount::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(TermDistinctValuesCollector$GroupCount).tp_dict, "wrapfn_", make_descriptor(t_TermDistinctValuesCollector$GroupCount::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(TermDistinctValuesCollector$GroupCount).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_TermDistinctValuesCollector$GroupCount_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, TermDistinctValuesCollector$GroupCount::initializeClass, 1)))
                return NULL;
              return t_TermDistinctValuesCollector$GroupCount::wrap_Object(TermDistinctValuesCollector$GroupCount(((t_TermDistinctValuesCollector$GroupCount *) arg)->object.this$));
            }
            static PyObject *t_TermDistinctValuesCollector$GroupCount_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, TermDistinctValuesCollector$GroupCount::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static PyObject *t_TermDistinctValuesCollector$GroupCount_of_(t_TermDistinctValuesCollector$GroupCount *self, PyObject *args)
            {
              if (!parseArg(args, "T", 1, &(self->parameters)))
                Py_RETURN_SELF;
              return PyErr_SetArgsError((PyObject *) self, "of_", args);
            }
            static PyObject *t_TermDistinctValuesCollector$GroupCount_get__parameters_(t_TermDistinctValuesCollector$GroupCount *self, void *data)
            {
              return typeParameters(self->parameters, sizeof(self->parameters));
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/document/LongDocValuesField.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace document {

        ::java::lang::Class *LongDocValuesField::class$ = NULL;
        jmethodID *LongDocValuesField::mids$ = NULL;
        bool LongDocValuesField::live$ = false;

        jclass LongDocValuesField::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/document/LongDocValuesField");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_4372eed5] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;J)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        LongDocValuesField::LongDocValuesField(const ::java::lang::String & a0, jlong a1) : ::org::apache::lucene::document::NumericDocValuesField(env->newObject(initializeClass, &mids$, mid_init$_4372eed5, a0.this$, a1)) {}
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace document {
        static PyObject *t_LongDocValuesField_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_LongDocValuesField_instance_(PyTypeObject *type, PyObject *arg);
        static int t_LongDocValuesField_init_(t_LongDocValuesField *self, PyObject *args, PyObject *kwds);

        static PyMethodDef t_LongDocValuesField__methods_[] = {
          DECLARE_METHOD(t_LongDocValuesField, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_LongDocValuesField, instance_, METH_O | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(LongDocValuesField, t_LongDocValuesField, ::org::apache::lucene::document::NumericDocValuesField, LongDocValuesField, t_LongDocValuesField_init_, 0, 0, 0, 0, 0);

        void t_LongDocValuesField::install(PyObject *module)
        {
          installType(&PY_TYPE(LongDocValuesField), module, "LongDocValuesField", 0);
        }

        void t_LongDocValuesField::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(LongDocValuesField).tp_dict, "class_", make_descriptor(LongDocValuesField::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(LongDocValuesField).tp_dict, "wrapfn_", make_descriptor(t_LongDocValuesField::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(LongDocValuesField).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_LongDocValuesField_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, LongDocValuesField::initializeClass, 1)))
            return NULL;
          return t_LongDocValuesField::wrap_Object(LongDocValuesField(((t_LongDocValuesField *) arg)->object.this$));
        }
        static PyObject *t_LongDocValuesField_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, LongDocValuesField::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_LongDocValuesField_init_(t_LongDocValuesField *self, PyObject *args, PyObject *kwds)
        {
          ::java::lang::String a0((jobject) NULL);
          jlong a1;
          LongDocValuesField object((jobject) NULL);

          if (!parseArgs(args, "sJ", &a0, &a1))
          {
            INT_CALL(object = LongDocValuesField(a0, a1));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/FieldComparator$ShortComparator.h"
#include "java/lang/Short.h"
#include "org/apache/lucene/search/FieldComparator.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *FieldComparator$ShortComparator::class$ = NULL;
        jmethodID *FieldComparator$ShortComparator::mids$ = NULL;
        bool FieldComparator$ShortComparator::live$ = false;

        jclass FieldComparator$ShortComparator::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/FieldComparator$ShortComparator");

            mids$ = new jmethodID[max_mid];
            mids$[mid_compare_d8d154b9] = env->getMethodID(cls, "compare", "(II)I");
            mids$[mid_compareBottom_39c7bd23] = env->getMethodID(cls, "compareBottom", "(I)I");
            mids$[mid_compareTop_39c7bd23] = env->getMethodID(cls, "compareTop", "(I)I");
            mids$[mid_copy_d8d154a6] = env->getMethodID(cls, "copy", "(II)V");
            mids$[mid_setBottom_39c7bd3c] = env->getMethodID(cls, "setBottom", "(I)V");
            mids$[mid_setNextReader_6329aed7] = env->getMethodID(cls, "setNextReader", "(Lorg/apache/lucene/index/AtomicReaderContext;)Lorg/apache/lucene/search/FieldComparator;");
            mids$[mid_setTopValue_6b8573ce] = env->getMethodID(cls, "setTopValue", "(Ljava/lang/Short;)V");
            mids$[mid_value_5bcaf269] = env->getMethodID(cls, "value", "(I)Ljava/lang/Short;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        jint FieldComparator$ShortComparator::compare(jint a0, jint a1) const
        {
          return env->callIntMethod(this$, mids$[mid_compare_d8d154b9], a0, a1);
        }

        jint FieldComparator$ShortComparator::compareBottom(jint a0) const
        {
          return env->callIntMethod(this$, mids$[mid_compareBottom_39c7bd23], a0);
        }

        jint FieldComparator$ShortComparator::compareTop(jint a0) const
        {
          return env->callIntMethod(this$, mids$[mid_compareTop_39c7bd23], a0);
        }

        void FieldComparator$ShortComparator::copy(jint a0, jint a1) const
        {
          env->callVoidMethod(this$, mids$[mid_copy_d8d154a6], a0, a1);
        }

        void FieldComparator$ShortComparator::setBottom(jint a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setBottom_39c7bd3c], a0);
        }

        ::org::apache::lucene::search::FieldComparator FieldComparator$ShortComparator::setNextReader(const ::org::apache::lucene::index::AtomicReaderContext & a0) const
        {
          return ::org::apache::lucene::search::FieldComparator(env->callObjectMethod(this$, mids$[mid_setNextReader_6329aed7], a0.this$));
        }

        void FieldComparator$ShortComparator::setTopValue(const ::java::lang::Short & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setTopValue_6b8573ce], a0.this$);
        }

        ::java::lang::Short FieldComparator$ShortComparator::value(jint a0) const
        {
          return ::java::lang::Short(env->callObjectMethod(this$, mids$[mid_value_5bcaf269], a0));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_FieldComparator$ShortComparator_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FieldComparator$ShortComparator_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FieldComparator$ShortComparator_of_(t_FieldComparator$ShortComparator *self, PyObject *args);
        static PyObject *t_FieldComparator$ShortComparator_compare(t_FieldComparator$ShortComparator *self, PyObject *args);
        static PyObject *t_FieldComparator$ShortComparator_compareBottom(t_FieldComparator$ShortComparator *self, PyObject *args);
        static PyObject *t_FieldComparator$ShortComparator_compareTop(t_FieldComparator$ShortComparator *self, PyObject *args);
        static PyObject *t_FieldComparator$ShortComparator_copy(t_FieldComparator$ShortComparator *self, PyObject *args);
        static PyObject *t_FieldComparator$ShortComparator_setBottom(t_FieldComparator$ShortComparator *self, PyObject *args);
        static PyObject *t_FieldComparator$ShortComparator_setNextReader(t_FieldComparator$ShortComparator *self, PyObject *args);
        static PyObject *t_FieldComparator$ShortComparator_setTopValue(t_FieldComparator$ShortComparator *self, PyObject *args);
        static PyObject *t_FieldComparator$ShortComparator_value(t_FieldComparator$ShortComparator *self, PyObject *args);
        static int t_FieldComparator$ShortComparator_set__bottom(t_FieldComparator$ShortComparator *self, PyObject *arg, void *data);
        static int t_FieldComparator$ShortComparator_set__nextReader(t_FieldComparator$ShortComparator *self, PyObject *arg, void *data);
        static int t_FieldComparator$ShortComparator_set__topValue(t_FieldComparator$ShortComparator *self, PyObject *arg, void *data);
        static PyObject *t_FieldComparator$ShortComparator_get__parameters_(t_FieldComparator$ShortComparator *self, void *data);
        static PyGetSetDef t_FieldComparator$ShortComparator__fields_[] = {
          DECLARE_SET_FIELD(t_FieldComparator$ShortComparator, bottom),
          DECLARE_SET_FIELD(t_FieldComparator$ShortComparator, nextReader),
          DECLARE_SET_FIELD(t_FieldComparator$ShortComparator, topValue),
          DECLARE_GET_FIELD(t_FieldComparator$ShortComparator, parameters_),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_FieldComparator$ShortComparator__methods_[] = {
          DECLARE_METHOD(t_FieldComparator$ShortComparator, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FieldComparator$ShortComparator, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FieldComparator$ShortComparator, of_, METH_VARARGS),
          DECLARE_METHOD(t_FieldComparator$ShortComparator, compare, METH_VARARGS),
          DECLARE_METHOD(t_FieldComparator$ShortComparator, compareBottom, METH_VARARGS),
          DECLARE_METHOD(t_FieldComparator$ShortComparator, compareTop, METH_VARARGS),
          DECLARE_METHOD(t_FieldComparator$ShortComparator, copy, METH_VARARGS),
          DECLARE_METHOD(t_FieldComparator$ShortComparator, setBottom, METH_VARARGS),
          DECLARE_METHOD(t_FieldComparator$ShortComparator, setNextReader, METH_VARARGS),
          DECLARE_METHOD(t_FieldComparator$ShortComparator, setTopValue, METH_VARARGS),
          DECLARE_METHOD(t_FieldComparator$ShortComparator, value, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(FieldComparator$ShortComparator, t_FieldComparator$ShortComparator, ::org::apache::lucene::search::FieldComparator$NumericComparator, FieldComparator$ShortComparator, abstract_init, 0, 0, t_FieldComparator$ShortComparator__fields_, 0, 0);
        PyObject *t_FieldComparator$ShortComparator::wrap_Object(const FieldComparator$ShortComparator& object, PyTypeObject *p0)
        {
          PyObject *obj = t_FieldComparator$ShortComparator::wrap_Object(object);
          if (obj != NULL && obj != Py_None)
          {
            t_FieldComparator$ShortComparator *self = (t_FieldComparator$ShortComparator *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        PyObject *t_FieldComparator$ShortComparator::wrap_jobject(const jobject& object, PyTypeObject *p0)
        {
          PyObject *obj = t_FieldComparator$ShortComparator::wrap_jobject(object);
          if (obj != NULL && obj != Py_None)
          {
            t_FieldComparator$ShortComparator *self = (t_FieldComparator$ShortComparator *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        void t_FieldComparator$ShortComparator::install(PyObject *module)
        {
          installType(&PY_TYPE(FieldComparator$ShortComparator), module, "FieldComparator$ShortComparator", 0);
        }

        void t_FieldComparator$ShortComparator::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(FieldComparator$ShortComparator).tp_dict, "class_", make_descriptor(FieldComparator$ShortComparator::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(FieldComparator$ShortComparator).tp_dict, "wrapfn_", make_descriptor(t_FieldComparator$ShortComparator::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(FieldComparator$ShortComparator).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_FieldComparator$ShortComparator_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, FieldComparator$ShortComparator::initializeClass, 1)))
            return NULL;
          return t_FieldComparator$ShortComparator::wrap_Object(FieldComparator$ShortComparator(((t_FieldComparator$ShortComparator *) arg)->object.this$));
        }
        static PyObject *t_FieldComparator$ShortComparator_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, FieldComparator$ShortComparator::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_FieldComparator$ShortComparator_of_(t_FieldComparator$ShortComparator *self, PyObject *args)
        {
          if (!parseArg(args, "T", 1, &(self->parameters)))
            Py_RETURN_SELF;
          return PyErr_SetArgsError((PyObject *) self, "of_", args);
        }

        static PyObject *t_FieldComparator$ShortComparator_compare(t_FieldComparator$ShortComparator *self, PyObject *args)
        {
          jint a0;
          jint a1;
          jint result;

          if (!parseArgs(args, "II", &a0, &a1))
          {
            OBJ_CALL(result = self->object.compare(a0, a1));
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(FieldComparator$ShortComparator), (PyObject *) self, "compare", args, 2);
        }

        static PyObject *t_FieldComparator$ShortComparator_compareBottom(t_FieldComparator$ShortComparator *self, PyObject *args)
        {
          jint a0;
          jint result;

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(result = self->object.compareBottom(a0));
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(FieldComparator$ShortComparator), (PyObject *) self, "compareBottom", args, 2);
        }

        static PyObject *t_FieldComparator$ShortComparator_compareTop(t_FieldComparator$ShortComparator *self, PyObject *args)
        {
          jint a0;
          jint result;

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(result = self->object.compareTop(a0));
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(FieldComparator$ShortComparator), (PyObject *) self, "compareTop", args, 2);
        }

        static PyObject *t_FieldComparator$ShortComparator_copy(t_FieldComparator$ShortComparator *self, PyObject *args)
        {
          jint a0;
          jint a1;

          if (!parseArgs(args, "II", &a0, &a1))
          {
            OBJ_CALL(self->object.copy(a0, a1));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(FieldComparator$ShortComparator), (PyObject *) self, "copy", args, 2);
        }

        static PyObject *t_FieldComparator$ShortComparator_setBottom(t_FieldComparator$ShortComparator *self, PyObject *args)
        {
          jint a0;

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(self->object.setBottom(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(FieldComparator$ShortComparator), (PyObject *) self, "setBottom", args, 2);
        }

        static PyObject *t_FieldComparator$ShortComparator_setNextReader(t_FieldComparator$ShortComparator *self, PyObject *args)
        {
          ::org::apache::lucene::index::AtomicReaderContext a0((jobject) NULL);
          ::org::apache::lucene::search::FieldComparator result((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.setNextReader(a0));
            return ::org::apache::lucene::search::t_FieldComparator::wrap_Object(result, &::java::lang::PY_TYPE(Short));
          }

          return callSuper(&PY_TYPE(FieldComparator$ShortComparator), (PyObject *) self, "setNextReader", args, 2);
        }

        static PyObject *t_FieldComparator$ShortComparator_setTopValue(t_FieldComparator$ShortComparator *self, PyObject *args)
        {
          ::java::lang::Short a0((jobject) NULL);

          if (!parseArgs(args, "O", &::java::lang::PY_TYPE(Short), &a0))
          {
            OBJ_CALL(self->object.setTopValue(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(FieldComparator$ShortComparator), (PyObject *) self, "setTopValue", args, 2);
        }

        static PyObject *t_FieldComparator$ShortComparator_value(t_FieldComparator$ShortComparator *self, PyObject *args)
        {
          jint a0;
          ::java::lang::Short result((jobject) NULL);

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(result = self->object.value(a0));
            return ::java::lang::t_Short::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(FieldComparator$ShortComparator), (PyObject *) self, "value", args, 2);
        }
        static PyObject *t_FieldComparator$ShortComparator_get__parameters_(t_FieldComparator$ShortComparator *self, void *data)
        {
          return typeParameters(self->parameters, sizeof(self->parameters));
        }

        static int t_FieldComparator$ShortComparator_set__bottom(t_FieldComparator$ShortComparator *self, PyObject *arg, void *data)
        {
          {
            jint value;
            if (!parseArg(arg, "I", &value))
            {
              INT_CALL(self->object.setBottom(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "bottom", arg);
          return -1;
        }

        static int t_FieldComparator$ShortComparator_set__nextReader(t_FieldComparator$ShortComparator *self, PyObject *arg, void *data)
        {
          {
            ::org::apache::lucene::index::AtomicReaderContext value((jobject) NULL);
            if (!parseArg(arg, "k", ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &value))
            {
              INT_CALL(self->object.setNextReader(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "nextReader", arg);
          return -1;
        }

        static int t_FieldComparator$ShortComparator_set__topValue(t_FieldComparator$ShortComparator *self, PyObject *arg, void *data)
        {
          {
            ::java::lang::Short value((jobject) NULL);
            if (!parseArg(arg, "O", &::java::lang::PY_TYPE(Short), &value))
            {
              INT_CALL(self->object.setTopValue(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "topValue", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/Sorter.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *Sorter::class$ = NULL;
        jmethodID *Sorter::mids$ = NULL;
        bool Sorter::live$ = false;

        jclass Sorter::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/Sorter");

            mids$ = new jmethodID[max_mid];
            mids$[mid_sort_d8d154a6] = env->getMethodID(cls, "sort", "(II)V");
            mids$[mid_compare_d8d154b9] = env->getMethodID(cls, "compare", "(II)I");
            mids$[mid_swap_d8d154a6] = env->getMethodID(cls, "swap", "(II)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        void Sorter::sort(jint a0, jint a1) const
        {
          env->callVoidMethod(this$, mids$[mid_sort_d8d154a6], a0, a1);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_Sorter_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_Sorter_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_Sorter_sort(t_Sorter *self, PyObject *args);

        static PyMethodDef t_Sorter__methods_[] = {
          DECLARE_METHOD(t_Sorter, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_Sorter, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_Sorter, sort, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(Sorter, t_Sorter, ::java::lang::Object, Sorter, abstract_init, 0, 0, 0, 0, 0);

        void t_Sorter::install(PyObject *module)
        {
          installType(&PY_TYPE(Sorter), module, "Sorter", 0);
        }

        void t_Sorter::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(Sorter).tp_dict, "class_", make_descriptor(Sorter::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(Sorter).tp_dict, "wrapfn_", make_descriptor(t_Sorter::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(Sorter).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_Sorter_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, Sorter::initializeClass, 1)))
            return NULL;
          return t_Sorter::wrap_Object(Sorter(((t_Sorter *) arg)->object.this$));
        }
        static PyObject *t_Sorter_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, Sorter::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_Sorter_sort(t_Sorter *self, PyObject *args)
        {
          jint a0;
          jint a1;

          if (!parseArgs(args, "II", &a0, &a1))
          {
            OBJ_CALL(self->object.sort(a0, a1));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "sort", args);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/LucenePackage.h"
#include "java/lang/Package.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {

      ::java::lang::Class *LucenePackage::class$ = NULL;
      jmethodID *LucenePackage::mids$ = NULL;
      bool LucenePackage::live$ = false;

      jclass LucenePackage::initializeClass(bool getOnly)
      {
        if (getOnly)
          return (jclass) (live$ ? class$->this$ : NULL);
        if (class$ == NULL)
        {
          jclass cls = (jclass) env->findClass("org/apache/lucene/LucenePackage");

          mids$ = new jmethodID[max_mid];
          mids$[mid_get_b0f2f7bb] = env->getStaticMethodID(cls, "get", "()Ljava/lang/Package;");

          class$ = (::java::lang::Class *) new JObject(cls);
          live$ = true;
        }
        return (jclass) class$->this$;
      }

      ::java::lang::Package LucenePackage::get()
      {
        jclass cls = env->getClass(initializeClass);
        return ::java::lang::Package(env->callStaticObjectMethod(cls, mids$[mid_get_b0f2f7bb]));
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      static PyObject *t_LucenePackage_cast_(PyTypeObject *type, PyObject *arg);
      static PyObject *t_LucenePackage_instance_(PyTypeObject *type, PyObject *arg);
      static PyObject *t_LucenePackage_get(PyTypeObject *type);

      static PyMethodDef t_LucenePackage__methods_[] = {
        DECLARE_METHOD(t_LucenePackage, cast_, METH_O | METH_CLASS),
        DECLARE_METHOD(t_LucenePackage, instance_, METH_O | METH_CLASS),
        DECLARE_METHOD(t_LucenePackage, get, METH_NOARGS | METH_CLASS),
        { NULL, NULL, 0, NULL }
      };

      DECLARE_TYPE(LucenePackage, t_LucenePackage, ::java::lang::Object, LucenePackage, abstract_init, 0, 0, 0, 0, 0);

      void t_LucenePackage::install(PyObject *module)
      {
        installType(&PY_TYPE(LucenePackage), module, "LucenePackage", 0);
      }

      void t_LucenePackage::initialize(PyObject *module)
      {
        PyDict_SetItemString(PY_TYPE(LucenePackage).tp_dict, "class_", make_descriptor(LucenePackage::initializeClass, 1));
        PyDict_SetItemString(PY_TYPE(LucenePackage).tp_dict, "wrapfn_", make_descriptor(t_LucenePackage::wrap_jobject));
        PyDict_SetItemString(PY_TYPE(LucenePackage).tp_dict, "boxfn_", make_descriptor(boxObject));
      }

      static PyObject *t_LucenePackage_cast_(PyTypeObject *type, PyObject *arg)
      {
        if (!(arg = castCheck(arg, LucenePackage::initializeClass, 1)))
          return NULL;
        return t_LucenePackage::wrap_Object(LucenePackage(((t_LucenePackage *) arg)->object.this$));
      }
      static PyObject *t_LucenePackage_instance_(PyTypeObject *type, PyObject *arg)
      {
        if (!castCheck(arg, LucenePackage::initializeClass, 0))
          Py_RETURN_FALSE;
        Py_RETURN_TRUE;
      }

      static PyObject *t_LucenePackage_get(PyTypeObject *type)
      {
        ::java::lang::Package result((jobject) NULL);
        OBJ_CALL(result = ::org::apache::lucene::LucenePackage::get());
        return ::java::lang::t_Package::wrap_Object(result);
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/ga/IrishAnalyzer.h"
#include "org/apache/lucene/util/Version.h"
#include "java/lang/String.h"
#include "org/apache/lucene/analysis/util/CharArraySet.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ga {

          ::java::lang::Class *IrishAnalyzer::class$ = NULL;
          jmethodID *IrishAnalyzer::mids$ = NULL;
          bool IrishAnalyzer::live$ = false;
          ::java::lang::String *IrishAnalyzer::DEFAULT_STOPWORD_FILE = NULL;

          jclass IrishAnalyzer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/ga/IrishAnalyzer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_0d96cf33] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;)V");
              mids$[mid_init$_83eafe28] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/analysis/util/CharArraySet;)V");
              mids$[mid_init$_c9d7e4a3] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/analysis/util/CharArraySet;Lorg/apache/lucene/analysis/util/CharArraySet;)V");
              mids$[mid_getDefaultStopSet_d2d3505c] = env->getStaticMethodID(cls, "getDefaultStopSet", "()Lorg/apache/lucene/analysis/util/CharArraySet;");
              mids$[mid_createComponents_1be39cae] = env->getMethodID(cls, "createComponents", "(Ljava/lang/String;Ljava/io/Reader;)Lorg/apache/lucene/analysis/Analyzer$TokenStreamComponents;");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              DEFAULT_STOPWORD_FILE = new ::java::lang::String(env->getStaticObjectField(cls, "DEFAULT_STOPWORD_FILE", "Ljava/lang/String;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          IrishAnalyzer::IrishAnalyzer(const ::org::apache::lucene::util::Version & a0) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_0d96cf33, a0.this$)) {}

          IrishAnalyzer::IrishAnalyzer(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::analysis::util::CharArraySet & a1) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_83eafe28, a0.this$, a1.this$)) {}

          IrishAnalyzer::IrishAnalyzer(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::analysis::util::CharArraySet & a1, const ::org::apache::lucene::analysis::util::CharArraySet & a2) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_c9d7e4a3, a0.this$, a1.this$, a2.this$)) {}

          ::org::apache::lucene::analysis::util::CharArraySet IrishAnalyzer::getDefaultStopSet()
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::analysis::util::CharArraySet(env->callStaticObjectMethod(cls, mids$[mid_getDefaultStopSet_d2d3505c]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ga {
          static PyObject *t_IrishAnalyzer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_IrishAnalyzer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_IrishAnalyzer_init_(t_IrishAnalyzer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_IrishAnalyzer_getDefaultStopSet(PyTypeObject *type);
          static PyObject *t_IrishAnalyzer_get__defaultStopSet(t_IrishAnalyzer *self, void *data);
          static PyGetSetDef t_IrishAnalyzer__fields_[] = {
            DECLARE_GET_FIELD(t_IrishAnalyzer, defaultStopSet),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_IrishAnalyzer__methods_[] = {
            DECLARE_METHOD(t_IrishAnalyzer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_IrishAnalyzer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_IrishAnalyzer, getDefaultStopSet, METH_NOARGS | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(IrishAnalyzer, t_IrishAnalyzer, ::org::apache::lucene::analysis::util::StopwordAnalyzerBase, IrishAnalyzer, t_IrishAnalyzer_init_, 0, 0, t_IrishAnalyzer__fields_, 0, 0);

          void t_IrishAnalyzer::install(PyObject *module)
          {
            installType(&PY_TYPE(IrishAnalyzer), module, "IrishAnalyzer", 0);
          }

          void t_IrishAnalyzer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(IrishAnalyzer).tp_dict, "class_", make_descriptor(IrishAnalyzer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(IrishAnalyzer).tp_dict, "wrapfn_", make_descriptor(t_IrishAnalyzer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(IrishAnalyzer).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(IrishAnalyzer::initializeClass);
            PyDict_SetItemString(PY_TYPE(IrishAnalyzer).tp_dict, "DEFAULT_STOPWORD_FILE", make_descriptor(j2p(*IrishAnalyzer::DEFAULT_STOPWORD_FILE)));
          }

          static PyObject *t_IrishAnalyzer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, IrishAnalyzer::initializeClass, 1)))
              return NULL;
            return t_IrishAnalyzer::wrap_Object(IrishAnalyzer(((t_IrishAnalyzer *) arg)->object.this$));
          }
          static PyObject *t_IrishAnalyzer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, IrishAnalyzer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_IrishAnalyzer_init_(t_IrishAnalyzer *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                IrishAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "K", ::org::apache::lucene::util::Version::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_))
                {
                  INT_CALL(object = IrishAnalyzer(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 2:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                ::org::apache::lucene::analysis::util::CharArraySet a1((jobject) NULL);
                PyTypeObject **p1;
                IrishAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "KK", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1, &p1, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_))
                {
                  INT_CALL(object = IrishAnalyzer(a0, a1));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 3:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                ::org::apache::lucene::analysis::util::CharArraySet a1((jobject) NULL);
                PyTypeObject **p1;
                ::org::apache::lucene::analysis::util::CharArraySet a2((jobject) NULL);
                PyTypeObject **p2;
                IrishAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "KKK", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1, &p1, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_, &a2, &p2, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_))
                {
                  INT_CALL(object = IrishAnalyzer(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_IrishAnalyzer_getDefaultStopSet(PyTypeObject *type)
          {
            ::org::apache::lucene::analysis::util::CharArraySet result((jobject) NULL);
            OBJ_CALL(result = ::org::apache::lucene::analysis::ga::IrishAnalyzer::getDefaultStopSet());
            return ::org::apache::lucene::analysis::util::t_CharArraySet::wrap_Object(result);
          }

          static PyObject *t_IrishAnalyzer_get__defaultStopSet(t_IrishAnalyzer *self, void *data)
          {
            ::org::apache::lucene::analysis::util::CharArraySet value((jobject) NULL);
            OBJ_CALL(value = self->object.getDefaultStopSet());
            return ::org::apache::lucene::analysis::util::t_CharArraySet::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/fr/FrenchStemFilter.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "org/apache/lucene/analysis/fr/FrenchStemmer.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace fr {

          ::java::lang::Class *FrenchStemFilter::class$ = NULL;
          jmethodID *FrenchStemFilter::mids$ = NULL;
          bool FrenchStemFilter::live$ = false;

          jclass FrenchStemFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/fr/FrenchStemFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_c7c794dc] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;)V");
              mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");
              mids$[mid_setStemmer_d53125fa] = env->getMethodID(cls, "setStemmer", "(Lorg/apache/lucene/analysis/fr/FrenchStemmer;)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          FrenchStemFilter::FrenchStemFilter(const ::org::apache::lucene::analysis::TokenStream & a0) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_c7c794dc, a0.this$)) {}

          jboolean FrenchStemFilter::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_54c6a16a]);
          }

          void FrenchStemFilter::setStemmer(const ::org::apache::lucene::analysis::fr::FrenchStemmer & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setStemmer_d53125fa], a0.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace fr {
          static PyObject *t_FrenchStemFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_FrenchStemFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_FrenchStemFilter_init_(t_FrenchStemFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_FrenchStemFilter_incrementToken(t_FrenchStemFilter *self, PyObject *args);
          static PyObject *t_FrenchStemFilter_setStemmer(t_FrenchStemFilter *self, PyObject *arg);
          static int t_FrenchStemFilter_set__stemmer(t_FrenchStemFilter *self, PyObject *arg, void *data);
          static PyGetSetDef t_FrenchStemFilter__fields_[] = {
            DECLARE_SET_FIELD(t_FrenchStemFilter, stemmer),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_FrenchStemFilter__methods_[] = {
            DECLARE_METHOD(t_FrenchStemFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FrenchStemFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FrenchStemFilter, incrementToken, METH_VARARGS),
            DECLARE_METHOD(t_FrenchStemFilter, setStemmer, METH_O),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(FrenchStemFilter, t_FrenchStemFilter, ::org::apache::lucene::analysis::TokenFilter, FrenchStemFilter, t_FrenchStemFilter_init_, 0, 0, t_FrenchStemFilter__fields_, 0, 0);

          void t_FrenchStemFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(FrenchStemFilter), module, "FrenchStemFilter", 0);
          }

          void t_FrenchStemFilter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(FrenchStemFilter).tp_dict, "class_", make_descriptor(FrenchStemFilter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(FrenchStemFilter).tp_dict, "wrapfn_", make_descriptor(t_FrenchStemFilter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(FrenchStemFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_FrenchStemFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, FrenchStemFilter::initializeClass, 1)))
              return NULL;
            return t_FrenchStemFilter::wrap_Object(FrenchStemFilter(((t_FrenchStemFilter *) arg)->object.this$));
          }
          static PyObject *t_FrenchStemFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, FrenchStemFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_FrenchStemFilter_init_(t_FrenchStemFilter *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            FrenchStemFilter object((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              INT_CALL(object = FrenchStemFilter(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_FrenchStemFilter_incrementToken(t_FrenchStemFilter *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(FrenchStemFilter), (PyObject *) self, "incrementToken", args, 2);
          }

          static PyObject *t_FrenchStemFilter_setStemmer(t_FrenchStemFilter *self, PyObject *arg)
          {
            ::org::apache::lucene::analysis::fr::FrenchStemmer a0((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::analysis::fr::FrenchStemmer::initializeClass, &a0))
            {
              OBJ_CALL(self->object.setStemmer(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setStemmer", arg);
            return NULL;
          }

          static int t_FrenchStemFilter_set__stemmer(t_FrenchStemFilter *self, PyObject *arg, void *data)
          {
            {
              ::org::apache::lucene::analysis::fr::FrenchStemmer value((jobject) NULL);
              if (!parseArg(arg, "k", ::org::apache::lucene::analysis::fr::FrenchStemmer::initializeClass, &value))
              {
                INT_CALL(self->object.setStemmer(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "stemmer", arg);
            return -1;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/mutable/MutableValueFloat.h"
#include "java/lang/Object.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace mutable$ {

          ::java::lang::Class *MutableValueFloat::class$ = NULL;
          jmethodID *MutableValueFloat::mids$ = NULL;
          jfieldID *MutableValueFloat::fids$ = NULL;
          bool MutableValueFloat::live$ = false;

          jclass MutableValueFloat::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/util/mutable/MutableValueFloat");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_compareSameType_290588f1] = env->getMethodID(cls, "compareSameType", "(Ljava/lang/Object;)I");
              mids$[mid_copy_d590ce7c] = env->getMethodID(cls, "copy", "(Lorg/apache/lucene/util/mutable/MutableValue;)V");
              mids$[mid_duplicate_15ab3811] = env->getMethodID(cls, "duplicate", "()Lorg/apache/lucene/util/mutable/MutableValue;");
              mids$[mid_equalsSameType_290588e2] = env->getMethodID(cls, "equalsSameType", "(Ljava/lang/Object;)Z");
              mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
              mids$[mid_toObject_846352c3] = env->getMethodID(cls, "toObject", "()Ljava/lang/Object;");

              fids$ = new jfieldID[max_fid];
              fids$[fid_value] = env->getFieldID(cls, "value", "F");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          MutableValueFloat::MutableValueFloat() : ::org::apache::lucene::util::mutable$::MutableValue(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          jint MutableValueFloat::compareSameType(const ::java::lang::Object & a0) const
          {
            return env->callIntMethod(this$, mids$[mid_compareSameType_290588f1], a0.this$);
          }

          void MutableValueFloat::copy(const ::org::apache::lucene::util::mutable$::MutableValue & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_copy_d590ce7c], a0.this$);
          }

          ::org::apache::lucene::util::mutable$::MutableValue MutableValueFloat::duplicate() const
          {
            return ::org::apache::lucene::util::mutable$::MutableValue(env->callObjectMethod(this$, mids$[mid_duplicate_15ab3811]));
          }

          jboolean MutableValueFloat::equalsSameType(const ::java::lang::Object & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_equalsSameType_290588e2], a0.this$);
          }

          jint MutableValueFloat::hashCode() const
          {
            return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
          }

          ::java::lang::Object MutableValueFloat::toObject() const
          {
            return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_toObject_846352c3]));
          }

          jfloat MutableValueFloat::_get_value() const
          {
            return env->getFloatField(this$, fids$[fid_value]);
          }

          void MutableValueFloat::_set_value(jfloat a0) const
          {
            env->setFloatField(this$, fids$[fid_value], a0);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace mutable$ {
          static PyObject *t_MutableValueFloat_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_MutableValueFloat_instance_(PyTypeObject *type, PyObject *arg);
          static int t_MutableValueFloat_init_(t_MutableValueFloat *self, PyObject *args, PyObject *kwds);
          static PyObject *t_MutableValueFloat_compareSameType(t_MutableValueFloat *self, PyObject *args);
          static PyObject *t_MutableValueFloat_copy(t_MutableValueFloat *self, PyObject *args);
          static PyObject *t_MutableValueFloat_duplicate(t_MutableValueFloat *self, PyObject *args);
          static PyObject *t_MutableValueFloat_equalsSameType(t_MutableValueFloat *self, PyObject *args);
          static PyObject *t_MutableValueFloat_hashCode(t_MutableValueFloat *self, PyObject *args);
          static PyObject *t_MutableValueFloat_toObject(t_MutableValueFloat *self, PyObject *args);
          static PyObject *t_MutableValueFloat_get__value(t_MutableValueFloat *self, void *data);
          static int t_MutableValueFloat_set__value(t_MutableValueFloat *self, PyObject *arg, void *data);

          static PyGetSetDef t_MutableValueFloat__fields_[] = {
            DECLARE_GETSET_FIELD(t_MutableValueFloat, value),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_MutableValueFloat__methods_[] = {
            DECLARE_METHOD(t_MutableValueFloat, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_MutableValueFloat, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_MutableValueFloat, compareSameType, METH_VARARGS),
            DECLARE_METHOD(t_MutableValueFloat, copy, METH_VARARGS),
            DECLARE_METHOD(t_MutableValueFloat, duplicate, METH_VARARGS),
            DECLARE_METHOD(t_MutableValueFloat, equalsSameType, METH_VARARGS),
            DECLARE_METHOD(t_MutableValueFloat, hashCode, METH_VARARGS),
            DECLARE_METHOD(t_MutableValueFloat, toObject, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(MutableValueFloat, t_MutableValueFloat, ::org::apache::lucene::util::mutable$::MutableValue, MutableValueFloat, t_MutableValueFloat_init_, 0, 0, t_MutableValueFloat__fields_, 0, 0);

          void t_MutableValueFloat::install(PyObject *module)
          {
            installType(&PY_TYPE(MutableValueFloat), module, "MutableValueFloat", 0);
          }

          void t_MutableValueFloat::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(MutableValueFloat).tp_dict, "class_", make_descriptor(MutableValueFloat::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(MutableValueFloat).tp_dict, "wrapfn_", make_descriptor(t_MutableValueFloat::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(MutableValueFloat).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_MutableValueFloat_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, MutableValueFloat::initializeClass, 1)))
              return NULL;
            return t_MutableValueFloat::wrap_Object(MutableValueFloat(((t_MutableValueFloat *) arg)->object.this$));
          }
          static PyObject *t_MutableValueFloat_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, MutableValueFloat::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_MutableValueFloat_init_(t_MutableValueFloat *self, PyObject *args, PyObject *kwds)
          {
            MutableValueFloat object((jobject) NULL);

            INT_CALL(object = MutableValueFloat());
            self->object = object;

            return 0;
          }

          static PyObject *t_MutableValueFloat_compareSameType(t_MutableValueFloat *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            jint result;

            if (!parseArgs(args, "o", &a0))
            {
              OBJ_CALL(result = self->object.compareSameType(a0));
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(MutableValueFloat), (PyObject *) self, "compareSameType", args, 2);
          }

          static PyObject *t_MutableValueFloat_copy(t_MutableValueFloat *self, PyObject *args)
          {
            ::org::apache::lucene::util::mutable$::MutableValue a0((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::util::mutable$::MutableValue::initializeClass, &a0))
            {
              OBJ_CALL(self->object.copy(a0));
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(MutableValueFloat), (PyObject *) self, "copy", args, 2);
          }

          static PyObject *t_MutableValueFloat_duplicate(t_MutableValueFloat *self, PyObject *args)
          {
            ::org::apache::lucene::util::mutable$::MutableValue result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.duplicate());
              return ::org::apache::lucene::util::mutable$::t_MutableValue::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(MutableValueFloat), (PyObject *) self, "duplicate", args, 2);
          }

          static PyObject *t_MutableValueFloat_equalsSameType(t_MutableValueFloat *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            jboolean result;

            if (!parseArgs(args, "o", &a0))
            {
              OBJ_CALL(result = self->object.equalsSameType(a0));
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(MutableValueFloat), (PyObject *) self, "equalsSameType", args, 2);
          }

          static PyObject *t_MutableValueFloat_hashCode(t_MutableValueFloat *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.hashCode());
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(MutableValueFloat), (PyObject *) self, "hashCode", args, 2);
          }

          static PyObject *t_MutableValueFloat_toObject(t_MutableValueFloat *self, PyObject *args)
          {
            ::java::lang::Object result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toObject());
              return ::java::lang::t_Object::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(MutableValueFloat), (PyObject *) self, "toObject", args, 2);
          }

          static PyObject *t_MutableValueFloat_get__value(t_MutableValueFloat *self, void *data)
          {
            jfloat value;
            OBJ_CALL(value = self->object._get_value());
            return PyFloat_FromDouble((double) value);
          }
          static int t_MutableValueFloat_set__value(t_MutableValueFloat *self, PyObject *arg, void *data)
          {
            jfloat value;
            if (!parseArg(arg, "F", &value))
            {
              INT_CALL(self->object._set_value(value));
              return 0;
            }
            PyErr_SetArgsError((PyObject *) self, "value", arg);
            return -1;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/standard/QueryParserUtil.h"
#include "org/apache/lucene/search/BooleanClause$Occur.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/queryparser/flexible/core/QueryNodeException.h"
#include "org/apache/lucene/analysis/Analyzer.h"
#include "java/lang/String.h"
#include "org/apache/lucene/search/Query.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {

            ::java::lang::Class *QueryParserUtil::class$ = NULL;
            jmethodID *QueryParserUtil::mids$ = NULL;
            bool QueryParserUtil::live$ = false;

            jclass QueryParserUtil::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/standard/QueryParserUtil");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
                mids$[mid_escape_97a5258f] = env->getStaticMethodID(cls, "escape", "(Ljava/lang/String;)Ljava/lang/String;");
                mids$[mid_parse_79a3f5c4] = env->getStaticMethodID(cls, "parse", "([Ljava/lang/String;[Ljava/lang/String;Lorg/apache/lucene/analysis/Analyzer;)Lorg/apache/lucene/search/Query;");
                mids$[mid_parse_084a531a] = env->getStaticMethodID(cls, "parse", "([Ljava/lang/String;[Ljava/lang/String;[Lorg/apache/lucene/search/BooleanClause$Occur;Lorg/apache/lucene/analysis/Analyzer;)Lorg/apache/lucene/search/Query;");
                mids$[mid_parse_046ef74e] = env->getStaticMethodID(cls, "parse", "(Ljava/lang/String;[Ljava/lang/String;[Lorg/apache/lucene/search/BooleanClause$Occur;Lorg/apache/lucene/analysis/Analyzer;)Lorg/apache/lucene/search/Query;");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            QueryParserUtil::QueryParserUtil() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

            ::java::lang::String QueryParserUtil::escape(const ::java::lang::String & a0)
            {
              jclass cls = env->getClass(initializeClass);
              return ::java::lang::String(env->callStaticObjectMethod(cls, mids$[mid_escape_97a5258f], a0.this$));
            }

            ::org::apache::lucene::search::Query QueryParserUtil::parse(const JArray< ::java::lang::String > & a0, const JArray< ::java::lang::String > & a1, const ::org::apache::lucene::analysis::Analyzer & a2)
            {
              jclass cls = env->getClass(initializeClass);
              return ::org::apache::lucene::search::Query(env->callStaticObjectMethod(cls, mids$[mid_parse_79a3f5c4], a0.this$, a1.this$, a2.this$));
            }

            ::org::apache::lucene::search::Query QueryParserUtil::parse(const JArray< ::java::lang::String > & a0, const JArray< ::java::lang::String > & a1, const JArray< ::org::apache::lucene::search::BooleanClause$Occur > & a2, const ::org::apache::lucene::analysis::Analyzer & a3)
            {
              jclass cls = env->getClass(initializeClass);
              return ::org::apache::lucene::search::Query(env->callStaticObjectMethod(cls, mids$[mid_parse_084a531a], a0.this$, a1.this$, a2.this$, a3.this$));
            }

            ::org::apache::lucene::search::Query QueryParserUtil::parse(const ::java::lang::String & a0, const JArray< ::java::lang::String > & a1, const JArray< ::org::apache::lucene::search::BooleanClause$Occur > & a2, const ::org::apache::lucene::analysis::Analyzer & a3)
            {
              jclass cls = env->getClass(initializeClass);
              return ::org::apache::lucene::search::Query(env->callStaticObjectMethod(cls, mids$[mid_parse_046ef74e], a0.this$, a1.this$, a2.this$, a3.this$));
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            static PyObject *t_QueryParserUtil_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_QueryParserUtil_instance_(PyTypeObject *type, PyObject *arg);
            static int t_QueryParserUtil_init_(t_QueryParserUtil *self, PyObject *args, PyObject *kwds);
            static PyObject *t_QueryParserUtil_escape(PyTypeObject *type, PyObject *arg);
            static PyObject *t_QueryParserUtil_parse(PyTypeObject *type, PyObject *args);

            static PyMethodDef t_QueryParserUtil__methods_[] = {
              DECLARE_METHOD(t_QueryParserUtil, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_QueryParserUtil, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_QueryParserUtil, escape, METH_O | METH_CLASS),
              DECLARE_METHOD(t_QueryParserUtil, parse, METH_VARARGS | METH_CLASS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(QueryParserUtil, t_QueryParserUtil, ::java::lang::Object, QueryParserUtil, t_QueryParserUtil_init_, 0, 0, 0, 0, 0);

            void t_QueryParserUtil::install(PyObject *module)
            {
              installType(&PY_TYPE(QueryParserUtil), module, "QueryParserUtil", 0);
            }

            void t_QueryParserUtil::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(QueryParserUtil).tp_dict, "class_", make_descriptor(QueryParserUtil::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(QueryParserUtil).tp_dict, "wrapfn_", make_descriptor(t_QueryParserUtil::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(QueryParserUtil).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_QueryParserUtil_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, QueryParserUtil::initializeClass, 1)))
                return NULL;
              return t_QueryParserUtil::wrap_Object(QueryParserUtil(((t_QueryParserUtil *) arg)->object.this$));
            }
            static PyObject *t_QueryParserUtil_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, QueryParserUtil::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_QueryParserUtil_init_(t_QueryParserUtil *self, PyObject *args, PyObject *kwds)
            {
              QueryParserUtil object((jobject) NULL);

              INT_CALL(object = QueryParserUtil());
              self->object = object;

              return 0;
            }

            static PyObject *t_QueryParserUtil_escape(PyTypeObject *type, PyObject *arg)
            {
              ::java::lang::String a0((jobject) NULL);
              ::java::lang::String result((jobject) NULL);

              if (!parseArg(arg, "s", &a0))
              {
                OBJ_CALL(result = ::org::apache::lucene::queryparser::flexible::standard::QueryParserUtil::escape(a0));
                return j2p(result);
              }

              PyErr_SetArgsError(type, "escape", arg);
              return NULL;
            }

            static PyObject *t_QueryParserUtil_parse(PyTypeObject *type, PyObject *args)
            {
              switch (PyTuple_GET_SIZE(args)) {
               case 3:
                {
                  JArray< ::java::lang::String > a0((jobject) NULL);
                  JArray< ::java::lang::String > a1((jobject) NULL);
                  ::org::apache::lucene::analysis::Analyzer a2((jobject) NULL);
                  ::org::apache::lucene::search::Query result((jobject) NULL);

                  if (!parseArgs(args, "[s[sk", ::org::apache::lucene::analysis::Analyzer::initializeClass, &a0, &a1, &a2))
                  {
                    OBJ_CALL(result = ::org::apache::lucene::queryparser::flexible::standard::QueryParserUtil::parse(a0, a1, a2));
                    return ::org::apache::lucene::search::t_Query::wrap_Object(result);
                  }
                }
                break;
               case 4:
                {
                  JArray< ::java::lang::String > a0((jobject) NULL);
                  JArray< ::java::lang::String > a1((jobject) NULL);
                  JArray< ::org::apache::lucene::search::BooleanClause$Occur > a2((jobject) NULL);
                  PyTypeObject **p2;
                  ::org::apache::lucene::analysis::Analyzer a3((jobject) NULL);
                  ::org::apache::lucene::search::Query result((jobject) NULL);

                  if (!parseArgs(args, "[s[s[Kk", ::org::apache::lucene::search::BooleanClause$Occur::initializeClass, ::org::apache::lucene::analysis::Analyzer::initializeClass, &a0, &a1, &a2, &p2, ::org::apache::lucene::search::t_BooleanClause$Occur::parameters_, &a3))
                  {
                    OBJ_CALL(result = ::org::apache::lucene::queryparser::flexible::standard::QueryParserUtil::parse(a0, a1, a2, a3));
                    return ::org::apache::lucene::search::t_Query::wrap_Object(result);
                  }
                }
                {
                  ::java::lang::String a0((jobject) NULL);
                  JArray< ::java::lang::String > a1((jobject) NULL);
                  JArray< ::org::apache::lucene::search::BooleanClause$Occur > a2((jobject) NULL);
                  PyTypeObject **p2;
                  ::org::apache::lucene::analysis::Analyzer a3((jobject) NULL);
                  ::org::apache::lucene::search::Query result((jobject) NULL);

                  if (!parseArgs(args, "s[s[Kk", ::org::apache::lucene::search::BooleanClause$Occur::initializeClass, ::org::apache::lucene::analysis::Analyzer::initializeClass, &a0, &a1, &a2, &p2, ::org::apache::lucene::search::t_BooleanClause$Occur::parameters_, &a3))
                  {
                    OBJ_CALL(result = ::org::apache::lucene::queryparser::flexible::standard::QueryParserUtil::parse(a0, a1, a2, a3));
                    return ::org::apache::lucene::search::t_Query::wrap_Object(result);
                  }
                }
              }

              PyErr_SetArgsError(type, "parse", args);
              return NULL;
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/standard/parser/FastCharStream.h"
#include "org/apache/lucene/queryparser/flexible/standard/parser/CharStream.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "java/io/Reader.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace parser {

              ::java::lang::Class *FastCharStream::class$ = NULL;
              jmethodID *FastCharStream::mids$ = NULL;
              bool FastCharStream::live$ = false;

              jclass FastCharStream::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/standard/parser/FastCharStream");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_cf2e3c10] = env->getMethodID(cls, "<init>", "(Ljava/io/Reader;)V");
                  mids$[mid_BeginToken_54c6a173] = env->getMethodID(cls, "BeginToken", "()C");
                  mids$[mid_Done_54c6a166] = env->getMethodID(cls, "Done", "()V");
                  mids$[mid_GetImage_14c7b5c5] = env->getMethodID(cls, "GetImage", "()Ljava/lang/String;");
                  mids$[mid_GetSuffix_b4292e99] = env->getMethodID(cls, "GetSuffix", "(I)[C");
                  mids$[mid_backup_39c7bd3c] = env->getMethodID(cls, "backup", "(I)V");
                  mids$[mid_getBeginColumn_54c6a179] = env->getMethodID(cls, "getBeginColumn", "()I");
                  mids$[mid_getBeginLine_54c6a179] = env->getMethodID(cls, "getBeginLine", "()I");
                  mids$[mid_getColumn_54c6a179] = env->getMethodID(cls, "getColumn", "()I");
                  mids$[mid_getEndColumn_54c6a179] = env->getMethodID(cls, "getEndColumn", "()I");
                  mids$[mid_getEndLine_54c6a179] = env->getMethodID(cls, "getEndLine", "()I");
                  mids$[mid_getLine_54c6a179] = env->getMethodID(cls, "getLine", "()I");
                  mids$[mid_readChar_54c6a173] = env->getMethodID(cls, "readChar", "()C");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              FastCharStream::FastCharStream(const ::java::io::Reader & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_cf2e3c10, a0.this$)) {}

              jchar FastCharStream::BeginToken() const
              {
                return env->callCharMethod(this$, mids$[mid_BeginToken_54c6a173]);
              }

              void FastCharStream::Done() const
              {
                env->callVoidMethod(this$, mids$[mid_Done_54c6a166]);
              }

              ::java::lang::String FastCharStream::GetImage() const
              {
                return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_GetImage_14c7b5c5]));
              }

              JArray< jchar > FastCharStream::GetSuffix(jint a0) const
              {
                return JArray< jchar >(env->callObjectMethod(this$, mids$[mid_GetSuffix_b4292e99], a0));
              }

              void FastCharStream::backup(jint a0) const
              {
                env->callVoidMethod(this$, mids$[mid_backup_39c7bd3c], a0);
              }

              jint FastCharStream::getBeginColumn() const
              {
                return env->callIntMethod(this$, mids$[mid_getBeginColumn_54c6a179]);
              }

              jint FastCharStream::getBeginLine() const
              {
                return env->callIntMethod(this$, mids$[mid_getBeginLine_54c6a179]);
              }

              jint FastCharStream::getColumn() const
              {
                return env->callIntMethod(this$, mids$[mid_getColumn_54c6a179]);
              }

              jint FastCharStream::getEndColumn() const
              {
                return env->callIntMethod(this$, mids$[mid_getEndColumn_54c6a179]);
              }

              jint FastCharStream::getEndLine() const
              {
                return env->callIntMethod(this$, mids$[mid_getEndLine_54c6a179]);
              }

              jint FastCharStream::getLine() const
              {
                return env->callIntMethod(this$, mids$[mid_getLine_54c6a179]);
              }

              jchar FastCharStream::readChar() const
              {
                return env->callCharMethod(this$, mids$[mid_readChar_54c6a173]);
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace parser {
              static PyObject *t_FastCharStream_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_FastCharStream_instance_(PyTypeObject *type, PyObject *arg);
              static int t_FastCharStream_init_(t_FastCharStream *self, PyObject *args, PyObject *kwds);
              static PyObject *t_FastCharStream_BeginToken(t_FastCharStream *self);
              static PyObject *t_FastCharStream_Done(t_FastCharStream *self);
              static PyObject *t_FastCharStream_GetImage(t_FastCharStream *self);
              static PyObject *t_FastCharStream_GetSuffix(t_FastCharStream *self, PyObject *arg);
              static PyObject *t_FastCharStream_backup(t_FastCharStream *self, PyObject *arg);
              static PyObject *t_FastCharStream_getBeginColumn(t_FastCharStream *self);
              static PyObject *t_FastCharStream_getBeginLine(t_FastCharStream *self);
              static PyObject *t_FastCharStream_getColumn(t_FastCharStream *self);
              static PyObject *t_FastCharStream_getEndColumn(t_FastCharStream *self);
              static PyObject *t_FastCharStream_getEndLine(t_FastCharStream *self);
              static PyObject *t_FastCharStream_getLine(t_FastCharStream *self);
              static PyObject *t_FastCharStream_readChar(t_FastCharStream *self);
              static PyObject *t_FastCharStream_get__beginColumn(t_FastCharStream *self, void *data);
              static PyObject *t_FastCharStream_get__beginLine(t_FastCharStream *self, void *data);
              static PyObject *t_FastCharStream_get__column(t_FastCharStream *self, void *data);
              static PyObject *t_FastCharStream_get__endColumn(t_FastCharStream *self, void *data);
              static PyObject *t_FastCharStream_get__endLine(t_FastCharStream *self, void *data);
              static PyObject *t_FastCharStream_get__line(t_FastCharStream *self, void *data);
              static PyGetSetDef t_FastCharStream__fields_[] = {
                DECLARE_GET_FIELD(t_FastCharStream, beginColumn),
                DECLARE_GET_FIELD(t_FastCharStream, beginLine),
                DECLARE_GET_FIELD(t_FastCharStream, column),
                DECLARE_GET_FIELD(t_FastCharStream, endColumn),
                DECLARE_GET_FIELD(t_FastCharStream, endLine),
                DECLARE_GET_FIELD(t_FastCharStream, line),
                { NULL, NULL, NULL, NULL, NULL }
              };

              static PyMethodDef t_FastCharStream__methods_[] = {
                DECLARE_METHOD(t_FastCharStream, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_FastCharStream, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_FastCharStream, BeginToken, METH_NOARGS),
                DECLARE_METHOD(t_FastCharStream, Done, METH_NOARGS),
                DECLARE_METHOD(t_FastCharStream, GetImage, METH_NOARGS),
                DECLARE_METHOD(t_FastCharStream, GetSuffix, METH_O),
                DECLARE_METHOD(t_FastCharStream, backup, METH_O),
                DECLARE_METHOD(t_FastCharStream, getBeginColumn, METH_NOARGS),
                DECLARE_METHOD(t_FastCharStream, getBeginLine, METH_NOARGS),
                DECLARE_METHOD(t_FastCharStream, getColumn, METH_NOARGS),
                DECLARE_METHOD(t_FastCharStream, getEndColumn, METH_NOARGS),
                DECLARE_METHOD(t_FastCharStream, getEndLine, METH_NOARGS),
                DECLARE_METHOD(t_FastCharStream, getLine, METH_NOARGS),
                DECLARE_METHOD(t_FastCharStream, readChar, METH_NOARGS),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(FastCharStream, t_FastCharStream, ::java::lang::Object, FastCharStream, t_FastCharStream_init_, 0, 0, t_FastCharStream__fields_, 0, 0);

              void t_FastCharStream::install(PyObject *module)
              {
                installType(&PY_TYPE(FastCharStream), module, "FastCharStream", 0);
              }

              void t_FastCharStream::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(FastCharStream).tp_dict, "class_", make_descriptor(FastCharStream::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(FastCharStream).tp_dict, "wrapfn_", make_descriptor(t_FastCharStream::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(FastCharStream).tp_dict, "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_FastCharStream_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, FastCharStream::initializeClass, 1)))
                  return NULL;
                return t_FastCharStream::wrap_Object(FastCharStream(((t_FastCharStream *) arg)->object.this$));
              }
              static PyObject *t_FastCharStream_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, FastCharStream::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_FastCharStream_init_(t_FastCharStream *self, PyObject *args, PyObject *kwds)
              {
                ::java::io::Reader a0((jobject) NULL);
                FastCharStream object((jobject) NULL);

                if (!parseArgs(args, "k", ::java::io::Reader::initializeClass, &a0))
                {
                  INT_CALL(object = FastCharStream(a0));
                  self->object = object;
                }
                else
                {
                  PyErr_SetArgsError((PyObject *) self, "__init__", args);
                  return -1;
                }

                return 0;
              }

              static PyObject *t_FastCharStream_BeginToken(t_FastCharStream *self)
              {
                jchar result;
                OBJ_CALL(result = self->object.BeginToken());
                return PyUnicode_FromUnicode((Py_UNICODE *) &result, 1);
              }

              static PyObject *t_FastCharStream_Done(t_FastCharStream *self)
              {
                OBJ_CALL(self->object.Done());
                Py_RETURN_NONE;
              }

              static PyObject *t_FastCharStream_GetImage(t_FastCharStream *self)
              {
                ::java::lang::String result((jobject) NULL);
                OBJ_CALL(result = self->object.GetImage());
                return j2p(result);
              }

              static PyObject *t_FastCharStream_GetSuffix(t_FastCharStream *self, PyObject *arg)
              {
                jint a0;
                JArray< jchar > result((jobject) NULL);

                if (!parseArg(arg, "I", &a0))
                {
                  OBJ_CALL(result = self->object.GetSuffix(a0));
                  return result.wrap();
                }

                PyErr_SetArgsError((PyObject *) self, "GetSuffix", arg);
                return NULL;
              }

              static PyObject *t_FastCharStream_backup(t_FastCharStream *self, PyObject *arg)
              {
                jint a0;

                if (!parseArg(arg, "I", &a0))
                {
                  OBJ_CALL(self->object.backup(a0));
                  Py_RETURN_NONE;
                }

                PyErr_SetArgsError((PyObject *) self, "backup", arg);
                return NULL;
              }

              static PyObject *t_FastCharStream_getBeginColumn(t_FastCharStream *self)
              {
                jint result;
                OBJ_CALL(result = self->object.getBeginColumn());
                return PyInt_FromLong((long) result);
              }

              static PyObject *t_FastCharStream_getBeginLine(t_FastCharStream *self)
              {
                jint result;
                OBJ_CALL(result = self->object.getBeginLine());
                return PyInt_FromLong((long) result);
              }

              static PyObject *t_FastCharStream_getColumn(t_FastCharStream *self)
              {
                jint result;
                OBJ_CALL(result = self->object.getColumn());
                return PyInt_FromLong((long) result);
              }

              static PyObject *t_FastCharStream_getEndColumn(t_FastCharStream *self)
              {
                jint result;
                OBJ_CALL(result = self->object.getEndColumn());
                return PyInt_FromLong((long) result);
              }

              static PyObject *t_FastCharStream_getEndLine(t_FastCharStream *self)
              {
                jint result;
                OBJ_CALL(result = self->object.getEndLine());
                return PyInt_FromLong((long) result);
              }

              static PyObject *t_FastCharStream_getLine(t_FastCharStream *self)
              {
                jint result;
                OBJ_CALL(result = self->object.getLine());
                return PyInt_FromLong((long) result);
              }

              static PyObject *t_FastCharStream_readChar(t_FastCharStream *self)
              {
                jchar result;
                OBJ_CALL(result = self->object.readChar());
                return PyUnicode_FromUnicode((Py_UNICODE *) &result, 1);
              }

              static PyObject *t_FastCharStream_get__beginColumn(t_FastCharStream *self, void *data)
              {
                jint value;
                OBJ_CALL(value = self->object.getBeginColumn());
                return PyInt_FromLong((long) value);
              }

              static PyObject *t_FastCharStream_get__beginLine(t_FastCharStream *self, void *data)
              {
                jint value;
                OBJ_CALL(value = self->object.getBeginLine());
                return PyInt_FromLong((long) value);
              }

              static PyObject *t_FastCharStream_get__column(t_FastCharStream *self, void *data)
              {
                jint value;
                OBJ_CALL(value = self->object.getColumn());
                return PyInt_FromLong((long) value);
              }

              static PyObject *t_FastCharStream_get__endColumn(t_FastCharStream *self, void *data)
              {
                jint value;
                OBJ_CALL(value = self->object.getEndColumn());
                return PyInt_FromLong((long) value);
              }

              static PyObject *t_FastCharStream_get__endLine(t_FastCharStream *self, void *data)
              {
                jint value;
                OBJ_CALL(value = self->object.getEndLine());
                return PyInt_FromLong((long) value);
              }

              static PyObject *t_FastCharStream_get__line(t_FastCharStream *self, void *data)
              {
                jint value;
                OBJ_CALL(value = self->object.getLine());
                return PyInt_FromLong((long) value);
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/TwoPhaseCommitTool$PrepareCommitFailException.h"
#include "java/lang/Throwable.h"
#include "org/apache/lucene/index/TwoPhaseCommit.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *TwoPhaseCommitTool$PrepareCommitFailException::class$ = NULL;
        jmethodID *TwoPhaseCommitTool$PrepareCommitFailException::mids$ = NULL;
        bool TwoPhaseCommitTool$PrepareCommitFailException::live$ = false;

        jclass TwoPhaseCommitTool$PrepareCommitFailException::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/TwoPhaseCommitTool$PrepareCommitFailException");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_52a0ac67] = env->getMethodID(cls, "<init>", "(Ljava/lang/Throwable;Lorg/apache/lucene/index/TwoPhaseCommit;)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        TwoPhaseCommitTool$PrepareCommitFailException::TwoPhaseCommitTool$PrepareCommitFailException(const ::java::lang::Throwable & a0, const ::org::apache::lucene::index::TwoPhaseCommit & a1) : ::java::io::IOException(env->newObject(initializeClass, &mids$, mid_init$_52a0ac67, a0.this$, a1.this$)) {}
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_TwoPhaseCommitTool$PrepareCommitFailException_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_TwoPhaseCommitTool$PrepareCommitFailException_instance_(PyTypeObject *type, PyObject *arg);
        static int t_TwoPhaseCommitTool$PrepareCommitFailException_init_(t_TwoPhaseCommitTool$PrepareCommitFailException *self, PyObject *args, PyObject *kwds);

        static PyMethodDef t_TwoPhaseCommitTool$PrepareCommitFailException__methods_[] = {
          DECLARE_METHOD(t_TwoPhaseCommitTool$PrepareCommitFailException, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_TwoPhaseCommitTool$PrepareCommitFailException, instance_, METH_O | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(TwoPhaseCommitTool$PrepareCommitFailException, t_TwoPhaseCommitTool$PrepareCommitFailException, ::java::io::IOException, TwoPhaseCommitTool$PrepareCommitFailException, t_TwoPhaseCommitTool$PrepareCommitFailException_init_, 0, 0, 0, 0, 0);

        void t_TwoPhaseCommitTool$PrepareCommitFailException::install(PyObject *module)
        {
          installType(&PY_TYPE(TwoPhaseCommitTool$PrepareCommitFailException), module, "TwoPhaseCommitTool$PrepareCommitFailException", 0);
        }

        void t_TwoPhaseCommitTool$PrepareCommitFailException::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(TwoPhaseCommitTool$PrepareCommitFailException).tp_dict, "class_", make_descriptor(TwoPhaseCommitTool$PrepareCommitFailException::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(TwoPhaseCommitTool$PrepareCommitFailException).tp_dict, "wrapfn_", make_descriptor(t_TwoPhaseCommitTool$PrepareCommitFailException::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(TwoPhaseCommitTool$PrepareCommitFailException).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_TwoPhaseCommitTool$PrepareCommitFailException_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, TwoPhaseCommitTool$PrepareCommitFailException::initializeClass, 1)))
            return NULL;
          return t_TwoPhaseCommitTool$PrepareCommitFailException::wrap_Object(TwoPhaseCommitTool$PrepareCommitFailException(((t_TwoPhaseCommitTool$PrepareCommitFailException *) arg)->object.this$));
        }
        static PyObject *t_TwoPhaseCommitTool$PrepareCommitFailException_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, TwoPhaseCommitTool$PrepareCommitFailException::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_TwoPhaseCommitTool$PrepareCommitFailException_init_(t_TwoPhaseCommitTool$PrepareCommitFailException *self, PyObject *args, PyObject *kwds)
        {
          ::java::lang::Throwable a0((jobject) NULL);
          ::org::apache::lucene::index::TwoPhaseCommit a1((jobject) NULL);
          TwoPhaseCommitTool$PrepareCommitFailException object((jobject) NULL);

          if (!parseArgs(args, "kk", ::java::lang::Throwable::initializeClass, ::org::apache::lucene::index::TwoPhaseCommit::initializeClass, &a0, &a1))
          {
            INT_CALL(object = TwoPhaseCommitTool$PrepareCommitFailException(a0, a1));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/ReaderManager.h"
#include "org/apache/lucene/store/Directory.h"
#include "org/apache/lucene/index/IndexWriter.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/index/DirectoryReader.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *ReaderManager::class$ = NULL;
        jmethodID *ReaderManager::mids$ = NULL;
        bool ReaderManager::live$ = false;

        jclass ReaderManager::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/ReaderManager");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_2e261ef2] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/store/Directory;)V");
            mids$[mid_init$_7015519a] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/IndexWriter;Z)V");
            mids$[mid_decRef_1e43081e] = env->getMethodID(cls, "decRef", "(Lorg/apache/lucene/index/DirectoryReader;)V");
            mids$[mid_getRefCount_1e430801] = env->getMethodID(cls, "getRefCount", "(Lorg/apache/lucene/index/DirectoryReader;)I");
            mids$[mid_tryIncRef_1e430812] = env->getMethodID(cls, "tryIncRef", "(Lorg/apache/lucene/index/DirectoryReader;)Z");
            mids$[mid_refreshIfNeeded_5bb3c60f] = env->getMethodID(cls, "refreshIfNeeded", "(Lorg/apache/lucene/index/DirectoryReader;)Lorg/apache/lucene/index/DirectoryReader;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        ReaderManager::ReaderManager(const ::org::apache::lucene::store::Directory & a0) : ::org::apache::lucene::search::ReferenceManager(env->newObject(initializeClass, &mids$, mid_init$_2e261ef2, a0.this$)) {}

        ReaderManager::ReaderManager(const ::org::apache::lucene::index::IndexWriter & a0, jboolean a1) : ::org::apache::lucene::search::ReferenceManager(env->newObject(initializeClass, &mids$, mid_init$_7015519a, a0.this$, a1)) {}
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_ReaderManager_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_ReaderManager_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_ReaderManager_of_(t_ReaderManager *self, PyObject *args);
        static int t_ReaderManager_init_(t_ReaderManager *self, PyObject *args, PyObject *kwds);
        static PyObject *t_ReaderManager_get__parameters_(t_ReaderManager *self, void *data);
        static PyGetSetDef t_ReaderManager__fields_[] = {
          DECLARE_GET_FIELD(t_ReaderManager, parameters_),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_ReaderManager__methods_[] = {
          DECLARE_METHOD(t_ReaderManager, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_ReaderManager, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_ReaderManager, of_, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(ReaderManager, t_ReaderManager, ::org::apache::lucene::search::ReferenceManager, ReaderManager, t_ReaderManager_init_, 0, 0, t_ReaderManager__fields_, 0, 0);
        PyObject *t_ReaderManager::wrap_Object(const ReaderManager& object, PyTypeObject *p0)
        {
          PyObject *obj = t_ReaderManager::wrap_Object(object);
          if (obj != NULL && obj != Py_None)
          {
            t_ReaderManager *self = (t_ReaderManager *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        PyObject *t_ReaderManager::wrap_jobject(const jobject& object, PyTypeObject *p0)
        {
          PyObject *obj = t_ReaderManager::wrap_jobject(object);
          if (obj != NULL && obj != Py_None)
          {
            t_ReaderManager *self = (t_ReaderManager *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        void t_ReaderManager::install(PyObject *module)
        {
          installType(&PY_TYPE(ReaderManager), module, "ReaderManager", 0);
        }

        void t_ReaderManager::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(ReaderManager).tp_dict, "class_", make_descriptor(ReaderManager::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(ReaderManager).tp_dict, "wrapfn_", make_descriptor(t_ReaderManager::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(ReaderManager).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_ReaderManager_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, ReaderManager::initializeClass, 1)))
            return NULL;
          return t_ReaderManager::wrap_Object(ReaderManager(((t_ReaderManager *) arg)->object.this$));
        }
        static PyObject *t_ReaderManager_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, ReaderManager::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_ReaderManager_of_(t_ReaderManager *self, PyObject *args)
        {
          if (!parseArg(args, "T", 1, &(self->parameters)))
            Py_RETURN_SELF;
          return PyErr_SetArgsError((PyObject *) self, "of_", args);
        }

        static int t_ReaderManager_init_(t_ReaderManager *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              ::org::apache::lucene::store::Directory a0((jobject) NULL);
              ReaderManager object((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::store::Directory::initializeClass, &a0))
              {
                INT_CALL(object = ReaderManager(a0));
                self->object = object;
                self->parameters[0] = &::org::apache::lucene::index::PY_TYPE(DirectoryReader);
                break;
              }
            }
            goto err;
           case 2:
            {
              ::org::apache::lucene::index::IndexWriter a0((jobject) NULL);
              jboolean a1;
              ReaderManager object((jobject) NULL);

              if (!parseArgs(args, "kZ", ::org::apache::lucene::index::IndexWriter::initializeClass, &a0, &a1))
              {
                INT_CALL(object = ReaderManager(a0, a1));
                self->object = object;
                self->parameters[0] = &::org::apache::lucene::index::PY_TYPE(DirectoryReader);
                break;
              }
            }
           default:
           err:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }
        static PyObject *t_ReaderManager_get__parameters_(t_ReaderManager *self, void *data)
        {
          return typeParameters(self->parameters, sizeof(self->parameters));
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/DocsEnum.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/util/AttributeSource.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *DocsEnum::class$ = NULL;
        jmethodID *DocsEnum::mids$ = NULL;
        bool DocsEnum::live$ = false;
        jint DocsEnum::FLAG_FREQS = (jint) 0;
        jint DocsEnum::FLAG_NONE = (jint) 0;

        jclass DocsEnum::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/DocsEnum");

            mids$ = new jmethodID[max_mid];
            mids$[mid_attributes_f901022b] = env->getMethodID(cls, "attributes", "()Lorg/apache/lucene/util/AttributeSource;");
            mids$[mid_freq_54c6a179] = env->getMethodID(cls, "freq", "()I");

            class$ = (::java::lang::Class *) new JObject(cls);
            cls = (jclass) class$->this$;

            FLAG_FREQS = env->getStaticIntField(cls, "FLAG_FREQS");
            FLAG_NONE = env->getStaticIntField(cls, "FLAG_NONE");
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        ::org::apache::lucene::util::AttributeSource DocsEnum::attributes() const
        {
          return ::org::apache::lucene::util::AttributeSource(env->callObjectMethod(this$, mids$[mid_attributes_f901022b]));
        }

        jint DocsEnum::freq() const
        {
          return env->callIntMethod(this$, mids$[mid_freq_54c6a179]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_DocsEnum_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_DocsEnum_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_DocsEnum_attributes(t_DocsEnum *self);
        static PyObject *t_DocsEnum_freq(t_DocsEnum *self);

        static PyMethodDef t_DocsEnum__methods_[] = {
          DECLARE_METHOD(t_DocsEnum, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_DocsEnum, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_DocsEnum, attributes, METH_NOARGS),
          DECLARE_METHOD(t_DocsEnum, freq, METH_NOARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(DocsEnum, t_DocsEnum, ::org::apache::lucene::search::DocIdSetIterator, DocsEnum, abstract_init, 0, 0, 0, 0, 0);

        void t_DocsEnum::install(PyObject *module)
        {
          installType(&PY_TYPE(DocsEnum), module, "DocsEnum", 0);
        }

        void t_DocsEnum::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(DocsEnum).tp_dict, "class_", make_descriptor(DocsEnum::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(DocsEnum).tp_dict, "wrapfn_", make_descriptor(t_DocsEnum::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(DocsEnum).tp_dict, "boxfn_", make_descriptor(boxObject));
          env->getClass(DocsEnum::initializeClass);
          PyDict_SetItemString(PY_TYPE(DocsEnum).tp_dict, "FLAG_FREQS", make_descriptor(DocsEnum::FLAG_FREQS));
          PyDict_SetItemString(PY_TYPE(DocsEnum).tp_dict, "FLAG_NONE", make_descriptor(DocsEnum::FLAG_NONE));
        }

        static PyObject *t_DocsEnum_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, DocsEnum::initializeClass, 1)))
            return NULL;
          return t_DocsEnum::wrap_Object(DocsEnum(((t_DocsEnum *) arg)->object.this$));
        }
        static PyObject *t_DocsEnum_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, DocsEnum::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_DocsEnum_attributes(t_DocsEnum *self)
        {
          ::org::apache::lucene::util::AttributeSource result((jobject) NULL);
          OBJ_CALL(result = self->object.attributes());
          return ::org::apache::lucene::util::t_AttributeSource::wrap_Object(result);
        }

        static PyObject *t_DocsEnum_freq(t_DocsEnum *self)
        {
          jint result;
          OBJ_CALL(result = self->object.freq());
          return PyInt_FromLong((long) result);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/ScoreDoc.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *ScoreDoc::class$ = NULL;
        jmethodID *ScoreDoc::mids$ = NULL;
        jfieldID *ScoreDoc::fids$ = NULL;
        bool ScoreDoc::live$ = false;

        jclass ScoreDoc::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/ScoreDoc");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_abdf2c51] = env->getMethodID(cls, "<init>", "(IF)V");
            mids$[mid_init$_776c6331] = env->getMethodID(cls, "<init>", "(IFI)V");
            mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

            fids$ = new jfieldID[max_fid];
            fids$[fid_doc] = env->getFieldID(cls, "doc", "I");
            fids$[fid_score] = env->getFieldID(cls, "score", "F");
            fids$[fid_shardIndex] = env->getFieldID(cls, "shardIndex", "I");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        ScoreDoc::ScoreDoc(jint a0, jfloat a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_abdf2c51, a0, a1)) {}

        ScoreDoc::ScoreDoc(jint a0, jfloat a1, jint a2) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_776c6331, a0, a1, a2)) {}

        ::java::lang::String ScoreDoc::toString() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
        }

        jint ScoreDoc::_get_doc() const
        {
          return env->getIntField(this$, fids$[fid_doc]);
        }

        void ScoreDoc::_set_doc(jint a0) const
        {
          env->setIntField(this$, fids$[fid_doc], a0);
        }

        jfloat ScoreDoc::_get_score() const
        {
          return env->getFloatField(this$, fids$[fid_score]);
        }

        void ScoreDoc::_set_score(jfloat a0) const
        {
          env->setFloatField(this$, fids$[fid_score], a0);
        }

        jint ScoreDoc::_get_shardIndex() const
        {
          return env->getIntField(this$, fids$[fid_shardIndex]);
        }

        void ScoreDoc::_set_shardIndex(jint a0) const
        {
          env->setIntField(this$, fids$[fid_shardIndex], a0);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_ScoreDoc_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_ScoreDoc_instance_(PyTypeObject *type, PyObject *arg);
        static int t_ScoreDoc_init_(t_ScoreDoc *self, PyObject *args, PyObject *kwds);
        static PyObject *t_ScoreDoc_toString(t_ScoreDoc *self, PyObject *args);
        static PyObject *t_ScoreDoc_get__doc(t_ScoreDoc *self, void *data);
        static int t_ScoreDoc_set__doc(t_ScoreDoc *self, PyObject *arg, void *data);
        static PyObject *t_ScoreDoc_get__score(t_ScoreDoc *self, void *data);
        static int t_ScoreDoc_set__score(t_ScoreDoc *self, PyObject *arg, void *data);
        static PyObject *t_ScoreDoc_get__shardIndex(t_ScoreDoc *self, void *data);
        static int t_ScoreDoc_set__shardIndex(t_ScoreDoc *self, PyObject *arg, void *data);

        static PyGetSetDef t_ScoreDoc__fields_[] = {
          DECLARE_GETSET_FIELD(t_ScoreDoc, doc),
          DECLARE_GETSET_FIELD(t_ScoreDoc, score),
          DECLARE_GETSET_FIELD(t_ScoreDoc, shardIndex),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_ScoreDoc__methods_[] = {
          DECLARE_METHOD(t_ScoreDoc, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_ScoreDoc, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_ScoreDoc, toString, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(ScoreDoc, t_ScoreDoc, ::java::lang::Object, ScoreDoc, t_ScoreDoc_init_, 0, 0, t_ScoreDoc__fields_, 0, 0);

        void t_ScoreDoc::install(PyObject *module)
        {
          installType(&PY_TYPE(ScoreDoc), module, "ScoreDoc", 0);
        }

        void t_ScoreDoc::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(ScoreDoc).tp_dict, "class_", make_descriptor(ScoreDoc::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(ScoreDoc).tp_dict, "wrapfn_", make_descriptor(t_ScoreDoc::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(ScoreDoc).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_ScoreDoc_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, ScoreDoc::initializeClass, 1)))
            return NULL;
          return t_ScoreDoc::wrap_Object(ScoreDoc(((t_ScoreDoc *) arg)->object.this$));
        }
        static PyObject *t_ScoreDoc_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, ScoreDoc::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_ScoreDoc_init_(t_ScoreDoc *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 2:
            {
              jint a0;
              jfloat a1;
              ScoreDoc object((jobject) NULL);

              if (!parseArgs(args, "IF", &a0, &a1))
              {
                INT_CALL(object = ScoreDoc(a0, a1));
                self->object = object;
                break;
              }
            }
            goto err;
           case 3:
            {
              jint a0;
              jfloat a1;
              jint a2;
              ScoreDoc object((jobject) NULL);

              if (!parseArgs(args, "IFI", &a0, &a1, &a2))
              {
                INT_CALL(object = ScoreDoc(a0, a1, a2));
                self->object = object;
                break;
              }
            }
           default:
           err:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_ScoreDoc_toString(t_ScoreDoc *self, PyObject *args)
        {
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.toString());
            return j2p(result);
          }

          return callSuper(&PY_TYPE(ScoreDoc), (PyObject *) self, "toString", args, 2);
        }

        static PyObject *t_ScoreDoc_get__doc(t_ScoreDoc *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object._get_doc());
          return PyInt_FromLong((long) value);
        }
        static int t_ScoreDoc_set__doc(t_ScoreDoc *self, PyObject *arg, void *data)
        {
          jint value;
          if (!parseArg(arg, "I", &value))
          {
            INT_CALL(self->object._set_doc(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "doc", arg);
          return -1;
        }

        static PyObject *t_ScoreDoc_get__score(t_ScoreDoc *self, void *data)
        {
          jfloat value;
          OBJ_CALL(value = self->object._get_score());
          return PyFloat_FromDouble((double) value);
        }
        static int t_ScoreDoc_set__score(t_ScoreDoc *self, PyObject *arg, void *data)
        {
          jfloat value;
          if (!parseArg(arg, "F", &value))
          {
            INT_CALL(self->object._set_score(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "score", arg);
          return -1;
        }

        static PyObject *t_ScoreDoc_get__shardIndex(t_ScoreDoc *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object._get_shardIndex());
          return PyInt_FromLong((long) value);
        }
        static int t_ScoreDoc_set__shardIndex(t_ScoreDoc *self, PyObject *arg, void *data)
        {
          jint value;
          if (!parseArg(arg, "I", &value))
          {
            INT_CALL(self->object._set_shardIndex(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "shardIndex", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/IntsRef.h"
#include "java/lang/Comparable.h"
#include "java/lang/Class.h"
#include "java/lang/Cloneable.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *IntsRef::class$ = NULL;
        jmethodID *IntsRef::mids$ = NULL;
        jfieldID *IntsRef::fids$ = NULL;
        bool IntsRef::live$ = false;
        JArray< jint > *IntsRef::EMPTY_INTS = NULL;

        jclass IntsRef::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/IntsRef");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_init$_39c7bd3c] = env->getMethodID(cls, "<init>", "(I)V");
            mids$[mid_init$_3e1ea22c] = env->getMethodID(cls, "<init>", "([III)V");
            mids$[mid_clone_5b734841] = env->getMethodID(cls, "clone", "()Lorg/apache/lucene/util/IntsRef;");
            mids$[mid_compareTo_4defa0f7] = env->getMethodID(cls, "compareTo", "(Lorg/apache/lucene/util/IntsRef;)I");
            mids$[mid_copyInts_4defa0e8] = env->getMethodID(cls, "copyInts", "(Lorg/apache/lucene/util/IntsRef;)V");
            mids$[mid_deepCopyOf_44b4216f] = env->getStaticMethodID(cls, "deepCopyOf", "(Lorg/apache/lucene/util/IntsRef;)Lorg/apache/lucene/util/IntsRef;");
            mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
            mids$[mid_grow_39c7bd3c] = env->getMethodID(cls, "grow", "(I)V");
            mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
            mids$[mid_intsEquals_4defa0e4] = env->getMethodID(cls, "intsEquals", "(Lorg/apache/lucene/util/IntsRef;)Z");
            mids$[mid_isValid_54c6a16a] = env->getMethodID(cls, "isValid", "()Z");
            mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

            fids$ = new jfieldID[max_fid];
            fids$[fid_ints] = env->getFieldID(cls, "ints", "[I");
            fids$[fid_length] = env->getFieldID(cls, "length", "I");
            fids$[fid_offset] = env->getFieldID(cls, "offset", "I");

            class$ = (::java::lang::Class *) new JObject(cls);
            cls = (jclass) class$->this$;

            EMPTY_INTS = new JArray< jint >(env->getStaticObjectField(cls, "EMPTY_INTS", "[I"));
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        IntsRef::IntsRef() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        IntsRef::IntsRef(jint a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_39c7bd3c, a0)) {}

        IntsRef::IntsRef(const JArray< jint > & a0, jint a1, jint a2) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_3e1ea22c, a0.this$, a1, a2)) {}

        IntsRef IntsRef::clone() const
        {
          return IntsRef(env->callObjectMethod(this$, mids$[mid_clone_5b734841]));
        }

        jint IntsRef::compareTo(const IntsRef & a0) const
        {
          return env->callIntMethod(this$, mids$[mid_compareTo_4defa0f7], a0.this$);
        }

        void IntsRef::copyInts(const IntsRef & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_copyInts_4defa0e8], a0.this$);
        }

        IntsRef IntsRef::deepCopyOf(const IntsRef & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return IntsRef(env->callStaticObjectMethod(cls, mids$[mid_deepCopyOf_44b4216f], a0.this$));
        }

        jboolean IntsRef::equals(const ::java::lang::Object & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
        }

        void IntsRef::grow(jint a0) const
        {
          env->callVoidMethod(this$, mids$[mid_grow_39c7bd3c], a0);
        }

        jint IntsRef::hashCode() const
        {
          return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
        }

        jboolean IntsRef::intsEquals(const IntsRef & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_intsEquals_4defa0e4], a0.this$);
        }

        jboolean IntsRef::isValid() const
        {
          return env->callBooleanMethod(this$, mids$[mid_isValid_54c6a16a]);
        }

        ::java::lang::String IntsRef::toString() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
        }

        JArray< jint > IntsRef::_get_ints() const
        {
          return JArray< jint >(env->getObjectField(this$, fids$[fid_ints]));
        }

        void IntsRef::_set_ints(const JArray< jint > & a0) const
        {
          env->setObjectField(this$, fids$[fid_ints], a0.this$);
        }

        jint IntsRef::_get_length() const
        {
          return env->getIntField(this$, fids$[fid_length]);
        }

        void IntsRef::_set_length(jint a0) const
        {
          env->setIntField(this$, fids$[fid_length], a0);
        }

        jint IntsRef::_get_offset() const
        {
          return env->getIntField(this$, fids$[fid_offset]);
        }

        void IntsRef::_set_offset(jint a0) const
        {
          env->setIntField(this$, fids$[fid_offset], a0);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_IntsRef_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_IntsRef_instance_(PyTypeObject *type, PyObject *arg);
        static int t_IntsRef_init_(t_IntsRef *self, PyObject *args, PyObject *kwds);
        static PyObject *t_IntsRef_clone(t_IntsRef *self);
        static PyObject *t_IntsRef_compareTo(t_IntsRef *self, PyObject *arg);
        static PyObject *t_IntsRef_copyInts(t_IntsRef *self, PyObject *arg);
        static PyObject *t_IntsRef_deepCopyOf(PyTypeObject *type, PyObject *arg);
        static PyObject *t_IntsRef_equals(t_IntsRef *self, PyObject *args);
        static PyObject *t_IntsRef_grow(t_IntsRef *self, PyObject *arg);
        static PyObject *t_IntsRef_hashCode(t_IntsRef *self, PyObject *args);
        static PyObject *t_IntsRef_intsEquals(t_IntsRef *self, PyObject *arg);
        static PyObject *t_IntsRef_isValid(t_IntsRef *self);
        static PyObject *t_IntsRef_toString(t_IntsRef *self, PyObject *args);
        static PyObject *t_IntsRef_get__ints(t_IntsRef *self, void *data);
        static int t_IntsRef_set__ints(t_IntsRef *self, PyObject *arg, void *data);
        static PyObject *t_IntsRef_get__length(t_IntsRef *self, void *data);
        static int t_IntsRef_set__length(t_IntsRef *self, PyObject *arg, void *data);
        static PyObject *t_IntsRef_get__offset(t_IntsRef *self, void *data);
        static int t_IntsRef_set__offset(t_IntsRef *self, PyObject *arg, void *data);

        static PyObject *t_IntsRef_get__valid(t_IntsRef *self, void *data);
        static PyGetSetDef t_IntsRef__fields_[] = {
          DECLARE_GETSET_FIELD(t_IntsRef, ints),
          DECLARE_GETSET_FIELD(t_IntsRef, length),
          DECLARE_GETSET_FIELD(t_IntsRef, offset),
          DECLARE_GET_FIELD(t_IntsRef, valid),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_IntsRef__methods_[] = {
          DECLARE_METHOD(t_IntsRef, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_IntsRef, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_IntsRef, clone, METH_NOARGS),
          DECLARE_METHOD(t_IntsRef, compareTo, METH_O),
          DECLARE_METHOD(t_IntsRef, copyInts, METH_O),
          DECLARE_METHOD(t_IntsRef, deepCopyOf, METH_O | METH_CLASS),
          DECLARE_METHOD(t_IntsRef, equals, METH_VARARGS),
          DECLARE_METHOD(t_IntsRef, grow, METH_O),
          DECLARE_METHOD(t_IntsRef, hashCode, METH_VARARGS),
          DECLARE_METHOD(t_IntsRef, intsEquals, METH_O),
          DECLARE_METHOD(t_IntsRef, isValid, METH_NOARGS),
          DECLARE_METHOD(t_IntsRef, toString, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(IntsRef, t_IntsRef, ::java::lang::Object, IntsRef, t_IntsRef_init_, 0, 0, t_IntsRef__fields_, 0, 0);

        void t_IntsRef::install(PyObject *module)
        {
          installType(&PY_TYPE(IntsRef), module, "IntsRef", 0);
        }

        void t_IntsRef::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(IntsRef).tp_dict, "class_", make_descriptor(IntsRef::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(IntsRef).tp_dict, "wrapfn_", make_descriptor(t_IntsRef::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(IntsRef).tp_dict, "boxfn_", make_descriptor(boxObject));
          env->getClass(IntsRef::initializeClass);
          PyDict_SetItemString(PY_TYPE(IntsRef).tp_dict, "EMPTY_INTS", make_descriptor(IntsRef::EMPTY_INTS->wrap()));
        }

        static PyObject *t_IntsRef_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, IntsRef::initializeClass, 1)))
            return NULL;
          return t_IntsRef::wrap_Object(IntsRef(((t_IntsRef *) arg)->object.this$));
        }
        static PyObject *t_IntsRef_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, IntsRef::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_IntsRef_init_(t_IntsRef *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 0:
            {
              IntsRef object((jobject) NULL);

              INT_CALL(object = IntsRef());
              self->object = object;
              break;
            }
            goto err;
           case 1:
            {
              jint a0;
              IntsRef object((jobject) NULL);

              if (!parseArgs(args, "I", &a0))
              {
                INT_CALL(object = IntsRef(a0));
                self->object = object;
                break;
              }
            }
            goto err;
           case 3:
            {
              JArray< jint > a0((jobject) NULL);
              jint a1;
              jint a2;
              IntsRef object((jobject) NULL);

              if (!parseArgs(args, "[III", &a0, &a1, &a2))
              {
                INT_CALL(object = IntsRef(a0, a1, a2));
                self->object = object;
                break;
              }
            }
           default:
           err:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_IntsRef_clone(t_IntsRef *self)
        {
          IntsRef result((jobject) NULL);
          OBJ_CALL(result = self->object.clone());
          return t_IntsRef::wrap_Object(result);
        }

        static PyObject *t_IntsRef_compareTo(t_IntsRef *self, PyObject *arg)
        {
          IntsRef a0((jobject) NULL);
          jint result;

          if (!parseArg(arg, "k", IntsRef::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.compareTo(a0));
            return PyInt_FromLong((long) result);
          }

          PyErr_SetArgsError((PyObject *) self, "compareTo", arg);
          return NULL;
        }

        static PyObject *t_IntsRef_copyInts(t_IntsRef *self, PyObject *arg)
        {
          IntsRef a0((jobject) NULL);

          if (!parseArg(arg, "k", IntsRef::initializeClass, &a0))
          {
            OBJ_CALL(self->object.copyInts(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "copyInts", arg);
          return NULL;
        }

        static PyObject *t_IntsRef_deepCopyOf(PyTypeObject *type, PyObject *arg)
        {
          IntsRef a0((jobject) NULL);
          IntsRef result((jobject) NULL);

          if (!parseArg(arg, "k", IntsRef::initializeClass, &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::util::IntsRef::deepCopyOf(a0));
            return t_IntsRef::wrap_Object(result);
          }

          PyErr_SetArgsError(type, "deepCopyOf", arg);
          return NULL;
        }

        static PyObject *t_IntsRef_equals(t_IntsRef *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.equals(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(IntsRef), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_IntsRef_grow(t_IntsRef *self, PyObject *arg)
        {
          jint a0;

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(self->object.grow(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "grow", arg);
          return NULL;
        }

        static PyObject *t_IntsRef_hashCode(t_IntsRef *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hashCode());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(IntsRef), (PyObject *) self, "hashCode", args, 2);
        }

        static PyObject *t_IntsRef_intsEquals(t_IntsRef *self, PyObject *arg)
        {
          IntsRef a0((jobject) NULL);
          jboolean result;

          if (!parseArg(arg, "k", IntsRef::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.intsEquals(a0));
            Py_RETURN_BOOL(result);
          }

          PyErr_SetArgsError((PyObject *) self, "intsEquals", arg);
          return NULL;
        }

        static PyObject *t_IntsRef_isValid(t_IntsRef *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.isValid());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_IntsRef_toString(t_IntsRef *self, PyObject *args)
        {
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.toString());
            return j2p(result);
          }

          return callSuper(&PY_TYPE(IntsRef), (PyObject *) self, "toString", args, 2);
        }

        static PyObject *t_IntsRef_get__ints(t_IntsRef *self, void *data)
        {
          JArray< jint > value((jobject) NULL);
          OBJ_CALL(value = self->object._get_ints());
          return value.wrap();
        }
        static int t_IntsRef_set__ints(t_IntsRef *self, PyObject *arg, void *data)
        {
          JArray< jint > value((jobject) NULL);
          if (!parseArg(arg, "[I", &value))
          {
            INT_CALL(self->object._set_ints(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "ints", arg);
          return -1;
        }

        static PyObject *t_IntsRef_get__length(t_IntsRef *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object._get_length());
          return PyInt_FromLong((long) value);
        }
        static int t_IntsRef_set__length(t_IntsRef *self, PyObject *arg, void *data)
        {
          jint value;
          if (!parseArg(arg, "I", &value))
          {
            INT_CALL(self->object._set_length(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "length", arg);
          return -1;
        }

        static PyObject *t_IntsRef_get__offset(t_IntsRef *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object._get_offset());
          return PyInt_FromLong((long) value);
        }
        static int t_IntsRef_set__offset(t_IntsRef *self, PyObject *arg, void *data)
        {
          jint value;
          if (!parseArg(arg, "I", &value))
          {
            INT_CALL(self->object._set_offset(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "offset", arg);
          return -1;
        }

        static PyObject *t_IntsRef_get__valid(t_IntsRef *self, void *data)
        {
          jboolean value;
          OBJ_CALL(value = self->object.isValid());
          Py_RETURN_BOOL(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/ReaderSlice.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *ReaderSlice::class$ = NULL;
        jmethodID *ReaderSlice::mids$ = NULL;
        jfieldID *ReaderSlice::fids$ = NULL;
        bool ReaderSlice::live$ = false;
        JArray< ReaderSlice > *ReaderSlice::EMPTY_ARRAY = NULL;

        jclass ReaderSlice::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/ReaderSlice");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_d3236aa4] = env->getMethodID(cls, "<init>", "(III)V");
            mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

            fids$ = new jfieldID[max_fid];
            fids$[fid_length] = env->getFieldID(cls, "length", "I");
            fids$[fid_readerIndex] = env->getFieldID(cls, "readerIndex", "I");
            fids$[fid_start] = env->getFieldID(cls, "start", "I");

            class$ = (::java::lang::Class *) new JObject(cls);
            cls = (jclass) class$->this$;

            EMPTY_ARRAY = new JArray< ReaderSlice >(env->getStaticObjectField(cls, "EMPTY_ARRAY", "[Lorg/apache/lucene/index/ReaderSlice;"));
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        ReaderSlice::ReaderSlice(jint a0, jint a1, jint a2) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_d3236aa4, a0, a1, a2)) {}

        ::java::lang::String ReaderSlice::toString() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
        }

        jint ReaderSlice::_get_length() const
        {
          return env->getIntField(this$, fids$[fid_length]);
        }

        jint ReaderSlice::_get_readerIndex() const
        {
          return env->getIntField(this$, fids$[fid_readerIndex]);
        }

        jint ReaderSlice::_get_start() const
        {
          return env->getIntField(this$, fids$[fid_start]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_ReaderSlice_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_ReaderSlice_instance_(PyTypeObject *type, PyObject *arg);
        static int t_ReaderSlice_init_(t_ReaderSlice *self, PyObject *args, PyObject *kwds);
        static PyObject *t_ReaderSlice_toString(t_ReaderSlice *self, PyObject *args);
        static PyObject *t_ReaderSlice_get__length(t_ReaderSlice *self, void *data);
        static PyObject *t_ReaderSlice_get__readerIndex(t_ReaderSlice *self, void *data);
        static PyObject *t_ReaderSlice_get__start(t_ReaderSlice *self, void *data);

        static PyGetSetDef t_ReaderSlice__fields_[] = {
          DECLARE_GET_FIELD(t_ReaderSlice, length),
          DECLARE_GET_FIELD(t_ReaderSlice, readerIndex),
          DECLARE_GET_FIELD(t_ReaderSlice, start),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_ReaderSlice__methods_[] = {
          DECLARE_METHOD(t_ReaderSlice, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_ReaderSlice, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_ReaderSlice, toString, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(ReaderSlice, t_ReaderSlice, ::java::lang::Object, ReaderSlice, t_ReaderSlice_init_, 0, 0, t_ReaderSlice__fields_, 0, 0);

        void t_ReaderSlice::install(PyObject *module)
        {
          installType(&PY_TYPE(ReaderSlice), module, "ReaderSlice", 0);
        }

        void t_ReaderSlice::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(ReaderSlice).tp_dict, "class_", make_descriptor(ReaderSlice::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(ReaderSlice).tp_dict, "wrapfn_", make_descriptor(t_ReaderSlice::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(ReaderSlice).tp_dict, "boxfn_", make_descriptor(boxObject));
          env->getClass(ReaderSlice::initializeClass);
          PyDict_SetItemString(PY_TYPE(ReaderSlice).tp_dict, "EMPTY_ARRAY", make_descriptor(JArray<jobject>(ReaderSlice::EMPTY_ARRAY->this$).wrap(t_ReaderSlice::wrap_jobject)));
        }

        static PyObject *t_ReaderSlice_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, ReaderSlice::initializeClass, 1)))
            return NULL;
          return t_ReaderSlice::wrap_Object(ReaderSlice(((t_ReaderSlice *) arg)->object.this$));
        }
        static PyObject *t_ReaderSlice_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, ReaderSlice::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_ReaderSlice_init_(t_ReaderSlice *self, PyObject *args, PyObject *kwds)
        {
          jint a0;
          jint a1;
          jint a2;
          ReaderSlice object((jobject) NULL);

          if (!parseArgs(args, "III", &a0, &a1, &a2))
          {
            INT_CALL(object = ReaderSlice(a0, a1, a2));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_ReaderSlice_toString(t_ReaderSlice *self, PyObject *args)
        {
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.toString());
            return j2p(result);
          }

          return callSuper(&PY_TYPE(ReaderSlice), (PyObject *) self, "toString", args, 2);
        }

        static PyObject *t_ReaderSlice_get__length(t_ReaderSlice *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object._get_length());
          return PyInt_FromLong((long) value);
        }

        static PyObject *t_ReaderSlice_get__readerIndex(t_ReaderSlice *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object._get_readerIndex());
          return PyInt_FromLong((long) value);
        }

        static PyObject *t_ReaderSlice_get__start(t_ReaderSlice *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object._get_start());
          return PyInt_FromLong((long) value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/FuzzyTermsEnum$LevenshteinAutomataAttribute.h"
#include "org/apache/lucene/util/automaton/CompiledAutomaton.h"
#include "java/util/List.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *FuzzyTermsEnum$LevenshteinAutomataAttribute::class$ = NULL;
        jmethodID *FuzzyTermsEnum$LevenshteinAutomataAttribute::mids$ = NULL;
        bool FuzzyTermsEnum$LevenshteinAutomataAttribute::live$ = false;

        jclass FuzzyTermsEnum$LevenshteinAutomataAttribute::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/FuzzyTermsEnum$LevenshteinAutomataAttribute");

            mids$ = new jmethodID[max_mid];
            mids$[mid_automata_87851566] = env->getMethodID(cls, "automata", "()Ljava/util/List;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        ::java::util::List FuzzyTermsEnum$LevenshteinAutomataAttribute::automata() const
        {
          return ::java::util::List(env->callObjectMethod(this$, mids$[mid_automata_87851566]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_FuzzyTermsEnum$LevenshteinAutomataAttribute_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FuzzyTermsEnum$LevenshteinAutomataAttribute_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FuzzyTermsEnum$LevenshteinAutomataAttribute_automata(t_FuzzyTermsEnum$LevenshteinAutomataAttribute *self);

        static PyMethodDef t_FuzzyTermsEnum$LevenshteinAutomataAttribute__methods_[] = {
          DECLARE_METHOD(t_FuzzyTermsEnum$LevenshteinAutomataAttribute, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FuzzyTermsEnum$LevenshteinAutomataAttribute, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FuzzyTermsEnum$LevenshteinAutomataAttribute, automata, METH_NOARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(FuzzyTermsEnum$LevenshteinAutomataAttribute, t_FuzzyTermsEnum$LevenshteinAutomataAttribute, ::org::apache::lucene::util::Attribute, FuzzyTermsEnum$LevenshteinAutomataAttribute, abstract_init, 0, 0, 0, 0, 0);

        void t_FuzzyTermsEnum$LevenshteinAutomataAttribute::install(PyObject *module)
        {
          installType(&PY_TYPE(FuzzyTermsEnum$LevenshteinAutomataAttribute), module, "FuzzyTermsEnum$LevenshteinAutomataAttribute", 0);
        }

        void t_FuzzyTermsEnum$LevenshteinAutomataAttribute::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(FuzzyTermsEnum$LevenshteinAutomataAttribute).tp_dict, "class_", make_descriptor(FuzzyTermsEnum$LevenshteinAutomataAttribute::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(FuzzyTermsEnum$LevenshteinAutomataAttribute).tp_dict, "wrapfn_", make_descriptor(t_FuzzyTermsEnum$LevenshteinAutomataAttribute::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(FuzzyTermsEnum$LevenshteinAutomataAttribute).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_FuzzyTermsEnum$LevenshteinAutomataAttribute_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, FuzzyTermsEnum$LevenshteinAutomataAttribute::initializeClass, 1)))
            return NULL;
          return t_FuzzyTermsEnum$LevenshteinAutomataAttribute::wrap_Object(FuzzyTermsEnum$LevenshteinAutomataAttribute(((t_FuzzyTermsEnum$LevenshteinAutomataAttribute *) arg)->object.this$));
        }
        static PyObject *t_FuzzyTermsEnum$LevenshteinAutomataAttribute_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, FuzzyTermsEnum$LevenshteinAutomataAttribute::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_FuzzyTermsEnum$LevenshteinAutomataAttribute_automata(t_FuzzyTermsEnum$LevenshteinAutomataAttribute *self)
        {
          ::java::util::List result((jobject) NULL);
          OBJ_CALL(result = self->object.automata());
          return ::java::util::t_List::wrap_Object(result, &::org::apache::lucene::util::automaton::PY_TYPE(CompiledAutomaton));
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/TopScoreDocCollector.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/search/Scorer.h"
#include "org/apache/lucene/search/ScoreDoc.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *TopScoreDocCollector::class$ = NULL;
        jmethodID *TopScoreDocCollector::mids$ = NULL;
        bool TopScoreDocCollector::live$ = false;

        jclass TopScoreDocCollector::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/TopScoreDocCollector");

            mids$ = new jmethodID[max_mid];
            mids$[mid_create_ed0bbc86] = env->getStaticMethodID(cls, "create", "(IZ)Lorg/apache/lucene/search/TopScoreDocCollector;");
            mids$[mid_create_113a7b62] = env->getStaticMethodID(cls, "create", "(ILorg/apache/lucene/search/ScoreDoc;Z)Lorg/apache/lucene/search/TopScoreDocCollector;");
            mids$[mid_setNextReader_a6f59947] = env->getMethodID(cls, "setNextReader", "(Lorg/apache/lucene/index/AtomicReaderContext;)V");
            mids$[mid_setScorer_8be0880c] = env->getMethodID(cls, "setScorer", "(Lorg/apache/lucene/search/Scorer;)V");
            mids$[mid_newTopDocs_a5bceb12] = env->getMethodID(cls, "newTopDocs", "([Lorg/apache/lucene/search/ScoreDoc;I)Lorg/apache/lucene/search/TopDocs;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        TopScoreDocCollector TopScoreDocCollector::create(jint a0, jboolean a1)
        {
          jclass cls = env->getClass(initializeClass);
          return TopScoreDocCollector(env->callStaticObjectMethod(cls, mids$[mid_create_ed0bbc86], a0, a1));
        }

        TopScoreDocCollector TopScoreDocCollector::create(jint a0, const ::org::apache::lucene::search::ScoreDoc & a1, jboolean a2)
        {
          jclass cls = env->getClass(initializeClass);
          return TopScoreDocCollector(env->callStaticObjectMethod(cls, mids$[mid_create_113a7b62], a0, a1.this$, a2));
        }

        void TopScoreDocCollector::setNextReader(const ::org::apache::lucene::index::AtomicReaderContext & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setNextReader_a6f59947], a0.this$);
        }

        void TopScoreDocCollector::setScorer(const ::org::apache::lucene::search::Scorer & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setScorer_8be0880c], a0.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_TopScoreDocCollector_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_TopScoreDocCollector_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_TopScoreDocCollector_of_(t_TopScoreDocCollector *self, PyObject *args);
        static PyObject *t_TopScoreDocCollector_create(PyTypeObject *type, PyObject *args);
        static PyObject *t_TopScoreDocCollector_setNextReader(t_TopScoreDocCollector *self, PyObject *args);
        static PyObject *t_TopScoreDocCollector_setScorer(t_TopScoreDocCollector *self, PyObject *args);
        static int t_TopScoreDocCollector_set__nextReader(t_TopScoreDocCollector *self, PyObject *arg, void *data);
        static int t_TopScoreDocCollector_set__scorer(t_TopScoreDocCollector *self, PyObject *arg, void *data);
        static PyObject *t_TopScoreDocCollector_get__parameters_(t_TopScoreDocCollector *self, void *data);
        static PyGetSetDef t_TopScoreDocCollector__fields_[] = {
          DECLARE_SET_FIELD(t_TopScoreDocCollector, nextReader),
          DECLARE_SET_FIELD(t_TopScoreDocCollector, scorer),
          DECLARE_GET_FIELD(t_TopScoreDocCollector, parameters_),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_TopScoreDocCollector__methods_[] = {
          DECLARE_METHOD(t_TopScoreDocCollector, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_TopScoreDocCollector, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_TopScoreDocCollector, of_, METH_VARARGS),
          DECLARE_METHOD(t_TopScoreDocCollector, create, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_TopScoreDocCollector, setNextReader, METH_VARARGS),
          DECLARE_METHOD(t_TopScoreDocCollector, setScorer, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(TopScoreDocCollector, t_TopScoreDocCollector, ::org::apache::lucene::search::TopDocsCollector, TopScoreDocCollector, abstract_init, 0, 0, t_TopScoreDocCollector__fields_, 0, 0);
        PyObject *t_TopScoreDocCollector::wrap_Object(const TopScoreDocCollector& object, PyTypeObject *p0)
        {
          PyObject *obj = t_TopScoreDocCollector::wrap_Object(object);
          if (obj != NULL && obj != Py_None)
          {
            t_TopScoreDocCollector *self = (t_TopScoreDocCollector *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        PyObject *t_TopScoreDocCollector::wrap_jobject(const jobject& object, PyTypeObject *p0)
        {
          PyObject *obj = t_TopScoreDocCollector::wrap_jobject(object);
          if (obj != NULL && obj != Py_None)
          {
            t_TopScoreDocCollector *self = (t_TopScoreDocCollector *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        void t_TopScoreDocCollector::install(PyObject *module)
        {
          installType(&PY_TYPE(TopScoreDocCollector), module, "TopScoreDocCollector", 0);
        }

        void t_TopScoreDocCollector::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(TopScoreDocCollector).tp_dict, "class_", make_descriptor(TopScoreDocCollector::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(TopScoreDocCollector).tp_dict, "wrapfn_", make_descriptor(t_TopScoreDocCollector::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(TopScoreDocCollector).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_TopScoreDocCollector_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, TopScoreDocCollector::initializeClass, 1)))
            return NULL;
          return t_TopScoreDocCollector::wrap_Object(TopScoreDocCollector(((t_TopScoreDocCollector *) arg)->object.this$));
        }
        static PyObject *t_TopScoreDocCollector_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, TopScoreDocCollector::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_TopScoreDocCollector_of_(t_TopScoreDocCollector *self, PyObject *args)
        {
          if (!parseArg(args, "T", 1, &(self->parameters)))
            Py_RETURN_SELF;
          return PyErr_SetArgsError((PyObject *) self, "of_", args);
        }

        static PyObject *t_TopScoreDocCollector_create(PyTypeObject *type, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 2:
            {
              jint a0;
              jboolean a1;
              TopScoreDocCollector result((jobject) NULL);

              if (!parseArgs(args, "IZ", &a0, &a1))
              {
                OBJ_CALL(result = ::org::apache::lucene::search::TopScoreDocCollector::create(a0, a1));
                return t_TopScoreDocCollector::wrap_Object(result);
              }
            }
            break;
           case 3:
            {
              jint a0;
              ::org::apache::lucene::search::ScoreDoc a1((jobject) NULL);
              jboolean a2;
              TopScoreDocCollector result((jobject) NULL);

              if (!parseArgs(args, "IkZ", ::org::apache::lucene::search::ScoreDoc::initializeClass, &a0, &a1, &a2))
              {
                OBJ_CALL(result = ::org::apache::lucene::search::TopScoreDocCollector::create(a0, a1, a2));
                return t_TopScoreDocCollector::wrap_Object(result);
              }
            }
          }

          PyErr_SetArgsError(type, "create", args);
          return NULL;
        }

        static PyObject *t_TopScoreDocCollector_setNextReader(t_TopScoreDocCollector *self, PyObject *args)
        {
          ::org::apache::lucene::index::AtomicReaderContext a0((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &a0))
          {
            OBJ_CALL(self->object.setNextReader(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(TopScoreDocCollector), (PyObject *) self, "setNextReader", args, 2);
        }

        static PyObject *t_TopScoreDocCollector_setScorer(t_TopScoreDocCollector *self, PyObject *args)
        {
          ::org::apache::lucene::search::Scorer a0((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::search::Scorer::initializeClass, &a0))
          {
            OBJ_CALL(self->object.setScorer(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(TopScoreDocCollector), (PyObject *) self, "setScorer", args, 2);
        }
        static PyObject *t_TopScoreDocCollector_get__parameters_(t_TopScoreDocCollector *self, void *data)
        {
          return typeParameters(self->parameters, sizeof(self->parameters));
        }

        static int t_TopScoreDocCollector_set__nextReader(t_TopScoreDocCollector *self, PyObject *arg, void *data)
        {
          {
            ::org::apache::lucene::index::AtomicReaderContext value((jobject) NULL);
            if (!parseArg(arg, "k", ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &value))
            {
              INT_CALL(self->object.setNextReader(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "nextReader", arg);
          return -1;
        }

        static int t_TopScoreDocCollector_set__scorer(t_TopScoreDocCollector *self, PyObject *arg, void *data)
        {
          {
            ::org::apache::lucene::search::Scorer value((jobject) NULL);
            if (!parseArg(arg, "k", ::org::apache::lucene::search::Scorer::initializeClass, &value))
            {
              INT_CALL(self->object.setScorer(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "scorer", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/vectorhighlight/FieldTermStack$TermInfo.h"
#include "java/lang/String.h"
#include "java/lang/Comparable.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace vectorhighlight {

          ::java::lang::Class *FieldTermStack$TermInfo::class$ = NULL;
          jmethodID *FieldTermStack$TermInfo::mids$ = NULL;
          bool FieldTermStack$TermInfo::live$ = false;

          jclass FieldTermStack$TermInfo::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/vectorhighlight/FieldTermStack$TermInfo");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_649c5657] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;IIIF)V");
              mids$[mid_compareTo_a7ece374] = env->getMethodID(cls, "compareTo", "(Lorg/apache/lucene/search/vectorhighlight/FieldTermStack$TermInfo;)I");
              mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
              mids$[mid_getEndOffset_54c6a179] = env->getMethodID(cls, "getEndOffset", "()I");
              mids$[mid_getNext_9d9e3d4a] = env->getMethodID(cls, "getNext", "()Lorg/apache/lucene/search/vectorhighlight/FieldTermStack$TermInfo;");
              mids$[mid_getPosition_54c6a179] = env->getMethodID(cls, "getPosition", "()I");
              mids$[mid_getStartOffset_54c6a179] = env->getMethodID(cls, "getStartOffset", "()I");
              mids$[mid_getText_14c7b5c5] = env->getMethodID(cls, "getText", "()Ljava/lang/String;");
              mids$[mid_getWeight_54c6a176] = env->getMethodID(cls, "getWeight", "()F");
              mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
              mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          FieldTermStack$TermInfo::FieldTermStack$TermInfo(const ::java::lang::String & a0, jint a1, jint a2, jint a3, jfloat a4) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_649c5657, a0.this$, a1, a2, a3, a4)) {}

          jint FieldTermStack$TermInfo::compareTo(const FieldTermStack$TermInfo & a0) const
          {
            return env->callIntMethod(this$, mids$[mid_compareTo_a7ece374], a0.this$);
          }

          jboolean FieldTermStack$TermInfo::equals(const ::java::lang::Object & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
          }

          jint FieldTermStack$TermInfo::getEndOffset() const
          {
            return env->callIntMethod(this$, mids$[mid_getEndOffset_54c6a179]);
          }

          FieldTermStack$TermInfo FieldTermStack$TermInfo::getNext() const
          {
            return FieldTermStack$TermInfo(env->callObjectMethod(this$, mids$[mid_getNext_9d9e3d4a]));
          }

          jint FieldTermStack$TermInfo::getPosition() const
          {
            return env->callIntMethod(this$, mids$[mid_getPosition_54c6a179]);
          }

          jint FieldTermStack$TermInfo::getStartOffset() const
          {
            return env->callIntMethod(this$, mids$[mid_getStartOffset_54c6a179]);
          }

          ::java::lang::String FieldTermStack$TermInfo::getText() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getText_14c7b5c5]));
          }

          jfloat FieldTermStack$TermInfo::getWeight() const
          {
            return env->callFloatMethod(this$, mids$[mid_getWeight_54c6a176]);
          }

          jint FieldTermStack$TermInfo::hashCode() const
          {
            return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
          }

          ::java::lang::String FieldTermStack$TermInfo::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace vectorhighlight {
          static PyObject *t_FieldTermStack$TermInfo_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_FieldTermStack$TermInfo_instance_(PyTypeObject *type, PyObject *arg);
          static int t_FieldTermStack$TermInfo_init_(t_FieldTermStack$TermInfo *self, PyObject *args, PyObject *kwds);
          static PyObject *t_FieldTermStack$TermInfo_compareTo(t_FieldTermStack$TermInfo *self, PyObject *arg);
          static PyObject *t_FieldTermStack$TermInfo_equals(t_FieldTermStack$TermInfo *self, PyObject *args);
          static PyObject *t_FieldTermStack$TermInfo_getEndOffset(t_FieldTermStack$TermInfo *self);
          static PyObject *t_FieldTermStack$TermInfo_getNext(t_FieldTermStack$TermInfo *self);
          static PyObject *t_FieldTermStack$TermInfo_getPosition(t_FieldTermStack$TermInfo *self);
          static PyObject *t_FieldTermStack$TermInfo_getStartOffset(t_FieldTermStack$TermInfo *self);
          static PyObject *t_FieldTermStack$TermInfo_getText(t_FieldTermStack$TermInfo *self);
          static PyObject *t_FieldTermStack$TermInfo_getWeight(t_FieldTermStack$TermInfo *self);
          static PyObject *t_FieldTermStack$TermInfo_hashCode(t_FieldTermStack$TermInfo *self, PyObject *args);
          static PyObject *t_FieldTermStack$TermInfo_toString(t_FieldTermStack$TermInfo *self, PyObject *args);
          static PyObject *t_FieldTermStack$TermInfo_get__endOffset(t_FieldTermStack$TermInfo *self, void *data);
          static PyObject *t_FieldTermStack$TermInfo_get__next(t_FieldTermStack$TermInfo *self, void *data);
          static PyObject *t_FieldTermStack$TermInfo_get__position(t_FieldTermStack$TermInfo *self, void *data);
          static PyObject *t_FieldTermStack$TermInfo_get__startOffset(t_FieldTermStack$TermInfo *self, void *data);
          static PyObject *t_FieldTermStack$TermInfo_get__text(t_FieldTermStack$TermInfo *self, void *data);
          static PyObject *t_FieldTermStack$TermInfo_get__weight(t_FieldTermStack$TermInfo *self, void *data);
          static PyGetSetDef t_FieldTermStack$TermInfo__fields_[] = {
            DECLARE_GET_FIELD(t_FieldTermStack$TermInfo, endOffset),
            DECLARE_GET_FIELD(t_FieldTermStack$TermInfo, next),
            DECLARE_GET_FIELD(t_FieldTermStack$TermInfo, position),
            DECLARE_GET_FIELD(t_FieldTermStack$TermInfo, startOffset),
            DECLARE_GET_FIELD(t_FieldTermStack$TermInfo, text),
            DECLARE_GET_FIELD(t_FieldTermStack$TermInfo, weight),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_FieldTermStack$TermInfo__methods_[] = {
            DECLARE_METHOD(t_FieldTermStack$TermInfo, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FieldTermStack$TermInfo, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FieldTermStack$TermInfo, compareTo, METH_O),
            DECLARE_METHOD(t_FieldTermStack$TermInfo, equals, METH_VARARGS),
            DECLARE_METHOD(t_FieldTermStack$TermInfo, getEndOffset, METH_NOARGS),
            DECLARE_METHOD(t_FieldTermStack$TermInfo, getNext, METH_NOARGS),
            DECLARE_METHOD(t_FieldTermStack$TermInfo, getPosition, METH_NOARGS),
            DECLARE_METHOD(t_FieldTermStack$TermInfo, getStartOffset, METH_NOARGS),
            DECLARE_METHOD(t_FieldTermStack$TermInfo, getText, METH_NOARGS),
            DECLARE_METHOD(t_FieldTermStack$TermInfo, getWeight, METH_NOARGS),
            DECLARE_METHOD(t_FieldTermStack$TermInfo, hashCode, METH_VARARGS),
            DECLARE_METHOD(t_FieldTermStack$TermInfo, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(FieldTermStack$TermInfo, t_FieldTermStack$TermInfo, ::java::lang::Object, FieldTermStack$TermInfo, t_FieldTermStack$TermInfo_init_, 0, 0, t_FieldTermStack$TermInfo__fields_, 0, 0);

          void t_FieldTermStack$TermInfo::install(PyObject *module)
          {
            installType(&PY_TYPE(FieldTermStack$TermInfo), module, "FieldTermStack$TermInfo", 0);
          }

          void t_FieldTermStack$TermInfo::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(FieldTermStack$TermInfo).tp_dict, "class_", make_descriptor(FieldTermStack$TermInfo::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(FieldTermStack$TermInfo).tp_dict, "wrapfn_", make_descriptor(t_FieldTermStack$TermInfo::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(FieldTermStack$TermInfo).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_FieldTermStack$TermInfo_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, FieldTermStack$TermInfo::initializeClass, 1)))
              return NULL;
            return t_FieldTermStack$TermInfo::wrap_Object(FieldTermStack$TermInfo(((t_FieldTermStack$TermInfo *) arg)->object.this$));
          }
          static PyObject *t_FieldTermStack$TermInfo_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, FieldTermStack$TermInfo::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_FieldTermStack$TermInfo_init_(t_FieldTermStack$TermInfo *self, PyObject *args, PyObject *kwds)
          {
            ::java::lang::String a0((jobject) NULL);
            jint a1;
            jint a2;
            jint a3;
            jfloat a4;
            FieldTermStack$TermInfo object((jobject) NULL);

            if (!parseArgs(args, "sIIIF", &a0, &a1, &a2, &a3, &a4))
            {
              INT_CALL(object = FieldTermStack$TermInfo(a0, a1, a2, a3, a4));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_FieldTermStack$TermInfo_compareTo(t_FieldTermStack$TermInfo *self, PyObject *arg)
          {
            FieldTermStack$TermInfo a0((jobject) NULL);
            jint result;

            if (!parseArg(arg, "k", FieldTermStack$TermInfo::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.compareTo(a0));
              return PyInt_FromLong((long) result);
            }

            PyErr_SetArgsError((PyObject *) self, "compareTo", arg);
            return NULL;
          }

          static PyObject *t_FieldTermStack$TermInfo_equals(t_FieldTermStack$TermInfo *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            jboolean result;

            if (!parseArgs(args, "o", &a0))
            {
              OBJ_CALL(result = self->object.equals(a0));
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(FieldTermStack$TermInfo), (PyObject *) self, "equals", args, 2);
          }

          static PyObject *t_FieldTermStack$TermInfo_getEndOffset(t_FieldTermStack$TermInfo *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getEndOffset());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_FieldTermStack$TermInfo_getNext(t_FieldTermStack$TermInfo *self)
          {
            FieldTermStack$TermInfo result((jobject) NULL);
            OBJ_CALL(result = self->object.getNext());
            return t_FieldTermStack$TermInfo::wrap_Object(result);
          }

          static PyObject *t_FieldTermStack$TermInfo_getPosition(t_FieldTermStack$TermInfo *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getPosition());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_FieldTermStack$TermInfo_getStartOffset(t_FieldTermStack$TermInfo *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getStartOffset());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_FieldTermStack$TermInfo_getText(t_FieldTermStack$TermInfo *self)
          {
            ::java::lang::String result((jobject) NULL);
            OBJ_CALL(result = self->object.getText());
            return j2p(result);
          }

          static PyObject *t_FieldTermStack$TermInfo_getWeight(t_FieldTermStack$TermInfo *self)
          {
            jfloat result;
            OBJ_CALL(result = self->object.getWeight());
            return PyFloat_FromDouble((double) result);
          }

          static PyObject *t_FieldTermStack$TermInfo_hashCode(t_FieldTermStack$TermInfo *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.hashCode());
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(FieldTermStack$TermInfo), (PyObject *) self, "hashCode", args, 2);
          }

          static PyObject *t_FieldTermStack$TermInfo_toString(t_FieldTermStack$TermInfo *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(&PY_TYPE(FieldTermStack$TermInfo), (PyObject *) self, "toString", args, 2);
          }

          static PyObject *t_FieldTermStack$TermInfo_get__endOffset(t_FieldTermStack$TermInfo *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getEndOffset());
            return PyInt_FromLong((long) value);
          }

          static PyObject *t_FieldTermStack$TermInfo_get__next(t_FieldTermStack$TermInfo *self, void *data)
          {
            FieldTermStack$TermInfo value((jobject) NULL);
            OBJ_CALL(value = self->object.getNext());
            return t_FieldTermStack$TermInfo::wrap_Object(value);
          }

          static PyObject *t_FieldTermStack$TermInfo_get__position(t_FieldTermStack$TermInfo *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getPosition());
            return PyInt_FromLong((long) value);
          }

          static PyObject *t_FieldTermStack$TermInfo_get__startOffset(t_FieldTermStack$TermInfo *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getStartOffset());
            return PyInt_FromLong((long) value);
          }

          static PyObject *t_FieldTermStack$TermInfo_get__text(t_FieldTermStack$TermInfo *self, void *data)
          {
            ::java::lang::String value((jobject) NULL);
            OBJ_CALL(value = self->object.getText());
            return j2p(value);
          }

          static PyObject *t_FieldTermStack$TermInfo_get__weight(t_FieldTermStack$TermInfo *self, void *data)
          {
            jfloat value;
            OBJ_CALL(value = self->object.getWeight());
            return PyFloat_FromDouble((double) value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/document/ByteDocValuesField.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace document {

        ::java::lang::Class *ByteDocValuesField::class$ = NULL;
        jmethodID *ByteDocValuesField::mids$ = NULL;
        bool ByteDocValuesField::live$ = false;

        jclass ByteDocValuesField::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/document/ByteDocValuesField");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_a032b77d] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;B)V");
            mids$[mid_setByteValue_b2271687] = env->getMethodID(cls, "setByteValue", "(B)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        ByteDocValuesField::ByteDocValuesField(const ::java::lang::String & a0, jbyte a1) : ::org::apache::lucene::document::NumericDocValuesField(env->newObject(initializeClass, &mids$, mid_init$_a032b77d, a0.this$, a1)) {}

        void ByteDocValuesField::setByteValue(jbyte a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setByteValue_b2271687], a0);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace document {
        static PyObject *t_ByteDocValuesField_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_ByteDocValuesField_instance_(PyTypeObject *type, PyObject *arg);
        static int t_ByteDocValuesField_init_(t_ByteDocValuesField *self, PyObject *args, PyObject *kwds);
        static PyObject *t_ByteDocValuesField_setByteValue(t_ByteDocValuesField *self, PyObject *args);
        static int t_ByteDocValuesField_set__byteValue(t_ByteDocValuesField *self, PyObject *arg, void *data);
        static PyGetSetDef t_ByteDocValuesField__fields_[] = {
          DECLARE_SET_FIELD(t_ByteDocValuesField, byteValue),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_ByteDocValuesField__methods_[] = {
          DECLARE_METHOD(t_ByteDocValuesField, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_ByteDocValuesField, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_ByteDocValuesField, setByteValue, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(ByteDocValuesField, t_ByteDocValuesField, ::org::apache::lucene::document::NumericDocValuesField, ByteDocValuesField, t_ByteDocValuesField_init_, 0, 0, t_ByteDocValuesField__fields_, 0, 0);

        void t_ByteDocValuesField::install(PyObject *module)
        {
          installType(&PY_TYPE(ByteDocValuesField), module, "ByteDocValuesField", 0);
        }

        void t_ByteDocValuesField::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(ByteDocValuesField).tp_dict, "class_", make_descriptor(ByteDocValuesField::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(ByteDocValuesField).tp_dict, "wrapfn_", make_descriptor(t_ByteDocValuesField::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(ByteDocValuesField).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_ByteDocValuesField_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, ByteDocValuesField::initializeClass, 1)))
            return NULL;
          return t_ByteDocValuesField::wrap_Object(ByteDocValuesField(((t_ByteDocValuesField *) arg)->object.this$));
        }
        static PyObject *t_ByteDocValuesField_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, ByteDocValuesField::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_ByteDocValuesField_init_(t_ByteDocValuesField *self, PyObject *args, PyObject *kwds)
        {
          ::java::lang::String a0((jobject) NULL);
          jbyte a1;
          ByteDocValuesField object((jobject) NULL);

          if (!parseArgs(args, "sB", &a0, &a1))
          {
            INT_CALL(object = ByteDocValuesField(a0, a1));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_ByteDocValuesField_setByteValue(t_ByteDocValuesField *self, PyObject *args)
        {
          jbyte a0;

          if (!parseArgs(args, "B", &a0))
          {
            OBJ_CALL(self->object.setByteValue(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(ByteDocValuesField), (PyObject *) self, "setByteValue", args, 2);
        }

        static int t_ByteDocValuesField_set__byteValue(t_ByteDocValuesField *self, PyObject *arg, void *data)
        {
          {
            jbyte value;
            if (!parseArg(arg, "B", &value))
            {
              INT_CALL(self->object.setByteValue(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "byteValue", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/sandbox/queries/regex/RegexQuery.h"
#include "java/lang/Class.h"
#include "java/lang/Object.h"
#include "org/apache/lucene/sandbox/queries/regex/RegexCapabilities.h"
#include "java/lang/String.h"
#include "org/apache/lucene/sandbox/queries/regex/RegexQueryCapable.h"
#include "org/apache/lucene/index/Term.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace sandbox {
        namespace queries {
          namespace regex {

            ::java::lang::Class *RegexQuery::class$ = NULL;
            jmethodID *RegexQuery::mids$ = NULL;
            bool RegexQuery::live$ = false;

            jclass RegexQuery::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/sandbox/queries/regex/RegexQuery");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_7eca6a81] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/Term;)V");
                mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
                mids$[mid_getRegexImplementation_814365f4] = env->getMethodID(cls, "getRegexImplementation", "()Lorg/apache/lucene/sandbox/queries/regex/RegexCapabilities;");
                mids$[mid_getTerm_0f71f314] = env->getMethodID(cls, "getTerm", "()Lorg/apache/lucene/index/Term;");
                mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
                mids$[mid_setRegexImplementation_06bf498d] = env->getMethodID(cls, "setRegexImplementation", "(Lorg/apache/lucene/sandbox/queries/regex/RegexCapabilities;)V");
                mids$[mid_toString_97a5258f] = env->getMethodID(cls, "toString", "(Ljava/lang/String;)Ljava/lang/String;");
                mids$[mid_getTermsEnum_0bc2a5ab] = env->getMethodID(cls, "getTermsEnum", "(Lorg/apache/lucene/index/Terms;Lorg/apache/lucene/util/AttributeSource;)Lorg/apache/lucene/index/FilteredTermsEnum;");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            RegexQuery::RegexQuery(const ::org::apache::lucene::index::Term & a0) : ::org::apache::lucene::search::MultiTermQuery(env->newObject(initializeClass, &mids$, mid_init$_7eca6a81, a0.this$)) {}

            jboolean RegexQuery::equals(const ::java::lang::Object & a0) const
            {
              return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
            }

            ::org::apache::lucene::sandbox::queries::regex::RegexCapabilities RegexQuery::getRegexImplementation() const
            {
              return ::org::apache::lucene::sandbox::queries::regex::RegexCapabilities(env->callObjectMethod(this$, mids$[mid_getRegexImplementation_814365f4]));
            }

            ::org::apache::lucene::index::Term RegexQuery::getTerm() const
            {
              return ::org::apache::lucene::index::Term(env->callObjectMethod(this$, mids$[mid_getTerm_0f71f314]));
            }

            jint RegexQuery::hashCode() const
            {
              return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
            }

            void RegexQuery::setRegexImplementation(const ::org::apache::lucene::sandbox::queries::regex::RegexCapabilities & a0) const
            {
              env->callVoidMethod(this$, mids$[mid_setRegexImplementation_06bf498d], a0.this$);
            }

            ::java::lang::String RegexQuery::toString(const ::java::lang::String & a0) const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_97a5258f], a0.this$));
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace sandbox {
        namespace queries {
          namespace regex {
            static PyObject *t_RegexQuery_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_RegexQuery_instance_(PyTypeObject *type, PyObject *arg);
            static int t_RegexQuery_init_(t_RegexQuery *self, PyObject *args, PyObject *kwds);
            static PyObject *t_RegexQuery_equals(t_RegexQuery *self, PyObject *args);
            static PyObject *t_RegexQuery_getRegexImplementation(t_RegexQuery *self);
            static PyObject *t_RegexQuery_getTerm(t_RegexQuery *self);
            static PyObject *t_RegexQuery_hashCode(t_RegexQuery *self, PyObject *args);
            static PyObject *t_RegexQuery_setRegexImplementation(t_RegexQuery *self, PyObject *arg);
            static PyObject *t_RegexQuery_toString(t_RegexQuery *self, PyObject *args);
            static PyObject *t_RegexQuery_get__regexImplementation(t_RegexQuery *self, void *data);
            static int t_RegexQuery_set__regexImplementation(t_RegexQuery *self, PyObject *arg, void *data);
            static PyObject *t_RegexQuery_get__term(t_RegexQuery *self, void *data);
            static PyGetSetDef t_RegexQuery__fields_[] = {
              DECLARE_GETSET_FIELD(t_RegexQuery, regexImplementation),
              DECLARE_GET_FIELD(t_RegexQuery, term),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_RegexQuery__methods_[] = {
              DECLARE_METHOD(t_RegexQuery, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_RegexQuery, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_RegexQuery, equals, METH_VARARGS),
              DECLARE_METHOD(t_RegexQuery, getRegexImplementation, METH_NOARGS),
              DECLARE_METHOD(t_RegexQuery, getTerm, METH_NOARGS),
              DECLARE_METHOD(t_RegexQuery, hashCode, METH_VARARGS),
              DECLARE_METHOD(t_RegexQuery, setRegexImplementation, METH_O),
              DECLARE_METHOD(t_RegexQuery, toString, METH_VARARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(RegexQuery, t_RegexQuery, ::org::apache::lucene::search::MultiTermQuery, RegexQuery, t_RegexQuery_init_, 0, 0, t_RegexQuery__fields_, 0, 0);

            void t_RegexQuery::install(PyObject *module)
            {
              installType(&PY_TYPE(RegexQuery), module, "RegexQuery", 0);
            }

            void t_RegexQuery::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(RegexQuery).tp_dict, "class_", make_descriptor(RegexQuery::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(RegexQuery).tp_dict, "wrapfn_", make_descriptor(t_RegexQuery::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(RegexQuery).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_RegexQuery_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, RegexQuery::initializeClass, 1)))
                return NULL;
              return t_RegexQuery::wrap_Object(RegexQuery(((t_RegexQuery *) arg)->object.this$));
            }
            static PyObject *t_RegexQuery_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, RegexQuery::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_RegexQuery_init_(t_RegexQuery *self, PyObject *args, PyObject *kwds)
            {
              ::org::apache::lucene::index::Term a0((jobject) NULL);
              RegexQuery object((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::index::Term::initializeClass, &a0))
              {
                INT_CALL(object = RegexQuery(a0));
                self->object = object;
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_RegexQuery_equals(t_RegexQuery *self, PyObject *args)
            {
              ::java::lang::Object a0((jobject) NULL);
              jboolean result;

              if (!parseArgs(args, "o", &a0))
              {
                OBJ_CALL(result = self->object.equals(a0));
                Py_RETURN_BOOL(result);
              }

              return callSuper(&PY_TYPE(RegexQuery), (PyObject *) self, "equals", args, 2);
            }

            static PyObject *t_RegexQuery_getRegexImplementation(t_RegexQuery *self)
            {
              ::org::apache::lucene::sandbox::queries::regex::RegexCapabilities result((jobject) NULL);
              OBJ_CALL(result = self->object.getRegexImplementation());
              return ::org::apache::lucene::sandbox::queries::regex::t_RegexCapabilities::wrap_Object(result);
            }

            static PyObject *t_RegexQuery_getTerm(t_RegexQuery *self)
            {
              ::org::apache::lucene::index::Term result((jobject) NULL);
              OBJ_CALL(result = self->object.getTerm());
              return ::org::apache::lucene::index::t_Term::wrap_Object(result);
            }

            static PyObject *t_RegexQuery_hashCode(t_RegexQuery *self, PyObject *args)
            {
              jint result;

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.hashCode());
                return PyInt_FromLong((long) result);
              }

              return callSuper(&PY_TYPE(RegexQuery), (PyObject *) self, "hashCode", args, 2);
            }

            static PyObject *t_RegexQuery_setRegexImplementation(t_RegexQuery *self, PyObject *arg)
            {
              ::org::apache::lucene::sandbox::queries::regex::RegexCapabilities a0((jobject) NULL);

              if (!parseArg(arg, "k", ::org::apache::lucene::sandbox::queries::regex::RegexCapabilities::initializeClass, &a0))
              {
                OBJ_CALL(self->object.setRegexImplementation(a0));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "setRegexImplementation", arg);
              return NULL;
            }

            static PyObject *t_RegexQuery_toString(t_RegexQuery *self, PyObject *args)
            {
              ::java::lang::String a0((jobject) NULL);
              ::java::lang::String result((jobject) NULL);

              if (!parseArgs(args, "s", &a0))
              {
                OBJ_CALL(result = self->object.toString(a0));
                return j2p(result);
              }

              return callSuper(&PY_TYPE(RegexQuery), (PyObject *) self, "toString", args, 2);
            }

            static PyObject *t_RegexQuery_get__regexImplementation(t_RegexQuery *self, void *data)
            {
              ::org::apache::lucene::sandbox::queries::regex::RegexCapabilities value((jobject) NULL);
              OBJ_CALL(value = self->object.getRegexImplementation());
              return ::org::apache::lucene::sandbox::queries::regex::t_RegexCapabilities::wrap_Object(value);
            }
            static int t_RegexQuery_set__regexImplementation(t_RegexQuery *self, PyObject *arg, void *data)
            {
              {
                ::org::apache::lucene::sandbox::queries::regex::RegexCapabilities value((jobject) NULL);
                if (!parseArg(arg, "k", ::org::apache::lucene::sandbox::queries::regex::RegexCapabilities::initializeClass, &value))
                {
                  INT_CALL(self->object.setRegexImplementation(value));
                  return 0;
                }
              }
              PyErr_SetArgsError((PyObject *) self, "regexImplementation", arg);
              return -1;
            }

            static PyObject *t_RegexQuery_get__term(t_RegexQuery *self, void *data)
            {
              ::org::apache::lucene::index::Term value((jobject) NULL);
              OBJ_CALL(value = self->object.getTerm());
              return ::org::apache::lucene::index::t_Term::wrap_Object(value);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/FilterAtomicReader$FilterDocsEnum.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/util/AttributeSource.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *FilterAtomicReader$FilterDocsEnum::class$ = NULL;
        jmethodID *FilterAtomicReader$FilterDocsEnum::mids$ = NULL;
        bool FilterAtomicReader$FilterDocsEnum::live$ = false;

        jclass FilterAtomicReader$FilterDocsEnum::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/FilterAtomicReader$FilterDocsEnum");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_ea9b58a1] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/DocsEnum;)V");
            mids$[mid_advance_39c7bd23] = env->getMethodID(cls, "advance", "(I)I");
            mids$[mid_attributes_f901022b] = env->getMethodID(cls, "attributes", "()Lorg/apache/lucene/util/AttributeSource;");
            mids$[mid_cost_54c6a17a] = env->getMethodID(cls, "cost", "()J");
            mids$[mid_docID_54c6a179] = env->getMethodID(cls, "docID", "()I");
            mids$[mid_freq_54c6a179] = env->getMethodID(cls, "freq", "()I");
            mids$[mid_nextDoc_54c6a179] = env->getMethodID(cls, "nextDoc", "()I");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        FilterAtomicReader$FilterDocsEnum::FilterAtomicReader$FilterDocsEnum(const ::org::apache::lucene::index::DocsEnum & a0) : ::org::apache::lucene::index::DocsEnum(env->newObject(initializeClass, &mids$, mid_init$_ea9b58a1, a0.this$)) {}

        jint FilterAtomicReader$FilterDocsEnum::advance(jint a0) const
        {
          return env->callIntMethod(this$, mids$[mid_advance_39c7bd23], a0);
        }

        ::org::apache::lucene::util::AttributeSource FilterAtomicReader$FilterDocsEnum::attributes() const
        {
          return ::org::apache::lucene::util::AttributeSource(env->callObjectMethod(this$, mids$[mid_attributes_f901022b]));
        }

        jlong FilterAtomicReader$FilterDocsEnum::cost() const
        {
          return env->callLongMethod(this$, mids$[mid_cost_54c6a17a]);
        }

        jint FilterAtomicReader$FilterDocsEnum::docID() const
        {
          return env->callIntMethod(this$, mids$[mid_docID_54c6a179]);
        }

        jint FilterAtomicReader$FilterDocsEnum::freq() const
        {
          return env->callIntMethod(this$, mids$[mid_freq_54c6a179]);
        }

        jint FilterAtomicReader$FilterDocsEnum::nextDoc() const
        {
          return env->callIntMethod(this$, mids$[mid_nextDoc_54c6a179]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_FilterAtomicReader$FilterDocsEnum_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FilterAtomicReader$FilterDocsEnum_instance_(PyTypeObject *type, PyObject *arg);
        static int t_FilterAtomicReader$FilterDocsEnum_init_(t_FilterAtomicReader$FilterDocsEnum *self, PyObject *args, PyObject *kwds);
        static PyObject *t_FilterAtomicReader$FilterDocsEnum_advance(t_FilterAtomicReader$FilterDocsEnum *self, PyObject *args);
        static PyObject *t_FilterAtomicReader$FilterDocsEnum_attributes(t_FilterAtomicReader$FilterDocsEnum *self, PyObject *args);
        static PyObject *t_FilterAtomicReader$FilterDocsEnum_cost(t_FilterAtomicReader$FilterDocsEnum *self, PyObject *args);
        static PyObject *t_FilterAtomicReader$FilterDocsEnum_docID(t_FilterAtomicReader$FilterDocsEnum *self, PyObject *args);
        static PyObject *t_FilterAtomicReader$FilterDocsEnum_freq(t_FilterAtomicReader$FilterDocsEnum *self, PyObject *args);
        static PyObject *t_FilterAtomicReader$FilterDocsEnum_nextDoc(t_FilterAtomicReader$FilterDocsEnum *self, PyObject *args);

        static PyMethodDef t_FilterAtomicReader$FilterDocsEnum__methods_[] = {
          DECLARE_METHOD(t_FilterAtomicReader$FilterDocsEnum, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FilterAtomicReader$FilterDocsEnum, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FilterAtomicReader$FilterDocsEnum, advance, METH_VARARGS),
          DECLARE_METHOD(t_FilterAtomicReader$FilterDocsEnum, attributes, METH_VARARGS),
          DECLARE_METHOD(t_FilterAtomicReader$FilterDocsEnum, cost, METH_VARARGS),
          DECLARE_METHOD(t_FilterAtomicReader$FilterDocsEnum, docID, METH_VARARGS),
          DECLARE_METHOD(t_FilterAtomicReader$FilterDocsEnum, freq, METH_VARARGS),
          DECLARE_METHOD(t_FilterAtomicReader$FilterDocsEnum, nextDoc, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(FilterAtomicReader$FilterDocsEnum, t_FilterAtomicReader$FilterDocsEnum, ::org::apache::lucene::index::DocsEnum, FilterAtomicReader$FilterDocsEnum, t_FilterAtomicReader$FilterDocsEnum_init_, 0, 0, 0, 0, 0);

        void t_FilterAtomicReader$FilterDocsEnum::install(PyObject *module)
        {
          installType(&PY_TYPE(FilterAtomicReader$FilterDocsEnum), module, "FilterAtomicReader$FilterDocsEnum", 0);
        }

        void t_FilterAtomicReader$FilterDocsEnum::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(FilterAtomicReader$FilterDocsEnum).tp_dict, "class_", make_descriptor(FilterAtomicReader$FilterDocsEnum::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(FilterAtomicReader$FilterDocsEnum).tp_dict, "wrapfn_", make_descriptor(t_FilterAtomicReader$FilterDocsEnum::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(FilterAtomicReader$FilterDocsEnum).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_FilterAtomicReader$FilterDocsEnum_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, FilterAtomicReader$FilterDocsEnum::initializeClass, 1)))
            return NULL;
          return t_FilterAtomicReader$FilterDocsEnum::wrap_Object(FilterAtomicReader$FilterDocsEnum(((t_FilterAtomicReader$FilterDocsEnum *) arg)->object.this$));
        }
        static PyObject *t_FilterAtomicReader$FilterDocsEnum_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, FilterAtomicReader$FilterDocsEnum::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_FilterAtomicReader$FilterDocsEnum_init_(t_FilterAtomicReader$FilterDocsEnum *self, PyObject *args, PyObject *kwds)
        {
          ::org::apache::lucene::index::DocsEnum a0((jobject) NULL);
          FilterAtomicReader$FilterDocsEnum object((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::index::DocsEnum::initializeClass, &a0))
          {
            INT_CALL(object = FilterAtomicReader$FilterDocsEnum(a0));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_FilterAtomicReader$FilterDocsEnum_advance(t_FilterAtomicReader$FilterDocsEnum *self, PyObject *args)
        {
          jint a0;
          jint result;

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(result = self->object.advance(a0));
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(FilterAtomicReader$FilterDocsEnum), (PyObject *) self, "advance", args, 2);
        }

        static PyObject *t_FilterAtomicReader$FilterDocsEnum_attributes(t_FilterAtomicReader$FilterDocsEnum *self, PyObject *args)
        {
          ::org::apache::lucene::util::AttributeSource result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.attributes());
            return ::org::apache::lucene::util::t_AttributeSource::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(FilterAtomicReader$FilterDocsEnum), (PyObject *) self, "attributes", args, 2);
        }

        static PyObject *t_FilterAtomicReader$FilterDocsEnum_cost(t_FilterAtomicReader$FilterDocsEnum *self, PyObject *args)
        {
          jlong result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.cost());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          return callSuper(&PY_TYPE(FilterAtomicReader$FilterDocsEnum), (PyObject *) self, "cost", args, 2);
        }

        static PyObject *t_FilterAtomicReader$FilterDocsEnum_docID(t_FilterAtomicReader$FilterDocsEnum *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.docID());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(FilterAtomicReader$FilterDocsEnum), (PyObject *) self, "docID", args, 2);
        }

        static PyObject *t_FilterAtomicReader$FilterDocsEnum_freq(t_FilterAtomicReader$FilterDocsEnum *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.freq());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(FilterAtomicReader$FilterDocsEnum), (PyObject *) self, "freq", args, 2);
        }

        static PyObject *t_FilterAtomicReader$FilterDocsEnum_nextDoc(t_FilterAtomicReader$FilterDocsEnum *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.nextDoc());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(FilterAtomicReader$FilterDocsEnum), (PyObject *) self, "nextDoc", args, 2);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/synonym/SolrSynonymParser.h"
#include "org/apache/lucene/analysis/Analyzer.h"
#include "java/io/IOException.h"
#include "java/io/Reader.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace synonym {

          ::java::lang::Class *SolrSynonymParser::class$ = NULL;
          jmethodID *SolrSynonymParser::mids$ = NULL;
          bool SolrSynonymParser::live$ = false;

          jclass SolrSynonymParser::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/synonym/SolrSynonymParser");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_702f1f56] = env->getMethodID(cls, "<init>", "(ZZLorg/apache/lucene/analysis/Analyzer;)V");
              mids$[mid_parse_cf2e3c10] = env->getMethodID(cls, "parse", "(Ljava/io/Reader;)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          SolrSynonymParser::SolrSynonymParser(jboolean a0, jboolean a1, const ::org::apache::lucene::analysis::Analyzer & a2) : ::org::apache::lucene::analysis::synonym::SynonymMap$Parser(env->newObject(initializeClass, &mids$, mid_init$_702f1f56, a0, a1, a2.this$)) {}

          void SolrSynonymParser::parse(const ::java::io::Reader & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_parse_cf2e3c10], a0.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace synonym {
          static PyObject *t_SolrSynonymParser_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SolrSynonymParser_instance_(PyTypeObject *type, PyObject *arg);
          static int t_SolrSynonymParser_init_(t_SolrSynonymParser *self, PyObject *args, PyObject *kwds);
          static PyObject *t_SolrSynonymParser_parse(t_SolrSynonymParser *self, PyObject *args);

          static PyMethodDef t_SolrSynonymParser__methods_[] = {
            DECLARE_METHOD(t_SolrSynonymParser, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SolrSynonymParser, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SolrSynonymParser, parse, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(SolrSynonymParser, t_SolrSynonymParser, ::org::apache::lucene::analysis::synonym::SynonymMap$Parser, SolrSynonymParser, t_SolrSynonymParser_init_, 0, 0, 0, 0, 0);

          void t_SolrSynonymParser::install(PyObject *module)
          {
            installType(&PY_TYPE(SolrSynonymParser), module, "SolrSynonymParser", 0);
          }

          void t_SolrSynonymParser::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(SolrSynonymParser).tp_dict, "class_", make_descriptor(SolrSynonymParser::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(SolrSynonymParser).tp_dict, "wrapfn_", make_descriptor(t_SolrSynonymParser::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(SolrSynonymParser).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_SolrSynonymParser_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, SolrSynonymParser::initializeClass, 1)))
              return NULL;
            return t_SolrSynonymParser::wrap_Object(SolrSynonymParser(((t_SolrSynonymParser *) arg)->object.this$));
          }
          static PyObject *t_SolrSynonymParser_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, SolrSynonymParser::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_SolrSynonymParser_init_(t_SolrSynonymParser *self, PyObject *args, PyObject *kwds)
          {
            jboolean a0;
            jboolean a1;
            ::org::apache::lucene::analysis::Analyzer a2((jobject) NULL);
            SolrSynonymParser object((jobject) NULL);

            if (!parseArgs(args, "ZZk", ::org::apache::lucene::analysis::Analyzer::initializeClass, &a0, &a1, &a2))
            {
              INT_CALL(object = SolrSynonymParser(a0, a1, a2));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_SolrSynonymParser_parse(t_SolrSynonymParser *self, PyObject *args)
          {
            ::java::io::Reader a0((jobject) NULL);

            if (!parseArgs(args, "k", ::java::io::Reader::initializeClass, &a0))
            {
              OBJ_CALL(self->object.parse(a0));
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(SolrSynonymParser), (PyObject *) self, "parse", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/facet/taxonomy/FloatAssociationFacetField.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace taxonomy {

          ::java::lang::Class *FloatAssociationFacetField::class$ = NULL;
          jmethodID *FloatAssociationFacetField::mids$ = NULL;
          bool FloatAssociationFacetField::live$ = false;

          jclass FloatAssociationFacetField::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/facet/taxonomy/FloatAssociationFacetField");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_000acdbd] = env->getMethodID(cls, "<init>", "(FLjava/lang/String;[Ljava/lang/String;)V");
              mids$[mid_bytesRefToFloat_7bc03dd4] = env->getStaticMethodID(cls, "bytesRefToFloat", "(Lorg/apache/lucene/util/BytesRef;)F");
              mids$[mid_floatToBytesRef_291d8a68] = env->getStaticMethodID(cls, "floatToBytesRef", "(F)Lorg/apache/lucene/util/BytesRef;");
              mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          FloatAssociationFacetField::FloatAssociationFacetField(jfloat a0, const ::java::lang::String & a1, const JArray< ::java::lang::String > & a2) : ::org::apache::lucene::facet::taxonomy::AssociationFacetField(env->newObject(initializeClass, &mids$, mid_init$_000acdbd, a0, a1.this$, a2.this$)) {}

          jfloat FloatAssociationFacetField::bytesRefToFloat(const ::org::apache::lucene::util::BytesRef & a0)
          {
            jclass cls = env->getClass(initializeClass);
            return env->callStaticFloatMethod(cls, mids$[mid_bytesRefToFloat_7bc03dd4], a0.this$);
          }

          ::org::apache::lucene::util::BytesRef FloatAssociationFacetField::floatToBytesRef(jfloat a0)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::util::BytesRef(env->callStaticObjectMethod(cls, mids$[mid_floatToBytesRef_291d8a68], a0));
          }

          ::java::lang::String FloatAssociationFacetField::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace taxonomy {
          static PyObject *t_FloatAssociationFacetField_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_FloatAssociationFacetField_instance_(PyTypeObject *type, PyObject *arg);
          static int t_FloatAssociationFacetField_init_(t_FloatAssociationFacetField *self, PyObject *args, PyObject *kwds);
          static PyObject *t_FloatAssociationFacetField_bytesRefToFloat(PyTypeObject *type, PyObject *arg);
          static PyObject *t_FloatAssociationFacetField_floatToBytesRef(PyTypeObject *type, PyObject *arg);
          static PyObject *t_FloatAssociationFacetField_toString(t_FloatAssociationFacetField *self, PyObject *args);

          static PyMethodDef t_FloatAssociationFacetField__methods_[] = {
            DECLARE_METHOD(t_FloatAssociationFacetField, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FloatAssociationFacetField, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FloatAssociationFacetField, bytesRefToFloat, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FloatAssociationFacetField, floatToBytesRef, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FloatAssociationFacetField, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(FloatAssociationFacetField, t_FloatAssociationFacetField, ::org::apache::lucene::facet::taxonomy::AssociationFacetField, FloatAssociationFacetField, t_FloatAssociationFacetField_init_, 0, 0, 0, 0, 0);

          void t_FloatAssociationFacetField::install(PyObject *module)
          {
            installType(&PY_TYPE(FloatAssociationFacetField), module, "FloatAssociationFacetField", 0);
          }

          void t_FloatAssociationFacetField::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(FloatAssociationFacetField).tp_dict, "class_", make_descriptor(FloatAssociationFacetField::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(FloatAssociationFacetField).tp_dict, "wrapfn_", make_descriptor(t_FloatAssociationFacetField::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(FloatAssociationFacetField).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_FloatAssociationFacetField_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, FloatAssociationFacetField::initializeClass, 1)))
              return NULL;
            return t_FloatAssociationFacetField::wrap_Object(FloatAssociationFacetField(((t_FloatAssociationFacetField *) arg)->object.this$));
          }
          static PyObject *t_FloatAssociationFacetField_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, FloatAssociationFacetField::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_FloatAssociationFacetField_init_(t_FloatAssociationFacetField *self, PyObject *args, PyObject *kwds)
          {
            jfloat a0;
            ::java::lang::String a1((jobject) NULL);
            JArray< ::java::lang::String > a2((jobject) NULL);
            FloatAssociationFacetField object((jobject) NULL);

            if (!parseArgs(args, "Fs[s", &a0, &a1, &a2))
            {
              INT_CALL(object = FloatAssociationFacetField(a0, a1, a2));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_FloatAssociationFacetField_bytesRefToFloat(PyTypeObject *type, PyObject *arg)
          {
            ::org::apache::lucene::util::BytesRef a0((jobject) NULL);
            jfloat result;

            if (!parseArg(arg, "k", ::org::apache::lucene::util::BytesRef::initializeClass, &a0))
            {
              OBJ_CALL(result = ::org::apache::lucene::facet::taxonomy::FloatAssociationFacetField::bytesRefToFloat(a0));
              return PyFloat_FromDouble((double) result);
            }

            PyErr_SetArgsError(type, "bytesRefToFloat", arg);
            return NULL;
          }

          static PyObject *t_FloatAssociationFacetField_floatToBytesRef(PyTypeObject *type, PyObject *arg)
          {
            jfloat a0;
            ::org::apache::lucene::util::BytesRef result((jobject) NULL);

            if (!parseArg(arg, "F", &a0))
            {
              OBJ_CALL(result = ::org::apache::lucene::facet::taxonomy::FloatAssociationFacetField::floatToBytesRef(a0));
              return ::org::apache::lucene::util::t_BytesRef::wrap_Object(result);
            }

            PyErr_SetArgsError(type, "floatToBytesRef", arg);
            return NULL;
          }

          static PyObject *t_FloatAssociationFacetField_toString(t_FloatAssociationFacetField *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(&PY_TYPE(FloatAssociationFacetField), (PyObject *) self, "toString", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/facet/taxonomy/SearcherTaxonomyManager.h"
#include "org/apache/lucene/facet/taxonomy/SearcherTaxonomyManager$SearcherAndTaxonomy.h"
#include "org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyWriter.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/store/Directory.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/index/IndexWriter.h"
#include "org/apache/lucene/search/SearcherFactory.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace taxonomy {

          ::java::lang::Class *SearcherTaxonomyManager::class$ = NULL;
          jmethodID *SearcherTaxonomyManager::mids$ = NULL;
          bool SearcherTaxonomyManager::live$ = false;

          jclass SearcherTaxonomyManager::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/facet/taxonomy/SearcherTaxonomyManager");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_c5068542] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/store/Directory;Lorg/apache/lucene/store/Directory;Lorg/apache/lucene/search/SearcherFactory;)V");
              mids$[mid_init$_4154e337] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/IndexWriter;ZLorg/apache/lucene/search/SearcherFactory;Lorg/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyWriter;)V");
              mids$[mid_decRef_db563eaa] = env->getMethodID(cls, "decRef", "(Lorg/apache/lucene/facet/taxonomy/SearcherTaxonomyManager$SearcherAndTaxonomy;)V");
              mids$[mid_getRefCount_db563eb5] = env->getMethodID(cls, "getRefCount", "(Lorg/apache/lucene/facet/taxonomy/SearcherTaxonomyManager$SearcherAndTaxonomy;)I");
              mids$[mid_tryIncRef_db563ea6] = env->getMethodID(cls, "tryIncRef", "(Lorg/apache/lucene/facet/taxonomy/SearcherTaxonomyManager$SearcherAndTaxonomy;)Z");
              mids$[mid_refreshIfNeeded_9a7202bf] = env->getMethodID(cls, "refreshIfNeeded", "(Lorg/apache/lucene/facet/taxonomy/SearcherTaxonomyManager$SearcherAndTaxonomy;)Lorg/apache/lucene/facet/taxonomy/SearcherTaxonomyManager$SearcherAndTaxonomy;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          SearcherTaxonomyManager::SearcherTaxonomyManager(const ::org::apache::lucene::store::Directory & a0, const ::org::apache::lucene::store::Directory & a1, const ::org::apache::lucene::search::SearcherFactory & a2) : ::org::apache::lucene::search::ReferenceManager(env->newObject(initializeClass, &mids$, mid_init$_c5068542, a0.this$, a1.this$, a2.this$)) {}

          SearcherTaxonomyManager::SearcherTaxonomyManager(const ::org::apache::lucene::index::IndexWriter & a0, jboolean a1, const ::org::apache::lucene::search::SearcherFactory & a2, const ::org::apache::lucene::facet::taxonomy::directory::DirectoryTaxonomyWriter & a3) : ::org::apache::lucene::search::ReferenceManager(env->newObject(initializeClass, &mids$, mid_init$_4154e337, a0.this$, a1, a2.this$, a3.this$)) {}
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace taxonomy {
          static PyObject *t_SearcherTaxonomyManager_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SearcherTaxonomyManager_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SearcherTaxonomyManager_of_(t_SearcherTaxonomyManager *self, PyObject *args);
          static int t_SearcherTaxonomyManager_init_(t_SearcherTaxonomyManager *self, PyObject *args, PyObject *kwds);
          static PyObject *t_SearcherTaxonomyManager_get__parameters_(t_SearcherTaxonomyManager *self, void *data);
          static PyGetSetDef t_SearcherTaxonomyManager__fields_[] = {
            DECLARE_GET_FIELD(t_SearcherTaxonomyManager, parameters_),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_SearcherTaxonomyManager__methods_[] = {
            DECLARE_METHOD(t_SearcherTaxonomyManager, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SearcherTaxonomyManager, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SearcherTaxonomyManager, of_, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(SearcherTaxonomyManager, t_SearcherTaxonomyManager, ::org::apache::lucene::search::ReferenceManager, SearcherTaxonomyManager, t_SearcherTaxonomyManager_init_, 0, 0, t_SearcherTaxonomyManager__fields_, 0, 0);
          PyObject *t_SearcherTaxonomyManager::wrap_Object(const SearcherTaxonomyManager& object, PyTypeObject *p0)
          {
            PyObject *obj = t_SearcherTaxonomyManager::wrap_Object(object);
            if (obj != NULL && obj != Py_None)
            {
              t_SearcherTaxonomyManager *self = (t_SearcherTaxonomyManager *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          PyObject *t_SearcherTaxonomyManager::wrap_jobject(const jobject& object, PyTypeObject *p0)
          {
            PyObject *obj = t_SearcherTaxonomyManager::wrap_jobject(object);
            if (obj != NULL && obj != Py_None)
            {
              t_SearcherTaxonomyManager *self = (t_SearcherTaxonomyManager *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          void t_SearcherTaxonomyManager::install(PyObject *module)
          {
            installType(&PY_TYPE(SearcherTaxonomyManager), module, "SearcherTaxonomyManager", 0);
            PyDict_SetItemString(PY_TYPE(SearcherTaxonomyManager).tp_dict, "SearcherAndTaxonomy", make_descriptor(&PY_TYPE(SearcherTaxonomyManager$SearcherAndTaxonomy)));
          }

          void t_SearcherTaxonomyManager::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(SearcherTaxonomyManager).tp_dict, "class_", make_descriptor(SearcherTaxonomyManager::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(SearcherTaxonomyManager).tp_dict, "wrapfn_", make_descriptor(t_SearcherTaxonomyManager::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(SearcherTaxonomyManager).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_SearcherTaxonomyManager_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, SearcherTaxonomyManager::initializeClass, 1)))
              return NULL;
            return t_SearcherTaxonomyManager::wrap_Object(SearcherTaxonomyManager(((t_SearcherTaxonomyManager *) arg)->object.this$));
          }
          static PyObject *t_SearcherTaxonomyManager_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, SearcherTaxonomyManager::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_SearcherTaxonomyManager_of_(t_SearcherTaxonomyManager *self, PyObject *args)
          {
            if (!parseArg(args, "T", 1, &(self->parameters)))
              Py_RETURN_SELF;
            return PyErr_SetArgsError((PyObject *) self, "of_", args);
          }

          static int t_SearcherTaxonomyManager_init_(t_SearcherTaxonomyManager *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 3:
              {
                ::org::apache::lucene::store::Directory a0((jobject) NULL);
                ::org::apache::lucene::store::Directory a1((jobject) NULL);
                ::org::apache::lucene::search::SearcherFactory a2((jobject) NULL);
                SearcherTaxonomyManager object((jobject) NULL);

                if (!parseArgs(args, "kkk", ::org::apache::lucene::store::Directory::initializeClass, ::org::apache::lucene::store::Directory::initializeClass, ::org::apache::lucene::search::SearcherFactory::initializeClass, &a0, &a1, &a2))
                {
                  INT_CALL(object = SearcherTaxonomyManager(a0, a1, a2));
                  self->object = object;
                  self->parameters[0] = &::org::apache::lucene::facet::taxonomy::PY_TYPE(SearcherTaxonomyManager$SearcherAndTaxonomy);
                  break;
                }
              }
              goto err;
             case 4:
              {
                ::org::apache::lucene::index::IndexWriter a0((jobject) NULL);
                jboolean a1;
                ::org::apache::lucene::search::SearcherFactory a2((jobject) NULL);
                ::org::apache::lucene::facet::taxonomy::directory::DirectoryTaxonomyWriter a3((jobject) NULL);
                SearcherTaxonomyManager object((jobject) NULL);

                if (!parseArgs(args, "kZkk", ::org::apache::lucene::index::IndexWriter::initializeClass, ::org::apache::lucene::search::SearcherFactory::initializeClass, ::org::apache::lucene::facet::taxonomy::directory::DirectoryTaxonomyWriter::initializeClass, &a0, &a1, &a2, &a3))
                {
                  INT_CALL(object = SearcherTaxonomyManager(a0, a1, a2, a3));
                  self->object = object;
                  self->parameters[0] = &::org::apache::lucene::facet::taxonomy::PY_TYPE(SearcherTaxonomyManager$SearcherAndTaxonomy);
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }
          static PyObject *t_SearcherTaxonomyManager_get__parameters_(t_SearcherTaxonomyManager *self, void *data)
          {
            return typeParameters(self->parameters, sizeof(self->parameters));
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/core/WhitespaceTokenizerFactory.h"
#include "org/apache/lucene/util/AttributeFactory.h"
#include "java/lang/Class.h"
#include "java/util/Map.h"
#include "java/io/Reader.h"
#include "java/lang/String.h"
#include "org/apache/lucene/analysis/core/WhitespaceTokenizer.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace core {

          ::java::lang::Class *WhitespaceTokenizerFactory::class$ = NULL;
          jmethodID *WhitespaceTokenizerFactory::mids$ = NULL;
          bool WhitespaceTokenizerFactory::live$ = false;

          jclass WhitespaceTokenizerFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/core/WhitespaceTokenizerFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4c9e2b1c] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_3e31041b] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/util/AttributeFactory;Ljava/io/Reader;)Lorg/apache/lucene/analysis/core/WhitespaceTokenizer;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          WhitespaceTokenizerFactory::WhitespaceTokenizerFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenizerFactory(env->newObject(initializeClass, &mids$, mid_init$_4c9e2b1c, a0.this$)) {}

          ::org::apache::lucene::analysis::core::WhitespaceTokenizer WhitespaceTokenizerFactory::create(const ::org::apache::lucene::util::AttributeFactory & a0, const ::java::io::Reader & a1) const
          {
            return ::org::apache::lucene::analysis::core::WhitespaceTokenizer(env->callObjectMethod(this$, mids$[mid_create_3e31041b], a0.this$, a1.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace core {
          static PyObject *t_WhitespaceTokenizerFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_WhitespaceTokenizerFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_WhitespaceTokenizerFactory_init_(t_WhitespaceTokenizerFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_WhitespaceTokenizerFactory_create(t_WhitespaceTokenizerFactory *self, PyObject *args);

          static PyMethodDef t_WhitespaceTokenizerFactory__methods_[] = {
            DECLARE_METHOD(t_WhitespaceTokenizerFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_WhitespaceTokenizerFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_WhitespaceTokenizerFactory, create, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(WhitespaceTokenizerFactory, t_WhitespaceTokenizerFactory, ::org::apache::lucene::analysis::util::TokenizerFactory, WhitespaceTokenizerFactory, t_WhitespaceTokenizerFactory_init_, 0, 0, 0, 0, 0);

          void t_WhitespaceTokenizerFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(WhitespaceTokenizerFactory), module, "WhitespaceTokenizerFactory", 0);
          }

          void t_WhitespaceTokenizerFactory::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(WhitespaceTokenizerFactory).tp_dict, "class_", make_descriptor(WhitespaceTokenizerFactory::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(WhitespaceTokenizerFactory).tp_dict, "wrapfn_", make_descriptor(t_WhitespaceTokenizerFactory::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(WhitespaceTokenizerFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_WhitespaceTokenizerFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, WhitespaceTokenizerFactory::initializeClass, 1)))
              return NULL;
            return t_WhitespaceTokenizerFactory::wrap_Object(WhitespaceTokenizerFactory(((t_WhitespaceTokenizerFactory *) arg)->object.this$));
          }
          static PyObject *t_WhitespaceTokenizerFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, WhitespaceTokenizerFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_WhitespaceTokenizerFactory_init_(t_WhitespaceTokenizerFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            WhitespaceTokenizerFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = WhitespaceTokenizerFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_WhitespaceTokenizerFactory_create(t_WhitespaceTokenizerFactory *self, PyObject *args)
          {
            ::org::apache::lucene::util::AttributeFactory a0((jobject) NULL);
            ::java::io::Reader a1((jobject) NULL);
            ::org::apache::lucene::analysis::core::WhitespaceTokenizer result((jobject) NULL);

            if (!parseArgs(args, "kk", ::org::apache::lucene::util::AttributeFactory::initializeClass, ::java::io::Reader::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.create(a0, a1));
              return ::org::apache::lucene::analysis::core::t_WhitespaceTokenizer::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(WhitespaceTokenizerFactory), (PyObject *) self, "create", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/en/EnglishPossessiveFilter.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "org/apache/lucene/util/Version.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace en {

          ::java::lang::Class *EnglishPossessiveFilter::class$ = NULL;
          jmethodID *EnglishPossessiveFilter::mids$ = NULL;
          bool EnglishPossessiveFilter::live$ = false;

          jclass EnglishPossessiveFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/en/EnglishPossessiveFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_c7c794dc] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;)V");
              mids$[mid_init$_8f50e725] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/analysis/TokenStream;)V");
              mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          EnglishPossessiveFilter::EnglishPossessiveFilter(const ::org::apache::lucene::analysis::TokenStream & a0) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_c7c794dc, a0.this$)) {}

          EnglishPossessiveFilter::EnglishPossessiveFilter(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::analysis::TokenStream & a1) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_8f50e725, a0.this$, a1.this$)) {}

          jboolean EnglishPossessiveFilter::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_54c6a16a]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace en {
          static PyObject *t_EnglishPossessiveFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_EnglishPossessiveFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_EnglishPossessiveFilter_init_(t_EnglishPossessiveFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_EnglishPossessiveFilter_incrementToken(t_EnglishPossessiveFilter *self, PyObject *args);

          static PyMethodDef t_EnglishPossessiveFilter__methods_[] = {
            DECLARE_METHOD(t_EnglishPossessiveFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_EnglishPossessiveFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_EnglishPossessiveFilter, incrementToken, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(EnglishPossessiveFilter, t_EnglishPossessiveFilter, ::org::apache::lucene::analysis::TokenFilter, EnglishPossessiveFilter, t_EnglishPossessiveFilter_init_, 0, 0, 0, 0, 0);

          void t_EnglishPossessiveFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(EnglishPossessiveFilter), module, "EnglishPossessiveFilter", 0);
          }

          void t_EnglishPossessiveFilter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(EnglishPossessiveFilter).tp_dict, "class_", make_descriptor(EnglishPossessiveFilter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(EnglishPossessiveFilter).tp_dict, "wrapfn_", make_descriptor(t_EnglishPossessiveFilter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(EnglishPossessiveFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_EnglishPossessiveFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, EnglishPossessiveFilter::initializeClass, 1)))
              return NULL;
            return t_EnglishPossessiveFilter::wrap_Object(EnglishPossessiveFilter(((t_EnglishPossessiveFilter *) arg)->object.this$));
          }
          static PyObject *t_EnglishPossessiveFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, EnglishPossessiveFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_EnglishPossessiveFilter_init_(t_EnglishPossessiveFilter *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
                EnglishPossessiveFilter object((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
                {
                  INT_CALL(object = EnglishPossessiveFilter(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 2:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                ::org::apache::lucene::analysis::TokenStream a1((jobject) NULL);
                EnglishPossessiveFilter object((jobject) NULL);

                if (!parseArgs(args, "Kk", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1))
                {
                  INT_CALL(object = EnglishPossessiveFilter(a0, a1));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_EnglishPossessiveFilter_incrementToken(t_EnglishPossessiveFilter *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(EnglishPossessiveFilter), (PyObject *) self, "incrementToken", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/spell/SuggestWord.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace spell {

          ::java::lang::Class *SuggestWord::class$ = NULL;
          jmethodID *SuggestWord::mids$ = NULL;
          jfieldID *SuggestWord::fids$ = NULL;
          bool SuggestWord::live$ = false;

          jclass SuggestWord::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/spell/SuggestWord");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");

              fids$ = new jfieldID[max_fid];
              fids$[fid_freq] = env->getFieldID(cls, "freq", "I");
              fids$[fid_score] = env->getFieldID(cls, "score", "F");
              fids$[fid_string] = env->getFieldID(cls, "string", "Ljava/lang/String;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          SuggestWord::SuggestWord() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          jint SuggestWord::_get_freq() const
          {
            return env->getIntField(this$, fids$[fid_freq]);
          }

          void SuggestWord::_set_freq(jint a0) const
          {
            env->setIntField(this$, fids$[fid_freq], a0);
          }

          jfloat SuggestWord::_get_score() const
          {
            return env->getFloatField(this$, fids$[fid_score]);
          }

          void SuggestWord::_set_score(jfloat a0) const
          {
            env->setFloatField(this$, fids$[fid_score], a0);
          }

          ::java::lang::String SuggestWord::_get_string() const
          {
            return ::java::lang::String(env->getObjectField(this$, fids$[fid_string]));
          }

          void SuggestWord::_set_string(const ::java::lang::String & a0) const
          {
            env->setObjectField(this$, fids$[fid_string], a0.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace spell {
          static PyObject *t_SuggestWord_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SuggestWord_instance_(PyTypeObject *type, PyObject *arg);
          static int t_SuggestWord_init_(t_SuggestWord *self, PyObject *args, PyObject *kwds);
          static PyObject *t_SuggestWord_get__freq(t_SuggestWord *self, void *data);
          static int t_SuggestWord_set__freq(t_SuggestWord *self, PyObject *arg, void *data);
          static PyObject *t_SuggestWord_get__score(t_SuggestWord *self, void *data);
          static int t_SuggestWord_set__score(t_SuggestWord *self, PyObject *arg, void *data);
          static PyObject *t_SuggestWord_get__string(t_SuggestWord *self, void *data);
          static int t_SuggestWord_set__string(t_SuggestWord *self, PyObject *arg, void *data);

          static PyGetSetDef t_SuggestWord__fields_[] = {
            DECLARE_GETSET_FIELD(t_SuggestWord, freq),
            DECLARE_GETSET_FIELD(t_SuggestWord, score),
            DECLARE_GETSET_FIELD(t_SuggestWord, string),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_SuggestWord__methods_[] = {
            DECLARE_METHOD(t_SuggestWord, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SuggestWord, instance_, METH_O | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(SuggestWord, t_SuggestWord, ::java::lang::Object, SuggestWord, t_SuggestWord_init_, 0, 0, t_SuggestWord__fields_, 0, 0);

          void t_SuggestWord::install(PyObject *module)
          {
            installType(&PY_TYPE(SuggestWord), module, "SuggestWord", 0);
          }

          void t_SuggestWord::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(SuggestWord).tp_dict, "class_", make_descriptor(SuggestWord::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(SuggestWord).tp_dict, "wrapfn_", make_descriptor(t_SuggestWord::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(SuggestWord).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_SuggestWord_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, SuggestWord::initializeClass, 1)))
              return NULL;
            return t_SuggestWord::wrap_Object(SuggestWord(((t_SuggestWord *) arg)->object.this$));
          }
          static PyObject *t_SuggestWord_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, SuggestWord::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_SuggestWord_init_(t_SuggestWord *self, PyObject *args, PyObject *kwds)
          {
            SuggestWord object((jobject) NULL);

            INT_CALL(object = SuggestWord());
            self->object = object;

            return 0;
          }

          static PyObject *t_SuggestWord_get__freq(t_SuggestWord *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object._get_freq());
            return PyInt_FromLong((long) value);
          }
          static int t_SuggestWord_set__freq(t_SuggestWord *self, PyObject *arg, void *data)
          {
            jint value;
            if (!parseArg(arg, "I", &value))
            {
              INT_CALL(self->object._set_freq(value));
              return 0;
            }
            PyErr_SetArgsError((PyObject *) self, "freq", arg);
            return -1;
          }

          static PyObject *t_SuggestWord_get__score(t_SuggestWord *self, void *data)
          {
            jfloat value;
            OBJ_CALL(value = self->object._get_score());
            return PyFloat_FromDouble((double) value);
          }
          static int t_SuggestWord_set__score(t_SuggestWord *self, PyObject *arg, void *data)
          {
            jfloat value;
            if (!parseArg(arg, "F", &value))
            {
              INT_CALL(self->object._set_score(value));
              return 0;
            }
            PyErr_SetArgsError((PyObject *) self, "score", arg);
            return -1;
          }

          static PyObject *t_SuggestWord_get__string(t_SuggestWord *self, void *data)
          {
            ::java::lang::String value((jobject) NULL);
            OBJ_CALL(value = self->object._get_string());
            return j2p(value);
          }
          static int t_SuggestWord_set__string(t_SuggestWord *self, PyObject *arg, void *data)
          {
            ::java::lang::String value((jobject) NULL);
            if (!parseArg(arg, "s", &value))
            {
              INT_CALL(self->object._set_string(value));
              return 0;
            }
            PyErr_SetArgsError((PyObject *) self, "string", arg);
            return -1;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/SortField$Type.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *SortField$Type::class$ = NULL;
        jmethodID *SortField$Type::mids$ = NULL;
        bool SortField$Type::live$ = false;
        SortField$Type *SortField$Type::BYTE = NULL;
        SortField$Type *SortField$Type::BYTES = NULL;
        SortField$Type *SortField$Type::CUSTOM = NULL;
        SortField$Type *SortField$Type::DOC = NULL;
        SortField$Type *SortField$Type::DOUBLE = NULL;
        SortField$Type *SortField$Type::FLOAT = NULL;
        SortField$Type *SortField$Type::INT = NULL;
        SortField$Type *SortField$Type::LONG = NULL;
        SortField$Type *SortField$Type::REWRITEABLE = NULL;
        SortField$Type *SortField$Type::SCORE = NULL;
        SortField$Type *SortField$Type::SHORT = NULL;
        SortField$Type *SortField$Type::STRING = NULL;
        SortField$Type *SortField$Type::STRING_VAL = NULL;

        jclass SortField$Type::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/SortField$Type");

            mids$ = new jmethodID[max_mid];
            mids$[mid_valueOf_3d40a53b] = env->getStaticMethodID(cls, "valueOf", "(Ljava/lang/String;)Lorg/apache/lucene/search/SortField$Type;");
            mids$[mid_values_05ae94bd] = env->getStaticMethodID(cls, "values", "()[Lorg/apache/lucene/search/SortField$Type;");

            class$ = (::java::lang::Class *) new JObject(cls);
            cls = (jclass) class$->this$;

            BYTE = new SortField$Type(env->getStaticObjectField(cls, "BYTE", "Lorg/apache/lucene/search/SortField$Type;"));
            BYTES = new SortField$Type(env->getStaticObjectField(cls, "BYTES", "Lorg/apache/lucene/search/SortField$Type;"));
            CUSTOM = new SortField$Type(env->getStaticObjectField(cls, "CUSTOM", "Lorg/apache/lucene/search/SortField$Type;"));
            DOC = new SortField$Type(env->getStaticObjectField(cls, "DOC", "Lorg/apache/lucene/search/SortField$Type;"));
            DOUBLE = new SortField$Type(env->getStaticObjectField(cls, "DOUBLE", "Lorg/apache/lucene/search/SortField$Type;"));
            FLOAT = new SortField$Type(env->getStaticObjectField(cls, "FLOAT", "Lorg/apache/lucene/search/SortField$Type;"));
            INT = new SortField$Type(env->getStaticObjectField(cls, "INT", "Lorg/apache/lucene/search/SortField$Type;"));
            LONG = new SortField$Type(env->getStaticObjectField(cls, "LONG", "Lorg/apache/lucene/search/SortField$Type;"));
            REWRITEABLE = new SortField$Type(env->getStaticObjectField(cls, "REWRITEABLE", "Lorg/apache/lucene/search/SortField$Type;"));
            SCORE = new SortField$Type(env->getStaticObjectField(cls, "SCORE", "Lorg/apache/lucene/search/SortField$Type;"));
            SHORT = new SortField$Type(env->getStaticObjectField(cls, "SHORT", "Lorg/apache/lucene/search/SortField$Type;"));
            STRING = new SortField$Type(env->getStaticObjectField(cls, "STRING", "Lorg/apache/lucene/search/SortField$Type;"));
            STRING_VAL = new SortField$Type(env->getStaticObjectField(cls, "STRING_VAL", "Lorg/apache/lucene/search/SortField$Type;"));
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        SortField$Type SortField$Type::valueOf(const ::java::lang::String & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return SortField$Type(env->callStaticObjectMethod(cls, mids$[mid_valueOf_3d40a53b], a0.this$));
        }

        JArray< SortField$Type > SortField$Type::values()
        {
          jclass cls = env->getClass(initializeClass);
          return JArray< SortField$Type >(env->callStaticObjectMethod(cls, mids$[mid_values_05ae94bd]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_SortField$Type_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_SortField$Type_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_SortField$Type_of_(t_SortField$Type *self, PyObject *args);
        static PyObject *t_SortField$Type_valueOf(PyTypeObject *type, PyObject *args);
        static PyObject *t_SortField$Type_values(PyTypeObject *type);
        static PyObject *t_SortField$Type_get__parameters_(t_SortField$Type *self, void *data);
        static PyGetSetDef t_SortField$Type__fields_[] = {
          DECLARE_GET_FIELD(t_SortField$Type, parameters_),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_SortField$Type__methods_[] = {
          DECLARE_METHOD(t_SortField$Type, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SortField$Type, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SortField$Type, of_, METH_VARARGS),
          DECLARE_METHOD(t_SortField$Type, valueOf, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_SortField$Type, values, METH_NOARGS | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(SortField$Type, t_SortField$Type, ::java::lang::Enum, SortField$Type, abstract_init, 0, 0, t_SortField$Type__fields_, 0, 0);
        PyObject *t_SortField$Type::wrap_Object(const SortField$Type& object, PyTypeObject *p0)
        {
          PyObject *obj = t_SortField$Type::wrap_Object(object);
          if (obj != NULL && obj != Py_None)
          {
            t_SortField$Type *self = (t_SortField$Type *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        PyObject *t_SortField$Type::wrap_jobject(const jobject& object, PyTypeObject *p0)
        {
          PyObject *obj = t_SortField$Type::wrap_jobject(object);
          if (obj != NULL && obj != Py_None)
          {
            t_SortField$Type *self = (t_SortField$Type *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        void t_SortField$Type::install(PyObject *module)
        {
          installType(&PY_TYPE(SortField$Type), module, "SortField$Type", 0);
        }

        void t_SortField$Type::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(SortField$Type).tp_dict, "class_", make_descriptor(SortField$Type::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(SortField$Type).tp_dict, "wrapfn_", make_descriptor(t_SortField$Type::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(SortField$Type).tp_dict, "boxfn_", make_descriptor(boxObject));
          env->getClass(SortField$Type::initializeClass);
          PyDict_SetItemString(PY_TYPE(SortField$Type).tp_dict, "BYTE", make_descriptor(t_SortField$Type::wrap_Object(*SortField$Type::BYTE)));
          PyDict_SetItemString(PY_TYPE(SortField$Type).tp_dict, "BYTES", make_descriptor(t_SortField$Type::wrap_Object(*SortField$Type::BYTES)));
          PyDict_SetItemString(PY_TYPE(SortField$Type).tp_dict, "CUSTOM", make_descriptor(t_SortField$Type::wrap_Object(*SortField$Type::CUSTOM)));
          PyDict_SetItemString(PY_TYPE(SortField$Type).tp_dict, "DOC", make_descriptor(t_SortField$Type::wrap_Object(*SortField$Type::DOC)));
          PyDict_SetItemString(PY_TYPE(SortField$Type).tp_dict, "DOUBLE", make_descriptor(t_SortField$Type::wrap_Object(*SortField$Type::DOUBLE)));
          PyDict_SetItemString(PY_TYPE(SortField$Type).tp_dict, "FLOAT", make_descriptor(t_SortField$Type::wrap_Object(*SortField$Type::FLOAT)));
          PyDict_SetItemString(PY_TYPE(SortField$Type).tp_dict, "INT", make_descriptor(t_SortField$Type::wrap_Object(*SortField$Type::INT)));
          PyDict_SetItemString(PY_TYPE(SortField$Type).tp_dict, "LONG", make_descriptor(t_SortField$Type::wrap_Object(*SortField$Type::LONG)));
          PyDict_SetItemString(PY_TYPE(SortField$Type).tp_dict, "REWRITEABLE", make_descriptor(t_SortField$Type::wrap_Object(*SortField$Type::REWRITEABLE)));
          PyDict_SetItemString(PY_TYPE(SortField$Type).tp_dict, "SCORE", make_descriptor(t_SortField$Type::wrap_Object(*SortField$Type::SCORE)));
          PyDict_SetItemString(PY_TYPE(SortField$Type).tp_dict, "SHORT", make_descriptor(t_SortField$Type::wrap_Object(*SortField$Type::SHORT)));
          PyDict_SetItemString(PY_TYPE(SortField$Type).tp_dict, "STRING", make_descriptor(t_SortField$Type::wrap_Object(*SortField$Type::STRING)));
          PyDict_SetItemString(PY_TYPE(SortField$Type).tp_dict, "STRING_VAL", make_descriptor(t_SortField$Type::wrap_Object(*SortField$Type::STRING_VAL)));
        }

        static PyObject *t_SortField$Type_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, SortField$Type::initializeClass, 1)))
            return NULL;
          return t_SortField$Type::wrap_Object(SortField$Type(((t_SortField$Type *) arg)->object.this$));
        }
        static PyObject *t_SortField$Type_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, SortField$Type::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_SortField$Type_of_(t_SortField$Type *self, PyObject *args)
        {
          if (!parseArg(args, "T", 1, &(self->parameters)))
            Py_RETURN_SELF;
          return PyErr_SetArgsError((PyObject *) self, "of_", args);
        }

        static PyObject *t_SortField$Type_valueOf(PyTypeObject *type, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          SortField$Type result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::search::SortField$Type::valueOf(a0));
            return t_SortField$Type::wrap_Object(result);
          }

          return callSuper(type, "valueOf", args, 2);
        }

        static PyObject *t_SortField$Type_values(PyTypeObject *type)
        {
          JArray< SortField$Type > result((jobject) NULL);
          OBJ_CALL(result = ::org::apache::lucene::search::SortField$Type::values());
          return JArray<jobject>(result.this$).wrap(t_SortField$Type::wrap_jobject);
        }
        static PyObject *t_SortField$Type_get__parameters_(t_SortField$Type *self, void *data)
        {
          return typeParameters(self->parameters, sizeof(self->parameters));
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/highlight/Highlighter.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "org/apache/lucene/search/highlight/Fragmenter.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/search/highlight/Scorer.h"
#include "org/apache/lucene/search/highlight/InvalidTokenOffsetsException.h"
#include "org/apache/lucene/search/highlight/TextFragment.h"
#include "org/apache/lucene/search/highlight/Formatter.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/Analyzer.h"
#include "org/apache/lucene/search/highlight/Encoder.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace highlight {

          ::java::lang::Class *Highlighter::class$ = NULL;
          jmethodID *Highlighter::mids$ = NULL;
          bool Highlighter::live$ = false;
          jint Highlighter::DEFAULT_MAX_CHARS_TO_ANALYZE = (jint) 0;

          jclass Highlighter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/highlight/Highlighter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_9bd3ff73] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/highlight/Scorer;)V");
              mids$[mid_init$_f1844869] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/highlight/Formatter;Lorg/apache/lucene/search/highlight/Scorer;)V");
              mids$[mid_init$_154db1db] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/highlight/Formatter;Lorg/apache/lucene/search/highlight/Encoder;Lorg/apache/lucene/search/highlight/Scorer;)V");
              mids$[mid_getBestFragment_36cba2a5] = env->getMethodID(cls, "getBestFragment", "(Lorg/apache/lucene/analysis/TokenStream;Ljava/lang/String;)Ljava/lang/String;");
              mids$[mid_getBestFragment_87f832fb] = env->getMethodID(cls, "getBestFragment", "(Lorg/apache/lucene/analysis/Analyzer;Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;");
              mids$[mid_getBestFragments_9d06cc93] = env->getMethodID(cls, "getBestFragments", "(Lorg/apache/lucene/analysis/TokenStream;Ljava/lang/String;I)[Ljava/lang/String;");
              mids$[mid_getBestFragments_eafe1ad1] = env->getMethodID(cls, "getBestFragments", "(Lorg/apache/lucene/analysis/TokenStream;Ljava/lang/String;ILjava/lang/String;)Ljava/lang/String;");
              mids$[mid_getBestFragments_652768f5] = env->getMethodID(cls, "getBestFragments", "(Lorg/apache/lucene/analysis/Analyzer;Ljava/lang/String;Ljava/lang/String;I)[Ljava/lang/String;");
              mids$[mid_getBestTextFragments_d795d3a4] = env->getMethodID(cls, "getBestTextFragments", "(Lorg/apache/lucene/analysis/TokenStream;Ljava/lang/String;ZI)[Lorg/apache/lucene/search/highlight/TextFragment;");
              mids$[mid_getEncoder_e179b145] = env->getMethodID(cls, "getEncoder", "()Lorg/apache/lucene/search/highlight/Encoder;");
              mids$[mid_getFragmentScorer_0eb4d65e] = env->getMethodID(cls, "getFragmentScorer", "()Lorg/apache/lucene/search/highlight/Scorer;");
              mids$[mid_getMaxDocCharsToAnalyze_54c6a179] = env->getMethodID(cls, "getMaxDocCharsToAnalyze", "()I");
              mids$[mid_getTextFragmenter_c9a72455] = env->getMethodID(cls, "getTextFragmenter", "()Lorg/apache/lucene/search/highlight/Fragmenter;");
              mids$[mid_setEncoder_8b781108] = env->getMethodID(cls, "setEncoder", "(Lorg/apache/lucene/search/highlight/Encoder;)V");
              mids$[mid_setFragmentScorer_9bd3ff73] = env->getMethodID(cls, "setFragmentScorer", "(Lorg/apache/lucene/search/highlight/Scorer;)V");
              mids$[mid_setMaxDocCharsToAnalyze_39c7bd3c] = env->getMethodID(cls, "setMaxDocCharsToAnalyze", "(I)V");
              mids$[mid_setTextFragmenter_d6ed4d20] = env->getMethodID(cls, "setTextFragmenter", "(Lorg/apache/lucene/search/highlight/Fragmenter;)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              DEFAULT_MAX_CHARS_TO_ANALYZE = env->getStaticIntField(cls, "DEFAULT_MAX_CHARS_TO_ANALYZE");
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          Highlighter::Highlighter(const ::org::apache::lucene::search::highlight::Scorer & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_9bd3ff73, a0.this$)) {}

          Highlighter::Highlighter(const ::org::apache::lucene::search::highlight::Formatter & a0, const ::org::apache::lucene::search::highlight::Scorer & a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_f1844869, a0.this$, a1.this$)) {}

          Highlighter::Highlighter(const ::org::apache::lucene::search::highlight::Formatter & a0, const ::org::apache::lucene::search::highlight::Encoder & a1, const ::org::apache::lucene::search::highlight::Scorer & a2) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_154db1db, a0.this$, a1.this$, a2.this$)) {}

          ::java::lang::String Highlighter::getBestFragment(const ::org::apache::lucene::analysis::TokenStream & a0, const ::java::lang::String & a1) const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getBestFragment_36cba2a5], a0.this$, a1.this$));
          }

          ::java::lang::String Highlighter::getBestFragment(const ::org::apache::lucene::analysis::Analyzer & a0, const ::java::lang::String & a1, const ::java::lang::String & a2) const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getBestFragment_87f832fb], a0.this$, a1.this$, a2.this$));
          }

          JArray< ::java::lang::String > Highlighter::getBestFragments(const ::org::apache::lucene::analysis::TokenStream & a0, const ::java::lang::String & a1, jint a2) const
          {
            return JArray< ::java::lang::String >(env->callObjectMethod(this$, mids$[mid_getBestFragments_9d06cc93], a0.this$, a1.this$, a2));
          }

          ::java::lang::String Highlighter::getBestFragments(const ::org::apache::lucene::analysis::TokenStream & a0, const ::java::lang::String & a1, jint a2, const ::java::lang::String & a3) const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getBestFragments_eafe1ad1], a0.this$, a1.this$, a2, a3.this$));
          }

          JArray< ::java::lang::String > Highlighter::getBestFragments(const ::org::apache::lucene::analysis::Analyzer & a0, const ::java::lang::String & a1, const ::java::lang::String & a2, jint a3) const
          {
            return JArray< ::java::lang::String >(env->callObjectMethod(this$, mids$[mid_getBestFragments_652768f5], a0.this$, a1.this$, a2.this$, a3));
          }

          JArray< ::org::apache::lucene::search::highlight::TextFragment > Highlighter::getBestTextFragments(const ::org::apache::lucene::analysis::TokenStream & a0, const ::java::lang::String & a1, jboolean a2, jint a3) const
          {
            return JArray< ::org::apache::lucene::search::highlight::TextFragment >(env->callObjectMethod(this$, mids$[mid_getBestTextFragments_d795d3a4], a0.this$, a1.this$, a2, a3));
          }

          ::org::apache::lucene::search::highlight::Encoder Highlighter::getEncoder() const
          {
            return ::org::apache::lucene::search::highlight::Encoder(env->callObjectMethod(this$, mids$[mid_getEncoder_e179b145]));
          }

          ::org::apache::lucene::search::highlight::Scorer Highlighter::getFragmentScorer() const
          {
            return ::org::apache::lucene::search::highlight::Scorer(env->callObjectMethod(this$, mids$[mid_getFragmentScorer_0eb4d65e]));
          }

          jint Highlighter::getMaxDocCharsToAnalyze() const
          {
            return env->callIntMethod(this$, mids$[mid_getMaxDocCharsToAnalyze_54c6a179]);
          }

          ::org::apache::lucene::search::highlight::Fragmenter Highlighter::getTextFragmenter() const
          {
            return ::org::apache::lucene::search::highlight::Fragmenter(env->callObjectMethod(this$, mids$[mid_getTextFragmenter_c9a72455]));
          }

          void Highlighter::setEncoder(const ::org::apache::lucene::search::highlight::Encoder & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setEncoder_8b781108], a0.this$);
          }

          void Highlighter::setFragmentScorer(const ::org::apache::lucene::search::highlight::Scorer & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setFragmentScorer_9bd3ff73], a0.this$);
          }

          void Highlighter::setMaxDocCharsToAnalyze(jint a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setMaxDocCharsToAnalyze_39c7bd3c], a0);
          }

          void Highlighter::setTextFragmenter(const ::org::apache::lucene::search::highlight::Fragmenter & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setTextFragmenter_d6ed4d20], a0.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace highlight {
          static PyObject *t_Highlighter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Highlighter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_Highlighter_init_(t_Highlighter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_Highlighter_getBestFragment(t_Highlighter *self, PyObject *args);
          static PyObject *t_Highlighter_getBestFragments(t_Highlighter *self, PyObject *args);
          static PyObject *t_Highlighter_getBestTextFragments(t_Highlighter *self, PyObject *args);
          static PyObject *t_Highlighter_getEncoder(t_Highlighter *self);
          static PyObject *t_Highlighter_getFragmentScorer(t_Highlighter *self);
          static PyObject *t_Highlighter_getMaxDocCharsToAnalyze(t_Highlighter *self);
          static PyObject *t_Highlighter_getTextFragmenter(t_Highlighter *self);
          static PyObject *t_Highlighter_setEncoder(t_Highlighter *self, PyObject *arg);
          static PyObject *t_Highlighter_setFragmentScorer(t_Highlighter *self, PyObject *arg);
          static PyObject *t_Highlighter_setMaxDocCharsToAnalyze(t_Highlighter *self, PyObject *arg);
          static PyObject *t_Highlighter_setTextFragmenter(t_Highlighter *self, PyObject *arg);
          static PyObject *t_Highlighter_get__encoder(t_Highlighter *self, void *data);
          static int t_Highlighter_set__encoder(t_Highlighter *self, PyObject *arg, void *data);
          static PyObject *t_Highlighter_get__fragmentScorer(t_Highlighter *self, void *data);
          static int t_Highlighter_set__fragmentScorer(t_Highlighter *self, PyObject *arg, void *data);
          static PyObject *t_Highlighter_get__maxDocCharsToAnalyze(t_Highlighter *self, void *data);
          static int t_Highlighter_set__maxDocCharsToAnalyze(t_Highlighter *self, PyObject *arg, void *data);
          static PyObject *t_Highlighter_get__textFragmenter(t_Highlighter *self, void *data);
          static int t_Highlighter_set__textFragmenter(t_Highlighter *self, PyObject *arg, void *data);
          static PyGetSetDef t_Highlighter__fields_[] = {
            DECLARE_GETSET_FIELD(t_Highlighter, encoder),
            DECLARE_GETSET_FIELD(t_Highlighter, fragmentScorer),
            DECLARE_GETSET_FIELD(t_Highlighter, maxDocCharsToAnalyze),
            DECLARE_GETSET_FIELD(t_Highlighter, textFragmenter),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_Highlighter__methods_[] = {
            DECLARE_METHOD(t_Highlighter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Highlighter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Highlighter, getBestFragment, METH_VARARGS),
            DECLARE_METHOD(t_Highlighter, getBestFragments, METH_VARARGS),
            DECLARE_METHOD(t_Highlighter, getBestTextFragments, METH_VARARGS),
            DECLARE_METHOD(t_Highlighter, getEncoder, METH_NOARGS),
            DECLARE_METHOD(t_Highlighter, getFragmentScorer, METH_NOARGS),
            DECLARE_METHOD(t_Highlighter, getMaxDocCharsToAnalyze, METH_NOARGS),
            DECLARE_METHOD(t_Highlighter, getTextFragmenter, METH_NOARGS),
            DECLARE_METHOD(t_Highlighter, setEncoder, METH_O),
            DECLARE_METHOD(t_Highlighter, setFragmentScorer, METH_O),
            DECLARE_METHOD(t_Highlighter, setMaxDocCharsToAnalyze, METH_O),
            DECLARE_METHOD(t_Highlighter, setTextFragmenter, METH_O),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(Highlighter, t_Highlighter, ::java::lang::Object, Highlighter, t_Highlighter_init_, 0, 0, t_Highlighter__fields_, 0, 0);

          void t_Highlighter::install(PyObject *module)
          {
            installType(&PY_TYPE(Highlighter), module, "Highlighter", 0);
          }

          void t_Highlighter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(Highlighter).tp_dict, "class_", make_descriptor(Highlighter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(Highlighter).tp_dict, "wrapfn_", make_descriptor(t_Highlighter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(Highlighter).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(Highlighter::initializeClass);
            PyDict_SetItemString(PY_TYPE(Highlighter).tp_dict, "DEFAULT_MAX_CHARS_TO_ANALYZE", make_descriptor(Highlighter::DEFAULT_MAX_CHARS_TO_ANALYZE));
          }

          static PyObject *t_Highlighter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, Highlighter::initializeClass, 1)))
              return NULL;
            return t_Highlighter::wrap_Object(Highlighter(((t_Highlighter *) arg)->object.this$));
          }
          static PyObject *t_Highlighter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, Highlighter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_Highlighter_init_(t_Highlighter *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::org::apache::lucene::search::highlight::Scorer a0((jobject) NULL);
                Highlighter object((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::search::highlight::Scorer::initializeClass, &a0))
                {
                  INT_CALL(object = Highlighter(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 2:
              {
                ::org::apache::lucene::search::highlight::Formatter a0((jobject) NULL);
                ::org::apache::lucene::search::highlight::Scorer a1((jobject) NULL);
                Highlighter object((jobject) NULL);

                if (!parseArgs(args, "kk", ::org::apache::lucene::search::highlight::Formatter::initializeClass, ::org::apache::lucene::search::highlight::Scorer::initializeClass, &a0, &a1))
                {
                  INT_CALL(object = Highlighter(a0, a1));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 3:
              {
                ::org::apache::lucene::search::highlight::Formatter a0((jobject) NULL);
                ::org::apache::lucene::search::highlight::Encoder a1((jobject) NULL);
                ::org::apache::lucene::search::highlight::Scorer a2((jobject) NULL);
                Highlighter object((jobject) NULL);

                if (!parseArgs(args, "kkk", ::org::apache::lucene::search::highlight::Formatter::initializeClass, ::org::apache::lucene::search::highlight::Encoder::initializeClass, ::org::apache::lucene::search::highlight::Scorer::initializeClass, &a0, &a1, &a2))
                {
                  INT_CALL(object = Highlighter(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_Highlighter_getBestFragment(t_Highlighter *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 2:
              {
                ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
                ::java::lang::String a1((jobject) NULL);
                ::java::lang::String result((jobject) NULL);

                if (!parseArgs(args, "ks", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0, &a1))
                {
                  OBJ_CALL(result = self->object.getBestFragment(a0, a1));
                  return j2p(result);
                }
              }
              break;
             case 3:
              {
                ::org::apache::lucene::analysis::Analyzer a0((jobject) NULL);
                ::java::lang::String a1((jobject) NULL);
                ::java::lang::String a2((jobject) NULL);
                ::java::lang::String result((jobject) NULL);

                if (!parseArgs(args, "kss", ::org::apache::lucene::analysis::Analyzer::initializeClass, &a0, &a1, &a2))
                {
                  OBJ_CALL(result = self->object.getBestFragment(a0, a1, a2));
                  return j2p(result);
                }
              }
            }

            PyErr_SetArgsError((PyObject *) self, "getBestFragment", args);
            return NULL;
          }

          static PyObject *t_Highlighter_getBestFragments(t_Highlighter *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 3:
              {
                ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
                ::java::lang::String a1((jobject) NULL);
                jint a2;
                JArray< ::java::lang::String > result((jobject) NULL);

                if (!parseArgs(args, "ksI", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0, &a1, &a2))
                {
                  OBJ_CALL(result = self->object.getBestFragments(a0, a1, a2));
                  return JArray<jstring>(result.this$).wrap();
                }
              }
              break;
             case 4:
              {
                ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
                ::java::lang::String a1((jobject) NULL);
                jint a2;
                ::java::lang::String a3((jobject) NULL);
                ::java::lang::String result((jobject) NULL);

                if (!parseArgs(args, "ksIs", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0, &a1, &a2, &a3))
                {
                  OBJ_CALL(result = self->object.getBestFragments(a0, a1, a2, a3));
                  return j2p(result);
                }
              }
              {
                ::org::apache::lucene::analysis::Analyzer a0((jobject) NULL);
                ::java::lang::String a1((jobject) NULL);
                ::java::lang::String a2((jobject) NULL);
                jint a3;
                JArray< ::java::lang::String > result((jobject) NULL);

                if (!parseArgs(args, "kssI", ::org::apache::lucene::analysis::Analyzer::initializeClass, &a0, &a1, &a2, &a3))
                {
                  OBJ_CALL(result = self->object.getBestFragments(a0, a1, a2, a3));
                  return JArray<jstring>(result.this$).wrap();
                }
              }
            }

            PyErr_SetArgsError((PyObject *) self, "getBestFragments", args);
            return NULL;
          }

          static PyObject *t_Highlighter_getBestTextFragments(t_Highlighter *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::java::lang::String a1((jobject) NULL);
            jboolean a2;
            jint a3;
            JArray< ::org::apache::lucene::search::highlight::TextFragment > result((jobject) NULL);

            if (!parseArgs(args, "ksZI", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0, &a1, &a2, &a3))
            {
              OBJ_CALL(result = self->object.getBestTextFragments(a0, a1, a2, a3));
              return JArray<jobject>(result.this$).wrap(::org::apache::lucene::search::highlight::t_TextFragment::wrap_jobject);
            }

            PyErr_SetArgsError((PyObject *) self, "getBestTextFragments", args);
            return NULL;
          }

          static PyObject *t_Highlighter_getEncoder(t_Highlighter *self)
          {
            ::org::apache::lucene::search::highlight::Encoder result((jobject) NULL);
            OBJ_CALL(result = self->object.getEncoder());
            return ::org::apache::lucene::search::highlight::t_Encoder::wrap_Object(result);
          }

          static PyObject *t_Highlighter_getFragmentScorer(t_Highlighter *self)
          {
            ::org::apache::lucene::search::highlight::Scorer result((jobject) NULL);
            OBJ_CALL(result = self->object.getFragmentScorer());
            return ::org::apache::lucene::search::highlight::t_Scorer::wrap_Object(result);
          }

          static PyObject *t_Highlighter_getMaxDocCharsToAnalyze(t_Highlighter *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getMaxDocCharsToAnalyze());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_Highlighter_getTextFragmenter(t_Highlighter *self)
          {
            ::org::apache::lucene::search::highlight::Fragmenter result((jobject) NULL);
            OBJ_CALL(result = self->object.getTextFragmenter());
            return ::org::apache::lucene::search::highlight::t_Fragmenter::wrap_Object(result);
          }

          static PyObject *t_Highlighter_setEncoder(t_Highlighter *self, PyObject *arg)
          {
            ::org::apache::lucene::search::highlight::Encoder a0((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::search::highlight::Encoder::initializeClass, &a0))
            {
              OBJ_CALL(self->object.setEncoder(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setEncoder", arg);
            return NULL;
          }

          static PyObject *t_Highlighter_setFragmentScorer(t_Highlighter *self, PyObject *arg)
          {
            ::org::apache::lucene::search::highlight::Scorer a0((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::search::highlight::Scorer::initializeClass, &a0))
            {
              OBJ_CALL(self->object.setFragmentScorer(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setFragmentScorer", arg);
            return NULL;
          }

          static PyObject *t_Highlighter_setMaxDocCharsToAnalyze(t_Highlighter *self, PyObject *arg)
          {
            jint a0;

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(self->object.setMaxDocCharsToAnalyze(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setMaxDocCharsToAnalyze", arg);
            return NULL;
          }

          static PyObject *t_Highlighter_setTextFragmenter(t_Highlighter *self, PyObject *arg)
          {
            ::org::apache::lucene::search::highlight::Fragmenter a0((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::search::highlight::Fragmenter::initializeClass, &a0))
            {
              OBJ_CALL(self->object.setTextFragmenter(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setTextFragmenter", arg);
            return NULL;
          }

          static PyObject *t_Highlighter_get__encoder(t_Highlighter *self, void *data)
          {
            ::org::apache::lucene::search::highlight::Encoder value((jobject) NULL);
            OBJ_CALL(value = self->object.getEncoder());
            return ::org::apache::lucene::search::highlight::t_Encoder::wrap_Object(value);
          }
          static int t_Highlighter_set__encoder(t_Highlighter *self, PyObject *arg, void *data)
          {
            {
              ::org::apache::lucene::search::highlight::Encoder value((jobject) NULL);
              if (!parseArg(arg, "k", ::org::apache::lucene::search::highlight::Encoder::initializeClass, &value))
              {
                INT_CALL(self->object.setEncoder(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "encoder", arg);
            return -1;
          }

          static PyObject *t_Highlighter_get__fragmentScorer(t_Highlighter *self, void *data)
          {
            ::org::apache::lucene::search::highlight::Scorer value((jobject) NULL);
            OBJ_CALL(value = self->object.getFragmentScorer());
            return ::org::apache::lucene::search::highlight::t_Scorer::wrap_Object(value);
          }
          static int t_Highlighter_set__fragmentScorer(t_Highlighter *self, PyObject *arg, void *data)
          {
            {
              ::org::apache::lucene::search::highlight::Scorer value((jobject) NULL);
              if (!parseArg(arg, "k", ::org::apache::lucene::search::highlight::Scorer::initializeClass, &value))
              {
                INT_CALL(self->object.setFragmentScorer(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "fragmentScorer", arg);
            return -1;
          }

          static PyObject *t_Highlighter_get__maxDocCharsToAnalyze(t_Highlighter *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getMaxDocCharsToAnalyze());
            return PyInt_FromLong((long) value);
          }
          static int t_Highlighter_set__maxDocCharsToAnalyze(t_Highlighter *self, PyObject *arg, void *data)
          {
            {
              jint value;
              if (!parseArg(arg, "I", &value))
              {
                INT_CALL(self->object.setMaxDocCharsToAnalyze(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "maxDocCharsToAnalyze", arg);
            return -1;
          }

          static PyObject *t_Highlighter_get__textFragmenter(t_Highlighter *self, void *data)
          {
            ::org::apache::lucene::search::highlight::Fragmenter value((jobject) NULL);
            OBJ_CALL(value = self->object.getTextFragmenter());
            return ::org::apache::lucene::search::highlight::t_Fragmenter::wrap_Object(value);
          }
          static int t_Highlighter_set__textFragmenter(t_Highlighter *self, PyObject *arg, void *data)
          {
            {
              ::org::apache::lucene::search::highlight::Fragmenter value((jobject) NULL);
              if (!parseArg(arg, "k", ::org::apache::lucene::search::highlight::Fragmenter::initializeClass, &value))
              {
                INT_CALL(self->object.setTextFragmenter(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "textFragmenter", arg);
            return -1;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/store/SimpleFSDirectory.h"
#include "java/lang/Class.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/store/IOContext.h"
#include "java/io/File.h"
#include "java/lang/String.h"
#include "org/apache/lucene/store/LockFactory.h"
#include "org/apache/lucene/store/IndexInput.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {

        ::java::lang::Class *SimpleFSDirectory::class$ = NULL;
        jmethodID *SimpleFSDirectory::mids$ = NULL;
        bool SimpleFSDirectory::live$ = false;

        jclass SimpleFSDirectory::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/store/SimpleFSDirectory");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_c3dacf57] = env->getMethodID(cls, "<init>", "(Ljava/io/File;)V");
            mids$[mid_init$_5f9cf6ef] = env->getMethodID(cls, "<init>", "(Ljava/io/File;Lorg/apache/lucene/store/LockFactory;)V");
            mids$[mid_openInput_3e1b5375] = env->getMethodID(cls, "openInput", "(Ljava/lang/String;Lorg/apache/lucene/store/IOContext;)Lorg/apache/lucene/store/IndexInput;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        SimpleFSDirectory::SimpleFSDirectory(const ::java::io::File & a0) : ::org::apache::lucene::store::FSDirectory(env->newObject(initializeClass, &mids$, mid_init$_c3dacf57, a0.this$)) {}

        SimpleFSDirectory::SimpleFSDirectory(const ::java::io::File & a0, const ::org::apache::lucene::store::LockFactory & a1) : ::org::apache::lucene::store::FSDirectory(env->newObject(initializeClass, &mids$, mid_init$_5f9cf6ef, a0.this$, a1.this$)) {}

        ::org::apache::lucene::store::IndexInput SimpleFSDirectory::openInput(const ::java::lang::String & a0, const ::org::apache::lucene::store::IOContext & a1) const
        {
          return ::org::apache::lucene::store::IndexInput(env->callObjectMethod(this$, mids$[mid_openInput_3e1b5375], a0.this$, a1.this$));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {
        static PyObject *t_SimpleFSDirectory_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_SimpleFSDirectory_instance_(PyTypeObject *type, PyObject *arg);
        static int t_SimpleFSDirectory_init_(t_SimpleFSDirectory *self, PyObject *args, PyObject *kwds);
        static PyObject *t_SimpleFSDirectory_openInput(t_SimpleFSDirectory *self, PyObject *args);

        static PyMethodDef t_SimpleFSDirectory__methods_[] = {
          DECLARE_METHOD(t_SimpleFSDirectory, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SimpleFSDirectory, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SimpleFSDirectory, openInput, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(SimpleFSDirectory, t_SimpleFSDirectory, ::org::apache::lucene::store::FSDirectory, SimpleFSDirectory, t_SimpleFSDirectory_init_, 0, 0, 0, 0, 0);

        void t_SimpleFSDirectory::install(PyObject *module)
        {
          installType(&PY_TYPE(SimpleFSDirectory), module, "SimpleFSDirectory", 0);
        }

        void t_SimpleFSDirectory::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(SimpleFSDirectory).tp_dict, "class_", make_descriptor(SimpleFSDirectory::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(SimpleFSDirectory).tp_dict, "wrapfn_", make_descriptor(t_SimpleFSDirectory::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(SimpleFSDirectory).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_SimpleFSDirectory_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, SimpleFSDirectory::initializeClass, 1)))
            return NULL;
          return t_SimpleFSDirectory::wrap_Object(SimpleFSDirectory(((t_SimpleFSDirectory *) arg)->object.this$));
        }
        static PyObject *t_SimpleFSDirectory_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, SimpleFSDirectory::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_SimpleFSDirectory_init_(t_SimpleFSDirectory *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              ::java::io::File a0((jobject) NULL);
              SimpleFSDirectory object((jobject) NULL);

              if (!parseArgs(args, "k", ::java::io::File::initializeClass, &a0))
              {
                INT_CALL(object = SimpleFSDirectory(a0));
                self->object = object;
                break;
              }
            }
            goto err;
           case 2:
            {
              ::java::io::File a0((jobject) NULL);
              ::org::apache::lucene::store::LockFactory a1((jobject) NULL);
              SimpleFSDirectory object((jobject) NULL);

              if (!parseArgs(args, "kk", ::java::io::File::initializeClass, ::org::apache::lucene::store::LockFactory::initializeClass, &a0, &a1))
              {
                INT_CALL(object = SimpleFSDirectory(a0, a1));
                self->object = object;
                break;
              }
            }
           default:
           err:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_SimpleFSDirectory_openInput(t_SimpleFSDirectory *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::store::IOContext a1((jobject) NULL);
          ::org::apache::lucene::store::IndexInput result((jobject) NULL);

          if (!parseArgs(args, "sk", ::org::apache::lucene::store::IOContext::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = self->object.openInput(a0, a1));
            return ::org::apache::lucene::store::t_IndexInput::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(SimpleFSDirectory), (PyObject *) self, "openInput", args, 2);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/packed/AbstractPagedMutable.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace packed {

          ::java::lang::Class *AbstractPagedMutable::class$ = NULL;
          jmethodID *AbstractPagedMutable::mids$ = NULL;
          bool AbstractPagedMutable::live$ = false;

          jclass AbstractPagedMutable::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/util/packed/AbstractPagedMutable");

              mids$ = new jmethodID[max_mid];
              mids$[mid_get_0ee6df33] = env->getMethodID(cls, "get", "(J)J");
              mids$[mid_grow_3bfef47c] = env->getMethodID(cls, "grow", "()Lorg/apache/lucene/util/packed/AbstractPagedMutable;");
              mids$[mid_grow_5f2a2a5f] = env->getMethodID(cls, "grow", "(J)Lorg/apache/lucene/util/packed/AbstractPagedMutable;");
              mids$[mid_ramBytesUsed_54c6a17a] = env->getMethodID(cls, "ramBytesUsed", "()J");
              mids$[mid_resize_5f2a2a5f] = env->getMethodID(cls, "resize", "(J)Lorg/apache/lucene/util/packed/AbstractPagedMutable;");
              mids$[mid_set_a7e12ca4] = env->getMethodID(cls, "set", "(JJ)V");
              mids$[mid_size_54c6a17a] = env->getMethodID(cls, "size", "()J");
              mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");
              mids$[mid_fillPages_54c6a166] = env->getMethodID(cls, "fillPages", "()V");
              mids$[mid_newUnfilledCopy_5f2a2a5f] = env->getMethodID(cls, "newUnfilledCopy", "(J)Lorg/apache/lucene/util/packed/AbstractPagedMutable;");
              mids$[mid_newMutable_48ebd249] = env->getMethodID(cls, "newMutable", "(II)Lorg/apache/lucene/util/packed/PackedInts$Mutable;");
              mids$[mid_baseRamBytesUsed_54c6a17a] = env->getMethodID(cls, "baseRamBytesUsed", "()J");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          jlong AbstractPagedMutable::get(jlong a0) const
          {
            return env->callLongMethod(this$, mids$[mid_get_0ee6df33], a0);
          }

          AbstractPagedMutable AbstractPagedMutable::grow() const
          {
            return AbstractPagedMutable(env->callObjectMethod(this$, mids$[mid_grow_3bfef47c]));
          }

          AbstractPagedMutable AbstractPagedMutable::grow(jlong a0) const
          {
            return AbstractPagedMutable(env->callObjectMethod(this$, mids$[mid_grow_5f2a2a5f], a0));
          }

          jlong AbstractPagedMutable::ramBytesUsed() const
          {
            return env->callLongMethod(this$, mids$[mid_ramBytesUsed_54c6a17a]);
          }

          AbstractPagedMutable AbstractPagedMutable::resize(jlong a0) const
          {
            return AbstractPagedMutable(env->callObjectMethod(this$, mids$[mid_resize_5f2a2a5f], a0));
          }

          void AbstractPagedMutable::set(jlong a0, jlong a1) const
          {
            env->callVoidMethod(this$, mids$[mid_set_a7e12ca4], a0, a1);
          }

          jlong AbstractPagedMutable::size() const
          {
            return env->callLongMethod(this$, mids$[mid_size_54c6a17a]);
          }

          ::java::lang::String AbstractPagedMutable::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace packed {
          static PyObject *t_AbstractPagedMutable_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_AbstractPagedMutable_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_AbstractPagedMutable_of_(t_AbstractPagedMutable *self, PyObject *args);
          static PyObject *t_AbstractPagedMutable_get(t_AbstractPagedMutable *self, PyObject *args);
          static PyObject *t_AbstractPagedMutable_grow(t_AbstractPagedMutable *self, PyObject *args);
          static PyObject *t_AbstractPagedMutable_ramBytesUsed(t_AbstractPagedMutable *self);
          static PyObject *t_AbstractPagedMutable_resize(t_AbstractPagedMutable *self, PyObject *arg);
          static PyObject *t_AbstractPagedMutable_set(t_AbstractPagedMutable *self, PyObject *args);
          static PyObject *t_AbstractPagedMutable_size(t_AbstractPagedMutable *self);
          static PyObject *t_AbstractPagedMutable_toString(t_AbstractPagedMutable *self, PyObject *args);
          static PyObject *t_AbstractPagedMutable_get__parameters_(t_AbstractPagedMutable *self, void *data);
          static PyGetSetDef t_AbstractPagedMutable__fields_[] = {
            DECLARE_GET_FIELD(t_AbstractPagedMutable, parameters_),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_AbstractPagedMutable__methods_[] = {
            DECLARE_METHOD(t_AbstractPagedMutable, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_AbstractPagedMutable, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_AbstractPagedMutable, of_, METH_VARARGS),
            DECLARE_METHOD(t_AbstractPagedMutable, get, METH_VARARGS),
            DECLARE_METHOD(t_AbstractPagedMutable, grow, METH_VARARGS),
            DECLARE_METHOD(t_AbstractPagedMutable, ramBytesUsed, METH_NOARGS),
            DECLARE_METHOD(t_AbstractPagedMutable, resize, METH_O),
            DECLARE_METHOD(t_AbstractPagedMutable, set, METH_VARARGS),
            DECLARE_METHOD(t_AbstractPagedMutable, size, METH_NOARGS),
            DECLARE_METHOD(t_AbstractPagedMutable, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(AbstractPagedMutable, t_AbstractPagedMutable, ::org::apache::lucene::util::LongValues, AbstractPagedMutable, abstract_init, 0, 0, t_AbstractPagedMutable__fields_, 0, 0);
          PyObject *t_AbstractPagedMutable::wrap_Object(const AbstractPagedMutable& object, PyTypeObject *p0)
          {
            PyObject *obj = t_AbstractPagedMutable::wrap_Object(object);
            if (obj != NULL && obj != Py_None)
            {
              t_AbstractPagedMutable *self = (t_AbstractPagedMutable *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          PyObject *t_AbstractPagedMutable::wrap_jobject(const jobject& object, PyTypeObject *p0)
          {
            PyObject *obj = t_AbstractPagedMutable::wrap_jobject(object);
            if (obj != NULL && obj != Py_None)
            {
              t_AbstractPagedMutable *self = (t_AbstractPagedMutable *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          void t_AbstractPagedMutable::install(PyObject *module)
          {
            installType(&PY_TYPE(AbstractPagedMutable), module, "AbstractPagedMutable", 0);
          }

          void t_AbstractPagedMutable::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(AbstractPagedMutable).tp_dict, "class_", make_descriptor(AbstractPagedMutable::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(AbstractPagedMutable).tp_dict, "wrapfn_", make_descriptor(t_AbstractPagedMutable::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(AbstractPagedMutable).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_AbstractPagedMutable_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, AbstractPagedMutable::initializeClass, 1)))
              return NULL;
            return t_AbstractPagedMutable::wrap_Object(AbstractPagedMutable(((t_AbstractPagedMutable *) arg)->object.this$));
          }
          static PyObject *t_AbstractPagedMutable_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, AbstractPagedMutable::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_AbstractPagedMutable_of_(t_AbstractPagedMutable *self, PyObject *args)
          {
            if (!parseArg(args, "T", 1, &(self->parameters)))
              Py_RETURN_SELF;
            return PyErr_SetArgsError((PyObject *) self, "of_", args);
          }

          static PyObject *t_AbstractPagedMutable_get(t_AbstractPagedMutable *self, PyObject *args)
          {
            jlong a0;
            jlong result;

            if (!parseArgs(args, "J", &a0))
            {
              OBJ_CALL(result = self->object.get(a0));
              return PyLong_FromLongLong((PY_LONG_LONG) result);
            }

            return callSuper(&PY_TYPE(AbstractPagedMutable), (PyObject *) self, "get", args, 2);
          }

          static PyObject *t_AbstractPagedMutable_grow(t_AbstractPagedMutable *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 0:
              {
                AbstractPagedMutable result((jobject) NULL);
                OBJ_CALL(result = self->object.grow());
                return self->parameters[0] != NULL ? wrapType(self->parameters[0], result.this$) : t_AbstractPagedMutable::wrap_Object(result);
              }
              break;
             case 1:
              {
                jlong a0;
                AbstractPagedMutable result((jobject) NULL);

                if (!parseArgs(args, "J", &a0))
                {
                  OBJ_CALL(result = self->object.grow(a0));
                  return self->parameters[0] != NULL ? wrapType(self->parameters[0], result.this$) : t_AbstractPagedMutable::wrap_Object(result);
                }
              }
            }

            PyErr_SetArgsError((PyObject *) self, "grow", args);
            return NULL;
          }

          static PyObject *t_AbstractPagedMutable_ramBytesUsed(t_AbstractPagedMutable *self)
          {
            jlong result;
            OBJ_CALL(result = self->object.ramBytesUsed());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          static PyObject *t_AbstractPagedMutable_resize(t_AbstractPagedMutable *self, PyObject *arg)
          {
            jlong a0;
            AbstractPagedMutable result((jobject) NULL);

            if (!parseArg(arg, "J", &a0))
            {
              OBJ_CALL(result = self->object.resize(a0));
              return self->parameters[0] != NULL ? wrapType(self->parameters[0], result.this$) : t_AbstractPagedMutable::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "resize", arg);
            return NULL;
          }

          static PyObject *t_AbstractPagedMutable_set(t_AbstractPagedMutable *self, PyObject *args)
          {
            jlong a0;
            jlong a1;

            if (!parseArgs(args, "JJ", &a0, &a1))
            {
              OBJ_CALL(self->object.set(a0, a1));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "set", args);
            return NULL;
          }

          static PyObject *t_AbstractPagedMutable_size(t_AbstractPagedMutable *self)
          {
            jlong result;
            OBJ_CALL(result = self->object.size());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          static PyObject *t_AbstractPagedMutable_toString(t_AbstractPagedMutable *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(&PY_TYPE(AbstractPagedMutable), (PyObject *) self, "toString", args, 2);
          }
          static PyObject *t_AbstractPagedMutable_get__parameters_(t_AbstractPagedMutable *self, void *data)
          {
            return typeParameters(self->parameters, sizeof(self->parameters));
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/store/TrackingDirectoryWrapper.h"
#include "java/lang/Class.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/store/IOContext.h"
#include "org/apache/lucene/store/Directory.h"
#include "java/lang/String.h"
#include "java/util/Set.h"
#include "org/apache/lucene/store/IndexOutput.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {

        ::java::lang::Class *TrackingDirectoryWrapper::class$ = NULL;
        jmethodID *TrackingDirectoryWrapper::mids$ = NULL;
        bool TrackingDirectoryWrapper::live$ = false;

        jclass TrackingDirectoryWrapper::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/store/TrackingDirectoryWrapper");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_2e261ef2] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/store/Directory;)V");
            mids$[mid_copy_146bec62] = env->getMethodID(cls, "copy", "(Lorg/apache/lucene/store/Directory;Ljava/lang/String;Ljava/lang/String;Lorg/apache/lucene/store/IOContext;)V");
            mids$[mid_createOutput_5ad5358d] = env->getMethodID(cls, "createOutput", "(Ljava/lang/String;Lorg/apache/lucene/store/IOContext;)Lorg/apache/lucene/store/IndexOutput;");
            mids$[mid_deleteFile_5fdc3f48] = env->getMethodID(cls, "deleteFile", "(Ljava/lang/String;)V");
            mids$[mid_getCreatedFiles_03e99967] = env->getMethodID(cls, "getCreatedFiles", "()Ljava/util/Set;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        TrackingDirectoryWrapper::TrackingDirectoryWrapper(const ::org::apache::lucene::store::Directory & a0) : ::org::apache::lucene::store::FilterDirectory(env->newObject(initializeClass, &mids$, mid_init$_2e261ef2, a0.this$)) {}

        void TrackingDirectoryWrapper::copy(const ::org::apache::lucene::store::Directory & a0, const ::java::lang::String & a1, const ::java::lang::String & a2, const ::org::apache::lucene::store::IOContext & a3) const
        {
          env->callVoidMethod(this$, mids$[mid_copy_146bec62], a0.this$, a1.this$, a2.this$, a3.this$);
        }

        ::org::apache::lucene::store::IndexOutput TrackingDirectoryWrapper::createOutput(const ::java::lang::String & a0, const ::org::apache::lucene::store::IOContext & a1) const
        {
          return ::org::apache::lucene::store::IndexOutput(env->callObjectMethod(this$, mids$[mid_createOutput_5ad5358d], a0.this$, a1.this$));
        }

        void TrackingDirectoryWrapper::deleteFile(const ::java::lang::String & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_deleteFile_5fdc3f48], a0.this$);
        }

        ::java::util::Set TrackingDirectoryWrapper::getCreatedFiles() const
        {
          return ::java::util::Set(env->callObjectMethod(this$, mids$[mid_getCreatedFiles_03e99967]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {
        static PyObject *t_TrackingDirectoryWrapper_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_TrackingDirectoryWrapper_instance_(PyTypeObject *type, PyObject *arg);
        static int t_TrackingDirectoryWrapper_init_(t_TrackingDirectoryWrapper *self, PyObject *args, PyObject *kwds);
        static PyObject *t_TrackingDirectoryWrapper_copy(t_TrackingDirectoryWrapper *self, PyObject *args);
        static PyObject *t_TrackingDirectoryWrapper_createOutput(t_TrackingDirectoryWrapper *self, PyObject *args);
        static PyObject *t_TrackingDirectoryWrapper_deleteFile(t_TrackingDirectoryWrapper *self, PyObject *args);
        static PyObject *t_TrackingDirectoryWrapper_getCreatedFiles(t_TrackingDirectoryWrapper *self);
        static PyObject *t_TrackingDirectoryWrapper_get__createdFiles(t_TrackingDirectoryWrapper *self, void *data);
        static PyGetSetDef t_TrackingDirectoryWrapper__fields_[] = {
          DECLARE_GET_FIELD(t_TrackingDirectoryWrapper, createdFiles),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_TrackingDirectoryWrapper__methods_[] = {
          DECLARE_METHOD(t_TrackingDirectoryWrapper, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_TrackingDirectoryWrapper, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_TrackingDirectoryWrapper, copy, METH_VARARGS),
          DECLARE_METHOD(t_TrackingDirectoryWrapper, createOutput, METH_VARARGS),
          DECLARE_METHOD(t_TrackingDirectoryWrapper, deleteFile, METH_VARARGS),
          DECLARE_METHOD(t_TrackingDirectoryWrapper, getCreatedFiles, METH_NOARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(TrackingDirectoryWrapper, t_TrackingDirectoryWrapper, ::org::apache::lucene::store::FilterDirectory, TrackingDirectoryWrapper, t_TrackingDirectoryWrapper_init_, 0, 0, t_TrackingDirectoryWrapper__fields_, 0, 0);

        void t_TrackingDirectoryWrapper::install(PyObject *module)
        {
          installType(&PY_TYPE(TrackingDirectoryWrapper), module, "TrackingDirectoryWrapper", 0);
        }

        void t_TrackingDirectoryWrapper::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(TrackingDirectoryWrapper).tp_dict, "class_", make_descriptor(TrackingDirectoryWrapper::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(TrackingDirectoryWrapper).tp_dict, "wrapfn_", make_descriptor(t_TrackingDirectoryWrapper::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(TrackingDirectoryWrapper).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_TrackingDirectoryWrapper_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, TrackingDirectoryWrapper::initializeClass, 1)))
            return NULL;
          return t_TrackingDirectoryWrapper::wrap_Object(TrackingDirectoryWrapper(((t_TrackingDirectoryWrapper *) arg)->object.this$));
        }
        static PyObject *t_TrackingDirectoryWrapper_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, TrackingDirectoryWrapper::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_TrackingDirectoryWrapper_init_(t_TrackingDirectoryWrapper *self, PyObject *args, PyObject *kwds)
        {
          ::org::apache::lucene::store::Directory a0((jobject) NULL);
          TrackingDirectoryWrapper object((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::store::Directory::initializeClass, &a0))
          {
            INT_CALL(object = TrackingDirectoryWrapper(a0));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_TrackingDirectoryWrapper_copy(t_TrackingDirectoryWrapper *self, PyObject *args)
        {
          ::org::apache::lucene::store::Directory a0((jobject) NULL);
          ::java::lang::String a1((jobject) NULL);
          ::java::lang::String a2((jobject) NULL);
          ::org::apache::lucene::store::IOContext a3((jobject) NULL);

          if (!parseArgs(args, "kssk", ::org::apache::lucene::store::Directory::initializeClass, ::org::apache::lucene::store::IOContext::initializeClass, &a0, &a1, &a2, &a3))
          {
            OBJ_CALL(self->object.copy(a0, a1, a2, a3));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(TrackingDirectoryWrapper), (PyObject *) self, "copy", args, 2);
        }

        static PyObject *t_TrackingDirectoryWrapper_createOutput(t_TrackingDirectoryWrapper *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::store::IOContext a1((jobject) NULL);
          ::org::apache::lucene::store::IndexOutput result((jobject) NULL);

          if (!parseArgs(args, "sk", ::org::apache::lucene::store::IOContext::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = self->object.createOutput(a0, a1));
            return ::org::apache::lucene::store::t_IndexOutput::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(TrackingDirectoryWrapper), (PyObject *) self, "createOutput", args, 2);
        }

        static PyObject *t_TrackingDirectoryWrapper_deleteFile(t_TrackingDirectoryWrapper *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(self->object.deleteFile(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(TrackingDirectoryWrapper), (PyObject *) self, "deleteFile", args, 2);
        }

        static PyObject *t_TrackingDirectoryWrapper_getCreatedFiles(t_TrackingDirectoryWrapper *self)
        {
          ::java::util::Set result((jobject) NULL);
          OBJ_CALL(result = self->object.getCreatedFiles());
          return ::java::util::t_Set::wrap_Object(result, &::java::lang::PY_TYPE(String));
        }

        static PyObject *t_TrackingDirectoryWrapper_get__createdFiles(t_TrackingDirectoryWrapper *self, void *data)
        {
          ::java::util::Set value((jobject) NULL);
          OBJ_CALL(value = self->object.getCreatedFiles());
          return ::java::util::t_Set::wrap_Object(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/store/NRTCachingDirectory.h"
#include "org/apache/lucene/store/Lock.h"
#include "java/lang/Class.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/store/IOContext.h"
#include "java/lang/String.h"
#include "org/apache/lucene/store/IndexOutput.h"
#include "java/util/Collection.h"
#include "org/apache/lucene/store/LockFactory.h"
#include "org/apache/lucene/store/IndexInput.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {

        ::java::lang::Class *NRTCachingDirectory::class$ = NULL;
        jmethodID *NRTCachingDirectory::mids$ = NULL;
        bool NRTCachingDirectory::live$ = false;

        jclass NRTCachingDirectory::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/store/NRTCachingDirectory");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_a6a83a1c] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/store/Directory;DD)V");
            mids$[mid_cacheRamBytesUsed_54c6a17a] = env->getMethodID(cls, "cacheRamBytesUsed", "()J");
            mids$[mid_clearLock_5fdc3f48] = env->getMethodID(cls, "clearLock", "(Ljava/lang/String;)V");
            mids$[mid_close_54c6a166] = env->getMethodID(cls, "close", "()V");
            mids$[mid_createOutput_5ad5358d] = env->getMethodID(cls, "createOutput", "(Ljava/lang/String;Lorg/apache/lucene/store/IOContext;)Lorg/apache/lucene/store/IndexOutput;");
            mids$[mid_deleteFile_5fdc3f48] = env->getMethodID(cls, "deleteFile", "(Ljava/lang/String;)V");
            mids$[mid_fileExists_5fdc3f44] = env->getMethodID(cls, "fileExists", "(Ljava/lang/String;)Z");
            mids$[mid_fileLength_5fdc3f54] = env->getMethodID(cls, "fileLength", "(Ljava/lang/String;)J");
            mids$[mid_getDelegate_1f3934bb] = env->getMethodID(cls, "getDelegate", "()Lorg/apache/lucene/store/Directory;");
            mids$[mid_getLockFactory_e4e9c36d] = env->getMethodID(cls, "getLockFactory", "()Lorg/apache/lucene/store/LockFactory;");
            mids$[mid_getLockID_14c7b5c5] = env->getMethodID(cls, "getLockID", "()Ljava/lang/String;");
            mids$[mid_listAll_2e6d5245] = env->getMethodID(cls, "listAll", "()[Ljava/lang/String;");
            mids$[mid_listCachedFiles_2e6d5245] = env->getMethodID(cls, "listCachedFiles", "()[Ljava/lang/String;");
            mids$[mid_makeLock_f26bb9a8] = env->getMethodID(cls, "makeLock", "(Ljava/lang/String;)Lorg/apache/lucene/store/Lock;");
            mids$[mid_openInput_3e1b5375] = env->getMethodID(cls, "openInput", "(Ljava/lang/String;Lorg/apache/lucene/store/IOContext;)Lorg/apache/lucene/store/IndexInput;");
            mids$[mid_setLockFactory_9892eb8c] = env->getMethodID(cls, "setLockFactory", "(Lorg/apache/lucene/store/LockFactory;)V");
            mids$[mid_sync_9bfb370d] = env->getMethodID(cls, "sync", "(Ljava/util/Collection;)V");
            mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");
            mids$[mid_doCacheWrite_501c6f10] = env->getMethodID(cls, "doCacheWrite", "(Ljava/lang/String;Lorg/apache/lucene/store/IOContext;)Z");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        NRTCachingDirectory::NRTCachingDirectory(const ::org::apache::lucene::store::Directory & a0, jdouble a1, jdouble a2) : ::org::apache::lucene::store::Directory(env->newObject(initializeClass, &mids$, mid_init$_a6a83a1c, a0.this$, a1, a2)) {}

        jlong NRTCachingDirectory::cacheRamBytesUsed() const
        {
          return env->callLongMethod(this$, mids$[mid_cacheRamBytesUsed_54c6a17a]);
        }

        void NRTCachingDirectory::clearLock(const ::java::lang::String & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_clearLock_5fdc3f48], a0.this$);
        }

        void NRTCachingDirectory::close() const
        {
          env->callVoidMethod(this$, mids$[mid_close_54c6a166]);
        }

        ::org::apache::lucene::store::IndexOutput NRTCachingDirectory::createOutput(const ::java::lang::String & a0, const ::org::apache::lucene::store::IOContext & a1) const
        {
          return ::org::apache::lucene::store::IndexOutput(env->callObjectMethod(this$, mids$[mid_createOutput_5ad5358d], a0.this$, a1.this$));
        }

        void NRTCachingDirectory::deleteFile(const ::java::lang::String & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_deleteFile_5fdc3f48], a0.this$);
        }

        jboolean NRTCachingDirectory::fileExists(const ::java::lang::String & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_fileExists_5fdc3f44], a0.this$);
        }

        jlong NRTCachingDirectory::fileLength(const ::java::lang::String & a0) const
        {
          return env->callLongMethod(this$, mids$[mid_fileLength_5fdc3f54], a0.this$);
        }

        ::org::apache::lucene::store::Directory NRTCachingDirectory::getDelegate() const
        {
          return ::org::apache::lucene::store::Directory(env->callObjectMethod(this$, mids$[mid_getDelegate_1f3934bb]));
        }

        ::org::apache::lucene::store::LockFactory NRTCachingDirectory::getLockFactory() const
        {
          return ::org::apache::lucene::store::LockFactory(env->callObjectMethod(this$, mids$[mid_getLockFactory_e4e9c36d]));
        }

        ::java::lang::String NRTCachingDirectory::getLockID() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getLockID_14c7b5c5]));
        }

        JArray< ::java::lang::String > NRTCachingDirectory::listAll() const
        {
          return JArray< ::java::lang::String >(env->callObjectMethod(this$, mids$[mid_listAll_2e6d5245]));
        }

        JArray< ::java::lang::String > NRTCachingDirectory::listCachedFiles() const
        {
          return JArray< ::java::lang::String >(env->callObjectMethod(this$, mids$[mid_listCachedFiles_2e6d5245]));
        }

        ::org::apache::lucene::store::Lock NRTCachingDirectory::makeLock(const ::java::lang::String & a0) const
        {
          return ::org::apache::lucene::store::Lock(env->callObjectMethod(this$, mids$[mid_makeLock_f26bb9a8], a0.this$));
        }

        ::org::apache::lucene::store::IndexInput NRTCachingDirectory::openInput(const ::java::lang::String & a0, const ::org::apache::lucene::store::IOContext & a1) const
        {
          return ::org::apache::lucene::store::IndexInput(env->callObjectMethod(this$, mids$[mid_openInput_3e1b5375], a0.this$, a1.this$));
        }

        void NRTCachingDirectory::setLockFactory(const ::org::apache::lucene::store::LockFactory & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setLockFactory_9892eb8c], a0.this$);
        }

        void NRTCachingDirectory::sync(const ::java::util::Collection & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_sync_9bfb370d], a0.this$);
        }

        ::java::lang::String NRTCachingDirectory::toString() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {
        static PyObject *t_NRTCachingDirectory_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_NRTCachingDirectory_instance_(PyTypeObject *type, PyObject *arg);
        static int t_NRTCachingDirectory_init_(t_NRTCachingDirectory *self, PyObject *args, PyObject *kwds);
        static PyObject *t_NRTCachingDirectory_cacheRamBytesUsed(t_NRTCachingDirectory *self);
        static PyObject *t_NRTCachingDirectory_clearLock(t_NRTCachingDirectory *self, PyObject *args);
        static PyObject *t_NRTCachingDirectory_close(t_NRTCachingDirectory *self, PyObject *args);
        static PyObject *t_NRTCachingDirectory_createOutput(t_NRTCachingDirectory *self, PyObject *args);
        static PyObject *t_NRTCachingDirectory_deleteFile(t_NRTCachingDirectory *self, PyObject *args);
        static PyObject *t_NRTCachingDirectory_fileExists(t_NRTCachingDirectory *self, PyObject *args);
        static PyObject *t_NRTCachingDirectory_fileLength(t_NRTCachingDirectory *self, PyObject *args);
        static PyObject *t_NRTCachingDirectory_getDelegate(t_NRTCachingDirectory *self);
        static PyObject *t_NRTCachingDirectory_getLockFactory(t_NRTCachingDirectory *self, PyObject *args);
        static PyObject *t_NRTCachingDirectory_getLockID(t_NRTCachingDirectory *self, PyObject *args);
        static PyObject *t_NRTCachingDirectory_listAll(t_NRTCachingDirectory *self, PyObject *args);
        static PyObject *t_NRTCachingDirectory_listCachedFiles(t_NRTCachingDirectory *self);
        static PyObject *t_NRTCachingDirectory_makeLock(t_NRTCachingDirectory *self, PyObject *args);
        static PyObject *t_NRTCachingDirectory_openInput(t_NRTCachingDirectory *self, PyObject *args);
        static PyObject *t_NRTCachingDirectory_setLockFactory(t_NRTCachingDirectory *self, PyObject *args);
        static PyObject *t_NRTCachingDirectory_sync(t_NRTCachingDirectory *self, PyObject *args);
        static PyObject *t_NRTCachingDirectory_toString(t_NRTCachingDirectory *self, PyObject *args);
        static PyObject *t_NRTCachingDirectory_get__delegate(t_NRTCachingDirectory *self, void *data);
        static PyObject *t_NRTCachingDirectory_get__lockFactory(t_NRTCachingDirectory *self, void *data);
        static int t_NRTCachingDirectory_set__lockFactory(t_NRTCachingDirectory *self, PyObject *arg, void *data);
        static PyObject *t_NRTCachingDirectory_get__lockID(t_NRTCachingDirectory *self, void *data);
        static PyGetSetDef t_NRTCachingDirectory__fields_[] = {
          DECLARE_GET_FIELD(t_NRTCachingDirectory, delegate),
          DECLARE_GETSET_FIELD(t_NRTCachingDirectory, lockFactory),
          DECLARE_GET_FIELD(t_NRTCachingDirectory, lockID),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_NRTCachingDirectory__methods_[] = {
          DECLARE_METHOD(t_NRTCachingDirectory, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_NRTCachingDirectory, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_NRTCachingDirectory, cacheRamBytesUsed, METH_NOARGS),
          DECLARE_METHOD(t_NRTCachingDirectory, clearLock, METH_VARARGS),
          DECLARE_METHOD(t_NRTCachingDirectory, close, METH_VARARGS),
          DECLARE_METHOD(t_NRTCachingDirectory, createOutput, METH_VARARGS),
          DECLARE_METHOD(t_NRTCachingDirectory, deleteFile, METH_VARARGS),
          DECLARE_METHOD(t_NRTCachingDirectory, fileExists, METH_VARARGS),
          DECLARE_METHOD(t_NRTCachingDirectory, fileLength, METH_VARARGS),
          DECLARE_METHOD(t_NRTCachingDirectory, getDelegate, METH_NOARGS),
          DECLARE_METHOD(t_NRTCachingDirectory, getLockFactory, METH_VARARGS),
          DECLARE_METHOD(t_NRTCachingDirectory, getLockID, METH_VARARGS),
          DECLARE_METHOD(t_NRTCachingDirectory, listAll, METH_VARARGS),
          DECLARE_METHOD(t_NRTCachingDirectory, listCachedFiles, METH_NOARGS),
          DECLARE_METHOD(t_NRTCachingDirectory, makeLock, METH_VARARGS),
          DECLARE_METHOD(t_NRTCachingDirectory, openInput, METH_VARARGS),
          DECLARE_METHOD(t_NRTCachingDirectory, setLockFactory, METH_VARARGS),
          DECLARE_METHOD(t_NRTCachingDirectory, sync, METH_VARARGS),
          DECLARE_METHOD(t_NRTCachingDirectory, toString, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(NRTCachingDirectory, t_NRTCachingDirectory, ::org::apache::lucene::store::Directory, NRTCachingDirectory, t_NRTCachingDirectory_init_, 0, 0, t_NRTCachingDirectory__fields_, 0, 0);

        void t_NRTCachingDirectory::install(PyObject *module)
        {
          installType(&PY_TYPE(NRTCachingDirectory), module, "NRTCachingDirectory", 0);
        }

        void t_NRTCachingDirectory::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(NRTCachingDirectory).tp_dict, "class_", make_descriptor(NRTCachingDirectory::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(NRTCachingDirectory).tp_dict, "wrapfn_", make_descriptor(t_NRTCachingDirectory::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(NRTCachingDirectory).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_NRTCachingDirectory_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, NRTCachingDirectory::initializeClass, 1)))
            return NULL;
          return t_NRTCachingDirectory::wrap_Object(NRTCachingDirectory(((t_NRTCachingDirectory *) arg)->object.this$));
        }
        static PyObject *t_NRTCachingDirectory_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, NRTCachingDirectory::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_NRTCachingDirectory_init_(t_NRTCachingDirectory *self, PyObject *args, PyObject *kwds)
        {
          ::org::apache::lucene::store::Directory a0((jobject) NULL);
          jdouble a1;
          jdouble a2;
          NRTCachingDirectory object((jobject) NULL);

          if (!parseArgs(args, "kDD", ::org::apache::lucene::store::Directory::initializeClass, &a0, &a1, &a2))
          {
            INT_CALL(object = NRTCachingDirectory(a0, a1, a2));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_NRTCachingDirectory_cacheRamBytesUsed(t_NRTCachingDirectory *self)
        {
          jlong result;
          OBJ_CALL(result = self->object.cacheRamBytesUsed());
          return PyLong_FromLongLong((PY_LONG_LONG) result);
        }

        static PyObject *t_NRTCachingDirectory_clearLock(t_NRTCachingDirectory *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(self->object.clearLock(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(NRTCachingDirectory), (PyObject *) self, "clearLock", args, 2);
        }

        static PyObject *t_NRTCachingDirectory_close(t_NRTCachingDirectory *self, PyObject *args)
        {

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(self->object.close());
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(NRTCachingDirectory), (PyObject *) self, "close", args, 2);
        }

        static PyObject *t_NRTCachingDirectory_createOutput(t_NRTCachingDirectory *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::store::IOContext a1((jobject) NULL);
          ::org::apache::lucene::store::IndexOutput result((jobject) NULL);

          if (!parseArgs(args, "sk", ::org::apache::lucene::store::IOContext::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = self->object.createOutput(a0, a1));
            return ::org::apache::lucene::store::t_IndexOutput::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(NRTCachingDirectory), (PyObject *) self, "createOutput", args, 2);
        }

        static PyObject *t_NRTCachingDirectory_deleteFile(t_NRTCachingDirectory *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(self->object.deleteFile(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(NRTCachingDirectory), (PyObject *) self, "deleteFile", args, 2);
        }

        static PyObject *t_NRTCachingDirectory_fileExists(t_NRTCachingDirectory *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = self->object.fileExists(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(NRTCachingDirectory), (PyObject *) self, "fileExists", args, 2);
        }

        static PyObject *t_NRTCachingDirectory_fileLength(t_NRTCachingDirectory *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          jlong result;

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = self->object.fileLength(a0));
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          return callSuper(&PY_TYPE(NRTCachingDirectory), (PyObject *) self, "fileLength", args, 2);
        }

        static PyObject *t_NRTCachingDirectory_getDelegate(t_NRTCachingDirectory *self)
        {
          ::org::apache::lucene::store::Directory result((jobject) NULL);
          OBJ_CALL(result = self->object.getDelegate());
          return ::org::apache::lucene::store::t_Directory::wrap_Object(result);
        }

        static PyObject *t_NRTCachingDirectory_getLockFactory(t_NRTCachingDirectory *self, PyObject *args)
        {
          ::org::apache::lucene::store::LockFactory result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.getLockFactory());
            return ::org::apache::lucene::store::t_LockFactory::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(NRTCachingDirectory), (PyObject *) self, "getLockFactory", args, 2);
        }

        static PyObject *t_NRTCachingDirectory_getLockID(t_NRTCachingDirectory *self, PyObject *args)
        {
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.getLockID());
            return j2p(result);
          }

          return callSuper(&PY_TYPE(NRTCachingDirectory), (PyObject *) self, "getLockID", args, 2);
        }

        static PyObject *t_NRTCachingDirectory_listAll(t_NRTCachingDirectory *self, PyObject *args)
        {
          JArray< ::java::lang::String > result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.listAll());
            return JArray<jstring>(result.this$).wrap();
          }

          return callSuper(&PY_TYPE(NRTCachingDirectory), (PyObject *) self, "listAll", args, 2);
        }

        static PyObject *t_NRTCachingDirectory_listCachedFiles(t_NRTCachingDirectory *self)
        {
          JArray< ::java::lang::String > result((jobject) NULL);
          OBJ_CALL(result = self->object.listCachedFiles());
          return JArray<jstring>(result.this$).wrap();
        }

        static PyObject *t_NRTCachingDirectory_makeLock(t_NRTCachingDirectory *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::store::Lock result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = self->object.makeLock(a0));
            return ::org::apache::lucene::store::t_Lock::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(NRTCachingDirectory), (PyObject *) self, "makeLock", args, 2);
        }

        static PyObject *t_NRTCachingDirectory_openInput(t_NRTCachingDirectory *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::store::IOContext a1((jobject) NULL);
          ::org::apache::lucene::store::IndexInput result((jobject) NULL);

          if (!parseArgs(args, "sk", ::org::apache::lucene::store::IOContext::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = self->object.openInput(a0, a1));
            return ::org::apache::lucene::store::t_IndexInput::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(NRTCachingDirectory), (PyObject *) self, "openInput", args, 2);
        }

        static PyObject *t_NRTCachingDirectory_setLockFactory(t_NRTCachingDirectory *self, PyObject *args)
        {
          ::org::apache::lucene::store::LockFactory a0((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::store::LockFactory::initializeClass, &a0))
          {
            OBJ_CALL(self->object.setLockFactory(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(NRTCachingDirectory), (PyObject *) self, "setLockFactory", args, 2);
        }

        static PyObject *t_NRTCachingDirectory_sync(t_NRTCachingDirectory *self, PyObject *args)
        {
          ::java::util::Collection a0((jobject) NULL);
          PyTypeObject **p0;

          if (!parseArgs(args, "K", ::java::util::Collection::initializeClass, &a0, &p0, ::java::util::t_Collection::parameters_))
          {
            OBJ_CALL(self->object.sync(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(NRTCachingDirectory), (PyObject *) self, "sync", args, 2);
        }

        static PyObject *t_NRTCachingDirectory_toString(t_NRTCachingDirectory *self, PyObject *args)
        {
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.toString());
            return j2p(result);
          }

          return callSuper(&PY_TYPE(NRTCachingDirectory), (PyObject *) self, "toString", args, 2);
        }

        static PyObject *t_NRTCachingDirectory_get__delegate(t_NRTCachingDirectory *self, void *data)
        {
          ::org::apache::lucene::store::Directory value((jobject) NULL);
          OBJ_CALL(value = self->object.getDelegate());
          return ::org::apache::lucene::store::t_Directory::wrap_Object(value);
        }

        static PyObject *t_NRTCachingDirectory_get__lockFactory(t_NRTCachingDirectory *self, void *data)
        {
          ::org::apache::lucene::store::LockFactory value((jobject) NULL);
          OBJ_CALL(value = self->object.getLockFactory());
          return ::org::apache::lucene::store::t_LockFactory::wrap_Object(value);
        }
        static int t_NRTCachingDirectory_set__lockFactory(t_NRTCachingDirectory *self, PyObject *arg, void *data)
        {
          {
            ::org::apache::lucene::store::LockFactory value((jobject) NULL);
            if (!parseArg(arg, "k", ::org::apache::lucene::store::LockFactory::initializeClass, &value))
            {
              INT_CALL(self->object.setLockFactory(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "lockFactory", arg);
          return -1;
        }

        static PyObject *t_NRTCachingDirectory_get__lockID(t_NRTCachingDirectory *self, void *data)
        {
          ::java::lang::String value((jobject) NULL);
          OBJ_CALL(value = self->object.getLockID());
          return j2p(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/AttributeFactory.h"
#include "org/apache/lucene/util/AttributeImpl.h"
#include "org/apache/lucene/util/Attribute.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *AttributeFactory::class$ = NULL;
        jmethodID *AttributeFactory::mids$ = NULL;
        bool AttributeFactory::live$ = false;
        AttributeFactory *AttributeFactory::DEFAULT_ATTRIBUTE_FACTORY = NULL;

        jclass AttributeFactory::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/AttributeFactory");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_createAttributeInstance_4f9d0910] = env->getMethodID(cls, "createAttributeInstance", "(Ljava/lang/Class;)Lorg/apache/lucene/util/AttributeImpl;");
            mids$[mid_getStaticImplementation_223064f9] = env->getStaticMethodID(cls, "getStaticImplementation", "(Lorg/apache/lucene/util/AttributeFactory;Ljava/lang/Class;)Lorg/apache/lucene/util/AttributeFactory;");

            class$ = (::java::lang::Class *) new JObject(cls);
            cls = (jclass) class$->this$;

            DEFAULT_ATTRIBUTE_FACTORY = new AttributeFactory(env->getStaticObjectField(cls, "DEFAULT_ATTRIBUTE_FACTORY", "Lorg/apache/lucene/util/AttributeFactory;"));
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        AttributeFactory::AttributeFactory() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        ::org::apache::lucene::util::AttributeImpl AttributeFactory::createAttributeInstance(const ::java::lang::Class & a0) const
        {
          return ::org::apache::lucene::util::AttributeImpl(env->callObjectMethod(this$, mids$[mid_createAttributeInstance_4f9d0910], a0.this$));
        }

        AttributeFactory AttributeFactory::getStaticImplementation(const AttributeFactory & a0, const ::java::lang::Class & a1)
        {
          jclass cls = env->getClass(initializeClass);
          return AttributeFactory(env->callStaticObjectMethod(cls, mids$[mid_getStaticImplementation_223064f9], a0.this$, a1.this$));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"
#include "org/apache/lucene/util/AttributeFactory$StaticImplementationAttributeFactory.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_AttributeFactory_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_AttributeFactory_instance_(PyTypeObject *type, PyObject *arg);
        static int t_AttributeFactory_init_(t_AttributeFactory *self, PyObject *args, PyObject *kwds);
        static PyObject *t_AttributeFactory_createAttributeInstance(t_AttributeFactory *self, PyObject *arg);
        static PyObject *t_AttributeFactory_getStaticImplementation(PyTypeObject *type, PyObject *args);

        static PyMethodDef t_AttributeFactory__methods_[] = {
          DECLARE_METHOD(t_AttributeFactory, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_AttributeFactory, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_AttributeFactory, createAttributeInstance, METH_O),
          DECLARE_METHOD(t_AttributeFactory, getStaticImplementation, METH_VARARGS | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(AttributeFactory, t_AttributeFactory, ::java::lang::Object, AttributeFactory, t_AttributeFactory_init_, 0, 0, 0, 0, 0);

        void t_AttributeFactory::install(PyObject *module)
        {
          installType(&PY_TYPE(AttributeFactory), module, "AttributeFactory", 0);
          PyDict_SetItemString(PY_TYPE(AttributeFactory).tp_dict, "StaticImplementationAttributeFactory", make_descriptor(&PY_TYPE(AttributeFactory$StaticImplementationAttributeFactory)));
        }

        void t_AttributeFactory::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(AttributeFactory).tp_dict, "class_", make_descriptor(AttributeFactory::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(AttributeFactory).tp_dict, "wrapfn_", make_descriptor(t_AttributeFactory::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(AttributeFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
          env->getClass(AttributeFactory::initializeClass);
          PyDict_SetItemString(PY_TYPE(AttributeFactory).tp_dict, "DEFAULT_ATTRIBUTE_FACTORY", make_descriptor(t_AttributeFactory::wrap_Object(*AttributeFactory::DEFAULT_ATTRIBUTE_FACTORY)));
        }

        static PyObject *t_AttributeFactory_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, AttributeFactory::initializeClass, 1)))
            return NULL;
          return t_AttributeFactory::wrap_Object(AttributeFactory(((t_AttributeFactory *) arg)->object.this$));
        }
        static PyObject *t_AttributeFactory_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, AttributeFactory::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_AttributeFactory_init_(t_AttributeFactory *self, PyObject *args, PyObject *kwds)
        {
          AttributeFactory object((jobject) NULL);

          INT_CALL(object = AttributeFactory());
          self->object = object;

          return 0;
        }

        static PyObject *t_AttributeFactory_createAttributeInstance(t_AttributeFactory *self, PyObject *arg)
        {
          ::java::lang::Class a0((jobject) NULL);
          PyTypeObject **p0;
          ::org::apache::lucene::util::AttributeImpl result((jobject) NULL);

          if (!parseArg(arg, "K", ::java::lang::Class::initializeClass, &a0, &p0, ::java::lang::t_Class::parameters_))
          {
            OBJ_CALL(result = self->object.createAttributeInstance(a0));
            return ::org::apache::lucene::util::t_AttributeImpl::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "createAttributeInstance", arg);
          return NULL;
        }

        static PyObject *t_AttributeFactory_getStaticImplementation(PyTypeObject *type, PyObject *args)
        {
          AttributeFactory a0((jobject) NULL);
          ::java::lang::Class a1((jobject) NULL);
          PyTypeObject **p1;
          AttributeFactory result((jobject) NULL);

          if (!parseArgs(args, "kK", AttributeFactory::initializeClass, ::java::lang::Class::initializeClass, &a0, &a1, &p1, ::java::lang::t_Class::parameters_))
          {
            OBJ_CALL(result = ::org::apache::lucene::util::AttributeFactory::getStaticImplementation(a0, a1));
            return t_AttributeFactory::wrap_Object(result);
          }

          PyErr_SetArgsError(type, "getStaticImplementation", args);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/Analyzer$TokenStreamComponents.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "org/apache/lucene/analysis/Tokenizer.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {

        ::java::lang::Class *Analyzer$TokenStreamComponents::class$ = NULL;
        jmethodID *Analyzer$TokenStreamComponents::mids$ = NULL;
        bool Analyzer$TokenStreamComponents::live$ = false;

        jclass Analyzer$TokenStreamComponents::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/Analyzer$TokenStreamComponents");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_789fa946] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/Tokenizer;)V");
            mids$[mid_init$_f0015a14] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/Tokenizer;Lorg/apache/lucene/analysis/TokenStream;)V");
            mids$[mid_getTokenStream_71f550c9] = env->getMethodID(cls, "getTokenStream", "()Lorg/apache/lucene/analysis/TokenStream;");
            mids$[mid_getTokenizer_6c9709bb] = env->getMethodID(cls, "getTokenizer", "()Lorg/apache/lucene/analysis/Tokenizer;");
            mids$[mid_setReader_cf2e3c10] = env->getMethodID(cls, "setReader", "(Ljava/io/Reader;)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        Analyzer$TokenStreamComponents::Analyzer$TokenStreamComponents(const ::org::apache::lucene::analysis::Tokenizer & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_789fa946, a0.this$)) {}

        Analyzer$TokenStreamComponents::Analyzer$TokenStreamComponents(const ::org::apache::lucene::analysis::Tokenizer & a0, const ::org::apache::lucene::analysis::TokenStream & a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_f0015a14, a0.this$, a1.this$)) {}

        ::org::apache::lucene::analysis::TokenStream Analyzer$TokenStreamComponents::getTokenStream() const
        {
          return ::org::apache::lucene::analysis::TokenStream(env->callObjectMethod(this$, mids$[mid_getTokenStream_71f550c9]));
        }

        ::org::apache::lucene::analysis::Tokenizer Analyzer$TokenStreamComponents::getTokenizer() const
        {
          return ::org::apache::lucene::analysis::Tokenizer(env->callObjectMethod(this$, mids$[mid_getTokenizer_6c9709bb]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        static PyObject *t_Analyzer$TokenStreamComponents_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_Analyzer$TokenStreamComponents_instance_(PyTypeObject *type, PyObject *arg);
        static int t_Analyzer$TokenStreamComponents_init_(t_Analyzer$TokenStreamComponents *self, PyObject *args, PyObject *kwds);
        static PyObject *t_Analyzer$TokenStreamComponents_getTokenStream(t_Analyzer$TokenStreamComponents *self);
        static PyObject *t_Analyzer$TokenStreamComponents_getTokenizer(t_Analyzer$TokenStreamComponents *self);
        static PyObject *t_Analyzer$TokenStreamComponents_get__tokenStream(t_Analyzer$TokenStreamComponents *self, void *data);
        static PyObject *t_Analyzer$TokenStreamComponents_get__tokenizer(t_Analyzer$TokenStreamComponents *self, void *data);
        static PyGetSetDef t_Analyzer$TokenStreamComponents__fields_[] = {
          DECLARE_GET_FIELD(t_Analyzer$TokenStreamComponents, tokenStream),
          DECLARE_GET_FIELD(t_Analyzer$TokenStreamComponents, tokenizer),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_Analyzer$TokenStreamComponents__methods_[] = {
          DECLARE_METHOD(t_Analyzer$TokenStreamComponents, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_Analyzer$TokenStreamComponents, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_Analyzer$TokenStreamComponents, getTokenStream, METH_NOARGS),
          DECLARE_METHOD(t_Analyzer$TokenStreamComponents, getTokenizer, METH_NOARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(Analyzer$TokenStreamComponents, t_Analyzer$TokenStreamComponents, ::java::lang::Object, Analyzer$TokenStreamComponents, t_Analyzer$TokenStreamComponents_init_, 0, 0, t_Analyzer$TokenStreamComponents__fields_, 0, 0);

        void t_Analyzer$TokenStreamComponents::install(PyObject *module)
        {
          installType(&PY_TYPE(Analyzer$TokenStreamComponents), module, "Analyzer$TokenStreamComponents", 0);
        }

        void t_Analyzer$TokenStreamComponents::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(Analyzer$TokenStreamComponents).tp_dict, "class_", make_descriptor(Analyzer$TokenStreamComponents::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(Analyzer$TokenStreamComponents).tp_dict, "wrapfn_", make_descriptor(t_Analyzer$TokenStreamComponents::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(Analyzer$TokenStreamComponents).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_Analyzer$TokenStreamComponents_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, Analyzer$TokenStreamComponents::initializeClass, 1)))
            return NULL;
          return t_Analyzer$TokenStreamComponents::wrap_Object(Analyzer$TokenStreamComponents(((t_Analyzer$TokenStreamComponents *) arg)->object.this$));
        }
        static PyObject *t_Analyzer$TokenStreamComponents_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, Analyzer$TokenStreamComponents::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_Analyzer$TokenStreamComponents_init_(t_Analyzer$TokenStreamComponents *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              ::org::apache::lucene::analysis::Tokenizer a0((jobject) NULL);
              Analyzer$TokenStreamComponents object((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::analysis::Tokenizer::initializeClass, &a0))
              {
                INT_CALL(object = Analyzer$TokenStreamComponents(a0));
                self->object = object;
                break;
              }
            }
            goto err;
           case 2:
            {
              ::org::apache::lucene::analysis::Tokenizer a0((jobject) NULL);
              ::org::apache::lucene::analysis::TokenStream a1((jobject) NULL);
              Analyzer$TokenStreamComponents object((jobject) NULL);

              if (!parseArgs(args, "kk", ::org::apache::lucene::analysis::Tokenizer::initializeClass, ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0, &a1))
              {
                INT_CALL(object = Analyzer$TokenStreamComponents(a0, a1));
                self->object = object;
                break;
              }
            }
           default:
           err:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_Analyzer$TokenStreamComponents_getTokenStream(t_Analyzer$TokenStreamComponents *self)
        {
          ::org::apache::lucene::analysis::TokenStream result((jobject) NULL);
          OBJ_CALL(result = self->object.getTokenStream());
          return ::org::apache::lucene::analysis::t_TokenStream::wrap_Object(result);
        }

        static PyObject *t_Analyzer$TokenStreamComponents_getTokenizer(t_Analyzer$TokenStreamComponents *self)
        {
          ::org::apache::lucene::analysis::Tokenizer result((jobject) NULL);
          OBJ_CALL(result = self->object.getTokenizer());
          return ::org::apache::lucene::analysis::t_Tokenizer::wrap_Object(result);
        }

        static PyObject *t_Analyzer$TokenStreamComponents_get__tokenStream(t_Analyzer$TokenStreamComponents *self, void *data)
        {
          ::org::apache::lucene::analysis::TokenStream value((jobject) NULL);
          OBJ_CALL(value = self->object.getTokenStream());
          return ::org::apache::lucene::analysis::t_TokenStream::wrap_Object(value);
        }

        static PyObject *t_Analyzer$TokenStreamComponents_get__tokenizer(t_Analyzer$TokenStreamComponents *self, void *data)
        {
          ::org::apache::lucene::analysis::Tokenizer value((jobject) NULL);
          OBJ_CALL(value = self->object.getTokenizer());
          return ::org::apache::lucene::analysis::t_Tokenizer::wrap_Object(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/sandbox/queries/SortedSetSortField.h"
#include "org/apache/lucene/sandbox/queries/SortedSetSortField$Selector.h"
#include "org/apache/lucene/search/FieldComparator.h"
#include "java/lang/Object.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace sandbox {
        namespace queries {

          ::java::lang::Class *SortedSetSortField::class$ = NULL;
          jmethodID *SortedSetSortField::mids$ = NULL;
          bool SortedSetSortField::live$ = false;

          jclass SortedSetSortField::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/sandbox/queries/SortedSetSortField");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_f3691645] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Z)V");
              mids$[mid_init$_95ba0b53] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;ZLorg/apache/lucene/sandbox/queries/SortedSetSortField$Selector;)V");
              mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
              mids$[mid_getComparator_f38637f4] = env->getMethodID(cls, "getComparator", "(II)Lorg/apache/lucene/search/FieldComparator;");
              mids$[mid_getSelector_01e98d5f] = env->getMethodID(cls, "getSelector", "()Lorg/apache/lucene/sandbox/queries/SortedSetSortField$Selector;");
              mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
              mids$[mid_setMissingValue_290588ee] = env->getMethodID(cls, "setMissingValue", "(Ljava/lang/Object;)V");
              mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          SortedSetSortField::SortedSetSortField(const ::java::lang::String & a0, jboolean a1) : ::org::apache::lucene::search::SortField(env->newObject(initializeClass, &mids$, mid_init$_f3691645, a0.this$, a1)) {}

          SortedSetSortField::SortedSetSortField(const ::java::lang::String & a0, jboolean a1, const ::org::apache::lucene::sandbox::queries::SortedSetSortField$Selector & a2) : ::org::apache::lucene::search::SortField(env->newObject(initializeClass, &mids$, mid_init$_95ba0b53, a0.this$, a1, a2.this$)) {}

          jboolean SortedSetSortField::equals(const ::java::lang::Object & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
          }

          ::org::apache::lucene::search::FieldComparator SortedSetSortField::getComparator(jint a0, jint a1) const
          {
            return ::org::apache::lucene::search::FieldComparator(env->callObjectMethod(this$, mids$[mid_getComparator_f38637f4], a0, a1));
          }

          ::org::apache::lucene::sandbox::queries::SortedSetSortField$Selector SortedSetSortField::getSelector() const
          {
            return ::org::apache::lucene::sandbox::queries::SortedSetSortField$Selector(env->callObjectMethod(this$, mids$[mid_getSelector_01e98d5f]));
          }

          jint SortedSetSortField::hashCode() const
          {
            return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
          }

          void SortedSetSortField::setMissingValue(const ::java::lang::Object & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setMissingValue_290588ee], a0.this$);
          }

          ::java::lang::String SortedSetSortField::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace sandbox {
        namespace queries {
          static PyObject *t_SortedSetSortField_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SortedSetSortField_instance_(PyTypeObject *type, PyObject *arg);
          static int t_SortedSetSortField_init_(t_SortedSetSortField *self, PyObject *args, PyObject *kwds);
          static PyObject *t_SortedSetSortField_equals(t_SortedSetSortField *self, PyObject *args);
          static PyObject *t_SortedSetSortField_getComparator(t_SortedSetSortField *self, PyObject *args);
          static PyObject *t_SortedSetSortField_getSelector(t_SortedSetSortField *self);
          static PyObject *t_SortedSetSortField_hashCode(t_SortedSetSortField *self, PyObject *args);
          static PyObject *t_SortedSetSortField_setMissingValue(t_SortedSetSortField *self, PyObject *args);
          static PyObject *t_SortedSetSortField_toString(t_SortedSetSortField *self, PyObject *args);
          static int t_SortedSetSortField_set__missingValue(t_SortedSetSortField *self, PyObject *arg, void *data);
          static PyObject *t_SortedSetSortField_get__selector(t_SortedSetSortField *self, void *data);
          static PyGetSetDef t_SortedSetSortField__fields_[] = {
            DECLARE_SET_FIELD(t_SortedSetSortField, missingValue),
            DECLARE_GET_FIELD(t_SortedSetSortField, selector),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_SortedSetSortField__methods_[] = {
            DECLARE_METHOD(t_SortedSetSortField, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SortedSetSortField, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SortedSetSortField, equals, METH_VARARGS),
            DECLARE_METHOD(t_SortedSetSortField, getComparator, METH_VARARGS),
            DECLARE_METHOD(t_SortedSetSortField, getSelector, METH_NOARGS),
            DECLARE_METHOD(t_SortedSetSortField, hashCode, METH_VARARGS),
            DECLARE_METHOD(t_SortedSetSortField, setMissingValue, METH_VARARGS),
            DECLARE_METHOD(t_SortedSetSortField, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(SortedSetSortField, t_SortedSetSortField, ::org::apache::lucene::search::SortField, SortedSetSortField, t_SortedSetSortField_init_, 0, 0, t_SortedSetSortField__fields_, 0, 0);

          void t_SortedSetSortField::install(PyObject *module)
          {
            installType(&PY_TYPE(SortedSetSortField), module, "SortedSetSortField", 0);
            PyDict_SetItemString(PY_TYPE(SortedSetSortField).tp_dict, "Selector", make_descriptor(&PY_TYPE(SortedSetSortField$Selector)));
          }

          void t_SortedSetSortField::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(SortedSetSortField).tp_dict, "class_", make_descriptor(SortedSetSortField::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(SortedSetSortField).tp_dict, "wrapfn_", make_descriptor(t_SortedSetSortField::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(SortedSetSortField).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_SortedSetSortField_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, SortedSetSortField::initializeClass, 1)))
              return NULL;
            return t_SortedSetSortField::wrap_Object(SortedSetSortField(((t_SortedSetSortField *) arg)->object.this$));
          }
          static PyObject *t_SortedSetSortField_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, SortedSetSortField::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_SortedSetSortField_init_(t_SortedSetSortField *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 2:
              {
                ::java::lang::String a0((jobject) NULL);
                jboolean a1;
                SortedSetSortField object((jobject) NULL);

                if (!parseArgs(args, "sZ", &a0, &a1))
                {
                  INT_CALL(object = SortedSetSortField(a0, a1));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 3:
              {
                ::java::lang::String a0((jobject) NULL);
                jboolean a1;
                ::org::apache::lucene::sandbox::queries::SortedSetSortField$Selector a2((jobject) NULL);
                PyTypeObject **p2;
                SortedSetSortField object((jobject) NULL);

                if (!parseArgs(args, "sZK", ::org::apache::lucene::sandbox::queries::SortedSetSortField$Selector::initializeClass, &a0, &a1, &a2, &p2, ::org::apache::lucene::sandbox::queries::t_SortedSetSortField$Selector::parameters_))
                {
                  INT_CALL(object = SortedSetSortField(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_SortedSetSortField_equals(t_SortedSetSortField *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            jboolean result;

            if (!parseArgs(args, "o", &a0))
            {
              OBJ_CALL(result = self->object.equals(a0));
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(SortedSetSortField), (PyObject *) self, "equals", args, 2);
          }

          static PyObject *t_SortedSetSortField_getComparator(t_SortedSetSortField *self, PyObject *args)
          {
            jint a0;
            jint a1;
            ::org::apache::lucene::search::FieldComparator result((jobject) NULL);

            if (!parseArgs(args, "II", &a0, &a1))
            {
              OBJ_CALL(result = self->object.getComparator(a0, a1));
              return ::org::apache::lucene::search::t_FieldComparator::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(SortedSetSortField), (PyObject *) self, "getComparator", args, 2);
          }

          static PyObject *t_SortedSetSortField_getSelector(t_SortedSetSortField *self)
          {
            ::org::apache::lucene::sandbox::queries::SortedSetSortField$Selector result((jobject) NULL);
            OBJ_CALL(result = self->object.getSelector());
            return ::org::apache::lucene::sandbox::queries::t_SortedSetSortField$Selector::wrap_Object(result);
          }

          static PyObject *t_SortedSetSortField_hashCode(t_SortedSetSortField *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.hashCode());
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(SortedSetSortField), (PyObject *) self, "hashCode", args, 2);
          }

          static PyObject *t_SortedSetSortField_setMissingValue(t_SortedSetSortField *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);

            if (!parseArgs(args, "o", &a0))
            {
              OBJ_CALL(self->object.setMissingValue(a0));
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(SortedSetSortField), (PyObject *) self, "setMissingValue", args, 2);
          }

          static PyObject *t_SortedSetSortField_toString(t_SortedSetSortField *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(&PY_TYPE(SortedSetSortField), (PyObject *) self, "toString", args, 2);
          }

          static int t_SortedSetSortField_set__missingValue(t_SortedSetSortField *self, PyObject *arg, void *data)
          {
            {
              ::java::lang::Object value((jobject) NULL);
              if (!parseArg(arg, "o", &value))
              {
                INT_CALL(self->object.setMissingValue(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "missingValue", arg);
            return -1;
          }

          static PyObject *t_SortedSetSortField_get__selector(t_SortedSetSortField *self, void *data)
          {
            ::org::apache::lucene::sandbox::queries::SortedSetSortField$Selector value((jobject) NULL);
            OBJ_CALL(value = self->object.getSelector());
            return ::org::apache::lucene::sandbox::queries::t_SortedSetSortField$Selector::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/miscellaneous/TruncateTokenFilter.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {

          ::java::lang::Class *TruncateTokenFilter::class$ = NULL;
          jmethodID *TruncateTokenFilter::mids$ = NULL;
          bool TruncateTokenFilter::live$ = false;

          jclass TruncateTokenFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/miscellaneous/TruncateTokenFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_d53bcf42] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;I)V");
              mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          TruncateTokenFilter::TruncateTokenFilter(const ::org::apache::lucene::analysis::TokenStream & a0, jint a1) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_d53bcf42, a0.this$, a1)) {}

          jboolean TruncateTokenFilter::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_54c6a16a]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {
          static PyObject *t_TruncateTokenFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_TruncateTokenFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_TruncateTokenFilter_init_(t_TruncateTokenFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_TruncateTokenFilter_incrementToken(t_TruncateTokenFilter *self, PyObject *args);

          static PyMethodDef t_TruncateTokenFilter__methods_[] = {
            DECLARE_METHOD(t_TruncateTokenFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_TruncateTokenFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_TruncateTokenFilter, incrementToken, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(TruncateTokenFilter, t_TruncateTokenFilter, ::org::apache::lucene::analysis::TokenFilter, TruncateTokenFilter, t_TruncateTokenFilter_init_, 0, 0, 0, 0, 0);

          void t_TruncateTokenFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(TruncateTokenFilter), module, "TruncateTokenFilter", 0);
          }

          void t_TruncateTokenFilter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(TruncateTokenFilter).tp_dict, "class_", make_descriptor(TruncateTokenFilter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(TruncateTokenFilter).tp_dict, "wrapfn_", make_descriptor(t_TruncateTokenFilter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(TruncateTokenFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_TruncateTokenFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, TruncateTokenFilter::initializeClass, 1)))
              return NULL;
            return t_TruncateTokenFilter::wrap_Object(TruncateTokenFilter(((t_TruncateTokenFilter *) arg)->object.this$));
          }
          static PyObject *t_TruncateTokenFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, TruncateTokenFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_TruncateTokenFilter_init_(t_TruncateTokenFilter *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            jint a1;
            TruncateTokenFilter object((jobject) NULL);

            if (!parseArgs(args, "kI", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0, &a1))
            {
              INT_CALL(object = TruncateTokenFilter(a0, a1));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_TruncateTokenFilter_incrementToken(t_TruncateTokenFilter *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(TruncateTokenFilter), (PyObject *) self, "incrementToken", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/MultiTermQuery$TopTermsBoostOnlyBooleanQueryRewrite.h"
#include "org/apache/lucene/search/BooleanQuery.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *MultiTermQuery$TopTermsBoostOnlyBooleanQueryRewrite::class$ = NULL;
        jmethodID *MultiTermQuery$TopTermsBoostOnlyBooleanQueryRewrite::mids$ = NULL;
        bool MultiTermQuery$TopTermsBoostOnlyBooleanQueryRewrite::live$ = false;

        jclass MultiTermQuery$TopTermsBoostOnlyBooleanQueryRewrite::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/MultiTermQuery$TopTermsBoostOnlyBooleanQueryRewrite");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_39c7bd3c] = env->getMethodID(cls, "<init>", "(I)V");
            mids$[mid_getMaxSize_54c6a179] = env->getMethodID(cls, "getMaxSize", "()I");
            mids$[mid_addClause_82a56efb] = env->getMethodID(cls, "addClause", "(Lorg/apache/lucene/search/BooleanQuery;Lorg/apache/lucene/index/Term;IFLorg/apache/lucene/index/TermContext;)V");
            mids$[mid_getTopLevelQuery_6f9339e7] = env->getMethodID(cls, "getTopLevelQuery", "()Lorg/apache/lucene/search/BooleanQuery;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        MultiTermQuery$TopTermsBoostOnlyBooleanQueryRewrite::MultiTermQuery$TopTermsBoostOnlyBooleanQueryRewrite(jint a0) : ::org::apache::lucene::search::TopTermsRewrite(env->newObject(initializeClass, &mids$, mid_init$_39c7bd3c, a0)) {}
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_MultiTermQuery$TopTermsBoostOnlyBooleanQueryRewrite_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_MultiTermQuery$TopTermsBoostOnlyBooleanQueryRewrite_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_MultiTermQuery$TopTermsBoostOnlyBooleanQueryRewrite_of_(t_MultiTermQuery$TopTermsBoostOnlyBooleanQueryRewrite *self, PyObject *args);
        static int t_MultiTermQuery$TopTermsBoostOnlyBooleanQueryRewrite_init_(t_MultiTermQuery$TopTermsBoostOnlyBooleanQueryRewrite *self, PyObject *args, PyObject *kwds);
        static PyObject *t_MultiTermQuery$TopTermsBoostOnlyBooleanQueryRewrite_get__parameters_(t_MultiTermQuery$TopTermsBoostOnlyBooleanQueryRewrite *self, void *data);
        static PyGetSetDef t_MultiTermQuery$TopTermsBoostOnlyBooleanQueryRewrite__fields_[] = {
          DECLARE_GET_FIELD(t_MultiTermQuery$TopTermsBoostOnlyBooleanQueryRewrite, parameters_),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_MultiTermQuery$TopTermsBoostOnlyBooleanQueryRewrite__methods_[] = {
          DECLARE_METHOD(t_MultiTermQuery$TopTermsBoostOnlyBooleanQueryRewrite, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MultiTermQuery$TopTermsBoostOnlyBooleanQueryRewrite, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MultiTermQuery$TopTermsBoostOnlyBooleanQueryRewrite, of_, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(MultiTermQuery$TopTermsBoostOnlyBooleanQueryRewrite, t_MultiTermQuery$TopTermsBoostOnlyBooleanQueryRewrite, ::org::apache::lucene::search::TopTermsRewrite, MultiTermQuery$TopTermsBoostOnlyBooleanQueryRewrite, t_MultiTermQuery$TopTermsBoostOnlyBooleanQueryRewrite_init_, 0, 0, t_MultiTermQuery$TopTermsBoostOnlyBooleanQueryRewrite__fields_, 0, 0);
        PyObject *t_MultiTermQuery$TopTermsBoostOnlyBooleanQueryRewrite::wrap_Object(const MultiTermQuery$TopTermsBoostOnlyBooleanQueryRewrite& object, PyTypeObject *p0)
        {
          PyObject *obj = t_MultiTermQuery$TopTermsBoostOnlyBooleanQueryRewrite::wrap_Object(object);
          if (obj != NULL && obj != Py_None)
          {
            t_MultiTermQuery$TopTermsBoostOnlyBooleanQueryRewrite *self = (t_MultiTermQuery$TopTermsBoostOnlyBooleanQueryRewrite *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        PyObject *t_MultiTermQuery$TopTermsBoostOnlyBooleanQueryRewrite::wrap_jobject(const jobject& object, PyTypeObject *p0)
        {
          PyObject *obj = t_MultiTermQuery$TopTermsBoostOnlyBooleanQueryRewrite::wrap_jobject(object);
          if (obj != NULL && obj != Py_None)
          {
            t_MultiTermQuery$TopTermsBoostOnlyBooleanQueryRewrite *self = (t_MultiTermQuery$TopTermsBoostOnlyBooleanQueryRewrite *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        void t_MultiTermQuery$TopTermsBoostOnlyBooleanQueryRewrite::install(PyObject *module)
        {
          installType(&PY_TYPE(MultiTermQuery$TopTermsBoostOnlyBooleanQueryRewrite), module, "MultiTermQuery$TopTermsBoostOnlyBooleanQueryRewrite", 0);
        }

        void t_MultiTermQuery$TopTermsBoostOnlyBooleanQueryRewrite::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(MultiTermQuery$TopTermsBoostOnlyBooleanQueryRewrite).tp_dict, "class_", make_descriptor(MultiTermQuery$TopTermsBoostOnlyBooleanQueryRewrite::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(MultiTermQuery$TopTermsBoostOnlyBooleanQueryRewrite).tp_dict, "wrapfn_", make_descriptor(t_MultiTermQuery$TopTermsBoostOnlyBooleanQueryRewrite::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(MultiTermQuery$TopTermsBoostOnlyBooleanQueryRewrite).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_MultiTermQuery$TopTermsBoostOnlyBooleanQueryRewrite_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, MultiTermQuery$TopTermsBoostOnlyBooleanQueryRewrite::initializeClass, 1)))
            return NULL;
          return t_MultiTermQuery$TopTermsBoostOnlyBooleanQueryRewrite::wrap_Object(MultiTermQuery$TopTermsBoostOnlyBooleanQueryRewrite(((t_MultiTermQuery$TopTermsBoostOnlyBooleanQueryRewrite *) arg)->object.this$));
        }
        static PyObject *t_MultiTermQuery$TopTermsBoostOnlyBooleanQueryRewrite_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, MultiTermQuery$TopTermsBoostOnlyBooleanQueryRewrite::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_MultiTermQuery$TopTermsBoostOnlyBooleanQueryRewrite_of_(t_MultiTermQuery$TopTermsBoostOnlyBooleanQueryRewrite *self, PyObject *args)
        {
          if (!parseArg(args, "T", 1, &(self->parameters)))
            Py_RETURN_SELF;
          return PyErr_SetArgsError((PyObject *) self, "of_", args);
        }

        static int t_MultiTermQuery$TopTermsBoostOnlyBooleanQueryRewrite_init_(t_MultiTermQuery$TopTermsBoostOnlyBooleanQueryRewrite *self, PyObject *args, PyObject *kwds)
        {
          jint a0;
          MultiTermQuery$TopTermsBoostOnlyBooleanQueryRewrite object((jobject) NULL);

          if (!parseArgs(args, "I", &a0))
          {
            INT_CALL(object = MultiTermQuery$TopTermsBoostOnlyBooleanQueryRewrite(a0));
            self->object = object;
            self->parameters[0] = &::org::apache::lucene::search::PY_TYPE(BooleanQuery);
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }
        static PyObject *t_MultiTermQuery$TopTermsBoostOnlyBooleanQueryRewrite_get__parameters_(t_MultiTermQuery$TopTermsBoostOnlyBooleanQueryRewrite *self, void *data)
        {
          return typeParameters(self->parameters, sizeof(self->parameters));
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/xml/builders/UserInputQueryBuilder.h"
#include "org/apache/lucene/queryparser/xml/QueryBuilder.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/analysis/Analyzer.h"
#include "java/lang/String.h"
#include "org/apache/lucene/queryparser/classic/QueryParser.h"
#include "org/apache/lucene/search/Query.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace xml {
          namespace builders {

            ::java::lang::Class *UserInputQueryBuilder::class$ = NULL;
            jmethodID *UserInputQueryBuilder::mids$ = NULL;
            bool UserInputQueryBuilder::live$ = false;

            jclass UserInputQueryBuilder::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/xml/builders/UserInputQueryBuilder");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_3b88137f] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/queryparser/classic/QueryParser;)V");
                mids$[mid_init$_d77cc89a] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Lorg/apache/lucene/analysis/Analyzer;)V");
                mids$[mid_createQueryParser_0804498e] = env->getMethodID(cls, "createQueryParser", "(Ljava/lang/String;Lorg/apache/lucene/analysis/Analyzer;)Lorg/apache/lucene/queryparser/classic/QueryParser;");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            UserInputQueryBuilder::UserInputQueryBuilder(const ::org::apache::lucene::queryparser::classic::QueryParser & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_3b88137f, a0.this$)) {}

            UserInputQueryBuilder::UserInputQueryBuilder(const ::java::lang::String & a0, const ::org::apache::lucene::analysis::Analyzer & a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_d77cc89a, a0.this$, a1.this$)) {}
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace xml {
          namespace builders {
            static PyObject *t_UserInputQueryBuilder_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_UserInputQueryBuilder_instance_(PyTypeObject *type, PyObject *arg);
            static int t_UserInputQueryBuilder_init_(t_UserInputQueryBuilder *self, PyObject *args, PyObject *kwds);

            static PyMethodDef t_UserInputQueryBuilder__methods_[] = {
              DECLARE_METHOD(t_UserInputQueryBuilder, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_UserInputQueryBuilder, instance_, METH_O | METH_CLASS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(UserInputQueryBuilder, t_UserInputQueryBuilder, ::java::lang::Object, UserInputQueryBuilder, t_UserInputQueryBuilder_init_, 0, 0, 0, 0, 0);

            void t_UserInputQueryBuilder::install(PyObject *module)
            {
              installType(&PY_TYPE(UserInputQueryBuilder), module, "UserInputQueryBuilder", 0);
            }

            void t_UserInputQueryBuilder::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(UserInputQueryBuilder).tp_dict, "class_", make_descriptor(UserInputQueryBuilder::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(UserInputQueryBuilder).tp_dict, "wrapfn_", make_descriptor(t_UserInputQueryBuilder::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(UserInputQueryBuilder).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_UserInputQueryBuilder_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, UserInputQueryBuilder::initializeClass, 1)))
                return NULL;
              return t_UserInputQueryBuilder::wrap_Object(UserInputQueryBuilder(((t_UserInputQueryBuilder *) arg)->object.this$));
            }
            static PyObject *t_UserInputQueryBuilder_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, UserInputQueryBuilder::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_UserInputQueryBuilder_init_(t_UserInputQueryBuilder *self, PyObject *args, PyObject *kwds)
            {
              switch (PyTuple_GET_SIZE(args)) {
               case 1:
                {
                  ::org::apache::lucene::queryparser::classic::QueryParser a0((jobject) NULL);
                  UserInputQueryBuilder object((jobject) NULL);

                  if (!parseArgs(args, "k", ::org::apache::lucene::queryparser::classic::QueryParser::initializeClass, &a0))
                  {
                    INT_CALL(object = UserInputQueryBuilder(a0));
                    self->object = object;
                    break;
                  }
                }
                goto err;
               case 2:
                {
                  ::java::lang::String a0((jobject) NULL);
                  ::org::apache::lucene::analysis::Analyzer a1((jobject) NULL);
                  UserInputQueryBuilder object((jobject) NULL);

                  if (!parseArgs(args, "sk", ::org::apache::lucene::analysis::Analyzer::initializeClass, &a0, &a1))
                  {
                    INT_CALL(object = UserInputQueryBuilder(a0, a1));
                    self->object = object;
                    break;
                  }
                }
               default:
               err:
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/payloads/PayloadSpanUtil.h"
#include "org/apache/lucene/index/IndexReaderContext.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/search/Query.h"
#include "java/util/Collection.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace payloads {

          ::java::lang::Class *PayloadSpanUtil::class$ = NULL;
          jmethodID *PayloadSpanUtil::mids$ = NULL;
          bool PayloadSpanUtil::live$ = false;

          jclass PayloadSpanUtil::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/payloads/PayloadSpanUtil");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4df5686b] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/IndexReaderContext;)V");
              mids$[mid_getPayloadsForQuery_3971ce9f] = env->getMethodID(cls, "getPayloadsForQuery", "(Lorg/apache/lucene/search/Query;)Ljava/util/Collection;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          PayloadSpanUtil::PayloadSpanUtil(const ::org::apache::lucene::index::IndexReaderContext & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_4df5686b, a0.this$)) {}

          ::java::util::Collection PayloadSpanUtil::getPayloadsForQuery(const ::org::apache::lucene::search::Query & a0) const
          {
            return ::java::util::Collection(env->callObjectMethod(this$, mids$[mid_getPayloadsForQuery_3971ce9f], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace payloads {
          static PyObject *t_PayloadSpanUtil_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PayloadSpanUtil_instance_(PyTypeObject *type, PyObject *arg);
          static int t_PayloadSpanUtil_init_(t_PayloadSpanUtil *self, PyObject *args, PyObject *kwds);
          static PyObject *t_PayloadSpanUtil_getPayloadsForQuery(t_PayloadSpanUtil *self, PyObject *arg);

          static PyMethodDef t_PayloadSpanUtil__methods_[] = {
            DECLARE_METHOD(t_PayloadSpanUtil, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PayloadSpanUtil, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PayloadSpanUtil, getPayloadsForQuery, METH_O),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(PayloadSpanUtil, t_PayloadSpanUtil, ::java::lang::Object, PayloadSpanUtil, t_PayloadSpanUtil_init_, 0, 0, 0, 0, 0);

          void t_PayloadSpanUtil::install(PyObject *module)
          {
            installType(&PY_TYPE(PayloadSpanUtil), module, "PayloadSpanUtil", 0);
          }

          void t_PayloadSpanUtil::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(PayloadSpanUtil).tp_dict, "class_", make_descriptor(PayloadSpanUtil::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(PayloadSpanUtil).tp_dict, "wrapfn_", make_descriptor(t_PayloadSpanUtil::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(PayloadSpanUtil).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_PayloadSpanUtil_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, PayloadSpanUtil::initializeClass, 1)))
              return NULL;
            return t_PayloadSpanUtil::wrap_Object(PayloadSpanUtil(((t_PayloadSpanUtil *) arg)->object.this$));
          }
          static PyObject *t_PayloadSpanUtil_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, PayloadSpanUtil::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_PayloadSpanUtil_init_(t_PayloadSpanUtil *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::index::IndexReaderContext a0((jobject) NULL);
            PayloadSpanUtil object((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::index::IndexReaderContext::initializeClass, &a0))
            {
              INT_CALL(object = PayloadSpanUtil(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_PayloadSpanUtil_getPayloadsForQuery(t_PayloadSpanUtil *self, PyObject *arg)
          {
            ::org::apache::lucene::search::Query a0((jobject) NULL);
            ::java::util::Collection result((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::search::Query::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.getPayloadsForQuery(a0));
              return ::java::util::t_Collection::wrap_Object(result, &::java::lang::PY_TYPE(Object));
            }

            PyErr_SetArgsError((PyObject *) self, "getPayloadsForQuery", arg);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/fst/Builder$Arc.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace fst {

          ::java::lang::Class *Builder$Arc::class$ = NULL;
          jmethodID *Builder$Arc::mids$ = NULL;
          jfieldID *Builder$Arc::fids$ = NULL;
          bool Builder$Arc::live$ = false;

          jclass Builder$Arc::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/util/fst/Builder$Arc");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");

              fids$ = new jfieldID[max_fid];
              fids$[fid_isFinal] = env->getFieldID(cls, "isFinal", "Z");
              fids$[fid_label] = env->getFieldID(cls, "label", "I");
              fids$[fid_nextFinalOutput] = env->getFieldID(cls, "nextFinalOutput", "Ljava/lang/Object;");
              fids$[fid_output] = env->getFieldID(cls, "output", "Ljava/lang/Object;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          Builder$Arc::Builder$Arc() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          jboolean Builder$Arc::_get_isFinal() const
          {
            return env->getBooleanField(this$, fids$[fid_isFinal]);
          }

          void Builder$Arc::_set_isFinal(jboolean a0) const
          {
            env->setBooleanField(this$, fids$[fid_isFinal], a0);
          }

          jint Builder$Arc::_get_label() const
          {
            return env->getIntField(this$, fids$[fid_label]);
          }

          void Builder$Arc::_set_label(jint a0) const
          {
            env->setIntField(this$, fids$[fid_label], a0);
          }

          ::java::lang::Object Builder$Arc::_get_nextFinalOutput() const
          {
            return ::java::lang::Object(env->getObjectField(this$, fids$[fid_nextFinalOutput]));
          }

          void Builder$Arc::_set_nextFinalOutput(const ::java::lang::Object & a0) const
          {
            env->setObjectField(this$, fids$[fid_nextFinalOutput], a0.this$);
          }

          ::java::lang::Object Builder$Arc::_get_output() const
          {
            return ::java::lang::Object(env->getObjectField(this$, fids$[fid_output]));
          }

          void Builder$Arc::_set_output(const ::java::lang::Object & a0) const
          {
            env->setObjectField(this$, fids$[fid_output], a0.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace fst {
          static PyObject *t_Builder$Arc_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Builder$Arc_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Builder$Arc_of_(t_Builder$Arc *self, PyObject *args);
          static int t_Builder$Arc_init_(t_Builder$Arc *self, PyObject *args, PyObject *kwds);
          static PyObject *t_Builder$Arc_get__isFinal(t_Builder$Arc *self, void *data);
          static int t_Builder$Arc_set__isFinal(t_Builder$Arc *self, PyObject *arg, void *data);
          static PyObject *t_Builder$Arc_get__label(t_Builder$Arc *self, void *data);
          static int t_Builder$Arc_set__label(t_Builder$Arc *self, PyObject *arg, void *data);
          static PyObject *t_Builder$Arc_get__nextFinalOutput(t_Builder$Arc *self, void *data);
          static int t_Builder$Arc_set__nextFinalOutput(t_Builder$Arc *self, PyObject *arg, void *data);
          static PyObject *t_Builder$Arc_get__output(t_Builder$Arc *self, void *data);
          static int t_Builder$Arc_set__output(t_Builder$Arc *self, PyObject *arg, void *data);

          static PyObject *t_Builder$Arc_get__parameters_(t_Builder$Arc *self, void *data);
          static PyGetSetDef t_Builder$Arc__fields_[] = {
            DECLARE_GETSET_FIELD(t_Builder$Arc, isFinal),
            DECLARE_GETSET_FIELD(t_Builder$Arc, label),
            DECLARE_GETSET_FIELD(t_Builder$Arc, nextFinalOutput),
            DECLARE_GETSET_FIELD(t_Builder$Arc, output),
            DECLARE_GET_FIELD(t_Builder$Arc, parameters_),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_Builder$Arc__methods_[] = {
            DECLARE_METHOD(t_Builder$Arc, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Builder$Arc, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Builder$Arc, of_, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(Builder$Arc, t_Builder$Arc, ::java::lang::Object, Builder$Arc, t_Builder$Arc_init_, 0, 0, t_Builder$Arc__fields_, 0, 0);
          PyObject *t_Builder$Arc::wrap_Object(const Builder$Arc& object, PyTypeObject *p0)
          {
            PyObject *obj = t_Builder$Arc::wrap_Object(object);
            if (obj != NULL && obj != Py_None)
            {
              t_Builder$Arc *self = (t_Builder$Arc *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          PyObject *t_Builder$Arc::wrap_jobject(const jobject& object, PyTypeObject *p0)
          {
            PyObject *obj = t_Builder$Arc::wrap_jobject(object);
            if (obj != NULL && obj != Py_None)
            {
              t_Builder$Arc *self = (t_Builder$Arc *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          void t_Builder$Arc::install(PyObject *module)
          {
            installType(&PY_TYPE(Builder$Arc), module, "Builder$Arc", 0);
          }

          void t_Builder$Arc::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(Builder$Arc).tp_dict, "class_", make_descriptor(Builder$Arc::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(Builder$Arc).tp_dict, "wrapfn_", make_descriptor(t_Builder$Arc::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(Builder$Arc).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_Builder$Arc_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, Builder$Arc::initializeClass, 1)))
              return NULL;
            return t_Builder$Arc::wrap_Object(Builder$Arc(((t_Builder$Arc *) arg)->object.this$));
          }
          static PyObject *t_Builder$Arc_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, Builder$Arc::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_Builder$Arc_of_(t_Builder$Arc *self, PyObject *args)
          {
            if (!parseArg(args, "T", 1, &(self->parameters)))
              Py_RETURN_SELF;
            return PyErr_SetArgsError((PyObject *) self, "of_", args);
          }

          static int t_Builder$Arc_init_(t_Builder$Arc *self, PyObject *args, PyObject *kwds)
          {
            Builder$Arc object((jobject) NULL);

            INT_CALL(object = Builder$Arc());
            self->object = object;

            return 0;
          }
          static PyObject *t_Builder$Arc_get__parameters_(t_Builder$Arc *self, void *data)
          {
            return typeParameters(self->parameters, sizeof(self->parameters));
          }

          static PyObject *t_Builder$Arc_get__isFinal(t_Builder$Arc *self, void *data)
          {
            jboolean value;
            OBJ_CALL(value = self->object._get_isFinal());
            Py_RETURN_BOOL(value);
          }
          static int t_Builder$Arc_set__isFinal(t_Builder$Arc *self, PyObject *arg, void *data)
          {
            jboolean value;
            if (!parseArg(arg, "Z", &value))
            {
              INT_CALL(self->object._set_isFinal(value));
              return 0;
            }
            PyErr_SetArgsError((PyObject *) self, "isFinal", arg);
            return -1;
          }

          static PyObject *t_Builder$Arc_get__label(t_Builder$Arc *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object._get_label());
            return PyInt_FromLong((long) value);
          }
          static int t_Builder$Arc_set__label(t_Builder$Arc *self, PyObject *arg, void *data)
          {
            jint value;
            if (!parseArg(arg, "I", &value))
            {
              INT_CALL(self->object._set_label(value));
              return 0;
            }
            PyErr_SetArgsError((PyObject *) self, "label", arg);
            return -1;
          }

          static PyObject *t_Builder$Arc_get__nextFinalOutput(t_Builder$Arc *self, void *data)
          {
            ::java::lang::Object value((jobject) NULL);
            OBJ_CALL(value = self->object._get_nextFinalOutput());
            return ::java::lang::t_Object::wrap_Object(value);
          }
          static int t_Builder$Arc_set__nextFinalOutput(t_Builder$Arc *self, PyObject *arg, void *data)
          {
            ::java::lang::Object value((jobject) NULL);
            if (!parseArg(arg, "o", &value))
            {
              INT_CALL(self->object._set_nextFinalOutput(value));
              return 0;
            }
            PyErr_SetArgsError((PyObject *) self, "nextFinalOutput", arg);
            return -1;
          }

          static PyObject *t_Builder$Arc_get__output(t_Builder$Arc *self, void *data)
          {
            ::java::lang::Object value((jobject) NULL);
            OBJ_CALL(value = self->object._get_output());
            return ::java::lang::t_Object::wrap_Object(value);
          }
          static int t_Builder$Arc_set__output(t_Builder$Arc *self, PyObject *arg, void *data)
          {
            ::java::lang::Object value((jobject) NULL);
            if (!parseArg(arg, "o", &value))
            {
              INT_CALL(self->object._set_output(value));
              return 0;
            }
            PyErr_SetArgsError((PyObject *) self, "output", arg);
            return -1;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/tartarus/snowball/ext/FinnishStemmer.h"
#include "java/lang/Object.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace tartarus {
    namespace snowball {
      namespace ext {

        ::java::lang::Class *FinnishStemmer::class$ = NULL;
        jmethodID *FinnishStemmer::mids$ = NULL;
        bool FinnishStemmer::live$ = false;

        jclass FinnishStemmer::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/tartarus/snowball/ext/FinnishStemmer");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
            mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
            mids$[mid_stem_54c6a16a] = env->getMethodID(cls, "stem", "()Z");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        FinnishStemmer::FinnishStemmer() : ::org::tartarus::snowball::SnowballProgram(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        jboolean FinnishStemmer::equals(const ::java::lang::Object & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
        }

        jint FinnishStemmer::hashCode() const
        {
          return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
        }

        jboolean FinnishStemmer::stem() const
        {
          return env->callBooleanMethod(this$, mids$[mid_stem_54c6a16a]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace tartarus {
    namespace snowball {
      namespace ext {
        static PyObject *t_FinnishStemmer_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FinnishStemmer_instance_(PyTypeObject *type, PyObject *arg);
        static int t_FinnishStemmer_init_(t_FinnishStemmer *self, PyObject *args, PyObject *kwds);
        static PyObject *t_FinnishStemmer_equals(t_FinnishStemmer *self, PyObject *args);
        static PyObject *t_FinnishStemmer_hashCode(t_FinnishStemmer *self, PyObject *args);
        static PyObject *t_FinnishStemmer_stem(t_FinnishStemmer *self, PyObject *args);

        static PyMethodDef t_FinnishStemmer__methods_[] = {
          DECLARE_METHOD(t_FinnishStemmer, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FinnishStemmer, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FinnishStemmer, equals, METH_VARARGS),
          DECLARE_METHOD(t_FinnishStemmer, hashCode, METH_VARARGS),
          DECLARE_METHOD(t_FinnishStemmer, stem, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(FinnishStemmer, t_FinnishStemmer, ::org::tartarus::snowball::SnowballProgram, FinnishStemmer, t_FinnishStemmer_init_, 0, 0, 0, 0, 0);

        void t_FinnishStemmer::install(PyObject *module)
        {
          installType(&PY_TYPE(FinnishStemmer), module, "FinnishStemmer", 0);
        }

        void t_FinnishStemmer::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(FinnishStemmer).tp_dict, "class_", make_descriptor(FinnishStemmer::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(FinnishStemmer).tp_dict, "wrapfn_", make_descriptor(t_FinnishStemmer::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(FinnishStemmer).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_FinnishStemmer_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, FinnishStemmer::initializeClass, 1)))
            return NULL;
          return t_FinnishStemmer::wrap_Object(FinnishStemmer(((t_FinnishStemmer *) arg)->object.this$));
        }
        static PyObject *t_FinnishStemmer_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, FinnishStemmer::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_FinnishStemmer_init_(t_FinnishStemmer *self, PyObject *args, PyObject *kwds)
        {
          FinnishStemmer object((jobject) NULL);

          INT_CALL(object = FinnishStemmer());
          self->object = object;

          return 0;
        }

        static PyObject *t_FinnishStemmer_equals(t_FinnishStemmer *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.equals(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(FinnishStemmer), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_FinnishStemmer_hashCode(t_FinnishStemmer *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hashCode());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(FinnishStemmer), (PyObject *) self, "hashCode", args, 2);
        }

        static PyObject *t_FinnishStemmer_stem(t_FinnishStemmer *self, PyObject *args)
        {
          jboolean result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.stem());
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(FinnishStemmer), (PyObject *) self, "stem", args, 2);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/facet/taxonomy/TaxonomyFacets.h"
#include "org/apache/lucene/facet/FacetResult.h"
#include "java/io/IOException.h"
#include "java/util/List.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace taxonomy {

          ::java::lang::Class *TaxonomyFacets::class$ = NULL;
          jmethodID *TaxonomyFacets::mids$ = NULL;
          bool TaxonomyFacets::live$ = false;

          jclass TaxonomyFacets::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/facet/taxonomy/TaxonomyFacets");

              mids$ = new jmethodID[max_mid];
              mids$[mid_getAllDims_cdc2a528] = env->getMethodID(cls, "getAllDims", "(I)Ljava/util/List;");
              mids$[mid_verifyDim_7d95dc61] = env->getMethodID(cls, "verifyDim", "(Ljava/lang/String;)Lorg/apache/lucene/facet/FacetsConfig$DimConfig;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ::java::util::List TaxonomyFacets::getAllDims(jint a0) const
          {
            return ::java::util::List(env->callObjectMethod(this$, mids$[mid_getAllDims_cdc2a528], a0));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace taxonomy {
          static PyObject *t_TaxonomyFacets_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_TaxonomyFacets_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_TaxonomyFacets_getAllDims(t_TaxonomyFacets *self, PyObject *args);

          static PyMethodDef t_TaxonomyFacets__methods_[] = {
            DECLARE_METHOD(t_TaxonomyFacets, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_TaxonomyFacets, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_TaxonomyFacets, getAllDims, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(TaxonomyFacets, t_TaxonomyFacets, ::org::apache::lucene::facet::Facets, TaxonomyFacets, abstract_init, 0, 0, 0, 0, 0);

          void t_TaxonomyFacets::install(PyObject *module)
          {
            installType(&PY_TYPE(TaxonomyFacets), module, "TaxonomyFacets", 0);
          }

          void t_TaxonomyFacets::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(TaxonomyFacets).tp_dict, "class_", make_descriptor(TaxonomyFacets::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(TaxonomyFacets).tp_dict, "wrapfn_", make_descriptor(t_TaxonomyFacets::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(TaxonomyFacets).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_TaxonomyFacets_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, TaxonomyFacets::initializeClass, 1)))
              return NULL;
            return t_TaxonomyFacets::wrap_Object(TaxonomyFacets(((t_TaxonomyFacets *) arg)->object.this$));
          }
          static PyObject *t_TaxonomyFacets_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, TaxonomyFacets::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_TaxonomyFacets_getAllDims(t_TaxonomyFacets *self, PyObject *args)
          {
            jint a0;
            ::java::util::List result((jobject) NULL);

            if (!parseArgs(args, "I", &a0))
            {
              OBJ_CALL(result = self->object.getAllDims(a0));
              return ::java::util::t_List::wrap_Object(result, &::org::apache::lucene::facet::PY_TYPE(FacetResult));
            }

            return callSuper(&PY_TYPE(TaxonomyFacets), (PyObject *) self, "getAllDims", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/standard/StandardAnalyzer.h"
#include "org/apache/lucene/util/Version.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/util/CharArraySet.h"
#include "java/io/Reader.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace standard {

          ::java::lang::Class *StandardAnalyzer::class$ = NULL;
          jmethodID *StandardAnalyzer::mids$ = NULL;
          bool StandardAnalyzer::live$ = false;
          jint StandardAnalyzer::DEFAULT_MAX_TOKEN_LENGTH = (jint) 0;
          ::org::apache::lucene::analysis::util::CharArraySet *StandardAnalyzer::STOP_WORDS_SET = NULL;

          jclass StandardAnalyzer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/standard/StandardAnalyzer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_0d96cf33] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;)V");
              mids$[mid_init$_7997a391] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Ljava/io/Reader;)V");
              mids$[mid_init$_83eafe28] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/analysis/util/CharArraySet;)V");
              mids$[mid_getMaxTokenLength_54c6a179] = env->getMethodID(cls, "getMaxTokenLength", "()I");
              mids$[mid_setMaxTokenLength_39c7bd3c] = env->getMethodID(cls, "setMaxTokenLength", "(I)V");
              mids$[mid_createComponents_1be39cae] = env->getMethodID(cls, "createComponents", "(Ljava/lang/String;Ljava/io/Reader;)Lorg/apache/lucene/analysis/Analyzer$TokenStreamComponents;");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              DEFAULT_MAX_TOKEN_LENGTH = env->getStaticIntField(cls, "DEFAULT_MAX_TOKEN_LENGTH");
              STOP_WORDS_SET = new ::org::apache::lucene::analysis::util::CharArraySet(env->getStaticObjectField(cls, "STOP_WORDS_SET", "Lorg/apache/lucene/analysis/util/CharArraySet;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          StandardAnalyzer::StandardAnalyzer(const ::org::apache::lucene::util::Version & a0) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_0d96cf33, a0.this$)) {}

          StandardAnalyzer::StandardAnalyzer(const ::org::apache::lucene::util::Version & a0, const ::java::io::Reader & a1) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_7997a391, a0.this$, a1.this$)) {}

          StandardAnalyzer::StandardAnalyzer(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::analysis::util::CharArraySet & a1) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_83eafe28, a0.this$, a1.this$)) {}

          jint StandardAnalyzer::getMaxTokenLength() const
          {
            return env->callIntMethod(this$, mids$[mid_getMaxTokenLength_54c6a179]);
          }

          void StandardAnalyzer::setMaxTokenLength(jint a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setMaxTokenLength_39c7bd3c], a0);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace standard {
          static PyObject *t_StandardAnalyzer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_StandardAnalyzer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_StandardAnalyzer_init_(t_StandardAnalyzer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_StandardAnalyzer_getMaxTokenLength(t_StandardAnalyzer *self);
          static PyObject *t_StandardAnalyzer_setMaxTokenLength(t_StandardAnalyzer *self, PyObject *arg);
          static PyObject *t_StandardAnalyzer_get__maxTokenLength(t_StandardAnalyzer *self, void *data);
          static int t_StandardAnalyzer_set__maxTokenLength(t_StandardAnalyzer *self, PyObject *arg, void *data);
          static PyGetSetDef t_StandardAnalyzer__fields_[] = {
            DECLARE_GETSET_FIELD(t_StandardAnalyzer, maxTokenLength),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_StandardAnalyzer__methods_[] = {
            DECLARE_METHOD(t_StandardAnalyzer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_StandardAnalyzer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_StandardAnalyzer, getMaxTokenLength, METH_NOARGS),
            DECLARE_METHOD(t_StandardAnalyzer, setMaxTokenLength, METH_O),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(StandardAnalyzer, t_StandardAnalyzer, ::org::apache::lucene::analysis::util::StopwordAnalyzerBase, StandardAnalyzer, t_StandardAnalyzer_init_, 0, 0, t_StandardAnalyzer__fields_, 0, 0);

          void t_StandardAnalyzer::install(PyObject *module)
          {
            installType(&PY_TYPE(StandardAnalyzer), module, "StandardAnalyzer", 0);
          }

          void t_StandardAnalyzer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(StandardAnalyzer).tp_dict, "class_", make_descriptor(StandardAnalyzer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(StandardAnalyzer).tp_dict, "wrapfn_", make_descriptor(t_StandardAnalyzer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(StandardAnalyzer).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(StandardAnalyzer::initializeClass);
            PyDict_SetItemString(PY_TYPE(StandardAnalyzer).tp_dict, "DEFAULT_MAX_TOKEN_LENGTH", make_descriptor(StandardAnalyzer::DEFAULT_MAX_TOKEN_LENGTH));
            PyDict_SetItemString(PY_TYPE(StandardAnalyzer).tp_dict, "STOP_WORDS_SET", make_descriptor(::org::apache::lucene::analysis::util::t_CharArraySet::wrap_Object(*StandardAnalyzer::STOP_WORDS_SET)));
          }

          static PyObject *t_StandardAnalyzer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, StandardAnalyzer::initializeClass, 1)))
              return NULL;
            return t_StandardAnalyzer::wrap_Object(StandardAnalyzer(((t_StandardAnalyzer *) arg)->object.this$));
          }
          static PyObject *t_StandardAnalyzer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, StandardAnalyzer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_StandardAnalyzer_init_(t_StandardAnalyzer *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                StandardAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "K", ::org::apache::lucene::util::Version::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_))
                {
                  INT_CALL(object = StandardAnalyzer(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 2:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                ::java::io::Reader a1((jobject) NULL);
                StandardAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "Kk", ::org::apache::lucene::util::Version::initializeClass, ::java::io::Reader::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1))
                {
                  INT_CALL(object = StandardAnalyzer(a0, a1));
                  self->object = object;
                  break;
                }
              }
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                ::org::apache::lucene::analysis::util::CharArraySet a1((jobject) NULL);
                PyTypeObject **p1;
                StandardAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "KK", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1, &p1, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_))
                {
                  INT_CALL(object = StandardAnalyzer(a0, a1));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_StandardAnalyzer_getMaxTokenLength(t_StandardAnalyzer *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getMaxTokenLength());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_StandardAnalyzer_setMaxTokenLength(t_StandardAnalyzer *self, PyObject *arg)
          {
            jint a0;

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(self->object.setMaxTokenLength(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setMaxTokenLength", arg);
            return NULL;
          }

          static PyObject *t_StandardAnalyzer_get__maxTokenLength(t_StandardAnalyzer *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getMaxTokenLength());
            return PyInt_FromLong((long) value);
          }
          static int t_StandardAnalyzer_set__maxTokenLength(t_StandardAnalyzer *self, PyObject *arg, void *data)
          {
            {
              jint value;
              if (!parseArg(arg, "I", &value))
              {
                INT_CALL(self->object.setMaxTokenLength(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "maxTokenLength", arg);
            return -1;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/egothor/stemmer/Optimizer.h"
#include "org/egothor/stemmer/Row.h"
#include "org/egothor/stemmer/Trie.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace egothor {
    namespace stemmer {

      ::java::lang::Class *Optimizer::class$ = NULL;
      jmethodID *Optimizer::mids$ = NULL;
      bool Optimizer::live$ = false;

      jclass Optimizer::initializeClass(bool getOnly)
      {
        if (getOnly)
          return (jclass) (live$ ? class$->this$ : NULL);
        if (class$ == NULL)
        {
          jclass cls = (jclass) env->findClass("org/egothor/stemmer/Optimizer");

          mids$ = new jmethodID[max_mid];
          mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
          mids$[mid_merge_4f5b02a1] = env->getMethodID(cls, "merge", "(Lorg/egothor/stemmer/Row;Lorg/egothor/stemmer/Row;)Lorg/egothor/stemmer/Row;");
          mids$[mid_optimize_c26c0475] = env->getMethodID(cls, "optimize", "(Lorg/egothor/stemmer/Trie;)Lorg/egothor/stemmer/Trie;");

          class$ = (::java::lang::Class *) new JObject(cls);
          live$ = true;
        }
        return (jclass) class$->this$;
      }

      Optimizer::Optimizer() : ::org::egothor::stemmer::Reduce(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

      ::org::egothor::stemmer::Row Optimizer::merge(const ::org::egothor::stemmer::Row & a0, const ::org::egothor::stemmer::Row & a1) const
      {
        return ::org::egothor::stemmer::Row(env->callObjectMethod(this$, mids$[mid_merge_4f5b02a1], a0.this$, a1.this$));
      }

      ::org::egothor::stemmer::Trie Optimizer::optimize(const ::org::egothor::stemmer::Trie & a0) const
      {
        return ::org::egothor::stemmer::Trie(env->callObjectMethod(this$, mids$[mid_optimize_c26c0475], a0.this$));
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace egothor {
    namespace stemmer {
      static PyObject *t_Optimizer_cast_(PyTypeObject *type, PyObject *arg);
      static PyObject *t_Optimizer_instance_(PyTypeObject *type, PyObject *arg);
      static int t_Optimizer_init_(t_Optimizer *self, PyObject *args, PyObject *kwds);
      static PyObject *t_Optimizer_merge(t_Optimizer *self, PyObject *args);
      static PyObject *t_Optimizer_optimize(t_Optimizer *self, PyObject *args);

      static PyMethodDef t_Optimizer__methods_[] = {
        DECLARE_METHOD(t_Optimizer, cast_, METH_O | METH_CLASS),
        DECLARE_METHOD(t_Optimizer, instance_, METH_O | METH_CLASS),
        DECLARE_METHOD(t_Optimizer, merge, METH_VARARGS),
        DECLARE_METHOD(t_Optimizer, optimize, METH_VARARGS),
        { NULL, NULL, 0, NULL }
      };

      DECLARE_TYPE(Optimizer, t_Optimizer, ::org::egothor::stemmer::Reduce, Optimizer, t_Optimizer_init_, 0, 0, 0, 0, 0);

      void t_Optimizer::install(PyObject *module)
      {
        installType(&PY_TYPE(Optimizer), module, "Optimizer", 0);
      }

      void t_Optimizer::initialize(PyObject *module)
      {
        PyDict_SetItemString(PY_TYPE(Optimizer).tp_dict, "class_", make_descriptor(Optimizer::initializeClass, 1));
        PyDict_SetItemString(PY_TYPE(Optimizer).tp_dict, "wrapfn_", make_descriptor(t_Optimizer::wrap_jobject));
        PyDict_SetItemString(PY_TYPE(Optimizer).tp_dict, "boxfn_", make_descriptor(boxObject));
      }

      static PyObject *t_Optimizer_cast_(PyTypeObject *type, PyObject *arg)
      {
        if (!(arg = castCheck(arg, Optimizer::initializeClass, 1)))
          return NULL;
        return t_Optimizer::wrap_Object(Optimizer(((t_Optimizer *) arg)->object.this$));
      }
      static PyObject *t_Optimizer_instance_(PyTypeObject *type, PyObject *arg)
      {
        if (!castCheck(arg, Optimizer::initializeClass, 0))
          Py_RETURN_FALSE;
        Py_RETURN_TRUE;
      }

      static int t_Optimizer_init_(t_Optimizer *self, PyObject *args, PyObject *kwds)
      {
        Optimizer object((jobject) NULL);

        INT_CALL(object = Optimizer());
        self->object = object;

        return 0;
      }

      static PyObject *t_Optimizer_merge(t_Optimizer *self, PyObject *args)
      {
        ::org::egothor::stemmer::Row a0((jobject) NULL);
        ::org::egothor::stemmer::Row a1((jobject) NULL);
        ::org::egothor::stemmer::Row result((jobject) NULL);

        if (!parseArgs(args, "kk", ::org::egothor::stemmer::Row::initializeClass, ::org::egothor::stemmer::Row::initializeClass, &a0, &a1))
        {
          OBJ_CALL(result = self->object.merge(a0, a1));
          return ::org::egothor::stemmer::t_Row::wrap_Object(result);
        }

        PyErr_SetArgsError((PyObject *) self, "merge", args);
        return NULL;
      }

      static PyObject *t_Optimizer_optimize(t_Optimizer *self, PyObject *args)
      {
        ::org::egothor::stemmer::Trie a0((jobject) NULL);
        ::org::egothor::stemmer::Trie result((jobject) NULL);

        if (!parseArgs(args, "k", ::org::egothor::stemmer::Trie::initializeClass, &a0))
        {
          OBJ_CALL(result = self->object.optimize(a0));
          return ::org::egothor::stemmer::t_Trie::wrap_Object(result);
        }

        return callSuper(&PY_TYPE(Optimizer), (PyObject *) self, "optimize", args, 2);
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/spell/Dictionary.h"
#include "org/apache/lucene/search/suggest/InputIterator.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace spell {

          ::java::lang::Class *Dictionary::class$ = NULL;
          jmethodID *Dictionary::mids$ = NULL;
          bool Dictionary::live$ = false;

          jclass Dictionary::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/spell/Dictionary");

              mids$ = new jmethodID[max_mid];
              mids$[mid_getEntryIterator_23dc46b1] = env->getMethodID(cls, "getEntryIterator", "()Lorg/apache/lucene/search/suggest/InputIterator;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ::org::apache::lucene::search::suggest::InputIterator Dictionary::getEntryIterator() const
          {
            return ::org::apache::lucene::search::suggest::InputIterator(env->callObjectMethod(this$, mids$[mid_getEntryIterator_23dc46b1]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace spell {
          static PyObject *t_Dictionary_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Dictionary_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Dictionary_getEntryIterator(t_Dictionary *self);
          static PyObject *t_Dictionary_get__entryIterator(t_Dictionary *self, void *data);
          static PyGetSetDef t_Dictionary__fields_[] = {
            DECLARE_GET_FIELD(t_Dictionary, entryIterator),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_Dictionary__methods_[] = {
            DECLARE_METHOD(t_Dictionary, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Dictionary, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Dictionary, getEntryIterator, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(Dictionary, t_Dictionary, ::java::lang::Object, Dictionary, abstract_init, 0, 0, t_Dictionary__fields_, 0, 0);

          void t_Dictionary::install(PyObject *module)
          {
            installType(&PY_TYPE(Dictionary), module, "Dictionary", 0);
          }

          void t_Dictionary::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(Dictionary).tp_dict, "class_", make_descriptor(Dictionary::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(Dictionary).tp_dict, "wrapfn_", make_descriptor(t_Dictionary::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(Dictionary).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_Dictionary_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, Dictionary::initializeClass, 1)))
              return NULL;
            return t_Dictionary::wrap_Object(Dictionary(((t_Dictionary *) arg)->object.this$));
          }
          static PyObject *t_Dictionary_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, Dictionary::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_Dictionary_getEntryIterator(t_Dictionary *self)
          {
            ::org::apache::lucene::search::suggest::InputIterator result((jobject) NULL);
            OBJ_CALL(result = self->object.getEntryIterator());
            return ::org::apache::lucene::search::suggest::t_InputIterator::wrap_Object(result);
          }

          static PyObject *t_Dictionary_get__entryIterator(t_Dictionary *self, void *data)
          {
            ::org::apache::lucene::search::suggest::InputIterator value((jobject) NULL);
            OBJ_CALL(value = self->object.getEntryIterator());
            return ::org::apache::lucene::search::suggest::t_InputIterator::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/util/FilteringTokenFilter.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "org/apache/lucene/util/Version.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace util {

          ::java::lang::Class *FilteringTokenFilter::class$ = NULL;
          jmethodID *FilteringTokenFilter::mids$ = NULL;
          bool FilteringTokenFilter::live$ = false;

          jclass FilteringTokenFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/util/FilteringTokenFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_8f50e725] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/analysis/TokenStream;)V");
              mids$[mid_init$_f31dee3a] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;ZLorg/apache/lucene/analysis/TokenStream;)V");
              mids$[mid_end_54c6a166] = env->getMethodID(cls, "end", "()V");
              mids$[mid_getEnablePositionIncrements_54c6a16a] = env->getMethodID(cls, "getEnablePositionIncrements", "()Z");
              mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");
              mids$[mid_reset_54c6a166] = env->getMethodID(cls, "reset", "()V");
              mids$[mid_setEnablePositionIncrements_bb0c767f] = env->getMethodID(cls, "setEnablePositionIncrements", "(Z)V");
              mids$[mid_accept_54c6a16a] = env->getMethodID(cls, "accept", "()Z");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          FilteringTokenFilter::FilteringTokenFilter(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::analysis::TokenStream & a1) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_8f50e725, a0.this$, a1.this$)) {}

          FilteringTokenFilter::FilteringTokenFilter(const ::org::apache::lucene::util::Version & a0, jboolean a1, const ::org::apache::lucene::analysis::TokenStream & a2) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_f31dee3a, a0.this$, a1, a2.this$)) {}

          void FilteringTokenFilter::end() const
          {
            env->callVoidMethod(this$, mids$[mid_end_54c6a166]);
          }

          jboolean FilteringTokenFilter::getEnablePositionIncrements() const
          {
            return env->callBooleanMethod(this$, mids$[mid_getEnablePositionIncrements_54c6a16a]);
          }

          jboolean FilteringTokenFilter::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_54c6a16a]);
          }

          void FilteringTokenFilter::reset() const
          {
            env->callVoidMethod(this$, mids$[mid_reset_54c6a166]);
          }

          void FilteringTokenFilter::setEnablePositionIncrements(jboolean a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setEnablePositionIncrements_bb0c767f], a0);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace util {
          static PyObject *t_FilteringTokenFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_FilteringTokenFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_FilteringTokenFilter_init_(t_FilteringTokenFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_FilteringTokenFilter_end(t_FilteringTokenFilter *self, PyObject *args);
          static PyObject *t_FilteringTokenFilter_getEnablePositionIncrements(t_FilteringTokenFilter *self);
          static PyObject *t_FilteringTokenFilter_incrementToken(t_FilteringTokenFilter *self, PyObject *args);
          static PyObject *t_FilteringTokenFilter_reset(t_FilteringTokenFilter *self, PyObject *args);
          static PyObject *t_FilteringTokenFilter_setEnablePositionIncrements(t_FilteringTokenFilter *self, PyObject *arg);
          static PyObject *t_FilteringTokenFilter_get__enablePositionIncrements(t_FilteringTokenFilter *self, void *data);
          static int t_FilteringTokenFilter_set__enablePositionIncrements(t_FilteringTokenFilter *self, PyObject *arg, void *data);
          static PyGetSetDef t_FilteringTokenFilter__fields_[] = {
            DECLARE_GETSET_FIELD(t_FilteringTokenFilter, enablePositionIncrements),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_FilteringTokenFilter__methods_[] = {
            DECLARE_METHOD(t_FilteringTokenFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FilteringTokenFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FilteringTokenFilter, end, METH_VARARGS),
            DECLARE_METHOD(t_FilteringTokenFilter, getEnablePositionIncrements, METH_NOARGS),
            DECLARE_METHOD(t_FilteringTokenFilter, incrementToken, METH_VARARGS),
            DECLARE_METHOD(t_FilteringTokenFilter, reset, METH_VARARGS),
            DECLARE_METHOD(t_FilteringTokenFilter, setEnablePositionIncrements, METH_O),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(FilteringTokenFilter, t_FilteringTokenFilter, ::org::apache::lucene::analysis::TokenFilter, FilteringTokenFilter, t_FilteringTokenFilter_init_, 0, 0, t_FilteringTokenFilter__fields_, 0, 0);

          void t_FilteringTokenFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(FilteringTokenFilter), module, "FilteringTokenFilter", 0);
          }

          void t_FilteringTokenFilter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(FilteringTokenFilter).tp_dict, "class_", make_descriptor(FilteringTokenFilter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(FilteringTokenFilter).tp_dict, "wrapfn_", make_descriptor(t_FilteringTokenFilter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(FilteringTokenFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_FilteringTokenFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, FilteringTokenFilter::initializeClass, 1)))
              return NULL;
            return t_FilteringTokenFilter::wrap_Object(FilteringTokenFilter(((t_FilteringTokenFilter *) arg)->object.this$));
          }
          static PyObject *t_FilteringTokenFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, FilteringTokenFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_FilteringTokenFilter_init_(t_FilteringTokenFilter *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 2:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                ::org::apache::lucene::analysis::TokenStream a1((jobject) NULL);
                FilteringTokenFilter object((jobject) NULL);

                if (!parseArgs(args, "Kk", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1))
                {
                  INT_CALL(object = FilteringTokenFilter(a0, a1));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 3:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                jboolean a1;
                ::org::apache::lucene::analysis::TokenStream a2((jobject) NULL);
                FilteringTokenFilter object((jobject) NULL);

                if (!parseArgs(args, "KZk", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1, &a2))
                {
                  INT_CALL(object = FilteringTokenFilter(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_FilteringTokenFilter_end(t_FilteringTokenFilter *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.end());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(FilteringTokenFilter), (PyObject *) self, "end", args, 2);
          }

          static PyObject *t_FilteringTokenFilter_getEnablePositionIncrements(t_FilteringTokenFilter *self)
          {
            jboolean result;
            OBJ_CALL(result = self->object.getEnablePositionIncrements());
            Py_RETURN_BOOL(result);
          }

          static PyObject *t_FilteringTokenFilter_incrementToken(t_FilteringTokenFilter *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(FilteringTokenFilter), (PyObject *) self, "incrementToken", args, 2);
          }

          static PyObject *t_FilteringTokenFilter_reset(t_FilteringTokenFilter *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.reset());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(FilteringTokenFilter), (PyObject *) self, "reset", args, 2);
          }

          static PyObject *t_FilteringTokenFilter_setEnablePositionIncrements(t_FilteringTokenFilter *self, PyObject *arg)
          {
            jboolean a0;

            if (!parseArg(arg, "Z", &a0))
            {
              OBJ_CALL(self->object.setEnablePositionIncrements(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setEnablePositionIncrements", arg);
            return NULL;
          }

          static PyObject *t_FilteringTokenFilter_get__enablePositionIncrements(t_FilteringTokenFilter *self, void *data)
          {
            jboolean value;
            OBJ_CALL(value = self->object.getEnablePositionIncrements());
            Py_RETURN_BOOL(value);
          }
          static int t_FilteringTokenFilter_set__enablePositionIncrements(t_FilteringTokenFilter *self, PyObject *arg, void *data)
          {
            {
              jboolean value;
              if (!parseArg(arg, "Z", &value))
              {
                INT_CALL(self->object.setEnablePositionIncrements(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "enablePositionIncrements", arg);
            return -1;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/standard/builders/MatchAllDocsQueryNodeBuilder.h"
#include "org/apache/lucene/queryparser/flexible/core/QueryNodeException.h"
#include "org/apache/lucene/search/MatchAllDocsQuery.h"
#include "org/apache/lucene/queryparser/flexible/standard/builders/StandardQueryBuilder.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/QueryNode.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace builders {

              ::java::lang::Class *MatchAllDocsQueryNodeBuilder::class$ = NULL;
              jmethodID *MatchAllDocsQueryNodeBuilder::mids$ = NULL;
              bool MatchAllDocsQueryNodeBuilder::live$ = false;

              jclass MatchAllDocsQueryNodeBuilder::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/standard/builders/MatchAllDocsQueryNodeBuilder");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
                  mids$[mid_build_94b64688] = env->getMethodID(cls, "build", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;)Lorg/apache/lucene/search/MatchAllDocsQuery;");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              MatchAllDocsQueryNodeBuilder::MatchAllDocsQueryNodeBuilder() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

              ::org::apache::lucene::search::MatchAllDocsQuery MatchAllDocsQueryNodeBuilder::build(const ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode & a0) const
              {
                return ::org::apache::lucene::search::MatchAllDocsQuery(env->callObjectMethod(this$, mids$[mid_build_94b64688], a0.this$));
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace builders {
              static PyObject *t_MatchAllDocsQueryNodeBuilder_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_MatchAllDocsQueryNodeBuilder_instance_(PyTypeObject *type, PyObject *arg);
              static int t_MatchAllDocsQueryNodeBuilder_init_(t_MatchAllDocsQueryNodeBuilder *self, PyObject *args, PyObject *kwds);
              static PyObject *t_MatchAllDocsQueryNodeBuilder_build(t_MatchAllDocsQueryNodeBuilder *self, PyObject *arg);

              static PyMethodDef t_MatchAllDocsQueryNodeBuilder__methods_[] = {
                DECLARE_METHOD(t_MatchAllDocsQueryNodeBuilder, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_MatchAllDocsQueryNodeBuilder, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_MatchAllDocsQueryNodeBuilder, build, METH_O),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(MatchAllDocsQueryNodeBuilder, t_MatchAllDocsQueryNodeBuilder, ::java::lang::Object, MatchAllDocsQueryNodeBuilder, t_MatchAllDocsQueryNodeBuilder_init_, 0, 0, 0, 0, 0);

              void t_MatchAllDocsQueryNodeBuilder::install(PyObject *module)
              {
                installType(&PY_TYPE(MatchAllDocsQueryNodeBuilder), module, "MatchAllDocsQueryNodeBuilder", 0);
              }

              void t_MatchAllDocsQueryNodeBuilder::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(MatchAllDocsQueryNodeBuilder).tp_dict, "class_", make_descriptor(MatchAllDocsQueryNodeBuilder::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(MatchAllDocsQueryNodeBuilder).tp_dict, "wrapfn_", make_descriptor(t_MatchAllDocsQueryNodeBuilder::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(MatchAllDocsQueryNodeBuilder).tp_dict, "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_MatchAllDocsQueryNodeBuilder_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, MatchAllDocsQueryNodeBuilder::initializeClass, 1)))
                  return NULL;
                return t_MatchAllDocsQueryNodeBuilder::wrap_Object(MatchAllDocsQueryNodeBuilder(((t_MatchAllDocsQueryNodeBuilder *) arg)->object.this$));
              }
              static PyObject *t_MatchAllDocsQueryNodeBuilder_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, MatchAllDocsQueryNodeBuilder::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_MatchAllDocsQueryNodeBuilder_init_(t_MatchAllDocsQueryNodeBuilder *self, PyObject *args, PyObject *kwds)
              {
                MatchAllDocsQueryNodeBuilder object((jobject) NULL);

                INT_CALL(object = MatchAllDocsQueryNodeBuilder());
                self->object = object;

                return 0;
              }

              static PyObject *t_MatchAllDocsQueryNodeBuilder_build(t_MatchAllDocsQueryNodeBuilder *self, PyObject *arg)
              {
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode a0((jobject) NULL);
                ::org::apache::lucene::search::MatchAllDocsQuery result((jobject) NULL);

                if (!parseArg(arg, "k", ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode::initializeClass, &a0))
                {
                  OBJ_CALL(result = self->object.build(a0));
                  return ::org::apache::lucene::search::t_MatchAllDocsQuery::wrap_Object(result);
                }

                PyErr_SetArgsError((PyObject *) self, "build", arg);
                return NULL;
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/pt/PortugueseAnalyzer.h"
#include "org/apache/lucene/util/Version.h"
#include "java/lang/String.h"
#include "org/apache/lucene/analysis/util/CharArraySet.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace pt {

          ::java::lang::Class *PortugueseAnalyzer::class$ = NULL;
          jmethodID *PortugueseAnalyzer::mids$ = NULL;
          bool PortugueseAnalyzer::live$ = false;
          ::java::lang::String *PortugueseAnalyzer::DEFAULT_STOPWORD_FILE = NULL;

          jclass PortugueseAnalyzer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/pt/PortugueseAnalyzer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_0d96cf33] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;)V");
              mids$[mid_init$_83eafe28] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/analysis/util/CharArraySet;)V");
              mids$[mid_init$_c9d7e4a3] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/analysis/util/CharArraySet;Lorg/apache/lucene/analysis/util/CharArraySet;)V");
              mids$[mid_getDefaultStopSet_d2d3505c] = env->getStaticMethodID(cls, "getDefaultStopSet", "()Lorg/apache/lucene/analysis/util/CharArraySet;");
              mids$[mid_createComponents_1be39cae] = env->getMethodID(cls, "createComponents", "(Ljava/lang/String;Ljava/io/Reader;)Lorg/apache/lucene/analysis/Analyzer$TokenStreamComponents;");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              DEFAULT_STOPWORD_FILE = new ::java::lang::String(env->getStaticObjectField(cls, "DEFAULT_STOPWORD_FILE", "Ljava/lang/String;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          PortugueseAnalyzer::PortugueseAnalyzer(const ::org::apache::lucene::util::Version & a0) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_0d96cf33, a0.this$)) {}

          PortugueseAnalyzer::PortugueseAnalyzer(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::analysis::util::CharArraySet & a1) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_83eafe28, a0.this$, a1.this$)) {}

          PortugueseAnalyzer::PortugueseAnalyzer(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::analysis::util::CharArraySet & a1, const ::org::apache::lucene::analysis::util::CharArraySet & a2) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_c9d7e4a3, a0.this$, a1.this$, a2.this$)) {}

          ::org::apache::lucene::analysis::util::CharArraySet PortugueseAnalyzer::getDefaultStopSet()
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::analysis::util::CharArraySet(env->callStaticObjectMethod(cls, mids$[mid_getDefaultStopSet_d2d3505c]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace pt {
          static PyObject *t_PortugueseAnalyzer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PortugueseAnalyzer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_PortugueseAnalyzer_init_(t_PortugueseAnalyzer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_PortugueseAnalyzer_getDefaultStopSet(PyTypeObject *type);
          static PyObject *t_PortugueseAnalyzer_get__defaultStopSet(t_PortugueseAnalyzer *self, void *data);
          static PyGetSetDef t_PortugueseAnalyzer__fields_[] = {
            DECLARE_GET_FIELD(t_PortugueseAnalyzer, defaultStopSet),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_PortugueseAnalyzer__methods_[] = {
            DECLARE_METHOD(t_PortugueseAnalyzer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PortugueseAnalyzer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PortugueseAnalyzer, getDefaultStopSet, METH_NOARGS | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(PortugueseAnalyzer, t_PortugueseAnalyzer, ::org::apache::lucene::analysis::util::StopwordAnalyzerBase, PortugueseAnalyzer, t_PortugueseAnalyzer_init_, 0, 0, t_PortugueseAnalyzer__fields_, 0, 0);

          void t_PortugueseAnalyzer::install(PyObject *module)
          {
            installType(&PY_TYPE(PortugueseAnalyzer), module, "PortugueseAnalyzer", 0);
          }

          void t_PortugueseAnalyzer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(PortugueseAnalyzer).tp_dict, "class_", make_descriptor(PortugueseAnalyzer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(PortugueseAnalyzer).tp_dict, "wrapfn_", make_descriptor(t_PortugueseAnalyzer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(PortugueseAnalyzer).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(PortugueseAnalyzer::initializeClass);
            PyDict_SetItemString(PY_TYPE(PortugueseAnalyzer).tp_dict, "DEFAULT_STOPWORD_FILE", make_descriptor(j2p(*PortugueseAnalyzer::DEFAULT_STOPWORD_FILE)));
          }

          static PyObject *t_PortugueseAnalyzer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, PortugueseAnalyzer::initializeClass, 1)))
              return NULL;
            return t_PortugueseAnalyzer::wrap_Object(PortugueseAnalyzer(((t_PortugueseAnalyzer *) arg)->object.this$));
          }
          static PyObject *t_PortugueseAnalyzer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, PortugueseAnalyzer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_PortugueseAnalyzer_init_(t_PortugueseAnalyzer *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                PortugueseAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "K", ::org::apache::lucene::util::Version::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_))
                {
                  INT_CALL(object = PortugueseAnalyzer(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 2:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                ::org::apache::lucene::analysis::util::CharArraySet a1((jobject) NULL);
                PyTypeObject **p1;
                PortugueseAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "KK", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1, &p1, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_))
                {
                  INT_CALL(object = PortugueseAnalyzer(a0, a1));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 3:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                ::org::apache::lucene::analysis::util::CharArraySet a1((jobject) NULL);
                PyTypeObject **p1;
                ::org::apache::lucene::analysis::util::CharArraySet a2((jobject) NULL);
                PyTypeObject **p2;
                PortugueseAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "KKK", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1, &p1, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_, &a2, &p2, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_))
                {
                  INT_CALL(object = PortugueseAnalyzer(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_PortugueseAnalyzer_getDefaultStopSet(PyTypeObject *type)
          {
            ::org::apache::lucene::analysis::util::CharArraySet result((jobject) NULL);
            OBJ_CALL(result = ::org::apache::lucene::analysis::pt::PortugueseAnalyzer::getDefaultStopSet());
            return ::org::apache::lucene::analysis::util::t_CharArraySet::wrap_Object(result);
          }

          static PyObject *t_PortugueseAnalyzer_get__defaultStopSet(t_PortugueseAnalyzer *self, void *data)
          {
            ::org::apache::lucene::analysis::util::CharArraySet value((jobject) NULL);
            OBJ_CALL(value = self->object.getDefaultStopSet());
            return ::org::apache::lucene::analysis::util::t_CharArraySet::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/TermQuery.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/index/TermContext.h"
#include "org/apache/lucene/search/Weight.h"
#include "java/io/IOException.h"
#include "java/util/Set.h"
#include "org/apache/lucene/index/Term.h"
#include "java/lang/String.h"
#include "org/apache/lucene/search/IndexSearcher.h"
#include "java/lang/Object.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *TermQuery::class$ = NULL;
        jmethodID *TermQuery::mids$ = NULL;
        bool TermQuery::live$ = false;

        jclass TermQuery::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/TermQuery");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_7eca6a81] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/Term;)V");
            mids$[mid_init$_ec3f6ef2] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/Term;Lorg/apache/lucene/index/TermContext;)V");
            mids$[mid_init$_05555589] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/Term;I)V");
            mids$[mid_createWeight_367763cb] = env->getMethodID(cls, "createWeight", "(Lorg/apache/lucene/search/IndexSearcher;)Lorg/apache/lucene/search/Weight;");
            mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
            mids$[mid_extractTerms_fb4f2b26] = env->getMethodID(cls, "extractTerms", "(Ljava/util/Set;)V");
            mids$[mid_getTerm_0f71f314] = env->getMethodID(cls, "getTerm", "()Lorg/apache/lucene/index/Term;");
            mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
            mids$[mid_toString_97a5258f] = env->getMethodID(cls, "toString", "(Ljava/lang/String;)Ljava/lang/String;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        TermQuery::TermQuery(const ::org::apache::lucene::index::Term & a0) : ::org::apache::lucene::search::Query(env->newObject(initializeClass, &mids$, mid_init$_7eca6a81, a0.this$)) {}

        TermQuery::TermQuery(const ::org::apache::lucene::index::Term & a0, const ::org::apache::lucene::index::TermContext & a1) : ::org::apache::lucene::search::Query(env->newObject(initializeClass, &mids$, mid_init$_ec3f6ef2, a0.this$, a1.this$)) {}

        TermQuery::TermQuery(const ::org::apache::lucene::index::Term & a0, jint a1) : ::org::apache::lucene::search::Query(env->newObject(initializeClass, &mids$, mid_init$_05555589, a0.this$, a1)) {}

        ::org::apache::lucene::search::Weight TermQuery::createWeight(const ::org::apache::lucene::search::IndexSearcher & a0) const
        {
          return ::org::apache::lucene::search::Weight(env->callObjectMethod(this$, mids$[mid_createWeight_367763cb], a0.this$));
        }

        jboolean TermQuery::equals(const ::java::lang::Object & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
        }

        void TermQuery::extractTerms(const ::java::util::Set & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_extractTerms_fb4f2b26], a0.this$);
        }

        ::org::apache::lucene::index::Term TermQuery::getTerm() const
        {
          return ::org::apache::lucene::index::Term(env->callObjectMethod(this$, mids$[mid_getTerm_0f71f314]));
        }

        jint TermQuery::hashCode() const
        {
          return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
        }

        ::java::lang::String TermQuery::toString(const ::java::lang::String & a0) const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_97a5258f], a0.this$));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_TermQuery_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_TermQuery_instance_(PyTypeObject *type, PyObject *arg);
        static int t_TermQuery_init_(t_TermQuery *self, PyObject *args, PyObject *kwds);
        static PyObject *t_TermQuery_createWeight(t_TermQuery *self, PyObject *args);
        static PyObject *t_TermQuery_equals(t_TermQuery *self, PyObject *args);
        static PyObject *t_TermQuery_extractTerms(t_TermQuery *self, PyObject *args);
        static PyObject *t_TermQuery_getTerm(t_TermQuery *self);
        static PyObject *t_TermQuery_hashCode(t_TermQuery *self, PyObject *args);
        static PyObject *t_TermQuery_toString(t_TermQuery *self, PyObject *args);
        static PyObject *t_TermQuery_get__term(t_TermQuery *self, void *data);
        static PyGetSetDef t_TermQuery__fields_[] = {
          DECLARE_GET_FIELD(t_TermQuery, term),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_TermQuery__methods_[] = {
          DECLARE_METHOD(t_TermQuery, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_TermQuery, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_TermQuery, createWeight, METH_VARARGS),
          DECLARE_METHOD(t_TermQuery, equals, METH_VARARGS),
          DECLARE_METHOD(t_TermQuery, extractTerms, METH_VARARGS),
          DECLARE_METHOD(t_TermQuery, getTerm, METH_NOARGS),
          DECLARE_METHOD(t_TermQuery, hashCode, METH_VARARGS),
          DECLARE_METHOD(t_TermQuery, toString, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(TermQuery, t_TermQuery, ::org::apache::lucene::search::Query, TermQuery, t_TermQuery_init_, 0, 0, t_TermQuery__fields_, 0, 0);

        void t_TermQuery::install(PyObject *module)
        {
          installType(&PY_TYPE(TermQuery), module, "TermQuery", 0);
        }

        void t_TermQuery::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(TermQuery).tp_dict, "class_", make_descriptor(TermQuery::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(TermQuery).tp_dict, "wrapfn_", make_descriptor(t_TermQuery::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(TermQuery).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_TermQuery_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, TermQuery::initializeClass, 1)))
            return NULL;
          return t_TermQuery::wrap_Object(TermQuery(((t_TermQuery *) arg)->object.this$));
        }
        static PyObject *t_TermQuery_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, TermQuery::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_TermQuery_init_(t_TermQuery *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              ::org::apache::lucene::index::Term a0((jobject) NULL);
              TermQuery object((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::index::Term::initializeClass, &a0))
              {
                INT_CALL(object = TermQuery(a0));
                self->object = object;
                break;
              }
            }
            goto err;
           case 2:
            {
              ::org::apache::lucene::index::Term a0((jobject) NULL);
              ::org::apache::lucene::index::TermContext a1((jobject) NULL);
              TermQuery object((jobject) NULL);

              if (!parseArgs(args, "kk", ::org::apache::lucene::index::Term::initializeClass, ::org::apache::lucene::index::TermContext::initializeClass, &a0, &a1))
              {
                INT_CALL(object = TermQuery(a0, a1));
                self->object = object;
                break;
              }
            }
            {
              ::org::apache::lucene::index::Term a0((jobject) NULL);
              jint a1;
              TermQuery object((jobject) NULL);

              if (!parseArgs(args, "kI", ::org::apache::lucene::index::Term::initializeClass, &a0, &a1))
              {
                INT_CALL(object = TermQuery(a0, a1));
                self->object = object;
                break;
              }
            }
           default:
           err:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_TermQuery_createWeight(t_TermQuery *self, PyObject *args)
        {
          ::org::apache::lucene::search::IndexSearcher a0((jobject) NULL);
          ::org::apache::lucene::search::Weight result((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::search::IndexSearcher::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.createWeight(a0));
            return ::org::apache::lucene::search::t_Weight::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(TermQuery), (PyObject *) self, "createWeight", args, 2);
        }

        static PyObject *t_TermQuery_equals(t_TermQuery *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.equals(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(TermQuery), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_TermQuery_extractTerms(t_TermQuery *self, PyObject *args)
        {
          ::java::util::Set a0((jobject) NULL);
          PyTypeObject **p0;

          if (!parseArgs(args, "K", ::java::util::Set::initializeClass, &a0, &p0, ::java::util::t_Set::parameters_))
          {
            OBJ_CALL(self->object.extractTerms(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(TermQuery), (PyObject *) self, "extractTerms", args, 2);
        }

        static PyObject *t_TermQuery_getTerm(t_TermQuery *self)
        {
          ::org::apache::lucene::index::Term result((jobject) NULL);
          OBJ_CALL(result = self->object.getTerm());
          return ::org::apache::lucene::index::t_Term::wrap_Object(result);
        }

        static PyObject *t_TermQuery_hashCode(t_TermQuery *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hashCode());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(TermQuery), (PyObject *) self, "hashCode", args, 2);
        }

        static PyObject *t_TermQuery_toString(t_TermQuery *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = self->object.toString(a0));
            return j2p(result);
          }

          return callSuper(&PY_TYPE(TermQuery), (PyObject *) self, "toString", args, 2);
        }

        static PyObject *t_TermQuery_get__term(t_TermQuery *self, void *data)
        {
          ::org::apache::lucene::index::Term value((jobject) NULL);
          OBJ_CALL(value = self->object.getTerm());
          return ::org::apache::lucene::index::t_Term::wrap_Object(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/QueryNode.h"
#include "java/lang/Class.h"
#include "java/util/Map.h"
#include "org/apache/lucene/queryparser/flexible/core/parser/EscapeQuerySyntax.h"
#include "java/lang/CloneNotSupportedException.h"
#include "java/lang/CharSequence.h"
#include "java/lang/String.h"
#include "java/util/List.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace nodes {

              ::java::lang::Class *QueryNode::class$ = NULL;
              jmethodID *QueryNode::mids$ = NULL;
              bool QueryNode::live$ = false;

              jclass QueryNode::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/core/nodes/QueryNode");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_add_cc04aeef] = env->getMethodID(cls, "add", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;)V");
                  mids$[mid_add_1fde8fc3] = env->getMethodID(cls, "add", "(Ljava/util/List;)V");
                  mids$[mid_cloneTree_b387c5e6] = env->getMethodID(cls, "cloneTree", "()Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;");
                  mids$[mid_containsTag_5fdc3f44] = env->getMethodID(cls, "containsTag", "(Ljava/lang/String;)Z");
                  mids$[mid_getChildren_87851566] = env->getMethodID(cls, "getChildren", "()Ljava/util/List;");
                  mids$[mid_getParent_b387c5e6] = env->getMethodID(cls, "getParent", "()Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;");
                  mids$[mid_getTag_2a1c4d09] = env->getMethodID(cls, "getTag", "(Ljava/lang/String;)Ljava/lang/Object;");
                  mids$[mid_getTagMap_db60befd] = env->getMethodID(cls, "getTagMap", "()Ljava/util/Map;");
                  mids$[mid_isLeaf_54c6a16a] = env->getMethodID(cls, "isLeaf", "()Z");
                  mids$[mid_removeFromParent_54c6a166] = env->getMethodID(cls, "removeFromParent", "()V");
                  mids$[mid_set_1fde8fc3] = env->getMethodID(cls, "set", "(Ljava/util/List;)V");
                  mids$[mid_setTag_2da4da24] = env->getMethodID(cls, "setTag", "(Ljava/lang/String;Ljava/lang/Object;)V");
                  mids$[mid_toQueryString_99b8dfe1] = env->getMethodID(cls, "toQueryString", "(Lorg/apache/lucene/queryparser/flexible/core/parser/EscapeQuerySyntax;)Ljava/lang/CharSequence;");
                  mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");
                  mids$[mid_unsetTag_5fdc3f48] = env->getMethodID(cls, "unsetTag", "(Ljava/lang/String;)V");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              void QueryNode::add(const QueryNode & a0) const
              {
                env->callVoidMethod(this$, mids$[mid_add_cc04aeef], a0.this$);
              }

              void QueryNode::add(const ::java::util::List & a0) const
              {
                env->callVoidMethod(this$, mids$[mid_add_1fde8fc3], a0.this$);
              }

              QueryNode QueryNode::cloneTree() const
              {
                return QueryNode(env->callObjectMethod(this$, mids$[mid_cloneTree_b387c5e6]));
              }

              jboolean QueryNode::containsTag(const ::java::lang::String & a0) const
              {
                return env->callBooleanMethod(this$, mids$[mid_containsTag_5fdc3f44], a0.this$);
              }

              ::java::util::List QueryNode::getChildren() const
              {
                return ::java::util::List(env->callObjectMethod(this$, mids$[mid_getChildren_87851566]));
              }

              QueryNode QueryNode::getParent() const
              {
                return QueryNode(env->callObjectMethod(this$, mids$[mid_getParent_b387c5e6]));
              }

              ::java::lang::Object QueryNode::getTag(const ::java::lang::String & a0) const
              {
                return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_getTag_2a1c4d09], a0.this$));
              }

              ::java::util::Map QueryNode::getTagMap() const
              {
                return ::java::util::Map(env->callObjectMethod(this$, mids$[mid_getTagMap_db60befd]));
              }

              jboolean QueryNode::isLeaf() const
              {
                return env->callBooleanMethod(this$, mids$[mid_isLeaf_54c6a16a]);
              }

              void QueryNode::removeFromParent() const
              {
                env->callVoidMethod(this$, mids$[mid_removeFromParent_54c6a166]);
              }

              void QueryNode::set(const ::java::util::List & a0) const
              {
                env->callVoidMethod(this$, mids$[mid_set_1fde8fc3], a0.this$);
              }

              void QueryNode::setTag(const ::java::lang::String & a0, const ::java::lang::Object & a1) const
              {
                env->callVoidMethod(this$, mids$[mid_setTag_2da4da24], a0.this$, a1.this$);
              }

              ::java::lang::CharSequence QueryNode::toQueryString(const ::org::apache::lucene::queryparser::flexible::core::parser::EscapeQuerySyntax & a0) const
              {
                return ::java::lang::CharSequence(env->callObjectMethod(this$, mids$[mid_toQueryString_99b8dfe1], a0.this$));
              }

              ::java::lang::String QueryNode::toString() const
              {
                return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
              }

              void QueryNode::unsetTag(const ::java::lang::String & a0) const
              {
                env->callVoidMethod(this$, mids$[mid_unsetTag_5fdc3f48], a0.this$);
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace nodes {
              static PyObject *t_QueryNode_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_QueryNode_instance_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_QueryNode_add(t_QueryNode *self, PyObject *args);
              static PyObject *t_QueryNode_cloneTree(t_QueryNode *self);
              static PyObject *t_QueryNode_containsTag(t_QueryNode *self, PyObject *arg);
              static PyObject *t_QueryNode_getChildren(t_QueryNode *self);
              static PyObject *t_QueryNode_getParent(t_QueryNode *self);
              static PyObject *t_QueryNode_getTag(t_QueryNode *self, PyObject *arg);
              static PyObject *t_QueryNode_getTagMap(t_QueryNode *self);
              static PyObject *t_QueryNode_isLeaf(t_QueryNode *self);
              static PyObject *t_QueryNode_removeFromParent(t_QueryNode *self);
              static PyObject *t_QueryNode_set(t_QueryNode *self, PyObject *arg);
              static PyObject *t_QueryNode_setTag(t_QueryNode *self, PyObject *args);
              static PyObject *t_QueryNode_toQueryString(t_QueryNode *self, PyObject *arg);
              static PyObject *t_QueryNode_toString(t_QueryNode *self, PyObject *args);
              static PyObject *t_QueryNode_unsetTag(t_QueryNode *self, PyObject *arg);
              static PyObject *t_QueryNode_get__children(t_QueryNode *self, void *data);
              static PyObject *t_QueryNode_get__leaf(t_QueryNode *self, void *data);
              static PyObject *t_QueryNode_get__parent(t_QueryNode *self, void *data);
              static PyObject *t_QueryNode_get__tagMap(t_QueryNode *self, void *data);
              static PyGetSetDef t_QueryNode__fields_[] = {
                DECLARE_GET_FIELD(t_QueryNode, children),
                DECLARE_GET_FIELD(t_QueryNode, leaf),
                DECLARE_GET_FIELD(t_QueryNode, parent),
                DECLARE_GET_FIELD(t_QueryNode, tagMap),
                { NULL, NULL, NULL, NULL, NULL }
              };

              static PyMethodDef t_QueryNode__methods_[] = {
                DECLARE_METHOD(t_QueryNode, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_QueryNode, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_QueryNode, add, METH_VARARGS),
                DECLARE_METHOD(t_QueryNode, cloneTree, METH_NOARGS),
                DECLARE_METHOD(t_QueryNode, containsTag, METH_O),
                DECLARE_METHOD(t_QueryNode, getChildren, METH_NOARGS),
                DECLARE_METHOD(t_QueryNode, getParent, METH_NOARGS),
                DECLARE_METHOD(t_QueryNode, getTag, METH_O),
                DECLARE_METHOD(t_QueryNode, getTagMap, METH_NOARGS),
                DECLARE_METHOD(t_QueryNode, isLeaf, METH_NOARGS),
                DECLARE_METHOD(t_QueryNode, removeFromParent, METH_NOARGS),
                DECLARE_METHOD(t_QueryNode, set, METH_O),
                DECLARE_METHOD(t_QueryNode, setTag, METH_VARARGS),
                DECLARE_METHOD(t_QueryNode, toQueryString, METH_O),
                DECLARE_METHOD(t_QueryNode, toString, METH_VARARGS),
                DECLARE_METHOD(t_QueryNode, unsetTag, METH_O),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(QueryNode, t_QueryNode, ::java::lang::Object, QueryNode, abstract_init, 0, 0, t_QueryNode__fields_, 0, 0);

              void t_QueryNode::install(PyObject *module)
              {
                installType(&PY_TYPE(QueryNode), module, "QueryNode", 0);
              }

              void t_QueryNode::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(QueryNode).tp_dict, "class_", make_descriptor(QueryNode::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(QueryNode).tp_dict, "wrapfn_", make_descriptor(t_QueryNode::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(QueryNode).tp_dict, "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_QueryNode_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, QueryNode::initializeClass, 1)))
                  return NULL;
                return t_QueryNode::wrap_Object(QueryNode(((t_QueryNode *) arg)->object.this$));
              }
              static PyObject *t_QueryNode_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, QueryNode::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static PyObject *t_QueryNode_add(t_QueryNode *self, PyObject *args)
              {
                switch (PyTuple_GET_SIZE(args)) {
                 case 1:
                  {
                    QueryNode a0((jobject) NULL);

                    if (!parseArgs(args, "k", QueryNode::initializeClass, &a0))
                    {
                      OBJ_CALL(self->object.add(a0));
                      Py_RETURN_NONE;
                    }
                  }
                  {
                    ::java::util::List a0((jobject) NULL);
                    PyTypeObject **p0;

                    if (!parseArgs(args, "K", ::java::util::List::initializeClass, &a0, &p0, ::java::util::t_List::parameters_))
                    {
                      OBJ_CALL(self->object.add(a0));
                      Py_RETURN_NONE;
                    }
                  }
                }

                PyErr_SetArgsError((PyObject *) self, "add", args);
                return NULL;
              }

              static PyObject *t_QueryNode_cloneTree(t_QueryNode *self)
              {
                QueryNode result((jobject) NULL);
                OBJ_CALL(result = self->object.cloneTree());
                return t_QueryNode::wrap_Object(result);
              }

              static PyObject *t_QueryNode_containsTag(t_QueryNode *self, PyObject *arg)
              {
                ::java::lang::String a0((jobject) NULL);
                jboolean result;

                if (!parseArg(arg, "s", &a0))
                {
                  OBJ_CALL(result = self->object.containsTag(a0));
                  Py_RETURN_BOOL(result);
                }

                PyErr_SetArgsError((PyObject *) self, "containsTag", arg);
                return NULL;
              }

              static PyObject *t_QueryNode_getChildren(t_QueryNode *self)
              {
                ::java::util::List result((jobject) NULL);
                OBJ_CALL(result = self->object.getChildren());
                return ::java::util::t_List::wrap_Object(result, &::org::apache::lucene::queryparser::flexible::core::nodes::PY_TYPE(QueryNode));
              }

              static PyObject *t_QueryNode_getParent(t_QueryNode *self)
              {
                QueryNode result((jobject) NULL);
                OBJ_CALL(result = self->object.getParent());
                return t_QueryNode::wrap_Object(result);
              }

              static PyObject *t_QueryNode_getTag(t_QueryNode *self, PyObject *arg)
              {
                ::java::lang::String a0((jobject) NULL);
                ::java::lang::Object result((jobject) NULL);

                if (!parseArg(arg, "s", &a0))
                {
                  OBJ_CALL(result = self->object.getTag(a0));
                  return ::java::lang::t_Object::wrap_Object(result);
                }

                PyErr_SetArgsError((PyObject *) self, "getTag", arg);
                return NULL;
              }

              static PyObject *t_QueryNode_getTagMap(t_QueryNode *self)
              {
                ::java::util::Map result((jobject) NULL);
                OBJ_CALL(result = self->object.getTagMap());
                return ::java::util::t_Map::wrap_Object(result, &::java::lang::PY_TYPE(String), &::java::lang::PY_TYPE(Object));
              }

              static PyObject *t_QueryNode_isLeaf(t_QueryNode *self)
              {
                jboolean result;
                OBJ_CALL(result = self->object.isLeaf());
                Py_RETURN_BOOL(result);
              }

              static PyObject *t_QueryNode_removeFromParent(t_QueryNode *self)
              {
                OBJ_CALL(self->object.removeFromParent());
                Py_RETURN_NONE;
              }

              static PyObject *t_QueryNode_set(t_QueryNode *self, PyObject *arg)
              {
                ::java::util::List a0((jobject) NULL);
                PyTypeObject **p0;

                if (!parseArg(arg, "K", ::java::util::List::initializeClass, &a0, &p0, ::java::util::t_List::parameters_))
                {
                  OBJ_CALL(self->object.set(a0));
                  Py_RETURN_NONE;
                }

                PyErr_SetArgsError((PyObject *) self, "set", arg);
                return NULL;
              }

              static PyObject *t_QueryNode_setTag(t_QueryNode *self, PyObject *args)
              {
                ::java::lang::String a0((jobject) NULL);
                ::java::lang::Object a1((jobject) NULL);

                if (!parseArgs(args, "so", &a0, &a1))
                {
                  OBJ_CALL(self->object.setTag(a0, a1));
                  Py_RETURN_NONE;
                }

                PyErr_SetArgsError((PyObject *) self, "setTag", args);
                return NULL;
              }

              static PyObject *t_QueryNode_toQueryString(t_QueryNode *self, PyObject *arg)
              {
                ::org::apache::lucene::queryparser::flexible::core::parser::EscapeQuerySyntax a0((jobject) NULL);
                ::java::lang::CharSequence result((jobject) NULL);

                if (!parseArg(arg, "k", ::org::apache::lucene::queryparser::flexible::core::parser::EscapeQuerySyntax::initializeClass, &a0))
                {
                  OBJ_CALL(result = self->object.toQueryString(a0));
                  return ::java::lang::t_CharSequence::wrap_Object(result);
                }

                PyErr_SetArgsError((PyObject *) self, "toQueryString", arg);
                return NULL;
              }

              static PyObject *t_QueryNode_toString(t_QueryNode *self, PyObject *args)
              {
                ::java::lang::String result((jobject) NULL);

                if (!parseArgs(args, ""))
                {
                  OBJ_CALL(result = self->object.toString());
                  return j2p(result);
                }

                return callSuper(&PY_TYPE(QueryNode), (PyObject *) self, "toString", args, 2);
              }

              static PyObject *t_QueryNode_unsetTag(t_QueryNode *self, PyObject *arg)
              {
                ::java::lang::String a0((jobject) NULL);

                if (!parseArg(arg, "s", &a0))
                {
                  OBJ_CALL(self->object.unsetTag(a0));
                  Py_RETURN_NONE;
                }

                PyErr_SetArgsError((PyObject *) self, "unsetTag", arg);
                return NULL;
              }

              static PyObject *t_QueryNode_get__children(t_QueryNode *self, void *data)
              {
                ::java::util::List value((jobject) NULL);
                OBJ_CALL(value = self->object.getChildren());
                return ::java::util::t_List::wrap_Object(value);
              }

              static PyObject *t_QueryNode_get__leaf(t_QueryNode *self, void *data)
              {
                jboolean value;
                OBJ_CALL(value = self->object.isLeaf());
                Py_RETURN_BOOL(value);
              }

              static PyObject *t_QueryNode_get__parent(t_QueryNode *self, void *data)
              {
                QueryNode value((jobject) NULL);
                OBJ_CALL(value = self->object.getParent());
                return t_QueryNode::wrap_Object(value);
              }

              static PyObject *t_QueryNode_get__tagMap(t_QueryNode *self, void *data)
              {
                ::java::util::Map value((jobject) NULL);
                OBJ_CALL(value = self->object.getTagMap());
                return ::java::util::t_Map::wrap_Object(value);
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/core/QueryParserHelper.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/queryparser/flexible/core/parser/SyntaxParser.h"
#include "org/apache/lucene/queryparser/flexible/core/builders/QueryBuilder.h"
#include "org/apache/lucene/queryparser/flexible/core/QueryNodeException.h"
#include "org/apache/lucene/queryparser/flexible/core/processors/QueryNodeProcessor.h"
#include "org/apache/lucene/queryparser/flexible/core/config/QueryConfigHandler.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {

            ::java::lang::Class *QueryParserHelper::class$ = NULL;
            jmethodID *QueryParserHelper::mids$ = NULL;
            bool QueryParserHelper::live$ = false;

            jclass QueryParserHelper::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/core/QueryParserHelper");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_552e5b8b] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/queryparser/flexible/core/config/QueryConfigHandler;Lorg/apache/lucene/queryparser/flexible/core/parser/SyntaxParser;Lorg/apache/lucene/queryparser/flexible/core/processors/QueryNodeProcessor;Lorg/apache/lucene/queryparser/flexible/core/builders/QueryBuilder;)V");
                mids$[mid_getQueryBuilder_8003a74c] = env->getMethodID(cls, "getQueryBuilder", "()Lorg/apache/lucene/queryparser/flexible/core/builders/QueryBuilder;");
                mids$[mid_getQueryConfigHandler_3636d8c3] = env->getMethodID(cls, "getQueryConfigHandler", "()Lorg/apache/lucene/queryparser/flexible/core/config/QueryConfigHandler;");
                mids$[mid_getQueryNodeProcessor_eb463160] = env->getMethodID(cls, "getQueryNodeProcessor", "()Lorg/apache/lucene/queryparser/flexible/core/processors/QueryNodeProcessor;");
                mids$[mid_getSyntaxParser_ede87db0] = env->getMethodID(cls, "getSyntaxParser", "()Lorg/apache/lucene/queryparser/flexible/core/parser/SyntaxParser;");
                mids$[mid_parse_1a6a44ef] = env->getMethodID(cls, "parse", "(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/Object;");
                mids$[mid_setQueryBuilder_f13b6d3d] = env->getMethodID(cls, "setQueryBuilder", "(Lorg/apache/lucene/queryparser/flexible/core/builders/QueryBuilder;)V");
                mids$[mid_setQueryConfigHandler_0b1f7132] = env->getMethodID(cls, "setQueryConfigHandler", "(Lorg/apache/lucene/queryparser/flexible/core/config/QueryConfigHandler;)V");
                mids$[mid_setQueryNodeProcessor_507a7d15] = env->getMethodID(cls, "setQueryNodeProcessor", "(Lorg/apache/lucene/queryparser/flexible/core/processors/QueryNodeProcessor;)V");
                mids$[mid_setSyntaxParser_af2d05c9] = env->getMethodID(cls, "setSyntaxParser", "(Lorg/apache/lucene/queryparser/flexible/core/parser/SyntaxParser;)V");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            QueryParserHelper::QueryParserHelper(const ::org::apache::lucene::queryparser::flexible::core::config::QueryConfigHandler & a0, const ::org::apache::lucene::queryparser::flexible::core::parser::SyntaxParser & a1, const ::org::apache::lucene::queryparser::flexible::core::processors::QueryNodeProcessor & a2, const ::org::apache::lucene::queryparser::flexible::core::builders::QueryBuilder & a3) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_552e5b8b, a0.this$, a1.this$, a2.this$, a3.this$)) {}

            ::org::apache::lucene::queryparser::flexible::core::builders::QueryBuilder QueryParserHelper::getQueryBuilder() const
            {
              return ::org::apache::lucene::queryparser::flexible::core::builders::QueryBuilder(env->callObjectMethod(this$, mids$[mid_getQueryBuilder_8003a74c]));
            }

            ::org::apache::lucene::queryparser::flexible::core::config::QueryConfigHandler QueryParserHelper::getQueryConfigHandler() const
            {
              return ::org::apache::lucene::queryparser::flexible::core::config::QueryConfigHandler(env->callObjectMethod(this$, mids$[mid_getQueryConfigHandler_3636d8c3]));
            }

            ::org::apache::lucene::queryparser::flexible::core::processors::QueryNodeProcessor QueryParserHelper::getQueryNodeProcessor() const
            {
              return ::org::apache::lucene::queryparser::flexible::core::processors::QueryNodeProcessor(env->callObjectMethod(this$, mids$[mid_getQueryNodeProcessor_eb463160]));
            }

            ::org::apache::lucene::queryparser::flexible::core::parser::SyntaxParser QueryParserHelper::getSyntaxParser() const
            {
              return ::org::apache::lucene::queryparser::flexible::core::parser::SyntaxParser(env->callObjectMethod(this$, mids$[mid_getSyntaxParser_ede87db0]));
            }

            ::java::lang::Object QueryParserHelper::parse(const ::java::lang::String & a0, const ::java::lang::String & a1) const
            {
              return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_parse_1a6a44ef], a0.this$, a1.this$));
            }

            void QueryParserHelper::setQueryBuilder(const ::org::apache::lucene::queryparser::flexible::core::builders::QueryBuilder & a0) const
            {
              env->callVoidMethod(this$, mids$[mid_setQueryBuilder_f13b6d3d], a0.this$);
            }

            void QueryParserHelper::setQueryConfigHandler(const ::org::apache::lucene::queryparser::flexible::core::config::QueryConfigHandler & a0) const
            {
              env->callVoidMethod(this$, mids$[mid_setQueryConfigHandler_0b1f7132], a0.this$);
            }

            void QueryParserHelper::setQueryNodeProcessor(const ::org::apache::lucene::queryparser::flexible::core::processors::QueryNodeProcessor & a0) const
            {
              env->callVoidMethod(this$, mids$[mid_setQueryNodeProcessor_507a7d15], a0.this$);
            }

            void QueryParserHelper::setSyntaxParser(const ::org::apache::lucene::queryparser::flexible::core::parser::SyntaxParser & a0) const
            {
              env->callVoidMethod(this$, mids$[mid_setSyntaxParser_af2d05c9], a0.this$);
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            static PyObject *t_QueryParserHelper_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_QueryParserHelper_instance_(PyTypeObject *type, PyObject *arg);
            static int t_QueryParserHelper_init_(t_QueryParserHelper *self, PyObject *args, PyObject *kwds);
            static PyObject *t_QueryParserHelper_getQueryBuilder(t_QueryParserHelper *self);
            static PyObject *t_QueryParserHelper_getQueryConfigHandler(t_QueryParserHelper *self);
            static PyObject *t_QueryParserHelper_getQueryNodeProcessor(t_QueryParserHelper *self);
            static PyObject *t_QueryParserHelper_getSyntaxParser(t_QueryParserHelper *self);
            static PyObject *t_QueryParserHelper_parse(t_QueryParserHelper *self, PyObject *args);
            static PyObject *t_QueryParserHelper_setQueryBuilder(t_QueryParserHelper *self, PyObject *arg);
            static PyObject *t_QueryParserHelper_setQueryConfigHandler(t_QueryParserHelper *self, PyObject *arg);
            static PyObject *t_QueryParserHelper_setQueryNodeProcessor(t_QueryParserHelper *self, PyObject *arg);
            static PyObject *t_QueryParserHelper_setSyntaxParser(t_QueryParserHelper *self, PyObject *arg);
            static PyObject *t_QueryParserHelper_get__queryBuilder(t_QueryParserHelper *self, void *data);
            static int t_QueryParserHelper_set__queryBuilder(t_QueryParserHelper *self, PyObject *arg, void *data);
            static PyObject *t_QueryParserHelper_get__queryConfigHandler(t_QueryParserHelper *self, void *data);
            static int t_QueryParserHelper_set__queryConfigHandler(t_QueryParserHelper *self, PyObject *arg, void *data);
            static PyObject *t_QueryParserHelper_get__queryNodeProcessor(t_QueryParserHelper *self, void *data);
            static int t_QueryParserHelper_set__queryNodeProcessor(t_QueryParserHelper *self, PyObject *arg, void *data);
            static PyObject *t_QueryParserHelper_get__syntaxParser(t_QueryParserHelper *self, void *data);
            static int t_QueryParserHelper_set__syntaxParser(t_QueryParserHelper *self, PyObject *arg, void *data);
            static PyGetSetDef t_QueryParserHelper__fields_[] = {
              DECLARE_GETSET_FIELD(t_QueryParserHelper, queryBuilder),
              DECLARE_GETSET_FIELD(t_QueryParserHelper, queryConfigHandler),
              DECLARE_GETSET_FIELD(t_QueryParserHelper, queryNodeProcessor),
              DECLARE_GETSET_FIELD(t_QueryParserHelper, syntaxParser),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_QueryParserHelper__methods_[] = {
              DECLARE_METHOD(t_QueryParserHelper, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_QueryParserHelper, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_QueryParserHelper, getQueryBuilder, METH_NOARGS),
              DECLARE_METHOD(t_QueryParserHelper, getQueryConfigHandler, METH_NOARGS),
              DECLARE_METHOD(t_QueryParserHelper, getQueryNodeProcessor, METH_NOARGS),
              DECLARE_METHOD(t_QueryParserHelper, getSyntaxParser, METH_NOARGS),
              DECLARE_METHOD(t_QueryParserHelper, parse, METH_VARARGS),
              DECLARE_METHOD(t_QueryParserHelper, setQueryBuilder, METH_O),
              DECLARE_METHOD(t_QueryParserHelper, setQueryConfigHandler, METH_O),
              DECLARE_METHOD(t_QueryParserHelper, setQueryNodeProcessor, METH_O),
              DECLARE_METHOD(t_QueryParserHelper, setSyntaxParser, METH_O),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(QueryParserHelper, t_QueryParserHelper, ::java::lang::Object, QueryParserHelper, t_QueryParserHelper_init_, 0, 0, t_QueryParserHelper__fields_, 0, 0);

            void t_QueryParserHelper::install(PyObject *module)
            {
              installType(&PY_TYPE(QueryParserHelper), module, "QueryParserHelper", 0);
            }

            void t_QueryParserHelper::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(QueryParserHelper).tp_dict, "class_", make_descriptor(QueryParserHelper::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(QueryParserHelper).tp_dict, "wrapfn_", make_descriptor(t_QueryParserHelper::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(QueryParserHelper).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_QueryParserHelper_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, QueryParserHelper::initializeClass, 1)))
                return NULL;
              return t_QueryParserHelper::wrap_Object(QueryParserHelper(((t_QueryParserHelper *) arg)->object.this$));
            }
            static PyObject *t_QueryParserHelper_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, QueryParserHelper::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_QueryParserHelper_init_(t_QueryParserHelper *self, PyObject *args, PyObject *kwds)
            {
              ::org::apache::lucene::queryparser::flexible::core::config::QueryConfigHandler a0((jobject) NULL);
              ::org::apache::lucene::queryparser::flexible::core::parser::SyntaxParser a1((jobject) NULL);
              ::org::apache::lucene::queryparser::flexible::core::processors::QueryNodeProcessor a2((jobject) NULL);
              ::org::apache::lucene::queryparser::flexible::core::builders::QueryBuilder a3((jobject) NULL);
              QueryParserHelper object((jobject) NULL);

              if (!parseArgs(args, "kkkk", ::org::apache::lucene::queryparser::flexible::core::config::QueryConfigHandler::initializeClass, ::org::apache::lucene::queryparser::flexible::core::parser::SyntaxParser::initializeClass, ::org::apache::lucene::queryparser::flexible::core::processors::QueryNodeProcessor::initializeClass, ::org::apache::lucene::queryparser::flexible::core::builders::QueryBuilder::initializeClass, &a0, &a1, &a2, &a3))
              {
                INT_CALL(object = QueryParserHelper(a0, a1, a2, a3));
                self->object = object;
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_QueryParserHelper_getQueryBuilder(t_QueryParserHelper *self)
            {
              ::org::apache::lucene::queryparser::flexible::core::builders::QueryBuilder result((jobject) NULL);
              OBJ_CALL(result = self->object.getQueryBuilder());
              return ::org::apache::lucene::queryparser::flexible::core::builders::t_QueryBuilder::wrap_Object(result);
            }

            static PyObject *t_QueryParserHelper_getQueryConfigHandler(t_QueryParserHelper *self)
            {
              ::org::apache::lucene::queryparser::flexible::core::config::QueryConfigHandler result((jobject) NULL);
              OBJ_CALL(result = self->object.getQueryConfigHandler());
              return ::org::apache::lucene::queryparser::flexible::core::config::t_QueryConfigHandler::wrap_Object(result);
            }

            static PyObject *t_QueryParserHelper_getQueryNodeProcessor(t_QueryParserHelper *self)
            {
              ::org::apache::lucene::queryparser::flexible::core::processors::QueryNodeProcessor result((jobject) NULL);
              OBJ_CALL(result = self->object.getQueryNodeProcessor());
              return ::org::apache::lucene::queryparser::flexible::core::processors::t_QueryNodeProcessor::wrap_Object(result);
            }

            static PyObject *t_QueryParserHelper_getSyntaxParser(t_QueryParserHelper *self)
            {
              ::org::apache::lucene::queryparser::flexible::core::parser::SyntaxParser result((jobject) NULL);
              OBJ_CALL(result = self->object.getSyntaxParser());
              return ::org::apache::lucene::queryparser::flexible::core::parser::t_SyntaxParser::wrap_Object(result);
            }

            static PyObject *t_QueryParserHelper_parse(t_QueryParserHelper *self, PyObject *args)
            {
              ::java::lang::String a0((jobject) NULL);
              ::java::lang::String a1((jobject) NULL);
              ::java::lang::Object result((jobject) NULL);

              if (!parseArgs(args, "ss", &a0, &a1))
              {
                OBJ_CALL(result = self->object.parse(a0, a1));
                return ::java::lang::t_Object::wrap_Object(result);
              }

              PyErr_SetArgsError((PyObject *) self, "parse", args);
              return NULL;
            }

            static PyObject *t_QueryParserHelper_setQueryBuilder(t_QueryParserHelper *self, PyObject *arg)
            {
              ::org::apache::lucene::queryparser::flexible::core::builders::QueryBuilder a0((jobject) NULL);

              if (!parseArg(arg, "k", ::org::apache::lucene::queryparser::flexible::core::builders::QueryBuilder::initializeClass, &a0))
              {
                OBJ_CALL(self->object.setQueryBuilder(a0));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "setQueryBuilder", arg);
              return NULL;
            }

            static PyObject *t_QueryParserHelper_setQueryConfigHandler(t_QueryParserHelper *self, PyObject *arg)
            {
              ::org::apache::lucene::queryparser::flexible::core::config::QueryConfigHandler a0((jobject) NULL);

              if (!parseArg(arg, "k", ::org::apache::lucene::queryparser::flexible::core::config::QueryConfigHandler::initializeClass, &a0))
              {
                OBJ_CALL(self->object.setQueryConfigHandler(a0));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "setQueryConfigHandler", arg);
              return NULL;
            }

            static PyObject *t_QueryParserHelper_setQueryNodeProcessor(t_QueryParserHelper *self, PyObject *arg)
            {
              ::org::apache::lucene::queryparser::flexible::core::processors::QueryNodeProcessor a0((jobject) NULL);

              if (!parseArg(arg, "k", ::org::apache::lucene::queryparser::flexible::core::processors::QueryNodeProcessor::initializeClass, &a0))
              {
                OBJ_CALL(self->object.setQueryNodeProcessor(a0));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "setQueryNodeProcessor", arg);
              return NULL;
            }

            static PyObject *t_QueryParserHelper_setSyntaxParser(t_QueryParserHelper *self, PyObject *arg)
            {
              ::org::apache::lucene::queryparser::flexible::core::parser::SyntaxParser a0((jobject) NULL);

              if (!parseArg(arg, "k", ::org::apache::lucene::queryparser::flexible::core::parser::SyntaxParser::initializeClass, &a0))
              {
                OBJ_CALL(self->object.setSyntaxParser(a0));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "setSyntaxParser", arg);
              return NULL;
            }

            static PyObject *t_QueryParserHelper_get__queryBuilder(t_QueryParserHelper *self, void *data)
            {
              ::org::apache::lucene::queryparser::flexible::core::builders::QueryBuilder value((jobject) NULL);
              OBJ_CALL(value = self->object.getQueryBuilder());
              return ::org::apache::lucene::queryparser::flexible::core::builders::t_QueryBuilder::wrap_Object(value);
            }
            static int t_QueryParserHelper_set__queryBuilder(t_QueryParserHelper *self, PyObject *arg, void *data)
            {
              {
                ::org::apache::lucene::queryparser::flexible::core::builders::QueryBuilder value((jobject) NULL);
                if (!parseArg(arg, "k", ::org::apache::lucene::queryparser::flexible::core::builders::QueryBuilder::initializeClass, &value))
                {
                  INT_CALL(self->object.setQueryBuilder(value));
                  return 0;
                }
              }
              PyErr_SetArgsError((PyObject *) self, "queryBuilder", arg);
              return -1;
            }

            static PyObject *t_QueryParserHelper_get__queryConfigHandler(t_QueryParserHelper *self, void *data)
            {
              ::org::apache::lucene::queryparser::flexible::core::config::QueryConfigHandler value((jobject) NULL);
              OBJ_CALL(value = self->object.getQueryConfigHandler());
              return ::org::apache::lucene::queryparser::flexible::core::config::t_QueryConfigHandler::wrap_Object(value);
            }
            static int t_QueryParserHelper_set__queryConfigHandler(t_QueryParserHelper *self, PyObject *arg, void *data)
            {
              {
                ::org::apache::lucene::queryparser::flexible::core::config::QueryConfigHandler value((jobject) NULL);
                if (!parseArg(arg, "k", ::org::apache::lucene::queryparser::flexible::core::config::QueryConfigHandler::initializeClass, &value))
                {
                  INT_CALL(self->object.setQueryConfigHandler(value));
                  return 0;
                }
              }
              PyErr_SetArgsError((PyObject *) self, "queryConfigHandler", arg);
              return -1;
            }

            static PyObject *t_QueryParserHelper_get__queryNodeProcessor(t_QueryParserHelper *self, void *data)
            {
              ::org::apache::lucene::queryparser::flexible::core::processors::QueryNodeProcessor value((jobject) NULL);
              OBJ_CALL(value = self->object.getQueryNodeProcessor());
              return ::org::apache::lucene::queryparser::flexible::core::processors::t_QueryNodeProcessor::wrap_Object(value);
            }
            static int t_QueryParserHelper_set__queryNodeProcessor(t_QueryParserHelper *self, PyObject *arg, void *data)
            {
              {
                ::org::apache::lucene::queryparser::flexible::core::processors::QueryNodeProcessor value((jobject) NULL);
                if (!parseArg(arg, "k", ::org::apache::lucene::queryparser::flexible::core::processors::QueryNodeProcessor::initializeClass, &value))
                {
                  INT_CALL(self->object.setQueryNodeProcessor(value));
                  return 0;
                }
              }
              PyErr_SetArgsError((PyObject *) self, "queryNodeProcessor", arg);
              return -1;
            }

            static PyObject *t_QueryParserHelper_get__syntaxParser(t_QueryParserHelper *self, void *data)
            {
              ::org::apache::lucene::queryparser::flexible::core::parser::SyntaxParser value((jobject) NULL);
              OBJ_CALL(value = self->object.getSyntaxParser());
              return ::org::apache::lucene::queryparser::flexible::core::parser::t_SyntaxParser::wrap_Object(value);
            }
            static int t_QueryParserHelper_set__syntaxParser(t_QueryParserHelper *self, PyObject *arg, void *data)
            {
              {
                ::org::apache::lucene::queryparser::flexible::core::parser::SyntaxParser value((jobject) NULL);
                if (!parseArg(arg, "k", ::org::apache::lucene::queryparser::flexible::core::parser::SyntaxParser::initializeClass, &value))
                {
                  INT_CALL(self->object.setSyntaxParser(value));
                  return 0;
                }
              }
              PyErr_SetArgsError((PyObject *) self, "syntaxParser", arg);
              return -1;
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/spans/SpanPositionCheckQuery.h"
#include "org/apache/lucene/util/Bits.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/index/TermContext.h"
#include "java/io/IOException.h"
#include "java/util/Map.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "java/lang/String.h"
#include "java/util/Set.h"
#include "org/apache/lucene/search/spans/Spans.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "org/apache/lucene/index/Term.h"
#include "org/apache/lucene/search/Query.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace spans {

          ::java::lang::Class *SpanPositionCheckQuery::class$ = NULL;
          jmethodID *SpanPositionCheckQuery::mids$ = NULL;
          bool SpanPositionCheckQuery::live$ = false;

          jclass SpanPositionCheckQuery::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/spans/SpanPositionCheckQuery");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_056c1897] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/spans/SpanQuery;)V");
              mids$[mid_extractTerms_fb4f2b26] = env->getMethodID(cls, "extractTerms", "(Ljava/util/Set;)V");
              mids$[mid_getField_14c7b5c5] = env->getMethodID(cls, "getField", "()Ljava/lang/String;");
              mids$[mid_getMatch_d3aa0332] = env->getMethodID(cls, "getMatch", "()Lorg/apache/lucene/search/spans/SpanQuery;");
              mids$[mid_getSpans_f003cb44] = env->getMethodID(cls, "getSpans", "(Lorg/apache/lucene/index/AtomicReaderContext;Lorg/apache/lucene/util/Bits;Ljava/util/Map;)Lorg/apache/lucene/search/spans/Spans;");
              mids$[mid_rewrite_7edcaa43] = env->getMethodID(cls, "rewrite", "(Lorg/apache/lucene/index/IndexReader;)Lorg/apache/lucene/search/Query;");
              mids$[mid_acceptPosition_5342f73f] = env->getMethodID(cls, "acceptPosition", "(Lorg/apache/lucene/search/spans/Spans;)Lorg/apache/lucene/search/spans/SpanPositionCheckQuery$AcceptStatus;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          SpanPositionCheckQuery::SpanPositionCheckQuery(const ::org::apache::lucene::search::spans::SpanQuery & a0) : ::org::apache::lucene::search::spans::SpanQuery(env->newObject(initializeClass, &mids$, mid_init$_056c1897, a0.this$)) {}

          void SpanPositionCheckQuery::extractTerms(const ::java::util::Set & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_extractTerms_fb4f2b26], a0.this$);
          }

          ::java::lang::String SpanPositionCheckQuery::getField() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getField_14c7b5c5]));
          }

          ::org::apache::lucene::search::spans::SpanQuery SpanPositionCheckQuery::getMatch() const
          {
            return ::org::apache::lucene::search::spans::SpanQuery(env->callObjectMethod(this$, mids$[mid_getMatch_d3aa0332]));
          }

          ::org::apache::lucene::search::spans::Spans SpanPositionCheckQuery::getSpans(const ::org::apache::lucene::index::AtomicReaderContext & a0, const ::org::apache::lucene::util::Bits & a1, const ::java::util::Map & a2) const
          {
            return ::org::apache::lucene::search::spans::Spans(env->callObjectMethod(this$, mids$[mid_getSpans_f003cb44], a0.this$, a1.this$, a2.this$));
          }

          ::org::apache::lucene::search::Query SpanPositionCheckQuery::rewrite(const ::org::apache::lucene::index::IndexReader & a0) const
          {
            return ::org::apache::lucene::search::Query(env->callObjectMethod(this$, mids$[mid_rewrite_7edcaa43], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace spans {
          static PyObject *t_SpanPositionCheckQuery_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SpanPositionCheckQuery_instance_(PyTypeObject *type, PyObject *arg);
          static int t_SpanPositionCheckQuery_init_(t_SpanPositionCheckQuery *self, PyObject *args, PyObject *kwds);
          static PyObject *t_SpanPositionCheckQuery_extractTerms(t_SpanPositionCheckQuery *self, PyObject *args);
          static PyObject *t_SpanPositionCheckQuery_getField(t_SpanPositionCheckQuery *self, PyObject *args);
          static PyObject *t_SpanPositionCheckQuery_getMatch(t_SpanPositionCheckQuery *self);
          static PyObject *t_SpanPositionCheckQuery_getSpans(t_SpanPositionCheckQuery *self, PyObject *args);
          static PyObject *t_SpanPositionCheckQuery_rewrite(t_SpanPositionCheckQuery *self, PyObject *args);
          static PyObject *t_SpanPositionCheckQuery_get__field(t_SpanPositionCheckQuery *self, void *data);
          static PyObject *t_SpanPositionCheckQuery_get__match(t_SpanPositionCheckQuery *self, void *data);
          static PyGetSetDef t_SpanPositionCheckQuery__fields_[] = {
            DECLARE_GET_FIELD(t_SpanPositionCheckQuery, field),
            DECLARE_GET_FIELD(t_SpanPositionCheckQuery, match),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_SpanPositionCheckQuery__methods_[] = {
            DECLARE_METHOD(t_SpanPositionCheckQuery, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SpanPositionCheckQuery, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SpanPositionCheckQuery, extractTerms, METH_VARARGS),
            DECLARE_METHOD(t_SpanPositionCheckQuery, getField, METH_VARARGS),
            DECLARE_METHOD(t_SpanPositionCheckQuery, getMatch, METH_NOARGS),
            DECLARE_METHOD(t_SpanPositionCheckQuery, getSpans, METH_VARARGS),
            DECLARE_METHOD(t_SpanPositionCheckQuery, rewrite, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(SpanPositionCheckQuery, t_SpanPositionCheckQuery, ::org::apache::lucene::search::spans::SpanQuery, SpanPositionCheckQuery, t_SpanPositionCheckQuery_init_, 0, 0, t_SpanPositionCheckQuery__fields_, 0, 0);

          void t_SpanPositionCheckQuery::install(PyObject *module)
          {
            installType(&PY_TYPE(SpanPositionCheckQuery), module, "SpanPositionCheckQuery", 0);
          }

          void t_SpanPositionCheckQuery::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(SpanPositionCheckQuery).tp_dict, "class_", make_descriptor(SpanPositionCheckQuery::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(SpanPositionCheckQuery).tp_dict, "wrapfn_", make_descriptor(t_SpanPositionCheckQuery::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(SpanPositionCheckQuery).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_SpanPositionCheckQuery_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, SpanPositionCheckQuery::initializeClass, 1)))
              return NULL;
            return t_SpanPositionCheckQuery::wrap_Object(SpanPositionCheckQuery(((t_SpanPositionCheckQuery *) arg)->object.this$));
          }
          static PyObject *t_SpanPositionCheckQuery_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, SpanPositionCheckQuery::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_SpanPositionCheckQuery_init_(t_SpanPositionCheckQuery *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::search::spans::SpanQuery a0((jobject) NULL);
            SpanPositionCheckQuery object((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::search::spans::SpanQuery::initializeClass, &a0))
            {
              INT_CALL(object = SpanPositionCheckQuery(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_SpanPositionCheckQuery_extractTerms(t_SpanPositionCheckQuery *self, PyObject *args)
          {
            ::java::util::Set a0((jobject) NULL);
            PyTypeObject **p0;

            if (!parseArgs(args, "K", ::java::util::Set::initializeClass, &a0, &p0, ::java::util::t_Set::parameters_))
            {
              OBJ_CALL(self->object.extractTerms(a0));
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(SpanPositionCheckQuery), (PyObject *) self, "extractTerms", args, 2);
          }

          static PyObject *t_SpanPositionCheckQuery_getField(t_SpanPositionCheckQuery *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.getField());
              return j2p(result);
            }

            return callSuper(&PY_TYPE(SpanPositionCheckQuery), (PyObject *) self, "getField", args, 2);
          }

          static PyObject *t_SpanPositionCheckQuery_getMatch(t_SpanPositionCheckQuery *self)
          {
            ::org::apache::lucene::search::spans::SpanQuery result((jobject) NULL);
            OBJ_CALL(result = self->object.getMatch());
            return ::org::apache::lucene::search::spans::t_SpanQuery::wrap_Object(result);
          }

          static PyObject *t_SpanPositionCheckQuery_getSpans(t_SpanPositionCheckQuery *self, PyObject *args)
          {
            ::org::apache::lucene::index::AtomicReaderContext a0((jobject) NULL);
            ::org::apache::lucene::util::Bits a1((jobject) NULL);
            ::java::util::Map a2((jobject) NULL);
            PyTypeObject **p2;
            ::org::apache::lucene::search::spans::Spans result((jobject) NULL);

            if (!parseArgs(args, "kkK", ::org::apache::lucene::index::AtomicReaderContext::initializeClass, ::org::apache::lucene::util::Bits::initializeClass, ::java::util::Map::initializeClass, &a0, &a1, &a2, &p2, ::java::util::t_Map::parameters_))
            {
              OBJ_CALL(result = self->object.getSpans(a0, a1, a2));
              return ::org::apache::lucene::search::spans::t_Spans::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(SpanPositionCheckQuery), (PyObject *) self, "getSpans", args, 2);
          }

          static PyObject *t_SpanPositionCheckQuery_rewrite(t_SpanPositionCheckQuery *self, PyObject *args)
          {
            ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
            ::org::apache::lucene::search::Query result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::index::IndexReader::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.rewrite(a0));
              return ::org::apache::lucene::search::t_Query::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(SpanPositionCheckQuery), (PyObject *) self, "rewrite", args, 2);
          }

          static PyObject *t_SpanPositionCheckQuery_get__field(t_SpanPositionCheckQuery *self, void *data)
          {
            ::java::lang::String value((jobject) NULL);
            OBJ_CALL(value = self->object.getField());
            return j2p(value);
          }

          static PyObject *t_SpanPositionCheckQuery_get__match(t_SpanPositionCheckQuery *self, void *data)
          {
            ::org::apache::lucene::search::spans::SpanQuery value((jobject) NULL);
            OBJ_CALL(value = self->object.getMatch());
            return ::org::apache::lucene::search::spans::t_SpanQuery::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/precedence/PrecedenceQueryParser.h"
#include "org/apache/lucene/analysis/Analyzer.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace precedence {

            ::java::lang::Class *PrecedenceQueryParser::class$ = NULL;
            jmethodID *PrecedenceQueryParser::mids$ = NULL;
            bool PrecedenceQueryParser::live$ = false;

            jclass PrecedenceQueryParser::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/precedence/PrecedenceQueryParser");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
                mids$[mid_init$_31619410] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/Analyzer;)V");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            PrecedenceQueryParser::PrecedenceQueryParser() : ::org::apache::lucene::queryparser::flexible::standard::StandardQueryParser(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

            PrecedenceQueryParser::PrecedenceQueryParser(const ::org::apache::lucene::analysis::Analyzer & a0) : ::org::apache::lucene::queryparser::flexible::standard::StandardQueryParser(env->newObject(initializeClass, &mids$, mid_init$_31619410, a0.this$)) {}
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace precedence {
            static PyObject *t_PrecedenceQueryParser_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_PrecedenceQueryParser_instance_(PyTypeObject *type, PyObject *arg);
            static int t_PrecedenceQueryParser_init_(t_PrecedenceQueryParser *self, PyObject *args, PyObject *kwds);

            static PyMethodDef t_PrecedenceQueryParser__methods_[] = {
              DECLARE_METHOD(t_PrecedenceQueryParser, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_PrecedenceQueryParser, instance_, METH_O | METH_CLASS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(PrecedenceQueryParser, t_PrecedenceQueryParser, ::org::apache::lucene::queryparser::flexible::standard::StandardQueryParser, PrecedenceQueryParser, t_PrecedenceQueryParser_init_, 0, 0, 0, 0, 0);

            void t_PrecedenceQueryParser::install(PyObject *module)
            {
              installType(&PY_TYPE(PrecedenceQueryParser), module, "PrecedenceQueryParser", 0);
            }

            void t_PrecedenceQueryParser::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(PrecedenceQueryParser).tp_dict, "class_", make_descriptor(PrecedenceQueryParser::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(PrecedenceQueryParser).tp_dict, "wrapfn_", make_descriptor(t_PrecedenceQueryParser::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(PrecedenceQueryParser).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_PrecedenceQueryParser_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, PrecedenceQueryParser::initializeClass, 1)))
                return NULL;
              return t_PrecedenceQueryParser::wrap_Object(PrecedenceQueryParser(((t_PrecedenceQueryParser *) arg)->object.this$));
            }
            static PyObject *t_PrecedenceQueryParser_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, PrecedenceQueryParser::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_PrecedenceQueryParser_init_(t_PrecedenceQueryParser *self, PyObject *args, PyObject *kwds)
            {
              switch (PyTuple_GET_SIZE(args)) {
               case 0:
                {
                  PrecedenceQueryParser object((jobject) NULL);

                  INT_CALL(object = PrecedenceQueryParser());
                  self->object = object;
                  break;
                }
                goto err;
               case 1:
                {
                  ::org::apache::lucene::analysis::Analyzer a0((jobject) NULL);
                  PrecedenceQueryParser object((jobject) NULL);

                  if (!parseArgs(args, "k", ::org::apache::lucene::analysis::Analyzer::initializeClass, &a0))
                  {
                    INT_CALL(object = PrecedenceQueryParser(a0));
                    self->object = object;
                    break;
                  }
                }
               default:
               err:
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/bg/BulgarianStemFilter.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace bg {

          ::java::lang::Class *BulgarianStemFilter::class$ = NULL;
          jmethodID *BulgarianStemFilter::mids$ = NULL;
          bool BulgarianStemFilter::live$ = false;

          jclass BulgarianStemFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/bg/BulgarianStemFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_c7c794dc] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;)V");
              mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          BulgarianStemFilter::BulgarianStemFilter(const ::org::apache::lucene::analysis::TokenStream & a0) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_c7c794dc, a0.this$)) {}

          jboolean BulgarianStemFilter::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_54c6a16a]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace bg {
          static PyObject *t_BulgarianStemFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_BulgarianStemFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_BulgarianStemFilter_init_(t_BulgarianStemFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_BulgarianStemFilter_incrementToken(t_BulgarianStemFilter *self, PyObject *args);

          static PyMethodDef t_BulgarianStemFilter__methods_[] = {
            DECLARE_METHOD(t_BulgarianStemFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_BulgarianStemFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_BulgarianStemFilter, incrementToken, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(BulgarianStemFilter, t_BulgarianStemFilter, ::org::apache::lucene::analysis::TokenFilter, BulgarianStemFilter, t_BulgarianStemFilter_init_, 0, 0, 0, 0, 0);

          void t_BulgarianStemFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(BulgarianStemFilter), module, "BulgarianStemFilter", 0);
          }

          void t_BulgarianStemFilter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(BulgarianStemFilter).tp_dict, "class_", make_descriptor(BulgarianStemFilter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(BulgarianStemFilter).tp_dict, "wrapfn_", make_descriptor(t_BulgarianStemFilter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(BulgarianStemFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_BulgarianStemFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, BulgarianStemFilter::initializeClass, 1)))
              return NULL;
            return t_BulgarianStemFilter::wrap_Object(BulgarianStemFilter(((t_BulgarianStemFilter *) arg)->object.this$));
          }
          static PyObject *t_BulgarianStemFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, BulgarianStemFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_BulgarianStemFilter_init_(t_BulgarianStemFilter *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            BulgarianStemFilter object((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              INT_CALL(object = BulgarianStemFilter(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_BulgarianStemFilter_incrementToken(t_BulgarianStemFilter *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(BulgarianStemFilter), (PyObject *) self, "incrementToken", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/FilteredQuery.h"
#include "org/apache/lucene/search/Weight.h"
#include "java/lang/Class.h"
#include "java/lang/Object.h"
#include "org/apache/lucene/search/Filter.h"
#include "java/io/IOException.h"
#include "java/util/Set.h"
#include "org/apache/lucene/search/IndexSearcher.h"
#include "java/lang/String.h"
#include "org/apache/lucene/search/FilteredQuery$FilterStrategy.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "org/apache/lucene/index/Term.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *FilteredQuery::class$ = NULL;
        jmethodID *FilteredQuery::mids$ = NULL;
        bool FilteredQuery::live$ = false;
        ::org::apache::lucene::search::FilteredQuery$FilterStrategy *FilteredQuery::LEAP_FROG_FILTER_FIRST_STRATEGY = NULL;
        ::org::apache::lucene::search::FilteredQuery$FilterStrategy *FilteredQuery::LEAP_FROG_QUERY_FIRST_STRATEGY = NULL;
        ::org::apache::lucene::search::FilteredQuery$FilterStrategy *FilteredQuery::QUERY_FIRST_FILTER_STRATEGY = NULL;
        ::org::apache::lucene::search::FilteredQuery$FilterStrategy *FilteredQuery::RANDOM_ACCESS_FILTER_STRATEGY = NULL;

        jclass FilteredQuery::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/FilteredQuery");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_96ca297d] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/Query;Lorg/apache/lucene/search/Filter;)V");
            mids$[mid_init$_61c4287b] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/Query;Lorg/apache/lucene/search/Filter;Lorg/apache/lucene/search/FilteredQuery$FilterStrategy;)V");
            mids$[mid_createWeight_367763cb] = env->getMethodID(cls, "createWeight", "(Lorg/apache/lucene/search/IndexSearcher;)Lorg/apache/lucene/search/Weight;");
            mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
            mids$[mid_extractTerms_fb4f2b26] = env->getMethodID(cls, "extractTerms", "(Ljava/util/Set;)V");
            mids$[mid_getFilter_b40f961f] = env->getMethodID(cls, "getFilter", "()Lorg/apache/lucene/search/Filter;");
            mids$[mid_getFilterStrategy_98d3690b] = env->getMethodID(cls, "getFilterStrategy", "()Lorg/apache/lucene/search/FilteredQuery$FilterStrategy;");
            mids$[mid_getQuery_97e3851a] = env->getMethodID(cls, "getQuery", "()Lorg/apache/lucene/search/Query;");
            mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
            mids$[mid_rewrite_7edcaa43] = env->getMethodID(cls, "rewrite", "(Lorg/apache/lucene/index/IndexReader;)Lorg/apache/lucene/search/Query;");
            mids$[mid_toString_97a5258f] = env->getMethodID(cls, "toString", "(Ljava/lang/String;)Ljava/lang/String;");

            class$ = (::java::lang::Class *) new JObject(cls);
            cls = (jclass) class$->this$;

            LEAP_FROG_FILTER_FIRST_STRATEGY = new ::org::apache::lucene::search::FilteredQuery$FilterStrategy(env->getStaticObjectField(cls, "LEAP_FROG_FILTER_FIRST_STRATEGY", "Lorg/apache/lucene/search/FilteredQuery$FilterStrategy;"));
            LEAP_FROG_QUERY_FIRST_STRATEGY = new ::org::apache::lucene::search::FilteredQuery$FilterStrategy(env->getStaticObjectField(cls, "LEAP_FROG_QUERY_FIRST_STRATEGY", "Lorg/apache/lucene/search/FilteredQuery$FilterStrategy;"));
            QUERY_FIRST_FILTER_STRATEGY = new ::org::apache::lucene::search::FilteredQuery$FilterStrategy(env->getStaticObjectField(cls, "QUERY_FIRST_FILTER_STRATEGY", "Lorg/apache/lucene/search/FilteredQuery$FilterStrategy;"));
            RANDOM_ACCESS_FILTER_STRATEGY = new ::org::apache::lucene::search::FilteredQuery$FilterStrategy(env->getStaticObjectField(cls, "RANDOM_ACCESS_FILTER_STRATEGY", "Lorg/apache/lucene/search/FilteredQuery$FilterStrategy;"));
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        FilteredQuery::FilteredQuery(const ::org::apache::lucene::search::Query & a0, const ::org::apache::lucene::search::Filter & a1) : ::org::apache::lucene::search::Query(env->newObject(initializeClass, &mids$, mid_init$_96ca297d, a0.this$, a1.this$)) {}

        FilteredQuery::FilteredQuery(const ::org::apache::lucene::search::Query & a0, const ::org::apache::lucene::search::Filter & a1, const ::org::apache::lucene::search::FilteredQuery$FilterStrategy & a2) : ::org::apache::lucene::search::Query(env->newObject(initializeClass, &mids$, mid_init$_61c4287b, a0.this$, a1.this$, a2.this$)) {}

        ::org::apache::lucene::search::Weight FilteredQuery::createWeight(const ::org::apache::lucene::search::IndexSearcher & a0) const
        {
          return ::org::apache::lucene::search::Weight(env->callObjectMethod(this$, mids$[mid_createWeight_367763cb], a0.this$));
        }

        jboolean FilteredQuery::equals(const ::java::lang::Object & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
        }

        void FilteredQuery::extractTerms(const ::java::util::Set & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_extractTerms_fb4f2b26], a0.this$);
        }

        ::org::apache::lucene::search::Filter FilteredQuery::getFilter() const
        {
          return ::org::apache::lucene::search::Filter(env->callObjectMethod(this$, mids$[mid_getFilter_b40f961f]));
        }

        ::org::apache::lucene::search::FilteredQuery$FilterStrategy FilteredQuery::getFilterStrategy() const
        {
          return ::org::apache::lucene::search::FilteredQuery$FilterStrategy(env->callObjectMethod(this$, mids$[mid_getFilterStrategy_98d3690b]));
        }

        ::org::apache::lucene::search::Query FilteredQuery::getQuery() const
        {
          return ::org::apache::lucene::search::Query(env->callObjectMethod(this$, mids$[mid_getQuery_97e3851a]));
        }

        jint FilteredQuery::hashCode() const
        {
          return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
        }

        ::org::apache::lucene::search::Query FilteredQuery::rewrite(const ::org::apache::lucene::index::IndexReader & a0) const
        {
          return ::org::apache::lucene::search::Query(env->callObjectMethod(this$, mids$[mid_rewrite_7edcaa43], a0.this$));
        }

        ::java::lang::String FilteredQuery::toString(const ::java::lang::String & a0) const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_97a5258f], a0.this$));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"
#include "org/apache/lucene/search/FilteredQuery$RandomAccessFilterStrategy.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_FilteredQuery_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FilteredQuery_instance_(PyTypeObject *type, PyObject *arg);
        static int t_FilteredQuery_init_(t_FilteredQuery *self, PyObject *args, PyObject *kwds);
        static PyObject *t_FilteredQuery_createWeight(t_FilteredQuery *self, PyObject *args);
        static PyObject *t_FilteredQuery_equals(t_FilteredQuery *self, PyObject *args);
        static PyObject *t_FilteredQuery_extractTerms(t_FilteredQuery *self, PyObject *args);
        static PyObject *t_FilteredQuery_getFilter(t_FilteredQuery *self);
        static PyObject *t_FilteredQuery_getFilterStrategy(t_FilteredQuery *self);
        static PyObject *t_FilteredQuery_getQuery(t_FilteredQuery *self);
        static PyObject *t_FilteredQuery_hashCode(t_FilteredQuery *self, PyObject *args);
        static PyObject *t_FilteredQuery_rewrite(t_FilteredQuery *self, PyObject *args);
        static PyObject *t_FilteredQuery_toString(t_FilteredQuery *self, PyObject *args);
        static PyObject *t_FilteredQuery_get__filter(t_FilteredQuery *self, void *data);
        static PyObject *t_FilteredQuery_get__filterStrategy(t_FilteredQuery *self, void *data);
        static PyObject *t_FilteredQuery_get__query(t_FilteredQuery *self, void *data);
        static PyGetSetDef t_FilteredQuery__fields_[] = {
          DECLARE_GET_FIELD(t_FilteredQuery, filter),
          DECLARE_GET_FIELD(t_FilteredQuery, filterStrategy),
          DECLARE_GET_FIELD(t_FilteredQuery, query),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_FilteredQuery__methods_[] = {
          DECLARE_METHOD(t_FilteredQuery, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FilteredQuery, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FilteredQuery, createWeight, METH_VARARGS),
          DECLARE_METHOD(t_FilteredQuery, equals, METH_VARARGS),
          DECLARE_METHOD(t_FilteredQuery, extractTerms, METH_VARARGS),
          DECLARE_METHOD(t_FilteredQuery, getFilter, METH_NOARGS),
          DECLARE_METHOD(t_FilteredQuery, getFilterStrategy, METH_NOARGS),
          DECLARE_METHOD(t_FilteredQuery, getQuery, METH_NOARGS),
          DECLARE_METHOD(t_FilteredQuery, hashCode, METH_VARARGS),
          DECLARE_METHOD(t_FilteredQuery, rewrite, METH_VARARGS),
          DECLARE_METHOD(t_FilteredQuery, toString, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(FilteredQuery, t_FilteredQuery, ::org::apache::lucene::search::Query, FilteredQuery, t_FilteredQuery_init_, 0, 0, t_FilteredQuery__fields_, 0, 0);

        void t_FilteredQuery::install(PyObject *module)
        {
          installType(&PY_TYPE(FilteredQuery), module, "FilteredQuery", 0);
          PyDict_SetItemString(PY_TYPE(FilteredQuery).tp_dict, "RandomAccessFilterStrategy", make_descriptor(&PY_TYPE(FilteredQuery$RandomAccessFilterStrategy)));
          PyDict_SetItemString(PY_TYPE(FilteredQuery).tp_dict, "FilterStrategy", make_descriptor(&PY_TYPE(FilteredQuery$FilterStrategy)));
        }

        void t_FilteredQuery::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(FilteredQuery).tp_dict, "class_", make_descriptor(FilteredQuery::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(FilteredQuery).tp_dict, "wrapfn_", make_descriptor(t_FilteredQuery::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(FilteredQuery).tp_dict, "boxfn_", make_descriptor(boxObject));
          env->getClass(FilteredQuery::initializeClass);
          PyDict_SetItemString(PY_TYPE(FilteredQuery).tp_dict, "LEAP_FROG_FILTER_FIRST_STRATEGY", make_descriptor(::org::apache::lucene::search::t_FilteredQuery$FilterStrategy::wrap_Object(*FilteredQuery::LEAP_FROG_FILTER_FIRST_STRATEGY)));
          PyDict_SetItemString(PY_TYPE(FilteredQuery).tp_dict, "LEAP_FROG_QUERY_FIRST_STRATEGY", make_descriptor(::org::apache::lucene::search::t_FilteredQuery$FilterStrategy::wrap_Object(*FilteredQuery::LEAP_FROG_QUERY_FIRST_STRATEGY)));
          PyDict_SetItemString(PY_TYPE(FilteredQuery).tp_dict, "QUERY_FIRST_FILTER_STRATEGY", make_descriptor(::org::apache::lucene::search::t_FilteredQuery$FilterStrategy::wrap_Object(*FilteredQuery::QUERY_FIRST_FILTER_STRATEGY)));
          PyDict_SetItemString(PY_TYPE(FilteredQuery).tp_dict, "RANDOM_ACCESS_FILTER_STRATEGY", make_descriptor(::org::apache::lucene::search::t_FilteredQuery$FilterStrategy::wrap_Object(*FilteredQuery::RANDOM_ACCESS_FILTER_STRATEGY)));
        }

        static PyObject *t_FilteredQuery_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, FilteredQuery::initializeClass, 1)))
            return NULL;
          return t_FilteredQuery::wrap_Object(FilteredQuery(((t_FilteredQuery *) arg)->object.this$));
        }
        static PyObject *t_FilteredQuery_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, FilteredQuery::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_FilteredQuery_init_(t_FilteredQuery *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 2:
            {
              ::org::apache::lucene::search::Query a0((jobject) NULL);
              ::org::apache::lucene::search::Filter a1((jobject) NULL);
              FilteredQuery object((jobject) NULL);

              if (!parseArgs(args, "kk", ::org::apache::lucene::search::Query::initializeClass, ::org::apache::lucene::search::Filter::initializeClass, &a0, &a1))
              {
                INT_CALL(object = FilteredQuery(a0, a1));
                self->object = object;
                break;
              }
            }
            goto err;
           case 3:
            {
              ::org::apache::lucene::search::Query a0((jobject) NULL);
              ::org::apache::lucene::search::Filter a1((jobject) NULL);
              ::org::apache::lucene::search::FilteredQuery$FilterStrategy a2((jobject) NULL);
              FilteredQuery object((jobject) NULL);

              if (!parseArgs(args, "kkk", ::org::apache::lucene::search::Query::initializeClass, ::org::apache::lucene::search::Filter::initializeClass, ::org::apache::lucene::search::FilteredQuery$FilterStrategy::initializeClass, &a0, &a1, &a2))
              {
                INT_CALL(object = FilteredQuery(a0, a1, a2));
                self->object = object;
                break;
              }
            }
           default:
           err:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_FilteredQuery_createWeight(t_FilteredQuery *self, PyObject *args)
        {
          ::org::apache::lucene::search::IndexSearcher a0((jobject) NULL);
          ::org::apache::lucene::search::Weight result((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::search::IndexSearcher::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.createWeight(a0));
            return ::org::apache::lucene::search::t_Weight::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(FilteredQuery), (PyObject *) self, "createWeight", args, 2);
        }

        static PyObject *t_FilteredQuery_equals(t_FilteredQuery *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.equals(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(FilteredQuery), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_FilteredQuery_extractTerms(t_FilteredQuery *self, PyObject *args)
        {
          ::java::util::Set a0((jobject) NULL);
          PyTypeObject **p0;

          if (!parseArgs(args, "K", ::java::util::Set::initializeClass, &a0, &p0, ::java::util::t_Set::parameters_))
          {
            OBJ_CALL(self->object.extractTerms(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(FilteredQuery), (PyObject *) self, "extractTerms", args, 2);
        }

        static PyObject *t_FilteredQuery_getFilter(t_FilteredQuery *self)
        {
          ::org::apache::lucene::search::Filter result((jobject) NULL);
          OBJ_CALL(result = self->object.getFilter());
          return ::org::apache::lucene::search::t_Filter::wrap_Object(result);
        }

        static PyObject *t_FilteredQuery_getFilterStrategy(t_FilteredQuery *self)
        {
          ::org::apache::lucene::search::FilteredQuery$FilterStrategy result((jobject) NULL);
          OBJ_CALL(result = self->object.getFilterStrategy());
          return ::org::apache::lucene::search::t_FilteredQuery$FilterStrategy::wrap_Object(result);
        }

        static PyObject *t_FilteredQuery_getQuery(t_FilteredQuery *self)
        {
          ::org::apache::lucene::search::Query result((jobject) NULL);
          OBJ_CALL(result = self->object.getQuery());
          return ::org::apache::lucene::search::t_Query::wrap_Object(result);
        }

        static PyObject *t_FilteredQuery_hashCode(t_FilteredQuery *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hashCode());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(FilteredQuery), (PyObject *) self, "hashCode", args, 2);
        }

        static PyObject *t_FilteredQuery_rewrite(t_FilteredQuery *self, PyObject *args)
        {
          ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
          ::org::apache::lucene::search::Query result((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::index::IndexReader::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.rewrite(a0));
            return ::org::apache::lucene::search::t_Query::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(FilteredQuery), (PyObject *) self, "rewrite", args, 2);
        }

        static PyObject *t_FilteredQuery_toString(t_FilteredQuery *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = self->object.toString(a0));
            return j2p(result);
          }

          return callSuper(&PY_TYPE(FilteredQuery), (PyObject *) self, "toString", args, 2);
        }

        static PyObject *t_FilteredQuery_get__filter(t_FilteredQuery *self, void *data)
        {
          ::org::apache::lucene::search::Filter value((jobject) NULL);
          OBJ_CALL(value = self->object.getFilter());
          return ::org::apache::lucene::search::t_Filter::wrap_Object(value);
        }

        static PyObject *t_FilteredQuery_get__filterStrategy(t_FilteredQuery *self, void *data)
        {
          ::org::apache::lucene::search::FilteredQuery$FilterStrategy value((jobject) NULL);
          OBJ_CALL(value = self->object.getFilterStrategy());
          return ::org::apache::lucene::search::t_FilteredQuery$FilterStrategy::wrap_Object(value);
        }

        static PyObject *t_FilteredQuery_get__query(t_FilteredQuery *self, void *data)
        {
          ::org::apache::lucene::search::Query value((jobject) NULL);
          OBJ_CALL(value = self->object.getQuery());
          return ::org::apache::lucene::search::t_Query::wrap_Object(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/core/config/FieldConfigListener.h"
#include "org/apache/lucene/queryparser/flexible/core/config/FieldConfig.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace config {

              ::java::lang::Class *FieldConfigListener::class$ = NULL;
              jmethodID *FieldConfigListener::mids$ = NULL;
              bool FieldConfigListener::live$ = false;

              jclass FieldConfigListener::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/core/config/FieldConfigListener");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_buildFieldConfig_aaab7c6b] = env->getMethodID(cls, "buildFieldConfig", "(Lorg/apache/lucene/queryparser/flexible/core/config/FieldConfig;)V");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              void FieldConfigListener::buildFieldConfig(const ::org::apache::lucene::queryparser::flexible::core::config::FieldConfig & a0) const
              {
                env->callVoidMethod(this$, mids$[mid_buildFieldConfig_aaab7c6b], a0.this$);
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace config {
              static PyObject *t_FieldConfigListener_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_FieldConfigListener_instance_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_FieldConfigListener_buildFieldConfig(t_FieldConfigListener *self, PyObject *arg);

              static PyMethodDef t_FieldConfigListener__methods_[] = {
                DECLARE_METHOD(t_FieldConfigListener, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_FieldConfigListener, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_FieldConfigListener, buildFieldConfig, METH_O),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(FieldConfigListener, t_FieldConfigListener, ::java::lang::Object, FieldConfigListener, abstract_init, 0, 0, 0, 0, 0);

              void t_FieldConfigListener::install(PyObject *module)
              {
                installType(&PY_TYPE(FieldConfigListener), module, "FieldConfigListener", 0);
              }

              void t_FieldConfigListener::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(FieldConfigListener).tp_dict, "class_", make_descriptor(FieldConfigListener::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(FieldConfigListener).tp_dict, "wrapfn_", make_descriptor(t_FieldConfigListener::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(FieldConfigListener).tp_dict, "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_FieldConfigListener_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, FieldConfigListener::initializeClass, 1)))
                  return NULL;
                return t_FieldConfigListener::wrap_Object(FieldConfigListener(((t_FieldConfigListener *) arg)->object.this$));
              }
              static PyObject *t_FieldConfigListener_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, FieldConfigListener::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static PyObject *t_FieldConfigListener_buildFieldConfig(t_FieldConfigListener *self, PyObject *arg)
              {
                ::org::apache::lucene::queryparser::flexible::core::config::FieldConfig a0((jobject) NULL);

                if (!parseArg(arg, "k", ::org::apache::lucene::queryparser::flexible::core::config::FieldConfig::initializeClass, &a0))
                {
                  OBJ_CALL(self->object.buildFieldConfig(a0));
                  Py_RETURN_NONE;
                }

                PyErr_SetArgsError((PyObject *) self, "buildFieldConfig", arg);
                return NULL;
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/xml/FilterBuilder.h"
#include "org/apache/lucene/search/Filter.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace xml {

          ::java::lang::Class *FilterBuilder::class$ = NULL;
          jmethodID *FilterBuilder::mids$ = NULL;
          bool FilterBuilder::live$ = false;

          jclass FilterBuilder::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/xml/FilterBuilder");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace xml {
          static PyObject *t_FilterBuilder_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_FilterBuilder_instance_(PyTypeObject *type, PyObject *arg);

          static PyMethodDef t_FilterBuilder__methods_[] = {
            DECLARE_METHOD(t_FilterBuilder, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FilterBuilder, instance_, METH_O | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(FilterBuilder, t_FilterBuilder, ::java::lang::Object, FilterBuilder, abstract_init, 0, 0, 0, 0, 0);

          void t_FilterBuilder::install(PyObject *module)
          {
            installType(&PY_TYPE(FilterBuilder), module, "FilterBuilder", 0);
          }

          void t_FilterBuilder::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(FilterBuilder).tp_dict, "class_", make_descriptor(FilterBuilder::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(FilterBuilder).tp_dict, "wrapfn_", make_descriptor(t_FilterBuilder::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(FilterBuilder).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_FilterBuilder_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, FilterBuilder::initializeClass, 1)))
              return NULL;
            return t_FilterBuilder::wrap_Object(FilterBuilder(((t_FilterBuilder *) arg)->object.this$));
          }
          static PyObject *t_FilterBuilder_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, FilterBuilder::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/postingshighlight/DefaultPassageFormatter.h"
#include "org/apache/lucene/search/postingshighlight/Passage.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace postingshighlight {

          ::java::lang::Class *DefaultPassageFormatter::class$ = NULL;
          jmethodID *DefaultPassageFormatter::mids$ = NULL;
          bool DefaultPassageFormatter::live$ = false;

          jclass DefaultPassageFormatter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/postingshighlight/DefaultPassageFormatter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_init$_7f8a9869] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Z)V");
              mids$[mid_format_4b42952e] = env->getMethodID(cls, "format", "([Lorg/apache/lucene/search/postingshighlight/Passage;Ljava/lang/String;)Ljava/lang/String;");
              mids$[mid_append_5cdac082] = env->getMethodID(cls, "append", "(Ljava/lang/StringBuilder;Ljava/lang/String;II)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          DefaultPassageFormatter::DefaultPassageFormatter() : ::org::apache::lucene::search::postingshighlight::PassageFormatter(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          DefaultPassageFormatter::DefaultPassageFormatter(const ::java::lang::String & a0, const ::java::lang::String & a1, const ::java::lang::String & a2, jboolean a3) : ::org::apache::lucene::search::postingshighlight::PassageFormatter(env->newObject(initializeClass, &mids$, mid_init$_7f8a9869, a0.this$, a1.this$, a2.this$, a3)) {}

          ::java::lang::String DefaultPassageFormatter::format(const JArray< ::org::apache::lucene::search::postingshighlight::Passage > & a0, const ::java::lang::String & a1) const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_format_4b42952e], a0.this$, a1.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace postingshighlight {
          static PyObject *t_DefaultPassageFormatter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_DefaultPassageFormatter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_DefaultPassageFormatter_init_(t_DefaultPassageFormatter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_DefaultPassageFormatter_format(t_DefaultPassageFormatter *self, PyObject *args);

          static PyMethodDef t_DefaultPassageFormatter__methods_[] = {
            DECLARE_METHOD(t_DefaultPassageFormatter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_DefaultPassageFormatter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_DefaultPassageFormatter, format, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(DefaultPassageFormatter, t_DefaultPassageFormatter, ::org::apache::lucene::search::postingshighlight::PassageFormatter, DefaultPassageFormatter, t_DefaultPassageFormatter_init_, 0, 0, 0, 0, 0);

          void t_DefaultPassageFormatter::install(PyObject *module)
          {
            installType(&PY_TYPE(DefaultPassageFormatter), module, "DefaultPassageFormatter", 0);
          }

          void t_DefaultPassageFormatter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(DefaultPassageFormatter).tp_dict, "class_", make_descriptor(DefaultPassageFormatter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(DefaultPassageFormatter).tp_dict, "wrapfn_", make_descriptor(t_DefaultPassageFormatter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(DefaultPassageFormatter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_DefaultPassageFormatter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, DefaultPassageFormatter::initializeClass, 1)))
              return NULL;
            return t_DefaultPassageFormatter::wrap_Object(DefaultPassageFormatter(((t_DefaultPassageFormatter *) arg)->object.this$));
          }
          static PyObject *t_DefaultPassageFormatter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, DefaultPassageFormatter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_DefaultPassageFormatter_init_(t_DefaultPassageFormatter *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 0:
              {
                DefaultPassageFormatter object((jobject) NULL);

                INT_CALL(object = DefaultPassageFormatter());
                self->object = object;
                break;
              }
              goto err;
             case 4:
              {
                ::java::lang::String a0((jobject) NULL);
                ::java::lang::String a1((jobject) NULL);
                ::java::lang::String a2((jobject) NULL);
                jboolean a3;
                DefaultPassageFormatter object((jobject) NULL);

                if (!parseArgs(args, "sssZ", &a0, &a1, &a2, &a3))
                {
                  INT_CALL(object = DefaultPassageFormatter(a0, a1, a2, a3));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_DefaultPassageFormatter_format(t_DefaultPassageFormatter *self, PyObject *args)
          {
            JArray< ::org::apache::lucene::search::postingshighlight::Passage > a0((jobject) NULL);
            ::java::lang::String a1((jobject) NULL);
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, "[ks", ::org::apache::lucene::search::postingshighlight::Passage::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.format(a0, a1));
              return j2p(result);
            }

            return callSuper(&PY_TYPE(DefaultPassageFormatter), (PyObject *) self, "format", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/core/WhitespaceTokenizer.h"
#include "org/apache/lucene/util/Version.h"
#include "org/apache/lucene/util/AttributeFactory.h"
#include "java/io/Reader.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace core {

          ::java::lang::Class *WhitespaceTokenizer::class$ = NULL;
          jmethodID *WhitespaceTokenizer::mids$ = NULL;
          bool WhitespaceTokenizer::live$ = false;

          jclass WhitespaceTokenizer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/core/WhitespaceTokenizer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_7997a391] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Ljava/io/Reader;)V");
              mids$[mid_init$_be7a3ecf] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/util/AttributeFactory;Ljava/io/Reader;)V");
              mids$[mid_isTokenChar_39c7bd30] = env->getMethodID(cls, "isTokenChar", "(I)Z");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          WhitespaceTokenizer::WhitespaceTokenizer(const ::org::apache::lucene::util::Version & a0, const ::java::io::Reader & a1) : ::org::apache::lucene::analysis::util::CharTokenizer(env->newObject(initializeClass, &mids$, mid_init$_7997a391, a0.this$, a1.this$)) {}

          WhitespaceTokenizer::WhitespaceTokenizer(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::util::AttributeFactory & a1, const ::java::io::Reader & a2) : ::org::apache::lucene::analysis::util::CharTokenizer(env->newObject(initializeClass, &mids$, mid_init$_be7a3ecf, a0.this$, a1.this$, a2.this$)) {}
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace core {
          static PyObject *t_WhitespaceTokenizer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_WhitespaceTokenizer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_WhitespaceTokenizer_init_(t_WhitespaceTokenizer *self, PyObject *args, PyObject *kwds);

          static PyMethodDef t_WhitespaceTokenizer__methods_[] = {
            DECLARE_METHOD(t_WhitespaceTokenizer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_WhitespaceTokenizer, instance_, METH_O | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(WhitespaceTokenizer, t_WhitespaceTokenizer, ::org::apache::lucene::analysis::util::CharTokenizer, WhitespaceTokenizer, t_WhitespaceTokenizer_init_, 0, 0, 0, 0, 0);

          void t_WhitespaceTokenizer::install(PyObject *module)
          {
            installType(&PY_TYPE(WhitespaceTokenizer), module, "WhitespaceTokenizer", 0);
          }

          void t_WhitespaceTokenizer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(WhitespaceTokenizer).tp_dict, "class_", make_descriptor(WhitespaceTokenizer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(WhitespaceTokenizer).tp_dict, "wrapfn_", make_descriptor(t_WhitespaceTokenizer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(WhitespaceTokenizer).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_WhitespaceTokenizer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, WhitespaceTokenizer::initializeClass, 1)))
              return NULL;
            return t_WhitespaceTokenizer::wrap_Object(WhitespaceTokenizer(((t_WhitespaceTokenizer *) arg)->object.this$));
          }
          static PyObject *t_WhitespaceTokenizer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, WhitespaceTokenizer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_WhitespaceTokenizer_init_(t_WhitespaceTokenizer *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 2:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                ::java::io::Reader a1((jobject) NULL);
                WhitespaceTokenizer object((jobject) NULL);

                if (!parseArgs(args, "Kk", ::org::apache::lucene::util::Version::initializeClass, ::java::io::Reader::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1))
                {
                  INT_CALL(object = WhitespaceTokenizer(a0, a1));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 3:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                ::org::apache::lucene::util::AttributeFactory a1((jobject) NULL);
                ::java::io::Reader a2((jobject) NULL);
                WhitespaceTokenizer object((jobject) NULL);

                if (!parseArgs(args, "Kkk", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::util::AttributeFactory::initializeClass, ::java::io::Reader::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1, &a2))
                {
                  INT_CALL(object = WhitespaceTokenizer(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/spell/WordBreakSpellChecker$BreakSuggestionSortMethod.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace spell {

          ::java::lang::Class *WordBreakSpellChecker$BreakSuggestionSortMethod::class$ = NULL;
          jmethodID *WordBreakSpellChecker$BreakSuggestionSortMethod::mids$ = NULL;
          bool WordBreakSpellChecker$BreakSuggestionSortMethod::live$ = false;
          WordBreakSpellChecker$BreakSuggestionSortMethod *WordBreakSpellChecker$BreakSuggestionSortMethod::NUM_CHANGES_THEN_MAX_FREQUENCY = NULL;
          WordBreakSpellChecker$BreakSuggestionSortMethod *WordBreakSpellChecker$BreakSuggestionSortMethod::NUM_CHANGES_THEN_SUMMED_FREQUENCY = NULL;

          jclass WordBreakSpellChecker$BreakSuggestionSortMethod::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/spell/WordBreakSpellChecker$BreakSuggestionSortMethod");

              mids$ = new jmethodID[max_mid];
              mids$[mid_valueOf_771dff8d] = env->getStaticMethodID(cls, "valueOf", "(Ljava/lang/String;)Lorg/apache/lucene/search/spell/WordBreakSpellChecker$BreakSuggestionSortMethod;");
              mids$[mid_values_39c0a317] = env->getStaticMethodID(cls, "values", "()[Lorg/apache/lucene/search/spell/WordBreakSpellChecker$BreakSuggestionSortMethod;");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              NUM_CHANGES_THEN_MAX_FREQUENCY = new WordBreakSpellChecker$BreakSuggestionSortMethod(env->getStaticObjectField(cls, "NUM_CHANGES_THEN_MAX_FREQUENCY", "Lorg/apache/lucene/search/spell/WordBreakSpellChecker$BreakSuggestionSortMethod;"));
              NUM_CHANGES_THEN_SUMMED_FREQUENCY = new WordBreakSpellChecker$BreakSuggestionSortMethod(env->getStaticObjectField(cls, "NUM_CHANGES_THEN_SUMMED_FREQUENCY", "Lorg/apache/lucene/search/spell/WordBreakSpellChecker$BreakSuggestionSortMethod;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          WordBreakSpellChecker$BreakSuggestionSortMethod WordBreakSpellChecker$BreakSuggestionSortMethod::valueOf(const ::java::lang::String & a0)
          {
            jclass cls = env->getClass(initializeClass);
            return WordBreakSpellChecker$BreakSuggestionSortMethod(env->callStaticObjectMethod(cls, mids$[mid_valueOf_771dff8d], a0.this$));
          }

          JArray< WordBreakSpellChecker$BreakSuggestionSortMethod > WordBreakSpellChecker$BreakSuggestionSortMethod::values()
          {
            jclass cls = env->getClass(initializeClass);
            return JArray< WordBreakSpellChecker$BreakSuggestionSortMethod >(env->callStaticObjectMethod(cls, mids$[mid_values_39c0a317]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace spell {
          static PyObject *t_WordBreakSpellChecker$BreakSuggestionSortMethod_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_WordBreakSpellChecker$BreakSuggestionSortMethod_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_WordBreakSpellChecker$BreakSuggestionSortMethod_of_(t_WordBreakSpellChecker$BreakSuggestionSortMethod *self, PyObject *args);
          static PyObject *t_WordBreakSpellChecker$BreakSuggestionSortMethod_valueOf(PyTypeObject *type, PyObject *args);
          static PyObject *t_WordBreakSpellChecker$BreakSuggestionSortMethod_values(PyTypeObject *type);
          static PyObject *t_WordBreakSpellChecker$BreakSuggestionSortMethod_get__parameters_(t_WordBreakSpellChecker$BreakSuggestionSortMethod *self, void *data);
          static PyGetSetDef t_WordBreakSpellChecker$BreakSuggestionSortMethod__fields_[] = {
            DECLARE_GET_FIELD(t_WordBreakSpellChecker$BreakSuggestionSortMethod, parameters_),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_WordBreakSpellChecker$BreakSuggestionSortMethod__methods_[] = {
            DECLARE_METHOD(t_WordBreakSpellChecker$BreakSuggestionSortMethod, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_WordBreakSpellChecker$BreakSuggestionSortMethod, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_WordBreakSpellChecker$BreakSuggestionSortMethod, of_, METH_VARARGS),
            DECLARE_METHOD(t_WordBreakSpellChecker$BreakSuggestionSortMethod, valueOf, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_WordBreakSpellChecker$BreakSuggestionSortMethod, values, METH_NOARGS | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(WordBreakSpellChecker$BreakSuggestionSortMethod, t_WordBreakSpellChecker$BreakSuggestionSortMethod, ::java::lang::Enum, WordBreakSpellChecker$BreakSuggestionSortMethod, abstract_init, 0, 0, t_WordBreakSpellChecker$BreakSuggestionSortMethod__fields_, 0, 0);
          PyObject *t_WordBreakSpellChecker$BreakSuggestionSortMethod::wrap_Object(const WordBreakSpellChecker$BreakSuggestionSortMethod& object, PyTypeObject *p0)
          {
            PyObject *obj = t_WordBreakSpellChecker$BreakSuggestionSortMethod::wrap_Object(object);
            if (obj != NULL && obj != Py_None)
            {
              t_WordBreakSpellChecker$BreakSuggestionSortMethod *self = (t_WordBreakSpellChecker$BreakSuggestionSortMethod *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          PyObject *t_WordBreakSpellChecker$BreakSuggestionSortMethod::wrap_jobject(const jobject& object, PyTypeObject *p0)
          {
            PyObject *obj = t_WordBreakSpellChecker$BreakSuggestionSortMethod::wrap_jobject(object);
            if (obj != NULL && obj != Py_None)
            {
              t_WordBreakSpellChecker$BreakSuggestionSortMethod *self = (t_WordBreakSpellChecker$BreakSuggestionSortMethod *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          void t_WordBreakSpellChecker$BreakSuggestionSortMethod::install(PyObject *module)
          {
            installType(&PY_TYPE(WordBreakSpellChecker$BreakSuggestionSortMethod), module, "WordBreakSpellChecker$BreakSuggestionSortMethod", 0);
          }

          void t_WordBreakSpellChecker$BreakSuggestionSortMethod::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(WordBreakSpellChecker$BreakSuggestionSortMethod).tp_dict, "class_", make_descriptor(WordBreakSpellChecker$BreakSuggestionSortMethod::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(WordBreakSpellChecker$BreakSuggestionSortMethod).tp_dict, "wrapfn_", make_descriptor(t_WordBreakSpellChecker$BreakSuggestionSortMethod::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(WordBreakSpellChecker$BreakSuggestionSortMethod).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(WordBreakSpellChecker$BreakSuggestionSortMethod::initializeClass);
            PyDict_SetItemString(PY_TYPE(WordBreakSpellChecker$BreakSuggestionSortMethod).tp_dict, "NUM_CHANGES_THEN_MAX_FREQUENCY", make_descriptor(t_WordBreakSpellChecker$BreakSuggestionSortMethod::wrap_Object(*WordBreakSpellChecker$BreakSuggestionSortMethod::NUM_CHANGES_THEN_MAX_FREQUENCY)));
            PyDict_SetItemString(PY_TYPE(WordBreakSpellChecker$BreakSuggestionSortMethod).tp_dict, "NUM_CHANGES_THEN_SUMMED_FREQUENCY", make_descriptor(t_WordBreakSpellChecker$BreakSuggestionSortMethod::wrap_Object(*WordBreakSpellChecker$BreakSuggestionSortMethod::NUM_CHANGES_THEN_SUMMED_FREQUENCY)));
          }

          static PyObject *t_WordBreakSpellChecker$BreakSuggestionSortMethod_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, WordBreakSpellChecker$BreakSuggestionSortMethod::initializeClass, 1)))
              return NULL;
            return t_WordBreakSpellChecker$BreakSuggestionSortMethod::wrap_Object(WordBreakSpellChecker$BreakSuggestionSortMethod(((t_WordBreakSpellChecker$BreakSuggestionSortMethod *) arg)->object.this$));
          }
          static PyObject *t_WordBreakSpellChecker$BreakSuggestionSortMethod_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, WordBreakSpellChecker$BreakSuggestionSortMethod::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_WordBreakSpellChecker$BreakSuggestionSortMethod_of_(t_WordBreakSpellChecker$BreakSuggestionSortMethod *self, PyObject *args)
          {
            if (!parseArg(args, "T", 1, &(self->parameters)))
              Py_RETURN_SELF;
            return PyErr_SetArgsError((PyObject *) self, "of_", args);
          }

          static PyObject *t_WordBreakSpellChecker$BreakSuggestionSortMethod_valueOf(PyTypeObject *type, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            WordBreakSpellChecker$BreakSuggestionSortMethod result((jobject) NULL);

            if (!parseArgs(args, "s", &a0))
            {
              OBJ_CALL(result = ::org::apache::lucene::search::spell::WordBreakSpellChecker$BreakSuggestionSortMethod::valueOf(a0));
              return t_WordBreakSpellChecker$BreakSuggestionSortMethod::wrap_Object(result);
            }

            return callSuper(type, "valueOf", args, 2);
          }

          static PyObject *t_WordBreakSpellChecker$BreakSuggestionSortMethod_values(PyTypeObject *type)
          {
            JArray< WordBreakSpellChecker$BreakSuggestionSortMethod > result((jobject) NULL);
            OBJ_CALL(result = ::org::apache::lucene::search::spell::WordBreakSpellChecker$BreakSuggestionSortMethod::values());
            return JArray<jobject>(result.this$).wrap(t_WordBreakSpellChecker$BreakSuggestionSortMethod::wrap_jobject);
          }
          static PyObject *t_WordBreakSpellChecker$BreakSuggestionSortMethod_get__parameters_(t_WordBreakSpellChecker$BreakSuggestionSortMethod *self, void *data)
          {
            return typeParameters(self->parameters, sizeof(self->parameters));
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/collation/CollationKeyFilter.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/text/Collator.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace collation {

        ::java::lang::Class *CollationKeyFilter::class$ = NULL;
        jmethodID *CollationKeyFilter::mids$ = NULL;
        bool CollationKeyFilter::live$ = false;

        jclass CollationKeyFilter::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/collation/CollationKeyFilter");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_9b6c8506] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;Ljava/text/Collator;)V");
            mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        CollationKeyFilter::CollationKeyFilter(const ::org::apache::lucene::analysis::TokenStream & a0, const ::java::text::Collator & a1) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_9b6c8506, a0.this$, a1.this$)) {}

        jboolean CollationKeyFilter::incrementToken() const
        {
          return env->callBooleanMethod(this$, mids$[mid_incrementToken_54c6a16a]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace collation {
        static PyObject *t_CollationKeyFilter_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_CollationKeyFilter_instance_(PyTypeObject *type, PyObject *arg);
        static int t_CollationKeyFilter_init_(t_CollationKeyFilter *self, PyObject *args, PyObject *kwds);
        static PyObject *t_CollationKeyFilter_incrementToken(t_CollationKeyFilter *self, PyObject *args);

        static PyMethodDef t_CollationKeyFilter__methods_[] = {
          DECLARE_METHOD(t_CollationKeyFilter, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_CollationKeyFilter, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_CollationKeyFilter, incrementToken, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(CollationKeyFilter, t_CollationKeyFilter, ::org::apache::lucene::analysis::TokenFilter, CollationKeyFilter, t_CollationKeyFilter_init_, 0, 0, 0, 0, 0);

        void t_CollationKeyFilter::install(PyObject *module)
        {
          installType(&PY_TYPE(CollationKeyFilter), module, "CollationKeyFilter", 0);
        }

        void t_CollationKeyFilter::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(CollationKeyFilter).tp_dict, "class_", make_descriptor(CollationKeyFilter::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(CollationKeyFilter).tp_dict, "wrapfn_", make_descriptor(t_CollationKeyFilter::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(CollationKeyFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_CollationKeyFilter_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, CollationKeyFilter::initializeClass, 1)))
            return NULL;
          return t_CollationKeyFilter::wrap_Object(CollationKeyFilter(((t_CollationKeyFilter *) arg)->object.this$));
        }
        static PyObject *t_CollationKeyFilter_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, CollationKeyFilter::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_CollationKeyFilter_init_(t_CollationKeyFilter *self, PyObject *args, PyObject *kwds)
        {
          ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
          ::java::text::Collator a1((jobject) NULL);
          CollationKeyFilter object((jobject) NULL);

          if (!parseArgs(args, "kk", ::org::apache::lucene::analysis::TokenStream::initializeClass, ::java::text::Collator::initializeClass, &a0, &a1))
          {
            INT_CALL(object = CollationKeyFilter(a0, a1));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_CollationKeyFilter_incrementToken(t_CollationKeyFilter *self, PyObject *args)
        {
          jboolean result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.incrementToken());
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(CollationKeyFilter), (PyObject *) self, "incrementToken", args, 2);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/cjk/CJKWidthFilterFactory.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "org/apache/lucene/analysis/util/MultiTermAwareComponent.h"
#include "java/lang/Class.h"
#include "java/util/Map.h"
#include "java/lang/String.h"
#include "org/apache/lucene/analysis/util/AbstractAnalysisFactory.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace cjk {

          ::java::lang::Class *CJKWidthFilterFactory::class$ = NULL;
          jmethodID *CJKWidthFilterFactory::mids$ = NULL;
          bool CJKWidthFilterFactory::live$ = false;

          jclass CJKWidthFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/cjk/CJKWidthFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4c9e2b1c] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_a65cd6ab] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/TokenStream;");
              mids$[mid_getMultiTermComponent_0a3f1d72] = env->getMethodID(cls, "getMultiTermComponent", "()Lorg/apache/lucene/analysis/util/AbstractAnalysisFactory;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          CJKWidthFilterFactory::CJKWidthFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_4c9e2b1c, a0.this$)) {}

          ::org::apache::lucene::analysis::TokenStream CJKWidthFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::TokenStream(env->callObjectMethod(this$, mids$[mid_create_a65cd6ab], a0.this$));
          }

          ::org::apache::lucene::analysis::util::AbstractAnalysisFactory CJKWidthFilterFactory::getMultiTermComponent() const
          {
            return ::org::apache::lucene::analysis::util::AbstractAnalysisFactory(env->callObjectMethod(this$, mids$[mid_getMultiTermComponent_0a3f1d72]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace cjk {
          static PyObject *t_CJKWidthFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_CJKWidthFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_CJKWidthFilterFactory_init_(t_CJKWidthFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_CJKWidthFilterFactory_create(t_CJKWidthFilterFactory *self, PyObject *args);
          static PyObject *t_CJKWidthFilterFactory_getMultiTermComponent(t_CJKWidthFilterFactory *self);
          static PyObject *t_CJKWidthFilterFactory_get__multiTermComponent(t_CJKWidthFilterFactory *self, void *data);
          static PyGetSetDef t_CJKWidthFilterFactory__fields_[] = {
            DECLARE_GET_FIELD(t_CJKWidthFilterFactory, multiTermComponent),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_CJKWidthFilterFactory__methods_[] = {
            DECLARE_METHOD(t_CJKWidthFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CJKWidthFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CJKWidthFilterFactory, create, METH_VARARGS),
            DECLARE_METHOD(t_CJKWidthFilterFactory, getMultiTermComponent, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(CJKWidthFilterFactory, t_CJKWidthFilterFactory, ::org::apache::lucene::analysis::util::TokenFilterFactory, CJKWidthFilterFactory, t_CJKWidthFilterFactory_init_, 0, 0, t_CJKWidthFilterFactory__fields_, 0, 0);

          void t_CJKWidthFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(CJKWidthFilterFactory), module, "CJKWidthFilterFactory", 0);
          }

          void t_CJKWidthFilterFactory::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(CJKWidthFilterFactory).tp_dict, "class_", make_descriptor(CJKWidthFilterFactory::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(CJKWidthFilterFactory).tp_dict, "wrapfn_", make_descriptor(t_CJKWidthFilterFactory::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(CJKWidthFilterFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_CJKWidthFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, CJKWidthFilterFactory::initializeClass, 1)))
              return NULL;
            return t_CJKWidthFilterFactory::wrap_Object(CJKWidthFilterFactory(((t_CJKWidthFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_CJKWidthFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, CJKWidthFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_CJKWidthFilterFactory_init_(t_CJKWidthFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            CJKWidthFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = CJKWidthFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_CJKWidthFilterFactory_create(t_CJKWidthFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::TokenStream result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::t_TokenStream::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(CJKWidthFilterFactory), (PyObject *) self, "create", args, 2);
          }

          static PyObject *t_CJKWidthFilterFactory_getMultiTermComponent(t_CJKWidthFilterFactory *self)
          {
            ::org::apache::lucene::analysis::util::AbstractAnalysisFactory result((jobject) NULL);
            OBJ_CALL(result = self->object.getMultiTermComponent());
            return ::org::apache::lucene::analysis::util::t_AbstractAnalysisFactory::wrap_Object(result);
          }

          static PyObject *t_CJKWidthFilterFactory_get__multiTermComponent(t_CJKWidthFilterFactory *self, void *data)
          {
            ::org::apache::lucene::analysis::util::AbstractAnalysisFactory value((jobject) NULL);
            OBJ_CALL(value = self->object.getMultiTermComponent());
            return ::org::apache::lucene::analysis::util::t_AbstractAnalysisFactory::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/miscellaneous/StemmerOverrideFilterFactory.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "java/io/IOException.h"
#include "java/util/Map.h"
#include "java/lang/String.h"
#include "org/apache/lucene/analysis/util/ResourceLoader.h"
#include "org/apache/lucene/analysis/util/ResourceLoaderAware.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {

          ::java::lang::Class *StemmerOverrideFilterFactory::class$ = NULL;
          jmethodID *StemmerOverrideFilterFactory::mids$ = NULL;
          bool StemmerOverrideFilterFactory::live$ = false;

          jclass StemmerOverrideFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/miscellaneous/StemmerOverrideFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4c9e2b1c] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_a65cd6ab] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/TokenStream;");
              mids$[mid_inform_d6a4bc97] = env->getMethodID(cls, "inform", "(Lorg/apache/lucene/analysis/util/ResourceLoader;)V");
              mids$[mid_isIgnoreCase_54c6a16a] = env->getMethodID(cls, "isIgnoreCase", "()Z");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          StemmerOverrideFilterFactory::StemmerOverrideFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_4c9e2b1c, a0.this$)) {}

          ::org::apache::lucene::analysis::TokenStream StemmerOverrideFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::TokenStream(env->callObjectMethod(this$, mids$[mid_create_a65cd6ab], a0.this$));
          }

          void StemmerOverrideFilterFactory::inform(const ::org::apache::lucene::analysis::util::ResourceLoader & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_inform_d6a4bc97], a0.this$);
          }

          jboolean StemmerOverrideFilterFactory::isIgnoreCase() const
          {
            return env->callBooleanMethod(this$, mids$[mid_isIgnoreCase_54c6a16a]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {
          static PyObject *t_StemmerOverrideFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_StemmerOverrideFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_StemmerOverrideFilterFactory_init_(t_StemmerOverrideFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_StemmerOverrideFilterFactory_create(t_StemmerOverrideFilterFactory *self, PyObject *args);
          static PyObject *t_StemmerOverrideFilterFactory_inform(t_StemmerOverrideFilterFactory *self, PyObject *arg);
          static PyObject *t_StemmerOverrideFilterFactory_isIgnoreCase(t_StemmerOverrideFilterFactory *self);
          static PyObject *t_StemmerOverrideFilterFactory_get__ignoreCase(t_StemmerOverrideFilterFactory *self, void *data);
          static PyGetSetDef t_StemmerOverrideFilterFactory__fields_[] = {
            DECLARE_GET_FIELD(t_StemmerOverrideFilterFactory, ignoreCase),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_StemmerOverrideFilterFactory__methods_[] = {
            DECLARE_METHOD(t_StemmerOverrideFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_StemmerOverrideFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_StemmerOverrideFilterFactory, create, METH_VARARGS),
            DECLARE_METHOD(t_StemmerOverrideFilterFactory, inform, METH_O),
            DECLARE_METHOD(t_StemmerOverrideFilterFactory, isIgnoreCase, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(StemmerOverrideFilterFactory, t_StemmerOverrideFilterFactory, ::org::apache::lucene::analysis::util::TokenFilterFactory, StemmerOverrideFilterFactory, t_StemmerOverrideFilterFactory_init_, 0, 0, t_StemmerOverrideFilterFactory__fields_, 0, 0);

          void t_StemmerOverrideFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(StemmerOverrideFilterFactory), module, "StemmerOverrideFilterFactory", 0);
          }

          void t_StemmerOverrideFilterFactory::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(StemmerOverrideFilterFactory).tp_dict, "class_", make_descriptor(StemmerOverrideFilterFactory::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(StemmerOverrideFilterFactory).tp_dict, "wrapfn_", make_descriptor(t_StemmerOverrideFilterFactory::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(StemmerOverrideFilterFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_StemmerOverrideFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, StemmerOverrideFilterFactory::initializeClass, 1)))
              return NULL;
            return t_StemmerOverrideFilterFactory::wrap_Object(StemmerOverrideFilterFactory(((t_StemmerOverrideFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_StemmerOverrideFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, StemmerOverrideFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_StemmerOverrideFilterFactory_init_(t_StemmerOverrideFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            StemmerOverrideFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = StemmerOverrideFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_StemmerOverrideFilterFactory_create(t_StemmerOverrideFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::TokenStream result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::t_TokenStream::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(StemmerOverrideFilterFactory), (PyObject *) self, "create", args, 2);
          }

          static PyObject *t_StemmerOverrideFilterFactory_inform(t_StemmerOverrideFilterFactory *self, PyObject *arg)
          {
            ::org::apache::lucene::analysis::util::ResourceLoader a0((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::analysis::util::ResourceLoader::initializeClass, &a0))
            {
              OBJ_CALL(self->object.inform(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "inform", arg);
            return NULL;
          }

          static PyObject *t_StemmerOverrideFilterFactory_isIgnoreCase(t_StemmerOverrideFilterFactory *self)
          {
            jboolean result;
            OBJ_CALL(result = self->object.isIgnoreCase());
            Py_RETURN_BOOL(result);
          }

          static PyObject *t_StemmerOverrideFilterFactory_get__ignoreCase(t_StemmerOverrideFilterFactory *self, void *data)
          {
            jboolean value;
            OBJ_CALL(value = self->object.isIgnoreCase());
            Py_RETURN_BOOL(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/tokenattributes/PositionIncrementAttribute.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace tokenattributes {

          ::java::lang::Class *PositionIncrementAttribute::class$ = NULL;
          jmethodID *PositionIncrementAttribute::mids$ = NULL;
          bool PositionIncrementAttribute::live$ = false;

          jclass PositionIncrementAttribute::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/tokenattributes/PositionIncrementAttribute");

              mids$ = new jmethodID[max_mid];
              mids$[mid_getPositionIncrement_54c6a179] = env->getMethodID(cls, "getPositionIncrement", "()I");
              mids$[mid_setPositionIncrement_39c7bd3c] = env->getMethodID(cls, "setPositionIncrement", "(I)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          jint PositionIncrementAttribute::getPositionIncrement() const
          {
            return env->callIntMethod(this$, mids$[mid_getPositionIncrement_54c6a179]);
          }

          void PositionIncrementAttribute::setPositionIncrement(jint a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setPositionIncrement_39c7bd3c], a0);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace tokenattributes {
          static PyObject *t_PositionIncrementAttribute_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PositionIncrementAttribute_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PositionIncrementAttribute_getPositionIncrement(t_PositionIncrementAttribute *self);
          static PyObject *t_PositionIncrementAttribute_setPositionIncrement(t_PositionIncrementAttribute *self, PyObject *arg);
          static PyObject *t_PositionIncrementAttribute_get__positionIncrement(t_PositionIncrementAttribute *self, void *data);
          static int t_PositionIncrementAttribute_set__positionIncrement(t_PositionIncrementAttribute *self, PyObject *arg, void *data);
          static PyGetSetDef t_PositionIncrementAttribute__fields_[] = {
            DECLARE_GETSET_FIELD(t_PositionIncrementAttribute, positionIncrement),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_PositionIncrementAttribute__methods_[] = {
            DECLARE_METHOD(t_PositionIncrementAttribute, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PositionIncrementAttribute, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PositionIncrementAttribute, getPositionIncrement, METH_NOARGS),
            DECLARE_METHOD(t_PositionIncrementAttribute, setPositionIncrement, METH_O),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(PositionIncrementAttribute, t_PositionIncrementAttribute, ::org::apache::lucene::util::Attribute, PositionIncrementAttribute, abstract_init, 0, 0, t_PositionIncrementAttribute__fields_, 0, 0);

          void t_PositionIncrementAttribute::install(PyObject *module)
          {
            installType(&PY_TYPE(PositionIncrementAttribute), module, "PositionIncrementAttribute", 0);
          }

          void t_PositionIncrementAttribute::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(PositionIncrementAttribute).tp_dict, "class_", make_descriptor(PositionIncrementAttribute::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(PositionIncrementAttribute).tp_dict, "wrapfn_", make_descriptor(t_PositionIncrementAttribute::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(PositionIncrementAttribute).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_PositionIncrementAttribute_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, PositionIncrementAttribute::initializeClass, 1)))
              return NULL;
            return t_PositionIncrementAttribute::wrap_Object(PositionIncrementAttribute(((t_PositionIncrementAttribute *) arg)->object.this$));
          }
          static PyObject *t_PositionIncrementAttribute_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, PositionIncrementAttribute::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_PositionIncrementAttribute_getPositionIncrement(t_PositionIncrementAttribute *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getPositionIncrement());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_PositionIncrementAttribute_setPositionIncrement(t_PositionIncrementAttribute *self, PyObject *arg)
          {
            jint a0;

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(self->object.setPositionIncrement(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setPositionIncrement", arg);
            return NULL;
          }

          static PyObject *t_PositionIncrementAttribute_get__positionIncrement(t_PositionIncrementAttribute *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getPositionIncrement());
            return PyInt_FromLong((long) value);
          }
          static int t_PositionIncrementAttribute_set__positionIncrement(t_PositionIncrementAttribute *self, PyObject *arg, void *data)
          {
            {
              jint value;
              if (!parseArg(arg, "I", &value))
              {
                INT_CALL(self->object.setPositionIncrement(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "positionIncrement", arg);
            return -1;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/expressions/js/JavascriptParser$logical_and_return.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace expressions {
        namespace js {

          ::java::lang::Class *JavascriptParser$logical_and_return::class$ = NULL;
          jmethodID *JavascriptParser$logical_and_return::mids$ = NULL;
          bool JavascriptParser$logical_and_return::live$ = false;

          jclass JavascriptParser$logical_and_return::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/expressions/js/JavascriptParser$logical_and_return");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          JavascriptParser$logical_and_return::JavascriptParser$logical_and_return() : ::org::antlr::runtime::ParserRuleReturnScope(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace expressions {
        namespace js {
          static PyObject *t_JavascriptParser$logical_and_return_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_JavascriptParser$logical_and_return_instance_(PyTypeObject *type, PyObject *arg);
          static int t_JavascriptParser$logical_and_return_init_(t_JavascriptParser$logical_and_return *self, PyObject *args, PyObject *kwds);

          static PyMethodDef t_JavascriptParser$logical_and_return__methods_[] = {
            DECLARE_METHOD(t_JavascriptParser$logical_and_return, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_JavascriptParser$logical_and_return, instance_, METH_O | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(JavascriptParser$logical_and_return, t_JavascriptParser$logical_and_return, ::org::antlr::runtime::ParserRuleReturnScope, JavascriptParser$logical_and_return, t_JavascriptParser$logical_and_return_init_, 0, 0, 0, 0, 0);

          void t_JavascriptParser$logical_and_return::install(PyObject *module)
          {
            installType(&PY_TYPE(JavascriptParser$logical_and_return), module, "JavascriptParser$logical_and_return", 0);
          }

          void t_JavascriptParser$logical_and_return::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(JavascriptParser$logical_and_return).tp_dict, "class_", make_descriptor(JavascriptParser$logical_and_return::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(JavascriptParser$logical_and_return).tp_dict, "wrapfn_", make_descriptor(t_JavascriptParser$logical_and_return::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(JavascriptParser$logical_and_return).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_JavascriptParser$logical_and_return_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, JavascriptParser$logical_and_return::initializeClass, 1)))
              return NULL;
            return t_JavascriptParser$logical_and_return::wrap_Object(JavascriptParser$logical_and_return(((t_JavascriptParser$logical_and_return *) arg)->object.this$));
          }
          static PyObject *t_JavascriptParser$logical_and_return_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, JavascriptParser$logical_and_return::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_JavascriptParser$logical_and_return_init_(t_JavascriptParser$logical_and_return *self, PyObject *args, PyObject *kwds)
          {
            JavascriptParser$logical_and_return object((jobject) NULL);

            INT_CALL(object = JavascriptParser$logical_and_return());
            self->object = object;

            return 0;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/util/CharFilterFactory.h"
#include "java/lang/Class.h"
#include "java/lang/ClassLoader.h"
#include "java/util/Map.h"
#include "java/io/Reader.h"
#include "java/lang/String.h"
#include "java/util/Set.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace util {

          ::java::lang::Class *CharFilterFactory::class$ = NULL;
          jmethodID *CharFilterFactory::mids$ = NULL;
          bool CharFilterFactory::live$ = false;

          jclass CharFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/util/CharFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_availableCharFilters_03e99967] = env->getStaticMethodID(cls, "availableCharFilters", "()Ljava/util/Set;");
              mids$[mid_create_6d741e4f] = env->getMethodID(cls, "create", "(Ljava/io/Reader;)Ljava/io/Reader;");
              mids$[mid_forName_75151912] = env->getStaticMethodID(cls, "forName", "(Ljava/lang/String;Ljava/util/Map;)Lorg/apache/lucene/analysis/util/CharFilterFactory;");
              mids$[mid_lookupClass_7d663d97] = env->getStaticMethodID(cls, "lookupClass", "(Ljava/lang/String;)Ljava/lang/Class;");
              mids$[mid_reloadCharFilters_9110048d] = env->getStaticMethodID(cls, "reloadCharFilters", "(Ljava/lang/ClassLoader;)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ::java::util::Set CharFilterFactory::availableCharFilters()
          {
            jclass cls = env->getClass(initializeClass);
            return ::java::util::Set(env->callStaticObjectMethod(cls, mids$[mid_availableCharFilters_03e99967]));
          }

          ::java::io::Reader CharFilterFactory::create(const ::java::io::Reader & a0) const
          {
            return ::java::io::Reader(env->callObjectMethod(this$, mids$[mid_create_6d741e4f], a0.this$));
          }

          CharFilterFactory CharFilterFactory::forName(const ::java::lang::String & a0, const ::java::util::Map & a1)
          {
            jclass cls = env->getClass(initializeClass);
            return CharFilterFactory(env->callStaticObjectMethod(cls, mids$[mid_forName_75151912], a0.this$, a1.this$));
          }

          ::java::lang::Class CharFilterFactory::lookupClass(const ::java::lang::String & a0)
          {
            jclass cls = env->getClass(initializeClass);
            return ::java::lang::Class(env->callStaticObjectMethod(cls, mids$[mid_lookupClass_7d663d97], a0.this$));
          }

          void CharFilterFactory::reloadCharFilters(const ::java::lang::ClassLoader & a0)
          {
            jclass cls = env->getClass(initializeClass);
            env->callStaticVoidMethod(cls, mids$[mid_reloadCharFilters_9110048d], a0.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace util {
          static PyObject *t_CharFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_CharFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_CharFilterFactory_availableCharFilters(PyTypeObject *type);
          static PyObject *t_CharFilterFactory_create(t_CharFilterFactory *self, PyObject *arg);
          static PyObject *t_CharFilterFactory_forName(PyTypeObject *type, PyObject *args);
          static PyObject *t_CharFilterFactory_lookupClass(PyTypeObject *type, PyObject *arg);
          static PyObject *t_CharFilterFactory_reloadCharFilters(PyTypeObject *type, PyObject *arg);

          static PyMethodDef t_CharFilterFactory__methods_[] = {
            DECLARE_METHOD(t_CharFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CharFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CharFilterFactory, availableCharFilters, METH_NOARGS | METH_CLASS),
            DECLARE_METHOD(t_CharFilterFactory, create, METH_O),
            DECLARE_METHOD(t_CharFilterFactory, forName, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_CharFilterFactory, lookupClass, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CharFilterFactory, reloadCharFilters, METH_O | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(CharFilterFactory, t_CharFilterFactory, ::org::apache::lucene::analysis::util::AbstractAnalysisFactory, CharFilterFactory, abstract_init, 0, 0, 0, 0, 0);

          void t_CharFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(CharFilterFactory), module, "CharFilterFactory", 0);
          }

          void t_CharFilterFactory::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(CharFilterFactory).tp_dict, "class_", make_descriptor(CharFilterFactory::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(CharFilterFactory).tp_dict, "wrapfn_", make_descriptor(t_CharFilterFactory::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(CharFilterFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_CharFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, CharFilterFactory::initializeClass, 1)))
              return NULL;
            return t_CharFilterFactory::wrap_Object(CharFilterFactory(((t_CharFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_CharFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, CharFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_CharFilterFactory_availableCharFilters(PyTypeObject *type)
          {
            ::java::util::Set result((jobject) NULL);
            OBJ_CALL(result = ::org::apache::lucene::analysis::util::CharFilterFactory::availableCharFilters());
            return ::java::util::t_Set::wrap_Object(result, &::java::lang::PY_TYPE(String));
          }

          static PyObject *t_CharFilterFactory_create(t_CharFilterFactory *self, PyObject *arg)
          {
            ::java::io::Reader a0((jobject) NULL);
            ::java::io::Reader result((jobject) NULL);

            if (!parseArg(arg, "k", ::java::io::Reader::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::java::io::t_Reader::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "create", arg);
            return NULL;
          }

          static PyObject *t_CharFilterFactory_forName(PyTypeObject *type, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            ::java::util::Map a1((jobject) NULL);
            PyTypeObject **p1;
            CharFilterFactory result((jobject) NULL);

            if (!parseArgs(args, "sK", ::java::util::Map::initializeClass, &a0, &a1, &p1, ::java::util::t_Map::parameters_))
            {
              OBJ_CALL(result = ::org::apache::lucene::analysis::util::CharFilterFactory::forName(a0, a1));
              return t_CharFilterFactory::wrap_Object(result);
            }

            PyErr_SetArgsError(type, "forName", args);
            return NULL;
          }

          static PyObject *t_CharFilterFactory_lookupClass(PyTypeObject *type, PyObject *arg)
          {
            ::java::lang::String a0((jobject) NULL);
            ::java::lang::Class result((jobject) NULL);

            if (!parseArg(arg, "s", &a0))
            {
              OBJ_CALL(result = ::org::apache::lucene::analysis::util::CharFilterFactory::lookupClass(a0));
              return ::java::lang::t_Class::wrap_Object(result);
            }

            PyErr_SetArgsError(type, "lookupClass", arg);
            return NULL;
          }

          static PyObject *t_CharFilterFactory_reloadCharFilters(PyTypeObject *type, PyObject *arg)
          {
            ::java::lang::ClassLoader a0((jobject) NULL);

            if (!parseArg(arg, "k", ::java::lang::ClassLoader::initializeClass, &a0))
            {
              OBJ_CALL(::org::apache::lucene::analysis::util::CharFilterFactory::reloadCharFilters(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError(type, "reloadCharFilters", arg);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/core/config/QueryConfigHandler.h"
#include "org/apache/lucene/queryparser/flexible/core/config/FieldConfig.h"
#include "java/lang/String.h"
#include "org/apache/lucene/queryparser/flexible/core/config/FieldConfigListener.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace config {

              ::java::lang::Class *QueryConfigHandler::class$ = NULL;
              jmethodID *QueryConfigHandler::mids$ = NULL;
              bool QueryConfigHandler::live$ = false;

              jclass QueryConfigHandler::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/core/config/QueryConfigHandler");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
                  mids$[mid_addFieldConfigListener_cafa3927] = env->getMethodID(cls, "addFieldConfigListener", "(Lorg/apache/lucene/queryparser/flexible/core/config/FieldConfigListener;)V");
                  mids$[mid_getFieldConfig_081010e4] = env->getMethodID(cls, "getFieldConfig", "(Ljava/lang/String;)Lorg/apache/lucene/queryparser/flexible/core/config/FieldConfig;");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              QueryConfigHandler::QueryConfigHandler() : ::org::apache::lucene::queryparser::flexible::core::config::AbstractQueryConfig(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

              void QueryConfigHandler::addFieldConfigListener(const ::org::apache::lucene::queryparser::flexible::core::config::FieldConfigListener & a0) const
              {
                env->callVoidMethod(this$, mids$[mid_addFieldConfigListener_cafa3927], a0.this$);
              }

              ::org::apache::lucene::queryparser::flexible::core::config::FieldConfig QueryConfigHandler::getFieldConfig(const ::java::lang::String & a0) const
              {
                return ::org::apache::lucene::queryparser::flexible::core::config::FieldConfig(env->callObjectMethod(this$, mids$[mid_getFieldConfig_081010e4], a0.this$));
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace config {
              static PyObject *t_QueryConfigHandler_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_QueryConfigHandler_instance_(PyTypeObject *type, PyObject *arg);
              static int t_QueryConfigHandler_init_(t_QueryConfigHandler *self, PyObject *args, PyObject *kwds);
              static PyObject *t_QueryConfigHandler_addFieldConfigListener(t_QueryConfigHandler *self, PyObject *arg);
              static PyObject *t_QueryConfigHandler_getFieldConfig(t_QueryConfigHandler *self, PyObject *arg);

              static PyMethodDef t_QueryConfigHandler__methods_[] = {
                DECLARE_METHOD(t_QueryConfigHandler, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_QueryConfigHandler, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_QueryConfigHandler, addFieldConfigListener, METH_O),
                DECLARE_METHOD(t_QueryConfigHandler, getFieldConfig, METH_O),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(QueryConfigHandler, t_QueryConfigHandler, ::org::apache::lucene::queryparser::flexible::core::config::AbstractQueryConfig, QueryConfigHandler, t_QueryConfigHandler_init_, 0, 0, 0, 0, 0);

              void t_QueryConfigHandler::install(PyObject *module)
              {
                installType(&PY_TYPE(QueryConfigHandler), module, "QueryConfigHandler", 0);
              }

              void t_QueryConfigHandler::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(QueryConfigHandler).tp_dict, "class_", make_descriptor(QueryConfigHandler::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(QueryConfigHandler).tp_dict, "wrapfn_", make_descriptor(t_QueryConfigHandler::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(QueryConfigHandler).tp_dict, "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_QueryConfigHandler_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, QueryConfigHandler::initializeClass, 1)))
                  return NULL;
                return t_QueryConfigHandler::wrap_Object(QueryConfigHandler(((t_QueryConfigHandler *) arg)->object.this$));
              }
              static PyObject *t_QueryConfigHandler_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, QueryConfigHandler::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_QueryConfigHandler_init_(t_QueryConfigHandler *self, PyObject *args, PyObject *kwds)
              {
                QueryConfigHandler object((jobject) NULL);

                INT_CALL(object = QueryConfigHandler());
                self->object = object;

                return 0;
              }

              static PyObject *t_QueryConfigHandler_addFieldConfigListener(t_QueryConfigHandler *self, PyObject *arg)
              {
                ::org::apache::lucene::queryparser::flexible::core::config::FieldConfigListener a0((jobject) NULL);

                if (!parseArg(arg, "k", ::org::apache::lucene::queryparser::flexible::core::config::FieldConfigListener::initializeClass, &a0))
                {
                  OBJ_CALL(self->object.addFieldConfigListener(a0));
                  Py_RETURN_NONE;
                }

                PyErr_SetArgsError((PyObject *) self, "addFieldConfigListener", arg);
                return NULL;
              }

              static PyObject *t_QueryConfigHandler_getFieldConfig(t_QueryConfigHandler *self, PyObject *arg)
              {
                ::java::lang::String a0((jobject) NULL);
                ::org::apache::lucene::queryparser::flexible::core::config::FieldConfig result((jobject) NULL);

                if (!parseArg(arg, "s", &a0))
                {
                  OBJ_CALL(result = self->object.getFieldConfig(a0));
                  return ::org::apache::lucene::queryparser::flexible::core::config::t_FieldConfig::wrap_Object(result);
                }

                PyErr_SetArgsError((PyObject *) self, "getFieldConfig", arg);
                return NULL;
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/AttributeImpl.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/util/AttributeReflector.h"
#include "org/apache/lucene/util/Attribute.h"
#include "java/lang/Cloneable.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *AttributeImpl::class$ = NULL;
        jmethodID *AttributeImpl::mids$ = NULL;
        bool AttributeImpl::live$ = false;

        jclass AttributeImpl::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/AttributeImpl");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_clear_54c6a166] = env->getMethodID(cls, "clear", "()V");
            mids$[mid_clone_a200d3c2] = env->getMethodID(cls, "clone", "()Lorg/apache/lucene/util/AttributeImpl;");
            mids$[mid_copyTo_d86caa9f] = env->getMethodID(cls, "copyTo", "(Lorg/apache/lucene/util/AttributeImpl;)V");
            mids$[mid_reflectAsString_445a175e] = env->getMethodID(cls, "reflectAsString", "(Z)Ljava/lang/String;");
            mids$[mid_reflectWith_5f3f5102] = env->getMethodID(cls, "reflectWith", "(Lorg/apache/lucene/util/AttributeReflector;)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        AttributeImpl::AttributeImpl() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        void AttributeImpl::clear() const
        {
          env->callVoidMethod(this$, mids$[mid_clear_54c6a166]);
        }

        AttributeImpl AttributeImpl::clone() const
        {
          return AttributeImpl(env->callObjectMethod(this$, mids$[mid_clone_a200d3c2]));
        }

        void AttributeImpl::copyTo(const AttributeImpl & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_copyTo_d86caa9f], a0.this$);
        }

        ::java::lang::String AttributeImpl::reflectAsString(jboolean a0) const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_reflectAsString_445a175e], a0));
        }

        void AttributeImpl::reflectWith(const ::org::apache::lucene::util::AttributeReflector & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_reflectWith_5f3f5102], a0.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_AttributeImpl_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_AttributeImpl_instance_(PyTypeObject *type, PyObject *arg);
        static int t_AttributeImpl_init_(t_AttributeImpl *self, PyObject *args, PyObject *kwds);
        static PyObject *t_AttributeImpl_clear(t_AttributeImpl *self);
        static PyObject *t_AttributeImpl_clone(t_AttributeImpl *self);
        static PyObject *t_AttributeImpl_copyTo(t_AttributeImpl *self, PyObject *arg);
        static PyObject *t_AttributeImpl_reflectAsString(t_AttributeImpl *self, PyObject *arg);
        static PyObject *t_AttributeImpl_reflectWith(t_AttributeImpl *self, PyObject *arg);

        static PyMethodDef t_AttributeImpl__methods_[] = {
          DECLARE_METHOD(t_AttributeImpl, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_AttributeImpl, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_AttributeImpl, clear, METH_NOARGS),
          DECLARE_METHOD(t_AttributeImpl, clone, METH_NOARGS),
          DECLARE_METHOD(t_AttributeImpl, copyTo, METH_O),
          DECLARE_METHOD(t_AttributeImpl, reflectAsString, METH_O),
          DECLARE_METHOD(t_AttributeImpl, reflectWith, METH_O),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(AttributeImpl, t_AttributeImpl, ::java::lang::Object, AttributeImpl, t_AttributeImpl_init_, 0, 0, 0, 0, 0);

        void t_AttributeImpl::install(PyObject *module)
        {
          installType(&PY_TYPE(AttributeImpl), module, "AttributeImpl", 0);
        }

        void t_AttributeImpl::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(AttributeImpl).tp_dict, "class_", make_descriptor(AttributeImpl::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(AttributeImpl).tp_dict, "wrapfn_", make_descriptor(t_AttributeImpl::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(AttributeImpl).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_AttributeImpl_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, AttributeImpl::initializeClass, 1)))
            return NULL;
          return t_AttributeImpl::wrap_Object(AttributeImpl(((t_AttributeImpl *) arg)->object.this$));
        }
        static PyObject *t_AttributeImpl_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, AttributeImpl::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_AttributeImpl_init_(t_AttributeImpl *self, PyObject *args, PyObject *kwds)
        {
          AttributeImpl object((jobject) NULL);

          INT_CALL(object = AttributeImpl());
          self->object = object;

          return 0;
        }

        static PyObject *t_AttributeImpl_clear(t_AttributeImpl *self)
        {
          OBJ_CALL(self->object.clear());
          Py_RETURN_NONE;
        }

        static PyObject *t_AttributeImpl_clone(t_AttributeImpl *self)
        {
          AttributeImpl result((jobject) NULL);
          OBJ_CALL(result = self->object.clone());
          return t_AttributeImpl::wrap_Object(result);
        }

        static PyObject *t_AttributeImpl_copyTo(t_AttributeImpl *self, PyObject *arg)
        {
          AttributeImpl a0((jobject) NULL);

          if (!parseArg(arg, "k", AttributeImpl::initializeClass, &a0))
          {
            OBJ_CALL(self->object.copyTo(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "copyTo", arg);
          return NULL;
        }

        static PyObject *t_AttributeImpl_reflectAsString(t_AttributeImpl *self, PyObject *arg)
        {
          jboolean a0;
          ::java::lang::String result((jobject) NULL);

          if (!parseArg(arg, "Z", &a0))
          {
            OBJ_CALL(result = self->object.reflectAsString(a0));
            return j2p(result);
          }

          PyErr_SetArgsError((PyObject *) self, "reflectAsString", arg);
          return NULL;
        }

        static PyObject *t_AttributeImpl_reflectWith(t_AttributeImpl *self, PyObject *arg)
        {
          ::org::apache::lucene::util::AttributeReflector a0((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::util::AttributeReflector::initializeClass, &a0))
          {
            OBJ_CALL(self->object.reflectWith(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "reflectWith", arg);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/FieldValueHitQueue$Entry.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *FieldValueHitQueue$Entry::class$ = NULL;
        jmethodID *FieldValueHitQueue$Entry::mids$ = NULL;
        jfieldID *FieldValueHitQueue$Entry::fids$ = NULL;
        bool FieldValueHitQueue$Entry::live$ = false;

        jclass FieldValueHitQueue$Entry::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/FieldValueHitQueue$Entry");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_a74e6883] = env->getMethodID(cls, "<init>", "(IIF)V");
            mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

            fids$ = new jfieldID[max_fid];
            fids$[fid_slot] = env->getFieldID(cls, "slot", "I");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        FieldValueHitQueue$Entry::FieldValueHitQueue$Entry(jint a0, jint a1, jfloat a2) : ::org::apache::lucene::search::ScoreDoc(env->newObject(initializeClass, &mids$, mid_init$_a74e6883, a0, a1, a2)) {}

        ::java::lang::String FieldValueHitQueue$Entry::toString() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
        }

        jint FieldValueHitQueue$Entry::_get_slot() const
        {
          return env->getIntField(this$, fids$[fid_slot]);
        }

        void FieldValueHitQueue$Entry::_set_slot(jint a0) const
        {
          env->setIntField(this$, fids$[fid_slot], a0);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_FieldValueHitQueue$Entry_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FieldValueHitQueue$Entry_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FieldValueHitQueue$Entry_of_(t_FieldValueHitQueue$Entry *self, PyObject *args);
        static int t_FieldValueHitQueue$Entry_init_(t_FieldValueHitQueue$Entry *self, PyObject *args, PyObject *kwds);
        static PyObject *t_FieldValueHitQueue$Entry_toString(t_FieldValueHitQueue$Entry *self, PyObject *args);
        static PyObject *t_FieldValueHitQueue$Entry_get__slot(t_FieldValueHitQueue$Entry *self, void *data);
        static int t_FieldValueHitQueue$Entry_set__slot(t_FieldValueHitQueue$Entry *self, PyObject *arg, void *data);

        static PyObject *t_FieldValueHitQueue$Entry_get__parameters_(t_FieldValueHitQueue$Entry *self, void *data);
        static PyGetSetDef t_FieldValueHitQueue$Entry__fields_[] = {
          DECLARE_GETSET_FIELD(t_FieldValueHitQueue$Entry, slot),
          DECLARE_GET_FIELD(t_FieldValueHitQueue$Entry, parameters_),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_FieldValueHitQueue$Entry__methods_[] = {
          DECLARE_METHOD(t_FieldValueHitQueue$Entry, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FieldValueHitQueue$Entry, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FieldValueHitQueue$Entry, of_, METH_VARARGS),
          DECLARE_METHOD(t_FieldValueHitQueue$Entry, toString, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(FieldValueHitQueue$Entry, t_FieldValueHitQueue$Entry, ::org::apache::lucene::search::ScoreDoc, FieldValueHitQueue$Entry, t_FieldValueHitQueue$Entry_init_, 0, 0, t_FieldValueHitQueue$Entry__fields_, 0, 0);
        PyObject *t_FieldValueHitQueue$Entry::wrap_Object(const FieldValueHitQueue$Entry& object, PyTypeObject *p0)
        {
          PyObject *obj = t_FieldValueHitQueue$Entry::wrap_Object(object);
          if (obj != NULL && obj != Py_None)
          {
            t_FieldValueHitQueue$Entry *self = (t_FieldValueHitQueue$Entry *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        PyObject *t_FieldValueHitQueue$Entry::wrap_jobject(const jobject& object, PyTypeObject *p0)
        {
          PyObject *obj = t_FieldValueHitQueue$Entry::wrap_jobject(object);
          if (obj != NULL && obj != Py_None)
          {
            t_FieldValueHitQueue$Entry *self = (t_FieldValueHitQueue$Entry *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        void t_FieldValueHitQueue$Entry::install(PyObject *module)
        {
          installType(&PY_TYPE(FieldValueHitQueue$Entry), module, "FieldValueHitQueue$Entry", 0);
        }

        void t_FieldValueHitQueue$Entry::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(FieldValueHitQueue$Entry).tp_dict, "class_", make_descriptor(FieldValueHitQueue$Entry::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(FieldValueHitQueue$Entry).tp_dict, "wrapfn_", make_descriptor(t_FieldValueHitQueue$Entry::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(FieldValueHitQueue$Entry).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_FieldValueHitQueue$Entry_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, FieldValueHitQueue$Entry::initializeClass, 1)))
            return NULL;
          return t_FieldValueHitQueue$Entry::wrap_Object(FieldValueHitQueue$Entry(((t_FieldValueHitQueue$Entry *) arg)->object.this$));
        }
        static PyObject *t_FieldValueHitQueue$Entry_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, FieldValueHitQueue$Entry::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_FieldValueHitQueue$Entry_of_(t_FieldValueHitQueue$Entry *self, PyObject *args)
        {
          if (!parseArg(args, "T", 1, &(self->parameters)))
            Py_RETURN_SELF;
          return PyErr_SetArgsError((PyObject *) self, "of_", args);
        }

        static int t_FieldValueHitQueue$Entry_init_(t_FieldValueHitQueue$Entry *self, PyObject *args, PyObject *kwds)
        {
          jint a0;
          jint a1;
          jfloat a2;
          FieldValueHitQueue$Entry object((jobject) NULL);

          if (!parseArgs(args, "IIF", &a0, &a1, &a2))
          {
            INT_CALL(object = FieldValueHitQueue$Entry(a0, a1, a2));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_FieldValueHitQueue$Entry_toString(t_FieldValueHitQueue$Entry *self, PyObject *args)
        {
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.toString());
            return j2p(result);
          }

          return callSuper(&PY_TYPE(FieldValueHitQueue$Entry), (PyObject *) self, "toString", args, 2);
        }
        static PyObject *t_FieldValueHitQueue$Entry_get__parameters_(t_FieldValueHitQueue$Entry *self, void *data)
        {
          return typeParameters(self->parameters, sizeof(self->parameters));
        }

        static PyObject *t_FieldValueHitQueue$Entry_get__slot(t_FieldValueHitQueue$Entry *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object._get_slot());
          return PyInt_FromLong((long) value);
        }
        static int t_FieldValueHitQueue$Entry_set__slot(t_FieldValueHitQueue$Entry *self, PyObject *arg, void *data)
        {
          jint value;
          if (!parseArg(arg, "I", &value))
          {
            INT_CALL(self->object._set_slot(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "slot", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/facet/FacetResult.h"
#include "java/lang/Number.h"
#include "java/lang/String.h"
#include "org/apache/lucene/facet/LabelAndValue.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {

        ::java::lang::Class *FacetResult::class$ = NULL;
        jmethodID *FacetResult::mids$ = NULL;
        jfieldID *FacetResult::fids$ = NULL;
        bool FacetResult::live$ = false;

        jclass FacetResult::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/facet/FacetResult");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_4b7182dd] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;[Ljava/lang/String;Ljava/lang/Number;[Lorg/apache/lucene/facet/LabelAndValue;I)V");
            mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
            mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
            mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

            fids$ = new jfieldID[max_fid];
            fids$[fid_childCount] = env->getFieldID(cls, "childCount", "I");
            fids$[fid_dim] = env->getFieldID(cls, "dim", "Ljava/lang/String;");
            fids$[fid_labelValues] = env->getFieldID(cls, "labelValues", "[Lorg/apache/lucene/facet/LabelAndValue;");
            fids$[fid_path] = env->getFieldID(cls, "path", "[Ljava/lang/String;");
            fids$[fid_value] = env->getFieldID(cls, "value", "Ljava/lang/Number;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        FacetResult::FacetResult(const ::java::lang::String & a0, const JArray< ::java::lang::String > & a1, const ::java::lang::Number & a2, const JArray< ::org::apache::lucene::facet::LabelAndValue > & a3, jint a4) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_4b7182dd, a0.this$, a1.this$, a2.this$, a3.this$, a4)) {}

        jboolean FacetResult::equals(const ::java::lang::Object & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
        }

        jint FacetResult::hashCode() const
        {
          return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
        }

        ::java::lang::String FacetResult::toString() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
        }

        jint FacetResult::_get_childCount() const
        {
          return env->getIntField(this$, fids$[fid_childCount]);
        }

        ::java::lang::String FacetResult::_get_dim() const
        {
          return ::java::lang::String(env->getObjectField(this$, fids$[fid_dim]));
        }

        JArray< ::org::apache::lucene::facet::LabelAndValue > FacetResult::_get_labelValues() const
        {
          return JArray< ::org::apache::lucene::facet::LabelAndValue >(env->getObjectField(this$, fids$[fid_labelValues]));
        }

        JArray< ::java::lang::String > FacetResult::_get_path() const
        {
          return JArray< ::java::lang::String >(env->getObjectField(this$, fids$[fid_path]));
        }

        ::java::lang::Number FacetResult::_get_value() const
        {
          return ::java::lang::Number(env->getObjectField(this$, fids$[fid_value]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        static PyObject *t_FacetResult_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FacetResult_instance_(PyTypeObject *type, PyObject *arg);
        static int t_FacetResult_init_(t_FacetResult *self, PyObject *args, PyObject *kwds);
        static PyObject *t_FacetResult_equals(t_FacetResult *self, PyObject *args);
        static PyObject *t_FacetResult_hashCode(t_FacetResult *self, PyObject *args);
        static PyObject *t_FacetResult_toString(t_FacetResult *self, PyObject *args);
        static PyObject *t_FacetResult_get__childCount(t_FacetResult *self, void *data);
        static PyObject *t_FacetResult_get__dim(t_FacetResult *self, void *data);
        static PyObject *t_FacetResult_get__labelValues(t_FacetResult *self, void *data);
        static PyObject *t_FacetResult_get__path(t_FacetResult *self, void *data);
        static PyObject *t_FacetResult_get__value(t_FacetResult *self, void *data);

        static PyGetSetDef t_FacetResult__fields_[] = {
          DECLARE_GET_FIELD(t_FacetResult, childCount),
          DECLARE_GET_FIELD(t_FacetResult, dim),
          DECLARE_GET_FIELD(t_FacetResult, labelValues),
          DECLARE_GET_FIELD(t_FacetResult, path),
          DECLARE_GET_FIELD(t_FacetResult, value),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_FacetResult__methods_[] = {
          DECLARE_METHOD(t_FacetResult, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FacetResult, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FacetResult, equals, METH_VARARGS),
          DECLARE_METHOD(t_FacetResult, hashCode, METH_VARARGS),
          DECLARE_METHOD(t_FacetResult, toString, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(FacetResult, t_FacetResult, ::java::lang::Object, FacetResult, t_FacetResult_init_, 0, 0, t_FacetResult__fields_, 0, 0);

        void t_FacetResult::install(PyObject *module)
        {
          installType(&PY_TYPE(FacetResult), module, "FacetResult", 0);
        }

        void t_FacetResult::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(FacetResult).tp_dict, "class_", make_descriptor(FacetResult::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(FacetResult).tp_dict, "wrapfn_", make_descriptor(t_FacetResult::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(FacetResult).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_FacetResult_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, FacetResult::initializeClass, 1)))
            return NULL;
          return t_FacetResult::wrap_Object(FacetResult(((t_FacetResult *) arg)->object.this$));
        }
        static PyObject *t_FacetResult_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, FacetResult::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_FacetResult_init_(t_FacetResult *self, PyObject *args, PyObject *kwds)
        {
          ::java::lang::String a0((jobject) NULL);
          JArray< ::java::lang::String > a1((jobject) NULL);
          ::java::lang::Number a2((jobject) NULL);
          JArray< ::org::apache::lucene::facet::LabelAndValue > a3((jobject) NULL);
          jint a4;
          FacetResult object((jobject) NULL);

          if (!parseArgs(args, "s[sO[kI", &::java::lang::PY_TYPE(Number), ::org::apache::lucene::facet::LabelAndValue::initializeClass, &a0, &a1, &a2, &a3, &a4))
          {
            INT_CALL(object = FacetResult(a0, a1, a2, a3, a4));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_FacetResult_equals(t_FacetResult *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.equals(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(FacetResult), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_FacetResult_hashCode(t_FacetResult *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hashCode());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(FacetResult), (PyObject *) self, "hashCode", args, 2);
        }

        static PyObject *t_FacetResult_toString(t_FacetResult *self, PyObject *args)
        {
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.toString());
            return j2p(result);
          }

          return callSuper(&PY_TYPE(FacetResult), (PyObject *) self, "toString", args, 2);
        }

        static PyObject *t_FacetResult_get__childCount(t_FacetResult *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object._get_childCount());
          return PyInt_FromLong((long) value);
        }

        static PyObject *t_FacetResult_get__dim(t_FacetResult *self, void *data)
        {
          ::java::lang::String value((jobject) NULL);
          OBJ_CALL(value = self->object._get_dim());
          return j2p(value);
        }

        static PyObject *t_FacetResult_get__labelValues(t_FacetResult *self, void *data)
        {
          JArray< ::org::apache::lucene::facet::LabelAndValue > value((jobject) NULL);
          OBJ_CALL(value = self->object._get_labelValues());
          return JArray<jobject>(value.this$).wrap(::org::apache::lucene::facet::t_LabelAndValue::wrap_jobject);
        }

        static PyObject *t_FacetResult_get__path(t_FacetResult *self, void *data)
        {
          JArray< ::java::lang::String > value((jobject) NULL);
          OBJ_CALL(value = self->object._get_path());
          return JArray<jstring>(value.this$).wrap();
        }

        static PyObject *t_FacetResult_get__value(t_FacetResult *self, void *data)
        {
          ::java::lang::Number value((jobject) NULL);
          OBJ_CALL(value = self->object._get_value());
          return ::java::lang::t_Number::wrap_Object(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/suggest/tst/TSTAutocomplete.h"
#include "java/lang/CharSequence.h"
#include "org/apache/lucene/search/suggest/tst/TernaryTreeNode.h"
#include "java/util/ArrayList.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace suggest {
          namespace tst {

            ::java::lang::Class *TSTAutocomplete::class$ = NULL;
            jmethodID *TSTAutocomplete::mids$ = NULL;
            bool TSTAutocomplete::live$ = false;

            jclass TSTAutocomplete::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/search/suggest/tst/TSTAutocomplete");

                mids$ = new jmethodID[max_mid];
                mids$[mid_balancedTree_d0572c03] = env->getMethodID(cls, "balancedTree", "([Ljava/lang/Object;[Ljava/lang/Object;IILorg/apache/lucene/search/suggest/tst/TernaryTreeNode;)V");
                mids$[mid_insert_05696b9d] = env->getMethodID(cls, "insert", "(Lorg/apache/lucene/search/suggest/tst/TernaryTreeNode;Ljava/lang/CharSequence;Ljava/lang/Object;I)Lorg/apache/lucene/search/suggest/tst/TernaryTreeNode;");
                mids$[mid_prefixCompletion_d5365801] = env->getMethodID(cls, "prefixCompletion", "(Lorg/apache/lucene/search/suggest/tst/TernaryTreeNode;Ljava/lang/CharSequence;I)Ljava/util/ArrayList;");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            void TSTAutocomplete::balancedTree(const JArray< ::java::lang::Object > & a0, const JArray< ::java::lang::Object > & a1, jint a2, jint a3, const ::org::apache::lucene::search::suggest::tst::TernaryTreeNode & a4) const
            {
              env->callVoidMethod(this$, mids$[mid_balancedTree_d0572c03], a0.this$, a1.this$, a2, a3, a4.this$);
            }

            ::org::apache::lucene::search::suggest::tst::TernaryTreeNode TSTAutocomplete::insert(const ::org::apache::lucene::search::suggest::tst::TernaryTreeNode & a0, const ::java::lang::CharSequence & a1, const ::java::lang::Object & a2, jint a3) const
            {
              return ::org::apache::lucene::search::suggest::tst::TernaryTreeNode(env->callObjectMethod(this$, mids$[mid_insert_05696b9d], a0.this$, a1.this$, a2.this$, a3));
            }

            ::java::util::ArrayList TSTAutocomplete::prefixCompletion(const ::org::apache::lucene::search::suggest::tst::TernaryTreeNode & a0, const ::java::lang::CharSequence & a1, jint a2) const
            {
              return ::java::util::ArrayList(env->callObjectMethod(this$, mids$[mid_prefixCompletion_d5365801], a0.this$, a1.this$, a2));
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace suggest {
          namespace tst {
            static PyObject *t_TSTAutocomplete_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_TSTAutocomplete_instance_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_TSTAutocomplete_balancedTree(t_TSTAutocomplete *self, PyObject *args);
            static PyObject *t_TSTAutocomplete_insert(t_TSTAutocomplete *self, PyObject *args);
            static PyObject *t_TSTAutocomplete_prefixCompletion(t_TSTAutocomplete *self, PyObject *args);

            static PyMethodDef t_TSTAutocomplete__methods_[] = {
              DECLARE_METHOD(t_TSTAutocomplete, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_TSTAutocomplete, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_TSTAutocomplete, balancedTree, METH_VARARGS),
              DECLARE_METHOD(t_TSTAutocomplete, insert, METH_VARARGS),
              DECLARE_METHOD(t_TSTAutocomplete, prefixCompletion, METH_VARARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(TSTAutocomplete, t_TSTAutocomplete, ::java::lang::Object, TSTAutocomplete, abstract_init, 0, 0, 0, 0, 0);

            void t_TSTAutocomplete::install(PyObject *module)
            {
              installType(&PY_TYPE(TSTAutocomplete), module, "TSTAutocomplete", 0);
            }

            void t_TSTAutocomplete::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(TSTAutocomplete).tp_dict, "class_", make_descriptor(TSTAutocomplete::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(TSTAutocomplete).tp_dict, "wrapfn_", make_descriptor(t_TSTAutocomplete::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(TSTAutocomplete).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_TSTAutocomplete_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, TSTAutocomplete::initializeClass, 1)))
                return NULL;
              return t_TSTAutocomplete::wrap_Object(TSTAutocomplete(((t_TSTAutocomplete *) arg)->object.this$));
            }
            static PyObject *t_TSTAutocomplete_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, TSTAutocomplete::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static PyObject *t_TSTAutocomplete_balancedTree(t_TSTAutocomplete *self, PyObject *args)
            {
              JArray< ::java::lang::Object > a0((jobject) NULL);
              JArray< ::java::lang::Object > a1((jobject) NULL);
              jint a2;
              jint a3;
              ::org::apache::lucene::search::suggest::tst::TernaryTreeNode a4((jobject) NULL);

              if (!parseArgs(args, "[o[oIIk", ::org::apache::lucene::search::suggest::tst::TernaryTreeNode::initializeClass, &a0, &a1, &a2, &a3, &a4))
              {
                OBJ_CALL(self->object.balancedTree(a0, a1, a2, a3, a4));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "balancedTree", args);
              return NULL;
            }

            static PyObject *t_TSTAutocomplete_insert(t_TSTAutocomplete *self, PyObject *args)
            {
              ::org::apache::lucene::search::suggest::tst::TernaryTreeNode a0((jobject) NULL);
              ::java::lang::CharSequence a1((jobject) NULL);
              ::java::lang::Object a2((jobject) NULL);
              jint a3;
              ::org::apache::lucene::search::suggest::tst::TernaryTreeNode result((jobject) NULL);

              if (!parseArgs(args, "kOoI", ::org::apache::lucene::search::suggest::tst::TernaryTreeNode::initializeClass, &::java::lang::PY_TYPE(CharSequence), &a0, &a1, &a2, &a3))
              {
                OBJ_CALL(result = self->object.insert(a0, a1, a2, a3));
                return ::org::apache::lucene::search::suggest::tst::t_TernaryTreeNode::wrap_Object(result);
              }

              PyErr_SetArgsError((PyObject *) self, "insert", args);
              return NULL;
            }

            static PyObject *t_TSTAutocomplete_prefixCompletion(t_TSTAutocomplete *self, PyObject *args)
            {
              ::org::apache::lucene::search::suggest::tst::TernaryTreeNode a0((jobject) NULL);
              ::java::lang::CharSequence a1((jobject) NULL);
              jint a2;
              ::java::util::ArrayList result((jobject) NULL);

              if (!parseArgs(args, "kOI", ::org::apache::lucene::search::suggest::tst::TernaryTreeNode::initializeClass, &::java::lang::PY_TYPE(CharSequence), &a0, &a1, &a2))
              {
                OBJ_CALL(result = self->object.prefixCompletion(a0, a1, a2));
                return ::java::util::t_ArrayList::wrap_Object(result, &::org::apache::lucene::search::suggest::tst::PY_TYPE(TernaryTreeNode));
              }

              PyErr_SetArgsError((PyObject *) self, "prefixCompletion", args);
              return NULL;
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/sandbox/queries/SortedSetSortField$Selector.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace sandbox {
        namespace queries {

          ::java::lang::Class *SortedSetSortField$Selector::class$ = NULL;
          jmethodID *SortedSetSortField$Selector::mids$ = NULL;
          bool SortedSetSortField$Selector::live$ = false;
          SortedSetSortField$Selector *SortedSetSortField$Selector::MAX = NULL;
          SortedSetSortField$Selector *SortedSetSortField$Selector::MIDDLE_MAX = NULL;
          SortedSetSortField$Selector *SortedSetSortField$Selector::MIDDLE_MIN = NULL;
          SortedSetSortField$Selector *SortedSetSortField$Selector::MIN = NULL;

          jclass SortedSetSortField$Selector::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/sandbox/queries/SortedSetSortField$Selector");

              mids$ = new jmethodID[max_mid];
              mids$[mid_valueOf_1826b9b5] = env->getStaticMethodID(cls, "valueOf", "(Ljava/lang/String;)Lorg/apache/lucene/sandbox/queries/SortedSetSortField$Selector;");
              mids$[mid_values_ab359d3f] = env->getStaticMethodID(cls, "values", "()[Lorg/apache/lucene/sandbox/queries/SortedSetSortField$Selector;");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              MAX = new SortedSetSortField$Selector(env->getStaticObjectField(cls, "MAX", "Lorg/apache/lucene/sandbox/queries/SortedSetSortField$Selector;"));
              MIDDLE_MAX = new SortedSetSortField$Selector(env->getStaticObjectField(cls, "MIDDLE_MAX", "Lorg/apache/lucene/sandbox/queries/SortedSetSortField$Selector;"));
              MIDDLE_MIN = new SortedSetSortField$Selector(env->getStaticObjectField(cls, "MIDDLE_MIN", "Lorg/apache/lucene/sandbox/queries/SortedSetSortField$Selector;"));
              MIN = new SortedSetSortField$Selector(env->getStaticObjectField(cls, "MIN", "Lorg/apache/lucene/sandbox/queries/SortedSetSortField$Selector;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          SortedSetSortField$Selector SortedSetSortField$Selector::valueOf(const ::java::lang::String & a0)
          {
            jclass cls = env->getClass(initializeClass);
            return SortedSetSortField$Selector(env->callStaticObjectMethod(cls, mids$[mid_valueOf_1826b9b5], a0.this$));
          }

          JArray< SortedSetSortField$Selector > SortedSetSortField$Selector::values()
          {
            jclass cls = env->getClass(initializeClass);
            return JArray< SortedSetSortField$Selector >(env->callStaticObjectMethod(cls, mids$[mid_values_ab359d3f]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace sandbox {
        namespace queries {
          static PyObject *t_SortedSetSortField$Selector_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SortedSetSortField$Selector_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SortedSetSortField$Selector_of_(t_SortedSetSortField$Selector *self, PyObject *args);
          static PyObject *t_SortedSetSortField$Selector_valueOf(PyTypeObject *type, PyObject *args);
          static PyObject *t_SortedSetSortField$Selector_values(PyTypeObject *type);
          static PyObject *t_SortedSetSortField$Selector_get__parameters_(t_SortedSetSortField$Selector *self, void *data);
          static PyGetSetDef t_SortedSetSortField$Selector__fields_[] = {
            DECLARE_GET_FIELD(t_SortedSetSortField$Selector, parameters_),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_SortedSetSortField$Selector__methods_[] = {
            DECLARE_METHOD(t_SortedSetSortField$Selector, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SortedSetSortField$Selector, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SortedSetSortField$Selector, of_, METH_VARARGS),
            DECLARE_METHOD(t_SortedSetSortField$Selector, valueOf, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_SortedSetSortField$Selector, values, METH_NOARGS | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(SortedSetSortField$Selector, t_SortedSetSortField$Selector, ::java::lang::Enum, SortedSetSortField$Selector, abstract_init, 0, 0, t_SortedSetSortField$Selector__fields_, 0, 0);
          PyObject *t_SortedSetSortField$Selector::wrap_Object(const SortedSetSortField$Selector& object, PyTypeObject *p0)
          {
            PyObject *obj = t_SortedSetSortField$Selector::wrap_Object(object);
            if (obj != NULL && obj != Py_None)
            {
              t_SortedSetSortField$Selector *self = (t_SortedSetSortField$Selector *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          PyObject *t_SortedSetSortField$Selector::wrap_jobject(const jobject& object, PyTypeObject *p0)
          {
            PyObject *obj = t_SortedSetSortField$Selector::wrap_jobject(object);
            if (obj != NULL && obj != Py_None)
            {
              t_SortedSetSortField$Selector *self = (t_SortedSetSortField$Selector *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          void t_SortedSetSortField$Selector::install(PyObject *module)
          {
            installType(&PY_TYPE(SortedSetSortField$Selector), module, "SortedSetSortField$Selector", 0);
          }

          void t_SortedSetSortField$Selector::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(SortedSetSortField$Selector).tp_dict, "class_", make_descriptor(SortedSetSortField$Selector::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(SortedSetSortField$Selector).tp_dict, "wrapfn_", make_descriptor(t_SortedSetSortField$Selector::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(SortedSetSortField$Selector).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(SortedSetSortField$Selector::initializeClass);
            PyDict_SetItemString(PY_TYPE(SortedSetSortField$Selector).tp_dict, "MAX", make_descriptor(t_SortedSetSortField$Selector::wrap_Object(*SortedSetSortField$Selector::MAX)));
            PyDict_SetItemString(PY_TYPE(SortedSetSortField$Selector).tp_dict, "MIDDLE_MAX", make_descriptor(t_SortedSetSortField$Selector::wrap_Object(*SortedSetSortField$Selector::MIDDLE_MAX)));
            PyDict_SetItemString(PY_TYPE(SortedSetSortField$Selector).tp_dict, "MIDDLE_MIN", make_descriptor(t_SortedSetSortField$Selector::wrap_Object(*SortedSetSortField$Selector::MIDDLE_MIN)));
            PyDict_SetItemString(PY_TYPE(SortedSetSortField$Selector).tp_dict, "MIN", make_descriptor(t_SortedSetSortField$Selector::wrap_Object(*SortedSetSortField$Selector::MIN)));
          }

          static PyObject *t_SortedSetSortField$Selector_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, SortedSetSortField$Selector::initializeClass, 1)))
              return NULL;
            return t_SortedSetSortField$Selector::wrap_Object(SortedSetSortField$Selector(((t_SortedSetSortField$Selector *) arg)->object.this$));
          }
          static PyObject *t_SortedSetSortField$Selector_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, SortedSetSortField$Selector::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_SortedSetSortField$Selector_of_(t_SortedSetSortField$Selector *self, PyObject *args)
          {
            if (!parseArg(args, "T", 1, &(self->parameters)))
              Py_RETURN_SELF;
            return PyErr_SetArgsError((PyObject *) self, "of_", args);
          }

          static PyObject *t_SortedSetSortField$Selector_valueOf(PyTypeObject *type, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            SortedSetSortField$Selector result((jobject) NULL);

            if (!parseArgs(args, "s", &a0))
            {
              OBJ_CALL(result = ::org::apache::lucene::sandbox::queries::SortedSetSortField$Selector::valueOf(a0));
              return t_SortedSetSortField$Selector::wrap_Object(result);
            }

            return callSuper(type, "valueOf", args, 2);
          }

          static PyObject *t_SortedSetSortField$Selector_values(PyTypeObject *type)
          {
            JArray< SortedSetSortField$Selector > result((jobject) NULL);
            OBJ_CALL(result = ::org::apache::lucene::sandbox::queries::SortedSetSortField$Selector::values());
            return JArray<jobject>(result.this$).wrap(t_SortedSetSortField$Selector::wrap_jobject);
          }
          static PyObject *t_SortedSetSortField$Selector_get__parameters_(t_SortedSetSortField$Selector *self, void *data)
          {
            return typeParameters(self->parameters, sizeof(self->parameters));
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/fa/PersianNormalizationFilterFactory.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "org/apache/lucene/analysis/util/MultiTermAwareComponent.h"
#include "java/lang/Class.h"
#include "java/util/Map.h"
#include "org/apache/lucene/analysis/fa/PersianNormalizationFilter.h"
#include "java/lang/String.h"
#include "org/apache/lucene/analysis/util/AbstractAnalysisFactory.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace fa {

          ::java::lang::Class *PersianNormalizationFilterFactory::class$ = NULL;
          jmethodID *PersianNormalizationFilterFactory::mids$ = NULL;
          bool PersianNormalizationFilterFactory::live$ = false;

          jclass PersianNormalizationFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/fa/PersianNormalizationFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4c9e2b1c] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_6e538871] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/fa/PersianNormalizationFilter;");
              mids$[mid_getMultiTermComponent_0a3f1d72] = env->getMethodID(cls, "getMultiTermComponent", "()Lorg/apache/lucene/analysis/util/AbstractAnalysisFactory;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          PersianNormalizationFilterFactory::PersianNormalizationFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_4c9e2b1c, a0.this$)) {}

          ::org::apache::lucene::analysis::fa::PersianNormalizationFilter PersianNormalizationFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::fa::PersianNormalizationFilter(env->callObjectMethod(this$, mids$[mid_create_6e538871], a0.this$));
          }

          ::org::apache::lucene::analysis::util::AbstractAnalysisFactory PersianNormalizationFilterFactory::getMultiTermComponent() const
          {
            return ::org::apache::lucene::analysis::util::AbstractAnalysisFactory(env->callObjectMethod(this$, mids$[mid_getMultiTermComponent_0a3f1d72]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace fa {
          static PyObject *t_PersianNormalizationFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PersianNormalizationFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_PersianNormalizationFilterFactory_init_(t_PersianNormalizationFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_PersianNormalizationFilterFactory_create(t_PersianNormalizationFilterFactory *self, PyObject *args);
          static PyObject *t_PersianNormalizationFilterFactory_getMultiTermComponent(t_PersianNormalizationFilterFactory *self);
          static PyObject *t_PersianNormalizationFilterFactory_get__multiTermComponent(t_PersianNormalizationFilterFactory *self, void *data);
          static PyGetSetDef t_PersianNormalizationFilterFactory__fields_[] = {
            DECLARE_GET_FIELD(t_PersianNormalizationFilterFactory, multiTermComponent),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_PersianNormalizationFilterFactory__methods_[] = {
            DECLARE_METHOD(t_PersianNormalizationFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PersianNormalizationFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PersianNormalizationFilterFactory, create, METH_VARARGS),
            DECLARE_METHOD(t_PersianNormalizationFilterFactory, getMultiTermComponent, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(PersianNormalizationFilterFactory, t_PersianNormalizationFilterFactory, ::org::apache::lucene::analysis::util::TokenFilterFactory, PersianNormalizationFilterFactory, t_PersianNormalizationFilterFactory_init_, 0, 0, t_PersianNormalizationFilterFactory__fields_, 0, 0);

          void t_PersianNormalizationFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(PersianNormalizationFilterFactory), module, "PersianNormalizationFilterFactory", 0);
          }

          void t_PersianNormalizationFilterFactory::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(PersianNormalizationFilterFactory).tp_dict, "class_", make_descriptor(PersianNormalizationFilterFactory::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(PersianNormalizationFilterFactory).tp_dict, "wrapfn_", make_descriptor(t_PersianNormalizationFilterFactory::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(PersianNormalizationFilterFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_PersianNormalizationFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, PersianNormalizationFilterFactory::initializeClass, 1)))
              return NULL;
            return t_PersianNormalizationFilterFactory::wrap_Object(PersianNormalizationFilterFactory(((t_PersianNormalizationFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_PersianNormalizationFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, PersianNormalizationFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_PersianNormalizationFilterFactory_init_(t_PersianNormalizationFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            PersianNormalizationFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = PersianNormalizationFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_PersianNormalizationFilterFactory_create(t_PersianNormalizationFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::fa::PersianNormalizationFilter result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::fa::t_PersianNormalizationFilter::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(PersianNormalizationFilterFactory), (PyObject *) self, "create", args, 2);
          }

          static PyObject *t_PersianNormalizationFilterFactory_getMultiTermComponent(t_PersianNormalizationFilterFactory *self)
          {
            ::org::apache::lucene::analysis::util::AbstractAnalysisFactory result((jobject) NULL);
            OBJ_CALL(result = self->object.getMultiTermComponent());
            return ::org::apache::lucene::analysis::util::t_AbstractAnalysisFactory::wrap_Object(result);
          }

          static PyObject *t_PersianNormalizationFilterFactory_get__multiTermComponent(t_PersianNormalizationFilterFactory *self, void *data)
          {
            ::org::apache::lucene::analysis::util::AbstractAnalysisFactory value((jobject) NULL);
            OBJ_CALL(value = self->object.getMultiTermComponent());
            return ::org::apache::lucene::analysis::util::t_AbstractAnalysisFactory::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/PrintStreamInfoStream.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "java/io/PrintStream.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *PrintStreamInfoStream::class$ = NULL;
        jmethodID *PrintStreamInfoStream::mids$ = NULL;
        bool PrintStreamInfoStream::live$ = false;

        jclass PrintStreamInfoStream::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/PrintStreamInfoStream");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_1b7c898b] = env->getMethodID(cls, "<init>", "(Ljava/io/PrintStream;)V");
            mids$[mid_init$_be16aeab] = env->getMethodID(cls, "<init>", "(Ljava/io/PrintStream;I)V");
            mids$[mid_close_54c6a166] = env->getMethodID(cls, "close", "()V");
            mids$[mid_isEnabled_5fdc3f44] = env->getMethodID(cls, "isEnabled", "(Ljava/lang/String;)Z");
            mids$[mid_isSystemStream_54c6a16a] = env->getMethodID(cls, "isSystemStream", "()Z");
            mids$[mid_message_4a264742] = env->getMethodID(cls, "message", "(Ljava/lang/String;Ljava/lang/String;)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        PrintStreamInfoStream::PrintStreamInfoStream(const ::java::io::PrintStream & a0) : ::org::apache::lucene::util::InfoStream(env->newObject(initializeClass, &mids$, mid_init$_1b7c898b, a0.this$)) {}

        PrintStreamInfoStream::PrintStreamInfoStream(const ::java::io::PrintStream & a0, jint a1) : ::org::apache::lucene::util::InfoStream(env->newObject(initializeClass, &mids$, mid_init$_be16aeab, a0.this$, a1)) {}

        void PrintStreamInfoStream::close() const
        {
          env->callVoidMethod(this$, mids$[mid_close_54c6a166]);
        }

        jboolean PrintStreamInfoStream::isEnabled(const ::java::lang::String & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_isEnabled_5fdc3f44], a0.this$);
        }

        jboolean PrintStreamInfoStream::isSystemStream() const
        {
          return env->callBooleanMethod(this$, mids$[mid_isSystemStream_54c6a16a]);
        }

        void PrintStreamInfoStream::message(const ::java::lang::String & a0, const ::java::lang::String & a1) const
        {
          env->callVoidMethod(this$, mids$[mid_message_4a264742], a0.this$, a1.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_PrintStreamInfoStream_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_PrintStreamInfoStream_instance_(PyTypeObject *type, PyObject *arg);
        static int t_PrintStreamInfoStream_init_(t_PrintStreamInfoStream *self, PyObject *args, PyObject *kwds);
        static PyObject *t_PrintStreamInfoStream_close(t_PrintStreamInfoStream *self, PyObject *args);
        static PyObject *t_PrintStreamInfoStream_isEnabled(t_PrintStreamInfoStream *self, PyObject *args);
        static PyObject *t_PrintStreamInfoStream_isSystemStream(t_PrintStreamInfoStream *self);
        static PyObject *t_PrintStreamInfoStream_message(t_PrintStreamInfoStream *self, PyObject *args);
        static PyObject *t_PrintStreamInfoStream_get__systemStream(t_PrintStreamInfoStream *self, void *data);
        static PyGetSetDef t_PrintStreamInfoStream__fields_[] = {
          DECLARE_GET_FIELD(t_PrintStreamInfoStream, systemStream),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_PrintStreamInfoStream__methods_[] = {
          DECLARE_METHOD(t_PrintStreamInfoStream, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PrintStreamInfoStream, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PrintStreamInfoStream, close, METH_VARARGS),
          DECLARE_METHOD(t_PrintStreamInfoStream, isEnabled, METH_VARARGS),
          DECLARE_METHOD(t_PrintStreamInfoStream, isSystemStream, METH_NOARGS),
          DECLARE_METHOD(t_PrintStreamInfoStream, message, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(PrintStreamInfoStream, t_PrintStreamInfoStream, ::org::apache::lucene::util::InfoStream, PrintStreamInfoStream, t_PrintStreamInfoStream_init_, 0, 0, t_PrintStreamInfoStream__fields_, 0, 0);

        void t_PrintStreamInfoStream::install(PyObject *module)
        {
          installType(&PY_TYPE(PrintStreamInfoStream), module, "PrintStreamInfoStream", 0);
        }

        void t_PrintStreamInfoStream::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(PrintStreamInfoStream).tp_dict, "class_", make_descriptor(PrintStreamInfoStream::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(PrintStreamInfoStream).tp_dict, "wrapfn_", make_descriptor(t_PrintStreamInfoStream::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(PrintStreamInfoStream).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_PrintStreamInfoStream_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, PrintStreamInfoStream::initializeClass, 1)))
            return NULL;
          return t_PrintStreamInfoStream::wrap_Object(PrintStreamInfoStream(((t_PrintStreamInfoStream *) arg)->object.this$));
        }
        static PyObject *t_PrintStreamInfoStream_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, PrintStreamInfoStream::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_PrintStreamInfoStream_init_(t_PrintStreamInfoStream *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              ::java::io::PrintStream a0((jobject) NULL);
              PrintStreamInfoStream object((jobject) NULL);

              if (!parseArgs(args, "k", ::java::io::PrintStream::initializeClass, &a0))
              {
                INT_CALL(object = PrintStreamInfoStream(a0));
                self->object = object;
                break;
              }
            }
            goto err;
           case 2:
            {
              ::java::io::PrintStream a0((jobject) NULL);
              jint a1;
              PrintStreamInfoStream object((jobject) NULL);

              if (!parseArgs(args, "kI", ::java::io::PrintStream::initializeClass, &a0, &a1))
              {
                INT_CALL(object = PrintStreamInfoStream(a0, a1));
                self->object = object;
                break;
              }
            }
           default:
           err:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_PrintStreamInfoStream_close(t_PrintStreamInfoStream *self, PyObject *args)
        {

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(self->object.close());
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(PrintStreamInfoStream), (PyObject *) self, "close", args, 2);
        }

        static PyObject *t_PrintStreamInfoStream_isEnabled(t_PrintStreamInfoStream *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = self->object.isEnabled(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(PrintStreamInfoStream), (PyObject *) self, "isEnabled", args, 2);
        }

        static PyObject *t_PrintStreamInfoStream_isSystemStream(t_PrintStreamInfoStream *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.isSystemStream());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_PrintStreamInfoStream_message(t_PrintStreamInfoStream *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::java::lang::String a1((jobject) NULL);

          if (!parseArgs(args, "ss", &a0, &a1))
          {
            OBJ_CALL(self->object.message(a0, a1));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(PrintStreamInfoStream), (PyObject *) self, "message", args, 2);
        }

        static PyObject *t_PrintStreamInfoStream_get__systemStream(t_PrintStreamInfoStream *self, void *data)
        {
          jboolean value;
          OBJ_CALL(value = self->object.isSystemStream());
          Py_RETURN_BOOL(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "java/util/Arrays.h"
#include "java/util/Spliterator$OfDouble.h"
#include "java/util/Spliterator$OfInt.h"
#include "java/lang/Comparable.h"
#include "java/util/Spliterator$OfLong.h"
#include "java/lang/Class.h"
#include "java/util/Spliterator.h"
#include "java/util/Comparator.h"
#include "java/lang/String.h"
#include "java/util/List.h"
#include "JArray.h"

namespace java {
  namespace util {

    ::java::lang::Class *Arrays::class$ = NULL;
    jmethodID *Arrays::mids$ = NULL;
    bool Arrays::live$ = false;

    jclass Arrays::initializeClass(bool getOnly)
    {
      if (getOnly)
        return (jclass) (live$ ? class$->this$ : NULL);
      if (class$ == NULL)
      {
        jclass cls = (jclass) env->findClass("java/util/Arrays");

        mids$ = new jmethodID[max_mid];
        mids$[mid_asList_b1a4e262] = env->getStaticMethodID(cls, "asList", "([Ljava/lang/Object;)Ljava/util/List;");
        mids$[mid_binarySearch_c36b04d7] = env->getStaticMethodID(cls, "binarySearch", "([FF)I");
        mids$[mid_binarySearch_1da92101] = env->getStaticMethodID(cls, "binarySearch", "([Ljava/lang/Object;Ljava/lang/Object;)I");
        mids$[mid_binarySearch_8f13b3af] = env->getStaticMethodID(cls, "binarySearch", "([BB)I");
        mids$[mid_binarySearch_e6fbc3d5] = env->getStaticMethodID(cls, "binarySearch", "([SS)I");
        mids$[mid_binarySearch_4c830bcf] = env->getStaticMethodID(cls, "binarySearch", "([JJ)I");
        mids$[mid_binarySearch_d6ab1c2f] = env->getStaticMethodID(cls, "binarySearch", "([DD)I");
        mids$[mid_binarySearch_df726439] = env->getStaticMethodID(cls, "binarySearch", "([II)I");
        mids$[mid_binarySearch_ea67e195] = env->getStaticMethodID(cls, "binarySearch", "([CC)I");
        mids$[mid_binarySearch_736a8636] = env->getStaticMethodID(cls, "binarySearch", "([Ljava/lang/Object;Ljava/lang/Object;Ljava/util/Comparator;)I");
        mids$[mid_binarySearch_c8914cef] = env->getStaticMethodID(cls, "binarySearch", "([JIIJ)I");
        mids$[mid_binarySearch_1e4305af] = env->getStaticMethodID(cls, "binarySearch", "([BIIB)I");
        mids$[mid_binarySearch_b3c1f717] = env->getStaticMethodID(cls, "binarySearch", "([FIIF)I");
        mids$[mid_binarySearch_dee75d29] = env->getStaticMethodID(cls, "binarySearch", "([Ljava/lang/Object;IILjava/lang/Object;)I");
        mids$[mid_binarySearch_695adc4b] = env->getStaticMethodID(cls, "binarySearch", "([DIID)I");
        mids$[mid_binarySearch_4f5bed95] = env->getStaticMethodID(cls, "binarySearch", "([SIIS)I");
        mids$[mid_binarySearch_b5b4fc35] = env->getStaticMethodID(cls, "binarySearch", "([CIIC)I");
        mids$[mid_binarySearch_4eae659d] = env->getStaticMethodID(cls, "binarySearch", "([IIII)I");
        mids$[mid_binarySearch_07be7c2a] = env->getStaticMethodID(cls, "binarySearch", "([Ljava/lang/Object;IILjava/lang/Object;Ljava/util/Comparator;)I");
        mids$[mid_copyOf_d090ee39] = env->getStaticMethodID(cls, "copyOf", "([SI)[S");
        mids$[mid_copyOf_91cb90f9] = env->getStaticMethodID(cls, "copyOf", "([CI)[C");
        mids$[mid_copyOf_0f9a030d] = env->getStaticMethodID(cls, "copyOf", "([JI)[J");
        mids$[mid_copyOf_e2c1f835] = env->getStaticMethodID(cls, "copyOf", "([DI)[D");
        mids$[mid_copyOf_6bd5869d] = env->getStaticMethodID(cls, "copyOf", "([BI)[B");
        mids$[mid_copyOf_669ee2d1] = env->getStaticMethodID(cls, "copyOf", "([Ljava/lang/Object;I)[Ljava/lang/Object;");
        mids$[mid_copyOf_d766d189] = env->getStaticMethodID(cls, "copyOf", "([II)[I");
        mids$[mid_copyOf_a415095d] = env->getStaticMethodID(cls, "copyOf", "([FI)[F");
        mids$[mid_copyOf_1fbccced] = env->getStaticMethodID(cls, "copyOf", "([ZI)[Z");
        mids$[mid_copyOf_3608f1f7] = env->getStaticMethodID(cls, "copyOf", "([Ljava/lang/Object;ILjava/lang/Class;)[Ljava/lang/Object;");
        mids$[mid_copyOfRange_16e37a35] = env->getStaticMethodID(cls, "copyOfRange", "([FII)[F");
        mids$[mid_copyOfRange_b92120ff] = env->getStaticMethodID(cls, "copyOfRange", "([Ljava/lang/Object;II)[Ljava/lang/Object;");
        mids$[mid_copyOfRange_bb313e1d] = env->getStaticMethodID(cls, "copyOfRange", "([DII)[D");
        mids$[mid_copyOfRange_96b1a95f] = env->getStaticMethodID(cls, "copyOfRange", "([CII)[C");
        mids$[mid_copyOfRange_3d448975] = env->getStaticMethodID(cls, "copyOfRange", "([BII)[B");
        mids$[mid_copyOfRange_a80c3bb3] = env->getStaticMethodID(cls, "copyOfRange", "([III)[I");
        mids$[mid_copyOfRange_be4afb45] = env->getStaticMethodID(cls, "copyOfRange", "([JII)[J");
        mids$[mid_copyOfRange_9766cdc5] = env->getStaticMethodID(cls, "copyOfRange", "([ZII)[Z");
        mids$[mid_copyOfRange_3a8237ff] = env->getStaticMethodID(cls, "copyOfRange", "([SII)[S");
        mids$[mid_copyOfRange_bca17599] = env->getStaticMethodID(cls, "copyOfRange", "([Ljava/lang/Object;IILjava/lang/Class;)[Ljava/lang/Object;");
        mids$[mid_deepEquals_a9ca87d2] = env->getStaticMethodID(cls, "deepEquals", "([Ljava/lang/Object;[Ljava/lang/Object;)Z");
        mids$[mid_deepHashCode_c0f5dac5] = env->getStaticMethodID(cls, "deepHashCode", "([Ljava/lang/Object;)I");
        mids$[mid_deepToString_02ea1cdd] = env->getStaticMethodID(cls, "deepToString", "([Ljava/lang/Object;)Ljava/lang/String;");
        mids$[mid_equals_a9ca87d2] = env->getStaticMethodID(cls, "equals", "([Ljava/lang/Object;[Ljava/lang/Object;)Z");
        mids$[mid_equals_7868d93a] = env->getStaticMethodID(cls, "equals", "([S[S)Z");
        mids$[mid_equals_6f6949ea] = env->getStaticMethodID(cls, "equals", "([Z[Z)Z");
        mids$[mid_equals_e3842e2a] = env->getStaticMethodID(cls, "equals", "([J[J)Z");
        mids$[mid_equals_2a42df9a] = env->getStaticMethodID(cls, "equals", "([C[C)Z");
        mids$[mid_equals_7c26725e] = env->getStaticMethodID(cls, "equals", "([I[I)Z");
        mids$[mid_equals_38a3e932] = env->getStaticMethodID(cls, "equals", "([F[F)Z");
        mids$[mid_equals_a2d8877a] = env->getStaticMethodID(cls, "equals", "([B[B)Z");
        mids$[mid_equals_2383bf16] = env->getStaticMethodID(cls, "equals", "([D[D)Z");
        mids$[mid_fill_8f13b3b0] = env->getStaticMethodID(cls, "fill", "([BB)V");
        mids$[mid_fill_e6fbc3ca] = env->getStaticMethodID(cls, "fill", "([SS)V");
        mids$[mid_fill_c36b04c8] = env->getStaticMethodID(cls, "fill", "([FF)V");
        mids$[mid_fill_1da9211e] = env->getStaticMethodID(cls, "fill", "([Ljava/lang/Object;Ljava/lang/Object;)V");
        mids$[mid_fill_ea67e18a] = env->getStaticMethodID(cls, "fill", "([CC)V");
        mids$[mid_fill_4c830bd0] = env->getStaticMethodID(cls, "fill", "([JJ)V");
        mids$[mid_fill_d6ab1c30] = env->getStaticMethodID(cls, "fill", "([DD)V");
        mids$[mid_fill_df726426] = env->getStaticMethodID(cls, "fill", "([II)V");
        mids$[mid_fill_ad7155b0] = env->getStaticMethodID(cls, "fill", "([ZZ)V");
        mids$[mid_fill_b5b4fc2a] = env->getStaticMethodID(cls, "fill", "([CIIC)V");
        mids$[mid_fill_b3c1f708] = env->getStaticMethodID(cls, "fill", "([FIIF)V");
        mids$[mid_fill_c8914cf0] = env->getStaticMethodID(cls, "fill", "([JIIJ)V");
        mids$[mid_fill_77210c30] = env->getStaticMethodID(cls, "fill", "([ZIIZ)V");
        mids$[mid_fill_dee75d36] = env->getStaticMethodID(cls, "fill", "([Ljava/lang/Object;IILjava/lang/Object;)V");
        mids$[mid_fill_4f5bed8a] = env->getStaticMethodID(cls, "fill", "([SIIS)V");
        mids$[mid_fill_1e4305b0] = env->getStaticMethodID(cls, "fill", "([BIIB)V");
        mids$[mid_fill_4eae6582] = env->getStaticMethodID(cls, "fill", "([IIII)V");
        mids$[mid_fill_695adc54] = env->getStaticMethodID(cls, "fill", "([DIID)V");
        mids$[mid_hashCode_f0c5b9dc] = env->getStaticMethodID(cls, "hashCode", "([Z)I");
        mids$[mid_hashCode_9ceb500c] = env->getStaticMethodID(cls, "hashCode", "([J)I");
        mids$[mid_hashCode_49b4f134] = env->getStaticMethodID(cls, "hashCode", "([B)I");
        mids$[mid_hashCode_700e23c9] = env->getStaticMethodID(cls, "hashCode", "([C)I");
        mids$[mid_hashCode_c017fc59] = env->getStaticMethodID(cls, "hashCode", "([S)I");
        mids$[mid_hashCode_f3b62cc6] = env->getStaticMethodID(cls, "hashCode", "([D)I");
        mids$[mid_hashCode_9cc34320] = env->getStaticMethodID(cls, "hashCode", "([F)I");
        mids$[mid_hashCode_1efc2017] = env->getStaticMethodID(cls, "hashCode", "([I)I");
        mids$[mid_hashCode_c0f5dac5] = env->getStaticMethodID(cls, "hashCode", "([Ljava/lang/Object;)I");
        mids$[mid_parallelSort_01dac18d] = env->getStaticMethodID(cls, "parallelSort", "([Ljava/lang/Comparable;)V");
        mids$[mid_parallelSort_9cc3433f] = env->getStaticMethodID(cls, "parallelSort", "([F)V");
        mids$[mid_parallelSort_f3b62cd9] = env->getStaticMethodID(cls, "parallelSort", "([D)V");
        mids$[mid_parallelSort_49b4f12b] = env->getStaticMethodID(cls, "parallelSort", "([B)V");
        mids$[mid_parallelSort_700e23d6] = env->getStaticMethodID(cls, "parallelSort", "([C)V");
        mids$[mid_parallelSort_9ceb5013] = env->getStaticMethodID(cls, "parallelSort", "([J)V");
        mids$[mid_parallelSort_1efc2008] = env->getStaticMethodID(cls, "parallelSort", "([I)V");
        mids$[mid_parallelSort_c017fc46] = env->getStaticMethodID(cls, "parallelSort", "([S)V");
        mids$[mid_parallelSort_8c46d789] = env->getStaticMethodID(cls, "parallelSort", "([Ljava/lang/Object;Ljava/util/Comparator;)V");
        mids$[mid_parallelSort_6ae021e7] = env->getStaticMethodID(cls, "parallelSort", "([JII)V");
        mids$[mid_parallelSort_266f4139] = env->getStaticMethodID(cls, "parallelSort", "([Ljava/lang/Comparable;II)V");
        mids$[mid_parallelSort_3be2c5d1] = env->getStaticMethodID(cls, "parallelSort", "([DII)V");
        mids$[mid_parallelSort_c8bd2f63] = env->getStaticMethodID(cls, "parallelSort", "([FII)V");
        mids$[mid_parallelSort_3e1ea22c] = env->getStaticMethodID(cls, "parallelSort", "([III)V");
        mids$[mid_parallelSort_6f0bb356] = env->getStaticMethodID(cls, "parallelSort", "([CII)V");
        mids$[mid_parallelSort_b389e986] = env->getStaticMethodID(cls, "parallelSort", "([SII)V");
        mids$[mid_parallelSort_86f4435f] = env->getStaticMethodID(cls, "parallelSort", "([BII)V");
        mids$[mid_parallelSort_7c263389] = env->getStaticMethodID(cls, "parallelSort", "([Ljava/lang/Object;IILjava/util/Comparator;)V");
        mids$[mid_sort_9cc3433f] = env->getStaticMethodID(cls, "sort", "([F)V");
        mids$[mid_sort_f3b62cd9] = env->getStaticMethodID(cls, "sort", "([D)V");
        mids$[mid_sort_700e23d6] = env->getStaticMethodID(cls, "sort", "([C)V");
        mids$[mid_sort_c0f5dada] = env->getStaticMethodID(cls, "sort", "([Ljava/lang/Object;)V");
        mids$[mid_sort_49b4f12b] = env->getStaticMethodID(cls, "sort", "([B)V");
        mids$[mid_sort_9ceb5013] = env->getStaticMethodID(cls, "sort", "([J)V");
        mids$[mid_sort_c017fc46] = env->getStaticMethodID(cls, "sort", "([S)V");
        mids$[mid_sort_1efc2008] = env->getStaticMethodID(cls, "sort", "([I)V");
        mids$[mid_sort_8c46d789] = env->getStaticMethodID(cls, "sort", "([Ljava/lang/Object;Ljava/util/Comparator;)V");
        mids$[mid_sort_b389e986] = env->getStaticMethodID(cls, "sort", "([SII)V");
        mids$[mid_sort_3e1ea22c] = env->getStaticMethodID(cls, "sort", "([III)V");
        mids$[mid_sort_c8bd2f63] = env->getStaticMethodID(cls, "sort", "([FII)V");
        mids$[mid_sort_86f4435f] = env->getStaticMethodID(cls, "sort", "([BII)V");
        mids$[mid_sort_6f0bb356] = env->getStaticMethodID(cls, "sort", "([CII)V");
        mids$[mid_sort_3be2c5d1] = env->getStaticMethodID(cls, "sort", "([DII)V");
        mids$[mid_sort_6ae021e7] = env->getStaticMethodID(cls, "sort", "([JII)V");
        mids$[mid_sort_4172dade] = env->getStaticMethodID(cls, "sort", "([Ljava/lang/Object;II)V");
        mids$[mid_sort_7c263389] = env->getStaticMethodID(cls, "sort", "([Ljava/lang/Object;IILjava/util/Comparator;)V");
        mids$[mid_spliterator_eb34d33a] = env->getStaticMethodID(cls, "spliterator", "([D)Ljava/util/Spliterator$OfDouble;");
        mids$[mid_spliterator_24b4ecc4] = env->getStaticMethodID(cls, "spliterator", "([Ljava/lang/Object;)Ljava/util/Spliterator;");
        mids$[mid_spliterator_a4f55b95] = env->getStaticMethodID(cls, "spliterator", "([J)Ljava/util/Spliterator$OfLong;");
        mids$[mid_spliterator_8c25906e] = env->getStaticMethodID(cls, "spliterator", "([I)Ljava/util/Spliterator$OfInt;");
        mids$[mid_spliterator_218f8c32] = env->getStaticMethodID(cls, "spliterator", "([DII)Ljava/util/Spliterator$OfDouble;");
        mids$[mid_spliterator_90ced414] = env->getStaticMethodID(cls, "spliterator", "([Ljava/lang/Object;II)Ljava/util/Spliterator;");
        mids$[mid_spliterator_fb0d86ad] = env->getStaticMethodID(cls, "spliterator", "([JII)Ljava/util/Spliterator$OfLong;");
        mids$[mid_spliterator_552485d2] = env->getStaticMethodID(cls, "spliterator", "([III)Ljava/util/Spliterator$OfInt;");
        mids$[mid_toString_08b6580a] = env->getStaticMethodID(cls, "toString", "([F)Ljava/lang/String;");
        mids$[mid_toString_c783d655] = env->getStaticMethodID(cls, "toString", "([C)Ljava/lang/String;");
        mids$[mid_toString_9352a4bc] = env->getStaticMethodID(cls, "toString", "([D)Ljava/lang/String;");
        mids$[mid_toString_aeceff45] = env->getStaticMethodID(cls, "toString", "([S)Ljava/lang/String;");
        mids$[mid_toString_14e8bbde] = env->getStaticMethodID(cls, "toString", "([Z)Ljava/lang/String;");
        mids$[mid_toString_0f6e0f86] = env->getStaticMethodID(cls, "toString", "([B)Ljava/lang/String;");
        mids$[mid_toString_02ea1cdd] = env->getStaticMethodID(cls, "toString", "([Ljava/lang/Object;)Ljava/lang/String;");
        mids$[mid_toString_053bf1ae] = env->getStaticMethodID(cls, "toString", "([J)Ljava/lang/String;");
        mids$[mid_toString_9570afaf] = env->getStaticMethodID(cls, "toString", "([I)Ljava/lang/String;");

        class$ = (::java::lang::Class *) new JObject(cls);
        live$ = true;
      }
      return (jclass) class$->this$;
    }

    ::java::util::List Arrays::asList(const JArray< ::java::lang::Object > & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::util::List(env->callStaticObjectMethod(cls, mids$[mid_asList_b1a4e262], a0.this$));
    }

    jint Arrays::binarySearch(const JArray< jfloat > & a0, jfloat a1)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_binarySearch_c36b04d7], a0.this$, a1);
    }

    jint Arrays::binarySearch(const JArray< ::java::lang::Object > & a0, const ::java::lang::Object & a1)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_binarySearch_1da92101], a0.this$, a1.this$);
    }

    jint Arrays::binarySearch(const JArray< jbyte > & a0, jbyte a1)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_binarySearch_8f13b3af], a0.this$, a1);
    }

    jint Arrays::binarySearch(const JArray< jshort > & a0, jshort a1)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_binarySearch_e6fbc3d5], a0.this$, a1);
    }

    jint Arrays::binarySearch(const JArray< jlong > & a0, jlong a1)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_binarySearch_4c830bcf], a0.this$, a1);
    }

    jint Arrays::binarySearch(const JArray< jdouble > & a0, jdouble a1)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_binarySearch_d6ab1c2f], a0.this$, a1);
    }

    jint Arrays::binarySearch(const JArray< jint > & a0, jint a1)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_binarySearch_df726439], a0.this$, a1);
    }

    jint Arrays::binarySearch(const JArray< jchar > & a0, jchar a1)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_binarySearch_ea67e195], a0.this$, a1);
    }

    jint Arrays::binarySearch(const JArray< ::java::lang::Object > & a0, const ::java::lang::Object & a1, const ::java::util::Comparator & a2)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_binarySearch_736a8636], a0.this$, a1.this$, a2.this$);
    }

    jint Arrays::binarySearch(const JArray< jlong > & a0, jint a1, jint a2, jlong a3)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_binarySearch_c8914cef], a0.this$, a1, a2, a3);
    }

    jint Arrays::binarySearch(const JArray< jbyte > & a0, jint a1, jint a2, jbyte a3)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_binarySearch_1e4305af], a0.this$, a1, a2, a3);
    }

    jint Arrays::binarySearch(const JArray< jfloat > & a0, jint a1, jint a2, jfloat a3)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_binarySearch_b3c1f717], a0.this$, a1, a2, a3);
    }

    jint Arrays::binarySearch(const JArray< ::java::lang::Object > & a0, jint a1, jint a2, const ::java::lang::Object & a3)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_binarySearch_dee75d29], a0.this$, a1, a2, a3.this$);
    }

    jint Arrays::binarySearch(const JArray< jdouble > & a0, jint a1, jint a2, jdouble a3)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_binarySearch_695adc4b], a0.this$, a1, a2, a3);
    }

    jint Arrays::binarySearch(const JArray< jshort > & a0, jint a1, jint a2, jshort a3)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_binarySearch_4f5bed95], a0.this$, a1, a2, a3);
    }

    jint Arrays::binarySearch(const JArray< jchar > & a0, jint a1, jint a2, jchar a3)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_binarySearch_b5b4fc35], a0.this$, a1, a2, a3);
    }

    jint Arrays::binarySearch(const JArray< jint > & a0, jint a1, jint a2, jint a3)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_binarySearch_4eae659d], a0.this$, a1, a2, a3);
    }

    jint Arrays::binarySearch(const JArray< ::java::lang::Object > & a0, jint a1, jint a2, const ::java::lang::Object & a3, const ::java::util::Comparator & a4)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_binarySearch_07be7c2a], a0.this$, a1, a2, a3.this$, a4.this$);
    }

    JArray< jshort > Arrays::copyOf(const JArray< jshort > & a0, jint a1)
    {
      jclass cls = env->getClass(initializeClass);
      return JArray< jshort >(env->callStaticObjectMethod(cls, mids$[mid_copyOf_d090ee39], a0.this$, a1));
    }

    JArray< jchar > Arrays::copyOf(const JArray< jchar > & a0, jint a1)
    {
      jclass cls = env->getClass(initializeClass);
      return JArray< jchar >(env->callStaticObjectMethod(cls, mids$[mid_copyOf_91cb90f9], a0.this$, a1));
    }

    JArray< jlong > Arrays::copyOf(const JArray< jlong > & a0, jint a1)
    {
      jclass cls = env->getClass(initializeClass);
      return JArray< jlong >(env->callStaticObjectMethod(cls, mids$[mid_copyOf_0f9a030d], a0.this$, a1));
    }

    JArray< jdouble > Arrays::copyOf(const JArray< jdouble > & a0, jint a1)
    {
      jclass cls = env->getClass(initializeClass);
      return JArray< jdouble >(env->callStaticObjectMethod(cls, mids$[mid_copyOf_e2c1f835], a0.this$, a1));
    }

    JArray< jbyte > Arrays::copyOf(const JArray< jbyte > & a0, jint a1)
    {
      jclass cls = env->getClass(initializeClass);
      return JArray< jbyte >(env->callStaticObjectMethod(cls, mids$[mid_copyOf_6bd5869d], a0.this$, a1));
    }

    JArray< ::java::lang::Object > Arrays::copyOf(const JArray< ::java::lang::Object > & a0, jint a1)
    {
      jclass cls = env->getClass(initializeClass);
      return JArray< ::java::lang::Object >(env->callStaticObjectMethod(cls, mids$[mid_copyOf_669ee2d1], a0.this$, a1));
    }

    JArray< jint > Arrays::copyOf(const JArray< jint > & a0, jint a1)
    {
      jclass cls = env->getClass(initializeClass);
      return JArray< jint >(env->callStaticObjectMethod(cls, mids$[mid_copyOf_d766d189], a0.this$, a1));
    }

    JArray< jfloat > Arrays::copyOf(const JArray< jfloat > & a0, jint a1)
    {
      jclass cls = env->getClass(initializeClass);
      return JArray< jfloat >(env->callStaticObjectMethod(cls, mids$[mid_copyOf_a415095d], a0.this$, a1));
    }

    JArray< jboolean > Arrays::copyOf(const JArray< jboolean > & a0, jint a1)
    {
      jclass cls = env->getClass(initializeClass);
      return JArray< jboolean >(env->callStaticObjectMethod(cls, mids$[mid_copyOf_1fbccced], a0.this$, a1));
    }

    JArray< ::java::lang::Object > Arrays::copyOf(const JArray< ::java::lang::Object > & a0, jint a1, const ::java::lang::Class & a2)
    {
      jclass cls = env->getClass(initializeClass);
      return JArray< ::java::lang::Object >(env->callStaticObjectMethod(cls, mids$[mid_copyOf_3608f1f7], a0.this$, a1, a2.this$));
    }

    JArray< jfloat > Arrays::copyOfRange(const JArray< jfloat > & a0, jint a1, jint a2)
    {
      jclass cls = env->getClass(initializeClass);
      return JArray< jfloat >(env->callStaticObjectMethod(cls, mids$[mid_copyOfRange_16e37a35], a0.this$, a1, a2));
    }

    JArray< ::java::lang::Object > Arrays::copyOfRange(const JArray< ::java::lang::Object > & a0, jint a1, jint a2)
    {
      jclass cls = env->getClass(initializeClass);
      return JArray< ::java::lang::Object >(env->callStaticObjectMethod(cls, mids$[mid_copyOfRange_b92120ff], a0.this$, a1, a2));
    }

    JArray< jdouble > Arrays::copyOfRange(const JArray< jdouble > & a0, jint a1, jint a2)
    {
      jclass cls = env->getClass(initializeClass);
      return JArray< jdouble >(env->callStaticObjectMethod(cls, mids$[mid_copyOfRange_bb313e1d], a0.this$, a1, a2));
    }

    JArray< jchar > Arrays::copyOfRange(const JArray< jchar > & a0, jint a1, jint a2)
    {
      jclass cls = env->getClass(initializeClass);
      return JArray< jchar >(env->callStaticObjectMethod(cls, mids$[mid_copyOfRange_96b1a95f], a0.this$, a1, a2));
    }

    JArray< jbyte > Arrays::copyOfRange(const JArray< jbyte > & a0, jint a1, jint a2)
    {
      jclass cls = env->getClass(initializeClass);
      return JArray< jbyte >(env->callStaticObjectMethod(cls, mids$[mid_copyOfRange_3d448975], a0.this$, a1, a2));
    }

    JArray< jint > Arrays::copyOfRange(const JArray< jint > & a0, jint a1, jint a2)
    {
      jclass cls = env->getClass(initializeClass);
      return JArray< jint >(env->callStaticObjectMethod(cls, mids$[mid_copyOfRange_a80c3bb3], a0.this$, a1, a2));
    }

    JArray< jlong > Arrays::copyOfRange(const JArray< jlong > & a0, jint a1, jint a2)
    {
      jclass cls = env->getClass(initializeClass);
      return JArray< jlong >(env->callStaticObjectMethod(cls, mids$[mid_copyOfRange_be4afb45], a0.this$, a1, a2));
    }

    JArray< jboolean > Arrays::copyOfRange(const JArray< jboolean > & a0, jint a1, jint a2)
    {
      jclass cls = env->getClass(initializeClass);
      return JArray< jboolean >(env->callStaticObjectMethod(cls, mids$[mid_copyOfRange_9766cdc5], a0.this$, a1, a2));
    }

    JArray< jshort > Arrays::copyOfRange(const JArray< jshort > & a0, jint a1, jint a2)
    {
      jclass cls = env->getClass(initializeClass);
      return JArray< jshort >(env->callStaticObjectMethod(cls, mids$[mid_copyOfRange_3a8237ff], a0.this$, a1, a2));
    }

    JArray< ::java::lang::Object > Arrays::copyOfRange(const JArray< ::java::lang::Object > & a0, jint a1, jint a2, const ::java::lang::Class & a3)
    {
      jclass cls = env->getClass(initializeClass);
      return JArray< ::java::lang::Object >(env->callStaticObjectMethod(cls, mids$[mid_copyOfRange_bca17599], a0.this$, a1, a2, a3.this$));
    }

    jboolean Arrays::deepEquals(const JArray< ::java::lang::Object > & a0, const JArray< ::java::lang::Object > & a1)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticBooleanMethod(cls, mids$[mid_deepEquals_a9ca87d2], a0.this$, a1.this$);
    }

    jint Arrays::deepHashCode(const JArray< ::java::lang::Object > & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_deepHashCode_c0f5dac5], a0.this$);
    }

    ::java::lang::String Arrays::deepToString(const JArray< ::java::lang::Object > & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::lang::String(env->callStaticObjectMethod(cls, mids$[mid_deepToString_02ea1cdd], a0.this$));
    }

    jboolean Arrays::equals(const JArray< ::java::lang::Object > & a0, const JArray< ::java::lang::Object > & a1)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticBooleanMethod(cls, mids$[mid_equals_a9ca87d2], a0.this$, a1.this$);
    }

    jboolean Arrays::equals(const JArray< jshort > & a0, const JArray< jshort > & a1)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticBooleanMethod(cls, mids$[mid_equals_7868d93a], a0.this$, a1.this$);
    }

    jboolean Arrays::equals(const JArray< jboolean > & a0, const JArray< jboolean > & a1)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticBooleanMethod(cls, mids$[mid_equals_6f6949ea], a0.this$, a1.this$);
    }

    jboolean Arrays::equals(const JArray< jlong > & a0, const JArray< jlong > & a1)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticBooleanMethod(cls, mids$[mid_equals_e3842e2a], a0.this$, a1.this$);
    }

    jboolean Arrays::equals(const JArray< jchar > & a0, const JArray< jchar > & a1)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticBooleanMethod(cls, mids$[mid_equals_2a42df9a], a0.this$, a1.this$);
    }

    jboolean Arrays::equals(const JArray< jint > & a0, const JArray< jint > & a1)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticBooleanMethod(cls, mids$[mid_equals_7c26725e], a0.this$, a1.this$);
    }

    jboolean Arrays::equals(const JArray< jfloat > & a0, const JArray< jfloat > & a1)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticBooleanMethod(cls, mids$[mid_equals_38a3e932], a0.this$, a1.this$);
    }

    jboolean Arrays::equals(const JArray< jbyte > & a0, const JArray< jbyte > & a1)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticBooleanMethod(cls, mids$[mid_equals_a2d8877a], a0.this$, a1.this$);
    }

    jboolean Arrays::equals(const JArray< jdouble > & a0, const JArray< jdouble > & a1)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticBooleanMethod(cls, mids$[mid_equals_2383bf16], a0.this$, a1.this$);
    }

    void Arrays::fill(const JArray< jbyte > & a0, jbyte a1)
    {
      jclass cls = env->getClass(initializeClass);
      env->callStaticVoidMethod(cls, mids$[mid_fill_8f13b3b0], a0.this$, a1);
    }

    void Arrays::fill(const JArray< jshort > & a0, jshort a1)
    {
      jclass cls = env->getClass(initializeClass);
      env->callStaticVoidMethod(cls, mids$[mid_fill_e6fbc3ca], a0.this$, a1);
    }

    void Arrays::fill(const JArray< jfloat > & a0, jfloat a1)
    {
      jclass cls = env->getClass(initializeClass);
      env->callStaticVoidMethod(cls, mids$[mid_fill_c36b04c8], a0.this$, a1);
    }

    void Arrays::fill(const JArray< ::java::lang::Object > & a0, const ::java::lang::Object & a1)
    {
      jclass cls = env->getClass(initializeClass);
      env->callStaticVoidMethod(cls, mids$[mid_fill_1da9211e], a0.this$, a1.this$);
    }

    void Arrays::fill(const JArray< jchar > & a0, jchar a1)
    {
      jclass cls = env->getClass(initializeClass);
      env->callStaticVoidMethod(cls, mids$[mid_fill_ea67e18a], a0.this$, a1);
    }

    void Arrays::fill(const JArray< jlong > & a0, jlong a1)
    {
      jclass cls = env->getClass(initializeClass);
      env->callStaticVoidMethod(cls, mids$[mid_fill_4c830bd0], a0.this$, a1);
    }

    void Arrays::fill(const JArray< jdouble > & a0, jdouble a1)
    {
      jclass cls = env->getClass(initializeClass);
      env->callStaticVoidMethod(cls, mids$[mid_fill_d6ab1c30], a0.this$, a1);
    }

    void Arrays::fill(const JArray< jint > & a0, jint a1)
    {
      jclass cls = env->getClass(initializeClass);
      env->callStaticVoidMethod(cls, mids$[mid_fill_df726426], a0.this$, a1);
    }

    void Arrays::fill(const JArray< jboolean > & a0, jboolean a1)
    {
      jclass cls = env->getClass(initializeClass);
      env->callStaticVoidMethod(cls, mids$[mid_fill_ad7155b0], a0.this$, a1);
    }

    void Arrays::fill(const JArray< jchar > & a0, jint a1, jint a2, jchar a3)
    {
      jclass cls = env->getClass(initializeClass);
      env->callStaticVoidMethod(cls, mids$[mid_fill_b5b4fc2a], a0.this$, a1, a2, a3);
    }

    void Arrays::fill(const JArray< jfloat > & a0, jint a1, jint a2, jfloat a3)
    {
      jclass cls = env->getClass(initializeClass);
      env->callStaticVoidMethod(cls, mids$[mid_fill_b3c1f708], a0.this$, a1, a2, a3);
    }

    void Arrays::fill(const JArray< jlong > & a0, jint a1, jint a2, jlong a3)
    {
      jclass cls = env->getClass(initializeClass);
      env->callStaticVoidMethod(cls, mids$[mid_fill_c8914cf0], a0.this$, a1, a2, a3);
    }

    void Arrays::fill(const JArray< jboolean > & a0, jint a1, jint a2, jboolean a3)
    {
      jclass cls = env->getClass(initializeClass);
      env->callStaticVoidMethod(cls, mids$[mid_fill_77210c30], a0.this$, a1, a2, a3);
    }

    void Arrays::fill(const JArray< ::java::lang::Object > & a0, jint a1, jint a2, const ::java::lang::Object & a3)
    {
      jclass cls = env->getClass(initializeClass);
      env->callStaticVoidMethod(cls, mids$[mid_fill_dee75d36], a0.this$, a1, a2, a3.this$);
    }

    void Arrays::fill(const JArray< jshort > & a0, jint a1, jint a2, jshort a3)
    {
      jclass cls = env->getClass(initializeClass);
      env->callStaticVoidMethod(cls, mids$[mid_fill_4f5bed8a], a0.this$, a1, a2, a3);
    }

    void Arrays::fill(const JArray< jbyte > & a0, jint a1, jint a2, jbyte a3)
    {
      jclass cls = env->getClass(initializeClass);
      env->callStaticVoidMethod(cls, mids$[mid_fill_1e4305b0], a0.this$, a1, a2, a3);
    }

    void Arrays::fill(const JArray< jint > & a0, jint a1, jint a2, jint a3)
    {
      jclass cls = env->getClass(initializeClass);
      env->callStaticVoidMethod(cls, mids$[mid_fill_4eae6582], a0.this$, a1, a2, a3);
    }

    void Arrays::fill(const JArray< jdouble > & a0, jint a1, jint a2, jdouble a3)
    {
      jclass cls = env->getClass(initializeClass);
      env->callStaticVoidMethod(cls, mids$[mid_fill_695adc54], a0.this$, a1, a2, a3);
    }

    jint Arrays::hashCode(const JArray< jboolean > & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_hashCode_f0c5b9dc], a0.this$);
    }

    jint Arrays::hashCode(const JArray< jlong > & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_hashCode_9ceb500c], a0.this$);
    }

    jint Arrays::hashCode(const JArray< jbyte > & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_hashCode_49b4f134], a0.this$);
    }

    jint Arrays::hashCode(const JArray< jchar > & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_hashCode_700e23c9], a0.this$);
    }

    jint Arrays::hashCode(const JArray< jshort > & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_hashCode_c017fc59], a0.this$);
    }

    jint Arrays::hashCode(const JArray< jdouble > & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_hashCode_f3b62cc6], a0.this$);
    }

    jint Arrays::hashCode(const JArray< jfloat > & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_hashCode_9cc34320], a0.this$);
    }

    jint Arrays::hashCode(const JArray< jint > & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_hashCode_1efc2017], a0.this$);
    }

    jint Arrays::hashCode(const JArray< ::java::lang::Object > & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_hashCode_c0f5dac5], a0.this$);
    }

    void Arrays::parallelSort(const JArray< ::java::lang::Comparable > & a0)
    {
      jclass cls = env->getClass(initializeClass);
      env->callStaticVoidMethod(cls, mids$[mid_parallelSort_01dac18d], a0.this$);
    }

    void Arrays::parallelSort(const JArray< jfloat > & a0)
    {
      jclass cls = env->getClass(initializeClass);
      env->callStaticVoidMethod(cls, mids$[mid_parallelSort_9cc3433f], a0.this$);
    }

    void Arrays::parallelSort(const JArray< jdouble > & a0)
    {
      jclass cls = env->getClass(initializeClass);
      env->callStaticVoidMethod(cls, mids$[mid_parallelSort_f3b62cd9], a0.this$);
    }

    void Arrays::parallelSort(const JArray< jbyte > & a0)
    {
      jclass cls = env->getClass(initializeClass);
      env->callStaticVoidMethod(cls, mids$[mid_parallelSort_49b4f12b], a0.this$);
    }

    void Arrays::parallelSort(const JArray< jchar > & a0)
    {
      jclass cls = env->getClass(initializeClass);
      env->callStaticVoidMethod(cls, mids$[mid_parallelSort_700e23d6], a0.this$);
    }

    void Arrays::parallelSort(const JArray< jlong > & a0)
    {
      jclass cls = env->getClass(initializeClass);
      env->callStaticVoidMethod(cls, mids$[mid_parallelSort_9ceb5013], a0.this$);
    }

    void Arrays::parallelSort(const JArray< jint > & a0)
    {
      jclass cls = env->getClass(initializeClass);
      env->callStaticVoidMethod(cls, mids$[mid_parallelSort_1efc2008], a0.this$);
    }

    void Arrays::parallelSort(const JArray< jshort > & a0)
    {
      jclass cls = env->getClass(initializeClass);
      env->callStaticVoidMethod(cls, mids$[mid_parallelSort_c017fc46], a0.this$);
    }

    void Arrays::parallelSort(const JArray< ::java::lang::Object > & a0, const ::java::util::Comparator & a1)
    {
      jclass cls = env->getClass(initializeClass);
      env->callStaticVoidMethod(cls, mids$[mid_parallelSort_8c46d789], a0.this$, a1.this$);
    }

    void Arrays::parallelSort(const JArray< jlong > & a0, jint a1, jint a2)
    {
      jclass cls = env->getClass(initializeClass);
      env->callStaticVoidMethod(cls, mids$[mid_parallelSort_6ae021e7], a0.this$, a1, a2);
    }

    void Arrays::parallelSort(const JArray< ::java::lang::Comparable > & a0, jint a1, jint a2)
    {
      jclass cls = env->getClass(initializeClass);
      env->callStaticVoidMethod(cls, mids$[mid_parallelSort_266f4139], a0.this$, a1, a2);
    }

    void Arrays::parallelSort(const JArray< jdouble > & a0, jint a1, jint a2)
    {
      jclass cls = env->getClass(initializeClass);
      env->callStaticVoidMethod(cls, mids$[mid_parallelSort_3be2c5d1], a0.this$, a1, a2);
    }

    void Arrays::parallelSort(const JArray< jfloat > & a0, jint a1, jint a2)
    {
      jclass cls = env->getClass(initializeClass);
      env->callStaticVoidMethod(cls, mids$[mid_parallelSort_c8bd2f63], a0.this$, a1, a2);
    }

    void Arrays::parallelSort(const JArray< jint > & a0, jint a1, jint a2)
    {
      jclass cls = env->getClass(initializeClass);
      env->callStaticVoidMethod(cls, mids$[mid_parallelSort_3e1ea22c], a0.this$, a1, a2);
    }

    void Arrays::parallelSort(const JArray< jchar > & a0, jint a1, jint a2)
    {
      jclass cls = env->getClass(initializeClass);
      env->callStaticVoidMethod(cls, mids$[mid_parallelSort_6f0bb356], a0.this$, a1, a2);
    }

    void Arrays::parallelSort(const JArray< jshort > & a0, jint a1, jint a2)
    {
      jclass cls = env->getClass(initializeClass);
      env->callStaticVoidMethod(cls, mids$[mid_parallelSort_b389e986], a0.this$, a1, a2);
    }

    void Arrays::parallelSort(const JArray< jbyte > & a0, jint a1, jint a2)
    {
      jclass cls = env->getClass(initializeClass);
      env->callStaticVoidMethod(cls, mids$[mid_parallelSort_86f4435f], a0.this$, a1, a2);
    }

    void Arrays::parallelSort(const JArray< ::java::lang::Object > & a0, jint a1, jint a2, const ::java::util::Comparator & a3)
    {
      jclass cls = env->getClass(initializeClass);
      env->callStaticVoidMethod(cls, mids$[mid_parallelSort_7c263389], a0.this$, a1, a2, a3.this$);
    }

    void Arrays::sort(const JArray< jfloat > & a0)
    {
      jclass cls = env->getClass(initializeClass);
      env->callStaticVoidMethod(cls, mids$[mid_sort_9cc3433f], a0.this$);
    }

    void Arrays::sort(const JArray< jdouble > & a0)
    {
      jclass cls = env->getClass(initializeClass);
      env->callStaticVoidMethod(cls, mids$[mid_sort_f3b62cd9], a0.this$);
    }

    void Arrays::sort(const JArray< jchar > & a0)
    {
      jclass cls = env->getClass(initializeClass);
      env->callStaticVoidMethod(cls, mids$[mid_sort_700e23d6], a0.this$);
    }

    void Arrays::sort(const JArray< ::java::lang::Object > & a0)
    {
      jclass cls = env->getClass(initializeClass);
      env->callStaticVoidMethod(cls, mids$[mid_sort_c0f5dada], a0.this$);
    }

    void Arrays::sort(const JArray< jbyte > & a0)
    {
      jclass cls = env->getClass(initializeClass);
      env->callStaticVoidMethod(cls, mids$[mid_sort_49b4f12b], a0.this$);
    }

    void Arrays::sort(const JArray< jlong > & a0)
    {
      jclass cls = env->getClass(initializeClass);
      env->callStaticVoidMethod(cls, mids$[mid_sort_9ceb5013], a0.this$);
    }

    void Arrays::sort(const JArray< jshort > & a0)
    {
      jclass cls = env->getClass(initializeClass);
      env->callStaticVoidMethod(cls, mids$[mid_sort_c017fc46], a0.this$);
    }

    void Arrays::sort(const JArray< jint > & a0)
    {
      jclass cls = env->getClass(initializeClass);
      env->callStaticVoidMethod(cls, mids$[mid_sort_1efc2008], a0.this$);
    }

    void Arrays::sort(const JArray< ::java::lang::Object > & a0, const ::java::util::Comparator & a1)
    {
      jclass cls = env->getClass(initializeClass);
      env->callStaticVoidMethod(cls, mids$[mid_sort_8c46d789], a0.this$, a1.this$);
    }

    void Arrays::sort(const JArray< jshort > & a0, jint a1, jint a2)
    {
      jclass cls = env->getClass(initializeClass);
      env->callStaticVoidMethod(cls, mids$[mid_sort_b389e986], a0.this$, a1, a2);
    }

    void Arrays::sort(const JArray< jint > & a0, jint a1, jint a2)
    {
      jclass cls = env->getClass(initializeClass);
      env->callStaticVoidMethod(cls, mids$[mid_sort_3e1ea22c], a0.this$, a1, a2);
    }

    void Arrays::sort(const JArray< jfloat > & a0, jint a1, jint a2)
    {
      jclass cls = env->getClass(initializeClass);
      env->callStaticVoidMethod(cls, mids$[mid_sort_c8bd2f63], a0.this$, a1, a2);
    }

    void Arrays::sort(const JArray< jbyte > & a0, jint a1, jint a2)
    {
      jclass cls = env->getClass(initializeClass);
      env->callStaticVoidMethod(cls, mids$[mid_sort_86f4435f], a0.this$, a1, a2);
    }

    void Arrays::sort(const JArray< jchar > & a0, jint a1, jint a2)
    {
      jclass cls = env->getClass(initializeClass);
      env->callStaticVoidMethod(cls, mids$[mid_sort_6f0bb356], a0.this$, a1, a2);
    }

    void Arrays::sort(const JArray< jdouble > & a0, jint a1, jint a2)
    {
      jclass cls = env->getClass(initializeClass);
      env->callStaticVoidMethod(cls, mids$[mid_sort_3be2c5d1], a0.this$, a1, a2);
    }

    void Arrays::sort(const JArray< jlong > & a0, jint a1, jint a2)
    {
      jclass cls = env->getClass(initializeClass);
      env->callStaticVoidMethod(cls, mids$[mid_sort_6ae021e7], a0.this$, a1, a2);
    }

    void Arrays::sort(const JArray< ::java::lang::Object > & a0, jint a1, jint a2)
    {
      jclass cls = env->getClass(initializeClass);
      env->callStaticVoidMethod(cls, mids$[mid_sort_4172dade], a0.this$, a1, a2);
    }

    void Arrays::sort(const JArray< ::java::lang::Object > & a0, jint a1, jint a2, const ::java::util::Comparator & a3)
    {
      jclass cls = env->getClass(initializeClass);
      env->callStaticVoidMethod(cls, mids$[mid_sort_7c263389], a0.this$, a1, a2, a3.this$);
    }

    ::java::util::Spliterator$OfDouble Arrays::spliterator(const JArray< jdouble > & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::util::Spliterator$OfDouble(env->callStaticObjectMethod(cls, mids$[mid_spliterator_eb34d33a], a0.this$));
    }

    ::java::util::Spliterator Arrays::spliterator(const JArray< ::java::lang::Object > & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::util::Spliterator(env->callStaticObjectMethod(cls, mids$[mid_spliterator_24b4ecc4], a0.this$));
    }

    ::java::util::Spliterator$OfLong Arrays::spliterator(const JArray< jlong > & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::util::Spliterator$OfLong(env->callStaticObjectMethod(cls, mids$[mid_spliterator_a4f55b95], a0.this$));
    }

    ::java::util::Spliterator$OfInt Arrays::spliterator(const JArray< jint > & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::util::Spliterator$OfInt(env->callStaticObjectMethod(cls, mids$[mid_spliterator_8c25906e], a0.this$));
    }

    ::java::util::Spliterator$OfDouble Arrays::spliterator(const JArray< jdouble > & a0, jint a1, jint a2)
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::util::Spliterator$OfDouble(env->callStaticObjectMethod(cls, mids$[mid_spliterator_218f8c32], a0.this$, a1, a2));
    }

    ::java::util::Spliterator Arrays::spliterator(const JArray< ::java::lang::Object > & a0, jint a1, jint a2)
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::util::Spliterator(env->callStaticObjectMethod(cls, mids$[mid_spliterator_90ced414], a0.this$, a1, a2));
    }

    ::java::util::Spliterator$OfLong Arrays::spliterator(const JArray< jlong > & a0, jint a1, jint a2)
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::util::Spliterator$OfLong(env->callStaticObjectMethod(cls, mids$[mid_spliterator_fb0d86ad], a0.this$, a1, a2));
    }

    ::java::util::Spliterator$OfInt Arrays::spliterator(const JArray< jint > & a0, jint a1, jint a2)
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::util::Spliterator$OfInt(env->callStaticObjectMethod(cls, mids$[mid_spliterator_552485d2], a0.this$, a1, a2));
    }

    ::java::lang::String Arrays::toString(const JArray< jfloat > & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::lang::String(env->callStaticObjectMethod(cls, mids$[mid_toString_08b6580a], a0.this$));
    }

    ::java::lang::String Arrays::toString(const JArray< jchar > & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::lang::String(env->callStaticObjectMethod(cls, mids$[mid_toString_c783d655], a0.this$));
    }

    ::java::lang::String Arrays::toString(const JArray< jdouble > & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::lang::String(env->callStaticObjectMethod(cls, mids$[mid_toString_9352a4bc], a0.this$));
    }

    ::java::lang::String Arrays::toString(const JArray< jshort > & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::lang::String(env->callStaticObjectMethod(cls, mids$[mid_toString_aeceff45], a0.this$));
    }

    ::java::lang::String Arrays::toString(const JArray< jboolean > & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::lang::String(env->callStaticObjectMethod(cls, mids$[mid_toString_14e8bbde], a0.this$));
    }

    ::java::lang::String Arrays::toString(const JArray< jbyte > & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::lang::String(env->callStaticObjectMethod(cls, mids$[mid_toString_0f6e0f86], a0.this$));
    }

    ::java::lang::String Arrays::toString(const JArray< ::java::lang::Object > & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::lang::String(env->callStaticObjectMethod(cls, mids$[mid_toString_02ea1cdd], a0.this$));
    }

    ::java::lang::String Arrays::toString(const JArray< jlong > & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::lang::String(env->callStaticObjectMethod(cls, mids$[mid_toString_053bf1ae], a0.this$));
    }

    ::java::lang::String Arrays::toString(const JArray< jint > & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::lang::String(env->callStaticObjectMethod(cls, mids$[mid_toString_9570afaf], a0.this$));
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace java {
  namespace util {
    static PyObject *t_Arrays_cast_(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Arrays_instance_(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Arrays_asList(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Arrays_binarySearch(PyTypeObject *type, PyObject *args);
    static PyObject *t_Arrays_copyOf(PyTypeObject *type, PyObject *args);
    static PyObject *t_Arrays_copyOfRange(PyTypeObject *type, PyObject *args);
    static PyObject *t_Arrays_deepEquals(PyTypeObject *type, PyObject *args);
    static PyObject *t_Arrays_deepHashCode(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Arrays_deepToString(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Arrays_equals(PyTypeObject *type, PyObject *args);
    static PyObject *t_Arrays_fill(PyTypeObject *type, PyObject *args);
    static PyObject *t_Arrays_hashCode(PyTypeObject *type, PyObject *args);
    static PyObject *t_Arrays_parallelSort(PyTypeObject *type, PyObject *args);
    static PyObject *t_Arrays_sort(PyTypeObject *type, PyObject *args);
    static PyObject *t_Arrays_spliterator(PyTypeObject *type, PyObject *args);
    static PyObject *t_Arrays_toString(PyTypeObject *type, PyObject *args);

    static PyMethodDef t_Arrays__methods_[] = {
      DECLARE_METHOD(t_Arrays, cast_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Arrays, instance_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Arrays, asList, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Arrays, binarySearch, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Arrays, copyOf, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Arrays, copyOfRange, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Arrays, deepEquals, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Arrays, deepHashCode, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Arrays, deepToString, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Arrays, equals, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Arrays, fill, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Arrays, hashCode, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Arrays, parallelSort, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Arrays, sort, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Arrays, spliterator, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Arrays, toString, METH_VARARGS | METH_CLASS),
      { NULL, NULL, 0, NULL }
    };

    DECLARE_TYPE(Arrays, t_Arrays, ::java::lang::Object, Arrays, abstract_init, 0, 0, 0, 0, 0);

    void t_Arrays::install(PyObject *module)
    {
      installType(&PY_TYPE(Arrays), module, "Arrays", 0);
    }

    void t_Arrays::initialize(PyObject *module)
    {
      PyDict_SetItemString(PY_TYPE(Arrays).tp_dict, "class_", make_descriptor(Arrays::initializeClass, 1));
      PyDict_SetItemString(PY_TYPE(Arrays).tp_dict, "wrapfn_", make_descriptor(t_Arrays::wrap_jobject));
      PyDict_SetItemString(PY_TYPE(Arrays).tp_dict, "boxfn_", make_descriptor(boxObject));
    }

    static PyObject *t_Arrays_cast_(PyTypeObject *type, PyObject *arg)
    {
      if (!(arg = castCheck(arg, Arrays::initializeClass, 1)))
        return NULL;
      return t_Arrays::wrap_Object(Arrays(((t_Arrays *) arg)->object.this$));
    }
    static PyObject *t_Arrays_instance_(PyTypeObject *type, PyObject *arg)
    {
      if (!castCheck(arg, Arrays::initializeClass, 0))
        Py_RETURN_FALSE;
      Py_RETURN_TRUE;
    }

    static PyObject *t_Arrays_asList(PyTypeObject *type, PyObject *arg)
    {
      JArray< ::java::lang::Object > a0((jobject) NULL);
      ::java::util::List result((jobject) NULL);

      if (!parseArg(arg, "[o", &a0))
      {
        OBJ_CALL(result = ::java::util::Arrays::asList(a0));
        return ::java::util::t_List::wrap_Object(result);
      }

      PyErr_SetArgsError(type, "asList", arg);
      return NULL;
    }

    static PyObject *t_Arrays_binarySearch(PyTypeObject *type, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 2:
        {
          JArray< jfloat > a0((jobject) NULL);
          jfloat a1;
          jint result;

          if (!parseArgs(args, "[FF", &a0, &a1))
          {
            OBJ_CALL(result = ::java::util::Arrays::binarySearch(a0, a1));
            return PyInt_FromLong((long) result);
          }
        }
        {
          JArray< ::java::lang::Object > a0((jobject) NULL);
          ::java::lang::Object a1((jobject) NULL);
          jint result;

          if (!parseArgs(args, "[oo", &a0, &a1))
          {
            OBJ_CALL(result = ::java::util::Arrays::binarySearch(a0, a1));
            return PyInt_FromLong((long) result);
          }
        }
        {
          JArray< jbyte > a0((jobject) NULL);
          jbyte a1;
          jint result;

          if (!parseArgs(args, "[BB", &a0, &a1))
          {
            OBJ_CALL(result = ::java::util::Arrays::binarySearch(a0, a1));
            return PyInt_FromLong((long) result);
          }
        }
        {
          JArray< jshort > a0((jobject) NULL);
          jshort a1;
          jint result;

          if (!parseArgs(args, "[SS", &a0, &a1))
          {
            OBJ_CALL(result = ::java::util::Arrays::binarySearch(a0, a1));
            return PyInt_FromLong((long) result);
          }
        }
        {
          JArray< jlong > a0((jobject) NULL);
          jlong a1;
          jint result;

          if (!parseArgs(args, "[JJ", &a0, &a1))
          {
            OBJ_CALL(result = ::java::util::Arrays::binarySearch(a0, a1));
            return PyInt_FromLong((long) result);
          }
        }
        {
          JArray< jdouble > a0((jobject) NULL);
          jdouble a1;
          jint result;

          if (!parseArgs(args, "[DD", &a0, &a1))
          {
            OBJ_CALL(result = ::java::util::Arrays::binarySearch(a0, a1));
            return PyInt_FromLong((long) result);
          }
        }
        {
          JArray< jint > a0((jobject) NULL);
          jint a1;
          jint result;

          if (!parseArgs(args, "[II", &a0, &a1))
          {
            OBJ_CALL(result = ::java::util::Arrays::binarySearch(a0, a1));
            return PyInt_FromLong((long) result);
          }
        }
        {
          JArray< jchar > a0((jobject) NULL);
          jchar a1;
          jint result;

          if (!parseArgs(args, "[CC", &a0, &a1))
          {
            OBJ_CALL(result = ::java::util::Arrays::binarySearch(a0, a1));
            return PyInt_FromLong((long) result);
          }
        }
        break;
       case 3:
        {
          JArray< ::java::lang::Object > a0((jobject) NULL);
          ::java::lang::Object a1((jobject) NULL);
          ::java::util::Comparator a2((jobject) NULL);
          PyTypeObject **p2;
          jint result;

          if (!parseArgs(args, "[ooK", ::java::util::Comparator::initializeClass, &a0, &a1, &a2, &p2, ::java::util::t_Comparator::parameters_))
          {
            OBJ_CALL(result = ::java::util::Arrays::binarySearch(a0, a1, a2));
            return PyInt_FromLong((long) result);
          }
        }
        break;
       case 4:
        {
          JArray< jlong > a0((jobject) NULL);
          jint a1;
          jint a2;
          jlong a3;
          jint result;

          if (!parseArgs(args, "[JIIJ", &a0, &a1, &a2, &a3))
          {
            OBJ_CALL(result = ::java::util::Arrays::binarySearch(a0, a1, a2, a3));
            return PyInt_FromLong((long) result);
          }
        }
        {
          JArray< jbyte > a0((jobject) NULL);
          jint a1;
          jint a2;
          jbyte a3;
          jint result;

          if (!parseArgs(args, "[BIIB", &a0, &a1, &a2, &a3))
          {
            OBJ_CALL(result = ::java::util::Arrays::binarySearch(a0, a1, a2, a3));
            return PyInt_FromLong((long) result);
          }
        }
        {
          JArray< jfloat > a0((jobject) NULL);
          jint a1;
          jint a2;
          jfloat a3;
          jint result;

          if (!parseArgs(args, "[FIIF", &a0, &a1, &a2, &a3))
          {
            OBJ_CALL(result = ::java::util::Arrays::binarySearch(a0, a1, a2, a3));
            return PyInt_FromLong((long) result);
          }
        }
        {
          JArray< ::java::lang::Object > a0((jobject) NULL);
          jint a1;
          jint a2;
          ::java::lang::Object a3((jobject) NULL);
          jint result;

          if (!parseArgs(args, "[oIIo", &a0, &a1, &a2, &a3))
          {
            OBJ_CALL(result = ::java::util::Arrays::binarySearch(a0, a1, a2, a3));
            return PyInt_FromLong((long) result);
          }
        }
        {
          JArray< jdouble > a0((jobject) NULL);
          jint a1;
          jint a2;
          jdouble a3;
          jint result;

          if (!parseArgs(args, "[DIID", &a0, &a1, &a2, &a3))
          {
            OBJ_CALL(result = ::java::util::Arrays::binarySearch(a0, a1, a2, a3));
            return PyInt_FromLong((long) result);
          }
        }
        {
          JArray< jshort > a0((jobject) NULL);
          jint a1;
          jint a2;
          jshort a3;
          jint result;

          if (!parseArgs(args, "[SIIS", &a0, &a1, &a2, &a3))
          {
            OBJ_CALL(result = ::java::util::Arrays::binarySearch(a0, a1, a2, a3));
            return PyInt_FromLong((long) result);
          }
        }
        {
          JArray< jchar > a0((jobject) NULL);
          jint a1;
          jint a2;
          jchar a3;
          jint result;

          if (!parseArgs(args, "[CIIC", &a0, &a1, &a2, &a3))
          {
            OBJ_CALL(result = ::java::util::Arrays::binarySearch(a0, a1, a2, a3));
            return PyInt_FromLong((long) result);
          }
        }
        {
          JArray< jint > a0((jobject) NULL);
          jint a1;
          jint a2;
          jint a3;
          jint result;

          if (!parseArgs(args, "[IIII", &a0, &a1, &a2, &a3))
          {
            OBJ_CALL(result = ::java::util::Arrays::binarySearch(a0, a1, a2, a3));
            return PyInt_FromLong((long) result);
          }
        }
        break;
       case 5:
        {
          JArray< ::java::lang::Object > a0((jobject) NULL);
          jint a1;
          jint a2;
          ::java::lang::Object a3((jobject) NULL);
          ::java::util::Comparator a4((jobject) NULL);
          PyTypeObject **p4;
          jint result;

          if (!parseArgs(args, "[oIIoK", ::java::util::Comparator::initializeClass, &a0, &a1, &a2, &a3, &a4, &p4, ::java::util::t_Comparator::parameters_))
          {
            OBJ_CALL(result = ::java::util::Arrays::binarySearch(a0, a1, a2, a3, a4));
            return PyInt_FromLong((long) result);
          }
        }
      }

      PyErr_SetArgsError(type, "binarySearch", args);
      return NULL;
    }

    static PyObject *t_Arrays_copyOf(PyTypeObject *type, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 2:
        {
          JArray< jshort > a0((jobject) NULL);
          jint a1;
          JArray< jshort > result((jobject) NULL);

          if (!parseArgs(args, "[SI", &a0, &a1))
          {
            OBJ_CALL(result = ::java::util::Arrays::copyOf(a0, a1));
            return result.wrap();
          }
        }
        {
          JArray< jchar > a0((jobject) NULL);
          jint a1;
          JArray< jchar > result((jobject) NULL);

          if (!parseArgs(args, "[CI", &a0, &a1))
          {
            OBJ_CALL(result = ::java::util::Arrays::copyOf(a0, a1));
            return result.wrap();
          }
        }
        {
          JArray< jlong > a0((jobject) NULL);
          jint a1;
          JArray< jlong > result((jobject) NULL);

          if (!parseArgs(args, "[JI", &a0, &a1))
          {
            OBJ_CALL(result = ::java::util::Arrays::copyOf(a0, a1));
            return result.wrap();
          }
        }
        {
          JArray< jdouble > a0((jobject) NULL);
          jint a1;
          JArray< jdouble > result((jobject) NULL);

          if (!parseArgs(args, "[DI", &a0, &a1))
          {
            OBJ_CALL(result = ::java::util::Arrays::copyOf(a0, a1));
            return result.wrap();
          }
        }
        {
          JArray< jbyte > a0((jobject) NULL);
          jint a1;
          JArray< jbyte > result((jobject) NULL);

          if (!parseArgs(args, "[BI", &a0, &a1))
          {
            OBJ_CALL(result = ::java::util::Arrays::copyOf(a0, a1));
            return result.wrap();
          }
        }
        {
          JArray< ::java::lang::Object > a0((jobject) NULL);
          jint a1;
          JArray< ::java::lang::Object > result((jobject) NULL);

          if (!parseArgs(args, "[oI", &a0, &a1))
          {
            OBJ_CALL(result = ::java::util::Arrays::copyOf(a0, a1));
            return JArray<jobject>(result.this$).wrap(::java::lang::t_Object::wrap_jobject);
          }
        }
        {
          JArray< jint > a0((jobject) NULL);
          jint a1;
          JArray< jint > result((jobject) NULL);

          if (!parseArgs(args, "[II", &a0, &a1))
          {
            OBJ_CALL(result = ::java::util::Arrays::copyOf(a0, a1));
            return result.wrap();
          }
        }
        {
          JArray< jfloat > a0((jobject) NULL);
          jint a1;
          JArray< jfloat > result((jobject) NULL);

          if (!parseArgs(args, "[FI", &a0, &a1))
          {
            OBJ_CALL(result = ::java::util::Arrays::copyOf(a0, a1));
            return result.wrap();
          }
        }
        {
          JArray< jboolean > a0((jobject) NULL);
          jint a1;
          JArray< jboolean > result((jobject) NULL);

          if (!parseArgs(args, "[ZI", &a0, &a1))
          {
            OBJ_CALL(result = ::java::util::Arrays::copyOf(a0, a1));
            return result.wrap();
          }
        }
        break;
       case 3:
        {
          JArray< ::java::lang::Object > a0((jobject) NULL);
          jint a1;
          ::java::lang::Class a2((jobject) NULL);
          PyTypeObject **p2;
          JArray< ::java::lang::Object > result((jobject) NULL);

          if (!parseArgs(args, "[oIK", ::java::lang::Class::initializeClass, &a0, &a1, &a2, &p2, ::java::lang::t_Class::parameters_))
          {
            OBJ_CALL(result = ::java::util::Arrays::copyOf(a0, a1, a2));
            return JArray<jobject>(result.this$).wrap(::java::lang::t_Object::wrap_jobject);
          }
        }
      }

      PyErr_SetArgsError(type, "copyOf", args);
      return NULL;
    }

    static PyObject *t_Arrays_copyOfRange(PyTypeObject *type, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 3:
        {
          JArray< jfloat > a0((jobject) NULL);
          jint a1;
          jint a2;
          JArray< jfloat > result((jobject) NULL);

          if (!parseArgs(args, "[FII", &a0, &a1, &a2))
          {
            OBJ_CALL(result = ::java::util::Arrays::copyOfRange(a0, a1, a2));
            return result.wrap();
          }
        }
        {
          JArray< ::java::lang::Object > a0((jobject) NULL);
          jint a1;
          jint a2;
          JArray< ::java::lang::Object > result((jobject) NULL);

          if (!parseArgs(args, "[oII", &a0, &a1, &a2))
          {
            OBJ_CALL(result = ::java::util::Arrays::copyOfRange(a0, a1, a2));
            return JArray<jobject>(result.this$).wrap(::java::lang::t_Object::wrap_jobject);
          }
        }
        {
          JArray< jdouble > a0((jobject) NULL);
          jint a1;
          jint a2;
          JArray< jdouble > result((jobject) NULL);

          if (!parseArgs(args, "[DII", &a0, &a1, &a2))
          {
            OBJ_CALL(result = ::java::util::Arrays::copyOfRange(a0, a1, a2));
            return result.wrap();
          }
        }
        {
          JArray< jchar > a0((jobject) NULL);
          jint a1;
          jint a2;
          JArray< jchar > result((jobject) NULL);

          if (!parseArgs(args, "[CII", &a0, &a1, &a2))
          {
            OBJ_CALL(result = ::java::util::Arrays::copyOfRange(a0, a1, a2));
            return result.wrap();
          }
        }
        {
          JArray< jbyte > a0((jobject) NULL);
          jint a1;
          jint a2;
          JArray< jbyte > result((jobject) NULL);

          if (!parseArgs(args, "[BII", &a0, &a1, &a2))
          {
            OBJ_CALL(result = ::java::util::Arrays::copyOfRange(a0, a1, a2));
            return result.wrap();
          }
        }
        {
          JArray< jint > a0((jobject) NULL);
          jint a1;
          jint a2;
          JArray< jint > result((jobject) NULL);

          if (!parseArgs(args, "[III", &a0, &a1, &a2))
          {
            OBJ_CALL(result = ::java::util::Arrays::copyOfRange(a0, a1, a2));
            return result.wrap();
          }
        }
        {
          JArray< jlong > a0((jobject) NULL);
          jint a1;
          jint a2;
          JArray< jlong > result((jobject) NULL);

          if (!parseArgs(args, "[JII", &a0, &a1, &a2))
          {
            OBJ_CALL(result = ::java::util::Arrays::copyOfRange(a0, a1, a2));
            return result.wrap();
          }
        }
        {
          JArray< jboolean > a0((jobject) NULL);
          jint a1;
          jint a2;
          JArray< jboolean > result((jobject) NULL);

          if (!parseArgs(args, "[ZII", &a0, &a1, &a2))
          {
            OBJ_CALL(result = ::java::util::Arrays::copyOfRange(a0, a1, a2));
            return result.wrap();
          }
        }
        {
          JArray< jshort > a0((jobject) NULL);
          jint a1;
          jint a2;
          JArray< jshort > result((jobject) NULL);

          if (!parseArgs(args, "[SII", &a0, &a1, &a2))
          {
            OBJ_CALL(result = ::java::util::Arrays::copyOfRange(a0, a1, a2));
            return result.wrap();
          }
        }
        break;
       case 4:
        {
          JArray< ::java::lang::Object > a0((jobject) NULL);
          jint a1;
          jint a2;
          ::java::lang::Class a3((jobject) NULL);
          PyTypeObject **p3;
          JArray< ::java::lang::Object > result((jobject) NULL);

          if (!parseArgs(args, "[oIIK", ::java::lang::Class::initializeClass, &a0, &a1, &a2, &a3, &p3, ::java::lang::t_Class::parameters_))
          {
            OBJ_CALL(result = ::java::util::Arrays::copyOfRange(a0, a1, a2, a3));
            return JArray<jobject>(result.this$).wrap(::java::lang::t_Object::wrap_jobject);
          }
        }
      }

      PyErr_SetArgsError(type, "copyOfRange", args);
      return NULL;
    }

    static PyObject *t_Arrays_deepEquals(PyTypeObject *type, PyObject *args)
    {
      JArray< ::java::lang::Object > a0((jobject) NULL);
      JArray< ::java::lang::Object > a1((jobject) NULL);
      jboolean result;

      if (!parseArgs(args, "[o[o", &a0, &a1))
      {
        OBJ_CALL(result = ::java::util::Arrays::deepEquals(a0, a1));
        Py_RETURN_BOOL(result);
      }

      PyErr_SetArgsError(type, "deepEquals", args);
      return NULL;
    }

    static PyObject *t_Arrays_deepHashCode(PyTypeObject *type, PyObject *arg)
    {
      JArray< ::java::lang::Object > a0((jobject) NULL);
      jint result;

      if (!parseArg(arg, "[o", &a0))
      {
        OBJ_CALL(result = ::java::util::Arrays::deepHashCode(a0));
        return PyInt_FromLong((long) result);
      }

      PyErr_SetArgsError(type, "deepHashCode", arg);
      return NULL;
    }

    static PyObject *t_Arrays_deepToString(PyTypeObject *type, PyObject *arg)
    {
      JArray< ::java::lang::Object > a0((jobject) NULL);
      ::java::lang::String result((jobject) NULL);

      if (!parseArg(arg, "[o", &a0))
      {
        OBJ_CALL(result = ::java::util::Arrays::deepToString(a0));
        return j2p(result);
      }

      PyErr_SetArgsError(type, "deepToString", arg);
      return NULL;
    }

    static PyObject *t_Arrays_equals(PyTypeObject *type, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 2:
        {
          JArray< ::java::lang::Object > a0((jobject) NULL);
          JArray< ::java::lang::Object > a1((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "[o[o", &a0, &a1))
          {
            OBJ_CALL(result = ::java::util::Arrays::equals(a0, a1));
            Py_RETURN_BOOL(result);
          }
        }
        {
          JArray< jshort > a0((jobject) NULL);
          JArray< jshort > a1((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "[S[S", &a0, &a1))
          {
            OBJ_CALL(result = ::java::util::Arrays::equals(a0, a1));
            Py_RETURN_BOOL(result);
          }
        }
        {
          JArray< jboolean > a0((jobject) NULL);
          JArray< jboolean > a1((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "[Z[Z", &a0, &a1))
          {
            OBJ_CALL(result = ::java::util::Arrays::equals(a0, a1));
            Py_RETURN_BOOL(result);
          }
        }
        {
          JArray< jlong > a0((jobject) NULL);
          JArray< jlong > a1((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "[J[J", &a0, &a1))
          {
            OBJ_CALL(result = ::java::util::Arrays::equals(a0, a1));
            Py_RETURN_BOOL(result);
          }
        }
        {
          JArray< jchar > a0((jobject) NULL);
          JArray< jchar > a1((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "[C[C", &a0, &a1))
          {
            OBJ_CALL(result = ::java::util::Arrays::equals(a0, a1));
            Py_RETURN_BOOL(result);
          }
        }
        {
          JArray< jint > a0((jobject) NULL);
          JArray< jint > a1((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "[I[I", &a0, &a1))
          {
            OBJ_CALL(result = ::java::util::Arrays::equals(a0, a1));
            Py_RETURN_BOOL(result);
          }
        }
        {
          JArray< jfloat > a0((jobject) NULL);
          JArray< jfloat > a1((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "[F[F", &a0, &a1))
          {
            OBJ_CALL(result = ::java::util::Arrays::equals(a0, a1));
            Py_RETURN_BOOL(result);
          }
        }
        {
          JArray< jbyte > a0((jobject) NULL);
          JArray< jbyte > a1((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "[B[B", &a0, &a1))
          {
            OBJ_CALL(result = ::java::util::Arrays::equals(a0, a1));
            Py_RETURN_BOOL(result);
          }
        }
        {
          JArray< jdouble > a0((jobject) NULL);
          JArray< jdouble > a1((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "[D[D", &a0, &a1))
          {
            OBJ_CALL(result = ::java::util::Arrays::equals(a0, a1));
            Py_RETURN_BOOL(result);
          }
        }
      }

      return callSuper(type, "equals", args, 2);
    }

    static PyObject *t_Arrays_fill(PyTypeObject *type, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 2:
        {
          JArray< jbyte > a0((jobject) NULL);
          jbyte a1;

          if (!parseArgs(args, "[BB", &a0, &a1))
          {
            OBJ_CALL(::java::util::Arrays::fill(a0, a1));
            Py_RETURN_NONE;
          }
        }
        {
          JArray< jshort > a0((jobject) NULL);
          jshort a1;

          if (!parseArgs(args, "[SS", &a0, &a1))
          {
            OBJ_CALL(::java::util::Arrays::fill(a0, a1));
            Py_RETURN_NONE;
          }
        }
        {
          JArray< jfloat > a0((jobject) NULL);
          jfloat a1;

          if (!parseArgs(args, "[FF", &a0, &a1))
          {
            OBJ_CALL(::java::util::Arrays::fill(a0, a1));
            Py_RETURN_NONE;
          }
        }
        {
          JArray< ::java::lang::Object > a0((jobject) NULL);
          ::java::lang::Object a1((jobject) NULL);

          if (!parseArgs(args, "[oo", &a0, &a1))
          {
            OBJ_CALL(::java::util::Arrays::fill(a0, a1));
            Py_RETURN_NONE;
          }
        }
        {
          JArray< jchar > a0((jobject) NULL);
          jchar a1;

          if (!parseArgs(args, "[CC", &a0, &a1))
          {
            OBJ_CALL(::java::util::Arrays::fill(a0, a1));
            Py_RETURN_NONE;
          }
        }
        {
          JArray< jlong > a0((jobject) NULL);
          jlong a1;

          if (!parseArgs(args, "[JJ", &a0, &a1))
          {
            OBJ_CALL(::java::util::Arrays::fill(a0, a1));
            Py_RETURN_NONE;
          }
        }
        {
          JArray< jdouble > a0((jobject) NULL);
          jdouble a1;

          if (!parseArgs(args, "[DD", &a0, &a1))
          {
            OBJ_CALL(::java::util::Arrays::fill(a0, a1));
            Py_RETURN_NONE;
          }
        }
        {
          JArray< jint > a0((jobject) NULL);
          jint a1;

          if (!parseArgs(args, "[II", &a0, &a1))
          {
            OBJ_CALL(::java::util::Arrays::fill(a0, a1));
            Py_RETURN_NONE;
          }
        }
        {
          JArray< jboolean > a0((jobject) NULL);
          jboolean a1;

          if (!parseArgs(args, "[ZZ", &a0, &a1))
          {
            OBJ_CALL(::java::util::Arrays::fill(a0, a1));
            Py_RETURN_NONE;
          }
        }
        break;
       case 4:
        {
          JArray< jchar > a0((jobject) NULL);
          jint a1;
          jint a2;
          jchar a3;

          if (!parseArgs(args, "[CIIC", &a0, &a1, &a2, &a3))
          {
            OBJ_CALL(::java::util::Arrays::fill(a0, a1, a2, a3));
            Py_RETURN_NONE;
          }
        }
        {
          JArray< jfloat > a0((jobject) NULL);
          jint a1;
          jint a2;
          jfloat a3;

          if (!parseArgs(args, "[FIIF", &a0, &a1, &a2, &a3))
          {
            OBJ_CALL(::java::util::Arrays::fill(a0, a1, a2, a3));
            Py_RETURN_NONE;
          }
        }
        {
          JArray< jlong > a0((jobject) NULL);
          jint a1;
          jint a2;
          jlong a3;

          if (!parseArgs(args, "[JIIJ", &a0, &a1, &a2, &a3))
          {
            OBJ_CALL(::java::util::Arrays::fill(a0, a1, a2, a3));
            Py_RETURN_NONE;
          }
        }
        {
          JArray< jboolean > a0((jobject) NULL);
          jint a1;
          jint a2;
          jboolean a3;

          if (!parseArgs(args, "[ZIIZ", &a0, &a1, &a2, &a3))
          {
            OBJ_CALL(::java::util::Arrays::fill(a0, a1, a2, a3));
            Py_RETURN_NONE;
          }
        }
        {
          JArray< ::java::lang::Object > a0((jobject) NULL);
          jint a1;
          jint a2;
          ::java::lang::Object a3((jobject) NULL);

          if (!parseArgs(args, "[oIIo", &a0, &a1, &a2, &a3))
          {
            OBJ_CALL(::java::util::Arrays::fill(a0, a1, a2, a3));
            Py_RETURN_NONE;
          }
        }
        {
          JArray< jshort > a0((jobject) NULL);
          jint a1;
          jint a2;
          jshort a3;

          if (!parseArgs(args, "[SIIS", &a0, &a1, &a2, &a3))
          {
            OBJ_CALL(::java::util::Arrays::fill(a0, a1, a2, a3));
            Py_RETURN_NONE;
          }
        }
        {
          JArray< jbyte > a0((jobject) NULL);
          jint a1;
          jint a2;
          jbyte a3;

          if (!parseArgs(args, "[BIIB", &a0, &a1, &a2, &a3))
          {
            OBJ_CALL(::java::util::Arrays::fill(a0, a1, a2, a3));
            Py_RETURN_NONE;
          }
        }
        {
          JArray< jint > a0((jobject) NULL);
          jint a1;
          jint a2;
          jint a3;

          if (!parseArgs(args, "[IIII", &a0, &a1, &a2, &a3))
          {
            OBJ_CALL(::java::util::Arrays::fill(a0, a1, a2, a3));
            Py_RETURN_NONE;
          }
        }
        {
          JArray< jdouble > a0((jobject) NULL);
          jint a1;
          jint a2;
          jdouble a3;

          if (!parseArgs(args, "[DIID", &a0, &a1, &a2, &a3))
          {
            OBJ_CALL(::java::util::Arrays::fill(a0, a1, a2, a3));
            Py_RETURN_NONE;
          }
        }
      }

      PyErr_SetArgsError(type, "fill", args);
      return NULL;
    }

    static PyObject *t_Arrays_hashCode(PyTypeObject *type, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 1:
        {
          JArray< jboolean > a0((jobject) NULL);
          jint result;

          if (!parseArgs(args, "[Z", &a0))
          {
            OBJ_CALL(result = ::java::util::Arrays::hashCode(a0));
            return PyInt_FromLong((long) result);
          }
        }
        {
          JArray< jlong > a0((jobject) NULL);
          jint result;

          if (!parseArgs(args, "[J", &a0))
          {
            OBJ_CALL(result = ::java::util::Arrays::hashCode(a0));
            return PyInt_FromLong((long) result);
          }
        }
        {
          JArray< jbyte > a0((jobject) NULL);
          jint result;

          if (!parseArgs(args, "[B", &a0))
          {
            OBJ_CALL(result = ::java::util::Arrays::hashCode(a0));
            return PyInt_FromLong((long) result);
          }
        }
        {
          JArray< jchar > a0((jobject) NULL);
          jint result;

          if (!parseArgs(args, "[C", &a0))
          {
            OBJ_CALL(result = ::java::util::Arrays::hashCode(a0));
            return PyInt_FromLong((long) result);
          }
        }
        {
          JArray< jshort > a0((jobject) NULL);
          jint result;

          if (!parseArgs(args, "[S", &a0))
          {
            OBJ_CALL(result = ::java::util::Arrays::hashCode(a0));
            return PyInt_FromLong((long) result);
          }
        }
        {
          JArray< jdouble > a0((jobject) NULL);
          jint result;

          if (!parseArgs(args, "[D", &a0))
          {
            OBJ_CALL(result = ::java::util::Arrays::hashCode(a0));
            return PyInt_FromLong((long) result);
          }
        }
        {
          JArray< jfloat > a0((jobject) NULL);
          jint result;

          if (!parseArgs(args, "[F", &a0))
          {
            OBJ_CALL(result = ::java::util::Arrays::hashCode(a0));
            return PyInt_FromLong((long) result);
          }
        }
        {
          JArray< jint > a0((jobject) NULL);
          jint result;

          if (!parseArgs(args, "[I", &a0))
          {
            OBJ_CALL(result = ::java::util::Arrays::hashCode(a0));
            return PyInt_FromLong((long) result);
          }
        }
        {
          JArray< ::java::lang::Object > a0((jobject) NULL);
          jint result;

          if (!parseArgs(args, "[o", &a0))
          {
            OBJ_CALL(result = ::java::util::Arrays::hashCode(a0));
            return PyInt_FromLong((long) result);
          }
        }
      }

      return callSuper(type, "hashCode", args, 2);
    }

    static PyObject *t_Arrays_parallelSort(PyTypeObject *type, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 1:
        {
          JArray< ::java::lang::Comparable > a0((jobject) NULL);
          PyTypeObject **p0;

          if (!parseArgs(args, "[K", ::java::lang::Comparable::initializeClass, &a0, &p0, ::java::lang::t_Comparable::parameters_))
          {
            OBJ_CALL(::java::util::Arrays::parallelSort(a0));
            Py_RETURN_NONE;
          }
        }
        {
          JArray< jfloat > a0((jobject) NULL);

          if (!parseArgs(args, "[F", &a0))
          {
            OBJ_CALL(::java::util::Arrays::parallelSort(a0));
            Py_RETURN_NONE;
          }
        }
        {
          JArray< jdouble > a0((jobject) NULL);

          if (!parseArgs(args, "[D", &a0))
          {
            OBJ_CALL(::java::util::Arrays::parallelSort(a0));
            Py_RETURN_NONE;
          }
        }
        {
          JArray< jbyte > a0((jobject) NULL);

          if (!parseArgs(args, "[B", &a0))
          {
            OBJ_CALL(::java::util::Arrays::parallelSort(a0));
            Py_RETURN_NONE;
          }
        }
        {
          JArray< jchar > a0((jobject) NULL);

          if (!parseArgs(args, "[C", &a0))
          {
            OBJ_CALL(::java::util::Arrays::parallelSort(a0));
            Py_RETURN_NONE;
          }
        }
        {
          JArray< jlong > a0((jobject) NULL);

          if (!parseArgs(args, "[J", &a0))
          {
            OBJ_CALL(::java::util::Arrays::parallelSort(a0));
            Py_RETURN_NONE;
          }
        }
        {
          JArray< jint > a0((jobject) NULL);

          if (!parseArgs(args, "[I", &a0))
          {
            OBJ_CALL(::java::util::Arrays::parallelSort(a0));
            Py_RETURN_NONE;
          }
        }
        {
          JArray< jshort > a0((jobject) NULL);

          if (!parseArgs(args, "[S", &a0))
          {
            OBJ_CALL(::java::util::Arrays::parallelSort(a0));
            Py_RETURN_NONE;
          }
        }
        break;
       case 2:
        {
          JArray< ::java::lang::Object > a0((jobject) NULL);
          ::java::util::Comparator a1((jobject) NULL);
          PyTypeObject **p1;

          if (!parseArgs(args, "[oK", ::java::util::Comparator::initializeClass, &a0, &a1, &p1, ::java::util::t_Comparator::parameters_))
          {
            OBJ_CALL(::java::util::Arrays::parallelSort(a0, a1));
            Py_RETURN_NONE;
          }
        }
        break;
       case 3:
        {
          JArray< jlong > a0((jobject) NULL);
          jint a1;
          jint a2;

          if (!parseArgs(args, "[JII", &a0, &a1, &a2))
          {
            OBJ_CALL(::java::util::Arrays::parallelSort(a0, a1, a2));
            Py_RETURN_NONE;
          }
        }
        {
          JArray< ::java::lang::Comparable > a0((jobject) NULL);
          PyTypeObject **p0;
          jint a1;
          jint a2;

          if (!parseArgs(args, "[KII", ::java::lang::Comparable::initializeClass, &a0, &p0, ::java::lang::t_Comparable::parameters_, &a1, &a2))
          {
            OBJ_CALL(::java::util::Arrays::parallelSort(a0, a1, a2));
            Py_RETURN_NONE;
          }
        }
        {
          JArray< jdouble > a0((jobject) NULL);
          jint a1;
          jint a2;

          if (!parseArgs(args, "[DII", &a0, &a1, &a2))
          {
            OBJ_CALL(::java::util::Arrays::parallelSort(a0, a1, a2));
            Py_RETURN_NONE;
          }
        }
        {
          JArray< jfloat > a0((jobject) NULL);
          jint a1;
          jint a2;

          if (!parseArgs(args, "[FII", &a0, &a1, &a2))
          {
            OBJ_CALL(::java::util::Arrays::parallelSort(a0, a1, a2));
            Py_RETURN_NONE;
          }
        }
        {
          JArray< jint > a0((jobject) NULL);
          jint a1;
          jint a2;

          if (!parseArgs(args, "[III", &a0, &a1, &a2))
          {
            OBJ_CALL(::java::util::Arrays::parallelSort(a0, a1, a2));
            Py_RETURN_NONE;
          }
        }
        {
          JArray< jchar > a0((jobject) NULL);
          jint a1;
          jint a2;

          if (!parseArgs(args, "[CII", &a0, &a1, &a2))
          {
            OBJ_CALL(::java::util::Arrays::parallelSort(a0, a1, a2));
            Py_RETURN_NONE;
          }
        }
        {
          JArray< jshort > a0((jobject) NULL);
          jint a1;
          jint a2;

          if (!parseArgs(args, "[SII", &a0, &a1, &a2))
          {
            OBJ_CALL(::java::util::Arrays::parallelSort(a0, a1, a2));
            Py_RETURN_NONE;
          }
        }
        {
          JArray< jbyte > a0((jobject) NULL);
          jint a1;
          jint a2;

          if (!parseArgs(args, "[BII", &a0, &a1, &a2))
          {
            OBJ_CALL(::java::util::Arrays::parallelSort(a0, a1, a2));
            Py_RETURN_NONE;
          }
        }
        break;
       case 4:
        {
          JArray< ::java::lang::Object > a0((jobject) NULL);
          jint a1;
          jint a2;
          ::java::util::Comparator a3((jobject) NULL);
          PyTypeObject **p3;

          if (!parseArgs(args, "[oIIK", ::java::util::Comparator::initializeClass, &a0, &a1, &a2, &a3, &p3, ::java::util::t_Comparator::parameters_))
          {
            OBJ_CALL(::java::util::Arrays::parallelSort(a0, a1, a2, a3));
            Py_RETURN_NONE;
          }
        }
      }

      PyErr_SetArgsError(type, "parallelSort", args);
      return NULL;
    }

    static PyObject *t_Arrays_sort(PyTypeObject *type, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 1:
        {
          JArray< jfloat > a0((jobject) NULL);

          if (!parseArgs(args, "[F", &a0))
          {
            OBJ_CALL(::java::util::Arrays::sort(a0));
            Py_RETURN_NONE;
          }
        }
        {
          JArray< jdouble > a0((jobject) NULL);

          if (!parseArgs(args, "[D", &a0))
          {
            OBJ_CALL(::java::util::Arrays::sort(a0));
            Py_RETURN_NONE;
          }
        }
        {
          JArray< jchar > a0((jobject) NULL);

          if (!parseArgs(args, "[C", &a0))
          {
            OBJ_CALL(::java::util::Arrays::sort(a0));
            Py_RETURN_NONE;
          }
        }
        {
          JArray< ::java::lang::Object > a0((jobject) NULL);

          if (!parseArgs(args, "[o", &a0))
          {
            OBJ_CALL(::java::util::Arrays::sort(a0));
            Py_RETURN_NONE;
          }
        }
        {
          JArray< jbyte > a0((jobject) NULL);

          if (!parseArgs(args, "[B", &a0))
          {
            OBJ_CALL(::java::util::Arrays::sort(a0));
            Py_RETURN_NONE;
          }
        }
        {
          JArray< jlong > a0((jobject) NULL);

          if (!parseArgs(args, "[J", &a0))
          {
            OBJ_CALL(::java::util::Arrays::sort(a0));
            Py_RETURN_NONE;
          }
        }
        {
          JArray< jshort > a0((jobject) NULL);

          if (!parseArgs(args, "[S", &a0))
          {
            OBJ_CALL(::java::util::Arrays::sort(a0));
            Py_RETURN_NONE;
          }
        }
        {
          JArray< jint > a0((jobject) NULL);

          if (!parseArgs(args, "[I", &a0))
          {
            OBJ_CALL(::java::util::Arrays::sort(a0));
            Py_RETURN_NONE;
          }
        }
        break;
       case 2:
        {
          JArray< ::java::lang::Object > a0((jobject) NULL);
          ::java::util::Comparator a1((jobject) NULL);
          PyTypeObject **p1;

          if (!parseArgs(args, "[oK", ::java::util::Comparator::initializeClass, &a0, &a1, &p1, ::java::util::t_Comparator::parameters_))
          {
            OBJ_CALL(::java::util::Arrays::sort(a0, a1));
            Py_RETURN_NONE;
          }
        }
        break;
       case 3:
        {
          JArray< jshort > a0((jobject) NULL);
          jint a1;
          jint a2;

          if (!parseArgs(args, "[SII", &a0, &a1, &a2))
          {
            OBJ_CALL(::java::util::Arrays::sort(a0, a1, a2));
            Py_RETURN_NONE;
          }
        }
        {
          JArray< jint > a0((jobject) NULL);
          jint a1;
          jint a2;

          if (!parseArgs(args, "[III", &a0, &a1, &a2))
          {
            OBJ_CALL(::java::util::Arrays::sort(a0, a1, a2));
            Py_RETURN_NONE;
          }
        }
        {
          JArray< jfloat > a0((jobject) NULL);
          jint a1;
          jint a2;

          if (!parseArgs(args, "[FII", &a0, &a1, &a2))
          {
            OBJ_CALL(::java::util::Arrays::sort(a0, a1, a2));
            Py_RETURN_NONE;
          }
        }
        {
          JArray< jbyte > a0((jobject) NULL);
          jint a1;
          jint a2;

          if (!parseArgs(args, "[BII", &a0, &a1, &a2))
          {
            OBJ_CALL(::java::util::Arrays::sort(a0, a1, a2));
            Py_RETURN_NONE;
          }
        }
        {
          JArray< jchar > a0((jobject) NULL);
          jint a1;
          jint a2;

          if (!parseArgs(args, "[CII", &a0, &a1, &a2))
          {
            OBJ_CALL(::java::util::Arrays::sort(a0, a1, a2));
            Py_RETURN_NONE;
          }
        }
        {
          JArray< jdouble > a0((jobject) NULL);
          jint a1;
          jint a2;

          if (!parseArgs(args, "[DII", &a0, &a1, &a2))
          {
            OBJ_CALL(::java::util::Arrays::sort(a0, a1, a2));
            Py_RETURN_NONE;
          }
        }
        {
          JArray< jlong > a0((jobject) NULL);
          jint a1;
          jint a2;

          if (!parseArgs(args, "[JII", &a0, &a1, &a2))
          {
            OBJ_CALL(::java::util::Arrays::sort(a0, a1, a2));
            Py_RETURN_NONE;
          }
        }
        {
          JArray< ::java::lang::Object > a0((jobject) NULL);
          jint a1;
          jint a2;

          if (!parseArgs(args, "[oII", &a0, &a1, &a2))
          {
            OBJ_CALL(::java::util::Arrays::sort(a0, a1, a2));
            Py_RETURN_NONE;
          }
        }
        break;
       case 4:
        {
          JArray< ::java::lang::Object > a0((jobject) NULL);
          jint a1;
          jint a2;
          ::java::util::Comparator a3((jobject) NULL);
          PyTypeObject **p3;

          if (!parseArgs(args, "[oIIK", ::java::util::Comparator::initializeClass, &a0, &a1, &a2, &a3, &p3, ::java::util::t_Comparator::parameters_))
          {
            OBJ_CALL(::java::util::Arrays::sort(a0, a1, a2, a3));
            Py_RETURN_NONE;
          }
        }
      }

      PyErr_SetArgsError(type, "sort", args);
      return NULL;
    }

    static PyObject *t_Arrays_spliterator(PyTypeObject *type, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 1:
        {
          JArray< jdouble > a0((jobject) NULL);
          ::java::util::Spliterator$OfDouble result((jobject) NULL);

          if (!parseArgs(args, "[D", &a0))
          {
            OBJ_CALL(result = ::java::util::Arrays::spliterator(a0));
            return ::java::util::t_Spliterator$OfDouble::wrap_Object(result);
          }
        }
        {
          JArray< ::java::lang::Object > a0((jobject) NULL);
          ::java::util::Spliterator result((jobject) NULL);

          if (!parseArgs(args, "[o", &a0))
          {
            OBJ_CALL(result = ::java::util::Arrays::spliterator(a0));
            return ::java::util::t_Spliterator::wrap_Object(result);
          }
        }
        {
          JArray< jlong > a0((jobject) NULL);
          ::java::util::Spliterator$OfLong result((jobject) NULL);

          if (!parseArgs(args, "[J", &a0))
          {
            OBJ_CALL(result = ::java::util::Arrays::spliterator(a0));
            return ::java::util::t_Spliterator$OfLong::wrap_Object(result);
          }
        }
        {
          JArray< jint > a0((jobject) NULL);
          ::java::util::Spliterator$OfInt result((jobject) NULL);

          if (!parseArgs(args, "[I", &a0))
          {
            OBJ_CALL(result = ::java::util::Arrays::spliterator(a0));
            return ::java::util::t_Spliterator$OfInt::wrap_Object(result);
          }
        }
        break;
       case 3:
        {
          JArray< jdouble > a0((jobject) NULL);
          jint a1;
          jint a2;
          ::java::util::Spliterator$OfDouble result((jobject) NULL);

          if (!parseArgs(args, "[DII", &a0, &a1, &a2))
          {
            OBJ_CALL(result = ::java::util::Arrays::spliterator(a0, a1, a2));
            return ::java::util::t_Spliterator$OfDouble::wrap_Object(result);
          }
        }
        {
          JArray< ::java::lang::Object > a0((jobject) NULL);
          jint a1;
          jint a2;
          ::java::util::Spliterator result((jobject) NULL);

          if (!parseArgs(args, "[oII", &a0, &a1, &a2))
          {
            OBJ_CALL(result = ::java::util::Arrays::spliterator(a0, a1, a2));
            return ::java::util::t_Spliterator::wrap_Object(result);
          }
        }
        {
          JArray< jlong > a0((jobject) NULL);
          jint a1;
          jint a2;
          ::java::util::Spliterator$OfLong result((jobject) NULL);

          if (!parseArgs(args, "[JII", &a0, &a1, &a2))
          {
            OBJ_CALL(result = ::java::util::Arrays::spliterator(a0, a1, a2));
            return ::java::util::t_Spliterator$OfLong::wrap_Object(result);
          }
        }
        {
          JArray< jint > a0((jobject) NULL);
          jint a1;
          jint a2;
          ::java::util::Spliterator$OfInt result((jobject) NULL);

          if (!parseArgs(args, "[III", &a0, &a1, &a2))
          {
            OBJ_CALL(result = ::java::util::Arrays::spliterator(a0, a1, a2));
            return ::java::util::t_Spliterator$OfInt::wrap_Object(result);
          }
        }
      }

      PyErr_SetArgsError(type, "spliterator", args);
      return NULL;
    }

    static PyObject *t_Arrays_toString(PyTypeObject *type, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 1:
        {
          JArray< jfloat > a0((jobject) NULL);
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, "[F", &a0))
          {
            OBJ_CALL(result = ::java::util::Arrays::toString(a0));
            return j2p(result);
          }
        }
        {
          JArray< jchar > a0((jobject) NULL);
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, "[C", &a0))
          {
            OBJ_CALL(result = ::java::util::Arrays::toString(a0));
            return j2p(result);
          }
        }
        {
          JArray< jdouble > a0((jobject) NULL);
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, "[D", &a0))
          {
            OBJ_CALL(result = ::java::util::Arrays::toString(a0));
            return j2p(result);
          }
        }
        {
          JArray< jshort > a0((jobject) NULL);
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, "[S", &a0))
          {
            OBJ_CALL(result = ::java::util::Arrays::toString(a0));
            return j2p(result);
          }
        }
        {
          JArray< jboolean > a0((jobject) NULL);
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, "[Z", &a0))
          {
            OBJ_CALL(result = ::java::util::Arrays::toString(a0));
            return j2p(result);
          }
        }
        {
          JArray< jbyte > a0((jobject) NULL);
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, "[B", &a0))
          {
            OBJ_CALL(result = ::java::util::Arrays::toString(a0));
            return j2p(result);
          }
        }
        {
          JArray< ::java::lang::Object > a0((jobject) NULL);
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, "[o", &a0))
          {
            OBJ_CALL(result = ::java::util::Arrays::toString(a0));
            return j2p(result);
          }
        }
        {
          JArray< jlong > a0((jobject) NULL);
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, "[J", &a0))
          {
            OBJ_CALL(result = ::java::util::Arrays::toString(a0));
            return j2p(result);
          }
        }
        {
          JArray< jint > a0((jobject) NULL);
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, "[I", &a0))
          {
            OBJ_CALL(result = ::java::util::Arrays::toString(a0));
            return j2p(result);
          }
        }
      }

      return callSuper(type, "toString", args, 2);
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/MultiDocValues$OrdinalMap.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/index/TermsEnum.h"
#include "org/apache/lucene/util/Accountable.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/util/LongValues.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *MultiDocValues$OrdinalMap::class$ = NULL;
        jmethodID *MultiDocValues$OrdinalMap::mids$ = NULL;
        bool MultiDocValues$OrdinalMap::live$ = false;

        jclass MultiDocValues$OrdinalMap::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/MultiDocValues$OrdinalMap");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_f12e599e] = env->getMethodID(cls, "<init>", "(Ljava/lang/Object;[Lorg/apache/lucene/index/TermsEnum;)V");
            mids$[mid_init$_222cf653] = env->getMethodID(cls, "<init>", "(Ljava/lang/Object;[Lorg/apache/lucene/index/TermsEnum;F)V");
            mids$[mid_getFirstSegmentNumber_0ee6df30] = env->getMethodID(cls, "getFirstSegmentNumber", "(J)I");
            mids$[mid_getFirstSegmentOrd_0ee6df33] = env->getMethodID(cls, "getFirstSegmentOrd", "(J)J");
            mids$[mid_getGlobalOrds_f3def9cd] = env->getMethodID(cls, "getGlobalOrds", "(I)Lorg/apache/lucene/util/LongValues;");
            mids$[mid_getValueCount_54c6a17a] = env->getMethodID(cls, "getValueCount", "()J");
            mids$[mid_ramBytesUsed_54c6a17a] = env->getMethodID(cls, "ramBytesUsed", "()J");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        MultiDocValues$OrdinalMap::MultiDocValues$OrdinalMap(const ::java::lang::Object & a0, const JArray< ::org::apache::lucene::index::TermsEnum > & a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_f12e599e, a0.this$, a1.this$)) {}

        MultiDocValues$OrdinalMap::MultiDocValues$OrdinalMap(const ::java::lang::Object & a0, const JArray< ::org::apache::lucene::index::TermsEnum > & a1, jfloat a2) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_222cf653, a0.this$, a1.this$, a2)) {}

        jint MultiDocValues$OrdinalMap::getFirstSegmentNumber(jlong a0) const
        {
          return env->callIntMethod(this$, mids$[mid_getFirstSegmentNumber_0ee6df30], a0);
        }

        jlong MultiDocValues$OrdinalMap::getFirstSegmentOrd(jlong a0) const
        {
          return env->callLongMethod(this$, mids$[mid_getFirstSegmentOrd_0ee6df33], a0);
        }

        ::org::apache::lucene::util::LongValues MultiDocValues$OrdinalMap::getGlobalOrds(jint a0) const
        {
          return ::org::apache::lucene::util::LongValues(env->callObjectMethod(this$, mids$[mid_getGlobalOrds_f3def9cd], a0));
        }

        jlong MultiDocValues$OrdinalMap::getValueCount() const
        {
          return env->callLongMethod(this$, mids$[mid_getValueCount_54c6a17a]);
        }

        jlong MultiDocValues$OrdinalMap::ramBytesUsed() const
        {
          return env->callLongMethod(this$, mids$[mid_ramBytesUsed_54c6a17a]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_MultiDocValues$OrdinalMap_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_MultiDocValues$OrdinalMap_instance_(PyTypeObject *type, PyObject *arg);
        static int t_MultiDocValues$OrdinalMap_init_(t_MultiDocValues$OrdinalMap *self, PyObject *args, PyObject *kwds);
        static PyObject *t_MultiDocValues$OrdinalMap_getFirstSegmentNumber(t_MultiDocValues$OrdinalMap *self, PyObject *arg);
        static PyObject *t_MultiDocValues$OrdinalMap_getFirstSegmentOrd(t_MultiDocValues$OrdinalMap *self, PyObject *arg);
        static PyObject *t_MultiDocValues$OrdinalMap_getGlobalOrds(t_MultiDocValues$OrdinalMap *self, PyObject *arg);
        static PyObject *t_MultiDocValues$OrdinalMap_getValueCount(t_MultiDocValues$OrdinalMap *self);
        static PyObject *t_MultiDocValues$OrdinalMap_ramBytesUsed(t_MultiDocValues$OrdinalMap *self);
        static PyObject *t_MultiDocValues$OrdinalMap_get__valueCount(t_MultiDocValues$OrdinalMap *self, void *data);
        static PyGetSetDef t_MultiDocValues$OrdinalMap__fields_[] = {
          DECLARE_GET_FIELD(t_MultiDocValues$OrdinalMap, valueCount),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_MultiDocValues$OrdinalMap__methods_[] = {
          DECLARE_METHOD(t_MultiDocValues$OrdinalMap, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MultiDocValues$OrdinalMap, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MultiDocValues$OrdinalMap, getFirstSegmentNumber, METH_O),
          DECLARE_METHOD(t_MultiDocValues$OrdinalMap, getFirstSegmentOrd, METH_O),
          DECLARE_METHOD(t_MultiDocValues$OrdinalMap, getGlobalOrds, METH_O),
          DECLARE_METHOD(t_MultiDocValues$OrdinalMap, getValueCount, METH_NOARGS),
          DECLARE_METHOD(t_MultiDocValues$OrdinalMap, ramBytesUsed, METH_NOARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(MultiDocValues$OrdinalMap, t_MultiDocValues$OrdinalMap, ::java::lang::Object, MultiDocValues$OrdinalMap, t_MultiDocValues$OrdinalMap_init_, 0, 0, t_MultiDocValues$OrdinalMap__fields_, 0, 0);

        void t_MultiDocValues$OrdinalMap::install(PyObject *module)
        {
          installType(&PY_TYPE(MultiDocValues$OrdinalMap), module, "MultiDocValues$OrdinalMap", 0);
        }

        void t_MultiDocValues$OrdinalMap::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(MultiDocValues$OrdinalMap).tp_dict, "class_", make_descriptor(MultiDocValues$OrdinalMap::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(MultiDocValues$OrdinalMap).tp_dict, "wrapfn_", make_descriptor(t_MultiDocValues$OrdinalMap::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(MultiDocValues$OrdinalMap).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_MultiDocValues$OrdinalMap_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, MultiDocValues$OrdinalMap::initializeClass, 1)))
            return NULL;
          return t_MultiDocValues$OrdinalMap::wrap_Object(MultiDocValues$OrdinalMap(((t_MultiDocValues$OrdinalMap *) arg)->object.this$));
        }
        static PyObject *t_MultiDocValues$OrdinalMap_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, MultiDocValues$OrdinalMap::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_MultiDocValues$OrdinalMap_init_(t_MultiDocValues$OrdinalMap *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 2:
            {
              ::java::lang::Object a0((jobject) NULL);
              JArray< ::org::apache::lucene::index::TermsEnum > a1((jobject) NULL);
              MultiDocValues$OrdinalMap object((jobject) NULL);

              if (!parseArgs(args, "o[k", ::org::apache::lucene::index::TermsEnum::initializeClass, &a0, &a1))
              {
                INT_CALL(object = MultiDocValues$OrdinalMap(a0, a1));
                self->object = object;
                break;
              }
            }
            goto err;
           case 3:
            {
              ::java::lang::Object a0((jobject) NULL);
              JArray< ::org::apache::lucene::index::TermsEnum > a1((jobject) NULL);
              jfloat a2;
              MultiDocValues$OrdinalMap object((jobject) NULL);

              if (!parseArgs(args, "o[kF", ::org::apache::lucene::index::TermsEnum::initializeClass, &a0, &a1, &a2))
              {
                INT_CALL(object = MultiDocValues$OrdinalMap(a0, a1, a2));
                self->object = object;
                break;
              }
            }
           default:
           err:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_MultiDocValues$OrdinalMap_getFirstSegmentNumber(t_MultiDocValues$OrdinalMap *self, PyObject *arg)
        {
          jlong a0;
          jint result;

          if (!parseArg(arg, "J", &a0))
          {
            OBJ_CALL(result = self->object.getFirstSegmentNumber(a0));
            return PyInt_FromLong((long) result);
          }

          PyErr_SetArgsError((PyObject *) self, "getFirstSegmentNumber", arg);
          return NULL;
        }

        static PyObject *t_MultiDocValues$OrdinalMap_getFirstSegmentOrd(t_MultiDocValues$OrdinalMap *self, PyObject *arg)
        {
          jlong a0;
          jlong result;

          if (!parseArg(arg, "J", &a0))
          {
            OBJ_CALL(result = self->object.getFirstSegmentOrd(a0));
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          PyErr_SetArgsError((PyObject *) self, "getFirstSegmentOrd", arg);
          return NULL;
        }

        static PyObject *t_MultiDocValues$OrdinalMap_getGlobalOrds(t_MultiDocValues$OrdinalMap *self, PyObject *arg)
        {
          jint a0;
          ::org::apache::lucene::util::LongValues result((jobject) NULL);

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(result = self->object.getGlobalOrds(a0));
            return ::org::apache::lucene::util::t_LongValues::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "getGlobalOrds", arg);
          return NULL;
        }

        static PyObject *t_MultiDocValues$OrdinalMap_getValueCount(t_MultiDocValues$OrdinalMap *self)
        {
          jlong result;
          OBJ_CALL(result = self->object.getValueCount());
          return PyLong_FromLongLong((PY_LONG_LONG) result);
        }

        static PyObject *t_MultiDocValues$OrdinalMap_ramBytesUsed(t_MultiDocValues$OrdinalMap *self)
        {
          jlong result;
          OBJ_CALL(result = self->object.ramBytesUsed());
          return PyLong_FromLongLong((PY_LONG_LONG) result);
        }

        static PyObject *t_MultiDocValues$OrdinalMap_get__valueCount(t_MultiDocValues$OrdinalMap *self, void *data)
        {
          jlong value;
          OBJ_CALL(value = self->object.getValueCount());
          return PyLong_FromLongLong((PY_LONG_LONG) value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/ToStringUtils.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *ToStringUtils::class$ = NULL;
        jmethodID *ToStringUtils::mids$ = NULL;
        bool ToStringUtils::live$ = false;

        jclass ToStringUtils::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/ToStringUtils");

            mids$ = new jmethodID[max_mid];
            mids$[mid_boost_5ded254a] = env->getStaticMethodID(cls, "boost", "(F)Ljava/lang/String;");
            mids$[mid_byteArray_982a0ced] = env->getStaticMethodID(cls, "byteArray", "(Ljava/lang/StringBuilder;[B)V");
            mids$[mid_longHex_3e02f30e] = env->getStaticMethodID(cls, "longHex", "(J)Ljava/lang/String;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        ::java::lang::String ToStringUtils::boost(jfloat a0)
        {
          jclass cls = env->getClass(initializeClass);
          return ::java::lang::String(env->callStaticObjectMethod(cls, mids$[mid_boost_5ded254a], a0));
        }

        void ToStringUtils::byteArray(const ::java::lang::StringBuilder & a0, const JArray< jbyte > & a1)
        {
          jclass cls = env->getClass(initializeClass);
          env->callStaticVoidMethod(cls, mids$[mid_byteArray_982a0ced], a0.this$, a1.this$);
        }

        ::java::lang::String ToStringUtils::longHex(jlong a0)
        {
          jclass cls = env->getClass(initializeClass);
          return ::java::lang::String(env->callStaticObjectMethod(cls, mids$[mid_longHex_3e02f30e], a0));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_ToStringUtils_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_ToStringUtils_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_ToStringUtils_boost(PyTypeObject *type, PyObject *arg);
        static PyObject *t_ToStringUtils_byteArray(PyTypeObject *type, PyObject *args);
        static PyObject *t_ToStringUtils_longHex(PyTypeObject *type, PyObject *arg);

        static PyMethodDef t_ToStringUtils__methods_[] = {
          DECLARE_METHOD(t_ToStringUtils, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_ToStringUtils, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_ToStringUtils, boost, METH_O | METH_CLASS),
          DECLARE_METHOD(t_ToStringUtils, byteArray, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_ToStringUtils, longHex, METH_O | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(ToStringUtils, t_ToStringUtils, ::java::lang::Object, ToStringUtils, abstract_init, 0, 0, 0, 0, 0);

        void t_ToStringUtils::install(PyObject *module)
        {
          installType(&PY_TYPE(ToStringUtils), module, "ToStringUtils", 0);
        }

        void t_ToStringUtils::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(ToStringUtils).tp_dict, "class_", make_descriptor(ToStringUtils::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(ToStringUtils).tp_dict, "wrapfn_", make_descriptor(t_ToStringUtils::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(ToStringUtils).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_ToStringUtils_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, ToStringUtils::initializeClass, 1)))
            return NULL;
          return t_ToStringUtils::wrap_Object(ToStringUtils(((t_ToStringUtils *) arg)->object.this$));
        }
        static PyObject *t_ToStringUtils_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, ToStringUtils::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_ToStringUtils_boost(PyTypeObject *type, PyObject *arg)
        {
          jfloat a0;
          ::java::lang::String result((jobject) NULL);

          if (!parseArg(arg, "F", &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::util::ToStringUtils::boost(a0));
            return j2p(result);
          }

          PyErr_SetArgsError(type, "boost", arg);
          return NULL;
        }

        static PyObject *t_ToStringUtils_byteArray(PyTypeObject *type, PyObject *args)
        {
          ::java::lang::StringBuilder a0((jobject) NULL);
          JArray< jbyte > a1((jobject) NULL);

          if (!parseArgs(args, "k[B", ::java::lang::StringBuilder::initializeClass, &a0, &a1))
          {
            OBJ_CALL(::org::apache::lucene::util::ToStringUtils::byteArray(a0, a1));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError(type, "byteArray", args);
          return NULL;
        }

        static PyObject *t_ToStringUtils_longHex(PyTypeObject *type, PyObject *arg)
        {
          jlong a0;
          ::java::lang::String result((jobject) NULL);

          if (!parseArg(arg, "J", &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::util::ToStringUtils::longHex(a0));
            return j2p(result);
          }

          PyErr_SetArgsError(type, "longHex", arg);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/ConstantScoreQuery.h"
#include "org/apache/lucene/search/Weight.h"
#include "java/lang/Class.h"
#include "java/lang/Object.h"
#include "org/apache/lucene/search/Filter.h"
#include "java/io/IOException.h"
#include "java/util/Set.h"
#include "java/lang/String.h"
#include "org/apache/lucene/search/IndexSearcher.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "org/apache/lucene/index/Term.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *ConstantScoreQuery::class$ = NULL;
        jmethodID *ConstantScoreQuery::mids$ = NULL;
        bool ConstantScoreQuery::live$ = false;

        jclass ConstantScoreQuery::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/ConstantScoreQuery");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_6e301113] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/Query;)V");
            mids$[mid_init$_9bb37152] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/Filter;)V");
            mids$[mid_createWeight_367763cb] = env->getMethodID(cls, "createWeight", "(Lorg/apache/lucene/search/IndexSearcher;)Lorg/apache/lucene/search/Weight;");
            mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
            mids$[mid_extractTerms_fb4f2b26] = env->getMethodID(cls, "extractTerms", "(Ljava/util/Set;)V");
            mids$[mid_getFilter_b40f961f] = env->getMethodID(cls, "getFilter", "()Lorg/apache/lucene/search/Filter;");
            mids$[mid_getQuery_97e3851a] = env->getMethodID(cls, "getQuery", "()Lorg/apache/lucene/search/Query;");
            mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
            mids$[mid_rewrite_7edcaa43] = env->getMethodID(cls, "rewrite", "(Lorg/apache/lucene/index/IndexReader;)Lorg/apache/lucene/search/Query;");
            mids$[mid_toString_97a5258f] = env->getMethodID(cls, "toString", "(Ljava/lang/String;)Ljava/lang/String;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        ConstantScoreQuery::ConstantScoreQuery(const ::org::apache::lucene::search::Query & a0) : ::org::apache::lucene::search::Query(env->newObject(initializeClass, &mids$, mid_init$_6e301113, a0.this$)) {}

        ConstantScoreQuery::ConstantScoreQuery(const ::org::apache::lucene::search::Filter & a0) : ::org::apache::lucene::search::Query(env->newObject(initializeClass, &mids$, mid_init$_9bb37152, a0.this$)) {}

        ::org::apache::lucene::search::Weight ConstantScoreQuery::createWeight(const ::org::apache::lucene::search::IndexSearcher & a0) const
        {
          return ::org::apache::lucene::search::Weight(env->callObjectMethod(this$, mids$[mid_createWeight_367763cb], a0.this$));
        }

        jboolean ConstantScoreQuery::equals(const ::java::lang::Object & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
        }

        void ConstantScoreQuery::extractTerms(const ::java::util::Set & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_extractTerms_fb4f2b26], a0.this$);
        }

        ::org::apache::lucene::search::Filter ConstantScoreQuery::getFilter() const
        {
          return ::org::apache::lucene::search::Filter(env->callObjectMethod(this$, mids$[mid_getFilter_b40f961f]));
        }

        ::org::apache::lucene::search::Query ConstantScoreQuery::getQuery() const
        {
          return ::org::apache::lucene::search::Query(env->callObjectMethod(this$, mids$[mid_getQuery_97e3851a]));
        }

        jint ConstantScoreQuery::hashCode() const
        {
          return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
        }

        ::org::apache::lucene::search::Query ConstantScoreQuery::rewrite(const ::org::apache::lucene::index::IndexReader & a0) const
        {
          return ::org::apache::lucene::search::Query(env->callObjectMethod(this$, mids$[mid_rewrite_7edcaa43], a0.this$));
        }

        ::java::lang::String ConstantScoreQuery::toString(const ::java::lang::String & a0) const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_97a5258f], a0.this$));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_ConstantScoreQuery_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_ConstantScoreQuery_instance_(PyTypeObject *type, PyObject *arg);
        static int t_ConstantScoreQuery_init_(t_ConstantScoreQuery *self, PyObject *args, PyObject *kwds);
        static PyObject *t_ConstantScoreQuery_createWeight(t_ConstantScoreQuery *self, PyObject *args);
        static PyObject *t_ConstantScoreQuery_equals(t_ConstantScoreQuery *self, PyObject *args);
        static PyObject *t_ConstantScoreQuery_extractTerms(t_ConstantScoreQuery *self, PyObject *args);
        static PyObject *t_ConstantScoreQuery_getFilter(t_ConstantScoreQuery *self);
        static PyObject *t_ConstantScoreQuery_getQuery(t_ConstantScoreQuery *self);
        static PyObject *t_ConstantScoreQuery_hashCode(t_ConstantScoreQuery *self, PyObject *args);
        static PyObject *t_ConstantScoreQuery_rewrite(t_ConstantScoreQuery *self, PyObject *args);
        static PyObject *t_ConstantScoreQuery_toString(t_ConstantScoreQuery *self, PyObject *args);
        static PyObject *t_ConstantScoreQuery_get__filter(t_ConstantScoreQuery *self, void *data);
        static PyObject *t_ConstantScoreQuery_get__query(t_ConstantScoreQuery *self, void *data);
        static PyGetSetDef t_ConstantScoreQuery__fields_[] = {
          DECLARE_GET_FIELD(t_ConstantScoreQuery, filter),
          DECLARE_GET_FIELD(t_ConstantScoreQuery, query),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_ConstantScoreQuery__methods_[] = {
          DECLARE_METHOD(t_ConstantScoreQuery, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_ConstantScoreQuery, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_ConstantScoreQuery, createWeight, METH_VARARGS),
          DECLARE_METHOD(t_ConstantScoreQuery, equals, METH_VARARGS),
          DECLARE_METHOD(t_ConstantScoreQuery, extractTerms, METH_VARARGS),
          DECLARE_METHOD(t_ConstantScoreQuery, getFilter, METH_NOARGS),
          DECLARE_METHOD(t_ConstantScoreQuery, getQuery, METH_NOARGS),
          DECLARE_METHOD(t_ConstantScoreQuery, hashCode, METH_VARARGS),
          DECLARE_METHOD(t_ConstantScoreQuery, rewrite, METH_VARARGS),
          DECLARE_METHOD(t_ConstantScoreQuery, toString, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(ConstantScoreQuery, t_ConstantScoreQuery, ::org::apache::lucene::search::Query, ConstantScoreQuery, t_ConstantScoreQuery_init_, 0, 0, t_ConstantScoreQuery__fields_, 0, 0);

        void t_ConstantScoreQuery::install(PyObject *module)
        {
          installType(&PY_TYPE(ConstantScoreQuery), module, "ConstantScoreQuery", 0);
        }

        void t_ConstantScoreQuery::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(ConstantScoreQuery).tp_dict, "class_", make_descriptor(ConstantScoreQuery::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(ConstantScoreQuery).tp_dict, "wrapfn_", make_descriptor(t_ConstantScoreQuery::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(ConstantScoreQuery).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_ConstantScoreQuery_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, ConstantScoreQuery::initializeClass, 1)))
            return NULL;
          return t_ConstantScoreQuery::wrap_Object(ConstantScoreQuery(((t_ConstantScoreQuery *) arg)->object.this$));
        }
        static PyObject *t_ConstantScoreQuery_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, ConstantScoreQuery::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_ConstantScoreQuery_init_(t_ConstantScoreQuery *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              ::org::apache::lucene::search::Query a0((jobject) NULL);
              ConstantScoreQuery object((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::search::Query::initializeClass, &a0))
              {
                INT_CALL(object = ConstantScoreQuery(a0));
                self->object = object;
                break;
              }
            }
            {
              ::org::apache::lucene::search::Filter a0((jobject) NULL);
              ConstantScoreQuery object((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::search::Filter::initializeClass, &a0))
              {
                INT_CALL(object = ConstantScoreQuery(a0));
                self->object = object;
                break;
              }
            }
           default:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_ConstantScoreQuery_createWeight(t_ConstantScoreQuery *self, PyObject *args)
        {
          ::org::apache::lucene::search::IndexSearcher a0((jobject) NULL);
          ::org::apache::lucene::search::Weight result((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::search::IndexSearcher::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.createWeight(a0));
            return ::org::apache::lucene::search::t_Weight::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(ConstantScoreQuery), (PyObject *) self, "createWeight", args, 2);
        }

        static PyObject *t_ConstantScoreQuery_equals(t_ConstantScoreQuery *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.equals(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(ConstantScoreQuery), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_ConstantScoreQuery_extractTerms(t_ConstantScoreQuery *self, PyObject *args)
        {
          ::java::util::Set a0((jobject) NULL);
          PyTypeObject **p0;

          if (!parseArgs(args, "K", ::java::util::Set::initializeClass, &a0, &p0, ::java::util::t_Set::parameters_))
          {
            OBJ_CALL(self->object.extractTerms(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(ConstantScoreQuery), (PyObject *) self, "extractTerms", args, 2);
        }

        static PyObject *t_ConstantScoreQuery_getFilter(t_ConstantScoreQuery *self)
        {
          ::org::apache::lucene::search::Filter result((jobject) NULL);
          OBJ_CALL(result = self->object.getFilter());
          return ::org::apache::lucene::search::t_Filter::wrap_Object(result);
        }

        static PyObject *t_ConstantScoreQuery_getQuery(t_ConstantScoreQuery *self)
        {
          ::org::apache::lucene::search::Query result((jobject) NULL);
          OBJ_CALL(result = self->object.getQuery());
          return ::org::apache::lucene::search::t_Query::wrap_Object(result);
        }

        static PyObject *t_ConstantScoreQuery_hashCode(t_ConstantScoreQuery *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hashCode());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(ConstantScoreQuery), (PyObject *) self, "hashCode", args, 2);
        }

        static PyObject *t_ConstantScoreQuery_rewrite(t_ConstantScoreQuery *self, PyObject *args)
        {
          ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
          ::org::apache::lucene::search::Query result((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::index::IndexReader::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.rewrite(a0));
            return ::org::apache::lucene::search::t_Query::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(ConstantScoreQuery), (PyObject *) self, "rewrite", args, 2);
        }

        static PyObject *t_ConstantScoreQuery_toString(t_ConstantScoreQuery *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = self->object.toString(a0));
            return j2p(result);
          }

          return callSuper(&PY_TYPE(ConstantScoreQuery), (PyObject *) self, "toString", args, 2);
        }

        static PyObject *t_ConstantScoreQuery_get__filter(t_ConstantScoreQuery *self, void *data)
        {
          ::org::apache::lucene::search::Filter value((jobject) NULL);
          OBJ_CALL(value = self->object.getFilter());
          return ::org::apache::lucene::search::t_Filter::wrap_Object(value);
        }

        static PyObject *t_ConstantScoreQuery_get__query(t_ConstantScoreQuery *self, void *data)
        {
          ::org::apache::lucene::search::Query value((jobject) NULL);
          OBJ_CALL(value = self->object.getQuery());
          return ::org::apache::lucene::search::t_Query::wrap_Object(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queries/function/valuesource/DualFloatFunction.h"
#include "org/apache/lucene/queries/function/FunctionValues.h"
#include "java/lang/Class.h"
#include "java/lang/Object.h"
#include "java/io/IOException.h"
#include "java/util/Map.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "java/lang/String.h"
#include "org/apache/lucene/search/IndexSearcher.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {

            ::java::lang::Class *DualFloatFunction::class$ = NULL;
            jmethodID *DualFloatFunction::mids$ = NULL;
            bool DualFloatFunction::live$ = false;

            jclass DualFloatFunction::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queries/function/valuesource/DualFloatFunction");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_74aa307e] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/queries/function/ValueSource;Lorg/apache/lucene/queries/function/ValueSource;)V");
                mids$[mid_createWeight_1b6125ba] = env->getMethodID(cls, "createWeight", "(Ljava/util/Map;Lorg/apache/lucene/search/IndexSearcher;)V");
                mids$[mid_description_14c7b5c5] = env->getMethodID(cls, "description", "()Ljava/lang/String;");
                mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
                mids$[mid_getValues_4c566485] = env->getMethodID(cls, "getValues", "(Ljava/util/Map;Lorg/apache/lucene/index/AtomicReaderContext;)Lorg/apache/lucene/queries/function/FunctionValues;");
                mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
                mids$[mid_name_14c7b5c5] = env->getMethodID(cls, "name", "()Ljava/lang/String;");
                mids$[mid_func_3711414a] = env->getMethodID(cls, "func", "(ILorg/apache/lucene/queries/function/FunctionValues;Lorg/apache/lucene/queries/function/FunctionValues;)F");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            DualFloatFunction::DualFloatFunction(const ::org::apache::lucene::queries::function::ValueSource & a0, const ::org::apache::lucene::queries::function::ValueSource & a1) : ::org::apache::lucene::queries::function::ValueSource(env->newObject(initializeClass, &mids$, mid_init$_74aa307e, a0.this$, a1.this$)) {}

            void DualFloatFunction::createWeight(const ::java::util::Map & a0, const ::org::apache::lucene::search::IndexSearcher & a1) const
            {
              env->callVoidMethod(this$, mids$[mid_createWeight_1b6125ba], a0.this$, a1.this$);
            }

            ::java::lang::String DualFloatFunction::description() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_description_14c7b5c5]));
            }

            jboolean DualFloatFunction::equals(const ::java::lang::Object & a0) const
            {
              return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
            }

            ::org::apache::lucene::queries::function::FunctionValues DualFloatFunction::getValues(const ::java::util::Map & a0, const ::org::apache::lucene::index::AtomicReaderContext & a1) const
            {
              return ::org::apache::lucene::queries::function::FunctionValues(env->callObjectMethod(this$, mids$[mid_getValues_4c566485], a0.this$, a1.this$));
            }

            jint DualFloatFunction::hashCode() const
            {
              return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {
            static PyObject *t_DualFloatFunction_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_DualFloatFunction_instance_(PyTypeObject *type, PyObject *arg);
            static int t_DualFloatFunction_init_(t_DualFloatFunction *self, PyObject *args, PyObject *kwds);
            static PyObject *t_DualFloatFunction_createWeight(t_DualFloatFunction *self, PyObject *args);
            static PyObject *t_DualFloatFunction_description(t_DualFloatFunction *self, PyObject *args);
            static PyObject *t_DualFloatFunction_equals(t_DualFloatFunction *self, PyObject *args);
            static PyObject *t_DualFloatFunction_getValues(t_DualFloatFunction *self, PyObject *args);
            static PyObject *t_DualFloatFunction_hashCode(t_DualFloatFunction *self, PyObject *args);

            static PyMethodDef t_DualFloatFunction__methods_[] = {
              DECLARE_METHOD(t_DualFloatFunction, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_DualFloatFunction, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_DualFloatFunction, createWeight, METH_VARARGS),
              DECLARE_METHOD(t_DualFloatFunction, description, METH_VARARGS),
              DECLARE_METHOD(t_DualFloatFunction, equals, METH_VARARGS),
              DECLARE_METHOD(t_DualFloatFunction, getValues, METH_VARARGS),
              DECLARE_METHOD(t_DualFloatFunction, hashCode, METH_VARARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(DualFloatFunction, t_DualFloatFunction, ::org::apache::lucene::queries::function::ValueSource, DualFloatFunction, t_DualFloatFunction_init_, 0, 0, 0, 0, 0);

            void t_DualFloatFunction::install(PyObject *module)
            {
              installType(&PY_TYPE(DualFloatFunction), module, "DualFloatFunction", 0);
            }

            void t_DualFloatFunction::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(DualFloatFunction).tp_dict, "class_", make_descriptor(DualFloatFunction::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(DualFloatFunction).tp_dict, "wrapfn_", make_descriptor(t_DualFloatFunction::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(DualFloatFunction).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_DualFloatFunction_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, DualFloatFunction::initializeClass, 1)))
                return NULL;
              return t_DualFloatFunction::wrap_Object(DualFloatFunction(((t_DualFloatFunction *) arg)->object.this$));
            }
            static PyObject *t_DualFloatFunction_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, DualFloatFunction::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_DualFloatFunction_init_(t_DualFloatFunction *self, PyObject *args, PyObject *kwds)
            {
              ::org::apache::lucene::queries::function::ValueSource a0((jobject) NULL);
              ::org::apache::lucene::queries::function::ValueSource a1((jobject) NULL);
              DualFloatFunction object((jobject) NULL);

              if (!parseArgs(args, "kk", ::org::apache::lucene::queries::function::ValueSource::initializeClass, ::org::apache::lucene::queries::function::ValueSource::initializeClass, &a0, &a1))
              {
                INT_CALL(object = DualFloatFunction(a0, a1));
                self->object = object;
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_DualFloatFunction_createWeight(t_DualFloatFunction *self, PyObject *args)
            {
              ::java::util::Map a0((jobject) NULL);
              PyTypeObject **p0;
              ::org::apache::lucene::search::IndexSearcher a1((jobject) NULL);

              if (!parseArgs(args, "Kk", ::java::util::Map::initializeClass, ::org::apache::lucene::search::IndexSearcher::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_, &a1))
              {
                OBJ_CALL(self->object.createWeight(a0, a1));
                Py_RETURN_NONE;
              }

              return callSuper(&PY_TYPE(DualFloatFunction), (PyObject *) self, "createWeight", args, 2);
            }

            static PyObject *t_DualFloatFunction_description(t_DualFloatFunction *self, PyObject *args)
            {
              ::java::lang::String result((jobject) NULL);

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.description());
                return j2p(result);
              }

              return callSuper(&PY_TYPE(DualFloatFunction), (PyObject *) self, "description", args, 2);
            }

            static PyObject *t_DualFloatFunction_equals(t_DualFloatFunction *self, PyObject *args)
            {
              ::java::lang::Object a0((jobject) NULL);
              jboolean result;

              if (!parseArgs(args, "o", &a0))
              {
                OBJ_CALL(result = self->object.equals(a0));
                Py_RETURN_BOOL(result);
              }

              return callSuper(&PY_TYPE(DualFloatFunction), (PyObject *) self, "equals", args, 2);
            }

            static PyObject *t_DualFloatFunction_getValues(t_DualFloatFunction *self, PyObject *args)
            {
              ::java::util::Map a0((jobject) NULL);
              PyTypeObject **p0;
              ::org::apache::lucene::index::AtomicReaderContext a1((jobject) NULL);
              ::org::apache::lucene::queries::function::FunctionValues result((jobject) NULL);

              if (!parseArgs(args, "Kk", ::java::util::Map::initializeClass, ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_, &a1))
              {
                OBJ_CALL(result = self->object.getValues(a0, a1));
                return ::org::apache::lucene::queries::function::t_FunctionValues::wrap_Object(result);
              }

              return callSuper(&PY_TYPE(DualFloatFunction), (PyObject *) self, "getValues", args, 2);
            }

            static PyObject *t_DualFloatFunction_hashCode(t_DualFloatFunction *self, PyObject *args)
            {
              jint result;

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.hashCode());
                return PyInt_FromLong((long) result);
              }

              return callSuper(&PY_TYPE(DualFloatFunction), (PyObject *) self, "hashCode", args, 2);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/ckb/SoraniAnalyzer.h"
#include "org/apache/lucene/util/Version.h"
#include "java/lang/String.h"
#include "org/apache/lucene/analysis/util/CharArraySet.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ckb {

          ::java::lang::Class *SoraniAnalyzer::class$ = NULL;
          jmethodID *SoraniAnalyzer::mids$ = NULL;
          bool SoraniAnalyzer::live$ = false;
          ::java::lang::String *SoraniAnalyzer::DEFAULT_STOPWORD_FILE = NULL;

          jclass SoraniAnalyzer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/ckb/SoraniAnalyzer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_0d96cf33] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;)V");
              mids$[mid_init$_83eafe28] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/analysis/util/CharArraySet;)V");
              mids$[mid_init$_c9d7e4a3] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/analysis/util/CharArraySet;Lorg/apache/lucene/analysis/util/CharArraySet;)V");
              mids$[mid_getDefaultStopSet_d2d3505c] = env->getStaticMethodID(cls, "getDefaultStopSet", "()Lorg/apache/lucene/analysis/util/CharArraySet;");
              mids$[mid_createComponents_1be39cae] = env->getMethodID(cls, "createComponents", "(Ljava/lang/String;Ljava/io/Reader;)Lorg/apache/lucene/analysis/Analyzer$TokenStreamComponents;");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              DEFAULT_STOPWORD_FILE = new ::java::lang::String(env->getStaticObjectField(cls, "DEFAULT_STOPWORD_FILE", "Ljava/lang/String;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          SoraniAnalyzer::SoraniAnalyzer(const ::org::apache::lucene::util::Version & a0) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_0d96cf33, a0.this$)) {}

          SoraniAnalyzer::SoraniAnalyzer(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::analysis::util::CharArraySet & a1) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_83eafe28, a0.this$, a1.this$)) {}

          SoraniAnalyzer::SoraniAnalyzer(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::analysis::util::CharArraySet & a1, const ::org::apache::lucene::analysis::util::CharArraySet & a2) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_c9d7e4a3, a0.this$, a1.this$, a2.this$)) {}

          ::org::apache::lucene::analysis::util::CharArraySet SoraniAnalyzer::getDefaultStopSet()
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::analysis::util::CharArraySet(env->callStaticObjectMethod(cls, mids$[mid_getDefaultStopSet_d2d3505c]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ckb {
          static PyObject *t_SoraniAnalyzer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SoraniAnalyzer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_SoraniAnalyzer_init_(t_SoraniAnalyzer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_SoraniAnalyzer_getDefaultStopSet(PyTypeObject *type);
          static PyObject *t_SoraniAnalyzer_get__defaultStopSet(t_SoraniAnalyzer *self, void *data);
          static PyGetSetDef t_SoraniAnalyzer__fields_[] = {
            DECLARE_GET_FIELD(t_SoraniAnalyzer, defaultStopSet),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_SoraniAnalyzer__methods_[] = {
            DECLARE_METHOD(t_SoraniAnalyzer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SoraniAnalyzer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SoraniAnalyzer, getDefaultStopSet, METH_NOARGS | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(SoraniAnalyzer, t_SoraniAnalyzer, ::org::apache::lucene::analysis::util::StopwordAnalyzerBase, SoraniAnalyzer, t_SoraniAnalyzer_init_, 0, 0, t_SoraniAnalyzer__fields_, 0, 0);

          void t_SoraniAnalyzer::install(PyObject *module)
          {
            installType(&PY_TYPE(SoraniAnalyzer), module, "SoraniAnalyzer", 0);
          }

          void t_SoraniAnalyzer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(SoraniAnalyzer).tp_dict, "class_", make_descriptor(SoraniAnalyzer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(SoraniAnalyzer).tp_dict, "wrapfn_", make_descriptor(t_SoraniAnalyzer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(SoraniAnalyzer).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(SoraniAnalyzer::initializeClass);
            PyDict_SetItemString(PY_TYPE(SoraniAnalyzer).tp_dict, "DEFAULT_STOPWORD_FILE", make_descriptor(j2p(*SoraniAnalyzer::DEFAULT_STOPWORD_FILE)));
          }

          static PyObject *t_SoraniAnalyzer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, SoraniAnalyzer::initializeClass, 1)))
              return NULL;
            return t_SoraniAnalyzer::wrap_Object(SoraniAnalyzer(((t_SoraniAnalyzer *) arg)->object.this$));
          }
          static PyObject *t_SoraniAnalyzer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, SoraniAnalyzer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_SoraniAnalyzer_init_(t_SoraniAnalyzer *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                SoraniAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "K", ::org::apache::lucene::util::Version::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_))
                {
                  INT_CALL(object = SoraniAnalyzer(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 2:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                ::org::apache::lucene::analysis::util::CharArraySet a1((jobject) NULL);
                PyTypeObject **p1;
                SoraniAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "KK", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1, &p1, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_))
                {
                  INT_CALL(object = SoraniAnalyzer(a0, a1));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 3:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                ::org::apache::lucene::analysis::util::CharArraySet a1((jobject) NULL);
                PyTypeObject **p1;
                ::org::apache::lucene::analysis::util::CharArraySet a2((jobject) NULL);
                PyTypeObject **p2;
                SoraniAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "KKK", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1, &p1, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_, &a2, &p2, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_))
                {
                  INT_CALL(object = SoraniAnalyzer(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_SoraniAnalyzer_getDefaultStopSet(PyTypeObject *type)
          {
            ::org::apache::lucene::analysis::util::CharArraySet result((jobject) NULL);
            OBJ_CALL(result = ::org::apache::lucene::analysis::ckb::SoraniAnalyzer::getDefaultStopSet());
            return ::org::apache::lucene::analysis::util::t_CharArraySet::wrap_Object(result);
          }

          static PyObject *t_SoraniAnalyzer_get__defaultStopSet(t_SoraniAnalyzer *self, void *data)
          {
            ::org::apache::lucene::analysis::util::CharArraySet value((jobject) NULL);
            OBJ_CALL(value = self->object.getDefaultStopSet());
            return ::org::apache::lucene::analysis::util::t_CharArraySet::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/NumericTokenStream.h"
#include "java/lang/String.h"
#include "org/apache/lucene/util/AttributeFactory.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {

        ::java::lang::Class *NumericTokenStream::class$ = NULL;
        jmethodID *NumericTokenStream::mids$ = NULL;
        bool NumericTokenStream::live$ = false;
        ::java::lang::String *NumericTokenStream::TOKEN_TYPE_FULL_PREC = NULL;
        ::java::lang::String *NumericTokenStream::TOKEN_TYPE_LOWER_PREC = NULL;

        jclass NumericTokenStream::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/NumericTokenStream");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_init$_39c7bd3c] = env->getMethodID(cls, "<init>", "(I)V");
            mids$[mid_init$_f6b58e9c] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/AttributeFactory;I)V");
            mids$[mid_getPrecisionStep_54c6a179] = env->getMethodID(cls, "getPrecisionStep", "()I");
            mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");
            mids$[mid_reset_54c6a166] = env->getMethodID(cls, "reset", "()V");
            mids$[mid_setDoubleValue_9f5ef2d6] = env->getMethodID(cls, "setDoubleValue", "(D)Lorg/apache/lucene/analysis/NumericTokenStream;");
            mids$[mid_setFloatValue_e2936734] = env->getMethodID(cls, "setFloatValue", "(F)Lorg/apache/lucene/analysis/NumericTokenStream;");
            mids$[mid_setIntValue_ca7ab323] = env->getMethodID(cls, "setIntValue", "(I)Lorg/apache/lucene/analysis/NumericTokenStream;");
            mids$[mid_setLongValue_c6439648] = env->getMethodID(cls, "setLongValue", "(J)Lorg/apache/lucene/analysis/NumericTokenStream;");

            class$ = (::java::lang::Class *) new JObject(cls);
            cls = (jclass) class$->this$;

            TOKEN_TYPE_FULL_PREC = new ::java::lang::String(env->getStaticObjectField(cls, "TOKEN_TYPE_FULL_PREC", "Ljava/lang/String;"));
            TOKEN_TYPE_LOWER_PREC = new ::java::lang::String(env->getStaticObjectField(cls, "TOKEN_TYPE_LOWER_PREC", "Ljava/lang/String;"));
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        NumericTokenStream::NumericTokenStream() : ::org::apache::lucene::analysis::TokenStream(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        NumericTokenStream::NumericTokenStream(jint a0) : ::org::apache::lucene::analysis::TokenStream(env->newObject(initializeClass, &mids$, mid_init$_39c7bd3c, a0)) {}

        NumericTokenStream::NumericTokenStream(const ::org::apache::lucene::util::AttributeFactory & a0, jint a1) : ::org::apache::lucene::analysis::TokenStream(env->newObject(initializeClass, &mids$, mid_init$_f6b58e9c, a0.this$, a1)) {}

        jint NumericTokenStream::getPrecisionStep() const
        {
          return env->callIntMethod(this$, mids$[mid_getPrecisionStep_54c6a179]);
        }

        jboolean NumericTokenStream::incrementToken() const
        {
          return env->callBooleanMethod(this$, mids$[mid_incrementToken_54c6a16a]);
        }

        void NumericTokenStream::reset() const
        {
          env->callVoidMethod(this$, mids$[mid_reset_54c6a166]);
        }

        NumericTokenStream NumericTokenStream::setDoubleValue(jdouble a0) const
        {
          return NumericTokenStream(env->callObjectMethod(this$, mids$[mid_setDoubleValue_9f5ef2d6], a0));
        }

        NumericTokenStream NumericTokenStream::setFloatValue(jfloat a0) const
        {
          return NumericTokenStream(env->callObjectMethod(this$, mids$[mid_setFloatValue_e2936734], a0));
        }

        NumericTokenStream NumericTokenStream::setIntValue(jint a0) const
        {
          return NumericTokenStream(env->callObjectMethod(this$, mids$[mid_setIntValue_ca7ab323], a0));
        }

        NumericTokenStream NumericTokenStream::setLongValue(jlong a0) const
        {
          return NumericTokenStream(env->callObjectMethod(this$, mids$[mid_setLongValue_c6439648], a0));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"
#include "org/apache/lucene/analysis/NumericTokenStream$NumericTermAttributeImpl.h"
#include "org/apache/lucene/analysis/NumericTokenStream$NumericTermAttribute.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        static PyObject *t_NumericTokenStream_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_NumericTokenStream_instance_(PyTypeObject *type, PyObject *arg);
        static int t_NumericTokenStream_init_(t_NumericTokenStream *self, PyObject *args, PyObject *kwds);
        static PyObject *t_NumericTokenStream_getPrecisionStep(t_NumericTokenStream *self);
        static PyObject *t_NumericTokenStream_incrementToken(t_NumericTokenStream *self, PyObject *args);
        static PyObject *t_NumericTokenStream_reset(t_NumericTokenStream *self, PyObject *args);
        static PyObject *t_NumericTokenStream_setDoubleValue(t_NumericTokenStream *self, PyObject *arg);
        static PyObject *t_NumericTokenStream_setFloatValue(t_NumericTokenStream *self, PyObject *arg);
        static PyObject *t_NumericTokenStream_setIntValue(t_NumericTokenStream *self, PyObject *arg);
        static PyObject *t_NumericTokenStream_setLongValue(t_NumericTokenStream *self, PyObject *arg);
        static int t_NumericTokenStream_set__doubleValue(t_NumericTokenStream *self, PyObject *arg, void *data);
        static int t_NumericTokenStream_set__floatValue(t_NumericTokenStream *self, PyObject *arg, void *data);
        static int t_NumericTokenStream_set__intValue(t_NumericTokenStream *self, PyObject *arg, void *data);
        static int t_NumericTokenStream_set__longValue(t_NumericTokenStream *self, PyObject *arg, void *data);
        static PyObject *t_NumericTokenStream_get__precisionStep(t_NumericTokenStream *self, void *data);
        static PyGetSetDef t_NumericTokenStream__fields_[] = {
          DECLARE_SET_FIELD(t_NumericTokenStream, doubleValue),
          DECLARE_SET_FIELD(t_NumericTokenStream, floatValue),
          DECLARE_SET_FIELD(t_NumericTokenStream, intValue),
          DECLARE_SET_FIELD(t_NumericTokenStream, longValue),
          DECLARE_GET_FIELD(t_NumericTokenStream, precisionStep),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_NumericTokenStream__methods_[] = {
          DECLARE_METHOD(t_NumericTokenStream, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_NumericTokenStream, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_NumericTokenStream, getPrecisionStep, METH_NOARGS),
          DECLARE_METHOD(t_NumericTokenStream, incrementToken, METH_VARARGS),
          DECLARE_METHOD(t_NumericTokenStream, reset, METH_VARARGS),
          DECLARE_METHOD(t_NumericTokenStream, setDoubleValue, METH_O),
          DECLARE_METHOD(t_NumericTokenStream, setFloatValue, METH_O),
          DECLARE_METHOD(t_NumericTokenStream, setIntValue, METH_O),
          DECLARE_METHOD(t_NumericTokenStream, setLongValue, METH_O),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(NumericTokenStream, t_NumericTokenStream, ::org::apache::lucene::analysis::TokenStream, NumericTokenStream, t_NumericTokenStream_init_, 0, 0, t_NumericTokenStream__fields_, 0, 0);

        void t_NumericTokenStream::install(PyObject *module)
        {
          installType(&PY_TYPE(NumericTokenStream), module, "NumericTokenStream", 0);
          PyDict_SetItemString(PY_TYPE(NumericTokenStream).tp_dict, "NumericTermAttributeImpl", make_descriptor(&PY_TYPE(NumericTokenStream$NumericTermAttributeImpl)));
          PyDict_SetItemString(PY_TYPE(NumericTokenStream).tp_dict, "NumericTermAttribute", make_descriptor(&PY_TYPE(NumericTokenStream$NumericTermAttribute)));
        }

        void t_NumericTokenStream::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(NumericTokenStream).tp_dict, "class_", make_descriptor(NumericTokenStream::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(NumericTokenStream).tp_dict, "wrapfn_", make_descriptor(t_NumericTokenStream::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(NumericTokenStream).tp_dict, "boxfn_", make_descriptor(boxObject));
          env->getClass(NumericTokenStream::initializeClass);
          PyDict_SetItemString(PY_TYPE(NumericTokenStream).tp_dict, "TOKEN_TYPE_FULL_PREC", make_descriptor(j2p(*NumericTokenStream::TOKEN_TYPE_FULL_PREC)));
          PyDict_SetItemString(PY_TYPE(NumericTokenStream).tp_dict, "TOKEN_TYPE_LOWER_PREC", make_descriptor(j2p(*NumericTokenStream::TOKEN_TYPE_LOWER_PREC)));
        }

        static PyObject *t_NumericTokenStream_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, NumericTokenStream::initializeClass, 1)))
            return NULL;
          return t_NumericTokenStream::wrap_Object(NumericTokenStream(((t_NumericTokenStream *) arg)->object.this$));
        }
        static PyObject *t_NumericTokenStream_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, NumericTokenStream::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_NumericTokenStream_init_(t_NumericTokenStream *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 0:
            {
              NumericTokenStream object((jobject) NULL);

              INT_CALL(object = NumericTokenStream());
              self->object = object;
              break;
            }
            goto err;
           case 1:
            {
              jint a0;
              NumericTokenStream object((jobject) NULL);

              if (!parseArgs(args, "I", &a0))
              {
                INT_CALL(object = NumericTokenStream(a0));
                self->object = object;
                break;
              }
            }
            goto err;
           case 2:
            {
              ::org::apache::lucene::util::AttributeFactory a0((jobject) NULL);
              jint a1;
              NumericTokenStream object((jobject) NULL);

              if (!parseArgs(args, "kI", ::org::apache::lucene::util::AttributeFactory::initializeClass, &a0, &a1))
              {
                INT_CALL(object = NumericTokenStream(a0, a1));
                self->object = object;
                break;
              }
            }
           default:
           err:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_NumericTokenStream_getPrecisionStep(t_NumericTokenStream *self)
        {
          jint result;
          OBJ_CALL(result = self->object.getPrecisionStep());
          return PyInt_FromLong((long) result);
        }

        static PyObject *t_NumericTokenStream_incrementToken(t_NumericTokenStream *self, PyObject *args)
        {
          jboolean result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.incrementToken());
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(NumericTokenStream), (PyObject *) self, "incrementToken", args, 2);
        }

        static PyObject *t_NumericTokenStream_reset(t_NumericTokenStream *self, PyObject *args)
        {

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(self->object.reset());
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(NumericTokenStream), (PyObject *) self, "reset", args, 2);
        }

        static PyObject *t_NumericTokenStream_setDoubleValue(t_NumericTokenStream *self, PyObject *arg)
        {
          jdouble a0;
          NumericTokenStream result((jobject) NULL);

          if (!parseArg(arg, "D", &a0))
          {
            OBJ_CALL(result = self->object.setDoubleValue(a0));
            return t_NumericTokenStream::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "setDoubleValue", arg);
          return NULL;
        }

        static PyObject *t_NumericTokenStream_setFloatValue(t_NumericTokenStream *self, PyObject *arg)
        {
          jfloat a0;
          NumericTokenStream result((jobject) NULL);

          if (!parseArg(arg, "F", &a0))
          {
            OBJ_CALL(result = self->object.setFloatValue(a0));
            return t_NumericTokenStream::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "setFloatValue", arg);
          return NULL;
        }

        static PyObject *t_NumericTokenStream_setIntValue(t_NumericTokenStream *self, PyObject *arg)
        {
          jint a0;
          NumericTokenStream result((jobject) NULL);

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(result = self->object.setIntValue(a0));
            return t_NumericTokenStream::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "setIntValue", arg);
          return NULL;
        }

        static PyObject *t_NumericTokenStream_setLongValue(t_NumericTokenStream *self, PyObject *arg)
        {
          jlong a0;
          NumericTokenStream result((jobject) NULL);

          if (!parseArg(arg, "J", &a0))
          {
            OBJ_CALL(result = self->object.setLongValue(a0));
            return t_NumericTokenStream::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "setLongValue", arg);
          return NULL;
        }

        static int t_NumericTokenStream_set__doubleValue(t_NumericTokenStream *self, PyObject *arg, void *data)
        {
          {
            jdouble value;
            if (!parseArg(arg, "D", &value))
            {
              INT_CALL(self->object.setDoubleValue(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "doubleValue", arg);
          return -1;
        }

        static int t_NumericTokenStream_set__floatValue(t_NumericTokenStream *self, PyObject *arg, void *data)
        {
          {
            jfloat value;
            if (!parseArg(arg, "F", &value))
            {
              INT_CALL(self->object.setFloatValue(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "floatValue", arg);
          return -1;
        }

        static int t_NumericTokenStream_set__intValue(t_NumericTokenStream *self, PyObject *arg, void *data)
        {
          {
            jint value;
            if (!parseArg(arg, "I", &value))
            {
              INT_CALL(self->object.setIntValue(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "intValue", arg);
          return -1;
        }

        static int t_NumericTokenStream_set__longValue(t_NumericTokenStream *self, PyObject *arg, void *data)
        {
          {
            jlong value;
            if (!parseArg(arg, "J", &value))
            {
              INT_CALL(self->object.setLongValue(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "longValue", arg);
          return -1;
        }

        static PyObject *t_NumericTokenStream_get__precisionStep(t_NumericTokenStream *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object.getPrecisionStep());
          return PyInt_FromLong((long) value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/SegmentInfos.h"
#include "java/util/Map.h"
#include "java/io/PrintStream.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/index/SegmentCommitInfo.h"
#include "java/util/Iterator.h"
#include "java/lang/Cloneable.h"
#include "org/apache/lucene/store/IOContext.h"
#include "org/apache/lucene/store/Directory.h"
#include "org/apache/lucene/index/SegmentInfo.h"
#include "java/lang/String.h"
#include "java/util/Collection.h"
#include "java/io/IOException.h"
#include "java/lang/Iterable.h"
#include "java/util/List.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *SegmentInfos::class$ = NULL;
        jmethodID *SegmentInfos::mids$ = NULL;
        jfieldID *SegmentInfos::fids$ = NULL;
        bool SegmentInfos::live$ = false;
        jint SegmentInfos::FORMAT_SEGMENTS_GEN_CURRENT = (jint) 0;
        jint SegmentInfos::VERSION_40 = (jint) 0;
        jint SegmentInfos::VERSION_46 = (jint) 0;
        jint SegmentInfos::VERSION_48 = (jint) 0;
        jint SegmentInfos::VERSION_49 = (jint) 0;

        jclass SegmentInfos::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/SegmentInfos");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_add_6649cdf4] = env->getMethodID(cls, "add", "(Lorg/apache/lucene/index/SegmentCommitInfo;)V");
            mids$[mid_addAll_d1cac205] = env->getMethodID(cls, "addAll", "(Ljava/lang/Iterable;)V");
            mids$[mid_asList_87851566] = env->getMethodID(cls, "asList", "()Ljava/util/List;");
            mids$[mid_changed_54c6a166] = env->getMethodID(cls, "changed", "()V");
            mids$[mid_clear_54c6a166] = env->getMethodID(cls, "clear", "()V");
            mids$[mid_clone_e585ba04] = env->getMethodID(cls, "clone", "()Lorg/apache/lucene/index/SegmentInfos;");
            mids$[mid_files_b47d57a7] = env->getMethodID(cls, "files", "(Lorg/apache/lucene/store/Directory;Z)Ljava/util/Collection;");
            mids$[mid_generationFromSegmentsFileName_5fdc3f54] = env->getStaticMethodID(cls, "generationFromSegmentsFileName", "(Ljava/lang/String;)J");
            mids$[mid_getDefaultGenLookahedCount_54c6a179] = env->getStaticMethodID(cls, "getDefaultGenLookahedCount", "()I");
            mids$[mid_getGeneration_54c6a17a] = env->getMethodID(cls, "getGeneration", "()J");
            mids$[mid_getInfoStream_00215d9e] = env->getStaticMethodID(cls, "getInfoStream", "()Ljava/io/PrintStream;");
            mids$[mid_getLastCommitGeneration_4dd45410] = env->getStaticMethodID(cls, "getLastCommitGeneration", "([Ljava/lang/String;)J");
            mids$[mid_getLastCommitGeneration_2e261eee] = env->getStaticMethodID(cls, "getLastCommitGeneration", "(Lorg/apache/lucene/store/Directory;)J");
            mids$[mid_getLastCommitSegmentsFileName_1034289b] = env->getStaticMethodID(cls, "getLastCommitSegmentsFileName", "([Ljava/lang/String;)Ljava/lang/String;");
            mids$[mid_getLastCommitSegmentsFileName_0451c495] = env->getStaticMethodID(cls, "getLastCommitSegmentsFileName", "(Lorg/apache/lucene/store/Directory;)Ljava/lang/String;");
            mids$[mid_getLastGeneration_54c6a17a] = env->getMethodID(cls, "getLastGeneration", "()J");
            mids$[mid_getNextSegmentFileName_14c7b5c5] = env->getMethodID(cls, "getNextSegmentFileName", "()Ljava/lang/String;");
            mids$[mid_getSegmentsFileName_14c7b5c5] = env->getMethodID(cls, "getSegmentsFileName", "()Ljava/lang/String;");
            mids$[mid_getUserData_db60befd] = env->getMethodID(cls, "getUserData", "()Ljava/util/Map;");
            mids$[mid_getVersion_54c6a17a] = env->getMethodID(cls, "getVersion", "()J");
            mids$[mid_info_924229db] = env->getMethodID(cls, "info", "(I)Lorg/apache/lucene/index/SegmentCommitInfo;");
            mids$[mid_iterator_40858c90] = env->getMethodID(cls, "iterator", "()Ljava/util/Iterator;");
            mids$[mid_read_2e261ef2] = env->getMethodID(cls, "read", "(Lorg/apache/lucene/store/Directory;)V");
            mids$[mid_read_54f2a16c] = env->getMethodID(cls, "read", "(Lorg/apache/lucene/store/Directory;Ljava/lang/String;)V");
            mids$[mid_remove_6649cdf4] = env->getMethodID(cls, "remove", "(Lorg/apache/lucene/index/SegmentCommitInfo;)V");
            mids$[mid_setDefaultGenLookaheadCount_39c7bd3c] = env->getStaticMethodID(cls, "setDefaultGenLookaheadCount", "(I)V");
            mids$[mid_setInfoStream_1b7c898b] = env->getStaticMethodID(cls, "setInfoStream", "(Ljava/io/PrintStream;)V");
            mids$[mid_size_54c6a179] = env->getMethodID(cls, "size", "()I");
            mids$[mid_toString_0451c495] = env->getMethodID(cls, "toString", "(Lorg/apache/lucene/store/Directory;)Ljava/lang/String;");
            mids$[mid_totalDocCount_54c6a179] = env->getMethodID(cls, "totalDocCount", "()I");
            mids$[mid_write3xInfo_1fab7fdc] = env->getStaticMethodID(cls, "write3xInfo", "(Lorg/apache/lucene/store/Directory;Lorg/apache/lucene/index/SegmentInfo;Lorg/apache/lucene/store/IOContext;)Ljava/lang/String;");
            mids$[mid_writeSegmentsGen_3dc02513] = env->getStaticMethodID(cls, "writeSegmentsGen", "(Lorg/apache/lucene/store/Directory;J)V");

            fids$ = new jfieldID[max_fid];
            fids$[fid_counter] = env->getFieldID(cls, "counter", "I");
            fids$[fid_userData] = env->getFieldID(cls, "userData", "Ljava/util/Map;");
            fids$[fid_version] = env->getFieldID(cls, "version", "J");

            class$ = (::java::lang::Class *) new JObject(cls);
            cls = (jclass) class$->this$;

            FORMAT_SEGMENTS_GEN_CURRENT = env->getStaticIntField(cls, "FORMAT_SEGMENTS_GEN_CURRENT");
            VERSION_40 = env->getStaticIntField(cls, "VERSION_40");
            VERSION_46 = env->getStaticIntField(cls, "VERSION_46");
            VERSION_48 = env->getStaticIntField(cls, "VERSION_48");
            VERSION_49 = env->getStaticIntField(cls, "VERSION_49");
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        SegmentInfos::SegmentInfos() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        void SegmentInfos::add(const ::org::apache::lucene::index::SegmentCommitInfo & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_add_6649cdf4], a0.this$);
        }

        void SegmentInfos::addAll(const ::java::lang::Iterable & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_addAll_d1cac205], a0.this$);
        }

        ::java::util::List SegmentInfos::asList() const
        {
          return ::java::util::List(env->callObjectMethod(this$, mids$[mid_asList_87851566]));
        }

        void SegmentInfos::changed() const
        {
          env->callVoidMethod(this$, mids$[mid_changed_54c6a166]);
        }

        void SegmentInfos::clear() const
        {
          env->callVoidMethod(this$, mids$[mid_clear_54c6a166]);
        }

        SegmentInfos SegmentInfos::clone() const
        {
          return SegmentInfos(env->callObjectMethod(this$, mids$[mid_clone_e585ba04]));
        }

        ::java::util::Collection SegmentInfos::files(const ::org::apache::lucene::store::Directory & a0, jboolean a1) const
        {
          return ::java::util::Collection(env->callObjectMethod(this$, mids$[mid_files_b47d57a7], a0.this$, a1));
        }

        jlong SegmentInfos::generationFromSegmentsFileName(const ::java::lang::String & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticLongMethod(cls, mids$[mid_generationFromSegmentsFileName_5fdc3f54], a0.this$);
        }

        jint SegmentInfos::getDefaultGenLookahedCount()
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticIntMethod(cls, mids$[mid_getDefaultGenLookahedCount_54c6a179]);
        }

        jlong SegmentInfos::getGeneration() const
        {
          return env->callLongMethod(this$, mids$[mid_getGeneration_54c6a17a]);
        }

        ::java::io::PrintStream SegmentInfos::getInfoStream()
        {
          jclass cls = env->getClass(initializeClass);
          return ::java::io::PrintStream(env->callStaticObjectMethod(cls, mids$[mid_getInfoStream_00215d9e]));
        }

        jlong SegmentInfos::getLastCommitGeneration(const JArray< ::java::lang::String > & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticLongMethod(cls, mids$[mid_getLastCommitGeneration_4dd45410], a0.this$);
        }

        jlong SegmentInfos::getLastCommitGeneration(const ::org::apache::lucene::store::Directory & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticLongMethod(cls, mids$[mid_getLastCommitGeneration_2e261eee], a0.this$);
        }

        ::java::lang::String SegmentInfos::getLastCommitSegmentsFileName(const JArray< ::java::lang::String > & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return ::java::lang::String(env->callStaticObjectMethod(cls, mids$[mid_getLastCommitSegmentsFileName_1034289b], a0.this$));
        }

        ::java::lang::String SegmentInfos::getLastCommitSegmentsFileName(const ::org::apache::lucene::store::Directory & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return ::java::lang::String(env->callStaticObjectMethod(cls, mids$[mid_getLastCommitSegmentsFileName_0451c495], a0.this$));
        }

        jlong SegmentInfos::getLastGeneration() const
        {
          return env->callLongMethod(this$, mids$[mid_getLastGeneration_54c6a17a]);
        }

        ::java::lang::String SegmentInfos::getNextSegmentFileName() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getNextSegmentFileName_14c7b5c5]));
        }

        ::java::lang::String SegmentInfos::getSegmentsFileName() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getSegmentsFileName_14c7b5c5]));
        }

        ::java::util::Map SegmentInfos::getUserData() const
        {
          return ::java::util::Map(env->callObjectMethod(this$, mids$[mid_getUserData_db60befd]));
        }

        jlong SegmentInfos::getVersion() const
        {
          return env->callLongMethod(this$, mids$[mid_getVersion_54c6a17a]);
        }

        ::org::apache::lucene::index::SegmentCommitInfo SegmentInfos::info(jint a0) const
        {
          return ::org::apache::lucene::index::SegmentCommitInfo(env->callObjectMethod(this$, mids$[mid_info_924229db], a0));
        }

        ::java::util::Iterator SegmentInfos::iterator() const
        {
          return ::java::util::Iterator(env->callObjectMethod(this$, mids$[mid_iterator_40858c90]));
        }

        void SegmentInfos::read(const ::org::apache::lucene::store::Directory & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_read_2e261ef2], a0.this$);
        }

        void SegmentInfos::read(const ::org::apache::lucene::store::Directory & a0, const ::java::lang::String & a1) const
        {
          env->callVoidMethod(this$, mids$[mid_read_54f2a16c], a0.this$, a1.this$);
        }

        void SegmentInfos::remove(const ::org::apache::lucene::index::SegmentCommitInfo & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_remove_6649cdf4], a0.this$);
        }

        void SegmentInfos::setDefaultGenLookaheadCount(jint a0)
        {
          jclass cls = env->getClass(initializeClass);
          env->callStaticVoidMethod(cls, mids$[mid_setDefaultGenLookaheadCount_39c7bd3c], a0);
        }

        void SegmentInfos::setInfoStream(const ::java::io::PrintStream & a0)
        {
          jclass cls = env->getClass(initializeClass);
          env->callStaticVoidMethod(cls, mids$[mid_setInfoStream_1b7c898b], a0.this$);
        }

        jint SegmentInfos::size() const
        {
          return env->callIntMethod(this$, mids$[mid_size_54c6a179]);
        }

        ::java::lang::String SegmentInfos::toString(const ::org::apache::lucene::store::Directory & a0) const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_0451c495], a0.this$));
        }

        jint SegmentInfos::totalDocCount() const
        {
          return env->callIntMethod(this$, mids$[mid_totalDocCount_54c6a179]);
        }

        ::java::lang::String SegmentInfos::write3xInfo(const ::org::apache::lucene::store::Directory & a0, const ::org::apache::lucene::index::SegmentInfo & a1, const ::org::apache::lucene::store::IOContext & a2)
        {
          jclass cls = env->getClass(initializeClass);
          return ::java::lang::String(env->callStaticObjectMethod(cls, mids$[mid_write3xInfo_1fab7fdc], a0.this$, a1.this$, a2.this$));
        }

        void SegmentInfos::writeSegmentsGen(const ::org::apache::lucene::store::Directory & a0, jlong a1)
        {
          jclass cls = env->getClass(initializeClass);
          env->callStaticVoidMethod(cls, mids$[mid_writeSegmentsGen_3dc02513], a0.this$, a1);
        }

        jint SegmentInfos::_get_counter() const
        {
          return env->getIntField(this$, fids$[fid_counter]);
        }

        void SegmentInfos::_set_counter(jint a0) const
        {
          env->setIntField(this$, fids$[fid_counter], a0);
        }

        ::java::util::Map SegmentInfos::_get_userData() const
        {
          return ::java::util::Map(env->getObjectField(this$, fids$[fid_userData]));
        }

        void SegmentInfos::_set_userData(const ::java::util::Map & a0) const
        {
          env->setObjectField(this$, fids$[fid_userData], a0.this$);
        }

        jlong SegmentInfos::_get_version() const
        {
          return env->getLongField(this$, fids$[fid_version]);
        }

        void SegmentInfos::_set_version(jlong a0) const
        {
          env->setLongField(this$, fids$[fid_version], a0);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"
#include "org/apache/lucene/index/SegmentInfos$FindSegmentsFile.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_SegmentInfos_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_SegmentInfos_instance_(PyTypeObject *type, PyObject *arg);
        static int t_SegmentInfos_init_(t_SegmentInfos *self, PyObject *args, PyObject *kwds);
        static PyObject *t_SegmentInfos_add(t_SegmentInfos *self, PyObject *arg);
        static PyObject *t_SegmentInfos_addAll(t_SegmentInfos *self, PyObject *arg);
        static PyObject *t_SegmentInfos_asList(t_SegmentInfos *self);
        static PyObject *t_SegmentInfos_changed(t_SegmentInfos *self);
        static PyObject *t_SegmentInfos_clear(t_SegmentInfos *self);
        static PyObject *t_SegmentInfos_clone(t_SegmentInfos *self);
        static PyObject *t_SegmentInfos_files(t_SegmentInfos *self, PyObject *args);
        static PyObject *t_SegmentInfos_generationFromSegmentsFileName(PyTypeObject *type, PyObject *arg);
        static PyObject *t_SegmentInfos_getDefaultGenLookahedCount(PyTypeObject *type);
        static PyObject *t_SegmentInfos_getGeneration(t_SegmentInfos *self);
        static PyObject *t_SegmentInfos_getInfoStream(PyTypeObject *type);
        static PyObject *t_SegmentInfos_getLastCommitGeneration(PyTypeObject *type, PyObject *args);
        static PyObject *t_SegmentInfos_getLastCommitSegmentsFileName(PyTypeObject *type, PyObject *args);
        static PyObject *t_SegmentInfos_getLastGeneration(t_SegmentInfos *self);
        static PyObject *t_SegmentInfos_getNextSegmentFileName(t_SegmentInfos *self);
        static PyObject *t_SegmentInfos_getSegmentsFileName(t_SegmentInfos *self);
        static PyObject *t_SegmentInfos_getUserData(t_SegmentInfos *self);
        static PyObject *t_SegmentInfos_getVersion(t_SegmentInfos *self);
        static PyObject *t_SegmentInfos_info(t_SegmentInfos *self, PyObject *arg);
        static PyObject *t_SegmentInfos_iterator(t_SegmentInfos *self);
        static PyObject *t_SegmentInfos_read(t_SegmentInfos *self, PyObject *args);
        static PyObject *t_SegmentInfos_remove(t_SegmentInfos *self, PyObject *arg);
        static PyObject *t_SegmentInfos_setDefaultGenLookaheadCount(PyTypeObject *type, PyObject *arg);
        static PyObject *t_SegmentInfos_setInfoStream(PyTypeObject *type, PyObject *arg);
        static PyObject *t_SegmentInfos_size(t_SegmentInfos *self);
        static PyObject *t_SegmentInfos_toString(t_SegmentInfos *self, PyObject *args);
        static PyObject *t_SegmentInfos_totalDocCount(t_SegmentInfos *self);
        static PyObject *t_SegmentInfos_write3xInfo(PyTypeObject *type, PyObject *args);
        static PyObject *t_SegmentInfos_writeSegmentsGen(PyTypeObject *type, PyObject *args);
        static PyObject *t_SegmentInfos_get__counter(t_SegmentInfos *self, void *data);
        static int t_SegmentInfos_set__counter(t_SegmentInfos *self, PyObject *arg, void *data);

        static int t_SegmentInfos_set__defaultGenLookaheadCount(t_SegmentInfos *self, PyObject *arg, void *data);
        static PyObject *t_SegmentInfos_get__defaultGenLookahedCount(t_SegmentInfos *self, void *data);
        static PyObject *t_SegmentInfos_get__generation(t_SegmentInfos *self, void *data);
        static PyObject *t_SegmentInfos_get__infoStream(t_SegmentInfos *self, void *data);
        static int t_SegmentInfos_set__infoStream(t_SegmentInfos *self, PyObject *arg, void *data);
        static PyObject *t_SegmentInfos_get__lastGeneration(t_SegmentInfos *self, void *data);
        static PyObject *t_SegmentInfos_get__nextSegmentFileName(t_SegmentInfos *self, void *data);
        static PyObject *t_SegmentInfos_get__segmentsFileName(t_SegmentInfos *self, void *data);
        static PyObject *t_SegmentInfos_get__userData(t_SegmentInfos *self, void *data);
        static PyObject *t_SegmentInfos_get__version(t_SegmentInfos *self, void *data);
        static PyGetSetDef t_SegmentInfos__fields_[] = {
          DECLARE_GETSET_FIELD(t_SegmentInfos, counter),
          DECLARE_SET_FIELD(t_SegmentInfos, defaultGenLookaheadCount),
          DECLARE_GET_FIELD(t_SegmentInfos, defaultGenLookahedCount),
          DECLARE_GET_FIELD(t_SegmentInfos, generation),
          DECLARE_GETSET_FIELD(t_SegmentInfos, infoStream),
          DECLARE_GET_FIELD(t_SegmentInfos, lastGeneration),
          DECLARE_GET_FIELD(t_SegmentInfos, nextSegmentFileName),
          DECLARE_GET_FIELD(t_SegmentInfos, segmentsFileName),
          DECLARE_GET_FIELD(t_SegmentInfos, userData),
          DECLARE_GET_FIELD(t_SegmentInfos, version),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_SegmentInfos__methods_[] = {
          DECLARE_METHOD(t_SegmentInfos, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SegmentInfos, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SegmentInfos, add, METH_O),
          DECLARE_METHOD(t_SegmentInfos, addAll, METH_O),
          DECLARE_METHOD(t_SegmentInfos, asList, METH_NOARGS),
          DECLARE_METHOD(t_SegmentInfos, changed, METH_NOARGS),
          DECLARE_METHOD(t_SegmentInfos, clear, METH_NOARGS),
          DECLARE_METHOD(t_SegmentInfos, clone, METH_NOARGS),
          DECLARE_METHOD(t_SegmentInfos, files, METH_VARARGS),
          DECLARE_METHOD(t_SegmentInfos, generationFromSegmentsFileName, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SegmentInfos, getDefaultGenLookahedCount, METH_NOARGS | METH_CLASS),
          DECLARE_METHOD(t_SegmentInfos, getGeneration, METH_NOARGS),
          DECLARE_METHOD(t_SegmentInfos, getInfoStream, METH_NOARGS | METH_CLASS),
          DECLARE_METHOD(t_SegmentInfos, getLastCommitGeneration, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_SegmentInfos, getLastCommitSegmentsFileName, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_SegmentInfos, getLastGeneration, METH_NOARGS),
          DECLARE_METHOD(t_SegmentInfos, getNextSegmentFileName, METH_NOARGS),
          DECLARE_METHOD(t_SegmentInfos, getSegmentsFileName, METH_NOARGS),
          DECLARE_METHOD(t_SegmentInfos, getUserData, METH_NOARGS),
          DECLARE_METHOD(t_SegmentInfos, getVersion, METH_NOARGS),
          DECLARE_METHOD(t_SegmentInfos, info, METH_O),
          DECLARE_METHOD(t_SegmentInfos, iterator, METH_NOARGS),
          DECLARE_METHOD(t_SegmentInfos, read, METH_VARARGS),
          DECLARE_METHOD(t_SegmentInfos, remove, METH_O),
          DECLARE_METHOD(t_SegmentInfos, setDefaultGenLookaheadCount, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SegmentInfos, setInfoStream, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SegmentInfos, size, METH_NOARGS),
          DECLARE_METHOD(t_SegmentInfos, toString, METH_VARARGS),
          DECLARE_METHOD(t_SegmentInfos, totalDocCount, METH_NOARGS),
          DECLARE_METHOD(t_SegmentInfos, write3xInfo, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_SegmentInfos, writeSegmentsGen, METH_VARARGS | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(SegmentInfos, t_SegmentInfos, ::java::lang::Object, SegmentInfos, t_SegmentInfos_init_, ((PyObject *(*)(t_SegmentInfos *)) get_iterator< t_SegmentInfos >), 0, t_SegmentInfos__fields_, 0, 0);

        void t_SegmentInfos::install(PyObject *module)
        {
          installType(&PY_TYPE(SegmentInfos), module, "SegmentInfos", 0);
          PyDict_SetItemString(PY_TYPE(SegmentInfos).tp_dict, "FindSegmentsFile", make_descriptor(&PY_TYPE(SegmentInfos$FindSegmentsFile)));
        }

        void t_SegmentInfos::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(SegmentInfos).tp_dict, "class_", make_descriptor(SegmentInfos::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(SegmentInfos).tp_dict, "wrapfn_", make_descriptor(t_SegmentInfos::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(SegmentInfos).tp_dict, "boxfn_", make_descriptor(boxObject));
          env->getClass(SegmentInfos::initializeClass);
          PyDict_SetItemString(PY_TYPE(SegmentInfos).tp_dict, "FORMAT_SEGMENTS_GEN_CURRENT", make_descriptor(SegmentInfos::FORMAT_SEGMENTS_GEN_CURRENT));
          PyDict_SetItemString(PY_TYPE(SegmentInfos).tp_dict, "VERSION_40", make_descriptor(SegmentInfos::VERSION_40));
          PyDict_SetItemString(PY_TYPE(SegmentInfos).tp_dict, "VERSION_46", make_descriptor(SegmentInfos::VERSION_46));
          PyDict_SetItemString(PY_TYPE(SegmentInfos).tp_dict, "VERSION_48", make_descriptor(SegmentInfos::VERSION_48));
          PyDict_SetItemString(PY_TYPE(SegmentInfos).tp_dict, "VERSION_49", make_descriptor(SegmentInfos::VERSION_49));
        }

        static PyObject *t_SegmentInfos_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, SegmentInfos::initializeClass, 1)))
            return NULL;
          return t_SegmentInfos::wrap_Object(SegmentInfos(((t_SegmentInfos *) arg)->object.this$));
        }
        static PyObject *t_SegmentInfos_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, SegmentInfos::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_SegmentInfos_init_(t_SegmentInfos *self, PyObject *args, PyObject *kwds)
        {
          SegmentInfos object((jobject) NULL);

          INT_CALL(object = SegmentInfos());
          self->object = object;

          return 0;
        }

        static PyObject *t_SegmentInfos_add(t_SegmentInfos *self, PyObject *arg)
        {
          ::org::apache::lucene::index::SegmentCommitInfo a0((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::index::SegmentCommitInfo::initializeClass, &a0))
          {
            OBJ_CALL(self->object.add(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "add", arg);
          return NULL;
        }

        static PyObject *t_SegmentInfos_addAll(t_SegmentInfos *self, PyObject *arg)
        {
          ::java::lang::Iterable a0((jobject) NULL);
          PyTypeObject **p0;

          if (!parseArg(arg, "K", ::java::lang::Iterable::initializeClass, &a0, &p0, ::java::lang::t_Iterable::parameters_))
          {
            OBJ_CALL(self->object.addAll(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "addAll", arg);
          return NULL;
        }

        static PyObject *t_SegmentInfos_asList(t_SegmentInfos *self)
        {
          ::java::util::List result((jobject) NULL);
          OBJ_CALL(result = self->object.asList());
          return ::java::util::t_List::wrap_Object(result, &::org::apache::lucene::index::PY_TYPE(SegmentCommitInfo));
        }

        static PyObject *t_SegmentInfos_changed(t_SegmentInfos *self)
        {
          OBJ_CALL(self->object.changed());
          Py_RETURN_NONE;
        }

        static PyObject *t_SegmentInfos_clear(t_SegmentInfos *self)
        {
          OBJ_CALL(self->object.clear());
          Py_RETURN_NONE;
        }

        static PyObject *t_SegmentInfos_clone(t_SegmentInfos *self)
        {
          SegmentInfos result((jobject) NULL);
          OBJ_CALL(result = self->object.clone());
          return t_SegmentInfos::wrap_Object(result);
        }

        static PyObject *t_SegmentInfos_files(t_SegmentInfos *self, PyObject *args)
        {
          ::org::apache::lucene::store::Directory a0((jobject) NULL);
          jboolean a1;
          ::java::util::Collection result((jobject) NULL);

          if (!parseArgs(args, "kZ", ::org::apache::lucene::store::Directory::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = self->object.files(a0, a1));
            return ::java::util::t_Collection::wrap_Object(result, &::java::lang::PY_TYPE(String));
          }

          PyErr_SetArgsError((PyObject *) self, "files", args);
          return NULL;
        }

        static PyObject *t_SegmentInfos_generationFromSegmentsFileName(PyTypeObject *type, PyObject *arg)
        {
          ::java::lang::String a0((jobject) NULL);
          jlong result;

          if (!parseArg(arg, "s", &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::index::SegmentInfos::generationFromSegmentsFileName(a0));
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          PyErr_SetArgsError(type, "generationFromSegmentsFileName", arg);
          return NULL;
        }

        static PyObject *t_SegmentInfos_getDefaultGenLookahedCount(PyTypeObject *type)
        {
          jint result;
          OBJ_CALL(result = ::org::apache::lucene::index::SegmentInfos::getDefaultGenLookahedCount());
          return PyInt_FromLong((long) result);
        }

        static PyObject *t_SegmentInfos_getGeneration(t_SegmentInfos *self)
        {
          jlong result;
          OBJ_CALL(result = self->object.getGeneration());
          return PyLong_FromLongLong((PY_LONG_LONG) result);
        }

        static PyObject *t_SegmentInfos_getInfoStream(PyTypeObject *type)
        {
          ::java::io::PrintStream result((jobject) NULL);
          OBJ_CALL(result = ::org::apache::lucene::index::SegmentInfos::getInfoStream());
          return ::java::io::t_PrintStream::wrap_Object(result);
        }

        static PyObject *t_SegmentInfos_getLastCommitGeneration(PyTypeObject *type, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              JArray< ::java::lang::String > a0((jobject) NULL);
              jlong result;

              if (!parseArgs(args, "[s", &a0))
              {
                OBJ_CALL(result = ::org::apache::lucene::index::SegmentInfos::getLastCommitGeneration(a0));
                return PyLong_FromLongLong((PY_LONG_LONG) result);
              }
            }
            {
              ::org::apache::lucene::store::Directory a0((jobject) NULL);
              jlong result;

              if (!parseArgs(args, "k", ::org::apache::lucene::store::Directory::initializeClass, &a0))
              {
                OBJ_CALL(result = ::org::apache::lucene::index::SegmentInfos::getLastCommitGeneration(a0));
                return PyLong_FromLongLong((PY_LONG_LONG) result);
              }
            }
          }

          PyErr_SetArgsError(type, "getLastCommitGeneration", args);
          return NULL;
        }

        static PyObject *t_SegmentInfos_getLastCommitSegmentsFileName(PyTypeObject *type, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              JArray< ::java::lang::String > a0((jobject) NULL);
              ::java::lang::String result((jobject) NULL);

              if (!parseArgs(args, "[s", &a0))
              {
                OBJ_CALL(result = ::org::apache::lucene::index::SegmentInfos::getLastCommitSegmentsFileName(a0));
                return j2p(result);
              }
            }
            {
              ::org::apache::lucene::store::Directory a0((jobject) NULL);
              ::java::lang::String result((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::store::Directory::initializeClass, &a0))
              {
                OBJ_CALL(result = ::org::apache::lucene::index::SegmentInfos::getLastCommitSegmentsFileName(a0));
                return j2p(result);
              }
            }
          }

          PyErr_SetArgsError(type, "getLastCommitSegmentsFileName", args);
          return NULL;
        }

        static PyObject *t_SegmentInfos_getLastGeneration(t_SegmentInfos *self)
        {
          jlong result;
          OBJ_CALL(result = self->object.getLastGeneration());
          return PyLong_FromLongLong((PY_LONG_LONG) result);
        }

        static PyObject *t_SegmentInfos_getNextSegmentFileName(t_SegmentInfos *self)
        {
          ::java::lang::String result((jobject) NULL);
          OBJ_CALL(result = self->object.getNextSegmentFileName());
          return j2p(result);
        }

        static PyObject *t_SegmentInfos_getSegmentsFileName(t_SegmentInfos *self)
        {
          ::java::lang::String result((jobject) NULL);
          OBJ_CALL(result = self->object.getSegmentsFileName());
          return j2p(result);
        }

        static PyObject *t_SegmentInfos_getUserData(t_SegmentInfos *self)
        {
          ::java::util::Map result((jobject) NULL);
          OBJ_CALL(result = self->object.getUserData());
          return ::java::util::t_Map::wrap_Object(result, &::java::lang::PY_TYPE(String), &::java::lang::PY_TYPE(String));
        }

        static PyObject *t_SegmentInfos_getVersion(t_SegmentInfos *self)
        {
          jlong result;
          OBJ_CALL(result = self->object.getVersion());
          return PyLong_FromLongLong((PY_LONG_LONG) result);
        }

        static PyObject *t_SegmentInfos_info(t_SegmentInfos *self, PyObject *arg)
        {
          jint a0;
          ::org::apache::lucene::index::SegmentCommitInfo result((jobject) NULL);

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(result = self->object.info(a0));
            return ::org::apache::lucene::index::t_SegmentCommitInfo::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "info", arg);
          return NULL;
        }

        static PyObject *t_SegmentInfos_iterator(t_SegmentInfos *self)
        {
          ::java::util::Iterator result((jobject) NULL);
          OBJ_CALL(result = self->object.iterator());
          return ::java::util::t_Iterator::wrap_Object(result, &::org::apache::lucene::index::PY_TYPE(SegmentCommitInfo));
        }

        static PyObject *t_SegmentInfos_read(t_SegmentInfos *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              ::org::apache::lucene::store::Directory a0((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::store::Directory::initializeClass, &a0))
              {
                OBJ_CALL(self->object.read(a0));
                Py_RETURN_NONE;
              }
            }
            break;
           case 2:
            {
              ::org::apache::lucene::store::Directory a0((jobject) NULL);
              ::java::lang::String a1((jobject) NULL);

              if (!parseArgs(args, "ks", ::org::apache::lucene::store::Directory::initializeClass, &a0, &a1))
              {
                OBJ_CALL(self->object.read(a0, a1));
                Py_RETURN_NONE;
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "read", args);
          return NULL;
        }

        static PyObject *t_SegmentInfos_remove(t_SegmentInfos *self, PyObject *arg)
        {
          ::org::apache::lucene::index::SegmentCommitInfo a0((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::index::SegmentCommitInfo::initializeClass, &a0))
          {
            OBJ_CALL(self->object.remove(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "remove", arg);
          return NULL;
        }

        static PyObject *t_SegmentInfos_setDefaultGenLookaheadCount(PyTypeObject *type, PyObject *arg)
        {
          jint a0;

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(::org::apache::lucene::index::SegmentInfos::setDefaultGenLookaheadCount(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError(type, "setDefaultGenLookaheadCount", arg);
          return NULL;
        }

        static PyObject *t_SegmentInfos_setInfoStream(PyTypeObject *type, PyObject *arg)
        {
          ::java::io::PrintStream a0((jobject) NULL);

          if (!parseArg(arg, "k", ::java::io::PrintStream::initializeClass, &a0))
          {
            OBJ_CALL(::org::apache::lucene::index::SegmentInfos::setInfoStream(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError(type, "setInfoStream", arg);
          return NULL;
        }

        static PyObject *t_SegmentInfos_size(t_SegmentInfos *self)
        {
          jint result;
          OBJ_CALL(result = self->object.size());
          return PyInt_FromLong((long) result);
        }

        static PyObject *t_SegmentInfos_toString(t_SegmentInfos *self, PyObject *args)
        {
          ::org::apache::lucene::store::Directory a0((jobject) NULL);
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::store::Directory::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.toString(a0));
            return j2p(result);
          }

          return callSuper(&PY_TYPE(SegmentInfos), (PyObject *) self, "toString", args, 2);
        }

        static PyObject *t_SegmentInfos_totalDocCount(t_SegmentInfos *self)
        {
          jint result;
          OBJ_CALL(result = self->object.totalDocCount());
          return PyInt_FromLong((long) result);
        }

        static PyObject *t_SegmentInfos_write3xInfo(PyTypeObject *type, PyObject *args)
        {
          ::org::apache::lucene::store::Directory a0((jobject) NULL);
          ::org::apache::lucene::index::SegmentInfo a1((jobject) NULL);
          ::org::apache::lucene::store::IOContext a2((jobject) NULL);
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, "kkk", ::org::apache::lucene::store::Directory::initializeClass, ::org::apache::lucene::index::SegmentInfo::initializeClass, ::org::apache::lucene::store::IOContext::initializeClass, &a0, &a1, &a2))
          {
            OBJ_CALL(result = ::org::apache::lucene::index::SegmentInfos::write3xInfo(a0, a1, a2));
            return j2p(result);
          }

          PyErr_SetArgsError(type, "write3xInfo", args);
          return NULL;
        }

        static PyObject *t_SegmentInfos_writeSegmentsGen(PyTypeObject *type, PyObject *args)
        {
          ::org::apache::lucene::store::Directory a0((jobject) NULL);
          jlong a1;

          if (!parseArgs(args, "kJ", ::org::apache::lucene::store::Directory::initializeClass, &a0, &a1))
          {
            OBJ_CALL(::org::apache::lucene::index::SegmentInfos::writeSegmentsGen(a0, a1));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError(type, "writeSegmentsGen", args);
          return NULL;
        }

        static PyObject *t_SegmentInfos_get__counter(t_SegmentInfos *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object._get_counter());
          return PyInt_FromLong((long) value);
        }
        static int t_SegmentInfos_set__counter(t_SegmentInfos *self, PyObject *arg, void *data)
        {
          jint value;
          if (!parseArg(arg, "I", &value))
          {
            INT_CALL(self->object._set_counter(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "counter", arg);
          return -1;
        }

        static int t_SegmentInfos_set__defaultGenLookaheadCount(t_SegmentInfos *self, PyObject *arg, void *data)
        {
          {
            jint value;
            if (!parseArg(arg, "I", &value))
            {
              INT_CALL(self->object.setDefaultGenLookaheadCount(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "defaultGenLookaheadCount", arg);
          return -1;
        }

        static PyObject *t_SegmentInfos_get__defaultGenLookahedCount(t_SegmentInfos *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object.getDefaultGenLookahedCount());
          return PyInt_FromLong((long) value);
        }

        static PyObject *t_SegmentInfos_get__generation(t_SegmentInfos *self, void *data)
        {
          jlong value;
          OBJ_CALL(value = self->object.getGeneration());
          return PyLong_FromLongLong((PY_LONG_LONG) value);
        }

        static PyObject *t_SegmentInfos_get__infoStream(t_SegmentInfos *self, void *data)
        {
          ::java::io::PrintStream value((jobject) NULL);
          OBJ_CALL(value = self->object.getInfoStream());
          return ::java::io::t_PrintStream::wrap_Object(value);
        }
        static int t_SegmentInfos_set__infoStream(t_SegmentInfos *self, PyObject *arg, void *data)
        {
          {
            ::java::io::PrintStream value((jobject) NULL);
            if (!parseArg(arg, "k", ::java::io::PrintStream::initializeClass, &value))
            {
              INT_CALL(self->object.setInfoStream(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "infoStream", arg);
          return -1;
        }

        static PyObject *t_SegmentInfos_get__lastGeneration(t_SegmentInfos *self, void *data)
        {
          jlong value;
          OBJ_CALL(value = self->object.getLastGeneration());
          return PyLong_FromLongLong((PY_LONG_LONG) value);
        }

        static PyObject *t_SegmentInfos_get__nextSegmentFileName(t_SegmentInfos *self, void *data)
        {
          ::java::lang::String value((jobject) NULL);
          OBJ_CALL(value = self->object.getNextSegmentFileName());
          return j2p(value);
        }

        static PyObject *t_SegmentInfos_get__segmentsFileName(t_SegmentInfos *self, void *data)
        {
          ::java::lang::String value((jobject) NULL);
          OBJ_CALL(value = self->object.getSegmentsFileName());
          return j2p(value);
        }

        static PyObject *t_SegmentInfos_get__userData(t_SegmentInfos *self, void *data)
        {
          ::java::util::Map value((jobject) NULL);
          OBJ_CALL(value = self->object.getUserData());
          return ::java::util::t_Map::wrap_Object(value);
        }

        static PyObject *t_SegmentInfos_get__version(t_SegmentInfos *self, void *data)
        {
          jlong value;
          OBJ_CALL(value = self->object.getVersion());
          return PyLong_FromLongLong((PY_LONG_LONG) value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/blocktree/BlockTreeTermsReader.h"
#include "org/apache/lucene/codecs/PostingsReaderBase.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/index/Terms.h"
#include "java/util/Iterator.h"
#include "org/apache/lucene/store/IOContext.h"
#include "org/apache/lucene/store/Directory.h"
#include "org/apache/lucene/index/SegmentInfo.h"
#include "java/lang/String.h"
#include "org/apache/lucene/index/FieldInfos.h"
#include "java/io/IOException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace blocktree {

          ::java::lang::Class *BlockTreeTermsReader::class$ = NULL;
          jmethodID *BlockTreeTermsReader::mids$ = NULL;
          bool BlockTreeTermsReader::live$ = false;

          jclass BlockTreeTermsReader::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/blocktree/BlockTreeTermsReader");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_72076db5] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/store/Directory;Lorg/apache/lucene/index/FieldInfos;Lorg/apache/lucene/index/SegmentInfo;Lorg/apache/lucene/codecs/PostingsReaderBase;Lorg/apache/lucene/store/IOContext;Ljava/lang/String;I)V");
              mids$[mid_checkIntegrity_54c6a166] = env->getMethodID(cls, "checkIntegrity", "()V");
              mids$[mid_close_54c6a166] = env->getMethodID(cls, "close", "()V");
              mids$[mid_iterator_40858c90] = env->getMethodID(cls, "iterator", "()Ljava/util/Iterator;");
              mids$[mid_ramBytesUsed_54c6a17a] = env->getMethodID(cls, "ramBytesUsed", "()J");
              mids$[mid_size_54c6a179] = env->getMethodID(cls, "size", "()I");
              mids$[mid_terms_ee262ab4] = env->getMethodID(cls, "terms", "(Ljava/lang/String;)Lorg/apache/lucene/index/Terms;");
              mids$[mid_readHeader_0441f0ad] = env->getMethodID(cls, "readHeader", "(Lorg/apache/lucene/store/IndexInput;)I");
              mids$[mid_readIndexHeader_0441f0ad] = env->getMethodID(cls, "readIndexHeader", "(Lorg/apache/lucene/store/IndexInput;)I");
              mids$[mid_seekDir_ec9e0593] = env->getMethodID(cls, "seekDir", "(Lorg/apache/lucene/store/IndexInput;J)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          BlockTreeTermsReader::BlockTreeTermsReader(const ::org::apache::lucene::store::Directory & a0, const ::org::apache::lucene::index::FieldInfos & a1, const ::org::apache::lucene::index::SegmentInfo & a2, const ::org::apache::lucene::codecs::PostingsReaderBase & a3, const ::org::apache::lucene::store::IOContext & a4, const ::java::lang::String & a5, jint a6) : ::org::apache::lucene::codecs::FieldsProducer(env->newObject(initializeClass, &mids$, mid_init$_72076db5, a0.this$, a1.this$, a2.this$, a3.this$, a4.this$, a5.this$, a6)) {}

          void BlockTreeTermsReader::checkIntegrity() const
          {
            env->callVoidMethod(this$, mids$[mid_checkIntegrity_54c6a166]);
          }

          void BlockTreeTermsReader::close() const
          {
            env->callVoidMethod(this$, mids$[mid_close_54c6a166]);
          }

          ::java::util::Iterator BlockTreeTermsReader::iterator() const
          {
            return ::java::util::Iterator(env->callObjectMethod(this$, mids$[mid_iterator_40858c90]));
          }

          jlong BlockTreeTermsReader::ramBytesUsed() const
          {
            return env->callLongMethod(this$, mids$[mid_ramBytesUsed_54c6a17a]);
          }

          jint BlockTreeTermsReader::size() const
          {
            return env->callIntMethod(this$, mids$[mid_size_54c6a179]);
          }

          ::org::apache::lucene::index::Terms BlockTreeTermsReader::terms(const ::java::lang::String & a0) const
          {
            return ::org::apache::lucene::index::Terms(env->callObjectMethod(this$, mids$[mid_terms_ee262ab4], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace blocktree {
          static PyObject *t_BlockTreeTermsReader_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_BlockTreeTermsReader_instance_(PyTypeObject *type, PyObject *arg);
          static int t_BlockTreeTermsReader_init_(t_BlockTreeTermsReader *self, PyObject *args, PyObject *kwds);
          static PyObject *t_BlockTreeTermsReader_checkIntegrity(t_BlockTreeTermsReader *self, PyObject *args);
          static PyObject *t_BlockTreeTermsReader_close(t_BlockTreeTermsReader *self, PyObject *args);
          static PyObject *t_BlockTreeTermsReader_iterator(t_BlockTreeTermsReader *self, PyObject *args);
          static PyObject *t_BlockTreeTermsReader_ramBytesUsed(t_BlockTreeTermsReader *self, PyObject *args);
          static PyObject *t_BlockTreeTermsReader_size(t_BlockTreeTermsReader *self, PyObject *args);
          static PyObject *t_BlockTreeTermsReader_terms(t_BlockTreeTermsReader *self, PyObject *args);

          static PyMethodDef t_BlockTreeTermsReader__methods_[] = {
            DECLARE_METHOD(t_BlockTreeTermsReader, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_BlockTreeTermsReader, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_BlockTreeTermsReader, checkIntegrity, METH_VARARGS),
            DECLARE_METHOD(t_BlockTreeTermsReader, close, METH_VARARGS),
            DECLARE_METHOD(t_BlockTreeTermsReader, iterator, METH_VARARGS),
            DECLARE_METHOD(t_BlockTreeTermsReader, ramBytesUsed, METH_VARARGS),
            DECLARE_METHOD(t_BlockTreeTermsReader, size, METH_VARARGS),
            DECLARE_METHOD(t_BlockTreeTermsReader, terms, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(BlockTreeTermsReader, t_BlockTreeTermsReader, ::org::apache::lucene::codecs::FieldsProducer, BlockTreeTermsReader, t_BlockTreeTermsReader_init_, ((PyObject *(*)(t_BlockTreeTermsReader *)) get_iterator< t_BlockTreeTermsReader >), 0, 0, 0, 0);

          void t_BlockTreeTermsReader::install(PyObject *module)
          {
            installType(&PY_TYPE(BlockTreeTermsReader), module, "BlockTreeTermsReader", 0);
          }

          void t_BlockTreeTermsReader::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(BlockTreeTermsReader).tp_dict, "class_", make_descriptor(BlockTreeTermsReader::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(BlockTreeTermsReader).tp_dict, "wrapfn_", make_descriptor(t_BlockTreeTermsReader::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(BlockTreeTermsReader).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_BlockTreeTermsReader_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, BlockTreeTermsReader::initializeClass, 1)))
              return NULL;
            return t_BlockTreeTermsReader::wrap_Object(BlockTreeTermsReader(((t_BlockTreeTermsReader *) arg)->object.this$));
          }
          static PyObject *t_BlockTreeTermsReader_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, BlockTreeTermsReader::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_BlockTreeTermsReader_init_(t_BlockTreeTermsReader *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::store::Directory a0((jobject) NULL);
            ::org::apache::lucene::index::FieldInfos a1((jobject) NULL);
            ::org::apache::lucene::index::SegmentInfo a2((jobject) NULL);
            ::org::apache::lucene::codecs::PostingsReaderBase a3((jobject) NULL);
            ::org::apache::lucene::store::IOContext a4((jobject) NULL);
            ::java::lang::String a5((jobject) NULL);
            jint a6;
            BlockTreeTermsReader object((jobject) NULL);

            if (!parseArgs(args, "kkkkksI", ::org::apache::lucene::store::Directory::initializeClass, ::org::apache::lucene::index::FieldInfos::initializeClass, ::org::apache::lucene::index::SegmentInfo::initializeClass, ::org::apache::lucene::codecs::PostingsReaderBase::initializeClass, ::org::apache::lucene::store::IOContext::initializeClass, &a0, &a1, &a2, &a3, &a4, &a5, &a6))
            {
              INT_CALL(object = BlockTreeTermsReader(a0, a1, a2, a3, a4, a5, a6));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_BlockTreeTermsReader_checkIntegrity(t_BlockTreeTermsReader *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.checkIntegrity());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(BlockTreeTermsReader), (PyObject *) self, "checkIntegrity", args, 2);
          }

          static PyObject *t_BlockTreeTermsReader_close(t_BlockTreeTermsReader *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.close());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(BlockTreeTermsReader), (PyObject *) self, "close", args, 2);
          }

          static PyObject *t_BlockTreeTermsReader_iterator(t_BlockTreeTermsReader *self, PyObject *args)
          {
            ::java::util::Iterator result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.iterator());
              return ::java::util::t_Iterator::wrap_Object(result, &::java::lang::PY_TYPE(String));
            }

            return callSuper(&PY_TYPE(BlockTreeTermsReader), (PyObject *) self, "iterator", args, 2);
          }

          static PyObject *t_BlockTreeTermsReader_ramBytesUsed(t_BlockTreeTermsReader *self, PyObject *args)
          {
            jlong result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.ramBytesUsed());
              return PyLong_FromLongLong((PY_LONG_LONG) result);
            }

            return callSuper(&PY_TYPE(BlockTreeTermsReader), (PyObject *) self, "ramBytesUsed", args, 2);
          }

          static PyObject *t_BlockTreeTermsReader_size(t_BlockTreeTermsReader *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.size());
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(BlockTreeTermsReader), (PyObject *) self, "size", args, 2);
          }

          static PyObject *t_BlockTreeTermsReader_terms(t_BlockTreeTermsReader *self, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            ::org::apache::lucene::index::Terms result((jobject) NULL);

            if (!parseArgs(args, "s", &a0))
            {
              OBJ_CALL(result = self->object.terms(a0));
              return ::org::apache::lucene::index::t_Terms::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(BlockTreeTermsReader), (PyObject *) self, "terms", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/xml/builders/LikeThisQueryBuilder.h"
#include "org/apache/lucene/analysis/Analyzer.h"
#include "java/lang/String.h"
#include "org/apache/lucene/queryparser/xml/QueryBuilder.h"
#include "org/apache/lucene/search/Query.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace xml {
          namespace builders {

            ::java::lang::Class *LikeThisQueryBuilder::class$ = NULL;
            jmethodID *LikeThisQueryBuilder::mids$ = NULL;
            bool LikeThisQueryBuilder::live$ = false;

            jclass LikeThisQueryBuilder::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/xml/builders/LikeThisQueryBuilder");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_b896d246] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/Analyzer;[Ljava/lang/String;)V");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            LikeThisQueryBuilder::LikeThisQueryBuilder(const ::org::apache::lucene::analysis::Analyzer & a0, const JArray< ::java::lang::String > & a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_b896d246, a0.this$, a1.this$)) {}
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace xml {
          namespace builders {
            static PyObject *t_LikeThisQueryBuilder_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_LikeThisQueryBuilder_instance_(PyTypeObject *type, PyObject *arg);
            static int t_LikeThisQueryBuilder_init_(t_LikeThisQueryBuilder *self, PyObject *args, PyObject *kwds);

            static PyMethodDef t_LikeThisQueryBuilder__methods_[] = {
              DECLARE_METHOD(t_LikeThisQueryBuilder, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_LikeThisQueryBuilder, instance_, METH_O | METH_CLASS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(LikeThisQueryBuilder, t_LikeThisQueryBuilder, ::java::lang::Object, LikeThisQueryBuilder, t_LikeThisQueryBuilder_init_, 0, 0, 0, 0, 0);

            void t_LikeThisQueryBuilder::install(PyObject *module)
            {
              installType(&PY_TYPE(LikeThisQueryBuilder), module, "LikeThisQueryBuilder", 0);
            }

            void t_LikeThisQueryBuilder::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(LikeThisQueryBuilder).tp_dict, "class_", make_descriptor(LikeThisQueryBuilder::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(LikeThisQueryBuilder).tp_dict, "wrapfn_", make_descriptor(t_LikeThisQueryBuilder::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(LikeThisQueryBuilder).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_LikeThisQueryBuilder_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, LikeThisQueryBuilder::initializeClass, 1)))
                return NULL;
              return t_LikeThisQueryBuilder::wrap_Object(LikeThisQueryBuilder(((t_LikeThisQueryBuilder *) arg)->object.this$));
            }
            static PyObject *t_LikeThisQueryBuilder_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, LikeThisQueryBuilder::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_LikeThisQueryBuilder_init_(t_LikeThisQueryBuilder *self, PyObject *args, PyObject *kwds)
            {
              ::org::apache::lucene::analysis::Analyzer a0((jobject) NULL);
              JArray< ::java::lang::String > a1((jobject) NULL);
              LikeThisQueryBuilder object((jobject) NULL);

              if (!parseArgs(args, "k[s", ::org::apache::lucene::analysis::Analyzer::initializeClass, &a0, &a1))
              {
                INT_CALL(object = LikeThisQueryBuilder(a0, a1));
                self->object = object;
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/sandbox/queries/regex/RegexTermsEnum.h"
#include "org/apache/lucene/index/TermsEnum.h"
#include "org/apache/lucene/sandbox/queries/regex/RegexCapabilities.h"
#include "org/apache/lucene/index/Term.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace sandbox {
        namespace queries {
          namespace regex {

            ::java::lang::Class *RegexTermsEnum::class$ = NULL;
            jmethodID *RegexTermsEnum::mids$ = NULL;
            bool RegexTermsEnum::live$ = false;

            jclass RegexTermsEnum::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/sandbox/queries/regex/RegexTermsEnum");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_d12accc0] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/TermsEnum;Lorg/apache/lucene/index/Term;Lorg/apache/lucene/sandbox/queries/regex/RegexCapabilities;)V");
                mids$[mid_accept_30bc08e1] = env->getMethodID(cls, "accept", "(Lorg/apache/lucene/util/BytesRef;)Lorg/apache/lucene/index/FilteredTermsEnum$AcceptStatus;");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            RegexTermsEnum::RegexTermsEnum(const ::org::apache::lucene::index::TermsEnum & a0, const ::org::apache::lucene::index::Term & a1, const ::org::apache::lucene::sandbox::queries::regex::RegexCapabilities & a2) : ::org::apache::lucene::index::FilteredTermsEnum(env->newObject(initializeClass, &mids$, mid_init$_d12accc0, a0.this$, a1.this$, a2.this$)) {}
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace sandbox {
        namespace queries {
          namespace regex {
            static PyObject *t_RegexTermsEnum_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_RegexTermsEnum_instance_(PyTypeObject *type, PyObject *arg);
            static int t_RegexTermsEnum_init_(t_RegexTermsEnum *self, PyObject *args, PyObject *kwds);

            static PyMethodDef t_RegexTermsEnum__methods_[] = {
              DECLARE_METHOD(t_RegexTermsEnum, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_RegexTermsEnum, instance_, METH_O | METH_CLASS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(RegexTermsEnum, t_RegexTermsEnum, ::org::apache::lucene::index::FilteredTermsEnum, RegexTermsEnum, t_RegexTermsEnum_init_, 0, 0, 0, 0, 0);

            void t_RegexTermsEnum::install(PyObject *module)
            {
              installType(&PY_TYPE(RegexTermsEnum), module, "RegexTermsEnum", 0);
            }

            void t_RegexTermsEnum::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(RegexTermsEnum).tp_dict, "class_", make_descriptor(RegexTermsEnum::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(RegexTermsEnum).tp_dict, "wrapfn_", make_descriptor(t_RegexTermsEnum::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(RegexTermsEnum).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_RegexTermsEnum_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, RegexTermsEnum::initializeClass, 1)))
                return NULL;
              return t_RegexTermsEnum::wrap_Object(RegexTermsEnum(((t_RegexTermsEnum *) arg)->object.this$));
            }
            static PyObject *t_RegexTermsEnum_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, RegexTermsEnum::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_RegexTermsEnum_init_(t_RegexTermsEnum *self, PyObject *args, PyObject *kwds)
            {
              ::org::apache::lucene::index::TermsEnum a0((jobject) NULL);
              ::org::apache::lucene::index::Term a1((jobject) NULL);
              ::org::apache::lucene::sandbox::queries::regex::RegexCapabilities a2((jobject) NULL);
              RegexTermsEnum object((jobject) NULL);

              if (!parseArgs(args, "kkk", ::org::apache::lucene::index::TermsEnum::initializeClass, ::org::apache::lucene::index::Term::initializeClass, ::org::apache::lucene::sandbox::queries::regex::RegexCapabilities::initializeClass, &a0, &a1, &a2))
              {
                INT_CALL(object = RegexTermsEnum(a0, a1, a2));
                self->object = object;
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/TermRangeQuery.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "java/lang/Object.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *TermRangeQuery::class$ = NULL;
        jmethodID *TermRangeQuery::mids$ = NULL;
        bool TermRangeQuery::live$ = false;

        jclass TermRangeQuery::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/TermRangeQuery");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_d3423b66] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Lorg/apache/lucene/util/BytesRef;Lorg/apache/lucene/util/BytesRef;ZZ)V");
            mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
            mids$[mid_getLowerTerm_4ae19461] = env->getMethodID(cls, "getLowerTerm", "()Lorg/apache/lucene/util/BytesRef;");
            mids$[mid_getUpperTerm_4ae19461] = env->getMethodID(cls, "getUpperTerm", "()Lorg/apache/lucene/util/BytesRef;");
            mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
            mids$[mid_includesLower_54c6a16a] = env->getMethodID(cls, "includesLower", "()Z");
            mids$[mid_includesUpper_54c6a16a] = env->getMethodID(cls, "includesUpper", "()Z");
            mids$[mid_newStringRange_ae529bcc] = env->getStaticMethodID(cls, "newStringRange", "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;ZZ)Lorg/apache/lucene/search/TermRangeQuery;");
            mids$[mid_toString_97a5258f] = env->getMethodID(cls, "toString", "(Ljava/lang/String;)Ljava/lang/String;");
            mids$[mid_getTermsEnum_67b5a29a] = env->getMethodID(cls, "getTermsEnum", "(Lorg/apache/lucene/index/Terms;Lorg/apache/lucene/util/AttributeSource;)Lorg/apache/lucene/index/TermsEnum;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        TermRangeQuery::TermRangeQuery(const ::java::lang::String & a0, const ::org::apache::lucene::util::BytesRef & a1, const ::org::apache::lucene::util::BytesRef & a2, jboolean a3, jboolean a4) : ::org::apache::lucene::search::MultiTermQuery(env->newObject(initializeClass, &mids$, mid_init$_d3423b66, a0.this$, a1.this$, a2.this$, a3, a4)) {}

        jboolean TermRangeQuery::equals(const ::java::lang::Object & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
        }

        ::org::apache::lucene::util::BytesRef TermRangeQuery::getLowerTerm() const
        {
          return ::org::apache::lucene::util::BytesRef(env->callObjectMethod(this$, mids$[mid_getLowerTerm_4ae19461]));
        }

        ::org::apache::lucene::util::BytesRef TermRangeQuery::getUpperTerm() const
        {
          return ::org::apache::lucene::util::BytesRef(env->callObjectMethod(this$, mids$[mid_getUpperTerm_4ae19461]));
        }

        jint TermRangeQuery::hashCode() const
        {
          return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
        }

        jboolean TermRangeQuery::includesLower() const
        {
          return env->callBooleanMethod(this$, mids$[mid_includesLower_54c6a16a]);
        }

        jboolean TermRangeQuery::includesUpper() const
        {
          return env->callBooleanMethod(this$, mids$[mid_includesUpper_54c6a16a]);
        }

        TermRangeQuery TermRangeQuery::newStringRange(const ::java::lang::String & a0, const ::java::lang::String & a1, const ::java::lang::String & a2, jboolean a3, jboolean a4)
        {
          jclass cls = env->getClass(initializeClass);
          return TermRangeQuery(env->callStaticObjectMethod(cls, mids$[mid_newStringRange_ae529bcc], a0.this$, a1.this$, a2.this$, a3, a4));
        }

        ::java::lang::String TermRangeQuery::toString(const ::java::lang::String & a0) const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_97a5258f], a0.this$));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_TermRangeQuery_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_TermRangeQuery_instance_(PyTypeObject *type, PyObject *arg);
        static int t_TermRangeQuery_init_(t_TermRangeQuery *self, PyObject *args, PyObject *kwds);
        static PyObject *t_TermRangeQuery_equals(t_TermRangeQuery *self, PyObject *args);
        static PyObject *t_TermRangeQuery_getLowerTerm(t_TermRangeQuery *self);
        static PyObject *t_TermRangeQuery_getUpperTerm(t_TermRangeQuery *self);
        static PyObject *t_TermRangeQuery_hashCode(t_TermRangeQuery *self, PyObject *args);
        static PyObject *t_TermRangeQuery_includesLower(t_TermRangeQuery *self);
        static PyObject *t_TermRangeQuery_includesUpper(t_TermRangeQuery *self);
        static PyObject *t_TermRangeQuery_newStringRange(PyTypeObject *type, PyObject *args);
        static PyObject *t_TermRangeQuery_toString(t_TermRangeQuery *self, PyObject *args);
        static PyObject *t_TermRangeQuery_get__lowerTerm(t_TermRangeQuery *self, void *data);
        static PyObject *t_TermRangeQuery_get__upperTerm(t_TermRangeQuery *self, void *data);
        static PyGetSetDef t_TermRangeQuery__fields_[] = {
          DECLARE_GET_FIELD(t_TermRangeQuery, lowerTerm),
          DECLARE_GET_FIELD(t_TermRangeQuery, upperTerm),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_TermRangeQuery__methods_[] = {
          DECLARE_METHOD(t_TermRangeQuery, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_TermRangeQuery, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_TermRangeQuery, equals, METH_VARARGS),
          DECLARE_METHOD(t_TermRangeQuery, getLowerTerm, METH_NOARGS),
          DECLARE_METHOD(t_TermRangeQuery, getUpperTerm, METH_NOARGS),
          DECLARE_METHOD(t_TermRangeQuery, hashCode, METH_VARARGS),
          DECLARE_METHOD(t_TermRangeQuery, includesLower, METH_NOARGS),
          DECLARE_METHOD(t_TermRangeQuery, includesUpper, METH_NOARGS),
          DECLARE_METHOD(t_TermRangeQuery, newStringRange, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_TermRangeQuery, toString, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(TermRangeQuery, t_TermRangeQuery, ::org::apache::lucene::search::MultiTermQuery, TermRangeQuery, t_TermRangeQuery_init_, 0, 0, t_TermRangeQuery__fields_, 0, 0);

        void t_TermRangeQuery::install(PyObject *module)
        {
          installType(&PY_TYPE(TermRangeQuery), module, "TermRangeQuery", 0);
        }

        void t_TermRangeQuery::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(TermRangeQuery).tp_dict, "class_", make_descriptor(TermRangeQuery::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(TermRangeQuery).tp_dict, "wrapfn_", make_descriptor(t_TermRangeQuery::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(TermRangeQuery).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_TermRangeQuery_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, TermRangeQuery::initializeClass, 1)))
            return NULL;
          return t_TermRangeQuery::wrap_Object(TermRangeQuery(((t_TermRangeQuery *) arg)->object.this$));
        }
        static PyObject *t_TermRangeQuery_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, TermRangeQuery::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_TermRangeQuery_init_(t_TermRangeQuery *self, PyObject *args, PyObject *kwds)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::util::BytesRef a1((jobject) NULL);
          ::org::apache::lucene::util::BytesRef a2((jobject) NULL);
          jboolean a3;
          jboolean a4;
          TermRangeQuery object((jobject) NULL);

          if (!parseArgs(args, "skkZZ", ::org::apache::lucene::util::BytesRef::initializeClass, ::org::apache::lucene::util::BytesRef::initializeClass, &a0, &a1, &a2, &a3, &a4))
          {
            INT_CALL(object = TermRangeQuery(a0, a1, a2, a3, a4));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_TermRangeQuery_equals(t_TermRangeQuery *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.equals(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(TermRangeQuery), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_TermRangeQuery_getLowerTerm(t_TermRangeQuery *self)
        {
          ::org::apache::lucene::util::BytesRef result((jobject) NULL);
          OBJ_CALL(result = self->object.getLowerTerm());
          return ::org::apache::lucene::util::t_BytesRef::wrap_Object(result);
        }

        static PyObject *t_TermRangeQuery_getUpperTerm(t_TermRangeQuery *self)
        {
          ::org::apache::lucene::util::BytesRef result((jobject) NULL);
          OBJ_CALL(result = self->object.getUpperTerm());
          return ::org::apache::lucene::util::t_BytesRef::wrap_Object(result);
        }

        static PyObject *t_TermRangeQuery_hashCode(t_TermRangeQuery *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hashCode());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(TermRangeQuery), (PyObject *) self, "hashCode", args, 2);
        }

        static PyObject *t_TermRangeQuery_includesLower(t_TermRangeQuery *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.includesLower());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_TermRangeQuery_includesUpper(t_TermRangeQuery *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.includesUpper());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_TermRangeQuery_newStringRange(PyTypeObject *type, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::java::lang::String a1((jobject) NULL);
          ::java::lang::String a2((jobject) NULL);
          jboolean a3;
          jboolean a4;
          TermRangeQuery result((jobject) NULL);

          if (!parseArgs(args, "sssZZ", &a0, &a1, &a2, &a3, &a4))
          {
            OBJ_CALL(result = ::org::apache::lucene::search::TermRangeQuery::newStringRange(a0, a1, a2, a3, a4));
            return t_TermRangeQuery::wrap_Object(result);
          }

          PyErr_SetArgsError(type, "newStringRange", args);
          return NULL;
        }

        static PyObject *t_TermRangeQuery_toString(t_TermRangeQuery *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = self->object.toString(a0));
            return j2p(result);
          }

          return callSuper(&PY_TYPE(TermRangeQuery), (PyObject *) self, "toString", args, 2);
        }

        static PyObject *t_TermRangeQuery_get__lowerTerm(t_TermRangeQuery *self, void *data)
        {
          ::org::apache::lucene::util::BytesRef value((jobject) NULL);
          OBJ_CALL(value = self->object.getLowerTerm());
          return ::org::apache::lucene::util::t_BytesRef::wrap_Object(value);
        }

        static PyObject *t_TermRangeQuery_get__upperTerm(t_TermRangeQuery *self, void *data)
        {
          ::org::apache::lucene::util::BytesRef value((jobject) NULL);
          OBJ_CALL(value = self->object.getUpperTerm());
          return ::org::apache::lucene::util::t_BytesRef::wrap_Object(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queries/function/valuesource/ShortFieldSource.h"
#include "org/apache/lucene/queries/function/FunctionValues.h"
#include "org/apache/lucene/search/FieldCache$ShortParser.h"
#include "java/lang/Class.h"
#include "java/lang/Object.h"
#include "java/util/Map.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {

            ::java::lang::Class *ShortFieldSource::class$ = NULL;
            jmethodID *ShortFieldSource::mids$ = NULL;
            bool ShortFieldSource::live$ = false;

            jclass ShortFieldSource::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queries/function/valuesource/ShortFieldSource");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_5fdc3f48] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;)V");
                mids$[mid_init$_0d9308c5] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Lorg/apache/lucene/search/FieldCache$ShortParser;)V");
                mids$[mid_description_14c7b5c5] = env->getMethodID(cls, "description", "()Ljava/lang/String;");
                mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
                mids$[mid_getValues_4c566485] = env->getMethodID(cls, "getValues", "(Ljava/util/Map;Lorg/apache/lucene/index/AtomicReaderContext;)Lorg/apache/lucene/queries/function/FunctionValues;");
                mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            ShortFieldSource::ShortFieldSource(const ::java::lang::String & a0) : ::org::apache::lucene::queries::function::valuesource::FieldCacheSource(env->newObject(initializeClass, &mids$, mid_init$_5fdc3f48, a0.this$)) {}

            ShortFieldSource::ShortFieldSource(const ::java::lang::String & a0, const ::org::apache::lucene::search::FieldCache$ShortParser & a1) : ::org::apache::lucene::queries::function::valuesource::FieldCacheSource(env->newObject(initializeClass, &mids$, mid_init$_0d9308c5, a0.this$, a1.this$)) {}

            ::java::lang::String ShortFieldSource::description() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_description_14c7b5c5]));
            }

            jboolean ShortFieldSource::equals(const ::java::lang::Object & a0) const
            {
              return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
            }

            ::org::apache::lucene::queries::function::FunctionValues ShortFieldSource::getValues(const ::java::util::Map & a0, const ::org::apache::lucene::index::AtomicReaderContext & a1) const
            {
              return ::org::apache::lucene::queries::function::FunctionValues(env->callObjectMethod(this$, mids$[mid_getValues_4c566485], a0.this$, a1.this$));
            }

            jint ShortFieldSource::hashCode() const
            {
              return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {
            static PyObject *t_ShortFieldSource_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_ShortFieldSource_instance_(PyTypeObject *type, PyObject *arg);
            static int t_ShortFieldSource_init_(t_ShortFieldSource *self, PyObject *args, PyObject *kwds);
            static PyObject *t_ShortFieldSource_description(t_ShortFieldSource *self, PyObject *args);
            static PyObject *t_ShortFieldSource_equals(t_ShortFieldSource *self, PyObject *args);
            static PyObject *t_ShortFieldSource_getValues(t_ShortFieldSource *self, PyObject *args);
            static PyObject *t_ShortFieldSource_hashCode(t_ShortFieldSource *self, PyObject *args);

            static PyMethodDef t_ShortFieldSource__methods_[] = {
              DECLARE_METHOD(t_ShortFieldSource, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_ShortFieldSource, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_ShortFieldSource, description, METH_VARARGS),
              DECLARE_METHOD(t_ShortFieldSource, equals, METH_VARARGS),
              DECLARE_METHOD(t_ShortFieldSource, getValues, METH_VARARGS),
              DECLARE_METHOD(t_ShortFieldSource, hashCode, METH_VARARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(ShortFieldSource, t_ShortFieldSource, ::org::apache::lucene::queries::function::valuesource::FieldCacheSource, ShortFieldSource, t_ShortFieldSource_init_, 0, 0, 0, 0, 0);

            void t_ShortFieldSource::install(PyObject *module)
            {
              installType(&PY_TYPE(ShortFieldSource), module, "ShortFieldSource", 0);
            }

            void t_ShortFieldSource::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(ShortFieldSource).tp_dict, "class_", make_descriptor(ShortFieldSource::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(ShortFieldSource).tp_dict, "wrapfn_", make_descriptor(t_ShortFieldSource::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(ShortFieldSource).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_ShortFieldSource_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, ShortFieldSource::initializeClass, 1)))
                return NULL;
              return t_ShortFieldSource::wrap_Object(ShortFieldSource(((t_ShortFieldSource *) arg)->object.this$));
            }
            static PyObject *t_ShortFieldSource_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, ShortFieldSource::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_ShortFieldSource_init_(t_ShortFieldSource *self, PyObject *args, PyObject *kwds)
            {
              switch (PyTuple_GET_SIZE(args)) {
               case 1:
                {
                  ::java::lang::String a0((jobject) NULL);
                  ShortFieldSource object((jobject) NULL);

                  if (!parseArgs(args, "s", &a0))
                  {
                    INT_CALL(object = ShortFieldSource(a0));
                    self->object = object;
                    break;
                  }
                }
                goto err;
               case 2:
                {
                  ::java::lang::String a0((jobject) NULL);
                  ::org::apache::lucene::search::FieldCache$ShortParser a1((jobject) NULL);
                  ShortFieldSource object((jobject) NULL);

                  if (!parseArgs(args, "sk", ::org::apache::lucene::search::FieldCache$ShortParser::initializeClass, &a0, &a1))
                  {
                    INT_CALL(object = ShortFieldSource(a0, a1));
                    self->object = object;
                    break;
                  }
                }
               default:
               err:
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_ShortFieldSource_description(t_ShortFieldSource *self, PyObject *args)
            {
              ::java::lang::String result((jobject) NULL);

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.description());
                return j2p(result);
              }

              return callSuper(&PY_TYPE(ShortFieldSource), (PyObject *) self, "description", args, 2);
            }

            static PyObject *t_ShortFieldSource_equals(t_ShortFieldSource *self, PyObject *args)
            {
              ::java::lang::Object a0((jobject) NULL);
              jboolean result;

              if (!parseArgs(args, "o", &a0))
              {
                OBJ_CALL(result = self->object.equals(a0));
                Py_RETURN_BOOL(result);
              }

              return callSuper(&PY_TYPE(ShortFieldSource), (PyObject *) self, "equals", args, 2);
            }

            static PyObject *t_ShortFieldSource_getValues(t_ShortFieldSource *self, PyObject *args)
            {
              ::java::util::Map a0((jobject) NULL);
              PyTypeObject **p0;
              ::org::apache::lucene::index::AtomicReaderContext a1((jobject) NULL);
              ::org::apache::lucene::queries::function::FunctionValues result((jobject) NULL);

              if (!parseArgs(args, "Kk", ::java::util::Map::initializeClass, ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_, &a1))
              {
                OBJ_CALL(result = self->object.getValues(a0, a1));
                return ::org::apache::lucene::queries::function::t_FunctionValues::wrap_Object(result);
              }

              return callSuper(&PY_TYPE(ShortFieldSource), (PyObject *) self, "getValues", args, 2);
            }

            static PyObject *t_ShortFieldSource_hashCode(t_ShortFieldSource *self, PyObject *args)
            {
              jint result;

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.hashCode());
                return PyInt_FromLong((long) result);
              }

              return callSuper(&PY_TYPE(ShortFieldSource), (PyObject *) self, "hashCode", args, 2);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queries/function/valuesource/MultiFunction$Values.h"
#include "org/apache/lucene/queries/function/FunctionValues$ValueFiller.h"
#include "java/lang/String.h"
#include "org/apache/lucene/queries/function/valuesource/MultiFunction.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {

            ::java::lang::Class *MultiFunction$Values::class$ = NULL;
            jmethodID *MultiFunction$Values::mids$ = NULL;
            bool MultiFunction$Values::live$ = false;

            jclass MultiFunction$Values::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queries/function/valuesource/MultiFunction$Values");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_b691fe3f] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/queries/function/valuesource/MultiFunction;[Lorg/apache/lucene/queries/function/FunctionValues;)V");
                mids$[mid_getValueFiller_7731f0bd] = env->getMethodID(cls, "getValueFiller", "()Lorg/apache/lucene/queries/function/FunctionValues$ValueFiller;");
                mids$[mid_toString_141401b3] = env->getMethodID(cls, "toString", "(I)Ljava/lang/String;");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            MultiFunction$Values::MultiFunction$Values(const ::org::apache::lucene::queries::function::valuesource::MultiFunction & a0, const JArray< ::org::apache::lucene::queries::function::FunctionValues > & a1) : ::org::apache::lucene::queries::function::FunctionValues(env->newObject(initializeClass, &mids$, mid_init$_b691fe3f, a0.this$, a1.this$)) {}

            ::org::apache::lucene::queries::function::FunctionValues$ValueFiller MultiFunction$Values::getValueFiller() const
            {
              return ::org::apache::lucene::queries::function::FunctionValues$ValueFiller(env->callObjectMethod(this$, mids$[mid_getValueFiller_7731f0bd]));
            }

            ::java::lang::String MultiFunction$Values::toString(jint a0) const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_141401b3], a0));
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {
            static PyObject *t_MultiFunction$Values_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_MultiFunction$Values_instance_(PyTypeObject *type, PyObject *arg);
            static int t_MultiFunction$Values_init_(t_MultiFunction$Values *self, PyObject *args, PyObject *kwds);
            static PyObject *t_MultiFunction$Values_getValueFiller(t_MultiFunction$Values *self, PyObject *args);
            static PyObject *t_MultiFunction$Values_toString(t_MultiFunction$Values *self, PyObject *args);
            static PyObject *t_MultiFunction$Values_get__valueFiller(t_MultiFunction$Values *self, void *data);
            static PyGetSetDef t_MultiFunction$Values__fields_[] = {
              DECLARE_GET_FIELD(t_MultiFunction$Values, valueFiller),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_MultiFunction$Values__methods_[] = {
              DECLARE_METHOD(t_MultiFunction$Values, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_MultiFunction$Values, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_MultiFunction$Values, getValueFiller, METH_VARARGS),
              DECLARE_METHOD(t_MultiFunction$Values, toString, METH_VARARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(MultiFunction$Values, t_MultiFunction$Values, ::org::apache::lucene::queries::function::FunctionValues, MultiFunction$Values, t_MultiFunction$Values_init_, 0, 0, t_MultiFunction$Values__fields_, 0, 0);

            void t_MultiFunction$Values::install(PyObject *module)
            {
              installType(&PY_TYPE(MultiFunction$Values), module, "MultiFunction$Values", 0);
            }

            void t_MultiFunction$Values::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(MultiFunction$Values).tp_dict, "class_", make_descriptor(MultiFunction$Values::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(MultiFunction$Values).tp_dict, "wrapfn_", make_descriptor(t_MultiFunction$Values::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(MultiFunction$Values).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_MultiFunction$Values_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, MultiFunction$Values::initializeClass, 1)))
                return NULL;
              return t_MultiFunction$Values::wrap_Object(MultiFunction$Values(((t_MultiFunction$Values *) arg)->object.this$));
            }
            static PyObject *t_MultiFunction$Values_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, MultiFunction$Values::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_MultiFunction$Values_init_(t_MultiFunction$Values *self, PyObject *args, PyObject *kwds)
            {
              ::org::apache::lucene::queries::function::valuesource::MultiFunction a0((jobject) NULL);
              JArray< ::org::apache::lucene::queries::function::FunctionValues > a1((jobject) NULL);
              MultiFunction$Values object((jobject) NULL);

              if (!parseArgs(args, "k[k", ::org::apache::lucene::queries::function::valuesource::MultiFunction::initializeClass, ::org::apache::lucene::queries::function::FunctionValues::initializeClass, &a0, &a1))
              {
                INT_CALL(object = MultiFunction$Values(a0, a1));
                self->object = object;
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_MultiFunction$Values_getValueFiller(t_MultiFunction$Values *self, PyObject *args)
            {
              ::org::apache::lucene::queries::function::FunctionValues$ValueFiller result((jobject) NULL);

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.getValueFiller());
                return ::org::apache::lucene::queries::function::t_FunctionValues$ValueFiller::wrap_Object(result);
              }

              return callSuper(&PY_TYPE(MultiFunction$Values), (PyObject *) self, "getValueFiller", args, 2);
            }

            static PyObject *t_MultiFunction$Values_toString(t_MultiFunction$Values *self, PyObject *args)
            {
              jint a0;
              ::java::lang::String result((jobject) NULL);

              if (!parseArgs(args, "I", &a0))
              {
                OBJ_CALL(result = self->object.toString(a0));
                return j2p(result);
              }

              return callSuper(&PY_TYPE(MultiFunction$Values), (PyObject *) self, "toString", args, 2);
            }

            static PyObject *t_MultiFunction$Values_get__valueFiller(t_MultiFunction$Values *self, void *data)
            {
              ::org::apache::lucene::queries::function::FunctionValues$ValueFiller value((jobject) NULL);
              OBJ_CALL(value = self->object.getValueFiller());
              return ::org::apache::lucene::queries::function::t_FunctionValues$ValueFiller::wrap_Object(value);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/store/FSLockFactory.h"
#include "java/lang/String.h"
#include "java/io/File.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {

        ::java::lang::Class *FSLockFactory::class$ = NULL;
        jmethodID *FSLockFactory::mids$ = NULL;
        bool FSLockFactory::live$ = false;

        jclass FSLockFactory::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/store/FSLockFactory");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_getLockDir_a8eb7bbe] = env->getMethodID(cls, "getLockDir", "()Ljava/io/File;");
            mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");
            mids$[mid_setLockDir_c3dacf57] = env->getMethodID(cls, "setLockDir", "(Ljava/io/File;)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        FSLockFactory::FSLockFactory() : ::org::apache::lucene::store::LockFactory(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        ::java::io::File FSLockFactory::getLockDir() const
        {
          return ::java::io::File(env->callObjectMethod(this$, mids$[mid_getLockDir_a8eb7bbe]));
        }

        ::java::lang::String FSLockFactory::toString() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {
        static PyObject *t_FSLockFactory_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FSLockFactory_instance_(PyTypeObject *type, PyObject *arg);
        static int t_FSLockFactory_init_(t_FSLockFactory *self, PyObject *args, PyObject *kwds);
        static PyObject *t_FSLockFactory_getLockDir(t_FSLockFactory *self);
        static PyObject *t_FSLockFactory_toString(t_FSLockFactory *self, PyObject *args);
        static PyObject *t_FSLockFactory_get__lockDir(t_FSLockFactory *self, void *data);
        static PyGetSetDef t_FSLockFactory__fields_[] = {
          DECLARE_GET_FIELD(t_FSLockFactory, lockDir),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_FSLockFactory__methods_[] = {
          DECLARE_METHOD(t_FSLockFactory, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FSLockFactory, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FSLockFactory, getLockDir, METH_NOARGS),
          DECLARE_METHOD(t_FSLockFactory, toString, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(FSLockFactory, t_FSLockFactory, ::org::apache::lucene::store::LockFactory, FSLockFactory, t_FSLockFactory_init_, 0, 0, t_FSLockFactory__fields_, 0, 0);

        void t_FSLockFactory::install(PyObject *module)
        {
          installType(&PY_TYPE(FSLockFactory), module, "FSLockFactory", 0);
        }

        void t_FSLockFactory::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(FSLockFactory).tp_dict, "class_", make_descriptor(FSLockFactory::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(FSLockFactory).tp_dict, "wrapfn_", make_descriptor(t_FSLockFactory::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(FSLockFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_FSLockFactory_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, FSLockFactory::initializeClass, 1)))
            return NULL;
          return t_FSLockFactory::wrap_Object(FSLockFactory(((t_FSLockFactory *) arg)->object.this$));
        }
        static PyObject *t_FSLockFactory_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, FSLockFactory::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_FSLockFactory_init_(t_FSLockFactory *self, PyObject *args, PyObject *kwds)
        {
          FSLockFactory object((jobject) NULL);

          INT_CALL(object = FSLockFactory());
          self->object = object;

          return 0;
        }

        static PyObject *t_FSLockFactory_getLockDir(t_FSLockFactory *self)
        {
          ::java::io::File result((jobject) NULL);
          OBJ_CALL(result = self->object.getLockDir());
          return ::java::io::t_File::wrap_Object(result);
        }

        static PyObject *t_FSLockFactory_toString(t_FSLockFactory *self, PyObject *args)
        {
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.toString());
            return j2p(result);
          }

          return callSuper(&PY_TYPE(FSLockFactory), (PyObject *) self, "toString", args, 2);
        }

        static PyObject *t_FSLockFactory_get__lockDir(t_FSLockFactory *self, void *data)
        {
          ::java::io::File value((jobject) NULL);
          OBJ_CALL(value = self->object.getLockDir());
          return ::java::io::t_File::wrap_Object(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/tartarus/snowball/ext/CatalanStemmer.h"
#include "java/lang/Object.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace tartarus {
    namespace snowball {
      namespace ext {

        ::java::lang::Class *CatalanStemmer::class$ = NULL;
        jmethodID *CatalanStemmer::mids$ = NULL;
        bool CatalanStemmer::live$ = false;

        jclass CatalanStemmer::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/tartarus/snowball/ext/CatalanStemmer");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
            mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
            mids$[mid_stem_54c6a16a] = env->getMethodID(cls, "stem", "()Z");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        CatalanStemmer::CatalanStemmer() : ::org::tartarus::snowball::SnowballProgram(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        jboolean CatalanStemmer::equals(const ::java::lang::Object & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
        }

        jint CatalanStemmer::hashCode() const
        {
          return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
        }

        jboolean CatalanStemmer::stem() const
        {
          return env->callBooleanMethod(this$, mids$[mid_stem_54c6a16a]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace tartarus {
    namespace snowball {
      namespace ext {
        static PyObject *t_CatalanStemmer_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_CatalanStemmer_instance_(PyTypeObject *type, PyObject *arg);
        static int t_CatalanStemmer_init_(t_CatalanStemmer *self, PyObject *args, PyObject *kwds);
        static PyObject *t_CatalanStemmer_equals(t_CatalanStemmer *self, PyObject *args);
        static PyObject *t_CatalanStemmer_hashCode(t_CatalanStemmer *self, PyObject *args);
        static PyObject *t_CatalanStemmer_stem(t_CatalanStemmer *self, PyObject *args);

        static PyMethodDef t_CatalanStemmer__methods_[] = {
          DECLARE_METHOD(t_CatalanStemmer, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_CatalanStemmer, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_CatalanStemmer, equals, METH_VARARGS),
          DECLARE_METHOD(t_CatalanStemmer, hashCode, METH_VARARGS),
          DECLARE_METHOD(t_CatalanStemmer, stem, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(CatalanStemmer, t_CatalanStemmer, ::org::tartarus::snowball::SnowballProgram, CatalanStemmer, t_CatalanStemmer_init_, 0, 0, 0, 0, 0);

        void t_CatalanStemmer::install(PyObject *module)
        {
          installType(&PY_TYPE(CatalanStemmer), module, "CatalanStemmer", 0);
        }

        void t_CatalanStemmer::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(CatalanStemmer).tp_dict, "class_", make_descriptor(CatalanStemmer::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(CatalanStemmer).tp_dict, "wrapfn_", make_descriptor(t_CatalanStemmer::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(CatalanStemmer).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_CatalanStemmer_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, CatalanStemmer::initializeClass, 1)))
            return NULL;
          return t_CatalanStemmer::wrap_Object(CatalanStemmer(((t_CatalanStemmer *) arg)->object.this$));
        }
        static PyObject *t_CatalanStemmer_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, CatalanStemmer::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_CatalanStemmer_init_(t_CatalanStemmer *self, PyObject *args, PyObject *kwds)
        {
          CatalanStemmer object((jobject) NULL);

          INT_CALL(object = CatalanStemmer());
          self->object = object;

          return 0;
        }

        static PyObject *t_CatalanStemmer_equals(t_CatalanStemmer *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.equals(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(CatalanStemmer), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_CatalanStemmer_hashCode(t_CatalanStemmer *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hashCode());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(CatalanStemmer), (PyObject *) self, "hashCode", args, 2);
        }

        static PyObject *t_CatalanStemmer_stem(t_CatalanStemmer *self, PyObject *args)
        {
          jboolean result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.stem());
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(CatalanStemmer), (PyObject *) self, "stem", args, 2);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/standard/processors/BooleanQuery2ModifierNodeProcessor.h"
#include "org/apache/lucene/queryparser/flexible/core/config/QueryConfigHandler.h"
#include "org/apache/lucene/queryparser/flexible/core/QueryNodeException.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/QueryNode.h"
#include "org/apache/lucene/queryparser/flexible/core/processors/QueryNodeProcessor.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace processors {

              ::java::lang::Class *BooleanQuery2ModifierNodeProcessor::class$ = NULL;
              jmethodID *BooleanQuery2ModifierNodeProcessor::mids$ = NULL;
              bool BooleanQuery2ModifierNodeProcessor::live$ = false;

              jclass BooleanQuery2ModifierNodeProcessor::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/standard/processors/BooleanQuery2ModifierNodeProcessor");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
                  mids$[mid_getQueryConfigHandler_3636d8c3] = env->getMethodID(cls, "getQueryConfigHandler", "()Lorg/apache/lucene/queryparser/flexible/core/config/QueryConfigHandler;");
                  mids$[mid_process_6705aed7] = env->getMethodID(cls, "process", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;)Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;");
                  mids$[mid_setQueryConfigHandler_0b1f7132] = env->getMethodID(cls, "setQueryConfigHandler", "(Lorg/apache/lucene/queryparser/flexible/core/config/QueryConfigHandler;)V");
                  mids$[mid_processChildren_cc04aeef] = env->getMethodID(cls, "processChildren", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;)V");
                  mids$[mid_preProcessNode_6705aed7] = env->getMethodID(cls, "preProcessNode", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;)Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;");
                  mids$[mid_postProcessNode_6705aed7] = env->getMethodID(cls, "postProcessNode", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;)Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;");
                  mids$[mid_fillChildrenBufferAndApplyModifiery_cc04aeef] = env->getMethodID(cls, "fillChildrenBufferAndApplyModifiery", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;)V");
                  mids$[mid_isDefaultBooleanQueryNode_cc04aee3] = env->getMethodID(cls, "isDefaultBooleanQueryNode", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;)Z");
                  mids$[mid_tagModifierButDoNotOverride_6bd34b3d] = env->getMethodID(cls, "tagModifierButDoNotOverride", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;Lorg/apache/lucene/queryparser/flexible/core/nodes/ModifierQueryNode$Modifier;)V");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              BooleanQuery2ModifierNodeProcessor::BooleanQuery2ModifierNodeProcessor() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

              ::org::apache::lucene::queryparser::flexible::core::config::QueryConfigHandler BooleanQuery2ModifierNodeProcessor::getQueryConfigHandler() const
              {
                return ::org::apache::lucene::queryparser::flexible::core::config::QueryConfigHandler(env->callObjectMethod(this$, mids$[mid_getQueryConfigHandler_3636d8c3]));
              }

              ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode BooleanQuery2ModifierNodeProcessor::process(const ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode & a0) const
              {
                return ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode(env->callObjectMethod(this$, mids$[mid_process_6705aed7], a0.this$));
              }

              void BooleanQuery2ModifierNodeProcessor::setQueryConfigHandler(const ::org::apache::lucene::queryparser::flexible::core::config::QueryConfigHandler & a0) const
              {
                env->callVoidMethod(this$, mids$[mid_setQueryConfigHandler_0b1f7132], a0.this$);
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace processors {
              static PyObject *t_BooleanQuery2ModifierNodeProcessor_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_BooleanQuery2ModifierNodeProcessor_instance_(PyTypeObject *type, PyObject *arg);
              static int t_BooleanQuery2ModifierNodeProcessor_init_(t_BooleanQuery2ModifierNodeProcessor *self, PyObject *args, PyObject *kwds);
              static PyObject *t_BooleanQuery2ModifierNodeProcessor_getQueryConfigHandler(t_BooleanQuery2ModifierNodeProcessor *self);
              static PyObject *t_BooleanQuery2ModifierNodeProcessor_process(t_BooleanQuery2ModifierNodeProcessor *self, PyObject *arg);
              static PyObject *t_BooleanQuery2ModifierNodeProcessor_setQueryConfigHandler(t_BooleanQuery2ModifierNodeProcessor *self, PyObject *arg);
              static PyObject *t_BooleanQuery2ModifierNodeProcessor_get__queryConfigHandler(t_BooleanQuery2ModifierNodeProcessor *self, void *data);
              static int t_BooleanQuery2ModifierNodeProcessor_set__queryConfigHandler(t_BooleanQuery2ModifierNodeProcessor *self, PyObject *arg, void *data);
              static PyGetSetDef t_BooleanQuery2ModifierNodeProcessor__fields_[] = {
                DECLARE_GETSET_FIELD(t_BooleanQuery2ModifierNodeProcessor, queryConfigHandler),
                { NULL, NULL, NULL, NULL, NULL }
              };

              static PyMethodDef t_BooleanQuery2ModifierNodeProcessor__methods_[] = {
                DECLARE_METHOD(t_BooleanQuery2ModifierNodeProcessor, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_BooleanQuery2ModifierNodeProcessor, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_BooleanQuery2ModifierNodeProcessor, getQueryConfigHandler, METH_NOARGS),
                DECLARE_METHOD(t_BooleanQuery2ModifierNodeProcessor, process, METH_O),
                DECLARE_METHOD(t_BooleanQuery2ModifierNodeProcessor, setQueryConfigHandler, METH_O),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(BooleanQuery2ModifierNodeProcessor, t_BooleanQuery2ModifierNodeProcessor, ::java::lang::Object, BooleanQuery2ModifierNodeProcessor, t_BooleanQuery2ModifierNodeProcessor_init_, 0, 0, t_BooleanQuery2ModifierNodeProcessor__fields_, 0, 0);

              void t_BooleanQuery2ModifierNodeProcessor::install(PyObject *module)
              {
                installType(&PY_TYPE(BooleanQuery2ModifierNodeProcessor), module, "BooleanQuery2ModifierNodeProcessor", 0);
              }

              void t_BooleanQuery2ModifierNodeProcessor::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(BooleanQuery2ModifierNodeProcessor).tp_dict, "class_", make_descriptor(BooleanQuery2ModifierNodeProcessor::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(BooleanQuery2ModifierNodeProcessor).tp_dict, "wrapfn_", make_descriptor(t_BooleanQuery2ModifierNodeProcessor::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(BooleanQuery2ModifierNodeProcessor).tp_dict, "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_BooleanQuery2ModifierNodeProcessor_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, BooleanQuery2ModifierNodeProcessor::initializeClass, 1)))
                  return NULL;
                return t_BooleanQuery2ModifierNodeProcessor::wrap_Object(BooleanQuery2ModifierNodeProcessor(((t_BooleanQuery2ModifierNodeProcessor *) arg)->object.this$));
              }
              static PyObject *t_BooleanQuery2ModifierNodeProcessor_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, BooleanQuery2ModifierNodeProcessor::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_BooleanQuery2ModifierNodeProcessor_init_(t_BooleanQuery2ModifierNodeProcessor *self, PyObject *args, PyObject *kwds)
              {
                BooleanQuery2ModifierNodeProcessor object((jobject) NULL);

                INT_CALL(object = BooleanQuery2ModifierNodeProcessor());
                self->object = object;

                return 0;
              }

              static PyObject *t_BooleanQuery2ModifierNodeProcessor_getQueryConfigHandler(t_BooleanQuery2ModifierNodeProcessor *self)
              {
                ::org::apache::lucene::queryparser::flexible::core::config::QueryConfigHandler result((jobject) NULL);
                OBJ_CALL(result = self->object.getQueryConfigHandler());
                return ::org::apache::lucene::queryparser::flexible::core::config::t_QueryConfigHandler::wrap_Object(result);
              }

              static PyObject *t_BooleanQuery2ModifierNodeProcessor_process(t_BooleanQuery2ModifierNodeProcessor *self, PyObject *arg)
              {
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode a0((jobject) NULL);
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode result((jobject) NULL);

                if (!parseArg(arg, "k", ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode::initializeClass, &a0))
                {
                  OBJ_CALL(result = self->object.process(a0));
                  return ::org::apache::lucene::queryparser::flexible::core::nodes::t_QueryNode::wrap_Object(result);
                }

                PyErr_SetArgsError((PyObject *) self, "process", arg);
                return NULL;
              }

              static PyObject *t_BooleanQuery2ModifierNodeProcessor_setQueryConfigHandler(t_BooleanQuery2ModifierNodeProcessor *self, PyObject *arg)
              {
                ::org::apache::lucene::queryparser::flexible::core::config::QueryConfigHandler a0((jobject) NULL);

                if (!parseArg(arg, "k", ::org::apache::lucene::queryparser::flexible::core::config::QueryConfigHandler::initializeClass, &a0))
                {
                  OBJ_CALL(self->object.setQueryConfigHandler(a0));
                  Py_RETURN_NONE;
                }

                PyErr_SetArgsError((PyObject *) self, "setQueryConfigHandler", arg);
                return NULL;
              }

              static PyObject *t_BooleanQuery2ModifierNodeProcessor_get__queryConfigHandler(t_BooleanQuery2ModifierNodeProcessor *self, void *data)
              {
                ::org::apache::lucene::queryparser::flexible::core::config::QueryConfigHandler value((jobject) NULL);
                OBJ_CALL(value = self->object.getQueryConfigHandler());
                return ::org::apache::lucene::queryparser::flexible::core::config::t_QueryConfigHandler::wrap_Object(value);
              }
              static int t_BooleanQuery2ModifierNodeProcessor_set__queryConfigHandler(t_BooleanQuery2ModifierNodeProcessor *self, PyObject *arg, void *data)
              {
                {
                  ::org::apache::lucene::queryparser::flexible::core::config::QueryConfigHandler value((jobject) NULL);
                  if (!parseArg(arg, "k", ::org::apache::lucene::queryparser::flexible::core::config::QueryConfigHandler::initializeClass, &value))
                  {
                    INT_CALL(self->object.setQueryConfigHandler(value));
                    return 0;
                  }
                }
                PyErr_SetArgsError((PyObject *) self, "queryConfigHandler", arg);
                return -1;
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/packed/PackedInts$Encoder.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace packed {

          ::java::lang::Class *PackedInts$Encoder::class$ = NULL;
          jmethodID *PackedInts$Encoder::mids$ = NULL;
          bool PackedInts$Encoder::live$ = false;

          jclass PackedInts$Encoder::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/util/packed/PackedInts$Encoder");

              mids$ = new jmethodID[max_mid];
              mids$[mid_byteBlockCount_54c6a179] = env->getMethodID(cls, "byteBlockCount", "()I");
              mids$[mid_byteValueCount_54c6a179] = env->getMethodID(cls, "byteValueCount", "()I");
              mids$[mid_encode_b62d11da] = env->getMethodID(cls, "encode", "([JI[BII)V");
              mids$[mid_encode_9d48bd73] = env->getMethodID(cls, "encode", "([II[BII)V");
              mids$[mid_encode_6b7ac502] = env->getMethodID(cls, "encode", "([JI[JII)V");
              mids$[mid_encode_98f8869b] = env->getMethodID(cls, "encode", "([II[JII)V");
              mids$[mid_longBlockCount_54c6a179] = env->getMethodID(cls, "longBlockCount", "()I");
              mids$[mid_longValueCount_54c6a179] = env->getMethodID(cls, "longValueCount", "()I");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          jint PackedInts$Encoder::byteBlockCount() const
          {
            return env->callIntMethod(this$, mids$[mid_byteBlockCount_54c6a179]);
          }

          jint PackedInts$Encoder::byteValueCount() const
          {
            return env->callIntMethod(this$, mids$[mid_byteValueCount_54c6a179]);
          }

          void PackedInts$Encoder::encode(const JArray< jlong > & a0, jint a1, const JArray< jbyte > & a2, jint a3, jint a4) const
          {
            env->callVoidMethod(this$, mids$[mid_encode_b62d11da], a0.this$, a1, a2.this$, a3, a4);
          }

          void PackedInts$Encoder::encode(const JArray< jint > & a0, jint a1, const JArray< jbyte > & a2, jint a3, jint a4) const
          {
            env->callVoidMethod(this$, mids$[mid_encode_9d48bd73], a0.this$, a1, a2.this$, a3, a4);
          }

          void PackedInts$Encoder::encode(const JArray< jlong > & a0, jint a1, const JArray< jlong > & a2, jint a3, jint a4) const
          {
            env->callVoidMethod(this$, mids$[mid_encode_6b7ac502], a0.this$, a1, a2.this$, a3, a4);
          }

          void PackedInts$Encoder::encode(const JArray< jint > & a0, jint a1, const JArray< jlong > & a2, jint a3, jint a4) const
          {
            env->callVoidMethod(this$, mids$[mid_encode_98f8869b], a0.this$, a1, a2.this$, a3, a4);
          }

          jint PackedInts$Encoder::longBlockCount() const
          {
            return env->callIntMethod(this$, mids$[mid_longBlockCount_54c6a179]);
          }

          jint PackedInts$Encoder::longValueCount() const
          {
            return env->callIntMethod(this$, mids$[mid_longValueCount_54c6a179]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace packed {
          static PyObject *t_PackedInts$Encoder_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PackedInts$Encoder_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PackedInts$Encoder_byteBlockCount(t_PackedInts$Encoder *self);
          static PyObject *t_PackedInts$Encoder_byteValueCount(t_PackedInts$Encoder *self);
          static PyObject *t_PackedInts$Encoder_encode(t_PackedInts$Encoder *self, PyObject *args);
          static PyObject *t_PackedInts$Encoder_longBlockCount(t_PackedInts$Encoder *self);
          static PyObject *t_PackedInts$Encoder_longValueCount(t_PackedInts$Encoder *self);

          static PyMethodDef t_PackedInts$Encoder__methods_[] = {
            DECLARE_METHOD(t_PackedInts$Encoder, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PackedInts$Encoder, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PackedInts$Encoder, byteBlockCount, METH_NOARGS),
            DECLARE_METHOD(t_PackedInts$Encoder, byteValueCount, METH_NOARGS),
            DECLARE_METHOD(t_PackedInts$Encoder, encode, METH_VARARGS),
            DECLARE_METHOD(t_PackedInts$Encoder, longBlockCount, METH_NOARGS),
            DECLARE_METHOD(t_PackedInts$Encoder, longValueCount, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(PackedInts$Encoder, t_PackedInts$Encoder, ::java::lang::Object, PackedInts$Encoder, abstract_init, 0, 0, 0, 0, 0);

          void t_PackedInts$Encoder::install(PyObject *module)
          {
            installType(&PY_TYPE(PackedInts$Encoder), module, "PackedInts$Encoder", 0);
          }

          void t_PackedInts$Encoder::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(PackedInts$Encoder).tp_dict, "class_", make_descriptor(PackedInts$Encoder::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(PackedInts$Encoder).tp_dict, "wrapfn_", make_descriptor(t_PackedInts$Encoder::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(PackedInts$Encoder).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_PackedInts$Encoder_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, PackedInts$Encoder::initializeClass, 1)))
              return NULL;
            return t_PackedInts$Encoder::wrap_Object(PackedInts$Encoder(((t_PackedInts$Encoder *) arg)->object.this$));
          }
          static PyObject *t_PackedInts$Encoder_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, PackedInts$Encoder::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_PackedInts$Encoder_byteBlockCount(t_PackedInts$Encoder *self)
          {
            jint result;
            OBJ_CALL(result = self->object.byteBlockCount());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_PackedInts$Encoder_byteValueCount(t_PackedInts$Encoder *self)
          {
            jint result;
            OBJ_CALL(result = self->object.byteValueCount());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_PackedInts$Encoder_encode(t_PackedInts$Encoder *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 5:
              {
                JArray< jlong > a0((jobject) NULL);
                jint a1;
                JArray< jbyte > a2((jobject) NULL);
                jint a3;
                jint a4;

                if (!parseArgs(args, "[JI[BII", &a0, &a1, &a2, &a3, &a4))
                {
                  OBJ_CALL(self->object.encode(a0, a1, a2, a3, a4));
                  Py_RETURN_NONE;
                }
              }
              {
                JArray< jint > a0((jobject) NULL);
                jint a1;
                JArray< jbyte > a2((jobject) NULL);
                jint a3;
                jint a4;

                if (!parseArgs(args, "[II[BII", &a0, &a1, &a2, &a3, &a4))
                {
                  OBJ_CALL(self->object.encode(a0, a1, a2, a3, a4));
                  Py_RETURN_NONE;
                }
              }
              {
                JArray< jlong > a0((jobject) NULL);
                jint a1;
                JArray< jlong > a2((jobject) NULL);
                jint a3;
                jint a4;

                if (!parseArgs(args, "[JI[JII", &a0, &a1, &a2, &a3, &a4))
                {
                  OBJ_CALL(self->object.encode(a0, a1, a2, a3, a4));
                  Py_RETURN_NONE;
                }
              }
              {
                JArray< jint > a0((jobject) NULL);
                jint a1;
                JArray< jlong > a2((jobject) NULL);
                jint a3;
                jint a4;

                if (!parseArgs(args, "[II[JII", &a0, &a1, &a2, &a3, &a4))
                {
                  OBJ_CALL(self->object.encode(a0, a1, a2, a3, a4));
                  Py_RETURN_NONE;
                }
              }
            }

            PyErr_SetArgsError((PyObject *) self, "encode", args);
            return NULL;
          }

          static PyObject *t_PackedInts$Encoder_longBlockCount(t_PackedInts$Encoder *self)
          {
            jint result;
            OBJ_CALL(result = self->object.longBlockCount());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_PackedInts$Encoder_longValueCount(t_PackedInts$Encoder *self)
          {
            jint result;
            OBJ_CALL(result = self->object.longValueCount());
            return PyInt_FromLong((long) result);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/no/NorwegianAnalyzer.h"
#include "org/apache/lucene/util/Version.h"
#include "java/lang/String.h"
#include "org/apache/lucene/analysis/util/CharArraySet.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace no {

          ::java::lang::Class *NorwegianAnalyzer::class$ = NULL;
          jmethodID *NorwegianAnalyzer::mids$ = NULL;
          bool NorwegianAnalyzer::live$ = false;
          ::java::lang::String *NorwegianAnalyzer::DEFAULT_STOPWORD_FILE = NULL;

          jclass NorwegianAnalyzer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/no/NorwegianAnalyzer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_0d96cf33] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;)V");
              mids$[mid_init$_83eafe28] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/analysis/util/CharArraySet;)V");
              mids$[mid_init$_c9d7e4a3] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/analysis/util/CharArraySet;Lorg/apache/lucene/analysis/util/CharArraySet;)V");
              mids$[mid_getDefaultStopSet_d2d3505c] = env->getStaticMethodID(cls, "getDefaultStopSet", "()Lorg/apache/lucene/analysis/util/CharArraySet;");
              mids$[mid_createComponents_1be39cae] = env->getMethodID(cls, "createComponents", "(Ljava/lang/String;Ljava/io/Reader;)Lorg/apache/lucene/analysis/Analyzer$TokenStreamComponents;");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              DEFAULT_STOPWORD_FILE = new ::java::lang::String(env->getStaticObjectField(cls, "DEFAULT_STOPWORD_FILE", "Ljava/lang/String;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          NorwegianAnalyzer::NorwegianAnalyzer(const ::org::apache::lucene::util::Version & a0) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_0d96cf33, a0.this$)) {}

          NorwegianAnalyzer::NorwegianAnalyzer(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::analysis::util::CharArraySet & a1) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_83eafe28, a0.this$, a1.this$)) {}

          NorwegianAnalyzer::NorwegianAnalyzer(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::analysis::util::CharArraySet & a1, const ::org::apache::lucene::analysis::util::CharArraySet & a2) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_c9d7e4a3, a0.this$, a1.this$, a2.this$)) {}

          ::org::apache::lucene::analysis::util::CharArraySet NorwegianAnalyzer::getDefaultStopSet()
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::analysis::util::CharArraySet(env->callStaticObjectMethod(cls, mids$[mid_getDefaultStopSet_d2d3505c]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace no {
          static PyObject *t_NorwegianAnalyzer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_NorwegianAnalyzer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_NorwegianAnalyzer_init_(t_NorwegianAnalyzer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_NorwegianAnalyzer_getDefaultStopSet(PyTypeObject *type);
          static PyObject *t_NorwegianAnalyzer_get__defaultStopSet(t_NorwegianAnalyzer *self, void *data);
          static PyGetSetDef t_NorwegianAnalyzer__fields_[] = {
            DECLARE_GET_FIELD(t_NorwegianAnalyzer, defaultStopSet),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_NorwegianAnalyzer__methods_[] = {
            DECLARE_METHOD(t_NorwegianAnalyzer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_NorwegianAnalyzer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_NorwegianAnalyzer, getDefaultStopSet, METH_NOARGS | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(NorwegianAnalyzer, t_NorwegianAnalyzer, ::org::apache::lucene::analysis::util::StopwordAnalyzerBase, NorwegianAnalyzer, t_NorwegianAnalyzer_init_, 0, 0, t_NorwegianAnalyzer__fields_, 0, 0);

          void t_NorwegianAnalyzer::install(PyObject *module)
          {
            installType(&PY_TYPE(NorwegianAnalyzer), module, "NorwegianAnalyzer", 0);
          }

          void t_NorwegianAnalyzer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(NorwegianAnalyzer).tp_dict, "class_", make_descriptor(NorwegianAnalyzer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(NorwegianAnalyzer).tp_dict, "wrapfn_", make_descriptor(t_NorwegianAnalyzer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(NorwegianAnalyzer).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(NorwegianAnalyzer::initializeClass);
            PyDict_SetItemString(PY_TYPE(NorwegianAnalyzer).tp_dict, "DEFAULT_STOPWORD_FILE", make_descriptor(j2p(*NorwegianAnalyzer::DEFAULT_STOPWORD_FILE)));
          }

          static PyObject *t_NorwegianAnalyzer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, NorwegianAnalyzer::initializeClass, 1)))
              return NULL;
            return t_NorwegianAnalyzer::wrap_Object(NorwegianAnalyzer(((t_NorwegianAnalyzer *) arg)->object.this$));
          }
          static PyObject *t_NorwegianAnalyzer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, NorwegianAnalyzer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_NorwegianAnalyzer_init_(t_NorwegianAnalyzer *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                NorwegianAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "K", ::org::apache::lucene::util::Version::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_))
                {
                  INT_CALL(object = NorwegianAnalyzer(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 2:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                ::org::apache::lucene::analysis::util::CharArraySet a1((jobject) NULL);
                PyTypeObject **p1;
                NorwegianAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "KK", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1, &p1, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_))
                {
                  INT_CALL(object = NorwegianAnalyzer(a0, a1));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 3:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                ::org::apache::lucene::analysis::util::CharArraySet a1((jobject) NULL);
                PyTypeObject **p1;
                ::org::apache::lucene::analysis::util::CharArraySet a2((jobject) NULL);
                PyTypeObject **p2;
                NorwegianAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "KKK", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1, &p1, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_, &a2, &p2, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_))
                {
                  INT_CALL(object = NorwegianAnalyzer(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_NorwegianAnalyzer_getDefaultStopSet(PyTypeObject *type)
          {
            ::org::apache::lucene::analysis::util::CharArraySet result((jobject) NULL);
            OBJ_CALL(result = ::org::apache::lucene::analysis::no::NorwegianAnalyzer::getDefaultStopSet());
            return ::org::apache::lucene::analysis::util::t_CharArraySet::wrap_Object(result);
          }

          static PyObject *t_NorwegianAnalyzer_get__defaultStopSet(t_NorwegianAnalyzer *self, void *data)
          {
            ::org::apache::lucene::analysis::util::CharArraySet value((jobject) NULL);
            OBJ_CALL(value = self->object.getDefaultStopSet());
            return ::org::apache::lucene::analysis::util::t_CharArraySet::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "java/io/Reader.h"
#include "java/io/Closeable.h"
#include "java/io/IOException.h"
#include "java/lang/Readable.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace java {
  namespace io {

    ::java::lang::Class *Reader::class$ = NULL;
    jmethodID *Reader::mids$ = NULL;
    bool Reader::live$ = false;

    jclass Reader::initializeClass(bool getOnly)
    {
      if (getOnly)
        return (jclass) (live$ ? class$->this$ : NULL);
      if (class$ == NULL)
      {
        jclass cls = (jclass) env->findClass("java/io/Reader");

        mids$ = new jmethodID[max_mid];
        mids$[mid_close_54c6a166] = env->getMethodID(cls, "close", "()V");
        mids$[mid_mark_39c7bd3c] = env->getMethodID(cls, "mark", "(I)V");
        mids$[mid_markSupported_54c6a16a] = env->getMethodID(cls, "markSupported", "()Z");
        mids$[mid_read_54c6a179] = env->getMethodID(cls, "read", "()I");
        mids$[mid_read_700e23c9] = env->getMethodID(cls, "read", "([C)I");
        mids$[mid_read_6f0bb349] = env->getMethodID(cls, "read", "([CII)I");
        mids$[mid_ready_54c6a16a] = env->getMethodID(cls, "ready", "()Z");
        mids$[mid_reset_54c6a166] = env->getMethodID(cls, "reset", "()V");
        mids$[mid_skip_0ee6df33] = env->getMethodID(cls, "skip", "(J)J");

        class$ = (::java::lang::Class *) new JObject(cls);
        live$ = true;
      }
      return (jclass) class$->this$;
    }

    void Reader::close() const
    {
      env->callVoidMethod(this$, mids$[mid_close_54c6a166]);
    }

    void Reader::mark(jint a0) const
    {
      env->callVoidMethod(this$, mids$[mid_mark_39c7bd3c], a0);
    }

    jboolean Reader::markSupported() const
    {
      return env->callBooleanMethod(this$, mids$[mid_markSupported_54c6a16a]);
    }

    jint Reader::read() const
    {
      return env->callIntMethod(this$, mids$[mid_read_54c6a179]);
    }

    jint Reader::read(const JArray< jchar > & a0) const
    {
      return env->callIntMethod(this$, mids$[mid_read_700e23c9], a0.this$);
    }

    jint Reader::read(const JArray< jchar > & a0, jint a1, jint a2) const
    {
      return env->callIntMethod(this$, mids$[mid_read_6f0bb349], a0.this$, a1, a2);
    }

    jboolean Reader::ready() const
    {
      return env->callBooleanMethod(this$, mids$[mid_ready_54c6a16a]);
    }

    void Reader::reset() const
    {
      env->callVoidMethod(this$, mids$[mid_reset_54c6a166]);
    }

    jlong Reader::skip(jlong a0) const
    {
      return env->callLongMethod(this$, mids$[mid_skip_0ee6df33], a0);
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace java {
  namespace io {
    static PyObject *t_Reader_cast_(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Reader_instance_(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Reader_close(t_Reader *self);
    static PyObject *t_Reader_mark(t_Reader *self, PyObject *arg);
    static PyObject *t_Reader_markSupported(t_Reader *self);
    static PyObject *t_Reader_read(t_Reader *self, PyObject *args);
    static PyObject *t_Reader_ready(t_Reader *self);
    static PyObject *t_Reader_reset(t_Reader *self);
    static PyObject *t_Reader_skip(t_Reader *self, PyObject *arg);

    static PyMethodDef t_Reader__methods_[] = {
      DECLARE_METHOD(t_Reader, cast_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Reader, instance_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Reader, close, METH_NOARGS),
      DECLARE_METHOD(t_Reader, mark, METH_O),
      DECLARE_METHOD(t_Reader, markSupported, METH_NOARGS),
      DECLARE_METHOD(t_Reader, read, METH_VARARGS),
      DECLARE_METHOD(t_Reader, ready, METH_NOARGS),
      DECLARE_METHOD(t_Reader, reset, METH_NOARGS),
      DECLARE_METHOD(t_Reader, skip, METH_O),
      { NULL, NULL, 0, NULL }
    };

    DECLARE_TYPE(Reader, t_Reader, ::java::lang::Object, Reader, abstract_init, 0, 0, 0, 0, 0);

    void t_Reader::install(PyObject *module)
    {
      installType(&PY_TYPE(Reader), module, "Reader", 0);
    }

    void t_Reader::initialize(PyObject *module)
    {
      PyDict_SetItemString(PY_TYPE(Reader).tp_dict, "class_", make_descriptor(Reader::initializeClass, 1));
      PyDict_SetItemString(PY_TYPE(Reader).tp_dict, "wrapfn_", make_descriptor(t_Reader::wrap_jobject));
      PyDict_SetItemString(PY_TYPE(Reader).tp_dict, "boxfn_", make_descriptor(boxObject));
    }

    static PyObject *t_Reader_cast_(PyTypeObject *type, PyObject *arg)
    {
      if (!(arg = castCheck(arg, Reader::initializeClass, 1)))
        return NULL;
      return t_Reader::wrap_Object(Reader(((t_Reader *) arg)->object.this$));
    }
    static PyObject *t_Reader_instance_(PyTypeObject *type, PyObject *arg)
    {
      if (!castCheck(arg, Reader::initializeClass, 0))
        Py_RETURN_FALSE;
      Py_RETURN_TRUE;
    }

    static PyObject *t_Reader_close(t_Reader *self)
    {
      OBJ_CALL(self->object.close());
      Py_RETURN_NONE;
    }

    static PyObject *t_Reader_mark(t_Reader *self, PyObject *arg)
    {
      jint a0;

      if (!parseArg(arg, "I", &a0))
      {
        OBJ_CALL(self->object.mark(a0));
        Py_RETURN_NONE;
      }

      PyErr_SetArgsError((PyObject *) self, "mark", arg);
      return NULL;
    }

    static PyObject *t_Reader_markSupported(t_Reader *self)
    {
      jboolean result;
      OBJ_CALL(result = self->object.markSupported());
      Py_RETURN_BOOL(result);
    }

    static PyObject *t_Reader_read(t_Reader *self, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 0:
        {
          jint result;
          OBJ_CALL(result = self->object.read());
          return PyInt_FromLong((long) result);
        }
        break;
       case 1:
        {
          JArray< jchar > a0((jobject) NULL);
          jint result;

          if (!parseArgs(args, "[C", &a0))
          {
            OBJ_CALL(result = self->object.read(a0));
            return PyInt_FromLong((long) result);
          }
        }
        break;
       case 3:
        {
          JArray< jchar > a0((jobject) NULL);
          jint a1;
          jint a2;
          jint result;

          if (!parseArgs(args, "[CII", &a0, &a1, &a2))
          {
            OBJ_CALL(result = self->object.read(a0, a1, a2));
            return PyInt_FromLong((long) result);
          }
        }
      }

      PyErr_SetArgsError((PyObject *) self, "read", args);
      return NULL;
    }

    static PyObject *t_Reader_ready(t_Reader *self)
    {
      jboolean result;
      OBJ_CALL(result = self->object.ready());
      Py_RETURN_BOOL(result);
    }

    static PyObject *t_Reader_reset(t_Reader *self)
    {
      OBJ_CALL(self->object.reset());
      Py_RETURN_NONE;
    }

    static PyObject *t_Reader_skip(t_Reader *self, PyObject *arg)
    {
      jlong a0;
      jlong result;

      if (!parseArg(arg, "J", &a0))
      {
        OBJ_CALL(result = self->object.skip(a0));
        return PyLong_FromLongLong((PY_LONG_LONG) result);
      }

      PyErr_SetArgsError((PyObject *) self, "skip", arg);
      return NULL;
    }
  }
}
