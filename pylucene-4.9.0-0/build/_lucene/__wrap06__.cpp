#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/en/EnglishMinimalStemmer.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace en {

          ::java::lang::Class *EnglishMinimalStemmer::class$ = NULL;
          jmethodID *EnglishMinimalStemmer::mids$ = NULL;
          bool EnglishMinimalStemmer::live$ = false;

          jclass EnglishMinimalStemmer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/en/EnglishMinimalStemmer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_stem_ec6430eb] = env->getMethodID(cls, "stem", "([CI)I");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          EnglishMinimalStemmer::EnglishMinimalStemmer() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          jint EnglishMinimalStemmer::stem(const JArray< jchar > & a0, jint a1) const
          {
            return env->callIntMethod(this$, mids$[mid_stem_ec6430eb], a0.this$, a1);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace en {
          static PyObject *t_EnglishMinimalStemmer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_EnglishMinimalStemmer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_EnglishMinimalStemmer_init_(t_EnglishMinimalStemmer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_EnglishMinimalStemmer_stem(t_EnglishMinimalStemmer *self, PyObject *args);

          static PyMethodDef t_EnglishMinimalStemmer__methods_[] = {
            DECLARE_METHOD(t_EnglishMinimalStemmer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_EnglishMinimalStemmer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_EnglishMinimalStemmer, stem, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(EnglishMinimalStemmer, t_EnglishMinimalStemmer, ::java::lang::Object, EnglishMinimalStemmer, t_EnglishMinimalStemmer_init_, 0, 0, 0, 0, 0);

          void t_EnglishMinimalStemmer::install(PyObject *module)
          {
            installType(&PY_TYPE(EnglishMinimalStemmer), module, "EnglishMinimalStemmer", 0);
          }

          void t_EnglishMinimalStemmer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(EnglishMinimalStemmer).tp_dict, "class_", make_descriptor(EnglishMinimalStemmer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(EnglishMinimalStemmer).tp_dict, "wrapfn_", make_descriptor(t_EnglishMinimalStemmer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(EnglishMinimalStemmer).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_EnglishMinimalStemmer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, EnglishMinimalStemmer::initializeClass, 1)))
              return NULL;
            return t_EnglishMinimalStemmer::wrap_Object(EnglishMinimalStemmer(((t_EnglishMinimalStemmer *) arg)->object.this$));
          }
          static PyObject *t_EnglishMinimalStemmer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, EnglishMinimalStemmer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_EnglishMinimalStemmer_init_(t_EnglishMinimalStemmer *self, PyObject *args, PyObject *kwds)
          {
            EnglishMinimalStemmer object((jobject) NULL);

            INT_CALL(object = EnglishMinimalStemmer());
            self->object = object;

            return 0;
          }

          static PyObject *t_EnglishMinimalStemmer_stem(t_EnglishMinimalStemmer *self, PyObject *args)
          {
            JArray< jchar > a0((jobject) NULL);
            jint a1;
            jint result;

            if (!parseArgs(args, "[CI", &a0, &a1))
            {
              OBJ_CALL(result = self->object.stem(a0, a1));
              return PyInt_FromLong((long) result);
            }

            PyErr_SetArgsError((PyObject *) self, "stem", args);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/ru/RussianLetterTokenizerFactory.h"
#include "org/apache/lucene/util/AttributeFactory.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/analysis/ru/RussianLetterTokenizer.h"
#include "java/util/Map.h"
#include "java/io/Reader.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ru {

          ::java::lang::Class *RussianLetterTokenizerFactory::class$ = NULL;
          jmethodID *RussianLetterTokenizerFactory::mids$ = NULL;
          bool RussianLetterTokenizerFactory::live$ = false;

          jclass RussianLetterTokenizerFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/ru/RussianLetterTokenizerFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4c9e2b1c] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_ef75db74] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/util/AttributeFactory;Ljava/io/Reader;)Lorg/apache/lucene/analysis/ru/RussianLetterTokenizer;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          RussianLetterTokenizerFactory::RussianLetterTokenizerFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenizerFactory(env->newObject(initializeClass, &mids$, mid_init$_4c9e2b1c, a0.this$)) {}

          ::org::apache::lucene::analysis::ru::RussianLetterTokenizer RussianLetterTokenizerFactory::create(const ::org::apache::lucene::util::AttributeFactory & a0, const ::java::io::Reader & a1) const
          {
            return ::org::apache::lucene::analysis::ru::RussianLetterTokenizer(env->callObjectMethod(this$, mids$[mid_create_ef75db74], a0.this$, a1.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ru {
          static PyObject *t_RussianLetterTokenizerFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_RussianLetterTokenizerFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_RussianLetterTokenizerFactory_init_(t_RussianLetterTokenizerFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_RussianLetterTokenizerFactory_create(t_RussianLetterTokenizerFactory *self, PyObject *args);

          static PyMethodDef t_RussianLetterTokenizerFactory__methods_[] = {
            DECLARE_METHOD(t_RussianLetterTokenizerFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_RussianLetterTokenizerFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_RussianLetterTokenizerFactory, create, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(RussianLetterTokenizerFactory, t_RussianLetterTokenizerFactory, ::org::apache::lucene::analysis::util::TokenizerFactory, RussianLetterTokenizerFactory, t_RussianLetterTokenizerFactory_init_, 0, 0, 0, 0, 0);

          void t_RussianLetterTokenizerFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(RussianLetterTokenizerFactory), module, "RussianLetterTokenizerFactory", 0);
          }

          void t_RussianLetterTokenizerFactory::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(RussianLetterTokenizerFactory).tp_dict, "class_", make_descriptor(RussianLetterTokenizerFactory::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(RussianLetterTokenizerFactory).tp_dict, "wrapfn_", make_descriptor(t_RussianLetterTokenizerFactory::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(RussianLetterTokenizerFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_RussianLetterTokenizerFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, RussianLetterTokenizerFactory::initializeClass, 1)))
              return NULL;
            return t_RussianLetterTokenizerFactory::wrap_Object(RussianLetterTokenizerFactory(((t_RussianLetterTokenizerFactory *) arg)->object.this$));
          }
          static PyObject *t_RussianLetterTokenizerFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, RussianLetterTokenizerFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_RussianLetterTokenizerFactory_init_(t_RussianLetterTokenizerFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            RussianLetterTokenizerFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = RussianLetterTokenizerFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_RussianLetterTokenizerFactory_create(t_RussianLetterTokenizerFactory *self, PyObject *args)
          {
            ::org::apache::lucene::util::AttributeFactory a0((jobject) NULL);
            ::java::io::Reader a1((jobject) NULL);
            ::org::apache::lucene::analysis::ru::RussianLetterTokenizer result((jobject) NULL);

            if (!parseArgs(args, "kk", ::org::apache::lucene::util::AttributeFactory::initializeClass, ::java::io::Reader::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.create(a0, a1));
              return ::org::apache::lucene::analysis::ru::t_RussianLetterTokenizer::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(RussianLetterTokenizerFactory), (PyObject *) self, "create", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/tartarus/snowball/ext/PorterStemmer.h"
#include "java/lang/Object.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace tartarus {
    namespace snowball {
      namespace ext {

        ::java::lang::Class *PorterStemmer::class$ = NULL;
        jmethodID *PorterStemmer::mids$ = NULL;
        bool PorterStemmer::live$ = false;

        jclass PorterStemmer::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/tartarus/snowball/ext/PorterStemmer");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
            mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
            mids$[mid_stem_54c6a16a] = env->getMethodID(cls, "stem", "()Z");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        PorterStemmer::PorterStemmer() : ::org::tartarus::snowball::SnowballProgram(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        jboolean PorterStemmer::equals(const ::java::lang::Object & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
        }

        jint PorterStemmer::hashCode() const
        {
          return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
        }

        jboolean PorterStemmer::stem() const
        {
          return env->callBooleanMethod(this$, mids$[mid_stem_54c6a16a]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace tartarus {
    namespace snowball {
      namespace ext {
        static PyObject *t_PorterStemmer_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_PorterStemmer_instance_(PyTypeObject *type, PyObject *arg);
        static int t_PorterStemmer_init_(t_PorterStemmer *self, PyObject *args, PyObject *kwds);
        static PyObject *t_PorterStemmer_equals(t_PorterStemmer *self, PyObject *args);
        static PyObject *t_PorterStemmer_hashCode(t_PorterStemmer *self, PyObject *args);
        static PyObject *t_PorterStemmer_stem(t_PorterStemmer *self, PyObject *args);

        static PyMethodDef t_PorterStemmer__methods_[] = {
          DECLARE_METHOD(t_PorterStemmer, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PorterStemmer, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PorterStemmer, equals, METH_VARARGS),
          DECLARE_METHOD(t_PorterStemmer, hashCode, METH_VARARGS),
          DECLARE_METHOD(t_PorterStemmer, stem, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(PorterStemmer, t_PorterStemmer, ::org::tartarus::snowball::SnowballProgram, PorterStemmer, t_PorterStemmer_init_, 0, 0, 0, 0, 0);

        void t_PorterStemmer::install(PyObject *module)
        {
          installType(&PY_TYPE(PorterStemmer), module, "PorterStemmer", 0);
        }

        void t_PorterStemmer::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(PorterStemmer).tp_dict, "class_", make_descriptor(PorterStemmer::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(PorterStemmer).tp_dict, "wrapfn_", make_descriptor(t_PorterStemmer::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(PorterStemmer).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_PorterStemmer_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, PorterStemmer::initializeClass, 1)))
            return NULL;
          return t_PorterStemmer::wrap_Object(PorterStemmer(((t_PorterStemmer *) arg)->object.this$));
        }
        static PyObject *t_PorterStemmer_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, PorterStemmer::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_PorterStemmer_init_(t_PorterStemmer *self, PyObject *args, PyObject *kwds)
        {
          PorterStemmer object((jobject) NULL);

          INT_CALL(object = PorterStemmer());
          self->object = object;

          return 0;
        }

        static PyObject *t_PorterStemmer_equals(t_PorterStemmer *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.equals(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(PorterStemmer), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_PorterStemmer_hashCode(t_PorterStemmer *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hashCode());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(PorterStemmer), (PyObject *) self, "hashCode", args, 2);
        }

        static PyObject *t_PorterStemmer_stem(t_PorterStemmer *self, PyObject *args)
        {
          jboolean result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.stem());
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(PorterStemmer), (PyObject *) self, "stem", args, 2);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/FieldComparator$DoubleComparator.h"
#include "org/apache/lucene/search/FieldCache$Parser.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/search/FieldComparator.h"
#include "java/lang/Double.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *FieldComparator$DoubleComparator::class$ = NULL;
        jmethodID *FieldComparator$DoubleComparator::mids$ = NULL;
        bool FieldComparator$DoubleComparator::live$ = false;

        jclass FieldComparator$DoubleComparator::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/FieldComparator$DoubleComparator");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_bf59efcc] = env->getMethodID(cls, "<init>", "(ILjava/lang/String;Lorg/apache/lucene/search/FieldCache$Parser;Ljava/lang/Double;)V");
            mids$[mid_compare_d8d154b9] = env->getMethodID(cls, "compare", "(II)I");
            mids$[mid_compareBottom_39c7bd23] = env->getMethodID(cls, "compareBottom", "(I)I");
            mids$[mid_compareTop_39c7bd23] = env->getMethodID(cls, "compareTop", "(I)I");
            mids$[mid_copy_d8d154a6] = env->getMethodID(cls, "copy", "(II)V");
            mids$[mid_setBottom_39c7bd3c] = env->getMethodID(cls, "setBottom", "(I)V");
            mids$[mid_setNextReader_6329aed7] = env->getMethodID(cls, "setNextReader", "(Lorg/apache/lucene/index/AtomicReaderContext;)Lorg/apache/lucene/search/FieldComparator;");
            mids$[mid_setTopValue_8baed06c] = env->getMethodID(cls, "setTopValue", "(Ljava/lang/Double;)V");
            mids$[mid_value_a0bf0c9f] = env->getMethodID(cls, "value", "(I)Ljava/lang/Double;");
            mids$[mid_getDoubleValues_9f6b3702] = env->getMethodID(cls, "getDoubleValues", "(Lorg/apache/lucene/index/AtomicReaderContext;Ljava/lang/String;)Lorg/apache/lucene/search/FieldCache$Doubles;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        FieldComparator$DoubleComparator::FieldComparator$DoubleComparator(jint a0, const ::java::lang::String & a1, const ::org::apache::lucene::search::FieldCache$Parser & a2, const ::java::lang::Double & a3) : ::org::apache::lucene::search::FieldComparator$NumericComparator(env->newObject(initializeClass, &mids$, mid_init$_bf59efcc, a0, a1.this$, a2.this$, a3.this$)) {}

        jint FieldComparator$DoubleComparator::compare(jint a0, jint a1) const
        {
          return env->callIntMethod(this$, mids$[mid_compare_d8d154b9], a0, a1);
        }

        jint FieldComparator$DoubleComparator::compareBottom(jint a0) const
        {
          return env->callIntMethod(this$, mids$[mid_compareBottom_39c7bd23], a0);
        }

        jint FieldComparator$DoubleComparator::compareTop(jint a0) const
        {
          return env->callIntMethod(this$, mids$[mid_compareTop_39c7bd23], a0);
        }

        void FieldComparator$DoubleComparator::copy(jint a0, jint a1) const
        {
          env->callVoidMethod(this$, mids$[mid_copy_d8d154a6], a0, a1);
        }

        void FieldComparator$DoubleComparator::setBottom(jint a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setBottom_39c7bd3c], a0);
        }

        ::org::apache::lucene::search::FieldComparator FieldComparator$DoubleComparator::setNextReader(const ::org::apache::lucene::index::AtomicReaderContext & a0) const
        {
          return ::org::apache::lucene::search::FieldComparator(env->callObjectMethod(this$, mids$[mid_setNextReader_6329aed7], a0.this$));
        }

        void FieldComparator$DoubleComparator::setTopValue(const ::java::lang::Double & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setTopValue_8baed06c], a0.this$);
        }

        ::java::lang::Double FieldComparator$DoubleComparator::value(jint a0) const
        {
          return ::java::lang::Double(env->callObjectMethod(this$, mids$[mid_value_a0bf0c9f], a0));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_FieldComparator$DoubleComparator_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FieldComparator$DoubleComparator_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FieldComparator$DoubleComparator_of_(t_FieldComparator$DoubleComparator *self, PyObject *args);
        static int t_FieldComparator$DoubleComparator_init_(t_FieldComparator$DoubleComparator *self, PyObject *args, PyObject *kwds);
        static PyObject *t_FieldComparator$DoubleComparator_compare(t_FieldComparator$DoubleComparator *self, PyObject *args);
        static PyObject *t_FieldComparator$DoubleComparator_compareBottom(t_FieldComparator$DoubleComparator *self, PyObject *args);
        static PyObject *t_FieldComparator$DoubleComparator_compareTop(t_FieldComparator$DoubleComparator *self, PyObject *args);
        static PyObject *t_FieldComparator$DoubleComparator_copy(t_FieldComparator$DoubleComparator *self, PyObject *args);
        static PyObject *t_FieldComparator$DoubleComparator_setBottom(t_FieldComparator$DoubleComparator *self, PyObject *args);
        static PyObject *t_FieldComparator$DoubleComparator_setNextReader(t_FieldComparator$DoubleComparator *self, PyObject *args);
        static PyObject *t_FieldComparator$DoubleComparator_setTopValue(t_FieldComparator$DoubleComparator *self, PyObject *args);
        static PyObject *t_FieldComparator$DoubleComparator_value(t_FieldComparator$DoubleComparator *self, PyObject *args);
        static int t_FieldComparator$DoubleComparator_set__bottom(t_FieldComparator$DoubleComparator *self, PyObject *arg, void *data);
        static int t_FieldComparator$DoubleComparator_set__nextReader(t_FieldComparator$DoubleComparator *self, PyObject *arg, void *data);
        static int t_FieldComparator$DoubleComparator_set__topValue(t_FieldComparator$DoubleComparator *self, PyObject *arg, void *data);
        static PyObject *t_FieldComparator$DoubleComparator_get__parameters_(t_FieldComparator$DoubleComparator *self, void *data);
        static PyGetSetDef t_FieldComparator$DoubleComparator__fields_[] = {
          DECLARE_SET_FIELD(t_FieldComparator$DoubleComparator, bottom),
          DECLARE_SET_FIELD(t_FieldComparator$DoubleComparator, nextReader),
          DECLARE_SET_FIELD(t_FieldComparator$DoubleComparator, topValue),
          DECLARE_GET_FIELD(t_FieldComparator$DoubleComparator, parameters_),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_FieldComparator$DoubleComparator__methods_[] = {
          DECLARE_METHOD(t_FieldComparator$DoubleComparator, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FieldComparator$DoubleComparator, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FieldComparator$DoubleComparator, of_, METH_VARARGS),
          DECLARE_METHOD(t_FieldComparator$DoubleComparator, compare, METH_VARARGS),
          DECLARE_METHOD(t_FieldComparator$DoubleComparator, compareBottom, METH_VARARGS),
          DECLARE_METHOD(t_FieldComparator$DoubleComparator, compareTop, METH_VARARGS),
          DECLARE_METHOD(t_FieldComparator$DoubleComparator, copy, METH_VARARGS),
          DECLARE_METHOD(t_FieldComparator$DoubleComparator, setBottom, METH_VARARGS),
          DECLARE_METHOD(t_FieldComparator$DoubleComparator, setNextReader, METH_VARARGS),
          DECLARE_METHOD(t_FieldComparator$DoubleComparator, setTopValue, METH_VARARGS),
          DECLARE_METHOD(t_FieldComparator$DoubleComparator, value, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(FieldComparator$DoubleComparator, t_FieldComparator$DoubleComparator, ::org::apache::lucene::search::FieldComparator$NumericComparator, FieldComparator$DoubleComparator, t_FieldComparator$DoubleComparator_init_, 0, 0, t_FieldComparator$DoubleComparator__fields_, 0, 0);
        PyObject *t_FieldComparator$DoubleComparator::wrap_Object(const FieldComparator$DoubleComparator& object, PyTypeObject *p0)
        {
          PyObject *obj = t_FieldComparator$DoubleComparator::wrap_Object(object);
          if (obj != NULL && obj != Py_None)
          {
            t_FieldComparator$DoubleComparator *self = (t_FieldComparator$DoubleComparator *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        PyObject *t_FieldComparator$DoubleComparator::wrap_jobject(const jobject& object, PyTypeObject *p0)
        {
          PyObject *obj = t_FieldComparator$DoubleComparator::wrap_jobject(object);
          if (obj != NULL && obj != Py_None)
          {
            t_FieldComparator$DoubleComparator *self = (t_FieldComparator$DoubleComparator *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        void t_FieldComparator$DoubleComparator::install(PyObject *module)
        {
          installType(&PY_TYPE(FieldComparator$DoubleComparator), module, "FieldComparator$DoubleComparator", 0);
        }

        void t_FieldComparator$DoubleComparator::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(FieldComparator$DoubleComparator).tp_dict, "class_", make_descriptor(FieldComparator$DoubleComparator::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(FieldComparator$DoubleComparator).tp_dict, "wrapfn_", make_descriptor(t_FieldComparator$DoubleComparator::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(FieldComparator$DoubleComparator).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_FieldComparator$DoubleComparator_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, FieldComparator$DoubleComparator::initializeClass, 1)))
            return NULL;
          return t_FieldComparator$DoubleComparator::wrap_Object(FieldComparator$DoubleComparator(((t_FieldComparator$DoubleComparator *) arg)->object.this$));
        }
        static PyObject *t_FieldComparator$DoubleComparator_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, FieldComparator$DoubleComparator::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_FieldComparator$DoubleComparator_of_(t_FieldComparator$DoubleComparator *self, PyObject *args)
        {
          if (!parseArg(args, "T", 1, &(self->parameters)))
            Py_RETURN_SELF;
          return PyErr_SetArgsError((PyObject *) self, "of_", args);
        }

        static int t_FieldComparator$DoubleComparator_init_(t_FieldComparator$DoubleComparator *self, PyObject *args, PyObject *kwds)
        {
          jint a0;
          ::java::lang::String a1((jobject) NULL);
          ::org::apache::lucene::search::FieldCache$Parser a2((jobject) NULL);
          ::java::lang::Double a3((jobject) NULL);
          FieldComparator$DoubleComparator object((jobject) NULL);

          if (!parseArgs(args, "IskO", ::org::apache::lucene::search::FieldCache$Parser::initializeClass, &::java::lang::PY_TYPE(Double), &a0, &a1, &a2, &a3))
          {
            INT_CALL(object = FieldComparator$DoubleComparator(a0, a1, a2, a3));
            self->object = object;
            self->parameters[0] = &::java::lang::PY_TYPE(Double);
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_FieldComparator$DoubleComparator_compare(t_FieldComparator$DoubleComparator *self, PyObject *args)
        {
          jint a0;
          jint a1;
          jint result;

          if (!parseArgs(args, "II", &a0, &a1))
          {
            OBJ_CALL(result = self->object.compare(a0, a1));
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(FieldComparator$DoubleComparator), (PyObject *) self, "compare", args, 2);
        }

        static PyObject *t_FieldComparator$DoubleComparator_compareBottom(t_FieldComparator$DoubleComparator *self, PyObject *args)
        {
          jint a0;
          jint result;

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(result = self->object.compareBottom(a0));
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(FieldComparator$DoubleComparator), (PyObject *) self, "compareBottom", args, 2);
        }

        static PyObject *t_FieldComparator$DoubleComparator_compareTop(t_FieldComparator$DoubleComparator *self, PyObject *args)
        {
          jint a0;
          jint result;

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(result = self->object.compareTop(a0));
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(FieldComparator$DoubleComparator), (PyObject *) self, "compareTop", args, 2);
        }

        static PyObject *t_FieldComparator$DoubleComparator_copy(t_FieldComparator$DoubleComparator *self, PyObject *args)
        {
          jint a0;
          jint a1;

          if (!parseArgs(args, "II", &a0, &a1))
          {
            OBJ_CALL(self->object.copy(a0, a1));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(FieldComparator$DoubleComparator), (PyObject *) self, "copy", args, 2);
        }

        static PyObject *t_FieldComparator$DoubleComparator_setBottom(t_FieldComparator$DoubleComparator *self, PyObject *args)
        {
          jint a0;

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(self->object.setBottom(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(FieldComparator$DoubleComparator), (PyObject *) self, "setBottom", args, 2);
        }

        static PyObject *t_FieldComparator$DoubleComparator_setNextReader(t_FieldComparator$DoubleComparator *self, PyObject *args)
        {
          ::org::apache::lucene::index::AtomicReaderContext a0((jobject) NULL);
          ::org::apache::lucene::search::FieldComparator result((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.setNextReader(a0));
            return ::org::apache::lucene::search::t_FieldComparator::wrap_Object(result, &::java::lang::PY_TYPE(Double));
          }

          return callSuper(&PY_TYPE(FieldComparator$DoubleComparator), (PyObject *) self, "setNextReader", args, 2);
        }

        static PyObject *t_FieldComparator$DoubleComparator_setTopValue(t_FieldComparator$DoubleComparator *self, PyObject *args)
        {
          ::java::lang::Double a0((jobject) NULL);

          if (!parseArgs(args, "O", &::java::lang::PY_TYPE(Double), &a0))
          {
            OBJ_CALL(self->object.setTopValue(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(FieldComparator$DoubleComparator), (PyObject *) self, "setTopValue", args, 2);
        }

        static PyObject *t_FieldComparator$DoubleComparator_value(t_FieldComparator$DoubleComparator *self, PyObject *args)
        {
          jint a0;
          ::java::lang::Double result((jobject) NULL);

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(result = self->object.value(a0));
            return ::java::lang::t_Double::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(FieldComparator$DoubleComparator), (PyObject *) self, "value", args, 2);
        }
        static PyObject *t_FieldComparator$DoubleComparator_get__parameters_(t_FieldComparator$DoubleComparator *self, void *data)
        {
          return typeParameters(self->parameters, sizeof(self->parameters));
        }

        static int t_FieldComparator$DoubleComparator_set__bottom(t_FieldComparator$DoubleComparator *self, PyObject *arg, void *data)
        {
          {
            jint value;
            if (!parseArg(arg, "I", &value))
            {
              INT_CALL(self->object.setBottom(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "bottom", arg);
          return -1;
        }

        static int t_FieldComparator$DoubleComparator_set__nextReader(t_FieldComparator$DoubleComparator *self, PyObject *arg, void *data)
        {
          {
            ::org::apache::lucene::index::AtomicReaderContext value((jobject) NULL);
            if (!parseArg(arg, "k", ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &value))
            {
              INT_CALL(self->object.setNextReader(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "nextReader", arg);
          return -1;
        }

        static int t_FieldComparator$DoubleComparator_set__topValue(t_FieldComparator$DoubleComparator *self, PyObject *arg, void *data)
        {
          {
            ::java::lang::Double value((jobject) NULL);
            if (!parseArg(arg, "O", &::java::lang::PY_TYPE(Double), &value))
            {
              INT_CALL(self->object.setTopValue(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "topValue", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/xml/builders/TermsQueryBuilder.h"
#include "org/apache/lucene/analysis/Analyzer.h"
#include "org/apache/lucene/queryparser/xml/QueryBuilder.h"
#include "org/apache/lucene/search/Query.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace xml {
          namespace builders {

            ::java::lang::Class *TermsQueryBuilder::class$ = NULL;
            jmethodID *TermsQueryBuilder::mids$ = NULL;
            bool TermsQueryBuilder::live$ = false;

            jclass TermsQueryBuilder::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/xml/builders/TermsQueryBuilder");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_31619410] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/Analyzer;)V");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            TermsQueryBuilder::TermsQueryBuilder(const ::org::apache::lucene::analysis::Analyzer & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_31619410, a0.this$)) {}
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace xml {
          namespace builders {
            static PyObject *t_TermsQueryBuilder_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_TermsQueryBuilder_instance_(PyTypeObject *type, PyObject *arg);
            static int t_TermsQueryBuilder_init_(t_TermsQueryBuilder *self, PyObject *args, PyObject *kwds);

            static PyMethodDef t_TermsQueryBuilder__methods_[] = {
              DECLARE_METHOD(t_TermsQueryBuilder, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_TermsQueryBuilder, instance_, METH_O | METH_CLASS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(TermsQueryBuilder, t_TermsQueryBuilder, ::java::lang::Object, TermsQueryBuilder, t_TermsQueryBuilder_init_, 0, 0, 0, 0, 0);

            void t_TermsQueryBuilder::install(PyObject *module)
            {
              installType(&PY_TYPE(TermsQueryBuilder), module, "TermsQueryBuilder", 0);
            }

            void t_TermsQueryBuilder::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(TermsQueryBuilder).tp_dict, "class_", make_descriptor(TermsQueryBuilder::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(TermsQueryBuilder).tp_dict, "wrapfn_", make_descriptor(t_TermsQueryBuilder::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(TermsQueryBuilder).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_TermsQueryBuilder_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, TermsQueryBuilder::initializeClass, 1)))
                return NULL;
              return t_TermsQueryBuilder::wrap_Object(TermsQueryBuilder(((t_TermsQueryBuilder *) arg)->object.this$));
            }
            static PyObject *t_TermsQueryBuilder_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, TermsQueryBuilder::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_TermsQueryBuilder_init_(t_TermsQueryBuilder *self, PyObject *args, PyObject *kwds)
            {
              ::org::apache::lucene::analysis::Analyzer a0((jobject) NULL);
              TermsQueryBuilder object((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::analysis::Analyzer::initializeClass, &a0))
              {
                INT_CALL(object = TermsQueryBuilder(a0));
                self->object = object;
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/vectorhighlight/FieldQuery$QueryPhraseMap.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/search/vectorhighlight/FieldTermStack$TermInfo.h"
#include "java/lang/String.h"
#include "org/apache/lucene/search/vectorhighlight/FieldQuery.h"
#include "java/util/List.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace vectorhighlight {

          ::java::lang::Class *FieldQuery$QueryPhraseMap::class$ = NULL;
          jmethodID *FieldQuery$QueryPhraseMap::mids$ = NULL;
          bool FieldQuery$QueryPhraseMap::live$ = false;

          jclass FieldQuery$QueryPhraseMap::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/vectorhighlight/FieldQuery$QueryPhraseMap");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_d4060136] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/vectorhighlight/FieldQuery;)V");
              mids$[mid_getBoost_54c6a176] = env->getMethodID(cls, "getBoost", "()F");
              mids$[mid_getSlop_54c6a179] = env->getMethodID(cls, "getSlop", "()I");
              mids$[mid_getTermMap_1ad656ab] = env->getMethodID(cls, "getTermMap", "(Ljava/lang/String;)Lorg/apache/lucene/search/vectorhighlight/FieldQuery$QueryPhraseMap;");
              mids$[mid_getTermOrPhraseNumber_54c6a179] = env->getMethodID(cls, "getTermOrPhraseNumber", "()I");
              mids$[mid_isTerminal_54c6a16a] = env->getMethodID(cls, "isTerminal", "()Z");
              mids$[mid_isValidTermOrPhrase_1fde8fcf] = env->getMethodID(cls, "isValidTermOrPhrase", "(Ljava/util/List;)Z");
              mids$[mid_searchPhrase_94f40592] = env->getMethodID(cls, "searchPhrase", "(Ljava/util/List;)Lorg/apache/lucene/search/vectorhighlight/FieldQuery$QueryPhraseMap;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          FieldQuery$QueryPhraseMap::FieldQuery$QueryPhraseMap(const ::org::apache::lucene::search::vectorhighlight::FieldQuery & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_d4060136, a0.this$)) {}

          jfloat FieldQuery$QueryPhraseMap::getBoost() const
          {
            return env->callFloatMethod(this$, mids$[mid_getBoost_54c6a176]);
          }

          jint FieldQuery$QueryPhraseMap::getSlop() const
          {
            return env->callIntMethod(this$, mids$[mid_getSlop_54c6a179]);
          }

          FieldQuery$QueryPhraseMap FieldQuery$QueryPhraseMap::getTermMap(const ::java::lang::String & a0) const
          {
            return FieldQuery$QueryPhraseMap(env->callObjectMethod(this$, mids$[mid_getTermMap_1ad656ab], a0.this$));
          }

          jint FieldQuery$QueryPhraseMap::getTermOrPhraseNumber() const
          {
            return env->callIntMethod(this$, mids$[mid_getTermOrPhraseNumber_54c6a179]);
          }

          jboolean FieldQuery$QueryPhraseMap::isTerminal() const
          {
            return env->callBooleanMethod(this$, mids$[mid_isTerminal_54c6a16a]);
          }

          jboolean FieldQuery$QueryPhraseMap::isValidTermOrPhrase(const ::java::util::List & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_isValidTermOrPhrase_1fde8fcf], a0.this$);
          }

          FieldQuery$QueryPhraseMap FieldQuery$QueryPhraseMap::searchPhrase(const ::java::util::List & a0) const
          {
            return FieldQuery$QueryPhraseMap(env->callObjectMethod(this$, mids$[mid_searchPhrase_94f40592], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace vectorhighlight {
          static PyObject *t_FieldQuery$QueryPhraseMap_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_FieldQuery$QueryPhraseMap_instance_(PyTypeObject *type, PyObject *arg);
          static int t_FieldQuery$QueryPhraseMap_init_(t_FieldQuery$QueryPhraseMap *self, PyObject *args, PyObject *kwds);
          static PyObject *t_FieldQuery$QueryPhraseMap_getBoost(t_FieldQuery$QueryPhraseMap *self);
          static PyObject *t_FieldQuery$QueryPhraseMap_getSlop(t_FieldQuery$QueryPhraseMap *self);
          static PyObject *t_FieldQuery$QueryPhraseMap_getTermMap(t_FieldQuery$QueryPhraseMap *self, PyObject *arg);
          static PyObject *t_FieldQuery$QueryPhraseMap_getTermOrPhraseNumber(t_FieldQuery$QueryPhraseMap *self);
          static PyObject *t_FieldQuery$QueryPhraseMap_isTerminal(t_FieldQuery$QueryPhraseMap *self);
          static PyObject *t_FieldQuery$QueryPhraseMap_isValidTermOrPhrase(t_FieldQuery$QueryPhraseMap *self, PyObject *arg);
          static PyObject *t_FieldQuery$QueryPhraseMap_searchPhrase(t_FieldQuery$QueryPhraseMap *self, PyObject *arg);
          static PyObject *t_FieldQuery$QueryPhraseMap_get__boost(t_FieldQuery$QueryPhraseMap *self, void *data);
          static PyObject *t_FieldQuery$QueryPhraseMap_get__slop(t_FieldQuery$QueryPhraseMap *self, void *data);
          static PyObject *t_FieldQuery$QueryPhraseMap_get__termOrPhraseNumber(t_FieldQuery$QueryPhraseMap *self, void *data);
          static PyObject *t_FieldQuery$QueryPhraseMap_get__terminal(t_FieldQuery$QueryPhraseMap *self, void *data);
          static PyGetSetDef t_FieldQuery$QueryPhraseMap__fields_[] = {
            DECLARE_GET_FIELD(t_FieldQuery$QueryPhraseMap, boost),
            DECLARE_GET_FIELD(t_FieldQuery$QueryPhraseMap, slop),
            DECLARE_GET_FIELD(t_FieldQuery$QueryPhraseMap, termOrPhraseNumber),
            DECLARE_GET_FIELD(t_FieldQuery$QueryPhraseMap, terminal),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_FieldQuery$QueryPhraseMap__methods_[] = {
            DECLARE_METHOD(t_FieldQuery$QueryPhraseMap, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FieldQuery$QueryPhraseMap, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FieldQuery$QueryPhraseMap, getBoost, METH_NOARGS),
            DECLARE_METHOD(t_FieldQuery$QueryPhraseMap, getSlop, METH_NOARGS),
            DECLARE_METHOD(t_FieldQuery$QueryPhraseMap, getTermMap, METH_O),
            DECLARE_METHOD(t_FieldQuery$QueryPhraseMap, getTermOrPhraseNumber, METH_NOARGS),
            DECLARE_METHOD(t_FieldQuery$QueryPhraseMap, isTerminal, METH_NOARGS),
            DECLARE_METHOD(t_FieldQuery$QueryPhraseMap, isValidTermOrPhrase, METH_O),
            DECLARE_METHOD(t_FieldQuery$QueryPhraseMap, searchPhrase, METH_O),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(FieldQuery$QueryPhraseMap, t_FieldQuery$QueryPhraseMap, ::java::lang::Object, FieldQuery$QueryPhraseMap, t_FieldQuery$QueryPhraseMap_init_, 0, 0, t_FieldQuery$QueryPhraseMap__fields_, 0, 0);

          void t_FieldQuery$QueryPhraseMap::install(PyObject *module)
          {
            installType(&PY_TYPE(FieldQuery$QueryPhraseMap), module, "FieldQuery$QueryPhraseMap", 0);
          }

          void t_FieldQuery$QueryPhraseMap::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(FieldQuery$QueryPhraseMap).tp_dict, "class_", make_descriptor(FieldQuery$QueryPhraseMap::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(FieldQuery$QueryPhraseMap).tp_dict, "wrapfn_", make_descriptor(t_FieldQuery$QueryPhraseMap::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(FieldQuery$QueryPhraseMap).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_FieldQuery$QueryPhraseMap_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, FieldQuery$QueryPhraseMap::initializeClass, 1)))
              return NULL;
            return t_FieldQuery$QueryPhraseMap::wrap_Object(FieldQuery$QueryPhraseMap(((t_FieldQuery$QueryPhraseMap *) arg)->object.this$));
          }
          static PyObject *t_FieldQuery$QueryPhraseMap_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, FieldQuery$QueryPhraseMap::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_FieldQuery$QueryPhraseMap_init_(t_FieldQuery$QueryPhraseMap *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::search::vectorhighlight::FieldQuery a0((jobject) NULL);
            FieldQuery$QueryPhraseMap object((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::search::vectorhighlight::FieldQuery::initializeClass, &a0))
            {
              INT_CALL(object = FieldQuery$QueryPhraseMap(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_FieldQuery$QueryPhraseMap_getBoost(t_FieldQuery$QueryPhraseMap *self)
          {
            jfloat result;
            OBJ_CALL(result = self->object.getBoost());
            return PyFloat_FromDouble((double) result);
          }

          static PyObject *t_FieldQuery$QueryPhraseMap_getSlop(t_FieldQuery$QueryPhraseMap *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getSlop());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_FieldQuery$QueryPhraseMap_getTermMap(t_FieldQuery$QueryPhraseMap *self, PyObject *arg)
          {
            ::java::lang::String a0((jobject) NULL);
            FieldQuery$QueryPhraseMap result((jobject) NULL);

            if (!parseArg(arg, "s", &a0))
            {
              OBJ_CALL(result = self->object.getTermMap(a0));
              return t_FieldQuery$QueryPhraseMap::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "getTermMap", arg);
            return NULL;
          }

          static PyObject *t_FieldQuery$QueryPhraseMap_getTermOrPhraseNumber(t_FieldQuery$QueryPhraseMap *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getTermOrPhraseNumber());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_FieldQuery$QueryPhraseMap_isTerminal(t_FieldQuery$QueryPhraseMap *self)
          {
            jboolean result;
            OBJ_CALL(result = self->object.isTerminal());
            Py_RETURN_BOOL(result);
          }

          static PyObject *t_FieldQuery$QueryPhraseMap_isValidTermOrPhrase(t_FieldQuery$QueryPhraseMap *self, PyObject *arg)
          {
            ::java::util::List a0((jobject) NULL);
            PyTypeObject **p0;
            jboolean result;

            if (!parseArg(arg, "K", ::java::util::List::initializeClass, &a0, &p0, ::java::util::t_List::parameters_))
            {
              OBJ_CALL(result = self->object.isValidTermOrPhrase(a0));
              Py_RETURN_BOOL(result);
            }

            PyErr_SetArgsError((PyObject *) self, "isValidTermOrPhrase", arg);
            return NULL;
          }

          static PyObject *t_FieldQuery$QueryPhraseMap_searchPhrase(t_FieldQuery$QueryPhraseMap *self, PyObject *arg)
          {
            ::java::util::List a0((jobject) NULL);
            PyTypeObject **p0;
            FieldQuery$QueryPhraseMap result((jobject) NULL);

            if (!parseArg(arg, "K", ::java::util::List::initializeClass, &a0, &p0, ::java::util::t_List::parameters_))
            {
              OBJ_CALL(result = self->object.searchPhrase(a0));
              return t_FieldQuery$QueryPhraseMap::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "searchPhrase", arg);
            return NULL;
          }

          static PyObject *t_FieldQuery$QueryPhraseMap_get__boost(t_FieldQuery$QueryPhraseMap *self, void *data)
          {
            jfloat value;
            OBJ_CALL(value = self->object.getBoost());
            return PyFloat_FromDouble((double) value);
          }

          static PyObject *t_FieldQuery$QueryPhraseMap_get__slop(t_FieldQuery$QueryPhraseMap *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getSlop());
            return PyInt_FromLong((long) value);
          }

          static PyObject *t_FieldQuery$QueryPhraseMap_get__termOrPhraseNumber(t_FieldQuery$QueryPhraseMap *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getTermOrPhraseNumber());
            return PyInt_FromLong((long) value);
          }

          static PyObject *t_FieldQuery$QueryPhraseMap_get__terminal(t_FieldQuery$QueryPhraseMap *self, void *data)
          {
            jboolean value;
            OBJ_CALL(value = self->object.isTerminal());
            Py_RETURN_BOOL(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/IntBlockPool$Allocator.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *IntBlockPool$Allocator::class$ = NULL;
        jmethodID *IntBlockPool$Allocator::mids$ = NULL;
        bool IntBlockPool$Allocator::live$ = false;

        jclass IntBlockPool$Allocator::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/IntBlockPool$Allocator");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_39c7bd3c] = env->getMethodID(cls, "<init>", "(I)V");
            mids$[mid_getIntBlock_dab10e75] = env->getMethodID(cls, "getIntBlock", "()[I");
            mids$[mid_recycleIntBlocks_9f62f13c] = env->getMethodID(cls, "recycleIntBlocks", "([[III)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        IntBlockPool$Allocator::IntBlockPool$Allocator(jint a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_39c7bd3c, a0)) {}

        JArray< jint > IntBlockPool$Allocator::getIntBlock() const
        {
          return JArray< jint >(env->callObjectMethod(this$, mids$[mid_getIntBlock_dab10e75]));
        }

        void IntBlockPool$Allocator::recycleIntBlocks(const JArray< JArray< jint > > & a0, jint a1, jint a2) const
        {
          env->callVoidMethod(this$, mids$[mid_recycleIntBlocks_9f62f13c], a0.this$, a1, a2);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_IntBlockPool$Allocator_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_IntBlockPool$Allocator_instance_(PyTypeObject *type, PyObject *arg);
        static int t_IntBlockPool$Allocator_init_(t_IntBlockPool$Allocator *self, PyObject *args, PyObject *kwds);
        static PyObject *t_IntBlockPool$Allocator_getIntBlock(t_IntBlockPool$Allocator *self);
        static PyObject *t_IntBlockPool$Allocator_recycleIntBlocks(t_IntBlockPool$Allocator *self, PyObject *args);
        static PyObject *t_IntBlockPool$Allocator_get__intBlock(t_IntBlockPool$Allocator *self, void *data);
        static PyGetSetDef t_IntBlockPool$Allocator__fields_[] = {
          DECLARE_GET_FIELD(t_IntBlockPool$Allocator, intBlock),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_IntBlockPool$Allocator__methods_[] = {
          DECLARE_METHOD(t_IntBlockPool$Allocator, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_IntBlockPool$Allocator, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_IntBlockPool$Allocator, getIntBlock, METH_NOARGS),
          DECLARE_METHOD(t_IntBlockPool$Allocator, recycleIntBlocks, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(IntBlockPool$Allocator, t_IntBlockPool$Allocator, ::java::lang::Object, IntBlockPool$Allocator, t_IntBlockPool$Allocator_init_, 0, 0, t_IntBlockPool$Allocator__fields_, 0, 0);

        void t_IntBlockPool$Allocator::install(PyObject *module)
        {
          installType(&PY_TYPE(IntBlockPool$Allocator), module, "IntBlockPool$Allocator", 0);
        }

        void t_IntBlockPool$Allocator::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(IntBlockPool$Allocator).tp_dict, "class_", make_descriptor(IntBlockPool$Allocator::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(IntBlockPool$Allocator).tp_dict, "wrapfn_", make_descriptor(t_IntBlockPool$Allocator::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(IntBlockPool$Allocator).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_IntBlockPool$Allocator_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, IntBlockPool$Allocator::initializeClass, 1)))
            return NULL;
          return t_IntBlockPool$Allocator::wrap_Object(IntBlockPool$Allocator(((t_IntBlockPool$Allocator *) arg)->object.this$));
        }
        static PyObject *t_IntBlockPool$Allocator_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, IntBlockPool$Allocator::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_IntBlockPool$Allocator_init_(t_IntBlockPool$Allocator *self, PyObject *args, PyObject *kwds)
        {
          jint a0;
          IntBlockPool$Allocator object((jobject) NULL);

          if (!parseArgs(args, "I", &a0))
          {
            INT_CALL(object = IntBlockPool$Allocator(a0));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_IntBlockPool$Allocator_getIntBlock(t_IntBlockPool$Allocator *self)
        {
          JArray< jint > result((jobject) NULL);
          OBJ_CALL(result = self->object.getIntBlock());
          return result.wrap();
        }

        static PyObject *t_IntBlockPool$Allocator_recycleIntBlocks(t_IntBlockPool$Allocator *self, PyObject *args)
        {
          JArray< JArray< jint > > a0((jobject) NULL);
          jint a1;
          jint a2;

          if (!parseArgs(args, "[[III", &a0, &a1, &a2))
          {
            OBJ_CALL(self->object.recycleIntBlocks(a0, a1, a2));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "recycleIntBlocks", args);
          return NULL;
        }

        static PyObject *t_IntBlockPool$Allocator_get__intBlock(t_IntBlockPool$Allocator *self, void *data)
        {
          JArray< jint > value((jobject) NULL);
          OBJ_CALL(value = self->object.getIntBlock());
          return value.wrap();
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/pl/PolishAnalyzer.h"
#include "org/apache/lucene/util/Version.h"
#include "java/lang/String.h"
#include "org/apache/lucene/analysis/util/CharArraySet.h"
#include "org/egothor/stemmer/Trie.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace pl {

          ::java::lang::Class *PolishAnalyzer::class$ = NULL;
          jmethodID *PolishAnalyzer::mids$ = NULL;
          bool PolishAnalyzer::live$ = false;
          ::java::lang::String *PolishAnalyzer::DEFAULT_STEMMER_FILE = NULL;
          ::java::lang::String *PolishAnalyzer::DEFAULT_STOPWORD_FILE = NULL;

          jclass PolishAnalyzer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/pl/PolishAnalyzer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_0d96cf33] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;)V");
              mids$[mid_init$_83eafe28] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/analysis/util/CharArraySet;)V");
              mids$[mid_init$_c9d7e4a3] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/analysis/util/CharArraySet;Lorg/apache/lucene/analysis/util/CharArraySet;)V");
              mids$[mid_getDefaultStopSet_d2d3505c] = env->getStaticMethodID(cls, "getDefaultStopSet", "()Lorg/apache/lucene/analysis/util/CharArraySet;");
              mids$[mid_getDefaultTable_0b271714] = env->getStaticMethodID(cls, "getDefaultTable", "()Lorg/egothor/stemmer/Trie;");
              mids$[mid_createComponents_1be39cae] = env->getMethodID(cls, "createComponents", "(Ljava/lang/String;Ljava/io/Reader;)Lorg/apache/lucene/analysis/Analyzer$TokenStreamComponents;");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              DEFAULT_STEMMER_FILE = new ::java::lang::String(env->getStaticObjectField(cls, "DEFAULT_STEMMER_FILE", "Ljava/lang/String;"));
              DEFAULT_STOPWORD_FILE = new ::java::lang::String(env->getStaticObjectField(cls, "DEFAULT_STOPWORD_FILE", "Ljava/lang/String;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          PolishAnalyzer::PolishAnalyzer(const ::org::apache::lucene::util::Version & a0) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_0d96cf33, a0.this$)) {}

          PolishAnalyzer::PolishAnalyzer(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::analysis::util::CharArraySet & a1) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_83eafe28, a0.this$, a1.this$)) {}

          PolishAnalyzer::PolishAnalyzer(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::analysis::util::CharArraySet & a1, const ::org::apache::lucene::analysis::util::CharArraySet & a2) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_c9d7e4a3, a0.this$, a1.this$, a2.this$)) {}

          ::org::apache::lucene::analysis::util::CharArraySet PolishAnalyzer::getDefaultStopSet()
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::analysis::util::CharArraySet(env->callStaticObjectMethod(cls, mids$[mid_getDefaultStopSet_d2d3505c]));
          }

          ::org::egothor::stemmer::Trie PolishAnalyzer::getDefaultTable()
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::egothor::stemmer::Trie(env->callStaticObjectMethod(cls, mids$[mid_getDefaultTable_0b271714]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace pl {
          static PyObject *t_PolishAnalyzer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PolishAnalyzer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_PolishAnalyzer_init_(t_PolishAnalyzer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_PolishAnalyzer_getDefaultStopSet(PyTypeObject *type);
          static PyObject *t_PolishAnalyzer_getDefaultTable(PyTypeObject *type);
          static PyObject *t_PolishAnalyzer_get__defaultStopSet(t_PolishAnalyzer *self, void *data);
          static PyObject *t_PolishAnalyzer_get__defaultTable(t_PolishAnalyzer *self, void *data);
          static PyGetSetDef t_PolishAnalyzer__fields_[] = {
            DECLARE_GET_FIELD(t_PolishAnalyzer, defaultStopSet),
            DECLARE_GET_FIELD(t_PolishAnalyzer, defaultTable),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_PolishAnalyzer__methods_[] = {
            DECLARE_METHOD(t_PolishAnalyzer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PolishAnalyzer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PolishAnalyzer, getDefaultStopSet, METH_NOARGS | METH_CLASS),
            DECLARE_METHOD(t_PolishAnalyzer, getDefaultTable, METH_NOARGS | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(PolishAnalyzer, t_PolishAnalyzer, ::org::apache::lucene::analysis::util::StopwordAnalyzerBase, PolishAnalyzer, t_PolishAnalyzer_init_, 0, 0, t_PolishAnalyzer__fields_, 0, 0);

          void t_PolishAnalyzer::install(PyObject *module)
          {
            installType(&PY_TYPE(PolishAnalyzer), module, "PolishAnalyzer", 0);
          }

          void t_PolishAnalyzer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(PolishAnalyzer).tp_dict, "class_", make_descriptor(PolishAnalyzer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(PolishAnalyzer).tp_dict, "wrapfn_", make_descriptor(t_PolishAnalyzer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(PolishAnalyzer).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(PolishAnalyzer::initializeClass);
            PyDict_SetItemString(PY_TYPE(PolishAnalyzer).tp_dict, "DEFAULT_STEMMER_FILE", make_descriptor(j2p(*PolishAnalyzer::DEFAULT_STEMMER_FILE)));
            PyDict_SetItemString(PY_TYPE(PolishAnalyzer).tp_dict, "DEFAULT_STOPWORD_FILE", make_descriptor(j2p(*PolishAnalyzer::DEFAULT_STOPWORD_FILE)));
          }

          static PyObject *t_PolishAnalyzer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, PolishAnalyzer::initializeClass, 1)))
              return NULL;
            return t_PolishAnalyzer::wrap_Object(PolishAnalyzer(((t_PolishAnalyzer *) arg)->object.this$));
          }
          static PyObject *t_PolishAnalyzer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, PolishAnalyzer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_PolishAnalyzer_init_(t_PolishAnalyzer *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                PolishAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "K", ::org::apache::lucene::util::Version::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_))
                {
                  INT_CALL(object = PolishAnalyzer(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 2:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                ::org::apache::lucene::analysis::util::CharArraySet a1((jobject) NULL);
                PyTypeObject **p1;
                PolishAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "KK", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1, &p1, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_))
                {
                  INT_CALL(object = PolishAnalyzer(a0, a1));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 3:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                ::org::apache::lucene::analysis::util::CharArraySet a1((jobject) NULL);
                PyTypeObject **p1;
                ::org::apache::lucene::analysis::util::CharArraySet a2((jobject) NULL);
                PyTypeObject **p2;
                PolishAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "KKK", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1, &p1, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_, &a2, &p2, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_))
                {
                  INT_CALL(object = PolishAnalyzer(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_PolishAnalyzer_getDefaultStopSet(PyTypeObject *type)
          {
            ::org::apache::lucene::analysis::util::CharArraySet result((jobject) NULL);
            OBJ_CALL(result = ::org::apache::lucene::analysis::pl::PolishAnalyzer::getDefaultStopSet());
            return ::org::apache::lucene::analysis::util::t_CharArraySet::wrap_Object(result);
          }

          static PyObject *t_PolishAnalyzer_getDefaultTable(PyTypeObject *type)
          {
            ::org::egothor::stemmer::Trie result((jobject) NULL);
            OBJ_CALL(result = ::org::apache::lucene::analysis::pl::PolishAnalyzer::getDefaultTable());
            return ::org::egothor::stemmer::t_Trie::wrap_Object(result);
          }

          static PyObject *t_PolishAnalyzer_get__defaultStopSet(t_PolishAnalyzer *self, void *data)
          {
            ::org::apache::lucene::analysis::util::CharArraySet value((jobject) NULL);
            OBJ_CALL(value = self->object.getDefaultStopSet());
            return ::org::apache::lucene::analysis::util::t_CharArraySet::wrap_Object(value);
          }

          static PyObject *t_PolishAnalyzer_get__defaultTable(t_PolishAnalyzer *self, void *data)
          {
            ::org::egothor::stemmer::Trie value((jobject) NULL);
            OBJ_CALL(value = self->object.getDefaultTable());
            return ::org::egothor::stemmer::t_Trie::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/vectorhighlight/FieldFragList$WeightedFragInfo$SubInfo.h"
#include "org/apache/lucene/search/vectorhighlight/FieldPhraseList$WeightedPhraseInfo$Toffs.h"
#include "java/lang/String.h"
#include "java/util/List.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace vectorhighlight {

          ::java::lang::Class *FieldFragList$WeightedFragInfo$SubInfo::class$ = NULL;
          jmethodID *FieldFragList$WeightedFragInfo$SubInfo::mids$ = NULL;
          bool FieldFragList$WeightedFragInfo$SubInfo::live$ = false;

          jclass FieldFragList$WeightedFragInfo$SubInfo::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/vectorhighlight/FieldFragList$WeightedFragInfo$SubInfo");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_ca488422] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Ljava/util/List;IF)V");
              mids$[mid_getBoost_54c6a176] = env->getMethodID(cls, "getBoost", "()F");
              mids$[mid_getSeqnum_54c6a179] = env->getMethodID(cls, "getSeqnum", "()I");
              mids$[mid_getTermsOffsets_87851566] = env->getMethodID(cls, "getTermsOffsets", "()Ljava/util/List;");
              mids$[mid_getText_14c7b5c5] = env->getMethodID(cls, "getText", "()Ljava/lang/String;");
              mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          FieldFragList$WeightedFragInfo$SubInfo::FieldFragList$WeightedFragInfo$SubInfo(const ::java::lang::String & a0, const ::java::util::List & a1, jint a2, jfloat a3) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_ca488422, a0.this$, a1.this$, a2, a3)) {}

          jfloat FieldFragList$WeightedFragInfo$SubInfo::getBoost() const
          {
            return env->callFloatMethod(this$, mids$[mid_getBoost_54c6a176]);
          }

          jint FieldFragList$WeightedFragInfo$SubInfo::getSeqnum() const
          {
            return env->callIntMethod(this$, mids$[mid_getSeqnum_54c6a179]);
          }

          ::java::util::List FieldFragList$WeightedFragInfo$SubInfo::getTermsOffsets() const
          {
            return ::java::util::List(env->callObjectMethod(this$, mids$[mid_getTermsOffsets_87851566]));
          }

          ::java::lang::String FieldFragList$WeightedFragInfo$SubInfo::getText() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getText_14c7b5c5]));
          }

          ::java::lang::String FieldFragList$WeightedFragInfo$SubInfo::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace vectorhighlight {
          static PyObject *t_FieldFragList$WeightedFragInfo$SubInfo_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_FieldFragList$WeightedFragInfo$SubInfo_instance_(PyTypeObject *type, PyObject *arg);
          static int t_FieldFragList$WeightedFragInfo$SubInfo_init_(t_FieldFragList$WeightedFragInfo$SubInfo *self, PyObject *args, PyObject *kwds);
          static PyObject *t_FieldFragList$WeightedFragInfo$SubInfo_getBoost(t_FieldFragList$WeightedFragInfo$SubInfo *self);
          static PyObject *t_FieldFragList$WeightedFragInfo$SubInfo_getSeqnum(t_FieldFragList$WeightedFragInfo$SubInfo *self);
          static PyObject *t_FieldFragList$WeightedFragInfo$SubInfo_getTermsOffsets(t_FieldFragList$WeightedFragInfo$SubInfo *self);
          static PyObject *t_FieldFragList$WeightedFragInfo$SubInfo_getText(t_FieldFragList$WeightedFragInfo$SubInfo *self);
          static PyObject *t_FieldFragList$WeightedFragInfo$SubInfo_toString(t_FieldFragList$WeightedFragInfo$SubInfo *self, PyObject *args);
          static PyObject *t_FieldFragList$WeightedFragInfo$SubInfo_get__boost(t_FieldFragList$WeightedFragInfo$SubInfo *self, void *data);
          static PyObject *t_FieldFragList$WeightedFragInfo$SubInfo_get__seqnum(t_FieldFragList$WeightedFragInfo$SubInfo *self, void *data);
          static PyObject *t_FieldFragList$WeightedFragInfo$SubInfo_get__termsOffsets(t_FieldFragList$WeightedFragInfo$SubInfo *self, void *data);
          static PyObject *t_FieldFragList$WeightedFragInfo$SubInfo_get__text(t_FieldFragList$WeightedFragInfo$SubInfo *self, void *data);
          static PyGetSetDef t_FieldFragList$WeightedFragInfo$SubInfo__fields_[] = {
            DECLARE_GET_FIELD(t_FieldFragList$WeightedFragInfo$SubInfo, boost),
            DECLARE_GET_FIELD(t_FieldFragList$WeightedFragInfo$SubInfo, seqnum),
            DECLARE_GET_FIELD(t_FieldFragList$WeightedFragInfo$SubInfo, termsOffsets),
            DECLARE_GET_FIELD(t_FieldFragList$WeightedFragInfo$SubInfo, text),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_FieldFragList$WeightedFragInfo$SubInfo__methods_[] = {
            DECLARE_METHOD(t_FieldFragList$WeightedFragInfo$SubInfo, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FieldFragList$WeightedFragInfo$SubInfo, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FieldFragList$WeightedFragInfo$SubInfo, getBoost, METH_NOARGS),
            DECLARE_METHOD(t_FieldFragList$WeightedFragInfo$SubInfo, getSeqnum, METH_NOARGS),
            DECLARE_METHOD(t_FieldFragList$WeightedFragInfo$SubInfo, getTermsOffsets, METH_NOARGS),
            DECLARE_METHOD(t_FieldFragList$WeightedFragInfo$SubInfo, getText, METH_NOARGS),
            DECLARE_METHOD(t_FieldFragList$WeightedFragInfo$SubInfo, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(FieldFragList$WeightedFragInfo$SubInfo, t_FieldFragList$WeightedFragInfo$SubInfo, ::java::lang::Object, FieldFragList$WeightedFragInfo$SubInfo, t_FieldFragList$WeightedFragInfo$SubInfo_init_, 0, 0, t_FieldFragList$WeightedFragInfo$SubInfo__fields_, 0, 0);

          void t_FieldFragList$WeightedFragInfo$SubInfo::install(PyObject *module)
          {
            installType(&PY_TYPE(FieldFragList$WeightedFragInfo$SubInfo), module, "FieldFragList$WeightedFragInfo$SubInfo", 0);
          }

          void t_FieldFragList$WeightedFragInfo$SubInfo::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(FieldFragList$WeightedFragInfo$SubInfo).tp_dict, "class_", make_descriptor(FieldFragList$WeightedFragInfo$SubInfo::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(FieldFragList$WeightedFragInfo$SubInfo).tp_dict, "wrapfn_", make_descriptor(t_FieldFragList$WeightedFragInfo$SubInfo::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(FieldFragList$WeightedFragInfo$SubInfo).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_FieldFragList$WeightedFragInfo$SubInfo_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, FieldFragList$WeightedFragInfo$SubInfo::initializeClass, 1)))
              return NULL;
            return t_FieldFragList$WeightedFragInfo$SubInfo::wrap_Object(FieldFragList$WeightedFragInfo$SubInfo(((t_FieldFragList$WeightedFragInfo$SubInfo *) arg)->object.this$));
          }
          static PyObject *t_FieldFragList$WeightedFragInfo$SubInfo_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, FieldFragList$WeightedFragInfo$SubInfo::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_FieldFragList$WeightedFragInfo$SubInfo_init_(t_FieldFragList$WeightedFragInfo$SubInfo *self, PyObject *args, PyObject *kwds)
          {
            ::java::lang::String a0((jobject) NULL);
            ::java::util::List a1((jobject) NULL);
            PyTypeObject **p1;
            jint a2;
            jfloat a3;
            FieldFragList$WeightedFragInfo$SubInfo object((jobject) NULL);

            if (!parseArgs(args, "sKIF", ::java::util::List::initializeClass, &a0, &a1, &p1, ::java::util::t_List::parameters_, &a2, &a3))
            {
              INT_CALL(object = FieldFragList$WeightedFragInfo$SubInfo(a0, a1, a2, a3));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_FieldFragList$WeightedFragInfo$SubInfo_getBoost(t_FieldFragList$WeightedFragInfo$SubInfo *self)
          {
            jfloat result;
            OBJ_CALL(result = self->object.getBoost());
            return PyFloat_FromDouble((double) result);
          }

          static PyObject *t_FieldFragList$WeightedFragInfo$SubInfo_getSeqnum(t_FieldFragList$WeightedFragInfo$SubInfo *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getSeqnum());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_FieldFragList$WeightedFragInfo$SubInfo_getTermsOffsets(t_FieldFragList$WeightedFragInfo$SubInfo *self)
          {
            ::java::util::List result((jobject) NULL);
            OBJ_CALL(result = self->object.getTermsOffsets());
            return ::java::util::t_List::wrap_Object(result, &::org::apache::lucene::search::vectorhighlight::PY_TYPE(FieldPhraseList$WeightedPhraseInfo$Toffs));
          }

          static PyObject *t_FieldFragList$WeightedFragInfo$SubInfo_getText(t_FieldFragList$WeightedFragInfo$SubInfo *self)
          {
            ::java::lang::String result((jobject) NULL);
            OBJ_CALL(result = self->object.getText());
            return j2p(result);
          }

          static PyObject *t_FieldFragList$WeightedFragInfo$SubInfo_toString(t_FieldFragList$WeightedFragInfo$SubInfo *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(&PY_TYPE(FieldFragList$WeightedFragInfo$SubInfo), (PyObject *) self, "toString", args, 2);
          }

          static PyObject *t_FieldFragList$WeightedFragInfo$SubInfo_get__boost(t_FieldFragList$WeightedFragInfo$SubInfo *self, void *data)
          {
            jfloat value;
            OBJ_CALL(value = self->object.getBoost());
            return PyFloat_FromDouble((double) value);
          }

          static PyObject *t_FieldFragList$WeightedFragInfo$SubInfo_get__seqnum(t_FieldFragList$WeightedFragInfo$SubInfo *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getSeqnum());
            return PyInt_FromLong((long) value);
          }

          static PyObject *t_FieldFragList$WeightedFragInfo$SubInfo_get__termsOffsets(t_FieldFragList$WeightedFragInfo$SubInfo *self, void *data)
          {
            ::java::util::List value((jobject) NULL);
            OBJ_CALL(value = self->object.getTermsOffsets());
            return ::java::util::t_List::wrap_Object(value);
          }

          static PyObject *t_FieldFragList$WeightedFragInfo$SubInfo_get__text(t_FieldFragList$WeightedFragInfo$SubInfo *self, void *data)
          {
            ::java::lang::String value((jobject) NULL);
            OBJ_CALL(value = self->object.getText());
            return j2p(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/FieldCache$LongParser.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *FieldCache$LongParser::class$ = NULL;
        jmethodID *FieldCache$LongParser::mids$ = NULL;
        bool FieldCache$LongParser::live$ = false;

        jclass FieldCache$LongParser::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/FieldCache$LongParser");

            mids$ = new jmethodID[max_mid];
            mids$[mid_parseLong_7bc03dd8] = env->getMethodID(cls, "parseLong", "(Lorg/apache/lucene/util/BytesRef;)J");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        jlong FieldCache$LongParser::parseLong(const ::org::apache::lucene::util::BytesRef & a0) const
        {
          return env->callLongMethod(this$, mids$[mid_parseLong_7bc03dd8], a0.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_FieldCache$LongParser_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FieldCache$LongParser_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FieldCache$LongParser_parseLong(t_FieldCache$LongParser *self, PyObject *arg);

        static PyMethodDef t_FieldCache$LongParser__methods_[] = {
          DECLARE_METHOD(t_FieldCache$LongParser, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FieldCache$LongParser, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FieldCache$LongParser, parseLong, METH_O),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(FieldCache$LongParser, t_FieldCache$LongParser, ::org::apache::lucene::search::FieldCache$Parser, FieldCache$LongParser, abstract_init, 0, 0, 0, 0, 0);

        void t_FieldCache$LongParser::install(PyObject *module)
        {
          installType(&PY_TYPE(FieldCache$LongParser), module, "FieldCache$LongParser", 0);
        }

        void t_FieldCache$LongParser::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(FieldCache$LongParser).tp_dict, "class_", make_descriptor(FieldCache$LongParser::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(FieldCache$LongParser).tp_dict, "wrapfn_", make_descriptor(t_FieldCache$LongParser::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(FieldCache$LongParser).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_FieldCache$LongParser_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, FieldCache$LongParser::initializeClass, 1)))
            return NULL;
          return t_FieldCache$LongParser::wrap_Object(FieldCache$LongParser(((t_FieldCache$LongParser *) arg)->object.this$));
        }
        static PyObject *t_FieldCache$LongParser_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, FieldCache$LongParser::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_FieldCache$LongParser_parseLong(t_FieldCache$LongParser *self, PyObject *arg)
        {
          ::org::apache::lucene::util::BytesRef a0((jobject) NULL);
          jlong result;

          if (!parseArg(arg, "k", ::org::apache::lucene::util::BytesRef::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.parseLong(a0));
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          PyErr_SetArgsError((PyObject *) self, "parseLong", arg);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/spans/SpanMultiTermQueryWrapper.h"
#include "org/apache/lucene/util/Bits.h"
#include "org/apache/lucene/search/MultiTermQuery.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/index/TermContext.h"
#include "java/lang/Object.h"
#include "java/util/Map.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/search/spans/Spans.h"
#include "org/apache/lucene/search/spans/SpanMultiTermQueryWrapper$SpanRewriteMethod.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "org/apache/lucene/index/Term.h"
#include "org/apache/lucene/search/Query.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace spans {

          ::java::lang::Class *SpanMultiTermQueryWrapper::class$ = NULL;
          jmethodID *SpanMultiTermQueryWrapper::mids$ = NULL;
          bool SpanMultiTermQueryWrapper::live$ = false;
          ::org::apache::lucene::search::spans::SpanMultiTermQueryWrapper$SpanRewriteMethod *SpanMultiTermQueryWrapper::SCORING_SPAN_QUERY_REWRITE = NULL;

          jclass SpanMultiTermQueryWrapper::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/spans/SpanMultiTermQueryWrapper");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_3bf60bd1] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/MultiTermQuery;)V");
              mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
              mids$[mid_getField_14c7b5c5] = env->getMethodID(cls, "getField", "()Ljava/lang/String;");
              mids$[mid_getRewriteMethod_5bc9fda5] = env->getMethodID(cls, "getRewriteMethod", "()Lorg/apache/lucene/search/spans/SpanMultiTermQueryWrapper$SpanRewriteMethod;");
              mids$[mid_getSpans_f003cb44] = env->getMethodID(cls, "getSpans", "(Lorg/apache/lucene/index/AtomicReaderContext;Lorg/apache/lucene/util/Bits;Ljava/util/Map;)Lorg/apache/lucene/search/spans/Spans;");
              mids$[mid_getWrappedQuery_97e3851a] = env->getMethodID(cls, "getWrappedQuery", "()Lorg/apache/lucene/search/Query;");
              mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
              mids$[mid_rewrite_7edcaa43] = env->getMethodID(cls, "rewrite", "(Lorg/apache/lucene/index/IndexReader;)Lorg/apache/lucene/search/Query;");
              mids$[mid_setRewriteMethod_89abf2c4] = env->getMethodID(cls, "setRewriteMethod", "(Lorg/apache/lucene/search/spans/SpanMultiTermQueryWrapper$SpanRewriteMethod;)V");
              mids$[mid_toString_97a5258f] = env->getMethodID(cls, "toString", "(Ljava/lang/String;)Ljava/lang/String;");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              SCORING_SPAN_QUERY_REWRITE = new ::org::apache::lucene::search::spans::SpanMultiTermQueryWrapper$SpanRewriteMethod(env->getStaticObjectField(cls, "SCORING_SPAN_QUERY_REWRITE", "Lorg/apache/lucene/search/spans/SpanMultiTermQueryWrapper$SpanRewriteMethod;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          SpanMultiTermQueryWrapper::SpanMultiTermQueryWrapper(const ::org::apache::lucene::search::MultiTermQuery & a0) : ::org::apache::lucene::search::spans::SpanQuery(env->newObject(initializeClass, &mids$, mid_init$_3bf60bd1, a0.this$)) {}

          jboolean SpanMultiTermQueryWrapper::equals(const ::java::lang::Object & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
          }

          ::java::lang::String SpanMultiTermQueryWrapper::getField() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getField_14c7b5c5]));
          }

          ::org::apache::lucene::search::spans::SpanMultiTermQueryWrapper$SpanRewriteMethod SpanMultiTermQueryWrapper::getRewriteMethod() const
          {
            return ::org::apache::lucene::search::spans::SpanMultiTermQueryWrapper$SpanRewriteMethod(env->callObjectMethod(this$, mids$[mid_getRewriteMethod_5bc9fda5]));
          }

          ::org::apache::lucene::search::spans::Spans SpanMultiTermQueryWrapper::getSpans(const ::org::apache::lucene::index::AtomicReaderContext & a0, const ::org::apache::lucene::util::Bits & a1, const ::java::util::Map & a2) const
          {
            return ::org::apache::lucene::search::spans::Spans(env->callObjectMethod(this$, mids$[mid_getSpans_f003cb44], a0.this$, a1.this$, a2.this$));
          }

          ::org::apache::lucene::search::Query SpanMultiTermQueryWrapper::getWrappedQuery() const
          {
            return ::org::apache::lucene::search::Query(env->callObjectMethod(this$, mids$[mid_getWrappedQuery_97e3851a]));
          }

          jint SpanMultiTermQueryWrapper::hashCode() const
          {
            return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
          }

          ::org::apache::lucene::search::Query SpanMultiTermQueryWrapper::rewrite(const ::org::apache::lucene::index::IndexReader & a0) const
          {
            return ::org::apache::lucene::search::Query(env->callObjectMethod(this$, mids$[mid_rewrite_7edcaa43], a0.this$));
          }

          void SpanMultiTermQueryWrapper::setRewriteMethod(const ::org::apache::lucene::search::spans::SpanMultiTermQueryWrapper$SpanRewriteMethod & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setRewriteMethod_89abf2c4], a0.this$);
          }

          ::java::lang::String SpanMultiTermQueryWrapper::toString(const ::java::lang::String & a0) const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_97a5258f], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"
#include "org/apache/lucene/search/spans/SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace spans {
          static PyObject *t_SpanMultiTermQueryWrapper_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SpanMultiTermQueryWrapper_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SpanMultiTermQueryWrapper_of_(t_SpanMultiTermQueryWrapper *self, PyObject *args);
          static int t_SpanMultiTermQueryWrapper_init_(t_SpanMultiTermQueryWrapper *self, PyObject *args, PyObject *kwds);
          static PyObject *t_SpanMultiTermQueryWrapper_equals(t_SpanMultiTermQueryWrapper *self, PyObject *args);
          static PyObject *t_SpanMultiTermQueryWrapper_getField(t_SpanMultiTermQueryWrapper *self, PyObject *args);
          static PyObject *t_SpanMultiTermQueryWrapper_getRewriteMethod(t_SpanMultiTermQueryWrapper *self);
          static PyObject *t_SpanMultiTermQueryWrapper_getSpans(t_SpanMultiTermQueryWrapper *self, PyObject *args);
          static PyObject *t_SpanMultiTermQueryWrapper_getWrappedQuery(t_SpanMultiTermQueryWrapper *self);
          static PyObject *t_SpanMultiTermQueryWrapper_hashCode(t_SpanMultiTermQueryWrapper *self, PyObject *args);
          static PyObject *t_SpanMultiTermQueryWrapper_rewrite(t_SpanMultiTermQueryWrapper *self, PyObject *args);
          static PyObject *t_SpanMultiTermQueryWrapper_setRewriteMethod(t_SpanMultiTermQueryWrapper *self, PyObject *arg);
          static PyObject *t_SpanMultiTermQueryWrapper_toString(t_SpanMultiTermQueryWrapper *self, PyObject *args);
          static PyObject *t_SpanMultiTermQueryWrapper_get__field(t_SpanMultiTermQueryWrapper *self, void *data);
          static PyObject *t_SpanMultiTermQueryWrapper_get__rewriteMethod(t_SpanMultiTermQueryWrapper *self, void *data);
          static int t_SpanMultiTermQueryWrapper_set__rewriteMethod(t_SpanMultiTermQueryWrapper *self, PyObject *arg, void *data);
          static PyObject *t_SpanMultiTermQueryWrapper_get__wrappedQuery(t_SpanMultiTermQueryWrapper *self, void *data);
          static PyObject *t_SpanMultiTermQueryWrapper_get__parameters_(t_SpanMultiTermQueryWrapper *self, void *data);
          static PyGetSetDef t_SpanMultiTermQueryWrapper__fields_[] = {
            DECLARE_GET_FIELD(t_SpanMultiTermQueryWrapper, field),
            DECLARE_GETSET_FIELD(t_SpanMultiTermQueryWrapper, rewriteMethod),
            DECLARE_GET_FIELD(t_SpanMultiTermQueryWrapper, wrappedQuery),
            DECLARE_GET_FIELD(t_SpanMultiTermQueryWrapper, parameters_),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_SpanMultiTermQueryWrapper__methods_[] = {
            DECLARE_METHOD(t_SpanMultiTermQueryWrapper, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SpanMultiTermQueryWrapper, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SpanMultiTermQueryWrapper, of_, METH_VARARGS),
            DECLARE_METHOD(t_SpanMultiTermQueryWrapper, equals, METH_VARARGS),
            DECLARE_METHOD(t_SpanMultiTermQueryWrapper, getField, METH_VARARGS),
            DECLARE_METHOD(t_SpanMultiTermQueryWrapper, getRewriteMethod, METH_NOARGS),
            DECLARE_METHOD(t_SpanMultiTermQueryWrapper, getSpans, METH_VARARGS),
            DECLARE_METHOD(t_SpanMultiTermQueryWrapper, getWrappedQuery, METH_NOARGS),
            DECLARE_METHOD(t_SpanMultiTermQueryWrapper, hashCode, METH_VARARGS),
            DECLARE_METHOD(t_SpanMultiTermQueryWrapper, rewrite, METH_VARARGS),
            DECLARE_METHOD(t_SpanMultiTermQueryWrapper, setRewriteMethod, METH_O),
            DECLARE_METHOD(t_SpanMultiTermQueryWrapper, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(SpanMultiTermQueryWrapper, t_SpanMultiTermQueryWrapper, ::org::apache::lucene::search::spans::SpanQuery, SpanMultiTermQueryWrapper, t_SpanMultiTermQueryWrapper_init_, 0, 0, t_SpanMultiTermQueryWrapper__fields_, 0, 0);
          PyObject *t_SpanMultiTermQueryWrapper::wrap_Object(const SpanMultiTermQueryWrapper& object, PyTypeObject *p0)
          {
            PyObject *obj = t_SpanMultiTermQueryWrapper::wrap_Object(object);
            if (obj != NULL && obj != Py_None)
            {
              t_SpanMultiTermQueryWrapper *self = (t_SpanMultiTermQueryWrapper *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          PyObject *t_SpanMultiTermQueryWrapper::wrap_jobject(const jobject& object, PyTypeObject *p0)
          {
            PyObject *obj = t_SpanMultiTermQueryWrapper::wrap_jobject(object);
            if (obj != NULL && obj != Py_None)
            {
              t_SpanMultiTermQueryWrapper *self = (t_SpanMultiTermQueryWrapper *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          void t_SpanMultiTermQueryWrapper::install(PyObject *module)
          {
            installType(&PY_TYPE(SpanMultiTermQueryWrapper), module, "SpanMultiTermQueryWrapper", 0);
            PyDict_SetItemString(PY_TYPE(SpanMultiTermQueryWrapper).tp_dict, "TopTermsSpanBooleanQueryRewrite", make_descriptor(&PY_TYPE(SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite)));
            PyDict_SetItemString(PY_TYPE(SpanMultiTermQueryWrapper).tp_dict, "SpanRewriteMethod", make_descriptor(&PY_TYPE(SpanMultiTermQueryWrapper$SpanRewriteMethod)));
          }

          void t_SpanMultiTermQueryWrapper::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(SpanMultiTermQueryWrapper).tp_dict, "class_", make_descriptor(SpanMultiTermQueryWrapper::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(SpanMultiTermQueryWrapper).tp_dict, "wrapfn_", make_descriptor(t_SpanMultiTermQueryWrapper::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(SpanMultiTermQueryWrapper).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(SpanMultiTermQueryWrapper::initializeClass);
            PyDict_SetItemString(PY_TYPE(SpanMultiTermQueryWrapper).tp_dict, "SCORING_SPAN_QUERY_REWRITE", make_descriptor(::org::apache::lucene::search::spans::t_SpanMultiTermQueryWrapper$SpanRewriteMethod::wrap_Object(*SpanMultiTermQueryWrapper::SCORING_SPAN_QUERY_REWRITE)));
          }

          static PyObject *t_SpanMultiTermQueryWrapper_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, SpanMultiTermQueryWrapper::initializeClass, 1)))
              return NULL;
            return t_SpanMultiTermQueryWrapper::wrap_Object(SpanMultiTermQueryWrapper(((t_SpanMultiTermQueryWrapper *) arg)->object.this$));
          }
          static PyObject *t_SpanMultiTermQueryWrapper_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, SpanMultiTermQueryWrapper::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_SpanMultiTermQueryWrapper_of_(t_SpanMultiTermQueryWrapper *self, PyObject *args)
          {
            if (!parseArg(args, "T", 1, &(self->parameters)))
              Py_RETURN_SELF;
            return PyErr_SetArgsError((PyObject *) self, "of_", args);
          }

          static int t_SpanMultiTermQueryWrapper_init_(t_SpanMultiTermQueryWrapper *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::search::MultiTermQuery a0((jobject) NULL);
            SpanMultiTermQueryWrapper object((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::search::MultiTermQuery::initializeClass, &a0))
            {
              INT_CALL(object = SpanMultiTermQueryWrapper(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_SpanMultiTermQueryWrapper_equals(t_SpanMultiTermQueryWrapper *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            jboolean result;

            if (!parseArgs(args, "o", &a0))
            {
              OBJ_CALL(result = self->object.equals(a0));
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(SpanMultiTermQueryWrapper), (PyObject *) self, "equals", args, 2);
          }

          static PyObject *t_SpanMultiTermQueryWrapper_getField(t_SpanMultiTermQueryWrapper *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.getField());
              return j2p(result);
            }

            return callSuper(&PY_TYPE(SpanMultiTermQueryWrapper), (PyObject *) self, "getField", args, 2);
          }

          static PyObject *t_SpanMultiTermQueryWrapper_getRewriteMethod(t_SpanMultiTermQueryWrapper *self)
          {
            ::org::apache::lucene::search::spans::SpanMultiTermQueryWrapper$SpanRewriteMethod result((jobject) NULL);
            OBJ_CALL(result = self->object.getRewriteMethod());
            return ::org::apache::lucene::search::spans::t_SpanMultiTermQueryWrapper$SpanRewriteMethod::wrap_Object(result);
          }

          static PyObject *t_SpanMultiTermQueryWrapper_getSpans(t_SpanMultiTermQueryWrapper *self, PyObject *args)
          {
            ::org::apache::lucene::index::AtomicReaderContext a0((jobject) NULL);
            ::org::apache::lucene::util::Bits a1((jobject) NULL);
            ::java::util::Map a2((jobject) NULL);
            PyTypeObject **p2;
            ::org::apache::lucene::search::spans::Spans result((jobject) NULL);

            if (!parseArgs(args, "kkK", ::org::apache::lucene::index::AtomicReaderContext::initializeClass, ::org::apache::lucene::util::Bits::initializeClass, ::java::util::Map::initializeClass, &a0, &a1, &a2, &p2, ::java::util::t_Map::parameters_))
            {
              OBJ_CALL(result = self->object.getSpans(a0, a1, a2));
              return ::org::apache::lucene::search::spans::t_Spans::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(SpanMultiTermQueryWrapper), (PyObject *) self, "getSpans", args, 2);
          }

          static PyObject *t_SpanMultiTermQueryWrapper_getWrappedQuery(t_SpanMultiTermQueryWrapper *self)
          {
            ::org::apache::lucene::search::Query result((jobject) NULL);
            OBJ_CALL(result = self->object.getWrappedQuery());
            return ::org::apache::lucene::search::t_Query::wrap_Object(result);
          }

          static PyObject *t_SpanMultiTermQueryWrapper_hashCode(t_SpanMultiTermQueryWrapper *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.hashCode());
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(SpanMultiTermQueryWrapper), (PyObject *) self, "hashCode", args, 2);
          }

          static PyObject *t_SpanMultiTermQueryWrapper_rewrite(t_SpanMultiTermQueryWrapper *self, PyObject *args)
          {
            ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
            ::org::apache::lucene::search::Query result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::index::IndexReader::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.rewrite(a0));
              return ::org::apache::lucene::search::t_Query::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(SpanMultiTermQueryWrapper), (PyObject *) self, "rewrite", args, 2);
          }

          static PyObject *t_SpanMultiTermQueryWrapper_setRewriteMethod(t_SpanMultiTermQueryWrapper *self, PyObject *arg)
          {
            ::org::apache::lucene::search::spans::SpanMultiTermQueryWrapper$SpanRewriteMethod a0((jobject) NULL);
            PyTypeObject **p0;

            if (!parseArg(arg, "K", ::org::apache::lucene::search::spans::SpanMultiTermQueryWrapper$SpanRewriteMethod::initializeClass, &a0, &p0, ::org::apache::lucene::search::spans::t_SpanMultiTermQueryWrapper$SpanRewriteMethod::parameters_))
            {
              OBJ_CALL(self->object.setRewriteMethod(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setRewriteMethod", arg);
            return NULL;
          }

          static PyObject *t_SpanMultiTermQueryWrapper_toString(t_SpanMultiTermQueryWrapper *self, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, "s", &a0))
            {
              OBJ_CALL(result = self->object.toString(a0));
              return j2p(result);
            }

            return callSuper(&PY_TYPE(SpanMultiTermQueryWrapper), (PyObject *) self, "toString", args, 2);
          }
          static PyObject *t_SpanMultiTermQueryWrapper_get__parameters_(t_SpanMultiTermQueryWrapper *self, void *data)
          {
            return typeParameters(self->parameters, sizeof(self->parameters));
          }

          static PyObject *t_SpanMultiTermQueryWrapper_get__field(t_SpanMultiTermQueryWrapper *self, void *data)
          {
            ::java::lang::String value((jobject) NULL);
            OBJ_CALL(value = self->object.getField());
            return j2p(value);
          }

          static PyObject *t_SpanMultiTermQueryWrapper_get__rewriteMethod(t_SpanMultiTermQueryWrapper *self, void *data)
          {
            ::org::apache::lucene::search::spans::SpanMultiTermQueryWrapper$SpanRewriteMethod value((jobject) NULL);
            OBJ_CALL(value = self->object.getRewriteMethod());
            return ::org::apache::lucene::search::spans::t_SpanMultiTermQueryWrapper$SpanRewriteMethod::wrap_Object(value);
          }
          static int t_SpanMultiTermQueryWrapper_set__rewriteMethod(t_SpanMultiTermQueryWrapper *self, PyObject *arg, void *data)
          {
            {
              ::org::apache::lucene::search::spans::SpanMultiTermQueryWrapper$SpanRewriteMethod value((jobject) NULL);
              if (!parseArg(arg, "k", ::org::apache::lucene::search::spans::SpanMultiTermQueryWrapper$SpanRewriteMethod::initializeClass, &value))
              {
                INT_CALL(self->object.setRewriteMethod(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "rewriteMethod", arg);
            return -1;
          }

          static PyObject *t_SpanMultiTermQueryWrapper_get__wrappedQuery(t_SpanMultiTermQueryWrapper *self, void *data)
          {
            ::org::apache::lucene::search::Query value((jobject) NULL);
            OBJ_CALL(value = self->object.getWrappedQuery());
            return ::org::apache::lucene::search::t_Query::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/AttributeSource$State.h"
#include "java/lang/Cloneable.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *AttributeSource$State::class$ = NULL;
        jmethodID *AttributeSource$State::mids$ = NULL;
        bool AttributeSource$State::live$ = false;

        jclass AttributeSource$State::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/AttributeSource$State");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_clone_0f9ed4d4] = env->getMethodID(cls, "clone", "()Lorg/apache/lucene/util/AttributeSource$State;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        AttributeSource$State::AttributeSource$State() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        AttributeSource$State AttributeSource$State::clone() const
        {
          return AttributeSource$State(env->callObjectMethod(this$, mids$[mid_clone_0f9ed4d4]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_AttributeSource$State_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_AttributeSource$State_instance_(PyTypeObject *type, PyObject *arg);
        static int t_AttributeSource$State_init_(t_AttributeSource$State *self, PyObject *args, PyObject *kwds);
        static PyObject *t_AttributeSource$State_clone(t_AttributeSource$State *self);

        static PyMethodDef t_AttributeSource$State__methods_[] = {
          DECLARE_METHOD(t_AttributeSource$State, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_AttributeSource$State, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_AttributeSource$State, clone, METH_NOARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(AttributeSource$State, t_AttributeSource$State, ::java::lang::Object, AttributeSource$State, t_AttributeSource$State_init_, 0, 0, 0, 0, 0);

        void t_AttributeSource$State::install(PyObject *module)
        {
          installType(&PY_TYPE(AttributeSource$State), module, "AttributeSource$State", 0);
        }

        void t_AttributeSource$State::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(AttributeSource$State).tp_dict, "class_", make_descriptor(AttributeSource$State::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(AttributeSource$State).tp_dict, "wrapfn_", make_descriptor(t_AttributeSource$State::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(AttributeSource$State).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_AttributeSource$State_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, AttributeSource$State::initializeClass, 1)))
            return NULL;
          return t_AttributeSource$State::wrap_Object(AttributeSource$State(((t_AttributeSource$State *) arg)->object.this$));
        }
        static PyObject *t_AttributeSource$State_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, AttributeSource$State::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_AttributeSource$State_init_(t_AttributeSource$State *self, PyObject *args, PyObject *kwds)
        {
          AttributeSource$State object((jobject) NULL);

          INT_CALL(object = AttributeSource$State());
          self->object = object;

          return 0;
        }

        static PyObject *t_AttributeSource$State_clone(t_AttributeSource$State *self)
        {
          AttributeSource$State result((jobject) NULL);
          OBJ_CALL(result = self->object.clone());
          return t_AttributeSource$State::wrap_Object(result);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/FieldCacheRangeFilter.h"
#include "java/lang/Long.h"
#include "java/lang/Float.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/search/FieldCache$IntParser.h"
#include "java/lang/Byte.h"
#include "org/apache/lucene/search/FieldCache$ShortParser.h"
#include "java/lang/Class.h"
#include "java/lang/Object.h"
#include "org/apache/lucene/search/FieldCache$ByteParser.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "org/apache/lucene/search/FieldCache$DoubleParser.h"
#include "org/apache/lucene/search/FieldCache$FloatParser.h"
#include "org/apache/lucene/search/FieldCache$LongParser.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "java/lang/Integer.h"
#include "org/apache/lucene/search/FieldCache$Parser.h"
#include "java/lang/Double.h"
#include "org/apache/lucene/search/DocIdSet.h"
#include "org/apache/lucene/util/Bits.h"
#include "java/lang/Short.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *FieldCacheRangeFilter::class$ = NULL;
        jmethodID *FieldCacheRangeFilter::mids$ = NULL;
        bool FieldCacheRangeFilter::live$ = false;

        jclass FieldCacheRangeFilter::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/FieldCacheRangeFilter");

            mids$ = new jmethodID[max_mid];
            mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
            mids$[mid_getDocIdSet_ccce0897] = env->getMethodID(cls, "getDocIdSet", "(Lorg/apache/lucene/index/AtomicReaderContext;Lorg/apache/lucene/util/Bits;)Lorg/apache/lucene/search/DocIdSet;");
            mids$[mid_getField_14c7b5c5] = env->getMethodID(cls, "getField", "()Ljava/lang/String;");
            mids$[mid_getLowerVal_846352c3] = env->getMethodID(cls, "getLowerVal", "()Ljava/lang/Object;");
            mids$[mid_getParser_6ee4ab67] = env->getMethodID(cls, "getParser", "()Lorg/apache/lucene/search/FieldCache$Parser;");
            mids$[mid_getUpperVal_846352c3] = env->getMethodID(cls, "getUpperVal", "()Ljava/lang/Object;");
            mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
            mids$[mid_includesLower_54c6a16a] = env->getMethodID(cls, "includesLower", "()Z");
            mids$[mid_includesUpper_54c6a16a] = env->getMethodID(cls, "includesUpper", "()Z");
            mids$[mid_newByteRange_16d27fcb] = env->getStaticMethodID(cls, "newByteRange", "(Ljava/lang/String;Ljava/lang/Byte;Ljava/lang/Byte;ZZ)Lorg/apache/lucene/search/FieldCacheRangeFilter;");
            mids$[mid_newByteRange_8dbc9d65] = env->getStaticMethodID(cls, "newByteRange", "(Ljava/lang/String;Lorg/apache/lucene/search/FieldCache$ByteParser;Ljava/lang/Byte;Ljava/lang/Byte;ZZ)Lorg/apache/lucene/search/FieldCacheRangeFilter;");
            mids$[mid_newBytesRefRange_ada19313] = env->getStaticMethodID(cls, "newBytesRefRange", "(Ljava/lang/String;Lorg/apache/lucene/util/BytesRef;Lorg/apache/lucene/util/BytesRef;ZZ)Lorg/apache/lucene/search/FieldCacheRangeFilter;");
            mids$[mid_newDoubleRange_1f46882f] = env->getStaticMethodID(cls, "newDoubleRange", "(Ljava/lang/String;Ljava/lang/Double;Ljava/lang/Double;ZZ)Lorg/apache/lucene/search/FieldCacheRangeFilter;");
            mids$[mid_newDoubleRange_45b4662e] = env->getStaticMethodID(cls, "newDoubleRange", "(Ljava/lang/String;Lorg/apache/lucene/search/FieldCache$DoubleParser;Ljava/lang/Double;Ljava/lang/Double;ZZ)Lorg/apache/lucene/search/FieldCacheRangeFilter;");
            mids$[mid_newFloatRange_6957c90b] = env->getStaticMethodID(cls, "newFloatRange", "(Ljava/lang/String;Ljava/lang/Float;Ljava/lang/Float;ZZ)Lorg/apache/lucene/search/FieldCacheRangeFilter;");
            mids$[mid_newFloatRange_ec92e8b8] = env->getStaticMethodID(cls, "newFloatRange", "(Ljava/lang/String;Lorg/apache/lucene/search/FieldCache$FloatParser;Ljava/lang/Float;Ljava/lang/Float;ZZ)Lorg/apache/lucene/search/FieldCacheRangeFilter;");
            mids$[mid_newIntRange_dee3e03b] = env->getStaticMethodID(cls, "newIntRange", "(Ljava/lang/String;Ljava/lang/Integer;Ljava/lang/Integer;ZZ)Lorg/apache/lucene/search/FieldCacheRangeFilter;");
            mids$[mid_newIntRange_6952cfdf] = env->getStaticMethodID(cls, "newIntRange", "(Ljava/lang/String;Lorg/apache/lucene/search/FieldCache$IntParser;Ljava/lang/Integer;Ljava/lang/Integer;ZZ)Lorg/apache/lucene/search/FieldCacheRangeFilter;");
            mids$[mid_newLongRange_48e495eb] = env->getStaticMethodID(cls, "newLongRange", "(Ljava/lang/String;Ljava/lang/Long;Ljava/lang/Long;ZZ)Lorg/apache/lucene/search/FieldCacheRangeFilter;");
            mids$[mid_newLongRange_51d4b8f9] = env->getStaticMethodID(cls, "newLongRange", "(Ljava/lang/String;Lorg/apache/lucene/search/FieldCache$LongParser;Ljava/lang/Long;Ljava/lang/Long;ZZ)Lorg/apache/lucene/search/FieldCacheRangeFilter;");
            mids$[mid_newShortRange_89cd93a7] = env->getStaticMethodID(cls, "newShortRange", "(Ljava/lang/String;Ljava/lang/Short;Ljava/lang/Short;ZZ)Lorg/apache/lucene/search/FieldCacheRangeFilter;");
            mids$[mid_newShortRange_d637c7bc] = env->getStaticMethodID(cls, "newShortRange", "(Ljava/lang/String;Lorg/apache/lucene/search/FieldCache$ShortParser;Ljava/lang/Short;Ljava/lang/Short;ZZ)Lorg/apache/lucene/search/FieldCacheRangeFilter;");
            mids$[mid_newStringRange_05fb19b7] = env->getStaticMethodID(cls, "newStringRange", "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;ZZ)Lorg/apache/lucene/search/FieldCacheRangeFilter;");
            mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        jboolean FieldCacheRangeFilter::equals(const ::java::lang::Object & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
        }

        ::org::apache::lucene::search::DocIdSet FieldCacheRangeFilter::getDocIdSet(const ::org::apache::lucene::index::AtomicReaderContext & a0, const ::org::apache::lucene::util::Bits & a1) const
        {
          return ::org::apache::lucene::search::DocIdSet(env->callObjectMethod(this$, mids$[mid_getDocIdSet_ccce0897], a0.this$, a1.this$));
        }

        ::java::lang::String FieldCacheRangeFilter::getField() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getField_14c7b5c5]));
        }

        ::java::lang::Object FieldCacheRangeFilter::getLowerVal() const
        {
          return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_getLowerVal_846352c3]));
        }

        ::org::apache::lucene::search::FieldCache$Parser FieldCacheRangeFilter::getParser() const
        {
          return ::org::apache::lucene::search::FieldCache$Parser(env->callObjectMethod(this$, mids$[mid_getParser_6ee4ab67]));
        }

        ::java::lang::Object FieldCacheRangeFilter::getUpperVal() const
        {
          return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_getUpperVal_846352c3]));
        }

        jint FieldCacheRangeFilter::hashCode() const
        {
          return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
        }

        jboolean FieldCacheRangeFilter::includesLower() const
        {
          return env->callBooleanMethod(this$, mids$[mid_includesLower_54c6a16a]);
        }

        jboolean FieldCacheRangeFilter::includesUpper() const
        {
          return env->callBooleanMethod(this$, mids$[mid_includesUpper_54c6a16a]);
        }

        FieldCacheRangeFilter FieldCacheRangeFilter::newByteRange(const ::java::lang::String & a0, const ::java::lang::Byte & a1, const ::java::lang::Byte & a2, jboolean a3, jboolean a4)
        {
          jclass cls = env->getClass(initializeClass);
          return FieldCacheRangeFilter(env->callStaticObjectMethod(cls, mids$[mid_newByteRange_16d27fcb], a0.this$, a1.this$, a2.this$, a3, a4));
        }

        FieldCacheRangeFilter FieldCacheRangeFilter::newByteRange(const ::java::lang::String & a0, const ::org::apache::lucene::search::FieldCache$ByteParser & a1, const ::java::lang::Byte & a2, const ::java::lang::Byte & a3, jboolean a4, jboolean a5)
        {
          jclass cls = env->getClass(initializeClass);
          return FieldCacheRangeFilter(env->callStaticObjectMethod(cls, mids$[mid_newByteRange_8dbc9d65], a0.this$, a1.this$, a2.this$, a3.this$, a4, a5));
        }

        FieldCacheRangeFilter FieldCacheRangeFilter::newBytesRefRange(const ::java::lang::String & a0, const ::org::apache::lucene::util::BytesRef & a1, const ::org::apache::lucene::util::BytesRef & a2, jboolean a3, jboolean a4)
        {
          jclass cls = env->getClass(initializeClass);
          return FieldCacheRangeFilter(env->callStaticObjectMethod(cls, mids$[mid_newBytesRefRange_ada19313], a0.this$, a1.this$, a2.this$, a3, a4));
        }

        FieldCacheRangeFilter FieldCacheRangeFilter::newDoubleRange(const ::java::lang::String & a0, const ::java::lang::Double & a1, const ::java::lang::Double & a2, jboolean a3, jboolean a4)
        {
          jclass cls = env->getClass(initializeClass);
          return FieldCacheRangeFilter(env->callStaticObjectMethod(cls, mids$[mid_newDoubleRange_1f46882f], a0.this$, a1.this$, a2.this$, a3, a4));
        }

        FieldCacheRangeFilter FieldCacheRangeFilter::newDoubleRange(const ::java::lang::String & a0, const ::org::apache::lucene::search::FieldCache$DoubleParser & a1, const ::java::lang::Double & a2, const ::java::lang::Double & a3, jboolean a4, jboolean a5)
        {
          jclass cls = env->getClass(initializeClass);
          return FieldCacheRangeFilter(env->callStaticObjectMethod(cls, mids$[mid_newDoubleRange_45b4662e], a0.this$, a1.this$, a2.this$, a3.this$, a4, a5));
        }

        FieldCacheRangeFilter FieldCacheRangeFilter::newFloatRange(const ::java::lang::String & a0, const ::java::lang::Float & a1, const ::java::lang::Float & a2, jboolean a3, jboolean a4)
        {
          jclass cls = env->getClass(initializeClass);
          return FieldCacheRangeFilter(env->callStaticObjectMethod(cls, mids$[mid_newFloatRange_6957c90b], a0.this$, a1.this$, a2.this$, a3, a4));
        }

        FieldCacheRangeFilter FieldCacheRangeFilter::newFloatRange(const ::java::lang::String & a0, const ::org::apache::lucene::search::FieldCache$FloatParser & a1, const ::java::lang::Float & a2, const ::java::lang::Float & a3, jboolean a4, jboolean a5)
        {
          jclass cls = env->getClass(initializeClass);
          return FieldCacheRangeFilter(env->callStaticObjectMethod(cls, mids$[mid_newFloatRange_ec92e8b8], a0.this$, a1.this$, a2.this$, a3.this$, a4, a5));
        }

        FieldCacheRangeFilter FieldCacheRangeFilter::newIntRange(const ::java::lang::String & a0, const ::java::lang::Integer & a1, const ::java::lang::Integer & a2, jboolean a3, jboolean a4)
        {
          jclass cls = env->getClass(initializeClass);
          return FieldCacheRangeFilter(env->callStaticObjectMethod(cls, mids$[mid_newIntRange_dee3e03b], a0.this$, a1.this$, a2.this$, a3, a4));
        }

        FieldCacheRangeFilter FieldCacheRangeFilter::newIntRange(const ::java::lang::String & a0, const ::org::apache::lucene::search::FieldCache$IntParser & a1, const ::java::lang::Integer & a2, const ::java::lang::Integer & a3, jboolean a4, jboolean a5)
        {
          jclass cls = env->getClass(initializeClass);
          return FieldCacheRangeFilter(env->callStaticObjectMethod(cls, mids$[mid_newIntRange_6952cfdf], a0.this$, a1.this$, a2.this$, a3.this$, a4, a5));
        }

        FieldCacheRangeFilter FieldCacheRangeFilter::newLongRange(const ::java::lang::String & a0, const ::java::lang::Long & a1, const ::java::lang::Long & a2, jboolean a3, jboolean a4)
        {
          jclass cls = env->getClass(initializeClass);
          return FieldCacheRangeFilter(env->callStaticObjectMethod(cls, mids$[mid_newLongRange_48e495eb], a0.this$, a1.this$, a2.this$, a3, a4));
        }

        FieldCacheRangeFilter FieldCacheRangeFilter::newLongRange(const ::java::lang::String & a0, const ::org::apache::lucene::search::FieldCache$LongParser & a1, const ::java::lang::Long & a2, const ::java::lang::Long & a3, jboolean a4, jboolean a5)
        {
          jclass cls = env->getClass(initializeClass);
          return FieldCacheRangeFilter(env->callStaticObjectMethod(cls, mids$[mid_newLongRange_51d4b8f9], a0.this$, a1.this$, a2.this$, a3.this$, a4, a5));
        }

        FieldCacheRangeFilter FieldCacheRangeFilter::newShortRange(const ::java::lang::String & a0, const ::java::lang::Short & a1, const ::java::lang::Short & a2, jboolean a3, jboolean a4)
        {
          jclass cls = env->getClass(initializeClass);
          return FieldCacheRangeFilter(env->callStaticObjectMethod(cls, mids$[mid_newShortRange_89cd93a7], a0.this$, a1.this$, a2.this$, a3, a4));
        }

        FieldCacheRangeFilter FieldCacheRangeFilter::newShortRange(const ::java::lang::String & a0, const ::org::apache::lucene::search::FieldCache$ShortParser & a1, const ::java::lang::Short & a2, const ::java::lang::Short & a3, jboolean a4, jboolean a5)
        {
          jclass cls = env->getClass(initializeClass);
          return FieldCacheRangeFilter(env->callStaticObjectMethod(cls, mids$[mid_newShortRange_d637c7bc], a0.this$, a1.this$, a2.this$, a3.this$, a4, a5));
        }

        FieldCacheRangeFilter FieldCacheRangeFilter::newStringRange(const ::java::lang::String & a0, const ::java::lang::String & a1, const ::java::lang::String & a2, jboolean a3, jboolean a4)
        {
          jclass cls = env->getClass(initializeClass);
          return FieldCacheRangeFilter(env->callStaticObjectMethod(cls, mids$[mid_newStringRange_05fb19b7], a0.this$, a1.this$, a2.this$, a3, a4));
        }

        ::java::lang::String FieldCacheRangeFilter::toString() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_FieldCacheRangeFilter_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FieldCacheRangeFilter_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FieldCacheRangeFilter_of_(t_FieldCacheRangeFilter *self, PyObject *args);
        static PyObject *t_FieldCacheRangeFilter_equals(t_FieldCacheRangeFilter *self, PyObject *args);
        static PyObject *t_FieldCacheRangeFilter_getDocIdSet(t_FieldCacheRangeFilter *self, PyObject *args);
        static PyObject *t_FieldCacheRangeFilter_getField(t_FieldCacheRangeFilter *self);
        static PyObject *t_FieldCacheRangeFilter_getLowerVal(t_FieldCacheRangeFilter *self);
        static PyObject *t_FieldCacheRangeFilter_getParser(t_FieldCacheRangeFilter *self);
        static PyObject *t_FieldCacheRangeFilter_getUpperVal(t_FieldCacheRangeFilter *self);
        static PyObject *t_FieldCacheRangeFilter_hashCode(t_FieldCacheRangeFilter *self, PyObject *args);
        static PyObject *t_FieldCacheRangeFilter_includesLower(t_FieldCacheRangeFilter *self);
        static PyObject *t_FieldCacheRangeFilter_includesUpper(t_FieldCacheRangeFilter *self);
        static PyObject *t_FieldCacheRangeFilter_newByteRange(PyTypeObject *type, PyObject *args);
        static PyObject *t_FieldCacheRangeFilter_newBytesRefRange(PyTypeObject *type, PyObject *args);
        static PyObject *t_FieldCacheRangeFilter_newDoubleRange(PyTypeObject *type, PyObject *args);
        static PyObject *t_FieldCacheRangeFilter_newFloatRange(PyTypeObject *type, PyObject *args);
        static PyObject *t_FieldCacheRangeFilter_newIntRange(PyTypeObject *type, PyObject *args);
        static PyObject *t_FieldCacheRangeFilter_newLongRange(PyTypeObject *type, PyObject *args);
        static PyObject *t_FieldCacheRangeFilter_newShortRange(PyTypeObject *type, PyObject *args);
        static PyObject *t_FieldCacheRangeFilter_newStringRange(PyTypeObject *type, PyObject *args);
        static PyObject *t_FieldCacheRangeFilter_toString(t_FieldCacheRangeFilter *self, PyObject *args);
        static PyObject *t_FieldCacheRangeFilter_get__field(t_FieldCacheRangeFilter *self, void *data);
        static PyObject *t_FieldCacheRangeFilter_get__lowerVal(t_FieldCacheRangeFilter *self, void *data);
        static PyObject *t_FieldCacheRangeFilter_get__parser(t_FieldCacheRangeFilter *self, void *data);
        static PyObject *t_FieldCacheRangeFilter_get__upperVal(t_FieldCacheRangeFilter *self, void *data);
        static PyObject *t_FieldCacheRangeFilter_get__parameters_(t_FieldCacheRangeFilter *self, void *data);
        static PyGetSetDef t_FieldCacheRangeFilter__fields_[] = {
          DECLARE_GET_FIELD(t_FieldCacheRangeFilter, field),
          DECLARE_GET_FIELD(t_FieldCacheRangeFilter, lowerVal),
          DECLARE_GET_FIELD(t_FieldCacheRangeFilter, parser),
          DECLARE_GET_FIELD(t_FieldCacheRangeFilter, upperVal),
          DECLARE_GET_FIELD(t_FieldCacheRangeFilter, parameters_),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_FieldCacheRangeFilter__methods_[] = {
          DECLARE_METHOD(t_FieldCacheRangeFilter, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FieldCacheRangeFilter, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FieldCacheRangeFilter, of_, METH_VARARGS),
          DECLARE_METHOD(t_FieldCacheRangeFilter, equals, METH_VARARGS),
          DECLARE_METHOD(t_FieldCacheRangeFilter, getDocIdSet, METH_VARARGS),
          DECLARE_METHOD(t_FieldCacheRangeFilter, getField, METH_NOARGS),
          DECLARE_METHOD(t_FieldCacheRangeFilter, getLowerVal, METH_NOARGS),
          DECLARE_METHOD(t_FieldCacheRangeFilter, getParser, METH_NOARGS),
          DECLARE_METHOD(t_FieldCacheRangeFilter, getUpperVal, METH_NOARGS),
          DECLARE_METHOD(t_FieldCacheRangeFilter, hashCode, METH_VARARGS),
          DECLARE_METHOD(t_FieldCacheRangeFilter, includesLower, METH_NOARGS),
          DECLARE_METHOD(t_FieldCacheRangeFilter, includesUpper, METH_NOARGS),
          DECLARE_METHOD(t_FieldCacheRangeFilter, newByteRange, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_FieldCacheRangeFilter, newBytesRefRange, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_FieldCacheRangeFilter, newDoubleRange, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_FieldCacheRangeFilter, newFloatRange, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_FieldCacheRangeFilter, newIntRange, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_FieldCacheRangeFilter, newLongRange, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_FieldCacheRangeFilter, newShortRange, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_FieldCacheRangeFilter, newStringRange, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_FieldCacheRangeFilter, toString, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(FieldCacheRangeFilter, t_FieldCacheRangeFilter, ::org::apache::lucene::search::Filter, FieldCacheRangeFilter, abstract_init, 0, 0, t_FieldCacheRangeFilter__fields_, 0, 0);
        PyObject *t_FieldCacheRangeFilter::wrap_Object(const FieldCacheRangeFilter& object, PyTypeObject *p0)
        {
          PyObject *obj = t_FieldCacheRangeFilter::wrap_Object(object);
          if (obj != NULL && obj != Py_None)
          {
            t_FieldCacheRangeFilter *self = (t_FieldCacheRangeFilter *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        PyObject *t_FieldCacheRangeFilter::wrap_jobject(const jobject& object, PyTypeObject *p0)
        {
          PyObject *obj = t_FieldCacheRangeFilter::wrap_jobject(object);
          if (obj != NULL && obj != Py_None)
          {
            t_FieldCacheRangeFilter *self = (t_FieldCacheRangeFilter *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        void t_FieldCacheRangeFilter::install(PyObject *module)
        {
          installType(&PY_TYPE(FieldCacheRangeFilter), module, "FieldCacheRangeFilter", 0);
        }

        void t_FieldCacheRangeFilter::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(FieldCacheRangeFilter).tp_dict, "class_", make_descriptor(FieldCacheRangeFilter::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(FieldCacheRangeFilter).tp_dict, "wrapfn_", make_descriptor(t_FieldCacheRangeFilter::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(FieldCacheRangeFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_FieldCacheRangeFilter_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, FieldCacheRangeFilter::initializeClass, 1)))
            return NULL;
          return t_FieldCacheRangeFilter::wrap_Object(FieldCacheRangeFilter(((t_FieldCacheRangeFilter *) arg)->object.this$));
        }
        static PyObject *t_FieldCacheRangeFilter_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, FieldCacheRangeFilter::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_FieldCacheRangeFilter_of_(t_FieldCacheRangeFilter *self, PyObject *args)
        {
          if (!parseArg(args, "T", 1, &(self->parameters)))
            Py_RETURN_SELF;
          return PyErr_SetArgsError((PyObject *) self, "of_", args);
        }

        static PyObject *t_FieldCacheRangeFilter_equals(t_FieldCacheRangeFilter *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.equals(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(FieldCacheRangeFilter), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_FieldCacheRangeFilter_getDocIdSet(t_FieldCacheRangeFilter *self, PyObject *args)
        {
          ::org::apache::lucene::index::AtomicReaderContext a0((jobject) NULL);
          ::org::apache::lucene::util::Bits a1((jobject) NULL);
          ::org::apache::lucene::search::DocIdSet result((jobject) NULL);

          if (!parseArgs(args, "kk", ::org::apache::lucene::index::AtomicReaderContext::initializeClass, ::org::apache::lucene::util::Bits::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = self->object.getDocIdSet(a0, a1));
            return ::org::apache::lucene::search::t_DocIdSet::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(FieldCacheRangeFilter), (PyObject *) self, "getDocIdSet", args, 2);
        }

        static PyObject *t_FieldCacheRangeFilter_getField(t_FieldCacheRangeFilter *self)
        {
          ::java::lang::String result((jobject) NULL);
          OBJ_CALL(result = self->object.getField());
          return j2p(result);
        }

        static PyObject *t_FieldCacheRangeFilter_getLowerVal(t_FieldCacheRangeFilter *self)
        {
          ::java::lang::Object result((jobject) NULL);
          OBJ_CALL(result = self->object.getLowerVal());
          return self->parameters[0] != NULL ? wrapType(self->parameters[0], result.this$) : ::java::lang::t_Object::wrap_Object(result);
        }

        static PyObject *t_FieldCacheRangeFilter_getParser(t_FieldCacheRangeFilter *self)
        {
          ::org::apache::lucene::search::FieldCache$Parser result((jobject) NULL);
          OBJ_CALL(result = self->object.getParser());
          return ::org::apache::lucene::search::t_FieldCache$Parser::wrap_Object(result);
        }

        static PyObject *t_FieldCacheRangeFilter_getUpperVal(t_FieldCacheRangeFilter *self)
        {
          ::java::lang::Object result((jobject) NULL);
          OBJ_CALL(result = self->object.getUpperVal());
          return self->parameters[0] != NULL ? wrapType(self->parameters[0], result.this$) : ::java::lang::t_Object::wrap_Object(result);
        }

        static PyObject *t_FieldCacheRangeFilter_hashCode(t_FieldCacheRangeFilter *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hashCode());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(FieldCacheRangeFilter), (PyObject *) self, "hashCode", args, 2);
        }

        static PyObject *t_FieldCacheRangeFilter_includesLower(t_FieldCacheRangeFilter *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.includesLower());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_FieldCacheRangeFilter_includesUpper(t_FieldCacheRangeFilter *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.includesUpper());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_FieldCacheRangeFilter_newByteRange(PyTypeObject *type, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 5:
            {
              ::java::lang::String a0((jobject) NULL);
              ::java::lang::Byte a1((jobject) NULL);
              ::java::lang::Byte a2((jobject) NULL);
              jboolean a3;
              jboolean a4;
              FieldCacheRangeFilter result((jobject) NULL);

              if (!parseArgs(args, "sOOZZ", &::java::lang::PY_TYPE(Byte), &::java::lang::PY_TYPE(Byte), &a0, &a1, &a2, &a3, &a4))
              {
                OBJ_CALL(result = ::org::apache::lucene::search::FieldCacheRangeFilter::newByteRange(a0, a1, a2, a3, a4));
                return t_FieldCacheRangeFilter::wrap_Object(result, &::java::lang::PY_TYPE(Byte));
              }
            }
            break;
           case 6:
            {
              ::java::lang::String a0((jobject) NULL);
              ::org::apache::lucene::search::FieldCache$ByteParser a1((jobject) NULL);
              ::java::lang::Byte a2((jobject) NULL);
              ::java::lang::Byte a3((jobject) NULL);
              jboolean a4;
              jboolean a5;
              FieldCacheRangeFilter result((jobject) NULL);

              if (!parseArgs(args, "skOOZZ", ::org::apache::lucene::search::FieldCache$ByteParser::initializeClass, &::java::lang::PY_TYPE(Byte), &::java::lang::PY_TYPE(Byte), &a0, &a1, &a2, &a3, &a4, &a5))
              {
                OBJ_CALL(result = ::org::apache::lucene::search::FieldCacheRangeFilter::newByteRange(a0, a1, a2, a3, a4, a5));
                return t_FieldCacheRangeFilter::wrap_Object(result, &::java::lang::PY_TYPE(Byte));
              }
            }
          }

          PyErr_SetArgsError(type, "newByteRange", args);
          return NULL;
        }

        static PyObject *t_FieldCacheRangeFilter_newBytesRefRange(PyTypeObject *type, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::util::BytesRef a1((jobject) NULL);
          ::org::apache::lucene::util::BytesRef a2((jobject) NULL);
          jboolean a3;
          jboolean a4;
          FieldCacheRangeFilter result((jobject) NULL);

          if (!parseArgs(args, "skkZZ", ::org::apache::lucene::util::BytesRef::initializeClass, ::org::apache::lucene::util::BytesRef::initializeClass, &a0, &a1, &a2, &a3, &a4))
          {
            OBJ_CALL(result = ::org::apache::lucene::search::FieldCacheRangeFilter::newBytesRefRange(a0, a1, a2, a3, a4));
            return t_FieldCacheRangeFilter::wrap_Object(result, &::org::apache::lucene::util::PY_TYPE(BytesRef));
          }

          PyErr_SetArgsError(type, "newBytesRefRange", args);
          return NULL;
        }

        static PyObject *t_FieldCacheRangeFilter_newDoubleRange(PyTypeObject *type, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 5:
            {
              ::java::lang::String a0((jobject) NULL);
              ::java::lang::Double a1((jobject) NULL);
              ::java::lang::Double a2((jobject) NULL);
              jboolean a3;
              jboolean a4;
              FieldCacheRangeFilter result((jobject) NULL);

              if (!parseArgs(args, "sOOZZ", &::java::lang::PY_TYPE(Double), &::java::lang::PY_TYPE(Double), &a0, &a1, &a2, &a3, &a4))
              {
                OBJ_CALL(result = ::org::apache::lucene::search::FieldCacheRangeFilter::newDoubleRange(a0, a1, a2, a3, a4));
                return t_FieldCacheRangeFilter::wrap_Object(result, &::java::lang::PY_TYPE(Double));
              }
            }
            break;
           case 6:
            {
              ::java::lang::String a0((jobject) NULL);
              ::org::apache::lucene::search::FieldCache$DoubleParser a1((jobject) NULL);
              ::java::lang::Double a2((jobject) NULL);
              ::java::lang::Double a3((jobject) NULL);
              jboolean a4;
              jboolean a5;
              FieldCacheRangeFilter result((jobject) NULL);

              if (!parseArgs(args, "skOOZZ", ::org::apache::lucene::search::FieldCache$DoubleParser::initializeClass, &::java::lang::PY_TYPE(Double), &::java::lang::PY_TYPE(Double), &a0, &a1, &a2, &a3, &a4, &a5))
              {
                OBJ_CALL(result = ::org::apache::lucene::search::FieldCacheRangeFilter::newDoubleRange(a0, a1, a2, a3, a4, a5));
                return t_FieldCacheRangeFilter::wrap_Object(result, &::java::lang::PY_TYPE(Double));
              }
            }
          }

          PyErr_SetArgsError(type, "newDoubleRange", args);
          return NULL;
        }

        static PyObject *t_FieldCacheRangeFilter_newFloatRange(PyTypeObject *type, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 5:
            {
              ::java::lang::String a0((jobject) NULL);
              ::java::lang::Float a1((jobject) NULL);
              ::java::lang::Float a2((jobject) NULL);
              jboolean a3;
              jboolean a4;
              FieldCacheRangeFilter result((jobject) NULL);

              if (!parseArgs(args, "sOOZZ", &::java::lang::PY_TYPE(Float), &::java::lang::PY_TYPE(Float), &a0, &a1, &a2, &a3, &a4))
              {
                OBJ_CALL(result = ::org::apache::lucene::search::FieldCacheRangeFilter::newFloatRange(a0, a1, a2, a3, a4));
                return t_FieldCacheRangeFilter::wrap_Object(result, &::java::lang::PY_TYPE(Float));
              }
            }
            break;
           case 6:
            {
              ::java::lang::String a0((jobject) NULL);
              ::org::apache::lucene::search::FieldCache$FloatParser a1((jobject) NULL);
              ::java::lang::Float a2((jobject) NULL);
              ::java::lang::Float a3((jobject) NULL);
              jboolean a4;
              jboolean a5;
              FieldCacheRangeFilter result((jobject) NULL);

              if (!parseArgs(args, "skOOZZ", ::org::apache::lucene::search::FieldCache$FloatParser::initializeClass, &::java::lang::PY_TYPE(Float), &::java::lang::PY_TYPE(Float), &a0, &a1, &a2, &a3, &a4, &a5))
              {
                OBJ_CALL(result = ::org::apache::lucene::search::FieldCacheRangeFilter::newFloatRange(a0, a1, a2, a3, a4, a5));
                return t_FieldCacheRangeFilter::wrap_Object(result, &::java::lang::PY_TYPE(Float));
              }
            }
          }

          PyErr_SetArgsError(type, "newFloatRange", args);
          return NULL;
        }

        static PyObject *t_FieldCacheRangeFilter_newIntRange(PyTypeObject *type, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 5:
            {
              ::java::lang::String a0((jobject) NULL);
              ::java::lang::Integer a1((jobject) NULL);
              ::java::lang::Integer a2((jobject) NULL);
              jboolean a3;
              jboolean a4;
              FieldCacheRangeFilter result((jobject) NULL);

              if (!parseArgs(args, "sOOZZ", &::java::lang::PY_TYPE(Integer), &::java::lang::PY_TYPE(Integer), &a0, &a1, &a2, &a3, &a4))
              {
                OBJ_CALL(result = ::org::apache::lucene::search::FieldCacheRangeFilter::newIntRange(a0, a1, a2, a3, a4));
                return t_FieldCacheRangeFilter::wrap_Object(result, &::java::lang::PY_TYPE(Integer));
              }
            }
            break;
           case 6:
            {
              ::java::lang::String a0((jobject) NULL);
              ::org::apache::lucene::search::FieldCache$IntParser a1((jobject) NULL);
              ::java::lang::Integer a2((jobject) NULL);
              ::java::lang::Integer a3((jobject) NULL);
              jboolean a4;
              jboolean a5;
              FieldCacheRangeFilter result((jobject) NULL);

              if (!parseArgs(args, "skOOZZ", ::org::apache::lucene::search::FieldCache$IntParser::initializeClass, &::java::lang::PY_TYPE(Integer), &::java::lang::PY_TYPE(Integer), &a0, &a1, &a2, &a3, &a4, &a5))
              {
                OBJ_CALL(result = ::org::apache::lucene::search::FieldCacheRangeFilter::newIntRange(a0, a1, a2, a3, a4, a5));
                return t_FieldCacheRangeFilter::wrap_Object(result, &::java::lang::PY_TYPE(Integer));
              }
            }
          }

          PyErr_SetArgsError(type, "newIntRange", args);
          return NULL;
        }

        static PyObject *t_FieldCacheRangeFilter_newLongRange(PyTypeObject *type, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 5:
            {
              ::java::lang::String a0((jobject) NULL);
              ::java::lang::Long a1((jobject) NULL);
              ::java::lang::Long a2((jobject) NULL);
              jboolean a3;
              jboolean a4;
              FieldCacheRangeFilter result((jobject) NULL);

              if (!parseArgs(args, "sOOZZ", &::java::lang::PY_TYPE(Long), &::java::lang::PY_TYPE(Long), &a0, &a1, &a2, &a3, &a4))
              {
                OBJ_CALL(result = ::org::apache::lucene::search::FieldCacheRangeFilter::newLongRange(a0, a1, a2, a3, a4));
                return t_FieldCacheRangeFilter::wrap_Object(result, &::java::lang::PY_TYPE(Long));
              }
            }
            break;
           case 6:
            {
              ::java::lang::String a0((jobject) NULL);
              ::org::apache::lucene::search::FieldCache$LongParser a1((jobject) NULL);
              ::java::lang::Long a2((jobject) NULL);
              ::java::lang::Long a3((jobject) NULL);
              jboolean a4;
              jboolean a5;
              FieldCacheRangeFilter result((jobject) NULL);

              if (!parseArgs(args, "skOOZZ", ::org::apache::lucene::search::FieldCache$LongParser::initializeClass, &::java::lang::PY_TYPE(Long), &::java::lang::PY_TYPE(Long), &a0, &a1, &a2, &a3, &a4, &a5))
              {
                OBJ_CALL(result = ::org::apache::lucene::search::FieldCacheRangeFilter::newLongRange(a0, a1, a2, a3, a4, a5));
                return t_FieldCacheRangeFilter::wrap_Object(result, &::java::lang::PY_TYPE(Long));
              }
            }
          }

          PyErr_SetArgsError(type, "newLongRange", args);
          return NULL;
        }

        static PyObject *t_FieldCacheRangeFilter_newShortRange(PyTypeObject *type, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 5:
            {
              ::java::lang::String a0((jobject) NULL);
              ::java::lang::Short a1((jobject) NULL);
              ::java::lang::Short a2((jobject) NULL);
              jboolean a3;
              jboolean a4;
              FieldCacheRangeFilter result((jobject) NULL);

              if (!parseArgs(args, "sOOZZ", &::java::lang::PY_TYPE(Short), &::java::lang::PY_TYPE(Short), &a0, &a1, &a2, &a3, &a4))
              {
                OBJ_CALL(result = ::org::apache::lucene::search::FieldCacheRangeFilter::newShortRange(a0, a1, a2, a3, a4));
                return t_FieldCacheRangeFilter::wrap_Object(result, &::java::lang::PY_TYPE(Short));
              }
            }
            break;
           case 6:
            {
              ::java::lang::String a0((jobject) NULL);
              ::org::apache::lucene::search::FieldCache$ShortParser a1((jobject) NULL);
              ::java::lang::Short a2((jobject) NULL);
              ::java::lang::Short a3((jobject) NULL);
              jboolean a4;
              jboolean a5;
              FieldCacheRangeFilter result((jobject) NULL);

              if (!parseArgs(args, "skOOZZ", ::org::apache::lucene::search::FieldCache$ShortParser::initializeClass, &::java::lang::PY_TYPE(Short), &::java::lang::PY_TYPE(Short), &a0, &a1, &a2, &a3, &a4, &a5))
              {
                OBJ_CALL(result = ::org::apache::lucene::search::FieldCacheRangeFilter::newShortRange(a0, a1, a2, a3, a4, a5));
                return t_FieldCacheRangeFilter::wrap_Object(result, &::java::lang::PY_TYPE(Short));
              }
            }
          }

          PyErr_SetArgsError(type, "newShortRange", args);
          return NULL;
        }

        static PyObject *t_FieldCacheRangeFilter_newStringRange(PyTypeObject *type, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::java::lang::String a1((jobject) NULL);
          ::java::lang::String a2((jobject) NULL);
          jboolean a3;
          jboolean a4;
          FieldCacheRangeFilter result((jobject) NULL);

          if (!parseArgs(args, "sssZZ", &a0, &a1, &a2, &a3, &a4))
          {
            OBJ_CALL(result = ::org::apache::lucene::search::FieldCacheRangeFilter::newStringRange(a0, a1, a2, a3, a4));
            return t_FieldCacheRangeFilter::wrap_Object(result, &::java::lang::PY_TYPE(String));
          }

          PyErr_SetArgsError(type, "newStringRange", args);
          return NULL;
        }

        static PyObject *t_FieldCacheRangeFilter_toString(t_FieldCacheRangeFilter *self, PyObject *args)
        {
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.toString());
            return j2p(result);
          }

          return callSuper(&PY_TYPE(FieldCacheRangeFilter), (PyObject *) self, "toString", args, 2);
        }
        static PyObject *t_FieldCacheRangeFilter_get__parameters_(t_FieldCacheRangeFilter *self, void *data)
        {
          return typeParameters(self->parameters, sizeof(self->parameters));
        }

        static PyObject *t_FieldCacheRangeFilter_get__field(t_FieldCacheRangeFilter *self, void *data)
        {
          ::java::lang::String value((jobject) NULL);
          OBJ_CALL(value = self->object.getField());
          return j2p(value);
        }

        static PyObject *t_FieldCacheRangeFilter_get__lowerVal(t_FieldCacheRangeFilter *self, void *data)
        {
          ::java::lang::Object value((jobject) NULL);
          OBJ_CALL(value = self->object.getLowerVal());
          return ::java::lang::t_Object::wrap_Object(value);
        }

        static PyObject *t_FieldCacheRangeFilter_get__parser(t_FieldCacheRangeFilter *self, void *data)
        {
          ::org::apache::lucene::search::FieldCache$Parser value((jobject) NULL);
          OBJ_CALL(value = self->object.getParser());
          return ::org::apache::lucene::search::t_FieldCache$Parser::wrap_Object(value);
        }

        static PyObject *t_FieldCacheRangeFilter_get__upperVal(t_FieldCacheRangeFilter *self, void *data)
        {
          ::java::lang::Object value((jobject) NULL);
          OBJ_CALL(value = self->object.getUpperVal());
          return ::java::lang::t_Object::wrap_Object(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/charfilter/BaseCharFilter.h"
#include "java/io/Reader.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace charfilter {

          ::java::lang::Class *BaseCharFilter::class$ = NULL;
          jmethodID *BaseCharFilter::mids$ = NULL;
          bool BaseCharFilter::live$ = false;

          jclass BaseCharFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/charfilter/BaseCharFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_cf2e3c10] = env->getMethodID(cls, "<init>", "(Ljava/io/Reader;)V");
              mids$[mid_correct_39c7bd23] = env->getMethodID(cls, "correct", "(I)I");
              mids$[mid_addOffCorrectMap_d8d154a6] = env->getMethodID(cls, "addOffCorrectMap", "(II)V");
              mids$[mid_getLastCumulativeDiff_54c6a179] = env->getMethodID(cls, "getLastCumulativeDiff", "()I");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          BaseCharFilter::BaseCharFilter(const ::java::io::Reader & a0) : ::org::apache::lucene::analysis::CharFilter(env->newObject(initializeClass, &mids$, mid_init$_cf2e3c10, a0.this$)) {}
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace charfilter {
          static PyObject *t_BaseCharFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_BaseCharFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_BaseCharFilter_init_(t_BaseCharFilter *self, PyObject *args, PyObject *kwds);

          static PyMethodDef t_BaseCharFilter__methods_[] = {
            DECLARE_METHOD(t_BaseCharFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_BaseCharFilter, instance_, METH_O | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(BaseCharFilter, t_BaseCharFilter, ::org::apache::lucene::analysis::CharFilter, BaseCharFilter, t_BaseCharFilter_init_, 0, 0, 0, 0, 0);

          void t_BaseCharFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(BaseCharFilter), module, "BaseCharFilter", 0);
          }

          void t_BaseCharFilter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(BaseCharFilter).tp_dict, "class_", make_descriptor(BaseCharFilter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(BaseCharFilter).tp_dict, "wrapfn_", make_descriptor(t_BaseCharFilter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(BaseCharFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_BaseCharFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, BaseCharFilter::initializeClass, 1)))
              return NULL;
            return t_BaseCharFilter::wrap_Object(BaseCharFilter(((t_BaseCharFilter *) arg)->object.this$));
          }
          static PyObject *t_BaseCharFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, BaseCharFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_BaseCharFilter_init_(t_BaseCharFilter *self, PyObject *args, PyObject *kwds)
          {
            ::java::io::Reader a0((jobject) NULL);
            BaseCharFilter object((jobject) NULL);

            if (!parseArgs(args, "k", ::java::io::Reader::initializeClass, &a0))
            {
              INT_CALL(object = BaseCharFilter(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/suggest/Lookup$LookupResult.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "java/lang/Comparable.h"
#include "java/lang/Class.h"
#include "java/lang/CharSequence.h"
#include "java/lang/String.h"
#include "java/util/Set.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace suggest {

          ::java::lang::Class *Lookup$LookupResult::class$ = NULL;
          jmethodID *Lookup$LookupResult::mids$ = NULL;
          jfieldID *Lookup$LookupResult::fids$ = NULL;
          bool Lookup$LookupResult::live$ = false;

          jclass Lookup$LookupResult::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/suggest/Lookup$LookupResult");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_03ea1383] = env->getMethodID(cls, "<init>", "(Ljava/lang/CharSequence;J)V");
              mids$[mid_init$_f8b7fcb9] = env->getMethodID(cls, "<init>", "(Ljava/lang/CharSequence;JLjava/util/Set;)V");
              mids$[mid_init$_bb9697af] = env->getMethodID(cls, "<init>", "(Ljava/lang/CharSequence;JLorg/apache/lucene/util/BytesRef;)V");
              mids$[mid_init$_a19b2ec9] = env->getMethodID(cls, "<init>", "(Ljava/lang/CharSequence;JLorg/apache/lucene/util/BytesRef;Ljava/util/Set;)V");
              mids$[mid_init$_37f21f6f] = env->getMethodID(cls, "<init>", "(Ljava/lang/CharSequence;Ljava/lang/Object;JLorg/apache/lucene/util/BytesRef;)V");
              mids$[mid_init$_f9089661] = env->getMethodID(cls, "<init>", "(Ljava/lang/CharSequence;Ljava/lang/Object;JLorg/apache/lucene/util/BytesRef;Ljava/util/Set;)V");
              mids$[mid_compareTo_2615e59a] = env->getMethodID(cls, "compareTo", "(Lorg/apache/lucene/search/suggest/Lookup$LookupResult;)I");
              mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

              fids$ = new jfieldID[max_fid];
              fids$[fid_contexts] = env->getFieldID(cls, "contexts", "Ljava/util/Set;");
              fids$[fid_highlightKey] = env->getFieldID(cls, "highlightKey", "Ljava/lang/Object;");
              fids$[fid_key] = env->getFieldID(cls, "key", "Ljava/lang/CharSequence;");
              fids$[fid_payload] = env->getFieldID(cls, "payload", "Lorg/apache/lucene/util/BytesRef;");
              fids$[fid_value] = env->getFieldID(cls, "value", "J");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          Lookup$LookupResult::Lookup$LookupResult(const ::java::lang::CharSequence & a0, jlong a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_03ea1383, a0.this$, a1)) {}

          Lookup$LookupResult::Lookup$LookupResult(const ::java::lang::CharSequence & a0, jlong a1, const ::java::util::Set & a2) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_f8b7fcb9, a0.this$, a1, a2.this$)) {}

          Lookup$LookupResult::Lookup$LookupResult(const ::java::lang::CharSequence & a0, jlong a1, const ::org::apache::lucene::util::BytesRef & a2) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_bb9697af, a0.this$, a1, a2.this$)) {}

          Lookup$LookupResult::Lookup$LookupResult(const ::java::lang::CharSequence & a0, jlong a1, const ::org::apache::lucene::util::BytesRef & a2, const ::java::util::Set & a3) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_a19b2ec9, a0.this$, a1, a2.this$, a3.this$)) {}

          Lookup$LookupResult::Lookup$LookupResult(const ::java::lang::CharSequence & a0, const ::java::lang::Object & a1, jlong a2, const ::org::apache::lucene::util::BytesRef & a3) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_37f21f6f, a0.this$, a1.this$, a2, a3.this$)) {}

          Lookup$LookupResult::Lookup$LookupResult(const ::java::lang::CharSequence & a0, const ::java::lang::Object & a1, jlong a2, const ::org::apache::lucene::util::BytesRef & a3, const ::java::util::Set & a4) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_f9089661, a0.this$, a1.this$, a2, a3.this$, a4.this$)) {}

          jint Lookup$LookupResult::compareTo(const Lookup$LookupResult & a0) const
          {
            return env->callIntMethod(this$, mids$[mid_compareTo_2615e59a], a0.this$);
          }

          ::java::lang::String Lookup$LookupResult::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
          }

          ::java::util::Set Lookup$LookupResult::_get_contexts() const
          {
            return ::java::util::Set(env->getObjectField(this$, fids$[fid_contexts]));
          }

          ::java::lang::Object Lookup$LookupResult::_get_highlightKey() const
          {
            return ::java::lang::Object(env->getObjectField(this$, fids$[fid_highlightKey]));
          }

          ::java::lang::CharSequence Lookup$LookupResult::_get_key() const
          {
            return ::java::lang::CharSequence(env->getObjectField(this$, fids$[fid_key]));
          }

          ::org::apache::lucene::util::BytesRef Lookup$LookupResult::_get_payload() const
          {
            return ::org::apache::lucene::util::BytesRef(env->getObjectField(this$, fids$[fid_payload]));
          }

          jlong Lookup$LookupResult::_get_value() const
          {
            return env->getLongField(this$, fids$[fid_value]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace suggest {
          static PyObject *t_Lookup$LookupResult_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Lookup$LookupResult_instance_(PyTypeObject *type, PyObject *arg);
          static int t_Lookup$LookupResult_init_(t_Lookup$LookupResult *self, PyObject *args, PyObject *kwds);
          static PyObject *t_Lookup$LookupResult_compareTo(t_Lookup$LookupResult *self, PyObject *arg);
          static PyObject *t_Lookup$LookupResult_toString(t_Lookup$LookupResult *self, PyObject *args);
          static PyObject *t_Lookup$LookupResult_get__contexts(t_Lookup$LookupResult *self, void *data);
          static PyObject *t_Lookup$LookupResult_get__highlightKey(t_Lookup$LookupResult *self, void *data);
          static PyObject *t_Lookup$LookupResult_get__key(t_Lookup$LookupResult *self, void *data);
          static PyObject *t_Lookup$LookupResult_get__payload(t_Lookup$LookupResult *self, void *data);
          static PyObject *t_Lookup$LookupResult_get__value(t_Lookup$LookupResult *self, void *data);

          static PyGetSetDef t_Lookup$LookupResult__fields_[] = {
            DECLARE_GET_FIELD(t_Lookup$LookupResult, contexts),
            DECLARE_GET_FIELD(t_Lookup$LookupResult, highlightKey),
            DECLARE_GET_FIELD(t_Lookup$LookupResult, key),
            DECLARE_GET_FIELD(t_Lookup$LookupResult, payload),
            DECLARE_GET_FIELD(t_Lookup$LookupResult, value),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_Lookup$LookupResult__methods_[] = {
            DECLARE_METHOD(t_Lookup$LookupResult, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lookup$LookupResult, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lookup$LookupResult, compareTo, METH_O),
            DECLARE_METHOD(t_Lookup$LookupResult, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(Lookup$LookupResult, t_Lookup$LookupResult, ::java::lang::Object, Lookup$LookupResult, t_Lookup$LookupResult_init_, 0, 0, t_Lookup$LookupResult__fields_, 0, 0);

          void t_Lookup$LookupResult::install(PyObject *module)
          {
            installType(&PY_TYPE(Lookup$LookupResult), module, "Lookup$LookupResult", 0);
          }

          void t_Lookup$LookupResult::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(Lookup$LookupResult).tp_dict, "class_", make_descriptor(Lookup$LookupResult::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(Lookup$LookupResult).tp_dict, "wrapfn_", make_descriptor(t_Lookup$LookupResult::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(Lookup$LookupResult).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_Lookup$LookupResult_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, Lookup$LookupResult::initializeClass, 1)))
              return NULL;
            return t_Lookup$LookupResult::wrap_Object(Lookup$LookupResult(((t_Lookup$LookupResult *) arg)->object.this$));
          }
          static PyObject *t_Lookup$LookupResult_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, Lookup$LookupResult::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_Lookup$LookupResult_init_(t_Lookup$LookupResult *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 2:
              {
                ::java::lang::CharSequence a0((jobject) NULL);
                jlong a1;
                Lookup$LookupResult object((jobject) NULL);

                if (!parseArgs(args, "OJ", &::java::lang::PY_TYPE(CharSequence), &a0, &a1))
                {
                  INT_CALL(object = Lookup$LookupResult(a0, a1));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 3:
              {
                ::java::lang::CharSequence a0((jobject) NULL);
                jlong a1;
                ::java::util::Set a2((jobject) NULL);
                PyTypeObject **p2;
                Lookup$LookupResult object((jobject) NULL);

                if (!parseArgs(args, "OJK", &::java::lang::PY_TYPE(CharSequence), ::java::util::Set::initializeClass, &a0, &a1, &a2, &p2, ::java::util::t_Set::parameters_))
                {
                  INT_CALL(object = Lookup$LookupResult(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
              {
                ::java::lang::CharSequence a0((jobject) NULL);
                jlong a1;
                ::org::apache::lucene::util::BytesRef a2((jobject) NULL);
                Lookup$LookupResult object((jobject) NULL);

                if (!parseArgs(args, "OJk", &::java::lang::PY_TYPE(CharSequence), ::org::apache::lucene::util::BytesRef::initializeClass, &a0, &a1, &a2))
                {
                  INT_CALL(object = Lookup$LookupResult(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 4:
              {
                ::java::lang::CharSequence a0((jobject) NULL);
                jlong a1;
                ::org::apache::lucene::util::BytesRef a2((jobject) NULL);
                ::java::util::Set a3((jobject) NULL);
                PyTypeObject **p3;
                Lookup$LookupResult object((jobject) NULL);

                if (!parseArgs(args, "OJkK", &::java::lang::PY_TYPE(CharSequence), ::org::apache::lucene::util::BytesRef::initializeClass, ::java::util::Set::initializeClass, &a0, &a1, &a2, &a3, &p3, ::java::util::t_Set::parameters_))
                {
                  INT_CALL(object = Lookup$LookupResult(a0, a1, a2, a3));
                  self->object = object;
                  break;
                }
              }
              {
                ::java::lang::CharSequence a0((jobject) NULL);
                ::java::lang::Object a1((jobject) NULL);
                jlong a2;
                ::org::apache::lucene::util::BytesRef a3((jobject) NULL);
                Lookup$LookupResult object((jobject) NULL);

                if (!parseArgs(args, "OoJk", &::java::lang::PY_TYPE(CharSequence), ::org::apache::lucene::util::BytesRef::initializeClass, &a0, &a1, &a2, &a3))
                {
                  INT_CALL(object = Lookup$LookupResult(a0, a1, a2, a3));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 5:
              {
                ::java::lang::CharSequence a0((jobject) NULL);
                ::java::lang::Object a1((jobject) NULL);
                jlong a2;
                ::org::apache::lucene::util::BytesRef a3((jobject) NULL);
                ::java::util::Set a4((jobject) NULL);
                PyTypeObject **p4;
                Lookup$LookupResult object((jobject) NULL);

                if (!parseArgs(args, "OoJkK", &::java::lang::PY_TYPE(CharSequence), ::org::apache::lucene::util::BytesRef::initializeClass, ::java::util::Set::initializeClass, &a0, &a1, &a2, &a3, &a4, &p4, ::java::util::t_Set::parameters_))
                {
                  INT_CALL(object = Lookup$LookupResult(a0, a1, a2, a3, a4));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_Lookup$LookupResult_compareTo(t_Lookup$LookupResult *self, PyObject *arg)
          {
            Lookup$LookupResult a0((jobject) NULL);
            jint result;

            if (!parseArg(arg, "k", Lookup$LookupResult::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.compareTo(a0));
              return PyInt_FromLong((long) result);
            }

            PyErr_SetArgsError((PyObject *) self, "compareTo", arg);
            return NULL;
          }

          static PyObject *t_Lookup$LookupResult_toString(t_Lookup$LookupResult *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(&PY_TYPE(Lookup$LookupResult), (PyObject *) self, "toString", args, 2);
          }

          static PyObject *t_Lookup$LookupResult_get__contexts(t_Lookup$LookupResult *self, void *data)
          {
            ::java::util::Set value((jobject) NULL);
            OBJ_CALL(value = self->object._get_contexts());
            return ::java::util::t_Set::wrap_Object(value);
          }

          static PyObject *t_Lookup$LookupResult_get__highlightKey(t_Lookup$LookupResult *self, void *data)
          {
            ::java::lang::Object value((jobject) NULL);
            OBJ_CALL(value = self->object._get_highlightKey());
            return ::java::lang::t_Object::wrap_Object(value);
          }

          static PyObject *t_Lookup$LookupResult_get__key(t_Lookup$LookupResult *self, void *data)
          {
            ::java::lang::CharSequence value((jobject) NULL);
            OBJ_CALL(value = self->object._get_key());
            return ::java::lang::t_CharSequence::wrap_Object(value);
          }

          static PyObject *t_Lookup$LookupResult_get__payload(t_Lookup$LookupResult *self, void *data)
          {
            ::org::apache::lucene::util::BytesRef value((jobject) NULL);
            OBJ_CALL(value = self->object._get_payload());
            return ::org::apache::lucene::util::t_BytesRef::wrap_Object(value);
          }

          static PyObject *t_Lookup$LookupResult_get__value(t_Lookup$LookupResult *self, void *data)
          {
            jlong value;
            OBJ_CALL(value = self->object._get_value());
            return PyLong_FromLongLong((PY_LONG_LONG) value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/id/IndonesianStemFilter.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace id {

          ::java::lang::Class *IndonesianStemFilter::class$ = NULL;
          jmethodID *IndonesianStemFilter::mids$ = NULL;
          bool IndonesianStemFilter::live$ = false;

          jclass IndonesianStemFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/id/IndonesianStemFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_c7c794dc] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;)V");
              mids$[mid_init$_a19d9eb9] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;Z)V");
              mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          IndonesianStemFilter::IndonesianStemFilter(const ::org::apache::lucene::analysis::TokenStream & a0) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_c7c794dc, a0.this$)) {}

          IndonesianStemFilter::IndonesianStemFilter(const ::org::apache::lucene::analysis::TokenStream & a0, jboolean a1) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_a19d9eb9, a0.this$, a1)) {}

          jboolean IndonesianStemFilter::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_54c6a16a]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace id {
          static PyObject *t_IndonesianStemFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_IndonesianStemFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_IndonesianStemFilter_init_(t_IndonesianStemFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_IndonesianStemFilter_incrementToken(t_IndonesianStemFilter *self, PyObject *args);

          static PyMethodDef t_IndonesianStemFilter__methods_[] = {
            DECLARE_METHOD(t_IndonesianStemFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_IndonesianStemFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_IndonesianStemFilter, incrementToken, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(IndonesianStemFilter, t_IndonesianStemFilter, ::org::apache::lucene::analysis::TokenFilter, IndonesianStemFilter, t_IndonesianStemFilter_init_, 0, 0, 0, 0, 0);

          void t_IndonesianStemFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(IndonesianStemFilter), module, "IndonesianStemFilter", 0);
          }

          void t_IndonesianStemFilter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(IndonesianStemFilter).tp_dict, "class_", make_descriptor(IndonesianStemFilter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(IndonesianStemFilter).tp_dict, "wrapfn_", make_descriptor(t_IndonesianStemFilter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(IndonesianStemFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_IndonesianStemFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, IndonesianStemFilter::initializeClass, 1)))
              return NULL;
            return t_IndonesianStemFilter::wrap_Object(IndonesianStemFilter(((t_IndonesianStemFilter *) arg)->object.this$));
          }
          static PyObject *t_IndonesianStemFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, IndonesianStemFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_IndonesianStemFilter_init_(t_IndonesianStemFilter *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
                IndonesianStemFilter object((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
                {
                  INT_CALL(object = IndonesianStemFilter(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 2:
              {
                ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
                jboolean a1;
                IndonesianStemFilter object((jobject) NULL);

                if (!parseArgs(args, "kZ", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0, &a1))
                {
                  INT_CALL(object = IndonesianStemFilter(a0, a1));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_IndonesianStemFilter_incrementToken(t_IndonesianStemFilter *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(IndonesianStemFilter), (PyObject *) self, "incrementToken", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/packed/PackedInts$Mutable.h"
#include "org/apache/lucene/store/DataOutput.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace packed {

          ::java::lang::Class *PackedInts$Mutable::class$ = NULL;
          jmethodID *PackedInts$Mutable::mids$ = NULL;
          bool PackedInts$Mutable::live$ = false;

          jclass PackedInts$Mutable::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/util/packed/PackedInts$Mutable");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_clear_54c6a166] = env->getMethodID(cls, "clear", "()V");
              mids$[mid_fill_534bf2ff] = env->getMethodID(cls, "fill", "(IIJ)V");
              mids$[mid_getBitsPerValue_54c6a179] = env->getMethodID(cls, "getBitsPerValue", "()I");
              mids$[mid_save_27875f57] = env->getMethodID(cls, "save", "(Lorg/apache/lucene/store/DataOutput;)V");
              mids$[mid_set_03b232b5] = env->getMethodID(cls, "set", "(IJ)V");
              mids$[mid_set_d80d4c9e] = env->getMethodID(cls, "set", "(I[JII)I");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          PackedInts$Mutable::PackedInts$Mutable() : ::org::apache::lucene::util::packed::PackedInts$Reader(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          void PackedInts$Mutable::clear() const
          {
            env->callVoidMethod(this$, mids$[mid_clear_54c6a166]);
          }

          void PackedInts$Mutable::fill(jint a0, jint a1, jlong a2) const
          {
            env->callVoidMethod(this$, mids$[mid_fill_534bf2ff], a0, a1, a2);
          }

          jint PackedInts$Mutable::getBitsPerValue() const
          {
            return env->callIntMethod(this$, mids$[mid_getBitsPerValue_54c6a179]);
          }

          void PackedInts$Mutable::save(const ::org::apache::lucene::store::DataOutput & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_save_27875f57], a0.this$);
          }

          void PackedInts$Mutable::set(jint a0, jlong a1) const
          {
            env->callVoidMethod(this$, mids$[mid_set_03b232b5], a0, a1);
          }

          jint PackedInts$Mutable::set(jint a0, const JArray< jlong > & a1, jint a2, jint a3) const
          {
            return env->callIntMethod(this$, mids$[mid_set_d80d4c9e], a0, a1.this$, a2, a3);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace packed {
          static PyObject *t_PackedInts$Mutable_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PackedInts$Mutable_instance_(PyTypeObject *type, PyObject *arg);
          static int t_PackedInts$Mutable_init_(t_PackedInts$Mutable *self, PyObject *args, PyObject *kwds);
          static PyObject *t_PackedInts$Mutable_clear(t_PackedInts$Mutable *self);
          static PyObject *t_PackedInts$Mutable_fill(t_PackedInts$Mutable *self, PyObject *args);
          static PyObject *t_PackedInts$Mutable_getBitsPerValue(t_PackedInts$Mutable *self);
          static PyObject *t_PackedInts$Mutable_save(t_PackedInts$Mutable *self, PyObject *arg);
          static PyObject *t_PackedInts$Mutable_set(t_PackedInts$Mutable *self, PyObject *args);
          static PyObject *t_PackedInts$Mutable_get__bitsPerValue(t_PackedInts$Mutable *self, void *data);
          static PyGetSetDef t_PackedInts$Mutable__fields_[] = {
            DECLARE_GET_FIELD(t_PackedInts$Mutable, bitsPerValue),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_PackedInts$Mutable__methods_[] = {
            DECLARE_METHOD(t_PackedInts$Mutable, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PackedInts$Mutable, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PackedInts$Mutable, clear, METH_NOARGS),
            DECLARE_METHOD(t_PackedInts$Mutable, fill, METH_VARARGS),
            DECLARE_METHOD(t_PackedInts$Mutable, getBitsPerValue, METH_NOARGS),
            DECLARE_METHOD(t_PackedInts$Mutable, save, METH_O),
            DECLARE_METHOD(t_PackedInts$Mutable, set, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(PackedInts$Mutable, t_PackedInts$Mutable, ::org::apache::lucene::util::packed::PackedInts$Reader, PackedInts$Mutable, t_PackedInts$Mutable_init_, 0, 0, t_PackedInts$Mutable__fields_, 0, 0);

          void t_PackedInts$Mutable::install(PyObject *module)
          {
            installType(&PY_TYPE(PackedInts$Mutable), module, "PackedInts$Mutable", 0);
          }

          void t_PackedInts$Mutable::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(PackedInts$Mutable).tp_dict, "class_", make_descriptor(PackedInts$Mutable::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(PackedInts$Mutable).tp_dict, "wrapfn_", make_descriptor(t_PackedInts$Mutable::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(PackedInts$Mutable).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_PackedInts$Mutable_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, PackedInts$Mutable::initializeClass, 1)))
              return NULL;
            return t_PackedInts$Mutable::wrap_Object(PackedInts$Mutable(((t_PackedInts$Mutable *) arg)->object.this$));
          }
          static PyObject *t_PackedInts$Mutable_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, PackedInts$Mutable::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_PackedInts$Mutable_init_(t_PackedInts$Mutable *self, PyObject *args, PyObject *kwds)
          {
            PackedInts$Mutable object((jobject) NULL);

            INT_CALL(object = PackedInts$Mutable());
            self->object = object;

            return 0;
          }

          static PyObject *t_PackedInts$Mutable_clear(t_PackedInts$Mutable *self)
          {
            OBJ_CALL(self->object.clear());
            Py_RETURN_NONE;
          }

          static PyObject *t_PackedInts$Mutable_fill(t_PackedInts$Mutable *self, PyObject *args)
          {
            jint a0;
            jint a1;
            jlong a2;

            if (!parseArgs(args, "IIJ", &a0, &a1, &a2))
            {
              OBJ_CALL(self->object.fill(a0, a1, a2));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "fill", args);
            return NULL;
          }

          static PyObject *t_PackedInts$Mutable_getBitsPerValue(t_PackedInts$Mutable *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getBitsPerValue());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_PackedInts$Mutable_save(t_PackedInts$Mutable *self, PyObject *arg)
          {
            ::org::apache::lucene::store::DataOutput a0((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::store::DataOutput::initializeClass, &a0))
            {
              OBJ_CALL(self->object.save(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "save", arg);
            return NULL;
          }

          static PyObject *t_PackedInts$Mutable_set(t_PackedInts$Mutable *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 2:
              {
                jint a0;
                jlong a1;

                if (!parseArgs(args, "IJ", &a0, &a1))
                {
                  OBJ_CALL(self->object.set(a0, a1));
                  Py_RETURN_NONE;
                }
              }
              break;
             case 4:
              {
                jint a0;
                JArray< jlong > a1((jobject) NULL);
                jint a2;
                jint a3;
                jint result;

                if (!parseArgs(args, "I[JII", &a0, &a1, &a2, &a3))
                {
                  OBJ_CALL(result = self->object.set(a0, a1, a2, a3));
                  return PyInt_FromLong((long) result);
                }
              }
            }

            PyErr_SetArgsError((PyObject *) self, "set", args);
            return NULL;
          }

          static PyObject *t_PackedInts$Mutable_get__bitsPerValue(t_PackedInts$Mutable *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getBitsPerValue());
            return PyInt_FromLong((long) value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/antlr/runtime/ParserRuleReturnScope.h"
#include "java/lang/Object.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace antlr {
    namespace runtime {

      ::java::lang::Class *ParserRuleReturnScope::class$ = NULL;
      jmethodID *ParserRuleReturnScope::mids$ = NULL;
      bool ParserRuleReturnScope::live$ = false;

      jclass ParserRuleReturnScope::initializeClass(bool getOnly)
      {
        if (getOnly)
          return (jclass) (live$ ? class$->this$ : NULL);
        if (class$ == NULL)
        {
          jclass cls = (jclass) env->findClass("org/antlr/runtime/ParserRuleReturnScope");

          mids$ = new jmethodID[max_mid];
          mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
          mids$[mid_getStart_846352c3] = env->getMethodID(cls, "getStart", "()Ljava/lang/Object;");
          mids$[mid_getStop_846352c3] = env->getMethodID(cls, "getStop", "()Ljava/lang/Object;");
          mids$[mid_getTree_846352c3] = env->getMethodID(cls, "getTree", "()Ljava/lang/Object;");

          class$ = (::java::lang::Class *) new JObject(cls);
          live$ = true;
        }
        return (jclass) class$->this$;
      }

      ParserRuleReturnScope::ParserRuleReturnScope() : ::org::antlr::runtime::RuleReturnScope(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

      ::java::lang::Object ParserRuleReturnScope::getStart() const
      {
        return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_getStart_846352c3]));
      }

      ::java::lang::Object ParserRuleReturnScope::getStop() const
      {
        return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_getStop_846352c3]));
      }

      ::java::lang::Object ParserRuleReturnScope::getTree() const
      {
        return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_getTree_846352c3]));
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace antlr {
    namespace runtime {
      static PyObject *t_ParserRuleReturnScope_cast_(PyTypeObject *type, PyObject *arg);
      static PyObject *t_ParserRuleReturnScope_instance_(PyTypeObject *type, PyObject *arg);
      static int t_ParserRuleReturnScope_init_(t_ParserRuleReturnScope *self, PyObject *args, PyObject *kwds);
      static PyObject *t_ParserRuleReturnScope_getStart(t_ParserRuleReturnScope *self, PyObject *args);
      static PyObject *t_ParserRuleReturnScope_getStop(t_ParserRuleReturnScope *self, PyObject *args);
      static PyObject *t_ParserRuleReturnScope_getTree(t_ParserRuleReturnScope *self, PyObject *args);
      static PyObject *t_ParserRuleReturnScope_get__start(t_ParserRuleReturnScope *self, void *data);
      static PyObject *t_ParserRuleReturnScope_get__stop(t_ParserRuleReturnScope *self, void *data);
      static PyObject *t_ParserRuleReturnScope_get__tree(t_ParserRuleReturnScope *self, void *data);
      static PyGetSetDef t_ParserRuleReturnScope__fields_[] = {
        DECLARE_GET_FIELD(t_ParserRuleReturnScope, start),
        DECLARE_GET_FIELD(t_ParserRuleReturnScope, stop),
        DECLARE_GET_FIELD(t_ParserRuleReturnScope, tree),
        { NULL, NULL, NULL, NULL, NULL }
      };

      static PyMethodDef t_ParserRuleReturnScope__methods_[] = {
        DECLARE_METHOD(t_ParserRuleReturnScope, cast_, METH_O | METH_CLASS),
        DECLARE_METHOD(t_ParserRuleReturnScope, instance_, METH_O | METH_CLASS),
        DECLARE_METHOD(t_ParserRuleReturnScope, getStart, METH_VARARGS),
        DECLARE_METHOD(t_ParserRuleReturnScope, getStop, METH_VARARGS),
        DECLARE_METHOD(t_ParserRuleReturnScope, getTree, METH_VARARGS),
        { NULL, NULL, 0, NULL }
      };

      DECLARE_TYPE(ParserRuleReturnScope, t_ParserRuleReturnScope, ::org::antlr::runtime::RuleReturnScope, ParserRuleReturnScope, t_ParserRuleReturnScope_init_, 0, 0, t_ParserRuleReturnScope__fields_, 0, 0);

      void t_ParserRuleReturnScope::install(PyObject *module)
      {
        installType(&PY_TYPE(ParserRuleReturnScope), module, "ParserRuleReturnScope", 0);
      }

      void t_ParserRuleReturnScope::initialize(PyObject *module)
      {
        PyDict_SetItemString(PY_TYPE(ParserRuleReturnScope).tp_dict, "class_", make_descriptor(ParserRuleReturnScope::initializeClass, 1));
        PyDict_SetItemString(PY_TYPE(ParserRuleReturnScope).tp_dict, "wrapfn_", make_descriptor(t_ParserRuleReturnScope::wrap_jobject));
        PyDict_SetItemString(PY_TYPE(ParserRuleReturnScope).tp_dict, "boxfn_", make_descriptor(boxObject));
      }

      static PyObject *t_ParserRuleReturnScope_cast_(PyTypeObject *type, PyObject *arg)
      {
        if (!(arg = castCheck(arg, ParserRuleReturnScope::initializeClass, 1)))
          return NULL;
        return t_ParserRuleReturnScope::wrap_Object(ParserRuleReturnScope(((t_ParserRuleReturnScope *) arg)->object.this$));
      }
      static PyObject *t_ParserRuleReturnScope_instance_(PyTypeObject *type, PyObject *arg)
      {
        if (!castCheck(arg, ParserRuleReturnScope::initializeClass, 0))
          Py_RETURN_FALSE;
        Py_RETURN_TRUE;
      }

      static int t_ParserRuleReturnScope_init_(t_ParserRuleReturnScope *self, PyObject *args, PyObject *kwds)
      {
        ParserRuleReturnScope object((jobject) NULL);

        INT_CALL(object = ParserRuleReturnScope());
        self->object = object;

        return 0;
      }

      static PyObject *t_ParserRuleReturnScope_getStart(t_ParserRuleReturnScope *self, PyObject *args)
      {
        ::java::lang::Object result((jobject) NULL);

        if (!parseArgs(args, ""))
        {
          OBJ_CALL(result = self->object.getStart());
          return ::java::lang::t_Object::wrap_Object(result);
        }

        return callSuper(&PY_TYPE(ParserRuleReturnScope), (PyObject *) self, "getStart", args, 2);
      }

      static PyObject *t_ParserRuleReturnScope_getStop(t_ParserRuleReturnScope *self, PyObject *args)
      {
        ::java::lang::Object result((jobject) NULL);

        if (!parseArgs(args, ""))
        {
          OBJ_CALL(result = self->object.getStop());
          return ::java::lang::t_Object::wrap_Object(result);
        }

        return callSuper(&PY_TYPE(ParserRuleReturnScope), (PyObject *) self, "getStop", args, 2);
      }

      static PyObject *t_ParserRuleReturnScope_getTree(t_ParserRuleReturnScope *self, PyObject *args)
      {
        ::java::lang::Object result((jobject) NULL);

        if (!parseArgs(args, ""))
        {
          OBJ_CALL(result = self->object.getTree());
          return ::java::lang::t_Object::wrap_Object(result);
        }

        return callSuper(&PY_TYPE(ParserRuleReturnScope), (PyObject *) self, "getTree", args, 2);
      }

      static PyObject *t_ParserRuleReturnScope_get__start(t_ParserRuleReturnScope *self, void *data)
      {
        ::java::lang::Object value((jobject) NULL);
        OBJ_CALL(value = self->object.getStart());
        return ::java::lang::t_Object::wrap_Object(value);
      }

      static PyObject *t_ParserRuleReturnScope_get__stop(t_ParserRuleReturnScope *self, void *data)
      {
        ::java::lang::Object value((jobject) NULL);
        OBJ_CALL(value = self->object.getStop());
        return ::java::lang::t_Object::wrap_Object(value);
      }

      static PyObject *t_ParserRuleReturnScope_get__tree(t_ParserRuleReturnScope *self, void *data)
      {
        ::java::lang::Object value((jobject) NULL);
        OBJ_CALL(value = self->object.getTree());
        return ::java::lang::t_Object::wrap_Object(value);
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/vectorhighlight/FastVectorHighlighter.h"
#include "org/apache/lucene/search/vectorhighlight/FragListBuilder.h"
#include "org/apache/lucene/search/vectorhighlight/FragmentsBuilder.h"
#include "java/lang/Class.h"
#include "java/util/Set.h"
#include "java/io/IOException.h"
#include "java/lang/String.h"
#include "org/apache/lucene/search/vectorhighlight/FieldQuery.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "org/apache/lucene/search/highlight/Encoder.h"
#include "org/apache/lucene/search/Query.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace vectorhighlight {

          ::java::lang::Class *FastVectorHighlighter::class$ = NULL;
          jmethodID *FastVectorHighlighter::mids$ = NULL;
          bool FastVectorHighlighter::live$ = false;
          jboolean FastVectorHighlighter::DEFAULT_FIELD_MATCH = (jboolean) 0;
          jboolean FastVectorHighlighter::DEFAULT_PHRASE_HIGHLIGHT = (jboolean) 0;

          jclass FastVectorHighlighter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/vectorhighlight/FastVectorHighlighter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_init$_46f2e2c4] = env->getMethodID(cls, "<init>", "(ZZ)V");
              mids$[mid_init$_35aba53c] = env->getMethodID(cls, "<init>", "(ZZLorg/apache/lucene/search/vectorhighlight/FragListBuilder;Lorg/apache/lucene/search/vectorhighlight/FragmentsBuilder;)V");
              mids$[mid_getBestFragment_dab3f1b2] = env->getMethodID(cls, "getBestFragment", "(Lorg/apache/lucene/search/vectorhighlight/FieldQuery;Lorg/apache/lucene/index/IndexReader;ILjava/lang/String;I)Ljava/lang/String;");
              mids$[mid_getBestFragment_71cd1532] = env->getMethodID(cls, "getBestFragment", "(Lorg/apache/lucene/search/vectorhighlight/FieldQuery;Lorg/apache/lucene/index/IndexReader;ILjava/lang/String;ILorg/apache/lucene/search/vectorhighlight/FragListBuilder;Lorg/apache/lucene/search/vectorhighlight/FragmentsBuilder;[Ljava/lang/String;[Ljava/lang/String;Lorg/apache/lucene/search/highlight/Encoder;)Ljava/lang/String;");
              mids$[mid_getBestFragments_f180a9d4] = env->getMethodID(cls, "getBestFragments", "(Lorg/apache/lucene/search/vectorhighlight/FieldQuery;Lorg/apache/lucene/index/IndexReader;ILjava/lang/String;II)[Ljava/lang/String;");
              mids$[mid_getBestFragments_d3e90fd8] = env->getMethodID(cls, "getBestFragments", "(Lorg/apache/lucene/search/vectorhighlight/FieldQuery;Lorg/apache/lucene/index/IndexReader;ILjava/lang/String;IILorg/apache/lucene/search/vectorhighlight/FragListBuilder;Lorg/apache/lucene/search/vectorhighlight/FragmentsBuilder;[Ljava/lang/String;[Ljava/lang/String;Lorg/apache/lucene/search/highlight/Encoder;)[Ljava/lang/String;");
              mids$[mid_getBestFragments_5366ca3a] = env->getMethodID(cls, "getBestFragments", "(Lorg/apache/lucene/search/vectorhighlight/FieldQuery;Lorg/apache/lucene/index/IndexReader;ILjava/lang/String;Ljava/util/Set;IILorg/apache/lucene/search/vectorhighlight/FragListBuilder;Lorg/apache/lucene/search/vectorhighlight/FragmentsBuilder;[Ljava/lang/String;[Ljava/lang/String;Lorg/apache/lucene/search/highlight/Encoder;)[Ljava/lang/String;");
              mids$[mid_getFieldQuery_b2d7cb3a] = env->getMethodID(cls, "getFieldQuery", "(Lorg/apache/lucene/search/Query;)Lorg/apache/lucene/search/vectorhighlight/FieldQuery;");
              mids$[mid_getFieldQuery_6934781b] = env->getMethodID(cls, "getFieldQuery", "(Lorg/apache/lucene/search/Query;Lorg/apache/lucene/index/IndexReader;)Lorg/apache/lucene/search/vectorhighlight/FieldQuery;");
              mids$[mid_getPhraseLimit_54c6a179] = env->getMethodID(cls, "getPhraseLimit", "()I");
              mids$[mid_isFieldMatch_54c6a16a] = env->getMethodID(cls, "isFieldMatch", "()Z");
              mids$[mid_isPhraseHighlight_54c6a16a] = env->getMethodID(cls, "isPhraseHighlight", "()Z");
              mids$[mid_setPhraseLimit_39c7bd3c] = env->getMethodID(cls, "setPhraseLimit", "(I)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              DEFAULT_FIELD_MATCH = env->getStaticBooleanField(cls, "DEFAULT_FIELD_MATCH");
              DEFAULT_PHRASE_HIGHLIGHT = env->getStaticBooleanField(cls, "DEFAULT_PHRASE_HIGHLIGHT");
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          FastVectorHighlighter::FastVectorHighlighter() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          FastVectorHighlighter::FastVectorHighlighter(jboolean a0, jboolean a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_46f2e2c4, a0, a1)) {}

          FastVectorHighlighter::FastVectorHighlighter(jboolean a0, jboolean a1, const ::org::apache::lucene::search::vectorhighlight::FragListBuilder & a2, const ::org::apache::lucene::search::vectorhighlight::FragmentsBuilder & a3) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_35aba53c, a0, a1, a2.this$, a3.this$)) {}

          ::java::lang::String FastVectorHighlighter::getBestFragment(const ::org::apache::lucene::search::vectorhighlight::FieldQuery & a0, const ::org::apache::lucene::index::IndexReader & a1, jint a2, const ::java::lang::String & a3, jint a4) const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getBestFragment_dab3f1b2], a0.this$, a1.this$, a2, a3.this$, a4));
          }

          ::java::lang::String FastVectorHighlighter::getBestFragment(const ::org::apache::lucene::search::vectorhighlight::FieldQuery & a0, const ::org::apache::lucene::index::IndexReader & a1, jint a2, const ::java::lang::String & a3, jint a4, const ::org::apache::lucene::search::vectorhighlight::FragListBuilder & a5, const ::org::apache::lucene::search::vectorhighlight::FragmentsBuilder & a6, const JArray< ::java::lang::String > & a7, const JArray< ::java::lang::String > & a8, const ::org::apache::lucene::search::highlight::Encoder & a9) const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getBestFragment_71cd1532], a0.this$, a1.this$, a2, a3.this$, a4, a5.this$, a6.this$, a7.this$, a8.this$, a9.this$));
          }

          JArray< ::java::lang::String > FastVectorHighlighter::getBestFragments(const ::org::apache::lucene::search::vectorhighlight::FieldQuery & a0, const ::org::apache::lucene::index::IndexReader & a1, jint a2, const ::java::lang::String & a3, jint a4, jint a5) const
          {
            return JArray< ::java::lang::String >(env->callObjectMethod(this$, mids$[mid_getBestFragments_f180a9d4], a0.this$, a1.this$, a2, a3.this$, a4, a5));
          }

          JArray< ::java::lang::String > FastVectorHighlighter::getBestFragments(const ::org::apache::lucene::search::vectorhighlight::FieldQuery & a0, const ::org::apache::lucene::index::IndexReader & a1, jint a2, const ::java::lang::String & a3, jint a4, jint a5, const ::org::apache::lucene::search::vectorhighlight::FragListBuilder & a6, const ::org::apache::lucene::search::vectorhighlight::FragmentsBuilder & a7, const JArray< ::java::lang::String > & a8, const JArray< ::java::lang::String > & a9, const ::org::apache::lucene::search::highlight::Encoder & a10) const
          {
            return JArray< ::java::lang::String >(env->callObjectMethod(this$, mids$[mid_getBestFragments_d3e90fd8], a0.this$, a1.this$, a2, a3.this$, a4, a5, a6.this$, a7.this$, a8.this$, a9.this$, a10.this$));
          }

          JArray< ::java::lang::String > FastVectorHighlighter::getBestFragments(const ::org::apache::lucene::search::vectorhighlight::FieldQuery & a0, const ::org::apache::lucene::index::IndexReader & a1, jint a2, const ::java::lang::String & a3, const ::java::util::Set & a4, jint a5, jint a6, const ::org::apache::lucene::search::vectorhighlight::FragListBuilder & a7, const ::org::apache::lucene::search::vectorhighlight::FragmentsBuilder & a8, const JArray< ::java::lang::String > & a9, const JArray< ::java::lang::String > & a10, const ::org::apache::lucene::search::highlight::Encoder & a11) const
          {
            return JArray< ::java::lang::String >(env->callObjectMethod(this$, mids$[mid_getBestFragments_5366ca3a], a0.this$, a1.this$, a2, a3.this$, a4.this$, a5, a6, a7.this$, a8.this$, a9.this$, a10.this$, a11.this$));
          }

          ::org::apache::lucene::search::vectorhighlight::FieldQuery FastVectorHighlighter::getFieldQuery(const ::org::apache::lucene::search::Query & a0) const
          {
            return ::org::apache::lucene::search::vectorhighlight::FieldQuery(env->callObjectMethod(this$, mids$[mid_getFieldQuery_b2d7cb3a], a0.this$));
          }

          ::org::apache::lucene::search::vectorhighlight::FieldQuery FastVectorHighlighter::getFieldQuery(const ::org::apache::lucene::search::Query & a0, const ::org::apache::lucene::index::IndexReader & a1) const
          {
            return ::org::apache::lucene::search::vectorhighlight::FieldQuery(env->callObjectMethod(this$, mids$[mid_getFieldQuery_6934781b], a0.this$, a1.this$));
          }

          jint FastVectorHighlighter::getPhraseLimit() const
          {
            return env->callIntMethod(this$, mids$[mid_getPhraseLimit_54c6a179]);
          }

          jboolean FastVectorHighlighter::isFieldMatch() const
          {
            return env->callBooleanMethod(this$, mids$[mid_isFieldMatch_54c6a16a]);
          }

          jboolean FastVectorHighlighter::isPhraseHighlight() const
          {
            return env->callBooleanMethod(this$, mids$[mid_isPhraseHighlight_54c6a16a]);
          }

          void FastVectorHighlighter::setPhraseLimit(jint a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setPhraseLimit_39c7bd3c], a0);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace vectorhighlight {
          static PyObject *t_FastVectorHighlighter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_FastVectorHighlighter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_FastVectorHighlighter_init_(t_FastVectorHighlighter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_FastVectorHighlighter_getBestFragment(t_FastVectorHighlighter *self, PyObject *args);
          static PyObject *t_FastVectorHighlighter_getBestFragments(t_FastVectorHighlighter *self, PyObject *args);
          static PyObject *t_FastVectorHighlighter_getFieldQuery(t_FastVectorHighlighter *self, PyObject *args);
          static PyObject *t_FastVectorHighlighter_getPhraseLimit(t_FastVectorHighlighter *self);
          static PyObject *t_FastVectorHighlighter_isFieldMatch(t_FastVectorHighlighter *self);
          static PyObject *t_FastVectorHighlighter_isPhraseHighlight(t_FastVectorHighlighter *self);
          static PyObject *t_FastVectorHighlighter_setPhraseLimit(t_FastVectorHighlighter *self, PyObject *arg);
          static PyObject *t_FastVectorHighlighter_get__fieldMatch(t_FastVectorHighlighter *self, void *data);
          static PyObject *t_FastVectorHighlighter_get__phraseHighlight(t_FastVectorHighlighter *self, void *data);
          static PyObject *t_FastVectorHighlighter_get__phraseLimit(t_FastVectorHighlighter *self, void *data);
          static int t_FastVectorHighlighter_set__phraseLimit(t_FastVectorHighlighter *self, PyObject *arg, void *data);
          static PyGetSetDef t_FastVectorHighlighter__fields_[] = {
            DECLARE_GET_FIELD(t_FastVectorHighlighter, fieldMatch),
            DECLARE_GET_FIELD(t_FastVectorHighlighter, phraseHighlight),
            DECLARE_GETSET_FIELD(t_FastVectorHighlighter, phraseLimit),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_FastVectorHighlighter__methods_[] = {
            DECLARE_METHOD(t_FastVectorHighlighter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FastVectorHighlighter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FastVectorHighlighter, getBestFragment, METH_VARARGS),
            DECLARE_METHOD(t_FastVectorHighlighter, getBestFragments, METH_VARARGS),
            DECLARE_METHOD(t_FastVectorHighlighter, getFieldQuery, METH_VARARGS),
            DECLARE_METHOD(t_FastVectorHighlighter, getPhraseLimit, METH_NOARGS),
            DECLARE_METHOD(t_FastVectorHighlighter, isFieldMatch, METH_NOARGS),
            DECLARE_METHOD(t_FastVectorHighlighter, isPhraseHighlight, METH_NOARGS),
            DECLARE_METHOD(t_FastVectorHighlighter, setPhraseLimit, METH_O),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(FastVectorHighlighter, t_FastVectorHighlighter, ::java::lang::Object, FastVectorHighlighter, t_FastVectorHighlighter_init_, 0, 0, t_FastVectorHighlighter__fields_, 0, 0);

          void t_FastVectorHighlighter::install(PyObject *module)
          {
            installType(&PY_TYPE(FastVectorHighlighter), module, "FastVectorHighlighter", 0);
          }

          void t_FastVectorHighlighter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(FastVectorHighlighter).tp_dict, "class_", make_descriptor(FastVectorHighlighter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(FastVectorHighlighter).tp_dict, "wrapfn_", make_descriptor(t_FastVectorHighlighter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(FastVectorHighlighter).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(FastVectorHighlighter::initializeClass);
            PyDict_SetItemString(PY_TYPE(FastVectorHighlighter).tp_dict, "DEFAULT_FIELD_MATCH", make_descriptor(FastVectorHighlighter::DEFAULT_FIELD_MATCH));
            PyDict_SetItemString(PY_TYPE(FastVectorHighlighter).tp_dict, "DEFAULT_PHRASE_HIGHLIGHT", make_descriptor(FastVectorHighlighter::DEFAULT_PHRASE_HIGHLIGHT));
          }

          static PyObject *t_FastVectorHighlighter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, FastVectorHighlighter::initializeClass, 1)))
              return NULL;
            return t_FastVectorHighlighter::wrap_Object(FastVectorHighlighter(((t_FastVectorHighlighter *) arg)->object.this$));
          }
          static PyObject *t_FastVectorHighlighter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, FastVectorHighlighter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_FastVectorHighlighter_init_(t_FastVectorHighlighter *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 0:
              {
                FastVectorHighlighter object((jobject) NULL);

                INT_CALL(object = FastVectorHighlighter());
                self->object = object;
                break;
              }
              goto err;
             case 2:
              {
                jboolean a0;
                jboolean a1;
                FastVectorHighlighter object((jobject) NULL);

                if (!parseArgs(args, "ZZ", &a0, &a1))
                {
                  INT_CALL(object = FastVectorHighlighter(a0, a1));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 4:
              {
                jboolean a0;
                jboolean a1;
                ::org::apache::lucene::search::vectorhighlight::FragListBuilder a2((jobject) NULL);
                ::org::apache::lucene::search::vectorhighlight::FragmentsBuilder a3((jobject) NULL);
                FastVectorHighlighter object((jobject) NULL);

                if (!parseArgs(args, "ZZkk", ::org::apache::lucene::search::vectorhighlight::FragListBuilder::initializeClass, ::org::apache::lucene::search::vectorhighlight::FragmentsBuilder::initializeClass, &a0, &a1, &a2, &a3))
                {
                  INT_CALL(object = FastVectorHighlighter(a0, a1, a2, a3));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_FastVectorHighlighter_getBestFragment(t_FastVectorHighlighter *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 5:
              {
                ::org::apache::lucene::search::vectorhighlight::FieldQuery a0((jobject) NULL);
                ::org::apache::lucene::index::IndexReader a1((jobject) NULL);
                jint a2;
                ::java::lang::String a3((jobject) NULL);
                jint a4;
                ::java::lang::String result((jobject) NULL);

                if (!parseArgs(args, "kkIsI", ::org::apache::lucene::search::vectorhighlight::FieldQuery::initializeClass, ::org::apache::lucene::index::IndexReader::initializeClass, &a0, &a1, &a2, &a3, &a4))
                {
                  OBJ_CALL(result = self->object.getBestFragment(a0, a1, a2, a3, a4));
                  return j2p(result);
                }
              }
              break;
             case 10:
              {
                ::org::apache::lucene::search::vectorhighlight::FieldQuery a0((jobject) NULL);
                ::org::apache::lucene::index::IndexReader a1((jobject) NULL);
                jint a2;
                ::java::lang::String a3((jobject) NULL);
                jint a4;
                ::org::apache::lucene::search::vectorhighlight::FragListBuilder a5((jobject) NULL);
                ::org::apache::lucene::search::vectorhighlight::FragmentsBuilder a6((jobject) NULL);
                JArray< ::java::lang::String > a7((jobject) NULL);
                JArray< ::java::lang::String > a8((jobject) NULL);
                ::org::apache::lucene::search::highlight::Encoder a9((jobject) NULL);
                ::java::lang::String result((jobject) NULL);

                if (!parseArgs(args, "kkIsIkk[s[sk", ::org::apache::lucene::search::vectorhighlight::FieldQuery::initializeClass, ::org::apache::lucene::index::IndexReader::initializeClass, ::org::apache::lucene::search::vectorhighlight::FragListBuilder::initializeClass, ::org::apache::lucene::search::vectorhighlight::FragmentsBuilder::initializeClass, ::org::apache::lucene::search::highlight::Encoder::initializeClass, &a0, &a1, &a2, &a3, &a4, &a5, &a6, &a7, &a8, &a9))
                {
                  OBJ_CALL(result = self->object.getBestFragment(a0, a1, a2, a3, a4, a5, a6, a7, a8, a9));
                  return j2p(result);
                }
              }
            }

            PyErr_SetArgsError((PyObject *) self, "getBestFragment", args);
            return NULL;
          }

          static PyObject *t_FastVectorHighlighter_getBestFragments(t_FastVectorHighlighter *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 6:
              {
                ::org::apache::lucene::search::vectorhighlight::FieldQuery a0((jobject) NULL);
                ::org::apache::lucene::index::IndexReader a1((jobject) NULL);
                jint a2;
                ::java::lang::String a3((jobject) NULL);
                jint a4;
                jint a5;
                JArray< ::java::lang::String > result((jobject) NULL);

                if (!parseArgs(args, "kkIsII", ::org::apache::lucene::search::vectorhighlight::FieldQuery::initializeClass, ::org::apache::lucene::index::IndexReader::initializeClass, &a0, &a1, &a2, &a3, &a4, &a5))
                {
                  OBJ_CALL(result = self->object.getBestFragments(a0, a1, a2, a3, a4, a5));
                  return JArray<jstring>(result.this$).wrap();
                }
              }
              break;
             case 11:
              {
                ::org::apache::lucene::search::vectorhighlight::FieldQuery a0((jobject) NULL);
                ::org::apache::lucene::index::IndexReader a1((jobject) NULL);
                jint a2;
                ::java::lang::String a3((jobject) NULL);
                jint a4;
                jint a5;
                ::org::apache::lucene::search::vectorhighlight::FragListBuilder a6((jobject) NULL);
                ::org::apache::lucene::search::vectorhighlight::FragmentsBuilder a7((jobject) NULL);
                JArray< ::java::lang::String > a8((jobject) NULL);
                JArray< ::java::lang::String > a9((jobject) NULL);
                ::org::apache::lucene::search::highlight::Encoder a10((jobject) NULL);
                JArray< ::java::lang::String > result((jobject) NULL);

                if (!parseArgs(args, "kkIsIIkk[s[sk", ::org::apache::lucene::search::vectorhighlight::FieldQuery::initializeClass, ::org::apache::lucene::index::IndexReader::initializeClass, ::org::apache::lucene::search::vectorhighlight::FragListBuilder::initializeClass, ::org::apache::lucene::search::vectorhighlight::FragmentsBuilder::initializeClass, ::org::apache::lucene::search::highlight::Encoder::initializeClass, &a0, &a1, &a2, &a3, &a4, &a5, &a6, &a7, &a8, &a9, &a10))
                {
                  OBJ_CALL(result = self->object.getBestFragments(a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10));
                  return JArray<jstring>(result.this$).wrap();
                }
              }
              break;
             case 12:
              {
                ::org::apache::lucene::search::vectorhighlight::FieldQuery a0((jobject) NULL);
                ::org::apache::lucene::index::IndexReader a1((jobject) NULL);
                jint a2;
                ::java::lang::String a3((jobject) NULL);
                ::java::util::Set a4((jobject) NULL);
                PyTypeObject **p4;
                jint a5;
                jint a6;
                ::org::apache::lucene::search::vectorhighlight::FragListBuilder a7((jobject) NULL);
                ::org::apache::lucene::search::vectorhighlight::FragmentsBuilder a8((jobject) NULL);
                JArray< ::java::lang::String > a9((jobject) NULL);
                JArray< ::java::lang::String > a10((jobject) NULL);
                ::org::apache::lucene::search::highlight::Encoder a11((jobject) NULL);
                JArray< ::java::lang::String > result((jobject) NULL);

                if (!parseArgs(args, "kkIsKIIkk[s[sk", ::org::apache::lucene::search::vectorhighlight::FieldQuery::initializeClass, ::org::apache::lucene::index::IndexReader::initializeClass, ::java::util::Set::initializeClass, ::org::apache::lucene::search::vectorhighlight::FragListBuilder::initializeClass, ::org::apache::lucene::search::vectorhighlight::FragmentsBuilder::initializeClass, ::org::apache::lucene::search::highlight::Encoder::initializeClass, &a0, &a1, &a2, &a3, &a4, &p4, ::java::util::t_Set::parameters_, &a5, &a6, &a7, &a8, &a9, &a10, &a11))
                {
                  OBJ_CALL(result = self->object.getBestFragments(a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11));
                  return JArray<jstring>(result.this$).wrap();
                }
              }
            }

            PyErr_SetArgsError((PyObject *) self, "getBestFragments", args);
            return NULL;
          }

          static PyObject *t_FastVectorHighlighter_getFieldQuery(t_FastVectorHighlighter *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::org::apache::lucene::search::Query a0((jobject) NULL);
                ::org::apache::lucene::search::vectorhighlight::FieldQuery result((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::search::Query::initializeClass, &a0))
                {
                  OBJ_CALL(result = self->object.getFieldQuery(a0));
                  return ::org::apache::lucene::search::vectorhighlight::t_FieldQuery::wrap_Object(result);
                }
              }
              break;
             case 2:
              {
                ::org::apache::lucene::search::Query a0((jobject) NULL);
                ::org::apache::lucene::index::IndexReader a1((jobject) NULL);
                ::org::apache::lucene::search::vectorhighlight::FieldQuery result((jobject) NULL);

                if (!parseArgs(args, "kk", ::org::apache::lucene::search::Query::initializeClass, ::org::apache::lucene::index::IndexReader::initializeClass, &a0, &a1))
                {
                  OBJ_CALL(result = self->object.getFieldQuery(a0, a1));
                  return ::org::apache::lucene::search::vectorhighlight::t_FieldQuery::wrap_Object(result);
                }
              }
            }

            PyErr_SetArgsError((PyObject *) self, "getFieldQuery", args);
            return NULL;
          }

          static PyObject *t_FastVectorHighlighter_getPhraseLimit(t_FastVectorHighlighter *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getPhraseLimit());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_FastVectorHighlighter_isFieldMatch(t_FastVectorHighlighter *self)
          {
            jboolean result;
            OBJ_CALL(result = self->object.isFieldMatch());
            Py_RETURN_BOOL(result);
          }

          static PyObject *t_FastVectorHighlighter_isPhraseHighlight(t_FastVectorHighlighter *self)
          {
            jboolean result;
            OBJ_CALL(result = self->object.isPhraseHighlight());
            Py_RETURN_BOOL(result);
          }

          static PyObject *t_FastVectorHighlighter_setPhraseLimit(t_FastVectorHighlighter *self, PyObject *arg)
          {
            jint a0;

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(self->object.setPhraseLimit(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setPhraseLimit", arg);
            return NULL;
          }

          static PyObject *t_FastVectorHighlighter_get__fieldMatch(t_FastVectorHighlighter *self, void *data)
          {
            jboolean value;
            OBJ_CALL(value = self->object.isFieldMatch());
            Py_RETURN_BOOL(value);
          }

          static PyObject *t_FastVectorHighlighter_get__phraseHighlight(t_FastVectorHighlighter *self, void *data)
          {
            jboolean value;
            OBJ_CALL(value = self->object.isPhraseHighlight());
            Py_RETURN_BOOL(value);
          }

          static PyObject *t_FastVectorHighlighter_get__phraseLimit(t_FastVectorHighlighter *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getPhraseLimit());
            return PyInt_FromLong((long) value);
          }
          static int t_FastVectorHighlighter_set__phraseLimit(t_FastVectorHighlighter *self, PyObject *arg, void *data)
          {
            {
              jint value;
              if (!parseArg(arg, "I", &value))
              {
                INT_CALL(self->object.setPhraseLimit(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "phraseLimit", arg);
            return -1;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/StringHelper.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "java/util/Comparator.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *StringHelper::class$ = NULL;
        jmethodID *StringHelper::mids$ = NULL;
        bool StringHelper::live$ = false;
        jint StringHelper::GOOD_FAST_HASH_SEED = (jint) 0;

        jclass StringHelper::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/StringHelper");

            mids$ = new jmethodID[max_mid];
            mids$[mid_bytesDifference_594e5ef9] = env->getStaticMethodID(cls, "bytesDifference", "(Lorg/apache/lucene/util/BytesRef;Lorg/apache/lucene/util/BytesRef;)I");
            mids$[mid_endsWith_594e5eea] = env->getStaticMethodID(cls, "endsWith", "(Lorg/apache/lucene/util/BytesRef;Lorg/apache/lucene/util/BytesRef;)Z");
            mids$[mid_equals_4a26474e] = env->getStaticMethodID(cls, "equals", "(Ljava/lang/String;Ljava/lang/String;)Z");
            mids$[mid_getVersionComparator_5a7ff2fc] = env->getStaticMethodID(cls, "getVersionComparator", "()Ljava/util/Comparator;");
            mids$[mid_murmurhash3_x86_32_738fc2d1] = env->getStaticMethodID(cls, "murmurhash3_x86_32", "(Lorg/apache/lucene/util/BytesRef;I)I");
            mids$[mid_murmurhash3_x86_32_96a25f14] = env->getStaticMethodID(cls, "murmurhash3_x86_32", "([BIII)I");
            mids$[mid_startsWith_594e5eea] = env->getStaticMethodID(cls, "startsWith", "(Lorg/apache/lucene/util/BytesRef;Lorg/apache/lucene/util/BytesRef;)Z");

            class$ = (::java::lang::Class *) new JObject(cls);
            cls = (jclass) class$->this$;

            GOOD_FAST_HASH_SEED = env->getStaticIntField(cls, "GOOD_FAST_HASH_SEED");
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        jint StringHelper::bytesDifference(const ::org::apache::lucene::util::BytesRef & a0, const ::org::apache::lucene::util::BytesRef & a1)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticIntMethod(cls, mids$[mid_bytesDifference_594e5ef9], a0.this$, a1.this$);
        }

        jboolean StringHelper::endsWith(const ::org::apache::lucene::util::BytesRef & a0, const ::org::apache::lucene::util::BytesRef & a1)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticBooleanMethod(cls, mids$[mid_endsWith_594e5eea], a0.this$, a1.this$);
        }

        jboolean StringHelper::equals(const ::java::lang::String & a0, const ::java::lang::String & a1)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticBooleanMethod(cls, mids$[mid_equals_4a26474e], a0.this$, a1.this$);
        }

        ::java::util::Comparator StringHelper::getVersionComparator()
        {
          jclass cls = env->getClass(initializeClass);
          return ::java::util::Comparator(env->callStaticObjectMethod(cls, mids$[mid_getVersionComparator_5a7ff2fc]));
        }

        jint StringHelper::murmurhash3_x86_32(const ::org::apache::lucene::util::BytesRef & a0, jint a1)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticIntMethod(cls, mids$[mid_murmurhash3_x86_32_738fc2d1], a0.this$, a1);
        }

        jint StringHelper::murmurhash3_x86_32(const JArray< jbyte > & a0, jint a1, jint a2, jint a3)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticIntMethod(cls, mids$[mid_murmurhash3_x86_32_96a25f14], a0.this$, a1, a2, a3);
        }

        jboolean StringHelper::startsWith(const ::org::apache::lucene::util::BytesRef & a0, const ::org::apache::lucene::util::BytesRef & a1)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticBooleanMethod(cls, mids$[mid_startsWith_594e5eea], a0.this$, a1.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_StringHelper_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_StringHelper_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_StringHelper_bytesDifference(PyTypeObject *type, PyObject *args);
        static PyObject *t_StringHelper_endsWith(PyTypeObject *type, PyObject *args);
        static PyObject *t_StringHelper_equals(PyTypeObject *type, PyObject *args);
        static PyObject *t_StringHelper_getVersionComparator(PyTypeObject *type);
        static PyObject *t_StringHelper_murmurhash3_x86_32(PyTypeObject *type, PyObject *args);
        static PyObject *t_StringHelper_startsWith(PyTypeObject *type, PyObject *args);
        static PyObject *t_StringHelper_get__versionComparator(t_StringHelper *self, void *data);
        static PyGetSetDef t_StringHelper__fields_[] = {
          DECLARE_GET_FIELD(t_StringHelper, versionComparator),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_StringHelper__methods_[] = {
          DECLARE_METHOD(t_StringHelper, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_StringHelper, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_StringHelper, bytesDifference, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_StringHelper, endsWith, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_StringHelper, equals, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_StringHelper, getVersionComparator, METH_NOARGS | METH_CLASS),
          DECLARE_METHOD(t_StringHelper, murmurhash3_x86_32, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_StringHelper, startsWith, METH_VARARGS | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(StringHelper, t_StringHelper, ::java::lang::Object, StringHelper, abstract_init, 0, 0, t_StringHelper__fields_, 0, 0);

        void t_StringHelper::install(PyObject *module)
        {
          installType(&PY_TYPE(StringHelper), module, "StringHelper", 0);
        }

        void t_StringHelper::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(StringHelper).tp_dict, "class_", make_descriptor(StringHelper::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(StringHelper).tp_dict, "wrapfn_", make_descriptor(t_StringHelper::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(StringHelper).tp_dict, "boxfn_", make_descriptor(boxObject));
          env->getClass(StringHelper::initializeClass);
          PyDict_SetItemString(PY_TYPE(StringHelper).tp_dict, "GOOD_FAST_HASH_SEED", make_descriptor(StringHelper::GOOD_FAST_HASH_SEED));
        }

        static PyObject *t_StringHelper_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, StringHelper::initializeClass, 1)))
            return NULL;
          return t_StringHelper::wrap_Object(StringHelper(((t_StringHelper *) arg)->object.this$));
        }
        static PyObject *t_StringHelper_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, StringHelper::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_StringHelper_bytesDifference(PyTypeObject *type, PyObject *args)
        {
          ::org::apache::lucene::util::BytesRef a0((jobject) NULL);
          ::org::apache::lucene::util::BytesRef a1((jobject) NULL);
          jint result;

          if (!parseArgs(args, "kk", ::org::apache::lucene::util::BytesRef::initializeClass, ::org::apache::lucene::util::BytesRef::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = ::org::apache::lucene::util::StringHelper::bytesDifference(a0, a1));
            return PyInt_FromLong((long) result);
          }

          PyErr_SetArgsError(type, "bytesDifference", args);
          return NULL;
        }

        static PyObject *t_StringHelper_endsWith(PyTypeObject *type, PyObject *args)
        {
          ::org::apache::lucene::util::BytesRef a0((jobject) NULL);
          ::org::apache::lucene::util::BytesRef a1((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "kk", ::org::apache::lucene::util::BytesRef::initializeClass, ::org::apache::lucene::util::BytesRef::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = ::org::apache::lucene::util::StringHelper::endsWith(a0, a1));
            Py_RETURN_BOOL(result);
          }

          PyErr_SetArgsError(type, "endsWith", args);
          return NULL;
        }

        static PyObject *t_StringHelper_equals(PyTypeObject *type, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::java::lang::String a1((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "ss", &a0, &a1))
          {
            OBJ_CALL(result = ::org::apache::lucene::util::StringHelper::equals(a0, a1));
            Py_RETURN_BOOL(result);
          }

          return callSuper(type, "equals", args, 2);
        }

        static PyObject *t_StringHelper_getVersionComparator(PyTypeObject *type)
        {
          ::java::util::Comparator result((jobject) NULL);
          OBJ_CALL(result = ::org::apache::lucene::util::StringHelper::getVersionComparator());
          return ::java::util::t_Comparator::wrap_Object(result, &::java::lang::PY_TYPE(String));
        }

        static PyObject *t_StringHelper_murmurhash3_x86_32(PyTypeObject *type, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 2:
            {
              ::org::apache::lucene::util::BytesRef a0((jobject) NULL);
              jint a1;
              jint result;

              if (!parseArgs(args, "kI", ::org::apache::lucene::util::BytesRef::initializeClass, &a0, &a1))
              {
                OBJ_CALL(result = ::org::apache::lucene::util::StringHelper::murmurhash3_x86_32(a0, a1));
                return PyInt_FromLong((long) result);
              }
            }
            break;
           case 4:
            {
              JArray< jbyte > a0((jobject) NULL);
              jint a1;
              jint a2;
              jint a3;
              jint result;

              if (!parseArgs(args, "[BIII", &a0, &a1, &a2, &a3))
              {
                OBJ_CALL(result = ::org::apache::lucene::util::StringHelper::murmurhash3_x86_32(a0, a1, a2, a3));
                return PyInt_FromLong((long) result);
              }
            }
          }

          PyErr_SetArgsError(type, "murmurhash3_x86_32", args);
          return NULL;
        }

        static PyObject *t_StringHelper_startsWith(PyTypeObject *type, PyObject *args)
        {
          ::org::apache::lucene::util::BytesRef a0((jobject) NULL);
          ::org::apache::lucene::util::BytesRef a1((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "kk", ::org::apache::lucene::util::BytesRef::initializeClass, ::org::apache::lucene::util::BytesRef::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = ::org::apache::lucene::util::StringHelper::startsWith(a0, a1));
            Py_RETURN_BOOL(result);
          }

          PyErr_SetArgsError(type, "startsWith", args);
          return NULL;
        }

        static PyObject *t_StringHelper_get__versionComparator(t_StringHelper *self, void *data)
        {
          ::java::util::Comparator value((jobject) NULL);
          OBJ_CALL(value = self->object.getVersionComparator());
          return ::java::util::t_Comparator::wrap_Object(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/FuzzyTermsEnum$LevenshteinAutomataAttributeImpl.h"
#include "org/apache/lucene/search/FuzzyTermsEnum$LevenshteinAutomataAttribute.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/util/automaton/CompiledAutomaton.h"
#include "java/lang/Object.h"
#include "java/util/List.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *FuzzyTermsEnum$LevenshteinAutomataAttributeImpl::class$ = NULL;
        jmethodID *FuzzyTermsEnum$LevenshteinAutomataAttributeImpl::mids$ = NULL;
        bool FuzzyTermsEnum$LevenshteinAutomataAttributeImpl::live$ = false;

        jclass FuzzyTermsEnum$LevenshteinAutomataAttributeImpl::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/FuzzyTermsEnum$LevenshteinAutomataAttributeImpl");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_automata_87851566] = env->getMethodID(cls, "automata", "()Ljava/util/List;");
            mids$[mid_clear_54c6a166] = env->getMethodID(cls, "clear", "()V");
            mids$[mid_copyTo_d86caa9f] = env->getMethodID(cls, "copyTo", "(Lorg/apache/lucene/util/AttributeImpl;)V");
            mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
            mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        FuzzyTermsEnum$LevenshteinAutomataAttributeImpl::FuzzyTermsEnum$LevenshteinAutomataAttributeImpl() : ::org::apache::lucene::util::AttributeImpl(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        ::java::util::List FuzzyTermsEnum$LevenshteinAutomataAttributeImpl::automata() const
        {
          return ::java::util::List(env->callObjectMethod(this$, mids$[mid_automata_87851566]));
        }

        void FuzzyTermsEnum$LevenshteinAutomataAttributeImpl::clear() const
        {
          env->callVoidMethod(this$, mids$[mid_clear_54c6a166]);
        }

        void FuzzyTermsEnum$LevenshteinAutomataAttributeImpl::copyTo(const ::org::apache::lucene::util::AttributeImpl & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_copyTo_d86caa9f], a0.this$);
        }

        jboolean FuzzyTermsEnum$LevenshteinAutomataAttributeImpl::equals(const ::java::lang::Object & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
        }

        jint FuzzyTermsEnum$LevenshteinAutomataAttributeImpl::hashCode() const
        {
          return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_FuzzyTermsEnum$LevenshteinAutomataAttributeImpl_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FuzzyTermsEnum$LevenshteinAutomataAttributeImpl_instance_(PyTypeObject *type, PyObject *arg);
        static int t_FuzzyTermsEnum$LevenshteinAutomataAttributeImpl_init_(t_FuzzyTermsEnum$LevenshteinAutomataAttributeImpl *self, PyObject *args, PyObject *kwds);
        static PyObject *t_FuzzyTermsEnum$LevenshteinAutomataAttributeImpl_automata(t_FuzzyTermsEnum$LevenshteinAutomataAttributeImpl *self);
        static PyObject *t_FuzzyTermsEnum$LevenshteinAutomataAttributeImpl_clear(t_FuzzyTermsEnum$LevenshteinAutomataAttributeImpl *self, PyObject *args);
        static PyObject *t_FuzzyTermsEnum$LevenshteinAutomataAttributeImpl_copyTo(t_FuzzyTermsEnum$LevenshteinAutomataAttributeImpl *self, PyObject *args);
        static PyObject *t_FuzzyTermsEnum$LevenshteinAutomataAttributeImpl_equals(t_FuzzyTermsEnum$LevenshteinAutomataAttributeImpl *self, PyObject *args);
        static PyObject *t_FuzzyTermsEnum$LevenshteinAutomataAttributeImpl_hashCode(t_FuzzyTermsEnum$LevenshteinAutomataAttributeImpl *self, PyObject *args);

        static PyMethodDef t_FuzzyTermsEnum$LevenshteinAutomataAttributeImpl__methods_[] = {
          DECLARE_METHOD(t_FuzzyTermsEnum$LevenshteinAutomataAttributeImpl, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FuzzyTermsEnum$LevenshteinAutomataAttributeImpl, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FuzzyTermsEnum$LevenshteinAutomataAttributeImpl, automata, METH_NOARGS),
          DECLARE_METHOD(t_FuzzyTermsEnum$LevenshteinAutomataAttributeImpl, clear, METH_VARARGS),
          DECLARE_METHOD(t_FuzzyTermsEnum$LevenshteinAutomataAttributeImpl, copyTo, METH_VARARGS),
          DECLARE_METHOD(t_FuzzyTermsEnum$LevenshteinAutomataAttributeImpl, equals, METH_VARARGS),
          DECLARE_METHOD(t_FuzzyTermsEnum$LevenshteinAutomataAttributeImpl, hashCode, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(FuzzyTermsEnum$LevenshteinAutomataAttributeImpl, t_FuzzyTermsEnum$LevenshteinAutomataAttributeImpl, ::org::apache::lucene::util::AttributeImpl, FuzzyTermsEnum$LevenshteinAutomataAttributeImpl, t_FuzzyTermsEnum$LevenshteinAutomataAttributeImpl_init_, 0, 0, 0, 0, 0);

        void t_FuzzyTermsEnum$LevenshteinAutomataAttributeImpl::install(PyObject *module)
        {
          installType(&PY_TYPE(FuzzyTermsEnum$LevenshteinAutomataAttributeImpl), module, "FuzzyTermsEnum$LevenshteinAutomataAttributeImpl", 0);
        }

        void t_FuzzyTermsEnum$LevenshteinAutomataAttributeImpl::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(FuzzyTermsEnum$LevenshteinAutomataAttributeImpl).tp_dict, "class_", make_descriptor(FuzzyTermsEnum$LevenshteinAutomataAttributeImpl::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(FuzzyTermsEnum$LevenshteinAutomataAttributeImpl).tp_dict, "wrapfn_", make_descriptor(t_FuzzyTermsEnum$LevenshteinAutomataAttributeImpl::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(FuzzyTermsEnum$LevenshteinAutomataAttributeImpl).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_FuzzyTermsEnum$LevenshteinAutomataAttributeImpl_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, FuzzyTermsEnum$LevenshteinAutomataAttributeImpl::initializeClass, 1)))
            return NULL;
          return t_FuzzyTermsEnum$LevenshteinAutomataAttributeImpl::wrap_Object(FuzzyTermsEnum$LevenshteinAutomataAttributeImpl(((t_FuzzyTermsEnum$LevenshteinAutomataAttributeImpl *) arg)->object.this$));
        }
        static PyObject *t_FuzzyTermsEnum$LevenshteinAutomataAttributeImpl_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, FuzzyTermsEnum$LevenshteinAutomataAttributeImpl::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_FuzzyTermsEnum$LevenshteinAutomataAttributeImpl_init_(t_FuzzyTermsEnum$LevenshteinAutomataAttributeImpl *self, PyObject *args, PyObject *kwds)
        {
          FuzzyTermsEnum$LevenshteinAutomataAttributeImpl object((jobject) NULL);

          INT_CALL(object = FuzzyTermsEnum$LevenshteinAutomataAttributeImpl());
          self->object = object;

          return 0;
        }

        static PyObject *t_FuzzyTermsEnum$LevenshteinAutomataAttributeImpl_automata(t_FuzzyTermsEnum$LevenshteinAutomataAttributeImpl *self)
        {
          ::java::util::List result((jobject) NULL);
          OBJ_CALL(result = self->object.automata());
          return ::java::util::t_List::wrap_Object(result, &::org::apache::lucene::util::automaton::PY_TYPE(CompiledAutomaton));
        }

        static PyObject *t_FuzzyTermsEnum$LevenshteinAutomataAttributeImpl_clear(t_FuzzyTermsEnum$LevenshteinAutomataAttributeImpl *self, PyObject *args)
        {

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(self->object.clear());
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(FuzzyTermsEnum$LevenshteinAutomataAttributeImpl), (PyObject *) self, "clear", args, 2);
        }

        static PyObject *t_FuzzyTermsEnum$LevenshteinAutomataAttributeImpl_copyTo(t_FuzzyTermsEnum$LevenshteinAutomataAttributeImpl *self, PyObject *args)
        {
          ::org::apache::lucene::util::AttributeImpl a0((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::util::AttributeImpl::initializeClass, &a0))
          {
            OBJ_CALL(self->object.copyTo(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(FuzzyTermsEnum$LevenshteinAutomataAttributeImpl), (PyObject *) self, "copyTo", args, 2);
        }

        static PyObject *t_FuzzyTermsEnum$LevenshteinAutomataAttributeImpl_equals(t_FuzzyTermsEnum$LevenshteinAutomataAttributeImpl *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.equals(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(FuzzyTermsEnum$LevenshteinAutomataAttributeImpl), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_FuzzyTermsEnum$LevenshteinAutomataAttributeImpl_hashCode(t_FuzzyTermsEnum$LevenshteinAutomataAttributeImpl *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hashCode());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(FuzzyTermsEnum$LevenshteinAutomataAttributeImpl), (PyObject *) self, "hashCode", args, 2);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queries/function/valuesource/NumDocsValueSource.h"
#include "org/apache/lucene/queries/function/FunctionValues.h"
#include "java/lang/Class.h"
#include "java/lang/Object.h"
#include "java/util/Map.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {

            ::java::lang::Class *NumDocsValueSource::class$ = NULL;
            jmethodID *NumDocsValueSource::mids$ = NULL;
            bool NumDocsValueSource::live$ = false;

            jclass NumDocsValueSource::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queries/function/valuesource/NumDocsValueSource");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
                mids$[mid_description_14c7b5c5] = env->getMethodID(cls, "description", "()Ljava/lang/String;");
                mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
                mids$[mid_getValues_4c566485] = env->getMethodID(cls, "getValues", "(Ljava/util/Map;Lorg/apache/lucene/index/AtomicReaderContext;)Lorg/apache/lucene/queries/function/FunctionValues;");
                mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
                mids$[mid_name_14c7b5c5] = env->getMethodID(cls, "name", "()Ljava/lang/String;");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            NumDocsValueSource::NumDocsValueSource() : ::org::apache::lucene::queries::function::ValueSource(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

            ::java::lang::String NumDocsValueSource::description() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_description_14c7b5c5]));
            }

            jboolean NumDocsValueSource::equals(const ::java::lang::Object & a0) const
            {
              return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
            }

            ::org::apache::lucene::queries::function::FunctionValues NumDocsValueSource::getValues(const ::java::util::Map & a0, const ::org::apache::lucene::index::AtomicReaderContext & a1) const
            {
              return ::org::apache::lucene::queries::function::FunctionValues(env->callObjectMethod(this$, mids$[mid_getValues_4c566485], a0.this$, a1.this$));
            }

            jint NumDocsValueSource::hashCode() const
            {
              return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
            }

            ::java::lang::String NumDocsValueSource::name() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_name_14c7b5c5]));
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {
            static PyObject *t_NumDocsValueSource_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_NumDocsValueSource_instance_(PyTypeObject *type, PyObject *arg);
            static int t_NumDocsValueSource_init_(t_NumDocsValueSource *self, PyObject *args, PyObject *kwds);
            static PyObject *t_NumDocsValueSource_description(t_NumDocsValueSource *self, PyObject *args);
            static PyObject *t_NumDocsValueSource_equals(t_NumDocsValueSource *self, PyObject *args);
            static PyObject *t_NumDocsValueSource_getValues(t_NumDocsValueSource *self, PyObject *args);
            static PyObject *t_NumDocsValueSource_hashCode(t_NumDocsValueSource *self, PyObject *args);
            static PyObject *t_NumDocsValueSource_name(t_NumDocsValueSource *self);

            static PyMethodDef t_NumDocsValueSource__methods_[] = {
              DECLARE_METHOD(t_NumDocsValueSource, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_NumDocsValueSource, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_NumDocsValueSource, description, METH_VARARGS),
              DECLARE_METHOD(t_NumDocsValueSource, equals, METH_VARARGS),
              DECLARE_METHOD(t_NumDocsValueSource, getValues, METH_VARARGS),
              DECLARE_METHOD(t_NumDocsValueSource, hashCode, METH_VARARGS),
              DECLARE_METHOD(t_NumDocsValueSource, name, METH_NOARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(NumDocsValueSource, t_NumDocsValueSource, ::org::apache::lucene::queries::function::ValueSource, NumDocsValueSource, t_NumDocsValueSource_init_, 0, 0, 0, 0, 0);

            void t_NumDocsValueSource::install(PyObject *module)
            {
              installType(&PY_TYPE(NumDocsValueSource), module, "NumDocsValueSource", 0);
            }

            void t_NumDocsValueSource::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(NumDocsValueSource).tp_dict, "class_", make_descriptor(NumDocsValueSource::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(NumDocsValueSource).tp_dict, "wrapfn_", make_descriptor(t_NumDocsValueSource::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(NumDocsValueSource).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_NumDocsValueSource_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, NumDocsValueSource::initializeClass, 1)))
                return NULL;
              return t_NumDocsValueSource::wrap_Object(NumDocsValueSource(((t_NumDocsValueSource *) arg)->object.this$));
            }
            static PyObject *t_NumDocsValueSource_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, NumDocsValueSource::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_NumDocsValueSource_init_(t_NumDocsValueSource *self, PyObject *args, PyObject *kwds)
            {
              NumDocsValueSource object((jobject) NULL);

              INT_CALL(object = NumDocsValueSource());
              self->object = object;

              return 0;
            }

            static PyObject *t_NumDocsValueSource_description(t_NumDocsValueSource *self, PyObject *args)
            {
              ::java::lang::String result((jobject) NULL);

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.description());
                return j2p(result);
              }

              return callSuper(&PY_TYPE(NumDocsValueSource), (PyObject *) self, "description", args, 2);
            }

            static PyObject *t_NumDocsValueSource_equals(t_NumDocsValueSource *self, PyObject *args)
            {
              ::java::lang::Object a0((jobject) NULL);
              jboolean result;

              if (!parseArgs(args, "o", &a0))
              {
                OBJ_CALL(result = self->object.equals(a0));
                Py_RETURN_BOOL(result);
              }

              return callSuper(&PY_TYPE(NumDocsValueSource), (PyObject *) self, "equals", args, 2);
            }

            static PyObject *t_NumDocsValueSource_getValues(t_NumDocsValueSource *self, PyObject *args)
            {
              ::java::util::Map a0((jobject) NULL);
              PyTypeObject **p0;
              ::org::apache::lucene::index::AtomicReaderContext a1((jobject) NULL);
              ::org::apache::lucene::queries::function::FunctionValues result((jobject) NULL);

              if (!parseArgs(args, "Kk", ::java::util::Map::initializeClass, ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_, &a1))
              {
                OBJ_CALL(result = self->object.getValues(a0, a1));
                return ::org::apache::lucene::queries::function::t_FunctionValues::wrap_Object(result);
              }

              return callSuper(&PY_TYPE(NumDocsValueSource), (PyObject *) self, "getValues", args, 2);
            }

            static PyObject *t_NumDocsValueSource_hashCode(t_NumDocsValueSource *self, PyObject *args)
            {
              jint result;

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.hashCode());
                return PyInt_FromLong((long) result);
              }

              return callSuper(&PY_TYPE(NumDocsValueSource), (PyObject *) self, "hashCode", args, 2);
            }

            static PyObject *t_NumDocsValueSource_name(t_NumDocsValueSource *self)
            {
              ::java::lang::String result((jobject) NULL);
              OBJ_CALL(result = self->object.name());
              return j2p(result);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/FuzzyQueryNode.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/queryparser/flexible/core/parser/EscapeQuerySyntax.h"
#include "java/lang/CloneNotSupportedException.h"
#include "java/lang/CharSequence.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace nodes {

              ::java::lang::Class *FuzzyQueryNode::class$ = NULL;
              jmethodID *FuzzyQueryNode::mids$ = NULL;
              bool FuzzyQueryNode::live$ = false;

              jclass FuzzyQueryNode::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/core/nodes/FuzzyQueryNode");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_7cd5e8f3] = env->getMethodID(cls, "<init>", "(Ljava/lang/CharSequence;Ljava/lang/CharSequence;FII)V");
                  mids$[mid_cloneTree_90198571] = env->getMethodID(cls, "cloneTree", "()Lorg/apache/lucene/queryparser/flexible/core/nodes/FuzzyQueryNode;");
                  mids$[mid_getPrefixLength_54c6a179] = env->getMethodID(cls, "getPrefixLength", "()I");
                  mids$[mid_getSimilarity_54c6a176] = env->getMethodID(cls, "getSimilarity", "()F");
                  mids$[mid_setPrefixLength_39c7bd3c] = env->getMethodID(cls, "setPrefixLength", "(I)V");
                  mids$[mid_setSimilarity_06298cab] = env->getMethodID(cls, "setSimilarity", "(F)V");
                  mids$[mid_toQueryString_99b8dfe1] = env->getMethodID(cls, "toQueryString", "(Lorg/apache/lucene/queryparser/flexible/core/parser/EscapeQuerySyntax;)Ljava/lang/CharSequence;");
                  mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              FuzzyQueryNode::FuzzyQueryNode(const ::java::lang::CharSequence & a0, const ::java::lang::CharSequence & a1, jfloat a2, jint a3, jint a4) : ::org::apache::lucene::queryparser::flexible::core::nodes::FieldQueryNode(env->newObject(initializeClass, &mids$, mid_init$_7cd5e8f3, a0.this$, a1.this$, a2, a3, a4)) {}

              FuzzyQueryNode FuzzyQueryNode::cloneTree() const
              {
                return FuzzyQueryNode(env->callObjectMethod(this$, mids$[mid_cloneTree_90198571]));
              }

              jint FuzzyQueryNode::getPrefixLength() const
              {
                return env->callIntMethod(this$, mids$[mid_getPrefixLength_54c6a179]);
              }

              jfloat FuzzyQueryNode::getSimilarity() const
              {
                return env->callFloatMethod(this$, mids$[mid_getSimilarity_54c6a176]);
              }

              void FuzzyQueryNode::setPrefixLength(jint a0) const
              {
                env->callVoidMethod(this$, mids$[mid_setPrefixLength_39c7bd3c], a0);
              }

              void FuzzyQueryNode::setSimilarity(jfloat a0) const
              {
                env->callVoidMethod(this$, mids$[mid_setSimilarity_06298cab], a0);
              }

              ::java::lang::CharSequence FuzzyQueryNode::toQueryString(const ::org::apache::lucene::queryparser::flexible::core::parser::EscapeQuerySyntax & a0) const
              {
                return ::java::lang::CharSequence(env->callObjectMethod(this$, mids$[mid_toQueryString_99b8dfe1], a0.this$));
              }

              ::java::lang::String FuzzyQueryNode::toString() const
              {
                return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace nodes {
              static PyObject *t_FuzzyQueryNode_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_FuzzyQueryNode_instance_(PyTypeObject *type, PyObject *arg);
              static int t_FuzzyQueryNode_init_(t_FuzzyQueryNode *self, PyObject *args, PyObject *kwds);
              static PyObject *t_FuzzyQueryNode_cloneTree(t_FuzzyQueryNode *self, PyObject *args);
              static PyObject *t_FuzzyQueryNode_getPrefixLength(t_FuzzyQueryNode *self);
              static PyObject *t_FuzzyQueryNode_getSimilarity(t_FuzzyQueryNode *self);
              static PyObject *t_FuzzyQueryNode_setPrefixLength(t_FuzzyQueryNode *self, PyObject *arg);
              static PyObject *t_FuzzyQueryNode_setSimilarity(t_FuzzyQueryNode *self, PyObject *arg);
              static PyObject *t_FuzzyQueryNode_toQueryString(t_FuzzyQueryNode *self, PyObject *args);
              static PyObject *t_FuzzyQueryNode_toString(t_FuzzyQueryNode *self, PyObject *args);
              static PyObject *t_FuzzyQueryNode_get__prefixLength(t_FuzzyQueryNode *self, void *data);
              static int t_FuzzyQueryNode_set__prefixLength(t_FuzzyQueryNode *self, PyObject *arg, void *data);
              static PyObject *t_FuzzyQueryNode_get__similarity(t_FuzzyQueryNode *self, void *data);
              static int t_FuzzyQueryNode_set__similarity(t_FuzzyQueryNode *self, PyObject *arg, void *data);
              static PyGetSetDef t_FuzzyQueryNode__fields_[] = {
                DECLARE_GETSET_FIELD(t_FuzzyQueryNode, prefixLength),
                DECLARE_GETSET_FIELD(t_FuzzyQueryNode, similarity),
                { NULL, NULL, NULL, NULL, NULL }
              };

              static PyMethodDef t_FuzzyQueryNode__methods_[] = {
                DECLARE_METHOD(t_FuzzyQueryNode, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_FuzzyQueryNode, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_FuzzyQueryNode, cloneTree, METH_VARARGS),
                DECLARE_METHOD(t_FuzzyQueryNode, getPrefixLength, METH_NOARGS),
                DECLARE_METHOD(t_FuzzyQueryNode, getSimilarity, METH_NOARGS),
                DECLARE_METHOD(t_FuzzyQueryNode, setPrefixLength, METH_O),
                DECLARE_METHOD(t_FuzzyQueryNode, setSimilarity, METH_O),
                DECLARE_METHOD(t_FuzzyQueryNode, toQueryString, METH_VARARGS),
                DECLARE_METHOD(t_FuzzyQueryNode, toString, METH_VARARGS),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(FuzzyQueryNode, t_FuzzyQueryNode, ::org::apache::lucene::queryparser::flexible::core::nodes::FieldQueryNode, FuzzyQueryNode, t_FuzzyQueryNode_init_, 0, 0, t_FuzzyQueryNode__fields_, 0, 0);

              void t_FuzzyQueryNode::install(PyObject *module)
              {
                installType(&PY_TYPE(FuzzyQueryNode), module, "FuzzyQueryNode", 0);
              }

              void t_FuzzyQueryNode::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(FuzzyQueryNode).tp_dict, "class_", make_descriptor(FuzzyQueryNode::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(FuzzyQueryNode).tp_dict, "wrapfn_", make_descriptor(t_FuzzyQueryNode::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(FuzzyQueryNode).tp_dict, "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_FuzzyQueryNode_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, FuzzyQueryNode::initializeClass, 1)))
                  return NULL;
                return t_FuzzyQueryNode::wrap_Object(FuzzyQueryNode(((t_FuzzyQueryNode *) arg)->object.this$));
              }
              static PyObject *t_FuzzyQueryNode_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, FuzzyQueryNode::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_FuzzyQueryNode_init_(t_FuzzyQueryNode *self, PyObject *args, PyObject *kwds)
              {
                ::java::lang::CharSequence a0((jobject) NULL);
                ::java::lang::CharSequence a1((jobject) NULL);
                jfloat a2;
                jint a3;
                jint a4;
                FuzzyQueryNode object((jobject) NULL);

                if (!parseArgs(args, "OOFII", &::java::lang::PY_TYPE(CharSequence), &::java::lang::PY_TYPE(CharSequence), &a0, &a1, &a2, &a3, &a4))
                {
                  INT_CALL(object = FuzzyQueryNode(a0, a1, a2, a3, a4));
                  self->object = object;
                }
                else
                {
                  PyErr_SetArgsError((PyObject *) self, "__init__", args);
                  return -1;
                }

                return 0;
              }

              static PyObject *t_FuzzyQueryNode_cloneTree(t_FuzzyQueryNode *self, PyObject *args)
              {
                FuzzyQueryNode result((jobject) NULL);

                if (!parseArgs(args, ""))
                {
                  OBJ_CALL(result = self->object.cloneTree());
                  return t_FuzzyQueryNode::wrap_Object(result);
                }

                return callSuper(&PY_TYPE(FuzzyQueryNode), (PyObject *) self, "cloneTree", args, 2);
              }

              static PyObject *t_FuzzyQueryNode_getPrefixLength(t_FuzzyQueryNode *self)
              {
                jint result;
                OBJ_CALL(result = self->object.getPrefixLength());
                return PyInt_FromLong((long) result);
              }

              static PyObject *t_FuzzyQueryNode_getSimilarity(t_FuzzyQueryNode *self)
              {
                jfloat result;
                OBJ_CALL(result = self->object.getSimilarity());
                return PyFloat_FromDouble((double) result);
              }

              static PyObject *t_FuzzyQueryNode_setPrefixLength(t_FuzzyQueryNode *self, PyObject *arg)
              {
                jint a0;

                if (!parseArg(arg, "I", &a0))
                {
                  OBJ_CALL(self->object.setPrefixLength(a0));
                  Py_RETURN_NONE;
                }

                PyErr_SetArgsError((PyObject *) self, "setPrefixLength", arg);
                return NULL;
              }

              static PyObject *t_FuzzyQueryNode_setSimilarity(t_FuzzyQueryNode *self, PyObject *arg)
              {
                jfloat a0;

                if (!parseArg(arg, "F", &a0))
                {
                  OBJ_CALL(self->object.setSimilarity(a0));
                  Py_RETURN_NONE;
                }

                PyErr_SetArgsError((PyObject *) self, "setSimilarity", arg);
                return NULL;
              }

              static PyObject *t_FuzzyQueryNode_toQueryString(t_FuzzyQueryNode *self, PyObject *args)
              {
                ::org::apache::lucene::queryparser::flexible::core::parser::EscapeQuerySyntax a0((jobject) NULL);
                ::java::lang::CharSequence result((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::queryparser::flexible::core::parser::EscapeQuerySyntax::initializeClass, &a0))
                {
                  OBJ_CALL(result = self->object.toQueryString(a0));
                  return ::java::lang::t_CharSequence::wrap_Object(result);
                }

                return callSuper(&PY_TYPE(FuzzyQueryNode), (PyObject *) self, "toQueryString", args, 2);
              }

              static PyObject *t_FuzzyQueryNode_toString(t_FuzzyQueryNode *self, PyObject *args)
              {
                ::java::lang::String result((jobject) NULL);

                if (!parseArgs(args, ""))
                {
                  OBJ_CALL(result = self->object.toString());
                  return j2p(result);
                }

                return callSuper(&PY_TYPE(FuzzyQueryNode), (PyObject *) self, "toString", args, 2);
              }

              static PyObject *t_FuzzyQueryNode_get__prefixLength(t_FuzzyQueryNode *self, void *data)
              {
                jint value;
                OBJ_CALL(value = self->object.getPrefixLength());
                return PyInt_FromLong((long) value);
              }
              static int t_FuzzyQueryNode_set__prefixLength(t_FuzzyQueryNode *self, PyObject *arg, void *data)
              {
                {
                  jint value;
                  if (!parseArg(arg, "I", &value))
                  {
                    INT_CALL(self->object.setPrefixLength(value));
                    return 0;
                  }
                }
                PyErr_SetArgsError((PyObject *) self, "prefixLength", arg);
                return -1;
              }

              static PyObject *t_FuzzyQueryNode_get__similarity(t_FuzzyQueryNode *self, void *data)
              {
                jfloat value;
                OBJ_CALL(value = self->object.getSimilarity());
                return PyFloat_FromDouble((double) value);
              }
              static int t_FuzzyQueryNode_set__similarity(t_FuzzyQueryNode *self, PyObject *arg, void *data)
              {
                {
                  jfloat value;
                  if (!parseArg(arg, "F", &value))
                  {
                    INT_CALL(self->object.setSimilarity(value));
                    return 0;
                  }
                }
                PyErr_SetArgsError((PyObject *) self, "similarity", arg);
                return -1;
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/pylucene/search/PythonFieldComparator.h"
#include "java/lang/Class.h"
#include "java/lang/Object.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "java/io/IOException.h"
#include "java/lang/Throwable.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace pylucene {
      namespace search {

        ::java::lang::Class *PythonFieldComparator::class$ = NULL;
        jmethodID *PythonFieldComparator::mids$ = NULL;
        bool PythonFieldComparator::live$ = false;

        jclass PythonFieldComparator::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/pylucene/search/PythonFieldComparator");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_compare_d8d154b9] = env->getMethodID(cls, "compare", "(II)I");
            mids$[mid_compareBottom_39c7bd23] = env->getMethodID(cls, "compareBottom", "(I)I");
            mids$[mid_compareDocToValue_f7cd74bb] = env->getMethodID(cls, "compareDocToValue", "(ILjava/lang/Object;)I");
            mids$[mid_compareTop_39c7bd23] = env->getMethodID(cls, "compareTop", "(I)I");
            mids$[mid_copy_d8d154a6] = env->getMethodID(cls, "copy", "(II)V");
            mids$[mid_finalize_54c6a166] = env->getMethodID(cls, "finalize", "()V");
            mids$[mid_pythonDecRef_54c6a166] = env->getMethodID(cls, "pythonDecRef", "()V");
            mids$[mid_pythonExtension_54c6a17a] = env->getMethodID(cls, "pythonExtension", "()J");
            mids$[mid_pythonExtension_0ee6df2f] = env->getMethodID(cls, "pythonExtension", "(J)V");
            mids$[mid_setBottom_39c7bd3c] = env->getMethodID(cls, "setBottom", "(I)V");
            mids$[mid_setNextReader_6329aed7] = env->getMethodID(cls, "setNextReader", "(Lorg/apache/lucene/index/AtomicReaderContext;)Lorg/apache/lucene/search/FieldComparator;");
            mids$[mid_setTopValue_290588ee] = env->getMethodID(cls, "setTopValue", "(Ljava/lang/Object;)V");
            mids$[mid_value_29be6a55] = env->getMethodID(cls, "value", "(I)Ljava/lang/Object;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        PythonFieldComparator::PythonFieldComparator() : ::org::apache::lucene::search::FieldComparator(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        void PythonFieldComparator::finalize() const
        {
          env->callVoidMethod(this$, mids$[mid_finalize_54c6a166]);
        }

        jlong PythonFieldComparator::pythonExtension() const
        {
          return env->callLongMethod(this$, mids$[mid_pythonExtension_54c6a17a]);
        }

        void PythonFieldComparator::pythonExtension(jlong a0) const
        {
          env->callVoidMethod(this$, mids$[mid_pythonExtension_0ee6df2f], a0);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace pylucene {
      namespace search {
        static PyObject *t_PythonFieldComparator_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_PythonFieldComparator_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_PythonFieldComparator_of_(t_PythonFieldComparator *self, PyObject *args);
        static int t_PythonFieldComparator_init_(t_PythonFieldComparator *self, PyObject *args, PyObject *kwds);
        static PyObject *t_PythonFieldComparator_finalize(t_PythonFieldComparator *self);
        static PyObject *t_PythonFieldComparator_pythonExtension(t_PythonFieldComparator *self, PyObject *args);
        static jint JNICALL t_PythonFieldComparator_compare0(JNIEnv *jenv, jobject jobj, jint a0, jint a1);
        static jint JNICALL t_PythonFieldComparator_compareBottom1(JNIEnv *jenv, jobject jobj, jint a0);
        static jint JNICALL t_PythonFieldComparator_compareDocToValue2(JNIEnv *jenv, jobject jobj, jint a0, jobject a1);
        static jint JNICALL t_PythonFieldComparator_compareTop3(JNIEnv *jenv, jobject jobj, jint a0);
        static void JNICALL t_PythonFieldComparator_copy4(JNIEnv *jenv, jobject jobj, jint a0, jint a1);
        static void JNICALL t_PythonFieldComparator_pythonDecRef5(JNIEnv *jenv, jobject jobj);
        static void JNICALL t_PythonFieldComparator_setBottom6(JNIEnv *jenv, jobject jobj, jint a0);
        static jobject JNICALL t_PythonFieldComparator_setNextReader7(JNIEnv *jenv, jobject jobj, jobject a0);
        static void JNICALL t_PythonFieldComparator_setTopValue8(JNIEnv *jenv, jobject jobj, jobject a0);
        static jobject JNICALL t_PythonFieldComparator_value9(JNIEnv *jenv, jobject jobj, jint a0);
        static PyObject *t_PythonFieldComparator_get__self(t_PythonFieldComparator *self, void *data);
        static PyObject *t_PythonFieldComparator_get__parameters_(t_PythonFieldComparator *self, void *data);
        static PyGetSetDef t_PythonFieldComparator__fields_[] = {
          DECLARE_GET_FIELD(t_PythonFieldComparator, self),
          DECLARE_GET_FIELD(t_PythonFieldComparator, parameters_),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_PythonFieldComparator__methods_[] = {
          DECLARE_METHOD(t_PythonFieldComparator, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PythonFieldComparator, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PythonFieldComparator, of_, METH_VARARGS),
          DECLARE_METHOD(t_PythonFieldComparator, finalize, METH_NOARGS),
          DECLARE_METHOD(t_PythonFieldComparator, pythonExtension, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(PythonFieldComparator, t_PythonFieldComparator, ::org::apache::lucene::search::FieldComparator, PythonFieldComparator, t_PythonFieldComparator_init_, 0, 0, t_PythonFieldComparator__fields_, 0, 0);
        PyObject *t_PythonFieldComparator::wrap_Object(const PythonFieldComparator& object, PyTypeObject *p0)
        {
          PyObject *obj = t_PythonFieldComparator::wrap_Object(object);
          if (obj != NULL && obj != Py_None)
          {
            t_PythonFieldComparator *self = (t_PythonFieldComparator *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        PyObject *t_PythonFieldComparator::wrap_jobject(const jobject& object, PyTypeObject *p0)
        {
          PyObject *obj = t_PythonFieldComparator::wrap_jobject(object);
          if (obj != NULL && obj != Py_None)
          {
            t_PythonFieldComparator *self = (t_PythonFieldComparator *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        void t_PythonFieldComparator::install(PyObject *module)
        {
          installType(&PY_TYPE(PythonFieldComparator), module, "PythonFieldComparator", 1);
        }

        void t_PythonFieldComparator::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(PythonFieldComparator).tp_dict, "class_", make_descriptor(PythonFieldComparator::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(PythonFieldComparator).tp_dict, "wrapfn_", make_descriptor(t_PythonFieldComparator::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(PythonFieldComparator).tp_dict, "boxfn_", make_descriptor(boxObject));
          jclass cls = env->getClass(PythonFieldComparator::initializeClass);
          JNINativeMethod methods[] = {
            { "compare", "(II)I", (void *) t_PythonFieldComparator_compare0 },
            { "compareBottom", "(I)I", (void *) t_PythonFieldComparator_compareBottom1 },
            { "compareDocToValue", "(ILjava/lang/Object;)I", (void *) t_PythonFieldComparator_compareDocToValue2 },
            { "compareTop", "(I)I", (void *) t_PythonFieldComparator_compareTop3 },
            { "copy", "(II)V", (void *) t_PythonFieldComparator_copy4 },
            { "pythonDecRef", "()V", (void *) t_PythonFieldComparator_pythonDecRef5 },
            { "setBottom", "(I)V", (void *) t_PythonFieldComparator_setBottom6 },
            { "setNextReader", "(Lorg/apache/lucene/index/AtomicReaderContext;)Lorg/apache/lucene/search/FieldComparator;", (void *) t_PythonFieldComparator_setNextReader7 },
            { "setTopValue", "(Ljava/lang/Object;)V", (void *) t_PythonFieldComparator_setTopValue8 },
            { "value", "(I)Ljava/lang/Object;", (void *) t_PythonFieldComparator_value9 },
          };
          env->registerNatives(cls, methods, 10);
        }

        static PyObject *t_PythonFieldComparator_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, PythonFieldComparator::initializeClass, 1)))
            return NULL;
          return t_PythonFieldComparator::wrap_Object(PythonFieldComparator(((t_PythonFieldComparator *) arg)->object.this$));
        }
        static PyObject *t_PythonFieldComparator_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, PythonFieldComparator::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_PythonFieldComparator_of_(t_PythonFieldComparator *self, PyObject *args)
        {
          if (!parseArg(args, "T", 1, &(self->parameters)))
            Py_RETURN_SELF;
          return PyErr_SetArgsError((PyObject *) self, "of_", args);
        }

        static int t_PythonFieldComparator_init_(t_PythonFieldComparator *self, PyObject *args, PyObject *kwds)
        {
          PythonFieldComparator object((jobject) NULL);

          INT_CALL(object = PythonFieldComparator());
          self->object = object;

          Py_INCREF((PyObject *) self);
          self->object.pythonExtension((jlong) (Py_intptr_t) (void *) self);

          return 0;
        }

        static PyObject *t_PythonFieldComparator_finalize(t_PythonFieldComparator *self)
        {
          OBJ_CALL(self->object.finalize());
          Py_RETURN_NONE;
        }

        static PyObject *t_PythonFieldComparator_pythonExtension(t_PythonFieldComparator *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 0:
            {
              jlong result;
              OBJ_CALL(result = self->object.pythonExtension());
              return PyLong_FromLongLong((PY_LONG_LONG) result);
            }
            break;
           case 1:
            {
              jlong a0;

              if (!parseArgs(args, "J", &a0))
              {
                OBJ_CALL(self->object.pythonExtension(a0));
                Py_RETURN_NONE;
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "pythonExtension", args);
          return NULL;
        }

        static jint JNICALL t_PythonFieldComparator_compare0(JNIEnv *jenv, jobject jobj, jint a0, jint a1)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonFieldComparator::mids$[PythonFieldComparator::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          jint value;
          PyObject *result = PyObject_CallMethod(obj, "compare", "ii", (int) a0, (int) a1);
          if (!result)
            throwPythonError();
          else if (parseArg(result, "I", &value))
          {
            throwTypeError("compare", result);
            Py_DECREF(result);
          }
          else
          {
            Py_DECREF(result);
            return value;
          }

          return (jint) 0;
        }

        static jint JNICALL t_PythonFieldComparator_compareBottom1(JNIEnv *jenv, jobject jobj, jint a0)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonFieldComparator::mids$[PythonFieldComparator::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          jint value;
          PyObject *result = PyObject_CallMethod(obj, "compareBottom", "i", (int) a0);
          if (!result)
            throwPythonError();
          else if (parseArg(result, "I", &value))
          {
            throwTypeError("compareBottom", result);
            Py_DECREF(result);
          }
          else
          {
            Py_DECREF(result);
            return value;
          }

          return (jint) 0;
        }

        static jint JNICALL t_PythonFieldComparator_compareDocToValue2(JNIEnv *jenv, jobject jobj, jint a0, jobject a1)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonFieldComparator::mids$[PythonFieldComparator::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          jint value;
          PyObject *o1 = ::java::lang::t_Object::wrap_Object(::java::lang::Object(a1));
          PyObject *result = PyObject_CallMethod(obj, "compareDocToValue", "iO", (int) a0, o1);
          Py_DECREF(o1);
          if (!result)
            throwPythonError();
          else if (parseArg(result, "I", &value))
          {
            throwTypeError("compareDocToValue", result);
            Py_DECREF(result);
          }
          else
          {
            Py_DECREF(result);
            return value;
          }

          return (jint) 0;
        }

        static jint JNICALL t_PythonFieldComparator_compareTop3(JNIEnv *jenv, jobject jobj, jint a0)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonFieldComparator::mids$[PythonFieldComparator::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          jint value;
          PyObject *result = PyObject_CallMethod(obj, "compareTop", "i", (int) a0);
          if (!result)
            throwPythonError();
          else if (parseArg(result, "I", &value))
          {
            throwTypeError("compareTop", result);
            Py_DECREF(result);
          }
          else
          {
            Py_DECREF(result);
            return value;
          }

          return (jint) 0;
        }

        static void JNICALL t_PythonFieldComparator_copy4(JNIEnv *jenv, jobject jobj, jint a0, jint a1)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonFieldComparator::mids$[PythonFieldComparator::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          PyObject *result = PyObject_CallMethod(obj, "copy", "ii", (int) a0, (int) a1);
          if (!result)
            throwPythonError();
          else
            Py_DECREF(result);
        }

        static void JNICALL t_PythonFieldComparator_pythonDecRef5(JNIEnv *jenv, jobject jobj)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonFieldComparator::mids$[PythonFieldComparator::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;

          if (obj != NULL)
          {
            jenv->CallVoidMethod(jobj, PythonFieldComparator::mids$[PythonFieldComparator::mid_pythonExtension_0ee6df2f], (jlong) 0);
            env->finalizeObject(jenv, obj);
          }
        }

        static void JNICALL t_PythonFieldComparator_setBottom6(JNIEnv *jenv, jobject jobj, jint a0)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonFieldComparator::mids$[PythonFieldComparator::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          PyObject *result = PyObject_CallMethod(obj, "setBottom", "i", (int) a0);
          if (!result)
            throwPythonError();
          else
            Py_DECREF(result);
        }

        static jobject JNICALL t_PythonFieldComparator_setNextReader7(JNIEnv *jenv, jobject jobj, jobject a0)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonFieldComparator::mids$[PythonFieldComparator::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          ::org::apache::lucene::search::FieldComparator value((jobject) NULL);
          PyObject *o0 = ::org::apache::lucene::index::t_AtomicReaderContext::wrap_Object(::org::apache::lucene::index::AtomicReaderContext(a0));
          PyObject *result = PyObject_CallMethod(obj, "setNextReader", "O", o0);
          Py_DECREF(o0);
          if (!result)
            throwPythonError();
          else if (parseArg(result, "k", ::org::apache::lucene::search::FieldComparator::initializeClass, &value))
          {
            throwTypeError("setNextReader", result);
            Py_DECREF(result);
          }
          else
          {
            jobj = jenv->NewLocalRef(value.this$);
            Py_DECREF(result);
            return jobj;
          }

          return (jobject) NULL;
        }

        static void JNICALL t_PythonFieldComparator_setTopValue8(JNIEnv *jenv, jobject jobj, jobject a0)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonFieldComparator::mids$[PythonFieldComparator::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          PyObject *o0 = ::java::lang::t_Object::wrap_Object(::java::lang::Object(a0));
          PyObject *result = PyObject_CallMethod(obj, "setTopValue", "O", o0);
          Py_DECREF(o0);
          if (!result)
            throwPythonError();
          else
            Py_DECREF(result);
        }

        static jobject JNICALL t_PythonFieldComparator_value9(JNIEnv *jenv, jobject jobj, jint a0)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonFieldComparator::mids$[PythonFieldComparator::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          ::java::lang::Object value((jobject) NULL);
          PyObject *result = PyObject_CallMethod(obj, "value", "i", (int) a0);
          if (!result)
            throwPythonError();
          else if (parseArg(result, "o", &value))
          {
            throwTypeError("value", result);
            Py_DECREF(result);
          }
          else
          {
            jobj = jenv->NewLocalRef(value.this$);
            Py_DECREF(result);
            return jobj;
          }

          return (jobject) NULL;
        }

        static PyObject *t_PythonFieldComparator_get__self(t_PythonFieldComparator *self, void *data)
        {
          jlong ptr;
          OBJ_CALL(ptr = self->object.pythonExtension());
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;

          if (obj != NULL)
          {
            Py_INCREF(obj);
            return obj;
          }
          else
            Py_RETURN_NONE;
        }
        static PyObject *t_PythonFieldComparator_get__parameters_(t_PythonFieldComparator *self, void *data)
        {
          return typeParameters(self->parameters, sizeof(self->parameters));
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/ModifierQueryNode$Modifier.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace nodes {

              ::java::lang::Class *ModifierQueryNode$Modifier::class$ = NULL;
              jmethodID *ModifierQueryNode$Modifier::mids$ = NULL;
              bool ModifierQueryNode$Modifier::live$ = false;
              ModifierQueryNode$Modifier *ModifierQueryNode$Modifier::MOD_NONE = NULL;
              ModifierQueryNode$Modifier *ModifierQueryNode$Modifier::MOD_NOT = NULL;
              ModifierQueryNode$Modifier *ModifierQueryNode$Modifier::MOD_REQ = NULL;

              jclass ModifierQueryNode$Modifier::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/core/nodes/ModifierQueryNode$Modifier");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_toDigitString_14c7b5c5] = env->getMethodID(cls, "toDigitString", "()Ljava/lang/String;");
                  mids$[mid_toLargeString_14c7b5c5] = env->getMethodID(cls, "toLargeString", "()Ljava/lang/String;");
                  mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");
                  mids$[mid_valueOf_ceb5f083] = env->getStaticMethodID(cls, "valueOf", "(Ljava/lang/String;)Lorg/apache/lucene/queryparser/flexible/core/nodes/ModifierQueryNode$Modifier;");
                  mids$[mid_values_05c3b6a9] = env->getStaticMethodID(cls, "values", "()[Lorg/apache/lucene/queryparser/flexible/core/nodes/ModifierQueryNode$Modifier;");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  cls = (jclass) class$->this$;

                  MOD_NONE = new ModifierQueryNode$Modifier(env->getStaticObjectField(cls, "MOD_NONE", "Lorg/apache/lucene/queryparser/flexible/core/nodes/ModifierQueryNode$Modifier;"));
                  MOD_NOT = new ModifierQueryNode$Modifier(env->getStaticObjectField(cls, "MOD_NOT", "Lorg/apache/lucene/queryparser/flexible/core/nodes/ModifierQueryNode$Modifier;"));
                  MOD_REQ = new ModifierQueryNode$Modifier(env->getStaticObjectField(cls, "MOD_REQ", "Lorg/apache/lucene/queryparser/flexible/core/nodes/ModifierQueryNode$Modifier;"));
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              ::java::lang::String ModifierQueryNode$Modifier::toDigitString() const
              {
                return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toDigitString_14c7b5c5]));
              }

              ::java::lang::String ModifierQueryNode$Modifier::toLargeString() const
              {
                return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toLargeString_14c7b5c5]));
              }

              ::java::lang::String ModifierQueryNode$Modifier::toString() const
              {
                return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
              }

              ModifierQueryNode$Modifier ModifierQueryNode$Modifier::valueOf(const ::java::lang::String & a0)
              {
                jclass cls = env->getClass(initializeClass);
                return ModifierQueryNode$Modifier(env->callStaticObjectMethod(cls, mids$[mid_valueOf_ceb5f083], a0.this$));
              }

              JArray< ModifierQueryNode$Modifier > ModifierQueryNode$Modifier::values()
              {
                jclass cls = env->getClass(initializeClass);
                return JArray< ModifierQueryNode$Modifier >(env->callStaticObjectMethod(cls, mids$[mid_values_05c3b6a9]));
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace nodes {
              static PyObject *t_ModifierQueryNode$Modifier_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_ModifierQueryNode$Modifier_instance_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_ModifierQueryNode$Modifier_of_(t_ModifierQueryNode$Modifier *self, PyObject *args);
              static PyObject *t_ModifierQueryNode$Modifier_toDigitString(t_ModifierQueryNode$Modifier *self);
              static PyObject *t_ModifierQueryNode$Modifier_toLargeString(t_ModifierQueryNode$Modifier *self);
              static PyObject *t_ModifierQueryNode$Modifier_toString(t_ModifierQueryNode$Modifier *self, PyObject *args);
              static PyObject *t_ModifierQueryNode$Modifier_valueOf(PyTypeObject *type, PyObject *args);
              static PyObject *t_ModifierQueryNode$Modifier_values(PyTypeObject *type);
              static PyObject *t_ModifierQueryNode$Modifier_get__parameters_(t_ModifierQueryNode$Modifier *self, void *data);
              static PyGetSetDef t_ModifierQueryNode$Modifier__fields_[] = {
                DECLARE_GET_FIELD(t_ModifierQueryNode$Modifier, parameters_),
                { NULL, NULL, NULL, NULL, NULL }
              };

              static PyMethodDef t_ModifierQueryNode$Modifier__methods_[] = {
                DECLARE_METHOD(t_ModifierQueryNode$Modifier, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_ModifierQueryNode$Modifier, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_ModifierQueryNode$Modifier, of_, METH_VARARGS),
                DECLARE_METHOD(t_ModifierQueryNode$Modifier, toDigitString, METH_NOARGS),
                DECLARE_METHOD(t_ModifierQueryNode$Modifier, toLargeString, METH_NOARGS),
                DECLARE_METHOD(t_ModifierQueryNode$Modifier, toString, METH_VARARGS),
                DECLARE_METHOD(t_ModifierQueryNode$Modifier, valueOf, METH_VARARGS | METH_CLASS),
                DECLARE_METHOD(t_ModifierQueryNode$Modifier, values, METH_NOARGS | METH_CLASS),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(ModifierQueryNode$Modifier, t_ModifierQueryNode$Modifier, ::java::lang::Enum, ModifierQueryNode$Modifier, abstract_init, 0, 0, t_ModifierQueryNode$Modifier__fields_, 0, 0);
              PyObject *t_ModifierQueryNode$Modifier::wrap_Object(const ModifierQueryNode$Modifier& object, PyTypeObject *p0)
              {
                PyObject *obj = t_ModifierQueryNode$Modifier::wrap_Object(object);
                if (obj != NULL && obj != Py_None)
                {
                  t_ModifierQueryNode$Modifier *self = (t_ModifierQueryNode$Modifier *) obj;
                  self->parameters[0] = p0;
                }
                return obj;
              }

              PyObject *t_ModifierQueryNode$Modifier::wrap_jobject(const jobject& object, PyTypeObject *p0)
              {
                PyObject *obj = t_ModifierQueryNode$Modifier::wrap_jobject(object);
                if (obj != NULL && obj != Py_None)
                {
                  t_ModifierQueryNode$Modifier *self = (t_ModifierQueryNode$Modifier *) obj;
                  self->parameters[0] = p0;
                }
                return obj;
              }

              void t_ModifierQueryNode$Modifier::install(PyObject *module)
              {
                installType(&PY_TYPE(ModifierQueryNode$Modifier), module, "ModifierQueryNode$Modifier", 0);
              }

              void t_ModifierQueryNode$Modifier::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(ModifierQueryNode$Modifier).tp_dict, "class_", make_descriptor(ModifierQueryNode$Modifier::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(ModifierQueryNode$Modifier).tp_dict, "wrapfn_", make_descriptor(t_ModifierQueryNode$Modifier::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(ModifierQueryNode$Modifier).tp_dict, "boxfn_", make_descriptor(boxObject));
                env->getClass(ModifierQueryNode$Modifier::initializeClass);
                PyDict_SetItemString(PY_TYPE(ModifierQueryNode$Modifier).tp_dict, "MOD_NONE", make_descriptor(t_ModifierQueryNode$Modifier::wrap_Object(*ModifierQueryNode$Modifier::MOD_NONE)));
                PyDict_SetItemString(PY_TYPE(ModifierQueryNode$Modifier).tp_dict, "MOD_NOT", make_descriptor(t_ModifierQueryNode$Modifier::wrap_Object(*ModifierQueryNode$Modifier::MOD_NOT)));
                PyDict_SetItemString(PY_TYPE(ModifierQueryNode$Modifier).tp_dict, "MOD_REQ", make_descriptor(t_ModifierQueryNode$Modifier::wrap_Object(*ModifierQueryNode$Modifier::MOD_REQ)));
              }

              static PyObject *t_ModifierQueryNode$Modifier_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, ModifierQueryNode$Modifier::initializeClass, 1)))
                  return NULL;
                return t_ModifierQueryNode$Modifier::wrap_Object(ModifierQueryNode$Modifier(((t_ModifierQueryNode$Modifier *) arg)->object.this$));
              }
              static PyObject *t_ModifierQueryNode$Modifier_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, ModifierQueryNode$Modifier::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static PyObject *t_ModifierQueryNode$Modifier_of_(t_ModifierQueryNode$Modifier *self, PyObject *args)
              {
                if (!parseArg(args, "T", 1, &(self->parameters)))
                  Py_RETURN_SELF;
                return PyErr_SetArgsError((PyObject *) self, "of_", args);
              }

              static PyObject *t_ModifierQueryNode$Modifier_toDigitString(t_ModifierQueryNode$Modifier *self)
              {
                ::java::lang::String result((jobject) NULL);
                OBJ_CALL(result = self->object.toDigitString());
                return j2p(result);
              }

              static PyObject *t_ModifierQueryNode$Modifier_toLargeString(t_ModifierQueryNode$Modifier *self)
              {
                ::java::lang::String result((jobject) NULL);
                OBJ_CALL(result = self->object.toLargeString());
                return j2p(result);
              }

              static PyObject *t_ModifierQueryNode$Modifier_toString(t_ModifierQueryNode$Modifier *self, PyObject *args)
              {
                ::java::lang::String result((jobject) NULL);

                if (!parseArgs(args, ""))
                {
                  OBJ_CALL(result = self->object.toString());
                  return j2p(result);
                }

                return callSuper(&PY_TYPE(ModifierQueryNode$Modifier), (PyObject *) self, "toString", args, 2);
              }

              static PyObject *t_ModifierQueryNode$Modifier_valueOf(PyTypeObject *type, PyObject *args)
              {
                ::java::lang::String a0((jobject) NULL);
                ModifierQueryNode$Modifier result((jobject) NULL);

                if (!parseArgs(args, "s", &a0))
                {
                  OBJ_CALL(result = ::org::apache::lucene::queryparser::flexible::core::nodes::ModifierQueryNode$Modifier::valueOf(a0));
                  return t_ModifierQueryNode$Modifier::wrap_Object(result);
                }

                return callSuper(type, "valueOf", args, 2);
              }

              static PyObject *t_ModifierQueryNode$Modifier_values(PyTypeObject *type)
              {
                JArray< ModifierQueryNode$Modifier > result((jobject) NULL);
                OBJ_CALL(result = ::org::apache::lucene::queryparser::flexible::core::nodes::ModifierQueryNode$Modifier::values());
                return JArray<jobject>(result.this$).wrap(t_ModifierQueryNode$Modifier::wrap_jobject);
              }
              static PyObject *t_ModifierQueryNode$Modifier_get__parameters_(t_ModifierQueryNode$Modifier *self, void *data)
              {
                return typeParameters(self->parameters, sizeof(self->parameters));
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/fst/PositiveIntOutputs.h"
#include "java/lang/Long.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/store/DataInput.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/store/DataOutput.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace fst {

          ::java::lang::Class *PositiveIntOutputs::class$ = NULL;
          jmethodID *PositiveIntOutputs::mids$ = NULL;
          bool PositiveIntOutputs::live$ = false;

          jclass PositiveIntOutputs::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/util/fst/PositiveIntOutputs");

              mids$ = new jmethodID[max_mid];
              mids$[mid_add_9f6e77f0] = env->getMethodID(cls, "add", "(Ljava/lang/Long;Ljava/lang/Long;)Ljava/lang/Long;");
              mids$[mid_common_9f6e77f0] = env->getMethodID(cls, "common", "(Ljava/lang/Long;Ljava/lang/Long;)Ljava/lang/Long;");
              mids$[mid_getNoOutput_c5e93900] = env->getMethodID(cls, "getNoOutput", "()Ljava/lang/Long;");
              mids$[mid_getSingleton_62a4b337] = env->getStaticMethodID(cls, "getSingleton", "()Lorg/apache/lucene/util/fst/PositiveIntOutputs;");
              mids$[mid_outputToString_d1a33160] = env->getMethodID(cls, "outputToString", "(Ljava/lang/Long;)Ljava/lang/String;");
              mids$[mid_ramBytesUsed_da55802d] = env->getMethodID(cls, "ramBytesUsed", "(Ljava/lang/Long;)J");
              mids$[mid_read_5eca7461] = env->getMethodID(cls, "read", "(Lorg/apache/lucene/store/DataInput;)Ljava/lang/Long;");
              mids$[mid_subtract_9f6e77f0] = env->getMethodID(cls, "subtract", "(Ljava/lang/Long;Ljava/lang/Long;)Ljava/lang/Long;");
              mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");
              mids$[mid_write_6466b4a8] = env->getMethodID(cls, "write", "(Ljava/lang/Long;Lorg/apache/lucene/store/DataOutput;)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ::java::lang::Long PositiveIntOutputs::add(const ::java::lang::Long & a0, const ::java::lang::Long & a1) const
          {
            return ::java::lang::Long(env->callObjectMethod(this$, mids$[mid_add_9f6e77f0], a0.this$, a1.this$));
          }

          ::java::lang::Long PositiveIntOutputs::common(const ::java::lang::Long & a0, const ::java::lang::Long & a1) const
          {
            return ::java::lang::Long(env->callObjectMethod(this$, mids$[mid_common_9f6e77f0], a0.this$, a1.this$));
          }

          ::java::lang::Long PositiveIntOutputs::getNoOutput() const
          {
            return ::java::lang::Long(env->callObjectMethod(this$, mids$[mid_getNoOutput_c5e93900]));
          }

          PositiveIntOutputs PositiveIntOutputs::getSingleton()
          {
            jclass cls = env->getClass(initializeClass);
            return PositiveIntOutputs(env->callStaticObjectMethod(cls, mids$[mid_getSingleton_62a4b337]));
          }

          ::java::lang::String PositiveIntOutputs::outputToString(const ::java::lang::Long & a0) const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_outputToString_d1a33160], a0.this$));
          }

          jlong PositiveIntOutputs::ramBytesUsed(const ::java::lang::Long & a0) const
          {
            return env->callLongMethod(this$, mids$[mid_ramBytesUsed_da55802d], a0.this$);
          }

          ::java::lang::Long PositiveIntOutputs::read(const ::org::apache::lucene::store::DataInput & a0) const
          {
            return ::java::lang::Long(env->callObjectMethod(this$, mids$[mid_read_5eca7461], a0.this$));
          }

          ::java::lang::Long PositiveIntOutputs::subtract(const ::java::lang::Long & a0, const ::java::lang::Long & a1) const
          {
            return ::java::lang::Long(env->callObjectMethod(this$, mids$[mid_subtract_9f6e77f0], a0.this$, a1.this$));
          }

          ::java::lang::String PositiveIntOutputs::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
          }

          void PositiveIntOutputs::write(const ::java::lang::Long & a0, const ::org::apache::lucene::store::DataOutput & a1) const
          {
            env->callVoidMethod(this$, mids$[mid_write_6466b4a8], a0.this$, a1.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace fst {
          static PyObject *t_PositiveIntOutputs_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PositiveIntOutputs_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PositiveIntOutputs_of_(t_PositiveIntOutputs *self, PyObject *args);
          static PyObject *t_PositiveIntOutputs_add(t_PositiveIntOutputs *self, PyObject *args);
          static PyObject *t_PositiveIntOutputs_common(t_PositiveIntOutputs *self, PyObject *args);
          static PyObject *t_PositiveIntOutputs_getNoOutput(t_PositiveIntOutputs *self, PyObject *args);
          static PyObject *t_PositiveIntOutputs_getSingleton(PyTypeObject *type);
          static PyObject *t_PositiveIntOutputs_outputToString(t_PositiveIntOutputs *self, PyObject *args);
          static PyObject *t_PositiveIntOutputs_ramBytesUsed(t_PositiveIntOutputs *self, PyObject *args);
          static PyObject *t_PositiveIntOutputs_read(t_PositiveIntOutputs *self, PyObject *args);
          static PyObject *t_PositiveIntOutputs_subtract(t_PositiveIntOutputs *self, PyObject *args);
          static PyObject *t_PositiveIntOutputs_toString(t_PositiveIntOutputs *self, PyObject *args);
          static PyObject *t_PositiveIntOutputs_write(t_PositiveIntOutputs *self, PyObject *args);
          static PyObject *t_PositiveIntOutputs_get__noOutput(t_PositiveIntOutputs *self, void *data);
          static PyObject *t_PositiveIntOutputs_get__singleton(t_PositiveIntOutputs *self, void *data);
          static PyObject *t_PositiveIntOutputs_get__parameters_(t_PositiveIntOutputs *self, void *data);
          static PyGetSetDef t_PositiveIntOutputs__fields_[] = {
            DECLARE_GET_FIELD(t_PositiveIntOutputs, noOutput),
            DECLARE_GET_FIELD(t_PositiveIntOutputs, singleton),
            DECLARE_GET_FIELD(t_PositiveIntOutputs, parameters_),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_PositiveIntOutputs__methods_[] = {
            DECLARE_METHOD(t_PositiveIntOutputs, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PositiveIntOutputs, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PositiveIntOutputs, of_, METH_VARARGS),
            DECLARE_METHOD(t_PositiveIntOutputs, add, METH_VARARGS),
            DECLARE_METHOD(t_PositiveIntOutputs, common, METH_VARARGS),
            DECLARE_METHOD(t_PositiveIntOutputs, getNoOutput, METH_VARARGS),
            DECLARE_METHOD(t_PositiveIntOutputs, getSingleton, METH_NOARGS | METH_CLASS),
            DECLARE_METHOD(t_PositiveIntOutputs, outputToString, METH_VARARGS),
            DECLARE_METHOD(t_PositiveIntOutputs, ramBytesUsed, METH_VARARGS),
            DECLARE_METHOD(t_PositiveIntOutputs, read, METH_VARARGS),
            DECLARE_METHOD(t_PositiveIntOutputs, subtract, METH_VARARGS),
            DECLARE_METHOD(t_PositiveIntOutputs, toString, METH_VARARGS),
            DECLARE_METHOD(t_PositiveIntOutputs, write, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(PositiveIntOutputs, t_PositiveIntOutputs, ::org::apache::lucene::util::fst::Outputs, PositiveIntOutputs, abstract_init, 0, 0, t_PositiveIntOutputs__fields_, 0, 0);
          PyObject *t_PositiveIntOutputs::wrap_Object(const PositiveIntOutputs& object, PyTypeObject *p0)
          {
            PyObject *obj = t_PositiveIntOutputs::wrap_Object(object);
            if (obj != NULL && obj != Py_None)
            {
              t_PositiveIntOutputs *self = (t_PositiveIntOutputs *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          PyObject *t_PositiveIntOutputs::wrap_jobject(const jobject& object, PyTypeObject *p0)
          {
            PyObject *obj = t_PositiveIntOutputs::wrap_jobject(object);
            if (obj != NULL && obj != Py_None)
            {
              t_PositiveIntOutputs *self = (t_PositiveIntOutputs *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          void t_PositiveIntOutputs::install(PyObject *module)
          {
            installType(&PY_TYPE(PositiveIntOutputs), module, "PositiveIntOutputs", 0);
          }

          void t_PositiveIntOutputs::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(PositiveIntOutputs).tp_dict, "class_", make_descriptor(PositiveIntOutputs::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(PositiveIntOutputs).tp_dict, "wrapfn_", make_descriptor(t_PositiveIntOutputs::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(PositiveIntOutputs).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_PositiveIntOutputs_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, PositiveIntOutputs::initializeClass, 1)))
              return NULL;
            return t_PositiveIntOutputs::wrap_Object(PositiveIntOutputs(((t_PositiveIntOutputs *) arg)->object.this$));
          }
          static PyObject *t_PositiveIntOutputs_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, PositiveIntOutputs::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_PositiveIntOutputs_of_(t_PositiveIntOutputs *self, PyObject *args)
          {
            if (!parseArg(args, "T", 1, &(self->parameters)))
              Py_RETURN_SELF;
            return PyErr_SetArgsError((PyObject *) self, "of_", args);
          }

          static PyObject *t_PositiveIntOutputs_add(t_PositiveIntOutputs *self, PyObject *args)
          {
            ::java::lang::Long a0((jobject) NULL);
            ::java::lang::Long a1((jobject) NULL);
            ::java::lang::Long result((jobject) NULL);

            if (!parseArgs(args, "OO", &::java::lang::PY_TYPE(Long), &::java::lang::PY_TYPE(Long), &a0, &a1))
            {
              OBJ_CALL(result = self->object.add(a0, a1));
              return ::java::lang::t_Long::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(PositiveIntOutputs), (PyObject *) self, "add", args, 2);
          }

          static PyObject *t_PositiveIntOutputs_common(t_PositiveIntOutputs *self, PyObject *args)
          {
            ::java::lang::Long a0((jobject) NULL);
            ::java::lang::Long a1((jobject) NULL);
            ::java::lang::Long result((jobject) NULL);

            if (!parseArgs(args, "OO", &::java::lang::PY_TYPE(Long), &::java::lang::PY_TYPE(Long), &a0, &a1))
            {
              OBJ_CALL(result = self->object.common(a0, a1));
              return ::java::lang::t_Long::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(PositiveIntOutputs), (PyObject *) self, "common", args, 2);
          }

          static PyObject *t_PositiveIntOutputs_getNoOutput(t_PositiveIntOutputs *self, PyObject *args)
          {
            ::java::lang::Long result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.getNoOutput());
              return ::java::lang::t_Long::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(PositiveIntOutputs), (PyObject *) self, "getNoOutput", args, 2);
          }

          static PyObject *t_PositiveIntOutputs_getSingleton(PyTypeObject *type)
          {
            PositiveIntOutputs result((jobject) NULL);
            OBJ_CALL(result = ::org::apache::lucene::util::fst::PositiveIntOutputs::getSingleton());
            return t_PositiveIntOutputs::wrap_Object(result);
          }

          static PyObject *t_PositiveIntOutputs_outputToString(t_PositiveIntOutputs *self, PyObject *args)
          {
            ::java::lang::Long a0((jobject) NULL);
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, "O", &::java::lang::PY_TYPE(Long), &a0))
            {
              OBJ_CALL(result = self->object.outputToString(a0));
              return j2p(result);
            }

            return callSuper(&PY_TYPE(PositiveIntOutputs), (PyObject *) self, "outputToString", args, 2);
          }

          static PyObject *t_PositiveIntOutputs_ramBytesUsed(t_PositiveIntOutputs *self, PyObject *args)
          {
            ::java::lang::Long a0((jobject) NULL);
            jlong result;

            if (!parseArgs(args, "O", &::java::lang::PY_TYPE(Long), &a0))
            {
              OBJ_CALL(result = self->object.ramBytesUsed(a0));
              return PyLong_FromLongLong((PY_LONG_LONG) result);
            }

            return callSuper(&PY_TYPE(PositiveIntOutputs), (PyObject *) self, "ramBytesUsed", args, 2);
          }

          static PyObject *t_PositiveIntOutputs_read(t_PositiveIntOutputs *self, PyObject *args)
          {
            ::org::apache::lucene::store::DataInput a0((jobject) NULL);
            ::java::lang::Long result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::store::DataInput::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.read(a0));
              return ::java::lang::t_Long::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(PositiveIntOutputs), (PyObject *) self, "read", args, 2);
          }

          static PyObject *t_PositiveIntOutputs_subtract(t_PositiveIntOutputs *self, PyObject *args)
          {
            ::java::lang::Long a0((jobject) NULL);
            ::java::lang::Long a1((jobject) NULL);
            ::java::lang::Long result((jobject) NULL);

            if (!parseArgs(args, "OO", &::java::lang::PY_TYPE(Long), &::java::lang::PY_TYPE(Long), &a0, &a1))
            {
              OBJ_CALL(result = self->object.subtract(a0, a1));
              return ::java::lang::t_Long::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(PositiveIntOutputs), (PyObject *) self, "subtract", args, 2);
          }

          static PyObject *t_PositiveIntOutputs_toString(t_PositiveIntOutputs *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(&PY_TYPE(PositiveIntOutputs), (PyObject *) self, "toString", args, 2);
          }

          static PyObject *t_PositiveIntOutputs_write(t_PositiveIntOutputs *self, PyObject *args)
          {
            ::java::lang::Long a0((jobject) NULL);
            ::org::apache::lucene::store::DataOutput a1((jobject) NULL);

            if (!parseArgs(args, "Ok", &::java::lang::PY_TYPE(Long), ::org::apache::lucene::store::DataOutput::initializeClass, &a0, &a1))
            {
              OBJ_CALL(self->object.write(a0, a1));
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(PositiveIntOutputs), (PyObject *) self, "write", args, 2);
          }
          static PyObject *t_PositiveIntOutputs_get__parameters_(t_PositiveIntOutputs *self, void *data)
          {
            return typeParameters(self->parameters, sizeof(self->parameters));
          }

          static PyObject *t_PositiveIntOutputs_get__noOutput(t_PositiveIntOutputs *self, void *data)
          {
            ::java::lang::Long value((jobject) NULL);
            OBJ_CALL(value = self->object.getNoOutput());
            return ::java::lang::t_Long::wrap_Object(value);
          }

          static PyObject *t_PositiveIntOutputs_get__singleton(t_PositiveIntOutputs *self, void *data)
          {
            PositiveIntOutputs value((jobject) NULL);
            OBJ_CALL(value = self->object.getSingleton());
            return t_PositiveIntOutputs::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/synonym/SynonymMap.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "org/apache/lucene/util/BytesRefHash.h"
#include "org/apache/lucene/util/fst/FST.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace synonym {

          ::java::lang::Class *SynonymMap::class$ = NULL;
          jmethodID *SynonymMap::mids$ = NULL;
          jfieldID *SynonymMap::fids$ = NULL;
          bool SynonymMap::live$ = false;
          jchar SynonymMap::WORD_SEPARATOR = (jchar) 0;

          jclass SynonymMap::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/synonym/SynonymMap");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4abf6d88] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/fst/FST;Lorg/apache/lucene/util/BytesRefHash;I)V");

              fids$ = new jfieldID[max_fid];
              fids$[fid_fst] = env->getFieldID(cls, "fst", "Lorg/apache/lucene/util/fst/FST;");
              fids$[fid_maxHorizontalContext] = env->getFieldID(cls, "maxHorizontalContext", "I");
              fids$[fid_words] = env->getFieldID(cls, "words", "Lorg/apache/lucene/util/BytesRefHash;");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              WORD_SEPARATOR = env->getStaticCharField(cls, "WORD_SEPARATOR");
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          SynonymMap::SynonymMap(const ::org::apache::lucene::util::fst::FST & a0, const ::org::apache::lucene::util::BytesRefHash & a1, jint a2) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_4abf6d88, a0.this$, a1.this$, a2)) {}

          ::org::apache::lucene::util::fst::FST SynonymMap::_get_fst() const
          {
            return ::org::apache::lucene::util::fst::FST(env->getObjectField(this$, fids$[fid_fst]));
          }

          jint SynonymMap::_get_maxHorizontalContext() const
          {
            return env->getIntField(this$, fids$[fid_maxHorizontalContext]);
          }

          ::org::apache::lucene::util::BytesRefHash SynonymMap::_get_words() const
          {
            return ::org::apache::lucene::util::BytesRefHash(env->getObjectField(this$, fids$[fid_words]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"
#include "org/apache/lucene/analysis/synonym/SynonymMap$Parser.h"
#include "org/apache/lucene/analysis/synonym/SynonymMap$Builder.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace synonym {
          static PyObject *t_SynonymMap_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SynonymMap_instance_(PyTypeObject *type, PyObject *arg);
          static int t_SynonymMap_init_(t_SynonymMap *self, PyObject *args, PyObject *kwds);
          static PyObject *t_SynonymMap_get__fst(t_SynonymMap *self, void *data);
          static PyObject *t_SynonymMap_get__maxHorizontalContext(t_SynonymMap *self, void *data);
          static PyObject *t_SynonymMap_get__words(t_SynonymMap *self, void *data);

          static PyGetSetDef t_SynonymMap__fields_[] = {
            DECLARE_GET_FIELD(t_SynonymMap, fst),
            DECLARE_GET_FIELD(t_SynonymMap, maxHorizontalContext),
            DECLARE_GET_FIELD(t_SynonymMap, words),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_SynonymMap__methods_[] = {
            DECLARE_METHOD(t_SynonymMap, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SynonymMap, instance_, METH_O | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(SynonymMap, t_SynonymMap, ::java::lang::Object, SynonymMap, t_SynonymMap_init_, 0, 0, t_SynonymMap__fields_, 0, 0);

          void t_SynonymMap::install(PyObject *module)
          {
            installType(&PY_TYPE(SynonymMap), module, "SynonymMap", 0);
            PyDict_SetItemString(PY_TYPE(SynonymMap).tp_dict, "Parser", make_descriptor(&PY_TYPE(SynonymMap$Parser)));
            PyDict_SetItemString(PY_TYPE(SynonymMap).tp_dict, "Builder", make_descriptor(&PY_TYPE(SynonymMap$Builder)));
          }

          void t_SynonymMap::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(SynonymMap).tp_dict, "class_", make_descriptor(SynonymMap::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(SynonymMap).tp_dict, "wrapfn_", make_descriptor(t_SynonymMap::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(SynonymMap).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(SynonymMap::initializeClass);
            PyDict_SetItemString(PY_TYPE(SynonymMap).tp_dict, "WORD_SEPARATOR", make_descriptor(SynonymMap::WORD_SEPARATOR));
          }

          static PyObject *t_SynonymMap_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, SynonymMap::initializeClass, 1)))
              return NULL;
            return t_SynonymMap::wrap_Object(SynonymMap(((t_SynonymMap *) arg)->object.this$));
          }
          static PyObject *t_SynonymMap_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, SynonymMap::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_SynonymMap_init_(t_SynonymMap *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::util::fst::FST a0((jobject) NULL);
            PyTypeObject **p0;
            ::org::apache::lucene::util::BytesRefHash a1((jobject) NULL);
            jint a2;
            SynonymMap object((jobject) NULL);

            if (!parseArgs(args, "KkI", ::org::apache::lucene::util::fst::FST::initializeClass, ::org::apache::lucene::util::BytesRefHash::initializeClass, &a0, &p0, ::org::apache::lucene::util::fst::t_FST::parameters_, &a1, &a2))
            {
              INT_CALL(object = SynonymMap(a0, a1, a2));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_SynonymMap_get__fst(t_SynonymMap *self, void *data)
          {
            ::org::apache::lucene::util::fst::FST value((jobject) NULL);
            OBJ_CALL(value = self->object._get_fst());
            return ::org::apache::lucene::util::fst::t_FST::wrap_Object(value);
          }

          static PyObject *t_SynonymMap_get__maxHorizontalContext(t_SynonymMap *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object._get_maxHorizontalContext());
            return PyInt_FromLong((long) value);
          }

          static PyObject *t_SynonymMap_get__words(t_SynonymMap *self, void *data)
          {
            ::org::apache::lucene::util::BytesRefHash value((jobject) NULL);
            OBJ_CALL(value = self->object._get_words());
            return ::org::apache::lucene::util::t_BytesRefHash::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/standard/processors/WildcardQueryNodeProcessor.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace processors {

              ::java::lang::Class *WildcardQueryNodeProcessor::class$ = NULL;
              jmethodID *WildcardQueryNodeProcessor::mids$ = NULL;
              bool WildcardQueryNodeProcessor::live$ = false;

              jclass WildcardQueryNodeProcessor::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/standard/processors/WildcardQueryNodeProcessor");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
                  mids$[mid_preProcessNode_6705aed7] = env->getMethodID(cls, "preProcessNode", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;)Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;");
                  mids$[mid_setChildrenOrder_4f378251] = env->getMethodID(cls, "setChildrenOrder", "(Ljava/util/List;)Ljava/util/List;");
                  mids$[mid_postProcessNode_6705aed7] = env->getMethodID(cls, "postProcessNode", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;)Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              WildcardQueryNodeProcessor::WildcardQueryNodeProcessor() : ::org::apache::lucene::queryparser::flexible::core::processors::QueryNodeProcessorImpl(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace processors {
              static PyObject *t_WildcardQueryNodeProcessor_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_WildcardQueryNodeProcessor_instance_(PyTypeObject *type, PyObject *arg);
              static int t_WildcardQueryNodeProcessor_init_(t_WildcardQueryNodeProcessor *self, PyObject *args, PyObject *kwds);

              static PyMethodDef t_WildcardQueryNodeProcessor__methods_[] = {
                DECLARE_METHOD(t_WildcardQueryNodeProcessor, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_WildcardQueryNodeProcessor, instance_, METH_O | METH_CLASS),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(WildcardQueryNodeProcessor, t_WildcardQueryNodeProcessor, ::org::apache::lucene::queryparser::flexible::core::processors::QueryNodeProcessorImpl, WildcardQueryNodeProcessor, t_WildcardQueryNodeProcessor_init_, 0, 0, 0, 0, 0);

              void t_WildcardQueryNodeProcessor::install(PyObject *module)
              {
                installType(&PY_TYPE(WildcardQueryNodeProcessor), module, "WildcardQueryNodeProcessor", 0);
              }

              void t_WildcardQueryNodeProcessor::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(WildcardQueryNodeProcessor).tp_dict, "class_", make_descriptor(WildcardQueryNodeProcessor::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(WildcardQueryNodeProcessor).tp_dict, "wrapfn_", make_descriptor(t_WildcardQueryNodeProcessor::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(WildcardQueryNodeProcessor).tp_dict, "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_WildcardQueryNodeProcessor_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, WildcardQueryNodeProcessor::initializeClass, 1)))
                  return NULL;
                return t_WildcardQueryNodeProcessor::wrap_Object(WildcardQueryNodeProcessor(((t_WildcardQueryNodeProcessor *) arg)->object.this$));
              }
              static PyObject *t_WildcardQueryNodeProcessor_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, WildcardQueryNodeProcessor::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_WildcardQueryNodeProcessor_init_(t_WildcardQueryNodeProcessor *self, PyObject *args, PyObject *kwds)
              {
                WildcardQueryNodeProcessor object((jobject) NULL);

                INT_CALL(object = WildcardQueryNodeProcessor());
                self->object = object;

                return 0;
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/miscellaneous/CapitalizationFilterFactory.h"
#include "org/apache/lucene/analysis/miscellaneous/CapitalizationFilter.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/String.h"
#include "java/util/Map.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {

          ::java::lang::Class *CapitalizationFilterFactory::class$ = NULL;
          jmethodID *CapitalizationFilterFactory::mids$ = NULL;
          bool CapitalizationFilterFactory::live$ = false;
          ::java::lang::String *CapitalizationFilterFactory::FORCE_FIRST_LETTER = NULL;
          ::java::lang::String *CapitalizationFilterFactory::KEEP = NULL;
          ::java::lang::String *CapitalizationFilterFactory::KEEP_IGNORE_CASE = NULL;
          ::java::lang::String *CapitalizationFilterFactory::MAX_TOKEN_LENGTH = NULL;
          ::java::lang::String *CapitalizationFilterFactory::MAX_WORD_COUNT = NULL;
          ::java::lang::String *CapitalizationFilterFactory::MIN_WORD_LENGTH = NULL;
          ::java::lang::String *CapitalizationFilterFactory::OK_PREFIX = NULL;
          ::java::lang::String *CapitalizationFilterFactory::ONLY_FIRST_WORD = NULL;

          jclass CapitalizationFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/miscellaneous/CapitalizationFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4c9e2b1c] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_9cf532c8] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/miscellaneous/CapitalizationFilter;");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              FORCE_FIRST_LETTER = new ::java::lang::String(env->getStaticObjectField(cls, "FORCE_FIRST_LETTER", "Ljava/lang/String;"));
              KEEP = new ::java::lang::String(env->getStaticObjectField(cls, "KEEP", "Ljava/lang/String;"));
              KEEP_IGNORE_CASE = new ::java::lang::String(env->getStaticObjectField(cls, "KEEP_IGNORE_CASE", "Ljava/lang/String;"));
              MAX_TOKEN_LENGTH = new ::java::lang::String(env->getStaticObjectField(cls, "MAX_TOKEN_LENGTH", "Ljava/lang/String;"));
              MAX_WORD_COUNT = new ::java::lang::String(env->getStaticObjectField(cls, "MAX_WORD_COUNT", "Ljava/lang/String;"));
              MIN_WORD_LENGTH = new ::java::lang::String(env->getStaticObjectField(cls, "MIN_WORD_LENGTH", "Ljava/lang/String;"));
              OK_PREFIX = new ::java::lang::String(env->getStaticObjectField(cls, "OK_PREFIX", "Ljava/lang/String;"));
              ONLY_FIRST_WORD = new ::java::lang::String(env->getStaticObjectField(cls, "ONLY_FIRST_WORD", "Ljava/lang/String;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          CapitalizationFilterFactory::CapitalizationFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_4c9e2b1c, a0.this$)) {}

          ::org::apache::lucene::analysis::miscellaneous::CapitalizationFilter CapitalizationFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::miscellaneous::CapitalizationFilter(env->callObjectMethod(this$, mids$[mid_create_9cf532c8], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {
          static PyObject *t_CapitalizationFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_CapitalizationFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_CapitalizationFilterFactory_init_(t_CapitalizationFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_CapitalizationFilterFactory_create(t_CapitalizationFilterFactory *self, PyObject *args);

          static PyMethodDef t_CapitalizationFilterFactory__methods_[] = {
            DECLARE_METHOD(t_CapitalizationFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CapitalizationFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CapitalizationFilterFactory, create, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(CapitalizationFilterFactory, t_CapitalizationFilterFactory, ::org::apache::lucene::analysis::util::TokenFilterFactory, CapitalizationFilterFactory, t_CapitalizationFilterFactory_init_, 0, 0, 0, 0, 0);

          void t_CapitalizationFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(CapitalizationFilterFactory), module, "CapitalizationFilterFactory", 0);
          }

          void t_CapitalizationFilterFactory::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(CapitalizationFilterFactory).tp_dict, "class_", make_descriptor(CapitalizationFilterFactory::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(CapitalizationFilterFactory).tp_dict, "wrapfn_", make_descriptor(t_CapitalizationFilterFactory::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(CapitalizationFilterFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(CapitalizationFilterFactory::initializeClass);
            PyDict_SetItemString(PY_TYPE(CapitalizationFilterFactory).tp_dict, "FORCE_FIRST_LETTER", make_descriptor(j2p(*CapitalizationFilterFactory::FORCE_FIRST_LETTER)));
            PyDict_SetItemString(PY_TYPE(CapitalizationFilterFactory).tp_dict, "KEEP", make_descriptor(j2p(*CapitalizationFilterFactory::KEEP)));
            PyDict_SetItemString(PY_TYPE(CapitalizationFilterFactory).tp_dict, "KEEP_IGNORE_CASE", make_descriptor(j2p(*CapitalizationFilterFactory::KEEP_IGNORE_CASE)));
            PyDict_SetItemString(PY_TYPE(CapitalizationFilterFactory).tp_dict, "MAX_TOKEN_LENGTH", make_descriptor(j2p(*CapitalizationFilterFactory::MAX_TOKEN_LENGTH)));
            PyDict_SetItemString(PY_TYPE(CapitalizationFilterFactory).tp_dict, "MAX_WORD_COUNT", make_descriptor(j2p(*CapitalizationFilterFactory::MAX_WORD_COUNT)));
            PyDict_SetItemString(PY_TYPE(CapitalizationFilterFactory).tp_dict, "MIN_WORD_LENGTH", make_descriptor(j2p(*CapitalizationFilterFactory::MIN_WORD_LENGTH)));
            PyDict_SetItemString(PY_TYPE(CapitalizationFilterFactory).tp_dict, "OK_PREFIX", make_descriptor(j2p(*CapitalizationFilterFactory::OK_PREFIX)));
            PyDict_SetItemString(PY_TYPE(CapitalizationFilterFactory).tp_dict, "ONLY_FIRST_WORD", make_descriptor(j2p(*CapitalizationFilterFactory::ONLY_FIRST_WORD)));
          }

          static PyObject *t_CapitalizationFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, CapitalizationFilterFactory::initializeClass, 1)))
              return NULL;
            return t_CapitalizationFilterFactory::wrap_Object(CapitalizationFilterFactory(((t_CapitalizationFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_CapitalizationFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, CapitalizationFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_CapitalizationFilterFactory_init_(t_CapitalizationFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            CapitalizationFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = CapitalizationFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_CapitalizationFilterFactory_create(t_CapitalizationFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::miscellaneous::CapitalizationFilter result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::miscellaneous::t_CapitalizationFilter::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(CapitalizationFilterFactory), (PyObject *) self, "create", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/FieldCacheSanityChecker$Insanity.h"
#include "org/apache/lucene/util/FieldCacheSanityChecker$InsanityType.h"
#include "java/lang/String.h"
#include "org/apache/lucene/search/FieldCache$CacheEntry.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *FieldCacheSanityChecker$Insanity::class$ = NULL;
        jmethodID *FieldCacheSanityChecker$Insanity::mids$ = NULL;
        bool FieldCacheSanityChecker$Insanity::live$ = false;

        jclass FieldCacheSanityChecker$Insanity::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/FieldCacheSanityChecker$Insanity");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_9b412c8f] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/FieldCacheSanityChecker$InsanityType;Ljava/lang/String;[Lorg/apache/lucene/search/FieldCache$CacheEntry;)V");
            mids$[mid_getCacheEntries_2bd7104e] = env->getMethodID(cls, "getCacheEntries", "()[Lorg/apache/lucene/search/FieldCache$CacheEntry;");
            mids$[mid_getMsg_14c7b5c5] = env->getMethodID(cls, "getMsg", "()Ljava/lang/String;");
            mids$[mid_getType_e7f4e575] = env->getMethodID(cls, "getType", "()Lorg/apache/lucene/util/FieldCacheSanityChecker$InsanityType;");
            mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        FieldCacheSanityChecker$Insanity::FieldCacheSanityChecker$Insanity(const ::org::apache::lucene::util::FieldCacheSanityChecker$InsanityType & a0, const ::java::lang::String & a1, const JArray< ::org::apache::lucene::search::FieldCache$CacheEntry > & a2) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_9b412c8f, a0.this$, a1.this$, a2.this$)) {}

        JArray< ::org::apache::lucene::search::FieldCache$CacheEntry > FieldCacheSanityChecker$Insanity::getCacheEntries() const
        {
          return JArray< ::org::apache::lucene::search::FieldCache$CacheEntry >(env->callObjectMethod(this$, mids$[mid_getCacheEntries_2bd7104e]));
        }

        ::java::lang::String FieldCacheSanityChecker$Insanity::getMsg() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getMsg_14c7b5c5]));
        }

        ::org::apache::lucene::util::FieldCacheSanityChecker$InsanityType FieldCacheSanityChecker$Insanity::getType() const
        {
          return ::org::apache::lucene::util::FieldCacheSanityChecker$InsanityType(env->callObjectMethod(this$, mids$[mid_getType_e7f4e575]));
        }

        ::java::lang::String FieldCacheSanityChecker$Insanity::toString() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_FieldCacheSanityChecker$Insanity_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FieldCacheSanityChecker$Insanity_instance_(PyTypeObject *type, PyObject *arg);
        static int t_FieldCacheSanityChecker$Insanity_init_(t_FieldCacheSanityChecker$Insanity *self, PyObject *args, PyObject *kwds);
        static PyObject *t_FieldCacheSanityChecker$Insanity_getCacheEntries(t_FieldCacheSanityChecker$Insanity *self);
        static PyObject *t_FieldCacheSanityChecker$Insanity_getMsg(t_FieldCacheSanityChecker$Insanity *self);
        static PyObject *t_FieldCacheSanityChecker$Insanity_getType(t_FieldCacheSanityChecker$Insanity *self);
        static PyObject *t_FieldCacheSanityChecker$Insanity_toString(t_FieldCacheSanityChecker$Insanity *self, PyObject *args);
        static PyObject *t_FieldCacheSanityChecker$Insanity_get__cacheEntries(t_FieldCacheSanityChecker$Insanity *self, void *data);
        static PyObject *t_FieldCacheSanityChecker$Insanity_get__msg(t_FieldCacheSanityChecker$Insanity *self, void *data);
        static PyObject *t_FieldCacheSanityChecker$Insanity_get__type(t_FieldCacheSanityChecker$Insanity *self, void *data);
        static PyGetSetDef t_FieldCacheSanityChecker$Insanity__fields_[] = {
          DECLARE_GET_FIELD(t_FieldCacheSanityChecker$Insanity, cacheEntries),
          DECLARE_GET_FIELD(t_FieldCacheSanityChecker$Insanity, msg),
          DECLARE_GET_FIELD(t_FieldCacheSanityChecker$Insanity, type),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_FieldCacheSanityChecker$Insanity__methods_[] = {
          DECLARE_METHOD(t_FieldCacheSanityChecker$Insanity, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FieldCacheSanityChecker$Insanity, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FieldCacheSanityChecker$Insanity, getCacheEntries, METH_NOARGS),
          DECLARE_METHOD(t_FieldCacheSanityChecker$Insanity, getMsg, METH_NOARGS),
          DECLARE_METHOD(t_FieldCacheSanityChecker$Insanity, getType, METH_NOARGS),
          DECLARE_METHOD(t_FieldCacheSanityChecker$Insanity, toString, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(FieldCacheSanityChecker$Insanity, t_FieldCacheSanityChecker$Insanity, ::java::lang::Object, FieldCacheSanityChecker$Insanity, t_FieldCacheSanityChecker$Insanity_init_, 0, 0, t_FieldCacheSanityChecker$Insanity__fields_, 0, 0);

        void t_FieldCacheSanityChecker$Insanity::install(PyObject *module)
        {
          installType(&PY_TYPE(FieldCacheSanityChecker$Insanity), module, "FieldCacheSanityChecker$Insanity", 0);
        }

        void t_FieldCacheSanityChecker$Insanity::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(FieldCacheSanityChecker$Insanity).tp_dict, "class_", make_descriptor(FieldCacheSanityChecker$Insanity::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(FieldCacheSanityChecker$Insanity).tp_dict, "wrapfn_", make_descriptor(t_FieldCacheSanityChecker$Insanity::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(FieldCacheSanityChecker$Insanity).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_FieldCacheSanityChecker$Insanity_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, FieldCacheSanityChecker$Insanity::initializeClass, 1)))
            return NULL;
          return t_FieldCacheSanityChecker$Insanity::wrap_Object(FieldCacheSanityChecker$Insanity(((t_FieldCacheSanityChecker$Insanity *) arg)->object.this$));
        }
        static PyObject *t_FieldCacheSanityChecker$Insanity_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, FieldCacheSanityChecker$Insanity::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_FieldCacheSanityChecker$Insanity_init_(t_FieldCacheSanityChecker$Insanity *self, PyObject *args, PyObject *kwds)
        {
          ::org::apache::lucene::util::FieldCacheSanityChecker$InsanityType a0((jobject) NULL);
          ::java::lang::String a1((jobject) NULL);
          JArray< ::org::apache::lucene::search::FieldCache$CacheEntry > a2((jobject) NULL);
          FieldCacheSanityChecker$Insanity object((jobject) NULL);

          if (!parseArgs(args, "ks[k", ::org::apache::lucene::util::FieldCacheSanityChecker$InsanityType::initializeClass, ::org::apache::lucene::search::FieldCache$CacheEntry::initializeClass, &a0, &a1, &a2))
          {
            INT_CALL(object = FieldCacheSanityChecker$Insanity(a0, a1, a2));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_FieldCacheSanityChecker$Insanity_getCacheEntries(t_FieldCacheSanityChecker$Insanity *self)
        {
          JArray< ::org::apache::lucene::search::FieldCache$CacheEntry > result((jobject) NULL);
          OBJ_CALL(result = self->object.getCacheEntries());
          return JArray<jobject>(result.this$).wrap(::org::apache::lucene::search::t_FieldCache$CacheEntry::wrap_jobject);
        }

        static PyObject *t_FieldCacheSanityChecker$Insanity_getMsg(t_FieldCacheSanityChecker$Insanity *self)
        {
          ::java::lang::String result((jobject) NULL);
          OBJ_CALL(result = self->object.getMsg());
          return j2p(result);
        }

        static PyObject *t_FieldCacheSanityChecker$Insanity_getType(t_FieldCacheSanityChecker$Insanity *self)
        {
          ::org::apache::lucene::util::FieldCacheSanityChecker$InsanityType result((jobject) NULL);
          OBJ_CALL(result = self->object.getType());
          return ::org::apache::lucene::util::t_FieldCacheSanityChecker$InsanityType::wrap_Object(result);
        }

        static PyObject *t_FieldCacheSanityChecker$Insanity_toString(t_FieldCacheSanityChecker$Insanity *self, PyObject *args)
        {
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.toString());
            return j2p(result);
          }

          return callSuper(&PY_TYPE(FieldCacheSanityChecker$Insanity), (PyObject *) self, "toString", args, 2);
        }

        static PyObject *t_FieldCacheSanityChecker$Insanity_get__cacheEntries(t_FieldCacheSanityChecker$Insanity *self, void *data)
        {
          JArray< ::org::apache::lucene::search::FieldCache$CacheEntry > value((jobject) NULL);
          OBJ_CALL(value = self->object.getCacheEntries());
          return JArray<jobject>(value.this$).wrap(::org::apache::lucene::search::t_FieldCache$CacheEntry::wrap_jobject);
        }

        static PyObject *t_FieldCacheSanityChecker$Insanity_get__msg(t_FieldCacheSanityChecker$Insanity *self, void *data)
        {
          ::java::lang::String value((jobject) NULL);
          OBJ_CALL(value = self->object.getMsg());
          return j2p(value);
        }

        static PyObject *t_FieldCacheSanityChecker$Insanity_get__type(t_FieldCacheSanityChecker$Insanity *self, void *data)
        {
          ::org::apache::lucene::util::FieldCacheSanityChecker$InsanityType value((jobject) NULL);
          OBJ_CALL(value = self->object.getType());
          return ::org::apache::lucene::util::t_FieldCacheSanityChecker$InsanityType::wrap_Object(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/FieldCacheTermsFilter.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "org/apache/lucene/util/Bits.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "java/lang/String.h"
#include "org/apache/lucene/search/FieldCache.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/search/DocIdSet.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *FieldCacheTermsFilter::class$ = NULL;
        jmethodID *FieldCacheTermsFilter::mids$ = NULL;
        bool FieldCacheTermsFilter::live$ = false;

        jclass FieldCacheTermsFilter::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/FieldCacheTermsFilter");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_8fbc1a2e] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;[Lorg/apache/lucene/util/BytesRef;)V");
            mids$[mid_init$_ba45d66a] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;[Ljava/lang/String;)V");
            mids$[mid_getDocIdSet_ccce0897] = env->getMethodID(cls, "getDocIdSet", "(Lorg/apache/lucene/index/AtomicReaderContext;Lorg/apache/lucene/util/Bits;)Lorg/apache/lucene/search/DocIdSet;");
            mids$[mid_getFieldCache_a7c1cc27] = env->getMethodID(cls, "getFieldCache", "()Lorg/apache/lucene/search/FieldCache;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        FieldCacheTermsFilter::FieldCacheTermsFilter(const ::java::lang::String & a0, const JArray< ::org::apache::lucene::util::BytesRef > & a1) : ::org::apache::lucene::search::Filter(env->newObject(initializeClass, &mids$, mid_init$_8fbc1a2e, a0.this$, a1.this$)) {}

        FieldCacheTermsFilter::FieldCacheTermsFilter(const ::java::lang::String & a0, const JArray< ::java::lang::String > & a1) : ::org::apache::lucene::search::Filter(env->newObject(initializeClass, &mids$, mid_init$_ba45d66a, a0.this$, a1.this$)) {}

        ::org::apache::lucene::search::DocIdSet FieldCacheTermsFilter::getDocIdSet(const ::org::apache::lucene::index::AtomicReaderContext & a0, const ::org::apache::lucene::util::Bits & a1) const
        {
          return ::org::apache::lucene::search::DocIdSet(env->callObjectMethod(this$, mids$[mid_getDocIdSet_ccce0897], a0.this$, a1.this$));
        }

        ::org::apache::lucene::search::FieldCache FieldCacheTermsFilter::getFieldCache() const
        {
          return ::org::apache::lucene::search::FieldCache(env->callObjectMethod(this$, mids$[mid_getFieldCache_a7c1cc27]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_FieldCacheTermsFilter_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FieldCacheTermsFilter_instance_(PyTypeObject *type, PyObject *arg);
        static int t_FieldCacheTermsFilter_init_(t_FieldCacheTermsFilter *self, PyObject *args, PyObject *kwds);
        static PyObject *t_FieldCacheTermsFilter_getDocIdSet(t_FieldCacheTermsFilter *self, PyObject *args);
        static PyObject *t_FieldCacheTermsFilter_getFieldCache(t_FieldCacheTermsFilter *self);
        static PyObject *t_FieldCacheTermsFilter_get__fieldCache(t_FieldCacheTermsFilter *self, void *data);
        static PyGetSetDef t_FieldCacheTermsFilter__fields_[] = {
          DECLARE_GET_FIELD(t_FieldCacheTermsFilter, fieldCache),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_FieldCacheTermsFilter__methods_[] = {
          DECLARE_METHOD(t_FieldCacheTermsFilter, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FieldCacheTermsFilter, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FieldCacheTermsFilter, getDocIdSet, METH_VARARGS),
          DECLARE_METHOD(t_FieldCacheTermsFilter, getFieldCache, METH_NOARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(FieldCacheTermsFilter, t_FieldCacheTermsFilter, ::org::apache::lucene::search::Filter, FieldCacheTermsFilter, t_FieldCacheTermsFilter_init_, 0, 0, t_FieldCacheTermsFilter__fields_, 0, 0);

        void t_FieldCacheTermsFilter::install(PyObject *module)
        {
          installType(&PY_TYPE(FieldCacheTermsFilter), module, "FieldCacheTermsFilter", 0);
        }

        void t_FieldCacheTermsFilter::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(FieldCacheTermsFilter).tp_dict, "class_", make_descriptor(FieldCacheTermsFilter::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(FieldCacheTermsFilter).tp_dict, "wrapfn_", make_descriptor(t_FieldCacheTermsFilter::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(FieldCacheTermsFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_FieldCacheTermsFilter_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, FieldCacheTermsFilter::initializeClass, 1)))
            return NULL;
          return t_FieldCacheTermsFilter::wrap_Object(FieldCacheTermsFilter(((t_FieldCacheTermsFilter *) arg)->object.this$));
        }
        static PyObject *t_FieldCacheTermsFilter_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, FieldCacheTermsFilter::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_FieldCacheTermsFilter_init_(t_FieldCacheTermsFilter *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 2:
            {
              ::java::lang::String a0((jobject) NULL);
              JArray< ::org::apache::lucene::util::BytesRef > a1((jobject) NULL);
              FieldCacheTermsFilter object((jobject) NULL);

              if (!parseArgs(args, "s[k", ::org::apache::lucene::util::BytesRef::initializeClass, &a0, &a1))
              {
                INT_CALL(object = FieldCacheTermsFilter(a0, a1));
                self->object = object;
                break;
              }
            }
            {
              ::java::lang::String a0((jobject) NULL);
              JArray< ::java::lang::String > a1((jobject) NULL);
              FieldCacheTermsFilter object((jobject) NULL);

              if (!parseArgs(args, "s[s", &a0, &a1))
              {
                INT_CALL(object = FieldCacheTermsFilter(a0, a1));
                self->object = object;
                break;
              }
            }
           default:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_FieldCacheTermsFilter_getDocIdSet(t_FieldCacheTermsFilter *self, PyObject *args)
        {
          ::org::apache::lucene::index::AtomicReaderContext a0((jobject) NULL);
          ::org::apache::lucene::util::Bits a1((jobject) NULL);
          ::org::apache::lucene::search::DocIdSet result((jobject) NULL);

          if (!parseArgs(args, "kk", ::org::apache::lucene::index::AtomicReaderContext::initializeClass, ::org::apache::lucene::util::Bits::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = self->object.getDocIdSet(a0, a1));
            return ::org::apache::lucene::search::t_DocIdSet::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(FieldCacheTermsFilter), (PyObject *) self, "getDocIdSet", args, 2);
        }

        static PyObject *t_FieldCacheTermsFilter_getFieldCache(t_FieldCacheTermsFilter *self)
        {
          ::org::apache::lucene::search::FieldCache result((jobject) NULL);
          OBJ_CALL(result = self->object.getFieldCache());
          return ::org::apache::lucene::search::t_FieldCache::wrap_Object(result);
        }

        static PyObject *t_FieldCacheTermsFilter_get__fieldCache(t_FieldCacheTermsFilter *self, void *data)
        {
          ::org::apache::lucene::search::FieldCache value((jobject) NULL);
          OBJ_CALL(value = self->object.getFieldCache());
          return ::org::apache::lucene::search::t_FieldCache::wrap_Object(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/highlight/TextFragment.h"
#include "java/lang/CharSequence.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace highlight {

          ::java::lang::Class *TextFragment::class$ = NULL;
          jmethodID *TextFragment::mids$ = NULL;
          bool TextFragment::live$ = false;

          jclass TextFragment::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/highlight/TextFragment");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_6cc8d7e2] = env->getMethodID(cls, "<init>", "(Ljava/lang/CharSequence;II)V");
              mids$[mid_follows_0335a786] = env->getMethodID(cls, "follows", "(Lorg/apache/lucene/search/highlight/TextFragment;)Z");
              mids$[mid_getFragNum_54c6a179] = env->getMethodID(cls, "getFragNum", "()I");
              mids$[mid_getScore_54c6a176] = env->getMethodID(cls, "getScore", "()F");
              mids$[mid_merge_0335a78a] = env->getMethodID(cls, "merge", "(Lorg/apache/lucene/search/highlight/TextFragment;)V");
              mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          TextFragment::TextFragment(const ::java::lang::CharSequence & a0, jint a1, jint a2) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_6cc8d7e2, a0.this$, a1, a2)) {}

          jboolean TextFragment::follows(const TextFragment & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_follows_0335a786], a0.this$);
          }

          jint TextFragment::getFragNum() const
          {
            return env->callIntMethod(this$, mids$[mid_getFragNum_54c6a179]);
          }

          jfloat TextFragment::getScore() const
          {
            return env->callFloatMethod(this$, mids$[mid_getScore_54c6a176]);
          }

          void TextFragment::merge(const TextFragment & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_merge_0335a78a], a0.this$);
          }

          ::java::lang::String TextFragment::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace highlight {
          static PyObject *t_TextFragment_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_TextFragment_instance_(PyTypeObject *type, PyObject *arg);
          static int t_TextFragment_init_(t_TextFragment *self, PyObject *args, PyObject *kwds);
          static PyObject *t_TextFragment_follows(t_TextFragment *self, PyObject *arg);
          static PyObject *t_TextFragment_getFragNum(t_TextFragment *self);
          static PyObject *t_TextFragment_getScore(t_TextFragment *self);
          static PyObject *t_TextFragment_merge(t_TextFragment *self, PyObject *arg);
          static PyObject *t_TextFragment_toString(t_TextFragment *self, PyObject *args);
          static PyObject *t_TextFragment_get__fragNum(t_TextFragment *self, void *data);
          static PyObject *t_TextFragment_get__score(t_TextFragment *self, void *data);
          static PyGetSetDef t_TextFragment__fields_[] = {
            DECLARE_GET_FIELD(t_TextFragment, fragNum),
            DECLARE_GET_FIELD(t_TextFragment, score),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_TextFragment__methods_[] = {
            DECLARE_METHOD(t_TextFragment, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_TextFragment, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_TextFragment, follows, METH_O),
            DECLARE_METHOD(t_TextFragment, getFragNum, METH_NOARGS),
            DECLARE_METHOD(t_TextFragment, getScore, METH_NOARGS),
            DECLARE_METHOD(t_TextFragment, merge, METH_O),
            DECLARE_METHOD(t_TextFragment, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(TextFragment, t_TextFragment, ::java::lang::Object, TextFragment, t_TextFragment_init_, 0, 0, t_TextFragment__fields_, 0, 0);

          void t_TextFragment::install(PyObject *module)
          {
            installType(&PY_TYPE(TextFragment), module, "TextFragment", 0);
          }

          void t_TextFragment::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(TextFragment).tp_dict, "class_", make_descriptor(TextFragment::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(TextFragment).tp_dict, "wrapfn_", make_descriptor(t_TextFragment::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(TextFragment).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_TextFragment_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, TextFragment::initializeClass, 1)))
              return NULL;
            return t_TextFragment::wrap_Object(TextFragment(((t_TextFragment *) arg)->object.this$));
          }
          static PyObject *t_TextFragment_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, TextFragment::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_TextFragment_init_(t_TextFragment *self, PyObject *args, PyObject *kwds)
          {
            ::java::lang::CharSequence a0((jobject) NULL);
            jint a1;
            jint a2;
            TextFragment object((jobject) NULL);

            if (!parseArgs(args, "OII", &::java::lang::PY_TYPE(CharSequence), &a0, &a1, &a2))
            {
              INT_CALL(object = TextFragment(a0, a1, a2));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_TextFragment_follows(t_TextFragment *self, PyObject *arg)
          {
            TextFragment a0((jobject) NULL);
            jboolean result;

            if (!parseArg(arg, "k", TextFragment::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.follows(a0));
              Py_RETURN_BOOL(result);
            }

            PyErr_SetArgsError((PyObject *) self, "follows", arg);
            return NULL;
          }

          static PyObject *t_TextFragment_getFragNum(t_TextFragment *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getFragNum());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_TextFragment_getScore(t_TextFragment *self)
          {
            jfloat result;
            OBJ_CALL(result = self->object.getScore());
            return PyFloat_FromDouble((double) result);
          }

          static PyObject *t_TextFragment_merge(t_TextFragment *self, PyObject *arg)
          {
            TextFragment a0((jobject) NULL);

            if (!parseArg(arg, "k", TextFragment::initializeClass, &a0))
            {
              OBJ_CALL(self->object.merge(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "merge", arg);
            return NULL;
          }

          static PyObject *t_TextFragment_toString(t_TextFragment *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(&PY_TYPE(TextFragment), (PyObject *) self, "toString", args, 2);
          }

          static PyObject *t_TextFragment_get__fragNum(t_TextFragment *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getFragNum());
            return PyInt_FromLong((long) value);
          }

          static PyObject *t_TextFragment_get__score(t_TextFragment *self, void *data)
          {
            jfloat value;
            OBJ_CALL(value = self->object.getScore());
            return PyFloat_FromDouble((double) value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/core/processors/QueryNodeProcessorPipeline.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/queryparser/flexible/core/QueryNodeException.h"
#include "org/apache/lucene/queryparser/flexible/core/processors/QueryNodeProcessor.h"
#include "java/util/ListIterator.h"
#include "org/apache/lucene/queryparser/flexible/core/config/QueryConfigHandler.h"
#include "java/util/Iterator.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/QueryNode.h"
#include "java/util/Collection.h"
#include "java/util/List.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace processors {

              ::java::lang::Class *QueryNodeProcessorPipeline::class$ = NULL;
              jmethodID *QueryNodeProcessorPipeline::mids$ = NULL;
              bool QueryNodeProcessorPipeline::live$ = false;

              jclass QueryNodeProcessorPipeline::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/core/processors/QueryNodeProcessorPipeline");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
                  mids$[mid_init$_0b1f7132] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/queryparser/flexible/core/config/QueryConfigHandler;)V");
                  mids$[mid_add_507a7d19] = env->getMethodID(cls, "add", "(Lorg/apache/lucene/queryparser/flexible/core/processors/QueryNodeProcessor;)Z");
                  mids$[mid_add_f6ca4173] = env->getMethodID(cls, "add", "(ILorg/apache/lucene/queryparser/flexible/core/processors/QueryNodeProcessor;)V");
                  mids$[mid_addAll_9bfb3701] = env->getMethodID(cls, "addAll", "(Ljava/util/Collection;)Z");
                  mids$[mid_addAll_006cd2b7] = env->getMethodID(cls, "addAll", "(ILjava/util/Collection;)Z");
                  mids$[mid_clear_54c6a166] = env->getMethodID(cls, "clear", "()V");
                  mids$[mid_contains_290588e2] = env->getMethodID(cls, "contains", "(Ljava/lang/Object;)Z");
                  mids$[mid_containsAll_9bfb3701] = env->getMethodID(cls, "containsAll", "(Ljava/util/Collection;)Z");
                  mids$[mid_get_b9090432] = env->getMethodID(cls, "get", "(I)Lorg/apache/lucene/queryparser/flexible/core/processors/QueryNodeProcessor;");
                  mids$[mid_getQueryConfigHandler_3636d8c3] = env->getMethodID(cls, "getQueryConfigHandler", "()Lorg/apache/lucene/queryparser/flexible/core/config/QueryConfigHandler;");
                  mids$[mid_indexOf_290588f1] = env->getMethodID(cls, "indexOf", "(Ljava/lang/Object;)I");
                  mids$[mid_isEmpty_54c6a16a] = env->getMethodID(cls, "isEmpty", "()Z");
                  mids$[mid_iterator_40858c90] = env->getMethodID(cls, "iterator", "()Ljava/util/Iterator;");
                  mids$[mid_lastIndexOf_290588f1] = env->getMethodID(cls, "lastIndexOf", "(Ljava/lang/Object;)I");
                  mids$[mid_listIterator_b5be4e14] = env->getMethodID(cls, "listIterator", "()Ljava/util/ListIterator;");
                  mids$[mid_listIterator_4145ee6a] = env->getMethodID(cls, "listIterator", "(I)Ljava/util/ListIterator;");
                  mids$[mid_process_6705aed7] = env->getMethodID(cls, "process", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;)Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;");
                  mids$[mid_remove_b9090432] = env->getMethodID(cls, "remove", "(I)Lorg/apache/lucene/queryparser/flexible/core/processors/QueryNodeProcessor;");
                  mids$[mid_remove_290588e2] = env->getMethodID(cls, "remove", "(Ljava/lang/Object;)Z");
                  mids$[mid_removeAll_9bfb3701] = env->getMethodID(cls, "removeAll", "(Ljava/util/Collection;)Z");
                  mids$[mid_retainAll_9bfb3701] = env->getMethodID(cls, "retainAll", "(Ljava/util/Collection;)Z");
                  mids$[mid_set_adfc5df1] = env->getMethodID(cls, "set", "(ILorg/apache/lucene/queryparser/flexible/core/processors/QueryNodeProcessor;)Lorg/apache/lucene/queryparser/flexible/core/processors/QueryNodeProcessor;");
                  mids$[mid_setQueryConfigHandler_0b1f7132] = env->getMethodID(cls, "setQueryConfigHandler", "(Lorg/apache/lucene/queryparser/flexible/core/config/QueryConfigHandler;)V");
                  mids$[mid_size_54c6a179] = env->getMethodID(cls, "size", "()I");
                  mids$[mid_subList_6bc635fe] = env->getMethodID(cls, "subList", "(II)Ljava/util/List;");
                  mids$[mid_toArray_94e49c77] = env->getMethodID(cls, "toArray", "()[Ljava/lang/Object;");
                  mids$[mid_toArray_ae67dbcf] = env->getMethodID(cls, "toArray", "([Ljava/lang/Object;)[Ljava/lang/Object;");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              QueryNodeProcessorPipeline::QueryNodeProcessorPipeline() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

              QueryNodeProcessorPipeline::QueryNodeProcessorPipeline(const ::org::apache::lucene::queryparser::flexible::core::config::QueryConfigHandler & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_0b1f7132, a0.this$)) {}

              jboolean QueryNodeProcessorPipeline::add(const ::org::apache::lucene::queryparser::flexible::core::processors::QueryNodeProcessor & a0) const
              {
                return env->callBooleanMethod(this$, mids$[mid_add_507a7d19], a0.this$);
              }

              void QueryNodeProcessorPipeline::add(jint a0, const ::org::apache::lucene::queryparser::flexible::core::processors::QueryNodeProcessor & a1) const
              {
                env->callVoidMethod(this$, mids$[mid_add_f6ca4173], a0, a1.this$);
              }

              jboolean QueryNodeProcessorPipeline::addAll(const ::java::util::Collection & a0) const
              {
                return env->callBooleanMethod(this$, mids$[mid_addAll_9bfb3701], a0.this$);
              }

              jboolean QueryNodeProcessorPipeline::addAll(jint a0, const ::java::util::Collection & a1) const
              {
                return env->callBooleanMethod(this$, mids$[mid_addAll_006cd2b7], a0, a1.this$);
              }

              void QueryNodeProcessorPipeline::clear() const
              {
                env->callVoidMethod(this$, mids$[mid_clear_54c6a166]);
              }

              jboolean QueryNodeProcessorPipeline::contains(const ::java::lang::Object & a0) const
              {
                return env->callBooleanMethod(this$, mids$[mid_contains_290588e2], a0.this$);
              }

              jboolean QueryNodeProcessorPipeline::containsAll(const ::java::util::Collection & a0) const
              {
                return env->callBooleanMethod(this$, mids$[mid_containsAll_9bfb3701], a0.this$);
              }

              ::org::apache::lucene::queryparser::flexible::core::processors::QueryNodeProcessor QueryNodeProcessorPipeline::get(jint a0) const
              {
                return ::org::apache::lucene::queryparser::flexible::core::processors::QueryNodeProcessor(env->callObjectMethod(this$, mids$[mid_get_b9090432], a0));
              }

              ::org::apache::lucene::queryparser::flexible::core::config::QueryConfigHandler QueryNodeProcessorPipeline::getQueryConfigHandler() const
              {
                return ::org::apache::lucene::queryparser::flexible::core::config::QueryConfigHandler(env->callObjectMethod(this$, mids$[mid_getQueryConfigHandler_3636d8c3]));
              }

              jint QueryNodeProcessorPipeline::indexOf(const ::java::lang::Object & a0) const
              {
                return env->callIntMethod(this$, mids$[mid_indexOf_290588f1], a0.this$);
              }

              jboolean QueryNodeProcessorPipeline::isEmpty() const
              {
                return env->callBooleanMethod(this$, mids$[mid_isEmpty_54c6a16a]);
              }

              ::java::util::Iterator QueryNodeProcessorPipeline::iterator() const
              {
                return ::java::util::Iterator(env->callObjectMethod(this$, mids$[mid_iterator_40858c90]));
              }

              jint QueryNodeProcessorPipeline::lastIndexOf(const ::java::lang::Object & a0) const
              {
                return env->callIntMethod(this$, mids$[mid_lastIndexOf_290588f1], a0.this$);
              }

              ::java::util::ListIterator QueryNodeProcessorPipeline::listIterator() const
              {
                return ::java::util::ListIterator(env->callObjectMethod(this$, mids$[mid_listIterator_b5be4e14]));
              }

              ::java::util::ListIterator QueryNodeProcessorPipeline::listIterator(jint a0) const
              {
                return ::java::util::ListIterator(env->callObjectMethod(this$, mids$[mid_listIterator_4145ee6a], a0));
              }

              ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode QueryNodeProcessorPipeline::process(const ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode & a0) const
              {
                return ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode(env->callObjectMethod(this$, mids$[mid_process_6705aed7], a0.this$));
              }

              ::org::apache::lucene::queryparser::flexible::core::processors::QueryNodeProcessor QueryNodeProcessorPipeline::remove(jint a0) const
              {
                return ::org::apache::lucene::queryparser::flexible::core::processors::QueryNodeProcessor(env->callObjectMethod(this$, mids$[mid_remove_b9090432], a0));
              }

              jboolean QueryNodeProcessorPipeline::remove(const ::java::lang::Object & a0) const
              {
                return env->callBooleanMethod(this$, mids$[mid_remove_290588e2], a0.this$);
              }

              jboolean QueryNodeProcessorPipeline::removeAll(const ::java::util::Collection & a0) const
              {
                return env->callBooleanMethod(this$, mids$[mid_removeAll_9bfb3701], a0.this$);
              }

              jboolean QueryNodeProcessorPipeline::retainAll(const ::java::util::Collection & a0) const
              {
                return env->callBooleanMethod(this$, mids$[mid_retainAll_9bfb3701], a0.this$);
              }

              ::org::apache::lucene::queryparser::flexible::core::processors::QueryNodeProcessor QueryNodeProcessorPipeline::set(jint a0, const ::org::apache::lucene::queryparser::flexible::core::processors::QueryNodeProcessor & a1) const
              {
                return ::org::apache::lucene::queryparser::flexible::core::processors::QueryNodeProcessor(env->callObjectMethod(this$, mids$[mid_set_adfc5df1], a0, a1.this$));
              }

              void QueryNodeProcessorPipeline::setQueryConfigHandler(const ::org::apache::lucene::queryparser::flexible::core::config::QueryConfigHandler & a0) const
              {
                env->callVoidMethod(this$, mids$[mid_setQueryConfigHandler_0b1f7132], a0.this$);
              }

              jint QueryNodeProcessorPipeline::size() const
              {
                return env->callIntMethod(this$, mids$[mid_size_54c6a179]);
              }

              ::java::util::List QueryNodeProcessorPipeline::subList(jint a0, jint a1) const
              {
                return ::java::util::List(env->callObjectMethod(this$, mids$[mid_subList_6bc635fe], a0, a1));
              }

              JArray< ::java::lang::Object > QueryNodeProcessorPipeline::toArray() const
              {
                return JArray< ::java::lang::Object >(env->callObjectMethod(this$, mids$[mid_toArray_94e49c77]));
              }

              JArray< ::java::lang::Object > QueryNodeProcessorPipeline::toArray(const JArray< ::java::lang::Object > & a0) const
              {
                return JArray< ::java::lang::Object >(env->callObjectMethod(this$, mids$[mid_toArray_ae67dbcf], a0.this$));
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace processors {
              static PyObject *t_QueryNodeProcessorPipeline_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_QueryNodeProcessorPipeline_instance_(PyTypeObject *type, PyObject *arg);
              static int t_QueryNodeProcessorPipeline_init_(t_QueryNodeProcessorPipeline *self, PyObject *args, PyObject *kwds);
              static PyObject *t_QueryNodeProcessorPipeline_add(t_QueryNodeProcessorPipeline *self, PyObject *args);
              static PyObject *t_QueryNodeProcessorPipeline_addAll(t_QueryNodeProcessorPipeline *self, PyObject *args);
              static PyObject *t_QueryNodeProcessorPipeline_clear(t_QueryNodeProcessorPipeline *self);
              static PyObject *t_QueryNodeProcessorPipeline_contains(t_QueryNodeProcessorPipeline *self, PyObject *arg);
              static PyObject *t_QueryNodeProcessorPipeline_containsAll(t_QueryNodeProcessorPipeline *self, PyObject *arg);
              static PyObject *t_QueryNodeProcessorPipeline_get(t_QueryNodeProcessorPipeline *self, PyObject *arg);
              static PyObject *t_QueryNodeProcessorPipeline_getQueryConfigHandler(t_QueryNodeProcessorPipeline *self);
              static PyObject *t_QueryNodeProcessorPipeline_indexOf(t_QueryNodeProcessorPipeline *self, PyObject *arg);
              static PyObject *t_QueryNodeProcessorPipeline_isEmpty(t_QueryNodeProcessorPipeline *self);
              static PyObject *t_QueryNodeProcessorPipeline_iterator(t_QueryNodeProcessorPipeline *self);
              static PyObject *t_QueryNodeProcessorPipeline_lastIndexOf(t_QueryNodeProcessorPipeline *self, PyObject *arg);
              static PyObject *t_QueryNodeProcessorPipeline_listIterator(t_QueryNodeProcessorPipeline *self, PyObject *args);
              static PyObject *t_QueryNodeProcessorPipeline_process(t_QueryNodeProcessorPipeline *self, PyObject *arg);
              static PyObject *t_QueryNodeProcessorPipeline_remove(t_QueryNodeProcessorPipeline *self, PyObject *args);
              static PyObject *t_QueryNodeProcessorPipeline_removeAll(t_QueryNodeProcessorPipeline *self, PyObject *arg);
              static PyObject *t_QueryNodeProcessorPipeline_retainAll(t_QueryNodeProcessorPipeline *self, PyObject *arg);
              static PyObject *t_QueryNodeProcessorPipeline_set(t_QueryNodeProcessorPipeline *self, PyObject *args);
              static PyObject *t_QueryNodeProcessorPipeline_setQueryConfigHandler(t_QueryNodeProcessorPipeline *self, PyObject *arg);
              static PyObject *t_QueryNodeProcessorPipeline_size(t_QueryNodeProcessorPipeline *self);
              static PyObject *t_QueryNodeProcessorPipeline_subList(t_QueryNodeProcessorPipeline *self, PyObject *args);
              static PyObject *t_QueryNodeProcessorPipeline_toArray(t_QueryNodeProcessorPipeline *self, PyObject *args);
              static PyObject *t_QueryNodeProcessorPipeline_get__empty(t_QueryNodeProcessorPipeline *self, void *data);
              static PyObject *t_QueryNodeProcessorPipeline_get__queryConfigHandler(t_QueryNodeProcessorPipeline *self, void *data);
              static int t_QueryNodeProcessorPipeline_set__queryConfigHandler(t_QueryNodeProcessorPipeline *self, PyObject *arg, void *data);
              static PyGetSetDef t_QueryNodeProcessorPipeline__fields_[] = {
                DECLARE_GET_FIELD(t_QueryNodeProcessorPipeline, empty),
                DECLARE_GETSET_FIELD(t_QueryNodeProcessorPipeline, queryConfigHandler),
                { NULL, NULL, NULL, NULL, NULL }
              };

              static PyMethodDef t_QueryNodeProcessorPipeline__methods_[] = {
                DECLARE_METHOD(t_QueryNodeProcessorPipeline, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_QueryNodeProcessorPipeline, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_QueryNodeProcessorPipeline, add, METH_VARARGS),
                DECLARE_METHOD(t_QueryNodeProcessorPipeline, addAll, METH_VARARGS),
                DECLARE_METHOD(t_QueryNodeProcessorPipeline, clear, METH_NOARGS),
                DECLARE_METHOD(t_QueryNodeProcessorPipeline, contains, METH_O),
                DECLARE_METHOD(t_QueryNodeProcessorPipeline, containsAll, METH_O),
                DECLARE_METHOD(t_QueryNodeProcessorPipeline, get, METH_O),
                DECLARE_METHOD(t_QueryNodeProcessorPipeline, getQueryConfigHandler, METH_NOARGS),
                DECLARE_METHOD(t_QueryNodeProcessorPipeline, indexOf, METH_O),
                DECLARE_METHOD(t_QueryNodeProcessorPipeline, isEmpty, METH_NOARGS),
                DECLARE_METHOD(t_QueryNodeProcessorPipeline, iterator, METH_NOARGS),
                DECLARE_METHOD(t_QueryNodeProcessorPipeline, lastIndexOf, METH_O),
                DECLARE_METHOD(t_QueryNodeProcessorPipeline, listIterator, METH_VARARGS),
                DECLARE_METHOD(t_QueryNodeProcessorPipeline, process, METH_O),
                DECLARE_METHOD(t_QueryNodeProcessorPipeline, remove, METH_VARARGS),
                DECLARE_METHOD(t_QueryNodeProcessorPipeline, removeAll, METH_O),
                DECLARE_METHOD(t_QueryNodeProcessorPipeline, retainAll, METH_O),
                DECLARE_METHOD(t_QueryNodeProcessorPipeline, set, METH_VARARGS),
                DECLARE_METHOD(t_QueryNodeProcessorPipeline, setQueryConfigHandler, METH_O),
                DECLARE_METHOD(t_QueryNodeProcessorPipeline, size, METH_NOARGS),
                DECLARE_METHOD(t_QueryNodeProcessorPipeline, subList, METH_VARARGS),
                DECLARE_METHOD(t_QueryNodeProcessorPipeline, toArray, METH_VARARGS),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(QueryNodeProcessorPipeline, t_QueryNodeProcessorPipeline, ::java::lang::Object, QueryNodeProcessorPipeline, t_QueryNodeProcessorPipeline_init_, ((PyObject *(*)(t_QueryNodeProcessorPipeline *)) get_iterator< t_QueryNodeProcessorPipeline >), 0, t_QueryNodeProcessorPipeline__fields_, 0, 0);

              void t_QueryNodeProcessorPipeline::install(PyObject *module)
              {
                installType(&PY_TYPE(QueryNodeProcessorPipeline), module, "QueryNodeProcessorPipeline", 0);
              }

              void t_QueryNodeProcessorPipeline::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(QueryNodeProcessorPipeline).tp_dict, "class_", make_descriptor(QueryNodeProcessorPipeline::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(QueryNodeProcessorPipeline).tp_dict, "wrapfn_", make_descriptor(t_QueryNodeProcessorPipeline::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(QueryNodeProcessorPipeline).tp_dict, "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_QueryNodeProcessorPipeline_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, QueryNodeProcessorPipeline::initializeClass, 1)))
                  return NULL;
                return t_QueryNodeProcessorPipeline::wrap_Object(QueryNodeProcessorPipeline(((t_QueryNodeProcessorPipeline *) arg)->object.this$));
              }
              static PyObject *t_QueryNodeProcessorPipeline_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, QueryNodeProcessorPipeline::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_QueryNodeProcessorPipeline_init_(t_QueryNodeProcessorPipeline *self, PyObject *args, PyObject *kwds)
              {
                switch (PyTuple_GET_SIZE(args)) {
                 case 0:
                  {
                    QueryNodeProcessorPipeline object((jobject) NULL);

                    INT_CALL(object = QueryNodeProcessorPipeline());
                    self->object = object;
                    break;
                  }
                  goto err;
                 case 1:
                  {
                    ::org::apache::lucene::queryparser::flexible::core::config::QueryConfigHandler a0((jobject) NULL);
                    QueryNodeProcessorPipeline object((jobject) NULL);

                    if (!parseArgs(args, "k", ::org::apache::lucene::queryparser::flexible::core::config::QueryConfigHandler::initializeClass, &a0))
                    {
                      INT_CALL(object = QueryNodeProcessorPipeline(a0));
                      self->object = object;
                      break;
                    }
                  }
                 default:
                 err:
                  PyErr_SetArgsError((PyObject *) self, "__init__", args);
                  return -1;
                }

                return 0;
              }

              static PyObject *t_QueryNodeProcessorPipeline_add(t_QueryNodeProcessorPipeline *self, PyObject *args)
              {
                switch (PyTuple_GET_SIZE(args)) {
                 case 1:
                  {
                    ::org::apache::lucene::queryparser::flexible::core::processors::QueryNodeProcessor a0((jobject) NULL);
                    jboolean result;

                    if (!parseArgs(args, "k", ::org::apache::lucene::queryparser::flexible::core::processors::QueryNodeProcessor::initializeClass, &a0))
                    {
                      OBJ_CALL(result = self->object.add(a0));
                      Py_RETURN_BOOL(result);
                    }
                  }
                  break;
                 case 2:
                  {
                    jint a0;
                    ::org::apache::lucene::queryparser::flexible::core::processors::QueryNodeProcessor a1((jobject) NULL);

                    if (!parseArgs(args, "Ik", ::org::apache::lucene::queryparser::flexible::core::processors::QueryNodeProcessor::initializeClass, &a0, &a1))
                    {
                      OBJ_CALL(self->object.add(a0, a1));
                      Py_RETURN_NONE;
                    }
                  }
                }

                PyErr_SetArgsError((PyObject *) self, "add", args);
                return NULL;
              }

              static PyObject *t_QueryNodeProcessorPipeline_addAll(t_QueryNodeProcessorPipeline *self, PyObject *args)
              {
                switch (PyTuple_GET_SIZE(args)) {
                 case 1:
                  {
                    ::java::util::Collection a0((jobject) NULL);
                    PyTypeObject **p0;
                    jboolean result;

                    if (!parseArgs(args, "K", ::java::util::Collection::initializeClass, &a0, &p0, ::java::util::t_Collection::parameters_))
                    {
                      OBJ_CALL(result = self->object.addAll(a0));
                      Py_RETURN_BOOL(result);
                    }
                  }
                  break;
                 case 2:
                  {
                    jint a0;
                    ::java::util::Collection a1((jobject) NULL);
                    PyTypeObject **p1;
                    jboolean result;

                    if (!parseArgs(args, "IK", ::java::util::Collection::initializeClass, &a0, &a1, &p1, ::java::util::t_Collection::parameters_))
                    {
                      OBJ_CALL(result = self->object.addAll(a0, a1));
                      Py_RETURN_BOOL(result);
                    }
                  }
                }

                PyErr_SetArgsError((PyObject *) self, "addAll", args);
                return NULL;
              }

              static PyObject *t_QueryNodeProcessorPipeline_clear(t_QueryNodeProcessorPipeline *self)
              {
                OBJ_CALL(self->object.clear());
                Py_RETURN_NONE;
              }

              static PyObject *t_QueryNodeProcessorPipeline_contains(t_QueryNodeProcessorPipeline *self, PyObject *arg)
              {
                ::java::lang::Object a0((jobject) NULL);
                jboolean result;

                if (!parseArg(arg, "o", &a0))
                {
                  OBJ_CALL(result = self->object.contains(a0));
                  Py_RETURN_BOOL(result);
                }

                PyErr_SetArgsError((PyObject *) self, "contains", arg);
                return NULL;
              }

              static PyObject *t_QueryNodeProcessorPipeline_containsAll(t_QueryNodeProcessorPipeline *self, PyObject *arg)
              {
                ::java::util::Collection a0((jobject) NULL);
                PyTypeObject **p0;
                jboolean result;

                if (!parseArg(arg, "K", ::java::util::Collection::initializeClass, &a0, &p0, ::java::util::t_Collection::parameters_))
                {
                  OBJ_CALL(result = self->object.containsAll(a0));
                  Py_RETURN_BOOL(result);
                }

                PyErr_SetArgsError((PyObject *) self, "containsAll", arg);
                return NULL;
              }

              static PyObject *t_QueryNodeProcessorPipeline_get(t_QueryNodeProcessorPipeline *self, PyObject *arg)
              {
                jint a0;
                ::org::apache::lucene::queryparser::flexible::core::processors::QueryNodeProcessor result((jobject) NULL);

                if (!parseArg(arg, "I", &a0))
                {
                  OBJ_CALL(result = self->object.get(a0));
                  return ::org::apache::lucene::queryparser::flexible::core::processors::t_QueryNodeProcessor::wrap_Object(result);
                }

                PyErr_SetArgsError((PyObject *) self, "get", arg);
                return NULL;
              }

              static PyObject *t_QueryNodeProcessorPipeline_getQueryConfigHandler(t_QueryNodeProcessorPipeline *self)
              {
                ::org::apache::lucene::queryparser::flexible::core::config::QueryConfigHandler result((jobject) NULL);
                OBJ_CALL(result = self->object.getQueryConfigHandler());
                return ::org::apache::lucene::queryparser::flexible::core::config::t_QueryConfigHandler::wrap_Object(result);
              }

              static PyObject *t_QueryNodeProcessorPipeline_indexOf(t_QueryNodeProcessorPipeline *self, PyObject *arg)
              {
                ::java::lang::Object a0((jobject) NULL);
                jint result;

                if (!parseArg(arg, "o", &a0))
                {
                  OBJ_CALL(result = self->object.indexOf(a0));
                  return PyInt_FromLong((long) result);
                }

                PyErr_SetArgsError((PyObject *) self, "indexOf", arg);
                return NULL;
              }

              static PyObject *t_QueryNodeProcessorPipeline_isEmpty(t_QueryNodeProcessorPipeline *self)
              {
                jboolean result;
                OBJ_CALL(result = self->object.isEmpty());
                Py_RETURN_BOOL(result);
              }

              static PyObject *t_QueryNodeProcessorPipeline_iterator(t_QueryNodeProcessorPipeline *self)
              {
                ::java::util::Iterator result((jobject) NULL);
                OBJ_CALL(result = self->object.iterator());
                return ::java::util::t_Iterator::wrap_Object(result, &::org::apache::lucene::queryparser::flexible::core::processors::PY_TYPE(QueryNodeProcessor));
              }

              static PyObject *t_QueryNodeProcessorPipeline_lastIndexOf(t_QueryNodeProcessorPipeline *self, PyObject *arg)
              {
                ::java::lang::Object a0((jobject) NULL);
                jint result;

                if (!parseArg(arg, "o", &a0))
                {
                  OBJ_CALL(result = self->object.lastIndexOf(a0));
                  return PyInt_FromLong((long) result);
                }

                PyErr_SetArgsError((PyObject *) self, "lastIndexOf", arg);
                return NULL;
              }

              static PyObject *t_QueryNodeProcessorPipeline_listIterator(t_QueryNodeProcessorPipeline *self, PyObject *args)
              {
                switch (PyTuple_GET_SIZE(args)) {
                 case 0:
                  {
                    ::java::util::ListIterator result((jobject) NULL);
                    OBJ_CALL(result = self->object.listIterator());
                    return ::java::util::t_ListIterator::wrap_Object(result, &::org::apache::lucene::queryparser::flexible::core::processors::PY_TYPE(QueryNodeProcessor));
                  }
                  break;
                 case 1:
                  {
                    jint a0;
                    ::java::util::ListIterator result((jobject) NULL);

                    if (!parseArgs(args, "I", &a0))
                    {
                      OBJ_CALL(result = self->object.listIterator(a0));
                      return ::java::util::t_ListIterator::wrap_Object(result, &::org::apache::lucene::queryparser::flexible::core::processors::PY_TYPE(QueryNodeProcessor));
                    }
                  }
                }

                PyErr_SetArgsError((PyObject *) self, "listIterator", args);
                return NULL;
              }

              static PyObject *t_QueryNodeProcessorPipeline_process(t_QueryNodeProcessorPipeline *self, PyObject *arg)
              {
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode a0((jobject) NULL);
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode result((jobject) NULL);

                if (!parseArg(arg, "k", ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode::initializeClass, &a0))
                {
                  OBJ_CALL(result = self->object.process(a0));
                  return ::org::apache::lucene::queryparser::flexible::core::nodes::t_QueryNode::wrap_Object(result);
                }

                PyErr_SetArgsError((PyObject *) self, "process", arg);
                return NULL;
              }

              static PyObject *t_QueryNodeProcessorPipeline_remove(t_QueryNodeProcessorPipeline *self, PyObject *args)
              {
                switch (PyTuple_GET_SIZE(args)) {
                 case 1:
                  {
                    jint a0;
                    ::org::apache::lucene::queryparser::flexible::core::processors::QueryNodeProcessor result((jobject) NULL);

                    if (!parseArgs(args, "I", &a0))
                    {
                      OBJ_CALL(result = self->object.remove(a0));
                      return ::org::apache::lucene::queryparser::flexible::core::processors::t_QueryNodeProcessor::wrap_Object(result);
                    }
                  }
                  {
                    ::java::lang::Object a0((jobject) NULL);
                    jboolean result;

                    if (!parseArgs(args, "o", &a0))
                    {
                      OBJ_CALL(result = self->object.remove(a0));
                      Py_RETURN_BOOL(result);
                    }
                  }
                }

                PyErr_SetArgsError((PyObject *) self, "remove", args);
                return NULL;
              }

              static PyObject *t_QueryNodeProcessorPipeline_removeAll(t_QueryNodeProcessorPipeline *self, PyObject *arg)
              {
                ::java::util::Collection a0((jobject) NULL);
                PyTypeObject **p0;
                jboolean result;

                if (!parseArg(arg, "K", ::java::util::Collection::initializeClass, &a0, &p0, ::java::util::t_Collection::parameters_))
                {
                  OBJ_CALL(result = self->object.removeAll(a0));
                  Py_RETURN_BOOL(result);
                }

                PyErr_SetArgsError((PyObject *) self, "removeAll", arg);
                return NULL;
              }

              static PyObject *t_QueryNodeProcessorPipeline_retainAll(t_QueryNodeProcessorPipeline *self, PyObject *arg)
              {
                ::java::util::Collection a0((jobject) NULL);
                PyTypeObject **p0;
                jboolean result;

                if (!parseArg(arg, "K", ::java::util::Collection::initializeClass, &a0, &p0, ::java::util::t_Collection::parameters_))
                {
                  OBJ_CALL(result = self->object.retainAll(a0));
                  Py_RETURN_BOOL(result);
                }

                PyErr_SetArgsError((PyObject *) self, "retainAll", arg);
                return NULL;
              }

              static PyObject *t_QueryNodeProcessorPipeline_set(t_QueryNodeProcessorPipeline *self, PyObject *args)
              {
                jint a0;
                ::org::apache::lucene::queryparser::flexible::core::processors::QueryNodeProcessor a1((jobject) NULL);
                ::org::apache::lucene::queryparser::flexible::core::processors::QueryNodeProcessor result((jobject) NULL);

                if (!parseArgs(args, "Ik", ::org::apache::lucene::queryparser::flexible::core::processors::QueryNodeProcessor::initializeClass, &a0, &a1))
                {
                  OBJ_CALL(result = self->object.set(a0, a1));
                  return ::org::apache::lucene::queryparser::flexible::core::processors::t_QueryNodeProcessor::wrap_Object(result);
                }

                PyErr_SetArgsError((PyObject *) self, "set", args);
                return NULL;
              }

              static PyObject *t_QueryNodeProcessorPipeline_setQueryConfigHandler(t_QueryNodeProcessorPipeline *self, PyObject *arg)
              {
                ::org::apache::lucene::queryparser::flexible::core::config::QueryConfigHandler a0((jobject) NULL);

                if (!parseArg(arg, "k", ::org::apache::lucene::queryparser::flexible::core::config::QueryConfigHandler::initializeClass, &a0))
                {
                  OBJ_CALL(self->object.setQueryConfigHandler(a0));
                  Py_RETURN_NONE;
                }

                PyErr_SetArgsError((PyObject *) self, "setQueryConfigHandler", arg);
                return NULL;
              }

              static PyObject *t_QueryNodeProcessorPipeline_size(t_QueryNodeProcessorPipeline *self)
              {
                jint result;
                OBJ_CALL(result = self->object.size());
                return PyInt_FromLong((long) result);
              }

              static PyObject *t_QueryNodeProcessorPipeline_subList(t_QueryNodeProcessorPipeline *self, PyObject *args)
              {
                jint a0;
                jint a1;
                ::java::util::List result((jobject) NULL);

                if (!parseArgs(args, "II", &a0, &a1))
                {
                  OBJ_CALL(result = self->object.subList(a0, a1));
                  return ::java::util::t_List::wrap_Object(result, &::org::apache::lucene::queryparser::flexible::core::processors::PY_TYPE(QueryNodeProcessor));
                }

                PyErr_SetArgsError((PyObject *) self, "subList", args);
                return NULL;
              }

              static PyObject *t_QueryNodeProcessorPipeline_toArray(t_QueryNodeProcessorPipeline *self, PyObject *args)
              {
                switch (PyTuple_GET_SIZE(args)) {
                 case 0:
                  {
                    JArray< ::java::lang::Object > result((jobject) NULL);
                    OBJ_CALL(result = self->object.toArray());
                    return JArray<jobject>(result.this$).wrap(::java::lang::t_Object::wrap_jobject);
                  }
                  break;
                 case 1:
                  {
                    JArray< ::java::lang::Object > a0((jobject) NULL);
                    JArray< ::java::lang::Object > result((jobject) NULL);

                    if (!parseArgs(args, "[o", &a0))
                    {
                      OBJ_CALL(result = self->object.toArray(a0));
                      return JArray<jobject>(result.this$).wrap(::java::lang::t_Object::wrap_jobject);
                    }
                  }
                }

                PyErr_SetArgsError((PyObject *) self, "toArray", args);
                return NULL;
              }

              static PyObject *t_QueryNodeProcessorPipeline_get__empty(t_QueryNodeProcessorPipeline *self, void *data)
              {
                jboolean value;
                OBJ_CALL(value = self->object.isEmpty());
                Py_RETURN_BOOL(value);
              }

              static PyObject *t_QueryNodeProcessorPipeline_get__queryConfigHandler(t_QueryNodeProcessorPipeline *self, void *data)
              {
                ::org::apache::lucene::queryparser::flexible::core::config::QueryConfigHandler value((jobject) NULL);
                OBJ_CALL(value = self->object.getQueryConfigHandler());
                return ::org::apache::lucene::queryparser::flexible::core::config::t_QueryConfigHandler::wrap_Object(value);
              }
              static int t_QueryNodeProcessorPipeline_set__queryConfigHandler(t_QueryNodeProcessorPipeline *self, PyObject *arg, void *data)
              {
                {
                  ::org::apache::lucene::queryparser::flexible::core::config::QueryConfigHandler value((jobject) NULL);
                  if (!parseArg(arg, "k", ::org::apache::lucene::queryparser::flexible::core::config::QueryConfigHandler::initializeClass, &value))
                  {
                    INT_CALL(self->object.setQueryConfigHandler(value));
                    return 0;
                  }
                }
                PyErr_SetArgsError((PyObject *) self, "queryConfigHandler", arg);
                return -1;
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/spell/TermFreqIterator.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace spell {

          ::java::lang::Class *TermFreqIterator::class$ = NULL;
          jmethodID *TermFreqIterator::mids$ = NULL;
          bool TermFreqIterator::live$ = false;

          jclass TermFreqIterator::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/spell/TermFreqIterator");

              mids$ = new jmethodID[max_mid];
              mids$[mid_weight_54c6a17a] = env->getMethodID(cls, "weight", "()J");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          jlong TermFreqIterator::weight() const
          {
            return env->callLongMethod(this$, mids$[mid_weight_54c6a17a]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"
#include "org/apache/lucene/search/spell/TermFreqIterator$TermFreqIteratorWrapper.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace spell {
          static PyObject *t_TermFreqIterator_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_TermFreqIterator_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_TermFreqIterator_weight(t_TermFreqIterator *self);

          static PyMethodDef t_TermFreqIterator__methods_[] = {
            DECLARE_METHOD(t_TermFreqIterator, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_TermFreqIterator, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_TermFreqIterator, weight, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(TermFreqIterator, t_TermFreqIterator, ::org::apache::lucene::util::BytesRefIterator, TermFreqIterator, abstract_init, 0, 0, 0, 0, 0);

          void t_TermFreqIterator::install(PyObject *module)
          {
            installType(&PY_TYPE(TermFreqIterator), module, "TermFreqIterator", 0);
            PyDict_SetItemString(PY_TYPE(TermFreqIterator).tp_dict, "TermFreqIteratorWrapper", make_descriptor(&PY_TYPE(TermFreqIterator$TermFreqIteratorWrapper)));
          }

          void t_TermFreqIterator::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(TermFreqIterator).tp_dict, "class_", make_descriptor(TermFreqIterator::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(TermFreqIterator).tp_dict, "wrapfn_", make_descriptor(t_TermFreqIterator::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(TermFreqIterator).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_TermFreqIterator_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, TermFreqIterator::initializeClass, 1)))
              return NULL;
            return t_TermFreqIterator::wrap_Object(TermFreqIterator(((t_TermFreqIterator *) arg)->object.this$));
          }
          static PyObject *t_TermFreqIterator_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, TermFreqIterator::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_TermFreqIterator_weight(t_TermFreqIterator *self)
          {
            jlong result;
            OBJ_CALL(result = self->object.weight());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queries/function/ValueSourceScorer.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {

          ::java::lang::Class *ValueSourceScorer::class$ = NULL;
          jmethodID *ValueSourceScorer::mids$ = NULL;
          bool ValueSourceScorer::live$ = false;

          jclass ValueSourceScorer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/queries/function/ValueSourceScorer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_advance_39c7bd23] = env->getMethodID(cls, "advance", "(I)I");
              mids$[mid_cost_54c6a17a] = env->getMethodID(cls, "cost", "()J");
              mids$[mid_docID_54c6a179] = env->getMethodID(cls, "docID", "()I");
              mids$[mid_freq_54c6a179] = env->getMethodID(cls, "freq", "()I");
              mids$[mid_getReader_94bbd010] = env->getMethodID(cls, "getReader", "()Lorg/apache/lucene/index/IndexReader;");
              mids$[mid_matches_39c7bd30] = env->getMethodID(cls, "matches", "(I)Z");
              mids$[mid_matchesValue_39c7bd30] = env->getMethodID(cls, "matchesValue", "(I)Z");
              mids$[mid_nextDoc_54c6a179] = env->getMethodID(cls, "nextDoc", "()I");
              mids$[mid_score_54c6a176] = env->getMethodID(cls, "score", "()F");
              mids$[mid_setCheckDeletes_bb0c767f] = env->getMethodID(cls, "setCheckDeletes", "(Z)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          jint ValueSourceScorer::advance(jint a0) const
          {
            return env->callIntMethod(this$, mids$[mid_advance_39c7bd23], a0);
          }

          jlong ValueSourceScorer::cost() const
          {
            return env->callLongMethod(this$, mids$[mid_cost_54c6a17a]);
          }

          jint ValueSourceScorer::docID() const
          {
            return env->callIntMethod(this$, mids$[mid_docID_54c6a179]);
          }

          jint ValueSourceScorer::freq() const
          {
            return env->callIntMethod(this$, mids$[mid_freq_54c6a179]);
          }

          ::org::apache::lucene::index::IndexReader ValueSourceScorer::getReader() const
          {
            return ::org::apache::lucene::index::IndexReader(env->callObjectMethod(this$, mids$[mid_getReader_94bbd010]));
          }

          jboolean ValueSourceScorer::matches(jint a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_matches_39c7bd30], a0);
          }

          jboolean ValueSourceScorer::matchesValue(jint a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_matchesValue_39c7bd30], a0);
          }

          jint ValueSourceScorer::nextDoc() const
          {
            return env->callIntMethod(this$, mids$[mid_nextDoc_54c6a179]);
          }

          jfloat ValueSourceScorer::score() const
          {
            return env->callFloatMethod(this$, mids$[mid_score_54c6a176]);
          }

          void ValueSourceScorer::setCheckDeletes(jboolean a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setCheckDeletes_bb0c767f], a0);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          static PyObject *t_ValueSourceScorer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_ValueSourceScorer_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_ValueSourceScorer_advance(t_ValueSourceScorer *self, PyObject *args);
          static PyObject *t_ValueSourceScorer_cost(t_ValueSourceScorer *self, PyObject *args);
          static PyObject *t_ValueSourceScorer_docID(t_ValueSourceScorer *self, PyObject *args);
          static PyObject *t_ValueSourceScorer_freq(t_ValueSourceScorer *self, PyObject *args);
          static PyObject *t_ValueSourceScorer_getReader(t_ValueSourceScorer *self);
          static PyObject *t_ValueSourceScorer_matches(t_ValueSourceScorer *self, PyObject *arg);
          static PyObject *t_ValueSourceScorer_matchesValue(t_ValueSourceScorer *self, PyObject *arg);
          static PyObject *t_ValueSourceScorer_nextDoc(t_ValueSourceScorer *self, PyObject *args);
          static PyObject *t_ValueSourceScorer_score(t_ValueSourceScorer *self, PyObject *args);
          static PyObject *t_ValueSourceScorer_setCheckDeletes(t_ValueSourceScorer *self, PyObject *arg);
          static int t_ValueSourceScorer_set__checkDeletes(t_ValueSourceScorer *self, PyObject *arg, void *data);
          static PyObject *t_ValueSourceScorer_get__reader(t_ValueSourceScorer *self, void *data);
          static PyGetSetDef t_ValueSourceScorer__fields_[] = {
            DECLARE_SET_FIELD(t_ValueSourceScorer, checkDeletes),
            DECLARE_GET_FIELD(t_ValueSourceScorer, reader),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_ValueSourceScorer__methods_[] = {
            DECLARE_METHOD(t_ValueSourceScorer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ValueSourceScorer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ValueSourceScorer, advance, METH_VARARGS),
            DECLARE_METHOD(t_ValueSourceScorer, cost, METH_VARARGS),
            DECLARE_METHOD(t_ValueSourceScorer, docID, METH_VARARGS),
            DECLARE_METHOD(t_ValueSourceScorer, freq, METH_VARARGS),
            DECLARE_METHOD(t_ValueSourceScorer, getReader, METH_NOARGS),
            DECLARE_METHOD(t_ValueSourceScorer, matches, METH_O),
            DECLARE_METHOD(t_ValueSourceScorer, matchesValue, METH_O),
            DECLARE_METHOD(t_ValueSourceScorer, nextDoc, METH_VARARGS),
            DECLARE_METHOD(t_ValueSourceScorer, score, METH_VARARGS),
            DECLARE_METHOD(t_ValueSourceScorer, setCheckDeletes, METH_O),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(ValueSourceScorer, t_ValueSourceScorer, ::org::apache::lucene::search::Scorer, ValueSourceScorer, abstract_init, 0, 0, t_ValueSourceScorer__fields_, 0, 0);

          void t_ValueSourceScorer::install(PyObject *module)
          {
            installType(&PY_TYPE(ValueSourceScorer), module, "ValueSourceScorer", 0);
          }

          void t_ValueSourceScorer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(ValueSourceScorer).tp_dict, "class_", make_descriptor(ValueSourceScorer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(ValueSourceScorer).tp_dict, "wrapfn_", make_descriptor(t_ValueSourceScorer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(ValueSourceScorer).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_ValueSourceScorer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, ValueSourceScorer::initializeClass, 1)))
              return NULL;
            return t_ValueSourceScorer::wrap_Object(ValueSourceScorer(((t_ValueSourceScorer *) arg)->object.this$));
          }
          static PyObject *t_ValueSourceScorer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, ValueSourceScorer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_ValueSourceScorer_advance(t_ValueSourceScorer *self, PyObject *args)
          {
            jint a0;
            jint result;

            if (!parseArgs(args, "I", &a0))
            {
              OBJ_CALL(result = self->object.advance(a0));
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(ValueSourceScorer), (PyObject *) self, "advance", args, 2);
          }

          static PyObject *t_ValueSourceScorer_cost(t_ValueSourceScorer *self, PyObject *args)
          {
            jlong result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.cost());
              return PyLong_FromLongLong((PY_LONG_LONG) result);
            }

            return callSuper(&PY_TYPE(ValueSourceScorer), (PyObject *) self, "cost", args, 2);
          }

          static PyObject *t_ValueSourceScorer_docID(t_ValueSourceScorer *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.docID());
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(ValueSourceScorer), (PyObject *) self, "docID", args, 2);
          }

          static PyObject *t_ValueSourceScorer_freq(t_ValueSourceScorer *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.freq());
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(ValueSourceScorer), (PyObject *) self, "freq", args, 2);
          }

          static PyObject *t_ValueSourceScorer_getReader(t_ValueSourceScorer *self)
          {
            ::org::apache::lucene::index::IndexReader result((jobject) NULL);
            OBJ_CALL(result = self->object.getReader());
            return ::org::apache::lucene::index::t_IndexReader::wrap_Object(result);
          }

          static PyObject *t_ValueSourceScorer_matches(t_ValueSourceScorer *self, PyObject *arg)
          {
            jint a0;
            jboolean result;

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(result = self->object.matches(a0));
              Py_RETURN_BOOL(result);
            }

            PyErr_SetArgsError((PyObject *) self, "matches", arg);
            return NULL;
          }

          static PyObject *t_ValueSourceScorer_matchesValue(t_ValueSourceScorer *self, PyObject *arg)
          {
            jint a0;
            jboolean result;

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(result = self->object.matchesValue(a0));
              Py_RETURN_BOOL(result);
            }

            PyErr_SetArgsError((PyObject *) self, "matchesValue", arg);
            return NULL;
          }

          static PyObject *t_ValueSourceScorer_nextDoc(t_ValueSourceScorer *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.nextDoc());
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(ValueSourceScorer), (PyObject *) self, "nextDoc", args, 2);
          }

          static PyObject *t_ValueSourceScorer_score(t_ValueSourceScorer *self, PyObject *args)
          {
            jfloat result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.score());
              return PyFloat_FromDouble((double) result);
            }

            return callSuper(&PY_TYPE(ValueSourceScorer), (PyObject *) self, "score", args, 2);
          }

          static PyObject *t_ValueSourceScorer_setCheckDeletes(t_ValueSourceScorer *self, PyObject *arg)
          {
            jboolean a0;

            if (!parseArg(arg, "Z", &a0))
            {
              OBJ_CALL(self->object.setCheckDeletes(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setCheckDeletes", arg);
            return NULL;
          }

          static int t_ValueSourceScorer_set__checkDeletes(t_ValueSourceScorer *self, PyObject *arg, void *data)
          {
            {
              jboolean value;
              if (!parseArg(arg, "Z", &value))
              {
                INT_CALL(self->object.setCheckDeletes(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "checkDeletes", arg);
            return -1;
          }

          static PyObject *t_ValueSourceScorer_get__reader(t_ValueSourceScorer *self, void *data)
          {
            ::org::apache::lucene::index::IndexReader value((jobject) NULL);
            OBJ_CALL(value = self->object.getReader());
            return ::org::apache::lucene::index::t_IndexReader::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/AnalyzerWrapper.h"
#include "java/lang/String.h"
#include "java/io/Reader.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {

        ::java::lang::Class *AnalyzerWrapper::class$ = NULL;
        jmethodID *AnalyzerWrapper::mids$ = NULL;
        bool AnalyzerWrapper::live$ = false;

        jclass AnalyzerWrapper::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/AnalyzerWrapper");

            mids$ = new jmethodID[max_mid];
            mids$[mid_getOffsetGap_5fdc3f57] = env->getMethodID(cls, "getOffsetGap", "(Ljava/lang/String;)I");
            mids$[mid_getPositionIncrementGap_5fdc3f57] = env->getMethodID(cls, "getPositionIncrementGap", "(Ljava/lang/String;)I");
            mids$[mid_initReader_d8fb1c81] = env->getMethodID(cls, "initReader", "(Ljava/lang/String;Ljava/io/Reader;)Ljava/io/Reader;");
            mids$[mid_createComponents_1be39cae] = env->getMethodID(cls, "createComponents", "(Ljava/lang/String;Ljava/io/Reader;)Lorg/apache/lucene/analysis/Analyzer$TokenStreamComponents;");
            mids$[mid_wrapReader_d8fb1c81] = env->getMethodID(cls, "wrapReader", "(Ljava/lang/String;Ljava/io/Reader;)Ljava/io/Reader;");
            mids$[mid_wrapComponents_46d74455] = env->getMethodID(cls, "wrapComponents", "(Ljava/lang/String;Lorg/apache/lucene/analysis/Analyzer$TokenStreamComponents;)Lorg/apache/lucene/analysis/Analyzer$TokenStreamComponents;");
            mids$[mid_getWrappedAnalyzer_29a2299f] = env->getMethodID(cls, "getWrappedAnalyzer", "(Ljava/lang/String;)Lorg/apache/lucene/analysis/Analyzer;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        jint AnalyzerWrapper::getOffsetGap(const ::java::lang::String & a0) const
        {
          return env->callIntMethod(this$, mids$[mid_getOffsetGap_5fdc3f57], a0.this$);
        }

        jint AnalyzerWrapper::getPositionIncrementGap(const ::java::lang::String & a0) const
        {
          return env->callIntMethod(this$, mids$[mid_getPositionIncrementGap_5fdc3f57], a0.this$);
        }

        ::java::io::Reader AnalyzerWrapper::initReader(const ::java::lang::String & a0, const ::java::io::Reader & a1) const
        {
          return ::java::io::Reader(env->callObjectMethod(this$, mids$[mid_initReader_d8fb1c81], a0.this$, a1.this$));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        static PyObject *t_AnalyzerWrapper_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_AnalyzerWrapper_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_AnalyzerWrapper_getOffsetGap(t_AnalyzerWrapper *self, PyObject *args);
        static PyObject *t_AnalyzerWrapper_getPositionIncrementGap(t_AnalyzerWrapper *self, PyObject *args);
        static PyObject *t_AnalyzerWrapper_initReader(t_AnalyzerWrapper *self, PyObject *args);

        static PyMethodDef t_AnalyzerWrapper__methods_[] = {
          DECLARE_METHOD(t_AnalyzerWrapper, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_AnalyzerWrapper, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_AnalyzerWrapper, getOffsetGap, METH_VARARGS),
          DECLARE_METHOD(t_AnalyzerWrapper, getPositionIncrementGap, METH_VARARGS),
          DECLARE_METHOD(t_AnalyzerWrapper, initReader, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(AnalyzerWrapper, t_AnalyzerWrapper, ::org::apache::lucene::analysis::Analyzer, AnalyzerWrapper, abstract_init, 0, 0, 0, 0, 0);

        void t_AnalyzerWrapper::install(PyObject *module)
        {
          installType(&PY_TYPE(AnalyzerWrapper), module, "AnalyzerWrapper", 0);
        }

        void t_AnalyzerWrapper::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(AnalyzerWrapper).tp_dict, "class_", make_descriptor(AnalyzerWrapper::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(AnalyzerWrapper).tp_dict, "wrapfn_", make_descriptor(t_AnalyzerWrapper::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(AnalyzerWrapper).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_AnalyzerWrapper_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, AnalyzerWrapper::initializeClass, 1)))
            return NULL;
          return t_AnalyzerWrapper::wrap_Object(AnalyzerWrapper(((t_AnalyzerWrapper *) arg)->object.this$));
        }
        static PyObject *t_AnalyzerWrapper_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, AnalyzerWrapper::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_AnalyzerWrapper_getOffsetGap(t_AnalyzerWrapper *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          jint result;

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = self->object.getOffsetGap(a0));
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(AnalyzerWrapper), (PyObject *) self, "getOffsetGap", args, 2);
        }

        static PyObject *t_AnalyzerWrapper_getPositionIncrementGap(t_AnalyzerWrapper *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          jint result;

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = self->object.getPositionIncrementGap(a0));
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(AnalyzerWrapper), (PyObject *) self, "getPositionIncrementGap", args, 2);
        }

        static PyObject *t_AnalyzerWrapper_initReader(t_AnalyzerWrapper *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::java::io::Reader a1((jobject) NULL);
          ::java::io::Reader result((jobject) NULL);

          if (!parseArgs(args, "sk", ::java::io::Reader::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = self->object.initReader(a0, a1));
            return ::java::io::t_Reader::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "initReader", args);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/MaxNonCompetitiveBoostAttribute.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *MaxNonCompetitiveBoostAttribute::class$ = NULL;
        jmethodID *MaxNonCompetitiveBoostAttribute::mids$ = NULL;
        bool MaxNonCompetitiveBoostAttribute::live$ = false;

        jclass MaxNonCompetitiveBoostAttribute::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/MaxNonCompetitiveBoostAttribute");

            mids$ = new jmethodID[max_mid];
            mids$[mid_getCompetitiveTerm_4ae19461] = env->getMethodID(cls, "getCompetitiveTerm", "()Lorg/apache/lucene/util/BytesRef;");
            mids$[mid_getMaxNonCompetitiveBoost_54c6a176] = env->getMethodID(cls, "getMaxNonCompetitiveBoost", "()F");
            mids$[mid_setCompetitiveTerm_7bc03dc4] = env->getMethodID(cls, "setCompetitiveTerm", "(Lorg/apache/lucene/util/BytesRef;)V");
            mids$[mid_setMaxNonCompetitiveBoost_06298cab] = env->getMethodID(cls, "setMaxNonCompetitiveBoost", "(F)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        ::org::apache::lucene::util::BytesRef MaxNonCompetitiveBoostAttribute::getCompetitiveTerm() const
        {
          return ::org::apache::lucene::util::BytesRef(env->callObjectMethod(this$, mids$[mid_getCompetitiveTerm_4ae19461]));
        }

        jfloat MaxNonCompetitiveBoostAttribute::getMaxNonCompetitiveBoost() const
        {
          return env->callFloatMethod(this$, mids$[mid_getMaxNonCompetitiveBoost_54c6a176]);
        }

        void MaxNonCompetitiveBoostAttribute::setCompetitiveTerm(const ::org::apache::lucene::util::BytesRef & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setCompetitiveTerm_7bc03dc4], a0.this$);
        }

        void MaxNonCompetitiveBoostAttribute::setMaxNonCompetitiveBoost(jfloat a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setMaxNonCompetitiveBoost_06298cab], a0);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_MaxNonCompetitiveBoostAttribute_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_MaxNonCompetitiveBoostAttribute_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_MaxNonCompetitiveBoostAttribute_getCompetitiveTerm(t_MaxNonCompetitiveBoostAttribute *self);
        static PyObject *t_MaxNonCompetitiveBoostAttribute_getMaxNonCompetitiveBoost(t_MaxNonCompetitiveBoostAttribute *self);
        static PyObject *t_MaxNonCompetitiveBoostAttribute_setCompetitiveTerm(t_MaxNonCompetitiveBoostAttribute *self, PyObject *arg);
        static PyObject *t_MaxNonCompetitiveBoostAttribute_setMaxNonCompetitiveBoost(t_MaxNonCompetitiveBoostAttribute *self, PyObject *arg);
        static PyObject *t_MaxNonCompetitiveBoostAttribute_get__competitiveTerm(t_MaxNonCompetitiveBoostAttribute *self, void *data);
        static int t_MaxNonCompetitiveBoostAttribute_set__competitiveTerm(t_MaxNonCompetitiveBoostAttribute *self, PyObject *arg, void *data);
        static PyObject *t_MaxNonCompetitiveBoostAttribute_get__maxNonCompetitiveBoost(t_MaxNonCompetitiveBoostAttribute *self, void *data);
        static int t_MaxNonCompetitiveBoostAttribute_set__maxNonCompetitiveBoost(t_MaxNonCompetitiveBoostAttribute *self, PyObject *arg, void *data);
        static PyGetSetDef t_MaxNonCompetitiveBoostAttribute__fields_[] = {
          DECLARE_GETSET_FIELD(t_MaxNonCompetitiveBoostAttribute, competitiveTerm),
          DECLARE_GETSET_FIELD(t_MaxNonCompetitiveBoostAttribute, maxNonCompetitiveBoost),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_MaxNonCompetitiveBoostAttribute__methods_[] = {
          DECLARE_METHOD(t_MaxNonCompetitiveBoostAttribute, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MaxNonCompetitiveBoostAttribute, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MaxNonCompetitiveBoostAttribute, getCompetitiveTerm, METH_NOARGS),
          DECLARE_METHOD(t_MaxNonCompetitiveBoostAttribute, getMaxNonCompetitiveBoost, METH_NOARGS),
          DECLARE_METHOD(t_MaxNonCompetitiveBoostAttribute, setCompetitiveTerm, METH_O),
          DECLARE_METHOD(t_MaxNonCompetitiveBoostAttribute, setMaxNonCompetitiveBoost, METH_O),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(MaxNonCompetitiveBoostAttribute, t_MaxNonCompetitiveBoostAttribute, ::org::apache::lucene::util::Attribute, MaxNonCompetitiveBoostAttribute, abstract_init, 0, 0, t_MaxNonCompetitiveBoostAttribute__fields_, 0, 0);

        void t_MaxNonCompetitiveBoostAttribute::install(PyObject *module)
        {
          installType(&PY_TYPE(MaxNonCompetitiveBoostAttribute), module, "MaxNonCompetitiveBoostAttribute", 0);
        }

        void t_MaxNonCompetitiveBoostAttribute::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(MaxNonCompetitiveBoostAttribute).tp_dict, "class_", make_descriptor(MaxNonCompetitiveBoostAttribute::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(MaxNonCompetitiveBoostAttribute).tp_dict, "wrapfn_", make_descriptor(t_MaxNonCompetitiveBoostAttribute::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(MaxNonCompetitiveBoostAttribute).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_MaxNonCompetitiveBoostAttribute_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, MaxNonCompetitiveBoostAttribute::initializeClass, 1)))
            return NULL;
          return t_MaxNonCompetitiveBoostAttribute::wrap_Object(MaxNonCompetitiveBoostAttribute(((t_MaxNonCompetitiveBoostAttribute *) arg)->object.this$));
        }
        static PyObject *t_MaxNonCompetitiveBoostAttribute_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, MaxNonCompetitiveBoostAttribute::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_MaxNonCompetitiveBoostAttribute_getCompetitiveTerm(t_MaxNonCompetitiveBoostAttribute *self)
        {
          ::org::apache::lucene::util::BytesRef result((jobject) NULL);
          OBJ_CALL(result = self->object.getCompetitiveTerm());
          return ::org::apache::lucene::util::t_BytesRef::wrap_Object(result);
        }

        static PyObject *t_MaxNonCompetitiveBoostAttribute_getMaxNonCompetitiveBoost(t_MaxNonCompetitiveBoostAttribute *self)
        {
          jfloat result;
          OBJ_CALL(result = self->object.getMaxNonCompetitiveBoost());
          return PyFloat_FromDouble((double) result);
        }

        static PyObject *t_MaxNonCompetitiveBoostAttribute_setCompetitiveTerm(t_MaxNonCompetitiveBoostAttribute *self, PyObject *arg)
        {
          ::org::apache::lucene::util::BytesRef a0((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::util::BytesRef::initializeClass, &a0))
          {
            OBJ_CALL(self->object.setCompetitiveTerm(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setCompetitiveTerm", arg);
          return NULL;
        }

        static PyObject *t_MaxNonCompetitiveBoostAttribute_setMaxNonCompetitiveBoost(t_MaxNonCompetitiveBoostAttribute *self, PyObject *arg)
        {
          jfloat a0;

          if (!parseArg(arg, "F", &a0))
          {
            OBJ_CALL(self->object.setMaxNonCompetitiveBoost(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setMaxNonCompetitiveBoost", arg);
          return NULL;
        }

        static PyObject *t_MaxNonCompetitiveBoostAttribute_get__competitiveTerm(t_MaxNonCompetitiveBoostAttribute *self, void *data)
        {
          ::org::apache::lucene::util::BytesRef value((jobject) NULL);
          OBJ_CALL(value = self->object.getCompetitiveTerm());
          return ::org::apache::lucene::util::t_BytesRef::wrap_Object(value);
        }
        static int t_MaxNonCompetitiveBoostAttribute_set__competitiveTerm(t_MaxNonCompetitiveBoostAttribute *self, PyObject *arg, void *data)
        {
          {
            ::org::apache::lucene::util::BytesRef value((jobject) NULL);
            if (!parseArg(arg, "k", ::org::apache::lucene::util::BytesRef::initializeClass, &value))
            {
              INT_CALL(self->object.setCompetitiveTerm(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "competitiveTerm", arg);
          return -1;
        }

        static PyObject *t_MaxNonCompetitiveBoostAttribute_get__maxNonCompetitiveBoost(t_MaxNonCompetitiveBoostAttribute *self, void *data)
        {
          jfloat value;
          OBJ_CALL(value = self->object.getMaxNonCompetitiveBoost());
          return PyFloat_FromDouble((double) value);
        }
        static int t_MaxNonCompetitiveBoostAttribute_set__maxNonCompetitiveBoost(t_MaxNonCompetitiveBoostAttribute *self, PyObject *arg, void *data)
        {
          {
            jfloat value;
            if (!parseArg(arg, "F", &value))
            {
              INT_CALL(self->object.setMaxNonCompetitiveBoost(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "maxNonCompetitiveBoost", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/packed/AbstractAppendingLongBuffer.h"
#include "org/apache/lucene/util/Accountable.h"
#include "org/apache/lucene/util/packed/AbstractAppendingLongBuffer$Iterator.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace packed {

          ::java::lang::Class *AbstractAppendingLongBuffer::class$ = NULL;
          jmethodID *AbstractAppendingLongBuffer::mids$ = NULL;
          bool AbstractAppendingLongBuffer::live$ = false;

          jclass AbstractAppendingLongBuffer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/util/packed/AbstractAppendingLongBuffer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_add_0ee6df2f] = env->getMethodID(cls, "add", "(J)V");
              mids$[mid_freeze_54c6a166] = env->getMethodID(cls, "freeze", "()V");
              mids$[mid_get_0ee6df33] = env->getMethodID(cls, "get", "(J)J");
              mids$[mid_get_f0f66bc1] = env->getMethodID(cls, "get", "(J[JII)I");
              mids$[mid_iterator_583a9cb3] = env->getMethodID(cls, "iterator", "()Lorg/apache/lucene/util/packed/AbstractAppendingLongBuffer$Iterator;");
              mids$[mid_ramBytesUsed_54c6a17a] = env->getMethodID(cls, "ramBytesUsed", "()J");
              mids$[mid_size_54c6a17a] = env->getMethodID(cls, "size", "()J");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          void AbstractAppendingLongBuffer::add(jlong a0) const
          {
            env->callVoidMethod(this$, mids$[mid_add_0ee6df2f], a0);
          }

          void AbstractAppendingLongBuffer::freeze() const
          {
            env->callVoidMethod(this$, mids$[mid_freeze_54c6a166]);
          }

          jlong AbstractAppendingLongBuffer::get(jlong a0) const
          {
            return env->callLongMethod(this$, mids$[mid_get_0ee6df33], a0);
          }

          jint AbstractAppendingLongBuffer::get(jlong a0, const JArray< jlong > & a1, jint a2, jint a3) const
          {
            return env->callIntMethod(this$, mids$[mid_get_f0f66bc1], a0, a1.this$, a2, a3);
          }

          ::org::apache::lucene::util::packed::AbstractAppendingLongBuffer$Iterator AbstractAppendingLongBuffer::iterator() const
          {
            return ::org::apache::lucene::util::packed::AbstractAppendingLongBuffer$Iterator(env->callObjectMethod(this$, mids$[mid_iterator_583a9cb3]));
          }

          jlong AbstractAppendingLongBuffer::ramBytesUsed() const
          {
            return env->callLongMethod(this$, mids$[mid_ramBytesUsed_54c6a17a]);
          }

          jlong AbstractAppendingLongBuffer::size() const
          {
            return env->callLongMethod(this$, mids$[mid_size_54c6a17a]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace packed {
          static PyObject *t_AbstractAppendingLongBuffer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_AbstractAppendingLongBuffer_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_AbstractAppendingLongBuffer_add(t_AbstractAppendingLongBuffer *self, PyObject *arg);
          static PyObject *t_AbstractAppendingLongBuffer_freeze(t_AbstractAppendingLongBuffer *self);
          static PyObject *t_AbstractAppendingLongBuffer_get(t_AbstractAppendingLongBuffer *self, PyObject *args);
          static PyObject *t_AbstractAppendingLongBuffer_iterator(t_AbstractAppendingLongBuffer *self);
          static PyObject *t_AbstractAppendingLongBuffer_ramBytesUsed(t_AbstractAppendingLongBuffer *self);
          static PyObject *t_AbstractAppendingLongBuffer_size(t_AbstractAppendingLongBuffer *self);

          static PyMethodDef t_AbstractAppendingLongBuffer__methods_[] = {
            DECLARE_METHOD(t_AbstractAppendingLongBuffer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_AbstractAppendingLongBuffer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_AbstractAppendingLongBuffer, add, METH_O),
            DECLARE_METHOD(t_AbstractAppendingLongBuffer, freeze, METH_NOARGS),
            DECLARE_METHOD(t_AbstractAppendingLongBuffer, get, METH_VARARGS),
            DECLARE_METHOD(t_AbstractAppendingLongBuffer, iterator, METH_NOARGS),
            DECLARE_METHOD(t_AbstractAppendingLongBuffer, ramBytesUsed, METH_NOARGS),
            DECLARE_METHOD(t_AbstractAppendingLongBuffer, size, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(AbstractAppendingLongBuffer, t_AbstractAppendingLongBuffer, ::org::apache::lucene::util::LongValues, AbstractAppendingLongBuffer, abstract_init, 0, 0, 0, 0, 0);

          void t_AbstractAppendingLongBuffer::install(PyObject *module)
          {
            installType(&PY_TYPE(AbstractAppendingLongBuffer), module, "AbstractAppendingLongBuffer", 0);
          }

          void t_AbstractAppendingLongBuffer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(AbstractAppendingLongBuffer).tp_dict, "class_", make_descriptor(AbstractAppendingLongBuffer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(AbstractAppendingLongBuffer).tp_dict, "wrapfn_", make_descriptor(t_AbstractAppendingLongBuffer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(AbstractAppendingLongBuffer).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_AbstractAppendingLongBuffer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, AbstractAppendingLongBuffer::initializeClass, 1)))
              return NULL;
            return t_AbstractAppendingLongBuffer::wrap_Object(AbstractAppendingLongBuffer(((t_AbstractAppendingLongBuffer *) arg)->object.this$));
          }
          static PyObject *t_AbstractAppendingLongBuffer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, AbstractAppendingLongBuffer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_AbstractAppendingLongBuffer_add(t_AbstractAppendingLongBuffer *self, PyObject *arg)
          {
            jlong a0;

            if (!parseArg(arg, "J", &a0))
            {
              OBJ_CALL(self->object.add(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "add", arg);
            return NULL;
          }

          static PyObject *t_AbstractAppendingLongBuffer_freeze(t_AbstractAppendingLongBuffer *self)
          {
            OBJ_CALL(self->object.freeze());
            Py_RETURN_NONE;
          }

          static PyObject *t_AbstractAppendingLongBuffer_get(t_AbstractAppendingLongBuffer *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                jlong a0;
                jlong result;

                if (!parseArgs(args, "J", &a0))
                {
                  OBJ_CALL(result = self->object.get(a0));
                  return PyLong_FromLongLong((PY_LONG_LONG) result);
                }
              }
              break;
             case 4:
              {
                jlong a0;
                JArray< jlong > a1((jobject) NULL);
                jint a2;
                jint a3;
                jint result;

                if (!parseArgs(args, "J[JII", &a0, &a1, &a2, &a3))
                {
                  OBJ_CALL(result = self->object.get(a0, a1, a2, a3));
                  return PyInt_FromLong((long) result);
                }
              }
            }

            return callSuper(&PY_TYPE(AbstractAppendingLongBuffer), (PyObject *) self, "get", args, 2);
          }

          static PyObject *t_AbstractAppendingLongBuffer_iterator(t_AbstractAppendingLongBuffer *self)
          {
            ::org::apache::lucene::util::packed::AbstractAppendingLongBuffer$Iterator result((jobject) NULL);
            OBJ_CALL(result = self->object.iterator());
            return ::org::apache::lucene::util::packed::t_AbstractAppendingLongBuffer$Iterator::wrap_Object(result);
          }

          static PyObject *t_AbstractAppendingLongBuffer_ramBytesUsed(t_AbstractAppendingLongBuffer *self)
          {
            jlong result;
            OBJ_CALL(result = self->object.ramBytesUsed());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          static PyObject *t_AbstractAppendingLongBuffer_size(t_AbstractAppendingLongBuffer *self)
          {
            jlong result;
            OBJ_CALL(result = self->object.size());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/lucene40/Lucene40StoredFieldsReader.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/store/IndexInput.h"
#include "org/apache/lucene/store/IOContext.h"
#include "org/apache/lucene/store/Directory.h"
#include "org/apache/lucene/index/SegmentInfo.h"
#include "org/apache/lucene/index/FieldInfos.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/index/StoredFieldVisitor.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace lucene40 {

          ::java::lang::Class *Lucene40StoredFieldsReader::class$ = NULL;
          jmethodID *Lucene40StoredFieldsReader::mids$ = NULL;
          bool Lucene40StoredFieldsReader::live$ = false;

          jclass Lucene40StoredFieldsReader::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/lucene40/Lucene40StoredFieldsReader");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_3589180f] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/store/Directory;Lorg/apache/lucene/index/SegmentInfo;Lorg/apache/lucene/index/FieldInfos;Lorg/apache/lucene/store/IOContext;)V");
              mids$[mid_checkIntegrity_54c6a166] = env->getMethodID(cls, "checkIntegrity", "()V");
              mids$[mid_clone_2f3580b7] = env->getMethodID(cls, "clone", "()Lorg/apache/lucene/codecs/lucene40/Lucene40StoredFieldsReader;");
              mids$[mid_close_54c6a166] = env->getMethodID(cls, "close", "()V");
              mids$[mid_ramBytesUsed_54c6a17a] = env->getMethodID(cls, "ramBytesUsed", "()J");
              mids$[mid_rawDocs_1a4b1309] = env->getMethodID(cls, "rawDocs", "([III)Lorg/apache/lucene/store/IndexInput;");
              mids$[mid_size_54c6a179] = env->getMethodID(cls, "size", "()I");
              mids$[mid_visitDocument_a2ea3ebe] = env->getMethodID(cls, "visitDocument", "(ILorg/apache/lucene/index/StoredFieldVisitor;)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          Lucene40StoredFieldsReader::Lucene40StoredFieldsReader(const ::org::apache::lucene::store::Directory & a0, const ::org::apache::lucene::index::SegmentInfo & a1, const ::org::apache::lucene::index::FieldInfos & a2, const ::org::apache::lucene::store::IOContext & a3) : ::org::apache::lucene::codecs::StoredFieldsReader(env->newObject(initializeClass, &mids$, mid_init$_3589180f, a0.this$, a1.this$, a2.this$, a3.this$)) {}

          void Lucene40StoredFieldsReader::checkIntegrity() const
          {
            env->callVoidMethod(this$, mids$[mid_checkIntegrity_54c6a166]);
          }

          Lucene40StoredFieldsReader Lucene40StoredFieldsReader::clone() const
          {
            return Lucene40StoredFieldsReader(env->callObjectMethod(this$, mids$[mid_clone_2f3580b7]));
          }

          void Lucene40StoredFieldsReader::close() const
          {
            env->callVoidMethod(this$, mids$[mid_close_54c6a166]);
          }

          jlong Lucene40StoredFieldsReader::ramBytesUsed() const
          {
            return env->callLongMethod(this$, mids$[mid_ramBytesUsed_54c6a17a]);
          }

          ::org::apache::lucene::store::IndexInput Lucene40StoredFieldsReader::rawDocs(const JArray< jint > & a0, jint a1, jint a2) const
          {
            return ::org::apache::lucene::store::IndexInput(env->callObjectMethod(this$, mids$[mid_rawDocs_1a4b1309], a0.this$, a1, a2));
          }

          jint Lucene40StoredFieldsReader::size() const
          {
            return env->callIntMethod(this$, mids$[mid_size_54c6a179]);
          }

          void Lucene40StoredFieldsReader::visitDocument(jint a0, const ::org::apache::lucene::index::StoredFieldVisitor & a1) const
          {
            env->callVoidMethod(this$, mids$[mid_visitDocument_a2ea3ebe], a0, a1.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace lucene40 {
          static PyObject *t_Lucene40StoredFieldsReader_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Lucene40StoredFieldsReader_instance_(PyTypeObject *type, PyObject *arg);
          static int t_Lucene40StoredFieldsReader_init_(t_Lucene40StoredFieldsReader *self, PyObject *args, PyObject *kwds);
          static PyObject *t_Lucene40StoredFieldsReader_checkIntegrity(t_Lucene40StoredFieldsReader *self, PyObject *args);
          static PyObject *t_Lucene40StoredFieldsReader_clone(t_Lucene40StoredFieldsReader *self, PyObject *args);
          static PyObject *t_Lucene40StoredFieldsReader_close(t_Lucene40StoredFieldsReader *self, PyObject *args);
          static PyObject *t_Lucene40StoredFieldsReader_ramBytesUsed(t_Lucene40StoredFieldsReader *self, PyObject *args);
          static PyObject *t_Lucene40StoredFieldsReader_rawDocs(t_Lucene40StoredFieldsReader *self, PyObject *args);
          static PyObject *t_Lucene40StoredFieldsReader_size(t_Lucene40StoredFieldsReader *self);
          static PyObject *t_Lucene40StoredFieldsReader_visitDocument(t_Lucene40StoredFieldsReader *self, PyObject *args);

          static PyMethodDef t_Lucene40StoredFieldsReader__methods_[] = {
            DECLARE_METHOD(t_Lucene40StoredFieldsReader, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lucene40StoredFieldsReader, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lucene40StoredFieldsReader, checkIntegrity, METH_VARARGS),
            DECLARE_METHOD(t_Lucene40StoredFieldsReader, clone, METH_VARARGS),
            DECLARE_METHOD(t_Lucene40StoredFieldsReader, close, METH_VARARGS),
            DECLARE_METHOD(t_Lucene40StoredFieldsReader, ramBytesUsed, METH_VARARGS),
            DECLARE_METHOD(t_Lucene40StoredFieldsReader, rawDocs, METH_VARARGS),
            DECLARE_METHOD(t_Lucene40StoredFieldsReader, size, METH_NOARGS),
            DECLARE_METHOD(t_Lucene40StoredFieldsReader, visitDocument, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(Lucene40StoredFieldsReader, t_Lucene40StoredFieldsReader, ::org::apache::lucene::codecs::StoredFieldsReader, Lucene40StoredFieldsReader, t_Lucene40StoredFieldsReader_init_, 0, 0, 0, 0, 0);

          void t_Lucene40StoredFieldsReader::install(PyObject *module)
          {
            installType(&PY_TYPE(Lucene40StoredFieldsReader), module, "Lucene40StoredFieldsReader", 0);
          }

          void t_Lucene40StoredFieldsReader::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(Lucene40StoredFieldsReader).tp_dict, "class_", make_descriptor(Lucene40StoredFieldsReader::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(Lucene40StoredFieldsReader).tp_dict, "wrapfn_", make_descriptor(t_Lucene40StoredFieldsReader::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(Lucene40StoredFieldsReader).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_Lucene40StoredFieldsReader_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, Lucene40StoredFieldsReader::initializeClass, 1)))
              return NULL;
            return t_Lucene40StoredFieldsReader::wrap_Object(Lucene40StoredFieldsReader(((t_Lucene40StoredFieldsReader *) arg)->object.this$));
          }
          static PyObject *t_Lucene40StoredFieldsReader_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, Lucene40StoredFieldsReader::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_Lucene40StoredFieldsReader_init_(t_Lucene40StoredFieldsReader *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::store::Directory a0((jobject) NULL);
            ::org::apache::lucene::index::SegmentInfo a1((jobject) NULL);
            ::org::apache::lucene::index::FieldInfos a2((jobject) NULL);
            ::org::apache::lucene::store::IOContext a3((jobject) NULL);
            Lucene40StoredFieldsReader object((jobject) NULL);

            if (!parseArgs(args, "kkkk", ::org::apache::lucene::store::Directory::initializeClass, ::org::apache::lucene::index::SegmentInfo::initializeClass, ::org::apache::lucene::index::FieldInfos::initializeClass, ::org::apache::lucene::store::IOContext::initializeClass, &a0, &a1, &a2, &a3))
            {
              INT_CALL(object = Lucene40StoredFieldsReader(a0, a1, a2, a3));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_Lucene40StoredFieldsReader_checkIntegrity(t_Lucene40StoredFieldsReader *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.checkIntegrity());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(Lucene40StoredFieldsReader), (PyObject *) self, "checkIntegrity", args, 2);
          }

          static PyObject *t_Lucene40StoredFieldsReader_clone(t_Lucene40StoredFieldsReader *self, PyObject *args)
          {
            Lucene40StoredFieldsReader result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.clone());
              return t_Lucene40StoredFieldsReader::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(Lucene40StoredFieldsReader), (PyObject *) self, "clone", args, 2);
          }

          static PyObject *t_Lucene40StoredFieldsReader_close(t_Lucene40StoredFieldsReader *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.close());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(Lucene40StoredFieldsReader), (PyObject *) self, "close", args, 2);
          }

          static PyObject *t_Lucene40StoredFieldsReader_ramBytesUsed(t_Lucene40StoredFieldsReader *self, PyObject *args)
          {
            jlong result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.ramBytesUsed());
              return PyLong_FromLongLong((PY_LONG_LONG) result);
            }

            return callSuper(&PY_TYPE(Lucene40StoredFieldsReader), (PyObject *) self, "ramBytesUsed", args, 2);
          }

          static PyObject *t_Lucene40StoredFieldsReader_rawDocs(t_Lucene40StoredFieldsReader *self, PyObject *args)
          {
            JArray< jint > a0((jobject) NULL);
            jint a1;
            jint a2;
            ::org::apache::lucene::store::IndexInput result((jobject) NULL);

            if (!parseArgs(args, "[III", &a0, &a1, &a2))
            {
              OBJ_CALL(result = self->object.rawDocs(a0, a1, a2));
              return ::org::apache::lucene::store::t_IndexInput::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "rawDocs", args);
            return NULL;
          }

          static PyObject *t_Lucene40StoredFieldsReader_size(t_Lucene40StoredFieldsReader *self)
          {
            jint result;
            OBJ_CALL(result = self->object.size());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_Lucene40StoredFieldsReader_visitDocument(t_Lucene40StoredFieldsReader *self, PyObject *args)
          {
            jint a0;
            ::org::apache::lucene::index::StoredFieldVisitor a1((jobject) NULL);

            if (!parseArgs(args, "Ik", ::org::apache::lucene::index::StoredFieldVisitor::initializeClass, &a0, &a1))
            {
              OBJ_CALL(self->object.visitDocument(a0, a1));
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(Lucene40StoredFieldsReader), (PyObject *) self, "visitDocument", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/fst/FSTEnum.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace fst {

          ::java::lang::Class *FSTEnum::class$ = NULL;
          jmethodID *FSTEnum::mids$ = NULL;
          bool FSTEnum::live$ = false;

          jclass FSTEnum::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/util/fst/FSTEnum");

              mids$ = new jmethodID[max_mid];
              mids$[mid_grow_54c6a166] = env->getMethodID(cls, "grow", "()V");
              mids$[mid_doNext_54c6a166] = env->getMethodID(cls, "doNext", "()V");
              mids$[mid_getTargetLabel_54c6a179] = env->getMethodID(cls, "getTargetLabel", "()I");
              mids$[mid_setCurrentLabel_39c7bd3c] = env->getMethodID(cls, "setCurrentLabel", "(I)V");
              mids$[mid_getCurrentLabel_54c6a179] = env->getMethodID(cls, "getCurrentLabel", "()I");
              mids$[mid_doSeekCeil_54c6a166] = env->getMethodID(cls, "doSeekCeil", "()V");
              mids$[mid_doSeekFloor_54c6a166] = env->getMethodID(cls, "doSeekFloor", "()V");
              mids$[mid_doSeekExact_54c6a16a] = env->getMethodID(cls, "doSeekExact", "()Z");
              mids$[mid_rewindPrefix_54c6a166] = env->getMethodID(cls, "rewindPrefix", "()V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace fst {
          static PyObject *t_FSTEnum_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_FSTEnum_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_FSTEnum_of_(t_FSTEnum *self, PyObject *args);
          static PyObject *t_FSTEnum_get__parameters_(t_FSTEnum *self, void *data);
          static PyGetSetDef t_FSTEnum__fields_[] = {
            DECLARE_GET_FIELD(t_FSTEnum, parameters_),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_FSTEnum__methods_[] = {
            DECLARE_METHOD(t_FSTEnum, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FSTEnum, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FSTEnum, of_, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(FSTEnum, t_FSTEnum, ::java::lang::Object, FSTEnum, abstract_init, 0, 0, t_FSTEnum__fields_, 0, 0);
          PyObject *t_FSTEnum::wrap_Object(const FSTEnum& object, PyTypeObject *p0)
          {
            PyObject *obj = t_FSTEnum::wrap_Object(object);
            if (obj != NULL && obj != Py_None)
            {
              t_FSTEnum *self = (t_FSTEnum *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          PyObject *t_FSTEnum::wrap_jobject(const jobject& object, PyTypeObject *p0)
          {
            PyObject *obj = t_FSTEnum::wrap_jobject(object);
            if (obj != NULL && obj != Py_None)
            {
              t_FSTEnum *self = (t_FSTEnum *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          void t_FSTEnum::install(PyObject *module)
          {
            installType(&PY_TYPE(FSTEnum), module, "FSTEnum", 0);
          }

          void t_FSTEnum::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(FSTEnum).tp_dict, "class_", make_descriptor(FSTEnum::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(FSTEnum).tp_dict, "wrapfn_", make_descriptor(t_FSTEnum::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(FSTEnum).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_FSTEnum_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, FSTEnum::initializeClass, 1)))
              return NULL;
            return t_FSTEnum::wrap_Object(FSTEnum(((t_FSTEnum *) arg)->object.this$));
          }
          static PyObject *t_FSTEnum_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, FSTEnum::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_FSTEnum_of_(t_FSTEnum *self, PyObject *args)
          {
            if (!parseArg(args, "T", 1, &(self->parameters)))
              Py_RETURN_SELF;
            return PyErr_SetArgsError((PyObject *) self, "of_", args);
          }
          static PyObject *t_FSTEnum_get__parameters_(t_FSTEnum *self, void *data)
          {
            return typeParameters(self->parameters, sizeof(self->parameters));
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "java/lang/Character.h"
#include "java/lang/Comparable.h"
#include "java/lang/Class.h"
#include "java/lang/CharSequence.h"
#include "java/lang/String.h"
#include "java/io/Serializable.h"
#include "JArray.h"

namespace java {
  namespace lang {

    ::java::lang::Class *Character::class$ = NULL;
    jmethodID *Character::mids$ = NULL;
    bool Character::live$ = false;
    jint Character::BYTES = (jint) 0;
    jbyte Character::COMBINING_SPACING_MARK = (jbyte) 0;
    jbyte Character::CONNECTOR_PUNCTUATION = (jbyte) 0;
    jbyte Character::CONTROL = (jbyte) 0;
    jbyte Character::CURRENCY_SYMBOL = (jbyte) 0;
    jbyte Character::DASH_PUNCTUATION = (jbyte) 0;
    jbyte Character::DECIMAL_DIGIT_NUMBER = (jbyte) 0;
    jbyte Character::DIRECTIONALITY_ARABIC_NUMBER = (jbyte) 0;
    jbyte Character::DIRECTIONALITY_BOUNDARY_NEUTRAL = (jbyte) 0;
    jbyte Character::DIRECTIONALITY_COMMON_NUMBER_SEPARATOR = (jbyte) 0;
    jbyte Character::DIRECTIONALITY_EUROPEAN_NUMBER = (jbyte) 0;
    jbyte Character::DIRECTIONALITY_EUROPEAN_NUMBER_SEPARATOR = (jbyte) 0;
    jbyte Character::DIRECTIONALITY_EUROPEAN_NUMBER_TERMINATOR = (jbyte) 0;
    jbyte Character::DIRECTIONALITY_LEFT_TO_RIGHT = (jbyte) 0;
    jbyte Character::DIRECTIONALITY_LEFT_TO_RIGHT_EMBEDDING = (jbyte) 0;
    jbyte Character::DIRECTIONALITY_LEFT_TO_RIGHT_OVERRIDE = (jbyte) 0;
    jbyte Character::DIRECTIONALITY_NONSPACING_MARK = (jbyte) 0;
    jbyte Character::DIRECTIONALITY_OTHER_NEUTRALS = (jbyte) 0;
    jbyte Character::DIRECTIONALITY_PARAGRAPH_SEPARATOR = (jbyte) 0;
    jbyte Character::DIRECTIONALITY_POP_DIRECTIONAL_FORMAT = (jbyte) 0;
    jbyte Character::DIRECTIONALITY_RIGHT_TO_LEFT = (jbyte) 0;
    jbyte Character::DIRECTIONALITY_RIGHT_TO_LEFT_ARABIC = (jbyte) 0;
    jbyte Character::DIRECTIONALITY_RIGHT_TO_LEFT_EMBEDDING = (jbyte) 0;
    jbyte Character::DIRECTIONALITY_RIGHT_TO_LEFT_OVERRIDE = (jbyte) 0;
    jbyte Character::DIRECTIONALITY_SEGMENT_SEPARATOR = (jbyte) 0;
    jbyte Character::DIRECTIONALITY_UNDEFINED = (jbyte) 0;
    jbyte Character::DIRECTIONALITY_WHITESPACE = (jbyte) 0;
    jbyte Character::ENCLOSING_MARK = (jbyte) 0;
    jbyte Character::END_PUNCTUATION = (jbyte) 0;
    jbyte Character::FINAL_QUOTE_PUNCTUATION = (jbyte) 0;
    jbyte Character::FORMAT = (jbyte) 0;
    jbyte Character::INITIAL_QUOTE_PUNCTUATION = (jbyte) 0;
    jbyte Character::LETTER_NUMBER = (jbyte) 0;
    jbyte Character::LINE_SEPARATOR = (jbyte) 0;
    jbyte Character::LOWERCASE_LETTER = (jbyte) 0;
    jbyte Character::MATH_SYMBOL = (jbyte) 0;
    jint Character::MAX_CODE_POINT = (jint) 0;
    jchar Character::MAX_HIGH_SURROGATE = (jchar) 0;
    jchar Character::MAX_LOW_SURROGATE = (jchar) 0;
    jint Character::MAX_RADIX = (jint) 0;
    jchar Character::MAX_SURROGATE = (jchar) 0;
    jchar Character::MAX_VALUE = (jchar) 0;
    jint Character::MIN_CODE_POINT = (jint) 0;
    jchar Character::MIN_HIGH_SURROGATE = (jchar) 0;
    jchar Character::MIN_LOW_SURROGATE = (jchar) 0;
    jint Character::MIN_RADIX = (jint) 0;
    jint Character::MIN_SUPPLEMENTARY_CODE_POINT = (jint) 0;
    jchar Character::MIN_SURROGATE = (jchar) 0;
    jchar Character::MIN_VALUE = (jchar) 0;
    jbyte Character::MODIFIER_LETTER = (jbyte) 0;
    jbyte Character::MODIFIER_SYMBOL = (jbyte) 0;
    jbyte Character::NON_SPACING_MARK = (jbyte) 0;
    jbyte Character::OTHER_LETTER = (jbyte) 0;
    jbyte Character::OTHER_NUMBER = (jbyte) 0;
    jbyte Character::OTHER_PUNCTUATION = (jbyte) 0;
    jbyte Character::OTHER_SYMBOL = (jbyte) 0;
    jbyte Character::PARAGRAPH_SEPARATOR = (jbyte) 0;
    jbyte Character::PRIVATE_USE = (jbyte) 0;
    jint Character::SIZE = (jint) 0;
    jbyte Character::SPACE_SEPARATOR = (jbyte) 0;
    jbyte Character::START_PUNCTUATION = (jbyte) 0;
    jbyte Character::SURROGATE = (jbyte) 0;
    jbyte Character::TITLECASE_LETTER = (jbyte) 0;
    ::java::lang::Class *Character::TYPE = NULL;
    jbyte Character::UNASSIGNED = (jbyte) 0;
    jbyte Character::UPPERCASE_LETTER = (jbyte) 0;

    jclass Character::initializeClass(bool getOnly)
    {
      if (getOnly)
        return (jclass) (live$ ? class$->this$ : NULL);
      if (class$ == NULL)
      {
        jclass cls = (jclass) env->findClass("java/lang/Character");

        mids$ = new jmethodID[max_mid];
        mids$[mid_init$_87fd545a] = env->getMethodID(cls, "<init>", "(C)V");
        mids$[mid_charCount_39c7bd23] = env->getStaticMethodID(cls, "charCount", "(I)I");
        mids$[mid_charValue_54c6a173] = env->getMethodID(cls, "charValue", "()C");
        mids$[mid_codePointAt_ec6430eb] = env->getStaticMethodID(cls, "codePointAt", "([CI)I");
        mids$[mid_codePointAt_2fbf15bf] = env->getStaticMethodID(cls, "codePointAt", "(Ljava/lang/CharSequence;I)I");
        mids$[mid_codePointAt_6f0bb349] = env->getStaticMethodID(cls, "codePointAt", "([CII)I");
        mids$[mid_codePointBefore_2fbf15bf] = env->getStaticMethodID(cls, "codePointBefore", "(Ljava/lang/CharSequence;I)I");
        mids$[mid_codePointBefore_ec6430eb] = env->getStaticMethodID(cls, "codePointBefore", "([CI)I");
        mids$[mid_codePointBefore_6f0bb349] = env->getStaticMethodID(cls, "codePointBefore", "([CII)I");
        mids$[mid_codePointCount_6f0bb349] = env->getStaticMethodID(cls, "codePointCount", "([CII)I");
        mids$[mid_codePointCount_6cc8d7fd] = env->getStaticMethodID(cls, "codePointCount", "(Ljava/lang/CharSequence;II)I");
        mids$[mid_compare_37c94831] = env->getStaticMethodID(cls, "compare", "(CC)I");
        mids$[mid_compareTo_35927258] = env->getMethodID(cls, "compareTo", "(Ljava/lang/Character;)I");
        mids$[mid_digit_d8d154b9] = env->getStaticMethodID(cls, "digit", "(II)I");
        mids$[mid_digit_3108448f] = env->getStaticMethodID(cls, "digit", "(CI)I");
        mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
        mids$[mid_forDigit_d8d154b3] = env->getStaticMethodID(cls, "forDigit", "(II)C");
        mids$[mid_getDirectionality_87fd544e] = env->getStaticMethodID(cls, "getDirectionality", "(C)B");
        mids$[mid_getDirectionality_39c7bd28] = env->getStaticMethodID(cls, "getDirectionality", "(I)B");
        mids$[mid_getName_141401b3] = env->getStaticMethodID(cls, "getName", "(I)Ljava/lang/String;");
        mids$[mid_getNumericValue_87fd5445] = env->getStaticMethodID(cls, "getNumericValue", "(C)I");
        mids$[mid_getNumericValue_39c7bd23] = env->getStaticMethodID(cls, "getNumericValue", "(I)I");
        mids$[mid_getType_87fd5445] = env->getStaticMethodID(cls, "getType", "(C)I");
        mids$[mid_getType_39c7bd23] = env->getStaticMethodID(cls, "getType", "(I)I");
        mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
        mids$[mid_hashCode_87fd5445] = env->getStaticMethodID(cls, "hashCode", "(C)I");
        mids$[mid_highSurrogate_39c7bd29] = env->getStaticMethodID(cls, "highSurrogate", "(I)C");
        mids$[mid_isAlphabetic_39c7bd30] = env->getStaticMethodID(cls, "isAlphabetic", "(I)Z");
        mids$[mid_isBmpCodePoint_39c7bd30] = env->getStaticMethodID(cls, "isBmpCodePoint", "(I)Z");
        mids$[mid_isDefined_87fd5456] = env->getStaticMethodID(cls, "isDefined", "(C)Z");
        mids$[mid_isDefined_39c7bd30] = env->getStaticMethodID(cls, "isDefined", "(I)Z");
        mids$[mid_isDigit_87fd5456] = env->getStaticMethodID(cls, "isDigit", "(C)Z");
        mids$[mid_isDigit_39c7bd30] = env->getStaticMethodID(cls, "isDigit", "(I)Z");
        mids$[mid_isHighSurrogate_87fd5456] = env->getStaticMethodID(cls, "isHighSurrogate", "(C)Z");
        mids$[mid_isISOControl_87fd5456] = env->getStaticMethodID(cls, "isISOControl", "(C)Z");
        mids$[mid_isISOControl_39c7bd30] = env->getStaticMethodID(cls, "isISOControl", "(I)Z");
        mids$[mid_isIdentifierIgnorable_39c7bd30] = env->getStaticMethodID(cls, "isIdentifierIgnorable", "(I)Z");
        mids$[mid_isIdentifierIgnorable_87fd5456] = env->getStaticMethodID(cls, "isIdentifierIgnorable", "(C)Z");
        mids$[mid_isIdeographic_39c7bd30] = env->getStaticMethodID(cls, "isIdeographic", "(I)Z");
        mids$[mid_isJavaIdentifierPart_39c7bd30] = env->getStaticMethodID(cls, "isJavaIdentifierPart", "(I)Z");
        mids$[mid_isJavaIdentifierPart_87fd5456] = env->getStaticMethodID(cls, "isJavaIdentifierPart", "(C)Z");
        mids$[mid_isJavaIdentifierStart_39c7bd30] = env->getStaticMethodID(cls, "isJavaIdentifierStart", "(I)Z");
        mids$[mid_isJavaIdentifierStart_87fd5456] = env->getStaticMethodID(cls, "isJavaIdentifierStart", "(C)Z");
        mids$[mid_isJavaLetter_87fd5456] = env->getStaticMethodID(cls, "isJavaLetter", "(C)Z");
        mids$[mid_isJavaLetterOrDigit_87fd5456] = env->getStaticMethodID(cls, "isJavaLetterOrDigit", "(C)Z");
        mids$[mid_isLetter_87fd5456] = env->getStaticMethodID(cls, "isLetter", "(C)Z");
        mids$[mid_isLetter_39c7bd30] = env->getStaticMethodID(cls, "isLetter", "(I)Z");
        mids$[mid_isLetterOrDigit_39c7bd30] = env->getStaticMethodID(cls, "isLetterOrDigit", "(I)Z");
        mids$[mid_isLetterOrDigit_87fd5456] = env->getStaticMethodID(cls, "isLetterOrDigit", "(C)Z");
        mids$[mid_isLowSurrogate_87fd5456] = env->getStaticMethodID(cls, "isLowSurrogate", "(C)Z");
        mids$[mid_isLowerCase_39c7bd30] = env->getStaticMethodID(cls, "isLowerCase", "(I)Z");
        mids$[mid_isLowerCase_87fd5456] = env->getStaticMethodID(cls, "isLowerCase", "(C)Z");
        mids$[mid_isMirrored_39c7bd30] = env->getStaticMethodID(cls, "isMirrored", "(I)Z");
        mids$[mid_isMirrored_87fd5456] = env->getStaticMethodID(cls, "isMirrored", "(C)Z");
        mids$[mid_isSpace_87fd5456] = env->getStaticMethodID(cls, "isSpace", "(C)Z");
        mids$[mid_isSpaceChar_39c7bd30] = env->getStaticMethodID(cls, "isSpaceChar", "(I)Z");
        mids$[mid_isSpaceChar_87fd5456] = env->getStaticMethodID(cls, "isSpaceChar", "(C)Z");
        mids$[mid_isSupplementaryCodePoint_39c7bd30] = env->getStaticMethodID(cls, "isSupplementaryCodePoint", "(I)Z");
        mids$[mid_isSurrogate_87fd5456] = env->getStaticMethodID(cls, "isSurrogate", "(C)Z");
        mids$[mid_isSurrogatePair_37c94822] = env->getStaticMethodID(cls, "isSurrogatePair", "(CC)Z");
        mids$[mid_isTitleCase_39c7bd30] = env->getStaticMethodID(cls, "isTitleCase", "(I)Z");
        mids$[mid_isTitleCase_87fd5456] = env->getStaticMethodID(cls, "isTitleCase", "(C)Z");
        mids$[mid_isUnicodeIdentifierPart_87fd5456] = env->getStaticMethodID(cls, "isUnicodeIdentifierPart", "(C)Z");
        mids$[mid_isUnicodeIdentifierPart_39c7bd30] = env->getStaticMethodID(cls, "isUnicodeIdentifierPart", "(I)Z");
        mids$[mid_isUnicodeIdentifierStart_39c7bd30] = env->getStaticMethodID(cls, "isUnicodeIdentifierStart", "(I)Z");
        mids$[mid_isUnicodeIdentifierStart_87fd5456] = env->getStaticMethodID(cls, "isUnicodeIdentifierStart", "(C)Z");
        mids$[mid_isUpperCase_39c7bd30] = env->getStaticMethodID(cls, "isUpperCase", "(I)Z");
        mids$[mid_isUpperCase_87fd5456] = env->getStaticMethodID(cls, "isUpperCase", "(C)Z");
        mids$[mid_isValidCodePoint_39c7bd30] = env->getStaticMethodID(cls, "isValidCodePoint", "(I)Z");
        mids$[mid_isWhitespace_39c7bd30] = env->getStaticMethodID(cls, "isWhitespace", "(I)Z");
        mids$[mid_isWhitespace_87fd5456] = env->getStaticMethodID(cls, "isWhitespace", "(C)Z");
        mids$[mid_lowSurrogate_39c7bd29] = env->getStaticMethodID(cls, "lowSurrogate", "(I)C");
        mids$[mid_offsetByCodePoints_6cc8d7fd] = env->getStaticMethodID(cls, "offsetByCodePoints", "(Ljava/lang/CharSequence;II)I");
        mids$[mid_offsetByCodePoints_f453ace9] = env->getStaticMethodID(cls, "offsetByCodePoints", "([CIIII)I");
        mids$[mid_reverseBytes_87fd544f] = env->getStaticMethodID(cls, "reverseBytes", "(C)C");
        mids$[mid_toChars_b4292e99] = env->getStaticMethodID(cls, "toChars", "(I)[C");
        mids$[mid_toChars_273c5d2d] = env->getStaticMethodID(cls, "toChars", "(I[CI)I");
        mids$[mid_toCodePoint_37c94831] = env->getStaticMethodID(cls, "toCodePoint", "(CC)I");
        mids$[mid_toLowerCase_39c7bd23] = env->getStaticMethodID(cls, "toLowerCase", "(I)I");
        mids$[mid_toLowerCase_87fd544f] = env->getStaticMethodID(cls, "toLowerCase", "(C)C");
        mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");
        mids$[mid_toString_7611a535] = env->getStaticMethodID(cls, "toString", "(C)Ljava/lang/String;");
        mids$[mid_toTitleCase_87fd544f] = env->getStaticMethodID(cls, "toTitleCase", "(C)C");
        mids$[mid_toTitleCase_39c7bd23] = env->getStaticMethodID(cls, "toTitleCase", "(I)I");
        mids$[mid_toUpperCase_39c7bd23] = env->getStaticMethodID(cls, "toUpperCase", "(I)I");
        mids$[mid_toUpperCase_87fd544f] = env->getStaticMethodID(cls, "toUpperCase", "(C)C");
        mids$[mid_valueOf_58724da6] = env->getStaticMethodID(cls, "valueOf", "(C)Ljava/lang/Character;");

        class$ = (::java::lang::Class *) new JObject(cls);
        cls = (jclass) class$->this$;

        BYTES = env->getStaticIntField(cls, "BYTES");
        COMBINING_SPACING_MARK = env->getStaticByteField(cls, "COMBINING_SPACING_MARK");
        CONNECTOR_PUNCTUATION = env->getStaticByteField(cls, "CONNECTOR_PUNCTUATION");
        CONTROL = env->getStaticByteField(cls, "CONTROL");
        CURRENCY_SYMBOL = env->getStaticByteField(cls, "CURRENCY_SYMBOL");
        DASH_PUNCTUATION = env->getStaticByteField(cls, "DASH_PUNCTUATION");
        DECIMAL_DIGIT_NUMBER = env->getStaticByteField(cls, "DECIMAL_DIGIT_NUMBER");
        DIRECTIONALITY_ARABIC_NUMBER = env->getStaticByteField(cls, "DIRECTIONALITY_ARABIC_NUMBER");
        DIRECTIONALITY_BOUNDARY_NEUTRAL = env->getStaticByteField(cls, "DIRECTIONALITY_BOUNDARY_NEUTRAL");
        DIRECTIONALITY_COMMON_NUMBER_SEPARATOR = env->getStaticByteField(cls, "DIRECTIONALITY_COMMON_NUMBER_SEPARATOR");
        DIRECTIONALITY_EUROPEAN_NUMBER = env->getStaticByteField(cls, "DIRECTIONALITY_EUROPEAN_NUMBER");
        DIRECTIONALITY_EUROPEAN_NUMBER_SEPARATOR = env->getStaticByteField(cls, "DIRECTIONALITY_EUROPEAN_NUMBER_SEPARATOR");
        DIRECTIONALITY_EUROPEAN_NUMBER_TERMINATOR = env->getStaticByteField(cls, "DIRECTIONALITY_EUROPEAN_NUMBER_TERMINATOR");
        DIRECTIONALITY_LEFT_TO_RIGHT = env->getStaticByteField(cls, "DIRECTIONALITY_LEFT_TO_RIGHT");
        DIRECTIONALITY_LEFT_TO_RIGHT_EMBEDDING = env->getStaticByteField(cls, "DIRECTIONALITY_LEFT_TO_RIGHT_EMBEDDING");
        DIRECTIONALITY_LEFT_TO_RIGHT_OVERRIDE = env->getStaticByteField(cls, "DIRECTIONALITY_LEFT_TO_RIGHT_OVERRIDE");
        DIRECTIONALITY_NONSPACING_MARK = env->getStaticByteField(cls, "DIRECTIONALITY_NONSPACING_MARK");
        DIRECTIONALITY_OTHER_NEUTRALS = env->getStaticByteField(cls, "DIRECTIONALITY_OTHER_NEUTRALS");
        DIRECTIONALITY_PARAGRAPH_SEPARATOR = env->getStaticByteField(cls, "DIRECTIONALITY_PARAGRAPH_SEPARATOR");
        DIRECTIONALITY_POP_DIRECTIONAL_FORMAT = env->getStaticByteField(cls, "DIRECTIONALITY_POP_DIRECTIONAL_FORMAT");
        DIRECTIONALITY_RIGHT_TO_LEFT = env->getStaticByteField(cls, "DIRECTIONALITY_RIGHT_TO_LEFT");
        DIRECTIONALITY_RIGHT_TO_LEFT_ARABIC = env->getStaticByteField(cls, "DIRECTIONALITY_RIGHT_TO_LEFT_ARABIC");
        DIRECTIONALITY_RIGHT_TO_LEFT_EMBEDDING = env->getStaticByteField(cls, "DIRECTIONALITY_RIGHT_TO_LEFT_EMBEDDING");
        DIRECTIONALITY_RIGHT_TO_LEFT_OVERRIDE = env->getStaticByteField(cls, "DIRECTIONALITY_RIGHT_TO_LEFT_OVERRIDE");
        DIRECTIONALITY_SEGMENT_SEPARATOR = env->getStaticByteField(cls, "DIRECTIONALITY_SEGMENT_SEPARATOR");
        DIRECTIONALITY_UNDEFINED = env->getStaticByteField(cls, "DIRECTIONALITY_UNDEFINED");
        DIRECTIONALITY_WHITESPACE = env->getStaticByteField(cls, "DIRECTIONALITY_WHITESPACE");
        ENCLOSING_MARK = env->getStaticByteField(cls, "ENCLOSING_MARK");
        END_PUNCTUATION = env->getStaticByteField(cls, "END_PUNCTUATION");
        FINAL_QUOTE_PUNCTUATION = env->getStaticByteField(cls, "FINAL_QUOTE_PUNCTUATION");
        FORMAT = env->getStaticByteField(cls, "FORMAT");
        INITIAL_QUOTE_PUNCTUATION = env->getStaticByteField(cls, "INITIAL_QUOTE_PUNCTUATION");
        LETTER_NUMBER = env->getStaticByteField(cls, "LETTER_NUMBER");
        LINE_SEPARATOR = env->getStaticByteField(cls, "LINE_SEPARATOR");
        LOWERCASE_LETTER = env->getStaticByteField(cls, "LOWERCASE_LETTER");
        MATH_SYMBOL = env->getStaticByteField(cls, "MATH_SYMBOL");
        MAX_CODE_POINT = env->getStaticIntField(cls, "MAX_CODE_POINT");
        MAX_HIGH_SURROGATE = env->getStaticCharField(cls, "MAX_HIGH_SURROGATE");
        MAX_LOW_SURROGATE = env->getStaticCharField(cls, "MAX_LOW_SURROGATE");
        MAX_RADIX = env->getStaticIntField(cls, "MAX_RADIX");
        MAX_SURROGATE = env->getStaticCharField(cls, "MAX_SURROGATE");
        MAX_VALUE = env->getStaticCharField(cls, "MAX_VALUE");
        MIN_CODE_POINT = env->getStaticIntField(cls, "MIN_CODE_POINT");
        MIN_HIGH_SURROGATE = env->getStaticCharField(cls, "MIN_HIGH_SURROGATE");
        MIN_LOW_SURROGATE = env->getStaticCharField(cls, "MIN_LOW_SURROGATE");
        MIN_RADIX = env->getStaticIntField(cls, "MIN_RADIX");
        MIN_SUPPLEMENTARY_CODE_POINT = env->getStaticIntField(cls, "MIN_SUPPLEMENTARY_CODE_POINT");
        MIN_SURROGATE = env->getStaticCharField(cls, "MIN_SURROGATE");
        MIN_VALUE = env->getStaticCharField(cls, "MIN_VALUE");
        MODIFIER_LETTER = env->getStaticByteField(cls, "MODIFIER_LETTER");
        MODIFIER_SYMBOL = env->getStaticByteField(cls, "MODIFIER_SYMBOL");
        NON_SPACING_MARK = env->getStaticByteField(cls, "NON_SPACING_MARK");
        OTHER_LETTER = env->getStaticByteField(cls, "OTHER_LETTER");
        OTHER_NUMBER = env->getStaticByteField(cls, "OTHER_NUMBER");
        OTHER_PUNCTUATION = env->getStaticByteField(cls, "OTHER_PUNCTUATION");
        OTHER_SYMBOL = env->getStaticByteField(cls, "OTHER_SYMBOL");
        PARAGRAPH_SEPARATOR = env->getStaticByteField(cls, "PARAGRAPH_SEPARATOR");
        PRIVATE_USE = env->getStaticByteField(cls, "PRIVATE_USE");
        SIZE = env->getStaticIntField(cls, "SIZE");
        SPACE_SEPARATOR = env->getStaticByteField(cls, "SPACE_SEPARATOR");
        START_PUNCTUATION = env->getStaticByteField(cls, "START_PUNCTUATION");
        SURROGATE = env->getStaticByteField(cls, "SURROGATE");
        TITLECASE_LETTER = env->getStaticByteField(cls, "TITLECASE_LETTER");
        TYPE = new ::java::lang::Class(env->getStaticObjectField(cls, "TYPE", "Ljava/lang/Class;"));
        UNASSIGNED = env->getStaticByteField(cls, "UNASSIGNED");
        UPPERCASE_LETTER = env->getStaticByteField(cls, "UPPERCASE_LETTER");
        live$ = true;
      }
      return (jclass) class$->this$;
    }

    Character::Character(jchar a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_87fd545a, a0)) {}

    jint Character::charCount(jint a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_charCount_39c7bd23], a0);
    }

    jchar Character::charValue() const
    {
      return env->callCharMethod(this$, mids$[mid_charValue_54c6a173]);
    }

    jint Character::codePointAt(const JArray< jchar > & a0, jint a1)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_codePointAt_ec6430eb], a0.this$, a1);
    }

    jint Character::codePointAt(const ::java::lang::CharSequence & a0, jint a1)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_codePointAt_2fbf15bf], a0.this$, a1);
    }

    jint Character::codePointAt(const JArray< jchar > & a0, jint a1, jint a2)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_codePointAt_6f0bb349], a0.this$, a1, a2);
    }

    jint Character::codePointBefore(const ::java::lang::CharSequence & a0, jint a1)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_codePointBefore_2fbf15bf], a0.this$, a1);
    }

    jint Character::codePointBefore(const JArray< jchar > & a0, jint a1)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_codePointBefore_ec6430eb], a0.this$, a1);
    }

    jint Character::codePointBefore(const JArray< jchar > & a0, jint a1, jint a2)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_codePointBefore_6f0bb349], a0.this$, a1, a2);
    }

    jint Character::codePointCount(const JArray< jchar > & a0, jint a1, jint a2)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_codePointCount_6f0bb349], a0.this$, a1, a2);
    }

    jint Character::codePointCount(const ::java::lang::CharSequence & a0, jint a1, jint a2)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_codePointCount_6cc8d7fd], a0.this$, a1, a2);
    }

    jint Character::compare(jchar a0, jchar a1)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_compare_37c94831], a0, a1);
    }

    jint Character::compareTo(const Character & a0) const
    {
      return env->callIntMethod(this$, mids$[mid_compareTo_35927258], a0.this$);
    }

    jint Character::digit(jint a0, jint a1)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_digit_d8d154b9], a0, a1);
    }

    jint Character::digit(jchar a0, jint a1)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_digit_3108448f], a0, a1);
    }

    jboolean Character::equals(const ::java::lang::Object & a0) const
    {
      return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
    }

    jchar Character::forDigit(jint a0, jint a1)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticCharMethod(cls, mids$[mid_forDigit_d8d154b3], a0, a1);
    }

    jbyte Character::getDirectionality(jchar a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticByteMethod(cls, mids$[mid_getDirectionality_87fd544e], a0);
    }

    jbyte Character::getDirectionality(jint a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticByteMethod(cls, mids$[mid_getDirectionality_39c7bd28], a0);
    }

    ::java::lang::String Character::getName(jint a0)
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::lang::String(env->callStaticObjectMethod(cls, mids$[mid_getName_141401b3], a0));
    }

    jint Character::getNumericValue(jchar a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_getNumericValue_87fd5445], a0);
    }

    jint Character::getNumericValue(jint a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_getNumericValue_39c7bd23], a0);
    }

    jint Character::getType(jchar a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_getType_87fd5445], a0);
    }

    jint Character::getType(jint a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_getType_39c7bd23], a0);
    }

    jint Character::hashCode() const
    {
      return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
    }

    jint Character::hashCode(jchar a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_hashCode_87fd5445], a0);
    }

    jchar Character::highSurrogate(jint a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticCharMethod(cls, mids$[mid_highSurrogate_39c7bd29], a0);
    }

    jboolean Character::isAlphabetic(jint a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticBooleanMethod(cls, mids$[mid_isAlphabetic_39c7bd30], a0);
    }

    jboolean Character::isBmpCodePoint(jint a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticBooleanMethod(cls, mids$[mid_isBmpCodePoint_39c7bd30], a0);
    }

    jboolean Character::isDefined(jchar a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticBooleanMethod(cls, mids$[mid_isDefined_87fd5456], a0);
    }

    jboolean Character::isDefined(jint a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticBooleanMethod(cls, mids$[mid_isDefined_39c7bd30], a0);
    }

    jboolean Character::isDigit(jchar a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticBooleanMethod(cls, mids$[mid_isDigit_87fd5456], a0);
    }

    jboolean Character::isDigit(jint a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticBooleanMethod(cls, mids$[mid_isDigit_39c7bd30], a0);
    }

    jboolean Character::isHighSurrogate(jchar a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticBooleanMethod(cls, mids$[mid_isHighSurrogate_87fd5456], a0);
    }

    jboolean Character::isISOControl(jchar a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticBooleanMethod(cls, mids$[mid_isISOControl_87fd5456], a0);
    }

    jboolean Character::isISOControl(jint a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticBooleanMethod(cls, mids$[mid_isISOControl_39c7bd30], a0);
    }

    jboolean Character::isIdentifierIgnorable(jint a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticBooleanMethod(cls, mids$[mid_isIdentifierIgnorable_39c7bd30], a0);
    }

    jboolean Character::isIdentifierIgnorable(jchar a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticBooleanMethod(cls, mids$[mid_isIdentifierIgnorable_87fd5456], a0);
    }

    jboolean Character::isIdeographic(jint a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticBooleanMethod(cls, mids$[mid_isIdeographic_39c7bd30], a0);
    }

    jboolean Character::isJavaIdentifierPart(jint a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticBooleanMethod(cls, mids$[mid_isJavaIdentifierPart_39c7bd30], a0);
    }

    jboolean Character::isJavaIdentifierPart(jchar a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticBooleanMethod(cls, mids$[mid_isJavaIdentifierPart_87fd5456], a0);
    }

    jboolean Character::isJavaIdentifierStart(jint a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticBooleanMethod(cls, mids$[mid_isJavaIdentifierStart_39c7bd30], a0);
    }

    jboolean Character::isJavaIdentifierStart(jchar a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticBooleanMethod(cls, mids$[mid_isJavaIdentifierStart_87fd5456], a0);
    }

    jboolean Character::isJavaLetter(jchar a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticBooleanMethod(cls, mids$[mid_isJavaLetter_87fd5456], a0);
    }

    jboolean Character::isJavaLetterOrDigit(jchar a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticBooleanMethod(cls, mids$[mid_isJavaLetterOrDigit_87fd5456], a0);
    }

    jboolean Character::isLetter(jchar a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticBooleanMethod(cls, mids$[mid_isLetter_87fd5456], a0);
    }

    jboolean Character::isLetter(jint a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticBooleanMethod(cls, mids$[mid_isLetter_39c7bd30], a0);
    }

    jboolean Character::isLetterOrDigit(jint a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticBooleanMethod(cls, mids$[mid_isLetterOrDigit_39c7bd30], a0);
    }

    jboolean Character::isLetterOrDigit(jchar a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticBooleanMethod(cls, mids$[mid_isLetterOrDigit_87fd5456], a0);
    }

    jboolean Character::isLowSurrogate(jchar a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticBooleanMethod(cls, mids$[mid_isLowSurrogate_87fd5456], a0);
    }

    jboolean Character::isLowerCase(jint a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticBooleanMethod(cls, mids$[mid_isLowerCase_39c7bd30], a0);
    }

    jboolean Character::isLowerCase(jchar a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticBooleanMethod(cls, mids$[mid_isLowerCase_87fd5456], a0);
    }

    jboolean Character::isMirrored(jint a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticBooleanMethod(cls, mids$[mid_isMirrored_39c7bd30], a0);
    }

    jboolean Character::isMirrored(jchar a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticBooleanMethod(cls, mids$[mid_isMirrored_87fd5456], a0);
    }

    jboolean Character::isSpace(jchar a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticBooleanMethod(cls, mids$[mid_isSpace_87fd5456], a0);
    }

    jboolean Character::isSpaceChar(jint a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticBooleanMethod(cls, mids$[mid_isSpaceChar_39c7bd30], a0);
    }

    jboolean Character::isSpaceChar(jchar a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticBooleanMethod(cls, mids$[mid_isSpaceChar_87fd5456], a0);
    }

    jboolean Character::isSupplementaryCodePoint(jint a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticBooleanMethod(cls, mids$[mid_isSupplementaryCodePoint_39c7bd30], a0);
    }

    jboolean Character::isSurrogate(jchar a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticBooleanMethod(cls, mids$[mid_isSurrogate_87fd5456], a0);
    }

    jboolean Character::isSurrogatePair(jchar a0, jchar a1)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticBooleanMethod(cls, mids$[mid_isSurrogatePair_37c94822], a0, a1);
    }

    jboolean Character::isTitleCase(jint a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticBooleanMethod(cls, mids$[mid_isTitleCase_39c7bd30], a0);
    }

    jboolean Character::isTitleCase(jchar a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticBooleanMethod(cls, mids$[mid_isTitleCase_87fd5456], a0);
    }

    jboolean Character::isUnicodeIdentifierPart(jchar a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticBooleanMethod(cls, mids$[mid_isUnicodeIdentifierPart_87fd5456], a0);
    }

    jboolean Character::isUnicodeIdentifierPart(jint a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticBooleanMethod(cls, mids$[mid_isUnicodeIdentifierPart_39c7bd30], a0);
    }

    jboolean Character::isUnicodeIdentifierStart(jint a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticBooleanMethod(cls, mids$[mid_isUnicodeIdentifierStart_39c7bd30], a0);
    }

    jboolean Character::isUnicodeIdentifierStart(jchar a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticBooleanMethod(cls, mids$[mid_isUnicodeIdentifierStart_87fd5456], a0);
    }

    jboolean Character::isUpperCase(jint a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticBooleanMethod(cls, mids$[mid_isUpperCase_39c7bd30], a0);
    }

    jboolean Character::isUpperCase(jchar a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticBooleanMethod(cls, mids$[mid_isUpperCase_87fd5456], a0);
    }

    jboolean Character::isValidCodePoint(jint a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticBooleanMethod(cls, mids$[mid_isValidCodePoint_39c7bd30], a0);
    }

    jboolean Character::isWhitespace(jint a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticBooleanMethod(cls, mids$[mid_isWhitespace_39c7bd30], a0);
    }

    jboolean Character::isWhitespace(jchar a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticBooleanMethod(cls, mids$[mid_isWhitespace_87fd5456], a0);
    }

    jchar Character::lowSurrogate(jint a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticCharMethod(cls, mids$[mid_lowSurrogate_39c7bd29], a0);
    }

    jint Character::offsetByCodePoints(const ::java::lang::CharSequence & a0, jint a1, jint a2)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_offsetByCodePoints_6cc8d7fd], a0.this$, a1, a2);
    }

    jint Character::offsetByCodePoints(const JArray< jchar > & a0, jint a1, jint a2, jint a3, jint a4)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_offsetByCodePoints_f453ace9], a0.this$, a1, a2, a3, a4);
    }

    jchar Character::reverseBytes(jchar a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticCharMethod(cls, mids$[mid_reverseBytes_87fd544f], a0);
    }

    JArray< jchar > Character::toChars(jint a0)
    {
      jclass cls = env->getClass(initializeClass);
      return JArray< jchar >(env->callStaticObjectMethod(cls, mids$[mid_toChars_b4292e99], a0));
    }

    jint Character::toChars(jint a0, const JArray< jchar > & a1, jint a2)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_toChars_273c5d2d], a0, a1.this$, a2);
    }

    jint Character::toCodePoint(jchar a0, jchar a1)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_toCodePoint_37c94831], a0, a1);
    }

    jint Character::toLowerCase(jint a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_toLowerCase_39c7bd23], a0);
    }

    jchar Character::toLowerCase(jchar a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticCharMethod(cls, mids$[mid_toLowerCase_87fd544f], a0);
    }

    ::java::lang::String Character::toString() const
    {
      return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
    }

    ::java::lang::String Character::toString(jchar a0)
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::lang::String(env->callStaticObjectMethod(cls, mids$[mid_toString_7611a535], a0));
    }

    jchar Character::toTitleCase(jchar a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticCharMethod(cls, mids$[mid_toTitleCase_87fd544f], a0);
    }

    jint Character::toTitleCase(jint a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_toTitleCase_39c7bd23], a0);
    }

    jint Character::toUpperCase(jint a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_toUpperCase_39c7bd23], a0);
    }

    jchar Character::toUpperCase(jchar a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticCharMethod(cls, mids$[mid_toUpperCase_87fd544f], a0);
    }

    Character Character::valueOf(jchar a0)
    {
      jclass cls = env->getClass(initializeClass);
      return Character(env->callStaticObjectMethod(cls, mids$[mid_valueOf_58724da6], a0));
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace java {
  namespace lang {
    static PyObject *t_Character_cast_(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Character_instance_(PyTypeObject *type, PyObject *arg);
    static int t_Character_init_(t_Character *self, PyObject *args, PyObject *kwds);
    static PyObject *t_Character_charCount(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Character_charValue(t_Character *self);
    static PyObject *t_Character_codePointAt(PyTypeObject *type, PyObject *args);
    static PyObject *t_Character_codePointBefore(PyTypeObject *type, PyObject *args);
    static PyObject *t_Character_codePointCount(PyTypeObject *type, PyObject *args);
    static PyObject *t_Character_compare(PyTypeObject *type, PyObject *args);
    static PyObject *t_Character_compareTo(t_Character *self, PyObject *arg);
    static PyObject *t_Character_digit(PyTypeObject *type, PyObject *args);
    static PyObject *t_Character_equals(t_Character *self, PyObject *args);
    static PyObject *t_Character_forDigit(PyTypeObject *type, PyObject *args);
    static PyObject *t_Character_getDirectionality(PyTypeObject *type, PyObject *args);
    static PyObject *t_Character_getName(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Character_getNumericValue(PyTypeObject *type, PyObject *args);
    static PyObject *t_Character_getType(PyTypeObject *type, PyObject *args);
    static PyObject *t_Character_hashCode(t_Character *self, PyObject *args);
    static PyObject *t_Character_hashCode_(PyTypeObject *type, PyObject *args);
    static PyObject *t_Character_highSurrogate(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Character_isAlphabetic(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Character_isBmpCodePoint(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Character_isDefined(PyTypeObject *type, PyObject *args);
    static PyObject *t_Character_isDigit(PyTypeObject *type, PyObject *args);
    static PyObject *t_Character_isHighSurrogate(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Character_isISOControl(PyTypeObject *type, PyObject *args);
    static PyObject *t_Character_isIdentifierIgnorable(PyTypeObject *type, PyObject *args);
    static PyObject *t_Character_isIdeographic(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Character_isJavaIdentifierPart(PyTypeObject *type, PyObject *args);
    static PyObject *t_Character_isJavaIdentifierStart(PyTypeObject *type, PyObject *args);
    static PyObject *t_Character_isJavaLetter(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Character_isJavaLetterOrDigit(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Character_isLetter(PyTypeObject *type, PyObject *args);
    static PyObject *t_Character_isLetterOrDigit(PyTypeObject *type, PyObject *args);
    static PyObject *t_Character_isLowSurrogate(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Character_isLowerCase(PyTypeObject *type, PyObject *args);
    static PyObject *t_Character_isMirrored(PyTypeObject *type, PyObject *args);
    static PyObject *t_Character_isSpace(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Character_isSpaceChar(PyTypeObject *type, PyObject *args);
    static PyObject *t_Character_isSupplementaryCodePoint(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Character_isSurrogate(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Character_isSurrogatePair(PyTypeObject *type, PyObject *args);
    static PyObject *t_Character_isTitleCase(PyTypeObject *type, PyObject *args);
    static PyObject *t_Character_isUnicodeIdentifierPart(PyTypeObject *type, PyObject *args);
    static PyObject *t_Character_isUnicodeIdentifierStart(PyTypeObject *type, PyObject *args);
    static PyObject *t_Character_isUpperCase(PyTypeObject *type, PyObject *args);
    static PyObject *t_Character_isValidCodePoint(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Character_isWhitespace(PyTypeObject *type, PyObject *args);
    static PyObject *t_Character_lowSurrogate(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Character_offsetByCodePoints(PyTypeObject *type, PyObject *args);
    static PyObject *t_Character_reverseBytes(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Character_toChars(PyTypeObject *type, PyObject *args);
    static PyObject *t_Character_toCodePoint(PyTypeObject *type, PyObject *args);
    static PyObject *t_Character_toLowerCase(PyTypeObject *type, PyObject *args);
    static PyObject *t_Character_toString(t_Character *self, PyObject *args);
    static PyObject *t_Character_toString_(PyTypeObject *type, PyObject *args);
    static PyObject *t_Character_toTitleCase(PyTypeObject *type, PyObject *args);
    static PyObject *t_Character_toUpperCase(PyTypeObject *type, PyObject *args);
    static PyObject *t_Character_valueOf(PyTypeObject *type, PyObject *arg);

    static PyMethodDef t_Character__methods_[] = {
      DECLARE_METHOD(t_Character, cast_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Character, instance_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Character, charCount, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Character, charValue, METH_NOARGS),
      DECLARE_METHOD(t_Character, codePointAt, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Character, codePointBefore, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Character, codePointCount, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Character, compare, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Character, compareTo, METH_O),
      DECLARE_METHOD(t_Character, digit, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Character, equals, METH_VARARGS),
      DECLARE_METHOD(t_Character, forDigit, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Character, getDirectionality, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Character, getName, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Character, getNumericValue, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Character, getType, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Character, hashCode, METH_VARARGS),
      DECLARE_METHOD(t_Character, hashCode_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Character, highSurrogate, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Character, isAlphabetic, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Character, isBmpCodePoint, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Character, isDefined, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Character, isDigit, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Character, isHighSurrogate, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Character, isISOControl, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Character, isIdentifierIgnorable, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Character, isIdeographic, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Character, isJavaIdentifierPart, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Character, isJavaIdentifierStart, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Character, isJavaLetter, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Character, isJavaLetterOrDigit, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Character, isLetter, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Character, isLetterOrDigit, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Character, isLowSurrogate, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Character, isLowerCase, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Character, isMirrored, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Character, isSpace, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Character, isSpaceChar, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Character, isSupplementaryCodePoint, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Character, isSurrogate, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Character, isSurrogatePair, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Character, isTitleCase, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Character, isUnicodeIdentifierPart, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Character, isUnicodeIdentifierStart, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Character, isUpperCase, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Character, isValidCodePoint, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Character, isWhitespace, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Character, lowSurrogate, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Character, offsetByCodePoints, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Character, reverseBytes, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Character, toChars, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Character, toCodePoint, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Character, toLowerCase, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Character, toString, METH_VARARGS),
      DECLARE_METHOD(t_Character, toString_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Character, toTitleCase, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Character, toUpperCase, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Character, valueOf, METH_O | METH_CLASS),
      { NULL, NULL, 0, NULL }
    };

    DECLARE_TYPE(Character, t_Character, ::java::lang::Object, Character, t_Character_init_, 0, 0, 0, 0, 0);

    void t_Character::install(PyObject *module)
    {
      installType(&PY_TYPE(Character), module, "Character", 0);
    }

    void t_Character::initialize(PyObject *module)
    {
      PyDict_SetItemString(PY_TYPE(Character).tp_dict, "class_", make_descriptor(Character::initializeClass, 1));
      PyDict_SetItemString(PY_TYPE(Character).tp_dict, "wrapfn_", make_descriptor(unboxCharacter));
      PyDict_SetItemString(PY_TYPE(Character).tp_dict, "boxfn_", make_descriptor(boxCharacter));
      env->getClass(Character::initializeClass);
      PyDict_SetItemString(PY_TYPE(Character).tp_dict, "BYTES", make_descriptor(Character::BYTES));
      PyDict_SetItemString(PY_TYPE(Character).tp_dict, "COMBINING_SPACING_MARK", make_descriptor(Character::COMBINING_SPACING_MARK));
      PyDict_SetItemString(PY_TYPE(Character).tp_dict, "CONNECTOR_PUNCTUATION", make_descriptor(Character::CONNECTOR_PUNCTUATION));
      PyDict_SetItemString(PY_TYPE(Character).tp_dict, "CONTROL", make_descriptor(Character::CONTROL));
      PyDict_SetItemString(PY_TYPE(Character).tp_dict, "CURRENCY_SYMBOL", make_descriptor(Character::CURRENCY_SYMBOL));
      PyDict_SetItemString(PY_TYPE(Character).tp_dict, "DASH_PUNCTUATION", make_descriptor(Character::DASH_PUNCTUATION));
      PyDict_SetItemString(PY_TYPE(Character).tp_dict, "DECIMAL_DIGIT_NUMBER", make_descriptor(Character::DECIMAL_DIGIT_NUMBER));
      PyDict_SetItemString(PY_TYPE(Character).tp_dict, "DIRECTIONALITY_ARABIC_NUMBER", make_descriptor(Character::DIRECTIONALITY_ARABIC_NUMBER));
      PyDict_SetItemString(PY_TYPE(Character).tp_dict, "DIRECTIONALITY_BOUNDARY_NEUTRAL", make_descriptor(Character::DIRECTIONALITY_BOUNDARY_NEUTRAL));
      PyDict_SetItemString(PY_TYPE(Character).tp_dict, "DIRECTIONALITY_COMMON_NUMBER_SEPARATOR", make_descriptor(Character::DIRECTIONALITY_COMMON_NUMBER_SEPARATOR));
      PyDict_SetItemString(PY_TYPE(Character).tp_dict, "DIRECTIONALITY_EUROPEAN_NUMBER", make_descriptor(Character::DIRECTIONALITY_EUROPEAN_NUMBER));
      PyDict_SetItemString(PY_TYPE(Character).tp_dict, "DIRECTIONALITY_EUROPEAN_NUMBER_SEPARATOR", make_descriptor(Character::DIRECTIONALITY_EUROPEAN_NUMBER_SEPARATOR));
      PyDict_SetItemString(PY_TYPE(Character).tp_dict, "DIRECTIONALITY_EUROPEAN_NUMBER_TERMINATOR", make_descriptor(Character::DIRECTIONALITY_EUROPEAN_NUMBER_TERMINATOR));
      PyDict_SetItemString(PY_TYPE(Character).tp_dict, "DIRECTIONALITY_LEFT_TO_RIGHT", make_descriptor(Character::DIRECTIONALITY_LEFT_TO_RIGHT));
      PyDict_SetItemString(PY_TYPE(Character).tp_dict, "DIRECTIONALITY_LEFT_TO_RIGHT_EMBEDDING", make_descriptor(Character::DIRECTIONALITY_LEFT_TO_RIGHT_EMBEDDING));
      PyDict_SetItemString(PY_TYPE(Character).tp_dict, "DIRECTIONALITY_LEFT_TO_RIGHT_OVERRIDE", make_descriptor(Character::DIRECTIONALITY_LEFT_TO_RIGHT_OVERRIDE));
      PyDict_SetItemString(PY_TYPE(Character).tp_dict, "DIRECTIONALITY_NONSPACING_MARK", make_descriptor(Character::DIRECTIONALITY_NONSPACING_MARK));
      PyDict_SetItemString(PY_TYPE(Character).tp_dict, "DIRECTIONALITY_OTHER_NEUTRALS", make_descriptor(Character::DIRECTIONALITY_OTHER_NEUTRALS));
      PyDict_SetItemString(PY_TYPE(Character).tp_dict, "DIRECTIONALITY_PARAGRAPH_SEPARATOR", make_descriptor(Character::DIRECTIONALITY_PARAGRAPH_SEPARATOR));
      PyDict_SetItemString(PY_TYPE(Character).tp_dict, "DIRECTIONALITY_POP_DIRECTIONAL_FORMAT", make_descriptor(Character::DIRECTIONALITY_POP_DIRECTIONAL_FORMAT));
      PyDict_SetItemString(PY_TYPE(Character).tp_dict, "DIRECTIONALITY_RIGHT_TO_LEFT", make_descriptor(Character::DIRECTIONALITY_RIGHT_TO_LEFT));
      PyDict_SetItemString(PY_TYPE(Character).tp_dict, "DIRECTIONALITY_RIGHT_TO_LEFT_ARABIC", make_descriptor(Character::DIRECTIONALITY_RIGHT_TO_LEFT_ARABIC));
      PyDict_SetItemString(PY_TYPE(Character).tp_dict, "DIRECTIONALITY_RIGHT_TO_LEFT_EMBEDDING", make_descriptor(Character::DIRECTIONALITY_RIGHT_TO_LEFT_EMBEDDING));
      PyDict_SetItemString(PY_TYPE(Character).tp_dict, "DIRECTIONALITY_RIGHT_TO_LEFT_OVERRIDE", make_descriptor(Character::DIRECTIONALITY_RIGHT_TO_LEFT_OVERRIDE));
      PyDict_SetItemString(PY_TYPE(Character).tp_dict, "DIRECTIONALITY_SEGMENT_SEPARATOR", make_descriptor(Character::DIRECTIONALITY_SEGMENT_SEPARATOR));
      PyDict_SetItemString(PY_TYPE(Character).tp_dict, "DIRECTIONALITY_UNDEFINED", make_descriptor(Character::DIRECTIONALITY_UNDEFINED));
      PyDict_SetItemString(PY_TYPE(Character).tp_dict, "DIRECTIONALITY_WHITESPACE", make_descriptor(Character::DIRECTIONALITY_WHITESPACE));
      PyDict_SetItemString(PY_TYPE(Character).tp_dict, "ENCLOSING_MARK", make_descriptor(Character::ENCLOSING_MARK));
      PyDict_SetItemString(PY_TYPE(Character).tp_dict, "END_PUNCTUATION", make_descriptor(Character::END_PUNCTUATION));
      PyDict_SetItemString(PY_TYPE(Character).tp_dict, "FINAL_QUOTE_PUNCTUATION", make_descriptor(Character::FINAL_QUOTE_PUNCTUATION));
      PyDict_SetItemString(PY_TYPE(Character).tp_dict, "FORMAT", make_descriptor(Character::FORMAT));
      PyDict_SetItemString(PY_TYPE(Character).tp_dict, "INITIAL_QUOTE_PUNCTUATION", make_descriptor(Character::INITIAL_QUOTE_PUNCTUATION));
      PyDict_SetItemString(PY_TYPE(Character).tp_dict, "LETTER_NUMBER", make_descriptor(Character::LETTER_NUMBER));
      PyDict_SetItemString(PY_TYPE(Character).tp_dict, "LINE_SEPARATOR", make_descriptor(Character::LINE_SEPARATOR));
      PyDict_SetItemString(PY_TYPE(Character).tp_dict, "LOWERCASE_LETTER", make_descriptor(Character::LOWERCASE_LETTER));
      PyDict_SetItemString(PY_TYPE(Character).tp_dict, "MATH_SYMBOL", make_descriptor(Character::MATH_SYMBOL));
      PyDict_SetItemString(PY_TYPE(Character).tp_dict, "MAX_CODE_POINT", make_descriptor(Character::MAX_CODE_POINT));
      PyDict_SetItemString(PY_TYPE(Character).tp_dict, "MAX_HIGH_SURROGATE", make_descriptor(Character::MAX_HIGH_SURROGATE));
      PyDict_SetItemString(PY_TYPE(Character).tp_dict, "MAX_LOW_SURROGATE", make_descriptor(Character::MAX_LOW_SURROGATE));
      PyDict_SetItemString(PY_TYPE(Character).tp_dict, "MAX_RADIX", make_descriptor(Character::MAX_RADIX));
      PyDict_SetItemString(PY_TYPE(Character).tp_dict, "MAX_SURROGATE", make_descriptor(Character::MAX_SURROGATE));
      PyDict_SetItemString(PY_TYPE(Character).tp_dict, "MAX_VALUE", make_descriptor(Character::MAX_VALUE));
      PyDict_SetItemString(PY_TYPE(Character).tp_dict, "MIN_CODE_POINT", make_descriptor(Character::MIN_CODE_POINT));
      PyDict_SetItemString(PY_TYPE(Character).tp_dict, "MIN_HIGH_SURROGATE", make_descriptor(Character::MIN_HIGH_SURROGATE));
      PyDict_SetItemString(PY_TYPE(Character).tp_dict, "MIN_LOW_SURROGATE", make_descriptor(Character::MIN_LOW_SURROGATE));
      PyDict_SetItemString(PY_TYPE(Character).tp_dict, "MIN_RADIX", make_descriptor(Character::MIN_RADIX));
      PyDict_SetItemString(PY_TYPE(Character).tp_dict, "MIN_SUPPLEMENTARY_CODE_POINT", make_descriptor(Character::MIN_SUPPLEMENTARY_CODE_POINT));
      PyDict_SetItemString(PY_TYPE(Character).tp_dict, "MIN_SURROGATE", make_descriptor(Character::MIN_SURROGATE));
      PyDict_SetItemString(PY_TYPE(Character).tp_dict, "MIN_VALUE", make_descriptor(Character::MIN_VALUE));
      PyDict_SetItemString(PY_TYPE(Character).tp_dict, "MODIFIER_LETTER", make_descriptor(Character::MODIFIER_LETTER));
      PyDict_SetItemString(PY_TYPE(Character).tp_dict, "MODIFIER_SYMBOL", make_descriptor(Character::MODIFIER_SYMBOL));
      PyDict_SetItemString(PY_TYPE(Character).tp_dict, "NON_SPACING_MARK", make_descriptor(Character::NON_SPACING_MARK));
      PyDict_SetItemString(PY_TYPE(Character).tp_dict, "OTHER_LETTER", make_descriptor(Character::OTHER_LETTER));
      PyDict_SetItemString(PY_TYPE(Character).tp_dict, "OTHER_NUMBER", make_descriptor(Character::OTHER_NUMBER));
      PyDict_SetItemString(PY_TYPE(Character).tp_dict, "OTHER_PUNCTUATION", make_descriptor(Character::OTHER_PUNCTUATION));
      PyDict_SetItemString(PY_TYPE(Character).tp_dict, "OTHER_SYMBOL", make_descriptor(Character::OTHER_SYMBOL));
      PyDict_SetItemString(PY_TYPE(Character).tp_dict, "PARAGRAPH_SEPARATOR", make_descriptor(Character::PARAGRAPH_SEPARATOR));
      PyDict_SetItemString(PY_TYPE(Character).tp_dict, "PRIVATE_USE", make_descriptor(Character::PRIVATE_USE));
      PyDict_SetItemString(PY_TYPE(Character).tp_dict, "SIZE", make_descriptor(Character::SIZE));
      PyDict_SetItemString(PY_TYPE(Character).tp_dict, "SPACE_SEPARATOR", make_descriptor(Character::SPACE_SEPARATOR));
      PyDict_SetItemString(PY_TYPE(Character).tp_dict, "START_PUNCTUATION", make_descriptor(Character::START_PUNCTUATION));
      PyDict_SetItemString(PY_TYPE(Character).tp_dict, "SURROGATE", make_descriptor(Character::SURROGATE));
      PyDict_SetItemString(PY_TYPE(Character).tp_dict, "TITLECASE_LETTER", make_descriptor(Character::TITLECASE_LETTER));
      PyDict_SetItemString(PY_TYPE(Character).tp_dict, "TYPE", make_descriptor(::java::lang::t_Class::wrap_Object(*Character::TYPE)));
      PyDict_SetItemString(PY_TYPE(Character).tp_dict, "UNASSIGNED", make_descriptor(Character::UNASSIGNED));
      PyDict_SetItemString(PY_TYPE(Character).tp_dict, "UPPERCASE_LETTER", make_descriptor(Character::UPPERCASE_LETTER));
    }

    static PyObject *t_Character_cast_(PyTypeObject *type, PyObject *arg)
    {
      if (!(arg = castCheck(arg, Character::initializeClass, 1)))
        return NULL;
      return t_Character::wrap_Object(Character(((t_Character *) arg)->object.this$));
    }
    static PyObject *t_Character_instance_(PyTypeObject *type, PyObject *arg)
    {
      if (!castCheck(arg, Character::initializeClass, 0))
        Py_RETURN_FALSE;
      Py_RETURN_TRUE;
    }

    static int t_Character_init_(t_Character *self, PyObject *args, PyObject *kwds)
    {
      jchar a0;
      Character object((jobject) NULL);

      if (!parseArgs(args, "C", &a0))
      {
        INT_CALL(object = Character(a0));
        self->object = object;
      }
      else
      {
        PyErr_SetArgsError((PyObject *) self, "__init__", args);
        return -1;
      }

      return 0;
    }

    static PyObject *t_Character_charCount(PyTypeObject *type, PyObject *arg)
    {
      jint a0;
      jint result;

      if (!parseArg(arg, "I", &a0))
      {
        OBJ_CALL(result = ::java::lang::Character::charCount(a0));
        return PyInt_FromLong((long) result);
      }

      PyErr_SetArgsError(type, "charCount", arg);
      return NULL;
    }

    static PyObject *t_Character_charValue(t_Character *self)
    {
      jchar result;
      OBJ_CALL(result = self->object.charValue());
      return PyUnicode_FromUnicode((Py_UNICODE *) &result, 1);
    }

    static PyObject *t_Character_codePointAt(PyTypeObject *type, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 2:
        {
          JArray< jchar > a0((jobject) NULL);
          jint a1;
          jint result;

          if (!parseArgs(args, "[CI", &a0, &a1))
          {
            OBJ_CALL(result = ::java::lang::Character::codePointAt(a0, a1));
            return PyInt_FromLong((long) result);
          }
        }
        {
          ::java::lang::CharSequence a0((jobject) NULL);
          jint a1;
          jint result;

          if (!parseArgs(args, "OI", &::java::lang::PY_TYPE(CharSequence), &a0, &a1))
          {
            OBJ_CALL(result = ::java::lang::Character::codePointAt(a0, a1));
            return PyInt_FromLong((long) result);
          }
        }
        break;
       case 3:
        {
          JArray< jchar > a0((jobject) NULL);
          jint a1;
          jint a2;
          jint result;

          if (!parseArgs(args, "[CII", &a0, &a1, &a2))
          {
            OBJ_CALL(result = ::java::lang::Character::codePointAt(a0, a1, a2));
            return PyInt_FromLong((long) result);
          }
        }
      }

      PyErr_SetArgsError(type, "codePointAt", args);
      return NULL;
    }

    static PyObject *t_Character_codePointBefore(PyTypeObject *type, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 2:
        {
          ::java::lang::CharSequence a0((jobject) NULL);
          jint a1;
          jint result;

          if (!parseArgs(args, "OI", &::java::lang::PY_TYPE(CharSequence), &a0, &a1))
          {
            OBJ_CALL(result = ::java::lang::Character::codePointBefore(a0, a1));
            return PyInt_FromLong((long) result);
          }
        }
        {
          JArray< jchar > a0((jobject) NULL);
          jint a1;
          jint result;

          if (!parseArgs(args, "[CI", &a0, &a1))
          {
            OBJ_CALL(result = ::java::lang::Character::codePointBefore(a0, a1));
            return PyInt_FromLong((long) result);
          }
        }
        break;
       case 3:
        {
          JArray< jchar > a0((jobject) NULL);
          jint a1;
          jint a2;
          jint result;

          if (!parseArgs(args, "[CII", &a0, &a1, &a2))
          {
            OBJ_CALL(result = ::java::lang::Character::codePointBefore(a0, a1, a2));
            return PyInt_FromLong((long) result);
          }
        }
      }

      PyErr_SetArgsError(type, "codePointBefore", args);
      return NULL;
    }

    static PyObject *t_Character_codePointCount(PyTypeObject *type, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 3:
        {
          JArray< jchar > a0((jobject) NULL);
          jint a1;
          jint a2;
          jint result;

          if (!parseArgs(args, "[CII", &a0, &a1, &a2))
          {
            OBJ_CALL(result = ::java::lang::Character::codePointCount(a0, a1, a2));
            return PyInt_FromLong((long) result);
          }
        }
        {
          ::java::lang::CharSequence a0((jobject) NULL);
          jint a1;
          jint a2;
          jint result;

          if (!parseArgs(args, "OII", &::java::lang::PY_TYPE(CharSequence), &a0, &a1, &a2))
          {
            OBJ_CALL(result = ::java::lang::Character::codePointCount(a0, a1, a2));
            return PyInt_FromLong((long) result);
          }
        }
      }

      PyErr_SetArgsError(type, "codePointCount", args);
      return NULL;
    }

    static PyObject *t_Character_compare(PyTypeObject *type, PyObject *args)
    {
      jchar a0;
      jchar a1;
      jint result;

      if (!parseArgs(args, "CC", &a0, &a1))
      {
        OBJ_CALL(result = ::java::lang::Character::compare(a0, a1));
        return PyInt_FromLong((long) result);
      }

      PyErr_SetArgsError(type, "compare", args);
      return NULL;
    }

    static PyObject *t_Character_compareTo(t_Character *self, PyObject *arg)
    {
      Character a0((jobject) NULL);
      jint result;

      if (!parseArg(arg, "O", &::java::lang::PY_TYPE(Character), &a0))
      {
        OBJ_CALL(result = self->object.compareTo(a0));
        return PyInt_FromLong((long) result);
      }

      PyErr_SetArgsError((PyObject *) self, "compareTo", arg);
      return NULL;
    }

    static PyObject *t_Character_digit(PyTypeObject *type, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 2:
        {
          jint a0;
          jint a1;
          jint result;

          if (!parseArgs(args, "II", &a0, &a1))
          {
            OBJ_CALL(result = ::java::lang::Character::digit(a0, a1));
            return PyInt_FromLong((long) result);
          }
        }
        {
          jchar a0;
          jint a1;
          jint result;

          if (!parseArgs(args, "CI", &a0, &a1))
          {
            OBJ_CALL(result = ::java::lang::Character::digit(a0, a1));
            return PyInt_FromLong((long) result);
          }
        }
      }

      PyErr_SetArgsError(type, "digit", args);
      return NULL;
    }

    static PyObject *t_Character_equals(t_Character *self, PyObject *args)
    {
      ::java::lang::Object a0((jobject) NULL);
      jboolean result;

      if (!parseArgs(args, "o", &a0))
      {
        OBJ_CALL(result = self->object.equals(a0));
        Py_RETURN_BOOL(result);
      }

      return callSuper(&PY_TYPE(Character), (PyObject *) self, "equals", args, 2);
    }

    static PyObject *t_Character_forDigit(PyTypeObject *type, PyObject *args)
    {
      jint a0;
      jint a1;
      jchar result;

      if (!parseArgs(args, "II", &a0, &a1))
      {
        OBJ_CALL(result = ::java::lang::Character::forDigit(a0, a1));
        return PyUnicode_FromUnicode((Py_UNICODE *) &result, 1);
      }

      PyErr_SetArgsError(type, "forDigit", args);
      return NULL;
    }

    static PyObject *t_Character_getDirectionality(PyTypeObject *type, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 1:
        {
          jchar a0;
          jbyte result;

          if (!parseArgs(args, "C", &a0))
          {
            OBJ_CALL(result = ::java::lang::Character::getDirectionality(a0));
            return PyInt_FromLong((long) result);
          }
        }
        {
          jint a0;
          jbyte result;

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(result = ::java::lang::Character::getDirectionality(a0));
            return PyInt_FromLong((long) result);
          }
        }
      }

      PyErr_SetArgsError(type, "getDirectionality", args);
      return NULL;
    }

    static PyObject *t_Character_getName(PyTypeObject *type, PyObject *arg)
    {
      jint a0;
      ::java::lang::String result((jobject) NULL);

      if (!parseArg(arg, "I", &a0))
      {
        OBJ_CALL(result = ::java::lang::Character::getName(a0));
        return j2p(result);
      }

      PyErr_SetArgsError(type, "getName", arg);
      return NULL;
    }

    static PyObject *t_Character_getNumericValue(PyTypeObject *type, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 1:
        {
          jchar a0;
          jint result;

          if (!parseArgs(args, "C", &a0))
          {
            OBJ_CALL(result = ::java::lang::Character::getNumericValue(a0));
            return PyInt_FromLong((long) result);
          }
        }
        {
          jint a0;
          jint result;

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(result = ::java::lang::Character::getNumericValue(a0));
            return PyInt_FromLong((long) result);
          }
        }
      }

      PyErr_SetArgsError(type, "getNumericValue", args);
      return NULL;
    }

    static PyObject *t_Character_getType(PyTypeObject *type, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 1:
        {
          jchar a0;
          jint result;

          if (!parseArgs(args, "C", &a0))
          {
            OBJ_CALL(result = ::java::lang::Character::getType(a0));
            return PyInt_FromLong((long) result);
          }
        }
        {
          jint a0;
          jint result;

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(result = ::java::lang::Character::getType(a0));
            return PyInt_FromLong((long) result);
          }
        }
      }

      PyErr_SetArgsError(type, "getType", args);
      return NULL;
    }

    static PyObject *t_Character_hashCode(t_Character *self, PyObject *args)
    {
      jint result;

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.hashCode());
        return PyInt_FromLong((long) result);
      }

      return callSuper(&PY_TYPE(Character), (PyObject *) self, "hashCode", args, 2);
    }

    static PyObject *t_Character_hashCode_(PyTypeObject *type, PyObject *args)
    {
      jchar a0;
      jint result;

      if (!parseArgs(args, "C", &a0))
      {
        OBJ_CALL(result = ::java::lang::Character::hashCode(a0));
        return PyInt_FromLong((long) result);
      }

      PyErr_SetArgsError(type, "hashCode_", args);
      return NULL;
    }

    static PyObject *t_Character_highSurrogate(PyTypeObject *type, PyObject *arg)
    {
      jint a0;
      jchar result;

      if (!parseArg(arg, "I", &a0))
      {
        OBJ_CALL(result = ::java::lang::Character::highSurrogate(a0));
        return PyUnicode_FromUnicode((Py_UNICODE *) &result, 1);
      }

      PyErr_SetArgsError(type, "highSurrogate", arg);
      return NULL;
    }

    static PyObject *t_Character_isAlphabetic(PyTypeObject *type, PyObject *arg)
    {
      jint a0;
      jboolean result;

      if (!parseArg(arg, "I", &a0))
      {
        OBJ_CALL(result = ::java::lang::Character::isAlphabetic(a0));
        Py_RETURN_BOOL(result);
      }

      PyErr_SetArgsError(type, "isAlphabetic", arg);
      return NULL;
    }

    static PyObject *t_Character_isBmpCodePoint(PyTypeObject *type, PyObject *arg)
    {
      jint a0;
      jboolean result;

      if (!parseArg(arg, "I", &a0))
      {
        OBJ_CALL(result = ::java::lang::Character::isBmpCodePoint(a0));
        Py_RETURN_BOOL(result);
      }

      PyErr_SetArgsError(type, "isBmpCodePoint", arg);
      return NULL;
    }

    static PyObject *t_Character_isDefined(PyTypeObject *type, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 1:
        {
          jchar a0;
          jboolean result;

          if (!parseArgs(args, "C", &a0))
          {
            OBJ_CALL(result = ::java::lang::Character::isDefined(a0));
            Py_RETURN_BOOL(result);
          }
        }
        {
          jint a0;
          jboolean result;

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(result = ::java::lang::Character::isDefined(a0));
            Py_RETURN_BOOL(result);
          }
        }
      }

      PyErr_SetArgsError(type, "isDefined", args);
      return NULL;
    }

    static PyObject *t_Character_isDigit(PyTypeObject *type, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 1:
        {
          jchar a0;
          jboolean result;

          if (!parseArgs(args, "C", &a0))
          {
            OBJ_CALL(result = ::java::lang::Character::isDigit(a0));
            Py_RETURN_BOOL(result);
          }
        }
        {
          jint a0;
          jboolean result;

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(result = ::java::lang::Character::isDigit(a0));
            Py_RETURN_BOOL(result);
          }
        }
      }

      PyErr_SetArgsError(type, "isDigit", args);
      return NULL;
    }

    static PyObject *t_Character_isHighSurrogate(PyTypeObject *type, PyObject *arg)
    {
      jchar a0;
      jboolean result;

      if (!parseArg(arg, "C", &a0))
      {
        OBJ_CALL(result = ::java::lang::Character::isHighSurrogate(a0));
        Py_RETURN_BOOL(result);
      }

      PyErr_SetArgsError(type, "isHighSurrogate", arg);
      return NULL;
    }

    static PyObject *t_Character_isISOControl(PyTypeObject *type, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 1:
        {
          jchar a0;
          jboolean result;

          if (!parseArgs(args, "C", &a0))
          {
            OBJ_CALL(result = ::java::lang::Character::isISOControl(a0));
            Py_RETURN_BOOL(result);
          }
        }
        {
          jint a0;
          jboolean result;

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(result = ::java::lang::Character::isISOControl(a0));
            Py_RETURN_BOOL(result);
          }
        }
      }

      PyErr_SetArgsError(type, "isISOControl", args);
      return NULL;
    }

    static PyObject *t_Character_isIdentifierIgnorable(PyTypeObject *type, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 1:
        {
          jint a0;
          jboolean result;

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(result = ::java::lang::Character::isIdentifierIgnorable(a0));
            Py_RETURN_BOOL(result);
          }
        }
        {
          jchar a0;
          jboolean result;

          if (!parseArgs(args, "C", &a0))
          {
            OBJ_CALL(result = ::java::lang::Character::isIdentifierIgnorable(a0));
            Py_RETURN_BOOL(result);
          }
        }
      }

      PyErr_SetArgsError(type, "isIdentifierIgnorable", args);
      return NULL;
    }

    static PyObject *t_Character_isIdeographic(PyTypeObject *type, PyObject *arg)
    {
      jint a0;
      jboolean result;

      if (!parseArg(arg, "I", &a0))
      {
        OBJ_CALL(result = ::java::lang::Character::isIdeographic(a0));
        Py_RETURN_BOOL(result);
      }

      PyErr_SetArgsError(type, "isIdeographic", arg);
      return NULL;
    }

    static PyObject *t_Character_isJavaIdentifierPart(PyTypeObject *type, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 1:
        {
          jint a0;
          jboolean result;

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(result = ::java::lang::Character::isJavaIdentifierPart(a0));
            Py_RETURN_BOOL(result);
          }
        }
        {
          jchar a0;
          jboolean result;

          if (!parseArgs(args, "C", &a0))
          {
            OBJ_CALL(result = ::java::lang::Character::isJavaIdentifierPart(a0));
            Py_RETURN_BOOL(result);
          }
        }
      }

      PyErr_SetArgsError(type, "isJavaIdentifierPart", args);
      return NULL;
    }

    static PyObject *t_Character_isJavaIdentifierStart(PyTypeObject *type, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 1:
        {
          jint a0;
          jboolean result;

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(result = ::java::lang::Character::isJavaIdentifierStart(a0));
            Py_RETURN_BOOL(result);
          }
        }
        {
          jchar a0;
          jboolean result;

          if (!parseArgs(args, "C", &a0))
          {
            OBJ_CALL(result = ::java::lang::Character::isJavaIdentifierStart(a0));
            Py_RETURN_BOOL(result);
          }
        }
      }

      PyErr_SetArgsError(type, "isJavaIdentifierStart", args);
      return NULL;
    }

    static PyObject *t_Character_isJavaLetter(PyTypeObject *type, PyObject *arg)
    {
      jchar a0;
      jboolean result;

      if (!parseArg(arg, "C", &a0))
      {
        OBJ_CALL(result = ::java::lang::Character::isJavaLetter(a0));
        Py_RETURN_BOOL(result);
      }

      PyErr_SetArgsError(type, "isJavaLetter", arg);
      return NULL;
    }

    static PyObject *t_Character_isJavaLetterOrDigit(PyTypeObject *type, PyObject *arg)
    {
      jchar a0;
      jboolean result;

      if (!parseArg(arg, "C", &a0))
      {
        OBJ_CALL(result = ::java::lang::Character::isJavaLetterOrDigit(a0));
        Py_RETURN_BOOL(result);
      }

      PyErr_SetArgsError(type, "isJavaLetterOrDigit", arg);
      return NULL;
    }

    static PyObject *t_Character_isLetter(PyTypeObject *type, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 1:
        {
          jchar a0;
          jboolean result;

          if (!parseArgs(args, "C", &a0))
          {
            OBJ_CALL(result = ::java::lang::Character::isLetter(a0));
            Py_RETURN_BOOL(result);
          }
        }
        {
          jint a0;
          jboolean result;

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(result = ::java::lang::Character::isLetter(a0));
            Py_RETURN_BOOL(result);
          }
        }
      }

      PyErr_SetArgsError(type, "isLetter", args);
      return NULL;
    }

    static PyObject *t_Character_isLetterOrDigit(PyTypeObject *type, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 1:
        {
          jint a0;
          jboolean result;

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(result = ::java::lang::Character::isLetterOrDigit(a0));
            Py_RETURN_BOOL(result);
          }
        }
        {
          jchar a0;
          jboolean result;

          if (!parseArgs(args, "C", &a0))
          {
            OBJ_CALL(result = ::java::lang::Character::isLetterOrDigit(a0));
            Py_RETURN_BOOL(result);
          }
        }
      }

      PyErr_SetArgsError(type, "isLetterOrDigit", args);
      return NULL;
    }

    static PyObject *t_Character_isLowSurrogate(PyTypeObject *type, PyObject *arg)
    {
      jchar a0;
      jboolean result;

      if (!parseArg(arg, "C", &a0))
      {
        OBJ_CALL(result = ::java::lang::Character::isLowSurrogate(a0));
        Py_RETURN_BOOL(result);
      }

      PyErr_SetArgsError(type, "isLowSurrogate", arg);
      return NULL;
    }

    static PyObject *t_Character_isLowerCase(PyTypeObject *type, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 1:
        {
          jint a0;
          jboolean result;

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(result = ::java::lang::Character::isLowerCase(a0));
            Py_RETURN_BOOL(result);
          }
        }
        {
          jchar a0;
          jboolean result;

          if (!parseArgs(args, "C", &a0))
          {
            OBJ_CALL(result = ::java::lang::Character::isLowerCase(a0));
            Py_RETURN_BOOL(result);
          }
        }
      }

      PyErr_SetArgsError(type, "isLowerCase", args);
      return NULL;
    }

    static PyObject *t_Character_isMirrored(PyTypeObject *type, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 1:
        {
          jint a0;
          jboolean result;

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(result = ::java::lang::Character::isMirrored(a0));
            Py_RETURN_BOOL(result);
          }
        }
        {
          jchar a0;
          jboolean result;

          if (!parseArgs(args, "C", &a0))
          {
            OBJ_CALL(result = ::java::lang::Character::isMirrored(a0));
            Py_RETURN_BOOL(result);
          }
        }
      }

      PyErr_SetArgsError(type, "isMirrored", args);
      return NULL;
    }

    static PyObject *t_Character_isSpace(PyTypeObject *type, PyObject *arg)
    {
      jchar a0;
      jboolean result;

      if (!parseArg(arg, "C", &a0))
      {
        OBJ_CALL(result = ::java::lang::Character::isSpace(a0));
        Py_RETURN_BOOL(result);
      }

      PyErr_SetArgsError(type, "isSpace", arg);
      return NULL;
    }

    static PyObject *t_Character_isSpaceChar(PyTypeObject *type, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 1:
        {
          jint a0;
          jboolean result;

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(result = ::java::lang::Character::isSpaceChar(a0));
            Py_RETURN_BOOL(result);
          }
        }
        {
          jchar a0;
          jboolean result;

          if (!parseArgs(args, "C", &a0))
          {
            OBJ_CALL(result = ::java::lang::Character::isSpaceChar(a0));
            Py_RETURN_BOOL(result);
          }
        }
      }

      PyErr_SetArgsError(type, "isSpaceChar", args);
      return NULL;
    }

    static PyObject *t_Character_isSupplementaryCodePoint(PyTypeObject *type, PyObject *arg)
    {
      jint a0;
      jboolean result;

      if (!parseArg(arg, "I", &a0))
      {
        OBJ_CALL(result = ::java::lang::Character::isSupplementaryCodePoint(a0));
        Py_RETURN_BOOL(result);
      }

      PyErr_SetArgsError(type, "isSupplementaryCodePoint", arg);
      return NULL;
    }

    static PyObject *t_Character_isSurrogate(PyTypeObject *type, PyObject *arg)
    {
      jchar a0;
      jboolean result;

      if (!parseArg(arg, "C", &a0))
      {
        OBJ_CALL(result = ::java::lang::Character::isSurrogate(a0));
        Py_RETURN_BOOL(result);
      }

      PyErr_SetArgsError(type, "isSurrogate", arg);
      return NULL;
    }

    static PyObject *t_Character_isSurrogatePair(PyTypeObject *type, PyObject *args)
    {
      jchar a0;
      jchar a1;
      jboolean result;

      if (!parseArgs(args, "CC", &a0, &a1))
      {
        OBJ_CALL(result = ::java::lang::Character::isSurrogatePair(a0, a1));
        Py_RETURN_BOOL(result);
      }

      PyErr_SetArgsError(type, "isSurrogatePair", args);
      return NULL;
    }

    static PyObject *t_Character_isTitleCase(PyTypeObject *type, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 1:
        {
          jint a0;
          jboolean result;

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(result = ::java::lang::Character::isTitleCase(a0));
            Py_RETURN_BOOL(result);
          }
        }
        {
          jchar a0;
          jboolean result;

          if (!parseArgs(args, "C", &a0))
          {
            OBJ_CALL(result = ::java::lang::Character::isTitleCase(a0));
            Py_RETURN_BOOL(result);
          }
        }
      }

      PyErr_SetArgsError(type, "isTitleCase", args);
      return NULL;
    }

    static PyObject *t_Character_isUnicodeIdentifierPart(PyTypeObject *type, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 1:
        {
          jchar a0;
          jboolean result;

          if (!parseArgs(args, "C", &a0))
          {
            OBJ_CALL(result = ::java::lang::Character::isUnicodeIdentifierPart(a0));
            Py_RETURN_BOOL(result);
          }
        }
        {
          jint a0;
          jboolean result;

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(result = ::java::lang::Character::isUnicodeIdentifierPart(a0));
            Py_RETURN_BOOL(result);
          }
        }
      }

      PyErr_SetArgsError(type, "isUnicodeIdentifierPart", args);
      return NULL;
    }

    static PyObject *t_Character_isUnicodeIdentifierStart(PyTypeObject *type, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 1:
        {
          jint a0;
          jboolean result;

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(result = ::java::lang::Character::isUnicodeIdentifierStart(a0));
            Py_RETURN_BOOL(result);
          }
        }
        {
          jchar a0;
          jboolean result;

          if (!parseArgs(args, "C", &a0))
          {
            OBJ_CALL(result = ::java::lang::Character::isUnicodeIdentifierStart(a0));
            Py_RETURN_BOOL(result);
          }
        }
      }

      PyErr_SetArgsError(type, "isUnicodeIdentifierStart", args);
      return NULL;
    }

    static PyObject *t_Character_isUpperCase(PyTypeObject *type, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 1:
        {
          jint a0;
          jboolean result;

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(result = ::java::lang::Character::isUpperCase(a0));
            Py_RETURN_BOOL(result);
          }
        }
        {
          jchar a0;
          jboolean result;

          if (!parseArgs(args, "C", &a0))
          {
            OBJ_CALL(result = ::java::lang::Character::isUpperCase(a0));
            Py_RETURN_BOOL(result);
          }
        }
      }

      PyErr_SetArgsError(type, "isUpperCase", args);
      return NULL;
    }

    static PyObject *t_Character_isValidCodePoint(PyTypeObject *type, PyObject *arg)
    {
      jint a0;
      jboolean result;

      if (!parseArg(arg, "I", &a0))
      {
        OBJ_CALL(result = ::java::lang::Character::isValidCodePoint(a0));
        Py_RETURN_BOOL(result);
      }

      PyErr_SetArgsError(type, "isValidCodePoint", arg);
      return NULL;
    }

    static PyObject *t_Character_isWhitespace(PyTypeObject *type, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 1:
        {
          jint a0;
          jboolean result;

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(result = ::java::lang::Character::isWhitespace(a0));
            Py_RETURN_BOOL(result);
          }
        }
        {
          jchar a0;
          jboolean result;

          if (!parseArgs(args, "C", &a0))
          {
            OBJ_CALL(result = ::java::lang::Character::isWhitespace(a0));
            Py_RETURN_BOOL(result);
          }
        }
      }

      PyErr_SetArgsError(type, "isWhitespace", args);
      return NULL;
    }

    static PyObject *t_Character_lowSurrogate(PyTypeObject *type, PyObject *arg)
    {
      jint a0;
      jchar result;

      if (!parseArg(arg, "I", &a0))
      {
        OBJ_CALL(result = ::java::lang::Character::lowSurrogate(a0));
        return PyUnicode_FromUnicode((Py_UNICODE *) &result, 1);
      }

      PyErr_SetArgsError(type, "lowSurrogate", arg);
      return NULL;
    }

    static PyObject *t_Character_offsetByCodePoints(PyTypeObject *type, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 3:
        {
          ::java::lang::CharSequence a0((jobject) NULL);
          jint a1;
          jint a2;
          jint result;

          if (!parseArgs(args, "OII", &::java::lang::PY_TYPE(CharSequence), &a0, &a1, &a2))
          {
            OBJ_CALL(result = ::java::lang::Character::offsetByCodePoints(a0, a1, a2));
            return PyInt_FromLong((long) result);
          }
        }
        break;
       case 5:
        {
          JArray< jchar > a0((jobject) NULL);
          jint a1;
          jint a2;
          jint a3;
          jint a4;
          jint result;

          if (!parseArgs(args, "[CIIII", &a0, &a1, &a2, &a3, &a4))
          {
            OBJ_CALL(result = ::java::lang::Character::offsetByCodePoints(a0, a1, a2, a3, a4));
            return PyInt_FromLong((long) result);
          }
        }
      }

      PyErr_SetArgsError(type, "offsetByCodePoints", args);
      return NULL;
    }

    static PyObject *t_Character_reverseBytes(PyTypeObject *type, PyObject *arg)
    {
      jchar a0;
      jchar result;

      if (!parseArg(arg, "C", &a0))
      {
        OBJ_CALL(result = ::java::lang::Character::reverseBytes(a0));
        return PyUnicode_FromUnicode((Py_UNICODE *) &result, 1);
      }

      PyErr_SetArgsError(type, "reverseBytes", arg);
      return NULL;
    }

    static PyObject *t_Character_toChars(PyTypeObject *type, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 1:
        {
          jint a0;
          JArray< jchar > result((jobject) NULL);

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(result = ::java::lang::Character::toChars(a0));
            return result.wrap();
          }
        }
        break;
       case 3:
        {
          jint a0;
          JArray< jchar > a1((jobject) NULL);
          jint a2;
          jint result;

          if (!parseArgs(args, "I[CI", &a0, &a1, &a2))
          {
            OBJ_CALL(result = ::java::lang::Character::toChars(a0, a1, a2));
            return PyInt_FromLong((long) result);
          }
        }
      }

      PyErr_SetArgsError(type, "toChars", args);
      return NULL;
    }

    static PyObject *t_Character_toCodePoint(PyTypeObject *type, PyObject *args)
    {
      jchar a0;
      jchar a1;
      jint result;

      if (!parseArgs(args, "CC", &a0, &a1))
      {
        OBJ_CALL(result = ::java::lang::Character::toCodePoint(a0, a1));
        return PyInt_FromLong((long) result);
      }

      PyErr_SetArgsError(type, "toCodePoint", args);
      return NULL;
    }

    static PyObject *t_Character_toLowerCase(PyTypeObject *type, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 1:
        {
          jint a0;
          jint result;

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(result = ::java::lang::Character::toLowerCase(a0));
            return PyInt_FromLong((long) result);
          }
        }
        {
          jchar a0;
          jchar result;

          if (!parseArgs(args, "C", &a0))
          {
            OBJ_CALL(result = ::java::lang::Character::toLowerCase(a0));
            return PyUnicode_FromUnicode((Py_UNICODE *) &result, 1);
          }
        }
      }

      PyErr_SetArgsError(type, "toLowerCase", args);
      return NULL;
    }

    static PyObject *t_Character_toString(t_Character *self, PyObject *args)
    {
      ::java::lang::String result((jobject) NULL);

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.toString());
        return j2p(result);
      }

      return callSuper(&PY_TYPE(Character), (PyObject *) self, "toString", args, 2);
    }

    static PyObject *t_Character_toString_(PyTypeObject *type, PyObject *args)
    {
      jchar a0;
      ::java::lang::String result((jobject) NULL);

      if (!parseArgs(args, "C", &a0))
      {
        OBJ_CALL(result = ::java::lang::Character::toString(a0));
        return j2p(result);
      }

      PyErr_SetArgsError(type, "toString_", args);
      return NULL;
    }

    static PyObject *t_Character_toTitleCase(PyTypeObject *type, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 1:
        {
          jchar a0;
          jchar result;

          if (!parseArgs(args, "C", &a0))
          {
            OBJ_CALL(result = ::java::lang::Character::toTitleCase(a0));
            return PyUnicode_FromUnicode((Py_UNICODE *) &result, 1);
          }
        }
        {
          jint a0;
          jint result;

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(result = ::java::lang::Character::toTitleCase(a0));
            return PyInt_FromLong((long) result);
          }
        }
      }

      PyErr_SetArgsError(type, "toTitleCase", args);
      return NULL;
    }

    static PyObject *t_Character_toUpperCase(PyTypeObject *type, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 1:
        {
          jint a0;
          jint result;

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(result = ::java::lang::Character::toUpperCase(a0));
            return PyInt_FromLong((long) result);
          }
        }
        {
          jchar a0;
          jchar result;

          if (!parseArgs(args, "C", &a0))
          {
            OBJ_CALL(result = ::java::lang::Character::toUpperCase(a0));
            return PyUnicode_FromUnicode((Py_UNICODE *) &result, 1);
          }
        }
      }

      PyErr_SetArgsError(type, "toUpperCase", args);
      return NULL;
    }

    static PyObject *t_Character_valueOf(PyTypeObject *type, PyObject *arg)
    {
      jchar a0;
      Character result((jobject) NULL);

      if (!parseArg(arg, "C", &a0))
      {
        OBJ_CALL(result = ::java::lang::Character::valueOf(a0));
        return t_Character::wrap_Object(result);
      }

      PyErr_SetArgsError(type, "valueOf", arg);
      return NULL;
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/stempel/StempelStemmer.h"
#include "java/lang/Class.h"
#include "java/lang/StringBuilder.h"
#include "java/io/InputStream.h"
#include "java/lang/CharSequence.h"
#include "java/io/IOException.h"
#include "org/egothor/stemmer/Trie.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace stempel {

          ::java::lang::Class *StempelStemmer::class$ = NULL;
          jmethodID *StempelStemmer::mids$ = NULL;
          bool StempelStemmer::live$ = false;

          jclass StempelStemmer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/stempel/StempelStemmer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_be2e4f90] = env->getMethodID(cls, "<init>", "(Ljava/io/InputStream;)V");
              mids$[mid_init$_366af231] = env->getMethodID(cls, "<init>", "(Lorg/egothor/stemmer/Trie;)V");
              mids$[mid_load_850f7b4e] = env->getStaticMethodID(cls, "load", "(Ljava/io/InputStream;)Lorg/egothor/stemmer/Trie;");
              mids$[mid_stem_50083a71] = env->getMethodID(cls, "stem", "(Ljava/lang/CharSequence;)Ljava/lang/StringBuilder;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          StempelStemmer::StempelStemmer(const ::java::io::InputStream & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_be2e4f90, a0.this$)) {}

          StempelStemmer::StempelStemmer(const ::org::egothor::stemmer::Trie & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_366af231, a0.this$)) {}

          ::org::egothor::stemmer::Trie StempelStemmer::load(const ::java::io::InputStream & a0)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::egothor::stemmer::Trie(env->callStaticObjectMethod(cls, mids$[mid_load_850f7b4e], a0.this$));
          }

          ::java::lang::StringBuilder StempelStemmer::stem(const ::java::lang::CharSequence & a0) const
          {
            return ::java::lang::StringBuilder(env->callObjectMethod(this$, mids$[mid_stem_50083a71], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace stempel {
          static PyObject *t_StempelStemmer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_StempelStemmer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_StempelStemmer_init_(t_StempelStemmer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_StempelStemmer_load(PyTypeObject *type, PyObject *arg);
          static PyObject *t_StempelStemmer_stem(t_StempelStemmer *self, PyObject *arg);

          static PyMethodDef t_StempelStemmer__methods_[] = {
            DECLARE_METHOD(t_StempelStemmer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_StempelStemmer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_StempelStemmer, load, METH_O | METH_CLASS),
            DECLARE_METHOD(t_StempelStemmer, stem, METH_O),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(StempelStemmer, t_StempelStemmer, ::java::lang::Object, StempelStemmer, t_StempelStemmer_init_, 0, 0, 0, 0, 0);

          void t_StempelStemmer::install(PyObject *module)
          {
            installType(&PY_TYPE(StempelStemmer), module, "StempelStemmer", 0);
          }

          void t_StempelStemmer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(StempelStemmer).tp_dict, "class_", make_descriptor(StempelStemmer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(StempelStemmer).tp_dict, "wrapfn_", make_descriptor(t_StempelStemmer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(StempelStemmer).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_StempelStemmer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, StempelStemmer::initializeClass, 1)))
              return NULL;
            return t_StempelStemmer::wrap_Object(StempelStemmer(((t_StempelStemmer *) arg)->object.this$));
          }
          static PyObject *t_StempelStemmer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, StempelStemmer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_StempelStemmer_init_(t_StempelStemmer *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::java::io::InputStream a0((jobject) NULL);
                StempelStemmer object((jobject) NULL);

                if (!parseArgs(args, "k", ::java::io::InputStream::initializeClass, &a0))
                {
                  INT_CALL(object = StempelStemmer(a0));
                  self->object = object;
                  break;
                }
              }
              {
                ::org::egothor::stemmer::Trie a0((jobject) NULL);
                StempelStemmer object((jobject) NULL);

                if (!parseArgs(args, "k", ::org::egothor::stemmer::Trie::initializeClass, &a0))
                {
                  INT_CALL(object = StempelStemmer(a0));
                  self->object = object;
                  break;
                }
              }
             default:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_StempelStemmer_load(PyTypeObject *type, PyObject *arg)
          {
            ::java::io::InputStream a0((jobject) NULL);
            ::org::egothor::stemmer::Trie result((jobject) NULL);

            if (!parseArg(arg, "k", ::java::io::InputStream::initializeClass, &a0))
            {
              OBJ_CALL(result = ::org::apache::lucene::analysis::stempel::StempelStemmer::load(a0));
              return ::org::egothor::stemmer::t_Trie::wrap_Object(result);
            }

            PyErr_SetArgsError(type, "load", arg);
            return NULL;
          }

          static PyObject *t_StempelStemmer_stem(t_StempelStemmer *self, PyObject *arg)
          {
            ::java::lang::CharSequence a0((jobject) NULL);
            ::java::lang::StringBuilder result((jobject) NULL);

            if (!parseArg(arg, "O", &::java::lang::PY_TYPE(CharSequence), &a0))
            {
              OBJ_CALL(result = self->object.stem(a0));
              return ::java::lang::t_StringBuilder::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "stem", arg);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/tokenattributes/TypeAttribute.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace tokenattributes {

          ::java::lang::Class *TypeAttribute::class$ = NULL;
          jmethodID *TypeAttribute::mids$ = NULL;
          bool TypeAttribute::live$ = false;
          ::java::lang::String *TypeAttribute::DEFAULT_TYPE = NULL;

          jclass TypeAttribute::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/tokenattributes/TypeAttribute");

              mids$ = new jmethodID[max_mid];
              mids$[mid_setType_5fdc3f48] = env->getMethodID(cls, "setType", "(Ljava/lang/String;)V");
              mids$[mid_type_14c7b5c5] = env->getMethodID(cls, "type", "()Ljava/lang/String;");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              DEFAULT_TYPE = new ::java::lang::String(env->getStaticObjectField(cls, "DEFAULT_TYPE", "Ljava/lang/String;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          void TypeAttribute::setType(const ::java::lang::String & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setType_5fdc3f48], a0.this$);
          }

          ::java::lang::String TypeAttribute::type() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_type_14c7b5c5]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace tokenattributes {
          static PyObject *t_TypeAttribute_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_TypeAttribute_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_TypeAttribute_setType(t_TypeAttribute *self, PyObject *arg);
          static PyObject *t_TypeAttribute_type(t_TypeAttribute *self);

          static PyMethodDef t_TypeAttribute__methods_[] = {
            DECLARE_METHOD(t_TypeAttribute, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_TypeAttribute, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_TypeAttribute, setType, METH_O),
            DECLARE_METHOD(t_TypeAttribute, type, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(TypeAttribute, t_TypeAttribute, ::org::apache::lucene::util::Attribute, TypeAttribute, abstract_init, 0, 0, 0, 0, 0);

          void t_TypeAttribute::install(PyObject *module)
          {
            installType(&PY_TYPE(TypeAttribute), module, "TypeAttribute", 0);
          }

          void t_TypeAttribute::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(TypeAttribute).tp_dict, "class_", make_descriptor(TypeAttribute::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(TypeAttribute).tp_dict, "wrapfn_", make_descriptor(t_TypeAttribute::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(TypeAttribute).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(TypeAttribute::initializeClass);
            PyDict_SetItemString(PY_TYPE(TypeAttribute).tp_dict, "DEFAULT_TYPE", make_descriptor(j2p(*TypeAttribute::DEFAULT_TYPE)));
          }

          static PyObject *t_TypeAttribute_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, TypeAttribute::initializeClass, 1)))
              return NULL;
            return t_TypeAttribute::wrap_Object(TypeAttribute(((t_TypeAttribute *) arg)->object.this$));
          }
          static PyObject *t_TypeAttribute_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, TypeAttribute::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_TypeAttribute_setType(t_TypeAttribute *self, PyObject *arg)
          {
            ::java::lang::String a0((jobject) NULL);

            if (!parseArg(arg, "s", &a0))
            {
              OBJ_CALL(self->object.setType(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setType", arg);
            return NULL;
          }

          static PyObject *t_TypeAttribute_type(t_TypeAttribute *self)
          {
            ::java::lang::String result((jobject) NULL);
            OBJ_CALL(result = self->object.type());
            return j2p(result);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/SegmentInfo.h"
#include "java/lang/Class.h"
#include "java/util/Map.h"
#include "org/apache/lucene/store/Directory.h"
#include "java/lang/String.h"
#include "java/util/Collection.h"
#include "java/util/Set.h"
#include "org/apache/lucene/codecs/Codec.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *SegmentInfo::class$ = NULL;
        jmethodID *SegmentInfo::mids$ = NULL;
        jfieldID *SegmentInfo::fids$ = NULL;
        bool SegmentInfo::live$ = false;
        jint SegmentInfo::NO = (jint) 0;
        jint SegmentInfo::YES = (jint) 0;

        jclass SegmentInfo::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/SegmentInfo");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_f7b2b9ed] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/store/Directory;Ljava/lang/String;Ljava/lang/String;IZLorg/apache/lucene/codecs/Codec;Ljava/util/Map;)V");
            mids$[mid_init$_23209bc5] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/store/Directory;Ljava/lang/String;Ljava/lang/String;IZLorg/apache/lucene/codecs/Codec;Ljava/util/Map;Ljava/util/Map;)V");
            mids$[mid_addFile_5fdc3f48] = env->getMethodID(cls, "addFile", "(Ljava/lang/String;)V");
            mids$[mid_addFiles_9bfb370d] = env->getMethodID(cls, "addFiles", "(Ljava/util/Collection;)V");
            mids$[mid_attributes_db60befd] = env->getMethodID(cls, "attributes", "()Ljava/util/Map;");
            mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
            mids$[mid_files_03e99967] = env->getMethodID(cls, "files", "()Ljava/util/Set;");
            mids$[mid_getAttribute_97a5258f] = env->getMethodID(cls, "getAttribute", "(Ljava/lang/String;)Ljava/lang/String;");
            mids$[mid_getCodec_27f0a02b] = env->getMethodID(cls, "getCodec", "()Lorg/apache/lucene/codecs/Codec;");
            mids$[mid_getDiagnostics_db60befd] = env->getMethodID(cls, "getDiagnostics", "()Ljava/util/Map;");
            mids$[mid_getDocCount_54c6a179] = env->getMethodID(cls, "getDocCount", "()I");
            mids$[mid_getUseCompoundFile_54c6a16a] = env->getMethodID(cls, "getUseCompoundFile", "()Z");
            mids$[mid_getVersion_14c7b5c5] = env->getMethodID(cls, "getVersion", "()Ljava/lang/String;");
            mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
            mids$[mid_putAttribute_aacea7e9] = env->getMethodID(cls, "putAttribute", "(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;");
            mids$[mid_setCodec_848f310e] = env->getMethodID(cls, "setCodec", "(Lorg/apache/lucene/codecs/Codec;)V");
            mids$[mid_setFiles_fb4f2b26] = env->getMethodID(cls, "setFiles", "(Ljava/util/Set;)V");
            mids$[mid_setVersion_5fdc3f48] = env->getMethodID(cls, "setVersion", "(Ljava/lang/String;)V");
            mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");
            mids$[mid_toString_889826bf] = env->getMethodID(cls, "toString", "(Lorg/apache/lucene/store/Directory;I)Ljava/lang/String;");

            fids$ = new jfieldID[max_fid];
            fids$[fid_dir] = env->getFieldID(cls, "dir", "Lorg/apache/lucene/store/Directory;");
            fids$[fid_name] = env->getFieldID(cls, "name", "Ljava/lang/String;");

            class$ = (::java::lang::Class *) new JObject(cls);
            cls = (jclass) class$->this$;

            NO = env->getStaticIntField(cls, "NO");
            YES = env->getStaticIntField(cls, "YES");
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        SegmentInfo::SegmentInfo(const ::org::apache::lucene::store::Directory & a0, const ::java::lang::String & a1, const ::java::lang::String & a2, jint a3, jboolean a4, const ::org::apache::lucene::codecs::Codec & a5, const ::java::util::Map & a6) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_f7b2b9ed, a0.this$, a1.this$, a2.this$, a3, a4, a5.this$, a6.this$)) {}

        SegmentInfo::SegmentInfo(const ::org::apache::lucene::store::Directory & a0, const ::java::lang::String & a1, const ::java::lang::String & a2, jint a3, jboolean a4, const ::org::apache::lucene::codecs::Codec & a5, const ::java::util::Map & a6, const ::java::util::Map & a7) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_23209bc5, a0.this$, a1.this$, a2.this$, a3, a4, a5.this$, a6.this$, a7.this$)) {}

        void SegmentInfo::addFile(const ::java::lang::String & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_addFile_5fdc3f48], a0.this$);
        }

        void SegmentInfo::addFiles(const ::java::util::Collection & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_addFiles_9bfb370d], a0.this$);
        }

        ::java::util::Map SegmentInfo::attributes() const
        {
          return ::java::util::Map(env->callObjectMethod(this$, mids$[mid_attributes_db60befd]));
        }

        jboolean SegmentInfo::equals(const ::java::lang::Object & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
        }

        ::java::util::Set SegmentInfo::files() const
        {
          return ::java::util::Set(env->callObjectMethod(this$, mids$[mid_files_03e99967]));
        }

        ::java::lang::String SegmentInfo::getAttribute(const ::java::lang::String & a0) const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getAttribute_97a5258f], a0.this$));
        }

        ::org::apache::lucene::codecs::Codec SegmentInfo::getCodec() const
        {
          return ::org::apache::lucene::codecs::Codec(env->callObjectMethod(this$, mids$[mid_getCodec_27f0a02b]));
        }

        ::java::util::Map SegmentInfo::getDiagnostics() const
        {
          return ::java::util::Map(env->callObjectMethod(this$, mids$[mid_getDiagnostics_db60befd]));
        }

        jint SegmentInfo::getDocCount() const
        {
          return env->callIntMethod(this$, mids$[mid_getDocCount_54c6a179]);
        }

        jboolean SegmentInfo::getUseCompoundFile() const
        {
          return env->callBooleanMethod(this$, mids$[mid_getUseCompoundFile_54c6a16a]);
        }

        ::java::lang::String SegmentInfo::getVersion() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getVersion_14c7b5c5]));
        }

        jint SegmentInfo::hashCode() const
        {
          return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
        }

        ::java::lang::String SegmentInfo::putAttribute(const ::java::lang::String & a0, const ::java::lang::String & a1) const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_putAttribute_aacea7e9], a0.this$, a1.this$));
        }

        void SegmentInfo::setCodec(const ::org::apache::lucene::codecs::Codec & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setCodec_848f310e], a0.this$);
        }

        void SegmentInfo::setFiles(const ::java::util::Set & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setFiles_fb4f2b26], a0.this$);
        }

        void SegmentInfo::setVersion(const ::java::lang::String & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setVersion_5fdc3f48], a0.this$);
        }

        ::java::lang::String SegmentInfo::toString() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
        }

        ::java::lang::String SegmentInfo::toString(const ::org::apache::lucene::store::Directory & a0, jint a1) const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_889826bf], a0.this$, a1));
        }

        ::org::apache::lucene::store::Directory SegmentInfo::_get_dir() const
        {
          return ::org::apache::lucene::store::Directory(env->getObjectField(this$, fids$[fid_dir]));
        }

        ::java::lang::String SegmentInfo::_get_name() const
        {
          return ::java::lang::String(env->getObjectField(this$, fids$[fid_name]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_SegmentInfo_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_SegmentInfo_instance_(PyTypeObject *type, PyObject *arg);
        static int t_SegmentInfo_init_(t_SegmentInfo *self, PyObject *args, PyObject *kwds);
        static PyObject *t_SegmentInfo_addFile(t_SegmentInfo *self, PyObject *arg);
        static PyObject *t_SegmentInfo_addFiles(t_SegmentInfo *self, PyObject *arg);
        static PyObject *t_SegmentInfo_attributes(t_SegmentInfo *self);
        static PyObject *t_SegmentInfo_equals(t_SegmentInfo *self, PyObject *args);
        static PyObject *t_SegmentInfo_files(t_SegmentInfo *self);
        static PyObject *t_SegmentInfo_getAttribute(t_SegmentInfo *self, PyObject *arg);
        static PyObject *t_SegmentInfo_getCodec(t_SegmentInfo *self);
        static PyObject *t_SegmentInfo_getDiagnostics(t_SegmentInfo *self);
        static PyObject *t_SegmentInfo_getDocCount(t_SegmentInfo *self);
        static PyObject *t_SegmentInfo_getUseCompoundFile(t_SegmentInfo *self);
        static PyObject *t_SegmentInfo_getVersion(t_SegmentInfo *self);
        static PyObject *t_SegmentInfo_hashCode(t_SegmentInfo *self, PyObject *args);
        static PyObject *t_SegmentInfo_putAttribute(t_SegmentInfo *self, PyObject *args);
        static PyObject *t_SegmentInfo_setCodec(t_SegmentInfo *self, PyObject *arg);
        static PyObject *t_SegmentInfo_setFiles(t_SegmentInfo *self, PyObject *arg);
        static PyObject *t_SegmentInfo_setVersion(t_SegmentInfo *self, PyObject *arg);
        static PyObject *t_SegmentInfo_toString(t_SegmentInfo *self, PyObject *args);
        static PyObject *t_SegmentInfo_get__dir(t_SegmentInfo *self, void *data);
        static PyObject *t_SegmentInfo_get__name(t_SegmentInfo *self, void *data);

        static PyObject *t_SegmentInfo_get__codec(t_SegmentInfo *self, void *data);
        static int t_SegmentInfo_set__codec(t_SegmentInfo *self, PyObject *arg, void *data);
        static PyObject *t_SegmentInfo_get__diagnostics(t_SegmentInfo *self, void *data);
        static PyObject *t_SegmentInfo_get__docCount(t_SegmentInfo *self, void *data);
        static PyObject *t_SegmentInfo_get__useCompoundFile(t_SegmentInfo *self, void *data);
        static PyObject *t_SegmentInfo_get__version(t_SegmentInfo *self, void *data);
        static int t_SegmentInfo_set__version(t_SegmentInfo *self, PyObject *arg, void *data);
        static PyGetSetDef t_SegmentInfo__fields_[] = {
          DECLARE_GET_FIELD(t_SegmentInfo, dir),
          DECLARE_GET_FIELD(t_SegmentInfo, name),
          DECLARE_GETSET_FIELD(t_SegmentInfo, codec),
          DECLARE_GET_FIELD(t_SegmentInfo, diagnostics),
          DECLARE_GET_FIELD(t_SegmentInfo, docCount),
          DECLARE_GET_FIELD(t_SegmentInfo, useCompoundFile),
          DECLARE_GETSET_FIELD(t_SegmentInfo, version),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_SegmentInfo__methods_[] = {
          DECLARE_METHOD(t_SegmentInfo, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SegmentInfo, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SegmentInfo, addFile, METH_O),
          DECLARE_METHOD(t_SegmentInfo, addFiles, METH_O),
          DECLARE_METHOD(t_SegmentInfo, attributes, METH_NOARGS),
          DECLARE_METHOD(t_SegmentInfo, equals, METH_VARARGS),
          DECLARE_METHOD(t_SegmentInfo, files, METH_NOARGS),
          DECLARE_METHOD(t_SegmentInfo, getAttribute, METH_O),
          DECLARE_METHOD(t_SegmentInfo, getCodec, METH_NOARGS),
          DECLARE_METHOD(t_SegmentInfo, getDiagnostics, METH_NOARGS),
          DECLARE_METHOD(t_SegmentInfo, getDocCount, METH_NOARGS),
          DECLARE_METHOD(t_SegmentInfo, getUseCompoundFile, METH_NOARGS),
          DECLARE_METHOD(t_SegmentInfo, getVersion, METH_NOARGS),
          DECLARE_METHOD(t_SegmentInfo, hashCode, METH_VARARGS),
          DECLARE_METHOD(t_SegmentInfo, putAttribute, METH_VARARGS),
          DECLARE_METHOD(t_SegmentInfo, setCodec, METH_O),
          DECLARE_METHOD(t_SegmentInfo, setFiles, METH_O),
          DECLARE_METHOD(t_SegmentInfo, setVersion, METH_O),
          DECLARE_METHOD(t_SegmentInfo, toString, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(SegmentInfo, t_SegmentInfo, ::java::lang::Object, SegmentInfo, t_SegmentInfo_init_, 0, 0, t_SegmentInfo__fields_, 0, 0);

        void t_SegmentInfo::install(PyObject *module)
        {
          installType(&PY_TYPE(SegmentInfo), module, "SegmentInfo", 0);
        }

        void t_SegmentInfo::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(SegmentInfo).tp_dict, "class_", make_descriptor(SegmentInfo::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(SegmentInfo).tp_dict, "wrapfn_", make_descriptor(t_SegmentInfo::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(SegmentInfo).tp_dict, "boxfn_", make_descriptor(boxObject));
          env->getClass(SegmentInfo::initializeClass);
          PyDict_SetItemString(PY_TYPE(SegmentInfo).tp_dict, "NO", make_descriptor(SegmentInfo::NO));
          PyDict_SetItemString(PY_TYPE(SegmentInfo).tp_dict, "YES", make_descriptor(SegmentInfo::YES));
        }

        static PyObject *t_SegmentInfo_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, SegmentInfo::initializeClass, 1)))
            return NULL;
          return t_SegmentInfo::wrap_Object(SegmentInfo(((t_SegmentInfo *) arg)->object.this$));
        }
        static PyObject *t_SegmentInfo_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, SegmentInfo::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_SegmentInfo_init_(t_SegmentInfo *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 7:
            {
              ::org::apache::lucene::store::Directory a0((jobject) NULL);
              ::java::lang::String a1((jobject) NULL);
              ::java::lang::String a2((jobject) NULL);
              jint a3;
              jboolean a4;
              ::org::apache::lucene::codecs::Codec a5((jobject) NULL);
              ::java::util::Map a6((jobject) NULL);
              PyTypeObject **p6;
              SegmentInfo object((jobject) NULL);

              if (!parseArgs(args, "kssIZkK", ::org::apache::lucene::store::Directory::initializeClass, ::org::apache::lucene::codecs::Codec::initializeClass, ::java::util::Map::initializeClass, &a0, &a1, &a2, &a3, &a4, &a5, &a6, &p6, ::java::util::t_Map::parameters_))
              {
                INT_CALL(object = SegmentInfo(a0, a1, a2, a3, a4, a5, a6));
                self->object = object;
                break;
              }
            }
            goto err;
           case 8:
            {
              ::org::apache::lucene::store::Directory a0((jobject) NULL);
              ::java::lang::String a1((jobject) NULL);
              ::java::lang::String a2((jobject) NULL);
              jint a3;
              jboolean a4;
              ::org::apache::lucene::codecs::Codec a5((jobject) NULL);
              ::java::util::Map a6((jobject) NULL);
              PyTypeObject **p6;
              ::java::util::Map a7((jobject) NULL);
              PyTypeObject **p7;
              SegmentInfo object((jobject) NULL);

              if (!parseArgs(args, "kssIZkKK", ::org::apache::lucene::store::Directory::initializeClass, ::org::apache::lucene::codecs::Codec::initializeClass, ::java::util::Map::initializeClass, ::java::util::Map::initializeClass, &a0, &a1, &a2, &a3, &a4, &a5, &a6, &p6, ::java::util::t_Map::parameters_, &a7, &p7, ::java::util::t_Map::parameters_))
              {
                INT_CALL(object = SegmentInfo(a0, a1, a2, a3, a4, a5, a6, a7));
                self->object = object;
                break;
              }
            }
           default:
           err:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_SegmentInfo_addFile(t_SegmentInfo *self, PyObject *arg)
        {
          ::java::lang::String a0((jobject) NULL);

          if (!parseArg(arg, "s", &a0))
          {
            OBJ_CALL(self->object.addFile(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "addFile", arg);
          return NULL;
        }

        static PyObject *t_SegmentInfo_addFiles(t_SegmentInfo *self, PyObject *arg)
        {
          ::java::util::Collection a0((jobject) NULL);
          PyTypeObject **p0;

          if (!parseArg(arg, "K", ::java::util::Collection::initializeClass, &a0, &p0, ::java::util::t_Collection::parameters_))
          {
            OBJ_CALL(self->object.addFiles(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "addFiles", arg);
          return NULL;
        }

        static PyObject *t_SegmentInfo_attributes(t_SegmentInfo *self)
        {
          ::java::util::Map result((jobject) NULL);
          OBJ_CALL(result = self->object.attributes());
          return ::java::util::t_Map::wrap_Object(result, &::java::lang::PY_TYPE(String), &::java::lang::PY_TYPE(String));
        }

        static PyObject *t_SegmentInfo_equals(t_SegmentInfo *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.equals(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(SegmentInfo), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_SegmentInfo_files(t_SegmentInfo *self)
        {
          ::java::util::Set result((jobject) NULL);
          OBJ_CALL(result = self->object.files());
          return ::java::util::t_Set::wrap_Object(result, &::java::lang::PY_TYPE(String));
        }

        static PyObject *t_SegmentInfo_getAttribute(t_SegmentInfo *self, PyObject *arg)
        {
          ::java::lang::String a0((jobject) NULL);
          ::java::lang::String result((jobject) NULL);

          if (!parseArg(arg, "s", &a0))
          {
            OBJ_CALL(result = self->object.getAttribute(a0));
            return j2p(result);
          }

          PyErr_SetArgsError((PyObject *) self, "getAttribute", arg);
          return NULL;
        }

        static PyObject *t_SegmentInfo_getCodec(t_SegmentInfo *self)
        {
          ::org::apache::lucene::codecs::Codec result((jobject) NULL);
          OBJ_CALL(result = self->object.getCodec());
          return ::org::apache::lucene::codecs::t_Codec::wrap_Object(result);
        }

        static PyObject *t_SegmentInfo_getDiagnostics(t_SegmentInfo *self)
        {
          ::java::util::Map result((jobject) NULL);
          OBJ_CALL(result = self->object.getDiagnostics());
          return ::java::util::t_Map::wrap_Object(result, &::java::lang::PY_TYPE(String), &::java::lang::PY_TYPE(String));
        }

        static PyObject *t_SegmentInfo_getDocCount(t_SegmentInfo *self)
        {
          jint result;
          OBJ_CALL(result = self->object.getDocCount());
          return PyInt_FromLong((long) result);
        }

        static PyObject *t_SegmentInfo_getUseCompoundFile(t_SegmentInfo *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.getUseCompoundFile());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_SegmentInfo_getVersion(t_SegmentInfo *self)
        {
          ::java::lang::String result((jobject) NULL);
          OBJ_CALL(result = self->object.getVersion());
          return j2p(result);
        }

        static PyObject *t_SegmentInfo_hashCode(t_SegmentInfo *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hashCode());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(SegmentInfo), (PyObject *) self, "hashCode", args, 2);
        }

        static PyObject *t_SegmentInfo_putAttribute(t_SegmentInfo *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::java::lang::String a1((jobject) NULL);
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, "ss", &a0, &a1))
          {
            OBJ_CALL(result = self->object.putAttribute(a0, a1));
            return j2p(result);
          }

          PyErr_SetArgsError((PyObject *) self, "putAttribute", args);
          return NULL;
        }

        static PyObject *t_SegmentInfo_setCodec(t_SegmentInfo *self, PyObject *arg)
        {
          ::org::apache::lucene::codecs::Codec a0((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::codecs::Codec::initializeClass, &a0))
          {
            OBJ_CALL(self->object.setCodec(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setCodec", arg);
          return NULL;
        }

        static PyObject *t_SegmentInfo_setFiles(t_SegmentInfo *self, PyObject *arg)
        {
          ::java::util::Set a0((jobject) NULL);
          PyTypeObject **p0;

          if (!parseArg(arg, "K", ::java::util::Set::initializeClass, &a0, &p0, ::java::util::t_Set::parameters_))
          {
            OBJ_CALL(self->object.setFiles(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setFiles", arg);
          return NULL;
        }

        static PyObject *t_SegmentInfo_setVersion(t_SegmentInfo *self, PyObject *arg)
        {
          ::java::lang::String a0((jobject) NULL);

          if (!parseArg(arg, "s", &a0))
          {
            OBJ_CALL(self->object.setVersion(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setVersion", arg);
          return NULL;
        }

        static PyObject *t_SegmentInfo_toString(t_SegmentInfo *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 0:
            {
              ::java::lang::String result((jobject) NULL);
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }
            break;
           case 2:
            {
              ::org::apache::lucene::store::Directory a0((jobject) NULL);
              jint a1;
              ::java::lang::String result((jobject) NULL);

              if (!parseArgs(args, "kI", ::org::apache::lucene::store::Directory::initializeClass, &a0, &a1))
              {
                OBJ_CALL(result = self->object.toString(a0, a1));
                return j2p(result);
              }
            }
          }

          return callSuper(&PY_TYPE(SegmentInfo), (PyObject *) self, "toString", args, 2);
        }

        static PyObject *t_SegmentInfo_get__dir(t_SegmentInfo *self, void *data)
        {
          ::org::apache::lucene::store::Directory value((jobject) NULL);
          OBJ_CALL(value = self->object._get_dir());
          return ::org::apache::lucene::store::t_Directory::wrap_Object(value);
        }

        static PyObject *t_SegmentInfo_get__name(t_SegmentInfo *self, void *data)
        {
          ::java::lang::String value((jobject) NULL);
          OBJ_CALL(value = self->object._get_name());
          return j2p(value);
        }

        static PyObject *t_SegmentInfo_get__codec(t_SegmentInfo *self, void *data)
        {
          ::org::apache::lucene::codecs::Codec value((jobject) NULL);
          OBJ_CALL(value = self->object.getCodec());
          return ::org::apache::lucene::codecs::t_Codec::wrap_Object(value);
        }
        static int t_SegmentInfo_set__codec(t_SegmentInfo *self, PyObject *arg, void *data)
        {
          {
            ::org::apache::lucene::codecs::Codec value((jobject) NULL);
            if (!parseArg(arg, "k", ::org::apache::lucene::codecs::Codec::initializeClass, &value))
            {
              INT_CALL(self->object.setCodec(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "codec", arg);
          return -1;
        }

        static PyObject *t_SegmentInfo_get__diagnostics(t_SegmentInfo *self, void *data)
        {
          ::java::util::Map value((jobject) NULL);
          OBJ_CALL(value = self->object.getDiagnostics());
          return ::java::util::t_Map::wrap_Object(value);
        }

        static PyObject *t_SegmentInfo_get__docCount(t_SegmentInfo *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object.getDocCount());
          return PyInt_FromLong((long) value);
        }

        static PyObject *t_SegmentInfo_get__useCompoundFile(t_SegmentInfo *self, void *data)
        {
          jboolean value;
          OBJ_CALL(value = self->object.getUseCompoundFile());
          Py_RETURN_BOOL(value);
        }

        static PyObject *t_SegmentInfo_get__version(t_SegmentInfo *self, void *data)
        {
          ::java::lang::String value((jobject) NULL);
          OBJ_CALL(value = self->object.getVersion());
          return j2p(value);
        }
        static int t_SegmentInfo_set__version(t_SegmentInfo *self, PyObject *arg, void *data)
        {
          {
            ::java::lang::String value((jobject) NULL);
            if (!parseArg(arg, "s", &value))
            {
              INT_CALL(self->object.setVersion(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "version", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/highlight/InvalidTokenOffsetsException.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace highlight {

          ::java::lang::Class *InvalidTokenOffsetsException::class$ = NULL;
          jmethodID *InvalidTokenOffsetsException::mids$ = NULL;
          bool InvalidTokenOffsetsException::live$ = false;

          jclass InvalidTokenOffsetsException::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/highlight/InvalidTokenOffsetsException");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_5fdc3f48] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          InvalidTokenOffsetsException::InvalidTokenOffsetsException(const ::java::lang::String & a0) : ::java::lang::Exception(env->newObject(initializeClass, &mids$, mid_init$_5fdc3f48, a0.this$)) {}
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace highlight {
          static PyObject *t_InvalidTokenOffsetsException_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_InvalidTokenOffsetsException_instance_(PyTypeObject *type, PyObject *arg);
          static int t_InvalidTokenOffsetsException_init_(t_InvalidTokenOffsetsException *self, PyObject *args, PyObject *kwds);

          static PyMethodDef t_InvalidTokenOffsetsException__methods_[] = {
            DECLARE_METHOD(t_InvalidTokenOffsetsException, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_InvalidTokenOffsetsException, instance_, METH_O | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(InvalidTokenOffsetsException, t_InvalidTokenOffsetsException, ::java::lang::Exception, InvalidTokenOffsetsException, t_InvalidTokenOffsetsException_init_, 0, 0, 0, 0, 0);

          void t_InvalidTokenOffsetsException::install(PyObject *module)
          {
            installType(&PY_TYPE(InvalidTokenOffsetsException), module, "InvalidTokenOffsetsException", 0);
          }

          void t_InvalidTokenOffsetsException::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(InvalidTokenOffsetsException).tp_dict, "class_", make_descriptor(InvalidTokenOffsetsException::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(InvalidTokenOffsetsException).tp_dict, "wrapfn_", make_descriptor(t_InvalidTokenOffsetsException::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(InvalidTokenOffsetsException).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_InvalidTokenOffsetsException_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, InvalidTokenOffsetsException::initializeClass, 1)))
              return NULL;
            return t_InvalidTokenOffsetsException::wrap_Object(InvalidTokenOffsetsException(((t_InvalidTokenOffsetsException *) arg)->object.this$));
          }
          static PyObject *t_InvalidTokenOffsetsException_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, InvalidTokenOffsetsException::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_InvalidTokenOffsetsException_init_(t_InvalidTokenOffsetsException *self, PyObject *args, PyObject *kwds)
          {
            ::java::lang::String a0((jobject) NULL);
            InvalidTokenOffsetsException object((jobject) NULL);

            if (!parseArgs(args, "s", &a0))
            {
              INT_CALL(object = InvalidTokenOffsetsException(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/miscellaneous/SingleTokenTokenStream.h"
#include "org/apache/lucene/analysis/Token.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {

          ::java::lang::Class *SingleTokenTokenStream::class$ = NULL;
          jmethodID *SingleTokenTokenStream::mids$ = NULL;
          bool SingleTokenTokenStream::live$ = false;

          jclass SingleTokenTokenStream::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/miscellaneous/SingleTokenTokenStream");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4f6e7002] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/Token;)V");
              mids$[mid_getToken_55852c17] = env->getMethodID(cls, "getToken", "()Lorg/apache/lucene/analysis/Token;");
              mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");
              mids$[mid_reset_54c6a166] = env->getMethodID(cls, "reset", "()V");
              mids$[mid_setToken_4f6e7002] = env->getMethodID(cls, "setToken", "(Lorg/apache/lucene/analysis/Token;)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          SingleTokenTokenStream::SingleTokenTokenStream(const ::org::apache::lucene::analysis::Token & a0) : ::org::apache::lucene::analysis::TokenStream(env->newObject(initializeClass, &mids$, mid_init$_4f6e7002, a0.this$)) {}

          ::org::apache::lucene::analysis::Token SingleTokenTokenStream::getToken() const
          {
            return ::org::apache::lucene::analysis::Token(env->callObjectMethod(this$, mids$[mid_getToken_55852c17]));
          }

          jboolean SingleTokenTokenStream::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_54c6a16a]);
          }

          void SingleTokenTokenStream::reset() const
          {
            env->callVoidMethod(this$, mids$[mid_reset_54c6a166]);
          }

          void SingleTokenTokenStream::setToken(const ::org::apache::lucene::analysis::Token & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setToken_4f6e7002], a0.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {
          static PyObject *t_SingleTokenTokenStream_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SingleTokenTokenStream_instance_(PyTypeObject *type, PyObject *arg);
          static int t_SingleTokenTokenStream_init_(t_SingleTokenTokenStream *self, PyObject *args, PyObject *kwds);
          static PyObject *t_SingleTokenTokenStream_getToken(t_SingleTokenTokenStream *self);
          static PyObject *t_SingleTokenTokenStream_incrementToken(t_SingleTokenTokenStream *self, PyObject *args);
          static PyObject *t_SingleTokenTokenStream_reset(t_SingleTokenTokenStream *self, PyObject *args);
          static PyObject *t_SingleTokenTokenStream_setToken(t_SingleTokenTokenStream *self, PyObject *arg);
          static PyObject *t_SingleTokenTokenStream_get__token(t_SingleTokenTokenStream *self, void *data);
          static int t_SingleTokenTokenStream_set__token(t_SingleTokenTokenStream *self, PyObject *arg, void *data);
          static PyGetSetDef t_SingleTokenTokenStream__fields_[] = {
            DECLARE_GETSET_FIELD(t_SingleTokenTokenStream, token),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_SingleTokenTokenStream__methods_[] = {
            DECLARE_METHOD(t_SingleTokenTokenStream, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SingleTokenTokenStream, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SingleTokenTokenStream, getToken, METH_NOARGS),
            DECLARE_METHOD(t_SingleTokenTokenStream, incrementToken, METH_VARARGS),
            DECLARE_METHOD(t_SingleTokenTokenStream, reset, METH_VARARGS),
            DECLARE_METHOD(t_SingleTokenTokenStream, setToken, METH_O),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(SingleTokenTokenStream, t_SingleTokenTokenStream, ::org::apache::lucene::analysis::TokenStream, SingleTokenTokenStream, t_SingleTokenTokenStream_init_, 0, 0, t_SingleTokenTokenStream__fields_, 0, 0);

          void t_SingleTokenTokenStream::install(PyObject *module)
          {
            installType(&PY_TYPE(SingleTokenTokenStream), module, "SingleTokenTokenStream", 0);
          }

          void t_SingleTokenTokenStream::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(SingleTokenTokenStream).tp_dict, "class_", make_descriptor(SingleTokenTokenStream::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(SingleTokenTokenStream).tp_dict, "wrapfn_", make_descriptor(t_SingleTokenTokenStream::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(SingleTokenTokenStream).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_SingleTokenTokenStream_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, SingleTokenTokenStream::initializeClass, 1)))
              return NULL;
            return t_SingleTokenTokenStream::wrap_Object(SingleTokenTokenStream(((t_SingleTokenTokenStream *) arg)->object.this$));
          }
          static PyObject *t_SingleTokenTokenStream_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, SingleTokenTokenStream::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_SingleTokenTokenStream_init_(t_SingleTokenTokenStream *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::analysis::Token a0((jobject) NULL);
            SingleTokenTokenStream object((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::Token::initializeClass, &a0))
            {
              INT_CALL(object = SingleTokenTokenStream(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_SingleTokenTokenStream_getToken(t_SingleTokenTokenStream *self)
          {
            ::org::apache::lucene::analysis::Token result((jobject) NULL);
            OBJ_CALL(result = self->object.getToken());
            return ::org::apache::lucene::analysis::t_Token::wrap_Object(result);
          }

          static PyObject *t_SingleTokenTokenStream_incrementToken(t_SingleTokenTokenStream *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(SingleTokenTokenStream), (PyObject *) self, "incrementToken", args, 2);
          }

          static PyObject *t_SingleTokenTokenStream_reset(t_SingleTokenTokenStream *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.reset());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(SingleTokenTokenStream), (PyObject *) self, "reset", args, 2);
          }

          static PyObject *t_SingleTokenTokenStream_setToken(t_SingleTokenTokenStream *self, PyObject *arg)
          {
            ::org::apache::lucene::analysis::Token a0((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::analysis::Token::initializeClass, &a0))
            {
              OBJ_CALL(self->object.setToken(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setToken", arg);
            return NULL;
          }

          static PyObject *t_SingleTokenTokenStream_get__token(t_SingleTokenTokenStream *self, void *data)
          {
            ::org::apache::lucene::analysis::Token value((jobject) NULL);
            OBJ_CALL(value = self->object.getToken());
            return ::org::apache::lucene::analysis::t_Token::wrap_Object(value);
          }
          static int t_SingleTokenTokenStream_set__token(t_SingleTokenTokenStream *self, PyObject *arg, void *data)
          {
            {
              ::org::apache::lucene::analysis::Token value((jobject) NULL);
              if (!parseArg(arg, "k", ::org::apache::lucene::analysis::Token::initializeClass, &value))
              {
                INT_CALL(self->object.setToken(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "token", arg);
            return -1;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/grouping/AbstractAllGroupHeadsCollector$GroupHead.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace grouping {

          ::java::lang::Class *AbstractAllGroupHeadsCollector$GroupHead::class$ = NULL;
          jmethodID *AbstractAllGroupHeadsCollector$GroupHead::mids$ = NULL;
          jfieldID *AbstractAllGroupHeadsCollector$GroupHead::fids$ = NULL;
          bool AbstractAllGroupHeadsCollector$GroupHead::live$ = false;

          jclass AbstractAllGroupHeadsCollector$GroupHead::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/grouping/AbstractAllGroupHeadsCollector$GroupHead");

              mids$ = new jmethodID[max_mid];
              mids$[mid_compare_d8d154b9] = env->getMethodID(cls, "compare", "(II)I");
              mids$[mid_updateDocHead_39c7bd3c] = env->getMethodID(cls, "updateDocHead", "(I)V");

              fids$ = new jfieldID[max_fid];
              fids$[fid_doc] = env->getFieldID(cls, "doc", "I");
              fids$[fid_groupValue] = env->getFieldID(cls, "groupValue", "Ljava/lang/Object;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          jint AbstractAllGroupHeadsCollector$GroupHead::_get_doc() const
          {
            return env->getIntField(this$, fids$[fid_doc]);
          }

          void AbstractAllGroupHeadsCollector$GroupHead::_set_doc(jint a0) const
          {
            env->setIntField(this$, fids$[fid_doc], a0);
          }

          ::java::lang::Object AbstractAllGroupHeadsCollector$GroupHead::_get_groupValue() const
          {
            return ::java::lang::Object(env->getObjectField(this$, fids$[fid_groupValue]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace grouping {
          static PyObject *t_AbstractAllGroupHeadsCollector$GroupHead_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_AbstractAllGroupHeadsCollector$GroupHead_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_AbstractAllGroupHeadsCollector$GroupHead_of_(t_AbstractAllGroupHeadsCollector$GroupHead *self, PyObject *args);
          static PyObject *t_AbstractAllGroupHeadsCollector$GroupHead_get__doc(t_AbstractAllGroupHeadsCollector$GroupHead *self, void *data);
          static int t_AbstractAllGroupHeadsCollector$GroupHead_set__doc(t_AbstractAllGroupHeadsCollector$GroupHead *self, PyObject *arg, void *data);
          static PyObject *t_AbstractAllGroupHeadsCollector$GroupHead_get__groupValue(t_AbstractAllGroupHeadsCollector$GroupHead *self, void *data);

          static PyObject *t_AbstractAllGroupHeadsCollector$GroupHead_get__parameters_(t_AbstractAllGroupHeadsCollector$GroupHead *self, void *data);
          static PyGetSetDef t_AbstractAllGroupHeadsCollector$GroupHead__fields_[] = {
            DECLARE_GETSET_FIELD(t_AbstractAllGroupHeadsCollector$GroupHead, doc),
            DECLARE_GET_FIELD(t_AbstractAllGroupHeadsCollector$GroupHead, groupValue),
            DECLARE_GET_FIELD(t_AbstractAllGroupHeadsCollector$GroupHead, parameters_),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_AbstractAllGroupHeadsCollector$GroupHead__methods_[] = {
            DECLARE_METHOD(t_AbstractAllGroupHeadsCollector$GroupHead, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_AbstractAllGroupHeadsCollector$GroupHead, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_AbstractAllGroupHeadsCollector$GroupHead, of_, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(AbstractAllGroupHeadsCollector$GroupHead, t_AbstractAllGroupHeadsCollector$GroupHead, ::java::lang::Object, AbstractAllGroupHeadsCollector$GroupHead, abstract_init, 0, 0, t_AbstractAllGroupHeadsCollector$GroupHead__fields_, 0, 0);
          PyObject *t_AbstractAllGroupHeadsCollector$GroupHead::wrap_Object(const AbstractAllGroupHeadsCollector$GroupHead& object, PyTypeObject *p0)
          {
            PyObject *obj = t_AbstractAllGroupHeadsCollector$GroupHead::wrap_Object(object);
            if (obj != NULL && obj != Py_None)
            {
              t_AbstractAllGroupHeadsCollector$GroupHead *self = (t_AbstractAllGroupHeadsCollector$GroupHead *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          PyObject *t_AbstractAllGroupHeadsCollector$GroupHead::wrap_jobject(const jobject& object, PyTypeObject *p0)
          {
            PyObject *obj = t_AbstractAllGroupHeadsCollector$GroupHead::wrap_jobject(object);
            if (obj != NULL && obj != Py_None)
            {
              t_AbstractAllGroupHeadsCollector$GroupHead *self = (t_AbstractAllGroupHeadsCollector$GroupHead *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          void t_AbstractAllGroupHeadsCollector$GroupHead::install(PyObject *module)
          {
            installType(&PY_TYPE(AbstractAllGroupHeadsCollector$GroupHead), module, "AbstractAllGroupHeadsCollector$GroupHead", 0);
          }

          void t_AbstractAllGroupHeadsCollector$GroupHead::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(AbstractAllGroupHeadsCollector$GroupHead).tp_dict, "class_", make_descriptor(AbstractAllGroupHeadsCollector$GroupHead::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(AbstractAllGroupHeadsCollector$GroupHead).tp_dict, "wrapfn_", make_descriptor(t_AbstractAllGroupHeadsCollector$GroupHead::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(AbstractAllGroupHeadsCollector$GroupHead).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_AbstractAllGroupHeadsCollector$GroupHead_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, AbstractAllGroupHeadsCollector$GroupHead::initializeClass, 1)))
              return NULL;
            return t_AbstractAllGroupHeadsCollector$GroupHead::wrap_Object(AbstractAllGroupHeadsCollector$GroupHead(((t_AbstractAllGroupHeadsCollector$GroupHead *) arg)->object.this$));
          }
          static PyObject *t_AbstractAllGroupHeadsCollector$GroupHead_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, AbstractAllGroupHeadsCollector$GroupHead::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_AbstractAllGroupHeadsCollector$GroupHead_of_(t_AbstractAllGroupHeadsCollector$GroupHead *self, PyObject *args)
          {
            if (!parseArg(args, "T", 1, &(self->parameters)))
              Py_RETURN_SELF;
            return PyErr_SetArgsError((PyObject *) self, "of_", args);
          }
          static PyObject *t_AbstractAllGroupHeadsCollector$GroupHead_get__parameters_(t_AbstractAllGroupHeadsCollector$GroupHead *self, void *data)
          {
            return typeParameters(self->parameters, sizeof(self->parameters));
          }

          static PyObject *t_AbstractAllGroupHeadsCollector$GroupHead_get__doc(t_AbstractAllGroupHeadsCollector$GroupHead *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object._get_doc());
            return PyInt_FromLong((long) value);
          }
          static int t_AbstractAllGroupHeadsCollector$GroupHead_set__doc(t_AbstractAllGroupHeadsCollector$GroupHead *self, PyObject *arg, void *data)
          {
            jint value;
            if (!parseArg(arg, "I", &value))
            {
              INT_CALL(self->object._set_doc(value));
              return 0;
            }
            PyErr_SetArgsError((PyObject *) self, "doc", arg);
            return -1;
          }

          static PyObject *t_AbstractAllGroupHeadsCollector$GroupHead_get__groupValue(t_AbstractAllGroupHeadsCollector$GroupHead *self, void *data)
          {
            ::java::lang::Object value((jobject) NULL);
            OBJ_CALL(value = self->object._get_groupValue());
            return ::java::lang::t_Object::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/lucene42/Lucene42FieldInfosFormat.h"
#include "org/apache/lucene/codecs/FieldInfosWriter.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/codecs/FieldInfosReader.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace lucene42 {

          ::java::lang::Class *Lucene42FieldInfosFormat::class$ = NULL;
          jmethodID *Lucene42FieldInfosFormat::mids$ = NULL;
          bool Lucene42FieldInfosFormat::live$ = false;

          jclass Lucene42FieldInfosFormat::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/lucene42/Lucene42FieldInfosFormat");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_getFieldInfosReader_6ecd5494] = env->getMethodID(cls, "getFieldInfosReader", "()Lorg/apache/lucene/codecs/FieldInfosReader;");
              mids$[mid_getFieldInfosWriter_211ffa60] = env->getMethodID(cls, "getFieldInfosWriter", "()Lorg/apache/lucene/codecs/FieldInfosWriter;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          Lucene42FieldInfosFormat::Lucene42FieldInfosFormat() : ::org::apache::lucene::codecs::FieldInfosFormat(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          ::org::apache::lucene::codecs::FieldInfosReader Lucene42FieldInfosFormat::getFieldInfosReader() const
          {
            return ::org::apache::lucene::codecs::FieldInfosReader(env->callObjectMethod(this$, mids$[mid_getFieldInfosReader_6ecd5494]));
          }

          ::org::apache::lucene::codecs::FieldInfosWriter Lucene42FieldInfosFormat::getFieldInfosWriter() const
          {
            return ::org::apache::lucene::codecs::FieldInfosWriter(env->callObjectMethod(this$, mids$[mid_getFieldInfosWriter_211ffa60]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace lucene42 {
          static PyObject *t_Lucene42FieldInfosFormat_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Lucene42FieldInfosFormat_instance_(PyTypeObject *type, PyObject *arg);
          static int t_Lucene42FieldInfosFormat_init_(t_Lucene42FieldInfosFormat *self, PyObject *args, PyObject *kwds);
          static PyObject *t_Lucene42FieldInfosFormat_getFieldInfosReader(t_Lucene42FieldInfosFormat *self, PyObject *args);
          static PyObject *t_Lucene42FieldInfosFormat_getFieldInfosWriter(t_Lucene42FieldInfosFormat *self, PyObject *args);
          static PyObject *t_Lucene42FieldInfosFormat_get__fieldInfosReader(t_Lucene42FieldInfosFormat *self, void *data);
          static PyObject *t_Lucene42FieldInfosFormat_get__fieldInfosWriter(t_Lucene42FieldInfosFormat *self, void *data);
          static PyGetSetDef t_Lucene42FieldInfosFormat__fields_[] = {
            DECLARE_GET_FIELD(t_Lucene42FieldInfosFormat, fieldInfosReader),
            DECLARE_GET_FIELD(t_Lucene42FieldInfosFormat, fieldInfosWriter),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_Lucene42FieldInfosFormat__methods_[] = {
            DECLARE_METHOD(t_Lucene42FieldInfosFormat, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lucene42FieldInfosFormat, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lucene42FieldInfosFormat, getFieldInfosReader, METH_VARARGS),
            DECLARE_METHOD(t_Lucene42FieldInfosFormat, getFieldInfosWriter, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(Lucene42FieldInfosFormat, t_Lucene42FieldInfosFormat, ::org::apache::lucene::codecs::FieldInfosFormat, Lucene42FieldInfosFormat, t_Lucene42FieldInfosFormat_init_, 0, 0, t_Lucene42FieldInfosFormat__fields_, 0, 0);

          void t_Lucene42FieldInfosFormat::install(PyObject *module)
          {
            installType(&PY_TYPE(Lucene42FieldInfosFormat), module, "Lucene42FieldInfosFormat", 0);
          }

          void t_Lucene42FieldInfosFormat::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(Lucene42FieldInfosFormat).tp_dict, "class_", make_descriptor(Lucene42FieldInfosFormat::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(Lucene42FieldInfosFormat).tp_dict, "wrapfn_", make_descriptor(t_Lucene42FieldInfosFormat::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(Lucene42FieldInfosFormat).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_Lucene42FieldInfosFormat_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, Lucene42FieldInfosFormat::initializeClass, 1)))
              return NULL;
            return t_Lucene42FieldInfosFormat::wrap_Object(Lucene42FieldInfosFormat(((t_Lucene42FieldInfosFormat *) arg)->object.this$));
          }
          static PyObject *t_Lucene42FieldInfosFormat_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, Lucene42FieldInfosFormat::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_Lucene42FieldInfosFormat_init_(t_Lucene42FieldInfosFormat *self, PyObject *args, PyObject *kwds)
          {
            Lucene42FieldInfosFormat object((jobject) NULL);

            INT_CALL(object = Lucene42FieldInfosFormat());
            self->object = object;

            return 0;
          }

          static PyObject *t_Lucene42FieldInfosFormat_getFieldInfosReader(t_Lucene42FieldInfosFormat *self, PyObject *args)
          {
            ::org::apache::lucene::codecs::FieldInfosReader result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.getFieldInfosReader());
              return ::org::apache::lucene::codecs::t_FieldInfosReader::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(Lucene42FieldInfosFormat), (PyObject *) self, "getFieldInfosReader", args, 2);
          }

          static PyObject *t_Lucene42FieldInfosFormat_getFieldInfosWriter(t_Lucene42FieldInfosFormat *self, PyObject *args)
          {
            ::org::apache::lucene::codecs::FieldInfosWriter result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.getFieldInfosWriter());
              return ::org::apache::lucene::codecs::t_FieldInfosWriter::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(Lucene42FieldInfosFormat), (PyObject *) self, "getFieldInfosWriter", args, 2);
          }

          static PyObject *t_Lucene42FieldInfosFormat_get__fieldInfosReader(t_Lucene42FieldInfosFormat *self, void *data)
          {
            ::org::apache::lucene::codecs::FieldInfosReader value((jobject) NULL);
            OBJ_CALL(value = self->object.getFieldInfosReader());
            return ::org::apache::lucene::codecs::t_FieldInfosReader::wrap_Object(value);
          }

          static PyObject *t_Lucene42FieldInfosFormat_get__fieldInfosWriter(t_Lucene42FieldInfosFormat *self, void *data)
          {
            ::org::apache::lucene::codecs::FieldInfosWriter value((jobject) NULL);
            OBJ_CALL(value = self->object.getFieldInfosWriter());
            return ::org::apache::lucene::codecs::t_FieldInfosWriter::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/TermVectorsWriter.h"
#include "java/io/Closeable.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/index/FieldInfo.h"
#include "org/apache/lucene/store/DataInput.h"
#include "org/apache/lucene/index/FieldInfos.h"
#include "java/util/Comparator.h"
#include "org/apache/lucene/index/MergeState.h"
#include "java/io/IOException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {

        ::java::lang::Class *TermVectorsWriter::class$ = NULL;
        jmethodID *TermVectorsWriter::mids$ = NULL;
        bool TermVectorsWriter::live$ = false;

        jclass TermVectorsWriter::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/TermVectorsWriter");

            mids$ = new jmethodID[max_mid];
            mids$[mid_abort_54c6a166] = env->getMethodID(cls, "abort", "()V");
            mids$[mid_addPosition_ffd34a92] = env->getMethodID(cls, "addPosition", "(IIILorg/apache/lucene/util/BytesRef;)V");
            mids$[mid_addProx_395d0aa2] = env->getMethodID(cls, "addProx", "(ILorg/apache/lucene/store/DataInput;Lorg/apache/lucene/store/DataInput;)V");
            mids$[mid_close_54c6a166] = env->getMethodID(cls, "close", "()V");
            mids$[mid_finish_48f050c2] = env->getMethodID(cls, "finish", "(Lorg/apache/lucene/index/FieldInfos;I)V");
            mids$[mid_finishDocument_54c6a166] = env->getMethodID(cls, "finishDocument", "()V");
            mids$[mid_finishField_54c6a166] = env->getMethodID(cls, "finishField", "()V");
            mids$[mid_finishTerm_54c6a166] = env->getMethodID(cls, "finishTerm", "()V");
            mids$[mid_getComparator_5a7ff2fc] = env->getMethodID(cls, "getComparator", "()Ljava/util/Comparator;");
            mids$[mid_merge_fd0cfdeb] = env->getMethodID(cls, "merge", "(Lorg/apache/lucene/index/MergeState;)I");
            mids$[mid_startDocument_39c7bd3c] = env->getMethodID(cls, "startDocument", "(I)V");
            mids$[mid_startField_07c4def5] = env->getMethodID(cls, "startField", "(Lorg/apache/lucene/index/FieldInfo;IZZZ)V");
            mids$[mid_startTerm_738fc2ce] = env->getMethodID(cls, "startTerm", "(Lorg/apache/lucene/util/BytesRef;I)V");
            mids$[mid_addAllDocVectors_7f6315b6] = env->getMethodID(cls, "addAllDocVectors", "(Lorg/apache/lucene/index/Fields;Lorg/apache/lucene/index/MergeState;)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        void TermVectorsWriter::abort() const
        {
          env->callVoidMethod(this$, mids$[mid_abort_54c6a166]);
        }

        void TermVectorsWriter::addPosition(jint a0, jint a1, jint a2, const ::org::apache::lucene::util::BytesRef & a3) const
        {
          env->callVoidMethod(this$, mids$[mid_addPosition_ffd34a92], a0, a1, a2, a3.this$);
        }

        void TermVectorsWriter::addProx(jint a0, const ::org::apache::lucene::store::DataInput & a1, const ::org::apache::lucene::store::DataInput & a2) const
        {
          env->callVoidMethod(this$, mids$[mid_addProx_395d0aa2], a0, a1.this$, a2.this$);
        }

        void TermVectorsWriter::close() const
        {
          env->callVoidMethod(this$, mids$[mid_close_54c6a166]);
        }

        void TermVectorsWriter::finish(const ::org::apache::lucene::index::FieldInfos & a0, jint a1) const
        {
          env->callVoidMethod(this$, mids$[mid_finish_48f050c2], a0.this$, a1);
        }

        void TermVectorsWriter::finishDocument() const
        {
          env->callVoidMethod(this$, mids$[mid_finishDocument_54c6a166]);
        }

        void TermVectorsWriter::finishField() const
        {
          env->callVoidMethod(this$, mids$[mid_finishField_54c6a166]);
        }

        void TermVectorsWriter::finishTerm() const
        {
          env->callVoidMethod(this$, mids$[mid_finishTerm_54c6a166]);
        }

        ::java::util::Comparator TermVectorsWriter::getComparator() const
        {
          return ::java::util::Comparator(env->callObjectMethod(this$, mids$[mid_getComparator_5a7ff2fc]));
        }

        jint TermVectorsWriter::merge(const ::org::apache::lucene::index::MergeState & a0) const
        {
          return env->callIntMethod(this$, mids$[mid_merge_fd0cfdeb], a0.this$);
        }

        void TermVectorsWriter::startDocument(jint a0) const
        {
          env->callVoidMethod(this$, mids$[mid_startDocument_39c7bd3c], a0);
        }

        void TermVectorsWriter::startField(const ::org::apache::lucene::index::FieldInfo & a0, jint a1, jboolean a2, jboolean a3, jboolean a4) const
        {
          env->callVoidMethod(this$, mids$[mid_startField_07c4def5], a0.this$, a1, a2, a3, a4);
        }

        void TermVectorsWriter::startTerm(const ::org::apache::lucene::util::BytesRef & a0, jint a1) const
        {
          env->callVoidMethod(this$, mids$[mid_startTerm_738fc2ce], a0.this$, a1);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        static PyObject *t_TermVectorsWriter_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_TermVectorsWriter_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_TermVectorsWriter_abort(t_TermVectorsWriter *self);
        static PyObject *t_TermVectorsWriter_addPosition(t_TermVectorsWriter *self, PyObject *args);
        static PyObject *t_TermVectorsWriter_addProx(t_TermVectorsWriter *self, PyObject *args);
        static PyObject *t_TermVectorsWriter_close(t_TermVectorsWriter *self);
        static PyObject *t_TermVectorsWriter_finish(t_TermVectorsWriter *self, PyObject *args);
        static PyObject *t_TermVectorsWriter_finishDocument(t_TermVectorsWriter *self);
        static PyObject *t_TermVectorsWriter_finishField(t_TermVectorsWriter *self);
        static PyObject *t_TermVectorsWriter_finishTerm(t_TermVectorsWriter *self);
        static PyObject *t_TermVectorsWriter_getComparator(t_TermVectorsWriter *self);
        static PyObject *t_TermVectorsWriter_merge(t_TermVectorsWriter *self, PyObject *arg);
        static PyObject *t_TermVectorsWriter_startDocument(t_TermVectorsWriter *self, PyObject *arg);
        static PyObject *t_TermVectorsWriter_startField(t_TermVectorsWriter *self, PyObject *args);
        static PyObject *t_TermVectorsWriter_startTerm(t_TermVectorsWriter *self, PyObject *args);
        static PyObject *t_TermVectorsWriter_get__comparator(t_TermVectorsWriter *self, void *data);
        static PyGetSetDef t_TermVectorsWriter__fields_[] = {
          DECLARE_GET_FIELD(t_TermVectorsWriter, comparator),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_TermVectorsWriter__methods_[] = {
          DECLARE_METHOD(t_TermVectorsWriter, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_TermVectorsWriter, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_TermVectorsWriter, abort, METH_NOARGS),
          DECLARE_METHOD(t_TermVectorsWriter, addPosition, METH_VARARGS),
          DECLARE_METHOD(t_TermVectorsWriter, addProx, METH_VARARGS),
          DECLARE_METHOD(t_TermVectorsWriter, close, METH_NOARGS),
          DECLARE_METHOD(t_TermVectorsWriter, finish, METH_VARARGS),
          DECLARE_METHOD(t_TermVectorsWriter, finishDocument, METH_NOARGS),
          DECLARE_METHOD(t_TermVectorsWriter, finishField, METH_NOARGS),
          DECLARE_METHOD(t_TermVectorsWriter, finishTerm, METH_NOARGS),
          DECLARE_METHOD(t_TermVectorsWriter, getComparator, METH_NOARGS),
          DECLARE_METHOD(t_TermVectorsWriter, merge, METH_O),
          DECLARE_METHOD(t_TermVectorsWriter, startDocument, METH_O),
          DECLARE_METHOD(t_TermVectorsWriter, startField, METH_VARARGS),
          DECLARE_METHOD(t_TermVectorsWriter, startTerm, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(TermVectorsWriter, t_TermVectorsWriter, ::java::lang::Object, TermVectorsWriter, abstract_init, 0, 0, t_TermVectorsWriter__fields_, 0, 0);

        void t_TermVectorsWriter::install(PyObject *module)
        {
          installType(&PY_TYPE(TermVectorsWriter), module, "TermVectorsWriter", 0);
        }

        void t_TermVectorsWriter::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(TermVectorsWriter).tp_dict, "class_", make_descriptor(TermVectorsWriter::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(TermVectorsWriter).tp_dict, "wrapfn_", make_descriptor(t_TermVectorsWriter::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(TermVectorsWriter).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_TermVectorsWriter_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, TermVectorsWriter::initializeClass, 1)))
            return NULL;
          return t_TermVectorsWriter::wrap_Object(TermVectorsWriter(((t_TermVectorsWriter *) arg)->object.this$));
        }
        static PyObject *t_TermVectorsWriter_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, TermVectorsWriter::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_TermVectorsWriter_abort(t_TermVectorsWriter *self)
        {
          OBJ_CALL(self->object.abort());
          Py_RETURN_NONE;
        }

        static PyObject *t_TermVectorsWriter_addPosition(t_TermVectorsWriter *self, PyObject *args)
        {
          jint a0;
          jint a1;
          jint a2;
          ::org::apache::lucene::util::BytesRef a3((jobject) NULL);

          if (!parseArgs(args, "IIIk", ::org::apache::lucene::util::BytesRef::initializeClass, &a0, &a1, &a2, &a3))
          {
            OBJ_CALL(self->object.addPosition(a0, a1, a2, a3));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "addPosition", args);
          return NULL;
        }

        static PyObject *t_TermVectorsWriter_addProx(t_TermVectorsWriter *self, PyObject *args)
        {
          jint a0;
          ::org::apache::lucene::store::DataInput a1((jobject) NULL);
          ::org::apache::lucene::store::DataInput a2((jobject) NULL);

          if (!parseArgs(args, "Ikk", ::org::apache::lucene::store::DataInput::initializeClass, ::org::apache::lucene::store::DataInput::initializeClass, &a0, &a1, &a2))
          {
            OBJ_CALL(self->object.addProx(a0, a1, a2));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "addProx", args);
          return NULL;
        }

        static PyObject *t_TermVectorsWriter_close(t_TermVectorsWriter *self)
        {
          OBJ_CALL(self->object.close());
          Py_RETURN_NONE;
        }

        static PyObject *t_TermVectorsWriter_finish(t_TermVectorsWriter *self, PyObject *args)
        {
          ::org::apache::lucene::index::FieldInfos a0((jobject) NULL);
          jint a1;

          if (!parseArgs(args, "kI", ::org::apache::lucene::index::FieldInfos::initializeClass, &a0, &a1))
          {
            OBJ_CALL(self->object.finish(a0, a1));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "finish", args);
          return NULL;
        }

        static PyObject *t_TermVectorsWriter_finishDocument(t_TermVectorsWriter *self)
        {
          OBJ_CALL(self->object.finishDocument());
          Py_RETURN_NONE;
        }

        static PyObject *t_TermVectorsWriter_finishField(t_TermVectorsWriter *self)
        {
          OBJ_CALL(self->object.finishField());
          Py_RETURN_NONE;
        }

        static PyObject *t_TermVectorsWriter_finishTerm(t_TermVectorsWriter *self)
        {
          OBJ_CALL(self->object.finishTerm());
          Py_RETURN_NONE;
        }

        static PyObject *t_TermVectorsWriter_getComparator(t_TermVectorsWriter *self)
        {
          ::java::util::Comparator result((jobject) NULL);
          OBJ_CALL(result = self->object.getComparator());
          return ::java::util::t_Comparator::wrap_Object(result, &::org::apache::lucene::util::PY_TYPE(BytesRef));
        }

        static PyObject *t_TermVectorsWriter_merge(t_TermVectorsWriter *self, PyObject *arg)
        {
          ::org::apache::lucene::index::MergeState a0((jobject) NULL);
          jint result;

          if (!parseArg(arg, "k", ::org::apache::lucene::index::MergeState::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.merge(a0));
            return PyInt_FromLong((long) result);
          }

          PyErr_SetArgsError((PyObject *) self, "merge", arg);
          return NULL;
        }

        static PyObject *t_TermVectorsWriter_startDocument(t_TermVectorsWriter *self, PyObject *arg)
        {
          jint a0;

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(self->object.startDocument(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "startDocument", arg);
          return NULL;
        }

        static PyObject *t_TermVectorsWriter_startField(t_TermVectorsWriter *self, PyObject *args)
        {
          ::org::apache::lucene::index::FieldInfo a0((jobject) NULL);
          jint a1;
          jboolean a2;
          jboolean a3;
          jboolean a4;

          if (!parseArgs(args, "kIZZZ", ::org::apache::lucene::index::FieldInfo::initializeClass, &a0, &a1, &a2, &a3, &a4))
          {
            OBJ_CALL(self->object.startField(a0, a1, a2, a3, a4));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "startField", args);
          return NULL;
        }

        static PyObject *t_TermVectorsWriter_startTerm(t_TermVectorsWriter *self, PyObject *args)
        {
          ::org::apache::lucene::util::BytesRef a0((jobject) NULL);
          jint a1;

          if (!parseArgs(args, "kI", ::org::apache::lucene::util::BytesRef::initializeClass, &a0, &a1))
          {
            OBJ_CALL(self->object.startTerm(a0, a1));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "startTerm", args);
          return NULL;
        }

        static PyObject *t_TermVectorsWriter_get__comparator(t_TermVectorsWriter *self, void *data)
        {
          ::java::util::Comparator value((jobject) NULL);
          OBJ_CALL(value = self->object.getComparator());
          return ::java::util::t_Comparator::wrap_Object(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/similarities/Similarity$SimScorer.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "org/apache/lucene/search/Explanation.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace similarities {

          ::java::lang::Class *Similarity$SimScorer::class$ = NULL;
          jmethodID *Similarity$SimScorer::mids$ = NULL;
          bool Similarity$SimScorer::live$ = false;

          jclass Similarity$SimScorer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/similarities/Similarity$SimScorer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_computePayloadFactor_ffd34a82] = env->getMethodID(cls, "computePayloadFactor", "(IIILorg/apache/lucene/util/BytesRef;)F");
              mids$[mid_computeSlopFactor_39c7bd2c] = env->getMethodID(cls, "computeSlopFactor", "(I)F");
              mids$[mid_explain_d1ebfb75] = env->getMethodID(cls, "explain", "(ILorg/apache/lucene/search/Explanation;)Lorg/apache/lucene/search/Explanation;");
              mids$[mid_score_abdf2c41] = env->getMethodID(cls, "score", "(IF)F");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          Similarity$SimScorer::Similarity$SimScorer() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          jfloat Similarity$SimScorer::computePayloadFactor(jint a0, jint a1, jint a2, const ::org::apache::lucene::util::BytesRef & a3) const
          {
            return env->callFloatMethod(this$, mids$[mid_computePayloadFactor_ffd34a82], a0, a1, a2, a3.this$);
          }

          jfloat Similarity$SimScorer::computeSlopFactor(jint a0) const
          {
            return env->callFloatMethod(this$, mids$[mid_computeSlopFactor_39c7bd2c], a0);
          }

          ::org::apache::lucene::search::Explanation Similarity$SimScorer::explain(jint a0, const ::org::apache::lucene::search::Explanation & a1) const
          {
            return ::org::apache::lucene::search::Explanation(env->callObjectMethod(this$, mids$[mid_explain_d1ebfb75], a0, a1.this$));
          }

          jfloat Similarity$SimScorer::score(jint a0, jfloat a1) const
          {
            return env->callFloatMethod(this$, mids$[mid_score_abdf2c41], a0, a1);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace similarities {
          static PyObject *t_Similarity$SimScorer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Similarity$SimScorer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_Similarity$SimScorer_init_(t_Similarity$SimScorer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_Similarity$SimScorer_computePayloadFactor(t_Similarity$SimScorer *self, PyObject *args);
          static PyObject *t_Similarity$SimScorer_computeSlopFactor(t_Similarity$SimScorer *self, PyObject *arg);
          static PyObject *t_Similarity$SimScorer_explain(t_Similarity$SimScorer *self, PyObject *args);
          static PyObject *t_Similarity$SimScorer_score(t_Similarity$SimScorer *self, PyObject *args);

          static PyMethodDef t_Similarity$SimScorer__methods_[] = {
            DECLARE_METHOD(t_Similarity$SimScorer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Similarity$SimScorer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Similarity$SimScorer, computePayloadFactor, METH_VARARGS),
            DECLARE_METHOD(t_Similarity$SimScorer, computeSlopFactor, METH_O),
            DECLARE_METHOD(t_Similarity$SimScorer, explain, METH_VARARGS),
            DECLARE_METHOD(t_Similarity$SimScorer, score, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(Similarity$SimScorer, t_Similarity$SimScorer, ::java::lang::Object, Similarity$SimScorer, t_Similarity$SimScorer_init_, 0, 0, 0, 0, 0);

          void t_Similarity$SimScorer::install(PyObject *module)
          {
            installType(&PY_TYPE(Similarity$SimScorer), module, "Similarity$SimScorer", 0);
          }

          void t_Similarity$SimScorer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(Similarity$SimScorer).tp_dict, "class_", make_descriptor(Similarity$SimScorer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(Similarity$SimScorer).tp_dict, "wrapfn_", make_descriptor(t_Similarity$SimScorer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(Similarity$SimScorer).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_Similarity$SimScorer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, Similarity$SimScorer::initializeClass, 1)))
              return NULL;
            return t_Similarity$SimScorer::wrap_Object(Similarity$SimScorer(((t_Similarity$SimScorer *) arg)->object.this$));
          }
          static PyObject *t_Similarity$SimScorer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, Similarity$SimScorer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_Similarity$SimScorer_init_(t_Similarity$SimScorer *self, PyObject *args, PyObject *kwds)
          {
            Similarity$SimScorer object((jobject) NULL);

            INT_CALL(object = Similarity$SimScorer());
            self->object = object;

            return 0;
          }

          static PyObject *t_Similarity$SimScorer_computePayloadFactor(t_Similarity$SimScorer *self, PyObject *args)
          {
            jint a0;
            jint a1;
            jint a2;
            ::org::apache::lucene::util::BytesRef a3((jobject) NULL);
            jfloat result;

            if (!parseArgs(args, "IIIk", ::org::apache::lucene::util::BytesRef::initializeClass, &a0, &a1, &a2, &a3))
            {
              OBJ_CALL(result = self->object.computePayloadFactor(a0, a1, a2, a3));
              return PyFloat_FromDouble((double) result);
            }

            PyErr_SetArgsError((PyObject *) self, "computePayloadFactor", args);
            return NULL;
          }

          static PyObject *t_Similarity$SimScorer_computeSlopFactor(t_Similarity$SimScorer *self, PyObject *arg)
          {
            jint a0;
            jfloat result;

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(result = self->object.computeSlopFactor(a0));
              return PyFloat_FromDouble((double) result);
            }

            PyErr_SetArgsError((PyObject *) self, "computeSlopFactor", arg);
            return NULL;
          }

          static PyObject *t_Similarity$SimScorer_explain(t_Similarity$SimScorer *self, PyObject *args)
          {
            jint a0;
            ::org::apache::lucene::search::Explanation a1((jobject) NULL);
            ::org::apache::lucene::search::Explanation result((jobject) NULL);

            if (!parseArgs(args, "Ik", ::org::apache::lucene::search::Explanation::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.explain(a0, a1));
              return ::org::apache::lucene::search::t_Explanation::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "explain", args);
            return NULL;
          }

          static PyObject *t_Similarity$SimScorer_score(t_Similarity$SimScorer *self, PyObject *args)
          {
            jint a0;
            jfloat a1;
            jfloat result;

            if (!parseArgs(args, "IF", &a0, &a1))
            {
              OBJ_CALL(result = self->object.score(a0, a1));
              return PyFloat_FromDouble((double) result);
            }

            PyErr_SetArgsError((PyObject *) self, "score", args);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/expressions/js/JavascriptParser$shift_return.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace expressions {
        namespace js {

          ::java::lang::Class *JavascriptParser$shift_return::class$ = NULL;
          jmethodID *JavascriptParser$shift_return::mids$ = NULL;
          bool JavascriptParser$shift_return::live$ = false;

          jclass JavascriptParser$shift_return::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/expressions/js/JavascriptParser$shift_return");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          JavascriptParser$shift_return::JavascriptParser$shift_return() : ::org::antlr::runtime::ParserRuleReturnScope(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace expressions {
        namespace js {
          static PyObject *t_JavascriptParser$shift_return_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_JavascriptParser$shift_return_instance_(PyTypeObject *type, PyObject *arg);
          static int t_JavascriptParser$shift_return_init_(t_JavascriptParser$shift_return *self, PyObject *args, PyObject *kwds);

          static PyMethodDef t_JavascriptParser$shift_return__methods_[] = {
            DECLARE_METHOD(t_JavascriptParser$shift_return, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_JavascriptParser$shift_return, instance_, METH_O | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(JavascriptParser$shift_return, t_JavascriptParser$shift_return, ::org::antlr::runtime::ParserRuleReturnScope, JavascriptParser$shift_return, t_JavascriptParser$shift_return_init_, 0, 0, 0, 0, 0);

          void t_JavascriptParser$shift_return::install(PyObject *module)
          {
            installType(&PY_TYPE(JavascriptParser$shift_return), module, "JavascriptParser$shift_return", 0);
          }

          void t_JavascriptParser$shift_return::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(JavascriptParser$shift_return).tp_dict, "class_", make_descriptor(JavascriptParser$shift_return::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(JavascriptParser$shift_return).tp_dict, "wrapfn_", make_descriptor(t_JavascriptParser$shift_return::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(JavascriptParser$shift_return).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_JavascriptParser$shift_return_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, JavascriptParser$shift_return::initializeClass, 1)))
              return NULL;
            return t_JavascriptParser$shift_return::wrap_Object(JavascriptParser$shift_return(((t_JavascriptParser$shift_return *) arg)->object.this$));
          }
          static PyObject *t_JavascriptParser$shift_return_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, JavascriptParser$shift_return::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_JavascriptParser$shift_return_init_(t_JavascriptParser$shift_return *self, PyObject *args, PyObject *kwds)
          {
            JavascriptParser$shift_return object((jobject) NULL);

            INT_CALL(object = JavascriptParser$shift_return());
            self->object = object;

            return 0;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/IndexReaderContext.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "java/lang/UnsupportedOperationException.h"
#include "java/util/List.h"
#include "org/apache/lucene/index/CompositeReaderContext.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *IndexReaderContext::class$ = NULL;
        jmethodID *IndexReaderContext::mids$ = NULL;
        jfieldID *IndexReaderContext::fids$ = NULL;
        bool IndexReaderContext::live$ = false;

        jclass IndexReaderContext::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/IndexReaderContext");

            mids$ = new jmethodID[max_mid];
            mids$[mid_children_87851566] = env->getMethodID(cls, "children", "()Ljava/util/List;");
            mids$[mid_leaves_87851566] = env->getMethodID(cls, "leaves", "()Ljava/util/List;");
            mids$[mid_reader_94bbd010] = env->getMethodID(cls, "reader", "()Lorg/apache/lucene/index/IndexReader;");

            fids$ = new jfieldID[max_fid];
            fids$[fid_docBaseInParent] = env->getFieldID(cls, "docBaseInParent", "I");
            fids$[fid_isTopLevel] = env->getFieldID(cls, "isTopLevel", "Z");
            fids$[fid_ordInParent] = env->getFieldID(cls, "ordInParent", "I");
            fids$[fid_parent] = env->getFieldID(cls, "parent", "Lorg/apache/lucene/index/CompositeReaderContext;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        ::java::util::List IndexReaderContext::children() const
        {
          return ::java::util::List(env->callObjectMethod(this$, mids$[mid_children_87851566]));
        }

        ::java::util::List IndexReaderContext::leaves() const
        {
          return ::java::util::List(env->callObjectMethod(this$, mids$[mid_leaves_87851566]));
        }

        ::org::apache::lucene::index::IndexReader IndexReaderContext::reader() const
        {
          return ::org::apache::lucene::index::IndexReader(env->callObjectMethod(this$, mids$[mid_reader_94bbd010]));
        }

        jint IndexReaderContext::_get_docBaseInParent() const
        {
          return env->getIntField(this$, fids$[fid_docBaseInParent]);
        }

        jboolean IndexReaderContext::_get_isTopLevel() const
        {
          return env->getBooleanField(this$, fids$[fid_isTopLevel]);
        }

        jint IndexReaderContext::_get_ordInParent() const
        {
          return env->getIntField(this$, fids$[fid_ordInParent]);
        }

        ::org::apache::lucene::index::CompositeReaderContext IndexReaderContext::_get_parent() const
        {
          return ::org::apache::lucene::index::CompositeReaderContext(env->getObjectField(this$, fids$[fid_parent]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_IndexReaderContext_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_IndexReaderContext_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_IndexReaderContext_children(t_IndexReaderContext *self);
        static PyObject *t_IndexReaderContext_leaves(t_IndexReaderContext *self);
        static PyObject *t_IndexReaderContext_reader(t_IndexReaderContext *self);
        static PyObject *t_IndexReaderContext_get__docBaseInParent(t_IndexReaderContext *self, void *data);
        static PyObject *t_IndexReaderContext_get__isTopLevel(t_IndexReaderContext *self, void *data);
        static PyObject *t_IndexReaderContext_get__ordInParent(t_IndexReaderContext *self, void *data);
        static PyObject *t_IndexReaderContext_get__parent(t_IndexReaderContext *self, void *data);

        static PyGetSetDef t_IndexReaderContext__fields_[] = {
          DECLARE_GET_FIELD(t_IndexReaderContext, docBaseInParent),
          DECLARE_GET_FIELD(t_IndexReaderContext, isTopLevel),
          DECLARE_GET_FIELD(t_IndexReaderContext, ordInParent),
          DECLARE_GET_FIELD(t_IndexReaderContext, parent),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_IndexReaderContext__methods_[] = {
          DECLARE_METHOD(t_IndexReaderContext, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_IndexReaderContext, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_IndexReaderContext, children, METH_NOARGS),
          DECLARE_METHOD(t_IndexReaderContext, leaves, METH_NOARGS),
          DECLARE_METHOD(t_IndexReaderContext, reader, METH_NOARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(IndexReaderContext, t_IndexReaderContext, ::java::lang::Object, IndexReaderContext, abstract_init, 0, 0, t_IndexReaderContext__fields_, 0, 0);

        void t_IndexReaderContext::install(PyObject *module)
        {
          installType(&PY_TYPE(IndexReaderContext), module, "IndexReaderContext", 0);
        }

        void t_IndexReaderContext::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(IndexReaderContext).tp_dict, "class_", make_descriptor(IndexReaderContext::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(IndexReaderContext).tp_dict, "wrapfn_", make_descriptor(t_IndexReaderContext::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(IndexReaderContext).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_IndexReaderContext_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, IndexReaderContext::initializeClass, 1)))
            return NULL;
          return t_IndexReaderContext::wrap_Object(IndexReaderContext(((t_IndexReaderContext *) arg)->object.this$));
        }
        static PyObject *t_IndexReaderContext_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, IndexReaderContext::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_IndexReaderContext_children(t_IndexReaderContext *self)
        {
          ::java::util::List result((jobject) NULL);
          OBJ_CALL(result = self->object.children());
          return ::java::util::t_List::wrap_Object(result, &::org::apache::lucene::index::PY_TYPE(IndexReaderContext));
        }

        static PyObject *t_IndexReaderContext_leaves(t_IndexReaderContext *self)
        {
          ::java::util::List result((jobject) NULL);
          OBJ_CALL(result = self->object.leaves());
          return ::java::util::t_List::wrap_Object(result, &::org::apache::lucene::index::PY_TYPE(AtomicReaderContext));
        }

        static PyObject *t_IndexReaderContext_reader(t_IndexReaderContext *self)
        {
          ::org::apache::lucene::index::IndexReader result((jobject) NULL);
          OBJ_CALL(result = self->object.reader());
          return ::org::apache::lucene::index::t_IndexReader::wrap_Object(result);
        }

        static PyObject *t_IndexReaderContext_get__docBaseInParent(t_IndexReaderContext *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object._get_docBaseInParent());
          return PyInt_FromLong((long) value);
        }

        static PyObject *t_IndexReaderContext_get__isTopLevel(t_IndexReaderContext *self, void *data)
        {
          jboolean value;
          OBJ_CALL(value = self->object._get_isTopLevel());
          Py_RETURN_BOOL(value);
        }

        static PyObject *t_IndexReaderContext_get__ordInParent(t_IndexReaderContext *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object._get_ordInParent());
          return PyInt_FromLong((long) value);
        }

        static PyObject *t_IndexReaderContext_get__parent(t_IndexReaderContext *self, void *data)
        {
          ::org::apache::lucene::index::CompositeReaderContext value((jobject) NULL);
          OBJ_CALL(value = self->object._get_parent());
          return ::org::apache::lucene::index::t_CompositeReaderContext::wrap_Object(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/CheckIndex$Status$SegmentInfoStatus.h"
#include "org/apache/lucene/index/CheckIndex$Status$StoredFieldStatus.h"
#include "java/lang/Class.h"
#include "java/util/Map.h"
#include "org/apache/lucene/index/CheckIndex$Status$TermVectorStatus.h"
#include "org/apache/lucene/index/CheckIndex$Status$FieldNormStatus.h"
#include "java/lang/String.h"
#include "org/apache/lucene/codecs/Codec.h"
#include "org/apache/lucene/index/CheckIndex$Status$TermIndexStatus.h"
#include "org/apache/lucene/index/CheckIndex$Status$DocValuesStatus.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *CheckIndex$Status$SegmentInfoStatus::class$ = NULL;
        jmethodID *CheckIndex$Status$SegmentInfoStatus::mids$ = NULL;
        jfieldID *CheckIndex$Status$SegmentInfoStatus::fids$ = NULL;
        bool CheckIndex$Status$SegmentInfoStatus::live$ = false;

        jclass CheckIndex$Status$SegmentInfoStatus::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/CheckIndex$Status$SegmentInfoStatus");

            fids$ = new jfieldID[max_fid];
            fids$[fid_codec] = env->getFieldID(cls, "codec", "Lorg/apache/lucene/codecs/Codec;");
            fids$[fid_compound] = env->getFieldID(cls, "compound", "Z");
            fids$[fid_deletionsGen] = env->getFieldID(cls, "deletionsGen", "J");
            fids$[fid_diagnostics] = env->getFieldID(cls, "diagnostics", "Ljava/util/Map;");
            fids$[fid_docCount] = env->getFieldID(cls, "docCount", "I");
            fids$[fid_docStoreCompoundFile] = env->getFieldID(cls, "docStoreCompoundFile", "Z");
            fids$[fid_docStoreOffset] = env->getFieldID(cls, "docStoreOffset", "I");
            fids$[fid_docStoreSegment] = env->getFieldID(cls, "docStoreSegment", "Ljava/lang/String;");
            fids$[fid_docValuesStatus] = env->getFieldID(cls, "docValuesStatus", "Lorg/apache/lucene/index/CheckIndex$Status$DocValuesStatus;");
            fids$[fid_fieldNormStatus] = env->getFieldID(cls, "fieldNormStatus", "Lorg/apache/lucene/index/CheckIndex$Status$FieldNormStatus;");
            fids$[fid_hasDeletions] = env->getFieldID(cls, "hasDeletions", "Z");
            fids$[fid_name] = env->getFieldID(cls, "name", "Ljava/lang/String;");
            fids$[fid_numDeleted] = env->getFieldID(cls, "numDeleted", "I");
            fids$[fid_numFiles] = env->getFieldID(cls, "numFiles", "I");
            fids$[fid_openReaderPassed] = env->getFieldID(cls, "openReaderPassed", "Z");
            fids$[fid_sizeMB] = env->getFieldID(cls, "sizeMB", "D");
            fids$[fid_storedFieldStatus] = env->getFieldID(cls, "storedFieldStatus", "Lorg/apache/lucene/index/CheckIndex$Status$StoredFieldStatus;");
            fids$[fid_termIndexStatus] = env->getFieldID(cls, "termIndexStatus", "Lorg/apache/lucene/index/CheckIndex$Status$TermIndexStatus;");
            fids$[fid_termVectorStatus] = env->getFieldID(cls, "termVectorStatus", "Lorg/apache/lucene/index/CheckIndex$Status$TermVectorStatus;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        ::org::apache::lucene::codecs::Codec CheckIndex$Status$SegmentInfoStatus::_get_codec() const
        {
          return ::org::apache::lucene::codecs::Codec(env->getObjectField(this$, fids$[fid_codec]));
        }

        void CheckIndex$Status$SegmentInfoStatus::_set_codec(const ::org::apache::lucene::codecs::Codec & a0) const
        {
          env->setObjectField(this$, fids$[fid_codec], a0.this$);
        }

        jboolean CheckIndex$Status$SegmentInfoStatus::_get_compound() const
        {
          return env->getBooleanField(this$, fids$[fid_compound]);
        }

        void CheckIndex$Status$SegmentInfoStatus::_set_compound(jboolean a0) const
        {
          env->setBooleanField(this$, fids$[fid_compound], a0);
        }

        jlong CheckIndex$Status$SegmentInfoStatus::_get_deletionsGen() const
        {
          return env->getLongField(this$, fids$[fid_deletionsGen]);
        }

        void CheckIndex$Status$SegmentInfoStatus::_set_deletionsGen(jlong a0) const
        {
          env->setLongField(this$, fids$[fid_deletionsGen], a0);
        }

        ::java::util::Map CheckIndex$Status$SegmentInfoStatus::_get_diagnostics() const
        {
          return ::java::util::Map(env->getObjectField(this$, fids$[fid_diagnostics]));
        }

        void CheckIndex$Status$SegmentInfoStatus::_set_diagnostics(const ::java::util::Map & a0) const
        {
          env->setObjectField(this$, fids$[fid_diagnostics], a0.this$);
        }

        jint CheckIndex$Status$SegmentInfoStatus::_get_docCount() const
        {
          return env->getIntField(this$, fids$[fid_docCount]);
        }

        void CheckIndex$Status$SegmentInfoStatus::_set_docCount(jint a0) const
        {
          env->setIntField(this$, fids$[fid_docCount], a0);
        }

        jboolean CheckIndex$Status$SegmentInfoStatus::_get_docStoreCompoundFile() const
        {
          return env->getBooleanField(this$, fids$[fid_docStoreCompoundFile]);
        }

        void CheckIndex$Status$SegmentInfoStatus::_set_docStoreCompoundFile(jboolean a0) const
        {
          env->setBooleanField(this$, fids$[fid_docStoreCompoundFile], a0);
        }

        jint CheckIndex$Status$SegmentInfoStatus::_get_docStoreOffset() const
        {
          return env->getIntField(this$, fids$[fid_docStoreOffset]);
        }

        void CheckIndex$Status$SegmentInfoStatus::_set_docStoreOffset(jint a0) const
        {
          env->setIntField(this$, fids$[fid_docStoreOffset], a0);
        }

        ::java::lang::String CheckIndex$Status$SegmentInfoStatus::_get_docStoreSegment() const
        {
          return ::java::lang::String(env->getObjectField(this$, fids$[fid_docStoreSegment]));
        }

        void CheckIndex$Status$SegmentInfoStatus::_set_docStoreSegment(const ::java::lang::String & a0) const
        {
          env->setObjectField(this$, fids$[fid_docStoreSegment], a0.this$);
        }

        ::org::apache::lucene::index::CheckIndex$Status$DocValuesStatus CheckIndex$Status$SegmentInfoStatus::_get_docValuesStatus() const
        {
          return ::org::apache::lucene::index::CheckIndex$Status$DocValuesStatus(env->getObjectField(this$, fids$[fid_docValuesStatus]));
        }

        void CheckIndex$Status$SegmentInfoStatus::_set_docValuesStatus(const ::org::apache::lucene::index::CheckIndex$Status$DocValuesStatus & a0) const
        {
          env->setObjectField(this$, fids$[fid_docValuesStatus], a0.this$);
        }

        ::org::apache::lucene::index::CheckIndex$Status$FieldNormStatus CheckIndex$Status$SegmentInfoStatus::_get_fieldNormStatus() const
        {
          return ::org::apache::lucene::index::CheckIndex$Status$FieldNormStatus(env->getObjectField(this$, fids$[fid_fieldNormStatus]));
        }

        void CheckIndex$Status$SegmentInfoStatus::_set_fieldNormStatus(const ::org::apache::lucene::index::CheckIndex$Status$FieldNormStatus & a0) const
        {
          env->setObjectField(this$, fids$[fid_fieldNormStatus], a0.this$);
        }

        jboolean CheckIndex$Status$SegmentInfoStatus::_get_hasDeletions() const
        {
          return env->getBooleanField(this$, fids$[fid_hasDeletions]);
        }

        void CheckIndex$Status$SegmentInfoStatus::_set_hasDeletions(jboolean a0) const
        {
          env->setBooleanField(this$, fids$[fid_hasDeletions], a0);
        }

        ::java::lang::String CheckIndex$Status$SegmentInfoStatus::_get_name() const
        {
          return ::java::lang::String(env->getObjectField(this$, fids$[fid_name]));
        }

        void CheckIndex$Status$SegmentInfoStatus::_set_name(const ::java::lang::String & a0) const
        {
          env->setObjectField(this$, fids$[fid_name], a0.this$);
        }

        jint CheckIndex$Status$SegmentInfoStatus::_get_numDeleted() const
        {
          return env->getIntField(this$, fids$[fid_numDeleted]);
        }

        void CheckIndex$Status$SegmentInfoStatus::_set_numDeleted(jint a0) const
        {
          env->setIntField(this$, fids$[fid_numDeleted], a0);
        }

        jint CheckIndex$Status$SegmentInfoStatus::_get_numFiles() const
        {
          return env->getIntField(this$, fids$[fid_numFiles]);
        }

        void CheckIndex$Status$SegmentInfoStatus::_set_numFiles(jint a0) const
        {
          env->setIntField(this$, fids$[fid_numFiles], a0);
        }

        jboolean CheckIndex$Status$SegmentInfoStatus::_get_openReaderPassed() const
        {
          return env->getBooleanField(this$, fids$[fid_openReaderPassed]);
        }

        void CheckIndex$Status$SegmentInfoStatus::_set_openReaderPassed(jboolean a0) const
        {
          env->setBooleanField(this$, fids$[fid_openReaderPassed], a0);
        }

        jdouble CheckIndex$Status$SegmentInfoStatus::_get_sizeMB() const
        {
          return env->getDoubleField(this$, fids$[fid_sizeMB]);
        }

        void CheckIndex$Status$SegmentInfoStatus::_set_sizeMB(jdouble a0) const
        {
          env->setDoubleField(this$, fids$[fid_sizeMB], a0);
        }

        ::org::apache::lucene::index::CheckIndex$Status$StoredFieldStatus CheckIndex$Status$SegmentInfoStatus::_get_storedFieldStatus() const
        {
          return ::org::apache::lucene::index::CheckIndex$Status$StoredFieldStatus(env->getObjectField(this$, fids$[fid_storedFieldStatus]));
        }

        void CheckIndex$Status$SegmentInfoStatus::_set_storedFieldStatus(const ::org::apache::lucene::index::CheckIndex$Status$StoredFieldStatus & a0) const
        {
          env->setObjectField(this$, fids$[fid_storedFieldStatus], a0.this$);
        }

        ::org::apache::lucene::index::CheckIndex$Status$TermIndexStatus CheckIndex$Status$SegmentInfoStatus::_get_termIndexStatus() const
        {
          return ::org::apache::lucene::index::CheckIndex$Status$TermIndexStatus(env->getObjectField(this$, fids$[fid_termIndexStatus]));
        }

        void CheckIndex$Status$SegmentInfoStatus::_set_termIndexStatus(const ::org::apache::lucene::index::CheckIndex$Status$TermIndexStatus & a0) const
        {
          env->setObjectField(this$, fids$[fid_termIndexStatus], a0.this$);
        }

        ::org::apache::lucene::index::CheckIndex$Status$TermVectorStatus CheckIndex$Status$SegmentInfoStatus::_get_termVectorStatus() const
        {
          return ::org::apache::lucene::index::CheckIndex$Status$TermVectorStatus(env->getObjectField(this$, fids$[fid_termVectorStatus]));
        }

        void CheckIndex$Status$SegmentInfoStatus::_set_termVectorStatus(const ::org::apache::lucene::index::CheckIndex$Status$TermVectorStatus & a0) const
        {
          env->setObjectField(this$, fids$[fid_termVectorStatus], a0.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_CheckIndex$Status$SegmentInfoStatus_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_CheckIndex$Status$SegmentInfoStatus_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_CheckIndex$Status$SegmentInfoStatus_get__codec(t_CheckIndex$Status$SegmentInfoStatus *self, void *data);
        static int t_CheckIndex$Status$SegmentInfoStatus_set__codec(t_CheckIndex$Status$SegmentInfoStatus *self, PyObject *arg, void *data);
        static PyObject *t_CheckIndex$Status$SegmentInfoStatus_get__compound(t_CheckIndex$Status$SegmentInfoStatus *self, void *data);
        static int t_CheckIndex$Status$SegmentInfoStatus_set__compound(t_CheckIndex$Status$SegmentInfoStatus *self, PyObject *arg, void *data);
        static PyObject *t_CheckIndex$Status$SegmentInfoStatus_get__deletionsGen(t_CheckIndex$Status$SegmentInfoStatus *self, void *data);
        static int t_CheckIndex$Status$SegmentInfoStatus_set__deletionsGen(t_CheckIndex$Status$SegmentInfoStatus *self, PyObject *arg, void *data);
        static PyObject *t_CheckIndex$Status$SegmentInfoStatus_get__diagnostics(t_CheckIndex$Status$SegmentInfoStatus *self, void *data);
        static int t_CheckIndex$Status$SegmentInfoStatus_set__diagnostics(t_CheckIndex$Status$SegmentInfoStatus *self, PyObject *arg, void *data);
        static PyObject *t_CheckIndex$Status$SegmentInfoStatus_get__docCount(t_CheckIndex$Status$SegmentInfoStatus *self, void *data);
        static int t_CheckIndex$Status$SegmentInfoStatus_set__docCount(t_CheckIndex$Status$SegmentInfoStatus *self, PyObject *arg, void *data);
        static PyObject *t_CheckIndex$Status$SegmentInfoStatus_get__docStoreCompoundFile(t_CheckIndex$Status$SegmentInfoStatus *self, void *data);
        static int t_CheckIndex$Status$SegmentInfoStatus_set__docStoreCompoundFile(t_CheckIndex$Status$SegmentInfoStatus *self, PyObject *arg, void *data);
        static PyObject *t_CheckIndex$Status$SegmentInfoStatus_get__docStoreOffset(t_CheckIndex$Status$SegmentInfoStatus *self, void *data);
        static int t_CheckIndex$Status$SegmentInfoStatus_set__docStoreOffset(t_CheckIndex$Status$SegmentInfoStatus *self, PyObject *arg, void *data);
        static PyObject *t_CheckIndex$Status$SegmentInfoStatus_get__docStoreSegment(t_CheckIndex$Status$SegmentInfoStatus *self, void *data);
        static int t_CheckIndex$Status$SegmentInfoStatus_set__docStoreSegment(t_CheckIndex$Status$SegmentInfoStatus *self, PyObject *arg, void *data);
        static PyObject *t_CheckIndex$Status$SegmentInfoStatus_get__docValuesStatus(t_CheckIndex$Status$SegmentInfoStatus *self, void *data);
        static int t_CheckIndex$Status$SegmentInfoStatus_set__docValuesStatus(t_CheckIndex$Status$SegmentInfoStatus *self, PyObject *arg, void *data);
        static PyObject *t_CheckIndex$Status$SegmentInfoStatus_get__fieldNormStatus(t_CheckIndex$Status$SegmentInfoStatus *self, void *data);
        static int t_CheckIndex$Status$SegmentInfoStatus_set__fieldNormStatus(t_CheckIndex$Status$SegmentInfoStatus *self, PyObject *arg, void *data);
        static PyObject *t_CheckIndex$Status$SegmentInfoStatus_get__hasDeletions(t_CheckIndex$Status$SegmentInfoStatus *self, void *data);
        static int t_CheckIndex$Status$SegmentInfoStatus_set__hasDeletions(t_CheckIndex$Status$SegmentInfoStatus *self, PyObject *arg, void *data);
        static PyObject *t_CheckIndex$Status$SegmentInfoStatus_get__name(t_CheckIndex$Status$SegmentInfoStatus *self, void *data);
        static int t_CheckIndex$Status$SegmentInfoStatus_set__name(t_CheckIndex$Status$SegmentInfoStatus *self, PyObject *arg, void *data);
        static PyObject *t_CheckIndex$Status$SegmentInfoStatus_get__numDeleted(t_CheckIndex$Status$SegmentInfoStatus *self, void *data);
        static int t_CheckIndex$Status$SegmentInfoStatus_set__numDeleted(t_CheckIndex$Status$SegmentInfoStatus *self, PyObject *arg, void *data);
        static PyObject *t_CheckIndex$Status$SegmentInfoStatus_get__numFiles(t_CheckIndex$Status$SegmentInfoStatus *self, void *data);
        static int t_CheckIndex$Status$SegmentInfoStatus_set__numFiles(t_CheckIndex$Status$SegmentInfoStatus *self, PyObject *arg, void *data);
        static PyObject *t_CheckIndex$Status$SegmentInfoStatus_get__openReaderPassed(t_CheckIndex$Status$SegmentInfoStatus *self, void *data);
        static int t_CheckIndex$Status$SegmentInfoStatus_set__openReaderPassed(t_CheckIndex$Status$SegmentInfoStatus *self, PyObject *arg, void *data);
        static PyObject *t_CheckIndex$Status$SegmentInfoStatus_get__sizeMB(t_CheckIndex$Status$SegmentInfoStatus *self, void *data);
        static int t_CheckIndex$Status$SegmentInfoStatus_set__sizeMB(t_CheckIndex$Status$SegmentInfoStatus *self, PyObject *arg, void *data);
        static PyObject *t_CheckIndex$Status$SegmentInfoStatus_get__storedFieldStatus(t_CheckIndex$Status$SegmentInfoStatus *self, void *data);
        static int t_CheckIndex$Status$SegmentInfoStatus_set__storedFieldStatus(t_CheckIndex$Status$SegmentInfoStatus *self, PyObject *arg, void *data);
        static PyObject *t_CheckIndex$Status$SegmentInfoStatus_get__termIndexStatus(t_CheckIndex$Status$SegmentInfoStatus *self, void *data);
        static int t_CheckIndex$Status$SegmentInfoStatus_set__termIndexStatus(t_CheckIndex$Status$SegmentInfoStatus *self, PyObject *arg, void *data);
        static PyObject *t_CheckIndex$Status$SegmentInfoStatus_get__termVectorStatus(t_CheckIndex$Status$SegmentInfoStatus *self, void *data);
        static int t_CheckIndex$Status$SegmentInfoStatus_set__termVectorStatus(t_CheckIndex$Status$SegmentInfoStatus *self, PyObject *arg, void *data);

        static PyGetSetDef t_CheckIndex$Status$SegmentInfoStatus__fields_[] = {
          DECLARE_GETSET_FIELD(t_CheckIndex$Status$SegmentInfoStatus, codec),
          DECLARE_GETSET_FIELD(t_CheckIndex$Status$SegmentInfoStatus, compound),
          DECLARE_GETSET_FIELD(t_CheckIndex$Status$SegmentInfoStatus, deletionsGen),
          DECLARE_GETSET_FIELD(t_CheckIndex$Status$SegmentInfoStatus, diagnostics),
          DECLARE_GETSET_FIELD(t_CheckIndex$Status$SegmentInfoStatus, docCount),
          DECLARE_GETSET_FIELD(t_CheckIndex$Status$SegmentInfoStatus, docStoreCompoundFile),
          DECLARE_GETSET_FIELD(t_CheckIndex$Status$SegmentInfoStatus, docStoreOffset),
          DECLARE_GETSET_FIELD(t_CheckIndex$Status$SegmentInfoStatus, docStoreSegment),
          DECLARE_GETSET_FIELD(t_CheckIndex$Status$SegmentInfoStatus, docValuesStatus),
          DECLARE_GETSET_FIELD(t_CheckIndex$Status$SegmentInfoStatus, fieldNormStatus),
          DECLARE_GETSET_FIELD(t_CheckIndex$Status$SegmentInfoStatus, hasDeletions),
          DECLARE_GETSET_FIELD(t_CheckIndex$Status$SegmentInfoStatus, name),
          DECLARE_GETSET_FIELD(t_CheckIndex$Status$SegmentInfoStatus, numDeleted),
          DECLARE_GETSET_FIELD(t_CheckIndex$Status$SegmentInfoStatus, numFiles),
          DECLARE_GETSET_FIELD(t_CheckIndex$Status$SegmentInfoStatus, openReaderPassed),
          DECLARE_GETSET_FIELD(t_CheckIndex$Status$SegmentInfoStatus, sizeMB),
          DECLARE_GETSET_FIELD(t_CheckIndex$Status$SegmentInfoStatus, storedFieldStatus),
          DECLARE_GETSET_FIELD(t_CheckIndex$Status$SegmentInfoStatus, termIndexStatus),
          DECLARE_GETSET_FIELD(t_CheckIndex$Status$SegmentInfoStatus, termVectorStatus),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_CheckIndex$Status$SegmentInfoStatus__methods_[] = {
          DECLARE_METHOD(t_CheckIndex$Status$SegmentInfoStatus, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_CheckIndex$Status$SegmentInfoStatus, instance_, METH_O | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(CheckIndex$Status$SegmentInfoStatus, t_CheckIndex$Status$SegmentInfoStatus, ::java::lang::Object, CheckIndex$Status$SegmentInfoStatus, abstract_init, 0, 0, t_CheckIndex$Status$SegmentInfoStatus__fields_, 0, 0);

        void t_CheckIndex$Status$SegmentInfoStatus::install(PyObject *module)
        {
          installType(&PY_TYPE(CheckIndex$Status$SegmentInfoStatus), module, "CheckIndex$Status$SegmentInfoStatus", 0);
        }

        void t_CheckIndex$Status$SegmentInfoStatus::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(CheckIndex$Status$SegmentInfoStatus).tp_dict, "class_", make_descriptor(CheckIndex$Status$SegmentInfoStatus::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(CheckIndex$Status$SegmentInfoStatus).tp_dict, "wrapfn_", make_descriptor(t_CheckIndex$Status$SegmentInfoStatus::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(CheckIndex$Status$SegmentInfoStatus).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_CheckIndex$Status$SegmentInfoStatus_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, CheckIndex$Status$SegmentInfoStatus::initializeClass, 1)))
            return NULL;
          return t_CheckIndex$Status$SegmentInfoStatus::wrap_Object(CheckIndex$Status$SegmentInfoStatus(((t_CheckIndex$Status$SegmentInfoStatus *) arg)->object.this$));
        }
        static PyObject *t_CheckIndex$Status$SegmentInfoStatus_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, CheckIndex$Status$SegmentInfoStatus::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_CheckIndex$Status$SegmentInfoStatus_get__codec(t_CheckIndex$Status$SegmentInfoStatus *self, void *data)
        {
          ::org::apache::lucene::codecs::Codec value((jobject) NULL);
          OBJ_CALL(value = self->object._get_codec());
          return ::org::apache::lucene::codecs::t_Codec::wrap_Object(value);
        }
        static int t_CheckIndex$Status$SegmentInfoStatus_set__codec(t_CheckIndex$Status$SegmentInfoStatus *self, PyObject *arg, void *data)
        {
          ::org::apache::lucene::codecs::Codec value((jobject) NULL);
          if (!parseArg(arg, "k", ::org::apache::lucene::codecs::Codec::initializeClass, &value))
          {
            INT_CALL(self->object._set_codec(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "codec", arg);
          return -1;
        }

        static PyObject *t_CheckIndex$Status$SegmentInfoStatus_get__compound(t_CheckIndex$Status$SegmentInfoStatus *self, void *data)
        {
          jboolean value;
          OBJ_CALL(value = self->object._get_compound());
          Py_RETURN_BOOL(value);
        }
        static int t_CheckIndex$Status$SegmentInfoStatus_set__compound(t_CheckIndex$Status$SegmentInfoStatus *self, PyObject *arg, void *data)
        {
          jboolean value;
          if (!parseArg(arg, "Z", &value))
          {
            INT_CALL(self->object._set_compound(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "compound", arg);
          return -1;
        }

        static PyObject *t_CheckIndex$Status$SegmentInfoStatus_get__deletionsGen(t_CheckIndex$Status$SegmentInfoStatus *self, void *data)
        {
          jlong value;
          OBJ_CALL(value = self->object._get_deletionsGen());
          return PyLong_FromLongLong((PY_LONG_LONG) value);
        }
        static int t_CheckIndex$Status$SegmentInfoStatus_set__deletionsGen(t_CheckIndex$Status$SegmentInfoStatus *self, PyObject *arg, void *data)
        {
          jlong value;
          if (!parseArg(arg, "J", &value))
          {
            INT_CALL(self->object._set_deletionsGen(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "deletionsGen", arg);
          return -1;
        }

        static PyObject *t_CheckIndex$Status$SegmentInfoStatus_get__diagnostics(t_CheckIndex$Status$SegmentInfoStatus *self, void *data)
        {
          ::java::util::Map value((jobject) NULL);
          OBJ_CALL(value = self->object._get_diagnostics());
          return ::java::util::t_Map::wrap_Object(value);
        }
        static int t_CheckIndex$Status$SegmentInfoStatus_set__diagnostics(t_CheckIndex$Status$SegmentInfoStatus *self, PyObject *arg, void *data)
        {
          ::java::util::Map value((jobject) NULL);
          if (!parseArg(arg, "k", ::java::util::Map::initializeClass, &value))
          {
            INT_CALL(self->object._set_diagnostics(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "diagnostics", arg);
          return -1;
        }

        static PyObject *t_CheckIndex$Status$SegmentInfoStatus_get__docCount(t_CheckIndex$Status$SegmentInfoStatus *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object._get_docCount());
          return PyInt_FromLong((long) value);
        }
        static int t_CheckIndex$Status$SegmentInfoStatus_set__docCount(t_CheckIndex$Status$SegmentInfoStatus *self, PyObject *arg, void *data)
        {
          jint value;
          if (!parseArg(arg, "I", &value))
          {
            INT_CALL(self->object._set_docCount(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "docCount", arg);
          return -1;
        }

        static PyObject *t_CheckIndex$Status$SegmentInfoStatus_get__docStoreCompoundFile(t_CheckIndex$Status$SegmentInfoStatus *self, void *data)
        {
          jboolean value;
          OBJ_CALL(value = self->object._get_docStoreCompoundFile());
          Py_RETURN_BOOL(value);
        }
        static int t_CheckIndex$Status$SegmentInfoStatus_set__docStoreCompoundFile(t_CheckIndex$Status$SegmentInfoStatus *self, PyObject *arg, void *data)
        {
          jboolean value;
          if (!parseArg(arg, "Z", &value))
          {
            INT_CALL(self->object._set_docStoreCompoundFile(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "docStoreCompoundFile", arg);
          return -1;
        }

        static PyObject *t_CheckIndex$Status$SegmentInfoStatus_get__docStoreOffset(t_CheckIndex$Status$SegmentInfoStatus *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object._get_docStoreOffset());
          return PyInt_FromLong((long) value);
        }
        static int t_CheckIndex$Status$SegmentInfoStatus_set__docStoreOffset(t_CheckIndex$Status$SegmentInfoStatus *self, PyObject *arg, void *data)
        {
          jint value;
          if (!parseArg(arg, "I", &value))
          {
            INT_CALL(self->object._set_docStoreOffset(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "docStoreOffset", arg);
          return -1;
        }

        static PyObject *t_CheckIndex$Status$SegmentInfoStatus_get__docStoreSegment(t_CheckIndex$Status$SegmentInfoStatus *self, void *data)
        {
          ::java::lang::String value((jobject) NULL);
          OBJ_CALL(value = self->object._get_docStoreSegment());
          return j2p(value);
        }
        static int t_CheckIndex$Status$SegmentInfoStatus_set__docStoreSegment(t_CheckIndex$Status$SegmentInfoStatus *self, PyObject *arg, void *data)
        {
          ::java::lang::String value((jobject) NULL);
          if (!parseArg(arg, "s", &value))
          {
            INT_CALL(self->object._set_docStoreSegment(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "docStoreSegment", arg);
          return -1;
        }

        static PyObject *t_CheckIndex$Status$SegmentInfoStatus_get__docValuesStatus(t_CheckIndex$Status$SegmentInfoStatus *self, void *data)
        {
          ::org::apache::lucene::index::CheckIndex$Status$DocValuesStatus value((jobject) NULL);
          OBJ_CALL(value = self->object._get_docValuesStatus());
          return ::org::apache::lucene::index::t_CheckIndex$Status$DocValuesStatus::wrap_Object(value);
        }
        static int t_CheckIndex$Status$SegmentInfoStatus_set__docValuesStatus(t_CheckIndex$Status$SegmentInfoStatus *self, PyObject *arg, void *data)
        {
          ::org::apache::lucene::index::CheckIndex$Status$DocValuesStatus value((jobject) NULL);
          if (!parseArg(arg, "k", ::org::apache::lucene::index::CheckIndex$Status$DocValuesStatus::initializeClass, &value))
          {
            INT_CALL(self->object._set_docValuesStatus(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "docValuesStatus", arg);
          return -1;
        }

        static PyObject *t_CheckIndex$Status$SegmentInfoStatus_get__fieldNormStatus(t_CheckIndex$Status$SegmentInfoStatus *self, void *data)
        {
          ::org::apache::lucene::index::CheckIndex$Status$FieldNormStatus value((jobject) NULL);
          OBJ_CALL(value = self->object._get_fieldNormStatus());
          return ::org::apache::lucene::index::t_CheckIndex$Status$FieldNormStatus::wrap_Object(value);
        }
        static int t_CheckIndex$Status$SegmentInfoStatus_set__fieldNormStatus(t_CheckIndex$Status$SegmentInfoStatus *self, PyObject *arg, void *data)
        {
          ::org::apache::lucene::index::CheckIndex$Status$FieldNormStatus value((jobject) NULL);
          if (!parseArg(arg, "k", ::org::apache::lucene::index::CheckIndex$Status$FieldNormStatus::initializeClass, &value))
          {
            INT_CALL(self->object._set_fieldNormStatus(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "fieldNormStatus", arg);
          return -1;
        }

        static PyObject *t_CheckIndex$Status$SegmentInfoStatus_get__hasDeletions(t_CheckIndex$Status$SegmentInfoStatus *self, void *data)
        {
          jboolean value;
          OBJ_CALL(value = self->object._get_hasDeletions());
          Py_RETURN_BOOL(value);
        }
        static int t_CheckIndex$Status$SegmentInfoStatus_set__hasDeletions(t_CheckIndex$Status$SegmentInfoStatus *self, PyObject *arg, void *data)
        {
          jboolean value;
          if (!parseArg(arg, "Z", &value))
          {
            INT_CALL(self->object._set_hasDeletions(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "hasDeletions", arg);
          return -1;
        }

        static PyObject *t_CheckIndex$Status$SegmentInfoStatus_get__name(t_CheckIndex$Status$SegmentInfoStatus *self, void *data)
        {
          ::java::lang::String value((jobject) NULL);
          OBJ_CALL(value = self->object._get_name());
          return j2p(value);
        }
        static int t_CheckIndex$Status$SegmentInfoStatus_set__name(t_CheckIndex$Status$SegmentInfoStatus *self, PyObject *arg, void *data)
        {
          ::java::lang::String value((jobject) NULL);
          if (!parseArg(arg, "s", &value))
          {
            INT_CALL(self->object._set_name(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "name", arg);
          return -1;
        }

        static PyObject *t_CheckIndex$Status$SegmentInfoStatus_get__numDeleted(t_CheckIndex$Status$SegmentInfoStatus *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object._get_numDeleted());
          return PyInt_FromLong((long) value);
        }
        static int t_CheckIndex$Status$SegmentInfoStatus_set__numDeleted(t_CheckIndex$Status$SegmentInfoStatus *self, PyObject *arg, void *data)
        {
          jint value;
          if (!parseArg(arg, "I", &value))
          {
            INT_CALL(self->object._set_numDeleted(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "numDeleted", arg);
          return -1;
        }

        static PyObject *t_CheckIndex$Status$SegmentInfoStatus_get__numFiles(t_CheckIndex$Status$SegmentInfoStatus *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object._get_numFiles());
          return PyInt_FromLong((long) value);
        }
        static int t_CheckIndex$Status$SegmentInfoStatus_set__numFiles(t_CheckIndex$Status$SegmentInfoStatus *self, PyObject *arg, void *data)
        {
          jint value;
          if (!parseArg(arg, "I", &value))
          {
            INT_CALL(self->object._set_numFiles(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "numFiles", arg);
          return -1;
        }

        static PyObject *t_CheckIndex$Status$SegmentInfoStatus_get__openReaderPassed(t_CheckIndex$Status$SegmentInfoStatus *self, void *data)
        {
          jboolean value;
          OBJ_CALL(value = self->object._get_openReaderPassed());
          Py_RETURN_BOOL(value);
        }
        static int t_CheckIndex$Status$SegmentInfoStatus_set__openReaderPassed(t_CheckIndex$Status$SegmentInfoStatus *self, PyObject *arg, void *data)
        {
          jboolean value;
          if (!parseArg(arg, "Z", &value))
          {
            INT_CALL(self->object._set_openReaderPassed(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "openReaderPassed", arg);
          return -1;
        }

        static PyObject *t_CheckIndex$Status$SegmentInfoStatus_get__sizeMB(t_CheckIndex$Status$SegmentInfoStatus *self, void *data)
        {
          jdouble value;
          OBJ_CALL(value = self->object._get_sizeMB());
          return PyFloat_FromDouble((double) value);
        }
        static int t_CheckIndex$Status$SegmentInfoStatus_set__sizeMB(t_CheckIndex$Status$SegmentInfoStatus *self, PyObject *arg, void *data)
        {
          jdouble value;
          if (!parseArg(arg, "D", &value))
          {
            INT_CALL(self->object._set_sizeMB(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "sizeMB", arg);
          return -1;
        }

        static PyObject *t_CheckIndex$Status$SegmentInfoStatus_get__storedFieldStatus(t_CheckIndex$Status$SegmentInfoStatus *self, void *data)
        {
          ::org::apache::lucene::index::CheckIndex$Status$StoredFieldStatus value((jobject) NULL);
          OBJ_CALL(value = self->object._get_storedFieldStatus());
          return ::org::apache::lucene::index::t_CheckIndex$Status$StoredFieldStatus::wrap_Object(value);
        }
        static int t_CheckIndex$Status$SegmentInfoStatus_set__storedFieldStatus(t_CheckIndex$Status$SegmentInfoStatus *self, PyObject *arg, void *data)
        {
          ::org::apache::lucene::index::CheckIndex$Status$StoredFieldStatus value((jobject) NULL);
          if (!parseArg(arg, "k", ::org::apache::lucene::index::CheckIndex$Status$StoredFieldStatus::initializeClass, &value))
          {
            INT_CALL(self->object._set_storedFieldStatus(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "storedFieldStatus", arg);
          return -1;
        }

        static PyObject *t_CheckIndex$Status$SegmentInfoStatus_get__termIndexStatus(t_CheckIndex$Status$SegmentInfoStatus *self, void *data)
        {
          ::org::apache::lucene::index::CheckIndex$Status$TermIndexStatus value((jobject) NULL);
          OBJ_CALL(value = self->object._get_termIndexStatus());
          return ::org::apache::lucene::index::t_CheckIndex$Status$TermIndexStatus::wrap_Object(value);
        }
        static int t_CheckIndex$Status$SegmentInfoStatus_set__termIndexStatus(t_CheckIndex$Status$SegmentInfoStatus *self, PyObject *arg, void *data)
        {
          ::org::apache::lucene::index::CheckIndex$Status$TermIndexStatus value((jobject) NULL);
          if (!parseArg(arg, "k", ::org::apache::lucene::index::CheckIndex$Status$TermIndexStatus::initializeClass, &value))
          {
            INT_CALL(self->object._set_termIndexStatus(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "termIndexStatus", arg);
          return -1;
        }

        static PyObject *t_CheckIndex$Status$SegmentInfoStatus_get__termVectorStatus(t_CheckIndex$Status$SegmentInfoStatus *self, void *data)
        {
          ::org::apache::lucene::index::CheckIndex$Status$TermVectorStatus value((jobject) NULL);
          OBJ_CALL(value = self->object._get_termVectorStatus());
          return ::org::apache::lucene::index::t_CheckIndex$Status$TermVectorStatus::wrap_Object(value);
        }
        static int t_CheckIndex$Status$SegmentInfoStatus_set__termVectorStatus(t_CheckIndex$Status$SegmentInfoStatus *self, PyObject *arg, void *data)
        {
          ::org::apache::lucene::index::CheckIndex$Status$TermVectorStatus value((jobject) NULL);
          if (!parseArg(arg, "k", ::org::apache::lucene::index::CheckIndex$Status$TermVectorStatus::initializeClass, &value))
          {
            INT_CALL(self->object._set_termVectorStatus(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "termVectorStatus", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/DocTermOrdsRewriteMethod.h"
#include "java/lang/Object.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "org/apache/lucene/search/MultiTermQuery.h"
#include "org/apache/lucene/search/Query.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *DocTermOrdsRewriteMethod::class$ = NULL;
        jmethodID *DocTermOrdsRewriteMethod::mids$ = NULL;
        bool DocTermOrdsRewriteMethod::live$ = false;

        jclass DocTermOrdsRewriteMethod::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/DocTermOrdsRewriteMethod");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
            mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
            mids$[mid_rewrite_925c5bbc] = env->getMethodID(cls, "rewrite", "(Lorg/apache/lucene/index/IndexReader;Lorg/apache/lucene/search/MultiTermQuery;)Lorg/apache/lucene/search/Query;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        DocTermOrdsRewriteMethod::DocTermOrdsRewriteMethod() : ::org::apache::lucene::search::MultiTermQuery$RewriteMethod(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        jboolean DocTermOrdsRewriteMethod::equals(const ::java::lang::Object & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
        }

        jint DocTermOrdsRewriteMethod::hashCode() const
        {
          return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
        }

        ::org::apache::lucene::search::Query DocTermOrdsRewriteMethod::rewrite(const ::org::apache::lucene::index::IndexReader & a0, const ::org::apache::lucene::search::MultiTermQuery & a1) const
        {
          return ::org::apache::lucene::search::Query(env->callObjectMethod(this$, mids$[mid_rewrite_925c5bbc], a0.this$, a1.this$));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_DocTermOrdsRewriteMethod_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_DocTermOrdsRewriteMethod_instance_(PyTypeObject *type, PyObject *arg);
        static int t_DocTermOrdsRewriteMethod_init_(t_DocTermOrdsRewriteMethod *self, PyObject *args, PyObject *kwds);
        static PyObject *t_DocTermOrdsRewriteMethod_equals(t_DocTermOrdsRewriteMethod *self, PyObject *args);
        static PyObject *t_DocTermOrdsRewriteMethod_hashCode(t_DocTermOrdsRewriteMethod *self, PyObject *args);
        static PyObject *t_DocTermOrdsRewriteMethod_rewrite(t_DocTermOrdsRewriteMethod *self, PyObject *args);

        static PyMethodDef t_DocTermOrdsRewriteMethod__methods_[] = {
          DECLARE_METHOD(t_DocTermOrdsRewriteMethod, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_DocTermOrdsRewriteMethod, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_DocTermOrdsRewriteMethod, equals, METH_VARARGS),
          DECLARE_METHOD(t_DocTermOrdsRewriteMethod, hashCode, METH_VARARGS),
          DECLARE_METHOD(t_DocTermOrdsRewriteMethod, rewrite, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(DocTermOrdsRewriteMethod, t_DocTermOrdsRewriteMethod, ::org::apache::lucene::search::MultiTermQuery$RewriteMethod, DocTermOrdsRewriteMethod, t_DocTermOrdsRewriteMethod_init_, 0, 0, 0, 0, 0);

        void t_DocTermOrdsRewriteMethod::install(PyObject *module)
        {
          installType(&PY_TYPE(DocTermOrdsRewriteMethod), module, "DocTermOrdsRewriteMethod", 0);
        }

        void t_DocTermOrdsRewriteMethod::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(DocTermOrdsRewriteMethod).tp_dict, "class_", make_descriptor(DocTermOrdsRewriteMethod::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(DocTermOrdsRewriteMethod).tp_dict, "wrapfn_", make_descriptor(t_DocTermOrdsRewriteMethod::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(DocTermOrdsRewriteMethod).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_DocTermOrdsRewriteMethod_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, DocTermOrdsRewriteMethod::initializeClass, 1)))
            return NULL;
          return t_DocTermOrdsRewriteMethod::wrap_Object(DocTermOrdsRewriteMethod(((t_DocTermOrdsRewriteMethod *) arg)->object.this$));
        }
        static PyObject *t_DocTermOrdsRewriteMethod_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, DocTermOrdsRewriteMethod::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_DocTermOrdsRewriteMethod_init_(t_DocTermOrdsRewriteMethod *self, PyObject *args, PyObject *kwds)
        {
          DocTermOrdsRewriteMethod object((jobject) NULL);

          INT_CALL(object = DocTermOrdsRewriteMethod());
          self->object = object;

          return 0;
        }

        static PyObject *t_DocTermOrdsRewriteMethod_equals(t_DocTermOrdsRewriteMethod *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.equals(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(DocTermOrdsRewriteMethod), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_DocTermOrdsRewriteMethod_hashCode(t_DocTermOrdsRewriteMethod *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hashCode());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(DocTermOrdsRewriteMethod), (PyObject *) self, "hashCode", args, 2);
        }

        static PyObject *t_DocTermOrdsRewriteMethod_rewrite(t_DocTermOrdsRewriteMethod *self, PyObject *args)
        {
          ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
          ::org::apache::lucene::search::MultiTermQuery a1((jobject) NULL);
          ::org::apache::lucene::search::Query result((jobject) NULL);

          if (!parseArgs(args, "kk", ::org::apache::lucene::index::IndexReader::initializeClass, ::org::apache::lucene::search::MultiTermQuery::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = self->object.rewrite(a0, a1));
            return ::org::apache::lucene::search::t_Query::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(DocTermOrdsRewriteMethod), (PyObject *) self, "rewrite", args, 2);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/NumericDocValues.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *NumericDocValues::class$ = NULL;
        jmethodID *NumericDocValues::mids$ = NULL;
        bool NumericDocValues::live$ = false;

        jclass NumericDocValues::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/NumericDocValues");

            mids$ = new jmethodID[max_mid];
            mids$[mid_get_39c7bd20] = env->getMethodID(cls, "get", "(I)J");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        jlong NumericDocValues::get(jint a0) const
        {
          return env->callLongMethod(this$, mids$[mid_get_39c7bd20], a0);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_NumericDocValues_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_NumericDocValues_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_NumericDocValues_get(t_NumericDocValues *self, PyObject *arg);

        static PyMethodDef t_NumericDocValues__methods_[] = {
          DECLARE_METHOD(t_NumericDocValues, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_NumericDocValues, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_NumericDocValues, get, METH_O),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(NumericDocValues, t_NumericDocValues, ::java::lang::Object, NumericDocValues, abstract_init, 0, 0, 0, 0, 0);

        void t_NumericDocValues::install(PyObject *module)
        {
          installType(&PY_TYPE(NumericDocValues), module, "NumericDocValues", 0);
        }

        void t_NumericDocValues::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(NumericDocValues).tp_dict, "class_", make_descriptor(NumericDocValues::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(NumericDocValues).tp_dict, "wrapfn_", make_descriptor(t_NumericDocValues::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(NumericDocValues).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_NumericDocValues_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, NumericDocValues::initializeClass, 1)))
            return NULL;
          return t_NumericDocValues::wrap_Object(NumericDocValues(((t_NumericDocValues *) arg)->object.this$));
        }
        static PyObject *t_NumericDocValues_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, NumericDocValues::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_NumericDocValues_get(t_NumericDocValues *self, PyObject *arg)
        {
          jint a0;
          jlong result;

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(result = self->object.get(a0));
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          PyErr_SetArgsError((PyObject *) self, "get", arg);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/similarities/BasicModelBE.h"
#include "org/apache/lucene/search/similarities/BasicStats.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace similarities {

          ::java::lang::Class *BasicModelBE::class$ = NULL;
          jmethodID *BasicModelBE::mids$ = NULL;
          bool BasicModelBE::live$ = false;

          jclass BasicModelBE::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/similarities/BasicModelBE");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_score_076760a9] = env->getMethodID(cls, "score", "(Lorg/apache/lucene/search/similarities/BasicStats;F)F");
              mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          BasicModelBE::BasicModelBE() : ::org::apache::lucene::search::similarities::BasicModel(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          jfloat BasicModelBE::score(const ::org::apache::lucene::search::similarities::BasicStats & a0, jfloat a1) const
          {
            return env->callFloatMethod(this$, mids$[mid_score_076760a9], a0.this$, a1);
          }

          ::java::lang::String BasicModelBE::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace similarities {
          static PyObject *t_BasicModelBE_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_BasicModelBE_instance_(PyTypeObject *type, PyObject *arg);
          static int t_BasicModelBE_init_(t_BasicModelBE *self, PyObject *args, PyObject *kwds);
          static PyObject *t_BasicModelBE_score(t_BasicModelBE *self, PyObject *args);
          static PyObject *t_BasicModelBE_toString(t_BasicModelBE *self, PyObject *args);

          static PyMethodDef t_BasicModelBE__methods_[] = {
            DECLARE_METHOD(t_BasicModelBE, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_BasicModelBE, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_BasicModelBE, score, METH_VARARGS),
            DECLARE_METHOD(t_BasicModelBE, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(BasicModelBE, t_BasicModelBE, ::org::apache::lucene::search::similarities::BasicModel, BasicModelBE, t_BasicModelBE_init_, 0, 0, 0, 0, 0);

          void t_BasicModelBE::install(PyObject *module)
          {
            installType(&PY_TYPE(BasicModelBE), module, "BasicModelBE", 0);
          }

          void t_BasicModelBE::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(BasicModelBE).tp_dict, "class_", make_descriptor(BasicModelBE::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(BasicModelBE).tp_dict, "wrapfn_", make_descriptor(t_BasicModelBE::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(BasicModelBE).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_BasicModelBE_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, BasicModelBE::initializeClass, 1)))
              return NULL;
            return t_BasicModelBE::wrap_Object(BasicModelBE(((t_BasicModelBE *) arg)->object.this$));
          }
          static PyObject *t_BasicModelBE_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, BasicModelBE::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_BasicModelBE_init_(t_BasicModelBE *self, PyObject *args, PyObject *kwds)
          {
            BasicModelBE object((jobject) NULL);

            INT_CALL(object = BasicModelBE());
            self->object = object;

            return 0;
          }

          static PyObject *t_BasicModelBE_score(t_BasicModelBE *self, PyObject *args)
          {
            ::org::apache::lucene::search::similarities::BasicStats a0((jobject) NULL);
            jfloat a1;
            jfloat result;

            if (!parseArgs(args, "kF", ::org::apache::lucene::search::similarities::BasicStats::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.score(a0, a1));
              return PyFloat_FromDouble((double) result);
            }

            return callSuper(&PY_TYPE(BasicModelBE), (PyObject *) self, "score", args, 2);
          }

          static PyObject *t_BasicModelBE_toString(t_BasicModelBE *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(&PY_TYPE(BasicModelBE), (PyObject *) self, "toString", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/lucene40/Lucene40LiveDocsFormat.h"
#include "org/apache/lucene/util/Bits.h"
#include "org/apache/lucene/util/MutableBits.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/index/SegmentCommitInfo.h"
#include "org/apache/lucene/store/IOContext.h"
#include "org/apache/lucene/store/Directory.h"
#include "java/lang/String.h"
#include "java/util/Collection.h"
#include "java/io/IOException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace lucene40 {

          ::java::lang::Class *Lucene40LiveDocsFormat::class$ = NULL;
          jmethodID *Lucene40LiveDocsFormat::mids$ = NULL;
          bool Lucene40LiveDocsFormat::live$ = false;

          jclass Lucene40LiveDocsFormat::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/lucene40/Lucene40LiveDocsFormat");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_files_cb8dcbcf] = env->getMethodID(cls, "files", "(Lorg/apache/lucene/index/SegmentCommitInfo;Ljava/util/Collection;)V");
              mids$[mid_newLiveDocs_e3a7ca1a] = env->getMethodID(cls, "newLiveDocs", "(Lorg/apache/lucene/util/Bits;)Lorg/apache/lucene/util/MutableBits;");
              mids$[mid_newLiveDocs_f311e97a] = env->getMethodID(cls, "newLiveDocs", "(I)Lorg/apache/lucene/util/MutableBits;");
              mids$[mid_readLiveDocs_60c7b77b] = env->getMethodID(cls, "readLiveDocs", "(Lorg/apache/lucene/store/Directory;Lorg/apache/lucene/index/SegmentCommitInfo;Lorg/apache/lucene/store/IOContext;)Lorg/apache/lucene/util/Bits;");
              mids$[mid_writeLiveDocs_37123b35] = env->getMethodID(cls, "writeLiveDocs", "(Lorg/apache/lucene/util/MutableBits;Lorg/apache/lucene/store/Directory;Lorg/apache/lucene/index/SegmentCommitInfo;ILorg/apache/lucene/store/IOContext;)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          Lucene40LiveDocsFormat::Lucene40LiveDocsFormat() : ::org::apache::lucene::codecs::LiveDocsFormat(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          void Lucene40LiveDocsFormat::files(const ::org::apache::lucene::index::SegmentCommitInfo & a0, const ::java::util::Collection & a1) const
          {
            env->callVoidMethod(this$, mids$[mid_files_cb8dcbcf], a0.this$, a1.this$);
          }

          ::org::apache::lucene::util::MutableBits Lucene40LiveDocsFormat::newLiveDocs(const ::org::apache::lucene::util::Bits & a0) const
          {
            return ::org::apache::lucene::util::MutableBits(env->callObjectMethod(this$, mids$[mid_newLiveDocs_e3a7ca1a], a0.this$));
          }

          ::org::apache::lucene::util::MutableBits Lucene40LiveDocsFormat::newLiveDocs(jint a0) const
          {
            return ::org::apache::lucene::util::MutableBits(env->callObjectMethod(this$, mids$[mid_newLiveDocs_f311e97a], a0));
          }

          ::org::apache::lucene::util::Bits Lucene40LiveDocsFormat::readLiveDocs(const ::org::apache::lucene::store::Directory & a0, const ::org::apache::lucene::index::SegmentCommitInfo & a1, const ::org::apache::lucene::store::IOContext & a2) const
          {
            return ::org::apache::lucene::util::Bits(env->callObjectMethod(this$, mids$[mid_readLiveDocs_60c7b77b], a0.this$, a1.this$, a2.this$));
          }

          void Lucene40LiveDocsFormat::writeLiveDocs(const ::org::apache::lucene::util::MutableBits & a0, const ::org::apache::lucene::store::Directory & a1, const ::org::apache::lucene::index::SegmentCommitInfo & a2, jint a3, const ::org::apache::lucene::store::IOContext & a4) const
          {
            env->callVoidMethod(this$, mids$[mid_writeLiveDocs_37123b35], a0.this$, a1.this$, a2.this$, a3, a4.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace lucene40 {
          static PyObject *t_Lucene40LiveDocsFormat_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Lucene40LiveDocsFormat_instance_(PyTypeObject *type, PyObject *arg);
          static int t_Lucene40LiveDocsFormat_init_(t_Lucene40LiveDocsFormat *self, PyObject *args, PyObject *kwds);
          static PyObject *t_Lucene40LiveDocsFormat_files(t_Lucene40LiveDocsFormat *self, PyObject *args);
          static PyObject *t_Lucene40LiveDocsFormat_newLiveDocs(t_Lucene40LiveDocsFormat *self, PyObject *args);
          static PyObject *t_Lucene40LiveDocsFormat_readLiveDocs(t_Lucene40LiveDocsFormat *self, PyObject *args);
          static PyObject *t_Lucene40LiveDocsFormat_writeLiveDocs(t_Lucene40LiveDocsFormat *self, PyObject *args);

          static PyMethodDef t_Lucene40LiveDocsFormat__methods_[] = {
            DECLARE_METHOD(t_Lucene40LiveDocsFormat, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lucene40LiveDocsFormat, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lucene40LiveDocsFormat, files, METH_VARARGS),
            DECLARE_METHOD(t_Lucene40LiveDocsFormat, newLiveDocs, METH_VARARGS),
            DECLARE_METHOD(t_Lucene40LiveDocsFormat, readLiveDocs, METH_VARARGS),
            DECLARE_METHOD(t_Lucene40LiveDocsFormat, writeLiveDocs, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(Lucene40LiveDocsFormat, t_Lucene40LiveDocsFormat, ::org::apache::lucene::codecs::LiveDocsFormat, Lucene40LiveDocsFormat, t_Lucene40LiveDocsFormat_init_, 0, 0, 0, 0, 0);

          void t_Lucene40LiveDocsFormat::install(PyObject *module)
          {
            installType(&PY_TYPE(Lucene40LiveDocsFormat), module, "Lucene40LiveDocsFormat", 0);
          }

          void t_Lucene40LiveDocsFormat::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(Lucene40LiveDocsFormat).tp_dict, "class_", make_descriptor(Lucene40LiveDocsFormat::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(Lucene40LiveDocsFormat).tp_dict, "wrapfn_", make_descriptor(t_Lucene40LiveDocsFormat::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(Lucene40LiveDocsFormat).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_Lucene40LiveDocsFormat_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, Lucene40LiveDocsFormat::initializeClass, 1)))
              return NULL;
            return t_Lucene40LiveDocsFormat::wrap_Object(Lucene40LiveDocsFormat(((t_Lucene40LiveDocsFormat *) arg)->object.this$));
          }
          static PyObject *t_Lucene40LiveDocsFormat_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, Lucene40LiveDocsFormat::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_Lucene40LiveDocsFormat_init_(t_Lucene40LiveDocsFormat *self, PyObject *args, PyObject *kwds)
          {
            Lucene40LiveDocsFormat object((jobject) NULL);

            INT_CALL(object = Lucene40LiveDocsFormat());
            self->object = object;

            return 0;
          }

          static PyObject *t_Lucene40LiveDocsFormat_files(t_Lucene40LiveDocsFormat *self, PyObject *args)
          {
            ::org::apache::lucene::index::SegmentCommitInfo a0((jobject) NULL);
            ::java::util::Collection a1((jobject) NULL);
            PyTypeObject **p1;

            if (!parseArgs(args, "kK", ::org::apache::lucene::index::SegmentCommitInfo::initializeClass, ::java::util::Collection::initializeClass, &a0, &a1, &p1, ::java::util::t_Collection::parameters_))
            {
              OBJ_CALL(self->object.files(a0, a1));
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(Lucene40LiveDocsFormat), (PyObject *) self, "files", args, 2);
          }

          static PyObject *t_Lucene40LiveDocsFormat_newLiveDocs(t_Lucene40LiveDocsFormat *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::org::apache::lucene::util::Bits a0((jobject) NULL);
                ::org::apache::lucene::util::MutableBits result((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::util::Bits::initializeClass, &a0))
                {
                  OBJ_CALL(result = self->object.newLiveDocs(a0));
                  return ::org::apache::lucene::util::t_MutableBits::wrap_Object(result);
                }
              }
              {
                jint a0;
                ::org::apache::lucene::util::MutableBits result((jobject) NULL);

                if (!parseArgs(args, "I", &a0))
                {
                  OBJ_CALL(result = self->object.newLiveDocs(a0));
                  return ::org::apache::lucene::util::t_MutableBits::wrap_Object(result);
                }
              }
            }

            return callSuper(&PY_TYPE(Lucene40LiveDocsFormat), (PyObject *) self, "newLiveDocs", args, 2);
          }

          static PyObject *t_Lucene40LiveDocsFormat_readLiveDocs(t_Lucene40LiveDocsFormat *self, PyObject *args)
          {
            ::org::apache::lucene::store::Directory a0((jobject) NULL);
            ::org::apache::lucene::index::SegmentCommitInfo a1((jobject) NULL);
            ::org::apache::lucene::store::IOContext a2((jobject) NULL);
            ::org::apache::lucene::util::Bits result((jobject) NULL);

            if (!parseArgs(args, "kkk", ::org::apache::lucene::store::Directory::initializeClass, ::org::apache::lucene::index::SegmentCommitInfo::initializeClass, ::org::apache::lucene::store::IOContext::initializeClass, &a0, &a1, &a2))
            {
              OBJ_CALL(result = self->object.readLiveDocs(a0, a1, a2));
              return ::org::apache::lucene::util::t_Bits::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(Lucene40LiveDocsFormat), (PyObject *) self, "readLiveDocs", args, 2);
          }

          static PyObject *t_Lucene40LiveDocsFormat_writeLiveDocs(t_Lucene40LiveDocsFormat *self, PyObject *args)
          {
            ::org::apache::lucene::util::MutableBits a0((jobject) NULL);
            ::org::apache::lucene::store::Directory a1((jobject) NULL);
            ::org::apache::lucene::index::SegmentCommitInfo a2((jobject) NULL);
            jint a3;
            ::org::apache::lucene::store::IOContext a4((jobject) NULL);

            if (!parseArgs(args, "kkkIk", ::org::apache::lucene::util::MutableBits::initializeClass, ::org::apache::lucene::store::Directory::initializeClass, ::org::apache::lucene::index::SegmentCommitInfo::initializeClass, ::org::apache::lucene::store::IOContext::initializeClass, &a0, &a1, &a2, &a3, &a4))
            {
              OBJ_CALL(self->object.writeLiveDocs(a0, a1, a2, a3, a4));
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(Lucene40LiveDocsFormat), (PyObject *) self, "writeLiveDocs", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/suggest/analyzing/FuzzySuggester.h"
#include "org/apache/lucene/analysis/Analyzer.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace suggest {
          namespace analyzing {

            ::java::lang::Class *FuzzySuggester::class$ = NULL;
            jmethodID *FuzzySuggester::mids$ = NULL;
            bool FuzzySuggester::live$ = false;
            jint FuzzySuggester::DEFAULT_MAX_EDITS = (jint) 0;
            jint FuzzySuggester::DEFAULT_MIN_FUZZY_LENGTH = (jint) 0;
            jint FuzzySuggester::DEFAULT_NON_FUZZY_PREFIX = (jint) 0;
            jboolean FuzzySuggester::DEFAULT_TRANSPOSITIONS = (jboolean) 0;
            jboolean FuzzySuggester::DEFAULT_UNICODE_AWARE = (jboolean) 0;

            jclass FuzzySuggester::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/search/suggest/analyzing/FuzzySuggester");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_31619410] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/Analyzer;)V");
                mids$[mid_init$_6a3c5772] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/Analyzer;Lorg/apache/lucene/analysis/Analyzer;)V");
                mids$[mid_init$_ec63f0d3] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/Analyzer;Lorg/apache/lucene/analysis/Analyzer;IIIZIZIIZ)V");
                mids$[mid_convertAutomaton_7aca8e1f] = env->getMethodID(cls, "convertAutomaton", "(Lorg/apache/lucene/util/automaton/Automaton;)Lorg/apache/lucene/util/automaton/Automaton;");
                mids$[mid_getFullPrefixPaths_a9ea3855] = env->getMethodID(cls, "getFullPrefixPaths", "(Ljava/util/List;Lorg/apache/lucene/util/automaton/Automaton;Lorg/apache/lucene/util/fst/FST;)Ljava/util/List;");

                class$ = (::java::lang::Class *) new JObject(cls);
                cls = (jclass) class$->this$;

                DEFAULT_MAX_EDITS = env->getStaticIntField(cls, "DEFAULT_MAX_EDITS");
                DEFAULT_MIN_FUZZY_LENGTH = env->getStaticIntField(cls, "DEFAULT_MIN_FUZZY_LENGTH");
                DEFAULT_NON_FUZZY_PREFIX = env->getStaticIntField(cls, "DEFAULT_NON_FUZZY_PREFIX");
                DEFAULT_TRANSPOSITIONS = env->getStaticBooleanField(cls, "DEFAULT_TRANSPOSITIONS");
                DEFAULT_UNICODE_AWARE = env->getStaticBooleanField(cls, "DEFAULT_UNICODE_AWARE");
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            FuzzySuggester::FuzzySuggester(const ::org::apache::lucene::analysis::Analyzer & a0) : ::org::apache::lucene::search::suggest::analyzing::AnalyzingSuggester(env->newObject(initializeClass, &mids$, mid_init$_31619410, a0.this$)) {}

            FuzzySuggester::FuzzySuggester(const ::org::apache::lucene::analysis::Analyzer & a0, const ::org::apache::lucene::analysis::Analyzer & a1) : ::org::apache::lucene::search::suggest::analyzing::AnalyzingSuggester(env->newObject(initializeClass, &mids$, mid_init$_6a3c5772, a0.this$, a1.this$)) {}

            FuzzySuggester::FuzzySuggester(const ::org::apache::lucene::analysis::Analyzer & a0, const ::org::apache::lucene::analysis::Analyzer & a1, jint a2, jint a3, jint a4, jboolean a5, jint a6, jboolean a7, jint a8, jint a9, jboolean a10) : ::org::apache::lucene::search::suggest::analyzing::AnalyzingSuggester(env->newObject(initializeClass, &mids$, mid_init$_ec63f0d3, a0.this$, a1.this$, a2, a3, a4, a5, a6, a7, a8, a9, a10)) {}
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace suggest {
          namespace analyzing {
            static PyObject *t_FuzzySuggester_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_FuzzySuggester_instance_(PyTypeObject *type, PyObject *arg);
            static int t_FuzzySuggester_init_(t_FuzzySuggester *self, PyObject *args, PyObject *kwds);

            static PyMethodDef t_FuzzySuggester__methods_[] = {
              DECLARE_METHOD(t_FuzzySuggester, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_FuzzySuggester, instance_, METH_O | METH_CLASS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(FuzzySuggester, t_FuzzySuggester, ::org::apache::lucene::search::suggest::analyzing::AnalyzingSuggester, FuzzySuggester, t_FuzzySuggester_init_, 0, 0, 0, 0, 0);

            void t_FuzzySuggester::install(PyObject *module)
            {
              installType(&PY_TYPE(FuzzySuggester), module, "FuzzySuggester", 0);
            }

            void t_FuzzySuggester::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(FuzzySuggester).tp_dict, "class_", make_descriptor(FuzzySuggester::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(FuzzySuggester).tp_dict, "wrapfn_", make_descriptor(t_FuzzySuggester::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(FuzzySuggester).tp_dict, "boxfn_", make_descriptor(boxObject));
              env->getClass(FuzzySuggester::initializeClass);
              PyDict_SetItemString(PY_TYPE(FuzzySuggester).tp_dict, "DEFAULT_MAX_EDITS", make_descriptor(FuzzySuggester::DEFAULT_MAX_EDITS));
              PyDict_SetItemString(PY_TYPE(FuzzySuggester).tp_dict, "DEFAULT_MIN_FUZZY_LENGTH", make_descriptor(FuzzySuggester::DEFAULT_MIN_FUZZY_LENGTH));
              PyDict_SetItemString(PY_TYPE(FuzzySuggester).tp_dict, "DEFAULT_NON_FUZZY_PREFIX", make_descriptor(FuzzySuggester::DEFAULT_NON_FUZZY_PREFIX));
              PyDict_SetItemString(PY_TYPE(FuzzySuggester).tp_dict, "DEFAULT_TRANSPOSITIONS", make_descriptor(FuzzySuggester::DEFAULT_TRANSPOSITIONS));
              PyDict_SetItemString(PY_TYPE(FuzzySuggester).tp_dict, "DEFAULT_UNICODE_AWARE", make_descriptor(FuzzySuggester::DEFAULT_UNICODE_AWARE));
            }

            static PyObject *t_FuzzySuggester_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, FuzzySuggester::initializeClass, 1)))
                return NULL;
              return t_FuzzySuggester::wrap_Object(FuzzySuggester(((t_FuzzySuggester *) arg)->object.this$));
            }
            static PyObject *t_FuzzySuggester_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, FuzzySuggester::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_FuzzySuggester_init_(t_FuzzySuggester *self, PyObject *args, PyObject *kwds)
            {
              switch (PyTuple_GET_SIZE(args)) {
               case 1:
                {
                  ::org::apache::lucene::analysis::Analyzer a0((jobject) NULL);
                  FuzzySuggester object((jobject) NULL);

                  if (!parseArgs(args, "k", ::org::apache::lucene::analysis::Analyzer::initializeClass, &a0))
                  {
                    INT_CALL(object = FuzzySuggester(a0));
                    self->object = object;
                    break;
                  }
                }
                goto err;
               case 2:
                {
                  ::org::apache::lucene::analysis::Analyzer a0((jobject) NULL);
                  ::org::apache::lucene::analysis::Analyzer a1((jobject) NULL);
                  FuzzySuggester object((jobject) NULL);

                  if (!parseArgs(args, "kk", ::org::apache::lucene::analysis::Analyzer::initializeClass, ::org::apache::lucene::analysis::Analyzer::initializeClass, &a0, &a1))
                  {
                    INT_CALL(object = FuzzySuggester(a0, a1));
                    self->object = object;
                    break;
                  }
                }
                goto err;
               case 11:
                {
                  ::org::apache::lucene::analysis::Analyzer a0((jobject) NULL);
                  ::org::apache::lucene::analysis::Analyzer a1((jobject) NULL);
                  jint a2;
                  jint a3;
                  jint a4;
                  jboolean a5;
                  jint a6;
                  jboolean a7;
                  jint a8;
                  jint a9;
                  jboolean a10;
                  FuzzySuggester object((jobject) NULL);

                  if (!parseArgs(args, "kkIIIZIZIIZ", ::org::apache::lucene::analysis::Analyzer::initializeClass, ::org::apache::lucene::analysis::Analyzer::initializeClass, &a0, &a1, &a2, &a3, &a4, &a5, &a6, &a7, &a8, &a9, &a10))
                  {
                    INT_CALL(object = FuzzySuggester(a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10));
                    self->object = object;
                    break;
                  }
                }
               default:
               err:
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/suggest/SortedInputIterator.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "java/lang/Class.h"
#include "java/io/IOException.h"
#include "java/util/Comparator.h"
#include "java/util/Set.h"
#include "org/apache/lucene/search/suggest/InputIterator.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace suggest {

          ::java::lang::Class *SortedInputIterator::class$ = NULL;
          jmethodID *SortedInputIterator::mids$ = NULL;
          bool SortedInputIterator::live$ = false;

          jclass SortedInputIterator::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/suggest/SortedInputIterator");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_1754a234] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/suggest/InputIterator;)V");
              mids$[mid_init$_a76164a7] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/suggest/InputIterator;Ljava/util/Comparator;)V");
              mids$[mid_contexts_03e99967] = env->getMethodID(cls, "contexts", "()Ljava/util/Set;");
              mids$[mid_getComparator_5a7ff2fc] = env->getMethodID(cls, "getComparator", "()Ljava/util/Comparator;");
              mids$[mid_hasContexts_54c6a16a] = env->getMethodID(cls, "hasContexts", "()Z");
              mids$[mid_hasPayloads_54c6a16a] = env->getMethodID(cls, "hasPayloads", "()Z");
              mids$[mid_next_4ae19461] = env->getMethodID(cls, "next", "()Lorg/apache/lucene/util/BytesRef;");
              mids$[mid_payload_4ae19461] = env->getMethodID(cls, "payload", "()Lorg/apache/lucene/util/BytesRef;");
              mids$[mid_weight_54c6a17a] = env->getMethodID(cls, "weight", "()J");
              mids$[mid_decode_b368866d] = env->getMethodID(cls, "decode", "(Lorg/apache/lucene/util/BytesRef;Lorg/apache/lucene/store/ByteArrayDataInput;)J");
              mids$[mid_encode_f3a12df5] = env->getMethodID(cls, "encode", "(Lorg/apache/lucene/util/OfflineSorter$ByteSequencesWriter;Lorg/apache/lucene/store/ByteArrayDataOutput;[BLorg/apache/lucene/util/BytesRef;Lorg/apache/lucene/util/BytesRef;Ljava/util/Set;J)V");
              mids$[mid_decodeContexts_8a3417ec] = env->getMethodID(cls, "decodeContexts", "(Lorg/apache/lucene/util/BytesRef;Lorg/apache/lucene/store/ByteArrayDataInput;)Ljava/util/Set;");
              mids$[mid_decodePayload_62b5ed46] = env->getMethodID(cls, "decodePayload", "(Lorg/apache/lucene/util/BytesRef;Lorg/apache/lucene/store/ByteArrayDataInput;)Lorg/apache/lucene/util/BytesRef;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          SortedInputIterator::SortedInputIterator(const ::org::apache::lucene::search::suggest::InputIterator & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_1754a234, a0.this$)) {}

          SortedInputIterator::SortedInputIterator(const ::org::apache::lucene::search::suggest::InputIterator & a0, const ::java::util::Comparator & a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_a76164a7, a0.this$, a1.this$)) {}

          ::java::util::Set SortedInputIterator::contexts() const
          {
            return ::java::util::Set(env->callObjectMethod(this$, mids$[mid_contexts_03e99967]));
          }

          ::java::util::Comparator SortedInputIterator::getComparator() const
          {
            return ::java::util::Comparator(env->callObjectMethod(this$, mids$[mid_getComparator_5a7ff2fc]));
          }

          jboolean SortedInputIterator::hasContexts() const
          {
            return env->callBooleanMethod(this$, mids$[mid_hasContexts_54c6a16a]);
          }

          jboolean SortedInputIterator::hasPayloads() const
          {
            return env->callBooleanMethod(this$, mids$[mid_hasPayloads_54c6a16a]);
          }

          ::org::apache::lucene::util::BytesRef SortedInputIterator::next() const
          {
            return ::org::apache::lucene::util::BytesRef(env->callObjectMethod(this$, mids$[mid_next_4ae19461]));
          }

          ::org::apache::lucene::util::BytesRef SortedInputIterator::payload() const
          {
            return ::org::apache::lucene::util::BytesRef(env->callObjectMethod(this$, mids$[mid_payload_4ae19461]));
          }

          jlong SortedInputIterator::weight() const
          {
            return env->callLongMethod(this$, mids$[mid_weight_54c6a17a]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace suggest {
          static PyObject *t_SortedInputIterator_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SortedInputIterator_instance_(PyTypeObject *type, PyObject *arg);
          static int t_SortedInputIterator_init_(t_SortedInputIterator *self, PyObject *args, PyObject *kwds);
          static PyObject *t_SortedInputIterator_contexts(t_SortedInputIterator *self);
          static PyObject *t_SortedInputIterator_getComparator(t_SortedInputIterator *self);
          static PyObject *t_SortedInputIterator_hasContexts(t_SortedInputIterator *self);
          static PyObject *t_SortedInputIterator_hasPayloads(t_SortedInputIterator *self);
          static PyObject *t_SortedInputIterator_next(t_SortedInputIterator *self);
          static PyObject *t_SortedInputIterator_payload(t_SortedInputIterator *self);
          static PyObject *t_SortedInputIterator_weight(t_SortedInputIterator *self);
          static PyObject *t_SortedInputIterator_get__comparator(t_SortedInputIterator *self, void *data);
          static PyGetSetDef t_SortedInputIterator__fields_[] = {
            DECLARE_GET_FIELD(t_SortedInputIterator, comparator),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_SortedInputIterator__methods_[] = {
            DECLARE_METHOD(t_SortedInputIterator, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SortedInputIterator, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SortedInputIterator, contexts, METH_NOARGS),
            DECLARE_METHOD(t_SortedInputIterator, getComparator, METH_NOARGS),
            DECLARE_METHOD(t_SortedInputIterator, hasContexts, METH_NOARGS),
            DECLARE_METHOD(t_SortedInputIterator, hasPayloads, METH_NOARGS),
            DECLARE_METHOD(t_SortedInputIterator, next, METH_NOARGS),
            DECLARE_METHOD(t_SortedInputIterator, payload, METH_NOARGS),
            DECLARE_METHOD(t_SortedInputIterator, weight, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(SortedInputIterator, t_SortedInputIterator, ::java::lang::Object, SortedInputIterator, t_SortedInputIterator_init_, PyObject_SelfIter, ((PyObject *(*)(t_SortedInputIterator *)) get_next< t_SortedInputIterator,::org::apache::lucene::util::t_BytesRef,::org::apache::lucene::util::BytesRef >), t_SortedInputIterator__fields_, 0, 0);

          void t_SortedInputIterator::install(PyObject *module)
          {
            installType(&PY_TYPE(SortedInputIterator), module, "SortedInputIterator", 0);
          }

          void t_SortedInputIterator::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(SortedInputIterator).tp_dict, "class_", make_descriptor(SortedInputIterator::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(SortedInputIterator).tp_dict, "wrapfn_", make_descriptor(t_SortedInputIterator::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(SortedInputIterator).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_SortedInputIterator_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, SortedInputIterator::initializeClass, 1)))
              return NULL;
            return t_SortedInputIterator::wrap_Object(SortedInputIterator(((t_SortedInputIterator *) arg)->object.this$));
          }
          static PyObject *t_SortedInputIterator_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, SortedInputIterator::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_SortedInputIterator_init_(t_SortedInputIterator *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::org::apache::lucene::search::suggest::InputIterator a0((jobject) NULL);
                SortedInputIterator object((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::search::suggest::InputIterator::initializeClass, &a0))
                {
                  INT_CALL(object = SortedInputIterator(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 2:
              {
                ::org::apache::lucene::search::suggest::InputIterator a0((jobject) NULL);
                ::java::util::Comparator a1((jobject) NULL);
                PyTypeObject **p1;
                SortedInputIterator object((jobject) NULL);

                if (!parseArgs(args, "kK", ::org::apache::lucene::search::suggest::InputIterator::initializeClass, ::java::util::Comparator::initializeClass, &a0, &a1, &p1, ::java::util::t_Comparator::parameters_))
                {
                  INT_CALL(object = SortedInputIterator(a0, a1));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_SortedInputIterator_contexts(t_SortedInputIterator *self)
          {
            ::java::util::Set result((jobject) NULL);
            OBJ_CALL(result = self->object.contexts());
            return ::java::util::t_Set::wrap_Object(result, &::org::apache::lucene::util::PY_TYPE(BytesRef));
          }

          static PyObject *t_SortedInputIterator_getComparator(t_SortedInputIterator *self)
          {
            ::java::util::Comparator result((jobject) NULL);
            OBJ_CALL(result = self->object.getComparator());
            return ::java::util::t_Comparator::wrap_Object(result, &::org::apache::lucene::util::PY_TYPE(BytesRef));
          }

          static PyObject *t_SortedInputIterator_hasContexts(t_SortedInputIterator *self)
          {
            jboolean result;
            OBJ_CALL(result = self->object.hasContexts());
            Py_RETURN_BOOL(result);
          }

          static PyObject *t_SortedInputIterator_hasPayloads(t_SortedInputIterator *self)
          {
            jboolean result;
            OBJ_CALL(result = self->object.hasPayloads());
            Py_RETURN_BOOL(result);
          }

          static PyObject *t_SortedInputIterator_next(t_SortedInputIterator *self)
          {
            ::org::apache::lucene::util::BytesRef result((jobject) NULL);
            OBJ_CALL(result = self->object.next());
            return ::org::apache::lucene::util::t_BytesRef::wrap_Object(result);
          }

          static PyObject *t_SortedInputIterator_payload(t_SortedInputIterator *self)
          {
            ::org::apache::lucene::util::BytesRef result((jobject) NULL);
            OBJ_CALL(result = self->object.payload());
            return ::org::apache::lucene::util::t_BytesRef::wrap_Object(result);
          }

          static PyObject *t_SortedInputIterator_weight(t_SortedInputIterator *self)
          {
            jlong result;
            OBJ_CALL(result = self->object.weight());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          static PyObject *t_SortedInputIterator_get__comparator(t_SortedInputIterator *self, void *data)
          {
            ::java::util::Comparator value((jobject) NULL);
            OBJ_CALL(value = self->object.getComparator());
            return ::java::util::t_Comparator::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queries/function/valuesource/TermFreqValueSource.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "org/apache/lucene/queries/function/FunctionValues.h"
#include "java/lang/Class.h"
#include "java/util/Map.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {

            ::java::lang::Class *TermFreqValueSource::class$ = NULL;
            jmethodID *TermFreqValueSource::mids$ = NULL;
            bool TermFreqValueSource::live$ = false;

            jclass TermFreqValueSource::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queries/function/valuesource/TermFreqValueSource");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_b45b6622] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Lorg/apache/lucene/util/BytesRef;)V");
                mids$[mid_getValues_4c566485] = env->getMethodID(cls, "getValues", "(Ljava/util/Map;Lorg/apache/lucene/index/AtomicReaderContext;)Lorg/apache/lucene/queries/function/FunctionValues;");
                mids$[mid_name_14c7b5c5] = env->getMethodID(cls, "name", "()Ljava/lang/String;");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            TermFreqValueSource::TermFreqValueSource(const ::java::lang::String & a0, const ::java::lang::String & a1, const ::java::lang::String & a2, const ::org::apache::lucene::util::BytesRef & a3) : ::org::apache::lucene::queries::function::valuesource::DocFreqValueSource(env->newObject(initializeClass, &mids$, mid_init$_b45b6622, a0.this$, a1.this$, a2.this$, a3.this$)) {}

            ::org::apache::lucene::queries::function::FunctionValues TermFreqValueSource::getValues(const ::java::util::Map & a0, const ::org::apache::lucene::index::AtomicReaderContext & a1) const
            {
              return ::org::apache::lucene::queries::function::FunctionValues(env->callObjectMethod(this$, mids$[mid_getValues_4c566485], a0.this$, a1.this$));
            }

            ::java::lang::String TermFreqValueSource::name() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_name_14c7b5c5]));
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {
            static PyObject *t_TermFreqValueSource_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_TermFreqValueSource_instance_(PyTypeObject *type, PyObject *arg);
            static int t_TermFreqValueSource_init_(t_TermFreqValueSource *self, PyObject *args, PyObject *kwds);
            static PyObject *t_TermFreqValueSource_getValues(t_TermFreqValueSource *self, PyObject *args);
            static PyObject *t_TermFreqValueSource_name(t_TermFreqValueSource *self, PyObject *args);

            static PyMethodDef t_TermFreqValueSource__methods_[] = {
              DECLARE_METHOD(t_TermFreqValueSource, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_TermFreqValueSource, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_TermFreqValueSource, getValues, METH_VARARGS),
              DECLARE_METHOD(t_TermFreqValueSource, name, METH_VARARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(TermFreqValueSource, t_TermFreqValueSource, ::org::apache::lucene::queries::function::valuesource::DocFreqValueSource, TermFreqValueSource, t_TermFreqValueSource_init_, 0, 0, 0, 0, 0);

            void t_TermFreqValueSource::install(PyObject *module)
            {
              installType(&PY_TYPE(TermFreqValueSource), module, "TermFreqValueSource", 0);
            }

            void t_TermFreqValueSource::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(TermFreqValueSource).tp_dict, "class_", make_descriptor(TermFreqValueSource::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(TermFreqValueSource).tp_dict, "wrapfn_", make_descriptor(t_TermFreqValueSource::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(TermFreqValueSource).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_TermFreqValueSource_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, TermFreqValueSource::initializeClass, 1)))
                return NULL;
              return t_TermFreqValueSource::wrap_Object(TermFreqValueSource(((t_TermFreqValueSource *) arg)->object.this$));
            }
            static PyObject *t_TermFreqValueSource_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, TermFreqValueSource::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_TermFreqValueSource_init_(t_TermFreqValueSource *self, PyObject *args, PyObject *kwds)
            {
              ::java::lang::String a0((jobject) NULL);
              ::java::lang::String a1((jobject) NULL);
              ::java::lang::String a2((jobject) NULL);
              ::org::apache::lucene::util::BytesRef a3((jobject) NULL);
              TermFreqValueSource object((jobject) NULL);

              if (!parseArgs(args, "sssk", ::org::apache::lucene::util::BytesRef::initializeClass, &a0, &a1, &a2, &a3))
              {
                INT_CALL(object = TermFreqValueSource(a0, a1, a2, a3));
                self->object = object;
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_TermFreqValueSource_getValues(t_TermFreqValueSource *self, PyObject *args)
            {
              ::java::util::Map a0((jobject) NULL);
              PyTypeObject **p0;
              ::org::apache::lucene::index::AtomicReaderContext a1((jobject) NULL);
              ::org::apache::lucene::queries::function::FunctionValues result((jobject) NULL);

              if (!parseArgs(args, "Kk", ::java::util::Map::initializeClass, ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_, &a1))
              {
                OBJ_CALL(result = self->object.getValues(a0, a1));
                return ::org::apache::lucene::queries::function::t_FunctionValues::wrap_Object(result);
              }

              return callSuper(&PY_TYPE(TermFreqValueSource), (PyObject *) self, "getValues", args, 2);
            }

            static PyObject *t_TermFreqValueSource_name(t_TermFreqValueSource *self, PyObject *args)
            {
              ::java::lang::String result((jobject) NULL);

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.name());
                return j2p(result);
              }

              return callSuper(&PY_TYPE(TermFreqValueSource), (PyObject *) self, "name", args, 2);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/store/RateLimiter.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {

        ::java::lang::Class *RateLimiter::class$ = NULL;
        jmethodID *RateLimiter::mids$ = NULL;
        bool RateLimiter::live$ = false;

        jclass RateLimiter::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/store/RateLimiter");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_getMbPerSec_54c6a174] = env->getMethodID(cls, "getMbPerSec", "()D");
            mids$[mid_getMinPauseCheckBytes_54c6a17a] = env->getMethodID(cls, "getMinPauseCheckBytes", "()J");
            mids$[mid_pause_0ee6df33] = env->getMethodID(cls, "pause", "(J)J");
            mids$[mid_setMbPerSec_5d1c7645] = env->getMethodID(cls, "setMbPerSec", "(D)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        RateLimiter::RateLimiter() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        jdouble RateLimiter::getMbPerSec() const
        {
          return env->callDoubleMethod(this$, mids$[mid_getMbPerSec_54c6a174]);
        }

        jlong RateLimiter::getMinPauseCheckBytes() const
        {
          return env->callLongMethod(this$, mids$[mid_getMinPauseCheckBytes_54c6a17a]);
        }

        jlong RateLimiter::pause(jlong a0) const
        {
          return env->callLongMethod(this$, mids$[mid_pause_0ee6df33], a0);
        }

        void RateLimiter::setMbPerSec(jdouble a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setMbPerSec_5d1c7645], a0);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"
#include "org/apache/lucene/store/RateLimiter$SimpleRateLimiter.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {
        static PyObject *t_RateLimiter_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_RateLimiter_instance_(PyTypeObject *type, PyObject *arg);
        static int t_RateLimiter_init_(t_RateLimiter *self, PyObject *args, PyObject *kwds);
        static PyObject *t_RateLimiter_getMbPerSec(t_RateLimiter *self);
        static PyObject *t_RateLimiter_getMinPauseCheckBytes(t_RateLimiter *self);
        static PyObject *t_RateLimiter_pause(t_RateLimiter *self, PyObject *arg);
        static PyObject *t_RateLimiter_setMbPerSec(t_RateLimiter *self, PyObject *arg);
        static PyObject *t_RateLimiter_get__mbPerSec(t_RateLimiter *self, void *data);
        static int t_RateLimiter_set__mbPerSec(t_RateLimiter *self, PyObject *arg, void *data);
        static PyObject *t_RateLimiter_get__minPauseCheckBytes(t_RateLimiter *self, void *data);
        static PyGetSetDef t_RateLimiter__fields_[] = {
          DECLARE_GETSET_FIELD(t_RateLimiter, mbPerSec),
          DECLARE_GET_FIELD(t_RateLimiter, minPauseCheckBytes),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_RateLimiter__methods_[] = {
          DECLARE_METHOD(t_RateLimiter, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_RateLimiter, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_RateLimiter, getMbPerSec, METH_NOARGS),
          DECLARE_METHOD(t_RateLimiter, getMinPauseCheckBytes, METH_NOARGS),
          DECLARE_METHOD(t_RateLimiter, pause, METH_O),
          DECLARE_METHOD(t_RateLimiter, setMbPerSec, METH_O),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(RateLimiter, t_RateLimiter, ::java::lang::Object, RateLimiter, t_RateLimiter_init_, 0, 0, t_RateLimiter__fields_, 0, 0);

        void t_RateLimiter::install(PyObject *module)
        {
          installType(&PY_TYPE(RateLimiter), module, "RateLimiter", 0);
          PyDict_SetItemString(PY_TYPE(RateLimiter).tp_dict, "SimpleRateLimiter", make_descriptor(&PY_TYPE(RateLimiter$SimpleRateLimiter)));
        }

        void t_RateLimiter::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(RateLimiter).tp_dict, "class_", make_descriptor(RateLimiter::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(RateLimiter).tp_dict, "wrapfn_", make_descriptor(t_RateLimiter::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(RateLimiter).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_RateLimiter_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, RateLimiter::initializeClass, 1)))
            return NULL;
          return t_RateLimiter::wrap_Object(RateLimiter(((t_RateLimiter *) arg)->object.this$));
        }
        static PyObject *t_RateLimiter_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, RateLimiter::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_RateLimiter_init_(t_RateLimiter *self, PyObject *args, PyObject *kwds)
        {
          RateLimiter object((jobject) NULL);

          INT_CALL(object = RateLimiter());
          self->object = object;

          return 0;
        }

        static PyObject *t_RateLimiter_getMbPerSec(t_RateLimiter *self)
        {
          jdouble result;
          OBJ_CALL(result = self->object.getMbPerSec());
          return PyFloat_FromDouble((double) result);
        }

        static PyObject *t_RateLimiter_getMinPauseCheckBytes(t_RateLimiter *self)
        {
          jlong result;
          OBJ_CALL(result = self->object.getMinPauseCheckBytes());
          return PyLong_FromLongLong((PY_LONG_LONG) result);
        }

        static PyObject *t_RateLimiter_pause(t_RateLimiter *self, PyObject *arg)
        {
          jlong a0;
          jlong result;

          if (!parseArg(arg, "J", &a0))
          {
            OBJ_CALL(result = self->object.pause(a0));
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          PyErr_SetArgsError((PyObject *) self, "pause", arg);
          return NULL;
        }

        static PyObject *t_RateLimiter_setMbPerSec(t_RateLimiter *self, PyObject *arg)
        {
          jdouble a0;

          if (!parseArg(arg, "D", &a0))
          {
            OBJ_CALL(self->object.setMbPerSec(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setMbPerSec", arg);
          return NULL;
        }

        static PyObject *t_RateLimiter_get__mbPerSec(t_RateLimiter *self, void *data)
        {
          jdouble value;
          OBJ_CALL(value = self->object.getMbPerSec());
          return PyFloat_FromDouble((double) value);
        }
        static int t_RateLimiter_set__mbPerSec(t_RateLimiter *self, PyObject *arg, void *data)
        {
          {
            jdouble value;
            if (!parseArg(arg, "D", &value))
            {
              INT_CALL(self->object.setMbPerSec(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "mbPerSec", arg);
          return -1;
        }

        static PyObject *t_RateLimiter_get__minPauseCheckBytes(t_RateLimiter *self, void *data)
        {
          jlong value;
          OBJ_CALL(value = self->object.getMinPauseCheckBytes());
          return PyLong_FromLongLong((PY_LONG_LONG) value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/PathQueryNode$QueryText.h"
#include "java/lang/Class.h"
#include "java/lang/Cloneable.h"
#include "java/lang/CloneNotSupportedException.h"
#include "java/lang/CharSequence.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace nodes {

              ::java::lang::Class *PathQueryNode$QueryText::class$ = NULL;
              jmethodID *PathQueryNode$QueryText::mids$ = NULL;
              bool PathQueryNode$QueryText::live$ = false;

              jclass PathQueryNode$QueryText::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/core/nodes/PathQueryNode$QueryText");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_6cc8d7e2] = env->getMethodID(cls, "<init>", "(Ljava/lang/CharSequence;II)V");
                  mids$[mid_clone_ec4055b6] = env->getMethodID(cls, "clone", "()Lorg/apache/lucene/queryparser/flexible/core/nodes/PathQueryNode$QueryText;");
                  mids$[mid_getBegin_54c6a179] = env->getMethodID(cls, "getBegin", "()I");
                  mids$[mid_getEnd_54c6a179] = env->getMethodID(cls, "getEnd", "()I");
                  mids$[mid_getValue_e0adba2f] = env->getMethodID(cls, "getValue", "()Ljava/lang/CharSequence;");
                  mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              PathQueryNode$QueryText::PathQueryNode$QueryText(const ::java::lang::CharSequence & a0, jint a1, jint a2) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_6cc8d7e2, a0.this$, a1, a2)) {}

              PathQueryNode$QueryText PathQueryNode$QueryText::clone() const
              {
                return PathQueryNode$QueryText(env->callObjectMethod(this$, mids$[mid_clone_ec4055b6]));
              }

              jint PathQueryNode$QueryText::getBegin() const
              {
                return env->callIntMethod(this$, mids$[mid_getBegin_54c6a179]);
              }

              jint PathQueryNode$QueryText::getEnd() const
              {
                return env->callIntMethod(this$, mids$[mid_getEnd_54c6a179]);
              }

              ::java::lang::CharSequence PathQueryNode$QueryText::getValue() const
              {
                return ::java::lang::CharSequence(env->callObjectMethod(this$, mids$[mid_getValue_e0adba2f]));
              }

              ::java::lang::String PathQueryNode$QueryText::toString() const
              {
                return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace nodes {
              static PyObject *t_PathQueryNode$QueryText_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_PathQueryNode$QueryText_instance_(PyTypeObject *type, PyObject *arg);
              static int t_PathQueryNode$QueryText_init_(t_PathQueryNode$QueryText *self, PyObject *args, PyObject *kwds);
              static PyObject *t_PathQueryNode$QueryText_clone(t_PathQueryNode$QueryText *self);
              static PyObject *t_PathQueryNode$QueryText_getBegin(t_PathQueryNode$QueryText *self);
              static PyObject *t_PathQueryNode$QueryText_getEnd(t_PathQueryNode$QueryText *self);
              static PyObject *t_PathQueryNode$QueryText_getValue(t_PathQueryNode$QueryText *self);
              static PyObject *t_PathQueryNode$QueryText_toString(t_PathQueryNode$QueryText *self, PyObject *args);
              static PyObject *t_PathQueryNode$QueryText_get__begin(t_PathQueryNode$QueryText *self, void *data);
              static PyObject *t_PathQueryNode$QueryText_get__end(t_PathQueryNode$QueryText *self, void *data);
              static PyObject *t_PathQueryNode$QueryText_get__value(t_PathQueryNode$QueryText *self, void *data);
              static PyGetSetDef t_PathQueryNode$QueryText__fields_[] = {
                DECLARE_GET_FIELD(t_PathQueryNode$QueryText, begin),
                DECLARE_GET_FIELD(t_PathQueryNode$QueryText, end),
                DECLARE_GET_FIELD(t_PathQueryNode$QueryText, value),
                { NULL, NULL, NULL, NULL, NULL }
              };

              static PyMethodDef t_PathQueryNode$QueryText__methods_[] = {
                DECLARE_METHOD(t_PathQueryNode$QueryText, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_PathQueryNode$QueryText, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_PathQueryNode$QueryText, clone, METH_NOARGS),
                DECLARE_METHOD(t_PathQueryNode$QueryText, getBegin, METH_NOARGS),
                DECLARE_METHOD(t_PathQueryNode$QueryText, getEnd, METH_NOARGS),
                DECLARE_METHOD(t_PathQueryNode$QueryText, getValue, METH_NOARGS),
                DECLARE_METHOD(t_PathQueryNode$QueryText, toString, METH_VARARGS),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(PathQueryNode$QueryText, t_PathQueryNode$QueryText, ::java::lang::Object, PathQueryNode$QueryText, t_PathQueryNode$QueryText_init_, 0, 0, t_PathQueryNode$QueryText__fields_, 0, 0);

              void t_PathQueryNode$QueryText::install(PyObject *module)
              {
                installType(&PY_TYPE(PathQueryNode$QueryText), module, "PathQueryNode$QueryText", 0);
              }

              void t_PathQueryNode$QueryText::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(PathQueryNode$QueryText).tp_dict, "class_", make_descriptor(PathQueryNode$QueryText::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(PathQueryNode$QueryText).tp_dict, "wrapfn_", make_descriptor(t_PathQueryNode$QueryText::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(PathQueryNode$QueryText).tp_dict, "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_PathQueryNode$QueryText_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, PathQueryNode$QueryText::initializeClass, 1)))
                  return NULL;
                return t_PathQueryNode$QueryText::wrap_Object(PathQueryNode$QueryText(((t_PathQueryNode$QueryText *) arg)->object.this$));
              }
              static PyObject *t_PathQueryNode$QueryText_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, PathQueryNode$QueryText::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_PathQueryNode$QueryText_init_(t_PathQueryNode$QueryText *self, PyObject *args, PyObject *kwds)
              {
                ::java::lang::CharSequence a0((jobject) NULL);
                jint a1;
                jint a2;
                PathQueryNode$QueryText object((jobject) NULL);

                if (!parseArgs(args, "OII", &::java::lang::PY_TYPE(CharSequence), &a0, &a1, &a2))
                {
                  INT_CALL(object = PathQueryNode$QueryText(a0, a1, a2));
                  self->object = object;
                }
                else
                {
                  PyErr_SetArgsError((PyObject *) self, "__init__", args);
                  return -1;
                }

                return 0;
              }

              static PyObject *t_PathQueryNode$QueryText_clone(t_PathQueryNode$QueryText *self)
              {
                PathQueryNode$QueryText result((jobject) NULL);
                OBJ_CALL(result = self->object.clone());
                return t_PathQueryNode$QueryText::wrap_Object(result);
              }

              static PyObject *t_PathQueryNode$QueryText_getBegin(t_PathQueryNode$QueryText *self)
              {
                jint result;
                OBJ_CALL(result = self->object.getBegin());
                return PyInt_FromLong((long) result);
              }

              static PyObject *t_PathQueryNode$QueryText_getEnd(t_PathQueryNode$QueryText *self)
              {
                jint result;
                OBJ_CALL(result = self->object.getEnd());
                return PyInt_FromLong((long) result);
              }

              static PyObject *t_PathQueryNode$QueryText_getValue(t_PathQueryNode$QueryText *self)
              {
                ::java::lang::CharSequence result((jobject) NULL);
                OBJ_CALL(result = self->object.getValue());
                return ::java::lang::t_CharSequence::wrap_Object(result);
              }

              static PyObject *t_PathQueryNode$QueryText_toString(t_PathQueryNode$QueryText *self, PyObject *args)
              {
                ::java::lang::String result((jobject) NULL);

                if (!parseArgs(args, ""))
                {
                  OBJ_CALL(result = self->object.toString());
                  return j2p(result);
                }

                return callSuper(&PY_TYPE(PathQueryNode$QueryText), (PyObject *) self, "toString", args, 2);
              }

              static PyObject *t_PathQueryNode$QueryText_get__begin(t_PathQueryNode$QueryText *self, void *data)
              {
                jint value;
                OBJ_CALL(value = self->object.getBegin());
                return PyInt_FromLong((long) value);
              }

              static PyObject *t_PathQueryNode$QueryText_get__end(t_PathQueryNode$QueryText *self, void *data)
              {
                jint value;
                OBJ_CALL(value = self->object.getEnd());
                return PyInt_FromLong((long) value);
              }

              static PyObject *t_PathQueryNode$QueryText_get__value(t_PathQueryNode$QueryText *self, void *data)
              {
                ::java::lang::CharSequence value((jobject) NULL);
                OBJ_CALL(value = self->object.getValue());
                return ::java::lang::t_CharSequence::wrap_Object(value);
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/core/processors/RemoveDeletedQueryNodesProcessor.h"
#include "org/apache/lucene/queryparser/flexible/core/QueryNodeException.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/QueryNode.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace processors {

              ::java::lang::Class *RemoveDeletedQueryNodesProcessor::class$ = NULL;
              jmethodID *RemoveDeletedQueryNodesProcessor::mids$ = NULL;
              bool RemoveDeletedQueryNodesProcessor::live$ = false;

              jclass RemoveDeletedQueryNodesProcessor::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/core/processors/RemoveDeletedQueryNodesProcessor");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
                  mids$[mid_process_6705aed7] = env->getMethodID(cls, "process", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;)Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;");
                  mids$[mid_preProcessNode_6705aed7] = env->getMethodID(cls, "preProcessNode", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;)Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;");
                  mids$[mid_setChildrenOrder_4f378251] = env->getMethodID(cls, "setChildrenOrder", "(Ljava/util/List;)Ljava/util/List;");
                  mids$[mid_postProcessNode_6705aed7] = env->getMethodID(cls, "postProcessNode", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;)Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              RemoveDeletedQueryNodesProcessor::RemoveDeletedQueryNodesProcessor() : ::org::apache::lucene::queryparser::flexible::core::processors::QueryNodeProcessorImpl(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

              ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode RemoveDeletedQueryNodesProcessor::process(const ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode & a0) const
              {
                return ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode(env->callObjectMethod(this$, mids$[mid_process_6705aed7], a0.this$));
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace processors {
              static PyObject *t_RemoveDeletedQueryNodesProcessor_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_RemoveDeletedQueryNodesProcessor_instance_(PyTypeObject *type, PyObject *arg);
              static int t_RemoveDeletedQueryNodesProcessor_init_(t_RemoveDeletedQueryNodesProcessor *self, PyObject *args, PyObject *kwds);
              static PyObject *t_RemoveDeletedQueryNodesProcessor_process(t_RemoveDeletedQueryNodesProcessor *self, PyObject *args);

              static PyMethodDef t_RemoveDeletedQueryNodesProcessor__methods_[] = {
                DECLARE_METHOD(t_RemoveDeletedQueryNodesProcessor, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_RemoveDeletedQueryNodesProcessor, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_RemoveDeletedQueryNodesProcessor, process, METH_VARARGS),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(RemoveDeletedQueryNodesProcessor, t_RemoveDeletedQueryNodesProcessor, ::org::apache::lucene::queryparser::flexible::core::processors::QueryNodeProcessorImpl, RemoveDeletedQueryNodesProcessor, t_RemoveDeletedQueryNodesProcessor_init_, 0, 0, 0, 0, 0);

              void t_RemoveDeletedQueryNodesProcessor::install(PyObject *module)
              {
                installType(&PY_TYPE(RemoveDeletedQueryNodesProcessor), module, "RemoveDeletedQueryNodesProcessor", 0);
              }

              void t_RemoveDeletedQueryNodesProcessor::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(RemoveDeletedQueryNodesProcessor).tp_dict, "class_", make_descriptor(RemoveDeletedQueryNodesProcessor::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(RemoveDeletedQueryNodesProcessor).tp_dict, "wrapfn_", make_descriptor(t_RemoveDeletedQueryNodesProcessor::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(RemoveDeletedQueryNodesProcessor).tp_dict, "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_RemoveDeletedQueryNodesProcessor_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, RemoveDeletedQueryNodesProcessor::initializeClass, 1)))
                  return NULL;
                return t_RemoveDeletedQueryNodesProcessor::wrap_Object(RemoveDeletedQueryNodesProcessor(((t_RemoveDeletedQueryNodesProcessor *) arg)->object.this$));
              }
              static PyObject *t_RemoveDeletedQueryNodesProcessor_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, RemoveDeletedQueryNodesProcessor::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_RemoveDeletedQueryNodesProcessor_init_(t_RemoveDeletedQueryNodesProcessor *self, PyObject *args, PyObject *kwds)
              {
                RemoveDeletedQueryNodesProcessor object((jobject) NULL);

                INT_CALL(object = RemoveDeletedQueryNodesProcessor());
                self->object = object;

                return 0;
              }

              static PyObject *t_RemoveDeletedQueryNodesProcessor_process(t_RemoveDeletedQueryNodesProcessor *self, PyObject *args)
              {
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode a0((jobject) NULL);
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode result((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode::initializeClass, &a0))
                {
                  OBJ_CALL(result = self->object.process(a0));
                  return ::org::apache::lucene::queryparser::flexible::core::nodes::t_QueryNode::wrap_Object(result);
                }

                return callSuper(&PY_TYPE(RemoveDeletedQueryNodesProcessor), (PyObject *) self, "process", args, 2);
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/RamUsageEstimator.h"
#include "java/lang/Long.h"
#include "java/lang/Class.h"
#include "java/text/DecimalFormat.h"
#include "org/apache/lucene/util/RamUsageEstimator$JvmFeature.h"
#include "java/lang/String.h"
#include "java/util/EnumSet.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *RamUsageEstimator::class$ = NULL;
        jmethodID *RamUsageEstimator::mids$ = NULL;
        bool RamUsageEstimator::live$ = false;
        ::java::lang::String *RamUsageEstimator::JVM_INFO_STRING = NULL;
        jint RamUsageEstimator::NUM_BYTES_ARRAY_HEADER = (jint) 0;
        jint RamUsageEstimator::NUM_BYTES_BOOLEAN = (jint) 0;
        jint RamUsageEstimator::NUM_BYTES_BYTE = (jint) 0;
        jint RamUsageEstimator::NUM_BYTES_CHAR = (jint) 0;
        jint RamUsageEstimator::NUM_BYTES_DOUBLE = (jint) 0;
        jint RamUsageEstimator::NUM_BYTES_FLOAT = (jint) 0;
        jint RamUsageEstimator::NUM_BYTES_INT = (jint) 0;
        jint RamUsageEstimator::NUM_BYTES_LONG = (jint) 0;
        jint RamUsageEstimator::NUM_BYTES_OBJECT_ALIGNMENT = (jint) 0;
        jint RamUsageEstimator::NUM_BYTES_OBJECT_HEADER = (jint) 0;
        jint RamUsageEstimator::NUM_BYTES_OBJECT_REF = (jint) 0;
        jint RamUsageEstimator::NUM_BYTES_SHORT = (jint) 0;
        jlong RamUsageEstimator::ONE_GB = (jlong) 0;
        jlong RamUsageEstimator::ONE_KB = (jlong) 0;
        jlong RamUsageEstimator::ONE_MB = (jlong) 0;

        jclass RamUsageEstimator::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/RamUsageEstimator");

            mids$ = new jmethodID[max_mid];
            mids$[mid_alignObjectSize_0ee6df33] = env->getStaticMethodID(cls, "alignObjectSize", "(J)J");
            mids$[mid_getSupportedFeatures_eebf2c68] = env->getStaticMethodID(cls, "getSupportedFeatures", "()Ljava/util/EnumSet;");
            mids$[mid_getUnsupportedFeatures_eebf2c68] = env->getStaticMethodID(cls, "getUnsupportedFeatures", "()Ljava/util/EnumSet;");
            mids$[mid_humanReadableUnits_3e02f30e] = env->getStaticMethodID(cls, "humanReadableUnits", "(J)Ljava/lang/String;");
            mids$[mid_humanReadableUnits_d1b61567] = env->getStaticMethodID(cls, "humanReadableUnits", "(JLjava/text/DecimalFormat;)Ljava/lang/String;");
            mids$[mid_isSupportedJVM_54c6a16a] = env->getStaticMethodID(cls, "isSupportedJVM", "()Z");
            mids$[mid_shallowSizeOf_c0f5dac6] = env->getStaticMethodID(cls, "shallowSizeOf", "([Ljava/lang/Object;)J");
            mids$[mid_shallowSizeOf_290588f2] = env->getStaticMethodID(cls, "shallowSizeOf", "(Ljava/lang/Object;)J");
            mids$[mid_shallowSizeOfInstance_a5deafe8] = env->getStaticMethodID(cls, "shallowSizeOfInstance", "(Ljava/lang/Class;)J");
            mids$[mid_sizeOf_f0c5b9df] = env->getStaticMethodID(cls, "sizeOf", "([Z)J");
            mids$[mid_sizeOf_da55802d] = env->getStaticMethodID(cls, "sizeOf", "(Ljava/lang/Long;)J");
            mids$[mid_sizeOf_c017fc5a] = env->getStaticMethodID(cls, "sizeOf", "([S)J");
            mids$[mid_sizeOf_9cc34323] = env->getStaticMethodID(cls, "sizeOf", "([F)J");
            mids$[mid_sizeOf_9ceb500f] = env->getStaticMethodID(cls, "sizeOf", "([J)J");
            mids$[mid_sizeOf_1efc2014] = env->getStaticMethodID(cls, "sizeOf", "([I)J");
            mids$[mid_sizeOf_f3b62cc5] = env->getStaticMethodID(cls, "sizeOf", "([D)J");
            mids$[mid_sizeOf_49b4f137] = env->getStaticMethodID(cls, "sizeOf", "([B)J");
            mids$[mid_sizeOf_700e23ca] = env->getStaticMethodID(cls, "sizeOf", "([C)J");

            class$ = (::java::lang::Class *) new JObject(cls);
            cls = (jclass) class$->this$;

            JVM_INFO_STRING = new ::java::lang::String(env->getStaticObjectField(cls, "JVM_INFO_STRING", "Ljava/lang/String;"));
            NUM_BYTES_ARRAY_HEADER = env->getStaticIntField(cls, "NUM_BYTES_ARRAY_HEADER");
            NUM_BYTES_BOOLEAN = env->getStaticIntField(cls, "NUM_BYTES_BOOLEAN");
            NUM_BYTES_BYTE = env->getStaticIntField(cls, "NUM_BYTES_BYTE");
            NUM_BYTES_CHAR = env->getStaticIntField(cls, "NUM_BYTES_CHAR");
            NUM_BYTES_DOUBLE = env->getStaticIntField(cls, "NUM_BYTES_DOUBLE");
            NUM_BYTES_FLOAT = env->getStaticIntField(cls, "NUM_BYTES_FLOAT");
            NUM_BYTES_INT = env->getStaticIntField(cls, "NUM_BYTES_INT");
            NUM_BYTES_LONG = env->getStaticIntField(cls, "NUM_BYTES_LONG");
            NUM_BYTES_OBJECT_ALIGNMENT = env->getStaticIntField(cls, "NUM_BYTES_OBJECT_ALIGNMENT");
            NUM_BYTES_OBJECT_HEADER = env->getStaticIntField(cls, "NUM_BYTES_OBJECT_HEADER");
            NUM_BYTES_OBJECT_REF = env->getStaticIntField(cls, "NUM_BYTES_OBJECT_REF");
            NUM_BYTES_SHORT = env->getStaticIntField(cls, "NUM_BYTES_SHORT");
            ONE_GB = env->getStaticLongField(cls, "ONE_GB");
            ONE_KB = env->getStaticLongField(cls, "ONE_KB");
            ONE_MB = env->getStaticLongField(cls, "ONE_MB");
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        jlong RamUsageEstimator::alignObjectSize(jlong a0)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticLongMethod(cls, mids$[mid_alignObjectSize_0ee6df33], a0);
        }

        ::java::util::EnumSet RamUsageEstimator::getSupportedFeatures()
        {
          jclass cls = env->getClass(initializeClass);
          return ::java::util::EnumSet(env->callStaticObjectMethod(cls, mids$[mid_getSupportedFeatures_eebf2c68]));
        }

        ::java::util::EnumSet RamUsageEstimator::getUnsupportedFeatures()
        {
          jclass cls = env->getClass(initializeClass);
          return ::java::util::EnumSet(env->callStaticObjectMethod(cls, mids$[mid_getUnsupportedFeatures_eebf2c68]));
        }

        ::java::lang::String RamUsageEstimator::humanReadableUnits(jlong a0)
        {
          jclass cls = env->getClass(initializeClass);
          return ::java::lang::String(env->callStaticObjectMethod(cls, mids$[mid_humanReadableUnits_3e02f30e], a0));
        }

        ::java::lang::String RamUsageEstimator::humanReadableUnits(jlong a0, const ::java::text::DecimalFormat & a1)
        {
          jclass cls = env->getClass(initializeClass);
          return ::java::lang::String(env->callStaticObjectMethod(cls, mids$[mid_humanReadableUnits_d1b61567], a0, a1.this$));
        }

        jboolean RamUsageEstimator::isSupportedJVM()
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticBooleanMethod(cls, mids$[mid_isSupportedJVM_54c6a16a]);
        }

        jlong RamUsageEstimator::shallowSizeOf(const JArray< ::java::lang::Object > & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticLongMethod(cls, mids$[mid_shallowSizeOf_c0f5dac6], a0.this$);
        }

        jlong RamUsageEstimator::shallowSizeOf(const ::java::lang::Object & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticLongMethod(cls, mids$[mid_shallowSizeOf_290588f2], a0.this$);
        }

        jlong RamUsageEstimator::shallowSizeOfInstance(const ::java::lang::Class & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticLongMethod(cls, mids$[mid_shallowSizeOfInstance_a5deafe8], a0.this$);
        }

        jlong RamUsageEstimator::sizeOf(const JArray< jboolean > & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticLongMethod(cls, mids$[mid_sizeOf_f0c5b9df], a0.this$);
        }

        jlong RamUsageEstimator::sizeOf(const ::java::lang::Long & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticLongMethod(cls, mids$[mid_sizeOf_da55802d], a0.this$);
        }

        jlong RamUsageEstimator::sizeOf(const JArray< jshort > & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticLongMethod(cls, mids$[mid_sizeOf_c017fc5a], a0.this$);
        }

        jlong RamUsageEstimator::sizeOf(const JArray< jfloat > & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticLongMethod(cls, mids$[mid_sizeOf_9cc34323], a0.this$);
        }

        jlong RamUsageEstimator::sizeOf(const JArray< jlong > & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticLongMethod(cls, mids$[mid_sizeOf_9ceb500f], a0.this$);
        }

        jlong RamUsageEstimator::sizeOf(const JArray< jint > & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticLongMethod(cls, mids$[mid_sizeOf_1efc2014], a0.this$);
        }

        jlong RamUsageEstimator::sizeOf(const JArray< jdouble > & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticLongMethod(cls, mids$[mid_sizeOf_f3b62cc5], a0.this$);
        }

        jlong RamUsageEstimator::sizeOf(const JArray< jbyte > & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticLongMethod(cls, mids$[mid_sizeOf_49b4f137], a0.this$);
        }

        jlong RamUsageEstimator::sizeOf(const JArray< jchar > & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticLongMethod(cls, mids$[mid_sizeOf_700e23ca], a0.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_RamUsageEstimator_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_RamUsageEstimator_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_RamUsageEstimator_alignObjectSize(PyTypeObject *type, PyObject *arg);
        static PyObject *t_RamUsageEstimator_getSupportedFeatures(PyTypeObject *type);
        static PyObject *t_RamUsageEstimator_getUnsupportedFeatures(PyTypeObject *type);
        static PyObject *t_RamUsageEstimator_humanReadableUnits(PyTypeObject *type, PyObject *args);
        static PyObject *t_RamUsageEstimator_isSupportedJVM(PyTypeObject *type);
        static PyObject *t_RamUsageEstimator_shallowSizeOf(PyTypeObject *type, PyObject *args);
        static PyObject *t_RamUsageEstimator_shallowSizeOfInstance(PyTypeObject *type, PyObject *arg);
        static PyObject *t_RamUsageEstimator_sizeOf(PyTypeObject *type, PyObject *args);
        static PyObject *t_RamUsageEstimator_get__supportedFeatures(t_RamUsageEstimator *self, void *data);
        static PyObject *t_RamUsageEstimator_get__supportedJVM(t_RamUsageEstimator *self, void *data);
        static PyObject *t_RamUsageEstimator_get__unsupportedFeatures(t_RamUsageEstimator *self, void *data);
        static PyGetSetDef t_RamUsageEstimator__fields_[] = {
          DECLARE_GET_FIELD(t_RamUsageEstimator, supportedFeatures),
          DECLARE_GET_FIELD(t_RamUsageEstimator, supportedJVM),
          DECLARE_GET_FIELD(t_RamUsageEstimator, unsupportedFeatures),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_RamUsageEstimator__methods_[] = {
          DECLARE_METHOD(t_RamUsageEstimator, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_RamUsageEstimator, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_RamUsageEstimator, alignObjectSize, METH_O | METH_CLASS),
          DECLARE_METHOD(t_RamUsageEstimator, getSupportedFeatures, METH_NOARGS | METH_CLASS),
          DECLARE_METHOD(t_RamUsageEstimator, getUnsupportedFeatures, METH_NOARGS | METH_CLASS),
          DECLARE_METHOD(t_RamUsageEstimator, humanReadableUnits, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_RamUsageEstimator, isSupportedJVM, METH_NOARGS | METH_CLASS),
          DECLARE_METHOD(t_RamUsageEstimator, shallowSizeOf, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_RamUsageEstimator, shallowSizeOfInstance, METH_O | METH_CLASS),
          DECLARE_METHOD(t_RamUsageEstimator, sizeOf, METH_VARARGS | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(RamUsageEstimator, t_RamUsageEstimator, ::java::lang::Object, RamUsageEstimator, abstract_init, 0, 0, t_RamUsageEstimator__fields_, 0, 0);

        void t_RamUsageEstimator::install(PyObject *module)
        {
          installType(&PY_TYPE(RamUsageEstimator), module, "RamUsageEstimator", 0);
          PyDict_SetItemString(PY_TYPE(RamUsageEstimator).tp_dict, "JvmFeature", make_descriptor(&PY_TYPE(RamUsageEstimator$JvmFeature)));
        }

        void t_RamUsageEstimator::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(RamUsageEstimator).tp_dict, "class_", make_descriptor(RamUsageEstimator::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(RamUsageEstimator).tp_dict, "wrapfn_", make_descriptor(t_RamUsageEstimator::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(RamUsageEstimator).tp_dict, "boxfn_", make_descriptor(boxObject));
          env->getClass(RamUsageEstimator::initializeClass);
          PyDict_SetItemString(PY_TYPE(RamUsageEstimator).tp_dict, "JVM_INFO_STRING", make_descriptor(j2p(*RamUsageEstimator::JVM_INFO_STRING)));
          PyDict_SetItemString(PY_TYPE(RamUsageEstimator).tp_dict, "NUM_BYTES_ARRAY_HEADER", make_descriptor(RamUsageEstimator::NUM_BYTES_ARRAY_HEADER));
          PyDict_SetItemString(PY_TYPE(RamUsageEstimator).tp_dict, "NUM_BYTES_BOOLEAN", make_descriptor(RamUsageEstimator::NUM_BYTES_BOOLEAN));
          PyDict_SetItemString(PY_TYPE(RamUsageEstimator).tp_dict, "NUM_BYTES_BYTE", make_descriptor(RamUsageEstimator::NUM_BYTES_BYTE));
          PyDict_SetItemString(PY_TYPE(RamUsageEstimator).tp_dict, "NUM_BYTES_CHAR", make_descriptor(RamUsageEstimator::NUM_BYTES_CHAR));
          PyDict_SetItemString(PY_TYPE(RamUsageEstimator).tp_dict, "NUM_BYTES_DOUBLE", make_descriptor(RamUsageEstimator::NUM_BYTES_DOUBLE));
          PyDict_SetItemString(PY_TYPE(RamUsageEstimator).tp_dict, "NUM_BYTES_FLOAT", make_descriptor(RamUsageEstimator::NUM_BYTES_FLOAT));
          PyDict_SetItemString(PY_TYPE(RamUsageEstimator).tp_dict, "NUM_BYTES_INT", make_descriptor(RamUsageEstimator::NUM_BYTES_INT));
          PyDict_SetItemString(PY_TYPE(RamUsageEstimator).tp_dict, "NUM_BYTES_LONG", make_descriptor(RamUsageEstimator::NUM_BYTES_LONG));
          PyDict_SetItemString(PY_TYPE(RamUsageEstimator).tp_dict, "NUM_BYTES_OBJECT_ALIGNMENT", make_descriptor(RamUsageEstimator::NUM_BYTES_OBJECT_ALIGNMENT));
          PyDict_SetItemString(PY_TYPE(RamUsageEstimator).tp_dict, "NUM_BYTES_OBJECT_HEADER", make_descriptor(RamUsageEstimator::NUM_BYTES_OBJECT_HEADER));
          PyDict_SetItemString(PY_TYPE(RamUsageEstimator).tp_dict, "NUM_BYTES_OBJECT_REF", make_descriptor(RamUsageEstimator::NUM_BYTES_OBJECT_REF));
          PyDict_SetItemString(PY_TYPE(RamUsageEstimator).tp_dict, "NUM_BYTES_SHORT", make_descriptor(RamUsageEstimator::NUM_BYTES_SHORT));
          PyDict_SetItemString(PY_TYPE(RamUsageEstimator).tp_dict, "ONE_GB", make_descriptor(RamUsageEstimator::ONE_GB));
          PyDict_SetItemString(PY_TYPE(RamUsageEstimator).tp_dict, "ONE_KB", make_descriptor(RamUsageEstimator::ONE_KB));
          PyDict_SetItemString(PY_TYPE(RamUsageEstimator).tp_dict, "ONE_MB", make_descriptor(RamUsageEstimator::ONE_MB));
        }

        static PyObject *t_RamUsageEstimator_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, RamUsageEstimator::initializeClass, 1)))
            return NULL;
          return t_RamUsageEstimator::wrap_Object(RamUsageEstimator(((t_RamUsageEstimator *) arg)->object.this$));
        }
        static PyObject *t_RamUsageEstimator_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, RamUsageEstimator::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_RamUsageEstimator_alignObjectSize(PyTypeObject *type, PyObject *arg)
        {
          jlong a0;
          jlong result;

          if (!parseArg(arg, "J", &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::util::RamUsageEstimator::alignObjectSize(a0));
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          PyErr_SetArgsError(type, "alignObjectSize", arg);
          return NULL;
        }

        static PyObject *t_RamUsageEstimator_getSupportedFeatures(PyTypeObject *type)
        {
          ::java::util::EnumSet result((jobject) NULL);
          OBJ_CALL(result = ::org::apache::lucene::util::RamUsageEstimator::getSupportedFeatures());
          return ::java::util::t_EnumSet::wrap_Object(result, &::org::apache::lucene::util::PY_TYPE(RamUsageEstimator$JvmFeature));
        }

        static PyObject *t_RamUsageEstimator_getUnsupportedFeatures(PyTypeObject *type)
        {
          ::java::util::EnumSet result((jobject) NULL);
          OBJ_CALL(result = ::org::apache::lucene::util::RamUsageEstimator::getUnsupportedFeatures());
          return ::java::util::t_EnumSet::wrap_Object(result, &::org::apache::lucene::util::PY_TYPE(RamUsageEstimator$JvmFeature));
        }

        static PyObject *t_RamUsageEstimator_humanReadableUnits(PyTypeObject *type, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              jlong a0;
              ::java::lang::String result((jobject) NULL);

              if (!parseArgs(args, "J", &a0))
              {
                OBJ_CALL(result = ::org::apache::lucene::util::RamUsageEstimator::humanReadableUnits(a0));
                return j2p(result);
              }
            }
            break;
           case 2:
            {
              jlong a0;
              ::java::text::DecimalFormat a1((jobject) NULL);
              ::java::lang::String result((jobject) NULL);

              if (!parseArgs(args, "Jk", ::java::text::DecimalFormat::initializeClass, &a0, &a1))
              {
                OBJ_CALL(result = ::org::apache::lucene::util::RamUsageEstimator::humanReadableUnits(a0, a1));
                return j2p(result);
              }
            }
          }

          PyErr_SetArgsError(type, "humanReadableUnits", args);
          return NULL;
        }

        static PyObject *t_RamUsageEstimator_isSupportedJVM(PyTypeObject *type)
        {
          jboolean result;
          OBJ_CALL(result = ::org::apache::lucene::util::RamUsageEstimator::isSupportedJVM());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_RamUsageEstimator_shallowSizeOf(PyTypeObject *type, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              JArray< ::java::lang::Object > a0((jobject) NULL);
              jlong result;

              if (!parseArgs(args, "[o", &a0))
              {
                OBJ_CALL(result = ::org::apache::lucene::util::RamUsageEstimator::shallowSizeOf(a0));
                return PyLong_FromLongLong((PY_LONG_LONG) result);
              }
            }
            {
              ::java::lang::Object a0((jobject) NULL);
              jlong result;

              if (!parseArgs(args, "o", &a0))
              {
                OBJ_CALL(result = ::org::apache::lucene::util::RamUsageEstimator::shallowSizeOf(a0));
                return PyLong_FromLongLong((PY_LONG_LONG) result);
              }
            }
          }

          PyErr_SetArgsError(type, "shallowSizeOf", args);
          return NULL;
        }

        static PyObject *t_RamUsageEstimator_shallowSizeOfInstance(PyTypeObject *type, PyObject *arg)
        {
          ::java::lang::Class a0((jobject) NULL);
          PyTypeObject **p0;
          jlong result;

          if (!parseArg(arg, "K", ::java::lang::Class::initializeClass, &a0, &p0, ::java::lang::t_Class::parameters_))
          {
            OBJ_CALL(result = ::org::apache::lucene::util::RamUsageEstimator::shallowSizeOfInstance(a0));
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          PyErr_SetArgsError(type, "shallowSizeOfInstance", arg);
          return NULL;
        }

        static PyObject *t_RamUsageEstimator_sizeOf(PyTypeObject *type, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              JArray< jboolean > a0((jobject) NULL);
              jlong result;

              if (!parseArgs(args, "[Z", &a0))
              {
                OBJ_CALL(result = ::org::apache::lucene::util::RamUsageEstimator::sizeOf(a0));
                return PyLong_FromLongLong((PY_LONG_LONG) result);
              }
            }
            {
              ::java::lang::Long a0((jobject) NULL);
              jlong result;

              if (!parseArgs(args, "O", &::java::lang::PY_TYPE(Long), &a0))
              {
                OBJ_CALL(result = ::org::apache::lucene::util::RamUsageEstimator::sizeOf(a0));
                return PyLong_FromLongLong((PY_LONG_LONG) result);
              }
            }
            {
              JArray< jshort > a0((jobject) NULL);
              jlong result;

              if (!parseArgs(args, "[S", &a0))
              {
                OBJ_CALL(result = ::org::apache::lucene::util::RamUsageEstimator::sizeOf(a0));
                return PyLong_FromLongLong((PY_LONG_LONG) result);
              }
            }
            {
              JArray< jfloat > a0((jobject) NULL);
              jlong result;

              if (!parseArgs(args, "[F", &a0))
              {
                OBJ_CALL(result = ::org::apache::lucene::util::RamUsageEstimator::sizeOf(a0));
                return PyLong_FromLongLong((PY_LONG_LONG) result);
              }
            }
            {
              JArray< jlong > a0((jobject) NULL);
              jlong result;

              if (!parseArgs(args, "[J", &a0))
              {
                OBJ_CALL(result = ::org::apache::lucene::util::RamUsageEstimator::sizeOf(a0));
                return PyLong_FromLongLong((PY_LONG_LONG) result);
              }
            }
            {
              JArray< jint > a0((jobject) NULL);
              jlong result;

              if (!parseArgs(args, "[I", &a0))
              {
                OBJ_CALL(result = ::org::apache::lucene::util::RamUsageEstimator::sizeOf(a0));
                return PyLong_FromLongLong((PY_LONG_LONG) result);
              }
            }
            {
              JArray< jdouble > a0((jobject) NULL);
              jlong result;

              if (!parseArgs(args, "[D", &a0))
              {
                OBJ_CALL(result = ::org::apache::lucene::util::RamUsageEstimator::sizeOf(a0));
                return PyLong_FromLongLong((PY_LONG_LONG) result);
              }
            }
            {
              JArray< jbyte > a0((jobject) NULL);
              jlong result;

              if (!parseArgs(args, "[B", &a0))
              {
                OBJ_CALL(result = ::org::apache::lucene::util::RamUsageEstimator::sizeOf(a0));
                return PyLong_FromLongLong((PY_LONG_LONG) result);
              }
            }
            {
              JArray< jchar > a0((jobject) NULL);
              jlong result;

              if (!parseArgs(args, "[C", &a0))
              {
                OBJ_CALL(result = ::org::apache::lucene::util::RamUsageEstimator::sizeOf(a0));
                return PyLong_FromLongLong((PY_LONG_LONG) result);
              }
            }
          }

          PyErr_SetArgsError(type, "sizeOf", args);
          return NULL;
        }

        static PyObject *t_RamUsageEstimator_get__supportedFeatures(t_RamUsageEstimator *self, void *data)
        {
          ::java::util::EnumSet value((jobject) NULL);
          OBJ_CALL(value = self->object.getSupportedFeatures());
          return ::java::util::t_EnumSet::wrap_Object(value);
        }

        static PyObject *t_RamUsageEstimator_get__supportedJVM(t_RamUsageEstimator *self, void *data)
        {
          jboolean value;
          OBJ_CALL(value = self->object.isSupportedJVM());
          Py_RETURN_BOOL(value);
        }

        static PyObject *t_RamUsageEstimator_get__unsupportedFeatures(t_RamUsageEstimator *self, void *data)
        {
          ::java::util::EnumSet value((jobject) NULL);
          OBJ_CALL(value = self->object.getUnsupportedFeatures());
          return ::java::util::t_EnumSet::wrap_Object(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/FieldComparator$LongComparator.h"
#include "java/lang/Long.h"
#include "org/apache/lucene/search/FieldCache$Parser.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/search/FieldComparator.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *FieldComparator$LongComparator::class$ = NULL;
        jmethodID *FieldComparator$LongComparator::mids$ = NULL;
        bool FieldComparator$LongComparator::live$ = false;

        jclass FieldComparator$LongComparator::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/FieldComparator$LongComparator");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_a6072141] = env->getMethodID(cls, "<init>", "(ILjava/lang/String;Lorg/apache/lucene/search/FieldCache$Parser;Ljava/lang/Long;)V");
            mids$[mid_compare_d8d154b9] = env->getMethodID(cls, "compare", "(II)I");
            mids$[mid_compareBottom_39c7bd23] = env->getMethodID(cls, "compareBottom", "(I)I");
            mids$[mid_compareTop_39c7bd23] = env->getMethodID(cls, "compareTop", "(I)I");
            mids$[mid_copy_d8d154a6] = env->getMethodID(cls, "copy", "(II)V");
            mids$[mid_setBottom_39c7bd3c] = env->getMethodID(cls, "setBottom", "(I)V");
            mids$[mid_setNextReader_6329aed7] = env->getMethodID(cls, "setNextReader", "(Lorg/apache/lucene/index/AtomicReaderContext;)Lorg/apache/lucene/search/FieldComparator;");
            mids$[mid_setTopValue_da558031] = env->getMethodID(cls, "setTopValue", "(Ljava/lang/Long;)V");
            mids$[mid_value_67140e92] = env->getMethodID(cls, "value", "(I)Ljava/lang/Long;");
            mids$[mid_getLongValues_8288bb5d] = env->getMethodID(cls, "getLongValues", "(Lorg/apache/lucene/index/AtomicReaderContext;Ljava/lang/String;)Lorg/apache/lucene/search/FieldCache$Longs;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        FieldComparator$LongComparator::FieldComparator$LongComparator(jint a0, const ::java::lang::String & a1, const ::org::apache::lucene::search::FieldCache$Parser & a2, const ::java::lang::Long & a3) : ::org::apache::lucene::search::FieldComparator$NumericComparator(env->newObject(initializeClass, &mids$, mid_init$_a6072141, a0, a1.this$, a2.this$, a3.this$)) {}

        jint FieldComparator$LongComparator::compare(jint a0, jint a1) const
        {
          return env->callIntMethod(this$, mids$[mid_compare_d8d154b9], a0, a1);
        }

        jint FieldComparator$LongComparator::compareBottom(jint a0) const
        {
          return env->callIntMethod(this$, mids$[mid_compareBottom_39c7bd23], a0);
        }

        jint FieldComparator$LongComparator::compareTop(jint a0) const
        {
          return env->callIntMethod(this$, mids$[mid_compareTop_39c7bd23], a0);
        }

        void FieldComparator$LongComparator::copy(jint a0, jint a1) const
        {
          env->callVoidMethod(this$, mids$[mid_copy_d8d154a6], a0, a1);
        }

        void FieldComparator$LongComparator::setBottom(jint a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setBottom_39c7bd3c], a0);
        }

        ::org::apache::lucene::search::FieldComparator FieldComparator$LongComparator::setNextReader(const ::org::apache::lucene::index::AtomicReaderContext & a0) const
        {
          return ::org::apache::lucene::search::FieldComparator(env->callObjectMethod(this$, mids$[mid_setNextReader_6329aed7], a0.this$));
        }

        void FieldComparator$LongComparator::setTopValue(const ::java::lang::Long & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setTopValue_da558031], a0.this$);
        }

        ::java::lang::Long FieldComparator$LongComparator::value(jint a0) const
        {
          return ::java::lang::Long(env->callObjectMethod(this$, mids$[mid_value_67140e92], a0));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_FieldComparator$LongComparator_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FieldComparator$LongComparator_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FieldComparator$LongComparator_of_(t_FieldComparator$LongComparator *self, PyObject *args);
        static int t_FieldComparator$LongComparator_init_(t_FieldComparator$LongComparator *self, PyObject *args, PyObject *kwds);
        static PyObject *t_FieldComparator$LongComparator_compare(t_FieldComparator$LongComparator *self, PyObject *args);
        static PyObject *t_FieldComparator$LongComparator_compareBottom(t_FieldComparator$LongComparator *self, PyObject *args);
        static PyObject *t_FieldComparator$LongComparator_compareTop(t_FieldComparator$LongComparator *self, PyObject *args);
        static PyObject *t_FieldComparator$LongComparator_copy(t_FieldComparator$LongComparator *self, PyObject *args);
        static PyObject *t_FieldComparator$LongComparator_setBottom(t_FieldComparator$LongComparator *self, PyObject *args);
        static PyObject *t_FieldComparator$LongComparator_setNextReader(t_FieldComparator$LongComparator *self, PyObject *args);
        static PyObject *t_FieldComparator$LongComparator_setTopValue(t_FieldComparator$LongComparator *self, PyObject *args);
        static PyObject *t_FieldComparator$LongComparator_value(t_FieldComparator$LongComparator *self, PyObject *args);
        static int t_FieldComparator$LongComparator_set__bottom(t_FieldComparator$LongComparator *self, PyObject *arg, void *data);
        static int t_FieldComparator$LongComparator_set__nextReader(t_FieldComparator$LongComparator *self, PyObject *arg, void *data);
        static int t_FieldComparator$LongComparator_set__topValue(t_FieldComparator$LongComparator *self, PyObject *arg, void *data);
        static PyObject *t_FieldComparator$LongComparator_get__parameters_(t_FieldComparator$LongComparator *self, void *data);
        static PyGetSetDef t_FieldComparator$LongComparator__fields_[] = {
          DECLARE_SET_FIELD(t_FieldComparator$LongComparator, bottom),
          DECLARE_SET_FIELD(t_FieldComparator$LongComparator, nextReader),
          DECLARE_SET_FIELD(t_FieldComparator$LongComparator, topValue),
          DECLARE_GET_FIELD(t_FieldComparator$LongComparator, parameters_),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_FieldComparator$LongComparator__methods_[] = {
          DECLARE_METHOD(t_FieldComparator$LongComparator, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FieldComparator$LongComparator, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FieldComparator$LongComparator, of_, METH_VARARGS),
          DECLARE_METHOD(t_FieldComparator$LongComparator, compare, METH_VARARGS),
          DECLARE_METHOD(t_FieldComparator$LongComparator, compareBottom, METH_VARARGS),
          DECLARE_METHOD(t_FieldComparator$LongComparator, compareTop, METH_VARARGS),
          DECLARE_METHOD(t_FieldComparator$LongComparator, copy, METH_VARARGS),
          DECLARE_METHOD(t_FieldComparator$LongComparator, setBottom, METH_VARARGS),
          DECLARE_METHOD(t_FieldComparator$LongComparator, setNextReader, METH_VARARGS),
          DECLARE_METHOD(t_FieldComparator$LongComparator, setTopValue, METH_VARARGS),
          DECLARE_METHOD(t_FieldComparator$LongComparator, value, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(FieldComparator$LongComparator, t_FieldComparator$LongComparator, ::org::apache::lucene::search::FieldComparator$NumericComparator, FieldComparator$LongComparator, t_FieldComparator$LongComparator_init_, 0, 0, t_FieldComparator$LongComparator__fields_, 0, 0);
        PyObject *t_FieldComparator$LongComparator::wrap_Object(const FieldComparator$LongComparator& object, PyTypeObject *p0)
        {
          PyObject *obj = t_FieldComparator$LongComparator::wrap_Object(object);
          if (obj != NULL && obj != Py_None)
          {
            t_FieldComparator$LongComparator *self = (t_FieldComparator$LongComparator *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        PyObject *t_FieldComparator$LongComparator::wrap_jobject(const jobject& object, PyTypeObject *p0)
        {
          PyObject *obj = t_FieldComparator$LongComparator::wrap_jobject(object);
          if (obj != NULL && obj != Py_None)
          {
            t_FieldComparator$LongComparator *self = (t_FieldComparator$LongComparator *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        void t_FieldComparator$LongComparator::install(PyObject *module)
        {
          installType(&PY_TYPE(FieldComparator$LongComparator), module, "FieldComparator$LongComparator", 0);
        }

        void t_FieldComparator$LongComparator::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(FieldComparator$LongComparator).tp_dict, "class_", make_descriptor(FieldComparator$LongComparator::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(FieldComparator$LongComparator).tp_dict, "wrapfn_", make_descriptor(t_FieldComparator$LongComparator::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(FieldComparator$LongComparator).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_FieldComparator$LongComparator_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, FieldComparator$LongComparator::initializeClass, 1)))
            return NULL;
          return t_FieldComparator$LongComparator::wrap_Object(FieldComparator$LongComparator(((t_FieldComparator$LongComparator *) arg)->object.this$));
        }
        static PyObject *t_FieldComparator$LongComparator_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, FieldComparator$LongComparator::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_FieldComparator$LongComparator_of_(t_FieldComparator$LongComparator *self, PyObject *args)
        {
          if (!parseArg(args, "T", 1, &(self->parameters)))
            Py_RETURN_SELF;
          return PyErr_SetArgsError((PyObject *) self, "of_", args);
        }

        static int t_FieldComparator$LongComparator_init_(t_FieldComparator$LongComparator *self, PyObject *args, PyObject *kwds)
        {
          jint a0;
          ::java::lang::String a1((jobject) NULL);
          ::org::apache::lucene::search::FieldCache$Parser a2((jobject) NULL);
          ::java::lang::Long a3((jobject) NULL);
          FieldComparator$LongComparator object((jobject) NULL);

          if (!parseArgs(args, "IskO", ::org::apache::lucene::search::FieldCache$Parser::initializeClass, &::java::lang::PY_TYPE(Long), &a0, &a1, &a2, &a3))
          {
            INT_CALL(object = FieldComparator$LongComparator(a0, a1, a2, a3));
            self->object = object;
            self->parameters[0] = &::java::lang::PY_TYPE(Long);
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_FieldComparator$LongComparator_compare(t_FieldComparator$LongComparator *self, PyObject *args)
        {
          jint a0;
          jint a1;
          jint result;

          if (!parseArgs(args, "II", &a0, &a1))
          {
            OBJ_CALL(result = self->object.compare(a0, a1));
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(FieldComparator$LongComparator), (PyObject *) self, "compare", args, 2);
        }

        static PyObject *t_FieldComparator$LongComparator_compareBottom(t_FieldComparator$LongComparator *self, PyObject *args)
        {
          jint a0;
          jint result;

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(result = self->object.compareBottom(a0));
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(FieldComparator$LongComparator), (PyObject *) self, "compareBottom", args, 2);
        }

        static PyObject *t_FieldComparator$LongComparator_compareTop(t_FieldComparator$LongComparator *self, PyObject *args)
        {
          jint a0;
          jint result;

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(result = self->object.compareTop(a0));
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(FieldComparator$LongComparator), (PyObject *) self, "compareTop", args, 2);
        }

        static PyObject *t_FieldComparator$LongComparator_copy(t_FieldComparator$LongComparator *self, PyObject *args)
        {
          jint a0;
          jint a1;

          if (!parseArgs(args, "II", &a0, &a1))
          {
            OBJ_CALL(self->object.copy(a0, a1));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(FieldComparator$LongComparator), (PyObject *) self, "copy", args, 2);
        }

        static PyObject *t_FieldComparator$LongComparator_setBottom(t_FieldComparator$LongComparator *self, PyObject *args)
        {
          jint a0;

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(self->object.setBottom(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(FieldComparator$LongComparator), (PyObject *) self, "setBottom", args, 2);
        }

        static PyObject *t_FieldComparator$LongComparator_setNextReader(t_FieldComparator$LongComparator *self, PyObject *args)
        {
          ::org::apache::lucene::index::AtomicReaderContext a0((jobject) NULL);
          ::org::apache::lucene::search::FieldComparator result((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.setNextReader(a0));
            return ::org::apache::lucene::search::t_FieldComparator::wrap_Object(result, &::java::lang::PY_TYPE(Long));
          }

          return callSuper(&PY_TYPE(FieldComparator$LongComparator), (PyObject *) self, "setNextReader", args, 2);
        }

        static PyObject *t_FieldComparator$LongComparator_setTopValue(t_FieldComparator$LongComparator *self, PyObject *args)
        {
          ::java::lang::Long a0((jobject) NULL);

          if (!parseArgs(args, "O", &::java::lang::PY_TYPE(Long), &a0))
          {
            OBJ_CALL(self->object.setTopValue(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(FieldComparator$LongComparator), (PyObject *) self, "setTopValue", args, 2);
        }

        static PyObject *t_FieldComparator$LongComparator_value(t_FieldComparator$LongComparator *self, PyObject *args)
        {
          jint a0;
          ::java::lang::Long result((jobject) NULL);

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(result = self->object.value(a0));
            return ::java::lang::t_Long::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(FieldComparator$LongComparator), (PyObject *) self, "value", args, 2);
        }
        static PyObject *t_FieldComparator$LongComparator_get__parameters_(t_FieldComparator$LongComparator *self, void *data)
        {
          return typeParameters(self->parameters, sizeof(self->parameters));
        }

        static int t_FieldComparator$LongComparator_set__bottom(t_FieldComparator$LongComparator *self, PyObject *arg, void *data)
        {
          {
            jint value;
            if (!parseArg(arg, "I", &value))
            {
              INT_CALL(self->object.setBottom(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "bottom", arg);
          return -1;
        }

        static int t_FieldComparator$LongComparator_set__nextReader(t_FieldComparator$LongComparator *self, PyObject *arg, void *data)
        {
          {
            ::org::apache::lucene::index::AtomicReaderContext value((jobject) NULL);
            if (!parseArg(arg, "k", ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &value))
            {
              INT_CALL(self->object.setNextReader(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "nextReader", arg);
          return -1;
        }

        static int t_FieldComparator$LongComparator_set__topValue(t_FieldComparator$LongComparator *self, PyObject *arg, void *data)
        {
          {
            ::java::lang::Long value((jobject) NULL);
            if (!parseArg(arg, "O", &::java::lang::PY_TYPE(Long), &value))
            {
              INT_CALL(self->object.setTopValue(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "topValue", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/pt/PortugueseLightStemFilterFactory.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/String.h"
#include "java/util/Map.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace pt {

          ::java::lang::Class *PortugueseLightStemFilterFactory::class$ = NULL;
          jmethodID *PortugueseLightStemFilterFactory::mids$ = NULL;
          bool PortugueseLightStemFilterFactory::live$ = false;

          jclass PortugueseLightStemFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/pt/PortugueseLightStemFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4c9e2b1c] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_a65cd6ab] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/TokenStream;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          PortugueseLightStemFilterFactory::PortugueseLightStemFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_4c9e2b1c, a0.this$)) {}

          ::org::apache::lucene::analysis::TokenStream PortugueseLightStemFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::TokenStream(env->callObjectMethod(this$, mids$[mid_create_a65cd6ab], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace pt {
          static PyObject *t_PortugueseLightStemFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PortugueseLightStemFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_PortugueseLightStemFilterFactory_init_(t_PortugueseLightStemFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_PortugueseLightStemFilterFactory_create(t_PortugueseLightStemFilterFactory *self, PyObject *args);

          static PyMethodDef t_PortugueseLightStemFilterFactory__methods_[] = {
            DECLARE_METHOD(t_PortugueseLightStemFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PortugueseLightStemFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PortugueseLightStemFilterFactory, create, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(PortugueseLightStemFilterFactory, t_PortugueseLightStemFilterFactory, ::org::apache::lucene::analysis::util::TokenFilterFactory, PortugueseLightStemFilterFactory, t_PortugueseLightStemFilterFactory_init_, 0, 0, 0, 0, 0);

          void t_PortugueseLightStemFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(PortugueseLightStemFilterFactory), module, "PortugueseLightStemFilterFactory", 0);
          }

          void t_PortugueseLightStemFilterFactory::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(PortugueseLightStemFilterFactory).tp_dict, "class_", make_descriptor(PortugueseLightStemFilterFactory::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(PortugueseLightStemFilterFactory).tp_dict, "wrapfn_", make_descriptor(t_PortugueseLightStemFilterFactory::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(PortugueseLightStemFilterFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_PortugueseLightStemFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, PortugueseLightStemFilterFactory::initializeClass, 1)))
              return NULL;
            return t_PortugueseLightStemFilterFactory::wrap_Object(PortugueseLightStemFilterFactory(((t_PortugueseLightStemFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_PortugueseLightStemFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, PortugueseLightStemFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_PortugueseLightStemFilterFactory_init_(t_PortugueseLightStemFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            PortugueseLightStemFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = PortugueseLightStemFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_PortugueseLightStemFilterFactory_create(t_PortugueseLightStemFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::TokenStream result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::t_TokenStream::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(PortugueseLightStemFilterFactory), (PyObject *) self, "create", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/standard/parser/TokenMgrError.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace parser {

              ::java::lang::Class *TokenMgrError::class$ = NULL;
              jmethodID *TokenMgrError::mids$ = NULL;
              bool TokenMgrError::live$ = false;

              jclass TokenMgrError::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/standard/parser/TokenMgrError");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
                  mids$[mid_init$_6e53ccc6] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;I)V");
                  mids$[mid_init$_8aaeec67] = env->getMethodID(cls, "<init>", "(ZIIILjava/lang/String;CI)V");
                  mids$[mid_getMessage_14c7b5c5] = env->getMethodID(cls, "getMessage", "()Ljava/lang/String;");
                  mids$[mid_addEscapes_97a5258f] = env->getStaticMethodID(cls, "addEscapes", "(Ljava/lang/String;)Ljava/lang/String;");
                  mids$[mid_LexicalError_e888c5f6] = env->getStaticMethodID(cls, "LexicalError", "(ZIIILjava/lang/String;C)Ljava/lang/String;");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              TokenMgrError::TokenMgrError() : ::java::lang::Error(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

              TokenMgrError::TokenMgrError(const ::java::lang::String & a0, jint a1) : ::java::lang::Error(env->newObject(initializeClass, &mids$, mid_init$_6e53ccc6, a0.this$, a1)) {}

              TokenMgrError::TokenMgrError(jboolean a0, jint a1, jint a2, jint a3, const ::java::lang::String & a4, jchar a5, jint a6) : ::java::lang::Error(env->newObject(initializeClass, &mids$, mid_init$_8aaeec67, a0, a1, a2, a3, a4.this$, a5, a6)) {}

              ::java::lang::String TokenMgrError::getMessage() const
              {
                return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getMessage_14c7b5c5]));
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace parser {
              static PyObject *t_TokenMgrError_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_TokenMgrError_instance_(PyTypeObject *type, PyObject *arg);
              static int t_TokenMgrError_init_(t_TokenMgrError *self, PyObject *args, PyObject *kwds);
              static PyObject *t_TokenMgrError_getMessage(t_TokenMgrError *self, PyObject *args);
              static PyObject *t_TokenMgrError_get__message(t_TokenMgrError *self, void *data);
              static PyGetSetDef t_TokenMgrError__fields_[] = {
                DECLARE_GET_FIELD(t_TokenMgrError, message),
                { NULL, NULL, NULL, NULL, NULL }
              };

              static PyMethodDef t_TokenMgrError__methods_[] = {
                DECLARE_METHOD(t_TokenMgrError, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_TokenMgrError, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_TokenMgrError, getMessage, METH_VARARGS),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(TokenMgrError, t_TokenMgrError, ::java::lang::Error, TokenMgrError, t_TokenMgrError_init_, 0, 0, t_TokenMgrError__fields_, 0, 0);

              void t_TokenMgrError::install(PyObject *module)
              {
                installType(&PY_TYPE(TokenMgrError), module, "TokenMgrError", 0);
              }

              void t_TokenMgrError::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(TokenMgrError).tp_dict, "class_", make_descriptor(TokenMgrError::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(TokenMgrError).tp_dict, "wrapfn_", make_descriptor(t_TokenMgrError::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(TokenMgrError).tp_dict, "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_TokenMgrError_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, TokenMgrError::initializeClass, 1)))
                  return NULL;
                return t_TokenMgrError::wrap_Object(TokenMgrError(((t_TokenMgrError *) arg)->object.this$));
              }
              static PyObject *t_TokenMgrError_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, TokenMgrError::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_TokenMgrError_init_(t_TokenMgrError *self, PyObject *args, PyObject *kwds)
              {
                switch (PyTuple_GET_SIZE(args)) {
                 case 0:
                  {
                    TokenMgrError object((jobject) NULL);

                    INT_CALL(object = TokenMgrError());
                    self->object = object;
                    break;
                  }
                  goto err;
                 case 2:
                  {
                    ::java::lang::String a0((jobject) NULL);
                    jint a1;
                    TokenMgrError object((jobject) NULL);

                    if (!parseArgs(args, "sI", &a0, &a1))
                    {
                      INT_CALL(object = TokenMgrError(a0, a1));
                      self->object = object;
                      break;
                    }
                  }
                  goto err;
                 case 7:
                  {
                    jboolean a0;
                    jint a1;
                    jint a2;
                    jint a3;
                    ::java::lang::String a4((jobject) NULL);
                    jchar a5;
                    jint a6;
                    TokenMgrError object((jobject) NULL);

                    if (!parseArgs(args, "ZIIIsCI", &a0, &a1, &a2, &a3, &a4, &a5, &a6))
                    {
                      INT_CALL(object = TokenMgrError(a0, a1, a2, a3, a4, a5, a6));
                      self->object = object;
                      break;
                    }
                  }
                 default:
                 err:
                  PyErr_SetArgsError((PyObject *) self, "__init__", args);
                  return -1;
                }

                return 0;
              }

              static PyObject *t_TokenMgrError_getMessage(t_TokenMgrError *self, PyObject *args)
              {
                ::java::lang::String result((jobject) NULL);

                if (!parseArgs(args, ""))
                {
                  OBJ_CALL(result = self->object.getMessage());
                  return j2p(result);
                }

                return callSuper(&PY_TYPE(TokenMgrError), (PyObject *) self, "getMessage", args, 2);
              }

              static PyObject *t_TokenMgrError_get__message(t_TokenMgrError *self, void *data)
              {
                ::java::lang::String value((jobject) NULL);
                OBJ_CALL(value = self->object.getMessage());
                return j2p(value);
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queries/function/docvalues/DoubleDocValues.h"
#include "java/lang/Class.h"
#include "java/lang/Object.h"
#include "org/apache/lucene/queries/function/FunctionValues$ValueFiller.h"
#include "java/lang/String.h"
#include "org/apache/lucene/queries/function/ValueSourceScorer.h"
#include "org/apache/lucene/queries/function/ValueSource.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace docvalues {

            ::java::lang::Class *DoubleDocValues::class$ = NULL;
            jmethodID *DoubleDocValues::mids$ = NULL;
            bool DoubleDocValues::live$ = false;

            jclass DoubleDocValues::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queries/function/docvalues/DoubleDocValues");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_ca78fe7a] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/queries/function/ValueSource;)V");
                mids$[mid_boolVal_39c7bd30] = env->getMethodID(cls, "boolVal", "(I)Z");
                mids$[mid_byteVal_39c7bd28] = env->getMethodID(cls, "byteVal", "(I)B");
                mids$[mid_doubleVal_39c7bd2e] = env->getMethodID(cls, "doubleVal", "(I)D");
                mids$[mid_floatVal_39c7bd2c] = env->getMethodID(cls, "floatVal", "(I)F");
                mids$[mid_getRangeScorer_d201bc96] = env->getMethodID(cls, "getRangeScorer", "(Lorg/apache/lucene/index/IndexReader;Ljava/lang/String;Ljava/lang/String;ZZ)Lorg/apache/lucene/queries/function/ValueSourceScorer;");
                mids$[mid_getValueFiller_7731f0bd] = env->getMethodID(cls, "getValueFiller", "()Lorg/apache/lucene/queries/function/FunctionValues$ValueFiller;");
                mids$[mid_intVal_39c7bd23] = env->getMethodID(cls, "intVal", "(I)I");
                mids$[mid_longVal_39c7bd20] = env->getMethodID(cls, "longVal", "(I)J");
                mids$[mid_objectVal_29be6a55] = env->getMethodID(cls, "objectVal", "(I)Ljava/lang/Object;");
                mids$[mid_shortVal_39c7bd39] = env->getMethodID(cls, "shortVal", "(I)S");
                mids$[mid_strVal_141401b3] = env->getMethodID(cls, "strVal", "(I)Ljava/lang/String;");
                mids$[mid_toString_141401b3] = env->getMethodID(cls, "toString", "(I)Ljava/lang/String;");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            DoubleDocValues::DoubleDocValues(const ::org::apache::lucene::queries::function::ValueSource & a0) : ::org::apache::lucene::queries::function::FunctionValues(env->newObject(initializeClass, &mids$, mid_init$_ca78fe7a, a0.this$)) {}

            jboolean DoubleDocValues::boolVal(jint a0) const
            {
              return env->callBooleanMethod(this$, mids$[mid_boolVal_39c7bd30], a0);
            }

            jbyte DoubleDocValues::byteVal(jint a0) const
            {
              return env->callByteMethod(this$, mids$[mid_byteVal_39c7bd28], a0);
            }

            jdouble DoubleDocValues::doubleVal(jint a0) const
            {
              return env->callDoubleMethod(this$, mids$[mid_doubleVal_39c7bd2e], a0);
            }

            jfloat DoubleDocValues::floatVal(jint a0) const
            {
              return env->callFloatMethod(this$, mids$[mid_floatVal_39c7bd2c], a0);
            }

            ::org::apache::lucene::queries::function::ValueSourceScorer DoubleDocValues::getRangeScorer(const ::org::apache::lucene::index::IndexReader & a0, const ::java::lang::String & a1, const ::java::lang::String & a2, jboolean a3, jboolean a4) const
            {
              return ::org::apache::lucene::queries::function::ValueSourceScorer(env->callObjectMethod(this$, mids$[mid_getRangeScorer_d201bc96], a0.this$, a1.this$, a2.this$, a3, a4));
            }

            ::org::apache::lucene::queries::function::FunctionValues$ValueFiller DoubleDocValues::getValueFiller() const
            {
              return ::org::apache::lucene::queries::function::FunctionValues$ValueFiller(env->callObjectMethod(this$, mids$[mid_getValueFiller_7731f0bd]));
            }

            jint DoubleDocValues::intVal(jint a0) const
            {
              return env->callIntMethod(this$, mids$[mid_intVal_39c7bd23], a0);
            }

            jlong DoubleDocValues::longVal(jint a0) const
            {
              return env->callLongMethod(this$, mids$[mid_longVal_39c7bd20], a0);
            }

            ::java::lang::Object DoubleDocValues::objectVal(jint a0) const
            {
              return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_objectVal_29be6a55], a0));
            }

            jshort DoubleDocValues::shortVal(jint a0) const
            {
              return env->callShortMethod(this$, mids$[mid_shortVal_39c7bd39], a0);
            }

            ::java::lang::String DoubleDocValues::strVal(jint a0) const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_strVal_141401b3], a0));
            }

            ::java::lang::String DoubleDocValues::toString(jint a0) const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_141401b3], a0));
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace docvalues {
            static PyObject *t_DoubleDocValues_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_DoubleDocValues_instance_(PyTypeObject *type, PyObject *arg);
            static int t_DoubleDocValues_init_(t_DoubleDocValues *self, PyObject *args, PyObject *kwds);
            static PyObject *t_DoubleDocValues_boolVal(t_DoubleDocValues *self, PyObject *args);
            static PyObject *t_DoubleDocValues_byteVal(t_DoubleDocValues *self, PyObject *args);
            static PyObject *t_DoubleDocValues_doubleVal(t_DoubleDocValues *self, PyObject *args);
            static PyObject *t_DoubleDocValues_floatVal(t_DoubleDocValues *self, PyObject *args);
            static PyObject *t_DoubleDocValues_getRangeScorer(t_DoubleDocValues *self, PyObject *args);
            static PyObject *t_DoubleDocValues_getValueFiller(t_DoubleDocValues *self, PyObject *args);
            static PyObject *t_DoubleDocValues_intVal(t_DoubleDocValues *self, PyObject *args);
            static PyObject *t_DoubleDocValues_longVal(t_DoubleDocValues *self, PyObject *args);
            static PyObject *t_DoubleDocValues_objectVal(t_DoubleDocValues *self, PyObject *args);
            static PyObject *t_DoubleDocValues_shortVal(t_DoubleDocValues *self, PyObject *args);
            static PyObject *t_DoubleDocValues_strVal(t_DoubleDocValues *self, PyObject *args);
            static PyObject *t_DoubleDocValues_toString(t_DoubleDocValues *self, PyObject *args);
            static PyObject *t_DoubleDocValues_get__valueFiller(t_DoubleDocValues *self, void *data);
            static PyGetSetDef t_DoubleDocValues__fields_[] = {
              DECLARE_GET_FIELD(t_DoubleDocValues, valueFiller),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_DoubleDocValues__methods_[] = {
              DECLARE_METHOD(t_DoubleDocValues, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_DoubleDocValues, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_DoubleDocValues, boolVal, METH_VARARGS),
              DECLARE_METHOD(t_DoubleDocValues, byteVal, METH_VARARGS),
              DECLARE_METHOD(t_DoubleDocValues, doubleVal, METH_VARARGS),
              DECLARE_METHOD(t_DoubleDocValues, floatVal, METH_VARARGS),
              DECLARE_METHOD(t_DoubleDocValues, getRangeScorer, METH_VARARGS),
              DECLARE_METHOD(t_DoubleDocValues, getValueFiller, METH_VARARGS),
              DECLARE_METHOD(t_DoubleDocValues, intVal, METH_VARARGS),
              DECLARE_METHOD(t_DoubleDocValues, longVal, METH_VARARGS),
              DECLARE_METHOD(t_DoubleDocValues, objectVal, METH_VARARGS),
              DECLARE_METHOD(t_DoubleDocValues, shortVal, METH_VARARGS),
              DECLARE_METHOD(t_DoubleDocValues, strVal, METH_VARARGS),
              DECLARE_METHOD(t_DoubleDocValues, toString, METH_VARARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(DoubleDocValues, t_DoubleDocValues, ::org::apache::lucene::queries::function::FunctionValues, DoubleDocValues, t_DoubleDocValues_init_, 0, 0, t_DoubleDocValues__fields_, 0, 0);

            void t_DoubleDocValues::install(PyObject *module)
            {
              installType(&PY_TYPE(DoubleDocValues), module, "DoubleDocValues", 0);
            }

            void t_DoubleDocValues::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(DoubleDocValues).tp_dict, "class_", make_descriptor(DoubleDocValues::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(DoubleDocValues).tp_dict, "wrapfn_", make_descriptor(t_DoubleDocValues::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(DoubleDocValues).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_DoubleDocValues_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, DoubleDocValues::initializeClass, 1)))
                return NULL;
              return t_DoubleDocValues::wrap_Object(DoubleDocValues(((t_DoubleDocValues *) arg)->object.this$));
            }
            static PyObject *t_DoubleDocValues_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, DoubleDocValues::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_DoubleDocValues_init_(t_DoubleDocValues *self, PyObject *args, PyObject *kwds)
            {
              ::org::apache::lucene::queries::function::ValueSource a0((jobject) NULL);
              DoubleDocValues object((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::queries::function::ValueSource::initializeClass, &a0))
              {
                INT_CALL(object = DoubleDocValues(a0));
                self->object = object;
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_DoubleDocValues_boolVal(t_DoubleDocValues *self, PyObject *args)
            {
              jint a0;
              jboolean result;

              if (!parseArgs(args, "I", &a0))
              {
                OBJ_CALL(result = self->object.boolVal(a0));
                Py_RETURN_BOOL(result);
              }

              return callSuper(&PY_TYPE(DoubleDocValues), (PyObject *) self, "boolVal", args, 2);
            }

            static PyObject *t_DoubleDocValues_byteVal(t_DoubleDocValues *self, PyObject *args)
            {
              jint a0;
              jbyte result;

              if (!parseArgs(args, "I", &a0))
              {
                OBJ_CALL(result = self->object.byteVal(a0));
                return PyInt_FromLong((long) result);
              }

              return callSuper(&PY_TYPE(DoubleDocValues), (PyObject *) self, "byteVal", args, 2);
            }

            static PyObject *t_DoubleDocValues_doubleVal(t_DoubleDocValues *self, PyObject *args)
            {
              jint a0;
              jdouble result;

              if (!parseArgs(args, "I", &a0))
              {
                OBJ_CALL(result = self->object.doubleVal(a0));
                return PyFloat_FromDouble((double) result);
              }

              return callSuper(&PY_TYPE(DoubleDocValues), (PyObject *) self, "doubleVal", args, 2);
            }

            static PyObject *t_DoubleDocValues_floatVal(t_DoubleDocValues *self, PyObject *args)
            {
              jint a0;
              jfloat result;

              if (!parseArgs(args, "I", &a0))
              {
                OBJ_CALL(result = self->object.floatVal(a0));
                return PyFloat_FromDouble((double) result);
              }

              return callSuper(&PY_TYPE(DoubleDocValues), (PyObject *) self, "floatVal", args, 2);
            }

            static PyObject *t_DoubleDocValues_getRangeScorer(t_DoubleDocValues *self, PyObject *args)
            {
              ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
              ::java::lang::String a1((jobject) NULL);
              ::java::lang::String a2((jobject) NULL);
              jboolean a3;
              jboolean a4;
              ::org::apache::lucene::queries::function::ValueSourceScorer result((jobject) NULL);

              if (!parseArgs(args, "kssZZ", ::org::apache::lucene::index::IndexReader::initializeClass, &a0, &a1, &a2, &a3, &a4))
              {
                OBJ_CALL(result = self->object.getRangeScorer(a0, a1, a2, a3, a4));
                return ::org::apache::lucene::queries::function::t_ValueSourceScorer::wrap_Object(result);
              }

              return callSuper(&PY_TYPE(DoubleDocValues), (PyObject *) self, "getRangeScorer", args, 2);
            }

            static PyObject *t_DoubleDocValues_getValueFiller(t_DoubleDocValues *self, PyObject *args)
            {
              ::org::apache::lucene::queries::function::FunctionValues$ValueFiller result((jobject) NULL);

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.getValueFiller());
                return ::org::apache::lucene::queries::function::t_FunctionValues$ValueFiller::wrap_Object(result);
              }

              return callSuper(&PY_TYPE(DoubleDocValues), (PyObject *) self, "getValueFiller", args, 2);
            }

            static PyObject *t_DoubleDocValues_intVal(t_DoubleDocValues *self, PyObject *args)
            {
              jint a0;
              jint result;

              if (!parseArgs(args, "I", &a0))
              {
                OBJ_CALL(result = self->object.intVal(a0));
                return PyInt_FromLong((long) result);
              }

              return callSuper(&PY_TYPE(DoubleDocValues), (PyObject *) self, "intVal", args, 2);
            }

            static PyObject *t_DoubleDocValues_longVal(t_DoubleDocValues *self, PyObject *args)
            {
              jint a0;
              jlong result;

              if (!parseArgs(args, "I", &a0))
              {
                OBJ_CALL(result = self->object.longVal(a0));
                return PyLong_FromLongLong((PY_LONG_LONG) result);
              }

              return callSuper(&PY_TYPE(DoubleDocValues), (PyObject *) self, "longVal", args, 2);
            }

            static PyObject *t_DoubleDocValues_objectVal(t_DoubleDocValues *self, PyObject *args)
            {
              jint a0;
              ::java::lang::Object result((jobject) NULL);

              if (!parseArgs(args, "I", &a0))
              {
                OBJ_CALL(result = self->object.objectVal(a0));
                return ::java::lang::t_Object::wrap_Object(result);
              }

              return callSuper(&PY_TYPE(DoubleDocValues), (PyObject *) self, "objectVal", args, 2);
            }

            static PyObject *t_DoubleDocValues_shortVal(t_DoubleDocValues *self, PyObject *args)
            {
              jint a0;
              jshort result;

              if (!parseArgs(args, "I", &a0))
              {
                OBJ_CALL(result = self->object.shortVal(a0));
                return PyInt_FromLong((long) result);
              }

              return callSuper(&PY_TYPE(DoubleDocValues), (PyObject *) self, "shortVal", args, 2);
            }

            static PyObject *t_DoubleDocValues_strVal(t_DoubleDocValues *self, PyObject *args)
            {
              jint a0;
              ::java::lang::String result((jobject) NULL);

              if (!parseArgs(args, "I", &a0))
              {
                OBJ_CALL(result = self->object.strVal(a0));
                return j2p(result);
              }

              return callSuper(&PY_TYPE(DoubleDocValues), (PyObject *) self, "strVal", args, 2);
            }

            static PyObject *t_DoubleDocValues_toString(t_DoubleDocValues *self, PyObject *args)
            {
              jint a0;
              ::java::lang::String result((jobject) NULL);

              if (!parseArgs(args, "I", &a0))
              {
                OBJ_CALL(result = self->object.toString(a0));
                return j2p(result);
              }

              return callSuper(&PY_TYPE(DoubleDocValues), (PyObject *) self, "toString", args, 2);
            }

            static PyObject *t_DoubleDocValues_get__valueFiller(t_DoubleDocValues *self, void *data)
            {
              ::org::apache::lucene::queries::function::FunctionValues$ValueFiller value((jobject) NULL);
              OBJ_CALL(value = self->object.getValueFiller());
              return ::org::apache::lucene::queries::function::t_FunctionValues$ValueFiller::wrap_Object(value);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/document/StringField.h"
#include "org/apache/lucene/document/FieldType.h"
#include "java/lang/String.h"
#include "org/apache/lucene/document/Field$Store.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace document {

        ::java::lang::Class *StringField::class$ = NULL;
        jmethodID *StringField::mids$ = NULL;
        bool StringField::live$ = false;
        ::org::apache::lucene::document::FieldType *StringField::TYPE_NOT_STORED = NULL;
        ::org::apache::lucene::document::FieldType *StringField::TYPE_STORED = NULL;

        jclass StringField::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/document/StringField");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_064fa087] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Ljava/lang/String;Lorg/apache/lucene/document/Field$Store;)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            cls = (jclass) class$->this$;

            TYPE_NOT_STORED = new ::org::apache::lucene::document::FieldType(env->getStaticObjectField(cls, "TYPE_NOT_STORED", "Lorg/apache/lucene/document/FieldType;"));
            TYPE_STORED = new ::org::apache::lucene::document::FieldType(env->getStaticObjectField(cls, "TYPE_STORED", "Lorg/apache/lucene/document/FieldType;"));
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        StringField::StringField(const ::java::lang::String & a0, const ::java::lang::String & a1, const ::org::apache::lucene::document::Field$Store & a2) : ::org::apache::lucene::document::Field(env->newObject(initializeClass, &mids$, mid_init$_064fa087, a0.this$, a1.this$, a2.this$)) {}
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace document {
        static PyObject *t_StringField_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_StringField_instance_(PyTypeObject *type, PyObject *arg);
        static int t_StringField_init_(t_StringField *self, PyObject *args, PyObject *kwds);

        static PyMethodDef t_StringField__methods_[] = {
          DECLARE_METHOD(t_StringField, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_StringField, instance_, METH_O | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(StringField, t_StringField, ::org::apache::lucene::document::Field, StringField, t_StringField_init_, 0, 0, 0, 0, 0);

        void t_StringField::install(PyObject *module)
        {
          installType(&PY_TYPE(StringField), module, "StringField", 0);
        }

        void t_StringField::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(StringField).tp_dict, "class_", make_descriptor(StringField::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(StringField).tp_dict, "wrapfn_", make_descriptor(t_StringField::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(StringField).tp_dict, "boxfn_", make_descriptor(boxObject));
          env->getClass(StringField::initializeClass);
          PyDict_SetItemString(PY_TYPE(StringField).tp_dict, "TYPE_NOT_STORED", make_descriptor(::org::apache::lucene::document::t_FieldType::wrap_Object(*StringField::TYPE_NOT_STORED)));
          PyDict_SetItemString(PY_TYPE(StringField).tp_dict, "TYPE_STORED", make_descriptor(::org::apache::lucene::document::t_FieldType::wrap_Object(*StringField::TYPE_STORED)));
        }

        static PyObject *t_StringField_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, StringField::initializeClass, 1)))
            return NULL;
          return t_StringField::wrap_Object(StringField(((t_StringField *) arg)->object.this$));
        }
        static PyObject *t_StringField_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, StringField::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_StringField_init_(t_StringField *self, PyObject *args, PyObject *kwds)
        {
          ::java::lang::String a0((jobject) NULL);
          ::java::lang::String a1((jobject) NULL);
          ::org::apache::lucene::document::Field$Store a2((jobject) NULL);
          PyTypeObject **p2;
          StringField object((jobject) NULL);

          if (!parseArgs(args, "ssK", ::org::apache::lucene::document::Field$Store::initializeClass, &a0, &a1, &a2, &p2, ::org::apache::lucene::document::t_Field$Store::parameters_))
          {
            INT_CALL(object = StringField(a0, a1, a2));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/util/CharArrayIterator.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace util {

          ::java::lang::Class *CharArrayIterator::class$ = NULL;
          jmethodID *CharArrayIterator::mids$ = NULL;
          bool CharArrayIterator::live$ = false;
          jboolean CharArrayIterator::HAS_BUGGY_BREAKITERATORS = (jboolean) 0;

          jclass CharArrayIterator::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/util/CharArrayIterator");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_clone_18028ee5] = env->getMethodID(cls, "clone", "()Lorg/apache/lucene/analysis/util/CharArrayIterator;");
              mids$[mid_current_54c6a173] = env->getMethodID(cls, "current", "()C");
              mids$[mid_first_54c6a173] = env->getMethodID(cls, "first", "()C");
              mids$[mid_getBeginIndex_54c6a179] = env->getMethodID(cls, "getBeginIndex", "()I");
              mids$[mid_getEndIndex_54c6a179] = env->getMethodID(cls, "getEndIndex", "()I");
              mids$[mid_getIndex_54c6a179] = env->getMethodID(cls, "getIndex", "()I");
              mids$[mid_getLength_54c6a179] = env->getMethodID(cls, "getLength", "()I");
              mids$[mid_getStart_54c6a179] = env->getMethodID(cls, "getStart", "()I");
              mids$[mid_getText_dab10e7f] = env->getMethodID(cls, "getText", "()[C");
              mids$[mid_last_54c6a173] = env->getMethodID(cls, "last", "()C");
              mids$[mid_newSentenceInstance_18028ee5] = env->getStaticMethodID(cls, "newSentenceInstance", "()Lorg/apache/lucene/analysis/util/CharArrayIterator;");
              mids$[mid_newWordInstance_18028ee5] = env->getStaticMethodID(cls, "newWordInstance", "()Lorg/apache/lucene/analysis/util/CharArrayIterator;");
              mids$[mid_next_54c6a173] = env->getMethodID(cls, "next", "()C");
              mids$[mid_previous_54c6a173] = env->getMethodID(cls, "previous", "()C");
              mids$[mid_setIndex_39c7bd29] = env->getMethodID(cls, "setIndex", "(I)C");
              mids$[mid_setText_6f0bb356] = env->getMethodID(cls, "setText", "([CII)V");
              mids$[mid_jreBugWorkaround_87fd544f] = env->getMethodID(cls, "jreBugWorkaround", "(C)C");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              HAS_BUGGY_BREAKITERATORS = env->getStaticBooleanField(cls, "HAS_BUGGY_BREAKITERATORS");
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          CharArrayIterator::CharArrayIterator() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          CharArrayIterator CharArrayIterator::clone() const
          {
            return CharArrayIterator(env->callObjectMethod(this$, mids$[mid_clone_18028ee5]));
          }

          jchar CharArrayIterator::current() const
          {
            return env->callCharMethod(this$, mids$[mid_current_54c6a173]);
          }

          jchar CharArrayIterator::first() const
          {
            return env->callCharMethod(this$, mids$[mid_first_54c6a173]);
          }

          jint CharArrayIterator::getBeginIndex() const
          {
            return env->callIntMethod(this$, mids$[mid_getBeginIndex_54c6a179]);
          }

          jint CharArrayIterator::getEndIndex() const
          {
            return env->callIntMethod(this$, mids$[mid_getEndIndex_54c6a179]);
          }

          jint CharArrayIterator::getIndex() const
          {
            return env->callIntMethod(this$, mids$[mid_getIndex_54c6a179]);
          }

          jint CharArrayIterator::getLength() const
          {
            return env->callIntMethod(this$, mids$[mid_getLength_54c6a179]);
          }

          jint CharArrayIterator::getStart() const
          {
            return env->callIntMethod(this$, mids$[mid_getStart_54c6a179]);
          }

          JArray< jchar > CharArrayIterator::getText() const
          {
            return JArray< jchar >(env->callObjectMethod(this$, mids$[mid_getText_dab10e7f]));
          }

          jchar CharArrayIterator::last() const
          {
            return env->callCharMethod(this$, mids$[mid_last_54c6a173]);
          }

          CharArrayIterator CharArrayIterator::newSentenceInstance()
          {
            jclass cls = env->getClass(initializeClass);
            return CharArrayIterator(env->callStaticObjectMethod(cls, mids$[mid_newSentenceInstance_18028ee5]));
          }

          CharArrayIterator CharArrayIterator::newWordInstance()
          {
            jclass cls = env->getClass(initializeClass);
            return CharArrayIterator(env->callStaticObjectMethod(cls, mids$[mid_newWordInstance_18028ee5]));
          }

          jchar CharArrayIterator::next() const
          {
            return env->callCharMethod(this$, mids$[mid_next_54c6a173]);
          }

          jchar CharArrayIterator::previous() const
          {
            return env->callCharMethod(this$, mids$[mid_previous_54c6a173]);
          }

          jchar CharArrayIterator::setIndex(jint a0) const
          {
            return env->callCharMethod(this$, mids$[mid_setIndex_39c7bd29], a0);
          }

          void CharArrayIterator::setText(const JArray< jchar > & a0, jint a1, jint a2) const
          {
            env->callVoidMethod(this$, mids$[mid_setText_6f0bb356], a0.this$, a1, a2);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace util {
          static PyObject *t_CharArrayIterator_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_CharArrayIterator_instance_(PyTypeObject *type, PyObject *arg);
          static int t_CharArrayIterator_init_(t_CharArrayIterator *self, PyObject *args, PyObject *kwds);
          static PyObject *t_CharArrayIterator_clone(t_CharArrayIterator *self);
          static PyObject *t_CharArrayIterator_current(t_CharArrayIterator *self);
          static PyObject *t_CharArrayIterator_first(t_CharArrayIterator *self);
          static PyObject *t_CharArrayIterator_getBeginIndex(t_CharArrayIterator *self);
          static PyObject *t_CharArrayIterator_getEndIndex(t_CharArrayIterator *self);
          static PyObject *t_CharArrayIterator_getIndex(t_CharArrayIterator *self);
          static PyObject *t_CharArrayIterator_getLength(t_CharArrayIterator *self);
          static PyObject *t_CharArrayIterator_getStart(t_CharArrayIterator *self);
          static PyObject *t_CharArrayIterator_getText(t_CharArrayIterator *self);
          static PyObject *t_CharArrayIterator_last(t_CharArrayIterator *self);
          static PyObject *t_CharArrayIterator_newSentenceInstance(PyTypeObject *type);
          static PyObject *t_CharArrayIterator_newWordInstance(PyTypeObject *type);
          static PyObject *t_CharArrayIterator_next(t_CharArrayIterator *self);
          static PyObject *t_CharArrayIterator_previous(t_CharArrayIterator *self);
          static PyObject *t_CharArrayIterator_setIndex(t_CharArrayIterator *self, PyObject *arg);
          static PyObject *t_CharArrayIterator_setText(t_CharArrayIterator *self, PyObject *args);
          static PyObject *t_CharArrayIterator_get__beginIndex(t_CharArrayIterator *self, void *data);
          static PyObject *t_CharArrayIterator_get__endIndex(t_CharArrayIterator *self, void *data);
          static PyObject *t_CharArrayIterator_get__index(t_CharArrayIterator *self, void *data);
          static int t_CharArrayIterator_set__index(t_CharArrayIterator *self, PyObject *arg, void *data);
          static PyObject *t_CharArrayIterator_get__length(t_CharArrayIterator *self, void *data);
          static PyObject *t_CharArrayIterator_get__start(t_CharArrayIterator *self, void *data);
          static PyObject *t_CharArrayIterator_get__text(t_CharArrayIterator *self, void *data);
          static PyGetSetDef t_CharArrayIterator__fields_[] = {
            DECLARE_GET_FIELD(t_CharArrayIterator, beginIndex),
            DECLARE_GET_FIELD(t_CharArrayIterator, endIndex),
            DECLARE_GETSET_FIELD(t_CharArrayIterator, index),
            DECLARE_GET_FIELD(t_CharArrayIterator, length),
            DECLARE_GET_FIELD(t_CharArrayIterator, start),
            DECLARE_GET_FIELD(t_CharArrayIterator, text),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_CharArrayIterator__methods_[] = {
            DECLARE_METHOD(t_CharArrayIterator, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CharArrayIterator, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CharArrayIterator, clone, METH_NOARGS),
            DECLARE_METHOD(t_CharArrayIterator, current, METH_NOARGS),
            DECLARE_METHOD(t_CharArrayIterator, first, METH_NOARGS),
            DECLARE_METHOD(t_CharArrayIterator, getBeginIndex, METH_NOARGS),
            DECLARE_METHOD(t_CharArrayIterator, getEndIndex, METH_NOARGS),
            DECLARE_METHOD(t_CharArrayIterator, getIndex, METH_NOARGS),
            DECLARE_METHOD(t_CharArrayIterator, getLength, METH_NOARGS),
            DECLARE_METHOD(t_CharArrayIterator, getStart, METH_NOARGS),
            DECLARE_METHOD(t_CharArrayIterator, getText, METH_NOARGS),
            DECLARE_METHOD(t_CharArrayIterator, last, METH_NOARGS),
            DECLARE_METHOD(t_CharArrayIterator, newSentenceInstance, METH_NOARGS | METH_CLASS),
            DECLARE_METHOD(t_CharArrayIterator, newWordInstance, METH_NOARGS | METH_CLASS),
            DECLARE_METHOD(t_CharArrayIterator, next, METH_NOARGS),
            DECLARE_METHOD(t_CharArrayIterator, previous, METH_NOARGS),
            DECLARE_METHOD(t_CharArrayIterator, setIndex, METH_O),
            DECLARE_METHOD(t_CharArrayIterator, setText, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(CharArrayIterator, t_CharArrayIterator, ::java::lang::Object, CharArrayIterator, t_CharArrayIterator_init_, 0, 0, t_CharArrayIterator__fields_, 0, 0);

          void t_CharArrayIterator::install(PyObject *module)
          {
            installType(&PY_TYPE(CharArrayIterator), module, "CharArrayIterator", 0);
          }

          void t_CharArrayIterator::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(CharArrayIterator).tp_dict, "class_", make_descriptor(CharArrayIterator::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(CharArrayIterator).tp_dict, "wrapfn_", make_descriptor(t_CharArrayIterator::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(CharArrayIterator).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(CharArrayIterator::initializeClass);
            PyDict_SetItemString(PY_TYPE(CharArrayIterator).tp_dict, "HAS_BUGGY_BREAKITERATORS", make_descriptor(CharArrayIterator::HAS_BUGGY_BREAKITERATORS));
          }

          static PyObject *t_CharArrayIterator_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, CharArrayIterator::initializeClass, 1)))
              return NULL;
            return t_CharArrayIterator::wrap_Object(CharArrayIterator(((t_CharArrayIterator *) arg)->object.this$));
          }
          static PyObject *t_CharArrayIterator_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, CharArrayIterator::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_CharArrayIterator_init_(t_CharArrayIterator *self, PyObject *args, PyObject *kwds)
          {
            CharArrayIterator object((jobject) NULL);

            INT_CALL(object = CharArrayIterator());
            self->object = object;

            return 0;
          }

          static PyObject *t_CharArrayIterator_clone(t_CharArrayIterator *self)
          {
            CharArrayIterator result((jobject) NULL);
            OBJ_CALL(result = self->object.clone());
            return t_CharArrayIterator::wrap_Object(result);
          }

          static PyObject *t_CharArrayIterator_current(t_CharArrayIterator *self)
          {
            jchar result;
            OBJ_CALL(result = self->object.current());
            return PyUnicode_FromUnicode((Py_UNICODE *) &result, 1);
          }

          static PyObject *t_CharArrayIterator_first(t_CharArrayIterator *self)
          {
            jchar result;
            OBJ_CALL(result = self->object.first());
            return PyUnicode_FromUnicode((Py_UNICODE *) &result, 1);
          }

          static PyObject *t_CharArrayIterator_getBeginIndex(t_CharArrayIterator *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getBeginIndex());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_CharArrayIterator_getEndIndex(t_CharArrayIterator *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getEndIndex());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_CharArrayIterator_getIndex(t_CharArrayIterator *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getIndex());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_CharArrayIterator_getLength(t_CharArrayIterator *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getLength());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_CharArrayIterator_getStart(t_CharArrayIterator *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getStart());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_CharArrayIterator_getText(t_CharArrayIterator *self)
          {
            JArray< jchar > result((jobject) NULL);
            OBJ_CALL(result = self->object.getText());
            return result.wrap();
          }

          static PyObject *t_CharArrayIterator_last(t_CharArrayIterator *self)
          {
            jchar result;
            OBJ_CALL(result = self->object.last());
            return PyUnicode_FromUnicode((Py_UNICODE *) &result, 1);
          }

          static PyObject *t_CharArrayIterator_newSentenceInstance(PyTypeObject *type)
          {
            CharArrayIterator result((jobject) NULL);
            OBJ_CALL(result = ::org::apache::lucene::analysis::util::CharArrayIterator::newSentenceInstance());
            return t_CharArrayIterator::wrap_Object(result);
          }

          static PyObject *t_CharArrayIterator_newWordInstance(PyTypeObject *type)
          {
            CharArrayIterator result((jobject) NULL);
            OBJ_CALL(result = ::org::apache::lucene::analysis::util::CharArrayIterator::newWordInstance());
            return t_CharArrayIterator::wrap_Object(result);
          }

          static PyObject *t_CharArrayIterator_next(t_CharArrayIterator *self)
          {
            jchar result;
            OBJ_CALL(result = self->object.next());
            return PyUnicode_FromUnicode((Py_UNICODE *) &result, 1);
          }

          static PyObject *t_CharArrayIterator_previous(t_CharArrayIterator *self)
          {
            jchar result;
            OBJ_CALL(result = self->object.previous());
            return PyUnicode_FromUnicode((Py_UNICODE *) &result, 1);
          }

          static PyObject *t_CharArrayIterator_setIndex(t_CharArrayIterator *self, PyObject *arg)
          {
            jint a0;
            jchar result;

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(result = self->object.setIndex(a0));
              return PyUnicode_FromUnicode((Py_UNICODE *) &result, 1);
            }

            PyErr_SetArgsError((PyObject *) self, "setIndex", arg);
            return NULL;
          }

          static PyObject *t_CharArrayIterator_setText(t_CharArrayIterator *self, PyObject *args)
          {
            JArray< jchar > a0((jobject) NULL);
            jint a1;
            jint a2;

            if (!parseArgs(args, "[CII", &a0, &a1, &a2))
            {
              OBJ_CALL(self->object.setText(a0, a1, a2));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setText", args);
            return NULL;
          }

          static PyObject *t_CharArrayIterator_get__beginIndex(t_CharArrayIterator *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getBeginIndex());
            return PyInt_FromLong((long) value);
          }

          static PyObject *t_CharArrayIterator_get__endIndex(t_CharArrayIterator *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getEndIndex());
            return PyInt_FromLong((long) value);
          }

          static PyObject *t_CharArrayIterator_get__index(t_CharArrayIterator *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getIndex());
            return PyInt_FromLong((long) value);
          }
          static int t_CharArrayIterator_set__index(t_CharArrayIterator *self, PyObject *arg, void *data)
          {
            {
              jint value;
              if (!parseArg(arg, "I", &value))
              {
                INT_CALL(self->object.setIndex(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "index", arg);
            return -1;
          }

          static PyObject *t_CharArrayIterator_get__length(t_CharArrayIterator *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getLength());
            return PyInt_FromLong((long) value);
          }

          static PyObject *t_CharArrayIterator_get__start(t_CharArrayIterator *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getStart());
            return PyInt_FromLong((long) value);
          }

          static PyObject *t_CharArrayIterator_get__text(t_CharArrayIterator *self, void *data)
          {
            JArray< jchar > value((jobject) NULL);
            OBJ_CALL(value = self->object.getText());
            return value.wrap();
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/MatchNoDocsQueryNode.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace nodes {

              ::java::lang::Class *MatchNoDocsQueryNode::class$ = NULL;
              jmethodID *MatchNoDocsQueryNode::mids$ = NULL;
              bool MatchNoDocsQueryNode::live$ = false;

              jclass MatchNoDocsQueryNode::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/core/nodes/MatchNoDocsQueryNode");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
                  mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              MatchNoDocsQueryNode::MatchNoDocsQueryNode() : ::org::apache::lucene::queryparser::flexible::core::nodes::DeletedQueryNode(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

              ::java::lang::String MatchNoDocsQueryNode::toString() const
              {
                return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace nodes {
              static PyObject *t_MatchNoDocsQueryNode_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_MatchNoDocsQueryNode_instance_(PyTypeObject *type, PyObject *arg);
              static int t_MatchNoDocsQueryNode_init_(t_MatchNoDocsQueryNode *self, PyObject *args, PyObject *kwds);
              static PyObject *t_MatchNoDocsQueryNode_toString(t_MatchNoDocsQueryNode *self, PyObject *args);

              static PyMethodDef t_MatchNoDocsQueryNode__methods_[] = {
                DECLARE_METHOD(t_MatchNoDocsQueryNode, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_MatchNoDocsQueryNode, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_MatchNoDocsQueryNode, toString, METH_VARARGS),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(MatchNoDocsQueryNode, t_MatchNoDocsQueryNode, ::org::apache::lucene::queryparser::flexible::core::nodes::DeletedQueryNode, MatchNoDocsQueryNode, t_MatchNoDocsQueryNode_init_, 0, 0, 0, 0, 0);

              void t_MatchNoDocsQueryNode::install(PyObject *module)
              {
                installType(&PY_TYPE(MatchNoDocsQueryNode), module, "MatchNoDocsQueryNode", 0);
              }

              void t_MatchNoDocsQueryNode::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(MatchNoDocsQueryNode).tp_dict, "class_", make_descriptor(MatchNoDocsQueryNode::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(MatchNoDocsQueryNode).tp_dict, "wrapfn_", make_descriptor(t_MatchNoDocsQueryNode::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(MatchNoDocsQueryNode).tp_dict, "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_MatchNoDocsQueryNode_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, MatchNoDocsQueryNode::initializeClass, 1)))
                  return NULL;
                return t_MatchNoDocsQueryNode::wrap_Object(MatchNoDocsQueryNode(((t_MatchNoDocsQueryNode *) arg)->object.this$));
              }
              static PyObject *t_MatchNoDocsQueryNode_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, MatchNoDocsQueryNode::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_MatchNoDocsQueryNode_init_(t_MatchNoDocsQueryNode *self, PyObject *args, PyObject *kwds)
              {
                MatchNoDocsQueryNode object((jobject) NULL);

                INT_CALL(object = MatchNoDocsQueryNode());
                self->object = object;

                return 0;
              }

              static PyObject *t_MatchNoDocsQueryNode_toString(t_MatchNoDocsQueryNode *self, PyObject *args)
              {
                ::java::lang::String result((jobject) NULL);

                if (!parseArgs(args, ""))
                {
                  OBJ_CALL(result = self->object.toString());
                  return j2p(result);
                }

                return callSuper(&PY_TYPE(MatchNoDocsQueryNode), (PyObject *) self, "toString", args, 2);
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/tartarus/snowball/ext/DanishStemmer.h"
#include "java/lang/Object.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace tartarus {
    namespace snowball {
      namespace ext {

        ::java::lang::Class *DanishStemmer::class$ = NULL;
        jmethodID *DanishStemmer::mids$ = NULL;
        bool DanishStemmer::live$ = false;

        jclass DanishStemmer::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/tartarus/snowball/ext/DanishStemmer");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
            mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
            mids$[mid_stem_54c6a16a] = env->getMethodID(cls, "stem", "()Z");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        DanishStemmer::DanishStemmer() : ::org::tartarus::snowball::SnowballProgram(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        jboolean DanishStemmer::equals(const ::java::lang::Object & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
        }

        jint DanishStemmer::hashCode() const
        {
          return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
        }

        jboolean DanishStemmer::stem() const
        {
          return env->callBooleanMethod(this$, mids$[mid_stem_54c6a16a]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace tartarus {
    namespace snowball {
      namespace ext {
        static PyObject *t_DanishStemmer_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_DanishStemmer_instance_(PyTypeObject *type, PyObject *arg);
        static int t_DanishStemmer_init_(t_DanishStemmer *self, PyObject *args, PyObject *kwds);
        static PyObject *t_DanishStemmer_equals(t_DanishStemmer *self, PyObject *args);
        static PyObject *t_DanishStemmer_hashCode(t_DanishStemmer *self, PyObject *args);
        static PyObject *t_DanishStemmer_stem(t_DanishStemmer *self, PyObject *args);

        static PyMethodDef t_DanishStemmer__methods_[] = {
          DECLARE_METHOD(t_DanishStemmer, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_DanishStemmer, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_DanishStemmer, equals, METH_VARARGS),
          DECLARE_METHOD(t_DanishStemmer, hashCode, METH_VARARGS),
          DECLARE_METHOD(t_DanishStemmer, stem, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(DanishStemmer, t_DanishStemmer, ::org::tartarus::snowball::SnowballProgram, DanishStemmer, t_DanishStemmer_init_, 0, 0, 0, 0, 0);

        void t_DanishStemmer::install(PyObject *module)
        {
          installType(&PY_TYPE(DanishStemmer), module, "DanishStemmer", 0);
        }

        void t_DanishStemmer::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(DanishStemmer).tp_dict, "class_", make_descriptor(DanishStemmer::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(DanishStemmer).tp_dict, "wrapfn_", make_descriptor(t_DanishStemmer::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(DanishStemmer).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_DanishStemmer_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, DanishStemmer::initializeClass, 1)))
            return NULL;
          return t_DanishStemmer::wrap_Object(DanishStemmer(((t_DanishStemmer *) arg)->object.this$));
        }
        static PyObject *t_DanishStemmer_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, DanishStemmer::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_DanishStemmer_init_(t_DanishStemmer *self, PyObject *args, PyObject *kwds)
        {
          DanishStemmer object((jobject) NULL);

          INT_CALL(object = DanishStemmer());
          self->object = object;

          return 0;
        }

        static PyObject *t_DanishStemmer_equals(t_DanishStemmer *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.equals(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(DanishStemmer), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_DanishStemmer_hashCode(t_DanishStemmer *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hashCode());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(DanishStemmer), (PyObject *) self, "hashCode", args, 2);
        }

        static PyObject *t_DanishStemmer_stem(t_DanishStemmer *self, PyObject *args)
        {
          jboolean result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.stem());
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(DanishStemmer), (PyObject *) self, "stem", args, 2);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queries/function/valuesource/IDFValueSource.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "org/apache/lucene/queries/function/FunctionValues.h"
#include "java/lang/Class.h"
#include "java/util/Map.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {

            ::java::lang::Class *IDFValueSource::class$ = NULL;
            jmethodID *IDFValueSource::mids$ = NULL;
            bool IDFValueSource::live$ = false;

            jclass IDFValueSource::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queries/function/valuesource/IDFValueSource");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_b45b6622] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Lorg/apache/lucene/util/BytesRef;)V");
                mids$[mid_getValues_4c566485] = env->getMethodID(cls, "getValues", "(Ljava/util/Map;Lorg/apache/lucene/index/AtomicReaderContext;)Lorg/apache/lucene/queries/function/FunctionValues;");
                mids$[mid_name_14c7b5c5] = env->getMethodID(cls, "name", "()Ljava/lang/String;");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            IDFValueSource::IDFValueSource(const ::java::lang::String & a0, const ::java::lang::String & a1, const ::java::lang::String & a2, const ::org::apache::lucene::util::BytesRef & a3) : ::org::apache::lucene::queries::function::valuesource::DocFreqValueSource(env->newObject(initializeClass, &mids$, mid_init$_b45b6622, a0.this$, a1.this$, a2.this$, a3.this$)) {}

            ::org::apache::lucene::queries::function::FunctionValues IDFValueSource::getValues(const ::java::util::Map & a0, const ::org::apache::lucene::index::AtomicReaderContext & a1) const
            {
              return ::org::apache::lucene::queries::function::FunctionValues(env->callObjectMethod(this$, mids$[mid_getValues_4c566485], a0.this$, a1.this$));
            }

            ::java::lang::String IDFValueSource::name() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_name_14c7b5c5]));
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {
            static PyObject *t_IDFValueSource_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_IDFValueSource_instance_(PyTypeObject *type, PyObject *arg);
            static int t_IDFValueSource_init_(t_IDFValueSource *self, PyObject *args, PyObject *kwds);
            static PyObject *t_IDFValueSource_getValues(t_IDFValueSource *self, PyObject *args);
            static PyObject *t_IDFValueSource_name(t_IDFValueSource *self, PyObject *args);

            static PyMethodDef t_IDFValueSource__methods_[] = {
              DECLARE_METHOD(t_IDFValueSource, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_IDFValueSource, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_IDFValueSource, getValues, METH_VARARGS),
              DECLARE_METHOD(t_IDFValueSource, name, METH_VARARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(IDFValueSource, t_IDFValueSource, ::org::apache::lucene::queries::function::valuesource::DocFreqValueSource, IDFValueSource, t_IDFValueSource_init_, 0, 0, 0, 0, 0);

            void t_IDFValueSource::install(PyObject *module)
            {
              installType(&PY_TYPE(IDFValueSource), module, "IDFValueSource", 0);
            }

            void t_IDFValueSource::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(IDFValueSource).tp_dict, "class_", make_descriptor(IDFValueSource::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(IDFValueSource).tp_dict, "wrapfn_", make_descriptor(t_IDFValueSource::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(IDFValueSource).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_IDFValueSource_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, IDFValueSource::initializeClass, 1)))
                return NULL;
              return t_IDFValueSource::wrap_Object(IDFValueSource(((t_IDFValueSource *) arg)->object.this$));
            }
            static PyObject *t_IDFValueSource_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, IDFValueSource::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_IDFValueSource_init_(t_IDFValueSource *self, PyObject *args, PyObject *kwds)
            {
              ::java::lang::String a0((jobject) NULL);
              ::java::lang::String a1((jobject) NULL);
              ::java::lang::String a2((jobject) NULL);
              ::org::apache::lucene::util::BytesRef a3((jobject) NULL);
              IDFValueSource object((jobject) NULL);

              if (!parseArgs(args, "sssk", ::org::apache::lucene::util::BytesRef::initializeClass, &a0, &a1, &a2, &a3))
              {
                INT_CALL(object = IDFValueSource(a0, a1, a2, a3));
                self->object = object;
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_IDFValueSource_getValues(t_IDFValueSource *self, PyObject *args)
            {
              ::java::util::Map a0((jobject) NULL);
              PyTypeObject **p0;
              ::org::apache::lucene::index::AtomicReaderContext a1((jobject) NULL);
              ::org::apache::lucene::queries::function::FunctionValues result((jobject) NULL);

              if (!parseArgs(args, "Kk", ::java::util::Map::initializeClass, ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_, &a1))
              {
                OBJ_CALL(result = self->object.getValues(a0, a1));
                return ::org::apache::lucene::queries::function::t_FunctionValues::wrap_Object(result);
              }

              return callSuper(&PY_TYPE(IDFValueSource), (PyObject *) self, "getValues", args, 2);
            }

            static PyObject *t_IDFValueSource_name(t_IDFValueSource *self, PyObject *args)
            {
              ::java::lang::String result((jobject) NULL);

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.name());
                return j2p(result);
              }

              return callSuper(&PY_TYPE(IDFValueSource), (PyObject *) self, "name", args, 2);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/Codec.h"
#include "org/apache/lucene/codecs/PostingsFormat.h"
#include "org/apache/lucene/codecs/NormsFormat.h"
#include "java/lang/ClassLoader.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/codecs/FieldInfosFormat.h"
#include "org/apache/lucene/codecs/DocValuesFormat.h"
#include "org/apache/lucene/codecs/TermVectorsFormat.h"
#include "org/apache/lucene/util/NamedSPILoader$NamedSPI.h"
#include "java/lang/String.h"
#include "org/apache/lucene/codecs/SegmentInfoFormat.h"
#include "java/util/Set.h"
#include "org/apache/lucene/codecs/StoredFieldsFormat.h"
#include "org/apache/lucene/codecs/LiveDocsFormat.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {

        ::java::lang::Class *Codec::class$ = NULL;
        jmethodID *Codec::mids$ = NULL;
        bool Codec::live$ = false;

        jclass Codec::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/Codec");

            mids$ = new jmethodID[max_mid];
            mids$[mid_availableCodecs_03e99967] = env->getStaticMethodID(cls, "availableCodecs", "()Ljava/util/Set;");
            mids$[mid_docValuesFormat_9a259760] = env->getMethodID(cls, "docValuesFormat", "()Lorg/apache/lucene/codecs/DocValuesFormat;");
            mids$[mid_fieldInfosFormat_82160220] = env->getMethodID(cls, "fieldInfosFormat", "()Lorg/apache/lucene/codecs/FieldInfosFormat;");
            mids$[mid_forName_e21a4685] = env->getStaticMethodID(cls, "forName", "(Ljava/lang/String;)Lorg/apache/lucene/codecs/Codec;");
            mids$[mid_getDefault_27f0a02b] = env->getStaticMethodID(cls, "getDefault", "()Lorg/apache/lucene/codecs/Codec;");
            mids$[mid_getName_14c7b5c5] = env->getMethodID(cls, "getName", "()Ljava/lang/String;");
            mids$[mid_liveDocsFormat_fcc69d9a] = env->getMethodID(cls, "liveDocsFormat", "()Lorg/apache/lucene/codecs/LiveDocsFormat;");
            mids$[mid_normsFormat_03b89e43] = env->getMethodID(cls, "normsFormat", "()Lorg/apache/lucene/codecs/NormsFormat;");
            mids$[mid_postingsFormat_d12d16c8] = env->getMethodID(cls, "postingsFormat", "()Lorg/apache/lucene/codecs/PostingsFormat;");
            mids$[mid_reloadCodecs_9110048d] = env->getStaticMethodID(cls, "reloadCodecs", "(Ljava/lang/ClassLoader;)V");
            mids$[mid_segmentInfoFormat_c24d8633] = env->getMethodID(cls, "segmentInfoFormat", "()Lorg/apache/lucene/codecs/SegmentInfoFormat;");
            mids$[mid_setDefault_848f310e] = env->getStaticMethodID(cls, "setDefault", "(Lorg/apache/lucene/codecs/Codec;)V");
            mids$[mid_storedFieldsFormat_2b977101] = env->getMethodID(cls, "storedFieldsFormat", "()Lorg/apache/lucene/codecs/StoredFieldsFormat;");
            mids$[mid_termVectorsFormat_bcd1d8b8] = env->getMethodID(cls, "termVectorsFormat", "()Lorg/apache/lucene/codecs/TermVectorsFormat;");
            mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        ::java::util::Set Codec::availableCodecs()
        {
          jclass cls = env->getClass(initializeClass);
          return ::java::util::Set(env->callStaticObjectMethod(cls, mids$[mid_availableCodecs_03e99967]));
        }

        ::org::apache::lucene::codecs::DocValuesFormat Codec::docValuesFormat() const
        {
          return ::org::apache::lucene::codecs::DocValuesFormat(env->callObjectMethod(this$, mids$[mid_docValuesFormat_9a259760]));
        }

        ::org::apache::lucene::codecs::FieldInfosFormat Codec::fieldInfosFormat() const
        {
          return ::org::apache::lucene::codecs::FieldInfosFormat(env->callObjectMethod(this$, mids$[mid_fieldInfosFormat_82160220]));
        }

        Codec Codec::forName(const ::java::lang::String & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return Codec(env->callStaticObjectMethod(cls, mids$[mid_forName_e21a4685], a0.this$));
        }

        Codec Codec::getDefault()
        {
          jclass cls = env->getClass(initializeClass);
          return Codec(env->callStaticObjectMethod(cls, mids$[mid_getDefault_27f0a02b]));
        }

        ::java::lang::String Codec::getName() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getName_14c7b5c5]));
        }

        ::org::apache::lucene::codecs::LiveDocsFormat Codec::liveDocsFormat() const
        {
          return ::org::apache::lucene::codecs::LiveDocsFormat(env->callObjectMethod(this$, mids$[mid_liveDocsFormat_fcc69d9a]));
        }

        ::org::apache::lucene::codecs::NormsFormat Codec::normsFormat() const
        {
          return ::org::apache::lucene::codecs::NormsFormat(env->callObjectMethod(this$, mids$[mid_normsFormat_03b89e43]));
        }

        ::org::apache::lucene::codecs::PostingsFormat Codec::postingsFormat() const
        {
          return ::org::apache::lucene::codecs::PostingsFormat(env->callObjectMethod(this$, mids$[mid_postingsFormat_d12d16c8]));
        }

        void Codec::reloadCodecs(const ::java::lang::ClassLoader & a0)
        {
          jclass cls = env->getClass(initializeClass);
          env->callStaticVoidMethod(cls, mids$[mid_reloadCodecs_9110048d], a0.this$);
        }

        ::org::apache::lucene::codecs::SegmentInfoFormat Codec::segmentInfoFormat() const
        {
          return ::org::apache::lucene::codecs::SegmentInfoFormat(env->callObjectMethod(this$, mids$[mid_segmentInfoFormat_c24d8633]));
        }

        void Codec::setDefault(const Codec & a0)
        {
          jclass cls = env->getClass(initializeClass);
          env->callStaticVoidMethod(cls, mids$[mid_setDefault_848f310e], a0.this$);
        }

        ::org::apache::lucene::codecs::StoredFieldsFormat Codec::storedFieldsFormat() const
        {
          return ::org::apache::lucene::codecs::StoredFieldsFormat(env->callObjectMethod(this$, mids$[mid_storedFieldsFormat_2b977101]));
        }

        ::org::apache::lucene::codecs::TermVectorsFormat Codec::termVectorsFormat() const
        {
          return ::org::apache::lucene::codecs::TermVectorsFormat(env->callObjectMethod(this$, mids$[mid_termVectorsFormat_bcd1d8b8]));
        }

        ::java::lang::String Codec::toString() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        static PyObject *t_Codec_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_Codec_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_Codec_availableCodecs(PyTypeObject *type);
        static PyObject *t_Codec_docValuesFormat(t_Codec *self);
        static PyObject *t_Codec_fieldInfosFormat(t_Codec *self);
        static PyObject *t_Codec_forName(PyTypeObject *type, PyObject *arg);
        static PyObject *t_Codec_getDefault(PyTypeObject *type);
        static PyObject *t_Codec_getName(t_Codec *self);
        static PyObject *t_Codec_liveDocsFormat(t_Codec *self);
        static PyObject *t_Codec_normsFormat(t_Codec *self);
        static PyObject *t_Codec_postingsFormat(t_Codec *self);
        static PyObject *t_Codec_reloadCodecs(PyTypeObject *type, PyObject *arg);
        static PyObject *t_Codec_segmentInfoFormat(t_Codec *self);
        static PyObject *t_Codec_setDefault(PyTypeObject *type, PyObject *arg);
        static PyObject *t_Codec_storedFieldsFormat(t_Codec *self);
        static PyObject *t_Codec_termVectorsFormat(t_Codec *self);
        static PyObject *t_Codec_toString(t_Codec *self, PyObject *args);
        static PyObject *t_Codec_get__default(t_Codec *self, void *data);
        static int t_Codec_set__default(t_Codec *self, PyObject *arg, void *data);
        static PyObject *t_Codec_get__name(t_Codec *self, void *data);
        static PyGetSetDef t_Codec__fields_[] = {
          DECLARE_GETSET_FIELD(t_Codec, default),
          DECLARE_GET_FIELD(t_Codec, name),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_Codec__methods_[] = {
          DECLARE_METHOD(t_Codec, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_Codec, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_Codec, availableCodecs, METH_NOARGS | METH_CLASS),
          DECLARE_METHOD(t_Codec, docValuesFormat, METH_NOARGS),
          DECLARE_METHOD(t_Codec, fieldInfosFormat, METH_NOARGS),
          DECLARE_METHOD(t_Codec, forName, METH_O | METH_CLASS),
          DECLARE_METHOD(t_Codec, getDefault, METH_NOARGS | METH_CLASS),
          DECLARE_METHOD(t_Codec, getName, METH_NOARGS),
          DECLARE_METHOD(t_Codec, liveDocsFormat, METH_NOARGS),
          DECLARE_METHOD(t_Codec, normsFormat, METH_NOARGS),
          DECLARE_METHOD(t_Codec, postingsFormat, METH_NOARGS),
          DECLARE_METHOD(t_Codec, reloadCodecs, METH_O | METH_CLASS),
          DECLARE_METHOD(t_Codec, segmentInfoFormat, METH_NOARGS),
          DECLARE_METHOD(t_Codec, setDefault, METH_O | METH_CLASS),
          DECLARE_METHOD(t_Codec, storedFieldsFormat, METH_NOARGS),
          DECLARE_METHOD(t_Codec, termVectorsFormat, METH_NOARGS),
          DECLARE_METHOD(t_Codec, toString, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(Codec, t_Codec, ::java::lang::Object, Codec, abstract_init, 0, 0, t_Codec__fields_, 0, 0);

        void t_Codec::install(PyObject *module)
        {
          installType(&PY_TYPE(Codec), module, "Codec", 0);
        }

        void t_Codec::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(Codec).tp_dict, "class_", make_descriptor(Codec::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(Codec).tp_dict, "wrapfn_", make_descriptor(t_Codec::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(Codec).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_Codec_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, Codec::initializeClass, 1)))
            return NULL;
          return t_Codec::wrap_Object(Codec(((t_Codec *) arg)->object.this$));
        }
        static PyObject *t_Codec_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, Codec::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_Codec_availableCodecs(PyTypeObject *type)
        {
          ::java::util::Set result((jobject) NULL);
          OBJ_CALL(result = ::org::apache::lucene::codecs::Codec::availableCodecs());
          return ::java::util::t_Set::wrap_Object(result, &::java::lang::PY_TYPE(String));
        }

        static PyObject *t_Codec_docValuesFormat(t_Codec *self)
        {
          ::org::apache::lucene::codecs::DocValuesFormat result((jobject) NULL);
          OBJ_CALL(result = self->object.docValuesFormat());
          return ::org::apache::lucene::codecs::t_DocValuesFormat::wrap_Object(result);
        }

        static PyObject *t_Codec_fieldInfosFormat(t_Codec *self)
        {
          ::org::apache::lucene::codecs::FieldInfosFormat result((jobject) NULL);
          OBJ_CALL(result = self->object.fieldInfosFormat());
          return ::org::apache::lucene::codecs::t_FieldInfosFormat::wrap_Object(result);
        }

        static PyObject *t_Codec_forName(PyTypeObject *type, PyObject *arg)
        {
          ::java::lang::String a0((jobject) NULL);
          Codec result((jobject) NULL);

          if (!parseArg(arg, "s", &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::codecs::Codec::forName(a0));
            return t_Codec::wrap_Object(result);
          }

          PyErr_SetArgsError(type, "forName", arg);
          return NULL;
        }

        static PyObject *t_Codec_getDefault(PyTypeObject *type)
        {
          Codec result((jobject) NULL);
          OBJ_CALL(result = ::org::apache::lucene::codecs::Codec::getDefault());
          return t_Codec::wrap_Object(result);
        }

        static PyObject *t_Codec_getName(t_Codec *self)
        {
          ::java::lang::String result((jobject) NULL);
          OBJ_CALL(result = self->object.getName());
          return j2p(result);
        }

        static PyObject *t_Codec_liveDocsFormat(t_Codec *self)
        {
          ::org::apache::lucene::codecs::LiveDocsFormat result((jobject) NULL);
          OBJ_CALL(result = self->object.liveDocsFormat());
          return ::org::apache::lucene::codecs::t_LiveDocsFormat::wrap_Object(result);
        }

        static PyObject *t_Codec_normsFormat(t_Codec *self)
        {
          ::org::apache::lucene::codecs::NormsFormat result((jobject) NULL);
          OBJ_CALL(result = self->object.normsFormat());
          return ::org::apache::lucene::codecs::t_NormsFormat::wrap_Object(result);
        }

        static PyObject *t_Codec_postingsFormat(t_Codec *self)
        {
          ::org::apache::lucene::codecs::PostingsFormat result((jobject) NULL);
          OBJ_CALL(result = self->object.postingsFormat());
          return ::org::apache::lucene::codecs::t_PostingsFormat::wrap_Object(result);
        }

        static PyObject *t_Codec_reloadCodecs(PyTypeObject *type, PyObject *arg)
        {
          ::java::lang::ClassLoader a0((jobject) NULL);

          if (!parseArg(arg, "k", ::java::lang::ClassLoader::initializeClass, &a0))
          {
            OBJ_CALL(::org::apache::lucene::codecs::Codec::reloadCodecs(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError(type, "reloadCodecs", arg);
          return NULL;
        }

        static PyObject *t_Codec_segmentInfoFormat(t_Codec *self)
        {
          ::org::apache::lucene::codecs::SegmentInfoFormat result((jobject) NULL);
          OBJ_CALL(result = self->object.segmentInfoFormat());
          return ::org::apache::lucene::codecs::t_SegmentInfoFormat::wrap_Object(result);
        }

        static PyObject *t_Codec_setDefault(PyTypeObject *type, PyObject *arg)
        {
          Codec a0((jobject) NULL);

          if (!parseArg(arg, "k", Codec::initializeClass, &a0))
          {
            OBJ_CALL(::org::apache::lucene::codecs::Codec::setDefault(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError(type, "setDefault", arg);
          return NULL;
        }

        static PyObject *t_Codec_storedFieldsFormat(t_Codec *self)
        {
          ::org::apache::lucene::codecs::StoredFieldsFormat result((jobject) NULL);
          OBJ_CALL(result = self->object.storedFieldsFormat());
          return ::org::apache::lucene::codecs::t_StoredFieldsFormat::wrap_Object(result);
        }

        static PyObject *t_Codec_termVectorsFormat(t_Codec *self)
        {
          ::org::apache::lucene::codecs::TermVectorsFormat result((jobject) NULL);
          OBJ_CALL(result = self->object.termVectorsFormat());
          return ::org::apache::lucene::codecs::t_TermVectorsFormat::wrap_Object(result);
        }

        static PyObject *t_Codec_toString(t_Codec *self, PyObject *args)
        {
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.toString());
            return j2p(result);
          }

          return callSuper(&PY_TYPE(Codec), (PyObject *) self, "toString", args, 2);
        }

        static PyObject *t_Codec_get__default(t_Codec *self, void *data)
        {
          Codec value((jobject) NULL);
          OBJ_CALL(value = self->object.getDefault());
          return t_Codec::wrap_Object(value);
        }
        static int t_Codec_set__default(t_Codec *self, PyObject *arg, void *data)
        {
          {
            Codec value((jobject) NULL);
            if (!parseArg(arg, "k", Codec::initializeClass, &value))
            {
              INT_CALL(self->object.setDefault(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "default", arg);
          return -1;
        }

        static PyObject *t_Codec_get__name(t_Codec *self, void *data)
        {
          ::java::lang::String value((jobject) NULL);
          OBJ_CALL(value = self->object.getName());
          return j2p(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/pattern/PatternCaptureGroupFilterFactory.h"
#include "org/apache/lucene/analysis/pattern/PatternCaptureGroupTokenFilter.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/String.h"
#include "java/util/Map.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace pattern {

          ::java::lang::Class *PatternCaptureGroupFilterFactory::class$ = NULL;
          jmethodID *PatternCaptureGroupFilterFactory::mids$ = NULL;
          bool PatternCaptureGroupFilterFactory::live$ = false;

          jclass PatternCaptureGroupFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/pattern/PatternCaptureGroupFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4c9e2b1c] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_c840bb3a] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/pattern/PatternCaptureGroupTokenFilter;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          PatternCaptureGroupFilterFactory::PatternCaptureGroupFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_4c9e2b1c, a0.this$)) {}

          ::org::apache::lucene::analysis::pattern::PatternCaptureGroupTokenFilter PatternCaptureGroupFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::pattern::PatternCaptureGroupTokenFilter(env->callObjectMethod(this$, mids$[mid_create_c840bb3a], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace pattern {
          static PyObject *t_PatternCaptureGroupFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PatternCaptureGroupFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_PatternCaptureGroupFilterFactory_init_(t_PatternCaptureGroupFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_PatternCaptureGroupFilterFactory_create(t_PatternCaptureGroupFilterFactory *self, PyObject *args);

          static PyMethodDef t_PatternCaptureGroupFilterFactory__methods_[] = {
            DECLARE_METHOD(t_PatternCaptureGroupFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PatternCaptureGroupFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PatternCaptureGroupFilterFactory, create, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(PatternCaptureGroupFilterFactory, t_PatternCaptureGroupFilterFactory, ::org::apache::lucene::analysis::util::TokenFilterFactory, PatternCaptureGroupFilterFactory, t_PatternCaptureGroupFilterFactory_init_, 0, 0, 0, 0, 0);

          void t_PatternCaptureGroupFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(PatternCaptureGroupFilterFactory), module, "PatternCaptureGroupFilterFactory", 0);
          }

          void t_PatternCaptureGroupFilterFactory::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(PatternCaptureGroupFilterFactory).tp_dict, "class_", make_descriptor(PatternCaptureGroupFilterFactory::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(PatternCaptureGroupFilterFactory).tp_dict, "wrapfn_", make_descriptor(t_PatternCaptureGroupFilterFactory::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(PatternCaptureGroupFilterFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_PatternCaptureGroupFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, PatternCaptureGroupFilterFactory::initializeClass, 1)))
              return NULL;
            return t_PatternCaptureGroupFilterFactory::wrap_Object(PatternCaptureGroupFilterFactory(((t_PatternCaptureGroupFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_PatternCaptureGroupFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, PatternCaptureGroupFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_PatternCaptureGroupFilterFactory_init_(t_PatternCaptureGroupFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            PatternCaptureGroupFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = PatternCaptureGroupFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_PatternCaptureGroupFilterFactory_create(t_PatternCaptureGroupFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::pattern::PatternCaptureGroupTokenFilter result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::pattern::t_PatternCaptureGroupTokenFilter::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(PatternCaptureGroupFilterFactory), (PyObject *) self, "create", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/collation/CollationKeyFilterFactory.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "org/apache/lucene/analysis/util/MultiTermAwareComponent.h"
#include "java/lang/Class.h"
#include "java/io/IOException.h"
#include "java/util/Map.h"
#include "java/lang/String.h"
#include "org/apache/lucene/analysis/util/ResourceLoader.h"
#include "org/apache/lucene/analysis/util/ResourceLoaderAware.h"
#include "org/apache/lucene/analysis/util/AbstractAnalysisFactory.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace collation {

        ::java::lang::Class *CollationKeyFilterFactory::class$ = NULL;
        jmethodID *CollationKeyFilterFactory::mids$ = NULL;
        bool CollationKeyFilterFactory::live$ = false;

        jclass CollationKeyFilterFactory::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/collation/CollationKeyFilterFactory");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_4c9e2b1c] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
            mids$[mid_create_a65cd6ab] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/TokenStream;");
            mids$[mid_getMultiTermComponent_0a3f1d72] = env->getMethodID(cls, "getMultiTermComponent", "()Lorg/apache/lucene/analysis/util/AbstractAnalysisFactory;");
            mids$[mid_inform_d6a4bc97] = env->getMethodID(cls, "inform", "(Lorg/apache/lucene/analysis/util/ResourceLoader;)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        CollationKeyFilterFactory::CollationKeyFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_4c9e2b1c, a0.this$)) {}

        ::org::apache::lucene::analysis::TokenStream CollationKeyFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
        {
          return ::org::apache::lucene::analysis::TokenStream(env->callObjectMethod(this$, mids$[mid_create_a65cd6ab], a0.this$));
        }

        ::org::apache::lucene::analysis::util::AbstractAnalysisFactory CollationKeyFilterFactory::getMultiTermComponent() const
        {
          return ::org::apache::lucene::analysis::util::AbstractAnalysisFactory(env->callObjectMethod(this$, mids$[mid_getMultiTermComponent_0a3f1d72]));
        }

        void CollationKeyFilterFactory::inform(const ::org::apache::lucene::analysis::util::ResourceLoader & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_inform_d6a4bc97], a0.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace collation {
        static PyObject *t_CollationKeyFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_CollationKeyFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
        static int t_CollationKeyFilterFactory_init_(t_CollationKeyFilterFactory *self, PyObject *args, PyObject *kwds);
        static PyObject *t_CollationKeyFilterFactory_create(t_CollationKeyFilterFactory *self, PyObject *args);
        static PyObject *t_CollationKeyFilterFactory_getMultiTermComponent(t_CollationKeyFilterFactory *self);
        static PyObject *t_CollationKeyFilterFactory_inform(t_CollationKeyFilterFactory *self, PyObject *arg);
        static PyObject *t_CollationKeyFilterFactory_get__multiTermComponent(t_CollationKeyFilterFactory *self, void *data);
        static PyGetSetDef t_CollationKeyFilterFactory__fields_[] = {
          DECLARE_GET_FIELD(t_CollationKeyFilterFactory, multiTermComponent),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_CollationKeyFilterFactory__methods_[] = {
          DECLARE_METHOD(t_CollationKeyFilterFactory, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_CollationKeyFilterFactory, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_CollationKeyFilterFactory, create, METH_VARARGS),
          DECLARE_METHOD(t_CollationKeyFilterFactory, getMultiTermComponent, METH_NOARGS),
          DECLARE_METHOD(t_CollationKeyFilterFactory, inform, METH_O),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(CollationKeyFilterFactory, t_CollationKeyFilterFactory, ::org::apache::lucene::analysis::util::TokenFilterFactory, CollationKeyFilterFactory, t_CollationKeyFilterFactory_init_, 0, 0, t_CollationKeyFilterFactory__fields_, 0, 0);

        void t_CollationKeyFilterFactory::install(PyObject *module)
        {
          installType(&PY_TYPE(CollationKeyFilterFactory), module, "CollationKeyFilterFactory", 0);
        }

        void t_CollationKeyFilterFactory::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(CollationKeyFilterFactory).tp_dict, "class_", make_descriptor(CollationKeyFilterFactory::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(CollationKeyFilterFactory).tp_dict, "wrapfn_", make_descriptor(t_CollationKeyFilterFactory::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(CollationKeyFilterFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_CollationKeyFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, CollationKeyFilterFactory::initializeClass, 1)))
            return NULL;
          return t_CollationKeyFilterFactory::wrap_Object(CollationKeyFilterFactory(((t_CollationKeyFilterFactory *) arg)->object.this$));
        }
        static PyObject *t_CollationKeyFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, CollationKeyFilterFactory::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_CollationKeyFilterFactory_init_(t_CollationKeyFilterFactory *self, PyObject *args, PyObject *kwds)
        {
          ::java::util::Map a0((jobject) NULL);
          PyTypeObject **p0;
          CollationKeyFilterFactory object((jobject) NULL);

          if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
          {
            INT_CALL(object = CollationKeyFilterFactory(a0));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_CollationKeyFilterFactory_create(t_CollationKeyFilterFactory *self, PyObject *args)
        {
          ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
          ::org::apache::lucene::analysis::TokenStream result((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.create(a0));
            return ::org::apache::lucene::analysis::t_TokenStream::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(CollationKeyFilterFactory), (PyObject *) self, "create", args, 2);
        }

        static PyObject *t_CollationKeyFilterFactory_getMultiTermComponent(t_CollationKeyFilterFactory *self)
        {
          ::org::apache::lucene::analysis::util::AbstractAnalysisFactory result((jobject) NULL);
          OBJ_CALL(result = self->object.getMultiTermComponent());
          return ::org::apache::lucene::analysis::util::t_AbstractAnalysisFactory::wrap_Object(result);
        }

        static PyObject *t_CollationKeyFilterFactory_inform(t_CollationKeyFilterFactory *self, PyObject *arg)
        {
          ::org::apache::lucene::analysis::util::ResourceLoader a0((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::analysis::util::ResourceLoader::initializeClass, &a0))
          {
            OBJ_CALL(self->object.inform(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "inform", arg);
          return NULL;
        }

        static PyObject *t_CollationKeyFilterFactory_get__multiTermComponent(t_CollationKeyFilterFactory *self, void *data)
        {
          ::org::apache::lucene::analysis::util::AbstractAnalysisFactory value((jobject) NULL);
          OBJ_CALL(value = self->object.getMultiTermComponent());
          return ::org::apache::lucene::analysis::util::t_AbstractAnalysisFactory::wrap_Object(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/BoostQueryNode.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/queryparser/flexible/core/parser/EscapeQuerySyntax.h"
#include "java/lang/CloneNotSupportedException.h"
#include "java/lang/CharSequence.h"
#include "java/lang/String.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/QueryNode.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace nodes {

              ::java::lang::Class *BoostQueryNode::class$ = NULL;
              jmethodID *BoostQueryNode::mids$ = NULL;
              bool BoostQueryNode::live$ = false;

              jclass BoostQueryNode::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/core/nodes/BoostQueryNode");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_36cea640] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;F)V");
                  mids$[mid_cloneTree_b387c5e6] = env->getMethodID(cls, "cloneTree", "()Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;");
                  mids$[mid_getChild_b387c5e6] = env->getMethodID(cls, "getChild", "()Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;");
                  mids$[mid_getValue_54c6a176] = env->getMethodID(cls, "getValue", "()F");
                  mids$[mid_toQueryString_99b8dfe1] = env->getMethodID(cls, "toQueryString", "(Lorg/apache/lucene/queryparser/flexible/core/parser/EscapeQuerySyntax;)Ljava/lang/CharSequence;");
                  mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              BoostQueryNode::BoostQueryNode(const ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode & a0, jfloat a1) : ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNodeImpl(env->newObject(initializeClass, &mids$, mid_init$_36cea640, a0.this$, a1)) {}

              ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode BoostQueryNode::cloneTree() const
              {
                return ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode(env->callObjectMethod(this$, mids$[mid_cloneTree_b387c5e6]));
              }

              ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode BoostQueryNode::getChild() const
              {
                return ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode(env->callObjectMethod(this$, mids$[mid_getChild_b387c5e6]));
              }

              jfloat BoostQueryNode::getValue() const
              {
                return env->callFloatMethod(this$, mids$[mid_getValue_54c6a176]);
              }

              ::java::lang::CharSequence BoostQueryNode::toQueryString(const ::org::apache::lucene::queryparser::flexible::core::parser::EscapeQuerySyntax & a0) const
              {
                return ::java::lang::CharSequence(env->callObjectMethod(this$, mids$[mid_toQueryString_99b8dfe1], a0.this$));
              }

              ::java::lang::String BoostQueryNode::toString() const
              {
                return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace nodes {
              static PyObject *t_BoostQueryNode_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_BoostQueryNode_instance_(PyTypeObject *type, PyObject *arg);
              static int t_BoostQueryNode_init_(t_BoostQueryNode *self, PyObject *args, PyObject *kwds);
              static PyObject *t_BoostQueryNode_cloneTree(t_BoostQueryNode *self, PyObject *args);
              static PyObject *t_BoostQueryNode_getChild(t_BoostQueryNode *self);
              static PyObject *t_BoostQueryNode_getValue(t_BoostQueryNode *self);
              static PyObject *t_BoostQueryNode_toQueryString(t_BoostQueryNode *self, PyObject *args);
              static PyObject *t_BoostQueryNode_toString(t_BoostQueryNode *self, PyObject *args);
              static PyObject *t_BoostQueryNode_get__child(t_BoostQueryNode *self, void *data);
              static PyObject *t_BoostQueryNode_get__value(t_BoostQueryNode *self, void *data);
              static PyGetSetDef t_BoostQueryNode__fields_[] = {
                DECLARE_GET_FIELD(t_BoostQueryNode, child),
                DECLARE_GET_FIELD(t_BoostQueryNode, value),
                { NULL, NULL, NULL, NULL, NULL }
              };

              static PyMethodDef t_BoostQueryNode__methods_[] = {
                DECLARE_METHOD(t_BoostQueryNode, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_BoostQueryNode, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_BoostQueryNode, cloneTree, METH_VARARGS),
                DECLARE_METHOD(t_BoostQueryNode, getChild, METH_NOARGS),
                DECLARE_METHOD(t_BoostQueryNode, getValue, METH_NOARGS),
                DECLARE_METHOD(t_BoostQueryNode, toQueryString, METH_VARARGS),
                DECLARE_METHOD(t_BoostQueryNode, toString, METH_VARARGS),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(BoostQueryNode, t_BoostQueryNode, ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNodeImpl, BoostQueryNode, t_BoostQueryNode_init_, 0, 0, t_BoostQueryNode__fields_, 0, 0);

              void t_BoostQueryNode::install(PyObject *module)
              {
                installType(&PY_TYPE(BoostQueryNode), module, "BoostQueryNode", 0);
              }

              void t_BoostQueryNode::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(BoostQueryNode).tp_dict, "class_", make_descriptor(BoostQueryNode::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(BoostQueryNode).tp_dict, "wrapfn_", make_descriptor(t_BoostQueryNode::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(BoostQueryNode).tp_dict, "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_BoostQueryNode_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, BoostQueryNode::initializeClass, 1)))
                  return NULL;
                return t_BoostQueryNode::wrap_Object(BoostQueryNode(((t_BoostQueryNode *) arg)->object.this$));
              }
              static PyObject *t_BoostQueryNode_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, BoostQueryNode::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_BoostQueryNode_init_(t_BoostQueryNode *self, PyObject *args, PyObject *kwds)
              {
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode a0((jobject) NULL);
                jfloat a1;
                BoostQueryNode object((jobject) NULL);

                if (!parseArgs(args, "kF", ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode::initializeClass, &a0, &a1))
                {
                  INT_CALL(object = BoostQueryNode(a0, a1));
                  self->object = object;
                }
                else
                {
                  PyErr_SetArgsError((PyObject *) self, "__init__", args);
                  return -1;
                }

                return 0;
              }

              static PyObject *t_BoostQueryNode_cloneTree(t_BoostQueryNode *self, PyObject *args)
              {
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode result((jobject) NULL);

                if (!parseArgs(args, ""))
                {
                  OBJ_CALL(result = self->object.cloneTree());
                  return ::org::apache::lucene::queryparser::flexible::core::nodes::t_QueryNode::wrap_Object(result);
                }

                return callSuper(&PY_TYPE(BoostQueryNode), (PyObject *) self, "cloneTree", args, 2);
              }

              static PyObject *t_BoostQueryNode_getChild(t_BoostQueryNode *self)
              {
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode result((jobject) NULL);
                OBJ_CALL(result = self->object.getChild());
                return ::org::apache::lucene::queryparser::flexible::core::nodes::t_QueryNode::wrap_Object(result);
              }

              static PyObject *t_BoostQueryNode_getValue(t_BoostQueryNode *self)
              {
                jfloat result;
                OBJ_CALL(result = self->object.getValue());
                return PyFloat_FromDouble((double) result);
              }

              static PyObject *t_BoostQueryNode_toQueryString(t_BoostQueryNode *self, PyObject *args)
              {
                ::org::apache::lucene::queryparser::flexible::core::parser::EscapeQuerySyntax a0((jobject) NULL);
                ::java::lang::CharSequence result((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::queryparser::flexible::core::parser::EscapeQuerySyntax::initializeClass, &a0))
                {
                  OBJ_CALL(result = self->object.toQueryString(a0));
                  return ::java::lang::t_CharSequence::wrap_Object(result);
                }

                return callSuper(&PY_TYPE(BoostQueryNode), (PyObject *) self, "toQueryString", args, 2);
              }

              static PyObject *t_BoostQueryNode_toString(t_BoostQueryNode *self, PyObject *args)
              {
                ::java::lang::String result((jobject) NULL);

                if (!parseArgs(args, ""))
                {
                  OBJ_CALL(result = self->object.toString());
                  return j2p(result);
                }

                return callSuper(&PY_TYPE(BoostQueryNode), (PyObject *) self, "toString", args, 2);
              }

              static PyObject *t_BoostQueryNode_get__child(t_BoostQueryNode *self, void *data)
              {
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode value((jobject) NULL);
                OBJ_CALL(value = self->object.getChild());
                return ::org::apache::lucene::queryparser::flexible::core::nodes::t_QueryNode::wrap_Object(value);
              }

              static PyObject *t_BoostQueryNode_get__value(t_BoostQueryNode *self, void *data)
              {
                jfloat value;
                OBJ_CALL(value = self->object.getValue());
                return PyFloat_FromDouble((double) value);
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/miscellaneous/LimitTokenPositionFilterFactory.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/String.h"
#include "java/util/Map.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {

          ::java::lang::Class *LimitTokenPositionFilterFactory::class$ = NULL;
          jmethodID *LimitTokenPositionFilterFactory::mids$ = NULL;
          bool LimitTokenPositionFilterFactory::live$ = false;
          ::java::lang::String *LimitTokenPositionFilterFactory::CONSUME_ALL_TOKENS_KEY = NULL;
          ::java::lang::String *LimitTokenPositionFilterFactory::MAX_TOKEN_POSITION_KEY = NULL;

          jclass LimitTokenPositionFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/miscellaneous/LimitTokenPositionFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4c9e2b1c] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_a65cd6ab] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/TokenStream;");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              CONSUME_ALL_TOKENS_KEY = new ::java::lang::String(env->getStaticObjectField(cls, "CONSUME_ALL_TOKENS_KEY", "Ljava/lang/String;"));
              MAX_TOKEN_POSITION_KEY = new ::java::lang::String(env->getStaticObjectField(cls, "MAX_TOKEN_POSITION_KEY", "Ljava/lang/String;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          LimitTokenPositionFilterFactory::LimitTokenPositionFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_4c9e2b1c, a0.this$)) {}

          ::org::apache::lucene::analysis::TokenStream LimitTokenPositionFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::TokenStream(env->callObjectMethod(this$, mids$[mid_create_a65cd6ab], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {
          static PyObject *t_LimitTokenPositionFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_LimitTokenPositionFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_LimitTokenPositionFilterFactory_init_(t_LimitTokenPositionFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_LimitTokenPositionFilterFactory_create(t_LimitTokenPositionFilterFactory *self, PyObject *args);

          static PyMethodDef t_LimitTokenPositionFilterFactory__methods_[] = {
            DECLARE_METHOD(t_LimitTokenPositionFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_LimitTokenPositionFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_LimitTokenPositionFilterFactory, create, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(LimitTokenPositionFilterFactory, t_LimitTokenPositionFilterFactory, ::org::apache::lucene::analysis::util::TokenFilterFactory, LimitTokenPositionFilterFactory, t_LimitTokenPositionFilterFactory_init_, 0, 0, 0, 0, 0);

          void t_LimitTokenPositionFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(LimitTokenPositionFilterFactory), module, "LimitTokenPositionFilterFactory", 0);
          }

          void t_LimitTokenPositionFilterFactory::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(LimitTokenPositionFilterFactory).tp_dict, "class_", make_descriptor(LimitTokenPositionFilterFactory::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(LimitTokenPositionFilterFactory).tp_dict, "wrapfn_", make_descriptor(t_LimitTokenPositionFilterFactory::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(LimitTokenPositionFilterFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(LimitTokenPositionFilterFactory::initializeClass);
            PyDict_SetItemString(PY_TYPE(LimitTokenPositionFilterFactory).tp_dict, "CONSUME_ALL_TOKENS_KEY", make_descriptor(j2p(*LimitTokenPositionFilterFactory::CONSUME_ALL_TOKENS_KEY)));
            PyDict_SetItemString(PY_TYPE(LimitTokenPositionFilterFactory).tp_dict, "MAX_TOKEN_POSITION_KEY", make_descriptor(j2p(*LimitTokenPositionFilterFactory::MAX_TOKEN_POSITION_KEY)));
          }

          static PyObject *t_LimitTokenPositionFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, LimitTokenPositionFilterFactory::initializeClass, 1)))
              return NULL;
            return t_LimitTokenPositionFilterFactory::wrap_Object(LimitTokenPositionFilterFactory(((t_LimitTokenPositionFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_LimitTokenPositionFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, LimitTokenPositionFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_LimitTokenPositionFilterFactory_init_(t_LimitTokenPositionFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            LimitTokenPositionFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = LimitTokenPositionFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_LimitTokenPositionFilterFactory_create(t_LimitTokenPositionFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::TokenStream result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::t_TokenStream::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(LimitTokenPositionFilterFactory), (PyObject *) self, "create", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/core/QueryNodeError.h"
#include "org/apache/lucene/queryparser/flexible/messages/Message.h"
#include "java/lang/Throwable.h"
#include "org/apache/lucene/queryparser/flexible/messages/NLSException.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {

            ::java::lang::Class *QueryNodeError::class$ = NULL;
            jmethodID *QueryNodeError::mids$ = NULL;
            bool QueryNodeError::live$ = false;

            jclass QueryNodeError::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/core/QueryNodeError");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_c5ec8ca4] = env->getMethodID(cls, "<init>", "(Ljava/lang/Throwable;)V");
                mids$[mid_init$_1dde9d59] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/queryparser/flexible/messages/Message;)V");
                mids$[mid_init$_41dcc0ed] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/queryparser/flexible/messages/Message;Ljava/lang/Throwable;)V");
                mids$[mid_getMessageObject_1bceed44] = env->getMethodID(cls, "getMessageObject", "()Lorg/apache/lucene/queryparser/flexible/messages/Message;");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            QueryNodeError::QueryNodeError(const ::java::lang::Throwable & a0) : ::java::lang::Error(env->newObject(initializeClass, &mids$, mid_init$_c5ec8ca4, a0.this$)) {}

            QueryNodeError::QueryNodeError(const ::org::apache::lucene::queryparser::flexible::messages::Message & a0) : ::java::lang::Error(env->newObject(initializeClass, &mids$, mid_init$_1dde9d59, a0.this$)) {}

            QueryNodeError::QueryNodeError(const ::org::apache::lucene::queryparser::flexible::messages::Message & a0, const ::java::lang::Throwable & a1) : ::java::lang::Error(env->newObject(initializeClass, &mids$, mid_init$_41dcc0ed, a0.this$, a1.this$)) {}

            ::org::apache::lucene::queryparser::flexible::messages::Message QueryNodeError::getMessageObject() const
            {
              return ::org::apache::lucene::queryparser::flexible::messages::Message(env->callObjectMethod(this$, mids$[mid_getMessageObject_1bceed44]));
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            static PyObject *t_QueryNodeError_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_QueryNodeError_instance_(PyTypeObject *type, PyObject *arg);
            static int t_QueryNodeError_init_(t_QueryNodeError *self, PyObject *args, PyObject *kwds);
            static PyObject *t_QueryNodeError_getMessageObject(t_QueryNodeError *self);
            static PyObject *t_QueryNodeError_get__messageObject(t_QueryNodeError *self, void *data);
            static PyGetSetDef t_QueryNodeError__fields_[] = {
              DECLARE_GET_FIELD(t_QueryNodeError, messageObject),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_QueryNodeError__methods_[] = {
              DECLARE_METHOD(t_QueryNodeError, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_QueryNodeError, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_QueryNodeError, getMessageObject, METH_NOARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(QueryNodeError, t_QueryNodeError, ::java::lang::Error, QueryNodeError, t_QueryNodeError_init_, 0, 0, t_QueryNodeError__fields_, 0, 0);

            void t_QueryNodeError::install(PyObject *module)
            {
              installType(&PY_TYPE(QueryNodeError), module, "QueryNodeError", 0);
            }

            void t_QueryNodeError::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(QueryNodeError).tp_dict, "class_", make_descriptor(QueryNodeError::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(QueryNodeError).tp_dict, "wrapfn_", make_descriptor(t_QueryNodeError::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(QueryNodeError).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_QueryNodeError_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, QueryNodeError::initializeClass, 1)))
                return NULL;
              return t_QueryNodeError::wrap_Object(QueryNodeError(((t_QueryNodeError *) arg)->object.this$));
            }
            static PyObject *t_QueryNodeError_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, QueryNodeError::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_QueryNodeError_init_(t_QueryNodeError *self, PyObject *args, PyObject *kwds)
            {
              switch (PyTuple_GET_SIZE(args)) {
               case 1:
                {
                  ::java::lang::Throwable a0((jobject) NULL);
                  QueryNodeError object((jobject) NULL);

                  if (!parseArgs(args, "k", ::java::lang::Throwable::initializeClass, &a0))
                  {
                    INT_CALL(object = QueryNodeError(a0));
                    self->object = object;
                    break;
                  }
                }
                {
                  ::org::apache::lucene::queryparser::flexible::messages::Message a0((jobject) NULL);
                  QueryNodeError object((jobject) NULL);

                  if (!parseArgs(args, "k", ::org::apache::lucene::queryparser::flexible::messages::Message::initializeClass, &a0))
                  {
                    INT_CALL(object = QueryNodeError(a0));
                    self->object = object;
                    break;
                  }
                }
                goto err;
               case 2:
                {
                  ::org::apache::lucene::queryparser::flexible::messages::Message a0((jobject) NULL);
                  ::java::lang::Throwable a1((jobject) NULL);
                  QueryNodeError object((jobject) NULL);

                  if (!parseArgs(args, "kk", ::org::apache::lucene::queryparser::flexible::messages::Message::initializeClass, ::java::lang::Throwable::initializeClass, &a0, &a1))
                  {
                    INT_CALL(object = QueryNodeError(a0, a1));
                    self->object = object;
                    break;
                  }
                }
               default:
               err:
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_QueryNodeError_getMessageObject(t_QueryNodeError *self)
            {
              ::org::apache::lucene::queryparser::flexible::messages::Message result((jobject) NULL);
              OBJ_CALL(result = self->object.getMessageObject());
              return ::org::apache::lucene::queryparser::flexible::messages::t_Message::wrap_Object(result);
            }

            static PyObject *t_QueryNodeError_get__messageObject(t_QueryNodeError *self, void *data)
            {
              ::org::apache::lucene::queryparser::flexible::messages::Message value((jobject) NULL);
              OBJ_CALL(value = self->object.getMessageObject());
              return ::org::apache::lucene::queryparser::flexible::messages::t_Message::wrap_Object(value);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/standard/processors/FuzzyQueryNodeProcessor.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace processors {

              ::java::lang::Class *FuzzyQueryNodeProcessor::class$ = NULL;
              jmethodID *FuzzyQueryNodeProcessor::mids$ = NULL;
              bool FuzzyQueryNodeProcessor::live$ = false;

              jclass FuzzyQueryNodeProcessor::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/standard/processors/FuzzyQueryNodeProcessor");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
                  mids$[mid_preProcessNode_6705aed7] = env->getMethodID(cls, "preProcessNode", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;)Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;");
                  mids$[mid_setChildrenOrder_4f378251] = env->getMethodID(cls, "setChildrenOrder", "(Ljava/util/List;)Ljava/util/List;");
                  mids$[mid_postProcessNode_6705aed7] = env->getMethodID(cls, "postProcessNode", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;)Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              FuzzyQueryNodeProcessor::FuzzyQueryNodeProcessor() : ::org::apache::lucene::queryparser::flexible::core::processors::QueryNodeProcessorImpl(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace processors {
              static PyObject *t_FuzzyQueryNodeProcessor_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_FuzzyQueryNodeProcessor_instance_(PyTypeObject *type, PyObject *arg);
              static int t_FuzzyQueryNodeProcessor_init_(t_FuzzyQueryNodeProcessor *self, PyObject *args, PyObject *kwds);

              static PyMethodDef t_FuzzyQueryNodeProcessor__methods_[] = {
                DECLARE_METHOD(t_FuzzyQueryNodeProcessor, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_FuzzyQueryNodeProcessor, instance_, METH_O | METH_CLASS),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(FuzzyQueryNodeProcessor, t_FuzzyQueryNodeProcessor, ::org::apache::lucene::queryparser::flexible::core::processors::QueryNodeProcessorImpl, FuzzyQueryNodeProcessor, t_FuzzyQueryNodeProcessor_init_, 0, 0, 0, 0, 0);

              void t_FuzzyQueryNodeProcessor::install(PyObject *module)
              {
                installType(&PY_TYPE(FuzzyQueryNodeProcessor), module, "FuzzyQueryNodeProcessor", 0);
              }

              void t_FuzzyQueryNodeProcessor::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(FuzzyQueryNodeProcessor).tp_dict, "class_", make_descriptor(FuzzyQueryNodeProcessor::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(FuzzyQueryNodeProcessor).tp_dict, "wrapfn_", make_descriptor(t_FuzzyQueryNodeProcessor::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(FuzzyQueryNodeProcessor).tp_dict, "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_FuzzyQueryNodeProcessor_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, FuzzyQueryNodeProcessor::initializeClass, 1)))
                  return NULL;
                return t_FuzzyQueryNodeProcessor::wrap_Object(FuzzyQueryNodeProcessor(((t_FuzzyQueryNodeProcessor *) arg)->object.this$));
              }
              static PyObject *t_FuzzyQueryNodeProcessor_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, FuzzyQueryNodeProcessor::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_FuzzyQueryNodeProcessor_init_(t_FuzzyQueryNodeProcessor *self, PyObject *args, PyObject *kwds)
              {
                FuzzyQueryNodeProcessor object((jobject) NULL);

                INT_CALL(object = FuzzyQueryNodeProcessor());
                self->object = object;

                return 0;
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/lucene45/Lucene45Codec.h"
#include "org/apache/lucene/codecs/PostingsFormat.h"
#include "org/apache/lucene/codecs/NormsFormat.h"
#include "org/apache/lucene/codecs/FieldInfosFormat.h"
#include "org/apache/lucene/codecs/DocValuesFormat.h"
#include "org/apache/lucene/codecs/TermVectorsFormat.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "org/apache/lucene/codecs/SegmentInfoFormat.h"
#include "org/apache/lucene/codecs/StoredFieldsFormat.h"
#include "org/apache/lucene/codecs/LiveDocsFormat.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace lucene45 {

          ::java::lang::Class *Lucene45Codec::class$ = NULL;
          jmethodID *Lucene45Codec::mids$ = NULL;
          bool Lucene45Codec::live$ = false;

          jclass Lucene45Codec::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/lucene45/Lucene45Codec");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_docValuesFormat_9a259760] = env->getMethodID(cls, "docValuesFormat", "()Lorg/apache/lucene/codecs/DocValuesFormat;");
              mids$[mid_fieldInfosFormat_82160220] = env->getMethodID(cls, "fieldInfosFormat", "()Lorg/apache/lucene/codecs/FieldInfosFormat;");
              mids$[mid_getDocValuesFormatForField_36ef78ba] = env->getMethodID(cls, "getDocValuesFormatForField", "(Ljava/lang/String;)Lorg/apache/lucene/codecs/DocValuesFormat;");
              mids$[mid_getPostingsFormatForField_19d2f1c6] = env->getMethodID(cls, "getPostingsFormatForField", "(Ljava/lang/String;)Lorg/apache/lucene/codecs/PostingsFormat;");
              mids$[mid_liveDocsFormat_fcc69d9a] = env->getMethodID(cls, "liveDocsFormat", "()Lorg/apache/lucene/codecs/LiveDocsFormat;");
              mids$[mid_normsFormat_03b89e43] = env->getMethodID(cls, "normsFormat", "()Lorg/apache/lucene/codecs/NormsFormat;");
              mids$[mid_postingsFormat_d12d16c8] = env->getMethodID(cls, "postingsFormat", "()Lorg/apache/lucene/codecs/PostingsFormat;");
              mids$[mid_segmentInfoFormat_c24d8633] = env->getMethodID(cls, "segmentInfoFormat", "()Lorg/apache/lucene/codecs/SegmentInfoFormat;");
              mids$[mid_storedFieldsFormat_2b977101] = env->getMethodID(cls, "storedFieldsFormat", "()Lorg/apache/lucene/codecs/StoredFieldsFormat;");
              mids$[mid_termVectorsFormat_bcd1d8b8] = env->getMethodID(cls, "termVectorsFormat", "()Lorg/apache/lucene/codecs/TermVectorsFormat;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          Lucene45Codec::Lucene45Codec() : ::org::apache::lucene::codecs::Codec(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          ::org::apache::lucene::codecs::DocValuesFormat Lucene45Codec::docValuesFormat() const
          {
            return ::org::apache::lucene::codecs::DocValuesFormat(env->callObjectMethod(this$, mids$[mid_docValuesFormat_9a259760]));
          }

          ::org::apache::lucene::codecs::FieldInfosFormat Lucene45Codec::fieldInfosFormat() const
          {
            return ::org::apache::lucene::codecs::FieldInfosFormat(env->callObjectMethod(this$, mids$[mid_fieldInfosFormat_82160220]));
          }

          ::org::apache::lucene::codecs::DocValuesFormat Lucene45Codec::getDocValuesFormatForField(const ::java::lang::String & a0) const
          {
            return ::org::apache::lucene::codecs::DocValuesFormat(env->callObjectMethod(this$, mids$[mid_getDocValuesFormatForField_36ef78ba], a0.this$));
          }

          ::org::apache::lucene::codecs::PostingsFormat Lucene45Codec::getPostingsFormatForField(const ::java::lang::String & a0) const
          {
            return ::org::apache::lucene::codecs::PostingsFormat(env->callObjectMethod(this$, mids$[mid_getPostingsFormatForField_19d2f1c6], a0.this$));
          }

          ::org::apache::lucene::codecs::LiveDocsFormat Lucene45Codec::liveDocsFormat() const
          {
            return ::org::apache::lucene::codecs::LiveDocsFormat(env->callObjectMethod(this$, mids$[mid_liveDocsFormat_fcc69d9a]));
          }

          ::org::apache::lucene::codecs::NormsFormat Lucene45Codec::normsFormat() const
          {
            return ::org::apache::lucene::codecs::NormsFormat(env->callObjectMethod(this$, mids$[mid_normsFormat_03b89e43]));
          }

          ::org::apache::lucene::codecs::PostingsFormat Lucene45Codec::postingsFormat() const
          {
            return ::org::apache::lucene::codecs::PostingsFormat(env->callObjectMethod(this$, mids$[mid_postingsFormat_d12d16c8]));
          }

          ::org::apache::lucene::codecs::SegmentInfoFormat Lucene45Codec::segmentInfoFormat() const
          {
            return ::org::apache::lucene::codecs::SegmentInfoFormat(env->callObjectMethod(this$, mids$[mid_segmentInfoFormat_c24d8633]));
          }

          ::org::apache::lucene::codecs::StoredFieldsFormat Lucene45Codec::storedFieldsFormat() const
          {
            return ::org::apache::lucene::codecs::StoredFieldsFormat(env->callObjectMethod(this$, mids$[mid_storedFieldsFormat_2b977101]));
          }

          ::org::apache::lucene::codecs::TermVectorsFormat Lucene45Codec::termVectorsFormat() const
          {
            return ::org::apache::lucene::codecs::TermVectorsFormat(env->callObjectMethod(this$, mids$[mid_termVectorsFormat_bcd1d8b8]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace lucene45 {
          static PyObject *t_Lucene45Codec_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Lucene45Codec_instance_(PyTypeObject *type, PyObject *arg);
          static int t_Lucene45Codec_init_(t_Lucene45Codec *self, PyObject *args, PyObject *kwds);
          static PyObject *t_Lucene45Codec_docValuesFormat(t_Lucene45Codec *self, PyObject *args);
          static PyObject *t_Lucene45Codec_fieldInfosFormat(t_Lucene45Codec *self, PyObject *args);
          static PyObject *t_Lucene45Codec_getDocValuesFormatForField(t_Lucene45Codec *self, PyObject *arg);
          static PyObject *t_Lucene45Codec_getPostingsFormatForField(t_Lucene45Codec *self, PyObject *arg);
          static PyObject *t_Lucene45Codec_liveDocsFormat(t_Lucene45Codec *self, PyObject *args);
          static PyObject *t_Lucene45Codec_normsFormat(t_Lucene45Codec *self, PyObject *args);
          static PyObject *t_Lucene45Codec_postingsFormat(t_Lucene45Codec *self, PyObject *args);
          static PyObject *t_Lucene45Codec_segmentInfoFormat(t_Lucene45Codec *self, PyObject *args);
          static PyObject *t_Lucene45Codec_storedFieldsFormat(t_Lucene45Codec *self, PyObject *args);
          static PyObject *t_Lucene45Codec_termVectorsFormat(t_Lucene45Codec *self, PyObject *args);

          static PyMethodDef t_Lucene45Codec__methods_[] = {
            DECLARE_METHOD(t_Lucene45Codec, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lucene45Codec, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lucene45Codec, docValuesFormat, METH_VARARGS),
            DECLARE_METHOD(t_Lucene45Codec, fieldInfosFormat, METH_VARARGS),
            DECLARE_METHOD(t_Lucene45Codec, getDocValuesFormatForField, METH_O),
            DECLARE_METHOD(t_Lucene45Codec, getPostingsFormatForField, METH_O),
            DECLARE_METHOD(t_Lucene45Codec, liveDocsFormat, METH_VARARGS),
            DECLARE_METHOD(t_Lucene45Codec, normsFormat, METH_VARARGS),
            DECLARE_METHOD(t_Lucene45Codec, postingsFormat, METH_VARARGS),
            DECLARE_METHOD(t_Lucene45Codec, segmentInfoFormat, METH_VARARGS),
            DECLARE_METHOD(t_Lucene45Codec, storedFieldsFormat, METH_VARARGS),
            DECLARE_METHOD(t_Lucene45Codec, termVectorsFormat, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(Lucene45Codec, t_Lucene45Codec, ::org::apache::lucene::codecs::Codec, Lucene45Codec, t_Lucene45Codec_init_, 0, 0, 0, 0, 0);

          void t_Lucene45Codec::install(PyObject *module)
          {
            installType(&PY_TYPE(Lucene45Codec), module, "Lucene45Codec", 0);
          }

          void t_Lucene45Codec::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(Lucene45Codec).tp_dict, "class_", make_descriptor(Lucene45Codec::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(Lucene45Codec).tp_dict, "wrapfn_", make_descriptor(t_Lucene45Codec::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(Lucene45Codec).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_Lucene45Codec_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, Lucene45Codec::initializeClass, 1)))
              return NULL;
            return t_Lucene45Codec::wrap_Object(Lucene45Codec(((t_Lucene45Codec *) arg)->object.this$));
          }
          static PyObject *t_Lucene45Codec_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, Lucene45Codec::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_Lucene45Codec_init_(t_Lucene45Codec *self, PyObject *args, PyObject *kwds)
          {
            Lucene45Codec object((jobject) NULL);

            INT_CALL(object = Lucene45Codec());
            self->object = object;

            return 0;
          }

          static PyObject *t_Lucene45Codec_docValuesFormat(t_Lucene45Codec *self, PyObject *args)
          {
            ::org::apache::lucene::codecs::DocValuesFormat result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.docValuesFormat());
              return ::org::apache::lucene::codecs::t_DocValuesFormat::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(Lucene45Codec), (PyObject *) self, "docValuesFormat", args, 2);
          }

          static PyObject *t_Lucene45Codec_fieldInfosFormat(t_Lucene45Codec *self, PyObject *args)
          {
            ::org::apache::lucene::codecs::FieldInfosFormat result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.fieldInfosFormat());
              return ::org::apache::lucene::codecs::t_FieldInfosFormat::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(Lucene45Codec), (PyObject *) self, "fieldInfosFormat", args, 2);
          }

          static PyObject *t_Lucene45Codec_getDocValuesFormatForField(t_Lucene45Codec *self, PyObject *arg)
          {
            ::java::lang::String a0((jobject) NULL);
            ::org::apache::lucene::codecs::DocValuesFormat result((jobject) NULL);

            if (!parseArg(arg, "s", &a0))
            {
              OBJ_CALL(result = self->object.getDocValuesFormatForField(a0));
              return ::org::apache::lucene::codecs::t_DocValuesFormat::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "getDocValuesFormatForField", arg);
            return NULL;
          }

          static PyObject *t_Lucene45Codec_getPostingsFormatForField(t_Lucene45Codec *self, PyObject *arg)
          {
            ::java::lang::String a0((jobject) NULL);
            ::org::apache::lucene::codecs::PostingsFormat result((jobject) NULL);

            if (!parseArg(arg, "s", &a0))
            {
              OBJ_CALL(result = self->object.getPostingsFormatForField(a0));
              return ::org::apache::lucene::codecs::t_PostingsFormat::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "getPostingsFormatForField", arg);
            return NULL;
          }

          static PyObject *t_Lucene45Codec_liveDocsFormat(t_Lucene45Codec *self, PyObject *args)
          {
            ::org::apache::lucene::codecs::LiveDocsFormat result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.liveDocsFormat());
              return ::org::apache::lucene::codecs::t_LiveDocsFormat::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(Lucene45Codec), (PyObject *) self, "liveDocsFormat", args, 2);
          }

          static PyObject *t_Lucene45Codec_normsFormat(t_Lucene45Codec *self, PyObject *args)
          {
            ::org::apache::lucene::codecs::NormsFormat result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.normsFormat());
              return ::org::apache::lucene::codecs::t_NormsFormat::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(Lucene45Codec), (PyObject *) self, "normsFormat", args, 2);
          }

          static PyObject *t_Lucene45Codec_postingsFormat(t_Lucene45Codec *self, PyObject *args)
          {
            ::org::apache::lucene::codecs::PostingsFormat result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.postingsFormat());
              return ::org::apache::lucene::codecs::t_PostingsFormat::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(Lucene45Codec), (PyObject *) self, "postingsFormat", args, 2);
          }

          static PyObject *t_Lucene45Codec_segmentInfoFormat(t_Lucene45Codec *self, PyObject *args)
          {
            ::org::apache::lucene::codecs::SegmentInfoFormat result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.segmentInfoFormat());
              return ::org::apache::lucene::codecs::t_SegmentInfoFormat::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(Lucene45Codec), (PyObject *) self, "segmentInfoFormat", args, 2);
          }

          static PyObject *t_Lucene45Codec_storedFieldsFormat(t_Lucene45Codec *self, PyObject *args)
          {
            ::org::apache::lucene::codecs::StoredFieldsFormat result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.storedFieldsFormat());
              return ::org::apache::lucene::codecs::t_StoredFieldsFormat::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(Lucene45Codec), (PyObject *) self, "storedFieldsFormat", args, 2);
          }

          static PyObject *t_Lucene45Codec_termVectorsFormat(t_Lucene45Codec *self, PyObject *args)
          {
            ::org::apache::lucene::codecs::TermVectorsFormat result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.termVectorsFormat());
              return ::org::apache::lucene::codecs::t_TermVectorsFormat::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(Lucene45Codec), (PyObject *) self, "termVectorsFormat", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/el/GreekStemFilterFactory.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/String.h"
#include "java/util/Map.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace el {

          ::java::lang::Class *GreekStemFilterFactory::class$ = NULL;
          jmethodID *GreekStemFilterFactory::mids$ = NULL;
          bool GreekStemFilterFactory::live$ = false;

          jclass GreekStemFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/el/GreekStemFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4c9e2b1c] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_a65cd6ab] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/TokenStream;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          GreekStemFilterFactory::GreekStemFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_4c9e2b1c, a0.this$)) {}

          ::org::apache::lucene::analysis::TokenStream GreekStemFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::TokenStream(env->callObjectMethod(this$, mids$[mid_create_a65cd6ab], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace el {
          static PyObject *t_GreekStemFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_GreekStemFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_GreekStemFilterFactory_init_(t_GreekStemFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_GreekStemFilterFactory_create(t_GreekStemFilterFactory *self, PyObject *args);

          static PyMethodDef t_GreekStemFilterFactory__methods_[] = {
            DECLARE_METHOD(t_GreekStemFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_GreekStemFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_GreekStemFilterFactory, create, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(GreekStemFilterFactory, t_GreekStemFilterFactory, ::org::apache::lucene::analysis::util::TokenFilterFactory, GreekStemFilterFactory, t_GreekStemFilterFactory_init_, 0, 0, 0, 0, 0);

          void t_GreekStemFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(GreekStemFilterFactory), module, "GreekStemFilterFactory", 0);
          }

          void t_GreekStemFilterFactory::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(GreekStemFilterFactory).tp_dict, "class_", make_descriptor(GreekStemFilterFactory::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(GreekStemFilterFactory).tp_dict, "wrapfn_", make_descriptor(t_GreekStemFilterFactory::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(GreekStemFilterFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_GreekStemFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, GreekStemFilterFactory::initializeClass, 1)))
              return NULL;
            return t_GreekStemFilterFactory::wrap_Object(GreekStemFilterFactory(((t_GreekStemFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_GreekStemFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, GreekStemFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_GreekStemFilterFactory_init_(t_GreekStemFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            GreekStemFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = GreekStemFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_GreekStemFilterFactory_create(t_GreekStemFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::TokenStream result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::t_TokenStream::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(GreekStemFilterFactory), (PyObject *) self, "create", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/highlight/NullFragmenter.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/String.h"
#include "org/apache/lucene/search/highlight/Fragmenter.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace highlight {

          ::java::lang::Class *NullFragmenter::class$ = NULL;
          jmethodID *NullFragmenter::mids$ = NULL;
          bool NullFragmenter::live$ = false;

          jclass NullFragmenter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/highlight/NullFragmenter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_isNewFragment_54c6a16a] = env->getMethodID(cls, "isNewFragment", "()Z");
              mids$[mid_start_7d0c5392] = env->getMethodID(cls, "start", "(Ljava/lang/String;Lorg/apache/lucene/analysis/TokenStream;)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          NullFragmenter::NullFragmenter() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          jboolean NullFragmenter::isNewFragment() const
          {
            return env->callBooleanMethod(this$, mids$[mid_isNewFragment_54c6a16a]);
          }

          void NullFragmenter::start(const ::java::lang::String & a0, const ::org::apache::lucene::analysis::TokenStream & a1) const
          {
            env->callVoidMethod(this$, mids$[mid_start_7d0c5392], a0.this$, a1.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace highlight {
          static PyObject *t_NullFragmenter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_NullFragmenter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_NullFragmenter_init_(t_NullFragmenter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_NullFragmenter_isNewFragment(t_NullFragmenter *self);
          static PyObject *t_NullFragmenter_start(t_NullFragmenter *self, PyObject *args);
          static PyObject *t_NullFragmenter_get__newFragment(t_NullFragmenter *self, void *data);
          static PyGetSetDef t_NullFragmenter__fields_[] = {
            DECLARE_GET_FIELD(t_NullFragmenter, newFragment),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_NullFragmenter__methods_[] = {
            DECLARE_METHOD(t_NullFragmenter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_NullFragmenter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_NullFragmenter, isNewFragment, METH_NOARGS),
            DECLARE_METHOD(t_NullFragmenter, start, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(NullFragmenter, t_NullFragmenter, ::java::lang::Object, NullFragmenter, t_NullFragmenter_init_, 0, 0, t_NullFragmenter__fields_, 0, 0);

          void t_NullFragmenter::install(PyObject *module)
          {
            installType(&PY_TYPE(NullFragmenter), module, "NullFragmenter", 0);
          }

          void t_NullFragmenter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(NullFragmenter).tp_dict, "class_", make_descriptor(NullFragmenter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(NullFragmenter).tp_dict, "wrapfn_", make_descriptor(t_NullFragmenter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(NullFragmenter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_NullFragmenter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, NullFragmenter::initializeClass, 1)))
              return NULL;
            return t_NullFragmenter::wrap_Object(NullFragmenter(((t_NullFragmenter *) arg)->object.this$));
          }
          static PyObject *t_NullFragmenter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, NullFragmenter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_NullFragmenter_init_(t_NullFragmenter *self, PyObject *args, PyObject *kwds)
          {
            NullFragmenter object((jobject) NULL);

            INT_CALL(object = NullFragmenter());
            self->object = object;

            return 0;
          }

          static PyObject *t_NullFragmenter_isNewFragment(t_NullFragmenter *self)
          {
            jboolean result;
            OBJ_CALL(result = self->object.isNewFragment());
            Py_RETURN_BOOL(result);
          }

          static PyObject *t_NullFragmenter_start(t_NullFragmenter *self, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            ::org::apache::lucene::analysis::TokenStream a1((jobject) NULL);

            if (!parseArgs(args, "sk", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0, &a1))
            {
              OBJ_CALL(self->object.start(a0, a1));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "start", args);
            return NULL;
          }

          static PyObject *t_NullFragmenter_get__newFragment(t_NullFragmenter *self, void *data)
          {
            jboolean value;
            OBJ_CALL(value = self->object.isNewFragment());
            Py_RETURN_BOOL(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/ngram/Lucene43NGramTokenizer.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/util/AttributeFactory.h"
#include "java/io/Reader.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ngram {

          ::java::lang::Class *Lucene43NGramTokenizer::class$ = NULL;
          jmethodID *Lucene43NGramTokenizer::mids$ = NULL;
          bool Lucene43NGramTokenizer::live$ = false;
          jint Lucene43NGramTokenizer::DEFAULT_MAX_NGRAM_SIZE = (jint) 0;
          jint Lucene43NGramTokenizer::DEFAULT_MIN_NGRAM_SIZE = (jint) 0;

          jclass Lucene43NGramTokenizer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/ngram/Lucene43NGramTokenizer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_cf2e3c10] = env->getMethodID(cls, "<init>", "(Ljava/io/Reader;)V");
              mids$[mid_init$_92513554] = env->getMethodID(cls, "<init>", "(Ljava/io/Reader;II)V");
              mids$[mid_init$_fb18a8f8] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/AttributeFactory;Ljava/io/Reader;II)V");
              mids$[mid_end_54c6a166] = env->getMethodID(cls, "end", "()V");
              mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");
              mids$[mid_reset_54c6a166] = env->getMethodID(cls, "reset", "()V");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              DEFAULT_MAX_NGRAM_SIZE = env->getStaticIntField(cls, "DEFAULT_MAX_NGRAM_SIZE");
              DEFAULT_MIN_NGRAM_SIZE = env->getStaticIntField(cls, "DEFAULT_MIN_NGRAM_SIZE");
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          Lucene43NGramTokenizer::Lucene43NGramTokenizer(const ::java::io::Reader & a0) : ::org::apache::lucene::analysis::Tokenizer(env->newObject(initializeClass, &mids$, mid_init$_cf2e3c10, a0.this$)) {}

          Lucene43NGramTokenizer::Lucene43NGramTokenizer(const ::java::io::Reader & a0, jint a1, jint a2) : ::org::apache::lucene::analysis::Tokenizer(env->newObject(initializeClass, &mids$, mid_init$_92513554, a0.this$, a1, a2)) {}

          Lucene43NGramTokenizer::Lucene43NGramTokenizer(const ::org::apache::lucene::util::AttributeFactory & a0, const ::java::io::Reader & a1, jint a2, jint a3) : ::org::apache::lucene::analysis::Tokenizer(env->newObject(initializeClass, &mids$, mid_init$_fb18a8f8, a0.this$, a1.this$, a2, a3)) {}

          void Lucene43NGramTokenizer::end() const
          {
            env->callVoidMethod(this$, mids$[mid_end_54c6a166]);
          }

          jboolean Lucene43NGramTokenizer::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_54c6a16a]);
          }

          void Lucene43NGramTokenizer::reset() const
          {
            env->callVoidMethod(this$, mids$[mid_reset_54c6a166]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ngram {
          static PyObject *t_Lucene43NGramTokenizer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Lucene43NGramTokenizer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_Lucene43NGramTokenizer_init_(t_Lucene43NGramTokenizer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_Lucene43NGramTokenizer_end(t_Lucene43NGramTokenizer *self, PyObject *args);
          static PyObject *t_Lucene43NGramTokenizer_incrementToken(t_Lucene43NGramTokenizer *self, PyObject *args);
          static PyObject *t_Lucene43NGramTokenizer_reset(t_Lucene43NGramTokenizer *self, PyObject *args);

          static PyMethodDef t_Lucene43NGramTokenizer__methods_[] = {
            DECLARE_METHOD(t_Lucene43NGramTokenizer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lucene43NGramTokenizer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lucene43NGramTokenizer, end, METH_VARARGS),
            DECLARE_METHOD(t_Lucene43NGramTokenizer, incrementToken, METH_VARARGS),
            DECLARE_METHOD(t_Lucene43NGramTokenizer, reset, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(Lucene43NGramTokenizer, t_Lucene43NGramTokenizer, ::org::apache::lucene::analysis::Tokenizer, Lucene43NGramTokenizer, t_Lucene43NGramTokenizer_init_, 0, 0, 0, 0, 0);

          void t_Lucene43NGramTokenizer::install(PyObject *module)
          {
            installType(&PY_TYPE(Lucene43NGramTokenizer), module, "Lucene43NGramTokenizer", 0);
          }

          void t_Lucene43NGramTokenizer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(Lucene43NGramTokenizer).tp_dict, "class_", make_descriptor(Lucene43NGramTokenizer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(Lucene43NGramTokenizer).tp_dict, "wrapfn_", make_descriptor(t_Lucene43NGramTokenizer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(Lucene43NGramTokenizer).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(Lucene43NGramTokenizer::initializeClass);
            PyDict_SetItemString(PY_TYPE(Lucene43NGramTokenizer).tp_dict, "DEFAULT_MAX_NGRAM_SIZE", make_descriptor(Lucene43NGramTokenizer::DEFAULT_MAX_NGRAM_SIZE));
            PyDict_SetItemString(PY_TYPE(Lucene43NGramTokenizer).tp_dict, "DEFAULT_MIN_NGRAM_SIZE", make_descriptor(Lucene43NGramTokenizer::DEFAULT_MIN_NGRAM_SIZE));
          }

          static PyObject *t_Lucene43NGramTokenizer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, Lucene43NGramTokenizer::initializeClass, 1)))
              return NULL;
            return t_Lucene43NGramTokenizer::wrap_Object(Lucene43NGramTokenizer(((t_Lucene43NGramTokenizer *) arg)->object.this$));
          }
          static PyObject *t_Lucene43NGramTokenizer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, Lucene43NGramTokenizer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_Lucene43NGramTokenizer_init_(t_Lucene43NGramTokenizer *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::java::io::Reader a0((jobject) NULL);
                Lucene43NGramTokenizer object((jobject) NULL);

                if (!parseArgs(args, "k", ::java::io::Reader::initializeClass, &a0))
                {
                  INT_CALL(object = Lucene43NGramTokenizer(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 3:
              {
                ::java::io::Reader a0((jobject) NULL);
                jint a1;
                jint a2;
                Lucene43NGramTokenizer object((jobject) NULL);

                if (!parseArgs(args, "kII", ::java::io::Reader::initializeClass, &a0, &a1, &a2))
                {
                  INT_CALL(object = Lucene43NGramTokenizer(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 4:
              {
                ::org::apache::lucene::util::AttributeFactory a0((jobject) NULL);
                ::java::io::Reader a1((jobject) NULL);
                jint a2;
                jint a3;
                Lucene43NGramTokenizer object((jobject) NULL);

                if (!parseArgs(args, "kkII", ::org::apache::lucene::util::AttributeFactory::initializeClass, ::java::io::Reader::initializeClass, &a0, &a1, &a2, &a3))
                {
                  INT_CALL(object = Lucene43NGramTokenizer(a0, a1, a2, a3));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_Lucene43NGramTokenizer_end(t_Lucene43NGramTokenizer *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.end());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(Lucene43NGramTokenizer), (PyObject *) self, "end", args, 2);
          }

          static PyObject *t_Lucene43NGramTokenizer_incrementToken(t_Lucene43NGramTokenizer *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(Lucene43NGramTokenizer), (PyObject *) self, "incrementToken", args, 2);
          }

          static PyObject *t_Lucene43NGramTokenizer_reset(t_Lucene43NGramTokenizer *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.reset());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(Lucene43NGramTokenizer), (PyObject *) self, "reset", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/util/OpenStringBuilder.h"
#include "java/lang/CharSequence.h"
#include "java/lang/String.h"
#include "java/lang/Appendable.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace util {

          ::java::lang::Class *OpenStringBuilder::class$ = NULL;
          jmethodID *OpenStringBuilder::mids$ = NULL;
          bool OpenStringBuilder::live$ = false;

          jclass OpenStringBuilder::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/util/OpenStringBuilder");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_init$_39c7bd3c] = env->getMethodID(cls, "<init>", "(I)V");
              mids$[mid_init$_ec6430f4] = env->getMethodID(cls, "<init>", "([CI)V");
              mids$[mid_append_fac808c8] = env->getMethodID(cls, "append", "(C)Ljava/lang/Appendable;");
              mids$[mid_append_ca3c2aa4] = env->getMethodID(cls, "append", "(Ljava/lang/CharSequence;)Ljava/lang/Appendable;");
              mids$[mid_append_7f83fd04] = env->getMethodID(cls, "append", "(Ljava/lang/CharSequence;II)Ljava/lang/Appendable;");
              mids$[mid_capacity_54c6a179] = env->getMethodID(cls, "capacity", "()I");
              mids$[mid_charAt_39c7bd29] = env->getMethodID(cls, "charAt", "(I)C");
              mids$[mid_flush_54c6a166] = env->getMethodID(cls, "flush", "()V");
              mids$[mid_getArray_dab10e7f] = env->getMethodID(cls, "getArray", "()[C");
              mids$[mid_length_54c6a179] = env->getMethodID(cls, "length", "()I");
              mids$[mid_reserve_39c7bd3c] = env->getMethodID(cls, "reserve", "(I)V");
              mids$[mid_reset_54c6a166] = env->getMethodID(cls, "reset", "()V");
              mids$[mid_set_ec6430f4] = env->getMethodID(cls, "set", "([CI)V");
              mids$[mid_setCharAt_83eec158] = env->getMethodID(cls, "setCharAt", "(IC)V");
              mids$[mid_setLength_39c7bd3c] = env->getMethodID(cls, "setLength", "(I)V");
              mids$[mid_size_54c6a179] = env->getMethodID(cls, "size", "()I");
              mids$[mid_subSequence_f88dfd57] = env->getMethodID(cls, "subSequence", "(II)Ljava/lang/CharSequence;");
              mids$[mid_toCharArray_dab10e7f] = env->getMethodID(cls, "toCharArray", "()[C");
              mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");
              mids$[mid_unsafeWrite_39c7bd3c] = env->getMethodID(cls, "unsafeWrite", "(I)V");
              mids$[mid_unsafeWrite_87fd545a] = env->getMethodID(cls, "unsafeWrite", "(C)V");
              mids$[mid_unsafeWrite_6f0bb356] = env->getMethodID(cls, "unsafeWrite", "([CII)V");
              mids$[mid_write_5fdc3f48] = env->getMethodID(cls, "write", "(Ljava/lang/String;)V");
              mids$[mid_write_700e23d6] = env->getMethodID(cls, "write", "([C)V");
              mids$[mid_write_87fd545a] = env->getMethodID(cls, "write", "(C)V");
              mids$[mid_write_39c7bd3c] = env->getMethodID(cls, "write", "(I)V");
              mids$[mid_write_20cf5c67] = env->getMethodID(cls, "write", "(Lorg/apache/lucene/analysis/util/OpenStringBuilder;)V");
              mids$[mid_write_6f0bb356] = env->getMethodID(cls, "write", "([CII)V");
              mids$[mid_resize_39c7bd3c] = env->getMethodID(cls, "resize", "(I)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          OpenStringBuilder::OpenStringBuilder() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          OpenStringBuilder::OpenStringBuilder(jint a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_39c7bd3c, a0)) {}

          OpenStringBuilder::OpenStringBuilder(const JArray< jchar > & a0, jint a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_ec6430f4, a0.this$, a1)) {}

          ::java::lang::Appendable OpenStringBuilder::append(jchar a0) const
          {
            return ::java::lang::Appendable(env->callObjectMethod(this$, mids$[mid_append_fac808c8], a0));
          }

          ::java::lang::Appendable OpenStringBuilder::append(const ::java::lang::CharSequence & a0) const
          {
            return ::java::lang::Appendable(env->callObjectMethod(this$, mids$[mid_append_ca3c2aa4], a0.this$));
          }

          ::java::lang::Appendable OpenStringBuilder::append(const ::java::lang::CharSequence & a0, jint a1, jint a2) const
          {
            return ::java::lang::Appendable(env->callObjectMethod(this$, mids$[mid_append_7f83fd04], a0.this$, a1, a2));
          }

          jint OpenStringBuilder::capacity() const
          {
            return env->callIntMethod(this$, mids$[mid_capacity_54c6a179]);
          }

          jchar OpenStringBuilder::charAt(jint a0) const
          {
            return env->callCharMethod(this$, mids$[mid_charAt_39c7bd29], a0);
          }

          void OpenStringBuilder::flush() const
          {
            env->callVoidMethod(this$, mids$[mid_flush_54c6a166]);
          }

          JArray< jchar > OpenStringBuilder::getArray() const
          {
            return JArray< jchar >(env->callObjectMethod(this$, mids$[mid_getArray_dab10e7f]));
          }

          jint OpenStringBuilder::length() const
          {
            return env->callIntMethod(this$, mids$[mid_length_54c6a179]);
          }

          void OpenStringBuilder::reserve(jint a0) const
          {
            env->callVoidMethod(this$, mids$[mid_reserve_39c7bd3c], a0);
          }

          void OpenStringBuilder::reset() const
          {
            env->callVoidMethod(this$, mids$[mid_reset_54c6a166]);
          }

          void OpenStringBuilder::set(const JArray< jchar > & a0, jint a1) const
          {
            env->callVoidMethod(this$, mids$[mid_set_ec6430f4], a0.this$, a1);
          }

          void OpenStringBuilder::setCharAt(jint a0, jchar a1) const
          {
            env->callVoidMethod(this$, mids$[mid_setCharAt_83eec158], a0, a1);
          }

          void OpenStringBuilder::setLength(jint a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setLength_39c7bd3c], a0);
          }

          jint OpenStringBuilder::size() const
          {
            return env->callIntMethod(this$, mids$[mid_size_54c6a179]);
          }

          ::java::lang::CharSequence OpenStringBuilder::subSequence(jint a0, jint a1) const
          {
            return ::java::lang::CharSequence(env->callObjectMethod(this$, mids$[mid_subSequence_f88dfd57], a0, a1));
          }

          JArray< jchar > OpenStringBuilder::toCharArray() const
          {
            return JArray< jchar >(env->callObjectMethod(this$, mids$[mid_toCharArray_dab10e7f]));
          }

          ::java::lang::String OpenStringBuilder::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
          }

          void OpenStringBuilder::unsafeWrite(jint a0) const
          {
            env->callVoidMethod(this$, mids$[mid_unsafeWrite_39c7bd3c], a0);
          }

          void OpenStringBuilder::unsafeWrite(jchar a0) const
          {
            env->callVoidMethod(this$, mids$[mid_unsafeWrite_87fd545a], a0);
          }

          void OpenStringBuilder::unsafeWrite(const JArray< jchar > & a0, jint a1, jint a2) const
          {
            env->callVoidMethod(this$, mids$[mid_unsafeWrite_6f0bb356], a0.this$, a1, a2);
          }

          void OpenStringBuilder::write(const ::java::lang::String & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_write_5fdc3f48], a0.this$);
          }

          void OpenStringBuilder::write(const JArray< jchar > & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_write_700e23d6], a0.this$);
          }

          void OpenStringBuilder::write(jchar a0) const
          {
            env->callVoidMethod(this$, mids$[mid_write_87fd545a], a0);
          }

          void OpenStringBuilder::write(jint a0) const
          {
            env->callVoidMethod(this$, mids$[mid_write_39c7bd3c], a0);
          }

          void OpenStringBuilder::write(const OpenStringBuilder & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_write_20cf5c67], a0.this$);
          }

          void OpenStringBuilder::write(const JArray< jchar > & a0, jint a1, jint a2) const
          {
            env->callVoidMethod(this$, mids$[mid_write_6f0bb356], a0.this$, a1, a2);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace util {
          static PyObject *t_OpenStringBuilder_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_OpenStringBuilder_instance_(PyTypeObject *type, PyObject *arg);
          static int t_OpenStringBuilder_init_(t_OpenStringBuilder *self, PyObject *args, PyObject *kwds);
          static PyObject *t_OpenStringBuilder_append(t_OpenStringBuilder *self, PyObject *args);
          static PyObject *t_OpenStringBuilder_capacity(t_OpenStringBuilder *self);
          static PyObject *t_OpenStringBuilder_charAt(t_OpenStringBuilder *self, PyObject *arg);
          static PyObject *t_OpenStringBuilder_flush(t_OpenStringBuilder *self);
          static PyObject *t_OpenStringBuilder_getArray(t_OpenStringBuilder *self);
          static PyObject *t_OpenStringBuilder_length(t_OpenStringBuilder *self);
          static PyObject *t_OpenStringBuilder_reserve(t_OpenStringBuilder *self, PyObject *arg);
          static PyObject *t_OpenStringBuilder_reset(t_OpenStringBuilder *self);
          static PyObject *t_OpenStringBuilder_set(t_OpenStringBuilder *self, PyObject *args);
          static PyObject *t_OpenStringBuilder_setCharAt(t_OpenStringBuilder *self, PyObject *args);
          static PyObject *t_OpenStringBuilder_setLength(t_OpenStringBuilder *self, PyObject *arg);
          static PyObject *t_OpenStringBuilder_size(t_OpenStringBuilder *self);
          static PyObject *t_OpenStringBuilder_subSequence(t_OpenStringBuilder *self, PyObject *args);
          static PyObject *t_OpenStringBuilder_toCharArray(t_OpenStringBuilder *self);
          static PyObject *t_OpenStringBuilder_toString(t_OpenStringBuilder *self, PyObject *args);
          static PyObject *t_OpenStringBuilder_unsafeWrite(t_OpenStringBuilder *self, PyObject *args);
          static PyObject *t_OpenStringBuilder_write(t_OpenStringBuilder *self, PyObject *args);
          static PyObject *t_OpenStringBuilder_get__array(t_OpenStringBuilder *self, void *data);
          static PyGetSetDef t_OpenStringBuilder__fields_[] = {
            DECLARE_GET_FIELD(t_OpenStringBuilder, array),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_OpenStringBuilder__methods_[] = {
            DECLARE_METHOD(t_OpenStringBuilder, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_OpenStringBuilder, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_OpenStringBuilder, append, METH_VARARGS),
            DECLARE_METHOD(t_OpenStringBuilder, capacity, METH_NOARGS),
            DECLARE_METHOD(t_OpenStringBuilder, charAt, METH_O),
            DECLARE_METHOD(t_OpenStringBuilder, flush, METH_NOARGS),
            DECLARE_METHOD(t_OpenStringBuilder, getArray, METH_NOARGS),
            DECLARE_METHOD(t_OpenStringBuilder, length, METH_NOARGS),
            DECLARE_METHOD(t_OpenStringBuilder, reserve, METH_O),
            DECLARE_METHOD(t_OpenStringBuilder, reset, METH_NOARGS),
            DECLARE_METHOD(t_OpenStringBuilder, set, METH_VARARGS),
            DECLARE_METHOD(t_OpenStringBuilder, setCharAt, METH_VARARGS),
            DECLARE_METHOD(t_OpenStringBuilder, setLength, METH_O),
            DECLARE_METHOD(t_OpenStringBuilder, size, METH_NOARGS),
            DECLARE_METHOD(t_OpenStringBuilder, subSequence, METH_VARARGS),
            DECLARE_METHOD(t_OpenStringBuilder, toCharArray, METH_NOARGS),
            DECLARE_METHOD(t_OpenStringBuilder, toString, METH_VARARGS),
            DECLARE_METHOD(t_OpenStringBuilder, unsafeWrite, METH_VARARGS),
            DECLARE_METHOD(t_OpenStringBuilder, write, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(OpenStringBuilder, t_OpenStringBuilder, ::java::lang::Object, OpenStringBuilder, t_OpenStringBuilder_init_, 0, 0, t_OpenStringBuilder__fields_, 0, 0);

          void t_OpenStringBuilder::install(PyObject *module)
          {
            installType(&PY_TYPE(OpenStringBuilder), module, "OpenStringBuilder", 0);
          }

          void t_OpenStringBuilder::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(OpenStringBuilder).tp_dict, "class_", make_descriptor(OpenStringBuilder::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(OpenStringBuilder).tp_dict, "wrapfn_", make_descriptor(t_OpenStringBuilder::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(OpenStringBuilder).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_OpenStringBuilder_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, OpenStringBuilder::initializeClass, 1)))
              return NULL;
            return t_OpenStringBuilder::wrap_Object(OpenStringBuilder(((t_OpenStringBuilder *) arg)->object.this$));
          }
          static PyObject *t_OpenStringBuilder_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, OpenStringBuilder::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_OpenStringBuilder_init_(t_OpenStringBuilder *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 0:
              {
                OpenStringBuilder object((jobject) NULL);

                INT_CALL(object = OpenStringBuilder());
                self->object = object;
                break;
              }
              goto err;
             case 1:
              {
                jint a0;
                OpenStringBuilder object((jobject) NULL);

                if (!parseArgs(args, "I", &a0))
                {
                  INT_CALL(object = OpenStringBuilder(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 2:
              {
                JArray< jchar > a0((jobject) NULL);
                jint a1;
                OpenStringBuilder object((jobject) NULL);

                if (!parseArgs(args, "[CI", &a0, &a1))
                {
                  INT_CALL(object = OpenStringBuilder(a0, a1));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_OpenStringBuilder_append(t_OpenStringBuilder *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                jchar a0;
                ::java::lang::Appendable result((jobject) NULL);

                if (!parseArgs(args, "C", &a0))
                {
                  OBJ_CALL(result = self->object.append(a0));
                  return ::java::lang::t_Appendable::wrap_Object(result);
                }
              }
              {
                ::java::lang::CharSequence a0((jobject) NULL);
                ::java::lang::Appendable result((jobject) NULL);

                if (!parseArgs(args, "O", &::java::lang::PY_TYPE(CharSequence), &a0))
                {
                  OBJ_CALL(result = self->object.append(a0));
                  return ::java::lang::t_Appendable::wrap_Object(result);
                }
              }
              break;
             case 3:
              {
                ::java::lang::CharSequence a0((jobject) NULL);
                jint a1;
                jint a2;
                ::java::lang::Appendable result((jobject) NULL);

                if (!parseArgs(args, "OII", &::java::lang::PY_TYPE(CharSequence), &a0, &a1, &a2))
                {
                  OBJ_CALL(result = self->object.append(a0, a1, a2));
                  return ::java::lang::t_Appendable::wrap_Object(result);
                }
              }
            }

            PyErr_SetArgsError((PyObject *) self, "append", args);
            return NULL;
          }

          static PyObject *t_OpenStringBuilder_capacity(t_OpenStringBuilder *self)
          {
            jint result;
            OBJ_CALL(result = self->object.capacity());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_OpenStringBuilder_charAt(t_OpenStringBuilder *self, PyObject *arg)
          {
            jint a0;
            jchar result;

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(result = self->object.charAt(a0));
              return PyUnicode_FromUnicode((Py_UNICODE *) &result, 1);
            }

            PyErr_SetArgsError((PyObject *) self, "charAt", arg);
            return NULL;
          }

          static PyObject *t_OpenStringBuilder_flush(t_OpenStringBuilder *self)
          {
            OBJ_CALL(self->object.flush());
            Py_RETURN_NONE;
          }

          static PyObject *t_OpenStringBuilder_getArray(t_OpenStringBuilder *self)
          {
            JArray< jchar > result((jobject) NULL);
            OBJ_CALL(result = self->object.getArray());
            return result.wrap();
          }

          static PyObject *t_OpenStringBuilder_length(t_OpenStringBuilder *self)
          {
            jint result;
            OBJ_CALL(result = self->object.length());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_OpenStringBuilder_reserve(t_OpenStringBuilder *self, PyObject *arg)
          {
            jint a0;

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(self->object.reserve(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "reserve", arg);
            return NULL;
          }

          static PyObject *t_OpenStringBuilder_reset(t_OpenStringBuilder *self)
          {
            OBJ_CALL(self->object.reset());
            Py_RETURN_NONE;
          }

          static PyObject *t_OpenStringBuilder_set(t_OpenStringBuilder *self, PyObject *args)
          {
            JArray< jchar > a0((jobject) NULL);
            jint a1;

            if (!parseArgs(args, "[CI", &a0, &a1))
            {
              OBJ_CALL(self->object.set(a0, a1));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "set", args);
            return NULL;
          }

          static PyObject *t_OpenStringBuilder_setCharAt(t_OpenStringBuilder *self, PyObject *args)
          {
            jint a0;
            jchar a1;

            if (!parseArgs(args, "IC", &a0, &a1))
            {
              OBJ_CALL(self->object.setCharAt(a0, a1));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setCharAt", args);
            return NULL;
          }

          static PyObject *t_OpenStringBuilder_setLength(t_OpenStringBuilder *self, PyObject *arg)
          {
            jint a0;

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(self->object.setLength(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setLength", arg);
            return NULL;
          }

          static PyObject *t_OpenStringBuilder_size(t_OpenStringBuilder *self)
          {
            jint result;
            OBJ_CALL(result = self->object.size());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_OpenStringBuilder_subSequence(t_OpenStringBuilder *self, PyObject *args)
          {
            jint a0;
            jint a1;
            ::java::lang::CharSequence result((jobject) NULL);

            if (!parseArgs(args, "II", &a0, &a1))
            {
              OBJ_CALL(result = self->object.subSequence(a0, a1));
              return ::java::lang::t_CharSequence::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "subSequence", args);
            return NULL;
          }

          static PyObject *t_OpenStringBuilder_toCharArray(t_OpenStringBuilder *self)
          {
            JArray< jchar > result((jobject) NULL);
            OBJ_CALL(result = self->object.toCharArray());
            return result.wrap();
          }

          static PyObject *t_OpenStringBuilder_toString(t_OpenStringBuilder *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(&PY_TYPE(OpenStringBuilder), (PyObject *) self, "toString", args, 2);
          }

          static PyObject *t_OpenStringBuilder_unsafeWrite(t_OpenStringBuilder *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                jint a0;

                if (!parseArgs(args, "I", &a0))
                {
                  OBJ_CALL(self->object.unsafeWrite(a0));
                  Py_RETURN_NONE;
                }
              }
              {
                jchar a0;

                if (!parseArgs(args, "C", &a0))
                {
                  OBJ_CALL(self->object.unsafeWrite(a0));
                  Py_RETURN_NONE;
                }
              }
              break;
             case 3:
              {
                JArray< jchar > a0((jobject) NULL);
                jint a1;
                jint a2;

                if (!parseArgs(args, "[CII", &a0, &a1, &a2))
                {
                  OBJ_CALL(self->object.unsafeWrite(a0, a1, a2));
                  Py_RETURN_NONE;
                }
              }
            }

            PyErr_SetArgsError((PyObject *) self, "unsafeWrite", args);
            return NULL;
          }

          static PyObject *t_OpenStringBuilder_write(t_OpenStringBuilder *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::java::lang::String a0((jobject) NULL);

                if (!parseArgs(args, "s", &a0))
                {
                  OBJ_CALL(self->object.write(a0));
                  Py_RETURN_NONE;
                }
              }
              {
                JArray< jchar > a0((jobject) NULL);

                if (!parseArgs(args, "[C", &a0))
                {
                  OBJ_CALL(self->object.write(a0));
                  Py_RETURN_NONE;
                }
              }
              {
                jchar a0;

                if (!parseArgs(args, "C", &a0))
                {
                  OBJ_CALL(self->object.write(a0));
                  Py_RETURN_NONE;
                }
              }
              {
                jint a0;

                if (!parseArgs(args, "I", &a0))
                {
                  OBJ_CALL(self->object.write(a0));
                  Py_RETURN_NONE;
                }
              }
              {
                OpenStringBuilder a0((jobject) NULL);

                if (!parseArgs(args, "k", OpenStringBuilder::initializeClass, &a0))
                {
                  OBJ_CALL(self->object.write(a0));
                  Py_RETURN_NONE;
                }
              }
              break;
             case 3:
              {
                JArray< jchar > a0((jobject) NULL);
                jint a1;
                jint a2;

                if (!parseArgs(args, "[CII", &a0, &a1, &a2))
                {
                  OBJ_CALL(self->object.write(a0, a1, a2));
                  Py_RETURN_NONE;
                }
              }
            }

            PyErr_SetArgsError((PyObject *) self, "write", args);
            return NULL;
          }

          static PyObject *t_OpenStringBuilder_get__array(t_OpenStringBuilder *self, void *data)
          {
            JArray< jchar > value((jobject) NULL);
            OBJ_CALL(value = self->object.getArray());
            return value.wrap();
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/standard/builders/BooleanQueryNodeBuilder.h"
#include "org/apache/lucene/search/BooleanQuery.h"
#include "org/apache/lucene/queryparser/flexible/core/QueryNodeException.h"
#include "org/apache/lucene/queryparser/flexible/standard/builders/StandardQueryBuilder.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/QueryNode.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace builders {

              ::java::lang::Class *BooleanQueryNodeBuilder::class$ = NULL;
              jmethodID *BooleanQueryNodeBuilder::mids$ = NULL;
              bool BooleanQueryNodeBuilder::live$ = false;

              jclass BooleanQueryNodeBuilder::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/standard/builders/BooleanQueryNodeBuilder");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
                  mids$[mid_build_e1a6cc4e] = env->getMethodID(cls, "build", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;)Lorg/apache/lucene/search/BooleanQuery;");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              BooleanQueryNodeBuilder::BooleanQueryNodeBuilder() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

              ::org::apache::lucene::search::BooleanQuery BooleanQueryNodeBuilder::build(const ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode & a0) const
              {
                return ::org::apache::lucene::search::BooleanQuery(env->callObjectMethod(this$, mids$[mid_build_e1a6cc4e], a0.this$));
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace builders {
              static PyObject *t_BooleanQueryNodeBuilder_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_BooleanQueryNodeBuilder_instance_(PyTypeObject *type, PyObject *arg);
              static int t_BooleanQueryNodeBuilder_init_(t_BooleanQueryNodeBuilder *self, PyObject *args, PyObject *kwds);
              static PyObject *t_BooleanQueryNodeBuilder_build(t_BooleanQueryNodeBuilder *self, PyObject *arg);

              static PyMethodDef t_BooleanQueryNodeBuilder__methods_[] = {
                DECLARE_METHOD(t_BooleanQueryNodeBuilder, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_BooleanQueryNodeBuilder, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_BooleanQueryNodeBuilder, build, METH_O),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(BooleanQueryNodeBuilder, t_BooleanQueryNodeBuilder, ::java::lang::Object, BooleanQueryNodeBuilder, t_BooleanQueryNodeBuilder_init_, 0, 0, 0, 0, 0);

              void t_BooleanQueryNodeBuilder::install(PyObject *module)
              {
                installType(&PY_TYPE(BooleanQueryNodeBuilder), module, "BooleanQueryNodeBuilder", 0);
              }

              void t_BooleanQueryNodeBuilder::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(BooleanQueryNodeBuilder).tp_dict, "class_", make_descriptor(BooleanQueryNodeBuilder::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(BooleanQueryNodeBuilder).tp_dict, "wrapfn_", make_descriptor(t_BooleanQueryNodeBuilder::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(BooleanQueryNodeBuilder).tp_dict, "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_BooleanQueryNodeBuilder_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, BooleanQueryNodeBuilder::initializeClass, 1)))
                  return NULL;
                return t_BooleanQueryNodeBuilder::wrap_Object(BooleanQueryNodeBuilder(((t_BooleanQueryNodeBuilder *) arg)->object.this$));
              }
              static PyObject *t_BooleanQueryNodeBuilder_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, BooleanQueryNodeBuilder::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_BooleanQueryNodeBuilder_init_(t_BooleanQueryNodeBuilder *self, PyObject *args, PyObject *kwds)
              {
                BooleanQueryNodeBuilder object((jobject) NULL);

                INT_CALL(object = BooleanQueryNodeBuilder());
                self->object = object;

                return 0;
              }

              static PyObject *t_BooleanQueryNodeBuilder_build(t_BooleanQueryNodeBuilder *self, PyObject *arg)
              {
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode a0((jobject) NULL);
                ::org::apache::lucene::search::BooleanQuery result((jobject) NULL);

                if (!parseArg(arg, "k", ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode::initializeClass, &a0))
                {
                  OBJ_CALL(result = self->object.build(a0));
                  return ::org::apache::lucene::search::t_BooleanQuery::wrap_Object(result);
                }

                PyErr_SetArgsError((PyObject *) self, "build", arg);
                return NULL;
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/sv/SwedishLightStemFilterFactory.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/String.h"
#include "java/util/Map.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace sv {

          ::java::lang::Class *SwedishLightStemFilterFactory::class$ = NULL;
          jmethodID *SwedishLightStemFilterFactory::mids$ = NULL;
          bool SwedishLightStemFilterFactory::live$ = false;

          jclass SwedishLightStemFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/sv/SwedishLightStemFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4c9e2b1c] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_a65cd6ab] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/TokenStream;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          SwedishLightStemFilterFactory::SwedishLightStemFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_4c9e2b1c, a0.this$)) {}

          ::org::apache::lucene::analysis::TokenStream SwedishLightStemFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::TokenStream(env->callObjectMethod(this$, mids$[mid_create_a65cd6ab], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace sv {
          static PyObject *t_SwedishLightStemFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SwedishLightStemFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_SwedishLightStemFilterFactory_init_(t_SwedishLightStemFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_SwedishLightStemFilterFactory_create(t_SwedishLightStemFilterFactory *self, PyObject *args);

          static PyMethodDef t_SwedishLightStemFilterFactory__methods_[] = {
            DECLARE_METHOD(t_SwedishLightStemFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SwedishLightStemFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SwedishLightStemFilterFactory, create, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(SwedishLightStemFilterFactory, t_SwedishLightStemFilterFactory, ::org::apache::lucene::analysis::util::TokenFilterFactory, SwedishLightStemFilterFactory, t_SwedishLightStemFilterFactory_init_, 0, 0, 0, 0, 0);

          void t_SwedishLightStemFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(SwedishLightStemFilterFactory), module, "SwedishLightStemFilterFactory", 0);
          }

          void t_SwedishLightStemFilterFactory::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(SwedishLightStemFilterFactory).tp_dict, "class_", make_descriptor(SwedishLightStemFilterFactory::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(SwedishLightStemFilterFactory).tp_dict, "wrapfn_", make_descriptor(t_SwedishLightStemFilterFactory::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(SwedishLightStemFilterFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_SwedishLightStemFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, SwedishLightStemFilterFactory::initializeClass, 1)))
              return NULL;
            return t_SwedishLightStemFilterFactory::wrap_Object(SwedishLightStemFilterFactory(((t_SwedishLightStemFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_SwedishLightStemFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, SwedishLightStemFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_SwedishLightStemFilterFactory_init_(t_SwedishLightStemFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            SwedishLightStemFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = SwedishLightStemFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_SwedishLightStemFilterFactory_create(t_SwedishLightStemFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::TokenStream result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::t_TokenStream::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(SwedishLightStemFilterFactory), (PyObject *) self, "create", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/grouping/term/TermFirstPassGroupingCollector.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/search/Sort.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace grouping {
          namespace term {

            ::java::lang::Class *TermFirstPassGroupingCollector::class$ = NULL;
            jmethodID *TermFirstPassGroupingCollector::mids$ = NULL;
            bool TermFirstPassGroupingCollector::live$ = false;

            jclass TermFirstPassGroupingCollector::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/search/grouping/term/TermFirstPassGroupingCollector");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_a296710a] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Lorg/apache/lucene/search/Sort;I)V");
                mids$[mid_setNextReader_a6f59947] = env->getMethodID(cls, "setNextReader", "(Lorg/apache/lucene/index/AtomicReaderContext;)V");
                mids$[mid_getDocGroupValue_b57e9c3f] = env->getMethodID(cls, "getDocGroupValue", "(I)Lorg/apache/lucene/util/BytesRef;");
                mids$[mid_copyDocGroupValue_0991fadd] = env->getMethodID(cls, "copyDocGroupValue", "(Lorg/apache/lucene/util/BytesRef;Lorg/apache/lucene/util/BytesRef;)Lorg/apache/lucene/util/BytesRef;");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            TermFirstPassGroupingCollector::TermFirstPassGroupingCollector(const ::java::lang::String & a0, const ::org::apache::lucene::search::Sort & a1, jint a2) : ::org::apache::lucene::search::grouping::AbstractFirstPassGroupingCollector(env->newObject(initializeClass, &mids$, mid_init$_a296710a, a0.this$, a1.this$, a2)) {}

            void TermFirstPassGroupingCollector::setNextReader(const ::org::apache::lucene::index::AtomicReaderContext & a0) const
            {
              env->callVoidMethod(this$, mids$[mid_setNextReader_a6f59947], a0.this$);
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace grouping {
          namespace term {
            static PyObject *t_TermFirstPassGroupingCollector_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_TermFirstPassGroupingCollector_instance_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_TermFirstPassGroupingCollector_of_(t_TermFirstPassGroupingCollector *self, PyObject *args);
            static int t_TermFirstPassGroupingCollector_init_(t_TermFirstPassGroupingCollector *self, PyObject *args, PyObject *kwds);
            static PyObject *t_TermFirstPassGroupingCollector_setNextReader(t_TermFirstPassGroupingCollector *self, PyObject *args);
            static int t_TermFirstPassGroupingCollector_set__nextReader(t_TermFirstPassGroupingCollector *self, PyObject *arg, void *data);
            static PyObject *t_TermFirstPassGroupingCollector_get__parameters_(t_TermFirstPassGroupingCollector *self, void *data);
            static PyGetSetDef t_TermFirstPassGroupingCollector__fields_[] = {
              DECLARE_SET_FIELD(t_TermFirstPassGroupingCollector, nextReader),
              DECLARE_GET_FIELD(t_TermFirstPassGroupingCollector, parameters_),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_TermFirstPassGroupingCollector__methods_[] = {
              DECLARE_METHOD(t_TermFirstPassGroupingCollector, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_TermFirstPassGroupingCollector, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_TermFirstPassGroupingCollector, of_, METH_VARARGS),
              DECLARE_METHOD(t_TermFirstPassGroupingCollector, setNextReader, METH_VARARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(TermFirstPassGroupingCollector, t_TermFirstPassGroupingCollector, ::org::apache::lucene::search::grouping::AbstractFirstPassGroupingCollector, TermFirstPassGroupingCollector, t_TermFirstPassGroupingCollector_init_, 0, 0, t_TermFirstPassGroupingCollector__fields_, 0, 0);
            PyObject *t_TermFirstPassGroupingCollector::wrap_Object(const TermFirstPassGroupingCollector& object, PyTypeObject *p0)
            {
              PyObject *obj = t_TermFirstPassGroupingCollector::wrap_Object(object);
              if (obj != NULL && obj != Py_None)
              {
                t_TermFirstPassGroupingCollector *self = (t_TermFirstPassGroupingCollector *) obj;
                self->parameters[0] = p0;
              }
              return obj;
            }

            PyObject *t_TermFirstPassGroupingCollector::wrap_jobject(const jobject& object, PyTypeObject *p0)
            {
              PyObject *obj = t_TermFirstPassGroupingCollector::wrap_jobject(object);
              if (obj != NULL && obj != Py_None)
              {
                t_TermFirstPassGroupingCollector *self = (t_TermFirstPassGroupingCollector *) obj;
                self->parameters[0] = p0;
              }
              return obj;
            }

            void t_TermFirstPassGroupingCollector::install(PyObject *module)
            {
              installType(&PY_TYPE(TermFirstPassGroupingCollector), module, "TermFirstPassGroupingCollector", 0);
            }

            void t_TermFirstPassGroupingCollector::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(TermFirstPassGroupingCollector).tp_dict, "class_", make_descriptor(TermFirstPassGroupingCollector::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(TermFirstPassGroupingCollector).tp_dict, "wrapfn_", make_descriptor(t_TermFirstPassGroupingCollector::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(TermFirstPassGroupingCollector).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_TermFirstPassGroupingCollector_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, TermFirstPassGroupingCollector::initializeClass, 1)))
                return NULL;
              return t_TermFirstPassGroupingCollector::wrap_Object(TermFirstPassGroupingCollector(((t_TermFirstPassGroupingCollector *) arg)->object.this$));
            }
            static PyObject *t_TermFirstPassGroupingCollector_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, TermFirstPassGroupingCollector::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static PyObject *t_TermFirstPassGroupingCollector_of_(t_TermFirstPassGroupingCollector *self, PyObject *args)
            {
              if (!parseArg(args, "T", 1, &(self->parameters)))
                Py_RETURN_SELF;
              return PyErr_SetArgsError((PyObject *) self, "of_", args);
            }

            static int t_TermFirstPassGroupingCollector_init_(t_TermFirstPassGroupingCollector *self, PyObject *args, PyObject *kwds)
            {
              ::java::lang::String a0((jobject) NULL);
              ::org::apache::lucene::search::Sort a1((jobject) NULL);
              jint a2;
              TermFirstPassGroupingCollector object((jobject) NULL);

              if (!parseArgs(args, "skI", ::org::apache::lucene::search::Sort::initializeClass, &a0, &a1, &a2))
              {
                INT_CALL(object = TermFirstPassGroupingCollector(a0, a1, a2));
                self->object = object;
                self->parameters[0] = &::org::apache::lucene::util::PY_TYPE(BytesRef);
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_TermFirstPassGroupingCollector_setNextReader(t_TermFirstPassGroupingCollector *self, PyObject *args)
            {
              ::org::apache::lucene::index::AtomicReaderContext a0((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &a0))
              {
                OBJ_CALL(self->object.setNextReader(a0));
                Py_RETURN_NONE;
              }

              return callSuper(&PY_TYPE(TermFirstPassGroupingCollector), (PyObject *) self, "setNextReader", args, 2);
            }
            static PyObject *t_TermFirstPassGroupingCollector_get__parameters_(t_TermFirstPassGroupingCollector *self, void *data)
            {
              return typeParameters(self->parameters, sizeof(self->parameters));
            }

            static int t_TermFirstPassGroupingCollector_set__nextReader(t_TermFirstPassGroupingCollector *self, PyObject *arg, void *data)
            {
              {
                ::org::apache::lucene::index::AtomicReaderContext value((jobject) NULL);
                if (!parseArg(arg, "k", ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &value))
                {
                  INT_CALL(self->object.setNextReader(value));
                  return 0;
                }
              }
              PyErr_SetArgsError((PyObject *) self, "nextReader", arg);
              return -1;
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/de/GermanStemFilter.h"
#include "org/apache/lucene/analysis/de/GermanStemmer.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace de {

          ::java::lang::Class *GermanStemFilter::class$ = NULL;
          jmethodID *GermanStemFilter::mids$ = NULL;
          bool GermanStemFilter::live$ = false;

          jclass GermanStemFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/de/GermanStemFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_c7c794dc] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;)V");
              mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");
              mids$[mid_setStemmer_4867d4cf] = env->getMethodID(cls, "setStemmer", "(Lorg/apache/lucene/analysis/de/GermanStemmer;)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          GermanStemFilter::GermanStemFilter(const ::org::apache::lucene::analysis::TokenStream & a0) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_c7c794dc, a0.this$)) {}

          jboolean GermanStemFilter::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_54c6a16a]);
          }

          void GermanStemFilter::setStemmer(const ::org::apache::lucene::analysis::de::GermanStemmer & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setStemmer_4867d4cf], a0.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace de {
          static PyObject *t_GermanStemFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_GermanStemFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_GermanStemFilter_init_(t_GermanStemFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_GermanStemFilter_incrementToken(t_GermanStemFilter *self, PyObject *args);
          static PyObject *t_GermanStemFilter_setStemmer(t_GermanStemFilter *self, PyObject *arg);
          static int t_GermanStemFilter_set__stemmer(t_GermanStemFilter *self, PyObject *arg, void *data);
          static PyGetSetDef t_GermanStemFilter__fields_[] = {
            DECLARE_SET_FIELD(t_GermanStemFilter, stemmer),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_GermanStemFilter__methods_[] = {
            DECLARE_METHOD(t_GermanStemFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_GermanStemFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_GermanStemFilter, incrementToken, METH_VARARGS),
            DECLARE_METHOD(t_GermanStemFilter, setStemmer, METH_O),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(GermanStemFilter, t_GermanStemFilter, ::org::apache::lucene::analysis::TokenFilter, GermanStemFilter, t_GermanStemFilter_init_, 0, 0, t_GermanStemFilter__fields_, 0, 0);

          void t_GermanStemFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(GermanStemFilter), module, "GermanStemFilter", 0);
          }

          void t_GermanStemFilter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(GermanStemFilter).tp_dict, "class_", make_descriptor(GermanStemFilter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(GermanStemFilter).tp_dict, "wrapfn_", make_descriptor(t_GermanStemFilter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(GermanStemFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_GermanStemFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, GermanStemFilter::initializeClass, 1)))
              return NULL;
            return t_GermanStemFilter::wrap_Object(GermanStemFilter(((t_GermanStemFilter *) arg)->object.this$));
          }
          static PyObject *t_GermanStemFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, GermanStemFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_GermanStemFilter_init_(t_GermanStemFilter *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            GermanStemFilter object((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              INT_CALL(object = GermanStemFilter(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_GermanStemFilter_incrementToken(t_GermanStemFilter *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(GermanStemFilter), (PyObject *) self, "incrementToken", args, 2);
          }

          static PyObject *t_GermanStemFilter_setStemmer(t_GermanStemFilter *self, PyObject *arg)
          {
            ::org::apache::lucene::analysis::de::GermanStemmer a0((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::analysis::de::GermanStemmer::initializeClass, &a0))
            {
              OBJ_CALL(self->object.setStemmer(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setStemmer", arg);
            return NULL;
          }

          static int t_GermanStemFilter_set__stemmer(t_GermanStemFilter *self, PyObject *arg, void *data)
          {
            {
              ::org::apache::lucene::analysis::de::GermanStemmer value((jobject) NULL);
              if (!parseArg(arg, "k", ::org::apache::lucene::analysis::de::GermanStemmer::initializeClass, &value))
              {
                INT_CALL(self->object.setStemmer(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "stemmer", arg);
            return -1;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/spans/SpanWeight.h"
#include "org/apache/lucene/util/Bits.h"
#include "java/lang/Class.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "org/apache/lucene/search/spans/SpanQuery.h"
#include "org/apache/lucene/search/Explanation.h"
#include "org/apache/lucene/search/IndexSearcher.h"
#include "org/apache/lucene/search/Scorer.h"
#include "org/apache/lucene/search/Query.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace spans {

          ::java::lang::Class *SpanWeight::class$ = NULL;
          jmethodID *SpanWeight::mids$ = NULL;
          bool SpanWeight::live$ = false;

          jclass SpanWeight::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/spans/SpanWeight");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_917aaae1] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/spans/SpanQuery;Lorg/apache/lucene/search/IndexSearcher;)V");
              mids$[mid_explain_6ad94adc] = env->getMethodID(cls, "explain", "(Lorg/apache/lucene/index/AtomicReaderContext;I)Lorg/apache/lucene/search/Explanation;");
              mids$[mid_getQuery_97e3851a] = env->getMethodID(cls, "getQuery", "()Lorg/apache/lucene/search/Query;");
              mids$[mid_getValueForNormalization_54c6a176] = env->getMethodID(cls, "getValueForNormalization", "()F");
              mids$[mid_normalize_f1b0c004] = env->getMethodID(cls, "normalize", "(FF)V");
              mids$[mid_scorer_3869ad24] = env->getMethodID(cls, "scorer", "(Lorg/apache/lucene/index/AtomicReaderContext;Lorg/apache/lucene/util/Bits;)Lorg/apache/lucene/search/Scorer;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          SpanWeight::SpanWeight(const ::org::apache::lucene::search::spans::SpanQuery & a0, const ::org::apache::lucene::search::IndexSearcher & a1) : ::org::apache::lucene::search::Weight(env->newObject(initializeClass, &mids$, mid_init$_917aaae1, a0.this$, a1.this$)) {}

          ::org::apache::lucene::search::Explanation SpanWeight::explain(const ::org::apache::lucene::index::AtomicReaderContext & a0, jint a1) const
          {
            return ::org::apache::lucene::search::Explanation(env->callObjectMethod(this$, mids$[mid_explain_6ad94adc], a0.this$, a1));
          }

          ::org::apache::lucene::search::Query SpanWeight::getQuery() const
          {
            return ::org::apache::lucene::search::Query(env->callObjectMethod(this$, mids$[mid_getQuery_97e3851a]));
          }

          jfloat SpanWeight::getValueForNormalization() const
          {
            return env->callFloatMethod(this$, mids$[mid_getValueForNormalization_54c6a176]);
          }

          void SpanWeight::normalize(jfloat a0, jfloat a1) const
          {
            env->callVoidMethod(this$, mids$[mid_normalize_f1b0c004], a0, a1);
          }

          ::org::apache::lucene::search::Scorer SpanWeight::scorer(const ::org::apache::lucene::index::AtomicReaderContext & a0, const ::org::apache::lucene::util::Bits & a1) const
          {
            return ::org::apache::lucene::search::Scorer(env->callObjectMethod(this$, mids$[mid_scorer_3869ad24], a0.this$, a1.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace spans {
          static PyObject *t_SpanWeight_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SpanWeight_instance_(PyTypeObject *type, PyObject *arg);
          static int t_SpanWeight_init_(t_SpanWeight *self, PyObject *args, PyObject *kwds);
          static PyObject *t_SpanWeight_explain(t_SpanWeight *self, PyObject *args);
          static PyObject *t_SpanWeight_getQuery(t_SpanWeight *self, PyObject *args);
          static PyObject *t_SpanWeight_getValueForNormalization(t_SpanWeight *self, PyObject *args);
          static PyObject *t_SpanWeight_normalize(t_SpanWeight *self, PyObject *args);
          static PyObject *t_SpanWeight_scorer(t_SpanWeight *self, PyObject *args);
          static PyObject *t_SpanWeight_get__query(t_SpanWeight *self, void *data);
          static PyObject *t_SpanWeight_get__valueForNormalization(t_SpanWeight *self, void *data);
          static PyGetSetDef t_SpanWeight__fields_[] = {
            DECLARE_GET_FIELD(t_SpanWeight, query),
            DECLARE_GET_FIELD(t_SpanWeight, valueForNormalization),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_SpanWeight__methods_[] = {
            DECLARE_METHOD(t_SpanWeight, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SpanWeight, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SpanWeight, explain, METH_VARARGS),
            DECLARE_METHOD(t_SpanWeight, getQuery, METH_VARARGS),
            DECLARE_METHOD(t_SpanWeight, getValueForNormalization, METH_VARARGS),
            DECLARE_METHOD(t_SpanWeight, normalize, METH_VARARGS),
            DECLARE_METHOD(t_SpanWeight, scorer, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(SpanWeight, t_SpanWeight, ::org::apache::lucene::search::Weight, SpanWeight, t_SpanWeight_init_, 0, 0, t_SpanWeight__fields_, 0, 0);

          void t_SpanWeight::install(PyObject *module)
          {
            installType(&PY_TYPE(SpanWeight), module, "SpanWeight", 0);
          }

          void t_SpanWeight::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(SpanWeight).tp_dict, "class_", make_descriptor(SpanWeight::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(SpanWeight).tp_dict, "wrapfn_", make_descriptor(t_SpanWeight::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(SpanWeight).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_SpanWeight_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, SpanWeight::initializeClass, 1)))
              return NULL;
            return t_SpanWeight::wrap_Object(SpanWeight(((t_SpanWeight *) arg)->object.this$));
          }
          static PyObject *t_SpanWeight_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, SpanWeight::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_SpanWeight_init_(t_SpanWeight *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::search::spans::SpanQuery a0((jobject) NULL);
            ::org::apache::lucene::search::IndexSearcher a1((jobject) NULL);
            SpanWeight object((jobject) NULL);

            if (!parseArgs(args, "kk", ::org::apache::lucene::search::spans::SpanQuery::initializeClass, ::org::apache::lucene::search::IndexSearcher::initializeClass, &a0, &a1))
            {
              INT_CALL(object = SpanWeight(a0, a1));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_SpanWeight_explain(t_SpanWeight *self, PyObject *args)
          {
            ::org::apache::lucene::index::AtomicReaderContext a0((jobject) NULL);
            jint a1;
            ::org::apache::lucene::search::Explanation result((jobject) NULL);

            if (!parseArgs(args, "kI", ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.explain(a0, a1));
              return ::org::apache::lucene::search::t_Explanation::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(SpanWeight), (PyObject *) self, "explain", args, 2);
          }

          static PyObject *t_SpanWeight_getQuery(t_SpanWeight *self, PyObject *args)
          {
            ::org::apache::lucene::search::Query result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.getQuery());
              return ::org::apache::lucene::search::t_Query::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(SpanWeight), (PyObject *) self, "getQuery", args, 2);
          }

          static PyObject *t_SpanWeight_getValueForNormalization(t_SpanWeight *self, PyObject *args)
          {
            jfloat result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.getValueForNormalization());
              return PyFloat_FromDouble((double) result);
            }

            return callSuper(&PY_TYPE(SpanWeight), (PyObject *) self, "getValueForNormalization", args, 2);
          }

          static PyObject *t_SpanWeight_normalize(t_SpanWeight *self, PyObject *args)
          {
            jfloat a0;
            jfloat a1;

            if (!parseArgs(args, "FF", &a0, &a1))
            {
              OBJ_CALL(self->object.normalize(a0, a1));
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(SpanWeight), (PyObject *) self, "normalize", args, 2);
          }

          static PyObject *t_SpanWeight_scorer(t_SpanWeight *self, PyObject *args)
          {
            ::org::apache::lucene::index::AtomicReaderContext a0((jobject) NULL);
            ::org::apache::lucene::util::Bits a1((jobject) NULL);
            ::org::apache::lucene::search::Scorer result((jobject) NULL);

            if (!parseArgs(args, "kk", ::org::apache::lucene::index::AtomicReaderContext::initializeClass, ::org::apache::lucene::util::Bits::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.scorer(a0, a1));
              return ::org::apache::lucene::search::t_Scorer::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(SpanWeight), (PyObject *) self, "scorer", args, 2);
          }

          static PyObject *t_SpanWeight_get__query(t_SpanWeight *self, void *data)
          {
            ::org::apache::lucene::search::Query value((jobject) NULL);
            OBJ_CALL(value = self->object.getQuery());
            return ::org::apache::lucene::search::t_Query::wrap_Object(value);
          }

          static PyObject *t_SpanWeight_get__valueForNormalization(t_SpanWeight *self, void *data)
          {
            jfloat value;
            OBJ_CALL(value = self->object.getValueForNormalization());
            return PyFloat_FromDouble((double) value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/sv/SwedishLightStemmer.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace sv {

          ::java::lang::Class *SwedishLightStemmer::class$ = NULL;
          jmethodID *SwedishLightStemmer::mids$ = NULL;
          bool SwedishLightStemmer::live$ = false;

          jclass SwedishLightStemmer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/sv/SwedishLightStemmer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_stem_ec6430eb] = env->getMethodID(cls, "stem", "([CI)I");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          SwedishLightStemmer::SwedishLightStemmer() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          jint SwedishLightStemmer::stem(const JArray< jchar > & a0, jint a1) const
          {
            return env->callIntMethod(this$, mids$[mid_stem_ec6430eb], a0.this$, a1);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace sv {
          static PyObject *t_SwedishLightStemmer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SwedishLightStemmer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_SwedishLightStemmer_init_(t_SwedishLightStemmer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_SwedishLightStemmer_stem(t_SwedishLightStemmer *self, PyObject *args);

          static PyMethodDef t_SwedishLightStemmer__methods_[] = {
            DECLARE_METHOD(t_SwedishLightStemmer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SwedishLightStemmer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SwedishLightStemmer, stem, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(SwedishLightStemmer, t_SwedishLightStemmer, ::java::lang::Object, SwedishLightStemmer, t_SwedishLightStemmer_init_, 0, 0, 0, 0, 0);

          void t_SwedishLightStemmer::install(PyObject *module)
          {
            installType(&PY_TYPE(SwedishLightStemmer), module, "SwedishLightStemmer", 0);
          }

          void t_SwedishLightStemmer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(SwedishLightStemmer).tp_dict, "class_", make_descriptor(SwedishLightStemmer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(SwedishLightStemmer).tp_dict, "wrapfn_", make_descriptor(t_SwedishLightStemmer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(SwedishLightStemmer).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_SwedishLightStemmer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, SwedishLightStemmer::initializeClass, 1)))
              return NULL;
            return t_SwedishLightStemmer::wrap_Object(SwedishLightStemmer(((t_SwedishLightStemmer *) arg)->object.this$));
          }
          static PyObject *t_SwedishLightStemmer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, SwedishLightStemmer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_SwedishLightStemmer_init_(t_SwedishLightStemmer *self, PyObject *args, PyObject *kwds)
          {
            SwedishLightStemmer object((jobject) NULL);

            INT_CALL(object = SwedishLightStemmer());
            self->object = object;

            return 0;
          }

          static PyObject *t_SwedishLightStemmer_stem(t_SwedishLightStemmer *self, PyObject *args)
          {
            JArray< jchar > a0((jobject) NULL);
            jint a1;
            jint result;

            if (!parseArgs(args, "[CI", &a0, &a1))
            {
              OBJ_CALL(result = self->object.stem(a0, a1));
              return PyInt_FromLong((long) result);
            }

            PyErr_SetArgsError((PyObject *) self, "stem", args);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/highlight/QueryTermScorer.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/search/highlight/WeightedTerm.h"
#include "org/apache/lucene/search/highlight/TextFragment.h"
#include "org/apache/lucene/search/highlight/Scorer.h"
#include "java/lang/String.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "org/apache/lucene/search/Query.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace highlight {

          ::java::lang::Class *QueryTermScorer::class$ = NULL;
          jmethodID *QueryTermScorer::mids$ = NULL;
          bool QueryTermScorer::live$ = false;

          jclass QueryTermScorer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/highlight/QueryTermScorer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_0bdf9712] = env->getMethodID(cls, "<init>", "([Lorg/apache/lucene/search/highlight/WeightedTerm;)V");
              mids$[mid_init$_6e301113] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/Query;)V");
              mids$[mid_init$_036dd355] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/Query;Ljava/lang/String;)V");
              mids$[mid_init$_2e1f8bd4] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/Query;Lorg/apache/lucene/index/IndexReader;Ljava/lang/String;)V");
              mids$[mid_allFragmentsProcessed_54c6a166] = env->getMethodID(cls, "allFragmentsProcessed", "()V");
              mids$[mid_getFragmentScore_54c6a176] = env->getMethodID(cls, "getFragmentScore", "()F");
              mids$[mid_getMaxTermWeight_54c6a176] = env->getMethodID(cls, "getMaxTermWeight", "()F");
              mids$[mid_getTokenScore_54c6a176] = env->getMethodID(cls, "getTokenScore", "()F");
              mids$[mid_init_a65cd6ab] = env->getMethodID(cls, "init", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/TokenStream;");
              mids$[mid_startFragment_0335a78a] = env->getMethodID(cls, "startFragment", "(Lorg/apache/lucene/search/highlight/TextFragment;)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          QueryTermScorer::QueryTermScorer(const JArray< ::org::apache::lucene::search::highlight::WeightedTerm > & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_0bdf9712, a0.this$)) {}

          QueryTermScorer::QueryTermScorer(const ::org::apache::lucene::search::Query & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_6e301113, a0.this$)) {}

          QueryTermScorer::QueryTermScorer(const ::org::apache::lucene::search::Query & a0, const ::java::lang::String & a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_036dd355, a0.this$, a1.this$)) {}

          QueryTermScorer::QueryTermScorer(const ::org::apache::lucene::search::Query & a0, const ::org::apache::lucene::index::IndexReader & a1, const ::java::lang::String & a2) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_2e1f8bd4, a0.this$, a1.this$, a2.this$)) {}

          void QueryTermScorer::allFragmentsProcessed() const
          {
            env->callVoidMethod(this$, mids$[mid_allFragmentsProcessed_54c6a166]);
          }

          jfloat QueryTermScorer::getFragmentScore() const
          {
            return env->callFloatMethod(this$, mids$[mid_getFragmentScore_54c6a176]);
          }

          jfloat QueryTermScorer::getMaxTermWeight() const
          {
            return env->callFloatMethod(this$, mids$[mid_getMaxTermWeight_54c6a176]);
          }

          jfloat QueryTermScorer::getTokenScore() const
          {
            return env->callFloatMethod(this$, mids$[mid_getTokenScore_54c6a176]);
          }

          ::org::apache::lucene::analysis::TokenStream QueryTermScorer::init(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::TokenStream(env->callObjectMethod(this$, mids$[mid_init_a65cd6ab], a0.this$));
          }

          void QueryTermScorer::startFragment(const ::org::apache::lucene::search::highlight::TextFragment & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_startFragment_0335a78a], a0.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace highlight {
          static PyObject *t_QueryTermScorer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_QueryTermScorer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_QueryTermScorer_init_(t_QueryTermScorer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_QueryTermScorer_allFragmentsProcessed(t_QueryTermScorer *self);
          static PyObject *t_QueryTermScorer_getFragmentScore(t_QueryTermScorer *self);
          static PyObject *t_QueryTermScorer_getMaxTermWeight(t_QueryTermScorer *self);
          static PyObject *t_QueryTermScorer_getTokenScore(t_QueryTermScorer *self);
          static PyObject *t_QueryTermScorer_init(t_QueryTermScorer *self, PyObject *arg);
          static PyObject *t_QueryTermScorer_startFragment(t_QueryTermScorer *self, PyObject *arg);
          static PyObject *t_QueryTermScorer_get__fragmentScore(t_QueryTermScorer *self, void *data);
          static PyObject *t_QueryTermScorer_get__maxTermWeight(t_QueryTermScorer *self, void *data);
          static PyObject *t_QueryTermScorer_get__tokenScore(t_QueryTermScorer *self, void *data);
          static PyGetSetDef t_QueryTermScorer__fields_[] = {
            DECLARE_GET_FIELD(t_QueryTermScorer, fragmentScore),
            DECLARE_GET_FIELD(t_QueryTermScorer, maxTermWeight),
            DECLARE_GET_FIELD(t_QueryTermScorer, tokenScore),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_QueryTermScorer__methods_[] = {
            DECLARE_METHOD(t_QueryTermScorer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_QueryTermScorer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_QueryTermScorer, allFragmentsProcessed, METH_NOARGS),
            DECLARE_METHOD(t_QueryTermScorer, getFragmentScore, METH_NOARGS),
            DECLARE_METHOD(t_QueryTermScorer, getMaxTermWeight, METH_NOARGS),
            DECLARE_METHOD(t_QueryTermScorer, getTokenScore, METH_NOARGS),
            DECLARE_METHOD(t_QueryTermScorer, init, METH_O),
            DECLARE_METHOD(t_QueryTermScorer, startFragment, METH_O),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(QueryTermScorer, t_QueryTermScorer, ::java::lang::Object, QueryTermScorer, t_QueryTermScorer_init_, 0, 0, t_QueryTermScorer__fields_, 0, 0);

          void t_QueryTermScorer::install(PyObject *module)
          {
            installType(&PY_TYPE(QueryTermScorer), module, "QueryTermScorer", 0);
          }

          void t_QueryTermScorer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(QueryTermScorer).tp_dict, "class_", make_descriptor(QueryTermScorer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(QueryTermScorer).tp_dict, "wrapfn_", make_descriptor(t_QueryTermScorer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(QueryTermScorer).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_QueryTermScorer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, QueryTermScorer::initializeClass, 1)))
              return NULL;
            return t_QueryTermScorer::wrap_Object(QueryTermScorer(((t_QueryTermScorer *) arg)->object.this$));
          }
          static PyObject *t_QueryTermScorer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, QueryTermScorer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_QueryTermScorer_init_(t_QueryTermScorer *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                JArray< ::org::apache::lucene::search::highlight::WeightedTerm > a0((jobject) NULL);
                QueryTermScorer object((jobject) NULL);

                if (!parseArgs(args, "[k", ::org::apache::lucene::search::highlight::WeightedTerm::initializeClass, &a0))
                {
                  INT_CALL(object = QueryTermScorer(a0));
                  self->object = object;
                  break;
                }
              }
              {
                ::org::apache::lucene::search::Query a0((jobject) NULL);
                QueryTermScorer object((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::search::Query::initializeClass, &a0))
                {
                  INT_CALL(object = QueryTermScorer(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 2:
              {
                ::org::apache::lucene::search::Query a0((jobject) NULL);
                ::java::lang::String a1((jobject) NULL);
                QueryTermScorer object((jobject) NULL);

                if (!parseArgs(args, "ks", ::org::apache::lucene::search::Query::initializeClass, &a0, &a1))
                {
                  INT_CALL(object = QueryTermScorer(a0, a1));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 3:
              {
                ::org::apache::lucene::search::Query a0((jobject) NULL);
                ::org::apache::lucene::index::IndexReader a1((jobject) NULL);
                ::java::lang::String a2((jobject) NULL);
                QueryTermScorer object((jobject) NULL);

                if (!parseArgs(args, "kks", ::org::apache::lucene::search::Query::initializeClass, ::org::apache::lucene::index::IndexReader::initializeClass, &a0, &a1, &a2))
                {
                  INT_CALL(object = QueryTermScorer(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_QueryTermScorer_allFragmentsProcessed(t_QueryTermScorer *self)
          {
            OBJ_CALL(self->object.allFragmentsProcessed());
            Py_RETURN_NONE;
          }

          static PyObject *t_QueryTermScorer_getFragmentScore(t_QueryTermScorer *self)
          {
            jfloat result;
            OBJ_CALL(result = self->object.getFragmentScore());
            return PyFloat_FromDouble((double) result);
          }

          static PyObject *t_QueryTermScorer_getMaxTermWeight(t_QueryTermScorer *self)
          {
            jfloat result;
            OBJ_CALL(result = self->object.getMaxTermWeight());
            return PyFloat_FromDouble((double) result);
          }

          static PyObject *t_QueryTermScorer_getTokenScore(t_QueryTermScorer *self)
          {
            jfloat result;
            OBJ_CALL(result = self->object.getTokenScore());
            return PyFloat_FromDouble((double) result);
          }

          static PyObject *t_QueryTermScorer_init(t_QueryTermScorer *self, PyObject *arg)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::TokenStream result((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.init(a0));
              return ::org::apache::lucene::analysis::t_TokenStream::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "init", arg);
            return NULL;
          }

          static PyObject *t_QueryTermScorer_startFragment(t_QueryTermScorer *self, PyObject *arg)
          {
            ::org::apache::lucene::search::highlight::TextFragment a0((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::search::highlight::TextFragment::initializeClass, &a0))
            {
              OBJ_CALL(self->object.startFragment(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "startFragment", arg);
            return NULL;
          }

          static PyObject *t_QueryTermScorer_get__fragmentScore(t_QueryTermScorer *self, void *data)
          {
            jfloat value;
            OBJ_CALL(value = self->object.getFragmentScore());
            return PyFloat_FromDouble((double) value);
          }

          static PyObject *t_QueryTermScorer_get__maxTermWeight(t_QueryTermScorer *self, void *data)
          {
            jfloat value;
            OBJ_CALL(value = self->object.getMaxTermWeight());
            return PyFloat_FromDouble((double) value);
          }

          static PyObject *t_QueryTermScorer_get__tokenScore(t_QueryTermScorer *self, void *data)
          {
            jfloat value;
            OBJ_CALL(value = self->object.getTokenScore());
            return PyFloat_FromDouble((double) value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/CachingTokenFilter.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {

        ::java::lang::Class *CachingTokenFilter::class$ = NULL;
        jmethodID *CachingTokenFilter::mids$ = NULL;
        bool CachingTokenFilter::live$ = false;

        jclass CachingTokenFilter::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/CachingTokenFilter");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_c7c794dc] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;)V");
            mids$[mid_end_54c6a166] = env->getMethodID(cls, "end", "()V");
            mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");
            mids$[mid_reset_54c6a166] = env->getMethodID(cls, "reset", "()V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        CachingTokenFilter::CachingTokenFilter(const ::org::apache::lucene::analysis::TokenStream & a0) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_c7c794dc, a0.this$)) {}

        void CachingTokenFilter::end() const
        {
          env->callVoidMethod(this$, mids$[mid_end_54c6a166]);
        }

        jboolean CachingTokenFilter::incrementToken() const
        {
          return env->callBooleanMethod(this$, mids$[mid_incrementToken_54c6a16a]);
        }

        void CachingTokenFilter::reset() const
        {
          env->callVoidMethod(this$, mids$[mid_reset_54c6a166]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        static PyObject *t_CachingTokenFilter_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_CachingTokenFilter_instance_(PyTypeObject *type, PyObject *arg);
        static int t_CachingTokenFilter_init_(t_CachingTokenFilter *self, PyObject *args, PyObject *kwds);
        static PyObject *t_CachingTokenFilter_end(t_CachingTokenFilter *self, PyObject *args);
        static PyObject *t_CachingTokenFilter_incrementToken(t_CachingTokenFilter *self, PyObject *args);
        static PyObject *t_CachingTokenFilter_reset(t_CachingTokenFilter *self, PyObject *args);

        static PyMethodDef t_CachingTokenFilter__methods_[] = {
          DECLARE_METHOD(t_CachingTokenFilter, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_CachingTokenFilter, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_CachingTokenFilter, end, METH_VARARGS),
          DECLARE_METHOD(t_CachingTokenFilter, incrementToken, METH_VARARGS),
          DECLARE_METHOD(t_CachingTokenFilter, reset, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(CachingTokenFilter, t_CachingTokenFilter, ::org::apache::lucene::analysis::TokenFilter, CachingTokenFilter, t_CachingTokenFilter_init_, 0, 0, 0, 0, 0);

        void t_CachingTokenFilter::install(PyObject *module)
        {
          installType(&PY_TYPE(CachingTokenFilter), module, "CachingTokenFilter", 0);
        }

        void t_CachingTokenFilter::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(CachingTokenFilter).tp_dict, "class_", make_descriptor(CachingTokenFilter::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(CachingTokenFilter).tp_dict, "wrapfn_", make_descriptor(t_CachingTokenFilter::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(CachingTokenFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_CachingTokenFilter_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, CachingTokenFilter::initializeClass, 1)))
            return NULL;
          return t_CachingTokenFilter::wrap_Object(CachingTokenFilter(((t_CachingTokenFilter *) arg)->object.this$));
        }
        static PyObject *t_CachingTokenFilter_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, CachingTokenFilter::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_CachingTokenFilter_init_(t_CachingTokenFilter *self, PyObject *args, PyObject *kwds)
        {
          ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
          CachingTokenFilter object((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
          {
            INT_CALL(object = CachingTokenFilter(a0));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_CachingTokenFilter_end(t_CachingTokenFilter *self, PyObject *args)
        {

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(self->object.end());
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(CachingTokenFilter), (PyObject *) self, "end", args, 2);
        }

        static PyObject *t_CachingTokenFilter_incrementToken(t_CachingTokenFilter *self, PyObject *args)
        {
          jboolean result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.incrementToken());
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(CachingTokenFilter), (PyObject *) self, "incrementToken", args, 2);
        }

        static PyObject *t_CachingTokenFilter_reset(t_CachingTokenFilter *self, PyObject *args)
        {

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(self->object.reset());
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(CachingTokenFilter), (PyObject *) self, "reset", args, 2);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/pattern/PatternReplaceCharFilterFactory.h"
#include "org/apache/lucene/analysis/CharFilter.h"
#include "java/lang/String.h"
#include "java/util/Map.h"
#include "java/io/Reader.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace pattern {

          ::java::lang::Class *PatternReplaceCharFilterFactory::class$ = NULL;
          jmethodID *PatternReplaceCharFilterFactory::mids$ = NULL;
          bool PatternReplaceCharFilterFactory::live$ = false;

          jclass PatternReplaceCharFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/pattern/PatternReplaceCharFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4c9e2b1c] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_567624d1] = env->getMethodID(cls, "create", "(Ljava/io/Reader;)Lorg/apache/lucene/analysis/CharFilter;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          PatternReplaceCharFilterFactory::PatternReplaceCharFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::CharFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_4c9e2b1c, a0.this$)) {}

          ::org::apache::lucene::analysis::CharFilter PatternReplaceCharFilterFactory::create(const ::java::io::Reader & a0) const
          {
            return ::org::apache::lucene::analysis::CharFilter(env->callObjectMethod(this$, mids$[mid_create_567624d1], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace pattern {
          static PyObject *t_PatternReplaceCharFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PatternReplaceCharFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_PatternReplaceCharFilterFactory_init_(t_PatternReplaceCharFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_PatternReplaceCharFilterFactory_create(t_PatternReplaceCharFilterFactory *self, PyObject *args);

          static PyMethodDef t_PatternReplaceCharFilterFactory__methods_[] = {
            DECLARE_METHOD(t_PatternReplaceCharFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PatternReplaceCharFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PatternReplaceCharFilterFactory, create, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(PatternReplaceCharFilterFactory, t_PatternReplaceCharFilterFactory, ::org::apache::lucene::analysis::util::CharFilterFactory, PatternReplaceCharFilterFactory, t_PatternReplaceCharFilterFactory_init_, 0, 0, 0, 0, 0);

          void t_PatternReplaceCharFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(PatternReplaceCharFilterFactory), module, "PatternReplaceCharFilterFactory", 0);
          }

          void t_PatternReplaceCharFilterFactory::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(PatternReplaceCharFilterFactory).tp_dict, "class_", make_descriptor(PatternReplaceCharFilterFactory::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(PatternReplaceCharFilterFactory).tp_dict, "wrapfn_", make_descriptor(t_PatternReplaceCharFilterFactory::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(PatternReplaceCharFilterFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_PatternReplaceCharFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, PatternReplaceCharFilterFactory::initializeClass, 1)))
              return NULL;
            return t_PatternReplaceCharFilterFactory::wrap_Object(PatternReplaceCharFilterFactory(((t_PatternReplaceCharFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_PatternReplaceCharFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, PatternReplaceCharFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_PatternReplaceCharFilterFactory_init_(t_PatternReplaceCharFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            PatternReplaceCharFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = PatternReplaceCharFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_PatternReplaceCharFilterFactory_create(t_PatternReplaceCharFilterFactory *self, PyObject *args)
          {
            ::java::io::Reader a0((jobject) NULL);
            ::org::apache::lucene::analysis::CharFilter result((jobject) NULL);

            if (!parseArgs(args, "k", ::java::io::Reader::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::t_CharFilter::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(PatternReplaceCharFilterFactory), (PyObject *) self, "create", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/it/ItalianLightStemFilterFactory.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/String.h"
#include "java/util/Map.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace it {

          ::java::lang::Class *ItalianLightStemFilterFactory::class$ = NULL;
          jmethodID *ItalianLightStemFilterFactory::mids$ = NULL;
          bool ItalianLightStemFilterFactory::live$ = false;

          jclass ItalianLightStemFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/it/ItalianLightStemFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4c9e2b1c] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_a65cd6ab] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/TokenStream;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ItalianLightStemFilterFactory::ItalianLightStemFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_4c9e2b1c, a0.this$)) {}

          ::org::apache::lucene::analysis::TokenStream ItalianLightStemFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::TokenStream(env->callObjectMethod(this$, mids$[mid_create_a65cd6ab], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace it {
          static PyObject *t_ItalianLightStemFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_ItalianLightStemFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_ItalianLightStemFilterFactory_init_(t_ItalianLightStemFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_ItalianLightStemFilterFactory_create(t_ItalianLightStemFilterFactory *self, PyObject *args);

          static PyMethodDef t_ItalianLightStemFilterFactory__methods_[] = {
            DECLARE_METHOD(t_ItalianLightStemFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ItalianLightStemFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ItalianLightStemFilterFactory, create, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(ItalianLightStemFilterFactory, t_ItalianLightStemFilterFactory, ::org::apache::lucene::analysis::util::TokenFilterFactory, ItalianLightStemFilterFactory, t_ItalianLightStemFilterFactory_init_, 0, 0, 0, 0, 0);

          void t_ItalianLightStemFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(ItalianLightStemFilterFactory), module, "ItalianLightStemFilterFactory", 0);
          }

          void t_ItalianLightStemFilterFactory::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(ItalianLightStemFilterFactory).tp_dict, "class_", make_descriptor(ItalianLightStemFilterFactory::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(ItalianLightStemFilterFactory).tp_dict, "wrapfn_", make_descriptor(t_ItalianLightStemFilterFactory::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(ItalianLightStemFilterFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_ItalianLightStemFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, ItalianLightStemFilterFactory::initializeClass, 1)))
              return NULL;
            return t_ItalianLightStemFilterFactory::wrap_Object(ItalianLightStemFilterFactory(((t_ItalianLightStemFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_ItalianLightStemFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, ItalianLightStemFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_ItalianLightStemFilterFactory_init_(t_ItalianLightStemFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            ItalianLightStemFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = ItalianLightStemFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_ItalianLightStemFilterFactory_create(t_ItalianLightStemFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::TokenStream result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::t_TokenStream::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(ItalianLightStemFilterFactory), (PyObject *) self, "create", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "java/util/NoSuchElementException.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace java {
  namespace util {

    ::java::lang::Class *NoSuchElementException::class$ = NULL;
    jmethodID *NoSuchElementException::mids$ = NULL;
    bool NoSuchElementException::live$ = false;

    jclass NoSuchElementException::initializeClass(bool getOnly)
    {
      if (getOnly)
        return (jclass) (live$ ? class$->this$ : NULL);
      if (class$ == NULL)
      {
        jclass cls = (jclass) env->findClass("java/util/NoSuchElementException");

        mids$ = new jmethodID[max_mid];
        mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
        mids$[mid_init$_5fdc3f48] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;)V");

        class$ = (::java::lang::Class *) new JObject(cls);
        live$ = true;
      }
      return (jclass) class$->this$;
    }

    NoSuchElementException::NoSuchElementException() : ::java::lang::RuntimeException(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

    NoSuchElementException::NoSuchElementException(const ::java::lang::String & a0) : ::java::lang::RuntimeException(env->newObject(initializeClass, &mids$, mid_init$_5fdc3f48, a0.this$)) {}
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace java {
  namespace util {
    static PyObject *t_NoSuchElementException_cast_(PyTypeObject *type, PyObject *arg);
    static PyObject *t_NoSuchElementException_instance_(PyTypeObject *type, PyObject *arg);
    static int t_NoSuchElementException_init_(t_NoSuchElementException *self, PyObject *args, PyObject *kwds);

    static PyMethodDef t_NoSuchElementException__methods_[] = {
      DECLARE_METHOD(t_NoSuchElementException, cast_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_NoSuchElementException, instance_, METH_O | METH_CLASS),
      { NULL, NULL, 0, NULL }
    };

    DECLARE_TYPE(NoSuchElementException, t_NoSuchElementException, ::java::lang::RuntimeException, NoSuchElementException, t_NoSuchElementException_init_, 0, 0, 0, 0, 0);

    void t_NoSuchElementException::install(PyObject *module)
    {
      installType(&PY_TYPE(NoSuchElementException), module, "NoSuchElementException", 0);
    }

    void t_NoSuchElementException::initialize(PyObject *module)
    {
      PyDict_SetItemString(PY_TYPE(NoSuchElementException).tp_dict, "class_", make_descriptor(NoSuchElementException::initializeClass, 1));
      PyDict_SetItemString(PY_TYPE(NoSuchElementException).tp_dict, "wrapfn_", make_descriptor(t_NoSuchElementException::wrap_jobject));
      PyDict_SetItemString(PY_TYPE(NoSuchElementException).tp_dict, "boxfn_", make_descriptor(boxObject));
    }

    static PyObject *t_NoSuchElementException_cast_(PyTypeObject *type, PyObject *arg)
    {
      if (!(arg = castCheck(arg, NoSuchElementException::initializeClass, 1)))
        return NULL;
      return t_NoSuchElementException::wrap_Object(NoSuchElementException(((t_NoSuchElementException *) arg)->object.this$));
    }
    static PyObject *t_NoSuchElementException_instance_(PyTypeObject *type, PyObject *arg)
    {
      if (!castCheck(arg, NoSuchElementException::initializeClass, 0))
        Py_RETURN_FALSE;
      Py_RETURN_TRUE;
    }

    static int t_NoSuchElementException_init_(t_NoSuchElementException *self, PyObject *args, PyObject *kwds)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 0:
        {
          NoSuchElementException object((jobject) NULL);

          INT_CALL(object = NoSuchElementException());
          self->object = object;
          break;
        }
        goto err;
       case 1:
        {
          ::java::lang::String a0((jobject) NULL);
          NoSuchElementException object((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            INT_CALL(object = NoSuchElementException(a0));
            self->object = object;
            break;
          }
        }
       default:
       err:
        PyErr_SetArgsError((PyObject *) self, "__init__", args);
        return -1;
      }

      return 0;
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/FieldComparator$TermOrdValComparator.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *FieldComparator$TermOrdValComparator::class$ = NULL;
        jmethodID *FieldComparator$TermOrdValComparator::mids$ = NULL;
        bool FieldComparator$TermOrdValComparator::live$ = false;

        jclass FieldComparator$TermOrdValComparator::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/FieldComparator$TermOrdValComparator");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_d40a4f2e] = env->getMethodID(cls, "<init>", "(ILjava/lang/String;)V");
            mids$[mid_init$_cab89017] = env->getMethodID(cls, "<init>", "(ILjava/lang/String;Z)V");
            mids$[mid_compare_d8d154b9] = env->getMethodID(cls, "compare", "(II)I");
            mids$[mid_compareBottom_39c7bd23] = env->getMethodID(cls, "compareBottom", "(I)I");
            mids$[mid_compareTop_39c7bd23] = env->getMethodID(cls, "compareTop", "(I)I");
            mids$[mid_compareValues_594e5ef9] = env->getMethodID(cls, "compareValues", "(Lorg/apache/lucene/util/BytesRef;Lorg/apache/lucene/util/BytesRef;)I");
            mids$[mid_copy_d8d154a6] = env->getMethodID(cls, "copy", "(II)V");
            mids$[mid_setBottom_39c7bd3c] = env->getMethodID(cls, "setBottom", "(I)V");
            mids$[mid_setNextReader_6329aed7] = env->getMethodID(cls, "setNextReader", "(Lorg/apache/lucene/index/AtomicReaderContext;)Lorg/apache/lucene/search/FieldComparator;");
            mids$[mid_setTopValue_7bc03dc4] = env->getMethodID(cls, "setTopValue", "(Lorg/apache/lucene/util/BytesRef;)V");
            mids$[mid_value_b57e9c3f] = env->getMethodID(cls, "value", "(I)Lorg/apache/lucene/util/BytesRef;");
            mids$[mid_getSortedDocValues_59a5c92f] = env->getMethodID(cls, "getSortedDocValues", "(Lorg/apache/lucene/index/AtomicReaderContext;Ljava/lang/String;)Lorg/apache/lucene/index/SortedDocValues;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        FieldComparator$TermOrdValComparator::FieldComparator$TermOrdValComparator(jint a0, const ::java::lang::String & a1) : ::org::apache::lucene::search::FieldComparator(env->newObject(initializeClass, &mids$, mid_init$_d40a4f2e, a0, a1.this$)) {}

        FieldComparator$TermOrdValComparator::FieldComparator$TermOrdValComparator(jint a0, const ::java::lang::String & a1, jboolean a2) : ::org::apache::lucene::search::FieldComparator(env->newObject(initializeClass, &mids$, mid_init$_cab89017, a0, a1.this$, a2)) {}

        jint FieldComparator$TermOrdValComparator::compare(jint a0, jint a1) const
        {
          return env->callIntMethod(this$, mids$[mid_compare_d8d154b9], a0, a1);
        }

        jint FieldComparator$TermOrdValComparator::compareBottom(jint a0) const
        {
          return env->callIntMethod(this$, mids$[mid_compareBottom_39c7bd23], a0);
        }

        jint FieldComparator$TermOrdValComparator::compareTop(jint a0) const
        {
          return env->callIntMethod(this$, mids$[mid_compareTop_39c7bd23], a0);
        }

        jint FieldComparator$TermOrdValComparator::compareValues(const ::org::apache::lucene::util::BytesRef & a0, const ::org::apache::lucene::util::BytesRef & a1) const
        {
          return env->callIntMethod(this$, mids$[mid_compareValues_594e5ef9], a0.this$, a1.this$);
        }

        void FieldComparator$TermOrdValComparator::copy(jint a0, jint a1) const
        {
          env->callVoidMethod(this$, mids$[mid_copy_d8d154a6], a0, a1);
        }

        void FieldComparator$TermOrdValComparator::setBottom(jint a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setBottom_39c7bd3c], a0);
        }

        ::org::apache::lucene::search::FieldComparator FieldComparator$TermOrdValComparator::setNextReader(const ::org::apache::lucene::index::AtomicReaderContext & a0) const
        {
          return ::org::apache::lucene::search::FieldComparator(env->callObjectMethod(this$, mids$[mid_setNextReader_6329aed7], a0.this$));
        }

        void FieldComparator$TermOrdValComparator::setTopValue(const ::org::apache::lucene::util::BytesRef & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setTopValue_7bc03dc4], a0.this$);
        }

        ::org::apache::lucene::util::BytesRef FieldComparator$TermOrdValComparator::value(jint a0) const
        {
          return ::org::apache::lucene::util::BytesRef(env->callObjectMethod(this$, mids$[mid_value_b57e9c3f], a0));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_FieldComparator$TermOrdValComparator_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FieldComparator$TermOrdValComparator_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FieldComparator$TermOrdValComparator_of_(t_FieldComparator$TermOrdValComparator *self, PyObject *args);
        static int t_FieldComparator$TermOrdValComparator_init_(t_FieldComparator$TermOrdValComparator *self, PyObject *args, PyObject *kwds);
        static PyObject *t_FieldComparator$TermOrdValComparator_compare(t_FieldComparator$TermOrdValComparator *self, PyObject *args);
        static PyObject *t_FieldComparator$TermOrdValComparator_compareBottom(t_FieldComparator$TermOrdValComparator *self, PyObject *args);
        static PyObject *t_FieldComparator$TermOrdValComparator_compareTop(t_FieldComparator$TermOrdValComparator *self, PyObject *args);
        static PyObject *t_FieldComparator$TermOrdValComparator_compareValues(t_FieldComparator$TermOrdValComparator *self, PyObject *args);
        static PyObject *t_FieldComparator$TermOrdValComparator_copy(t_FieldComparator$TermOrdValComparator *self, PyObject *args);
        static PyObject *t_FieldComparator$TermOrdValComparator_setBottom(t_FieldComparator$TermOrdValComparator *self, PyObject *args);
        static PyObject *t_FieldComparator$TermOrdValComparator_setNextReader(t_FieldComparator$TermOrdValComparator *self, PyObject *args);
        static PyObject *t_FieldComparator$TermOrdValComparator_setTopValue(t_FieldComparator$TermOrdValComparator *self, PyObject *args);
        static PyObject *t_FieldComparator$TermOrdValComparator_value(t_FieldComparator$TermOrdValComparator *self, PyObject *args);
        static int t_FieldComparator$TermOrdValComparator_set__bottom(t_FieldComparator$TermOrdValComparator *self, PyObject *arg, void *data);
        static int t_FieldComparator$TermOrdValComparator_set__nextReader(t_FieldComparator$TermOrdValComparator *self, PyObject *arg, void *data);
        static int t_FieldComparator$TermOrdValComparator_set__topValue(t_FieldComparator$TermOrdValComparator *self, PyObject *arg, void *data);
        static PyObject *t_FieldComparator$TermOrdValComparator_get__parameters_(t_FieldComparator$TermOrdValComparator *self, void *data);
        static PyGetSetDef t_FieldComparator$TermOrdValComparator__fields_[] = {
          DECLARE_SET_FIELD(t_FieldComparator$TermOrdValComparator, bottom),
          DECLARE_SET_FIELD(t_FieldComparator$TermOrdValComparator, nextReader),
          DECLARE_SET_FIELD(t_FieldComparator$TermOrdValComparator, topValue),
          DECLARE_GET_FIELD(t_FieldComparator$TermOrdValComparator, parameters_),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_FieldComparator$TermOrdValComparator__methods_[] = {
          DECLARE_METHOD(t_FieldComparator$TermOrdValComparator, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FieldComparator$TermOrdValComparator, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FieldComparator$TermOrdValComparator, of_, METH_VARARGS),
          DECLARE_METHOD(t_FieldComparator$TermOrdValComparator, compare, METH_VARARGS),
          DECLARE_METHOD(t_FieldComparator$TermOrdValComparator, compareBottom, METH_VARARGS),
          DECLARE_METHOD(t_FieldComparator$TermOrdValComparator, compareTop, METH_VARARGS),
          DECLARE_METHOD(t_FieldComparator$TermOrdValComparator, compareValues, METH_VARARGS),
          DECLARE_METHOD(t_FieldComparator$TermOrdValComparator, copy, METH_VARARGS),
          DECLARE_METHOD(t_FieldComparator$TermOrdValComparator, setBottom, METH_VARARGS),
          DECLARE_METHOD(t_FieldComparator$TermOrdValComparator, setNextReader, METH_VARARGS),
          DECLARE_METHOD(t_FieldComparator$TermOrdValComparator, setTopValue, METH_VARARGS),
          DECLARE_METHOD(t_FieldComparator$TermOrdValComparator, value, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(FieldComparator$TermOrdValComparator, t_FieldComparator$TermOrdValComparator, ::org::apache::lucene::search::FieldComparator, FieldComparator$TermOrdValComparator, t_FieldComparator$TermOrdValComparator_init_, 0, 0, t_FieldComparator$TermOrdValComparator__fields_, 0, 0);
        PyObject *t_FieldComparator$TermOrdValComparator::wrap_Object(const FieldComparator$TermOrdValComparator& object, PyTypeObject *p0)
        {
          PyObject *obj = t_FieldComparator$TermOrdValComparator::wrap_Object(object);
          if (obj != NULL && obj != Py_None)
          {
            t_FieldComparator$TermOrdValComparator *self = (t_FieldComparator$TermOrdValComparator *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        PyObject *t_FieldComparator$TermOrdValComparator::wrap_jobject(const jobject& object, PyTypeObject *p0)
        {
          PyObject *obj = t_FieldComparator$TermOrdValComparator::wrap_jobject(object);
          if (obj != NULL && obj != Py_None)
          {
            t_FieldComparator$TermOrdValComparator *self = (t_FieldComparator$TermOrdValComparator *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        void t_FieldComparator$TermOrdValComparator::install(PyObject *module)
        {
          installType(&PY_TYPE(FieldComparator$TermOrdValComparator), module, "FieldComparator$TermOrdValComparator", 0);
        }

        void t_FieldComparator$TermOrdValComparator::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(FieldComparator$TermOrdValComparator).tp_dict, "class_", make_descriptor(FieldComparator$TermOrdValComparator::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(FieldComparator$TermOrdValComparator).tp_dict, "wrapfn_", make_descriptor(t_FieldComparator$TermOrdValComparator::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(FieldComparator$TermOrdValComparator).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_FieldComparator$TermOrdValComparator_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, FieldComparator$TermOrdValComparator::initializeClass, 1)))
            return NULL;
          return t_FieldComparator$TermOrdValComparator::wrap_Object(FieldComparator$TermOrdValComparator(((t_FieldComparator$TermOrdValComparator *) arg)->object.this$));
        }
        static PyObject *t_FieldComparator$TermOrdValComparator_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, FieldComparator$TermOrdValComparator::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_FieldComparator$TermOrdValComparator_of_(t_FieldComparator$TermOrdValComparator *self, PyObject *args)
        {
          if (!parseArg(args, "T", 1, &(self->parameters)))
            Py_RETURN_SELF;
          return PyErr_SetArgsError((PyObject *) self, "of_", args);
        }

        static int t_FieldComparator$TermOrdValComparator_init_(t_FieldComparator$TermOrdValComparator *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 2:
            {
              jint a0;
              ::java::lang::String a1((jobject) NULL);
              FieldComparator$TermOrdValComparator object((jobject) NULL);

              if (!parseArgs(args, "Is", &a0, &a1))
              {
                INT_CALL(object = FieldComparator$TermOrdValComparator(a0, a1));
                self->object = object;
                self->parameters[0] = &::org::apache::lucene::util::PY_TYPE(BytesRef);
                break;
              }
            }
            goto err;
           case 3:
            {
              jint a0;
              ::java::lang::String a1((jobject) NULL);
              jboolean a2;
              FieldComparator$TermOrdValComparator object((jobject) NULL);

              if (!parseArgs(args, "IsZ", &a0, &a1, &a2))
              {
                INT_CALL(object = FieldComparator$TermOrdValComparator(a0, a1, a2));
                self->object = object;
                self->parameters[0] = &::org::apache::lucene::util::PY_TYPE(BytesRef);
                break;
              }
            }
           default:
           err:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_FieldComparator$TermOrdValComparator_compare(t_FieldComparator$TermOrdValComparator *self, PyObject *args)
        {
          jint a0;
          jint a1;
          jint result;

          if (!parseArgs(args, "II", &a0, &a1))
          {
            OBJ_CALL(result = self->object.compare(a0, a1));
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(FieldComparator$TermOrdValComparator), (PyObject *) self, "compare", args, 2);
        }

        static PyObject *t_FieldComparator$TermOrdValComparator_compareBottom(t_FieldComparator$TermOrdValComparator *self, PyObject *args)
        {
          jint a0;
          jint result;

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(result = self->object.compareBottom(a0));
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(FieldComparator$TermOrdValComparator), (PyObject *) self, "compareBottom", args, 2);
        }

        static PyObject *t_FieldComparator$TermOrdValComparator_compareTop(t_FieldComparator$TermOrdValComparator *self, PyObject *args)
        {
          jint a0;
          jint result;

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(result = self->object.compareTop(a0));
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(FieldComparator$TermOrdValComparator), (PyObject *) self, "compareTop", args, 2);
        }

        static PyObject *t_FieldComparator$TermOrdValComparator_compareValues(t_FieldComparator$TermOrdValComparator *self, PyObject *args)
        {
          ::org::apache::lucene::util::BytesRef a0((jobject) NULL);
          ::org::apache::lucene::util::BytesRef a1((jobject) NULL);
          jint result;

          if (!parseArgs(args, "kk", ::org::apache::lucene::util::BytesRef::initializeClass, ::org::apache::lucene::util::BytesRef::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = self->object.compareValues(a0, a1));
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(FieldComparator$TermOrdValComparator), (PyObject *) self, "compareValues", args, 2);
        }

        static PyObject *t_FieldComparator$TermOrdValComparator_copy(t_FieldComparator$TermOrdValComparator *self, PyObject *args)
        {
          jint a0;
          jint a1;

          if (!parseArgs(args, "II", &a0, &a1))
          {
            OBJ_CALL(self->object.copy(a0, a1));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(FieldComparator$TermOrdValComparator), (PyObject *) self, "copy", args, 2);
        }

        static PyObject *t_FieldComparator$TermOrdValComparator_setBottom(t_FieldComparator$TermOrdValComparator *self, PyObject *args)
        {
          jint a0;

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(self->object.setBottom(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(FieldComparator$TermOrdValComparator), (PyObject *) self, "setBottom", args, 2);
        }

        static PyObject *t_FieldComparator$TermOrdValComparator_setNextReader(t_FieldComparator$TermOrdValComparator *self, PyObject *args)
        {
          ::org::apache::lucene::index::AtomicReaderContext a0((jobject) NULL);
          ::org::apache::lucene::search::FieldComparator result((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.setNextReader(a0));
            return ::org::apache::lucene::search::t_FieldComparator::wrap_Object(result, &::org::apache::lucene::util::PY_TYPE(BytesRef));
          }

          return callSuper(&PY_TYPE(FieldComparator$TermOrdValComparator), (PyObject *) self, "setNextReader", args, 2);
        }

        static PyObject *t_FieldComparator$TermOrdValComparator_setTopValue(t_FieldComparator$TermOrdValComparator *self, PyObject *args)
        {
          ::org::apache::lucene::util::BytesRef a0((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::util::BytesRef::initializeClass, &a0))
          {
            OBJ_CALL(self->object.setTopValue(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(FieldComparator$TermOrdValComparator), (PyObject *) self, "setTopValue", args, 2);
        }

        static PyObject *t_FieldComparator$TermOrdValComparator_value(t_FieldComparator$TermOrdValComparator *self, PyObject *args)
        {
          jint a0;
          ::org::apache::lucene::util::BytesRef result((jobject) NULL);

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(result = self->object.value(a0));
            return ::org::apache::lucene::util::t_BytesRef::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(FieldComparator$TermOrdValComparator), (PyObject *) self, "value", args, 2);
        }
        static PyObject *t_FieldComparator$TermOrdValComparator_get__parameters_(t_FieldComparator$TermOrdValComparator *self, void *data)
        {
          return typeParameters(self->parameters, sizeof(self->parameters));
        }

        static int t_FieldComparator$TermOrdValComparator_set__bottom(t_FieldComparator$TermOrdValComparator *self, PyObject *arg, void *data)
        {
          {
            jint value;
            if (!parseArg(arg, "I", &value))
            {
              INT_CALL(self->object.setBottom(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "bottom", arg);
          return -1;
        }

        static int t_FieldComparator$TermOrdValComparator_set__nextReader(t_FieldComparator$TermOrdValComparator *self, PyObject *arg, void *data)
        {
          {
            ::org::apache::lucene::index::AtomicReaderContext value((jobject) NULL);
            if (!parseArg(arg, "k", ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &value))
            {
              INT_CALL(self->object.setNextReader(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "nextReader", arg);
          return -1;
        }

        static int t_FieldComparator$TermOrdValComparator_set__topValue(t_FieldComparator$TermOrdValComparator *self, PyObject *arg, void *data)
        {
          {
            ::org::apache::lucene::util::BytesRef value((jobject) NULL);
            if (!parseArg(arg, "k", ::org::apache::lucene::util::BytesRef::initializeClass, &value))
            {
              INT_CALL(self->object.setTopValue(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "topValue", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/ext/ParserExtension.h"
#include "org/apache/lucene/queryparser/classic/ParseException.h"
#include "org/apache/lucene/queryparser/ext/ExtensionQuery.h"
#include "org/apache/lucene/search/Query.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace ext {

          ::java::lang::Class *ParserExtension::class$ = NULL;
          jmethodID *ParserExtension::mids$ = NULL;
          bool ParserExtension::live$ = false;

          jclass ParserExtension::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/ext/ParserExtension");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_parse_d185629b] = env->getMethodID(cls, "parse", "(Lorg/apache/lucene/queryparser/ext/ExtensionQuery;)Lorg/apache/lucene/search/Query;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ParserExtension::ParserExtension() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          ::org::apache::lucene::search::Query ParserExtension::parse(const ::org::apache::lucene::queryparser::ext::ExtensionQuery & a0) const
          {
            return ::org::apache::lucene::search::Query(env->callObjectMethod(this$, mids$[mid_parse_d185629b], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace ext {
          static PyObject *t_ParserExtension_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_ParserExtension_instance_(PyTypeObject *type, PyObject *arg);
          static int t_ParserExtension_init_(t_ParserExtension *self, PyObject *args, PyObject *kwds);
          static PyObject *t_ParserExtension_parse(t_ParserExtension *self, PyObject *arg);

          static PyMethodDef t_ParserExtension__methods_[] = {
            DECLARE_METHOD(t_ParserExtension, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ParserExtension, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ParserExtension, parse, METH_O),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(ParserExtension, t_ParserExtension, ::java::lang::Object, ParserExtension, t_ParserExtension_init_, 0, 0, 0, 0, 0);

          void t_ParserExtension::install(PyObject *module)
          {
            installType(&PY_TYPE(ParserExtension), module, "ParserExtension", 0);
          }

          void t_ParserExtension::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(ParserExtension).tp_dict, "class_", make_descriptor(ParserExtension::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(ParserExtension).tp_dict, "wrapfn_", make_descriptor(t_ParserExtension::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(ParserExtension).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_ParserExtension_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, ParserExtension::initializeClass, 1)))
              return NULL;
            return t_ParserExtension::wrap_Object(ParserExtension(((t_ParserExtension *) arg)->object.this$));
          }
          static PyObject *t_ParserExtension_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, ParserExtension::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_ParserExtension_init_(t_ParserExtension *self, PyObject *args, PyObject *kwds)
          {
            ParserExtension object((jobject) NULL);

            INT_CALL(object = ParserExtension());
            self->object = object;

            return 0;
          }

          static PyObject *t_ParserExtension_parse(t_ParserExtension *self, PyObject *arg)
          {
            ::org::apache::lucene::queryparser::ext::ExtensionQuery a0((jobject) NULL);
            ::org::apache::lucene::search::Query result((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::queryparser::ext::ExtensionQuery::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.parse(a0));
              return ::org::apache::lucene::search::t_Query::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "parse", arg);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/xml/FilterBuilderFactory.h"
#include "org/apache/lucene/queryparser/xml/FilterBuilder.h"
#include "java/lang/String.h"
#include "org/apache/lucene/search/Filter.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace xml {

          ::java::lang::Class *FilterBuilderFactory::class$ = NULL;
          jmethodID *FilterBuilderFactory::mids$ = NULL;
          bool FilterBuilderFactory::live$ = false;

          jclass FilterBuilderFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/xml/FilterBuilderFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_addBuilder_a961e918] = env->getMethodID(cls, "addBuilder", "(Ljava/lang/String;Lorg/apache/lucene/queryparser/xml/FilterBuilder;)V");
              mids$[mid_getFilterBuilder_de450325] = env->getMethodID(cls, "getFilterBuilder", "(Ljava/lang/String;)Lorg/apache/lucene/queryparser/xml/FilterBuilder;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          FilterBuilderFactory::FilterBuilderFactory() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          void FilterBuilderFactory::addBuilder(const ::java::lang::String & a0, const ::org::apache::lucene::queryparser::xml::FilterBuilder & a1) const
          {
            env->callVoidMethod(this$, mids$[mid_addBuilder_a961e918], a0.this$, a1.this$);
          }

          ::org::apache::lucene::queryparser::xml::FilterBuilder FilterBuilderFactory::getFilterBuilder(const ::java::lang::String & a0) const
          {
            return ::org::apache::lucene::queryparser::xml::FilterBuilder(env->callObjectMethod(this$, mids$[mid_getFilterBuilder_de450325], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace xml {
          static PyObject *t_FilterBuilderFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_FilterBuilderFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_FilterBuilderFactory_init_(t_FilterBuilderFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_FilterBuilderFactory_addBuilder(t_FilterBuilderFactory *self, PyObject *args);
          static PyObject *t_FilterBuilderFactory_getFilterBuilder(t_FilterBuilderFactory *self, PyObject *arg);

          static PyMethodDef t_FilterBuilderFactory__methods_[] = {
            DECLARE_METHOD(t_FilterBuilderFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FilterBuilderFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FilterBuilderFactory, addBuilder, METH_VARARGS),
            DECLARE_METHOD(t_FilterBuilderFactory, getFilterBuilder, METH_O),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(FilterBuilderFactory, t_FilterBuilderFactory, ::java::lang::Object, FilterBuilderFactory, t_FilterBuilderFactory_init_, 0, 0, 0, 0, 0);

          void t_FilterBuilderFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(FilterBuilderFactory), module, "FilterBuilderFactory", 0);
          }

          void t_FilterBuilderFactory::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(FilterBuilderFactory).tp_dict, "class_", make_descriptor(FilterBuilderFactory::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(FilterBuilderFactory).tp_dict, "wrapfn_", make_descriptor(t_FilterBuilderFactory::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(FilterBuilderFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_FilterBuilderFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, FilterBuilderFactory::initializeClass, 1)))
              return NULL;
            return t_FilterBuilderFactory::wrap_Object(FilterBuilderFactory(((t_FilterBuilderFactory *) arg)->object.this$));
          }
          static PyObject *t_FilterBuilderFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, FilterBuilderFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_FilterBuilderFactory_init_(t_FilterBuilderFactory *self, PyObject *args, PyObject *kwds)
          {
            FilterBuilderFactory object((jobject) NULL);

            INT_CALL(object = FilterBuilderFactory());
            self->object = object;

            return 0;
          }

          static PyObject *t_FilterBuilderFactory_addBuilder(t_FilterBuilderFactory *self, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            ::org::apache::lucene::queryparser::xml::FilterBuilder a1((jobject) NULL);

            if (!parseArgs(args, "sk", ::org::apache::lucene::queryparser::xml::FilterBuilder::initializeClass, &a0, &a1))
            {
              OBJ_CALL(self->object.addBuilder(a0, a1));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "addBuilder", args);
            return NULL;
          }

          static PyObject *t_FilterBuilderFactory_getFilterBuilder(t_FilterBuilderFactory *self, PyObject *arg)
          {
            ::java::lang::String a0((jobject) NULL);
            ::org::apache::lucene::queryparser::xml::FilterBuilder result((jobject) NULL);

            if (!parseArg(arg, "s", &a0))
            {
              OBJ_CALL(result = self->object.getFilterBuilder(a0));
              return ::org::apache::lucene::queryparser::xml::t_FilterBuilder::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "getFilterBuilder", arg);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/spell/JaroWinklerDistance.h"
#include "java/lang/String.h"
#include "org/apache/lucene/search/spell/StringDistance.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace spell {

          ::java::lang::Class *JaroWinklerDistance::class$ = NULL;
          jmethodID *JaroWinklerDistance::mids$ = NULL;
          bool JaroWinklerDistance::live$ = false;

          jclass JaroWinklerDistance::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/spell/JaroWinklerDistance");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
              mids$[mid_getDistance_4a264752] = env->getMethodID(cls, "getDistance", "(Ljava/lang/String;Ljava/lang/String;)F");
              mids$[mid_getThreshold_54c6a176] = env->getMethodID(cls, "getThreshold", "()F");
              mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
              mids$[mid_setThreshold_06298cab] = env->getMethodID(cls, "setThreshold", "(F)V");
              mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          JaroWinklerDistance::JaroWinklerDistance() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          jboolean JaroWinklerDistance::equals(const ::java::lang::Object & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
          }

          jfloat JaroWinklerDistance::getDistance(const ::java::lang::String & a0, const ::java::lang::String & a1) const
          {
            return env->callFloatMethod(this$, mids$[mid_getDistance_4a264752], a0.this$, a1.this$);
          }

          jfloat JaroWinklerDistance::getThreshold() const
          {
            return env->callFloatMethod(this$, mids$[mid_getThreshold_54c6a176]);
          }

          jint JaroWinklerDistance::hashCode() const
          {
            return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
          }

          void JaroWinklerDistance::setThreshold(jfloat a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setThreshold_06298cab], a0);
          }

          ::java::lang::String JaroWinklerDistance::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace spell {
          static PyObject *t_JaroWinklerDistance_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_JaroWinklerDistance_instance_(PyTypeObject *type, PyObject *arg);
          static int t_JaroWinklerDistance_init_(t_JaroWinklerDistance *self, PyObject *args, PyObject *kwds);
          static PyObject *t_JaroWinklerDistance_equals(t_JaroWinklerDistance *self, PyObject *args);
          static PyObject *t_JaroWinklerDistance_getDistance(t_JaroWinklerDistance *self, PyObject *args);
          static PyObject *t_JaroWinklerDistance_getThreshold(t_JaroWinklerDistance *self);
          static PyObject *t_JaroWinklerDistance_hashCode(t_JaroWinklerDistance *self, PyObject *args);
          static PyObject *t_JaroWinklerDistance_setThreshold(t_JaroWinklerDistance *self, PyObject *arg);
          static PyObject *t_JaroWinklerDistance_toString(t_JaroWinklerDistance *self, PyObject *args);
          static PyObject *t_JaroWinklerDistance_get__threshold(t_JaroWinklerDistance *self, void *data);
          static int t_JaroWinklerDistance_set__threshold(t_JaroWinklerDistance *self, PyObject *arg, void *data);
          static PyGetSetDef t_JaroWinklerDistance__fields_[] = {
            DECLARE_GETSET_FIELD(t_JaroWinklerDistance, threshold),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_JaroWinklerDistance__methods_[] = {
            DECLARE_METHOD(t_JaroWinklerDistance, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_JaroWinklerDistance, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_JaroWinklerDistance, equals, METH_VARARGS),
            DECLARE_METHOD(t_JaroWinklerDistance, getDistance, METH_VARARGS),
            DECLARE_METHOD(t_JaroWinklerDistance, getThreshold, METH_NOARGS),
            DECLARE_METHOD(t_JaroWinklerDistance, hashCode, METH_VARARGS),
            DECLARE_METHOD(t_JaroWinklerDistance, setThreshold, METH_O),
            DECLARE_METHOD(t_JaroWinklerDistance, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(JaroWinklerDistance, t_JaroWinklerDistance, ::java::lang::Object, JaroWinklerDistance, t_JaroWinklerDistance_init_, 0, 0, t_JaroWinklerDistance__fields_, 0, 0);

          void t_JaroWinklerDistance::install(PyObject *module)
          {
            installType(&PY_TYPE(JaroWinklerDistance), module, "JaroWinklerDistance", 0);
          }

          void t_JaroWinklerDistance::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(JaroWinklerDistance).tp_dict, "class_", make_descriptor(JaroWinklerDistance::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(JaroWinklerDistance).tp_dict, "wrapfn_", make_descriptor(t_JaroWinklerDistance::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(JaroWinklerDistance).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_JaroWinklerDistance_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, JaroWinklerDistance::initializeClass, 1)))
              return NULL;
            return t_JaroWinklerDistance::wrap_Object(JaroWinklerDistance(((t_JaroWinklerDistance *) arg)->object.this$));
          }
          static PyObject *t_JaroWinklerDistance_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, JaroWinklerDistance::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_JaroWinklerDistance_init_(t_JaroWinklerDistance *self, PyObject *args, PyObject *kwds)
          {
            JaroWinklerDistance object((jobject) NULL);

            INT_CALL(object = JaroWinklerDistance());
            self->object = object;

            return 0;
          }

          static PyObject *t_JaroWinklerDistance_equals(t_JaroWinklerDistance *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            jboolean result;

            if (!parseArgs(args, "o", &a0))
            {
              OBJ_CALL(result = self->object.equals(a0));
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(JaroWinklerDistance), (PyObject *) self, "equals", args, 2);
          }

          static PyObject *t_JaroWinklerDistance_getDistance(t_JaroWinklerDistance *self, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            ::java::lang::String a1((jobject) NULL);
            jfloat result;

            if (!parseArgs(args, "ss", &a0, &a1))
            {
              OBJ_CALL(result = self->object.getDistance(a0, a1));
              return PyFloat_FromDouble((double) result);
            }

            PyErr_SetArgsError((PyObject *) self, "getDistance", args);
            return NULL;
          }

          static PyObject *t_JaroWinklerDistance_getThreshold(t_JaroWinklerDistance *self)
          {
            jfloat result;
            OBJ_CALL(result = self->object.getThreshold());
            return PyFloat_FromDouble((double) result);
          }

          static PyObject *t_JaroWinklerDistance_hashCode(t_JaroWinklerDistance *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.hashCode());
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(JaroWinklerDistance), (PyObject *) self, "hashCode", args, 2);
          }

          static PyObject *t_JaroWinklerDistance_setThreshold(t_JaroWinklerDistance *self, PyObject *arg)
          {
            jfloat a0;

            if (!parseArg(arg, "F", &a0))
            {
              OBJ_CALL(self->object.setThreshold(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setThreshold", arg);
            return NULL;
          }

          static PyObject *t_JaroWinklerDistance_toString(t_JaroWinklerDistance *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(&PY_TYPE(JaroWinklerDistance), (PyObject *) self, "toString", args, 2);
          }

          static PyObject *t_JaroWinklerDistance_get__threshold(t_JaroWinklerDistance *self, void *data)
          {
            jfloat value;
            OBJ_CALL(value = self->object.getThreshold());
            return PyFloat_FromDouble((double) value);
          }
          static int t_JaroWinklerDistance_set__threshold(t_JaroWinklerDistance *self, PyObject *arg, void *data)
          {
            {
              jfloat value;
              if (!parseArg(arg, "F", &value))
              {
                INT_CALL(self->object.setThreshold(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "threshold", arg);
            return -1;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/SortField.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "org/apache/lucene/search/FieldCache$Parser.h"
#include "org/apache/lucene/search/FieldComparatorSource.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/search/FieldComparator.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/search/SortField$Type.h"
#include "java/util/Comparator.h"
#include "java/lang/String.h"
#include "org/apache/lucene/search/IndexSearcher.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *SortField::class$ = NULL;
        jmethodID *SortField::mids$ = NULL;
        jfieldID *SortField::fids$ = NULL;
        bool SortField::live$ = false;
        SortField *SortField::FIELD_DOC = NULL;
        SortField *SortField::FIELD_SCORE = NULL;
        ::java::lang::Object *SortField::STRING_FIRST = NULL;
        ::java::lang::Object *SortField::STRING_LAST = NULL;

        jclass SortField::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/SortField");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_a9ca3e5c] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Lorg/apache/lucene/search/FieldComparatorSource;)V");
            mids$[mid_init$_b65c884e] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Lorg/apache/lucene/search/SortField$Type;)V");
            mids$[mid_init$_37ee6f9c] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Lorg/apache/lucene/search/FieldCache$Parser;)V");
            mids$[mid_init$_3e864231] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Lorg/apache/lucene/search/FieldComparatorSource;Z)V");
            mids$[mid_init$_082cc791] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Lorg/apache/lucene/search/FieldCache$Parser;Z)V");
            mids$[mid_init$_28dc1d67] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Lorg/apache/lucene/search/SortField$Type;Z)V");
            mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
            mids$[mid_getBytesComparator_5a7ff2fc] = env->getMethodID(cls, "getBytesComparator", "()Ljava/util/Comparator;");
            mids$[mid_getComparator_f38637f4] = env->getMethodID(cls, "getComparator", "(II)Lorg/apache/lucene/search/FieldComparator;");
            mids$[mid_getComparatorSource_3ca10de3] = env->getMethodID(cls, "getComparatorSource", "()Lorg/apache/lucene/search/FieldComparatorSource;");
            mids$[mid_getField_14c7b5c5] = env->getMethodID(cls, "getField", "()Ljava/lang/String;");
            mids$[mid_getParser_6ee4ab67] = env->getMethodID(cls, "getParser", "()Lorg/apache/lucene/search/FieldCache$Parser;");
            mids$[mid_getReverse_54c6a16a] = env->getMethodID(cls, "getReverse", "()Z");
            mids$[mid_getType_e5057cd5] = env->getMethodID(cls, "getType", "()Lorg/apache/lucene/search/SortField$Type;");
            mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
            mids$[mid_needsScores_54c6a16a] = env->getMethodID(cls, "needsScores", "()Z");
            mids$[mid_rewrite_da4dd7ac] = env->getMethodID(cls, "rewrite", "(Lorg/apache/lucene/search/IndexSearcher;)Lorg/apache/lucene/search/SortField;");
            mids$[mid_setBytesComparator_6ffdd545] = env->getMethodID(cls, "setBytesComparator", "(Ljava/util/Comparator;)V");
            mids$[mid_setMissingValue_290588ee] = env->getMethodID(cls, "setMissingValue", "(Ljava/lang/Object;)V");
            mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

            fids$ = new jfieldID[max_fid];
            fids$[fid_missingValue] = env->getFieldID(cls, "missingValue", "Ljava/lang/Object;");

            class$ = (::java::lang::Class *) new JObject(cls);
            cls = (jclass) class$->this$;

            FIELD_DOC = new SortField(env->getStaticObjectField(cls, "FIELD_DOC", "Lorg/apache/lucene/search/SortField;"));
            FIELD_SCORE = new SortField(env->getStaticObjectField(cls, "FIELD_SCORE", "Lorg/apache/lucene/search/SortField;"));
            STRING_FIRST = new ::java::lang::Object(env->getStaticObjectField(cls, "STRING_FIRST", "Ljava/lang/Object;"));
            STRING_LAST = new ::java::lang::Object(env->getStaticObjectField(cls, "STRING_LAST", "Ljava/lang/Object;"));
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        SortField::SortField(const ::java::lang::String & a0, const ::org::apache::lucene::search::FieldComparatorSource & a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_a9ca3e5c, a0.this$, a1.this$)) {}

        SortField::SortField(const ::java::lang::String & a0, const ::org::apache::lucene::search::SortField$Type & a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_b65c884e, a0.this$, a1.this$)) {}

        SortField::SortField(const ::java::lang::String & a0, const ::org::apache::lucene::search::FieldCache$Parser & a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_37ee6f9c, a0.this$, a1.this$)) {}

        SortField::SortField(const ::java::lang::String & a0, const ::org::apache::lucene::search::FieldComparatorSource & a1, jboolean a2) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_3e864231, a0.this$, a1.this$, a2)) {}

        SortField::SortField(const ::java::lang::String & a0, const ::org::apache::lucene::search::FieldCache$Parser & a1, jboolean a2) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_082cc791, a0.this$, a1.this$, a2)) {}

        SortField::SortField(const ::java::lang::String & a0, const ::org::apache::lucene::search::SortField$Type & a1, jboolean a2) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_28dc1d67, a0.this$, a1.this$, a2)) {}

        jboolean SortField::equals(const ::java::lang::Object & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
        }

        ::java::util::Comparator SortField::getBytesComparator() const
        {
          return ::java::util::Comparator(env->callObjectMethod(this$, mids$[mid_getBytesComparator_5a7ff2fc]));
        }

        ::org::apache::lucene::search::FieldComparator SortField::getComparator(jint a0, jint a1) const
        {
          return ::org::apache::lucene::search::FieldComparator(env->callObjectMethod(this$, mids$[mid_getComparator_f38637f4], a0, a1));
        }

        ::org::apache::lucene::search::FieldComparatorSource SortField::getComparatorSource() const
        {
          return ::org::apache::lucene::search::FieldComparatorSource(env->callObjectMethod(this$, mids$[mid_getComparatorSource_3ca10de3]));
        }

        ::java::lang::String SortField::getField() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getField_14c7b5c5]));
        }

        ::org::apache::lucene::search::FieldCache$Parser SortField::getParser() const
        {
          return ::org::apache::lucene::search::FieldCache$Parser(env->callObjectMethod(this$, mids$[mid_getParser_6ee4ab67]));
        }

        jboolean SortField::getReverse() const
        {
          return env->callBooleanMethod(this$, mids$[mid_getReverse_54c6a16a]);
        }

        ::org::apache::lucene::search::SortField$Type SortField::getType() const
        {
          return ::org::apache::lucene::search::SortField$Type(env->callObjectMethod(this$, mids$[mid_getType_e5057cd5]));
        }

        jint SortField::hashCode() const
        {
          return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
        }

        jboolean SortField::needsScores() const
        {
          return env->callBooleanMethod(this$, mids$[mid_needsScores_54c6a16a]);
        }

        SortField SortField::rewrite(const ::org::apache::lucene::search::IndexSearcher & a0) const
        {
          return SortField(env->callObjectMethod(this$, mids$[mid_rewrite_da4dd7ac], a0.this$));
        }

        void SortField::setBytesComparator(const ::java::util::Comparator & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setBytesComparator_6ffdd545], a0.this$);
        }

        void SortField::setMissingValue(const ::java::lang::Object & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setMissingValue_290588ee], a0.this$);
        }

        ::java::lang::String SortField::toString() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
        }

        ::java::lang::Object SortField::_get_missingValue() const
        {
          return ::java::lang::Object(env->getObjectField(this$, fids$[fid_missingValue]));
        }

        void SortField::_set_missingValue(const ::java::lang::Object & a0) const
        {
          env->setObjectField(this$, fids$[fid_missingValue], a0.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_SortField_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_SortField_instance_(PyTypeObject *type, PyObject *arg);
        static int t_SortField_init_(t_SortField *self, PyObject *args, PyObject *kwds);
        static PyObject *t_SortField_equals(t_SortField *self, PyObject *args);
        static PyObject *t_SortField_getBytesComparator(t_SortField *self);
        static PyObject *t_SortField_getComparator(t_SortField *self, PyObject *args);
        static PyObject *t_SortField_getComparatorSource(t_SortField *self);
        static PyObject *t_SortField_getField(t_SortField *self);
        static PyObject *t_SortField_getParser(t_SortField *self);
        static PyObject *t_SortField_getReverse(t_SortField *self);
        static PyObject *t_SortField_getType(t_SortField *self);
        static PyObject *t_SortField_hashCode(t_SortField *self, PyObject *args);
        static PyObject *t_SortField_needsScores(t_SortField *self);
        static PyObject *t_SortField_rewrite(t_SortField *self, PyObject *arg);
        static PyObject *t_SortField_setBytesComparator(t_SortField *self, PyObject *arg);
        static PyObject *t_SortField_setMissingValue(t_SortField *self, PyObject *arg);
        static PyObject *t_SortField_toString(t_SortField *self, PyObject *args);

        static PyObject *t_SortField_get__bytesComparator(t_SortField *self, void *data);
        static int t_SortField_set__bytesComparator(t_SortField *self, PyObject *arg, void *data);
        static PyObject *t_SortField_get__comparatorSource(t_SortField *self, void *data);
        static PyObject *t_SortField_get__field(t_SortField *self, void *data);
        static int t_SortField_set__missingValue(t_SortField *self, PyObject *arg, void *data);
        static PyObject *t_SortField_get__parser(t_SortField *self, void *data);
        static PyObject *t_SortField_get__reverse(t_SortField *self, void *data);
        static PyObject *t_SortField_get__type(t_SortField *self, void *data);
        static PyGetSetDef t_SortField__fields_[] = {
          DECLARE_GETSET_FIELD(t_SortField, bytesComparator),
          DECLARE_GET_FIELD(t_SortField, comparatorSource),
          DECLARE_GET_FIELD(t_SortField, field),
          DECLARE_SET_FIELD(t_SortField, missingValue),
          DECLARE_GET_FIELD(t_SortField, parser),
          DECLARE_GET_FIELD(t_SortField, reverse),
          DECLARE_GET_FIELD(t_SortField, type),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_SortField__methods_[] = {
          DECLARE_METHOD(t_SortField, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SortField, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SortField, equals, METH_VARARGS),
          DECLARE_METHOD(t_SortField, getBytesComparator, METH_NOARGS),
          DECLARE_METHOD(t_SortField, getComparator, METH_VARARGS),
          DECLARE_METHOD(t_SortField, getComparatorSource, METH_NOARGS),
          DECLARE_METHOD(t_SortField, getField, METH_NOARGS),
          DECLARE_METHOD(t_SortField, getParser, METH_NOARGS),
          DECLARE_METHOD(t_SortField, getReverse, METH_NOARGS),
          DECLARE_METHOD(t_SortField, getType, METH_NOARGS),
          DECLARE_METHOD(t_SortField, hashCode, METH_VARARGS),
          DECLARE_METHOD(t_SortField, needsScores, METH_NOARGS),
          DECLARE_METHOD(t_SortField, rewrite, METH_O),
          DECLARE_METHOD(t_SortField, setBytesComparator, METH_O),
          DECLARE_METHOD(t_SortField, setMissingValue, METH_O),
          DECLARE_METHOD(t_SortField, toString, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(SortField, t_SortField, ::java::lang::Object, SortField, t_SortField_init_, 0, 0, t_SortField__fields_, 0, 0);

        void t_SortField::install(PyObject *module)
        {
          installType(&PY_TYPE(SortField), module, "SortField", 0);
          PyDict_SetItemString(PY_TYPE(SortField).tp_dict, "Type", make_descriptor(&PY_TYPE(SortField$Type)));
        }

        void t_SortField::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(SortField).tp_dict, "class_", make_descriptor(SortField::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(SortField).tp_dict, "wrapfn_", make_descriptor(t_SortField::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(SortField).tp_dict, "boxfn_", make_descriptor(boxObject));
          env->getClass(SortField::initializeClass);
          PyDict_SetItemString(PY_TYPE(SortField).tp_dict, "FIELD_DOC", make_descriptor(t_SortField::wrap_Object(*SortField::FIELD_DOC)));
          PyDict_SetItemString(PY_TYPE(SortField).tp_dict, "FIELD_SCORE", make_descriptor(t_SortField::wrap_Object(*SortField::FIELD_SCORE)));
          PyDict_SetItemString(PY_TYPE(SortField).tp_dict, "STRING_FIRST", make_descriptor(::java::lang::t_Object::wrap_Object(*SortField::STRING_FIRST)));
          PyDict_SetItemString(PY_TYPE(SortField).tp_dict, "STRING_LAST", make_descriptor(::java::lang::t_Object::wrap_Object(*SortField::STRING_LAST)));
        }

        static PyObject *t_SortField_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, SortField::initializeClass, 1)))
            return NULL;
          return t_SortField::wrap_Object(SortField(((t_SortField *) arg)->object.this$));
        }
        static PyObject *t_SortField_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, SortField::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_SortField_init_(t_SortField *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 2:
            {
              ::java::lang::String a0((jobject) NULL);
              ::org::apache::lucene::search::FieldComparatorSource a1((jobject) NULL);
              SortField object((jobject) NULL);

              if (!parseArgs(args, "sk", ::org::apache::lucene::search::FieldComparatorSource::initializeClass, &a0, &a1))
              {
                INT_CALL(object = SortField(a0, a1));
                self->object = object;
                break;
              }
            }
            {
              ::java::lang::String a0((jobject) NULL);
              ::org::apache::lucene::search::SortField$Type a1((jobject) NULL);
              PyTypeObject **p1;
              SortField object((jobject) NULL);

              if (!parseArgs(args, "sK", ::org::apache::lucene::search::SortField$Type::initializeClass, &a0, &a1, &p1, ::org::apache::lucene::search::t_SortField$Type::parameters_))
              {
                INT_CALL(object = SortField(a0, a1));
                self->object = object;
                break;
              }
            }
            {
              ::java::lang::String a0((jobject) NULL);
              ::org::apache::lucene::search::FieldCache$Parser a1((jobject) NULL);
              SortField object((jobject) NULL);

              if (!parseArgs(args, "sk", ::org::apache::lucene::search::FieldCache$Parser::initializeClass, &a0, &a1))
              {
                INT_CALL(object = SortField(a0, a1));
                self->object = object;
                break;
              }
            }
            goto err;
           case 3:
            {
              ::java::lang::String a0((jobject) NULL);
              ::org::apache::lucene::search::FieldComparatorSource a1((jobject) NULL);
              jboolean a2;
              SortField object((jobject) NULL);

              if (!parseArgs(args, "skZ", ::org::apache::lucene::search::FieldComparatorSource::initializeClass, &a0, &a1, &a2))
              {
                INT_CALL(object = SortField(a0, a1, a2));
                self->object = object;
                break;
              }
            }
            {
              ::java::lang::String a0((jobject) NULL);
              ::org::apache::lucene::search::FieldCache$Parser a1((jobject) NULL);
              jboolean a2;
              SortField object((jobject) NULL);

              if (!parseArgs(args, "skZ", ::org::apache::lucene::search::FieldCache$Parser::initializeClass, &a0, &a1, &a2))
              {
                INT_CALL(object = SortField(a0, a1, a2));
                self->object = object;
                break;
              }
            }
            {
              ::java::lang::String a0((jobject) NULL);
              ::org::apache::lucene::search::SortField$Type a1((jobject) NULL);
              PyTypeObject **p1;
              jboolean a2;
              SortField object((jobject) NULL);

              if (!parseArgs(args, "sKZ", ::org::apache::lucene::search::SortField$Type::initializeClass, &a0, &a1, &p1, ::org::apache::lucene::search::t_SortField$Type::parameters_, &a2))
              {
                INT_CALL(object = SortField(a0, a1, a2));
                self->object = object;
                break;
              }
            }
           default:
           err:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_SortField_equals(t_SortField *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.equals(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(SortField), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_SortField_getBytesComparator(t_SortField *self)
        {
          ::java::util::Comparator result((jobject) NULL);
          OBJ_CALL(result = self->object.getBytesComparator());
          return ::java::util::t_Comparator::wrap_Object(result, &::org::apache::lucene::util::PY_TYPE(BytesRef));
        }

        static PyObject *t_SortField_getComparator(t_SortField *self, PyObject *args)
        {
          jint a0;
          jint a1;
          ::org::apache::lucene::search::FieldComparator result((jobject) NULL);

          if (!parseArgs(args, "II", &a0, &a1))
          {
            OBJ_CALL(result = self->object.getComparator(a0, a1));
            return ::org::apache::lucene::search::t_FieldComparator::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "getComparator", args);
          return NULL;
        }

        static PyObject *t_SortField_getComparatorSource(t_SortField *self)
        {
          ::org::apache::lucene::search::FieldComparatorSource result((jobject) NULL);
          OBJ_CALL(result = self->object.getComparatorSource());
          return ::org::apache::lucene::search::t_FieldComparatorSource::wrap_Object(result);
        }

        static PyObject *t_SortField_getField(t_SortField *self)
        {
          ::java::lang::String result((jobject) NULL);
          OBJ_CALL(result = self->object.getField());
          return j2p(result);
        }

        static PyObject *t_SortField_getParser(t_SortField *self)
        {
          ::org::apache::lucene::search::FieldCache$Parser result((jobject) NULL);
          OBJ_CALL(result = self->object.getParser());
          return ::org::apache::lucene::search::t_FieldCache$Parser::wrap_Object(result);
        }

        static PyObject *t_SortField_getReverse(t_SortField *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.getReverse());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_SortField_getType(t_SortField *self)
        {
          ::org::apache::lucene::search::SortField$Type result((jobject) NULL);
          OBJ_CALL(result = self->object.getType());
          return ::org::apache::lucene::search::t_SortField$Type::wrap_Object(result);
        }

        static PyObject *t_SortField_hashCode(t_SortField *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hashCode());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(SortField), (PyObject *) self, "hashCode", args, 2);
        }

        static PyObject *t_SortField_needsScores(t_SortField *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.needsScores());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_SortField_rewrite(t_SortField *self, PyObject *arg)
        {
          ::org::apache::lucene::search::IndexSearcher a0((jobject) NULL);
          SortField result((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::search::IndexSearcher::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.rewrite(a0));
            return t_SortField::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "rewrite", arg);
          return NULL;
        }

        static PyObject *t_SortField_setBytesComparator(t_SortField *self, PyObject *arg)
        {
          ::java::util::Comparator a0((jobject) NULL);
          PyTypeObject **p0;

          if (!parseArg(arg, "K", ::java::util::Comparator::initializeClass, &a0, &p0, ::java::util::t_Comparator::parameters_))
          {
            OBJ_CALL(self->object.setBytesComparator(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setBytesComparator", arg);
          return NULL;
        }

        static PyObject *t_SortField_setMissingValue(t_SortField *self, PyObject *arg)
        {
          ::java::lang::Object a0((jobject) NULL);

          if (!parseArg(arg, "o", &a0))
          {
            OBJ_CALL(self->object.setMissingValue(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setMissingValue", arg);
          return NULL;
        }

        static PyObject *t_SortField_toString(t_SortField *self, PyObject *args)
        {
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.toString());
            return j2p(result);
          }

          return callSuper(&PY_TYPE(SortField), (PyObject *) self, "toString", args, 2);
        }

        static PyObject *t_SortField_get__bytesComparator(t_SortField *self, void *data)
        {
          ::java::util::Comparator value((jobject) NULL);
          OBJ_CALL(value = self->object.getBytesComparator());
          return ::java::util::t_Comparator::wrap_Object(value);
        }
        static int t_SortField_set__bytesComparator(t_SortField *self, PyObject *arg, void *data)
        {
          {
            ::java::util::Comparator value((jobject) NULL);
            if (!parseArg(arg, "k", ::java::util::Comparator::initializeClass, &value))
            {
              INT_CALL(self->object.setBytesComparator(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "bytesComparator", arg);
          return -1;
        }

        static PyObject *t_SortField_get__comparatorSource(t_SortField *self, void *data)
        {
          ::org::apache::lucene::search::FieldComparatorSource value((jobject) NULL);
          OBJ_CALL(value = self->object.getComparatorSource());
          return ::org::apache::lucene::search::t_FieldComparatorSource::wrap_Object(value);
        }

        static PyObject *t_SortField_get__field(t_SortField *self, void *data)
        {
          ::java::lang::String value((jobject) NULL);
          OBJ_CALL(value = self->object.getField());
          return j2p(value);
        }

        static int t_SortField_set__missingValue(t_SortField *self, PyObject *arg, void *data)
        {
          {
            ::java::lang::Object value((jobject) NULL);
            if (!parseArg(arg, "o", &value))
            {
              INT_CALL(self->object.setMissingValue(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "missingValue", arg);
          return -1;
        }

        static PyObject *t_SortField_get__parser(t_SortField *self, void *data)
        {
          ::org::apache::lucene::search::FieldCache$Parser value((jobject) NULL);
          OBJ_CALL(value = self->object.getParser());
          return ::org::apache::lucene::search::t_FieldCache$Parser::wrap_Object(value);
        }

        static PyObject *t_SortField_get__reverse(t_SortField *self, void *data)
        {
          jboolean value;
          OBJ_CALL(value = self->object.getReverse());
          Py_RETURN_BOOL(value);
        }

        static PyObject *t_SortField_get__type(t_SortField *self, void *data)
        {
          ::org::apache::lucene::search::SortField$Type value((jobject) NULL);
          OBJ_CALL(value = self->object.getType());
          return ::org::apache::lucene::search::t_SortField$Type::wrap_Object(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/packed/AbstractAppendingLongBuffer$Iterator.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace packed {

          ::java::lang::Class *AbstractAppendingLongBuffer$Iterator::class$ = NULL;
          jmethodID *AbstractAppendingLongBuffer$Iterator::mids$ = NULL;
          bool AbstractAppendingLongBuffer$Iterator::live$ = false;

          jclass AbstractAppendingLongBuffer$Iterator::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/util/packed/AbstractAppendingLongBuffer$Iterator");

              mids$ = new jmethodID[max_mid];
              mids$[mid_hasNext_54c6a16a] = env->getMethodID(cls, "hasNext", "()Z");
              mids$[mid_next_54c6a17a] = env->getMethodID(cls, "next", "()J");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          jboolean AbstractAppendingLongBuffer$Iterator::hasNext() const
          {
            return env->callBooleanMethod(this$, mids$[mid_hasNext_54c6a16a]);
          }

          jlong AbstractAppendingLongBuffer$Iterator::next() const
          {
            return env->callLongMethod(this$, mids$[mid_next_54c6a17a]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace packed {
          static PyObject *t_AbstractAppendingLongBuffer$Iterator_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_AbstractAppendingLongBuffer$Iterator_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_AbstractAppendingLongBuffer$Iterator_hasNext(t_AbstractAppendingLongBuffer$Iterator *self);
          static PyObject *t_AbstractAppendingLongBuffer$Iterator_next(t_AbstractAppendingLongBuffer$Iterator *self);

          static PyMethodDef t_AbstractAppendingLongBuffer$Iterator__methods_[] = {
            DECLARE_METHOD(t_AbstractAppendingLongBuffer$Iterator, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_AbstractAppendingLongBuffer$Iterator, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_AbstractAppendingLongBuffer$Iterator, hasNext, METH_NOARGS),
            DECLARE_METHOD(t_AbstractAppendingLongBuffer$Iterator, next, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(AbstractAppendingLongBuffer$Iterator, t_AbstractAppendingLongBuffer$Iterator, ::java::lang::Object, AbstractAppendingLongBuffer$Iterator, abstract_init, 0, 0, 0, 0, 0);

          void t_AbstractAppendingLongBuffer$Iterator::install(PyObject *module)
          {
            installType(&PY_TYPE(AbstractAppendingLongBuffer$Iterator), module, "AbstractAppendingLongBuffer$Iterator", 0);
          }

          void t_AbstractAppendingLongBuffer$Iterator::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(AbstractAppendingLongBuffer$Iterator).tp_dict, "class_", make_descriptor(AbstractAppendingLongBuffer$Iterator::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(AbstractAppendingLongBuffer$Iterator).tp_dict, "wrapfn_", make_descriptor(t_AbstractAppendingLongBuffer$Iterator::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(AbstractAppendingLongBuffer$Iterator).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_AbstractAppendingLongBuffer$Iterator_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, AbstractAppendingLongBuffer$Iterator::initializeClass, 1)))
              return NULL;
            return t_AbstractAppendingLongBuffer$Iterator::wrap_Object(AbstractAppendingLongBuffer$Iterator(((t_AbstractAppendingLongBuffer$Iterator *) arg)->object.this$));
          }
          static PyObject *t_AbstractAppendingLongBuffer$Iterator_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, AbstractAppendingLongBuffer$Iterator::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_AbstractAppendingLongBuffer$Iterator_hasNext(t_AbstractAppendingLongBuffer$Iterator *self)
          {
            jboolean result;
            OBJ_CALL(result = self->object.hasNext());
            Py_RETURN_BOOL(result);
          }

          static PyObject *t_AbstractAppendingLongBuffer$Iterator_next(t_AbstractAppendingLongBuffer$Iterator *self)
          {
            jlong result;
            OBJ_CALL(result = self->object.next());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/compound/hyphenation/PatternParser.h"
#include "java/lang/String.h"
#include "org/apache/lucene/analysis/compound/hyphenation/PatternConsumer.h"
#include "java/io/File.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace compound {
          namespace hyphenation {

            ::java::lang::Class *PatternParser::class$ = NULL;
            jmethodID *PatternParser::mids$ = NULL;
            bool PatternParser::live$ = false;

            jclass PatternParser::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/compound/hyphenation/PatternParser");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
                mids$[mid_init$_f6e11b3c] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/compound/hyphenation/PatternConsumer;)V");
                mids$[mid_characters_6f0bb356] = env->getMethodID(cls, "characters", "([CII)V");
                mids$[mid_endElement_9c119564] = env->getMethodID(cls, "endElement", "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V");
                mids$[mid_parse_5fdc3f48] = env->getMethodID(cls, "parse", "(Ljava/lang/String;)V");
                mids$[mid_parse_c3dacf57] = env->getMethodID(cls, "parse", "(Ljava/io/File;)V");
                mids$[mid_setConsumer_f6e11b3c] = env->getMethodID(cls, "setConsumer", "(Lorg/apache/lucene/analysis/compound/hyphenation/PatternConsumer;)V");
                mids$[mid_getPattern_97a5258f] = env->getStaticMethodID(cls, "getPattern", "(Ljava/lang/String;)Ljava/lang/String;");
                mids$[mid_normalizeException_27b9ce2f] = env->getMethodID(cls, "normalizeException", "(Ljava/util/ArrayList;)Ljava/util/ArrayList;");
                mids$[mid_readToken_7614059b] = env->getMethodID(cls, "readToken", "(Ljava/lang/StringBuilder;)Ljava/lang/String;");
                mids$[mid_getExceptionWord_0c7b6c64] = env->getMethodID(cls, "getExceptionWord", "(Ljava/util/ArrayList;)Ljava/lang/String;");
                mids$[mid_getInterletterValues_97a5258f] = env->getStaticMethodID(cls, "getInterletterValues", "(Ljava/lang/String;)Ljava/lang/String;");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            PatternParser::PatternParser() : ::org::xml::sax::helpers::DefaultHandler(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

            PatternParser::PatternParser(const ::org::apache::lucene::analysis::compound::hyphenation::PatternConsumer & a0) : ::org::xml::sax::helpers::DefaultHandler(env->newObject(initializeClass, &mids$, mid_init$_f6e11b3c, a0.this$)) {}

            void PatternParser::characters(const JArray< jchar > & a0, jint a1, jint a2) const
            {
              env->callVoidMethod(this$, mids$[mid_characters_6f0bb356], a0.this$, a1, a2);
            }

            void PatternParser::endElement(const ::java::lang::String & a0, const ::java::lang::String & a1, const ::java::lang::String & a2) const
            {
              env->callVoidMethod(this$, mids$[mid_endElement_9c119564], a0.this$, a1.this$, a2.this$);
            }

            void PatternParser::parse(const ::java::lang::String & a0) const
            {
              env->callVoidMethod(this$, mids$[mid_parse_5fdc3f48], a0.this$);
            }

            void PatternParser::parse(const ::java::io::File & a0) const
            {
              env->callVoidMethod(this$, mids$[mid_parse_c3dacf57], a0.this$);
            }

            void PatternParser::setConsumer(const ::org::apache::lucene::analysis::compound::hyphenation::PatternConsumer & a0) const
            {
              env->callVoidMethod(this$, mids$[mid_setConsumer_f6e11b3c], a0.this$);
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace compound {
          namespace hyphenation {
            static PyObject *t_PatternParser_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_PatternParser_instance_(PyTypeObject *type, PyObject *arg);
            static int t_PatternParser_init_(t_PatternParser *self, PyObject *args, PyObject *kwds);
            static PyObject *t_PatternParser_characters(t_PatternParser *self, PyObject *args);
            static PyObject *t_PatternParser_endElement(t_PatternParser *self, PyObject *args);
            static PyObject *t_PatternParser_parse(t_PatternParser *self, PyObject *args);
            static PyObject *t_PatternParser_setConsumer(t_PatternParser *self, PyObject *arg);
            static int t_PatternParser_set__consumer(t_PatternParser *self, PyObject *arg, void *data);
            static PyGetSetDef t_PatternParser__fields_[] = {
              DECLARE_SET_FIELD(t_PatternParser, consumer),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_PatternParser__methods_[] = {
              DECLARE_METHOD(t_PatternParser, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_PatternParser, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_PatternParser, characters, METH_VARARGS),
              DECLARE_METHOD(t_PatternParser, endElement, METH_VARARGS),
              DECLARE_METHOD(t_PatternParser, parse, METH_VARARGS),
              DECLARE_METHOD(t_PatternParser, setConsumer, METH_O),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(PatternParser, t_PatternParser, ::org::xml::sax::helpers::DefaultHandler, PatternParser, t_PatternParser_init_, 0, 0, t_PatternParser__fields_, 0, 0);

            void t_PatternParser::install(PyObject *module)
            {
              installType(&PY_TYPE(PatternParser), module, "PatternParser", 0);
            }

            void t_PatternParser::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(PatternParser).tp_dict, "class_", make_descriptor(PatternParser::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(PatternParser).tp_dict, "wrapfn_", make_descriptor(t_PatternParser::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(PatternParser).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_PatternParser_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, PatternParser::initializeClass, 1)))
                return NULL;
              return t_PatternParser::wrap_Object(PatternParser(((t_PatternParser *) arg)->object.this$));
            }
            static PyObject *t_PatternParser_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, PatternParser::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_PatternParser_init_(t_PatternParser *self, PyObject *args, PyObject *kwds)
            {
              switch (PyTuple_GET_SIZE(args)) {
               case 0:
                {
                  PatternParser object((jobject) NULL);

                  INT_CALL(object = PatternParser());
                  self->object = object;
                  break;
                }
                goto err;
               case 1:
                {
                  ::org::apache::lucene::analysis::compound::hyphenation::PatternConsumer a0((jobject) NULL);
                  PatternParser object((jobject) NULL);

                  if (!parseArgs(args, "k", ::org::apache::lucene::analysis::compound::hyphenation::PatternConsumer::initializeClass, &a0))
                  {
                    INT_CALL(object = PatternParser(a0));
                    self->object = object;
                    break;
                  }
                }
               default:
               err:
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_PatternParser_characters(t_PatternParser *self, PyObject *args)
            {
              JArray< jchar > a0((jobject) NULL);
              jint a1;
              jint a2;

              if (!parseArgs(args, "[CII", &a0, &a1, &a2))
              {
                OBJ_CALL(self->object.characters(a0, a1, a2));
                Py_RETURN_NONE;
              }

              return callSuper(&PY_TYPE(PatternParser), (PyObject *) self, "characters", args, 2);
            }

            static PyObject *t_PatternParser_endElement(t_PatternParser *self, PyObject *args)
            {
              ::java::lang::String a0((jobject) NULL);
              ::java::lang::String a1((jobject) NULL);
              ::java::lang::String a2((jobject) NULL);

              if (!parseArgs(args, "sss", &a0, &a1, &a2))
              {
                OBJ_CALL(self->object.endElement(a0, a1, a2));
                Py_RETURN_NONE;
              }

              return callSuper(&PY_TYPE(PatternParser), (PyObject *) self, "endElement", args, 2);
            }

            static PyObject *t_PatternParser_parse(t_PatternParser *self, PyObject *args)
            {
              switch (PyTuple_GET_SIZE(args)) {
               case 1:
                {
                  ::java::lang::String a0((jobject) NULL);

                  if (!parseArgs(args, "s", &a0))
                  {
                    OBJ_CALL(self->object.parse(a0));
                    Py_RETURN_NONE;
                  }
                }
                {
                  ::java::io::File a0((jobject) NULL);

                  if (!parseArgs(args, "k", ::java::io::File::initializeClass, &a0))
                  {
                    OBJ_CALL(self->object.parse(a0));
                    Py_RETURN_NONE;
                  }
                }
              }

              PyErr_SetArgsError((PyObject *) self, "parse", args);
              return NULL;
            }

            static PyObject *t_PatternParser_setConsumer(t_PatternParser *self, PyObject *arg)
            {
              ::org::apache::lucene::analysis::compound::hyphenation::PatternConsumer a0((jobject) NULL);

              if (!parseArg(arg, "k", ::org::apache::lucene::analysis::compound::hyphenation::PatternConsumer::initializeClass, &a0))
              {
                OBJ_CALL(self->object.setConsumer(a0));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "setConsumer", arg);
              return NULL;
            }

            static int t_PatternParser_set__consumer(t_PatternParser *self, PyObject *arg, void *data)
            {
              {
                ::org::apache::lucene::analysis::compound::hyphenation::PatternConsumer value((jobject) NULL);
                if (!parseArg(arg, "k", ::org::apache::lucene::analysis::compound::hyphenation::PatternConsumer::initializeClass, &value))
                {
                  INT_CALL(self->object.setConsumer(value));
                  return 0;
                }
              }
              PyErr_SetArgsError((PyObject *) self, "consumer", arg);
              return -1;
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/standard/processors/OpenRangeQueryNodeProcessor.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace processors {

              ::java::lang::Class *OpenRangeQueryNodeProcessor::class$ = NULL;
              jmethodID *OpenRangeQueryNodeProcessor::mids$ = NULL;
              bool OpenRangeQueryNodeProcessor::live$ = false;
              ::java::lang::String *OpenRangeQueryNodeProcessor::OPEN_RANGE_TOKEN = NULL;

              jclass OpenRangeQueryNodeProcessor::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/standard/processors/OpenRangeQueryNodeProcessor");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
                  mids$[mid_preProcessNode_6705aed7] = env->getMethodID(cls, "preProcessNode", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;)Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;");
                  mids$[mid_setChildrenOrder_4f378251] = env->getMethodID(cls, "setChildrenOrder", "(Ljava/util/List;)Ljava/util/List;");
                  mids$[mid_postProcessNode_6705aed7] = env->getMethodID(cls, "postProcessNode", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;)Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  cls = (jclass) class$->this$;

                  OPEN_RANGE_TOKEN = new ::java::lang::String(env->getStaticObjectField(cls, "OPEN_RANGE_TOKEN", "Ljava/lang/String;"));
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              OpenRangeQueryNodeProcessor::OpenRangeQueryNodeProcessor() : ::org::apache::lucene::queryparser::flexible::core::processors::QueryNodeProcessorImpl(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace processors {
              static PyObject *t_OpenRangeQueryNodeProcessor_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_OpenRangeQueryNodeProcessor_instance_(PyTypeObject *type, PyObject *arg);
              static int t_OpenRangeQueryNodeProcessor_init_(t_OpenRangeQueryNodeProcessor *self, PyObject *args, PyObject *kwds);

              static PyMethodDef t_OpenRangeQueryNodeProcessor__methods_[] = {
                DECLARE_METHOD(t_OpenRangeQueryNodeProcessor, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_OpenRangeQueryNodeProcessor, instance_, METH_O | METH_CLASS),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(OpenRangeQueryNodeProcessor, t_OpenRangeQueryNodeProcessor, ::org::apache::lucene::queryparser::flexible::core::processors::QueryNodeProcessorImpl, OpenRangeQueryNodeProcessor, t_OpenRangeQueryNodeProcessor_init_, 0, 0, 0, 0, 0);

              void t_OpenRangeQueryNodeProcessor::install(PyObject *module)
              {
                installType(&PY_TYPE(OpenRangeQueryNodeProcessor), module, "OpenRangeQueryNodeProcessor", 0);
              }

              void t_OpenRangeQueryNodeProcessor::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(OpenRangeQueryNodeProcessor).tp_dict, "class_", make_descriptor(OpenRangeQueryNodeProcessor::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(OpenRangeQueryNodeProcessor).tp_dict, "wrapfn_", make_descriptor(t_OpenRangeQueryNodeProcessor::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(OpenRangeQueryNodeProcessor).tp_dict, "boxfn_", make_descriptor(boxObject));
                env->getClass(OpenRangeQueryNodeProcessor::initializeClass);
                PyDict_SetItemString(PY_TYPE(OpenRangeQueryNodeProcessor).tp_dict, "OPEN_RANGE_TOKEN", make_descriptor(j2p(*OpenRangeQueryNodeProcessor::OPEN_RANGE_TOKEN)));
              }

              static PyObject *t_OpenRangeQueryNodeProcessor_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, OpenRangeQueryNodeProcessor::initializeClass, 1)))
                  return NULL;
                return t_OpenRangeQueryNodeProcessor::wrap_Object(OpenRangeQueryNodeProcessor(((t_OpenRangeQueryNodeProcessor *) arg)->object.this$));
              }
              static PyObject *t_OpenRangeQueryNodeProcessor_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, OpenRangeQueryNodeProcessor::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_OpenRangeQueryNodeProcessor_init_(t_OpenRangeQueryNodeProcessor *self, PyObject *args, PyObject *kwds)
              {
                OpenRangeQueryNodeProcessor object((jobject) NULL);

                INT_CALL(object = OpenRangeQueryNodeProcessor());
                self->object = object;

                return 0;
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/lucene3x/Lucene3xSegmentInfoReader.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/index/SegmentInfos.h"
#include "org/apache/lucene/store/IOContext.h"
#include "org/apache/lucene/store/Directory.h"
#include "org/apache/lucene/index/SegmentInfo.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/store/IndexInput.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace lucene3x {

          ::java::lang::Class *Lucene3xSegmentInfoReader::class$ = NULL;
          jmethodID *Lucene3xSegmentInfoReader::mids$ = NULL;
          bool Lucene3xSegmentInfoReader::live$ = false;

          jclass Lucene3xSegmentInfoReader::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/lucene3x/Lucene3xSegmentInfoReader");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_read_ff05cda4] = env->getMethodID(cls, "read", "(Lorg/apache/lucene/store/Directory;Ljava/lang/String;Lorg/apache/lucene/store/IOContext;)Lorg/apache/lucene/index/SegmentInfo;");
              mids$[mid_readLegacyInfos_1ebc3dab] = env->getStaticMethodID(cls, "readLegacyInfos", "(Lorg/apache/lucene/index/SegmentInfos;Lorg/apache/lucene/store/Directory;Lorg/apache/lucene/store/IndexInput;I)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          Lucene3xSegmentInfoReader::Lucene3xSegmentInfoReader() : ::org::apache::lucene::codecs::SegmentInfoReader(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          ::org::apache::lucene::index::SegmentInfo Lucene3xSegmentInfoReader::read(const ::org::apache::lucene::store::Directory & a0, const ::java::lang::String & a1, const ::org::apache::lucene::store::IOContext & a2) const
          {
            return ::org::apache::lucene::index::SegmentInfo(env->callObjectMethod(this$, mids$[mid_read_ff05cda4], a0.this$, a1.this$, a2.this$));
          }

          void Lucene3xSegmentInfoReader::readLegacyInfos(const ::org::apache::lucene::index::SegmentInfos & a0, const ::org::apache::lucene::store::Directory & a1, const ::org::apache::lucene::store::IndexInput & a2, jint a3)
          {
            jclass cls = env->getClass(initializeClass);
            env->callStaticVoidMethod(cls, mids$[mid_readLegacyInfos_1ebc3dab], a0.this$, a1.this$, a2.this$, a3);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace lucene3x {
          static PyObject *t_Lucene3xSegmentInfoReader_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Lucene3xSegmentInfoReader_instance_(PyTypeObject *type, PyObject *arg);
          static int t_Lucene3xSegmentInfoReader_init_(t_Lucene3xSegmentInfoReader *self, PyObject *args, PyObject *kwds);
          static PyObject *t_Lucene3xSegmentInfoReader_read(t_Lucene3xSegmentInfoReader *self, PyObject *args);
          static PyObject *t_Lucene3xSegmentInfoReader_readLegacyInfos(PyTypeObject *type, PyObject *args);

          static PyMethodDef t_Lucene3xSegmentInfoReader__methods_[] = {
            DECLARE_METHOD(t_Lucene3xSegmentInfoReader, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lucene3xSegmentInfoReader, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lucene3xSegmentInfoReader, read, METH_VARARGS),
            DECLARE_METHOD(t_Lucene3xSegmentInfoReader, readLegacyInfos, METH_VARARGS | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(Lucene3xSegmentInfoReader, t_Lucene3xSegmentInfoReader, ::org::apache::lucene::codecs::SegmentInfoReader, Lucene3xSegmentInfoReader, t_Lucene3xSegmentInfoReader_init_, 0, 0, 0, 0, 0);

          void t_Lucene3xSegmentInfoReader::install(PyObject *module)
          {
            installType(&PY_TYPE(Lucene3xSegmentInfoReader), module, "Lucene3xSegmentInfoReader", 0);
          }

          void t_Lucene3xSegmentInfoReader::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(Lucene3xSegmentInfoReader).tp_dict, "class_", make_descriptor(Lucene3xSegmentInfoReader::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(Lucene3xSegmentInfoReader).tp_dict, "wrapfn_", make_descriptor(t_Lucene3xSegmentInfoReader::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(Lucene3xSegmentInfoReader).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_Lucene3xSegmentInfoReader_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, Lucene3xSegmentInfoReader::initializeClass, 1)))
              return NULL;
            return t_Lucene3xSegmentInfoReader::wrap_Object(Lucene3xSegmentInfoReader(((t_Lucene3xSegmentInfoReader *) arg)->object.this$));
          }
          static PyObject *t_Lucene3xSegmentInfoReader_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, Lucene3xSegmentInfoReader::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_Lucene3xSegmentInfoReader_init_(t_Lucene3xSegmentInfoReader *self, PyObject *args, PyObject *kwds)
          {
            Lucene3xSegmentInfoReader object((jobject) NULL);

            INT_CALL(object = Lucene3xSegmentInfoReader());
            self->object = object;

            return 0;
          }

          static PyObject *t_Lucene3xSegmentInfoReader_read(t_Lucene3xSegmentInfoReader *self, PyObject *args)
          {
            ::org::apache::lucene::store::Directory a0((jobject) NULL);
            ::java::lang::String a1((jobject) NULL);
            ::org::apache::lucene::store::IOContext a2((jobject) NULL);
            ::org::apache::lucene::index::SegmentInfo result((jobject) NULL);

            if (!parseArgs(args, "ksk", ::org::apache::lucene::store::Directory::initializeClass, ::org::apache::lucene::store::IOContext::initializeClass, &a0, &a1, &a2))
            {
              OBJ_CALL(result = self->object.read(a0, a1, a2));
              return ::org::apache::lucene::index::t_SegmentInfo::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(Lucene3xSegmentInfoReader), (PyObject *) self, "read", args, 2);
          }

          static PyObject *t_Lucene3xSegmentInfoReader_readLegacyInfos(PyTypeObject *type, PyObject *args)
          {
            ::org::apache::lucene::index::SegmentInfos a0((jobject) NULL);
            ::org::apache::lucene::store::Directory a1((jobject) NULL);
            ::org::apache::lucene::store::IndexInput a2((jobject) NULL);
            jint a3;

            if (!parseArgs(args, "kkkI", ::org::apache::lucene::index::SegmentInfos::initializeClass, ::org::apache::lucene::store::Directory::initializeClass, ::org::apache::lucene::store::IndexInput::initializeClass, &a0, &a1, &a2, &a3))
            {
              OBJ_CALL(::org::apache::lucene::codecs::lucene3x::Lucene3xSegmentInfoReader::readLegacyInfos(a0, a1, a2, a3));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError(type, "readLegacyInfos", args);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/standard/nodes/TermRangeQueryNode.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/FieldQueryNode.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace nodes {

              ::java::lang::Class *TermRangeQueryNode::class$ = NULL;
              jmethodID *TermRangeQueryNode::mids$ = NULL;
              bool TermRangeQueryNode::live$ = false;

              jclass TermRangeQueryNode::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/standard/nodes/TermRangeQueryNode");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_b4afba80] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/FieldQueryNode;Lorg/apache/lucene/queryparser/flexible/core/nodes/FieldQueryNode;ZZ)V");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              TermRangeQueryNode::TermRangeQueryNode(const ::org::apache::lucene::queryparser::flexible::core::nodes::FieldQueryNode & a0, const ::org::apache::lucene::queryparser::flexible::core::nodes::FieldQueryNode & a1, jboolean a2, jboolean a3) : ::org::apache::lucene::queryparser::flexible::standard::nodes::AbstractRangeQueryNode(env->newObject(initializeClass, &mids$, mid_init$_b4afba80, a0.this$, a1.this$, a2, a3)) {}
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace nodes {
              static PyObject *t_TermRangeQueryNode_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_TermRangeQueryNode_instance_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_TermRangeQueryNode_of_(t_TermRangeQueryNode *self, PyObject *args);
              static int t_TermRangeQueryNode_init_(t_TermRangeQueryNode *self, PyObject *args, PyObject *kwds);
              static PyObject *t_TermRangeQueryNode_get__parameters_(t_TermRangeQueryNode *self, void *data);
              static PyGetSetDef t_TermRangeQueryNode__fields_[] = {
                DECLARE_GET_FIELD(t_TermRangeQueryNode, parameters_),
                { NULL, NULL, NULL, NULL, NULL }
              };

              static PyMethodDef t_TermRangeQueryNode__methods_[] = {
                DECLARE_METHOD(t_TermRangeQueryNode, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_TermRangeQueryNode, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_TermRangeQueryNode, of_, METH_VARARGS),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(TermRangeQueryNode, t_TermRangeQueryNode, ::org::apache::lucene::queryparser::flexible::standard::nodes::AbstractRangeQueryNode, TermRangeQueryNode, t_TermRangeQueryNode_init_, 0, 0, t_TermRangeQueryNode__fields_, 0, 0);
              PyObject *t_TermRangeQueryNode::wrap_Object(const TermRangeQueryNode& object, PyTypeObject *p0)
              {
                PyObject *obj = t_TermRangeQueryNode::wrap_Object(object);
                if (obj != NULL && obj != Py_None)
                {
                  t_TermRangeQueryNode *self = (t_TermRangeQueryNode *) obj;
                  self->parameters[0] = p0;
                }
                return obj;
              }

              PyObject *t_TermRangeQueryNode::wrap_jobject(const jobject& object, PyTypeObject *p0)
              {
                PyObject *obj = t_TermRangeQueryNode::wrap_jobject(object);
                if (obj != NULL && obj != Py_None)
                {
                  t_TermRangeQueryNode *self = (t_TermRangeQueryNode *) obj;
                  self->parameters[0] = p0;
                }
                return obj;
              }

              void t_TermRangeQueryNode::install(PyObject *module)
              {
                installType(&PY_TYPE(TermRangeQueryNode), module, "TermRangeQueryNode", 0);
              }

              void t_TermRangeQueryNode::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(TermRangeQueryNode).tp_dict, "class_", make_descriptor(TermRangeQueryNode::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(TermRangeQueryNode).tp_dict, "wrapfn_", make_descriptor(t_TermRangeQueryNode::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(TermRangeQueryNode).tp_dict, "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_TermRangeQueryNode_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, TermRangeQueryNode::initializeClass, 1)))
                  return NULL;
                return t_TermRangeQueryNode::wrap_Object(TermRangeQueryNode(((t_TermRangeQueryNode *) arg)->object.this$));
              }
              static PyObject *t_TermRangeQueryNode_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, TermRangeQueryNode::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static PyObject *t_TermRangeQueryNode_of_(t_TermRangeQueryNode *self, PyObject *args)
              {
                if (!parseArg(args, "T", 1, &(self->parameters)))
                  Py_RETURN_SELF;
                return PyErr_SetArgsError((PyObject *) self, "of_", args);
              }

              static int t_TermRangeQueryNode_init_(t_TermRangeQueryNode *self, PyObject *args, PyObject *kwds)
              {
                ::org::apache::lucene::queryparser::flexible::core::nodes::FieldQueryNode a0((jobject) NULL);
                ::org::apache::lucene::queryparser::flexible::core::nodes::FieldQueryNode a1((jobject) NULL);
                jboolean a2;
                jboolean a3;
                TermRangeQueryNode object((jobject) NULL);

                if (!parseArgs(args, "kkZZ", ::org::apache::lucene::queryparser::flexible::core::nodes::FieldQueryNode::initializeClass, ::org::apache::lucene::queryparser::flexible::core::nodes::FieldQueryNode::initializeClass, &a0, &a1, &a2, &a3))
                {
                  INT_CALL(object = TermRangeQueryNode(a0, a1, a2, a3));
                  self->object = object;
                  self->parameters[0] = &::org::apache::lucene::queryparser::flexible::core::nodes::PY_TYPE(FieldQueryNode);
                }
                else
                {
                  PyErr_SetArgsError((PyObject *) self, "__init__", args);
                  return -1;
                }

                return 0;
              }
              static PyObject *t_TermRangeQueryNode_get__parameters_(t_TermRangeQueryNode *self, void *data)
              {
                return typeParameters(self->parameters, sizeof(self->parameters));
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/payloads/TypeAsPayloadTokenFilterFactory.h"
#include "org/apache/lucene/analysis/payloads/TypeAsPayloadTokenFilter.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/String.h"
#include "java/util/Map.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace payloads {

          ::java::lang::Class *TypeAsPayloadTokenFilterFactory::class$ = NULL;
          jmethodID *TypeAsPayloadTokenFilterFactory::mids$ = NULL;
          bool TypeAsPayloadTokenFilterFactory::live$ = false;

          jclass TypeAsPayloadTokenFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/payloads/TypeAsPayloadTokenFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4c9e2b1c] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_9819dee1] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/payloads/TypeAsPayloadTokenFilter;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          TypeAsPayloadTokenFilterFactory::TypeAsPayloadTokenFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_4c9e2b1c, a0.this$)) {}

          ::org::apache::lucene::analysis::payloads::TypeAsPayloadTokenFilter TypeAsPayloadTokenFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::payloads::TypeAsPayloadTokenFilter(env->callObjectMethod(this$, mids$[mid_create_9819dee1], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace payloads {
          static PyObject *t_TypeAsPayloadTokenFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_TypeAsPayloadTokenFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_TypeAsPayloadTokenFilterFactory_init_(t_TypeAsPayloadTokenFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_TypeAsPayloadTokenFilterFactory_create(t_TypeAsPayloadTokenFilterFactory *self, PyObject *args);

          static PyMethodDef t_TypeAsPayloadTokenFilterFactory__methods_[] = {
            DECLARE_METHOD(t_TypeAsPayloadTokenFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_TypeAsPayloadTokenFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_TypeAsPayloadTokenFilterFactory, create, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(TypeAsPayloadTokenFilterFactory, t_TypeAsPayloadTokenFilterFactory, ::org::apache::lucene::analysis::util::TokenFilterFactory, TypeAsPayloadTokenFilterFactory, t_TypeAsPayloadTokenFilterFactory_init_, 0, 0, 0, 0, 0);

          void t_TypeAsPayloadTokenFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(TypeAsPayloadTokenFilterFactory), module, "TypeAsPayloadTokenFilterFactory", 0);
          }

          void t_TypeAsPayloadTokenFilterFactory::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(TypeAsPayloadTokenFilterFactory).tp_dict, "class_", make_descriptor(TypeAsPayloadTokenFilterFactory::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(TypeAsPayloadTokenFilterFactory).tp_dict, "wrapfn_", make_descriptor(t_TypeAsPayloadTokenFilterFactory::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(TypeAsPayloadTokenFilterFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_TypeAsPayloadTokenFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, TypeAsPayloadTokenFilterFactory::initializeClass, 1)))
              return NULL;
            return t_TypeAsPayloadTokenFilterFactory::wrap_Object(TypeAsPayloadTokenFilterFactory(((t_TypeAsPayloadTokenFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_TypeAsPayloadTokenFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, TypeAsPayloadTokenFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_TypeAsPayloadTokenFilterFactory_init_(t_TypeAsPayloadTokenFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            TypeAsPayloadTokenFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = TypeAsPayloadTokenFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_TypeAsPayloadTokenFilterFactory_create(t_TypeAsPayloadTokenFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::payloads::TypeAsPayloadTokenFilter result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::payloads::t_TypeAsPayloadTokenFilter::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(TypeAsPayloadTokenFilterFactory), (PyObject *) self, "create", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/document/SortedNumericDocValuesField.h"
#include "org/apache/lucene/document/FieldType.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace document {

        ::java::lang::Class *SortedNumericDocValuesField::class$ = NULL;
        jmethodID *SortedNumericDocValuesField::mids$ = NULL;
        bool SortedNumericDocValuesField::live$ = false;
        ::org::apache::lucene::document::FieldType *SortedNumericDocValuesField::TYPE = NULL;

        jclass SortedNumericDocValuesField::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/document/SortedNumericDocValuesField");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_4372eed5] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;J)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            cls = (jclass) class$->this$;

            TYPE = new ::org::apache::lucene::document::FieldType(env->getStaticObjectField(cls, "TYPE", "Lorg/apache/lucene/document/FieldType;"));
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        SortedNumericDocValuesField::SortedNumericDocValuesField(const ::java::lang::String & a0, jlong a1) : ::org::apache::lucene::document::Field(env->newObject(initializeClass, &mids$, mid_init$_4372eed5, a0.this$, a1)) {}
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace document {
        static PyObject *t_SortedNumericDocValuesField_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_SortedNumericDocValuesField_instance_(PyTypeObject *type, PyObject *arg);
        static int t_SortedNumericDocValuesField_init_(t_SortedNumericDocValuesField *self, PyObject *args, PyObject *kwds);

        static PyMethodDef t_SortedNumericDocValuesField__methods_[] = {
          DECLARE_METHOD(t_SortedNumericDocValuesField, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SortedNumericDocValuesField, instance_, METH_O | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(SortedNumericDocValuesField, t_SortedNumericDocValuesField, ::org::apache::lucene::document::Field, SortedNumericDocValuesField, t_SortedNumericDocValuesField_init_, 0, 0, 0, 0, 0);

        void t_SortedNumericDocValuesField::install(PyObject *module)
        {
          installType(&PY_TYPE(SortedNumericDocValuesField), module, "SortedNumericDocValuesField", 0);
        }

        void t_SortedNumericDocValuesField::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(SortedNumericDocValuesField).tp_dict, "class_", make_descriptor(SortedNumericDocValuesField::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(SortedNumericDocValuesField).tp_dict, "wrapfn_", make_descriptor(t_SortedNumericDocValuesField::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(SortedNumericDocValuesField).tp_dict, "boxfn_", make_descriptor(boxObject));
          env->getClass(SortedNumericDocValuesField::initializeClass);
          PyDict_SetItemString(PY_TYPE(SortedNumericDocValuesField).tp_dict, "TYPE", make_descriptor(::org::apache::lucene::document::t_FieldType::wrap_Object(*SortedNumericDocValuesField::TYPE)));
        }

        static PyObject *t_SortedNumericDocValuesField_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, SortedNumericDocValuesField::initializeClass, 1)))
            return NULL;
          return t_SortedNumericDocValuesField::wrap_Object(SortedNumericDocValuesField(((t_SortedNumericDocValuesField *) arg)->object.this$));
        }
        static PyObject *t_SortedNumericDocValuesField_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, SortedNumericDocValuesField::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_SortedNumericDocValuesField_init_(t_SortedNumericDocValuesField *self, PyObject *args, PyObject *kwds)
        {
          ::java::lang::String a0((jobject) NULL);
          jlong a1;
          SortedNumericDocValuesField object((jobject) NULL);

          if (!parseArgs(args, "sJ", &a0, &a1))
          {
            INT_CALL(object = SortedNumericDocValuesField(a0, a1));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/store/BufferedChecksumIndexInput.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/store/IndexInput.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {

        ::java::lang::Class *BufferedChecksumIndexInput::class$ = NULL;
        jmethodID *BufferedChecksumIndexInput::mids$ = NULL;
        bool BufferedChecksumIndexInput::live$ = false;

        jclass BufferedChecksumIndexInput::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/store/BufferedChecksumIndexInput");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_0441f0b2] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/store/IndexInput;)V");
            mids$[mid_clone_4baa952b] = env->getMethodID(cls, "clone", "()Lorg/apache/lucene/store/IndexInput;");
            mids$[mid_close_54c6a166] = env->getMethodID(cls, "close", "()V");
            mids$[mid_getChecksum_54c6a17a] = env->getMethodID(cls, "getChecksum", "()J");
            mids$[mid_getFilePointer_54c6a17a] = env->getMethodID(cls, "getFilePointer", "()J");
            mids$[mid_length_54c6a17a] = env->getMethodID(cls, "length", "()J");
            mids$[mid_readByte_54c6a172] = env->getMethodID(cls, "readByte", "()B");
            mids$[mid_readBytes_86f4435f] = env->getMethodID(cls, "readBytes", "([BII)V");
            mids$[mid_slice_d00c83eb] = env->getMethodID(cls, "slice", "(Ljava/lang/String;JJ)Lorg/apache/lucene/store/IndexInput;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        BufferedChecksumIndexInput::BufferedChecksumIndexInput(const ::org::apache::lucene::store::IndexInput & a0) : ::org::apache::lucene::store::ChecksumIndexInput(env->newObject(initializeClass, &mids$, mid_init$_0441f0b2, a0.this$)) {}

        ::org::apache::lucene::store::IndexInput BufferedChecksumIndexInput::clone() const
        {
          return ::org::apache::lucene::store::IndexInput(env->callObjectMethod(this$, mids$[mid_clone_4baa952b]));
        }

        void BufferedChecksumIndexInput::close() const
        {
          env->callVoidMethod(this$, mids$[mid_close_54c6a166]);
        }

        jlong BufferedChecksumIndexInput::getChecksum() const
        {
          return env->callLongMethod(this$, mids$[mid_getChecksum_54c6a17a]);
        }

        jlong BufferedChecksumIndexInput::getFilePointer() const
        {
          return env->callLongMethod(this$, mids$[mid_getFilePointer_54c6a17a]);
        }

        jlong BufferedChecksumIndexInput::length() const
        {
          return env->callLongMethod(this$, mids$[mid_length_54c6a17a]);
        }

        jbyte BufferedChecksumIndexInput::readByte() const
        {
          return env->callByteMethod(this$, mids$[mid_readByte_54c6a172]);
        }

        void BufferedChecksumIndexInput::readBytes(const JArray< jbyte > & a0, jint a1, jint a2) const
        {
          env->callVoidMethod(this$, mids$[mid_readBytes_86f4435f], a0.this$, a1, a2);
        }

        ::org::apache::lucene::store::IndexInput BufferedChecksumIndexInput::slice(const ::java::lang::String & a0, jlong a1, jlong a2) const
        {
          return ::org::apache::lucene::store::IndexInput(env->callObjectMethod(this$, mids$[mid_slice_d00c83eb], a0.this$, a1, a2));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {
        static PyObject *t_BufferedChecksumIndexInput_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_BufferedChecksumIndexInput_instance_(PyTypeObject *type, PyObject *arg);
        static int t_BufferedChecksumIndexInput_init_(t_BufferedChecksumIndexInput *self, PyObject *args, PyObject *kwds);
        static PyObject *t_BufferedChecksumIndexInput_clone(t_BufferedChecksumIndexInput *self, PyObject *args);
        static PyObject *t_BufferedChecksumIndexInput_close(t_BufferedChecksumIndexInput *self, PyObject *args);
        static PyObject *t_BufferedChecksumIndexInput_getChecksum(t_BufferedChecksumIndexInput *self, PyObject *args);
        static PyObject *t_BufferedChecksumIndexInput_getFilePointer(t_BufferedChecksumIndexInput *self, PyObject *args);
        static PyObject *t_BufferedChecksumIndexInput_length(t_BufferedChecksumIndexInput *self, PyObject *args);
        static PyObject *t_BufferedChecksumIndexInput_readByte(t_BufferedChecksumIndexInput *self, PyObject *args);
        static PyObject *t_BufferedChecksumIndexInput_readBytes(t_BufferedChecksumIndexInput *self, PyObject *args);
        static PyObject *t_BufferedChecksumIndexInput_slice(t_BufferedChecksumIndexInput *self, PyObject *args);
        static PyObject *t_BufferedChecksumIndexInput_get__checksum(t_BufferedChecksumIndexInput *self, void *data);
        static PyObject *t_BufferedChecksumIndexInput_get__filePointer(t_BufferedChecksumIndexInput *self, void *data);
        static PyGetSetDef t_BufferedChecksumIndexInput__fields_[] = {
          DECLARE_GET_FIELD(t_BufferedChecksumIndexInput, checksum),
          DECLARE_GET_FIELD(t_BufferedChecksumIndexInput, filePointer),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_BufferedChecksumIndexInput__methods_[] = {
          DECLARE_METHOD(t_BufferedChecksumIndexInput, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_BufferedChecksumIndexInput, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_BufferedChecksumIndexInput, clone, METH_VARARGS),
          DECLARE_METHOD(t_BufferedChecksumIndexInput, close, METH_VARARGS),
          DECLARE_METHOD(t_BufferedChecksumIndexInput, getChecksum, METH_VARARGS),
          DECLARE_METHOD(t_BufferedChecksumIndexInput, getFilePointer, METH_VARARGS),
          DECLARE_METHOD(t_BufferedChecksumIndexInput, length, METH_VARARGS),
          DECLARE_METHOD(t_BufferedChecksumIndexInput, readByte, METH_VARARGS),
          DECLARE_METHOD(t_BufferedChecksumIndexInput, readBytes, METH_VARARGS),
          DECLARE_METHOD(t_BufferedChecksumIndexInput, slice, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(BufferedChecksumIndexInput, t_BufferedChecksumIndexInput, ::org::apache::lucene::store::ChecksumIndexInput, BufferedChecksumIndexInput, t_BufferedChecksumIndexInput_init_, 0, 0, t_BufferedChecksumIndexInput__fields_, 0, 0);

        void t_BufferedChecksumIndexInput::install(PyObject *module)
        {
          installType(&PY_TYPE(BufferedChecksumIndexInput), module, "BufferedChecksumIndexInput", 0);
        }

        void t_BufferedChecksumIndexInput::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(BufferedChecksumIndexInput).tp_dict, "class_", make_descriptor(BufferedChecksumIndexInput::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(BufferedChecksumIndexInput).tp_dict, "wrapfn_", make_descriptor(t_BufferedChecksumIndexInput::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(BufferedChecksumIndexInput).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_BufferedChecksumIndexInput_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, BufferedChecksumIndexInput::initializeClass, 1)))
            return NULL;
          return t_BufferedChecksumIndexInput::wrap_Object(BufferedChecksumIndexInput(((t_BufferedChecksumIndexInput *) arg)->object.this$));
        }
        static PyObject *t_BufferedChecksumIndexInput_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, BufferedChecksumIndexInput::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_BufferedChecksumIndexInput_init_(t_BufferedChecksumIndexInput *self, PyObject *args, PyObject *kwds)
        {
          ::org::apache::lucene::store::IndexInput a0((jobject) NULL);
          BufferedChecksumIndexInput object((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::store::IndexInput::initializeClass, &a0))
          {
            INT_CALL(object = BufferedChecksumIndexInput(a0));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_BufferedChecksumIndexInput_clone(t_BufferedChecksumIndexInput *self, PyObject *args)
        {
          ::org::apache::lucene::store::IndexInput result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.clone());
            return ::org::apache::lucene::store::t_IndexInput::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(BufferedChecksumIndexInput), (PyObject *) self, "clone", args, 2);
        }

        static PyObject *t_BufferedChecksumIndexInput_close(t_BufferedChecksumIndexInput *self, PyObject *args)
        {

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(self->object.close());
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(BufferedChecksumIndexInput), (PyObject *) self, "close", args, 2);
        }

        static PyObject *t_BufferedChecksumIndexInput_getChecksum(t_BufferedChecksumIndexInput *self, PyObject *args)
        {
          jlong result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.getChecksum());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          return callSuper(&PY_TYPE(BufferedChecksumIndexInput), (PyObject *) self, "getChecksum", args, 2);
        }

        static PyObject *t_BufferedChecksumIndexInput_getFilePointer(t_BufferedChecksumIndexInput *self, PyObject *args)
        {
          jlong result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.getFilePointer());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          return callSuper(&PY_TYPE(BufferedChecksumIndexInput), (PyObject *) self, "getFilePointer", args, 2);
        }

        static PyObject *t_BufferedChecksumIndexInput_length(t_BufferedChecksumIndexInput *self, PyObject *args)
        {
          jlong result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.length());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          return callSuper(&PY_TYPE(BufferedChecksumIndexInput), (PyObject *) self, "length", args, 2);
        }

        static PyObject *t_BufferedChecksumIndexInput_readByte(t_BufferedChecksumIndexInput *self, PyObject *args)
        {
          jbyte result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.readByte());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(BufferedChecksumIndexInput), (PyObject *) self, "readByte", args, 2);
        }

        static PyObject *t_BufferedChecksumIndexInput_readBytes(t_BufferedChecksumIndexInput *self, PyObject *args)
        {
          JArray< jbyte > a0((jobject) NULL);
          jint a1;
          jint a2;

          if (!parseArgs(args, "[BII", &a0, &a1, &a2))
          {
            OBJ_CALL(self->object.readBytes(a0, a1, a2));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(BufferedChecksumIndexInput), (PyObject *) self, "readBytes", args, 2);
        }

        static PyObject *t_BufferedChecksumIndexInput_slice(t_BufferedChecksumIndexInput *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          jlong a1;
          jlong a2;
          ::org::apache::lucene::store::IndexInput result((jobject) NULL);

          if (!parseArgs(args, "sJJ", &a0, &a1, &a2))
          {
            OBJ_CALL(result = self->object.slice(a0, a1, a2));
            return ::org::apache::lucene::store::t_IndexInput::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(BufferedChecksumIndexInput), (PyObject *) self, "slice", args, 2);
        }

        static PyObject *t_BufferedChecksumIndexInput_get__checksum(t_BufferedChecksumIndexInput *self, void *data)
        {
          jlong value;
          OBJ_CALL(value = self->object.getChecksum());
          return PyLong_FromLongLong((PY_LONG_LONG) value);
        }

        static PyObject *t_BufferedChecksumIndexInput_get__filePointer(t_BufferedChecksumIndexInput *self, void *data)
        {
          jlong value;
          OBJ_CALL(value = self->object.getFilePointer());
          return PyLong_FromLongLong((PY_LONG_LONG) value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/cn/ChineseFilter.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/io/IOException.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace cn {

          ::java::lang::Class *ChineseFilter::class$ = NULL;
          jmethodID *ChineseFilter::mids$ = NULL;
          bool ChineseFilter::live$ = false;
          JArray< ::java::lang::String > *ChineseFilter::STOP_WORDS = NULL;

          jclass ChineseFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/cn/ChineseFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_c7c794dc] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;)V");
              mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              STOP_WORDS = new JArray< ::java::lang::String >(env->getStaticObjectField(cls, "STOP_WORDS", "[Ljava/lang/String;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ChineseFilter::ChineseFilter(const ::org::apache::lucene::analysis::TokenStream & a0) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_c7c794dc, a0.this$)) {}

          jboolean ChineseFilter::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_54c6a16a]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace cn {
          static PyObject *t_ChineseFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_ChineseFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_ChineseFilter_init_(t_ChineseFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_ChineseFilter_incrementToken(t_ChineseFilter *self, PyObject *args);

          static PyMethodDef t_ChineseFilter__methods_[] = {
            DECLARE_METHOD(t_ChineseFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ChineseFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ChineseFilter, incrementToken, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(ChineseFilter, t_ChineseFilter, ::org::apache::lucene::analysis::TokenFilter, ChineseFilter, t_ChineseFilter_init_, 0, 0, 0, 0, 0);

          void t_ChineseFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(ChineseFilter), module, "ChineseFilter", 0);
          }

          void t_ChineseFilter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(ChineseFilter).tp_dict, "class_", make_descriptor(ChineseFilter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(ChineseFilter).tp_dict, "wrapfn_", make_descriptor(t_ChineseFilter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(ChineseFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(ChineseFilter::initializeClass);
            PyDict_SetItemString(PY_TYPE(ChineseFilter).tp_dict, "STOP_WORDS", make_descriptor(JArray<jstring>(ChineseFilter::STOP_WORDS->this$).wrap()));
          }

          static PyObject *t_ChineseFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, ChineseFilter::initializeClass, 1)))
              return NULL;
            return t_ChineseFilter::wrap_Object(ChineseFilter(((t_ChineseFilter *) arg)->object.this$));
          }
          static PyObject *t_ChineseFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, ChineseFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_ChineseFilter_init_(t_ChineseFilter *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ChineseFilter object((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              INT_CALL(object = ChineseFilter(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_ChineseFilter_incrementToken(t_ChineseFilter *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(ChineseFilter), (PyObject *) self, "incrementToken", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/ngram/EdgeNGramTokenFilter.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/ngram/EdgeNGramTokenFilter$Side.h"
#include "org/apache/lucene/util/Version.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ngram {

          ::java::lang::Class *EdgeNGramTokenFilter::class$ = NULL;
          jmethodID *EdgeNGramTokenFilter::mids$ = NULL;
          bool EdgeNGramTokenFilter::live$ = false;
          jint EdgeNGramTokenFilter::DEFAULT_MAX_GRAM_SIZE = (jint) 0;
          jint EdgeNGramTokenFilter::DEFAULT_MIN_GRAM_SIZE = (jint) 0;
          ::org::apache::lucene::analysis::ngram::EdgeNGramTokenFilter$Side *EdgeNGramTokenFilter::DEFAULT_SIDE = NULL;

          jclass EdgeNGramTokenFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/ngram/EdgeNGramTokenFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_46a9ddd5] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/analysis/TokenStream;II)V");
              mids$[mid_init$_fa7af393] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/analysis/TokenStream;Ljava/lang/String;II)V");
              mids$[mid_init$_ef953ccc] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/analysis/TokenStream;Lorg/apache/lucene/analysis/ngram/EdgeNGramTokenFilter$Side;II)V");
              mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");
              mids$[mid_reset_54c6a166] = env->getMethodID(cls, "reset", "()V");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              DEFAULT_MAX_GRAM_SIZE = env->getStaticIntField(cls, "DEFAULT_MAX_GRAM_SIZE");
              DEFAULT_MIN_GRAM_SIZE = env->getStaticIntField(cls, "DEFAULT_MIN_GRAM_SIZE");
              DEFAULT_SIDE = new ::org::apache::lucene::analysis::ngram::EdgeNGramTokenFilter$Side(env->getStaticObjectField(cls, "DEFAULT_SIDE", "Lorg/apache/lucene/analysis/ngram/EdgeNGramTokenFilter$Side;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          EdgeNGramTokenFilter::EdgeNGramTokenFilter(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::analysis::TokenStream & a1, jint a2, jint a3) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_46a9ddd5, a0.this$, a1.this$, a2, a3)) {}

          EdgeNGramTokenFilter::EdgeNGramTokenFilter(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::analysis::TokenStream & a1, const ::java::lang::String & a2, jint a3, jint a4) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_fa7af393, a0.this$, a1.this$, a2.this$, a3, a4)) {}

          EdgeNGramTokenFilter::EdgeNGramTokenFilter(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::analysis::TokenStream & a1, const ::org::apache::lucene::analysis::ngram::EdgeNGramTokenFilter$Side & a2, jint a3, jint a4) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_ef953ccc, a0.this$, a1.this$, a2.this$, a3, a4)) {}

          jboolean EdgeNGramTokenFilter::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_54c6a16a]);
          }

          void EdgeNGramTokenFilter::reset() const
          {
            env->callVoidMethod(this$, mids$[mid_reset_54c6a166]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ngram {
          static PyObject *t_EdgeNGramTokenFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_EdgeNGramTokenFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_EdgeNGramTokenFilter_init_(t_EdgeNGramTokenFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_EdgeNGramTokenFilter_incrementToken(t_EdgeNGramTokenFilter *self, PyObject *args);
          static PyObject *t_EdgeNGramTokenFilter_reset(t_EdgeNGramTokenFilter *self, PyObject *args);

          static PyMethodDef t_EdgeNGramTokenFilter__methods_[] = {
            DECLARE_METHOD(t_EdgeNGramTokenFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_EdgeNGramTokenFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_EdgeNGramTokenFilter, incrementToken, METH_VARARGS),
            DECLARE_METHOD(t_EdgeNGramTokenFilter, reset, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(EdgeNGramTokenFilter, t_EdgeNGramTokenFilter, ::org::apache::lucene::analysis::TokenFilter, EdgeNGramTokenFilter, t_EdgeNGramTokenFilter_init_, 0, 0, 0, 0, 0);

          void t_EdgeNGramTokenFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(EdgeNGramTokenFilter), module, "EdgeNGramTokenFilter", 0);
            PyDict_SetItemString(PY_TYPE(EdgeNGramTokenFilter).tp_dict, "Side", make_descriptor(&PY_TYPE(EdgeNGramTokenFilter$Side)));
          }

          void t_EdgeNGramTokenFilter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(EdgeNGramTokenFilter).tp_dict, "class_", make_descriptor(EdgeNGramTokenFilter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(EdgeNGramTokenFilter).tp_dict, "wrapfn_", make_descriptor(t_EdgeNGramTokenFilter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(EdgeNGramTokenFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(EdgeNGramTokenFilter::initializeClass);
            PyDict_SetItemString(PY_TYPE(EdgeNGramTokenFilter).tp_dict, "DEFAULT_MAX_GRAM_SIZE", make_descriptor(EdgeNGramTokenFilter::DEFAULT_MAX_GRAM_SIZE));
            PyDict_SetItemString(PY_TYPE(EdgeNGramTokenFilter).tp_dict, "DEFAULT_MIN_GRAM_SIZE", make_descriptor(EdgeNGramTokenFilter::DEFAULT_MIN_GRAM_SIZE));
            PyDict_SetItemString(PY_TYPE(EdgeNGramTokenFilter).tp_dict, "DEFAULT_SIDE", make_descriptor(::org::apache::lucene::analysis::ngram::t_EdgeNGramTokenFilter$Side::wrap_Object(*EdgeNGramTokenFilter::DEFAULT_SIDE)));
          }

          static PyObject *t_EdgeNGramTokenFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, EdgeNGramTokenFilter::initializeClass, 1)))
              return NULL;
            return t_EdgeNGramTokenFilter::wrap_Object(EdgeNGramTokenFilter(((t_EdgeNGramTokenFilter *) arg)->object.this$));
          }
          static PyObject *t_EdgeNGramTokenFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, EdgeNGramTokenFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_EdgeNGramTokenFilter_init_(t_EdgeNGramTokenFilter *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 4:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                ::org::apache::lucene::analysis::TokenStream a1((jobject) NULL);
                jint a2;
                jint a3;
                EdgeNGramTokenFilter object((jobject) NULL);

                if (!parseArgs(args, "KkII", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1, &a2, &a3))
                {
                  INT_CALL(object = EdgeNGramTokenFilter(a0, a1, a2, a3));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 5:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                ::org::apache::lucene::analysis::TokenStream a1((jobject) NULL);
                ::java::lang::String a2((jobject) NULL);
                jint a3;
                jint a4;
                EdgeNGramTokenFilter object((jobject) NULL);

                if (!parseArgs(args, "KksII", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1, &a2, &a3, &a4))
                {
                  INT_CALL(object = EdgeNGramTokenFilter(a0, a1, a2, a3, a4));
                  self->object = object;
                  break;
                }
              }
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                ::org::apache::lucene::analysis::TokenStream a1((jobject) NULL);
                ::org::apache::lucene::analysis::ngram::EdgeNGramTokenFilter$Side a2((jobject) NULL);
                PyTypeObject **p2;
                jint a3;
                jint a4;
                EdgeNGramTokenFilter object((jobject) NULL);

                if (!parseArgs(args, "KkKII", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::TokenStream::initializeClass, ::org::apache::lucene::analysis::ngram::EdgeNGramTokenFilter$Side::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1, &a2, &p2, ::org::apache::lucene::analysis::ngram::t_EdgeNGramTokenFilter$Side::parameters_, &a3, &a4))
                {
                  INT_CALL(object = EdgeNGramTokenFilter(a0, a1, a2, a3, a4));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_EdgeNGramTokenFilter_incrementToken(t_EdgeNGramTokenFilter *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(EdgeNGramTokenFilter), (PyObject *) self, "incrementToken", args, 2);
          }

          static PyObject *t_EdgeNGramTokenFilter_reset(t_EdgeNGramTokenFilter *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.reset());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(EdgeNGramTokenFilter), (PyObject *) self, "reset", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/classic/QueryParser$Operator.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace classic {

          ::java::lang::Class *QueryParser$Operator::class$ = NULL;
          jmethodID *QueryParser$Operator::mids$ = NULL;
          bool QueryParser$Operator::live$ = false;
          QueryParser$Operator *QueryParser$Operator::AND = NULL;
          QueryParser$Operator *QueryParser$Operator::OR = NULL;

          jclass QueryParser$Operator::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/classic/QueryParser$Operator");

              mids$ = new jmethodID[max_mid];
              mids$[mid_valueOf_7436fa4b] = env->getStaticMethodID(cls, "valueOf", "(Ljava/lang/String;)Lorg/apache/lucene/queryparser/classic/QueryParser$Operator;");
              mids$[mid_values_6ed7a6cd] = env->getStaticMethodID(cls, "values", "()[Lorg/apache/lucene/queryparser/classic/QueryParser$Operator;");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              AND = new QueryParser$Operator(env->getStaticObjectField(cls, "AND", "Lorg/apache/lucene/queryparser/classic/QueryParser$Operator;"));
              OR = new QueryParser$Operator(env->getStaticObjectField(cls, "OR", "Lorg/apache/lucene/queryparser/classic/QueryParser$Operator;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          QueryParser$Operator QueryParser$Operator::valueOf(const ::java::lang::String & a0)
          {
            jclass cls = env->getClass(initializeClass);
            return QueryParser$Operator(env->callStaticObjectMethod(cls, mids$[mid_valueOf_7436fa4b], a0.this$));
          }

          JArray< QueryParser$Operator > QueryParser$Operator::values()
          {
            jclass cls = env->getClass(initializeClass);
            return JArray< QueryParser$Operator >(env->callStaticObjectMethod(cls, mids$[mid_values_6ed7a6cd]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace classic {
          static PyObject *t_QueryParser$Operator_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_QueryParser$Operator_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_QueryParser$Operator_of_(t_QueryParser$Operator *self, PyObject *args);
          static PyObject *t_QueryParser$Operator_valueOf(PyTypeObject *type, PyObject *args);
          static PyObject *t_QueryParser$Operator_values(PyTypeObject *type);
          static PyObject *t_QueryParser$Operator_get__parameters_(t_QueryParser$Operator *self, void *data);
          static PyGetSetDef t_QueryParser$Operator__fields_[] = {
            DECLARE_GET_FIELD(t_QueryParser$Operator, parameters_),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_QueryParser$Operator__methods_[] = {
            DECLARE_METHOD(t_QueryParser$Operator, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_QueryParser$Operator, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_QueryParser$Operator, of_, METH_VARARGS),
            DECLARE_METHOD(t_QueryParser$Operator, valueOf, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_QueryParser$Operator, values, METH_NOARGS | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(QueryParser$Operator, t_QueryParser$Operator, ::java::lang::Enum, QueryParser$Operator, abstract_init, 0, 0, t_QueryParser$Operator__fields_, 0, 0);
          PyObject *t_QueryParser$Operator::wrap_Object(const QueryParser$Operator& object, PyTypeObject *p0)
          {
            PyObject *obj = t_QueryParser$Operator::wrap_Object(object);
            if (obj != NULL && obj != Py_None)
            {
              t_QueryParser$Operator *self = (t_QueryParser$Operator *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          PyObject *t_QueryParser$Operator::wrap_jobject(const jobject& object, PyTypeObject *p0)
          {
            PyObject *obj = t_QueryParser$Operator::wrap_jobject(object);
            if (obj != NULL && obj != Py_None)
            {
              t_QueryParser$Operator *self = (t_QueryParser$Operator *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          void t_QueryParser$Operator::install(PyObject *module)
          {
            installType(&PY_TYPE(QueryParser$Operator), module, "QueryParser$Operator", 0);
          }

          void t_QueryParser$Operator::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(QueryParser$Operator).tp_dict, "class_", make_descriptor(QueryParser$Operator::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(QueryParser$Operator).tp_dict, "wrapfn_", make_descriptor(t_QueryParser$Operator::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(QueryParser$Operator).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(QueryParser$Operator::initializeClass);
            PyDict_SetItemString(PY_TYPE(QueryParser$Operator).tp_dict, "AND", make_descriptor(t_QueryParser$Operator::wrap_Object(*QueryParser$Operator::AND)));
            PyDict_SetItemString(PY_TYPE(QueryParser$Operator).tp_dict, "OR", make_descriptor(t_QueryParser$Operator::wrap_Object(*QueryParser$Operator::OR)));
          }

          static PyObject *t_QueryParser$Operator_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, QueryParser$Operator::initializeClass, 1)))
              return NULL;
            return t_QueryParser$Operator::wrap_Object(QueryParser$Operator(((t_QueryParser$Operator *) arg)->object.this$));
          }
          static PyObject *t_QueryParser$Operator_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, QueryParser$Operator::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_QueryParser$Operator_of_(t_QueryParser$Operator *self, PyObject *args)
          {
            if (!parseArg(args, "T", 1, &(self->parameters)))
              Py_RETURN_SELF;
            return PyErr_SetArgsError((PyObject *) self, "of_", args);
          }

          static PyObject *t_QueryParser$Operator_valueOf(PyTypeObject *type, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            QueryParser$Operator result((jobject) NULL);

            if (!parseArgs(args, "s", &a0))
            {
              OBJ_CALL(result = ::org::apache::lucene::queryparser::classic::QueryParser$Operator::valueOf(a0));
              return t_QueryParser$Operator::wrap_Object(result);
            }

            return callSuper(type, "valueOf", args, 2);
          }

          static PyObject *t_QueryParser$Operator_values(PyTypeObject *type)
          {
            JArray< QueryParser$Operator > result((jobject) NULL);
            OBJ_CALL(result = ::org::apache::lucene::queryparser::classic::QueryParser$Operator::values());
            return JArray<jobject>(result.this$).wrap(t_QueryParser$Operator::wrap_jobject);
          }
          static PyObject *t_QueryParser$Operator_get__parameters_(t_QueryParser$Operator *self, void *data)
          {
            return typeParameters(self->parameters, sizeof(self->parameters));
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/TermVectorsFormat.h"
#include "org/apache/lucene/codecs/TermVectorsWriter.h"
#include "org/apache/lucene/codecs/TermVectorsReader.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/store/IOContext.h"
#include "org/apache/lucene/store/Directory.h"
#include "org/apache/lucene/index/SegmentInfo.h"
#include "org/apache/lucene/index/FieldInfos.h"
#include "java/io/IOException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {

        ::java::lang::Class *TermVectorsFormat::class$ = NULL;
        jmethodID *TermVectorsFormat::mids$ = NULL;
        bool TermVectorsFormat::live$ = false;

        jclass TermVectorsFormat::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/TermVectorsFormat");

            mids$ = new jmethodID[max_mid];
            mids$[mid_vectorsReader_9c23221f] = env->getMethodID(cls, "vectorsReader", "(Lorg/apache/lucene/store/Directory;Lorg/apache/lucene/index/SegmentInfo;Lorg/apache/lucene/index/FieldInfos;Lorg/apache/lucene/store/IOContext;)Lorg/apache/lucene/codecs/TermVectorsReader;");
            mids$[mid_vectorsWriter_0c8458c9] = env->getMethodID(cls, "vectorsWriter", "(Lorg/apache/lucene/store/Directory;Lorg/apache/lucene/index/SegmentInfo;Lorg/apache/lucene/store/IOContext;)Lorg/apache/lucene/codecs/TermVectorsWriter;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        ::org::apache::lucene::codecs::TermVectorsReader TermVectorsFormat::vectorsReader(const ::org::apache::lucene::store::Directory & a0, const ::org::apache::lucene::index::SegmentInfo & a1, const ::org::apache::lucene::index::FieldInfos & a2, const ::org::apache::lucene::store::IOContext & a3) const
        {
          return ::org::apache::lucene::codecs::TermVectorsReader(env->callObjectMethod(this$, mids$[mid_vectorsReader_9c23221f], a0.this$, a1.this$, a2.this$, a3.this$));
        }

        ::org::apache::lucene::codecs::TermVectorsWriter TermVectorsFormat::vectorsWriter(const ::org::apache::lucene::store::Directory & a0, const ::org::apache::lucene::index::SegmentInfo & a1, const ::org::apache::lucene::store::IOContext & a2) const
        {
          return ::org::apache::lucene::codecs::TermVectorsWriter(env->callObjectMethod(this$, mids$[mid_vectorsWriter_0c8458c9], a0.this$, a1.this$, a2.this$));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        static PyObject *t_TermVectorsFormat_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_TermVectorsFormat_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_TermVectorsFormat_vectorsReader(t_TermVectorsFormat *self, PyObject *args);
        static PyObject *t_TermVectorsFormat_vectorsWriter(t_TermVectorsFormat *self, PyObject *args);

        static PyMethodDef t_TermVectorsFormat__methods_[] = {
          DECLARE_METHOD(t_TermVectorsFormat, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_TermVectorsFormat, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_TermVectorsFormat, vectorsReader, METH_VARARGS),
          DECLARE_METHOD(t_TermVectorsFormat, vectorsWriter, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(TermVectorsFormat, t_TermVectorsFormat, ::java::lang::Object, TermVectorsFormat, abstract_init, 0, 0, 0, 0, 0);

        void t_TermVectorsFormat::install(PyObject *module)
        {
          installType(&PY_TYPE(TermVectorsFormat), module, "TermVectorsFormat", 0);
        }

        void t_TermVectorsFormat::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(TermVectorsFormat).tp_dict, "class_", make_descriptor(TermVectorsFormat::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(TermVectorsFormat).tp_dict, "wrapfn_", make_descriptor(t_TermVectorsFormat::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(TermVectorsFormat).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_TermVectorsFormat_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, TermVectorsFormat::initializeClass, 1)))
            return NULL;
          return t_TermVectorsFormat::wrap_Object(TermVectorsFormat(((t_TermVectorsFormat *) arg)->object.this$));
        }
        static PyObject *t_TermVectorsFormat_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, TermVectorsFormat::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_TermVectorsFormat_vectorsReader(t_TermVectorsFormat *self, PyObject *args)
        {
          ::org::apache::lucene::store::Directory a0((jobject) NULL);
          ::org::apache::lucene::index::SegmentInfo a1((jobject) NULL);
          ::org::apache::lucene::index::FieldInfos a2((jobject) NULL);
          ::org::apache::lucene::store::IOContext a3((jobject) NULL);
          ::org::apache::lucene::codecs::TermVectorsReader result((jobject) NULL);

          if (!parseArgs(args, "kkkk", ::org::apache::lucene::store::Directory::initializeClass, ::org::apache::lucene::index::SegmentInfo::initializeClass, ::org::apache::lucene::index::FieldInfos::initializeClass, ::org::apache::lucene::store::IOContext::initializeClass, &a0, &a1, &a2, &a3))
          {
            OBJ_CALL(result = self->object.vectorsReader(a0, a1, a2, a3));
            return ::org::apache::lucene::codecs::t_TermVectorsReader::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "vectorsReader", args);
          return NULL;
        }

        static PyObject *t_TermVectorsFormat_vectorsWriter(t_TermVectorsFormat *self, PyObject *args)
        {
          ::org::apache::lucene::store::Directory a0((jobject) NULL);
          ::org::apache::lucene::index::SegmentInfo a1((jobject) NULL);
          ::org::apache::lucene::store::IOContext a2((jobject) NULL);
          ::org::apache::lucene::codecs::TermVectorsWriter result((jobject) NULL);

          if (!parseArgs(args, "kkk", ::org::apache::lucene::store::Directory::initializeClass, ::org::apache::lucene::index::SegmentInfo::initializeClass, ::org::apache::lucene::store::IOContext::initializeClass, &a0, &a1, &a2))
          {
            OBJ_CALL(result = self->object.vectorsWriter(a0, a1, a2));
            return ::org::apache::lucene::codecs::t_TermVectorsWriter::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "vectorsWriter", args);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/fa/PersianCharFilterFactory.h"
#include "org/apache/lucene/analysis/util/MultiTermAwareComponent.h"
#include "java/lang/Class.h"
#include "java/util/Map.h"
#include "java/io/Reader.h"
#include "java/lang/String.h"
#include "org/apache/lucene/analysis/CharFilter.h"
#include "org/apache/lucene/analysis/util/AbstractAnalysisFactory.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace fa {

          ::java::lang::Class *PersianCharFilterFactory::class$ = NULL;
          jmethodID *PersianCharFilterFactory::mids$ = NULL;
          bool PersianCharFilterFactory::live$ = false;

          jclass PersianCharFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/fa/PersianCharFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4c9e2b1c] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_567624d1] = env->getMethodID(cls, "create", "(Ljava/io/Reader;)Lorg/apache/lucene/analysis/CharFilter;");
              mids$[mid_getMultiTermComponent_0a3f1d72] = env->getMethodID(cls, "getMultiTermComponent", "()Lorg/apache/lucene/analysis/util/AbstractAnalysisFactory;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          PersianCharFilterFactory::PersianCharFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::CharFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_4c9e2b1c, a0.this$)) {}

          ::org::apache::lucene::analysis::CharFilter PersianCharFilterFactory::create(const ::java::io::Reader & a0) const
          {
            return ::org::apache::lucene::analysis::CharFilter(env->callObjectMethod(this$, mids$[mid_create_567624d1], a0.this$));
          }

          ::org::apache::lucene::analysis::util::AbstractAnalysisFactory PersianCharFilterFactory::getMultiTermComponent() const
          {
            return ::org::apache::lucene::analysis::util::AbstractAnalysisFactory(env->callObjectMethod(this$, mids$[mid_getMultiTermComponent_0a3f1d72]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace fa {
          static PyObject *t_PersianCharFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PersianCharFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_PersianCharFilterFactory_init_(t_PersianCharFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_PersianCharFilterFactory_create(t_PersianCharFilterFactory *self, PyObject *args);
          static PyObject *t_PersianCharFilterFactory_getMultiTermComponent(t_PersianCharFilterFactory *self);
          static PyObject *t_PersianCharFilterFactory_get__multiTermComponent(t_PersianCharFilterFactory *self, void *data);
          static PyGetSetDef t_PersianCharFilterFactory__fields_[] = {
            DECLARE_GET_FIELD(t_PersianCharFilterFactory, multiTermComponent),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_PersianCharFilterFactory__methods_[] = {
            DECLARE_METHOD(t_PersianCharFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PersianCharFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PersianCharFilterFactory, create, METH_VARARGS),
            DECLARE_METHOD(t_PersianCharFilterFactory, getMultiTermComponent, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(PersianCharFilterFactory, t_PersianCharFilterFactory, ::org::apache::lucene::analysis::util::CharFilterFactory, PersianCharFilterFactory, t_PersianCharFilterFactory_init_, 0, 0, t_PersianCharFilterFactory__fields_, 0, 0);

          void t_PersianCharFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(PersianCharFilterFactory), module, "PersianCharFilterFactory", 0);
          }

          void t_PersianCharFilterFactory::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(PersianCharFilterFactory).tp_dict, "class_", make_descriptor(PersianCharFilterFactory::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(PersianCharFilterFactory).tp_dict, "wrapfn_", make_descriptor(t_PersianCharFilterFactory::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(PersianCharFilterFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_PersianCharFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, PersianCharFilterFactory::initializeClass, 1)))
              return NULL;
            return t_PersianCharFilterFactory::wrap_Object(PersianCharFilterFactory(((t_PersianCharFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_PersianCharFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, PersianCharFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_PersianCharFilterFactory_init_(t_PersianCharFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            PersianCharFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = PersianCharFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_PersianCharFilterFactory_create(t_PersianCharFilterFactory *self, PyObject *args)
          {
            ::java::io::Reader a0((jobject) NULL);
            ::org::apache::lucene::analysis::CharFilter result((jobject) NULL);

            if (!parseArgs(args, "k", ::java::io::Reader::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::t_CharFilter::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(PersianCharFilterFactory), (PyObject *) self, "create", args, 2);
          }

          static PyObject *t_PersianCharFilterFactory_getMultiTermComponent(t_PersianCharFilterFactory *self)
          {
            ::org::apache::lucene::analysis::util::AbstractAnalysisFactory result((jobject) NULL);
            OBJ_CALL(result = self->object.getMultiTermComponent());
            return ::org::apache::lucene::analysis::util::t_AbstractAnalysisFactory::wrap_Object(result);
          }

          static PyObject *t_PersianCharFilterFactory_get__multiTermComponent(t_PersianCharFilterFactory *self, void *data)
          {
            ::org::apache::lucene::analysis::util::AbstractAnalysisFactory value((jobject) NULL);
            OBJ_CALL(value = self->object.getMultiTermComponent());
            return ::org::apache::lucene::analysis::util::t_AbstractAnalysisFactory::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/standard/builders/NumericRangeQueryNodeBuilder.h"
#include "java/lang/Number.h"
#include "org/apache/lucene/queryparser/flexible/standard/builders/StandardQueryBuilder.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/queryparser/flexible/core/QueryNodeException.h"
#include "org/apache/lucene/search/NumericRangeQuery.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/QueryNode.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace builders {

              ::java::lang::Class *NumericRangeQueryNodeBuilder::class$ = NULL;
              jmethodID *NumericRangeQueryNodeBuilder::mids$ = NULL;
              bool NumericRangeQueryNodeBuilder::live$ = false;

              jclass NumericRangeQueryNodeBuilder::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/standard/builders/NumericRangeQueryNodeBuilder");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
                  mids$[mid_build_ff2bff6d] = env->getMethodID(cls, "build", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;)Lorg/apache/lucene/search/NumericRangeQuery;");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              NumericRangeQueryNodeBuilder::NumericRangeQueryNodeBuilder() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

              ::org::apache::lucene::search::NumericRangeQuery NumericRangeQueryNodeBuilder::build(const ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode & a0) const
              {
                return ::org::apache::lucene::search::NumericRangeQuery(env->callObjectMethod(this$, mids$[mid_build_ff2bff6d], a0.this$));
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace builders {
              static PyObject *t_NumericRangeQueryNodeBuilder_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_NumericRangeQueryNodeBuilder_instance_(PyTypeObject *type, PyObject *arg);
              static int t_NumericRangeQueryNodeBuilder_init_(t_NumericRangeQueryNodeBuilder *self, PyObject *args, PyObject *kwds);
              static PyObject *t_NumericRangeQueryNodeBuilder_build(t_NumericRangeQueryNodeBuilder *self, PyObject *arg);

              static PyMethodDef t_NumericRangeQueryNodeBuilder__methods_[] = {
                DECLARE_METHOD(t_NumericRangeQueryNodeBuilder, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_NumericRangeQueryNodeBuilder, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_NumericRangeQueryNodeBuilder, build, METH_O),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(NumericRangeQueryNodeBuilder, t_NumericRangeQueryNodeBuilder, ::java::lang::Object, NumericRangeQueryNodeBuilder, t_NumericRangeQueryNodeBuilder_init_, 0, 0, 0, 0, 0);

              void t_NumericRangeQueryNodeBuilder::install(PyObject *module)
              {
                installType(&PY_TYPE(NumericRangeQueryNodeBuilder), module, "NumericRangeQueryNodeBuilder", 0);
              }

              void t_NumericRangeQueryNodeBuilder::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(NumericRangeQueryNodeBuilder).tp_dict, "class_", make_descriptor(NumericRangeQueryNodeBuilder::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(NumericRangeQueryNodeBuilder).tp_dict, "wrapfn_", make_descriptor(t_NumericRangeQueryNodeBuilder::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(NumericRangeQueryNodeBuilder).tp_dict, "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_NumericRangeQueryNodeBuilder_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, NumericRangeQueryNodeBuilder::initializeClass, 1)))
                  return NULL;
                return t_NumericRangeQueryNodeBuilder::wrap_Object(NumericRangeQueryNodeBuilder(((t_NumericRangeQueryNodeBuilder *) arg)->object.this$));
              }
              static PyObject *t_NumericRangeQueryNodeBuilder_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, NumericRangeQueryNodeBuilder::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_NumericRangeQueryNodeBuilder_init_(t_NumericRangeQueryNodeBuilder *self, PyObject *args, PyObject *kwds)
              {
                NumericRangeQueryNodeBuilder object((jobject) NULL);

                INT_CALL(object = NumericRangeQueryNodeBuilder());
                self->object = object;

                return 0;
              }

              static PyObject *t_NumericRangeQueryNodeBuilder_build(t_NumericRangeQueryNodeBuilder *self, PyObject *arg)
              {
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode a0((jobject) NULL);
                ::org::apache::lucene::search::NumericRangeQuery result((jobject) NULL);

                if (!parseArg(arg, "k", ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode::initializeClass, &a0))
                {
                  OBJ_CALL(result = self->object.build(a0));
                  return ::org::apache::lucene::search::t_NumericRangeQuery::wrap_Object(result);
                }

                PyErr_SetArgsError((PyObject *) self, "build", arg);
                return NULL;
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "java/lang/Boolean.h"
#include "java/lang/Comparable.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "java/io/Serializable.h"
#include "JArray.h"

namespace java {
  namespace lang {

    ::java::lang::Class *Boolean::class$ = NULL;
    jmethodID *Boolean::mids$ = NULL;
    bool Boolean::live$ = false;
    Boolean *Boolean::FALSE = NULL;
    Boolean *Boolean::TRUE = NULL;
    ::java::lang::Class *Boolean::TYPE = NULL;

    jclass Boolean::initializeClass(bool getOnly)
    {
      if (getOnly)
        return (jclass) (live$ ? class$->this$ : NULL);
      if (class$ == NULL)
      {
        jclass cls = (jclass) env->findClass("java/lang/Boolean");

        mids$ = new jmethodID[max_mid];
        mids$[mid_init$_bb0c767f] = env->getMethodID(cls, "<init>", "(Z)V");
        mids$[mid_init$_5fdc3f48] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;)V");
        mids$[mid_booleanValue_54c6a16a] = env->getMethodID(cls, "booleanValue", "()Z");
        mids$[mid_compare_46f2e2db] = env->getStaticMethodID(cls, "compare", "(ZZ)I");
        mids$[mid_compareTo_d07f0c91] = env->getMethodID(cls, "compareTo", "(Ljava/lang/Boolean;)I");
        mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
        mids$[mid_getBoolean_5fdc3f44] = env->getStaticMethodID(cls, "getBoolean", "(Ljava/lang/String;)Z");
        mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
        mids$[mid_hashCode_bb0c7660] = env->getStaticMethodID(cls, "hashCode", "(Z)I");
        mids$[mid_logicalAnd_46f2e2c8] = env->getStaticMethodID(cls, "logicalAnd", "(ZZ)Z");
        mids$[mid_logicalOr_46f2e2c8] = env->getStaticMethodID(cls, "logicalOr", "(ZZ)Z");
        mids$[mid_logicalXor_46f2e2c8] = env->getStaticMethodID(cls, "logicalXor", "(ZZ)Z");
        mids$[mid_parseBoolean_5fdc3f44] = env->getStaticMethodID(cls, "parseBoolean", "(Ljava/lang/String;)Z");
        mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");
        mids$[mid_toString_445a175e] = env->getStaticMethodID(cls, "toString", "(Z)Ljava/lang/String;");
        mids$[mid_valueOf_a98d5bba] = env->getStaticMethodID(cls, "valueOf", "(Z)Ljava/lang/Boolean;");
        mids$[mid_valueOf_9d4a8ff9] = env->getStaticMethodID(cls, "valueOf", "(Ljava/lang/String;)Ljava/lang/Boolean;");

        class$ = (::java::lang::Class *) new JObject(cls);
        cls = (jclass) class$->this$;

        FALSE = new Boolean(env->getStaticObjectField(cls, "FALSE", "Ljava/lang/Boolean;"));
        TRUE = new Boolean(env->getStaticObjectField(cls, "TRUE", "Ljava/lang/Boolean;"));
        TYPE = new ::java::lang::Class(env->getStaticObjectField(cls, "TYPE", "Ljava/lang/Class;"));
        live$ = true;
      }
      return (jclass) class$->this$;
    }

    Boolean::Boolean(jboolean a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_bb0c767f, a0)) {}

    Boolean::Boolean(const ::java::lang::String & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_5fdc3f48, a0.this$)) {}

    jboolean Boolean::booleanValue() const
    {
      return env->callBooleanMethod(this$, mids$[mid_booleanValue_54c6a16a]);
    }

    jint Boolean::compare(jboolean a0, jboolean a1)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_compare_46f2e2db], a0, a1);
    }

    jint Boolean::compareTo(const Boolean & a0) const
    {
      return env->callIntMethod(this$, mids$[mid_compareTo_d07f0c91], a0.this$);
    }

    jboolean Boolean::equals(const ::java::lang::Object & a0) const
    {
      return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
    }

    jboolean Boolean::getBoolean(const ::java::lang::String & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticBooleanMethod(cls, mids$[mid_getBoolean_5fdc3f44], a0.this$);
    }

    jint Boolean::hashCode() const
    {
      return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
    }

    jint Boolean::hashCode(jboolean a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_hashCode_bb0c7660], a0);
    }

    jboolean Boolean::logicalAnd(jboolean a0, jboolean a1)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticBooleanMethod(cls, mids$[mid_logicalAnd_46f2e2c8], a0, a1);
    }

    jboolean Boolean::logicalOr(jboolean a0, jboolean a1)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticBooleanMethod(cls, mids$[mid_logicalOr_46f2e2c8], a0, a1);
    }

    jboolean Boolean::logicalXor(jboolean a0, jboolean a1)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticBooleanMethod(cls, mids$[mid_logicalXor_46f2e2c8], a0, a1);
    }

    jboolean Boolean::parseBoolean(const ::java::lang::String & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticBooleanMethod(cls, mids$[mid_parseBoolean_5fdc3f44], a0.this$);
    }

    ::java::lang::String Boolean::toString() const
    {
      return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
    }

    ::java::lang::String Boolean::toString(jboolean a0)
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::lang::String(env->callStaticObjectMethod(cls, mids$[mid_toString_445a175e], a0));
    }

    Boolean Boolean::valueOf(jboolean a0)
    {
      jclass cls = env->getClass(initializeClass);
      return Boolean(env->callStaticObjectMethod(cls, mids$[mid_valueOf_a98d5bba], a0));
    }

    Boolean Boolean::valueOf(const ::java::lang::String & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return Boolean(env->callStaticObjectMethod(cls, mids$[mid_valueOf_9d4a8ff9], a0.this$));
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace java {
  namespace lang {
    static PyObject *t_Boolean_cast_(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Boolean_instance_(PyTypeObject *type, PyObject *arg);
    static int t_Boolean_init_(t_Boolean *self, PyObject *args, PyObject *kwds);
    static PyObject *t_Boolean_booleanValue(t_Boolean *self);
    static PyObject *t_Boolean_compare(PyTypeObject *type, PyObject *args);
    static PyObject *t_Boolean_compareTo(t_Boolean *self, PyObject *arg);
    static PyObject *t_Boolean_equals(t_Boolean *self, PyObject *args);
    static PyObject *t_Boolean_getBoolean(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Boolean_hashCode(t_Boolean *self, PyObject *args);
    static PyObject *t_Boolean_hashCode_(PyTypeObject *type, PyObject *args);
    static PyObject *t_Boolean_logicalAnd(PyTypeObject *type, PyObject *args);
    static PyObject *t_Boolean_logicalOr(PyTypeObject *type, PyObject *args);
    static PyObject *t_Boolean_logicalXor(PyTypeObject *type, PyObject *args);
    static PyObject *t_Boolean_parseBoolean(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Boolean_toString(t_Boolean *self, PyObject *args);
    static PyObject *t_Boolean_toString_(PyTypeObject *type, PyObject *args);
    static PyObject *t_Boolean_valueOf(PyTypeObject *type, PyObject *args);

    static PyMethodDef t_Boolean__methods_[] = {
      DECLARE_METHOD(t_Boolean, cast_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Boolean, instance_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Boolean, booleanValue, METH_NOARGS),
      DECLARE_METHOD(t_Boolean, compare, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Boolean, compareTo, METH_O),
      DECLARE_METHOD(t_Boolean, equals, METH_VARARGS),
      DECLARE_METHOD(t_Boolean, getBoolean, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Boolean, hashCode, METH_VARARGS),
      DECLARE_METHOD(t_Boolean, hashCode_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Boolean, logicalAnd, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Boolean, logicalOr, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Boolean, logicalXor, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Boolean, parseBoolean, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Boolean, toString, METH_VARARGS),
      DECLARE_METHOD(t_Boolean, toString_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Boolean, valueOf, METH_VARARGS | METH_CLASS),
      { NULL, NULL, 0, NULL }
    };

    DECLARE_TYPE(Boolean, t_Boolean, ::java::lang::Object, Boolean, t_Boolean_init_, 0, 0, 0, 0, 0);

    void t_Boolean::install(PyObject *module)
    {
      installType(&PY_TYPE(Boolean), module, "Boolean", 0);
    }

    void t_Boolean::initialize(PyObject *module)
    {
      PyDict_SetItemString(PY_TYPE(Boolean).tp_dict, "class_", make_descriptor(Boolean::initializeClass, 1));
      PyDict_SetItemString(PY_TYPE(Boolean).tp_dict, "wrapfn_", make_descriptor(unboxBoolean));
      PyDict_SetItemString(PY_TYPE(Boolean).tp_dict, "boxfn_", make_descriptor(boxBoolean));
      env->getClass(Boolean::initializeClass);
      PyDict_SetItemString(PY_TYPE(Boolean).tp_dict, "FALSE", make_descriptor(t_Boolean::wrap_Object(*Boolean::FALSE)));
      PyDict_SetItemString(PY_TYPE(Boolean).tp_dict, "TRUE", make_descriptor(t_Boolean::wrap_Object(*Boolean::TRUE)));
      PyDict_SetItemString(PY_TYPE(Boolean).tp_dict, "TYPE", make_descriptor(::java::lang::t_Class::wrap_Object(*Boolean::TYPE)));
    }

    static PyObject *t_Boolean_cast_(PyTypeObject *type, PyObject *arg)
    {
      if (!(arg = castCheck(arg, Boolean::initializeClass, 1)))
        return NULL;
      return t_Boolean::wrap_Object(Boolean(((t_Boolean *) arg)->object.this$));
    }
    static PyObject *t_Boolean_instance_(PyTypeObject *type, PyObject *arg)
    {
      if (!castCheck(arg, Boolean::initializeClass, 0))
        Py_RETURN_FALSE;
      Py_RETURN_TRUE;
    }

    static int t_Boolean_init_(t_Boolean *self, PyObject *args, PyObject *kwds)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 1:
        {
          jboolean a0;
          Boolean object((jobject) NULL);

          if (!parseArgs(args, "Z", &a0))
          {
            INT_CALL(object = Boolean(a0));
            self->object = object;
            break;
          }
        }
        {
          ::java::lang::String a0((jobject) NULL);
          Boolean object((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            INT_CALL(object = Boolean(a0));
            self->object = object;
            break;
          }
        }
       default:
        PyErr_SetArgsError((PyObject *) self, "__init__", args);
        return -1;
      }

      return 0;
    }

    static PyObject *t_Boolean_booleanValue(t_Boolean *self)
    {
      jboolean result;
      OBJ_CALL(result = self->object.booleanValue());
      Py_RETURN_BOOL(result);
    }

    static PyObject *t_Boolean_compare(PyTypeObject *type, PyObject *args)
    {
      jboolean a0;
      jboolean a1;
      jint result;

      if (!parseArgs(args, "ZZ", &a0, &a1))
      {
        OBJ_CALL(result = ::java::lang::Boolean::compare(a0, a1));
        return PyInt_FromLong((long) result);
      }

      PyErr_SetArgsError(type, "compare", args);
      return NULL;
    }

    static PyObject *t_Boolean_compareTo(t_Boolean *self, PyObject *arg)
    {
      Boolean a0((jobject) NULL);
      jint result;

      if (!parseArg(arg, "O", &::java::lang::PY_TYPE(Boolean), &a0))
      {
        OBJ_CALL(result = self->object.compareTo(a0));
        return PyInt_FromLong((long) result);
      }

      PyErr_SetArgsError((PyObject *) self, "compareTo", arg);
      return NULL;
    }

    static PyObject *t_Boolean_equals(t_Boolean *self, PyObject *args)
    {
      ::java::lang::Object a0((jobject) NULL);
      jboolean result;

      if (!parseArgs(args, "o", &a0))
      {
        OBJ_CALL(result = self->object.equals(a0));
        Py_RETURN_BOOL(result);
      }

      return callSuper(&PY_TYPE(Boolean), (PyObject *) self, "equals", args, 2);
    }

    static PyObject *t_Boolean_getBoolean(PyTypeObject *type, PyObject *arg)
    {
      ::java::lang::String a0((jobject) NULL);
      jboolean result;

      if (!parseArg(arg, "s", &a0))
      {
        OBJ_CALL(result = ::java::lang::Boolean::getBoolean(a0));
        Py_RETURN_BOOL(result);
      }

      PyErr_SetArgsError(type, "getBoolean", arg);
      return NULL;
    }

    static PyObject *t_Boolean_hashCode(t_Boolean *self, PyObject *args)
    {
      jint result;

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.hashCode());
        return PyInt_FromLong((long) result);
      }

      return callSuper(&PY_TYPE(Boolean), (PyObject *) self, "hashCode", args, 2);
    }

    static PyObject *t_Boolean_hashCode_(PyTypeObject *type, PyObject *args)
    {
      jboolean a0;
      jint result;

      if (!parseArgs(args, "Z", &a0))
      {
        OBJ_CALL(result = ::java::lang::Boolean::hashCode(a0));
        return PyInt_FromLong((long) result);
      }

      PyErr_SetArgsError(type, "hashCode_", args);
      return NULL;
    }

    static PyObject *t_Boolean_logicalAnd(PyTypeObject *type, PyObject *args)
    {
      jboolean a0;
      jboolean a1;
      jboolean result;

      if (!parseArgs(args, "ZZ", &a0, &a1))
      {
        OBJ_CALL(result = ::java::lang::Boolean::logicalAnd(a0, a1));
        Py_RETURN_BOOL(result);
      }

      PyErr_SetArgsError(type, "logicalAnd", args);
      return NULL;
    }

    static PyObject *t_Boolean_logicalOr(PyTypeObject *type, PyObject *args)
    {
      jboolean a0;
      jboolean a1;
      jboolean result;

      if (!parseArgs(args, "ZZ", &a0, &a1))
      {
        OBJ_CALL(result = ::java::lang::Boolean::logicalOr(a0, a1));
        Py_RETURN_BOOL(result);
      }

      PyErr_SetArgsError(type, "logicalOr", args);
      return NULL;
    }

    static PyObject *t_Boolean_logicalXor(PyTypeObject *type, PyObject *args)
    {
      jboolean a0;
      jboolean a1;
      jboolean result;

      if (!parseArgs(args, "ZZ", &a0, &a1))
      {
        OBJ_CALL(result = ::java::lang::Boolean::logicalXor(a0, a1));
        Py_RETURN_BOOL(result);
      }

      PyErr_SetArgsError(type, "logicalXor", args);
      return NULL;
    }

    static PyObject *t_Boolean_parseBoolean(PyTypeObject *type, PyObject *arg)
    {
      ::java::lang::String a0((jobject) NULL);
      jboolean result;

      if (!parseArg(arg, "s", &a0))
      {
        OBJ_CALL(result = ::java::lang::Boolean::parseBoolean(a0));
        Py_RETURN_BOOL(result);
      }

      PyErr_SetArgsError(type, "parseBoolean", arg);
      return NULL;
    }

    static PyObject *t_Boolean_toString(t_Boolean *self, PyObject *args)
    {
      ::java::lang::String result((jobject) NULL);

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.toString());
        return j2p(result);
      }

      return callSuper(&PY_TYPE(Boolean), (PyObject *) self, "toString", args, 2);
    }

    static PyObject *t_Boolean_toString_(PyTypeObject *type, PyObject *args)
    {
      jboolean a0;
      ::java::lang::String result((jobject) NULL);

      if (!parseArgs(args, "Z", &a0))
      {
        OBJ_CALL(result = ::java::lang::Boolean::toString(a0));
        return j2p(result);
      }

      PyErr_SetArgsError(type, "toString_", args);
      return NULL;
    }

    static PyObject *t_Boolean_valueOf(PyTypeObject *type, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 1:
        {
          jboolean a0;
          Boolean result((jobject) NULL);

          if (!parseArgs(args, "Z", &a0))
          {
            OBJ_CALL(result = ::java::lang::Boolean::valueOf(a0));
            return t_Boolean::wrap_Object(result);
          }
        }
        {
          ::java::lang::String a0((jobject) NULL);
          Boolean result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = ::java::lang::Boolean::valueOf(a0));
            return t_Boolean::wrap_Object(result);
          }
        }
      }

      PyErr_SetArgsError(type, "valueOf", args);
      return NULL;
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/suggest/jaspell/JaspellTernarySearchTrie.h"
#include "java/util/Locale.h"
#include "java/lang/Float.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/util/Accountable.h"
#include "java/lang/CharSequence.h"
#include "java/io/File.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "java/util/List.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace suggest {
          namespace jaspell {

            ::java::lang::Class *JaspellTernarySearchTrie::class$ = NULL;
            jmethodID *JaspellTernarySearchTrie::mids$ = NULL;
            bool JaspellTernarySearchTrie::live$ = false;

            jclass JaspellTernarySearchTrie::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/search/suggest/jaspell/JaspellTernarySearchTrie");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
                mids$[mid_init$_56b0e4b3] = env->getMethodID(cls, "<init>", "(Ljava/util/Locale;)V");
                mids$[mid_init$_c3dacf57] = env->getMethodID(cls, "<init>", "(Ljava/io/File;)V");
                mids$[mid_init$_9e00f624] = env->getMethodID(cls, "<init>", "(Ljava/io/File;Z)V");
                mids$[mid_get_a739ccff] = env->getMethodID(cls, "get", "(Ljava/lang/CharSequence;)Ljava/lang/Object;");
                mids$[mid_getAndIncrement_b837041d] = env->getMethodID(cls, "getAndIncrement", "(Ljava/lang/String;)Ljava/lang/Float;");
                mids$[mid_matchAlmost_0feb8f08] = env->getMethodID(cls, "matchAlmost", "(Ljava/lang/String;)Ljava/util/List;");
                mids$[mid_matchAlmost_560b361c] = env->getMethodID(cls, "matchAlmost", "(Ljava/lang/CharSequence;I)Ljava/util/List;");
                mids$[mid_matchPrefix_0feb8f08] = env->getMethodID(cls, "matchPrefix", "(Ljava/lang/String;)Ljava/util/List;");
                mids$[mid_matchPrefix_560b361c] = env->getMethodID(cls, "matchPrefix", "(Ljava/lang/CharSequence;I)Ljava/util/List;");
                mids$[mid_numDataNodes_54c6a179] = env->getMethodID(cls, "numDataNodes", "()I");
                mids$[mid_numNodes_54c6a179] = env->getMethodID(cls, "numNodes", "()I");
                mids$[mid_put_cb8bea9a] = env->getMethodID(cls, "put", "(Ljava/lang/CharSequence;Ljava/lang/Object;)V");
                mids$[mid_ramBytesUsed_54c6a17a] = env->getMethodID(cls, "ramBytesUsed", "()J");
                mids$[mid_remove_5fdc3f48] = env->getMethodID(cls, "remove", "(Ljava/lang/String;)V");
                mids$[mid_setMatchAlmostDiff_39c7bd3c] = env->getMethodID(cls, "setMatchAlmostDiff", "(I)V");
                mids$[mid_setNumReturnValues_39c7bd3c] = env->getMethodID(cls, "setNumReturnValues", "(I)V");
                mids$[mid_getKey_67caf3f3] = env->getMethodID(cls, "getKey", "(Lorg/apache/lucene/search/suggest/jaspell/JaspellTernarySearchTrie$TSTNode;)Ljava/lang/String;");
                mids$[mid_getNode_627fe0cf] = env->getMethodID(cls, "getNode", "(Ljava/lang/CharSequence;Lorg/apache/lucene/search/suggest/jaspell/JaspellTernarySearchTrie$TSTNode;)Lorg/apache/lucene/search/suggest/jaspell/JaspellTernarySearchTrie$TSTNode;");
                mids$[mid_getOrCreateNode_8f2fe50d] = env->getMethodID(cls, "getOrCreateNode", "(Ljava/lang/CharSequence;)Lorg/apache/lucene/search/suggest/jaspell/JaspellTernarySearchTrie$TSTNode;");
                mids$[mid_numDataNodes_8b97b83b] = env->getMethodID(cls, "numDataNodes", "(Lorg/apache/lucene/search/suggest/jaspell/JaspellTernarySearchTrie$TSTNode;)I");
                mids$[mid_numNodes_8b97b83b] = env->getMethodID(cls, "numNodes", "(Lorg/apache/lucene/search/suggest/jaspell/JaspellTernarySearchTrie$TSTNode;)I");
                mids$[mid_sortKeys_4e6ea08e] = env->getMethodID(cls, "sortKeys", "(Lorg/apache/lucene/search/suggest/jaspell/JaspellTernarySearchTrie$TSTNode;I)Ljava/util/List;");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            JaspellTernarySearchTrie::JaspellTernarySearchTrie() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

            JaspellTernarySearchTrie::JaspellTernarySearchTrie(const ::java::util::Locale & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_56b0e4b3, a0.this$)) {}

            JaspellTernarySearchTrie::JaspellTernarySearchTrie(const ::java::io::File & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_c3dacf57, a0.this$)) {}

            JaspellTernarySearchTrie::JaspellTernarySearchTrie(const ::java::io::File & a0, jboolean a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_9e00f624, a0.this$, a1)) {}

            ::java::lang::Object JaspellTernarySearchTrie::get(const ::java::lang::CharSequence & a0) const
            {
              return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_get_a739ccff], a0.this$));
            }

            ::java::lang::Float JaspellTernarySearchTrie::getAndIncrement(const ::java::lang::String & a0) const
            {
              return ::java::lang::Float(env->callObjectMethod(this$, mids$[mid_getAndIncrement_b837041d], a0.this$));
            }

            ::java::util::List JaspellTernarySearchTrie::matchAlmost(const ::java::lang::String & a0) const
            {
              return ::java::util::List(env->callObjectMethod(this$, mids$[mid_matchAlmost_0feb8f08], a0.this$));
            }

            ::java::util::List JaspellTernarySearchTrie::matchAlmost(const ::java::lang::CharSequence & a0, jint a1) const
            {
              return ::java::util::List(env->callObjectMethod(this$, mids$[mid_matchAlmost_560b361c], a0.this$, a1));
            }

            ::java::util::List JaspellTernarySearchTrie::matchPrefix(const ::java::lang::String & a0) const
            {
              return ::java::util::List(env->callObjectMethod(this$, mids$[mid_matchPrefix_0feb8f08], a0.this$));
            }

            ::java::util::List JaspellTernarySearchTrie::matchPrefix(const ::java::lang::CharSequence & a0, jint a1) const
            {
              return ::java::util::List(env->callObjectMethod(this$, mids$[mid_matchPrefix_560b361c], a0.this$, a1));
            }

            jint JaspellTernarySearchTrie::numDataNodes() const
            {
              return env->callIntMethod(this$, mids$[mid_numDataNodes_54c6a179]);
            }

            jint JaspellTernarySearchTrie::numNodes() const
            {
              return env->callIntMethod(this$, mids$[mid_numNodes_54c6a179]);
            }

            void JaspellTernarySearchTrie::put(const ::java::lang::CharSequence & a0, const ::java::lang::Object & a1) const
            {
              env->callVoidMethod(this$, mids$[mid_put_cb8bea9a], a0.this$, a1.this$);
            }

            jlong JaspellTernarySearchTrie::ramBytesUsed() const
            {
              return env->callLongMethod(this$, mids$[mid_ramBytesUsed_54c6a17a]);
            }

            void JaspellTernarySearchTrie::remove(const ::java::lang::String & a0) const
            {
              env->callVoidMethod(this$, mids$[mid_remove_5fdc3f48], a0.this$);
            }

            void JaspellTernarySearchTrie::setMatchAlmostDiff(jint a0) const
            {
              env->callVoidMethod(this$, mids$[mid_setMatchAlmostDiff_39c7bd3c], a0);
            }

            void JaspellTernarySearchTrie::setNumReturnValues(jint a0) const
            {
              env->callVoidMethod(this$, mids$[mid_setNumReturnValues_39c7bd3c], a0);
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace suggest {
          namespace jaspell {
            static PyObject *t_JaspellTernarySearchTrie_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_JaspellTernarySearchTrie_instance_(PyTypeObject *type, PyObject *arg);
            static int t_JaspellTernarySearchTrie_init_(t_JaspellTernarySearchTrie *self, PyObject *args, PyObject *kwds);
            static PyObject *t_JaspellTernarySearchTrie_get(t_JaspellTernarySearchTrie *self, PyObject *arg);
            static PyObject *t_JaspellTernarySearchTrie_getAndIncrement(t_JaspellTernarySearchTrie *self, PyObject *arg);
            static PyObject *t_JaspellTernarySearchTrie_matchAlmost(t_JaspellTernarySearchTrie *self, PyObject *args);
            static PyObject *t_JaspellTernarySearchTrie_matchPrefix(t_JaspellTernarySearchTrie *self, PyObject *args);
            static PyObject *t_JaspellTernarySearchTrie_numDataNodes(t_JaspellTernarySearchTrie *self);
            static PyObject *t_JaspellTernarySearchTrie_numNodes(t_JaspellTernarySearchTrie *self);
            static PyObject *t_JaspellTernarySearchTrie_put(t_JaspellTernarySearchTrie *self, PyObject *args);
            static PyObject *t_JaspellTernarySearchTrie_ramBytesUsed(t_JaspellTernarySearchTrie *self);
            static PyObject *t_JaspellTernarySearchTrie_remove(t_JaspellTernarySearchTrie *self, PyObject *arg);
            static PyObject *t_JaspellTernarySearchTrie_setMatchAlmostDiff(t_JaspellTernarySearchTrie *self, PyObject *arg);
            static PyObject *t_JaspellTernarySearchTrie_setNumReturnValues(t_JaspellTernarySearchTrie *self, PyObject *arg);
            static int t_JaspellTernarySearchTrie_set__matchAlmostDiff(t_JaspellTernarySearchTrie *self, PyObject *arg, void *data);
            static int t_JaspellTernarySearchTrie_set__numReturnValues(t_JaspellTernarySearchTrie *self, PyObject *arg, void *data);
            static PyGetSetDef t_JaspellTernarySearchTrie__fields_[] = {
              DECLARE_SET_FIELD(t_JaspellTernarySearchTrie, matchAlmostDiff),
              DECLARE_SET_FIELD(t_JaspellTernarySearchTrie, numReturnValues),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_JaspellTernarySearchTrie__methods_[] = {
              DECLARE_METHOD(t_JaspellTernarySearchTrie, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_JaspellTernarySearchTrie, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_JaspellTernarySearchTrie, get, METH_O),
              DECLARE_METHOD(t_JaspellTernarySearchTrie, getAndIncrement, METH_O),
              DECLARE_METHOD(t_JaspellTernarySearchTrie, matchAlmost, METH_VARARGS),
              DECLARE_METHOD(t_JaspellTernarySearchTrie, matchPrefix, METH_VARARGS),
              DECLARE_METHOD(t_JaspellTernarySearchTrie, numDataNodes, METH_NOARGS),
              DECLARE_METHOD(t_JaspellTernarySearchTrie, numNodes, METH_NOARGS),
              DECLARE_METHOD(t_JaspellTernarySearchTrie, put, METH_VARARGS),
              DECLARE_METHOD(t_JaspellTernarySearchTrie, ramBytesUsed, METH_NOARGS),
              DECLARE_METHOD(t_JaspellTernarySearchTrie, remove, METH_O),
              DECLARE_METHOD(t_JaspellTernarySearchTrie, setMatchAlmostDiff, METH_O),
              DECLARE_METHOD(t_JaspellTernarySearchTrie, setNumReturnValues, METH_O),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(JaspellTernarySearchTrie, t_JaspellTernarySearchTrie, ::java::lang::Object, JaspellTernarySearchTrie, t_JaspellTernarySearchTrie_init_, 0, 0, t_JaspellTernarySearchTrie__fields_, 0, 0);

            void t_JaspellTernarySearchTrie::install(PyObject *module)
            {
              installType(&PY_TYPE(JaspellTernarySearchTrie), module, "JaspellTernarySearchTrie", 0);
            }

            void t_JaspellTernarySearchTrie::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(JaspellTernarySearchTrie).tp_dict, "class_", make_descriptor(JaspellTernarySearchTrie::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(JaspellTernarySearchTrie).tp_dict, "wrapfn_", make_descriptor(t_JaspellTernarySearchTrie::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(JaspellTernarySearchTrie).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_JaspellTernarySearchTrie_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, JaspellTernarySearchTrie::initializeClass, 1)))
                return NULL;
              return t_JaspellTernarySearchTrie::wrap_Object(JaspellTernarySearchTrie(((t_JaspellTernarySearchTrie *) arg)->object.this$));
            }
            static PyObject *t_JaspellTernarySearchTrie_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, JaspellTernarySearchTrie::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_JaspellTernarySearchTrie_init_(t_JaspellTernarySearchTrie *self, PyObject *args, PyObject *kwds)
            {
              switch (PyTuple_GET_SIZE(args)) {
               case 0:
                {
                  JaspellTernarySearchTrie object((jobject) NULL);

                  INT_CALL(object = JaspellTernarySearchTrie());
                  self->object = object;
                  break;
                }
                goto err;
               case 1:
                {
                  ::java::util::Locale a0((jobject) NULL);
                  JaspellTernarySearchTrie object((jobject) NULL);

                  if (!parseArgs(args, "k", ::java::util::Locale::initializeClass, &a0))
                  {
                    INT_CALL(object = JaspellTernarySearchTrie(a0));
                    self->object = object;
                    break;
                  }
                }
                {
                  ::java::io::File a0((jobject) NULL);
                  JaspellTernarySearchTrie object((jobject) NULL);

                  if (!parseArgs(args, "k", ::java::io::File::initializeClass, &a0))
                  {
                    INT_CALL(object = JaspellTernarySearchTrie(a0));
                    self->object = object;
                    break;
                  }
                }
                goto err;
               case 2:
                {
                  ::java::io::File a0((jobject) NULL);
                  jboolean a1;
                  JaspellTernarySearchTrie object((jobject) NULL);

                  if (!parseArgs(args, "kZ", ::java::io::File::initializeClass, &a0, &a1))
                  {
                    INT_CALL(object = JaspellTernarySearchTrie(a0, a1));
                    self->object = object;
                    break;
                  }
                }
               default:
               err:
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_JaspellTernarySearchTrie_get(t_JaspellTernarySearchTrie *self, PyObject *arg)
            {
              ::java::lang::CharSequence a0((jobject) NULL);
              ::java::lang::Object result((jobject) NULL);

              if (!parseArg(arg, "O", &::java::lang::PY_TYPE(CharSequence), &a0))
              {
                OBJ_CALL(result = self->object.get(a0));
                return ::java::lang::t_Object::wrap_Object(result);
              }

              PyErr_SetArgsError((PyObject *) self, "get", arg);
              return NULL;
            }

            static PyObject *t_JaspellTernarySearchTrie_getAndIncrement(t_JaspellTernarySearchTrie *self, PyObject *arg)
            {
              ::java::lang::String a0((jobject) NULL);
              ::java::lang::Float result((jobject) NULL);

              if (!parseArg(arg, "s", &a0))
              {
                OBJ_CALL(result = self->object.getAndIncrement(a0));
                return ::java::lang::t_Float::wrap_Object(result);
              }

              PyErr_SetArgsError((PyObject *) self, "getAndIncrement", arg);
              return NULL;
            }

            static PyObject *t_JaspellTernarySearchTrie_matchAlmost(t_JaspellTernarySearchTrie *self, PyObject *args)
            {
              switch (PyTuple_GET_SIZE(args)) {
               case 1:
                {
                  ::java::lang::String a0((jobject) NULL);
                  ::java::util::List result((jobject) NULL);

                  if (!parseArgs(args, "s", &a0))
                  {
                    OBJ_CALL(result = self->object.matchAlmost(a0));
                    return ::java::util::t_List::wrap_Object(result, &::java::lang::PY_TYPE(String));
                  }
                }
                break;
               case 2:
                {
                  ::java::lang::CharSequence a0((jobject) NULL);
                  jint a1;
                  ::java::util::List result((jobject) NULL);

                  if (!parseArgs(args, "OI", &::java::lang::PY_TYPE(CharSequence), &a0, &a1))
                  {
                    OBJ_CALL(result = self->object.matchAlmost(a0, a1));
                    return ::java::util::t_List::wrap_Object(result, &::java::lang::PY_TYPE(String));
                  }
                }
              }

              PyErr_SetArgsError((PyObject *) self, "matchAlmost", args);
              return NULL;
            }

            static PyObject *t_JaspellTernarySearchTrie_matchPrefix(t_JaspellTernarySearchTrie *self, PyObject *args)
            {
              switch (PyTuple_GET_SIZE(args)) {
               case 1:
                {
                  ::java::lang::String a0((jobject) NULL);
                  ::java::util::List result((jobject) NULL);

                  if (!parseArgs(args, "s", &a0))
                  {
                    OBJ_CALL(result = self->object.matchPrefix(a0));
                    return ::java::util::t_List::wrap_Object(result, &::java::lang::PY_TYPE(String));
                  }
                }
                break;
               case 2:
                {
                  ::java::lang::CharSequence a0((jobject) NULL);
                  jint a1;
                  ::java::util::List result((jobject) NULL);

                  if (!parseArgs(args, "OI", &::java::lang::PY_TYPE(CharSequence), &a0, &a1))
                  {
                    OBJ_CALL(result = self->object.matchPrefix(a0, a1));
                    return ::java::util::t_List::wrap_Object(result, &::java::lang::PY_TYPE(String));
                  }
                }
              }

              PyErr_SetArgsError((PyObject *) self, "matchPrefix", args);
              return NULL;
            }

            static PyObject *t_JaspellTernarySearchTrie_numDataNodes(t_JaspellTernarySearchTrie *self)
            {
              jint result;
              OBJ_CALL(result = self->object.numDataNodes());
              return PyInt_FromLong((long) result);
            }

            static PyObject *t_JaspellTernarySearchTrie_numNodes(t_JaspellTernarySearchTrie *self)
            {
              jint result;
              OBJ_CALL(result = self->object.numNodes());
              return PyInt_FromLong((long) result);
            }

            static PyObject *t_JaspellTernarySearchTrie_put(t_JaspellTernarySearchTrie *self, PyObject *args)
            {
              ::java::lang::CharSequence a0((jobject) NULL);
              ::java::lang::Object a1((jobject) NULL);

              if (!parseArgs(args, "Oo", &::java::lang::PY_TYPE(CharSequence), &a0, &a1))
              {
                OBJ_CALL(self->object.put(a0, a1));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "put", args);
              return NULL;
            }

            static PyObject *t_JaspellTernarySearchTrie_ramBytesUsed(t_JaspellTernarySearchTrie *self)
            {
              jlong result;
              OBJ_CALL(result = self->object.ramBytesUsed());
              return PyLong_FromLongLong((PY_LONG_LONG) result);
            }

            static PyObject *t_JaspellTernarySearchTrie_remove(t_JaspellTernarySearchTrie *self, PyObject *arg)
            {
              ::java::lang::String a0((jobject) NULL);

              if (!parseArg(arg, "s", &a0))
              {
                OBJ_CALL(self->object.remove(a0));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "remove", arg);
              return NULL;
            }

            static PyObject *t_JaspellTernarySearchTrie_setMatchAlmostDiff(t_JaspellTernarySearchTrie *self, PyObject *arg)
            {
              jint a0;

              if (!parseArg(arg, "I", &a0))
              {
                OBJ_CALL(self->object.setMatchAlmostDiff(a0));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "setMatchAlmostDiff", arg);
              return NULL;
            }

            static PyObject *t_JaspellTernarySearchTrie_setNumReturnValues(t_JaspellTernarySearchTrie *self, PyObject *arg)
            {
              jint a0;

              if (!parseArg(arg, "I", &a0))
              {
                OBJ_CALL(self->object.setNumReturnValues(a0));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "setNumReturnValues", arg);
              return NULL;
            }

            static int t_JaspellTernarySearchTrie_set__matchAlmostDiff(t_JaspellTernarySearchTrie *self, PyObject *arg, void *data)
            {
              {
                jint value;
                if (!parseArg(arg, "I", &value))
                {
                  INT_CALL(self->object.setMatchAlmostDiff(value));
                  return 0;
                }
              }
              PyErr_SetArgsError((PyObject *) self, "matchAlmostDiff", arg);
              return -1;
            }

            static int t_JaspellTernarySearchTrie_set__numReturnValues(t_JaspellTernarySearchTrie *self, PyObject *arg, void *data)
            {
              {
                jint value;
                if (!parseArg(arg, "I", &value))
                {
                  INT_CALL(self->object.setNumReturnValues(value));
                  return 0;
                }
              }
              PyErr_SetArgsError((PyObject *) self, "numReturnValues", arg);
              return -1;
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/AtomicReader.h"
#include "org/apache/lucene/util/Bits.h"
#include "org/apache/lucene/index/SortedDocValues.h"
#include "org/apache/lucene/index/DocsAndPositionsEnum.h"
#include "org/apache/lucene/index/SortedNumericDocValues.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/index/Terms.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/index/FieldInfos.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "org/apache/lucene/index/Term.h"
#include "java/lang/String.h"
#include "org/apache/lucene/index/SortedSetDocValues.h"
#include "org/apache/lucene/index/Fields.h"
#include "org/apache/lucene/index/AtomicReader$CoreClosedListener.h"
#include "org/apache/lucene/index/NumericDocValues.h"
#include "org/apache/lucene/index/BinaryDocValues.h"
#include "org/apache/lucene/index/DocsEnum.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *AtomicReader::class$ = NULL;
        jmethodID *AtomicReader::mids$ = NULL;
        bool AtomicReader::live$ = false;

        jclass AtomicReader::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/AtomicReader");

            mids$ = new jmethodID[max_mid];
            mids$[mid_addCoreClosedListener_cbc2818f] = env->getMethodID(cls, "addCoreClosedListener", "(Lorg/apache/lucene/index/AtomicReader$CoreClosedListener;)V");
            mids$[mid_checkIntegrity_54c6a166] = env->getMethodID(cls, "checkIntegrity", "()V");
            mids$[mid_docFreq_7eca6a9e] = env->getMethodID(cls, "docFreq", "(Lorg/apache/lucene/index/Term;)I");
            mids$[mid_fields_77db581d] = env->getMethodID(cls, "fields", "()Lorg/apache/lucene/index/Fields;");
            mids$[mid_getBinaryDocValues_ecab96be] = env->getMethodID(cls, "getBinaryDocValues", "(Ljava/lang/String;)Lorg/apache/lucene/index/BinaryDocValues;");
            mids$[mid_getContext_c2ef2576] = env->getMethodID(cls, "getContext", "()Lorg/apache/lucene/index/AtomicReaderContext;");
            mids$[mid_getDocCount_5fdc3f57] = env->getMethodID(cls, "getDocCount", "(Ljava/lang/String;)I");
            mids$[mid_getDocsWithField_e1c6a7db] = env->getMethodID(cls, "getDocsWithField", "(Ljava/lang/String;)Lorg/apache/lucene/util/Bits;");
            mids$[mid_getFieldInfos_9ba20825] = env->getMethodID(cls, "getFieldInfos", "()Lorg/apache/lucene/index/FieldInfos;");
            mids$[mid_getLiveDocs_03c2457d] = env->getMethodID(cls, "getLiveDocs", "()Lorg/apache/lucene/util/Bits;");
            mids$[mid_getNormValues_d2b19f49] = env->getMethodID(cls, "getNormValues", "(Ljava/lang/String;)Lorg/apache/lucene/index/NumericDocValues;");
            mids$[mid_getNumericDocValues_d2b19f49] = env->getMethodID(cls, "getNumericDocValues", "(Ljava/lang/String;)Lorg/apache/lucene/index/NumericDocValues;");
            mids$[mid_getSortedDocValues_7b8b1a0a] = env->getMethodID(cls, "getSortedDocValues", "(Ljava/lang/String;)Lorg/apache/lucene/index/SortedDocValues;");
            mids$[mid_getSortedNumericDocValues_37cd1812] = env->getMethodID(cls, "getSortedNumericDocValues", "(Ljava/lang/String;)Lorg/apache/lucene/index/SortedNumericDocValues;");
            mids$[mid_getSortedSetDocValues_43e0e807] = env->getMethodID(cls, "getSortedSetDocValues", "(Ljava/lang/String;)Lorg/apache/lucene/index/SortedSetDocValues;");
            mids$[mid_getSumDocFreq_5fdc3f54] = env->getMethodID(cls, "getSumDocFreq", "(Ljava/lang/String;)J");
            mids$[mid_getSumTotalTermFreq_5fdc3f54] = env->getMethodID(cls, "getSumTotalTermFreq", "(Ljava/lang/String;)J");
            mids$[mid_hasNorms_5fdc3f44] = env->getMethodID(cls, "hasNorms", "(Ljava/lang/String;)Z");
            mids$[mid_removeCoreClosedListener_cbc2818f] = env->getMethodID(cls, "removeCoreClosedListener", "(Lorg/apache/lucene/index/AtomicReader$CoreClosedListener;)V");
            mids$[mid_termDocsEnum_d9acd275] = env->getMethodID(cls, "termDocsEnum", "(Lorg/apache/lucene/index/Term;)Lorg/apache/lucene/index/DocsEnum;");
            mids$[mid_termPositionsEnum_bf42c6a6] = env->getMethodID(cls, "termPositionsEnum", "(Lorg/apache/lucene/index/Term;)Lorg/apache/lucene/index/DocsAndPositionsEnum;");
            mids$[mid_terms_ee262ab4] = env->getMethodID(cls, "terms", "(Ljava/lang/String;)Lorg/apache/lucene/index/Terms;");
            mids$[mid_totalTermFreq_7eca6a9d] = env->getMethodID(cls, "totalTermFreq", "(Lorg/apache/lucene/index/Term;)J");
            mids$[mid_addCoreClosedListenerAsReaderClosedListener_36772e26] = env->getStaticMethodID(cls, "addCoreClosedListenerAsReaderClosedListener", "(Lorg/apache/lucene/index/IndexReader;Lorg/apache/lucene/index/AtomicReader$CoreClosedListener;)V");
            mids$[mid_removeCoreClosedListenerAsReaderClosedListener_36772e26] = env->getStaticMethodID(cls, "removeCoreClosedListenerAsReaderClosedListener", "(Lorg/apache/lucene/index/IndexReader;Lorg/apache/lucene/index/AtomicReader$CoreClosedListener;)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        void AtomicReader::addCoreClosedListener(const ::org::apache::lucene::index::AtomicReader$CoreClosedListener & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_addCoreClosedListener_cbc2818f], a0.this$);
        }

        void AtomicReader::checkIntegrity() const
        {
          env->callVoidMethod(this$, mids$[mid_checkIntegrity_54c6a166]);
        }

        jint AtomicReader::docFreq(const ::org::apache::lucene::index::Term & a0) const
        {
          return env->callIntMethod(this$, mids$[mid_docFreq_7eca6a9e], a0.this$);
        }

        ::org::apache::lucene::index::Fields AtomicReader::fields() const
        {
          return ::org::apache::lucene::index::Fields(env->callObjectMethod(this$, mids$[mid_fields_77db581d]));
        }

        ::org::apache::lucene::index::BinaryDocValues AtomicReader::getBinaryDocValues(const ::java::lang::String & a0) const
        {
          return ::org::apache::lucene::index::BinaryDocValues(env->callObjectMethod(this$, mids$[mid_getBinaryDocValues_ecab96be], a0.this$));
        }

        ::org::apache::lucene::index::AtomicReaderContext AtomicReader::getContext() const
        {
          return ::org::apache::lucene::index::AtomicReaderContext(env->callObjectMethod(this$, mids$[mid_getContext_c2ef2576]));
        }

        jint AtomicReader::getDocCount(const ::java::lang::String & a0) const
        {
          return env->callIntMethod(this$, mids$[mid_getDocCount_5fdc3f57], a0.this$);
        }

        ::org::apache::lucene::util::Bits AtomicReader::getDocsWithField(const ::java::lang::String & a0) const
        {
          return ::org::apache::lucene::util::Bits(env->callObjectMethod(this$, mids$[mid_getDocsWithField_e1c6a7db], a0.this$));
        }

        ::org::apache::lucene::index::FieldInfos AtomicReader::getFieldInfos() const
        {
          return ::org::apache::lucene::index::FieldInfos(env->callObjectMethod(this$, mids$[mid_getFieldInfos_9ba20825]));
        }

        ::org::apache::lucene::util::Bits AtomicReader::getLiveDocs() const
        {
          return ::org::apache::lucene::util::Bits(env->callObjectMethod(this$, mids$[mid_getLiveDocs_03c2457d]));
        }

        ::org::apache::lucene::index::NumericDocValues AtomicReader::getNormValues(const ::java::lang::String & a0) const
        {
          return ::org::apache::lucene::index::NumericDocValues(env->callObjectMethod(this$, mids$[mid_getNormValues_d2b19f49], a0.this$));
        }

        ::org::apache::lucene::index::NumericDocValues AtomicReader::getNumericDocValues(const ::java::lang::String & a0) const
        {
          return ::org::apache::lucene::index::NumericDocValues(env->callObjectMethod(this$, mids$[mid_getNumericDocValues_d2b19f49], a0.this$));
        }

        ::org::apache::lucene::index::SortedDocValues AtomicReader::getSortedDocValues(const ::java::lang::String & a0) const
        {
          return ::org::apache::lucene::index::SortedDocValues(env->callObjectMethod(this$, mids$[mid_getSortedDocValues_7b8b1a0a], a0.this$));
        }

        ::org::apache::lucene::index::SortedNumericDocValues AtomicReader::getSortedNumericDocValues(const ::java::lang::String & a0) const
        {
          return ::org::apache::lucene::index::SortedNumericDocValues(env->callObjectMethod(this$, mids$[mid_getSortedNumericDocValues_37cd1812], a0.this$));
        }

        ::org::apache::lucene::index::SortedSetDocValues AtomicReader::getSortedSetDocValues(const ::java::lang::String & a0) const
        {
          return ::org::apache::lucene::index::SortedSetDocValues(env->callObjectMethod(this$, mids$[mid_getSortedSetDocValues_43e0e807], a0.this$));
        }

        jlong AtomicReader::getSumDocFreq(const ::java::lang::String & a0) const
        {
          return env->callLongMethod(this$, mids$[mid_getSumDocFreq_5fdc3f54], a0.this$);
        }

        jlong AtomicReader::getSumTotalTermFreq(const ::java::lang::String & a0) const
        {
          return env->callLongMethod(this$, mids$[mid_getSumTotalTermFreq_5fdc3f54], a0.this$);
        }

        jboolean AtomicReader::hasNorms(const ::java::lang::String & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_hasNorms_5fdc3f44], a0.this$);
        }

        void AtomicReader::removeCoreClosedListener(const ::org::apache::lucene::index::AtomicReader$CoreClosedListener & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_removeCoreClosedListener_cbc2818f], a0.this$);
        }

        ::org::apache::lucene::index::DocsEnum AtomicReader::termDocsEnum(const ::org::apache::lucene::index::Term & a0) const
        {
          return ::org::apache::lucene::index::DocsEnum(env->callObjectMethod(this$, mids$[mid_termDocsEnum_d9acd275], a0.this$));
        }

        ::org::apache::lucene::index::DocsAndPositionsEnum AtomicReader::termPositionsEnum(const ::org::apache::lucene::index::Term & a0) const
        {
          return ::org::apache::lucene::index::DocsAndPositionsEnum(env->callObjectMethod(this$, mids$[mid_termPositionsEnum_bf42c6a6], a0.this$));
        }

        ::org::apache::lucene::index::Terms AtomicReader::terms(const ::java::lang::String & a0) const
        {
          return ::org::apache::lucene::index::Terms(env->callObjectMethod(this$, mids$[mid_terms_ee262ab4], a0.this$));
        }

        jlong AtomicReader::totalTermFreq(const ::org::apache::lucene::index::Term & a0) const
        {
          return env->callLongMethod(this$, mids$[mid_totalTermFreq_7eca6a9d], a0.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_AtomicReader_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_AtomicReader_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_AtomicReader_addCoreClosedListener(t_AtomicReader *self, PyObject *arg);
        static PyObject *t_AtomicReader_checkIntegrity(t_AtomicReader *self);
        static PyObject *t_AtomicReader_docFreq(t_AtomicReader *self, PyObject *args);
        static PyObject *t_AtomicReader_fields(t_AtomicReader *self);
        static PyObject *t_AtomicReader_getBinaryDocValues(t_AtomicReader *self, PyObject *arg);
        static PyObject *t_AtomicReader_getContext(t_AtomicReader *self, PyObject *args);
        static PyObject *t_AtomicReader_getDocCount(t_AtomicReader *self, PyObject *args);
        static PyObject *t_AtomicReader_getDocsWithField(t_AtomicReader *self, PyObject *arg);
        static PyObject *t_AtomicReader_getFieldInfos(t_AtomicReader *self);
        static PyObject *t_AtomicReader_getLiveDocs(t_AtomicReader *self);
        static PyObject *t_AtomicReader_getNormValues(t_AtomicReader *self, PyObject *arg);
        static PyObject *t_AtomicReader_getNumericDocValues(t_AtomicReader *self, PyObject *arg);
        static PyObject *t_AtomicReader_getSortedDocValues(t_AtomicReader *self, PyObject *arg);
        static PyObject *t_AtomicReader_getSortedNumericDocValues(t_AtomicReader *self, PyObject *arg);
        static PyObject *t_AtomicReader_getSortedSetDocValues(t_AtomicReader *self, PyObject *arg);
        static PyObject *t_AtomicReader_getSumDocFreq(t_AtomicReader *self, PyObject *args);
        static PyObject *t_AtomicReader_getSumTotalTermFreq(t_AtomicReader *self, PyObject *args);
        static PyObject *t_AtomicReader_hasNorms(t_AtomicReader *self, PyObject *arg);
        static PyObject *t_AtomicReader_removeCoreClosedListener(t_AtomicReader *self, PyObject *arg);
        static PyObject *t_AtomicReader_termDocsEnum(t_AtomicReader *self, PyObject *arg);
        static PyObject *t_AtomicReader_termPositionsEnum(t_AtomicReader *self, PyObject *arg);
        static PyObject *t_AtomicReader_terms(t_AtomicReader *self, PyObject *arg);
        static PyObject *t_AtomicReader_totalTermFreq(t_AtomicReader *self, PyObject *args);
        static PyObject *t_AtomicReader_get__context(t_AtomicReader *self, void *data);
        static PyObject *t_AtomicReader_get__fieldInfos(t_AtomicReader *self, void *data);
        static PyObject *t_AtomicReader_get__liveDocs(t_AtomicReader *self, void *data);
        static PyGetSetDef t_AtomicReader__fields_[] = {
          DECLARE_GET_FIELD(t_AtomicReader, context),
          DECLARE_GET_FIELD(t_AtomicReader, fieldInfos),
          DECLARE_GET_FIELD(t_AtomicReader, liveDocs),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_AtomicReader__methods_[] = {
          DECLARE_METHOD(t_AtomicReader, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_AtomicReader, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_AtomicReader, addCoreClosedListener, METH_O),
          DECLARE_METHOD(t_AtomicReader, checkIntegrity, METH_NOARGS),
          DECLARE_METHOD(t_AtomicReader, docFreq, METH_VARARGS),
          DECLARE_METHOD(t_AtomicReader, fields, METH_NOARGS),
          DECLARE_METHOD(t_AtomicReader, getBinaryDocValues, METH_O),
          DECLARE_METHOD(t_AtomicReader, getContext, METH_VARARGS),
          DECLARE_METHOD(t_AtomicReader, getDocCount, METH_VARARGS),
          DECLARE_METHOD(t_AtomicReader, getDocsWithField, METH_O),
          DECLARE_METHOD(t_AtomicReader, getFieldInfos, METH_NOARGS),
          DECLARE_METHOD(t_AtomicReader, getLiveDocs, METH_NOARGS),
          DECLARE_METHOD(t_AtomicReader, getNormValues, METH_O),
          DECLARE_METHOD(t_AtomicReader, getNumericDocValues, METH_O),
          DECLARE_METHOD(t_AtomicReader, getSortedDocValues, METH_O),
          DECLARE_METHOD(t_AtomicReader, getSortedNumericDocValues, METH_O),
          DECLARE_METHOD(t_AtomicReader, getSortedSetDocValues, METH_O),
          DECLARE_METHOD(t_AtomicReader, getSumDocFreq, METH_VARARGS),
          DECLARE_METHOD(t_AtomicReader, getSumTotalTermFreq, METH_VARARGS),
          DECLARE_METHOD(t_AtomicReader, hasNorms, METH_O),
          DECLARE_METHOD(t_AtomicReader, removeCoreClosedListener, METH_O),
          DECLARE_METHOD(t_AtomicReader, termDocsEnum, METH_O),
          DECLARE_METHOD(t_AtomicReader, termPositionsEnum, METH_O),
          DECLARE_METHOD(t_AtomicReader, terms, METH_O),
          DECLARE_METHOD(t_AtomicReader, totalTermFreq, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(AtomicReader, t_AtomicReader, ::org::apache::lucene::index::IndexReader, AtomicReader, abstract_init, 0, 0, t_AtomicReader__fields_, 0, 0);

        void t_AtomicReader::install(PyObject *module)
        {
          installType(&PY_TYPE(AtomicReader), module, "AtomicReader", 0);
          PyDict_SetItemString(PY_TYPE(AtomicReader).tp_dict, "CoreClosedListener", make_descriptor(&PY_TYPE(AtomicReader$CoreClosedListener)));
        }

        void t_AtomicReader::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(AtomicReader).tp_dict, "class_", make_descriptor(AtomicReader::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(AtomicReader).tp_dict, "wrapfn_", make_descriptor(t_AtomicReader::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(AtomicReader).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_AtomicReader_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, AtomicReader::initializeClass, 1)))
            return NULL;
          return t_AtomicReader::wrap_Object(AtomicReader(((t_AtomicReader *) arg)->object.this$));
        }
        static PyObject *t_AtomicReader_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, AtomicReader::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_AtomicReader_addCoreClosedListener(t_AtomicReader *self, PyObject *arg)
        {
          ::org::apache::lucene::index::AtomicReader$CoreClosedListener a0((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::index::AtomicReader$CoreClosedListener::initializeClass, &a0))
          {
            OBJ_CALL(self->object.addCoreClosedListener(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "addCoreClosedListener", arg);
          return NULL;
        }

        static PyObject *t_AtomicReader_checkIntegrity(t_AtomicReader *self)
        {
          OBJ_CALL(self->object.checkIntegrity());
          Py_RETURN_NONE;
        }

        static PyObject *t_AtomicReader_docFreq(t_AtomicReader *self, PyObject *args)
        {
          ::org::apache::lucene::index::Term a0((jobject) NULL);
          jint result;

          if (!parseArgs(args, "k", ::org::apache::lucene::index::Term::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.docFreq(a0));
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(AtomicReader), (PyObject *) self, "docFreq", args, 2);
        }

        static PyObject *t_AtomicReader_fields(t_AtomicReader *self)
        {
          ::org::apache::lucene::index::Fields result((jobject) NULL);
          OBJ_CALL(result = self->object.fields());
          return ::org::apache::lucene::index::t_Fields::wrap_Object(result);
        }

        static PyObject *t_AtomicReader_getBinaryDocValues(t_AtomicReader *self, PyObject *arg)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::index::BinaryDocValues result((jobject) NULL);

          if (!parseArg(arg, "s", &a0))
          {
            OBJ_CALL(result = self->object.getBinaryDocValues(a0));
            return ::org::apache::lucene::index::t_BinaryDocValues::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "getBinaryDocValues", arg);
          return NULL;
        }

        static PyObject *t_AtomicReader_getContext(t_AtomicReader *self, PyObject *args)
        {
          ::org::apache::lucene::index::AtomicReaderContext result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.getContext());
            return ::org::apache::lucene::index::t_AtomicReaderContext::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(AtomicReader), (PyObject *) self, "getContext", args, 2);
        }

        static PyObject *t_AtomicReader_getDocCount(t_AtomicReader *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          jint result;

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = self->object.getDocCount(a0));
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(AtomicReader), (PyObject *) self, "getDocCount", args, 2);
        }

        static PyObject *t_AtomicReader_getDocsWithField(t_AtomicReader *self, PyObject *arg)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::util::Bits result((jobject) NULL);

          if (!parseArg(arg, "s", &a0))
          {
            OBJ_CALL(result = self->object.getDocsWithField(a0));
            return ::org::apache::lucene::util::t_Bits::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "getDocsWithField", arg);
          return NULL;
        }

        static PyObject *t_AtomicReader_getFieldInfos(t_AtomicReader *self)
        {
          ::org::apache::lucene::index::FieldInfos result((jobject) NULL);
          OBJ_CALL(result = self->object.getFieldInfos());
          return ::org::apache::lucene::index::t_FieldInfos::wrap_Object(result);
        }

        static PyObject *t_AtomicReader_getLiveDocs(t_AtomicReader *self)
        {
          ::org::apache::lucene::util::Bits result((jobject) NULL);
          OBJ_CALL(result = self->object.getLiveDocs());
          return ::org::apache::lucene::util::t_Bits::wrap_Object(result);
        }

        static PyObject *t_AtomicReader_getNormValues(t_AtomicReader *self, PyObject *arg)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::index::NumericDocValues result((jobject) NULL);

          if (!parseArg(arg, "s", &a0))
          {
            OBJ_CALL(result = self->object.getNormValues(a0));
            return ::org::apache::lucene::index::t_NumericDocValues::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "getNormValues", arg);
          return NULL;
        }

        static PyObject *t_AtomicReader_getNumericDocValues(t_AtomicReader *self, PyObject *arg)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::index::NumericDocValues result((jobject) NULL);

          if (!parseArg(arg, "s", &a0))
          {
            OBJ_CALL(result = self->object.getNumericDocValues(a0));
            return ::org::apache::lucene::index::t_NumericDocValues::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "getNumericDocValues", arg);
          return NULL;
        }

        static PyObject *t_AtomicReader_getSortedDocValues(t_AtomicReader *self, PyObject *arg)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::index::SortedDocValues result((jobject) NULL);

          if (!parseArg(arg, "s", &a0))
          {
            OBJ_CALL(result = self->object.getSortedDocValues(a0));
            return ::org::apache::lucene::index::t_SortedDocValues::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "getSortedDocValues", arg);
          return NULL;
        }

        static PyObject *t_AtomicReader_getSortedNumericDocValues(t_AtomicReader *self, PyObject *arg)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::index::SortedNumericDocValues result((jobject) NULL);

          if (!parseArg(arg, "s", &a0))
          {
            OBJ_CALL(result = self->object.getSortedNumericDocValues(a0));
            return ::org::apache::lucene::index::t_SortedNumericDocValues::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "getSortedNumericDocValues", arg);
          return NULL;
        }

        static PyObject *t_AtomicReader_getSortedSetDocValues(t_AtomicReader *self, PyObject *arg)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::index::SortedSetDocValues result((jobject) NULL);

          if (!parseArg(arg, "s", &a0))
          {
            OBJ_CALL(result = self->object.getSortedSetDocValues(a0));
            return ::org::apache::lucene::index::t_SortedSetDocValues::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "getSortedSetDocValues", arg);
          return NULL;
        }

        static PyObject *t_AtomicReader_getSumDocFreq(t_AtomicReader *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          jlong result;

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = self->object.getSumDocFreq(a0));
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          return callSuper(&PY_TYPE(AtomicReader), (PyObject *) self, "getSumDocFreq", args, 2);
        }

        static PyObject *t_AtomicReader_getSumTotalTermFreq(t_AtomicReader *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          jlong result;

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = self->object.getSumTotalTermFreq(a0));
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          return callSuper(&PY_TYPE(AtomicReader), (PyObject *) self, "getSumTotalTermFreq", args, 2);
        }

        static PyObject *t_AtomicReader_hasNorms(t_AtomicReader *self, PyObject *arg)
        {
          ::java::lang::String a0((jobject) NULL);
          jboolean result;

          if (!parseArg(arg, "s", &a0))
          {
            OBJ_CALL(result = self->object.hasNorms(a0));
            Py_RETURN_BOOL(result);
          }

          PyErr_SetArgsError((PyObject *) self, "hasNorms", arg);
          return NULL;
        }

        static PyObject *t_AtomicReader_removeCoreClosedListener(t_AtomicReader *self, PyObject *arg)
        {
          ::org::apache::lucene::index::AtomicReader$CoreClosedListener a0((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::index::AtomicReader$CoreClosedListener::initializeClass, &a0))
          {
            OBJ_CALL(self->object.removeCoreClosedListener(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "removeCoreClosedListener", arg);
          return NULL;
        }

        static PyObject *t_AtomicReader_termDocsEnum(t_AtomicReader *self, PyObject *arg)
        {
          ::org::apache::lucene::index::Term a0((jobject) NULL);
          ::org::apache::lucene::index::DocsEnum result((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::index::Term::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.termDocsEnum(a0));
            return ::org::apache::lucene::index::t_DocsEnum::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "termDocsEnum", arg);
          return NULL;
        }

        static PyObject *t_AtomicReader_termPositionsEnum(t_AtomicReader *self, PyObject *arg)
        {
          ::org::apache::lucene::index::Term a0((jobject) NULL);
          ::org::apache::lucene::index::DocsAndPositionsEnum result((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::index::Term::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.termPositionsEnum(a0));
            return ::org::apache::lucene::index::t_DocsAndPositionsEnum::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "termPositionsEnum", arg);
          return NULL;
        }

        static PyObject *t_AtomicReader_terms(t_AtomicReader *self, PyObject *arg)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::index::Terms result((jobject) NULL);

          if (!parseArg(arg, "s", &a0))
          {
            OBJ_CALL(result = self->object.terms(a0));
            return ::org::apache::lucene::index::t_Terms::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "terms", arg);
          return NULL;
        }

        static PyObject *t_AtomicReader_totalTermFreq(t_AtomicReader *self, PyObject *args)
        {
          ::org::apache::lucene::index::Term a0((jobject) NULL);
          jlong result;

          if (!parseArgs(args, "k", ::org::apache::lucene::index::Term::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.totalTermFreq(a0));
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          return callSuper(&PY_TYPE(AtomicReader), (PyObject *) self, "totalTermFreq", args, 2);
        }

        static PyObject *t_AtomicReader_get__context(t_AtomicReader *self, void *data)
        {
          ::org::apache::lucene::index::AtomicReaderContext value((jobject) NULL);
          OBJ_CALL(value = self->object.getContext());
          return ::org::apache::lucene::index::t_AtomicReaderContext::wrap_Object(value);
        }

        static PyObject *t_AtomicReader_get__fieldInfos(t_AtomicReader *self, void *data)
        {
          ::org::apache::lucene::index::FieldInfos value((jobject) NULL);
          OBJ_CALL(value = self->object.getFieldInfos());
          return ::org::apache::lucene::index::t_FieldInfos::wrap_Object(value);
        }

        static PyObject *t_AtomicReader_get__liveDocs(t_AtomicReader *self, void *data)
        {
          ::org::apache::lucene::util::Bits value((jobject) NULL);
          OBJ_CALL(value = self->object.getLiveDocs());
          return ::org::apache::lucene::util::t_Bits::wrap_Object(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/nl/DutchAnalyzer.h"
#include "java/lang/String.h"
#include "org/apache/lucene/util/Version.h"
#include "org/apache/lucene/analysis/util/CharArrayMap.h"
#include "org/apache/lucene/analysis/util/CharArraySet.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace nl {

          ::java::lang::Class *DutchAnalyzer::class$ = NULL;
          jmethodID *DutchAnalyzer::mids$ = NULL;
          bool DutchAnalyzer::live$ = false;
          ::java::lang::String *DutchAnalyzer::DEFAULT_STOPWORD_FILE = NULL;

          jclass DutchAnalyzer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/nl/DutchAnalyzer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_0d96cf33] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;)V");
              mids$[mid_init$_83eafe28] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/analysis/util/CharArraySet;)V");
              mids$[mid_init$_c9d7e4a3] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/analysis/util/CharArraySet;Lorg/apache/lucene/analysis/util/CharArraySet;)V");
              mids$[mid_init$_0a2f8356] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/analysis/util/CharArraySet;Lorg/apache/lucene/analysis/util/CharArraySet;Lorg/apache/lucene/analysis/util/CharArrayMap;)V");
              mids$[mid_getDefaultStopSet_d2d3505c] = env->getStaticMethodID(cls, "getDefaultStopSet", "()Lorg/apache/lucene/analysis/util/CharArraySet;");
              mids$[mid_createComponents_1be39cae] = env->getMethodID(cls, "createComponents", "(Ljava/lang/String;Ljava/io/Reader;)Lorg/apache/lucene/analysis/Analyzer$TokenStreamComponents;");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              DEFAULT_STOPWORD_FILE = new ::java::lang::String(env->getStaticObjectField(cls, "DEFAULT_STOPWORD_FILE", "Ljava/lang/String;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          DutchAnalyzer::DutchAnalyzer(const ::org::apache::lucene::util::Version & a0) : ::org::apache::lucene::analysis::Analyzer(env->newObject(initializeClass, &mids$, mid_init$_0d96cf33, a0.this$)) {}

          DutchAnalyzer::DutchAnalyzer(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::analysis::util::CharArraySet & a1) : ::org::apache::lucene::analysis::Analyzer(env->newObject(initializeClass, &mids$, mid_init$_83eafe28, a0.this$, a1.this$)) {}

          DutchAnalyzer::DutchAnalyzer(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::analysis::util::CharArraySet & a1, const ::org::apache::lucene::analysis::util::CharArraySet & a2) : ::org::apache::lucene::analysis::Analyzer(env->newObject(initializeClass, &mids$, mid_init$_c9d7e4a3, a0.this$, a1.this$, a2.this$)) {}

          DutchAnalyzer::DutchAnalyzer(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::analysis::util::CharArraySet & a1, const ::org::apache::lucene::analysis::util::CharArraySet & a2, const ::org::apache::lucene::analysis::util::CharArrayMap & a3) : ::org::apache::lucene::analysis::Analyzer(env->newObject(initializeClass, &mids$, mid_init$_0a2f8356, a0.this$, a1.this$, a2.this$, a3.this$)) {}

          ::org::apache::lucene::analysis::util::CharArraySet DutchAnalyzer::getDefaultStopSet()
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::analysis::util::CharArraySet(env->callStaticObjectMethod(cls, mids$[mid_getDefaultStopSet_d2d3505c]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace nl {
          static PyObject *t_DutchAnalyzer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_DutchAnalyzer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_DutchAnalyzer_init_(t_DutchAnalyzer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_DutchAnalyzer_getDefaultStopSet(PyTypeObject *type);
          static PyObject *t_DutchAnalyzer_get__defaultStopSet(t_DutchAnalyzer *self, void *data);
          static PyGetSetDef t_DutchAnalyzer__fields_[] = {
            DECLARE_GET_FIELD(t_DutchAnalyzer, defaultStopSet),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_DutchAnalyzer__methods_[] = {
            DECLARE_METHOD(t_DutchAnalyzer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_DutchAnalyzer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_DutchAnalyzer, getDefaultStopSet, METH_NOARGS | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(DutchAnalyzer, t_DutchAnalyzer, ::org::apache::lucene::analysis::Analyzer, DutchAnalyzer, t_DutchAnalyzer_init_, 0, 0, t_DutchAnalyzer__fields_, 0, 0);

          void t_DutchAnalyzer::install(PyObject *module)
          {
            installType(&PY_TYPE(DutchAnalyzer), module, "DutchAnalyzer", 0);
          }

          void t_DutchAnalyzer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(DutchAnalyzer).tp_dict, "class_", make_descriptor(DutchAnalyzer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(DutchAnalyzer).tp_dict, "wrapfn_", make_descriptor(t_DutchAnalyzer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(DutchAnalyzer).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(DutchAnalyzer::initializeClass);
            PyDict_SetItemString(PY_TYPE(DutchAnalyzer).tp_dict, "DEFAULT_STOPWORD_FILE", make_descriptor(j2p(*DutchAnalyzer::DEFAULT_STOPWORD_FILE)));
          }

          static PyObject *t_DutchAnalyzer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, DutchAnalyzer::initializeClass, 1)))
              return NULL;
            return t_DutchAnalyzer::wrap_Object(DutchAnalyzer(((t_DutchAnalyzer *) arg)->object.this$));
          }
          static PyObject *t_DutchAnalyzer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, DutchAnalyzer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_DutchAnalyzer_init_(t_DutchAnalyzer *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                DutchAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "K", ::org::apache::lucene::util::Version::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_))
                {
                  INT_CALL(object = DutchAnalyzer(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 2:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                ::org::apache::lucene::analysis::util::CharArraySet a1((jobject) NULL);
                PyTypeObject **p1;
                DutchAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "KK", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1, &p1, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_))
                {
                  INT_CALL(object = DutchAnalyzer(a0, a1));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 3:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                ::org::apache::lucene::analysis::util::CharArraySet a1((jobject) NULL);
                PyTypeObject **p1;
                ::org::apache::lucene::analysis::util::CharArraySet a2((jobject) NULL);
                PyTypeObject **p2;
                DutchAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "KKK", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1, &p1, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_, &a2, &p2, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_))
                {
                  INT_CALL(object = DutchAnalyzer(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 4:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                ::org::apache::lucene::analysis::util::CharArraySet a1((jobject) NULL);
                PyTypeObject **p1;
                ::org::apache::lucene::analysis::util::CharArraySet a2((jobject) NULL);
                PyTypeObject **p2;
                ::org::apache::lucene::analysis::util::CharArrayMap a3((jobject) NULL);
                PyTypeObject **p3;
                DutchAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "KKKK", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, ::org::apache::lucene::analysis::util::CharArrayMap::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1, &p1, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_, &a2, &p2, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_, &a3, &p3, ::org::apache::lucene::analysis::util::t_CharArrayMap::parameters_))
                {
                  INT_CALL(object = DutchAnalyzer(a0, a1, a2, a3));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_DutchAnalyzer_getDefaultStopSet(PyTypeObject *type)
          {
            ::org::apache::lucene::analysis::util::CharArraySet result((jobject) NULL);
            OBJ_CALL(result = ::org::apache::lucene::analysis::nl::DutchAnalyzer::getDefaultStopSet());
            return ::org::apache::lucene::analysis::util::t_CharArraySet::wrap_Object(result);
          }

          static PyObject *t_DutchAnalyzer_get__defaultStopSet(t_DutchAnalyzer *self, void *data)
          {
            ::org::apache::lucene::analysis::util::CharArraySet value((jobject) NULL);
            OBJ_CALL(value = self->object.getDefaultStopSet());
            return ::org::apache::lucene::analysis::util::t_CharArraySet::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/grouping/AbstractFirstPassGroupingCollector.h"
#include "org/apache/lucene/search/grouping/SearchGroup.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "java/util/Collection.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/search/Sort.h"
#include "org/apache/lucene/search/Scorer.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace grouping {

          ::java::lang::Class *AbstractFirstPassGroupingCollector::class$ = NULL;
          jmethodID *AbstractFirstPassGroupingCollector::mids$ = NULL;
          bool AbstractFirstPassGroupingCollector::live$ = false;

          jclass AbstractFirstPassGroupingCollector::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/grouping/AbstractFirstPassGroupingCollector");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_d50ac7b4] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/Sort;I)V");
              mids$[mid_acceptsDocsOutOfOrder_54c6a16a] = env->getMethodID(cls, "acceptsDocsOutOfOrder", "()Z");
              mids$[mid_collect_39c7bd3c] = env->getMethodID(cls, "collect", "(I)V");
              mids$[mid_getTopGroups_1d16f88d] = env->getMethodID(cls, "getTopGroups", "(IZ)Ljava/util/Collection;");
              mids$[mid_setNextReader_a6f59947] = env->getMethodID(cls, "setNextReader", "(Lorg/apache/lucene/index/AtomicReaderContext;)V");
              mids$[mid_setScorer_8be0880c] = env->getMethodID(cls, "setScorer", "(Lorg/apache/lucene/search/Scorer;)V");
              mids$[mid_getDocGroupValue_29be6a55] = env->getMethodID(cls, "getDocGroupValue", "(I)Ljava/lang/Object;");
              mids$[mid_copyDocGroupValue_537d5bdf] = env->getMethodID(cls, "copyDocGroupValue", "(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          AbstractFirstPassGroupingCollector::AbstractFirstPassGroupingCollector(const ::org::apache::lucene::search::Sort & a0, jint a1) : ::org::apache::lucene::search::Collector(env->newObject(initializeClass, &mids$, mid_init$_d50ac7b4, a0.this$, a1)) {}

          jboolean AbstractFirstPassGroupingCollector::acceptsDocsOutOfOrder() const
          {
            return env->callBooleanMethod(this$, mids$[mid_acceptsDocsOutOfOrder_54c6a16a]);
          }

          void AbstractFirstPassGroupingCollector::collect(jint a0) const
          {
            env->callVoidMethod(this$, mids$[mid_collect_39c7bd3c], a0);
          }

          ::java::util::Collection AbstractFirstPassGroupingCollector::getTopGroups(jint a0, jboolean a1) const
          {
            return ::java::util::Collection(env->callObjectMethod(this$, mids$[mid_getTopGroups_1d16f88d], a0, a1));
          }

          void AbstractFirstPassGroupingCollector::setNextReader(const ::org::apache::lucene::index::AtomicReaderContext & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setNextReader_a6f59947], a0.this$);
          }

          void AbstractFirstPassGroupingCollector::setScorer(const ::org::apache::lucene::search::Scorer & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setScorer_8be0880c], a0.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace grouping {
          static PyObject *t_AbstractFirstPassGroupingCollector_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_AbstractFirstPassGroupingCollector_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_AbstractFirstPassGroupingCollector_of_(t_AbstractFirstPassGroupingCollector *self, PyObject *args);
          static int t_AbstractFirstPassGroupingCollector_init_(t_AbstractFirstPassGroupingCollector *self, PyObject *args, PyObject *kwds);
          static PyObject *t_AbstractFirstPassGroupingCollector_acceptsDocsOutOfOrder(t_AbstractFirstPassGroupingCollector *self, PyObject *args);
          static PyObject *t_AbstractFirstPassGroupingCollector_collect(t_AbstractFirstPassGroupingCollector *self, PyObject *args);
          static PyObject *t_AbstractFirstPassGroupingCollector_getTopGroups(t_AbstractFirstPassGroupingCollector *self, PyObject *args);
          static PyObject *t_AbstractFirstPassGroupingCollector_setNextReader(t_AbstractFirstPassGroupingCollector *self, PyObject *args);
          static PyObject *t_AbstractFirstPassGroupingCollector_setScorer(t_AbstractFirstPassGroupingCollector *self, PyObject *args);
          static int t_AbstractFirstPassGroupingCollector_set__nextReader(t_AbstractFirstPassGroupingCollector *self, PyObject *arg, void *data);
          static int t_AbstractFirstPassGroupingCollector_set__scorer(t_AbstractFirstPassGroupingCollector *self, PyObject *arg, void *data);
          static PyObject *t_AbstractFirstPassGroupingCollector_get__parameters_(t_AbstractFirstPassGroupingCollector *self, void *data);
          static PyGetSetDef t_AbstractFirstPassGroupingCollector__fields_[] = {
            DECLARE_SET_FIELD(t_AbstractFirstPassGroupingCollector, nextReader),
            DECLARE_SET_FIELD(t_AbstractFirstPassGroupingCollector, scorer),
            DECLARE_GET_FIELD(t_AbstractFirstPassGroupingCollector, parameters_),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_AbstractFirstPassGroupingCollector__methods_[] = {
            DECLARE_METHOD(t_AbstractFirstPassGroupingCollector, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_AbstractFirstPassGroupingCollector, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_AbstractFirstPassGroupingCollector, of_, METH_VARARGS),
            DECLARE_METHOD(t_AbstractFirstPassGroupingCollector, acceptsDocsOutOfOrder, METH_VARARGS),
            DECLARE_METHOD(t_AbstractFirstPassGroupingCollector, collect, METH_VARARGS),
            DECLARE_METHOD(t_AbstractFirstPassGroupingCollector, getTopGroups, METH_VARARGS),
            DECLARE_METHOD(t_AbstractFirstPassGroupingCollector, setNextReader, METH_VARARGS),
            DECLARE_METHOD(t_AbstractFirstPassGroupingCollector, setScorer, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(AbstractFirstPassGroupingCollector, t_AbstractFirstPassGroupingCollector, ::org::apache::lucene::search::Collector, AbstractFirstPassGroupingCollector, t_AbstractFirstPassGroupingCollector_init_, 0, 0, t_AbstractFirstPassGroupingCollector__fields_, 0, 0);
          PyObject *t_AbstractFirstPassGroupingCollector::wrap_Object(const AbstractFirstPassGroupingCollector& object, PyTypeObject *p0)
          {
            PyObject *obj = t_AbstractFirstPassGroupingCollector::wrap_Object(object);
            if (obj != NULL && obj != Py_None)
            {
              t_AbstractFirstPassGroupingCollector *self = (t_AbstractFirstPassGroupingCollector *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          PyObject *t_AbstractFirstPassGroupingCollector::wrap_jobject(const jobject& object, PyTypeObject *p0)
          {
            PyObject *obj = t_AbstractFirstPassGroupingCollector::wrap_jobject(object);
            if (obj != NULL && obj != Py_None)
            {
              t_AbstractFirstPassGroupingCollector *self = (t_AbstractFirstPassGroupingCollector *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          void t_AbstractFirstPassGroupingCollector::install(PyObject *module)
          {
            installType(&PY_TYPE(AbstractFirstPassGroupingCollector), module, "AbstractFirstPassGroupingCollector", 0);
          }

          void t_AbstractFirstPassGroupingCollector::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(AbstractFirstPassGroupingCollector).tp_dict, "class_", make_descriptor(AbstractFirstPassGroupingCollector::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(AbstractFirstPassGroupingCollector).tp_dict, "wrapfn_", make_descriptor(t_AbstractFirstPassGroupingCollector::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(AbstractFirstPassGroupingCollector).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_AbstractFirstPassGroupingCollector_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, AbstractFirstPassGroupingCollector::initializeClass, 1)))
              return NULL;
            return t_AbstractFirstPassGroupingCollector::wrap_Object(AbstractFirstPassGroupingCollector(((t_AbstractFirstPassGroupingCollector *) arg)->object.this$));
          }
          static PyObject *t_AbstractFirstPassGroupingCollector_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, AbstractFirstPassGroupingCollector::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_AbstractFirstPassGroupingCollector_of_(t_AbstractFirstPassGroupingCollector *self, PyObject *args)
          {
            if (!parseArg(args, "T", 1, &(self->parameters)))
              Py_RETURN_SELF;
            return PyErr_SetArgsError((PyObject *) self, "of_", args);
          }

          static int t_AbstractFirstPassGroupingCollector_init_(t_AbstractFirstPassGroupingCollector *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::search::Sort a0((jobject) NULL);
            jint a1;
            AbstractFirstPassGroupingCollector object((jobject) NULL);

            if (!parseArgs(args, "kI", ::org::apache::lucene::search::Sort::initializeClass, &a0, &a1))
            {
              INT_CALL(object = AbstractFirstPassGroupingCollector(a0, a1));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_AbstractFirstPassGroupingCollector_acceptsDocsOutOfOrder(t_AbstractFirstPassGroupingCollector *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.acceptsDocsOutOfOrder());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(AbstractFirstPassGroupingCollector), (PyObject *) self, "acceptsDocsOutOfOrder", args, 2);
          }

          static PyObject *t_AbstractFirstPassGroupingCollector_collect(t_AbstractFirstPassGroupingCollector *self, PyObject *args)
          {
            jint a0;

            if (!parseArgs(args, "I", &a0))
            {
              OBJ_CALL(self->object.collect(a0));
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(AbstractFirstPassGroupingCollector), (PyObject *) self, "collect", args, 2);
          }

          static PyObject *t_AbstractFirstPassGroupingCollector_getTopGroups(t_AbstractFirstPassGroupingCollector *self, PyObject *args)
          {
            jint a0;
            jboolean a1;
            ::java::util::Collection result((jobject) NULL);

            if (!parseArgs(args, "IZ", &a0, &a1))
            {
              OBJ_CALL(result = self->object.getTopGroups(a0, a1));
              return ::java::util::t_Collection::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "getTopGroups", args);
            return NULL;
          }

          static PyObject *t_AbstractFirstPassGroupingCollector_setNextReader(t_AbstractFirstPassGroupingCollector *self, PyObject *args)
          {
            ::org::apache::lucene::index::AtomicReaderContext a0((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &a0))
            {
              OBJ_CALL(self->object.setNextReader(a0));
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(AbstractFirstPassGroupingCollector), (PyObject *) self, "setNextReader", args, 2);
          }

          static PyObject *t_AbstractFirstPassGroupingCollector_setScorer(t_AbstractFirstPassGroupingCollector *self, PyObject *args)
          {
            ::org::apache::lucene::search::Scorer a0((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::search::Scorer::initializeClass, &a0))
            {
              OBJ_CALL(self->object.setScorer(a0));
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(AbstractFirstPassGroupingCollector), (PyObject *) self, "setScorer", args, 2);
          }
          static PyObject *t_AbstractFirstPassGroupingCollector_get__parameters_(t_AbstractFirstPassGroupingCollector *self, void *data)
          {
            return typeParameters(self->parameters, sizeof(self->parameters));
          }

          static int t_AbstractFirstPassGroupingCollector_set__nextReader(t_AbstractFirstPassGroupingCollector *self, PyObject *arg, void *data)
          {
            {
              ::org::apache::lucene::index::AtomicReaderContext value((jobject) NULL);
              if (!parseArg(arg, "k", ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &value))
              {
                INT_CALL(self->object.setNextReader(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "nextReader", arg);
            return -1;
          }

          static int t_AbstractFirstPassGroupingCollector_set__scorer(t_AbstractFirstPassGroupingCollector *self, PyObject *arg, void *data)
          {
            {
              ::org::apache::lucene::search::Scorer value((jobject) NULL);
              if (!parseArg(arg, "k", ::org::apache::lucene::search::Scorer::initializeClass, &value))
              {
                INT_CALL(self->object.setScorer(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "scorer", arg);
            return -1;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/gl/GalicianMinimalStemmer.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace gl {

          ::java::lang::Class *GalicianMinimalStemmer::class$ = NULL;
          jmethodID *GalicianMinimalStemmer::mids$ = NULL;
          bool GalicianMinimalStemmer::live$ = false;

          jclass GalicianMinimalStemmer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/gl/GalicianMinimalStemmer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_stem_ec6430eb] = env->getMethodID(cls, "stem", "([CI)I");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          GalicianMinimalStemmer::GalicianMinimalStemmer() : ::org::apache::lucene::analysis::pt::RSLPStemmerBase(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          jint GalicianMinimalStemmer::stem(const JArray< jchar > & a0, jint a1) const
          {
            return env->callIntMethod(this$, mids$[mid_stem_ec6430eb], a0.this$, a1);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace gl {
          static PyObject *t_GalicianMinimalStemmer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_GalicianMinimalStemmer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_GalicianMinimalStemmer_init_(t_GalicianMinimalStemmer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_GalicianMinimalStemmer_stem(t_GalicianMinimalStemmer *self, PyObject *args);

          static PyMethodDef t_GalicianMinimalStemmer__methods_[] = {
            DECLARE_METHOD(t_GalicianMinimalStemmer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_GalicianMinimalStemmer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_GalicianMinimalStemmer, stem, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(GalicianMinimalStemmer, t_GalicianMinimalStemmer, ::org::apache::lucene::analysis::pt::RSLPStemmerBase, GalicianMinimalStemmer, t_GalicianMinimalStemmer_init_, 0, 0, 0, 0, 0);

          void t_GalicianMinimalStemmer::install(PyObject *module)
          {
            installType(&PY_TYPE(GalicianMinimalStemmer), module, "GalicianMinimalStemmer", 0);
          }

          void t_GalicianMinimalStemmer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(GalicianMinimalStemmer).tp_dict, "class_", make_descriptor(GalicianMinimalStemmer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(GalicianMinimalStemmer).tp_dict, "wrapfn_", make_descriptor(t_GalicianMinimalStemmer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(GalicianMinimalStemmer).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_GalicianMinimalStemmer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, GalicianMinimalStemmer::initializeClass, 1)))
              return NULL;
            return t_GalicianMinimalStemmer::wrap_Object(GalicianMinimalStemmer(((t_GalicianMinimalStemmer *) arg)->object.this$));
          }
          static PyObject *t_GalicianMinimalStemmer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, GalicianMinimalStemmer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_GalicianMinimalStemmer_init_(t_GalicianMinimalStemmer *self, PyObject *args, PyObject *kwds)
          {
            GalicianMinimalStemmer object((jobject) NULL);

            INT_CALL(object = GalicianMinimalStemmer());
            self->object = object;

            return 0;
          }

          static PyObject *t_GalicianMinimalStemmer_stem(t_GalicianMinimalStemmer *self, PyObject *args)
          {
            JArray< jchar > a0((jobject) NULL);
            jint a1;
            jint result;

            if (!parseArgs(args, "[CI", &a0, &a1))
            {
              OBJ_CALL(result = self->object.stem(a0, a1));
              return PyInt_FromLong((long) result);
            }

            PyErr_SetArgsError((PyObject *) self, "stem", args);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/document/BinaryDocValuesField.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "org/apache/lucene/document/FieldType.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace document {

        ::java::lang::Class *BinaryDocValuesField::class$ = NULL;
        jmethodID *BinaryDocValuesField::mids$ = NULL;
        bool BinaryDocValuesField::live$ = false;
        ::org::apache::lucene::document::FieldType *BinaryDocValuesField::TYPE = NULL;

        jclass BinaryDocValuesField::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/document/BinaryDocValuesField");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_43cce44e] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Lorg/apache/lucene/util/BytesRef;)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            cls = (jclass) class$->this$;

            TYPE = new ::org::apache::lucene::document::FieldType(env->getStaticObjectField(cls, "TYPE", "Lorg/apache/lucene/document/FieldType;"));
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        BinaryDocValuesField::BinaryDocValuesField(const ::java::lang::String & a0, const ::org::apache::lucene::util::BytesRef & a1) : ::org::apache::lucene::document::Field(env->newObject(initializeClass, &mids$, mid_init$_43cce44e, a0.this$, a1.this$)) {}
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace document {
        static PyObject *t_BinaryDocValuesField_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_BinaryDocValuesField_instance_(PyTypeObject *type, PyObject *arg);
        static int t_BinaryDocValuesField_init_(t_BinaryDocValuesField *self, PyObject *args, PyObject *kwds);

        static PyMethodDef t_BinaryDocValuesField__methods_[] = {
          DECLARE_METHOD(t_BinaryDocValuesField, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_BinaryDocValuesField, instance_, METH_O | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(BinaryDocValuesField, t_BinaryDocValuesField, ::org::apache::lucene::document::Field, BinaryDocValuesField, t_BinaryDocValuesField_init_, 0, 0, 0, 0, 0);

        void t_BinaryDocValuesField::install(PyObject *module)
        {
          installType(&PY_TYPE(BinaryDocValuesField), module, "BinaryDocValuesField", 0);
        }

        void t_BinaryDocValuesField::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(BinaryDocValuesField).tp_dict, "class_", make_descriptor(BinaryDocValuesField::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(BinaryDocValuesField).tp_dict, "wrapfn_", make_descriptor(t_BinaryDocValuesField::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(BinaryDocValuesField).tp_dict, "boxfn_", make_descriptor(boxObject));
          env->getClass(BinaryDocValuesField::initializeClass);
          PyDict_SetItemString(PY_TYPE(BinaryDocValuesField).tp_dict, "TYPE", make_descriptor(::org::apache::lucene::document::t_FieldType::wrap_Object(*BinaryDocValuesField::TYPE)));
        }

        static PyObject *t_BinaryDocValuesField_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, BinaryDocValuesField::initializeClass, 1)))
            return NULL;
          return t_BinaryDocValuesField::wrap_Object(BinaryDocValuesField(((t_BinaryDocValuesField *) arg)->object.this$));
        }
        static PyObject *t_BinaryDocValuesField_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, BinaryDocValuesField::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_BinaryDocValuesField_init_(t_BinaryDocValuesField *self, PyObject *args, PyObject *kwds)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::util::BytesRef a1((jobject) NULL);
          BinaryDocValuesField object((jobject) NULL);

          if (!parseArgs(args, "sk", ::org::apache::lucene::util::BytesRef::initializeClass, &a0, &a1))
          {
            INT_CALL(object = BinaryDocValuesField(a0, a1));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/lucene40/Lucene40SegmentInfoReader.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/store/IOContext.h"
#include "org/apache/lucene/store/Directory.h"
#include "org/apache/lucene/index/SegmentInfo.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace lucene40 {

          ::java::lang::Class *Lucene40SegmentInfoReader::class$ = NULL;
          jmethodID *Lucene40SegmentInfoReader::mids$ = NULL;
          bool Lucene40SegmentInfoReader::live$ = false;

          jclass Lucene40SegmentInfoReader::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/lucene40/Lucene40SegmentInfoReader");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_read_ff05cda4] = env->getMethodID(cls, "read", "(Lorg/apache/lucene/store/Directory;Ljava/lang/String;Lorg/apache/lucene/store/IOContext;)Lorg/apache/lucene/index/SegmentInfo;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          Lucene40SegmentInfoReader::Lucene40SegmentInfoReader() : ::org::apache::lucene::codecs::SegmentInfoReader(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          ::org::apache::lucene::index::SegmentInfo Lucene40SegmentInfoReader::read(const ::org::apache::lucene::store::Directory & a0, const ::java::lang::String & a1, const ::org::apache::lucene::store::IOContext & a2) const
          {
            return ::org::apache::lucene::index::SegmentInfo(env->callObjectMethod(this$, mids$[mid_read_ff05cda4], a0.this$, a1.this$, a2.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace lucene40 {
          static PyObject *t_Lucene40SegmentInfoReader_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Lucene40SegmentInfoReader_instance_(PyTypeObject *type, PyObject *arg);
          static int t_Lucene40SegmentInfoReader_init_(t_Lucene40SegmentInfoReader *self, PyObject *args, PyObject *kwds);
          static PyObject *t_Lucene40SegmentInfoReader_read(t_Lucene40SegmentInfoReader *self, PyObject *args);

          static PyMethodDef t_Lucene40SegmentInfoReader__methods_[] = {
            DECLARE_METHOD(t_Lucene40SegmentInfoReader, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lucene40SegmentInfoReader, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lucene40SegmentInfoReader, read, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(Lucene40SegmentInfoReader, t_Lucene40SegmentInfoReader, ::org::apache::lucene::codecs::SegmentInfoReader, Lucene40SegmentInfoReader, t_Lucene40SegmentInfoReader_init_, 0, 0, 0, 0, 0);

          void t_Lucene40SegmentInfoReader::install(PyObject *module)
          {
            installType(&PY_TYPE(Lucene40SegmentInfoReader), module, "Lucene40SegmentInfoReader", 0);
          }

          void t_Lucene40SegmentInfoReader::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(Lucene40SegmentInfoReader).tp_dict, "class_", make_descriptor(Lucene40SegmentInfoReader::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(Lucene40SegmentInfoReader).tp_dict, "wrapfn_", make_descriptor(t_Lucene40SegmentInfoReader::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(Lucene40SegmentInfoReader).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_Lucene40SegmentInfoReader_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, Lucene40SegmentInfoReader::initializeClass, 1)))
              return NULL;
            return t_Lucene40SegmentInfoReader::wrap_Object(Lucene40SegmentInfoReader(((t_Lucene40SegmentInfoReader *) arg)->object.this$));
          }
          static PyObject *t_Lucene40SegmentInfoReader_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, Lucene40SegmentInfoReader::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_Lucene40SegmentInfoReader_init_(t_Lucene40SegmentInfoReader *self, PyObject *args, PyObject *kwds)
          {
            Lucene40SegmentInfoReader object((jobject) NULL);

            INT_CALL(object = Lucene40SegmentInfoReader());
            self->object = object;

            return 0;
          }

          static PyObject *t_Lucene40SegmentInfoReader_read(t_Lucene40SegmentInfoReader *self, PyObject *args)
          {
            ::org::apache::lucene::store::Directory a0((jobject) NULL);
            ::java::lang::String a1((jobject) NULL);
            ::org::apache::lucene::store::IOContext a2((jobject) NULL);
            ::org::apache::lucene::index::SegmentInfo result((jobject) NULL);

            if (!parseArgs(args, "ksk", ::org::apache::lucene::store::Directory::initializeClass, ::org::apache::lucene::store::IOContext::initializeClass, &a0, &a1, &a2))
            {
              OBJ_CALL(result = self->object.read(a0, a1, a2));
              return ::org::apache::lucene::index::t_SegmentInfo::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(Lucene40SegmentInfoReader), (PyObject *) self, "read", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/standard/builders/TermRangeQueryNodeBuilder.h"
#include "org/apache/lucene/search/TermRangeQuery.h"
#include "org/apache/lucene/queryparser/flexible/core/QueryNodeException.h"
#include "org/apache/lucene/queryparser/flexible/standard/builders/StandardQueryBuilder.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/QueryNode.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace builders {

              ::java::lang::Class *TermRangeQueryNodeBuilder::class$ = NULL;
              jmethodID *TermRangeQueryNodeBuilder::mids$ = NULL;
              bool TermRangeQueryNodeBuilder::live$ = false;

              jclass TermRangeQueryNodeBuilder::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/standard/builders/TermRangeQueryNodeBuilder");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
                  mids$[mid_build_fc6e9165] = env->getMethodID(cls, "build", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;)Lorg/apache/lucene/search/TermRangeQuery;");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              TermRangeQueryNodeBuilder::TermRangeQueryNodeBuilder() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

              ::org::apache::lucene::search::TermRangeQuery TermRangeQueryNodeBuilder::build(const ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode & a0) const
              {
                return ::org::apache::lucene::search::TermRangeQuery(env->callObjectMethod(this$, mids$[mid_build_fc6e9165], a0.this$));
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace builders {
              static PyObject *t_TermRangeQueryNodeBuilder_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_TermRangeQueryNodeBuilder_instance_(PyTypeObject *type, PyObject *arg);
              static int t_TermRangeQueryNodeBuilder_init_(t_TermRangeQueryNodeBuilder *self, PyObject *args, PyObject *kwds);
              static PyObject *t_TermRangeQueryNodeBuilder_build(t_TermRangeQueryNodeBuilder *self, PyObject *arg);

              static PyMethodDef t_TermRangeQueryNodeBuilder__methods_[] = {
                DECLARE_METHOD(t_TermRangeQueryNodeBuilder, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_TermRangeQueryNodeBuilder, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_TermRangeQueryNodeBuilder, build, METH_O),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(TermRangeQueryNodeBuilder, t_TermRangeQueryNodeBuilder, ::java::lang::Object, TermRangeQueryNodeBuilder, t_TermRangeQueryNodeBuilder_init_, 0, 0, 0, 0, 0);

              void t_TermRangeQueryNodeBuilder::install(PyObject *module)
              {
                installType(&PY_TYPE(TermRangeQueryNodeBuilder), module, "TermRangeQueryNodeBuilder", 0);
              }

              void t_TermRangeQueryNodeBuilder::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(TermRangeQueryNodeBuilder).tp_dict, "class_", make_descriptor(TermRangeQueryNodeBuilder::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(TermRangeQueryNodeBuilder).tp_dict, "wrapfn_", make_descriptor(t_TermRangeQueryNodeBuilder::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(TermRangeQueryNodeBuilder).tp_dict, "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_TermRangeQueryNodeBuilder_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, TermRangeQueryNodeBuilder::initializeClass, 1)))
                  return NULL;
                return t_TermRangeQueryNodeBuilder::wrap_Object(TermRangeQueryNodeBuilder(((t_TermRangeQueryNodeBuilder *) arg)->object.this$));
              }
              static PyObject *t_TermRangeQueryNodeBuilder_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, TermRangeQueryNodeBuilder::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_TermRangeQueryNodeBuilder_init_(t_TermRangeQueryNodeBuilder *self, PyObject *args, PyObject *kwds)
              {
                TermRangeQueryNodeBuilder object((jobject) NULL);

                INT_CALL(object = TermRangeQueryNodeBuilder());
                self->object = object;

                return 0;
              }

              static PyObject *t_TermRangeQueryNodeBuilder_build(t_TermRangeQueryNodeBuilder *self, PyObject *arg)
              {
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode a0((jobject) NULL);
                ::org::apache::lucene::search::TermRangeQuery result((jobject) NULL);

                if (!parseArg(arg, "k", ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode::initializeClass, &a0))
                {
                  OBJ_CALL(result = self->object.build(a0));
                  return ::org::apache::lucene::search::t_TermRangeQuery::wrap_Object(result);
                }

                PyErr_SetArgsError((PyObject *) self, "build", arg);
                return NULL;
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "java/lang/Byte.h"
#include "java/lang/Comparable.h"
#include "java/lang/Class.h"
#include "java/lang/Object.h"
#include "java/lang/String.h"
#include "java/lang/NumberFormatException.h"
#include "JArray.h"

namespace java {
  namespace lang {

    ::java::lang::Class *Byte::class$ = NULL;
    jmethodID *Byte::mids$ = NULL;
    bool Byte::live$ = false;
    jint Byte::BYTES = (jint) 0;
    jbyte Byte::MAX_VALUE = (jbyte) 0;
    jbyte Byte::MIN_VALUE = (jbyte) 0;
    jint Byte::SIZE = (jint) 0;
    ::java::lang::Class *Byte::TYPE = NULL;

    jclass Byte::initializeClass(bool getOnly)
    {
      if (getOnly)
        return (jclass) (live$ ? class$->this$ : NULL);
      if (class$ == NULL)
      {
        jclass cls = (jclass) env->findClass("java/lang/Byte");

        mids$ = new jmethodID[max_mid];
        mids$[mid_init$_b2271687] = env->getMethodID(cls, "<init>", "(B)V");
        mids$[mid_init$_5fdc3f48] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;)V");
        mids$[mid_byteValue_54c6a172] = env->getMethodID(cls, "byteValue", "()B");
        mids$[mid_compare_1648a7cb] = env->getStaticMethodID(cls, "compare", "(BB)I");
        mids$[mid_compareTo_c2b89a9a] = env->getMethodID(cls, "compareTo", "(Ljava/lang/Byte;)I");
        mids$[mid_decode_4a53f64a] = env->getStaticMethodID(cls, "decode", "(Ljava/lang/String;)Ljava/lang/Byte;");
        mids$[mid_doubleValue_54c6a174] = env->getMethodID(cls, "doubleValue", "()D");
        mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
        mids$[mid_floatValue_54c6a176] = env->getMethodID(cls, "floatValue", "()F");
        mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
        mids$[mid_hashCode_b2271698] = env->getStaticMethodID(cls, "hashCode", "(B)I");
        mids$[mid_intValue_54c6a179] = env->getMethodID(cls, "intValue", "()I");
        mids$[mid_longValue_54c6a17a] = env->getMethodID(cls, "longValue", "()J");
        mids$[mid_parseByte_5fdc3f5c] = env->getStaticMethodID(cls, "parseByte", "(Ljava/lang/String;)B");
        mids$[mid_parseByte_6e53ccd2] = env->getStaticMethodID(cls, "parseByte", "(Ljava/lang/String;I)B");
        mids$[mid_shortValue_54c6a163] = env->getMethodID(cls, "shortValue", "()S");
        mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");
        mids$[mid_toString_fce80606] = env->getStaticMethodID(cls, "toString", "(B)Ljava/lang/String;");
        mids$[mid_toUnsignedInt_b2271698] = env->getStaticMethodID(cls, "toUnsignedInt", "(B)I");
        mids$[mid_toUnsignedLong_b227169b] = env->getStaticMethodID(cls, "toUnsignedLong", "(B)J");
        mids$[mid_valueOf_f1e1a5a7] = env->getStaticMethodID(cls, "valueOf", "(B)Ljava/lang/Byte;");
        mids$[mid_valueOf_4a53f64a] = env->getStaticMethodID(cls, "valueOf", "(Ljava/lang/String;)Ljava/lang/Byte;");
        mids$[mid_valueOf_83e30bb0] = env->getStaticMethodID(cls, "valueOf", "(Ljava/lang/String;I)Ljava/lang/Byte;");

        class$ = (::java::lang::Class *) new JObject(cls);
        cls = (jclass) class$->this$;

        BYTES = env->getStaticIntField(cls, "BYTES");
        MAX_VALUE = env->getStaticByteField(cls, "MAX_VALUE");
        MIN_VALUE = env->getStaticByteField(cls, "MIN_VALUE");
        SIZE = env->getStaticIntField(cls, "SIZE");
        TYPE = new ::java::lang::Class(env->getStaticObjectField(cls, "TYPE", "Ljava/lang/Class;"));
        live$ = true;
      }
      return (jclass) class$->this$;
    }

    Byte::Byte(jbyte a0) : ::java::lang::Number(env->newObject(initializeClass, &mids$, mid_init$_b2271687, a0)) {}

    Byte::Byte(const ::java::lang::String & a0) : ::java::lang::Number(env->newObject(initializeClass, &mids$, mid_init$_5fdc3f48, a0.this$)) {}

    jbyte Byte::byteValue() const
    {
      return env->callByteMethod(this$, mids$[mid_byteValue_54c6a172]);
    }

    jint Byte::compare(jbyte a0, jbyte a1)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_compare_1648a7cb], a0, a1);
    }

    jint Byte::compareTo(const Byte & a0) const
    {
      return env->callIntMethod(this$, mids$[mid_compareTo_c2b89a9a], a0.this$);
    }

    Byte Byte::decode(const ::java::lang::String & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return Byte(env->callStaticObjectMethod(cls, mids$[mid_decode_4a53f64a], a0.this$));
    }

    jdouble Byte::doubleValue() const
    {
      return env->callDoubleMethod(this$, mids$[mid_doubleValue_54c6a174]);
    }

    jboolean Byte::equals(const ::java::lang::Object & a0) const
    {
      return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
    }

    jfloat Byte::floatValue() const
    {
      return env->callFloatMethod(this$, mids$[mid_floatValue_54c6a176]);
    }

    jint Byte::hashCode() const
    {
      return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
    }

    jint Byte::hashCode(jbyte a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_hashCode_b2271698], a0);
    }

    jint Byte::intValue() const
    {
      return env->callIntMethod(this$, mids$[mid_intValue_54c6a179]);
    }

    jlong Byte::longValue() const
    {
      return env->callLongMethod(this$, mids$[mid_longValue_54c6a17a]);
    }

    jbyte Byte::parseByte(const ::java::lang::String & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticByteMethod(cls, mids$[mid_parseByte_5fdc3f5c], a0.this$);
    }

    jbyte Byte::parseByte(const ::java::lang::String & a0, jint a1)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticByteMethod(cls, mids$[mid_parseByte_6e53ccd2], a0.this$, a1);
    }

    jshort Byte::shortValue() const
    {
      return env->callShortMethod(this$, mids$[mid_shortValue_54c6a163]);
    }

    ::java::lang::String Byte::toString() const
    {
      return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
    }

    ::java::lang::String Byte::toString(jbyte a0)
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::lang::String(env->callStaticObjectMethod(cls, mids$[mid_toString_fce80606], a0));
    }

    jint Byte::toUnsignedInt(jbyte a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_toUnsignedInt_b2271698], a0);
    }

    jlong Byte::toUnsignedLong(jbyte a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticLongMethod(cls, mids$[mid_toUnsignedLong_b227169b], a0);
    }

    Byte Byte::valueOf(jbyte a0)
    {
      jclass cls = env->getClass(initializeClass);
      return Byte(env->callStaticObjectMethod(cls, mids$[mid_valueOf_f1e1a5a7], a0));
    }

    Byte Byte::valueOf(const ::java::lang::String & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return Byte(env->callStaticObjectMethod(cls, mids$[mid_valueOf_4a53f64a], a0.this$));
    }

    Byte Byte::valueOf(const ::java::lang::String & a0, jint a1)
    {
      jclass cls = env->getClass(initializeClass);
      return Byte(env->callStaticObjectMethod(cls, mids$[mid_valueOf_83e30bb0], a0.this$, a1));
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace java {
  namespace lang {
    static PyObject *t_Byte_cast_(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Byte_instance_(PyTypeObject *type, PyObject *arg);
    static int t_Byte_init_(t_Byte *self, PyObject *args, PyObject *kwds);
    static PyObject *t_Byte_byteValue(t_Byte *self, PyObject *args);
    static PyObject *t_Byte_compare(PyTypeObject *type, PyObject *args);
    static PyObject *t_Byte_compareTo(t_Byte *self, PyObject *arg);
    static PyObject *t_Byte_decode(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Byte_doubleValue(t_Byte *self, PyObject *args);
    static PyObject *t_Byte_equals(t_Byte *self, PyObject *args);
    static PyObject *t_Byte_floatValue(t_Byte *self, PyObject *args);
    static PyObject *t_Byte_hashCode(t_Byte *self, PyObject *args);
    static PyObject *t_Byte_hashCode_(PyTypeObject *type, PyObject *args);
    static PyObject *t_Byte_intValue(t_Byte *self, PyObject *args);
    static PyObject *t_Byte_longValue(t_Byte *self, PyObject *args);
    static PyObject *t_Byte_parseByte(PyTypeObject *type, PyObject *args);
    static PyObject *t_Byte_shortValue(t_Byte *self, PyObject *args);
    static PyObject *t_Byte_toString(t_Byte *self, PyObject *args);
    static PyObject *t_Byte_toString_(PyTypeObject *type, PyObject *args);
    static PyObject *t_Byte_toUnsignedInt(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Byte_toUnsignedLong(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Byte_valueOf(PyTypeObject *type, PyObject *args);

    static PyMethodDef t_Byte__methods_[] = {
      DECLARE_METHOD(t_Byte, cast_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Byte, instance_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Byte, byteValue, METH_VARARGS),
      DECLARE_METHOD(t_Byte, compare, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Byte, compareTo, METH_O),
      DECLARE_METHOD(t_Byte, decode, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Byte, doubleValue, METH_VARARGS),
      DECLARE_METHOD(t_Byte, equals, METH_VARARGS),
      DECLARE_METHOD(t_Byte, floatValue, METH_VARARGS),
      DECLARE_METHOD(t_Byte, hashCode, METH_VARARGS),
      DECLARE_METHOD(t_Byte, hashCode_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Byte, intValue, METH_VARARGS),
      DECLARE_METHOD(t_Byte, longValue, METH_VARARGS),
      DECLARE_METHOD(t_Byte, parseByte, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Byte, shortValue, METH_VARARGS),
      DECLARE_METHOD(t_Byte, toString, METH_VARARGS),
      DECLARE_METHOD(t_Byte, toString_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Byte, toUnsignedInt, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Byte, toUnsignedLong, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Byte, valueOf, METH_VARARGS | METH_CLASS),
      { NULL, NULL, 0, NULL }
    };

    DECLARE_TYPE(Byte, t_Byte, ::java::lang::Number, Byte, t_Byte_init_, 0, 0, 0, 0, 0);

    void t_Byte::install(PyObject *module)
    {
      installType(&PY_TYPE(Byte), module, "Byte", 0);
    }

    void t_Byte::initialize(PyObject *module)
    {
      PyDict_SetItemString(PY_TYPE(Byte).tp_dict, "class_", make_descriptor(Byte::initializeClass, 1));
      PyDict_SetItemString(PY_TYPE(Byte).tp_dict, "wrapfn_", make_descriptor(unboxByte));
      PyDict_SetItemString(PY_TYPE(Byte).tp_dict, "boxfn_", make_descriptor(boxByte));
      env->getClass(Byte::initializeClass);
      PyDict_SetItemString(PY_TYPE(Byte).tp_dict, "BYTES", make_descriptor(Byte::BYTES));
      PyDict_SetItemString(PY_TYPE(Byte).tp_dict, "MAX_VALUE", make_descriptor(Byte::MAX_VALUE));
      PyDict_SetItemString(PY_TYPE(Byte).tp_dict, "MIN_VALUE", make_descriptor(Byte::MIN_VALUE));
      PyDict_SetItemString(PY_TYPE(Byte).tp_dict, "SIZE", make_descriptor(Byte::SIZE));
      PyDict_SetItemString(PY_TYPE(Byte).tp_dict, "TYPE", make_descriptor(::java::lang::t_Class::wrap_Object(*Byte::TYPE)));
    }

    static PyObject *t_Byte_cast_(PyTypeObject *type, PyObject *arg)
    {
      if (!(arg = castCheck(arg, Byte::initializeClass, 1)))
        return NULL;
      return t_Byte::wrap_Object(Byte(((t_Byte *) arg)->object.this$));
    }
    static PyObject *t_Byte_instance_(PyTypeObject *type, PyObject *arg)
    {
      if (!castCheck(arg, Byte::initializeClass, 0))
        Py_RETURN_FALSE;
      Py_RETURN_TRUE;
    }

    static int t_Byte_init_(t_Byte *self, PyObject *args, PyObject *kwds)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 1:
        {
          jbyte a0;
          Byte object((jobject) NULL);

          if (!parseArgs(args, "B", &a0))
          {
            INT_CALL(object = Byte(a0));
            self->object = object;
            break;
          }
        }
        {
          ::java::lang::String a0((jobject) NULL);
          Byte object((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            INT_CALL(object = Byte(a0));
            self->object = object;
            break;
          }
        }
       default:
        PyErr_SetArgsError((PyObject *) self, "__init__", args);
        return -1;
      }

      return 0;
    }

    static PyObject *t_Byte_byteValue(t_Byte *self, PyObject *args)
    {
      jbyte result;

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.byteValue());
        return PyInt_FromLong((long) result);
      }

      return callSuper(&PY_TYPE(Byte), (PyObject *) self, "byteValue", args, 2);
    }

    static PyObject *t_Byte_compare(PyTypeObject *type, PyObject *args)
    {
      jbyte a0;
      jbyte a1;
      jint result;

      if (!parseArgs(args, "BB", &a0, &a1))
      {
        OBJ_CALL(result = ::java::lang::Byte::compare(a0, a1));
        return PyInt_FromLong((long) result);
      }

      PyErr_SetArgsError(type, "compare", args);
      return NULL;
    }

    static PyObject *t_Byte_compareTo(t_Byte *self, PyObject *arg)
    {
      Byte a0((jobject) NULL);
      jint result;

      if (!parseArg(arg, "O", &::java::lang::PY_TYPE(Byte), &a0))
      {
        OBJ_CALL(result = self->object.compareTo(a0));
        return PyInt_FromLong((long) result);
      }

      PyErr_SetArgsError((PyObject *) self, "compareTo", arg);
      return NULL;
    }

    static PyObject *t_Byte_decode(PyTypeObject *type, PyObject *arg)
    {
      ::java::lang::String a0((jobject) NULL);
      Byte result((jobject) NULL);

      if (!parseArg(arg, "s", &a0))
      {
        OBJ_CALL(result = ::java::lang::Byte::decode(a0));
        return t_Byte::wrap_Object(result);
      }

      PyErr_SetArgsError(type, "decode", arg);
      return NULL;
    }

    static PyObject *t_Byte_doubleValue(t_Byte *self, PyObject *args)
    {
      jdouble result;

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.doubleValue());
        return PyFloat_FromDouble((double) result);
      }

      return callSuper(&PY_TYPE(Byte), (PyObject *) self, "doubleValue", args, 2);
    }

    static PyObject *t_Byte_equals(t_Byte *self, PyObject *args)
    {
      ::java::lang::Object a0((jobject) NULL);
      jboolean result;

      if (!parseArgs(args, "o", &a0))
      {
        OBJ_CALL(result = self->object.equals(a0));
        Py_RETURN_BOOL(result);
      }

      return callSuper(&PY_TYPE(Byte), (PyObject *) self, "equals", args, 2);
    }

    static PyObject *t_Byte_floatValue(t_Byte *self, PyObject *args)
    {
      jfloat result;

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.floatValue());
        return PyFloat_FromDouble((double) result);
      }

      return callSuper(&PY_TYPE(Byte), (PyObject *) self, "floatValue", args, 2);
    }

    static PyObject *t_Byte_hashCode(t_Byte *self, PyObject *args)
    {
      jint result;

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.hashCode());
        return PyInt_FromLong((long) result);
      }

      return callSuper(&PY_TYPE(Byte), (PyObject *) self, "hashCode", args, 2);
    }

    static PyObject *t_Byte_hashCode_(PyTypeObject *type, PyObject *args)
    {
      jbyte a0;
      jint result;

      if (!parseArgs(args, "B", &a0))
      {
        OBJ_CALL(result = ::java::lang::Byte::hashCode(a0));
        return PyInt_FromLong((long) result);
      }

      PyErr_SetArgsError(type, "hashCode_", args);
      return NULL;
    }

    static PyObject *t_Byte_intValue(t_Byte *self, PyObject *args)
    {
      jint result;

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.intValue());
        return PyInt_FromLong((long) result);
      }

      return callSuper(&PY_TYPE(Byte), (PyObject *) self, "intValue", args, 2);
    }

    static PyObject *t_Byte_longValue(t_Byte *self, PyObject *args)
    {
      jlong result;

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.longValue());
        return PyLong_FromLongLong((PY_LONG_LONG) result);
      }

      return callSuper(&PY_TYPE(Byte), (PyObject *) self, "longValue", args, 2);
    }

    static PyObject *t_Byte_parseByte(PyTypeObject *type, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 1:
        {
          ::java::lang::String a0((jobject) NULL);
          jbyte result;

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = ::java::lang::Byte::parseByte(a0));
            return PyInt_FromLong((long) result);
          }
        }
        break;
       case 2:
        {
          ::java::lang::String a0((jobject) NULL);
          jint a1;
          jbyte result;

          if (!parseArgs(args, "sI", &a0, &a1))
          {
            OBJ_CALL(result = ::java::lang::Byte::parseByte(a0, a1));
            return PyInt_FromLong((long) result);
          }
        }
      }

      PyErr_SetArgsError(type, "parseByte", args);
      return NULL;
    }

    static PyObject *t_Byte_shortValue(t_Byte *self, PyObject *args)
    {
      jshort result;

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.shortValue());
        return PyInt_FromLong((long) result);
      }

      return callSuper(&PY_TYPE(Byte), (PyObject *) self, "shortValue", args, 2);
    }

    static PyObject *t_Byte_toString(t_Byte *self, PyObject *args)
    {
      ::java::lang::String result((jobject) NULL);

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.toString());
        return j2p(result);
      }

      return callSuper(&PY_TYPE(Byte), (PyObject *) self, "toString", args, 2);
    }

    static PyObject *t_Byte_toString_(PyTypeObject *type, PyObject *args)
    {
      jbyte a0;
      ::java::lang::String result((jobject) NULL);

      if (!parseArgs(args, "B", &a0))
      {
        OBJ_CALL(result = ::java::lang::Byte::toString(a0));
        return j2p(result);
      }

      PyErr_SetArgsError(type, "toString_", args);
      return NULL;
    }

    static PyObject *t_Byte_toUnsignedInt(PyTypeObject *type, PyObject *arg)
    {
      jbyte a0;
      jint result;

      if (!parseArg(arg, "B", &a0))
      {
        OBJ_CALL(result = ::java::lang::Byte::toUnsignedInt(a0));
        return PyInt_FromLong((long) result);
      }

      PyErr_SetArgsError(type, "toUnsignedInt", arg);
      return NULL;
    }

    static PyObject *t_Byte_toUnsignedLong(PyTypeObject *type, PyObject *arg)
    {
      jbyte a0;
      jlong result;

      if (!parseArg(arg, "B", &a0))
      {
        OBJ_CALL(result = ::java::lang::Byte::toUnsignedLong(a0));
        return PyLong_FromLongLong((PY_LONG_LONG) result);
      }

      PyErr_SetArgsError(type, "toUnsignedLong", arg);
      return NULL;
    }

    static PyObject *t_Byte_valueOf(PyTypeObject *type, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 1:
        {
          jbyte a0;
          Byte result((jobject) NULL);

          if (!parseArgs(args, "B", &a0))
          {
            OBJ_CALL(result = ::java::lang::Byte::valueOf(a0));
            return t_Byte::wrap_Object(result);
          }
        }
        {
          ::java::lang::String a0((jobject) NULL);
          Byte result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = ::java::lang::Byte::valueOf(a0));
            return t_Byte::wrap_Object(result);
          }
        }
        break;
       case 2:
        {
          ::java::lang::String a0((jobject) NULL);
          jint a1;
          Byte result((jobject) NULL);

          if (!parseArgs(args, "sI", &a0, &a1))
          {
            OBJ_CALL(result = ::java::lang::Byte::valueOf(a0, a1));
            return t_Byte::wrap_Object(result);
          }
        }
      }

      PyErr_SetArgsError(type, "valueOf", args);
      return NULL;
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/similarities/LambdaDF.h"
#include "org/apache/lucene/search/similarities/BasicStats.h"
#include "java/lang/String.h"
#include "org/apache/lucene/search/Explanation.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace similarities {

          ::java::lang::Class *LambdaDF::class$ = NULL;
          jmethodID *LambdaDF::mids$ = NULL;
          bool LambdaDF::live$ = false;

          jclass LambdaDF::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/similarities/LambdaDF");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_explain_eddc6641] = env->getMethodID(cls, "explain", "(Lorg/apache/lucene/search/similarities/BasicStats;)Lorg/apache/lucene/search/Explanation;");
              mids$[mid_lambda_cb225ea0] = env->getMethodID(cls, "lambda", "(Lorg/apache/lucene/search/similarities/BasicStats;)F");
              mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          LambdaDF::LambdaDF() : ::org::apache::lucene::search::similarities::Lambda(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          ::org::apache::lucene::search::Explanation LambdaDF::explain(const ::org::apache::lucene::search::similarities::BasicStats & a0) const
          {
            return ::org::apache::lucene::search::Explanation(env->callObjectMethod(this$, mids$[mid_explain_eddc6641], a0.this$));
          }

          jfloat LambdaDF::lambda(const ::org::apache::lucene::search::similarities::BasicStats & a0) const
          {
            return env->callFloatMethod(this$, mids$[mid_lambda_cb225ea0], a0.this$);
          }

          ::java::lang::String LambdaDF::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace similarities {
          static PyObject *t_LambdaDF_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_LambdaDF_instance_(PyTypeObject *type, PyObject *arg);
          static int t_LambdaDF_init_(t_LambdaDF *self, PyObject *args, PyObject *kwds);
          static PyObject *t_LambdaDF_explain(t_LambdaDF *self, PyObject *args);
          static PyObject *t_LambdaDF_lambda(t_LambdaDF *self, PyObject *args);
          static PyObject *t_LambdaDF_toString(t_LambdaDF *self, PyObject *args);

          static PyMethodDef t_LambdaDF__methods_[] = {
            DECLARE_METHOD(t_LambdaDF, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_LambdaDF, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_LambdaDF, explain, METH_VARARGS),
            DECLARE_METHOD(t_LambdaDF, lambda, METH_VARARGS),
            DECLARE_METHOD(t_LambdaDF, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(LambdaDF, t_LambdaDF, ::org::apache::lucene::search::similarities::Lambda, LambdaDF, t_LambdaDF_init_, 0, 0, 0, 0, 0);

          void t_LambdaDF::install(PyObject *module)
          {
            installType(&PY_TYPE(LambdaDF), module, "LambdaDF", 0);
          }

          void t_LambdaDF::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(LambdaDF).tp_dict, "class_", make_descriptor(LambdaDF::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(LambdaDF).tp_dict, "wrapfn_", make_descriptor(t_LambdaDF::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(LambdaDF).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_LambdaDF_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, LambdaDF::initializeClass, 1)))
              return NULL;
            return t_LambdaDF::wrap_Object(LambdaDF(((t_LambdaDF *) arg)->object.this$));
          }
          static PyObject *t_LambdaDF_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, LambdaDF::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_LambdaDF_init_(t_LambdaDF *self, PyObject *args, PyObject *kwds)
          {
            LambdaDF object((jobject) NULL);

            INT_CALL(object = LambdaDF());
            self->object = object;

            return 0;
          }

          static PyObject *t_LambdaDF_explain(t_LambdaDF *self, PyObject *args)
          {
            ::org::apache::lucene::search::similarities::BasicStats a0((jobject) NULL);
            ::org::apache::lucene::search::Explanation result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::search::similarities::BasicStats::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.explain(a0));
              return ::org::apache::lucene::search::t_Explanation::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(LambdaDF), (PyObject *) self, "explain", args, 2);
          }

          static PyObject *t_LambdaDF_lambda(t_LambdaDF *self, PyObject *args)
          {
            ::org::apache::lucene::search::similarities::BasicStats a0((jobject) NULL);
            jfloat result;

            if (!parseArgs(args, "k", ::org::apache::lucene::search::similarities::BasicStats::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.lambda(a0));
              return PyFloat_FromDouble((double) result);
            }

            return callSuper(&PY_TYPE(LambdaDF), (PyObject *) self, "lambda", args, 2);
          }

          static PyObject *t_LambdaDF_toString(t_LambdaDF *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(&PY_TYPE(LambdaDF), (PyObject *) self, "toString", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/tr/TurkishAnalyzer.h"
#include "org/apache/lucene/util/Version.h"
#include "java/lang/String.h"
#include "org/apache/lucene/analysis/util/CharArraySet.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace tr {

          ::java::lang::Class *TurkishAnalyzer::class$ = NULL;
          jmethodID *TurkishAnalyzer::mids$ = NULL;
          bool TurkishAnalyzer::live$ = false;
          ::java::lang::String *TurkishAnalyzer::DEFAULT_STOPWORD_FILE = NULL;

          jclass TurkishAnalyzer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/tr/TurkishAnalyzer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_0d96cf33] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;)V");
              mids$[mid_init$_83eafe28] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/analysis/util/CharArraySet;)V");
              mids$[mid_init$_c9d7e4a3] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/analysis/util/CharArraySet;Lorg/apache/lucene/analysis/util/CharArraySet;)V");
              mids$[mid_getDefaultStopSet_d2d3505c] = env->getStaticMethodID(cls, "getDefaultStopSet", "()Lorg/apache/lucene/analysis/util/CharArraySet;");
              mids$[mid_createComponents_1be39cae] = env->getMethodID(cls, "createComponents", "(Ljava/lang/String;Ljava/io/Reader;)Lorg/apache/lucene/analysis/Analyzer$TokenStreamComponents;");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              DEFAULT_STOPWORD_FILE = new ::java::lang::String(env->getStaticObjectField(cls, "DEFAULT_STOPWORD_FILE", "Ljava/lang/String;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          TurkishAnalyzer::TurkishAnalyzer(const ::org::apache::lucene::util::Version & a0) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_0d96cf33, a0.this$)) {}

          TurkishAnalyzer::TurkishAnalyzer(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::analysis::util::CharArraySet & a1) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_83eafe28, a0.this$, a1.this$)) {}

          TurkishAnalyzer::TurkishAnalyzer(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::analysis::util::CharArraySet & a1, const ::org::apache::lucene::analysis::util::CharArraySet & a2) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_c9d7e4a3, a0.this$, a1.this$, a2.this$)) {}

          ::org::apache::lucene::analysis::util::CharArraySet TurkishAnalyzer::getDefaultStopSet()
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::analysis::util::CharArraySet(env->callStaticObjectMethod(cls, mids$[mid_getDefaultStopSet_d2d3505c]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace tr {
          static PyObject *t_TurkishAnalyzer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_TurkishAnalyzer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_TurkishAnalyzer_init_(t_TurkishAnalyzer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_TurkishAnalyzer_getDefaultStopSet(PyTypeObject *type);
          static PyObject *t_TurkishAnalyzer_get__defaultStopSet(t_TurkishAnalyzer *self, void *data);
          static PyGetSetDef t_TurkishAnalyzer__fields_[] = {
            DECLARE_GET_FIELD(t_TurkishAnalyzer, defaultStopSet),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_TurkishAnalyzer__methods_[] = {
            DECLARE_METHOD(t_TurkishAnalyzer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_TurkishAnalyzer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_TurkishAnalyzer, getDefaultStopSet, METH_NOARGS | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(TurkishAnalyzer, t_TurkishAnalyzer, ::org::apache::lucene::analysis::util::StopwordAnalyzerBase, TurkishAnalyzer, t_TurkishAnalyzer_init_, 0, 0, t_TurkishAnalyzer__fields_, 0, 0);

          void t_TurkishAnalyzer::install(PyObject *module)
          {
            installType(&PY_TYPE(TurkishAnalyzer), module, "TurkishAnalyzer", 0);
          }

          void t_TurkishAnalyzer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(TurkishAnalyzer).tp_dict, "class_", make_descriptor(TurkishAnalyzer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(TurkishAnalyzer).tp_dict, "wrapfn_", make_descriptor(t_TurkishAnalyzer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(TurkishAnalyzer).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(TurkishAnalyzer::initializeClass);
            PyDict_SetItemString(PY_TYPE(TurkishAnalyzer).tp_dict, "DEFAULT_STOPWORD_FILE", make_descriptor(j2p(*TurkishAnalyzer::DEFAULT_STOPWORD_FILE)));
          }

          static PyObject *t_TurkishAnalyzer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, TurkishAnalyzer::initializeClass, 1)))
              return NULL;
            return t_TurkishAnalyzer::wrap_Object(TurkishAnalyzer(((t_TurkishAnalyzer *) arg)->object.this$));
          }
          static PyObject *t_TurkishAnalyzer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, TurkishAnalyzer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_TurkishAnalyzer_init_(t_TurkishAnalyzer *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                TurkishAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "K", ::org::apache::lucene::util::Version::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_))
                {
                  INT_CALL(object = TurkishAnalyzer(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 2:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                ::org::apache::lucene::analysis::util::CharArraySet a1((jobject) NULL);
                PyTypeObject **p1;
                TurkishAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "KK", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1, &p1, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_))
                {
                  INT_CALL(object = TurkishAnalyzer(a0, a1));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 3:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                ::org::apache::lucene::analysis::util::CharArraySet a1((jobject) NULL);
                PyTypeObject **p1;
                ::org::apache::lucene::analysis::util::CharArraySet a2((jobject) NULL);
                PyTypeObject **p2;
                TurkishAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "KKK", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1, &p1, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_, &a2, &p2, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_))
                {
                  INT_CALL(object = TurkishAnalyzer(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_TurkishAnalyzer_getDefaultStopSet(PyTypeObject *type)
          {
            ::org::apache::lucene::analysis::util::CharArraySet result((jobject) NULL);
            OBJ_CALL(result = ::org::apache::lucene::analysis::tr::TurkishAnalyzer::getDefaultStopSet());
            return ::org::apache::lucene::analysis::util::t_CharArraySet::wrap_Object(result);
          }

          static PyObject *t_TurkishAnalyzer_get__defaultStopSet(t_TurkishAnalyzer *self, void *data)
          {
            ::org::apache::lucene::analysis::util::CharArraySet value((jobject) NULL);
            OBJ_CALL(value = self->object.getDefaultStopSet());
            return ::org::apache::lucene::analysis::util::t_CharArraySet::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/CheckIndex$Status$TermIndexStatus.h"
#include "org/apache/lucene/codecs/blocktree/Stats.h"
#include "java/lang/String.h"
#include "java/util/Map.h"
#include "java/lang/Throwable.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *CheckIndex$Status$TermIndexStatus::class$ = NULL;
        jmethodID *CheckIndex$Status$TermIndexStatus::mids$ = NULL;
        jfieldID *CheckIndex$Status$TermIndexStatus::fids$ = NULL;
        bool CheckIndex$Status$TermIndexStatus::live$ = false;

        jclass CheckIndex$Status$TermIndexStatus::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/CheckIndex$Status$TermIndexStatus");

            fids$ = new jfieldID[max_fid];
            fids$[fid_blockTreeStats] = env->getFieldID(cls, "blockTreeStats", "Ljava/util/Map;");
            fids$[fid_delTermCount] = env->getFieldID(cls, "delTermCount", "J");
            fids$[fid_error] = env->getFieldID(cls, "error", "Ljava/lang/Throwable;");
            fids$[fid_termCount] = env->getFieldID(cls, "termCount", "J");
            fids$[fid_totFreq] = env->getFieldID(cls, "totFreq", "J");
            fids$[fid_totPos] = env->getFieldID(cls, "totPos", "J");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        ::java::util::Map CheckIndex$Status$TermIndexStatus::_get_blockTreeStats() const
        {
          return ::java::util::Map(env->getObjectField(this$, fids$[fid_blockTreeStats]));
        }

        void CheckIndex$Status$TermIndexStatus::_set_blockTreeStats(const ::java::util::Map & a0) const
        {
          env->setObjectField(this$, fids$[fid_blockTreeStats], a0.this$);
        }

        jlong CheckIndex$Status$TermIndexStatus::_get_delTermCount() const
        {
          return env->getLongField(this$, fids$[fid_delTermCount]);
        }

        void CheckIndex$Status$TermIndexStatus::_set_delTermCount(jlong a0) const
        {
          env->setLongField(this$, fids$[fid_delTermCount], a0);
        }

        ::java::lang::Throwable CheckIndex$Status$TermIndexStatus::_get_error() const
        {
          return ::java::lang::Throwable(env->getObjectField(this$, fids$[fid_error]));
        }

        void CheckIndex$Status$TermIndexStatus::_set_error(const ::java::lang::Throwable & a0) const
        {
          env->setObjectField(this$, fids$[fid_error], a0.this$);
        }

        jlong CheckIndex$Status$TermIndexStatus::_get_termCount() const
        {
          return env->getLongField(this$, fids$[fid_termCount]);
        }

        void CheckIndex$Status$TermIndexStatus::_set_termCount(jlong a0) const
        {
          env->setLongField(this$, fids$[fid_termCount], a0);
        }

        jlong CheckIndex$Status$TermIndexStatus::_get_totFreq() const
        {
          return env->getLongField(this$, fids$[fid_totFreq]);
        }

        void CheckIndex$Status$TermIndexStatus::_set_totFreq(jlong a0) const
        {
          env->setLongField(this$, fids$[fid_totFreq], a0);
        }

        jlong CheckIndex$Status$TermIndexStatus::_get_totPos() const
        {
          return env->getLongField(this$, fids$[fid_totPos]);
        }

        void CheckIndex$Status$TermIndexStatus::_set_totPos(jlong a0) const
        {
          env->setLongField(this$, fids$[fid_totPos], a0);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_CheckIndex$Status$TermIndexStatus_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_CheckIndex$Status$TermIndexStatus_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_CheckIndex$Status$TermIndexStatus_get__blockTreeStats(t_CheckIndex$Status$TermIndexStatus *self, void *data);
        static int t_CheckIndex$Status$TermIndexStatus_set__blockTreeStats(t_CheckIndex$Status$TermIndexStatus *self, PyObject *arg, void *data);
        static PyObject *t_CheckIndex$Status$TermIndexStatus_get__delTermCount(t_CheckIndex$Status$TermIndexStatus *self, void *data);
        static int t_CheckIndex$Status$TermIndexStatus_set__delTermCount(t_CheckIndex$Status$TermIndexStatus *self, PyObject *arg, void *data);
        static PyObject *t_CheckIndex$Status$TermIndexStatus_get__error(t_CheckIndex$Status$TermIndexStatus *self, void *data);
        static int t_CheckIndex$Status$TermIndexStatus_set__error(t_CheckIndex$Status$TermIndexStatus *self, PyObject *arg, void *data);
        static PyObject *t_CheckIndex$Status$TermIndexStatus_get__termCount(t_CheckIndex$Status$TermIndexStatus *self, void *data);
        static int t_CheckIndex$Status$TermIndexStatus_set__termCount(t_CheckIndex$Status$TermIndexStatus *self, PyObject *arg, void *data);
        static PyObject *t_CheckIndex$Status$TermIndexStatus_get__totFreq(t_CheckIndex$Status$TermIndexStatus *self, void *data);
        static int t_CheckIndex$Status$TermIndexStatus_set__totFreq(t_CheckIndex$Status$TermIndexStatus *self, PyObject *arg, void *data);
        static PyObject *t_CheckIndex$Status$TermIndexStatus_get__totPos(t_CheckIndex$Status$TermIndexStatus *self, void *data);
        static int t_CheckIndex$Status$TermIndexStatus_set__totPos(t_CheckIndex$Status$TermIndexStatus *self, PyObject *arg, void *data);

        static PyGetSetDef t_CheckIndex$Status$TermIndexStatus__fields_[] = {
          DECLARE_GETSET_FIELD(t_CheckIndex$Status$TermIndexStatus, blockTreeStats),
          DECLARE_GETSET_FIELD(t_CheckIndex$Status$TermIndexStatus, delTermCount),
          DECLARE_GETSET_FIELD(t_CheckIndex$Status$TermIndexStatus, error),
          DECLARE_GETSET_FIELD(t_CheckIndex$Status$TermIndexStatus, termCount),
          DECLARE_GETSET_FIELD(t_CheckIndex$Status$TermIndexStatus, totFreq),
          DECLARE_GETSET_FIELD(t_CheckIndex$Status$TermIndexStatus, totPos),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_CheckIndex$Status$TermIndexStatus__methods_[] = {
          DECLARE_METHOD(t_CheckIndex$Status$TermIndexStatus, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_CheckIndex$Status$TermIndexStatus, instance_, METH_O | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(CheckIndex$Status$TermIndexStatus, t_CheckIndex$Status$TermIndexStatus, ::java::lang::Object, CheckIndex$Status$TermIndexStatus, abstract_init, 0, 0, t_CheckIndex$Status$TermIndexStatus__fields_, 0, 0);

        void t_CheckIndex$Status$TermIndexStatus::install(PyObject *module)
        {
          installType(&PY_TYPE(CheckIndex$Status$TermIndexStatus), module, "CheckIndex$Status$TermIndexStatus", 0);
        }

        void t_CheckIndex$Status$TermIndexStatus::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(CheckIndex$Status$TermIndexStatus).tp_dict, "class_", make_descriptor(CheckIndex$Status$TermIndexStatus::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(CheckIndex$Status$TermIndexStatus).tp_dict, "wrapfn_", make_descriptor(t_CheckIndex$Status$TermIndexStatus::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(CheckIndex$Status$TermIndexStatus).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_CheckIndex$Status$TermIndexStatus_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, CheckIndex$Status$TermIndexStatus::initializeClass, 1)))
            return NULL;
          return t_CheckIndex$Status$TermIndexStatus::wrap_Object(CheckIndex$Status$TermIndexStatus(((t_CheckIndex$Status$TermIndexStatus *) arg)->object.this$));
        }
        static PyObject *t_CheckIndex$Status$TermIndexStatus_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, CheckIndex$Status$TermIndexStatus::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_CheckIndex$Status$TermIndexStatus_get__blockTreeStats(t_CheckIndex$Status$TermIndexStatus *self, void *data)
        {
          ::java::util::Map value((jobject) NULL);
          OBJ_CALL(value = self->object._get_blockTreeStats());
          return ::java::util::t_Map::wrap_Object(value);
        }
        static int t_CheckIndex$Status$TermIndexStatus_set__blockTreeStats(t_CheckIndex$Status$TermIndexStatus *self, PyObject *arg, void *data)
        {
          ::java::util::Map value((jobject) NULL);
          if (!parseArg(arg, "k", ::java::util::Map::initializeClass, &value))
          {
            INT_CALL(self->object._set_blockTreeStats(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "blockTreeStats", arg);
          return -1;
        }

        static PyObject *t_CheckIndex$Status$TermIndexStatus_get__delTermCount(t_CheckIndex$Status$TermIndexStatus *self, void *data)
        {
          jlong value;
          OBJ_CALL(value = self->object._get_delTermCount());
          return PyLong_FromLongLong((PY_LONG_LONG) value);
        }
        static int t_CheckIndex$Status$TermIndexStatus_set__delTermCount(t_CheckIndex$Status$TermIndexStatus *self, PyObject *arg, void *data)
        {
          jlong value;
          if (!parseArg(arg, "J", &value))
          {
            INT_CALL(self->object._set_delTermCount(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "delTermCount", arg);
          return -1;
        }

        static PyObject *t_CheckIndex$Status$TermIndexStatus_get__error(t_CheckIndex$Status$TermIndexStatus *self, void *data)
        {
          ::java::lang::Throwable value((jobject) NULL);
          OBJ_CALL(value = self->object._get_error());
          return ::java::lang::t_Throwable::wrap_Object(value);
        }
        static int t_CheckIndex$Status$TermIndexStatus_set__error(t_CheckIndex$Status$TermIndexStatus *self, PyObject *arg, void *data)
        {
          ::java::lang::Throwable value((jobject) NULL);
          if (!parseArg(arg, "k", ::java::lang::Throwable::initializeClass, &value))
          {
            INT_CALL(self->object._set_error(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "error", arg);
          return -1;
        }

        static PyObject *t_CheckIndex$Status$TermIndexStatus_get__termCount(t_CheckIndex$Status$TermIndexStatus *self, void *data)
        {
          jlong value;
          OBJ_CALL(value = self->object._get_termCount());
          return PyLong_FromLongLong((PY_LONG_LONG) value);
        }
        static int t_CheckIndex$Status$TermIndexStatus_set__termCount(t_CheckIndex$Status$TermIndexStatus *self, PyObject *arg, void *data)
        {
          jlong value;
          if (!parseArg(arg, "J", &value))
          {
            INT_CALL(self->object._set_termCount(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "termCount", arg);
          return -1;
        }

        static PyObject *t_CheckIndex$Status$TermIndexStatus_get__totFreq(t_CheckIndex$Status$TermIndexStatus *self, void *data)
        {
          jlong value;
          OBJ_CALL(value = self->object._get_totFreq());
          return PyLong_FromLongLong((PY_LONG_LONG) value);
        }
        static int t_CheckIndex$Status$TermIndexStatus_set__totFreq(t_CheckIndex$Status$TermIndexStatus *self, PyObject *arg, void *data)
        {
          jlong value;
          if (!parseArg(arg, "J", &value))
          {
            INT_CALL(self->object._set_totFreq(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "totFreq", arg);
          return -1;
        }

        static PyObject *t_CheckIndex$Status$TermIndexStatus_get__totPos(t_CheckIndex$Status$TermIndexStatus *self, void *data)
        {
          jlong value;
          OBJ_CALL(value = self->object._get_totPos());
          return PyLong_FromLongLong((PY_LONG_LONG) value);
        }
        static int t_CheckIndex$Status$TermIndexStatus_set__totPos(t_CheckIndex$Status$TermIndexStatus *self, PyObject *arg, void *data)
        {
          jlong value;
          if (!parseArg(arg, "J", &value))
          {
            INT_CALL(self->object._set_totPos(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "totPos", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/highlight/WeightedSpanTermExtractor.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "java/util/Map.h"
#include "java/lang/String.h"
#include "org/apache/lucene/search/highlight/WeightedSpanTerm.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "org/apache/lucene/search/Query.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace highlight {

          ::java::lang::Class *WeightedSpanTermExtractor::class$ = NULL;
          jmethodID *WeightedSpanTermExtractor::mids$ = NULL;
          bool WeightedSpanTermExtractor::live$ = false;

          jclass WeightedSpanTermExtractor::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/highlight/WeightedSpanTermExtractor");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_init$_5fdc3f48] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;)V");
              mids$[mid_getExpandMultiTermQuery_54c6a16a] = env->getMethodID(cls, "getExpandMultiTermQuery", "()Z");
              mids$[mid_getTokenStream_71f550c9] = env->getMethodID(cls, "getTokenStream", "()Lorg/apache/lucene/analysis/TokenStream;");
              mids$[mid_getWeightedSpanTerms_2b00c132] = env->getMethodID(cls, "getWeightedSpanTerms", "(Lorg/apache/lucene/search/Query;Lorg/apache/lucene/analysis/TokenStream;)Ljava/util/Map;");
              mids$[mid_getWeightedSpanTerms_4bedc0dc] = env->getMethodID(cls, "getWeightedSpanTerms", "(Lorg/apache/lucene/search/Query;Lorg/apache/lucene/analysis/TokenStream;Ljava/lang/String;)Ljava/util/Map;");
              mids$[mid_getWeightedSpanTermsWithScores_d44049f9] = env->getMethodID(cls, "getWeightedSpanTermsWithScores", "(Lorg/apache/lucene/search/Query;Lorg/apache/lucene/analysis/TokenStream;Ljava/lang/String;Lorg/apache/lucene/index/IndexReader;)Ljava/util/Map;");
              mids$[mid_isCachedTokenStream_54c6a16a] = env->getMethodID(cls, "isCachedTokenStream", "()Z");
              mids$[mid_setExpandMultiTermQuery_bb0c767f] = env->getMethodID(cls, "setExpandMultiTermQuery", "(Z)V");
              mids$[mid_setWrapIfNotCachingTokenFilter_bb0c767f] = env->getMethodID(cls, "setWrapIfNotCachingTokenFilter", "(Z)V");
              mids$[mid_extract_1ecdc9cb] = env->getMethodID(cls, "extract", "(Lorg/apache/lucene/search/Query;Ljava/util/Map;)V");
              mids$[mid_mustRewriteQuery_056c189b] = env->getMethodID(cls, "mustRewriteQuery", "(Lorg/apache/lucene/search/spans/SpanQuery;)Z");
              mids$[mid_extractUnknownQuery_1ecdc9cb] = env->getMethodID(cls, "extractUnknownQuery", "(Lorg/apache/lucene/search/Query;Ljava/util/Map;)V");
              mids$[mid_extractWeightedSpanTerms_66aae95d] = env->getMethodID(cls, "extractWeightedSpanTerms", "(Ljava/util/Map;Lorg/apache/lucene/search/spans/SpanQuery;)V");
              mids$[mid_extractWeightedTerms_f386227d] = env->getMethodID(cls, "extractWeightedTerms", "(Ljava/util/Map;Lorg/apache/lucene/search/Query;)V");
              mids$[mid_fieldNameComparator_5fdc3f44] = env->getMethodID(cls, "fieldNameComparator", "(Ljava/lang/String;)Z");
              mids$[mid_getLeafContext_c2ef2576] = env->getMethodID(cls, "getLeafContext", "()Lorg/apache/lucene/index/AtomicReaderContext;");
              mids$[mid_collectSpanQueryFields_33bf20d1] = env->getMethodID(cls, "collectSpanQueryFields", "(Lorg/apache/lucene/search/spans/SpanQuery;Ljava/util/Set;)V");
              mids$[mid_setMaxDocCharsToAnalyze_39c7bd3c] = env->getMethodID(cls, "setMaxDocCharsToAnalyze", "(I)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          WeightedSpanTermExtractor::WeightedSpanTermExtractor() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          WeightedSpanTermExtractor::WeightedSpanTermExtractor(const ::java::lang::String & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_5fdc3f48, a0.this$)) {}

          jboolean WeightedSpanTermExtractor::getExpandMultiTermQuery() const
          {
            return env->callBooleanMethod(this$, mids$[mid_getExpandMultiTermQuery_54c6a16a]);
          }

          ::org::apache::lucene::analysis::TokenStream WeightedSpanTermExtractor::getTokenStream() const
          {
            return ::org::apache::lucene::analysis::TokenStream(env->callObjectMethod(this$, mids$[mid_getTokenStream_71f550c9]));
          }

          ::java::util::Map WeightedSpanTermExtractor::getWeightedSpanTerms(const ::org::apache::lucene::search::Query & a0, const ::org::apache::lucene::analysis::TokenStream & a1) const
          {
            return ::java::util::Map(env->callObjectMethod(this$, mids$[mid_getWeightedSpanTerms_2b00c132], a0.this$, a1.this$));
          }

          ::java::util::Map WeightedSpanTermExtractor::getWeightedSpanTerms(const ::org::apache::lucene::search::Query & a0, const ::org::apache::lucene::analysis::TokenStream & a1, const ::java::lang::String & a2) const
          {
            return ::java::util::Map(env->callObjectMethod(this$, mids$[mid_getWeightedSpanTerms_4bedc0dc], a0.this$, a1.this$, a2.this$));
          }

          ::java::util::Map WeightedSpanTermExtractor::getWeightedSpanTermsWithScores(const ::org::apache::lucene::search::Query & a0, const ::org::apache::lucene::analysis::TokenStream & a1, const ::java::lang::String & a2, const ::org::apache::lucene::index::IndexReader & a3) const
          {
            return ::java::util::Map(env->callObjectMethod(this$, mids$[mid_getWeightedSpanTermsWithScores_d44049f9], a0.this$, a1.this$, a2.this$, a3.this$));
          }

          jboolean WeightedSpanTermExtractor::isCachedTokenStream() const
          {
            return env->callBooleanMethod(this$, mids$[mid_isCachedTokenStream_54c6a16a]);
          }

          void WeightedSpanTermExtractor::setExpandMultiTermQuery(jboolean a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setExpandMultiTermQuery_bb0c767f], a0);
          }

          void WeightedSpanTermExtractor::setWrapIfNotCachingTokenFilter(jboolean a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setWrapIfNotCachingTokenFilter_bb0c767f], a0);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace highlight {
          static PyObject *t_WeightedSpanTermExtractor_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_WeightedSpanTermExtractor_instance_(PyTypeObject *type, PyObject *arg);
          static int t_WeightedSpanTermExtractor_init_(t_WeightedSpanTermExtractor *self, PyObject *args, PyObject *kwds);
          static PyObject *t_WeightedSpanTermExtractor_getExpandMultiTermQuery(t_WeightedSpanTermExtractor *self);
          static PyObject *t_WeightedSpanTermExtractor_getTokenStream(t_WeightedSpanTermExtractor *self);
          static PyObject *t_WeightedSpanTermExtractor_getWeightedSpanTerms(t_WeightedSpanTermExtractor *self, PyObject *args);
          static PyObject *t_WeightedSpanTermExtractor_getWeightedSpanTermsWithScores(t_WeightedSpanTermExtractor *self, PyObject *args);
          static PyObject *t_WeightedSpanTermExtractor_isCachedTokenStream(t_WeightedSpanTermExtractor *self);
          static PyObject *t_WeightedSpanTermExtractor_setExpandMultiTermQuery(t_WeightedSpanTermExtractor *self, PyObject *arg);
          static PyObject *t_WeightedSpanTermExtractor_setWrapIfNotCachingTokenFilter(t_WeightedSpanTermExtractor *self, PyObject *arg);
          static PyObject *t_WeightedSpanTermExtractor_get__cachedTokenStream(t_WeightedSpanTermExtractor *self, void *data);
          static PyObject *t_WeightedSpanTermExtractor_get__expandMultiTermQuery(t_WeightedSpanTermExtractor *self, void *data);
          static int t_WeightedSpanTermExtractor_set__expandMultiTermQuery(t_WeightedSpanTermExtractor *self, PyObject *arg, void *data);
          static PyObject *t_WeightedSpanTermExtractor_get__tokenStream(t_WeightedSpanTermExtractor *self, void *data);
          static int t_WeightedSpanTermExtractor_set__wrapIfNotCachingTokenFilter(t_WeightedSpanTermExtractor *self, PyObject *arg, void *data);
          static PyGetSetDef t_WeightedSpanTermExtractor__fields_[] = {
            DECLARE_GET_FIELD(t_WeightedSpanTermExtractor, cachedTokenStream),
            DECLARE_GETSET_FIELD(t_WeightedSpanTermExtractor, expandMultiTermQuery),
            DECLARE_GET_FIELD(t_WeightedSpanTermExtractor, tokenStream),
            DECLARE_SET_FIELD(t_WeightedSpanTermExtractor, wrapIfNotCachingTokenFilter),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_WeightedSpanTermExtractor__methods_[] = {
            DECLARE_METHOD(t_WeightedSpanTermExtractor, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_WeightedSpanTermExtractor, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_WeightedSpanTermExtractor, getExpandMultiTermQuery, METH_NOARGS),
            DECLARE_METHOD(t_WeightedSpanTermExtractor, getTokenStream, METH_NOARGS),
            DECLARE_METHOD(t_WeightedSpanTermExtractor, getWeightedSpanTerms, METH_VARARGS),
            DECLARE_METHOD(t_WeightedSpanTermExtractor, getWeightedSpanTermsWithScores, METH_VARARGS),
            DECLARE_METHOD(t_WeightedSpanTermExtractor, isCachedTokenStream, METH_NOARGS),
            DECLARE_METHOD(t_WeightedSpanTermExtractor, setExpandMultiTermQuery, METH_O),
            DECLARE_METHOD(t_WeightedSpanTermExtractor, setWrapIfNotCachingTokenFilter, METH_O),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(WeightedSpanTermExtractor, t_WeightedSpanTermExtractor, ::java::lang::Object, WeightedSpanTermExtractor, t_WeightedSpanTermExtractor_init_, 0, 0, t_WeightedSpanTermExtractor__fields_, 0, 0);

          void t_WeightedSpanTermExtractor::install(PyObject *module)
          {
            installType(&PY_TYPE(WeightedSpanTermExtractor), module, "WeightedSpanTermExtractor", 0);
          }

          void t_WeightedSpanTermExtractor::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(WeightedSpanTermExtractor).tp_dict, "class_", make_descriptor(WeightedSpanTermExtractor::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(WeightedSpanTermExtractor).tp_dict, "wrapfn_", make_descriptor(t_WeightedSpanTermExtractor::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(WeightedSpanTermExtractor).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_WeightedSpanTermExtractor_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, WeightedSpanTermExtractor::initializeClass, 1)))
              return NULL;
            return t_WeightedSpanTermExtractor::wrap_Object(WeightedSpanTermExtractor(((t_WeightedSpanTermExtractor *) arg)->object.this$));
          }
          static PyObject *t_WeightedSpanTermExtractor_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, WeightedSpanTermExtractor::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_WeightedSpanTermExtractor_init_(t_WeightedSpanTermExtractor *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 0:
              {
                WeightedSpanTermExtractor object((jobject) NULL);

                INT_CALL(object = WeightedSpanTermExtractor());
                self->object = object;
                break;
              }
              goto err;
             case 1:
              {
                ::java::lang::String a0((jobject) NULL);
                WeightedSpanTermExtractor object((jobject) NULL);

                if (!parseArgs(args, "s", &a0))
                {
                  INT_CALL(object = WeightedSpanTermExtractor(a0));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_WeightedSpanTermExtractor_getExpandMultiTermQuery(t_WeightedSpanTermExtractor *self)
          {
            jboolean result;
            OBJ_CALL(result = self->object.getExpandMultiTermQuery());
            Py_RETURN_BOOL(result);
          }

          static PyObject *t_WeightedSpanTermExtractor_getTokenStream(t_WeightedSpanTermExtractor *self)
          {
            ::org::apache::lucene::analysis::TokenStream result((jobject) NULL);
            OBJ_CALL(result = self->object.getTokenStream());
            return ::org::apache::lucene::analysis::t_TokenStream::wrap_Object(result);
          }

          static PyObject *t_WeightedSpanTermExtractor_getWeightedSpanTerms(t_WeightedSpanTermExtractor *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 2:
              {
                ::org::apache::lucene::search::Query a0((jobject) NULL);
                ::org::apache::lucene::analysis::TokenStream a1((jobject) NULL);
                ::java::util::Map result((jobject) NULL);

                if (!parseArgs(args, "kk", ::org::apache::lucene::search::Query::initializeClass, ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0, &a1))
                {
                  OBJ_CALL(result = self->object.getWeightedSpanTerms(a0, a1));
                  return ::java::util::t_Map::wrap_Object(result, &::java::lang::PY_TYPE(String), &::org::apache::lucene::search::highlight::PY_TYPE(WeightedSpanTerm));
                }
              }
              break;
             case 3:
              {
                ::org::apache::lucene::search::Query a0((jobject) NULL);
                ::org::apache::lucene::analysis::TokenStream a1((jobject) NULL);
                ::java::lang::String a2((jobject) NULL);
                ::java::util::Map result((jobject) NULL);

                if (!parseArgs(args, "kks", ::org::apache::lucene::search::Query::initializeClass, ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0, &a1, &a2))
                {
                  OBJ_CALL(result = self->object.getWeightedSpanTerms(a0, a1, a2));
                  return ::java::util::t_Map::wrap_Object(result, &::java::lang::PY_TYPE(String), &::org::apache::lucene::search::highlight::PY_TYPE(WeightedSpanTerm));
                }
              }
            }

            PyErr_SetArgsError((PyObject *) self, "getWeightedSpanTerms", args);
            return NULL;
          }

          static PyObject *t_WeightedSpanTermExtractor_getWeightedSpanTermsWithScores(t_WeightedSpanTermExtractor *self, PyObject *args)
          {
            ::org::apache::lucene::search::Query a0((jobject) NULL);
            ::org::apache::lucene::analysis::TokenStream a1((jobject) NULL);
            ::java::lang::String a2((jobject) NULL);
            ::org::apache::lucene::index::IndexReader a3((jobject) NULL);
            ::java::util::Map result((jobject) NULL);

            if (!parseArgs(args, "kksk", ::org::apache::lucene::search::Query::initializeClass, ::org::apache::lucene::analysis::TokenStream::initializeClass, ::org::apache::lucene::index::IndexReader::initializeClass, &a0, &a1, &a2, &a3))
            {
              OBJ_CALL(result = self->object.getWeightedSpanTermsWithScores(a0, a1, a2, a3));
              return ::java::util::t_Map::wrap_Object(result, &::java::lang::PY_TYPE(String), &::org::apache::lucene::search::highlight::PY_TYPE(WeightedSpanTerm));
            }

            PyErr_SetArgsError((PyObject *) self, "getWeightedSpanTermsWithScores", args);
            return NULL;
          }

          static PyObject *t_WeightedSpanTermExtractor_isCachedTokenStream(t_WeightedSpanTermExtractor *self)
          {
            jboolean result;
            OBJ_CALL(result = self->object.isCachedTokenStream());
            Py_RETURN_BOOL(result);
          }

          static PyObject *t_WeightedSpanTermExtractor_setExpandMultiTermQuery(t_WeightedSpanTermExtractor *self, PyObject *arg)
          {
            jboolean a0;

            if (!parseArg(arg, "Z", &a0))
            {
              OBJ_CALL(self->object.setExpandMultiTermQuery(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setExpandMultiTermQuery", arg);
            return NULL;
          }

          static PyObject *t_WeightedSpanTermExtractor_setWrapIfNotCachingTokenFilter(t_WeightedSpanTermExtractor *self, PyObject *arg)
          {
            jboolean a0;

            if (!parseArg(arg, "Z", &a0))
            {
              OBJ_CALL(self->object.setWrapIfNotCachingTokenFilter(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setWrapIfNotCachingTokenFilter", arg);
            return NULL;
          }

          static PyObject *t_WeightedSpanTermExtractor_get__cachedTokenStream(t_WeightedSpanTermExtractor *self, void *data)
          {
            jboolean value;
            OBJ_CALL(value = self->object.isCachedTokenStream());
            Py_RETURN_BOOL(value);
          }

          static PyObject *t_WeightedSpanTermExtractor_get__expandMultiTermQuery(t_WeightedSpanTermExtractor *self, void *data)
          {
            jboolean value;
            OBJ_CALL(value = self->object.getExpandMultiTermQuery());
            Py_RETURN_BOOL(value);
          }
          static int t_WeightedSpanTermExtractor_set__expandMultiTermQuery(t_WeightedSpanTermExtractor *self, PyObject *arg, void *data)
          {
            {
              jboolean value;
              if (!parseArg(arg, "Z", &value))
              {
                INT_CALL(self->object.setExpandMultiTermQuery(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "expandMultiTermQuery", arg);
            return -1;
          }

          static PyObject *t_WeightedSpanTermExtractor_get__tokenStream(t_WeightedSpanTermExtractor *self, void *data)
          {
            ::org::apache::lucene::analysis::TokenStream value((jobject) NULL);
            OBJ_CALL(value = self->object.getTokenStream());
            return ::org::apache::lucene::analysis::t_TokenStream::wrap_Object(value);
          }

          static int t_WeightedSpanTermExtractor_set__wrapIfNotCachingTokenFilter(t_WeightedSpanTermExtractor *self, PyObject *arg, void *data)
          {
            {
              jboolean value;
              if (!parseArg(arg, "Z", &value))
              {
                INT_CALL(self->object.setWrapIfNotCachingTokenFilter(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "wrapIfNotCachingTokenFilter", arg);
            return -1;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/FieldComparator$IntComparator.h"
#include "org/apache/lucene/search/FieldCache$Parser.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/search/FieldComparator.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "java/lang/Integer.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *FieldComparator$IntComparator::class$ = NULL;
        jmethodID *FieldComparator$IntComparator::mids$ = NULL;
        bool FieldComparator$IntComparator::live$ = false;

        jclass FieldComparator$IntComparator::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/FieldComparator$IntComparator");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_138a2154] = env->getMethodID(cls, "<init>", "(ILjava/lang/String;Lorg/apache/lucene/search/FieldCache$Parser;Ljava/lang/Integer;)V");
            mids$[mid_compare_d8d154b9] = env->getMethodID(cls, "compare", "(II)I");
            mids$[mid_compareBottom_39c7bd23] = env->getMethodID(cls, "compareBottom", "(I)I");
            mids$[mid_compareTop_39c7bd23] = env->getMethodID(cls, "compareTop", "(I)I");
            mids$[mid_copy_d8d154a6] = env->getMethodID(cls, "copy", "(II)V");
            mids$[mid_setBottom_39c7bd3c] = env->getMethodID(cls, "setBottom", "(I)V");
            mids$[mid_setNextReader_6329aed7] = env->getMethodID(cls, "setNextReader", "(Lorg/apache/lucene/index/AtomicReaderContext;)Lorg/apache/lucene/search/FieldComparator;");
            mids$[mid_setTopValue_af7b73a4] = env->getMethodID(cls, "setTopValue", "(Ljava/lang/Integer;)V");
            mids$[mid_value_7266dabb] = env->getMethodID(cls, "value", "(I)Ljava/lang/Integer;");
            mids$[mid_getIntValues_7d7d264d] = env->getMethodID(cls, "getIntValues", "(Lorg/apache/lucene/index/AtomicReaderContext;Ljava/lang/String;)Lorg/apache/lucene/search/FieldCache$Ints;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        FieldComparator$IntComparator::FieldComparator$IntComparator(jint a0, const ::java::lang::String & a1, const ::org::apache::lucene::search::FieldCache$Parser & a2, const ::java::lang::Integer & a3) : ::org::apache::lucene::search::FieldComparator$NumericComparator(env->newObject(initializeClass, &mids$, mid_init$_138a2154, a0, a1.this$, a2.this$, a3.this$)) {}

        jint FieldComparator$IntComparator::compare(jint a0, jint a1) const
        {
          return env->callIntMethod(this$, mids$[mid_compare_d8d154b9], a0, a1);
        }

        jint FieldComparator$IntComparator::compareBottom(jint a0) const
        {
          return env->callIntMethod(this$, mids$[mid_compareBottom_39c7bd23], a0);
        }

        jint FieldComparator$IntComparator::compareTop(jint a0) const
        {
          return env->callIntMethod(this$, mids$[mid_compareTop_39c7bd23], a0);
        }

        void FieldComparator$IntComparator::copy(jint a0, jint a1) const
        {
          env->callVoidMethod(this$, mids$[mid_copy_d8d154a6], a0, a1);
        }

        void FieldComparator$IntComparator::setBottom(jint a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setBottom_39c7bd3c], a0);
        }

        ::org::apache::lucene::search::FieldComparator FieldComparator$IntComparator::setNextReader(const ::org::apache::lucene::index::AtomicReaderContext & a0) const
        {
          return ::org::apache::lucene::search::FieldComparator(env->callObjectMethod(this$, mids$[mid_setNextReader_6329aed7], a0.this$));
        }

        void FieldComparator$IntComparator::setTopValue(const ::java::lang::Integer & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setTopValue_af7b73a4], a0.this$);
        }

        ::java::lang::Integer FieldComparator$IntComparator::value(jint a0) const
        {
          return ::java::lang::Integer(env->callObjectMethod(this$, mids$[mid_value_7266dabb], a0));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_FieldComparator$IntComparator_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FieldComparator$IntComparator_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FieldComparator$IntComparator_of_(t_FieldComparator$IntComparator *self, PyObject *args);
        static int t_FieldComparator$IntComparator_init_(t_FieldComparator$IntComparator *self, PyObject *args, PyObject *kwds);
        static PyObject *t_FieldComparator$IntComparator_compare(t_FieldComparator$IntComparator *self, PyObject *args);
        static PyObject *t_FieldComparator$IntComparator_compareBottom(t_FieldComparator$IntComparator *self, PyObject *args);
        static PyObject *t_FieldComparator$IntComparator_compareTop(t_FieldComparator$IntComparator *self, PyObject *args);
        static PyObject *t_FieldComparator$IntComparator_copy(t_FieldComparator$IntComparator *self, PyObject *args);
        static PyObject *t_FieldComparator$IntComparator_setBottom(t_FieldComparator$IntComparator *self, PyObject *args);
        static PyObject *t_FieldComparator$IntComparator_setNextReader(t_FieldComparator$IntComparator *self, PyObject *args);
        static PyObject *t_FieldComparator$IntComparator_setTopValue(t_FieldComparator$IntComparator *self, PyObject *args);
        static PyObject *t_FieldComparator$IntComparator_value(t_FieldComparator$IntComparator *self, PyObject *args);
        static int t_FieldComparator$IntComparator_set__bottom(t_FieldComparator$IntComparator *self, PyObject *arg, void *data);
        static int t_FieldComparator$IntComparator_set__nextReader(t_FieldComparator$IntComparator *self, PyObject *arg, void *data);
        static int t_FieldComparator$IntComparator_set__topValue(t_FieldComparator$IntComparator *self, PyObject *arg, void *data);
        static PyObject *t_FieldComparator$IntComparator_get__parameters_(t_FieldComparator$IntComparator *self, void *data);
        static PyGetSetDef t_FieldComparator$IntComparator__fields_[] = {
          DECLARE_SET_FIELD(t_FieldComparator$IntComparator, bottom),
          DECLARE_SET_FIELD(t_FieldComparator$IntComparator, nextReader),
          DECLARE_SET_FIELD(t_FieldComparator$IntComparator, topValue),
          DECLARE_GET_FIELD(t_FieldComparator$IntComparator, parameters_),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_FieldComparator$IntComparator__methods_[] = {
          DECLARE_METHOD(t_FieldComparator$IntComparator, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FieldComparator$IntComparator, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FieldComparator$IntComparator, of_, METH_VARARGS),
          DECLARE_METHOD(t_FieldComparator$IntComparator, compare, METH_VARARGS),
          DECLARE_METHOD(t_FieldComparator$IntComparator, compareBottom, METH_VARARGS),
          DECLARE_METHOD(t_FieldComparator$IntComparator, compareTop, METH_VARARGS),
          DECLARE_METHOD(t_FieldComparator$IntComparator, copy, METH_VARARGS),
          DECLARE_METHOD(t_FieldComparator$IntComparator, setBottom, METH_VARARGS),
          DECLARE_METHOD(t_FieldComparator$IntComparator, setNextReader, METH_VARARGS),
          DECLARE_METHOD(t_FieldComparator$IntComparator, setTopValue, METH_VARARGS),
          DECLARE_METHOD(t_FieldComparator$IntComparator, value, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(FieldComparator$IntComparator, t_FieldComparator$IntComparator, ::org::apache::lucene::search::FieldComparator$NumericComparator, FieldComparator$IntComparator, t_FieldComparator$IntComparator_init_, 0, 0, t_FieldComparator$IntComparator__fields_, 0, 0);
        PyObject *t_FieldComparator$IntComparator::wrap_Object(const FieldComparator$IntComparator& object, PyTypeObject *p0)
        {
          PyObject *obj = t_FieldComparator$IntComparator::wrap_Object(object);
          if (obj != NULL && obj != Py_None)
          {
            t_FieldComparator$IntComparator *self = (t_FieldComparator$IntComparator *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        PyObject *t_FieldComparator$IntComparator::wrap_jobject(const jobject& object, PyTypeObject *p0)
        {
          PyObject *obj = t_FieldComparator$IntComparator::wrap_jobject(object);
          if (obj != NULL && obj != Py_None)
          {
            t_FieldComparator$IntComparator *self = (t_FieldComparator$IntComparator *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        void t_FieldComparator$IntComparator::install(PyObject *module)
        {
          installType(&PY_TYPE(FieldComparator$IntComparator), module, "FieldComparator$IntComparator", 0);
        }

        void t_FieldComparator$IntComparator::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(FieldComparator$IntComparator).tp_dict, "class_", make_descriptor(FieldComparator$IntComparator::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(FieldComparator$IntComparator).tp_dict, "wrapfn_", make_descriptor(t_FieldComparator$IntComparator::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(FieldComparator$IntComparator).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_FieldComparator$IntComparator_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, FieldComparator$IntComparator::initializeClass, 1)))
            return NULL;
          return t_FieldComparator$IntComparator::wrap_Object(FieldComparator$IntComparator(((t_FieldComparator$IntComparator *) arg)->object.this$));
        }
        static PyObject *t_FieldComparator$IntComparator_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, FieldComparator$IntComparator::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_FieldComparator$IntComparator_of_(t_FieldComparator$IntComparator *self, PyObject *args)
        {
          if (!parseArg(args, "T", 1, &(self->parameters)))
            Py_RETURN_SELF;
          return PyErr_SetArgsError((PyObject *) self, "of_", args);
        }

        static int t_FieldComparator$IntComparator_init_(t_FieldComparator$IntComparator *self, PyObject *args, PyObject *kwds)
        {
          jint a0;
          ::java::lang::String a1((jobject) NULL);
          ::org::apache::lucene::search::FieldCache$Parser a2((jobject) NULL);
          ::java::lang::Integer a3((jobject) NULL);
          FieldComparator$IntComparator object((jobject) NULL);

          if (!parseArgs(args, "IskO", ::org::apache::lucene::search::FieldCache$Parser::initializeClass, &::java::lang::PY_TYPE(Integer), &a0, &a1, &a2, &a3))
          {
            INT_CALL(object = FieldComparator$IntComparator(a0, a1, a2, a3));
            self->object = object;
            self->parameters[0] = &::java::lang::PY_TYPE(Integer);
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_FieldComparator$IntComparator_compare(t_FieldComparator$IntComparator *self, PyObject *args)
        {
          jint a0;
          jint a1;
          jint result;

          if (!parseArgs(args, "II", &a0, &a1))
          {
            OBJ_CALL(result = self->object.compare(a0, a1));
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(FieldComparator$IntComparator), (PyObject *) self, "compare", args, 2);
        }

        static PyObject *t_FieldComparator$IntComparator_compareBottom(t_FieldComparator$IntComparator *self, PyObject *args)
        {
          jint a0;
          jint result;

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(result = self->object.compareBottom(a0));
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(FieldComparator$IntComparator), (PyObject *) self, "compareBottom", args, 2);
        }

        static PyObject *t_FieldComparator$IntComparator_compareTop(t_FieldComparator$IntComparator *self, PyObject *args)
        {
          jint a0;
          jint result;

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(result = self->object.compareTop(a0));
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(FieldComparator$IntComparator), (PyObject *) self, "compareTop", args, 2);
        }

        static PyObject *t_FieldComparator$IntComparator_copy(t_FieldComparator$IntComparator *self, PyObject *args)
        {
          jint a0;
          jint a1;

          if (!parseArgs(args, "II", &a0, &a1))
          {
            OBJ_CALL(self->object.copy(a0, a1));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(FieldComparator$IntComparator), (PyObject *) self, "copy", args, 2);
        }

        static PyObject *t_FieldComparator$IntComparator_setBottom(t_FieldComparator$IntComparator *self, PyObject *args)
        {
          jint a0;

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(self->object.setBottom(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(FieldComparator$IntComparator), (PyObject *) self, "setBottom", args, 2);
        }

        static PyObject *t_FieldComparator$IntComparator_setNextReader(t_FieldComparator$IntComparator *self, PyObject *args)
        {
          ::org::apache::lucene::index::AtomicReaderContext a0((jobject) NULL);
          ::org::apache::lucene::search::FieldComparator result((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.setNextReader(a0));
            return ::org::apache::lucene::search::t_FieldComparator::wrap_Object(result, &::java::lang::PY_TYPE(Integer));
          }

          return callSuper(&PY_TYPE(FieldComparator$IntComparator), (PyObject *) self, "setNextReader", args, 2);
        }

        static PyObject *t_FieldComparator$IntComparator_setTopValue(t_FieldComparator$IntComparator *self, PyObject *args)
        {
          ::java::lang::Integer a0((jobject) NULL);

          if (!parseArgs(args, "O", &::java::lang::PY_TYPE(Integer), &a0))
          {
            OBJ_CALL(self->object.setTopValue(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(FieldComparator$IntComparator), (PyObject *) self, "setTopValue", args, 2);
        }

        static PyObject *t_FieldComparator$IntComparator_value(t_FieldComparator$IntComparator *self, PyObject *args)
        {
          jint a0;
          ::java::lang::Integer result((jobject) NULL);

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(result = self->object.value(a0));
            return ::java::lang::t_Integer::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(FieldComparator$IntComparator), (PyObject *) self, "value", args, 2);
        }
        static PyObject *t_FieldComparator$IntComparator_get__parameters_(t_FieldComparator$IntComparator *self, void *data)
        {
          return typeParameters(self->parameters, sizeof(self->parameters));
        }

        static int t_FieldComparator$IntComparator_set__bottom(t_FieldComparator$IntComparator *self, PyObject *arg, void *data)
        {
          {
            jint value;
            if (!parseArg(arg, "I", &value))
            {
              INT_CALL(self->object.setBottom(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "bottom", arg);
          return -1;
        }

        static int t_FieldComparator$IntComparator_set__nextReader(t_FieldComparator$IntComparator *self, PyObject *arg, void *data)
        {
          {
            ::org::apache::lucene::index::AtomicReaderContext value((jobject) NULL);
            if (!parseArg(arg, "k", ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &value))
            {
              INT_CALL(self->object.setNextReader(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "nextReader", arg);
          return -1;
        }

        static int t_FieldComparator$IntComparator_set__topValue(t_FieldComparator$IntComparator *self, PyObject *arg, void *data)
        {
          {
            ::java::lang::Integer value((jobject) NULL);
            if (!parseArg(arg, "O", &::java::lang::PY_TYPE(Integer), &value))
            {
              INT_CALL(self->object.setTopValue(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "topValue", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/SortedNumericSelector$Type.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *SortedNumericSelector$Type::class$ = NULL;
        jmethodID *SortedNumericSelector$Type::mids$ = NULL;
        bool SortedNumericSelector$Type::live$ = false;
        SortedNumericSelector$Type *SortedNumericSelector$Type::MAX = NULL;
        SortedNumericSelector$Type *SortedNumericSelector$Type::MIN = NULL;

        jclass SortedNumericSelector$Type::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/SortedNumericSelector$Type");

            mids$ = new jmethodID[max_mid];
            mids$[mid_valueOf_46e516f8] = env->getStaticMethodID(cls, "valueOf", "(Ljava/lang/String;)Lorg/apache/lucene/search/SortedNumericSelector$Type;");
            mids$[mid_values_26c59952] = env->getStaticMethodID(cls, "values", "()[Lorg/apache/lucene/search/SortedNumericSelector$Type;");

            class$ = (::java::lang::Class *) new JObject(cls);
            cls = (jclass) class$->this$;

            MAX = new SortedNumericSelector$Type(env->getStaticObjectField(cls, "MAX", "Lorg/apache/lucene/search/SortedNumericSelector$Type;"));
            MIN = new SortedNumericSelector$Type(env->getStaticObjectField(cls, "MIN", "Lorg/apache/lucene/search/SortedNumericSelector$Type;"));
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        SortedNumericSelector$Type SortedNumericSelector$Type::valueOf(const ::java::lang::String & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return SortedNumericSelector$Type(env->callStaticObjectMethod(cls, mids$[mid_valueOf_46e516f8], a0.this$));
        }

        JArray< SortedNumericSelector$Type > SortedNumericSelector$Type::values()
        {
          jclass cls = env->getClass(initializeClass);
          return JArray< SortedNumericSelector$Type >(env->callStaticObjectMethod(cls, mids$[mid_values_26c59952]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_SortedNumericSelector$Type_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_SortedNumericSelector$Type_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_SortedNumericSelector$Type_of_(t_SortedNumericSelector$Type *self, PyObject *args);
        static PyObject *t_SortedNumericSelector$Type_valueOf(PyTypeObject *type, PyObject *args);
        static PyObject *t_SortedNumericSelector$Type_values(PyTypeObject *type);
        static PyObject *t_SortedNumericSelector$Type_get__parameters_(t_SortedNumericSelector$Type *self, void *data);
        static PyGetSetDef t_SortedNumericSelector$Type__fields_[] = {
          DECLARE_GET_FIELD(t_SortedNumericSelector$Type, parameters_),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_SortedNumericSelector$Type__methods_[] = {
          DECLARE_METHOD(t_SortedNumericSelector$Type, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SortedNumericSelector$Type, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SortedNumericSelector$Type, of_, METH_VARARGS),
          DECLARE_METHOD(t_SortedNumericSelector$Type, valueOf, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_SortedNumericSelector$Type, values, METH_NOARGS | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(SortedNumericSelector$Type, t_SortedNumericSelector$Type, ::java::lang::Enum, SortedNumericSelector$Type, abstract_init, 0, 0, t_SortedNumericSelector$Type__fields_, 0, 0);
        PyObject *t_SortedNumericSelector$Type::wrap_Object(const SortedNumericSelector$Type& object, PyTypeObject *p0)
        {
          PyObject *obj = t_SortedNumericSelector$Type::wrap_Object(object);
          if (obj != NULL && obj != Py_None)
          {
            t_SortedNumericSelector$Type *self = (t_SortedNumericSelector$Type *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        PyObject *t_SortedNumericSelector$Type::wrap_jobject(const jobject& object, PyTypeObject *p0)
        {
          PyObject *obj = t_SortedNumericSelector$Type::wrap_jobject(object);
          if (obj != NULL && obj != Py_None)
          {
            t_SortedNumericSelector$Type *self = (t_SortedNumericSelector$Type *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        void t_SortedNumericSelector$Type::install(PyObject *module)
        {
          installType(&PY_TYPE(SortedNumericSelector$Type), module, "SortedNumericSelector$Type", 0);
        }

        void t_SortedNumericSelector$Type::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(SortedNumericSelector$Type).tp_dict, "class_", make_descriptor(SortedNumericSelector$Type::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(SortedNumericSelector$Type).tp_dict, "wrapfn_", make_descriptor(t_SortedNumericSelector$Type::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(SortedNumericSelector$Type).tp_dict, "boxfn_", make_descriptor(boxObject));
          env->getClass(SortedNumericSelector$Type::initializeClass);
          PyDict_SetItemString(PY_TYPE(SortedNumericSelector$Type).tp_dict, "MAX", make_descriptor(t_SortedNumericSelector$Type::wrap_Object(*SortedNumericSelector$Type::MAX)));
          PyDict_SetItemString(PY_TYPE(SortedNumericSelector$Type).tp_dict, "MIN", make_descriptor(t_SortedNumericSelector$Type::wrap_Object(*SortedNumericSelector$Type::MIN)));
        }

        static PyObject *t_SortedNumericSelector$Type_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, SortedNumericSelector$Type::initializeClass, 1)))
            return NULL;
          return t_SortedNumericSelector$Type::wrap_Object(SortedNumericSelector$Type(((t_SortedNumericSelector$Type *) arg)->object.this$));
        }
        static PyObject *t_SortedNumericSelector$Type_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, SortedNumericSelector$Type::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_SortedNumericSelector$Type_of_(t_SortedNumericSelector$Type *self, PyObject *args)
        {
          if (!parseArg(args, "T", 1, &(self->parameters)))
            Py_RETURN_SELF;
          return PyErr_SetArgsError((PyObject *) self, "of_", args);
        }

        static PyObject *t_SortedNumericSelector$Type_valueOf(PyTypeObject *type, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          SortedNumericSelector$Type result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::search::SortedNumericSelector$Type::valueOf(a0));
            return t_SortedNumericSelector$Type::wrap_Object(result);
          }

          return callSuper(type, "valueOf", args, 2);
        }

        static PyObject *t_SortedNumericSelector$Type_values(PyTypeObject *type)
        {
          JArray< SortedNumericSelector$Type > result((jobject) NULL);
          OBJ_CALL(result = ::org::apache::lucene::search::SortedNumericSelector$Type::values());
          return JArray<jobject>(result.this$).wrap(t_SortedNumericSelector$Type::wrap_jobject);
        }
        static PyObject *t_SortedNumericSelector$Type_get__parameters_(t_SortedNumericSelector$Type *self, void *data)
        {
          return typeParameters(self->parameters, sizeof(self->parameters));
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/fst/BytesRefFSTEnum$InputOutput.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace fst {

          ::java::lang::Class *BytesRefFSTEnum$InputOutput::class$ = NULL;
          jmethodID *BytesRefFSTEnum$InputOutput::mids$ = NULL;
          jfieldID *BytesRefFSTEnum$InputOutput::fids$ = NULL;
          bool BytesRefFSTEnum$InputOutput::live$ = false;

          jclass BytesRefFSTEnum$InputOutput::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/util/fst/BytesRefFSTEnum$InputOutput");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");

              fids$ = new jfieldID[max_fid];
              fids$[fid_input] = env->getFieldID(cls, "input", "Lorg/apache/lucene/util/BytesRef;");
              fids$[fid_output] = env->getFieldID(cls, "output", "Ljava/lang/Object;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          BytesRefFSTEnum$InputOutput::BytesRefFSTEnum$InputOutput() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          ::org::apache::lucene::util::BytesRef BytesRefFSTEnum$InputOutput::_get_input() const
          {
            return ::org::apache::lucene::util::BytesRef(env->getObjectField(this$, fids$[fid_input]));
          }

          void BytesRefFSTEnum$InputOutput::_set_input(const ::org::apache::lucene::util::BytesRef & a0) const
          {
            env->setObjectField(this$, fids$[fid_input], a0.this$);
          }

          ::java::lang::Object BytesRefFSTEnum$InputOutput::_get_output() const
          {
            return ::java::lang::Object(env->getObjectField(this$, fids$[fid_output]));
          }

          void BytesRefFSTEnum$InputOutput::_set_output(const ::java::lang::Object & a0) const
          {
            env->setObjectField(this$, fids$[fid_output], a0.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace fst {
          static PyObject *t_BytesRefFSTEnum$InputOutput_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_BytesRefFSTEnum$InputOutput_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_BytesRefFSTEnum$InputOutput_of_(t_BytesRefFSTEnum$InputOutput *self, PyObject *args);
          static int t_BytesRefFSTEnum$InputOutput_init_(t_BytesRefFSTEnum$InputOutput *self, PyObject *args, PyObject *kwds);
          static PyObject *t_BytesRefFSTEnum$InputOutput_get__input(t_BytesRefFSTEnum$InputOutput *self, void *data);
          static int t_BytesRefFSTEnum$InputOutput_set__input(t_BytesRefFSTEnum$InputOutput *self, PyObject *arg, void *data);
          static PyObject *t_BytesRefFSTEnum$InputOutput_get__output(t_BytesRefFSTEnum$InputOutput *self, void *data);
          static int t_BytesRefFSTEnum$InputOutput_set__output(t_BytesRefFSTEnum$InputOutput *self, PyObject *arg, void *data);

          static PyObject *t_BytesRefFSTEnum$InputOutput_get__parameters_(t_BytesRefFSTEnum$InputOutput *self, void *data);
          static PyGetSetDef t_BytesRefFSTEnum$InputOutput__fields_[] = {
            DECLARE_GETSET_FIELD(t_BytesRefFSTEnum$InputOutput, input),
            DECLARE_GETSET_FIELD(t_BytesRefFSTEnum$InputOutput, output),
            DECLARE_GET_FIELD(t_BytesRefFSTEnum$InputOutput, parameters_),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_BytesRefFSTEnum$InputOutput__methods_[] = {
            DECLARE_METHOD(t_BytesRefFSTEnum$InputOutput, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_BytesRefFSTEnum$InputOutput, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_BytesRefFSTEnum$InputOutput, of_, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(BytesRefFSTEnum$InputOutput, t_BytesRefFSTEnum$InputOutput, ::java::lang::Object, BytesRefFSTEnum$InputOutput, t_BytesRefFSTEnum$InputOutput_init_, 0, 0, t_BytesRefFSTEnum$InputOutput__fields_, 0, 0);
          PyObject *t_BytesRefFSTEnum$InputOutput::wrap_Object(const BytesRefFSTEnum$InputOutput& object, PyTypeObject *p0)
          {
            PyObject *obj = t_BytesRefFSTEnum$InputOutput::wrap_Object(object);
            if (obj != NULL && obj != Py_None)
            {
              t_BytesRefFSTEnum$InputOutput *self = (t_BytesRefFSTEnum$InputOutput *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          PyObject *t_BytesRefFSTEnum$InputOutput::wrap_jobject(const jobject& object, PyTypeObject *p0)
          {
            PyObject *obj = t_BytesRefFSTEnum$InputOutput::wrap_jobject(object);
            if (obj != NULL && obj != Py_None)
            {
              t_BytesRefFSTEnum$InputOutput *self = (t_BytesRefFSTEnum$InputOutput *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          void t_BytesRefFSTEnum$InputOutput::install(PyObject *module)
          {
            installType(&PY_TYPE(BytesRefFSTEnum$InputOutput), module, "BytesRefFSTEnum$InputOutput", 0);
          }

          void t_BytesRefFSTEnum$InputOutput::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(BytesRefFSTEnum$InputOutput).tp_dict, "class_", make_descriptor(BytesRefFSTEnum$InputOutput::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(BytesRefFSTEnum$InputOutput).tp_dict, "wrapfn_", make_descriptor(t_BytesRefFSTEnum$InputOutput::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(BytesRefFSTEnum$InputOutput).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_BytesRefFSTEnum$InputOutput_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, BytesRefFSTEnum$InputOutput::initializeClass, 1)))
              return NULL;
            return t_BytesRefFSTEnum$InputOutput::wrap_Object(BytesRefFSTEnum$InputOutput(((t_BytesRefFSTEnum$InputOutput *) arg)->object.this$));
          }
          static PyObject *t_BytesRefFSTEnum$InputOutput_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, BytesRefFSTEnum$InputOutput::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_BytesRefFSTEnum$InputOutput_of_(t_BytesRefFSTEnum$InputOutput *self, PyObject *args)
          {
            if (!parseArg(args, "T", 1, &(self->parameters)))
              Py_RETURN_SELF;
            return PyErr_SetArgsError((PyObject *) self, "of_", args);
          }

          static int t_BytesRefFSTEnum$InputOutput_init_(t_BytesRefFSTEnum$InputOutput *self, PyObject *args, PyObject *kwds)
          {
            BytesRefFSTEnum$InputOutput object((jobject) NULL);

            INT_CALL(object = BytesRefFSTEnum$InputOutput());
            self->object = object;

            return 0;
          }
          static PyObject *t_BytesRefFSTEnum$InputOutput_get__parameters_(t_BytesRefFSTEnum$InputOutput *self, void *data)
          {
            return typeParameters(self->parameters, sizeof(self->parameters));
          }

          static PyObject *t_BytesRefFSTEnum$InputOutput_get__input(t_BytesRefFSTEnum$InputOutput *self, void *data)
          {
            ::org::apache::lucene::util::BytesRef value((jobject) NULL);
            OBJ_CALL(value = self->object._get_input());
            return ::org::apache::lucene::util::t_BytesRef::wrap_Object(value);
          }
          static int t_BytesRefFSTEnum$InputOutput_set__input(t_BytesRefFSTEnum$InputOutput *self, PyObject *arg, void *data)
          {
            ::org::apache::lucene::util::BytesRef value((jobject) NULL);
            if (!parseArg(arg, "k", ::org::apache::lucene::util::BytesRef::initializeClass, &value))
            {
              INT_CALL(self->object._set_input(value));
              return 0;
            }
            PyErr_SetArgsError((PyObject *) self, "input", arg);
            return -1;
          }

          static PyObject *t_BytesRefFSTEnum$InputOutput_get__output(t_BytesRefFSTEnum$InputOutput *self, void *data)
          {
            ::java::lang::Object value((jobject) NULL);
            OBJ_CALL(value = self->object._get_output());
            return ::java::lang::t_Object::wrap_Object(value);
          }
          static int t_BytesRefFSTEnum$InputOutput_set__output(t_BytesRefFSTEnum$InputOutput *self, PyObject *arg, void *data)
          {
            ::java::lang::Object value((jobject) NULL);
            if (!parseArg(arg, "o", &value))
            {
              INT_CALL(self->object._set_output(value));
              return 0;
            }
            PyErr_SetArgsError((PyObject *) self, "output", arg);
            return -1;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queries/function/valuesource/LongFieldSource.h"
#include "org/apache/lucene/queries/function/FunctionValues.h"
#include "java/lang/Class.h"
#include "java/lang/Object.h"
#include "java/util/Map.h"
#include "org/apache/lucene/search/FieldCache$LongParser.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {

            ::java::lang::Class *LongFieldSource::class$ = NULL;
            jmethodID *LongFieldSource::mids$ = NULL;
            bool LongFieldSource::live$ = false;

            jclass LongFieldSource::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queries/function/valuesource/LongFieldSource");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_5fdc3f48] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;)V");
                mids$[mid_init$_d7533242] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Lorg/apache/lucene/search/FieldCache$LongParser;)V");
                mids$[mid_description_14c7b5c5] = env->getMethodID(cls, "description", "()Ljava/lang/String;");
                mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
                mids$[mid_externalToLong_5fdc3f54] = env->getMethodID(cls, "externalToLong", "(Ljava/lang/String;)J");
                mids$[mid_getValues_4c566485] = env->getMethodID(cls, "getValues", "(Ljava/util/Map;Lorg/apache/lucene/index/AtomicReaderContext;)Lorg/apache/lucene/queries/function/FunctionValues;");
                mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
                mids$[mid_longToObject_fe727f5c] = env->getMethodID(cls, "longToObject", "(J)Ljava/lang/Object;");
                mids$[mid_longToString_3e02f30e] = env->getMethodID(cls, "longToString", "(J)Ljava/lang/String;");
                mids$[mid_newMutableValueLong_31ee279b] = env->getMethodID(cls, "newMutableValueLong", "()Lorg/apache/lucene/util/mutable/MutableValueLong;");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            LongFieldSource::LongFieldSource(const ::java::lang::String & a0) : ::org::apache::lucene::queries::function::valuesource::FieldCacheSource(env->newObject(initializeClass, &mids$, mid_init$_5fdc3f48, a0.this$)) {}

            LongFieldSource::LongFieldSource(const ::java::lang::String & a0, const ::org::apache::lucene::search::FieldCache$LongParser & a1) : ::org::apache::lucene::queries::function::valuesource::FieldCacheSource(env->newObject(initializeClass, &mids$, mid_init$_d7533242, a0.this$, a1.this$)) {}

            ::java::lang::String LongFieldSource::description() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_description_14c7b5c5]));
            }

            jboolean LongFieldSource::equals(const ::java::lang::Object & a0) const
            {
              return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
            }

            jlong LongFieldSource::externalToLong(const ::java::lang::String & a0) const
            {
              return env->callLongMethod(this$, mids$[mid_externalToLong_5fdc3f54], a0.this$);
            }

            ::org::apache::lucene::queries::function::FunctionValues LongFieldSource::getValues(const ::java::util::Map & a0, const ::org::apache::lucene::index::AtomicReaderContext & a1) const
            {
              return ::org::apache::lucene::queries::function::FunctionValues(env->callObjectMethod(this$, mids$[mid_getValues_4c566485], a0.this$, a1.this$));
            }

            jint LongFieldSource::hashCode() const
            {
              return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
            }

            ::java::lang::Object LongFieldSource::longToObject(jlong a0) const
            {
              return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_longToObject_fe727f5c], a0));
            }

            ::java::lang::String LongFieldSource::longToString(jlong a0) const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_longToString_3e02f30e], a0));
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {
            static PyObject *t_LongFieldSource_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_LongFieldSource_instance_(PyTypeObject *type, PyObject *arg);
            static int t_LongFieldSource_init_(t_LongFieldSource *self, PyObject *args, PyObject *kwds);
            static PyObject *t_LongFieldSource_description(t_LongFieldSource *self, PyObject *args);
            static PyObject *t_LongFieldSource_equals(t_LongFieldSource *self, PyObject *args);
            static PyObject *t_LongFieldSource_externalToLong(t_LongFieldSource *self, PyObject *arg);
            static PyObject *t_LongFieldSource_getValues(t_LongFieldSource *self, PyObject *args);
            static PyObject *t_LongFieldSource_hashCode(t_LongFieldSource *self, PyObject *args);
            static PyObject *t_LongFieldSource_longToObject(t_LongFieldSource *self, PyObject *arg);
            static PyObject *t_LongFieldSource_longToString(t_LongFieldSource *self, PyObject *arg);

            static PyMethodDef t_LongFieldSource__methods_[] = {
              DECLARE_METHOD(t_LongFieldSource, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_LongFieldSource, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_LongFieldSource, description, METH_VARARGS),
              DECLARE_METHOD(t_LongFieldSource, equals, METH_VARARGS),
              DECLARE_METHOD(t_LongFieldSource, externalToLong, METH_O),
              DECLARE_METHOD(t_LongFieldSource, getValues, METH_VARARGS),
              DECLARE_METHOD(t_LongFieldSource, hashCode, METH_VARARGS),
              DECLARE_METHOD(t_LongFieldSource, longToObject, METH_O),
              DECLARE_METHOD(t_LongFieldSource, longToString, METH_O),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(LongFieldSource, t_LongFieldSource, ::org::apache::lucene::queries::function::valuesource::FieldCacheSource, LongFieldSource, t_LongFieldSource_init_, 0, 0, 0, 0, 0);

            void t_LongFieldSource::install(PyObject *module)
            {
              installType(&PY_TYPE(LongFieldSource), module, "LongFieldSource", 0);
            }

            void t_LongFieldSource::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(LongFieldSource).tp_dict, "class_", make_descriptor(LongFieldSource::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(LongFieldSource).tp_dict, "wrapfn_", make_descriptor(t_LongFieldSource::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(LongFieldSource).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_LongFieldSource_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, LongFieldSource::initializeClass, 1)))
                return NULL;
              return t_LongFieldSource::wrap_Object(LongFieldSource(((t_LongFieldSource *) arg)->object.this$));
            }
            static PyObject *t_LongFieldSource_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, LongFieldSource::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_LongFieldSource_init_(t_LongFieldSource *self, PyObject *args, PyObject *kwds)
            {
              switch (PyTuple_GET_SIZE(args)) {
               case 1:
                {
                  ::java::lang::String a0((jobject) NULL);
                  LongFieldSource object((jobject) NULL);

                  if (!parseArgs(args, "s", &a0))
                  {
                    INT_CALL(object = LongFieldSource(a0));
                    self->object = object;
                    break;
                  }
                }
                goto err;
               case 2:
                {
                  ::java::lang::String a0((jobject) NULL);
                  ::org::apache::lucene::search::FieldCache$LongParser a1((jobject) NULL);
                  LongFieldSource object((jobject) NULL);

                  if (!parseArgs(args, "sk", ::org::apache::lucene::search::FieldCache$LongParser::initializeClass, &a0, &a1))
                  {
                    INT_CALL(object = LongFieldSource(a0, a1));
                    self->object = object;
                    break;
                  }
                }
               default:
               err:
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_LongFieldSource_description(t_LongFieldSource *self, PyObject *args)
            {
              ::java::lang::String result((jobject) NULL);

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.description());
                return j2p(result);
              }

              return callSuper(&PY_TYPE(LongFieldSource), (PyObject *) self, "description", args, 2);
            }

            static PyObject *t_LongFieldSource_equals(t_LongFieldSource *self, PyObject *args)
            {
              ::java::lang::Object a0((jobject) NULL);
              jboolean result;

              if (!parseArgs(args, "o", &a0))
              {
                OBJ_CALL(result = self->object.equals(a0));
                Py_RETURN_BOOL(result);
              }

              return callSuper(&PY_TYPE(LongFieldSource), (PyObject *) self, "equals", args, 2);
            }

            static PyObject *t_LongFieldSource_externalToLong(t_LongFieldSource *self, PyObject *arg)
            {
              ::java::lang::String a0((jobject) NULL);
              jlong result;

              if (!parseArg(arg, "s", &a0))
              {
                OBJ_CALL(result = self->object.externalToLong(a0));
                return PyLong_FromLongLong((PY_LONG_LONG) result);
              }

              PyErr_SetArgsError((PyObject *) self, "externalToLong", arg);
              return NULL;
            }

            static PyObject *t_LongFieldSource_getValues(t_LongFieldSource *self, PyObject *args)
            {
              ::java::util::Map a0((jobject) NULL);
              PyTypeObject **p0;
              ::org::apache::lucene::index::AtomicReaderContext a1((jobject) NULL);
              ::org::apache::lucene::queries::function::FunctionValues result((jobject) NULL);

              if (!parseArgs(args, "Kk", ::java::util::Map::initializeClass, ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_, &a1))
              {
                OBJ_CALL(result = self->object.getValues(a0, a1));
                return ::org::apache::lucene::queries::function::t_FunctionValues::wrap_Object(result);
              }

              return callSuper(&PY_TYPE(LongFieldSource), (PyObject *) self, "getValues", args, 2);
            }

            static PyObject *t_LongFieldSource_hashCode(t_LongFieldSource *self, PyObject *args)
            {
              jint result;

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.hashCode());
                return PyInt_FromLong((long) result);
              }

              return callSuper(&PY_TYPE(LongFieldSource), (PyObject *) self, "hashCode", args, 2);
            }

            static PyObject *t_LongFieldSource_longToObject(t_LongFieldSource *self, PyObject *arg)
            {
              jlong a0;
              ::java::lang::Object result((jobject) NULL);

              if (!parseArg(arg, "J", &a0))
              {
                OBJ_CALL(result = self->object.longToObject(a0));
                return ::java::lang::t_Object::wrap_Object(result);
              }

              PyErr_SetArgsError((PyObject *) self, "longToObject", arg);
              return NULL;
            }

            static PyObject *t_LongFieldSource_longToString(t_LongFieldSource *self, PyObject *arg)
            {
              jlong a0;
              ::java::lang::String result((jobject) NULL);

              if (!parseArg(arg, "J", &a0))
              {
                OBJ_CALL(result = self->object.longToString(a0));
                return j2p(result);
              }

              PyErr_SetArgsError((PyObject *) self, "longToString", arg);
              return NULL;
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/suggest/InputIterator$InputIteratorWrapper.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "org/apache/lucene/util/BytesRefIterator.h"
#include "java/lang/Class.h"
#include "java/io/IOException.h"
#include "java/util/Comparator.h"
#include "java/util/Set.h"
#include "org/apache/lucene/search/suggest/InputIterator.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace suggest {

          ::java::lang::Class *InputIterator$InputIteratorWrapper::class$ = NULL;
          jmethodID *InputIterator$InputIteratorWrapper::mids$ = NULL;
          bool InputIterator$InputIteratorWrapper::live$ = false;

          jclass InputIterator$InputIteratorWrapper::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/suggest/InputIterator$InputIteratorWrapper");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_506719fa] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/BytesRefIterator;)V");
              mids$[mid_contexts_03e99967] = env->getMethodID(cls, "contexts", "()Ljava/util/Set;");
              mids$[mid_getComparator_5a7ff2fc] = env->getMethodID(cls, "getComparator", "()Ljava/util/Comparator;");
              mids$[mid_hasContexts_54c6a16a] = env->getMethodID(cls, "hasContexts", "()Z");
              mids$[mid_hasPayloads_54c6a16a] = env->getMethodID(cls, "hasPayloads", "()Z");
              mids$[mid_next_4ae19461] = env->getMethodID(cls, "next", "()Lorg/apache/lucene/util/BytesRef;");
              mids$[mid_payload_4ae19461] = env->getMethodID(cls, "payload", "()Lorg/apache/lucene/util/BytesRef;");
              mids$[mid_weight_54c6a17a] = env->getMethodID(cls, "weight", "()J");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          InputIterator$InputIteratorWrapper::InputIterator$InputIteratorWrapper(const ::org::apache::lucene::util::BytesRefIterator & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_506719fa, a0.this$)) {}

          ::java::util::Set InputIterator$InputIteratorWrapper::contexts() const
          {
            return ::java::util::Set(env->callObjectMethod(this$, mids$[mid_contexts_03e99967]));
          }

          ::java::util::Comparator InputIterator$InputIteratorWrapper::getComparator() const
          {
            return ::java::util::Comparator(env->callObjectMethod(this$, mids$[mid_getComparator_5a7ff2fc]));
          }

          jboolean InputIterator$InputIteratorWrapper::hasContexts() const
          {
            return env->callBooleanMethod(this$, mids$[mid_hasContexts_54c6a16a]);
          }

          jboolean InputIterator$InputIteratorWrapper::hasPayloads() const
          {
            return env->callBooleanMethod(this$, mids$[mid_hasPayloads_54c6a16a]);
          }

          ::org::apache::lucene::util::BytesRef InputIterator$InputIteratorWrapper::next() const
          {
            return ::org::apache::lucene::util::BytesRef(env->callObjectMethod(this$, mids$[mid_next_4ae19461]));
          }

          ::org::apache::lucene::util::BytesRef InputIterator$InputIteratorWrapper::payload() const
          {
            return ::org::apache::lucene::util::BytesRef(env->callObjectMethod(this$, mids$[mid_payload_4ae19461]));
          }

          jlong InputIterator$InputIteratorWrapper::weight() const
          {
            return env->callLongMethod(this$, mids$[mid_weight_54c6a17a]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace suggest {
          static PyObject *t_InputIterator$InputIteratorWrapper_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_InputIterator$InputIteratorWrapper_instance_(PyTypeObject *type, PyObject *arg);
          static int t_InputIterator$InputIteratorWrapper_init_(t_InputIterator$InputIteratorWrapper *self, PyObject *args, PyObject *kwds);
          static PyObject *t_InputIterator$InputIteratorWrapper_contexts(t_InputIterator$InputIteratorWrapper *self);
          static PyObject *t_InputIterator$InputIteratorWrapper_getComparator(t_InputIterator$InputIteratorWrapper *self);
          static PyObject *t_InputIterator$InputIteratorWrapper_hasContexts(t_InputIterator$InputIteratorWrapper *self);
          static PyObject *t_InputIterator$InputIteratorWrapper_hasPayloads(t_InputIterator$InputIteratorWrapper *self);
          static PyObject *t_InputIterator$InputIteratorWrapper_next(t_InputIterator$InputIteratorWrapper *self);
          static PyObject *t_InputIterator$InputIteratorWrapper_payload(t_InputIterator$InputIteratorWrapper *self);
          static PyObject *t_InputIterator$InputIteratorWrapper_weight(t_InputIterator$InputIteratorWrapper *self);
          static PyObject *t_InputIterator$InputIteratorWrapper_get__comparator(t_InputIterator$InputIteratorWrapper *self, void *data);
          static PyGetSetDef t_InputIterator$InputIteratorWrapper__fields_[] = {
            DECLARE_GET_FIELD(t_InputIterator$InputIteratorWrapper, comparator),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_InputIterator$InputIteratorWrapper__methods_[] = {
            DECLARE_METHOD(t_InputIterator$InputIteratorWrapper, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_InputIterator$InputIteratorWrapper, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_InputIterator$InputIteratorWrapper, contexts, METH_NOARGS),
            DECLARE_METHOD(t_InputIterator$InputIteratorWrapper, getComparator, METH_NOARGS),
            DECLARE_METHOD(t_InputIterator$InputIteratorWrapper, hasContexts, METH_NOARGS),
            DECLARE_METHOD(t_InputIterator$InputIteratorWrapper, hasPayloads, METH_NOARGS),
            DECLARE_METHOD(t_InputIterator$InputIteratorWrapper, next, METH_NOARGS),
            DECLARE_METHOD(t_InputIterator$InputIteratorWrapper, payload, METH_NOARGS),
            DECLARE_METHOD(t_InputIterator$InputIteratorWrapper, weight, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(InputIterator$InputIteratorWrapper, t_InputIterator$InputIteratorWrapper, ::java::lang::Object, InputIterator$InputIteratorWrapper, t_InputIterator$InputIteratorWrapper_init_, PyObject_SelfIter, ((PyObject *(*)(t_InputIterator$InputIteratorWrapper *)) get_next< t_InputIterator$InputIteratorWrapper,::org::apache::lucene::util::t_BytesRef,::org::apache::lucene::util::BytesRef >), t_InputIterator$InputIteratorWrapper__fields_, 0, 0);

          void t_InputIterator$InputIteratorWrapper::install(PyObject *module)
          {
            installType(&PY_TYPE(InputIterator$InputIteratorWrapper), module, "InputIterator$InputIteratorWrapper", 0);
          }

          void t_InputIterator$InputIteratorWrapper::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(InputIterator$InputIteratorWrapper).tp_dict, "class_", make_descriptor(InputIterator$InputIteratorWrapper::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(InputIterator$InputIteratorWrapper).tp_dict, "wrapfn_", make_descriptor(t_InputIterator$InputIteratorWrapper::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(InputIterator$InputIteratorWrapper).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_InputIterator$InputIteratorWrapper_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, InputIterator$InputIteratorWrapper::initializeClass, 1)))
              return NULL;
            return t_InputIterator$InputIteratorWrapper::wrap_Object(InputIterator$InputIteratorWrapper(((t_InputIterator$InputIteratorWrapper *) arg)->object.this$));
          }
          static PyObject *t_InputIterator$InputIteratorWrapper_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, InputIterator$InputIteratorWrapper::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_InputIterator$InputIteratorWrapper_init_(t_InputIterator$InputIteratorWrapper *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::util::BytesRefIterator a0((jobject) NULL);
            InputIterator$InputIteratorWrapper object((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::util::BytesRefIterator::initializeClass, &a0))
            {
              INT_CALL(object = InputIterator$InputIteratorWrapper(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_InputIterator$InputIteratorWrapper_contexts(t_InputIterator$InputIteratorWrapper *self)
          {
            ::java::util::Set result((jobject) NULL);
            OBJ_CALL(result = self->object.contexts());
            return ::java::util::t_Set::wrap_Object(result, &::org::apache::lucene::util::PY_TYPE(BytesRef));
          }

          static PyObject *t_InputIterator$InputIteratorWrapper_getComparator(t_InputIterator$InputIteratorWrapper *self)
          {
            ::java::util::Comparator result((jobject) NULL);
            OBJ_CALL(result = self->object.getComparator());
            return ::java::util::t_Comparator::wrap_Object(result, &::org::apache::lucene::util::PY_TYPE(BytesRef));
          }

          static PyObject *t_InputIterator$InputIteratorWrapper_hasContexts(t_InputIterator$InputIteratorWrapper *self)
          {
            jboolean result;
            OBJ_CALL(result = self->object.hasContexts());
            Py_RETURN_BOOL(result);
          }

          static PyObject *t_InputIterator$InputIteratorWrapper_hasPayloads(t_InputIterator$InputIteratorWrapper *self)
          {
            jboolean result;
            OBJ_CALL(result = self->object.hasPayloads());
            Py_RETURN_BOOL(result);
          }

          static PyObject *t_InputIterator$InputIteratorWrapper_next(t_InputIterator$InputIteratorWrapper *self)
          {
            ::org::apache::lucene::util::BytesRef result((jobject) NULL);
            OBJ_CALL(result = self->object.next());
            return ::org::apache::lucene::util::t_BytesRef::wrap_Object(result);
          }

          static PyObject *t_InputIterator$InputIteratorWrapper_payload(t_InputIterator$InputIteratorWrapper *self)
          {
            ::org::apache::lucene::util::BytesRef result((jobject) NULL);
            OBJ_CALL(result = self->object.payload());
            return ::org::apache::lucene::util::t_BytesRef::wrap_Object(result);
          }

          static PyObject *t_InputIterator$InputIteratorWrapper_weight(t_InputIterator$InputIteratorWrapper *self)
          {
            jlong result;
            OBJ_CALL(result = self->object.weight());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          static PyObject *t_InputIterator$InputIteratorWrapper_get__comparator(t_InputIterator$InputIteratorWrapper *self, void *data)
          {
            ::java::util::Comparator value((jobject) NULL);
            OBJ_CALL(value = self->object.getComparator());
            return ::java::util::t_Comparator::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/FilterCodec.h"
#include "org/apache/lucene/codecs/PostingsFormat.h"
#include "org/apache/lucene/codecs/NormsFormat.h"
#include "org/apache/lucene/codecs/FieldInfosFormat.h"
#include "org/apache/lucene/codecs/DocValuesFormat.h"
#include "org/apache/lucene/codecs/TermVectorsFormat.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/codecs/SegmentInfoFormat.h"
#include "org/apache/lucene/codecs/StoredFieldsFormat.h"
#include "org/apache/lucene/codecs/LiveDocsFormat.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {

        ::java::lang::Class *FilterCodec::class$ = NULL;
        jmethodID *FilterCodec::mids$ = NULL;
        bool FilterCodec::live$ = false;

        jclass FilterCodec::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/FilterCodec");

            mids$ = new jmethodID[max_mid];
            mids$[mid_docValuesFormat_9a259760] = env->getMethodID(cls, "docValuesFormat", "()Lorg/apache/lucene/codecs/DocValuesFormat;");
            mids$[mid_fieldInfosFormat_82160220] = env->getMethodID(cls, "fieldInfosFormat", "()Lorg/apache/lucene/codecs/FieldInfosFormat;");
            mids$[mid_liveDocsFormat_fcc69d9a] = env->getMethodID(cls, "liveDocsFormat", "()Lorg/apache/lucene/codecs/LiveDocsFormat;");
            mids$[mid_normsFormat_03b89e43] = env->getMethodID(cls, "normsFormat", "()Lorg/apache/lucene/codecs/NormsFormat;");
            mids$[mid_postingsFormat_d12d16c8] = env->getMethodID(cls, "postingsFormat", "()Lorg/apache/lucene/codecs/PostingsFormat;");
            mids$[mid_segmentInfoFormat_c24d8633] = env->getMethodID(cls, "segmentInfoFormat", "()Lorg/apache/lucene/codecs/SegmentInfoFormat;");
            mids$[mid_storedFieldsFormat_2b977101] = env->getMethodID(cls, "storedFieldsFormat", "()Lorg/apache/lucene/codecs/StoredFieldsFormat;");
            mids$[mid_termVectorsFormat_bcd1d8b8] = env->getMethodID(cls, "termVectorsFormat", "()Lorg/apache/lucene/codecs/TermVectorsFormat;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        ::org::apache::lucene::codecs::DocValuesFormat FilterCodec::docValuesFormat() const
        {
          return ::org::apache::lucene::codecs::DocValuesFormat(env->callObjectMethod(this$, mids$[mid_docValuesFormat_9a259760]));
        }

        ::org::apache::lucene::codecs::FieldInfosFormat FilterCodec::fieldInfosFormat() const
        {
          return ::org::apache::lucene::codecs::FieldInfosFormat(env->callObjectMethod(this$, mids$[mid_fieldInfosFormat_82160220]));
        }

        ::org::apache::lucene::codecs::LiveDocsFormat FilterCodec::liveDocsFormat() const
        {
          return ::org::apache::lucene::codecs::LiveDocsFormat(env->callObjectMethod(this$, mids$[mid_liveDocsFormat_fcc69d9a]));
        }

        ::org::apache::lucene::codecs::NormsFormat FilterCodec::normsFormat() const
        {
          return ::org::apache::lucene::codecs::NormsFormat(env->callObjectMethod(this$, mids$[mid_normsFormat_03b89e43]));
        }

        ::org::apache::lucene::codecs::PostingsFormat FilterCodec::postingsFormat() const
        {
          return ::org::apache::lucene::codecs::PostingsFormat(env->callObjectMethod(this$, mids$[mid_postingsFormat_d12d16c8]));
        }

        ::org::apache::lucene::codecs::SegmentInfoFormat FilterCodec::segmentInfoFormat() const
        {
          return ::org::apache::lucene::codecs::SegmentInfoFormat(env->callObjectMethod(this$, mids$[mid_segmentInfoFormat_c24d8633]));
        }

        ::org::apache::lucene::codecs::StoredFieldsFormat FilterCodec::storedFieldsFormat() const
        {
          return ::org::apache::lucene::codecs::StoredFieldsFormat(env->callObjectMethod(this$, mids$[mid_storedFieldsFormat_2b977101]));
        }

        ::org::apache::lucene::codecs::TermVectorsFormat FilterCodec::termVectorsFormat() const
        {
          return ::org::apache::lucene::codecs::TermVectorsFormat(env->callObjectMethod(this$, mids$[mid_termVectorsFormat_bcd1d8b8]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        static PyObject *t_FilterCodec_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FilterCodec_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FilterCodec_docValuesFormat(t_FilterCodec *self, PyObject *args);
        static PyObject *t_FilterCodec_fieldInfosFormat(t_FilterCodec *self, PyObject *args);
        static PyObject *t_FilterCodec_liveDocsFormat(t_FilterCodec *self, PyObject *args);
        static PyObject *t_FilterCodec_normsFormat(t_FilterCodec *self, PyObject *args);
        static PyObject *t_FilterCodec_postingsFormat(t_FilterCodec *self, PyObject *args);
        static PyObject *t_FilterCodec_segmentInfoFormat(t_FilterCodec *self, PyObject *args);
        static PyObject *t_FilterCodec_storedFieldsFormat(t_FilterCodec *self, PyObject *args);
        static PyObject *t_FilterCodec_termVectorsFormat(t_FilterCodec *self, PyObject *args);

        static PyMethodDef t_FilterCodec__methods_[] = {
          DECLARE_METHOD(t_FilterCodec, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FilterCodec, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FilterCodec, docValuesFormat, METH_VARARGS),
          DECLARE_METHOD(t_FilterCodec, fieldInfosFormat, METH_VARARGS),
          DECLARE_METHOD(t_FilterCodec, liveDocsFormat, METH_VARARGS),
          DECLARE_METHOD(t_FilterCodec, normsFormat, METH_VARARGS),
          DECLARE_METHOD(t_FilterCodec, postingsFormat, METH_VARARGS),
          DECLARE_METHOD(t_FilterCodec, segmentInfoFormat, METH_VARARGS),
          DECLARE_METHOD(t_FilterCodec, storedFieldsFormat, METH_VARARGS),
          DECLARE_METHOD(t_FilterCodec, termVectorsFormat, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(FilterCodec, t_FilterCodec, ::org::apache::lucene::codecs::Codec, FilterCodec, abstract_init, 0, 0, 0, 0, 0);

        void t_FilterCodec::install(PyObject *module)
        {
          installType(&PY_TYPE(FilterCodec), module, "FilterCodec", 0);
        }

        void t_FilterCodec::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(FilterCodec).tp_dict, "class_", make_descriptor(FilterCodec::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(FilterCodec).tp_dict, "wrapfn_", make_descriptor(t_FilterCodec::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(FilterCodec).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_FilterCodec_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, FilterCodec::initializeClass, 1)))
            return NULL;
          return t_FilterCodec::wrap_Object(FilterCodec(((t_FilterCodec *) arg)->object.this$));
        }
        static PyObject *t_FilterCodec_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, FilterCodec::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_FilterCodec_docValuesFormat(t_FilterCodec *self, PyObject *args)
        {
          ::org::apache::lucene::codecs::DocValuesFormat result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.docValuesFormat());
            return ::org::apache::lucene::codecs::t_DocValuesFormat::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(FilterCodec), (PyObject *) self, "docValuesFormat", args, 2);
        }

        static PyObject *t_FilterCodec_fieldInfosFormat(t_FilterCodec *self, PyObject *args)
        {
          ::org::apache::lucene::codecs::FieldInfosFormat result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.fieldInfosFormat());
            return ::org::apache::lucene::codecs::t_FieldInfosFormat::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(FilterCodec), (PyObject *) self, "fieldInfosFormat", args, 2);
        }

        static PyObject *t_FilterCodec_liveDocsFormat(t_FilterCodec *self, PyObject *args)
        {
          ::org::apache::lucene::codecs::LiveDocsFormat result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.liveDocsFormat());
            return ::org::apache::lucene::codecs::t_LiveDocsFormat::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(FilterCodec), (PyObject *) self, "liveDocsFormat", args, 2);
        }

        static PyObject *t_FilterCodec_normsFormat(t_FilterCodec *self, PyObject *args)
        {
          ::org::apache::lucene::codecs::NormsFormat result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.normsFormat());
            return ::org::apache::lucene::codecs::t_NormsFormat::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(FilterCodec), (PyObject *) self, "normsFormat", args, 2);
        }

        static PyObject *t_FilterCodec_postingsFormat(t_FilterCodec *self, PyObject *args)
        {
          ::org::apache::lucene::codecs::PostingsFormat result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.postingsFormat());
            return ::org::apache::lucene::codecs::t_PostingsFormat::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(FilterCodec), (PyObject *) self, "postingsFormat", args, 2);
        }

        static PyObject *t_FilterCodec_segmentInfoFormat(t_FilterCodec *self, PyObject *args)
        {
          ::org::apache::lucene::codecs::SegmentInfoFormat result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.segmentInfoFormat());
            return ::org::apache::lucene::codecs::t_SegmentInfoFormat::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(FilterCodec), (PyObject *) self, "segmentInfoFormat", args, 2);
        }

        static PyObject *t_FilterCodec_storedFieldsFormat(t_FilterCodec *self, PyObject *args)
        {
          ::org::apache::lucene::codecs::StoredFieldsFormat result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.storedFieldsFormat());
            return ::org::apache::lucene::codecs::t_StoredFieldsFormat::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(FilterCodec), (PyObject *) self, "storedFieldsFormat", args, 2);
        }

        static PyObject *t_FilterCodec_termVectorsFormat(t_FilterCodec *self, PyObject *args)
        {
          ::org::apache::lucene::codecs::TermVectorsFormat result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.termVectorsFormat());
            return ::org::apache::lucene::codecs::t_TermVectorsFormat::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(FilterCodec), (PyObject *) self, "termVectorsFormat", args, 2);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/standard/processors/BoostQueryNodeProcessor.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace processors {

              ::java::lang::Class *BoostQueryNodeProcessor::class$ = NULL;
              jmethodID *BoostQueryNodeProcessor::mids$ = NULL;
              bool BoostQueryNodeProcessor::live$ = false;

              jclass BoostQueryNodeProcessor::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/standard/processors/BoostQueryNodeProcessor");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
                  mids$[mid_preProcessNode_6705aed7] = env->getMethodID(cls, "preProcessNode", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;)Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;");
                  mids$[mid_setChildrenOrder_4f378251] = env->getMethodID(cls, "setChildrenOrder", "(Ljava/util/List;)Ljava/util/List;");
                  mids$[mid_postProcessNode_6705aed7] = env->getMethodID(cls, "postProcessNode", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;)Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              BoostQueryNodeProcessor::BoostQueryNodeProcessor() : ::org::apache::lucene::queryparser::flexible::core::processors::QueryNodeProcessorImpl(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace processors {
              static PyObject *t_BoostQueryNodeProcessor_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_BoostQueryNodeProcessor_instance_(PyTypeObject *type, PyObject *arg);
              static int t_BoostQueryNodeProcessor_init_(t_BoostQueryNodeProcessor *self, PyObject *args, PyObject *kwds);

              static PyMethodDef t_BoostQueryNodeProcessor__methods_[] = {
                DECLARE_METHOD(t_BoostQueryNodeProcessor, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_BoostQueryNodeProcessor, instance_, METH_O | METH_CLASS),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(BoostQueryNodeProcessor, t_BoostQueryNodeProcessor, ::org::apache::lucene::queryparser::flexible::core::processors::QueryNodeProcessorImpl, BoostQueryNodeProcessor, t_BoostQueryNodeProcessor_init_, 0, 0, 0, 0, 0);

              void t_BoostQueryNodeProcessor::install(PyObject *module)
              {
                installType(&PY_TYPE(BoostQueryNodeProcessor), module, "BoostQueryNodeProcessor", 0);
              }

              void t_BoostQueryNodeProcessor::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(BoostQueryNodeProcessor).tp_dict, "class_", make_descriptor(BoostQueryNodeProcessor::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(BoostQueryNodeProcessor).tp_dict, "wrapfn_", make_descriptor(t_BoostQueryNodeProcessor::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(BoostQueryNodeProcessor).tp_dict, "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_BoostQueryNodeProcessor_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, BoostQueryNodeProcessor::initializeClass, 1)))
                  return NULL;
                return t_BoostQueryNodeProcessor::wrap_Object(BoostQueryNodeProcessor(((t_BoostQueryNodeProcessor *) arg)->object.this$));
              }
              static PyObject *t_BoostQueryNodeProcessor_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, BoostQueryNodeProcessor::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_BoostQueryNodeProcessor_init_(t_BoostQueryNodeProcessor *self, PyObject *args, PyObject *kwds)
              {
                BoostQueryNodeProcessor object((jobject) NULL);

                INT_CALL(object = BoostQueryNodeProcessor());
                self->object = object;

                return 0;
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/spell/HighFrequencyDictionary.h"
#include "org/apache/lucene/search/spell/Dictionary.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/search/suggest/InputIterator.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace spell {

          ::java::lang::Class *HighFrequencyDictionary::class$ = NULL;
          jmethodID *HighFrequencyDictionary::mids$ = NULL;
          bool HighFrequencyDictionary::live$ = false;

          jclass HighFrequencyDictionary::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/spell/HighFrequencyDictionary");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_7d517188] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/IndexReader;Ljava/lang/String;F)V");
              mids$[mid_getEntryIterator_23dc46b1] = env->getMethodID(cls, "getEntryIterator", "()Lorg/apache/lucene/search/suggest/InputIterator;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          HighFrequencyDictionary::HighFrequencyDictionary(const ::org::apache::lucene::index::IndexReader & a0, const ::java::lang::String & a1, jfloat a2) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_7d517188, a0.this$, a1.this$, a2)) {}

          ::org::apache::lucene::search::suggest::InputIterator HighFrequencyDictionary::getEntryIterator() const
          {
            return ::org::apache::lucene::search::suggest::InputIterator(env->callObjectMethod(this$, mids$[mid_getEntryIterator_23dc46b1]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace spell {
          static PyObject *t_HighFrequencyDictionary_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_HighFrequencyDictionary_instance_(PyTypeObject *type, PyObject *arg);
          static int t_HighFrequencyDictionary_init_(t_HighFrequencyDictionary *self, PyObject *args, PyObject *kwds);
          static PyObject *t_HighFrequencyDictionary_getEntryIterator(t_HighFrequencyDictionary *self);
          static PyObject *t_HighFrequencyDictionary_get__entryIterator(t_HighFrequencyDictionary *self, void *data);
          static PyGetSetDef t_HighFrequencyDictionary__fields_[] = {
            DECLARE_GET_FIELD(t_HighFrequencyDictionary, entryIterator),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_HighFrequencyDictionary__methods_[] = {
            DECLARE_METHOD(t_HighFrequencyDictionary, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_HighFrequencyDictionary, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_HighFrequencyDictionary, getEntryIterator, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(HighFrequencyDictionary, t_HighFrequencyDictionary, ::java::lang::Object, HighFrequencyDictionary, t_HighFrequencyDictionary_init_, 0, 0, t_HighFrequencyDictionary__fields_, 0, 0);

          void t_HighFrequencyDictionary::install(PyObject *module)
          {
            installType(&PY_TYPE(HighFrequencyDictionary), module, "HighFrequencyDictionary", 0);
          }

          void t_HighFrequencyDictionary::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(HighFrequencyDictionary).tp_dict, "class_", make_descriptor(HighFrequencyDictionary::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(HighFrequencyDictionary).tp_dict, "wrapfn_", make_descriptor(t_HighFrequencyDictionary::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(HighFrequencyDictionary).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_HighFrequencyDictionary_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, HighFrequencyDictionary::initializeClass, 1)))
              return NULL;
            return t_HighFrequencyDictionary::wrap_Object(HighFrequencyDictionary(((t_HighFrequencyDictionary *) arg)->object.this$));
          }
          static PyObject *t_HighFrequencyDictionary_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, HighFrequencyDictionary::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_HighFrequencyDictionary_init_(t_HighFrequencyDictionary *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
            ::java::lang::String a1((jobject) NULL);
            jfloat a2;
            HighFrequencyDictionary object((jobject) NULL);

            if (!parseArgs(args, "ksF", ::org::apache::lucene::index::IndexReader::initializeClass, &a0, &a1, &a2))
            {
              INT_CALL(object = HighFrequencyDictionary(a0, a1, a2));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_HighFrequencyDictionary_getEntryIterator(t_HighFrequencyDictionary *self)
          {
            ::org::apache::lucene::search::suggest::InputIterator result((jobject) NULL);
            OBJ_CALL(result = self->object.getEntryIterator());
            return ::org::apache::lucene::search::suggest::t_InputIterator::wrap_Object(result);
          }

          static PyObject *t_HighFrequencyDictionary_get__entryIterator(t_HighFrequencyDictionary *self, void *data)
          {
            ::org::apache::lucene::search::suggest::InputIterator value((jobject) NULL);
            OBJ_CALL(value = self->object.getEntryIterator());
            return ::org::apache::lucene::search::suggest::t_InputIterator::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/compressing/CompressingTermVectorsFormat.h"
#include "org/apache/lucene/codecs/TermVectorsWriter.h"
#include "org/apache/lucene/codecs/TermVectorsReader.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/index/FieldInfos.h"
#include "org/apache/lucene/store/Directory.h"
#include "org/apache/lucene/index/SegmentInfo.h"
#include "org/apache/lucene/codecs/compressing/CompressionMode.h"
#include "java/lang/String.h"
#include "org/apache/lucene/store/IOContext.h"
#include "java/io/IOException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace compressing {

          ::java::lang::Class *CompressingTermVectorsFormat::class$ = NULL;
          jmethodID *CompressingTermVectorsFormat::mids$ = NULL;
          bool CompressingTermVectorsFormat::live$ = false;

          jclass CompressingTermVectorsFormat::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/compressing/CompressingTermVectorsFormat");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_5a706bd2] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Ljava/lang/String;Lorg/apache/lucene/codecs/compressing/CompressionMode;I)V");
              mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");
              mids$[mid_vectorsReader_9c23221f] = env->getMethodID(cls, "vectorsReader", "(Lorg/apache/lucene/store/Directory;Lorg/apache/lucene/index/SegmentInfo;Lorg/apache/lucene/index/FieldInfos;Lorg/apache/lucene/store/IOContext;)Lorg/apache/lucene/codecs/TermVectorsReader;");
              mids$[mid_vectorsWriter_0c8458c9] = env->getMethodID(cls, "vectorsWriter", "(Lorg/apache/lucene/store/Directory;Lorg/apache/lucene/index/SegmentInfo;Lorg/apache/lucene/store/IOContext;)Lorg/apache/lucene/codecs/TermVectorsWriter;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          CompressingTermVectorsFormat::CompressingTermVectorsFormat(const ::java::lang::String & a0, const ::java::lang::String & a1, const ::org::apache::lucene::codecs::compressing::CompressionMode & a2, jint a3) : ::org::apache::lucene::codecs::TermVectorsFormat(env->newObject(initializeClass, &mids$, mid_init$_5a706bd2, a0.this$, a1.this$, a2.this$, a3)) {}

          ::java::lang::String CompressingTermVectorsFormat::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
          }

          ::org::apache::lucene::codecs::TermVectorsReader CompressingTermVectorsFormat::vectorsReader(const ::org::apache::lucene::store::Directory & a0, const ::org::apache::lucene::index::SegmentInfo & a1, const ::org::apache::lucene::index::FieldInfos & a2, const ::org::apache::lucene::store::IOContext & a3) const
          {
            return ::org::apache::lucene::codecs::TermVectorsReader(env->callObjectMethod(this$, mids$[mid_vectorsReader_9c23221f], a0.this$, a1.this$, a2.this$, a3.this$));
          }

          ::org::apache::lucene::codecs::TermVectorsWriter CompressingTermVectorsFormat::vectorsWriter(const ::org::apache::lucene::store::Directory & a0, const ::org::apache::lucene::index::SegmentInfo & a1, const ::org::apache::lucene::store::IOContext & a2) const
          {
            return ::org::apache::lucene::codecs::TermVectorsWriter(env->callObjectMethod(this$, mids$[mid_vectorsWriter_0c8458c9], a0.this$, a1.this$, a2.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace compressing {
          static PyObject *t_CompressingTermVectorsFormat_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_CompressingTermVectorsFormat_instance_(PyTypeObject *type, PyObject *arg);
          static int t_CompressingTermVectorsFormat_init_(t_CompressingTermVectorsFormat *self, PyObject *args, PyObject *kwds);
          static PyObject *t_CompressingTermVectorsFormat_toString(t_CompressingTermVectorsFormat *self, PyObject *args);
          static PyObject *t_CompressingTermVectorsFormat_vectorsReader(t_CompressingTermVectorsFormat *self, PyObject *args);
          static PyObject *t_CompressingTermVectorsFormat_vectorsWriter(t_CompressingTermVectorsFormat *self, PyObject *args);

          static PyMethodDef t_CompressingTermVectorsFormat__methods_[] = {
            DECLARE_METHOD(t_CompressingTermVectorsFormat, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CompressingTermVectorsFormat, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CompressingTermVectorsFormat, toString, METH_VARARGS),
            DECLARE_METHOD(t_CompressingTermVectorsFormat, vectorsReader, METH_VARARGS),
            DECLARE_METHOD(t_CompressingTermVectorsFormat, vectorsWriter, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(CompressingTermVectorsFormat, t_CompressingTermVectorsFormat, ::org::apache::lucene::codecs::TermVectorsFormat, CompressingTermVectorsFormat, t_CompressingTermVectorsFormat_init_, 0, 0, 0, 0, 0);

          void t_CompressingTermVectorsFormat::install(PyObject *module)
          {
            installType(&PY_TYPE(CompressingTermVectorsFormat), module, "CompressingTermVectorsFormat", 0);
          }

          void t_CompressingTermVectorsFormat::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(CompressingTermVectorsFormat).tp_dict, "class_", make_descriptor(CompressingTermVectorsFormat::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(CompressingTermVectorsFormat).tp_dict, "wrapfn_", make_descriptor(t_CompressingTermVectorsFormat::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(CompressingTermVectorsFormat).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_CompressingTermVectorsFormat_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, CompressingTermVectorsFormat::initializeClass, 1)))
              return NULL;
            return t_CompressingTermVectorsFormat::wrap_Object(CompressingTermVectorsFormat(((t_CompressingTermVectorsFormat *) arg)->object.this$));
          }
          static PyObject *t_CompressingTermVectorsFormat_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, CompressingTermVectorsFormat::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_CompressingTermVectorsFormat_init_(t_CompressingTermVectorsFormat *self, PyObject *args, PyObject *kwds)
          {
            ::java::lang::String a0((jobject) NULL);
            ::java::lang::String a1((jobject) NULL);
            ::org::apache::lucene::codecs::compressing::CompressionMode a2((jobject) NULL);
            jint a3;
            CompressingTermVectorsFormat object((jobject) NULL);

            if (!parseArgs(args, "sskI", ::org::apache::lucene::codecs::compressing::CompressionMode::initializeClass, &a0, &a1, &a2, &a3))
            {
              INT_CALL(object = CompressingTermVectorsFormat(a0, a1, a2, a3));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_CompressingTermVectorsFormat_toString(t_CompressingTermVectorsFormat *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(&PY_TYPE(CompressingTermVectorsFormat), (PyObject *) self, "toString", args, 2);
          }

          static PyObject *t_CompressingTermVectorsFormat_vectorsReader(t_CompressingTermVectorsFormat *self, PyObject *args)
          {
            ::org::apache::lucene::store::Directory a0((jobject) NULL);
            ::org::apache::lucene::index::SegmentInfo a1((jobject) NULL);
            ::org::apache::lucene::index::FieldInfos a2((jobject) NULL);
            ::org::apache::lucene::store::IOContext a3((jobject) NULL);
            ::org::apache::lucene::codecs::TermVectorsReader result((jobject) NULL);

            if (!parseArgs(args, "kkkk", ::org::apache::lucene::store::Directory::initializeClass, ::org::apache::lucene::index::SegmentInfo::initializeClass, ::org::apache::lucene::index::FieldInfos::initializeClass, ::org::apache::lucene::store::IOContext::initializeClass, &a0, &a1, &a2, &a3))
            {
              OBJ_CALL(result = self->object.vectorsReader(a0, a1, a2, a3));
              return ::org::apache::lucene::codecs::t_TermVectorsReader::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(CompressingTermVectorsFormat), (PyObject *) self, "vectorsReader", args, 2);
          }

          static PyObject *t_CompressingTermVectorsFormat_vectorsWriter(t_CompressingTermVectorsFormat *self, PyObject *args)
          {
            ::org::apache::lucene::store::Directory a0((jobject) NULL);
            ::org::apache::lucene::index::SegmentInfo a1((jobject) NULL);
            ::org::apache::lucene::store::IOContext a2((jobject) NULL);
            ::org::apache::lucene::codecs::TermVectorsWriter result((jobject) NULL);

            if (!parseArgs(args, "kkk", ::org::apache::lucene::store::Directory::initializeClass, ::org::apache::lucene::index::SegmentInfo::initializeClass, ::org::apache::lucene::store::IOContext::initializeClass, &a0, &a1, &a2))
            {
              OBJ_CALL(result = self->object.vectorsWriter(a0, a1, a2));
              return ::org::apache::lucene::codecs::t_TermVectorsWriter::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(CompressingTermVectorsFormat), (PyObject *) self, "vectorsWriter", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/core/KeywordTokenizerFactory.h"
#include "org/apache/lucene/util/AttributeFactory.h"
#include "org/apache/lucene/analysis/core/KeywordTokenizer.h"
#include "java/lang/Class.h"
#include "java/util/Map.h"
#include "java/io/Reader.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace core {

          ::java::lang::Class *KeywordTokenizerFactory::class$ = NULL;
          jmethodID *KeywordTokenizerFactory::mids$ = NULL;
          bool KeywordTokenizerFactory::live$ = false;

          jclass KeywordTokenizerFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/core/KeywordTokenizerFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4c9e2b1c] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_4e6458a0] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/util/AttributeFactory;Ljava/io/Reader;)Lorg/apache/lucene/analysis/core/KeywordTokenizer;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          KeywordTokenizerFactory::KeywordTokenizerFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenizerFactory(env->newObject(initializeClass, &mids$, mid_init$_4c9e2b1c, a0.this$)) {}

          ::org::apache::lucene::analysis::core::KeywordTokenizer KeywordTokenizerFactory::create(const ::org::apache::lucene::util::AttributeFactory & a0, const ::java::io::Reader & a1) const
          {
            return ::org::apache::lucene::analysis::core::KeywordTokenizer(env->callObjectMethod(this$, mids$[mid_create_4e6458a0], a0.this$, a1.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace core {
          static PyObject *t_KeywordTokenizerFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_KeywordTokenizerFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_KeywordTokenizerFactory_init_(t_KeywordTokenizerFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_KeywordTokenizerFactory_create(t_KeywordTokenizerFactory *self, PyObject *args);

          static PyMethodDef t_KeywordTokenizerFactory__methods_[] = {
            DECLARE_METHOD(t_KeywordTokenizerFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_KeywordTokenizerFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_KeywordTokenizerFactory, create, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(KeywordTokenizerFactory, t_KeywordTokenizerFactory, ::org::apache::lucene::analysis::util::TokenizerFactory, KeywordTokenizerFactory, t_KeywordTokenizerFactory_init_, 0, 0, 0, 0, 0);

          void t_KeywordTokenizerFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(KeywordTokenizerFactory), module, "KeywordTokenizerFactory", 0);
          }

          void t_KeywordTokenizerFactory::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(KeywordTokenizerFactory).tp_dict, "class_", make_descriptor(KeywordTokenizerFactory::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(KeywordTokenizerFactory).tp_dict, "wrapfn_", make_descriptor(t_KeywordTokenizerFactory::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(KeywordTokenizerFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_KeywordTokenizerFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, KeywordTokenizerFactory::initializeClass, 1)))
              return NULL;
            return t_KeywordTokenizerFactory::wrap_Object(KeywordTokenizerFactory(((t_KeywordTokenizerFactory *) arg)->object.this$));
          }
          static PyObject *t_KeywordTokenizerFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, KeywordTokenizerFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_KeywordTokenizerFactory_init_(t_KeywordTokenizerFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            KeywordTokenizerFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = KeywordTokenizerFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_KeywordTokenizerFactory_create(t_KeywordTokenizerFactory *self, PyObject *args)
          {
            ::org::apache::lucene::util::AttributeFactory a0((jobject) NULL);
            ::java::io::Reader a1((jobject) NULL);
            ::org::apache::lucene::analysis::core::KeywordTokenizer result((jobject) NULL);

            if (!parseArgs(args, "kk", ::org::apache::lucene::util::AttributeFactory::initializeClass, ::java::io::Reader::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.create(a0, a1));
              return ::org::apache::lucene::analysis::core::t_KeywordTokenizer::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(KeywordTokenizerFactory), (PyObject *) self, "create", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/standard/StandardFilter.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "org/apache/lucene/util/Version.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace standard {

          ::java::lang::Class *StandardFilter::class$ = NULL;
          jmethodID *StandardFilter::mids$ = NULL;
          bool StandardFilter::live$ = false;

          jclass StandardFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/standard/StandardFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_8f50e725] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/analysis/TokenStream;)V");
              mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");
              mids$[mid_incrementTokenClassic_54c6a16a] = env->getMethodID(cls, "incrementTokenClassic", "()Z");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          StandardFilter::StandardFilter(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::analysis::TokenStream & a1) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_8f50e725, a0.this$, a1.this$)) {}

          jboolean StandardFilter::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_54c6a16a]);
          }

          jboolean StandardFilter::incrementTokenClassic() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementTokenClassic_54c6a16a]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace standard {
          static PyObject *t_StandardFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_StandardFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_StandardFilter_init_(t_StandardFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_StandardFilter_incrementToken(t_StandardFilter *self, PyObject *args);
          static PyObject *t_StandardFilter_incrementTokenClassic(t_StandardFilter *self);

          static PyMethodDef t_StandardFilter__methods_[] = {
            DECLARE_METHOD(t_StandardFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_StandardFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_StandardFilter, incrementToken, METH_VARARGS),
            DECLARE_METHOD(t_StandardFilter, incrementTokenClassic, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(StandardFilter, t_StandardFilter, ::org::apache::lucene::analysis::TokenFilter, StandardFilter, t_StandardFilter_init_, 0, 0, 0, 0, 0);

          void t_StandardFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(StandardFilter), module, "StandardFilter", 0);
          }

          void t_StandardFilter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(StandardFilter).tp_dict, "class_", make_descriptor(StandardFilter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(StandardFilter).tp_dict, "wrapfn_", make_descriptor(t_StandardFilter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(StandardFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_StandardFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, StandardFilter::initializeClass, 1)))
              return NULL;
            return t_StandardFilter::wrap_Object(StandardFilter(((t_StandardFilter *) arg)->object.this$));
          }
          static PyObject *t_StandardFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, StandardFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_StandardFilter_init_(t_StandardFilter *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::util::Version a0((jobject) NULL);
            PyTypeObject **p0;
            ::org::apache::lucene::analysis::TokenStream a1((jobject) NULL);
            StandardFilter object((jobject) NULL);

            if (!parseArgs(args, "Kk", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1))
            {
              INT_CALL(object = StandardFilter(a0, a1));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_StandardFilter_incrementToken(t_StandardFilter *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(StandardFilter), (PyObject *) self, "incrementToken", args, 2);
          }

          static PyObject *t_StandardFilter_incrementTokenClassic(t_StandardFilter *self)
          {
            jboolean result;
            OBJ_CALL(result = self->object.incrementTokenClassic());
            Py_RETURN_BOOL(result);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/miscellaneous/KeywordMarkerFilterFactory.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "java/io/IOException.h"
#include "java/util/Map.h"
#include "java/lang/String.h"
#include "org/apache/lucene/analysis/util/ResourceLoader.h"
#include "org/apache/lucene/analysis/util/ResourceLoaderAware.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {

          ::java::lang::Class *KeywordMarkerFilterFactory::class$ = NULL;
          jmethodID *KeywordMarkerFilterFactory::mids$ = NULL;
          bool KeywordMarkerFilterFactory::live$ = false;
          ::java::lang::String *KeywordMarkerFilterFactory::PATTERN = NULL;
          ::java::lang::String *KeywordMarkerFilterFactory::PROTECTED_TOKENS = NULL;

          jclass KeywordMarkerFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/miscellaneous/KeywordMarkerFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4c9e2b1c] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_a65cd6ab] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/TokenStream;");
              mids$[mid_inform_d6a4bc97] = env->getMethodID(cls, "inform", "(Lorg/apache/lucene/analysis/util/ResourceLoader;)V");
              mids$[mid_isIgnoreCase_54c6a16a] = env->getMethodID(cls, "isIgnoreCase", "()Z");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              PATTERN = new ::java::lang::String(env->getStaticObjectField(cls, "PATTERN", "Ljava/lang/String;"));
              PROTECTED_TOKENS = new ::java::lang::String(env->getStaticObjectField(cls, "PROTECTED_TOKENS", "Ljava/lang/String;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          KeywordMarkerFilterFactory::KeywordMarkerFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_4c9e2b1c, a0.this$)) {}

          ::org::apache::lucene::analysis::TokenStream KeywordMarkerFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::TokenStream(env->callObjectMethod(this$, mids$[mid_create_a65cd6ab], a0.this$));
          }

          void KeywordMarkerFilterFactory::inform(const ::org::apache::lucene::analysis::util::ResourceLoader & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_inform_d6a4bc97], a0.this$);
          }

          jboolean KeywordMarkerFilterFactory::isIgnoreCase() const
          {
            return env->callBooleanMethod(this$, mids$[mid_isIgnoreCase_54c6a16a]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {
          static PyObject *t_KeywordMarkerFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_KeywordMarkerFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_KeywordMarkerFilterFactory_init_(t_KeywordMarkerFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_KeywordMarkerFilterFactory_create(t_KeywordMarkerFilterFactory *self, PyObject *args);
          static PyObject *t_KeywordMarkerFilterFactory_inform(t_KeywordMarkerFilterFactory *self, PyObject *arg);
          static PyObject *t_KeywordMarkerFilterFactory_isIgnoreCase(t_KeywordMarkerFilterFactory *self);
          static PyObject *t_KeywordMarkerFilterFactory_get__ignoreCase(t_KeywordMarkerFilterFactory *self, void *data);
          static PyGetSetDef t_KeywordMarkerFilterFactory__fields_[] = {
            DECLARE_GET_FIELD(t_KeywordMarkerFilterFactory, ignoreCase),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_KeywordMarkerFilterFactory__methods_[] = {
            DECLARE_METHOD(t_KeywordMarkerFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_KeywordMarkerFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_KeywordMarkerFilterFactory, create, METH_VARARGS),
            DECLARE_METHOD(t_KeywordMarkerFilterFactory, inform, METH_O),
            DECLARE_METHOD(t_KeywordMarkerFilterFactory, isIgnoreCase, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(KeywordMarkerFilterFactory, t_KeywordMarkerFilterFactory, ::org::apache::lucene::analysis::util::TokenFilterFactory, KeywordMarkerFilterFactory, t_KeywordMarkerFilterFactory_init_, 0, 0, t_KeywordMarkerFilterFactory__fields_, 0, 0);

          void t_KeywordMarkerFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(KeywordMarkerFilterFactory), module, "KeywordMarkerFilterFactory", 0);
          }

          void t_KeywordMarkerFilterFactory::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(KeywordMarkerFilterFactory).tp_dict, "class_", make_descriptor(KeywordMarkerFilterFactory::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(KeywordMarkerFilterFactory).tp_dict, "wrapfn_", make_descriptor(t_KeywordMarkerFilterFactory::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(KeywordMarkerFilterFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(KeywordMarkerFilterFactory::initializeClass);
            PyDict_SetItemString(PY_TYPE(KeywordMarkerFilterFactory).tp_dict, "PATTERN", make_descriptor(j2p(*KeywordMarkerFilterFactory::PATTERN)));
            PyDict_SetItemString(PY_TYPE(KeywordMarkerFilterFactory).tp_dict, "PROTECTED_TOKENS", make_descriptor(j2p(*KeywordMarkerFilterFactory::PROTECTED_TOKENS)));
          }

          static PyObject *t_KeywordMarkerFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, KeywordMarkerFilterFactory::initializeClass, 1)))
              return NULL;
            return t_KeywordMarkerFilterFactory::wrap_Object(KeywordMarkerFilterFactory(((t_KeywordMarkerFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_KeywordMarkerFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, KeywordMarkerFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_KeywordMarkerFilterFactory_init_(t_KeywordMarkerFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            KeywordMarkerFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = KeywordMarkerFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_KeywordMarkerFilterFactory_create(t_KeywordMarkerFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::TokenStream result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::t_TokenStream::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(KeywordMarkerFilterFactory), (PyObject *) self, "create", args, 2);
          }

          static PyObject *t_KeywordMarkerFilterFactory_inform(t_KeywordMarkerFilterFactory *self, PyObject *arg)
          {
            ::org::apache::lucene::analysis::util::ResourceLoader a0((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::analysis::util::ResourceLoader::initializeClass, &a0))
            {
              OBJ_CALL(self->object.inform(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "inform", arg);
            return NULL;
          }

          static PyObject *t_KeywordMarkerFilterFactory_isIgnoreCase(t_KeywordMarkerFilterFactory *self)
          {
            jboolean result;
            OBJ_CALL(result = self->object.isIgnoreCase());
            Py_RETURN_BOOL(result);
          }

          static PyObject *t_KeywordMarkerFilterFactory_get__ignoreCase(t_KeywordMarkerFilterFactory *self, void *data)
          {
            jboolean value;
            OBJ_CALL(value = self->object.isIgnoreCase());
            Py_RETURN_BOOL(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/fi/FinnishAnalyzer.h"
#include "org/apache/lucene/util/Version.h"
#include "java/lang/String.h"
#include "org/apache/lucene/analysis/util/CharArraySet.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace fi {

          ::java::lang::Class *FinnishAnalyzer::class$ = NULL;
          jmethodID *FinnishAnalyzer::mids$ = NULL;
          bool FinnishAnalyzer::live$ = false;
          ::java::lang::String *FinnishAnalyzer::DEFAULT_STOPWORD_FILE = NULL;

          jclass FinnishAnalyzer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/fi/FinnishAnalyzer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_0d96cf33] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;)V");
              mids$[mid_init$_83eafe28] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/analysis/util/CharArraySet;)V");
              mids$[mid_init$_c9d7e4a3] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/analysis/util/CharArraySet;Lorg/apache/lucene/analysis/util/CharArraySet;)V");
              mids$[mid_getDefaultStopSet_d2d3505c] = env->getStaticMethodID(cls, "getDefaultStopSet", "()Lorg/apache/lucene/analysis/util/CharArraySet;");
              mids$[mid_createComponents_1be39cae] = env->getMethodID(cls, "createComponents", "(Ljava/lang/String;Ljava/io/Reader;)Lorg/apache/lucene/analysis/Analyzer$TokenStreamComponents;");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              DEFAULT_STOPWORD_FILE = new ::java::lang::String(env->getStaticObjectField(cls, "DEFAULT_STOPWORD_FILE", "Ljava/lang/String;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          FinnishAnalyzer::FinnishAnalyzer(const ::org::apache::lucene::util::Version & a0) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_0d96cf33, a0.this$)) {}

          FinnishAnalyzer::FinnishAnalyzer(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::analysis::util::CharArraySet & a1) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_83eafe28, a0.this$, a1.this$)) {}

          FinnishAnalyzer::FinnishAnalyzer(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::analysis::util::CharArraySet & a1, const ::org::apache::lucene::analysis::util::CharArraySet & a2) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_c9d7e4a3, a0.this$, a1.this$, a2.this$)) {}

          ::org::apache::lucene::analysis::util::CharArraySet FinnishAnalyzer::getDefaultStopSet()
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::analysis::util::CharArraySet(env->callStaticObjectMethod(cls, mids$[mid_getDefaultStopSet_d2d3505c]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace fi {
          static PyObject *t_FinnishAnalyzer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_FinnishAnalyzer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_FinnishAnalyzer_init_(t_FinnishAnalyzer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_FinnishAnalyzer_getDefaultStopSet(PyTypeObject *type);
          static PyObject *t_FinnishAnalyzer_get__defaultStopSet(t_FinnishAnalyzer *self, void *data);
          static PyGetSetDef t_FinnishAnalyzer__fields_[] = {
            DECLARE_GET_FIELD(t_FinnishAnalyzer, defaultStopSet),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_FinnishAnalyzer__methods_[] = {
            DECLARE_METHOD(t_FinnishAnalyzer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FinnishAnalyzer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FinnishAnalyzer, getDefaultStopSet, METH_NOARGS | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(FinnishAnalyzer, t_FinnishAnalyzer, ::org::apache::lucene::analysis::util::StopwordAnalyzerBase, FinnishAnalyzer, t_FinnishAnalyzer_init_, 0, 0, t_FinnishAnalyzer__fields_, 0, 0);

          void t_FinnishAnalyzer::install(PyObject *module)
          {
            installType(&PY_TYPE(FinnishAnalyzer), module, "FinnishAnalyzer", 0);
          }

          void t_FinnishAnalyzer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(FinnishAnalyzer).tp_dict, "class_", make_descriptor(FinnishAnalyzer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(FinnishAnalyzer).tp_dict, "wrapfn_", make_descriptor(t_FinnishAnalyzer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(FinnishAnalyzer).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(FinnishAnalyzer::initializeClass);
            PyDict_SetItemString(PY_TYPE(FinnishAnalyzer).tp_dict, "DEFAULT_STOPWORD_FILE", make_descriptor(j2p(*FinnishAnalyzer::DEFAULT_STOPWORD_FILE)));
          }

          static PyObject *t_FinnishAnalyzer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, FinnishAnalyzer::initializeClass, 1)))
              return NULL;
            return t_FinnishAnalyzer::wrap_Object(FinnishAnalyzer(((t_FinnishAnalyzer *) arg)->object.this$));
          }
          static PyObject *t_FinnishAnalyzer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, FinnishAnalyzer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_FinnishAnalyzer_init_(t_FinnishAnalyzer *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                FinnishAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "K", ::org::apache::lucene::util::Version::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_))
                {
                  INT_CALL(object = FinnishAnalyzer(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 2:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                ::org::apache::lucene::analysis::util::CharArraySet a1((jobject) NULL);
                PyTypeObject **p1;
                FinnishAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "KK", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1, &p1, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_))
                {
                  INT_CALL(object = FinnishAnalyzer(a0, a1));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 3:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                ::org::apache::lucene::analysis::util::CharArraySet a1((jobject) NULL);
                PyTypeObject **p1;
                ::org::apache::lucene::analysis::util::CharArraySet a2((jobject) NULL);
                PyTypeObject **p2;
                FinnishAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "KKK", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1, &p1, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_, &a2, &p2, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_))
                {
                  INT_CALL(object = FinnishAnalyzer(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_FinnishAnalyzer_getDefaultStopSet(PyTypeObject *type)
          {
            ::org::apache::lucene::analysis::util::CharArraySet result((jobject) NULL);
            OBJ_CALL(result = ::org::apache::lucene::analysis::fi::FinnishAnalyzer::getDefaultStopSet());
            return ::org::apache::lucene::analysis::util::t_CharArraySet::wrap_Object(result);
          }

          static PyObject *t_FinnishAnalyzer_get__defaultStopSet(t_FinnishAnalyzer *self, void *data)
          {
            ::org::apache::lucene::analysis::util::CharArraySet value((jobject) NULL);
            OBJ_CALL(value = self->object.getDefaultStopSet());
            return ::org::apache::lucene::analysis::util::t_CharArraySet::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/TopDocsCollector.h"
#include "org/apache/lucene/search/TopDocs.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *TopDocsCollector::class$ = NULL;
        jmethodID *TopDocsCollector::mids$ = NULL;
        bool TopDocsCollector::live$ = false;

        jclass TopDocsCollector::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/TopDocsCollector");

            mids$ = new jmethodID[max_mid];
            mids$[mid_getTotalHits_54c6a179] = env->getMethodID(cls, "getTotalHits", "()I");
            mids$[mid_topDocs_0ac630fc] = env->getMethodID(cls, "topDocs", "()Lorg/apache/lucene/search/TopDocs;");
            mids$[mid_topDocs_c7a84aba] = env->getMethodID(cls, "topDocs", "(I)Lorg/apache/lucene/search/TopDocs;");
            mids$[mid_topDocs_b17523f8] = env->getMethodID(cls, "topDocs", "(II)Lorg/apache/lucene/search/TopDocs;");
            mids$[mid_topDocsSize_54c6a179] = env->getMethodID(cls, "topDocsSize", "()I");
            mids$[mid_populateResults_fbb5e76c] = env->getMethodID(cls, "populateResults", "([Lorg/apache/lucene/search/ScoreDoc;I)V");
            mids$[mid_newTopDocs_a5bceb12] = env->getMethodID(cls, "newTopDocs", "([Lorg/apache/lucene/search/ScoreDoc;I)Lorg/apache/lucene/search/TopDocs;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        jint TopDocsCollector::getTotalHits() const
        {
          return env->callIntMethod(this$, mids$[mid_getTotalHits_54c6a179]);
        }

        ::org::apache::lucene::search::TopDocs TopDocsCollector::topDocs() const
        {
          return ::org::apache::lucene::search::TopDocs(env->callObjectMethod(this$, mids$[mid_topDocs_0ac630fc]));
        }

        ::org::apache::lucene::search::TopDocs TopDocsCollector::topDocs(jint a0) const
        {
          return ::org::apache::lucene::search::TopDocs(env->callObjectMethod(this$, mids$[mid_topDocs_c7a84aba], a0));
        }

        ::org::apache::lucene::search::TopDocs TopDocsCollector::topDocs(jint a0, jint a1) const
        {
          return ::org::apache::lucene::search::TopDocs(env->callObjectMethod(this$, mids$[mid_topDocs_b17523f8], a0, a1));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_TopDocsCollector_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_TopDocsCollector_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_TopDocsCollector_of_(t_TopDocsCollector *self, PyObject *args);
        static PyObject *t_TopDocsCollector_getTotalHits(t_TopDocsCollector *self);
        static PyObject *t_TopDocsCollector_topDocs(t_TopDocsCollector *self, PyObject *args);
        static PyObject *t_TopDocsCollector_get__totalHits(t_TopDocsCollector *self, void *data);
        static PyObject *t_TopDocsCollector_get__parameters_(t_TopDocsCollector *self, void *data);
        static PyGetSetDef t_TopDocsCollector__fields_[] = {
          DECLARE_GET_FIELD(t_TopDocsCollector, totalHits),
          DECLARE_GET_FIELD(t_TopDocsCollector, parameters_),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_TopDocsCollector__methods_[] = {
          DECLARE_METHOD(t_TopDocsCollector, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_TopDocsCollector, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_TopDocsCollector, of_, METH_VARARGS),
          DECLARE_METHOD(t_TopDocsCollector, getTotalHits, METH_NOARGS),
          DECLARE_METHOD(t_TopDocsCollector, topDocs, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(TopDocsCollector, t_TopDocsCollector, ::org::apache::lucene::search::Collector, TopDocsCollector, abstract_init, 0, 0, t_TopDocsCollector__fields_, 0, 0);
        PyObject *t_TopDocsCollector::wrap_Object(const TopDocsCollector& object, PyTypeObject *p0)
        {
          PyObject *obj = t_TopDocsCollector::wrap_Object(object);
          if (obj != NULL && obj != Py_None)
          {
            t_TopDocsCollector *self = (t_TopDocsCollector *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        PyObject *t_TopDocsCollector::wrap_jobject(const jobject& object, PyTypeObject *p0)
        {
          PyObject *obj = t_TopDocsCollector::wrap_jobject(object);
          if (obj != NULL && obj != Py_None)
          {
            t_TopDocsCollector *self = (t_TopDocsCollector *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        void t_TopDocsCollector::install(PyObject *module)
        {
          installType(&PY_TYPE(TopDocsCollector), module, "TopDocsCollector", 0);
        }

        void t_TopDocsCollector::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(TopDocsCollector).tp_dict, "class_", make_descriptor(TopDocsCollector::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(TopDocsCollector).tp_dict, "wrapfn_", make_descriptor(t_TopDocsCollector::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(TopDocsCollector).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_TopDocsCollector_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, TopDocsCollector::initializeClass, 1)))
            return NULL;
          return t_TopDocsCollector::wrap_Object(TopDocsCollector(((t_TopDocsCollector *) arg)->object.this$));
        }
        static PyObject *t_TopDocsCollector_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, TopDocsCollector::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_TopDocsCollector_of_(t_TopDocsCollector *self, PyObject *args)
        {
          if (!parseArg(args, "T", 1, &(self->parameters)))
            Py_RETURN_SELF;
          return PyErr_SetArgsError((PyObject *) self, "of_", args);
        }

        static PyObject *t_TopDocsCollector_getTotalHits(t_TopDocsCollector *self)
        {
          jint result;
          OBJ_CALL(result = self->object.getTotalHits());
          return PyInt_FromLong((long) result);
        }

        static PyObject *t_TopDocsCollector_topDocs(t_TopDocsCollector *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 0:
            {
              ::org::apache::lucene::search::TopDocs result((jobject) NULL);
              OBJ_CALL(result = self->object.topDocs());
              return ::org::apache::lucene::search::t_TopDocs::wrap_Object(result);
            }
            break;
           case 1:
            {
              jint a0;
              ::org::apache::lucene::search::TopDocs result((jobject) NULL);

              if (!parseArgs(args, "I", &a0))
              {
                OBJ_CALL(result = self->object.topDocs(a0));
                return ::org::apache::lucene::search::t_TopDocs::wrap_Object(result);
              }
            }
            break;
           case 2:
            {
              jint a0;
              jint a1;
              ::org::apache::lucene::search::TopDocs result((jobject) NULL);

              if (!parseArgs(args, "II", &a0, &a1))
              {
                OBJ_CALL(result = self->object.topDocs(a0, a1));
                return ::org::apache::lucene::search::t_TopDocs::wrap_Object(result);
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "topDocs", args);
          return NULL;
        }
        static PyObject *t_TopDocsCollector_get__parameters_(t_TopDocsCollector *self, void *data)
        {
          return typeParameters(self->parameters, sizeof(self->parameters));
        }

        static PyObject *t_TopDocsCollector_get__totalHits(t_TopDocsCollector *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object.getTotalHits());
          return PyInt_FromLong((long) value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/facet/range/DoubleRangeFacetCounts.h"
#include "org/apache/lucene/facet/range/DoubleRange.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/facet/FacetsCollector.h"
#include "org/apache/lucene/search/Filter.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/queries/function/ValueSource.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace range {

          ::java::lang::Class *DoubleRangeFacetCounts::class$ = NULL;
          jmethodID *DoubleRangeFacetCounts::mids$ = NULL;
          bool DoubleRangeFacetCounts::live$ = false;

          jclass DoubleRangeFacetCounts::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/facet/range/DoubleRangeFacetCounts");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_9ae8847d] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Lorg/apache/lucene/facet/FacetsCollector;[Lorg/apache/lucene/facet/range/DoubleRange;)V");
              mids$[mid_init$_828c1751] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Lorg/apache/lucene/queries/function/ValueSource;Lorg/apache/lucene/facet/FacetsCollector;[Lorg/apache/lucene/facet/range/DoubleRange;)V");
              mids$[mid_init$_f6d04191] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Lorg/apache/lucene/queries/function/ValueSource;Lorg/apache/lucene/facet/FacetsCollector;Lorg/apache/lucene/search/Filter;[Lorg/apache/lucene/facet/range/DoubleRange;)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          DoubleRangeFacetCounts::DoubleRangeFacetCounts(const ::java::lang::String & a0, const ::org::apache::lucene::facet::FacetsCollector & a1, const JArray< ::org::apache::lucene::facet::range::DoubleRange > & a2) : ::org::apache::lucene::facet::range::RangeFacetCounts(env->newObject(initializeClass, &mids$, mid_init$_9ae8847d, a0.this$, a1.this$, a2.this$)) {}

          DoubleRangeFacetCounts::DoubleRangeFacetCounts(const ::java::lang::String & a0, const ::org::apache::lucene::queries::function::ValueSource & a1, const ::org::apache::lucene::facet::FacetsCollector & a2, const JArray< ::org::apache::lucene::facet::range::DoubleRange > & a3) : ::org::apache::lucene::facet::range::RangeFacetCounts(env->newObject(initializeClass, &mids$, mid_init$_828c1751, a0.this$, a1.this$, a2.this$, a3.this$)) {}

          DoubleRangeFacetCounts::DoubleRangeFacetCounts(const ::java::lang::String & a0, const ::org::apache::lucene::queries::function::ValueSource & a1, const ::org::apache::lucene::facet::FacetsCollector & a2, const ::org::apache::lucene::search::Filter & a3, const JArray< ::org::apache::lucene::facet::range::DoubleRange > & a4) : ::org::apache::lucene::facet::range::RangeFacetCounts(env->newObject(initializeClass, &mids$, mid_init$_f6d04191, a0.this$, a1.this$, a2.this$, a3.this$, a4.this$)) {}
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace range {
          static PyObject *t_DoubleRangeFacetCounts_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_DoubleRangeFacetCounts_instance_(PyTypeObject *type, PyObject *arg);
          static int t_DoubleRangeFacetCounts_init_(t_DoubleRangeFacetCounts *self, PyObject *args, PyObject *kwds);

          static PyMethodDef t_DoubleRangeFacetCounts__methods_[] = {
            DECLARE_METHOD(t_DoubleRangeFacetCounts, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_DoubleRangeFacetCounts, instance_, METH_O | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(DoubleRangeFacetCounts, t_DoubleRangeFacetCounts, ::org::apache::lucene::facet::range::RangeFacetCounts, DoubleRangeFacetCounts, t_DoubleRangeFacetCounts_init_, 0, 0, 0, 0, 0);

          void t_DoubleRangeFacetCounts::install(PyObject *module)
          {
            installType(&PY_TYPE(DoubleRangeFacetCounts), module, "DoubleRangeFacetCounts", 0);
          }

          void t_DoubleRangeFacetCounts::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(DoubleRangeFacetCounts).tp_dict, "class_", make_descriptor(DoubleRangeFacetCounts::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(DoubleRangeFacetCounts).tp_dict, "wrapfn_", make_descriptor(t_DoubleRangeFacetCounts::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(DoubleRangeFacetCounts).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_DoubleRangeFacetCounts_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, DoubleRangeFacetCounts::initializeClass, 1)))
              return NULL;
            return t_DoubleRangeFacetCounts::wrap_Object(DoubleRangeFacetCounts(((t_DoubleRangeFacetCounts *) arg)->object.this$));
          }
          static PyObject *t_DoubleRangeFacetCounts_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, DoubleRangeFacetCounts::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_DoubleRangeFacetCounts_init_(t_DoubleRangeFacetCounts *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 3:
              {
                ::java::lang::String a0((jobject) NULL);
                ::org::apache::lucene::facet::FacetsCollector a1((jobject) NULL);
                JArray< ::org::apache::lucene::facet::range::DoubleRange > a2((jobject) NULL);
                DoubleRangeFacetCounts object((jobject) NULL);

                if (!parseArgs(args, "sk[k", ::org::apache::lucene::facet::FacetsCollector::initializeClass, ::org::apache::lucene::facet::range::DoubleRange::initializeClass, &a0, &a1, &a2))
                {
                  INT_CALL(object = DoubleRangeFacetCounts(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 4:
              {
                ::java::lang::String a0((jobject) NULL);
                ::org::apache::lucene::queries::function::ValueSource a1((jobject) NULL);
                ::org::apache::lucene::facet::FacetsCollector a2((jobject) NULL);
                JArray< ::org::apache::lucene::facet::range::DoubleRange > a3((jobject) NULL);
                DoubleRangeFacetCounts object((jobject) NULL);

                if (!parseArgs(args, "skk[k", ::org::apache::lucene::queries::function::ValueSource::initializeClass, ::org::apache::lucene::facet::FacetsCollector::initializeClass, ::org::apache::lucene::facet::range::DoubleRange::initializeClass, &a0, &a1, &a2, &a3))
                {
                  INT_CALL(object = DoubleRangeFacetCounts(a0, a1, a2, a3));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 5:
              {
                ::java::lang::String a0((jobject) NULL);
                ::org::apache::lucene::queries::function::ValueSource a1((jobject) NULL);
                ::org::apache::lucene::facet::FacetsCollector a2((jobject) NULL);
                ::org::apache::lucene::search::Filter a3((jobject) NULL);
                JArray< ::org::apache::lucene::facet::range::DoubleRange > a4((jobject) NULL);
                DoubleRangeFacetCounts object((jobject) NULL);

                if (!parseArgs(args, "skkk[k", ::org::apache::lucene::queries::function::ValueSource::initializeClass, ::org::apache::lucene::facet::FacetsCollector::initializeClass, ::org::apache::lucene::search::Filter::initializeClass, ::org::apache::lucene::facet::range::DoubleRange::initializeClass, &a0, &a1, &a2, &a3, &a4))
                {
                  INT_CALL(object = DoubleRangeFacetCounts(a0, a1, a2, a3, a4));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/LongsRef.h"
#include "java/lang/Comparable.h"
#include "java/lang/Class.h"
#include "java/lang/Cloneable.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *LongsRef::class$ = NULL;
        jmethodID *LongsRef::mids$ = NULL;
        jfieldID *LongsRef::fids$ = NULL;
        bool LongsRef::live$ = false;
        JArray< jlong > *LongsRef::EMPTY_LONGS = NULL;

        jclass LongsRef::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/LongsRef");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_init$_39c7bd3c] = env->getMethodID(cls, "<init>", "(I)V");
            mids$[mid_init$_6ae021e7] = env->getMethodID(cls, "<init>", "([JII)V");
            mids$[mid_clone_3dcbb725] = env->getMethodID(cls, "clone", "()Lorg/apache/lucene/util/LongsRef;");
            mids$[mid_compareTo_ec8421f7] = env->getMethodID(cls, "compareTo", "(Lorg/apache/lucene/util/LongsRef;)I");
            mids$[mid_copyLongs_ec8421e8] = env->getMethodID(cls, "copyLongs", "(Lorg/apache/lucene/util/LongsRef;)V");
            mids$[mid_deepCopyOf_2075e53f] = env->getStaticMethodID(cls, "deepCopyOf", "(Lorg/apache/lucene/util/LongsRef;)Lorg/apache/lucene/util/LongsRef;");
            mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
            mids$[mid_grow_39c7bd3c] = env->getMethodID(cls, "grow", "(I)V");
            mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
            mids$[mid_isValid_54c6a16a] = env->getMethodID(cls, "isValid", "()Z");
            mids$[mid_longsEquals_ec8421e4] = env->getMethodID(cls, "longsEquals", "(Lorg/apache/lucene/util/LongsRef;)Z");
            mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

            fids$ = new jfieldID[max_fid];
            fids$[fid_length] = env->getFieldID(cls, "length", "I");
            fids$[fid_longs] = env->getFieldID(cls, "longs", "[J");
            fids$[fid_offset] = env->getFieldID(cls, "offset", "I");

            class$ = (::java::lang::Class *) new JObject(cls);
            cls = (jclass) class$->this$;

            EMPTY_LONGS = new JArray< jlong >(env->getStaticObjectField(cls, "EMPTY_LONGS", "[J"));
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        LongsRef::LongsRef() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        LongsRef::LongsRef(jint a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_39c7bd3c, a0)) {}

        LongsRef::LongsRef(const JArray< jlong > & a0, jint a1, jint a2) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_6ae021e7, a0.this$, a1, a2)) {}

        LongsRef LongsRef::clone() const
        {
          return LongsRef(env->callObjectMethod(this$, mids$[mid_clone_3dcbb725]));
        }

        jint LongsRef::compareTo(const LongsRef & a0) const
        {
          return env->callIntMethod(this$, mids$[mid_compareTo_ec8421f7], a0.this$);
        }

        void LongsRef::copyLongs(const LongsRef & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_copyLongs_ec8421e8], a0.this$);
        }

        LongsRef LongsRef::deepCopyOf(const LongsRef & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return LongsRef(env->callStaticObjectMethod(cls, mids$[mid_deepCopyOf_2075e53f], a0.this$));
        }

        jboolean LongsRef::equals(const ::java::lang::Object & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
        }

        void LongsRef::grow(jint a0) const
        {
          env->callVoidMethod(this$, mids$[mid_grow_39c7bd3c], a0);
        }

        jint LongsRef::hashCode() const
        {
          return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
        }

        jboolean LongsRef::isValid() const
        {
          return env->callBooleanMethod(this$, mids$[mid_isValid_54c6a16a]);
        }

        jboolean LongsRef::longsEquals(const LongsRef & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_longsEquals_ec8421e4], a0.this$);
        }

        ::java::lang::String LongsRef::toString() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
        }

        jint LongsRef::_get_length() const
        {
          return env->getIntField(this$, fids$[fid_length]);
        }

        void LongsRef::_set_length(jint a0) const
        {
          env->setIntField(this$, fids$[fid_length], a0);
        }

        JArray< jlong > LongsRef::_get_longs() const
        {
          return JArray< jlong >(env->getObjectField(this$, fids$[fid_longs]));
        }

        void LongsRef::_set_longs(const JArray< jlong > & a0) const
        {
          env->setObjectField(this$, fids$[fid_longs], a0.this$);
        }

        jint LongsRef::_get_offset() const
        {
          return env->getIntField(this$, fids$[fid_offset]);
        }

        void LongsRef::_set_offset(jint a0) const
        {
          env->setIntField(this$, fids$[fid_offset], a0);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_LongsRef_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_LongsRef_instance_(PyTypeObject *type, PyObject *arg);
        static int t_LongsRef_init_(t_LongsRef *self, PyObject *args, PyObject *kwds);
        static PyObject *t_LongsRef_clone(t_LongsRef *self);
        static PyObject *t_LongsRef_compareTo(t_LongsRef *self, PyObject *arg);
        static PyObject *t_LongsRef_copyLongs(t_LongsRef *self, PyObject *arg);
        static PyObject *t_LongsRef_deepCopyOf(PyTypeObject *type, PyObject *arg);
        static PyObject *t_LongsRef_equals(t_LongsRef *self, PyObject *args);
        static PyObject *t_LongsRef_grow(t_LongsRef *self, PyObject *arg);
        static PyObject *t_LongsRef_hashCode(t_LongsRef *self, PyObject *args);
        static PyObject *t_LongsRef_isValid(t_LongsRef *self);
        static PyObject *t_LongsRef_longsEquals(t_LongsRef *self, PyObject *arg);
        static PyObject *t_LongsRef_toString(t_LongsRef *self, PyObject *args);
        static PyObject *t_LongsRef_get__length(t_LongsRef *self, void *data);
        static int t_LongsRef_set__length(t_LongsRef *self, PyObject *arg, void *data);
        static PyObject *t_LongsRef_get__longs(t_LongsRef *self, void *data);
        static int t_LongsRef_set__longs(t_LongsRef *self, PyObject *arg, void *data);
        static PyObject *t_LongsRef_get__offset(t_LongsRef *self, void *data);
        static int t_LongsRef_set__offset(t_LongsRef *self, PyObject *arg, void *data);

        static PyObject *t_LongsRef_get__valid(t_LongsRef *self, void *data);
        static PyGetSetDef t_LongsRef__fields_[] = {
          DECLARE_GETSET_FIELD(t_LongsRef, length),
          DECLARE_GETSET_FIELD(t_LongsRef, longs),
          DECLARE_GETSET_FIELD(t_LongsRef, offset),
          DECLARE_GET_FIELD(t_LongsRef, valid),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_LongsRef__methods_[] = {
          DECLARE_METHOD(t_LongsRef, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_LongsRef, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_LongsRef, clone, METH_NOARGS),
          DECLARE_METHOD(t_LongsRef, compareTo, METH_O),
          DECLARE_METHOD(t_LongsRef, copyLongs, METH_O),
          DECLARE_METHOD(t_LongsRef, deepCopyOf, METH_O | METH_CLASS),
          DECLARE_METHOD(t_LongsRef, equals, METH_VARARGS),
          DECLARE_METHOD(t_LongsRef, grow, METH_O),
          DECLARE_METHOD(t_LongsRef, hashCode, METH_VARARGS),
          DECLARE_METHOD(t_LongsRef, isValid, METH_NOARGS),
          DECLARE_METHOD(t_LongsRef, longsEquals, METH_O),
          DECLARE_METHOD(t_LongsRef, toString, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(LongsRef, t_LongsRef, ::java::lang::Object, LongsRef, t_LongsRef_init_, 0, 0, t_LongsRef__fields_, 0, 0);

        void t_LongsRef::install(PyObject *module)
        {
          installType(&PY_TYPE(LongsRef), module, "LongsRef", 0);
        }

        void t_LongsRef::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(LongsRef).tp_dict, "class_", make_descriptor(LongsRef::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(LongsRef).tp_dict, "wrapfn_", make_descriptor(t_LongsRef::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(LongsRef).tp_dict, "boxfn_", make_descriptor(boxObject));
          env->getClass(LongsRef::initializeClass);
          PyDict_SetItemString(PY_TYPE(LongsRef).tp_dict, "EMPTY_LONGS", make_descriptor(LongsRef::EMPTY_LONGS->wrap()));
        }

        static PyObject *t_LongsRef_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, LongsRef::initializeClass, 1)))
            return NULL;
          return t_LongsRef::wrap_Object(LongsRef(((t_LongsRef *) arg)->object.this$));
        }
        static PyObject *t_LongsRef_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, LongsRef::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_LongsRef_init_(t_LongsRef *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 0:
            {
              LongsRef object((jobject) NULL);

              INT_CALL(object = LongsRef());
              self->object = object;
              break;
            }
            goto err;
           case 1:
            {
              jint a0;
              LongsRef object((jobject) NULL);

              if (!parseArgs(args, "I", &a0))
              {
                INT_CALL(object = LongsRef(a0));
                self->object = object;
                break;
              }
            }
            goto err;
           case 3:
            {
              JArray< jlong > a0((jobject) NULL);
              jint a1;
              jint a2;
              LongsRef object((jobject) NULL);

              if (!parseArgs(args, "[JII", &a0, &a1, &a2))
              {
                INT_CALL(object = LongsRef(a0, a1, a2));
                self->object = object;
                break;
              }
            }
           default:
           err:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_LongsRef_clone(t_LongsRef *self)
        {
          LongsRef result((jobject) NULL);
          OBJ_CALL(result = self->object.clone());
          return t_LongsRef::wrap_Object(result);
        }

        static PyObject *t_LongsRef_compareTo(t_LongsRef *self, PyObject *arg)
        {
          LongsRef a0((jobject) NULL);
          jint result;

          if (!parseArg(arg, "k", LongsRef::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.compareTo(a0));
            return PyInt_FromLong((long) result);
          }

          PyErr_SetArgsError((PyObject *) self, "compareTo", arg);
          return NULL;
        }

        static PyObject *t_LongsRef_copyLongs(t_LongsRef *self, PyObject *arg)
        {
          LongsRef a0((jobject) NULL);

          if (!parseArg(arg, "k", LongsRef::initializeClass, &a0))
          {
            OBJ_CALL(self->object.copyLongs(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "copyLongs", arg);
          return NULL;
        }

        static PyObject *t_LongsRef_deepCopyOf(PyTypeObject *type, PyObject *arg)
        {
          LongsRef a0((jobject) NULL);
          LongsRef result((jobject) NULL);

          if (!parseArg(arg, "k", LongsRef::initializeClass, &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::util::LongsRef::deepCopyOf(a0));
            return t_LongsRef::wrap_Object(result);
          }

          PyErr_SetArgsError(type, "deepCopyOf", arg);
          return NULL;
        }

        static PyObject *t_LongsRef_equals(t_LongsRef *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.equals(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(LongsRef), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_LongsRef_grow(t_LongsRef *self, PyObject *arg)
        {
          jint a0;

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(self->object.grow(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "grow", arg);
          return NULL;
        }

        static PyObject *t_LongsRef_hashCode(t_LongsRef *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hashCode());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(LongsRef), (PyObject *) self, "hashCode", args, 2);
        }

        static PyObject *t_LongsRef_isValid(t_LongsRef *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.isValid());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_LongsRef_longsEquals(t_LongsRef *self, PyObject *arg)
        {
          LongsRef a0((jobject) NULL);
          jboolean result;

          if (!parseArg(arg, "k", LongsRef::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.longsEquals(a0));
            Py_RETURN_BOOL(result);
          }

          PyErr_SetArgsError((PyObject *) self, "longsEquals", arg);
          return NULL;
        }

        static PyObject *t_LongsRef_toString(t_LongsRef *self, PyObject *args)
        {
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.toString());
            return j2p(result);
          }

          return callSuper(&PY_TYPE(LongsRef), (PyObject *) self, "toString", args, 2);
        }

        static PyObject *t_LongsRef_get__length(t_LongsRef *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object._get_length());
          return PyInt_FromLong((long) value);
        }
        static int t_LongsRef_set__length(t_LongsRef *self, PyObject *arg, void *data)
        {
          jint value;
          if (!parseArg(arg, "I", &value))
          {
            INT_CALL(self->object._set_length(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "length", arg);
          return -1;
        }

        static PyObject *t_LongsRef_get__longs(t_LongsRef *self, void *data)
        {
          JArray< jlong > value((jobject) NULL);
          OBJ_CALL(value = self->object._get_longs());
          return value.wrap();
        }
        static int t_LongsRef_set__longs(t_LongsRef *self, PyObject *arg, void *data)
        {
          JArray< jlong > value((jobject) NULL);
          if (!parseArg(arg, "[J", &value))
          {
            INT_CALL(self->object._set_longs(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "longs", arg);
          return -1;
        }

        static PyObject *t_LongsRef_get__offset(t_LongsRef *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object._get_offset());
          return PyInt_FromLong((long) value);
        }
        static int t_LongsRef_set__offset(t_LongsRef *self, PyObject *arg, void *data)
        {
          jint value;
          if (!parseArg(arg, "I", &value))
          {
            INT_CALL(self->object._set_offset(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "offset", arg);
          return -1;
        }

        static PyObject *t_LongsRef_get__valid(t_LongsRef *self, void *data)
        {
          jboolean value;
          OBJ_CALL(value = self->object.isValid());
          Py_RETURN_BOOL(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/en/KStemmer.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace en {

          ::java::lang::Class *KStemmer::class$ = NULL;
          jmethodID *KStemmer::mids$ = NULL;
          bool KStemmer::live$ = false;

          jclass KStemmer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/en/KStemmer");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace en {
          static PyObject *t_KStemmer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_KStemmer_instance_(PyTypeObject *type, PyObject *arg);

          static PyMethodDef t_KStemmer__methods_[] = {
            DECLARE_METHOD(t_KStemmer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_KStemmer, instance_, METH_O | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(KStemmer, t_KStemmer, ::java::lang::Object, KStemmer, abstract_init, 0, 0, 0, 0, 0);

          void t_KStemmer::install(PyObject *module)
          {
            installType(&PY_TYPE(KStemmer), module, "KStemmer", 0);
          }

          void t_KStemmer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(KStemmer).tp_dict, "class_", make_descriptor(KStemmer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(KStemmer).tp_dict, "wrapfn_", make_descriptor(t_KStemmer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(KStemmer).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_KStemmer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, KStemmer::initializeClass, 1)))
              return NULL;
            return t_KStemmer::wrap_Object(KStemmer(((t_KStemmer *) arg)->object.this$));
          }
          static PyObject *t_KStemmer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, KStemmer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/FieldInvertState.h"
#include "java/lang/String.h"
#include "org/apache/lucene/util/AttributeSource.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *FieldInvertState::class$ = NULL;
        jmethodID *FieldInvertState::mids$ = NULL;
        bool FieldInvertState::live$ = false;

        jclass FieldInvertState::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/FieldInvertState");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_5fdc3f48] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;)V");
            mids$[mid_init$_9f4a1ba9] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;IIIIF)V");
            mids$[mid_getAttributeSource_f901022b] = env->getMethodID(cls, "getAttributeSource", "()Lorg/apache/lucene/util/AttributeSource;");
            mids$[mid_getBoost_54c6a176] = env->getMethodID(cls, "getBoost", "()F");
            mids$[mid_getLength_54c6a179] = env->getMethodID(cls, "getLength", "()I");
            mids$[mid_getMaxTermFrequency_54c6a179] = env->getMethodID(cls, "getMaxTermFrequency", "()I");
            mids$[mid_getName_14c7b5c5] = env->getMethodID(cls, "getName", "()Ljava/lang/String;");
            mids$[mid_getNumOverlap_54c6a179] = env->getMethodID(cls, "getNumOverlap", "()I");
            mids$[mid_getOffset_54c6a179] = env->getMethodID(cls, "getOffset", "()I");
            mids$[mid_getPosition_54c6a179] = env->getMethodID(cls, "getPosition", "()I");
            mids$[mid_getUniqueTermCount_54c6a179] = env->getMethodID(cls, "getUniqueTermCount", "()I");
            mids$[mid_setBoost_06298cab] = env->getMethodID(cls, "setBoost", "(F)V");
            mids$[mid_setLength_39c7bd3c] = env->getMethodID(cls, "setLength", "(I)V");
            mids$[mid_setNumOverlap_39c7bd3c] = env->getMethodID(cls, "setNumOverlap", "(I)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        FieldInvertState::FieldInvertState(const ::java::lang::String & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_5fdc3f48, a0.this$)) {}

        FieldInvertState::FieldInvertState(const ::java::lang::String & a0, jint a1, jint a2, jint a3, jint a4, jfloat a5) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_9f4a1ba9, a0.this$, a1, a2, a3, a4, a5)) {}

        ::org::apache::lucene::util::AttributeSource FieldInvertState::getAttributeSource() const
        {
          return ::org::apache::lucene::util::AttributeSource(env->callObjectMethod(this$, mids$[mid_getAttributeSource_f901022b]));
        }

        jfloat FieldInvertState::getBoost() const
        {
          return env->callFloatMethod(this$, mids$[mid_getBoost_54c6a176]);
        }

        jint FieldInvertState::getLength() const
        {
          return env->callIntMethod(this$, mids$[mid_getLength_54c6a179]);
        }

        jint FieldInvertState::getMaxTermFrequency() const
        {
          return env->callIntMethod(this$, mids$[mid_getMaxTermFrequency_54c6a179]);
        }

        ::java::lang::String FieldInvertState::getName() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getName_14c7b5c5]));
        }

        jint FieldInvertState::getNumOverlap() const
        {
          return env->callIntMethod(this$, mids$[mid_getNumOverlap_54c6a179]);
        }

        jint FieldInvertState::getOffset() const
        {
          return env->callIntMethod(this$, mids$[mid_getOffset_54c6a179]);
        }

        jint FieldInvertState::getPosition() const
        {
          return env->callIntMethod(this$, mids$[mid_getPosition_54c6a179]);
        }

        jint FieldInvertState::getUniqueTermCount() const
        {
          return env->callIntMethod(this$, mids$[mid_getUniqueTermCount_54c6a179]);
        }

        void FieldInvertState::setBoost(jfloat a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setBoost_06298cab], a0);
        }

        void FieldInvertState::setLength(jint a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setLength_39c7bd3c], a0);
        }

        void FieldInvertState::setNumOverlap(jint a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setNumOverlap_39c7bd3c], a0);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_FieldInvertState_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FieldInvertState_instance_(PyTypeObject *type, PyObject *arg);
        static int t_FieldInvertState_init_(t_FieldInvertState *self, PyObject *args, PyObject *kwds);
        static PyObject *t_FieldInvertState_getAttributeSource(t_FieldInvertState *self);
        static PyObject *t_FieldInvertState_getBoost(t_FieldInvertState *self);
        static PyObject *t_FieldInvertState_getLength(t_FieldInvertState *self);
        static PyObject *t_FieldInvertState_getMaxTermFrequency(t_FieldInvertState *self);
        static PyObject *t_FieldInvertState_getName(t_FieldInvertState *self);
        static PyObject *t_FieldInvertState_getNumOverlap(t_FieldInvertState *self);
        static PyObject *t_FieldInvertState_getOffset(t_FieldInvertState *self);
        static PyObject *t_FieldInvertState_getPosition(t_FieldInvertState *self);
        static PyObject *t_FieldInvertState_getUniqueTermCount(t_FieldInvertState *self);
        static PyObject *t_FieldInvertState_setBoost(t_FieldInvertState *self, PyObject *arg);
        static PyObject *t_FieldInvertState_setLength(t_FieldInvertState *self, PyObject *arg);
        static PyObject *t_FieldInvertState_setNumOverlap(t_FieldInvertState *self, PyObject *arg);
        static PyObject *t_FieldInvertState_get__attributeSource(t_FieldInvertState *self, void *data);
        static PyObject *t_FieldInvertState_get__boost(t_FieldInvertState *self, void *data);
        static int t_FieldInvertState_set__boost(t_FieldInvertState *self, PyObject *arg, void *data);
        static PyObject *t_FieldInvertState_get__length(t_FieldInvertState *self, void *data);
        static int t_FieldInvertState_set__length(t_FieldInvertState *self, PyObject *arg, void *data);
        static PyObject *t_FieldInvertState_get__maxTermFrequency(t_FieldInvertState *self, void *data);
        static PyObject *t_FieldInvertState_get__name(t_FieldInvertState *self, void *data);
        static PyObject *t_FieldInvertState_get__numOverlap(t_FieldInvertState *self, void *data);
        static int t_FieldInvertState_set__numOverlap(t_FieldInvertState *self, PyObject *arg, void *data);
        static PyObject *t_FieldInvertState_get__offset(t_FieldInvertState *self, void *data);
        static PyObject *t_FieldInvertState_get__position(t_FieldInvertState *self, void *data);
        static PyObject *t_FieldInvertState_get__uniqueTermCount(t_FieldInvertState *self, void *data);
        static PyGetSetDef t_FieldInvertState__fields_[] = {
          DECLARE_GET_FIELD(t_FieldInvertState, attributeSource),
          DECLARE_GETSET_FIELD(t_FieldInvertState, boost),
          DECLARE_GETSET_FIELD(t_FieldInvertState, length),
          DECLARE_GET_FIELD(t_FieldInvertState, maxTermFrequency),
          DECLARE_GET_FIELD(t_FieldInvertState, name),
          DECLARE_GETSET_FIELD(t_FieldInvertState, numOverlap),
          DECLARE_GET_FIELD(t_FieldInvertState, offset),
          DECLARE_GET_FIELD(t_FieldInvertState, position),
          DECLARE_GET_FIELD(t_FieldInvertState, uniqueTermCount),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_FieldInvertState__methods_[] = {
          DECLARE_METHOD(t_FieldInvertState, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FieldInvertState, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FieldInvertState, getAttributeSource, METH_NOARGS),
          DECLARE_METHOD(t_FieldInvertState, getBoost, METH_NOARGS),
          DECLARE_METHOD(t_FieldInvertState, getLength, METH_NOARGS),
          DECLARE_METHOD(t_FieldInvertState, getMaxTermFrequency, METH_NOARGS),
          DECLARE_METHOD(t_FieldInvertState, getName, METH_NOARGS),
          DECLARE_METHOD(t_FieldInvertState, getNumOverlap, METH_NOARGS),
          DECLARE_METHOD(t_FieldInvertState, getOffset, METH_NOARGS),
          DECLARE_METHOD(t_FieldInvertState, getPosition, METH_NOARGS),
          DECLARE_METHOD(t_FieldInvertState, getUniqueTermCount, METH_NOARGS),
          DECLARE_METHOD(t_FieldInvertState, setBoost, METH_O),
          DECLARE_METHOD(t_FieldInvertState, setLength, METH_O),
          DECLARE_METHOD(t_FieldInvertState, setNumOverlap, METH_O),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(FieldInvertState, t_FieldInvertState, ::java::lang::Object, FieldInvertState, t_FieldInvertState_init_, 0, 0, t_FieldInvertState__fields_, 0, 0);

        void t_FieldInvertState::install(PyObject *module)
        {
          installType(&PY_TYPE(FieldInvertState), module, "FieldInvertState", 0);
        }

        void t_FieldInvertState::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(FieldInvertState).tp_dict, "class_", make_descriptor(FieldInvertState::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(FieldInvertState).tp_dict, "wrapfn_", make_descriptor(t_FieldInvertState::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(FieldInvertState).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_FieldInvertState_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, FieldInvertState::initializeClass, 1)))
            return NULL;
          return t_FieldInvertState::wrap_Object(FieldInvertState(((t_FieldInvertState *) arg)->object.this$));
        }
        static PyObject *t_FieldInvertState_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, FieldInvertState::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_FieldInvertState_init_(t_FieldInvertState *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              ::java::lang::String a0((jobject) NULL);
              FieldInvertState object((jobject) NULL);

              if (!parseArgs(args, "s", &a0))
              {
                INT_CALL(object = FieldInvertState(a0));
                self->object = object;
                break;
              }
            }
            goto err;
           case 6:
            {
              ::java::lang::String a0((jobject) NULL);
              jint a1;
              jint a2;
              jint a3;
              jint a4;
              jfloat a5;
              FieldInvertState object((jobject) NULL);

              if (!parseArgs(args, "sIIIIF", &a0, &a1, &a2, &a3, &a4, &a5))
              {
                INT_CALL(object = FieldInvertState(a0, a1, a2, a3, a4, a5));
                self->object = object;
                break;
              }
            }
           default:
           err:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_FieldInvertState_getAttributeSource(t_FieldInvertState *self)
        {
          ::org::apache::lucene::util::AttributeSource result((jobject) NULL);
          OBJ_CALL(result = self->object.getAttributeSource());
          return ::org::apache::lucene::util::t_AttributeSource::wrap_Object(result);
        }

        static PyObject *t_FieldInvertState_getBoost(t_FieldInvertState *self)
        {
          jfloat result;
          OBJ_CALL(result = self->object.getBoost());
          return PyFloat_FromDouble((double) result);
        }

        static PyObject *t_FieldInvertState_getLength(t_FieldInvertState *self)
        {
          jint result;
          OBJ_CALL(result = self->object.getLength());
          return PyInt_FromLong((long) result);
        }

        static PyObject *t_FieldInvertState_getMaxTermFrequency(t_FieldInvertState *self)
        {
          jint result;
          OBJ_CALL(result = self->object.getMaxTermFrequency());
          return PyInt_FromLong((long) result);
        }

        static PyObject *t_FieldInvertState_getName(t_FieldInvertState *self)
        {
          ::java::lang::String result((jobject) NULL);
          OBJ_CALL(result = self->object.getName());
          return j2p(result);
        }

        static PyObject *t_FieldInvertState_getNumOverlap(t_FieldInvertState *self)
        {
          jint result;
          OBJ_CALL(result = self->object.getNumOverlap());
          return PyInt_FromLong((long) result);
        }

        static PyObject *t_FieldInvertState_getOffset(t_FieldInvertState *self)
        {
          jint result;
          OBJ_CALL(result = self->object.getOffset());
          return PyInt_FromLong((long) result);
        }

        static PyObject *t_FieldInvertState_getPosition(t_FieldInvertState *self)
        {
          jint result;
          OBJ_CALL(result = self->object.getPosition());
          return PyInt_FromLong((long) result);
        }

        static PyObject *t_FieldInvertState_getUniqueTermCount(t_FieldInvertState *self)
        {
          jint result;
          OBJ_CALL(result = self->object.getUniqueTermCount());
          return PyInt_FromLong((long) result);
        }

        static PyObject *t_FieldInvertState_setBoost(t_FieldInvertState *self, PyObject *arg)
        {
          jfloat a0;

          if (!parseArg(arg, "F", &a0))
          {
            OBJ_CALL(self->object.setBoost(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setBoost", arg);
          return NULL;
        }

        static PyObject *t_FieldInvertState_setLength(t_FieldInvertState *self, PyObject *arg)
        {
          jint a0;

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(self->object.setLength(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setLength", arg);
          return NULL;
        }

        static PyObject *t_FieldInvertState_setNumOverlap(t_FieldInvertState *self, PyObject *arg)
        {
          jint a0;

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(self->object.setNumOverlap(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setNumOverlap", arg);
          return NULL;
        }

        static PyObject *t_FieldInvertState_get__attributeSource(t_FieldInvertState *self, void *data)
        {
          ::org::apache::lucene::util::AttributeSource value((jobject) NULL);
          OBJ_CALL(value = self->object.getAttributeSource());
          return ::org::apache::lucene::util::t_AttributeSource::wrap_Object(value);
        }

        static PyObject *t_FieldInvertState_get__boost(t_FieldInvertState *self, void *data)
        {
          jfloat value;
          OBJ_CALL(value = self->object.getBoost());
          return PyFloat_FromDouble((double) value);
        }
        static int t_FieldInvertState_set__boost(t_FieldInvertState *self, PyObject *arg, void *data)
        {
          {
            jfloat value;
            if (!parseArg(arg, "F", &value))
            {
              INT_CALL(self->object.setBoost(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "boost", arg);
          return -1;
        }

        static PyObject *t_FieldInvertState_get__length(t_FieldInvertState *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object.getLength());
          return PyInt_FromLong((long) value);
        }
        static int t_FieldInvertState_set__length(t_FieldInvertState *self, PyObject *arg, void *data)
        {
          {
            jint value;
            if (!parseArg(arg, "I", &value))
            {
              INT_CALL(self->object.setLength(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "length", arg);
          return -1;
        }

        static PyObject *t_FieldInvertState_get__maxTermFrequency(t_FieldInvertState *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object.getMaxTermFrequency());
          return PyInt_FromLong((long) value);
        }

        static PyObject *t_FieldInvertState_get__name(t_FieldInvertState *self, void *data)
        {
          ::java::lang::String value((jobject) NULL);
          OBJ_CALL(value = self->object.getName());
          return j2p(value);
        }

        static PyObject *t_FieldInvertState_get__numOverlap(t_FieldInvertState *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object.getNumOverlap());
          return PyInt_FromLong((long) value);
        }
        static int t_FieldInvertState_set__numOverlap(t_FieldInvertState *self, PyObject *arg, void *data)
        {
          {
            jint value;
            if (!parseArg(arg, "I", &value))
            {
              INT_CALL(self->object.setNumOverlap(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "numOverlap", arg);
          return -1;
        }

        static PyObject *t_FieldInvertState_get__offset(t_FieldInvertState *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object.getOffset());
          return PyInt_FromLong((long) value);
        }

        static PyObject *t_FieldInvertState_get__position(t_FieldInvertState *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object.getPosition());
          return PyInt_FromLong((long) value);
        }

        static PyObject *t_FieldInvertState_get__uniqueTermCount(t_FieldInvertState *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object.getUniqueTermCount());
          return PyInt_FromLong((long) value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/FieldCacheDocIdSet.h"
#include "org/apache/lucene/util/Bits.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/search/DocIdSetIterator.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *FieldCacheDocIdSet::class$ = NULL;
        jmethodID *FieldCacheDocIdSet::mids$ = NULL;
        bool FieldCacheDocIdSet::live$ = false;

        jclass FieldCacheDocIdSet::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/FieldCacheDocIdSet");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_c0d572fa] = env->getMethodID(cls, "<init>", "(ILorg/apache/lucene/util/Bits;)V");
            mids$[mid_bits_03c2457d] = env->getMethodID(cls, "bits", "()Lorg/apache/lucene/util/Bits;");
            mids$[mid_isCacheable_54c6a16a] = env->getMethodID(cls, "isCacheable", "()Z");
            mids$[mid_iterator_dc23660c] = env->getMethodID(cls, "iterator", "()Lorg/apache/lucene/search/DocIdSetIterator;");
            mids$[mid_matchDoc_39c7bd30] = env->getMethodID(cls, "matchDoc", "(I)Z");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        FieldCacheDocIdSet::FieldCacheDocIdSet(jint a0, const ::org::apache::lucene::util::Bits & a1) : ::org::apache::lucene::search::DocIdSet(env->newObject(initializeClass, &mids$, mid_init$_c0d572fa, a0, a1.this$)) {}

        ::org::apache::lucene::util::Bits FieldCacheDocIdSet::bits() const
        {
          return ::org::apache::lucene::util::Bits(env->callObjectMethod(this$, mids$[mid_bits_03c2457d]));
        }

        jboolean FieldCacheDocIdSet::isCacheable() const
        {
          return env->callBooleanMethod(this$, mids$[mid_isCacheable_54c6a16a]);
        }

        ::org::apache::lucene::search::DocIdSetIterator FieldCacheDocIdSet::iterator() const
        {
          return ::org::apache::lucene::search::DocIdSetIterator(env->callObjectMethod(this$, mids$[mid_iterator_dc23660c]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_FieldCacheDocIdSet_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FieldCacheDocIdSet_instance_(PyTypeObject *type, PyObject *arg);
        static int t_FieldCacheDocIdSet_init_(t_FieldCacheDocIdSet *self, PyObject *args, PyObject *kwds);
        static PyObject *t_FieldCacheDocIdSet_bits(t_FieldCacheDocIdSet *self, PyObject *args);
        static PyObject *t_FieldCacheDocIdSet_isCacheable(t_FieldCacheDocIdSet *self, PyObject *args);
        static PyObject *t_FieldCacheDocIdSet_iterator(t_FieldCacheDocIdSet *self, PyObject *args);
        static PyObject *t_FieldCacheDocIdSet_get__cacheable(t_FieldCacheDocIdSet *self, void *data);
        static PyGetSetDef t_FieldCacheDocIdSet__fields_[] = {
          DECLARE_GET_FIELD(t_FieldCacheDocIdSet, cacheable),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_FieldCacheDocIdSet__methods_[] = {
          DECLARE_METHOD(t_FieldCacheDocIdSet, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FieldCacheDocIdSet, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FieldCacheDocIdSet, bits, METH_VARARGS),
          DECLARE_METHOD(t_FieldCacheDocIdSet, isCacheable, METH_VARARGS),
          DECLARE_METHOD(t_FieldCacheDocIdSet, iterator, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(FieldCacheDocIdSet, t_FieldCacheDocIdSet, ::org::apache::lucene::search::DocIdSet, FieldCacheDocIdSet, t_FieldCacheDocIdSet_init_, 0, 0, t_FieldCacheDocIdSet__fields_, 0, 0);

        void t_FieldCacheDocIdSet::install(PyObject *module)
        {
          installType(&PY_TYPE(FieldCacheDocIdSet), module, "FieldCacheDocIdSet", 0);
        }

        void t_FieldCacheDocIdSet::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(FieldCacheDocIdSet).tp_dict, "class_", make_descriptor(FieldCacheDocIdSet::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(FieldCacheDocIdSet).tp_dict, "wrapfn_", make_descriptor(t_FieldCacheDocIdSet::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(FieldCacheDocIdSet).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_FieldCacheDocIdSet_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, FieldCacheDocIdSet::initializeClass, 1)))
            return NULL;
          return t_FieldCacheDocIdSet::wrap_Object(FieldCacheDocIdSet(((t_FieldCacheDocIdSet *) arg)->object.this$));
        }
        static PyObject *t_FieldCacheDocIdSet_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, FieldCacheDocIdSet::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_FieldCacheDocIdSet_init_(t_FieldCacheDocIdSet *self, PyObject *args, PyObject *kwds)
        {
          jint a0;
          ::org::apache::lucene::util::Bits a1((jobject) NULL);
          FieldCacheDocIdSet object((jobject) NULL);

          if (!parseArgs(args, "Ik", ::org::apache::lucene::util::Bits::initializeClass, &a0, &a1))
          {
            INT_CALL(object = FieldCacheDocIdSet(a0, a1));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_FieldCacheDocIdSet_bits(t_FieldCacheDocIdSet *self, PyObject *args)
        {
          ::org::apache::lucene::util::Bits result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.bits());
            return ::org::apache::lucene::util::t_Bits::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(FieldCacheDocIdSet), (PyObject *) self, "bits", args, 2);
        }

        static PyObject *t_FieldCacheDocIdSet_isCacheable(t_FieldCacheDocIdSet *self, PyObject *args)
        {
          jboolean result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.isCacheable());
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(FieldCacheDocIdSet), (PyObject *) self, "isCacheable", args, 2);
        }

        static PyObject *t_FieldCacheDocIdSet_iterator(t_FieldCacheDocIdSet *self, PyObject *args)
        {
          ::org::apache::lucene::search::DocIdSetIterator result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.iterator());
            return ::org::apache::lucene::search::t_DocIdSetIterator::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(FieldCacheDocIdSet), (PyObject *) self, "iterator", args, 2);
        }

        static PyObject *t_FieldCacheDocIdSet_get__cacheable(t_FieldCacheDocIdSet *self, void *data)
        {
          jboolean value;
          OBJ_CALL(value = self->object.isCacheable());
          Py_RETURN_BOOL(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/MappingMultiDocsAndPositionsEnum.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "org/apache/lucene/index/MultiDocsAndPositionsEnum$EnumWithSlice.h"
#include "org/apache/lucene/index/MergeState.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {

        ::java::lang::Class *MappingMultiDocsAndPositionsEnum::class$ = NULL;
        jmethodID *MappingMultiDocsAndPositionsEnum::mids$ = NULL;
        bool MappingMultiDocsAndPositionsEnum::live$ = false;

        jclass MappingMultiDocsAndPositionsEnum::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/MappingMultiDocsAndPositionsEnum");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_advance_39c7bd23] = env->getMethodID(cls, "advance", "(I)I");
            mids$[mid_cost_54c6a17a] = env->getMethodID(cls, "cost", "()J");
            mids$[mid_docID_54c6a179] = env->getMethodID(cls, "docID", "()I");
            mids$[mid_endOffset_54c6a179] = env->getMethodID(cls, "endOffset", "()I");
            mids$[mid_freq_54c6a179] = env->getMethodID(cls, "freq", "()I");
            mids$[mid_getNumSubs_54c6a179] = env->getMethodID(cls, "getNumSubs", "()I");
            mids$[mid_getPayload_4ae19461] = env->getMethodID(cls, "getPayload", "()Lorg/apache/lucene/util/BytesRef;");
            mids$[mid_getSubs_451af4aa] = env->getMethodID(cls, "getSubs", "()[Lorg/apache/lucene/index/MultiDocsAndPositionsEnum$EnumWithSlice;");
            mids$[mid_nextDoc_54c6a179] = env->getMethodID(cls, "nextDoc", "()I");
            mids$[mid_nextPosition_54c6a179] = env->getMethodID(cls, "nextPosition", "()I");
            mids$[mid_setMergeState_fd0cfdf4] = env->getMethodID(cls, "setMergeState", "(Lorg/apache/lucene/index/MergeState;)V");
            mids$[mid_startOffset_54c6a179] = env->getMethodID(cls, "startOffset", "()I");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        MappingMultiDocsAndPositionsEnum::MappingMultiDocsAndPositionsEnum() : ::org::apache::lucene::index::DocsAndPositionsEnum(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        jint MappingMultiDocsAndPositionsEnum::advance(jint a0) const
        {
          return env->callIntMethod(this$, mids$[mid_advance_39c7bd23], a0);
        }

        jlong MappingMultiDocsAndPositionsEnum::cost() const
        {
          return env->callLongMethod(this$, mids$[mid_cost_54c6a17a]);
        }

        jint MappingMultiDocsAndPositionsEnum::docID() const
        {
          return env->callIntMethod(this$, mids$[mid_docID_54c6a179]);
        }

        jint MappingMultiDocsAndPositionsEnum::endOffset() const
        {
          return env->callIntMethod(this$, mids$[mid_endOffset_54c6a179]);
        }

        jint MappingMultiDocsAndPositionsEnum::freq() const
        {
          return env->callIntMethod(this$, mids$[mid_freq_54c6a179]);
        }

        jint MappingMultiDocsAndPositionsEnum::getNumSubs() const
        {
          return env->callIntMethod(this$, mids$[mid_getNumSubs_54c6a179]);
        }

        ::org::apache::lucene::util::BytesRef MappingMultiDocsAndPositionsEnum::getPayload() const
        {
          return ::org::apache::lucene::util::BytesRef(env->callObjectMethod(this$, mids$[mid_getPayload_4ae19461]));
        }

        JArray< ::org::apache::lucene::index::MultiDocsAndPositionsEnum$EnumWithSlice > MappingMultiDocsAndPositionsEnum::getSubs() const
        {
          return JArray< ::org::apache::lucene::index::MultiDocsAndPositionsEnum$EnumWithSlice >(env->callObjectMethod(this$, mids$[mid_getSubs_451af4aa]));
        }

        jint MappingMultiDocsAndPositionsEnum::nextDoc() const
        {
          return env->callIntMethod(this$, mids$[mid_nextDoc_54c6a179]);
        }

        jint MappingMultiDocsAndPositionsEnum::nextPosition() const
        {
          return env->callIntMethod(this$, mids$[mid_nextPosition_54c6a179]);
        }

        void MappingMultiDocsAndPositionsEnum::setMergeState(const ::org::apache::lucene::index::MergeState & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setMergeState_fd0cfdf4], a0.this$);
        }

        jint MappingMultiDocsAndPositionsEnum::startOffset() const
        {
          return env->callIntMethod(this$, mids$[mid_startOffset_54c6a179]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        static PyObject *t_MappingMultiDocsAndPositionsEnum_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_MappingMultiDocsAndPositionsEnum_instance_(PyTypeObject *type, PyObject *arg);
        static int t_MappingMultiDocsAndPositionsEnum_init_(t_MappingMultiDocsAndPositionsEnum *self, PyObject *args, PyObject *kwds);
        static PyObject *t_MappingMultiDocsAndPositionsEnum_advance(t_MappingMultiDocsAndPositionsEnum *self, PyObject *args);
        static PyObject *t_MappingMultiDocsAndPositionsEnum_cost(t_MappingMultiDocsAndPositionsEnum *self, PyObject *args);
        static PyObject *t_MappingMultiDocsAndPositionsEnum_docID(t_MappingMultiDocsAndPositionsEnum *self, PyObject *args);
        static PyObject *t_MappingMultiDocsAndPositionsEnum_endOffset(t_MappingMultiDocsAndPositionsEnum *self, PyObject *args);
        static PyObject *t_MappingMultiDocsAndPositionsEnum_freq(t_MappingMultiDocsAndPositionsEnum *self, PyObject *args);
        static PyObject *t_MappingMultiDocsAndPositionsEnum_getNumSubs(t_MappingMultiDocsAndPositionsEnum *self);
        static PyObject *t_MappingMultiDocsAndPositionsEnum_getPayload(t_MappingMultiDocsAndPositionsEnum *self, PyObject *args);
        static PyObject *t_MappingMultiDocsAndPositionsEnum_getSubs(t_MappingMultiDocsAndPositionsEnum *self);
        static PyObject *t_MappingMultiDocsAndPositionsEnum_nextDoc(t_MappingMultiDocsAndPositionsEnum *self, PyObject *args);
        static PyObject *t_MappingMultiDocsAndPositionsEnum_nextPosition(t_MappingMultiDocsAndPositionsEnum *self, PyObject *args);
        static PyObject *t_MappingMultiDocsAndPositionsEnum_setMergeState(t_MappingMultiDocsAndPositionsEnum *self, PyObject *arg);
        static PyObject *t_MappingMultiDocsAndPositionsEnum_startOffset(t_MappingMultiDocsAndPositionsEnum *self, PyObject *args);
        static int t_MappingMultiDocsAndPositionsEnum_set__mergeState(t_MappingMultiDocsAndPositionsEnum *self, PyObject *arg, void *data);
        static PyObject *t_MappingMultiDocsAndPositionsEnum_get__numSubs(t_MappingMultiDocsAndPositionsEnum *self, void *data);
        static PyObject *t_MappingMultiDocsAndPositionsEnum_get__payload(t_MappingMultiDocsAndPositionsEnum *self, void *data);
        static PyObject *t_MappingMultiDocsAndPositionsEnum_get__subs(t_MappingMultiDocsAndPositionsEnum *self, void *data);
        static PyGetSetDef t_MappingMultiDocsAndPositionsEnum__fields_[] = {
          DECLARE_SET_FIELD(t_MappingMultiDocsAndPositionsEnum, mergeState),
          DECLARE_GET_FIELD(t_MappingMultiDocsAndPositionsEnum, numSubs),
          DECLARE_GET_FIELD(t_MappingMultiDocsAndPositionsEnum, payload),
          DECLARE_GET_FIELD(t_MappingMultiDocsAndPositionsEnum, subs),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_MappingMultiDocsAndPositionsEnum__methods_[] = {
          DECLARE_METHOD(t_MappingMultiDocsAndPositionsEnum, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MappingMultiDocsAndPositionsEnum, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MappingMultiDocsAndPositionsEnum, advance, METH_VARARGS),
          DECLARE_METHOD(t_MappingMultiDocsAndPositionsEnum, cost, METH_VARARGS),
          DECLARE_METHOD(t_MappingMultiDocsAndPositionsEnum, docID, METH_VARARGS),
          DECLARE_METHOD(t_MappingMultiDocsAndPositionsEnum, endOffset, METH_VARARGS),
          DECLARE_METHOD(t_MappingMultiDocsAndPositionsEnum, freq, METH_VARARGS),
          DECLARE_METHOD(t_MappingMultiDocsAndPositionsEnum, getNumSubs, METH_NOARGS),
          DECLARE_METHOD(t_MappingMultiDocsAndPositionsEnum, getPayload, METH_VARARGS),
          DECLARE_METHOD(t_MappingMultiDocsAndPositionsEnum, getSubs, METH_NOARGS),
          DECLARE_METHOD(t_MappingMultiDocsAndPositionsEnum, nextDoc, METH_VARARGS),
          DECLARE_METHOD(t_MappingMultiDocsAndPositionsEnum, nextPosition, METH_VARARGS),
          DECLARE_METHOD(t_MappingMultiDocsAndPositionsEnum, setMergeState, METH_O),
          DECLARE_METHOD(t_MappingMultiDocsAndPositionsEnum, startOffset, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(MappingMultiDocsAndPositionsEnum, t_MappingMultiDocsAndPositionsEnum, ::org::apache::lucene::index::DocsAndPositionsEnum, MappingMultiDocsAndPositionsEnum, t_MappingMultiDocsAndPositionsEnum_init_, 0, 0, t_MappingMultiDocsAndPositionsEnum__fields_, 0, 0);

        void t_MappingMultiDocsAndPositionsEnum::install(PyObject *module)
        {
          installType(&PY_TYPE(MappingMultiDocsAndPositionsEnum), module, "MappingMultiDocsAndPositionsEnum", 0);
        }

        void t_MappingMultiDocsAndPositionsEnum::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(MappingMultiDocsAndPositionsEnum).tp_dict, "class_", make_descriptor(MappingMultiDocsAndPositionsEnum::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(MappingMultiDocsAndPositionsEnum).tp_dict, "wrapfn_", make_descriptor(t_MappingMultiDocsAndPositionsEnum::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(MappingMultiDocsAndPositionsEnum).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_MappingMultiDocsAndPositionsEnum_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, MappingMultiDocsAndPositionsEnum::initializeClass, 1)))
            return NULL;
          return t_MappingMultiDocsAndPositionsEnum::wrap_Object(MappingMultiDocsAndPositionsEnum(((t_MappingMultiDocsAndPositionsEnum *) arg)->object.this$));
        }
        static PyObject *t_MappingMultiDocsAndPositionsEnum_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, MappingMultiDocsAndPositionsEnum::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_MappingMultiDocsAndPositionsEnum_init_(t_MappingMultiDocsAndPositionsEnum *self, PyObject *args, PyObject *kwds)
        {
          MappingMultiDocsAndPositionsEnum object((jobject) NULL);

          INT_CALL(object = MappingMultiDocsAndPositionsEnum());
          self->object = object;

          return 0;
        }

        static PyObject *t_MappingMultiDocsAndPositionsEnum_advance(t_MappingMultiDocsAndPositionsEnum *self, PyObject *args)
        {
          jint a0;
          jint result;

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(result = self->object.advance(a0));
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(MappingMultiDocsAndPositionsEnum), (PyObject *) self, "advance", args, 2);
        }

        static PyObject *t_MappingMultiDocsAndPositionsEnum_cost(t_MappingMultiDocsAndPositionsEnum *self, PyObject *args)
        {
          jlong result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.cost());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          return callSuper(&PY_TYPE(MappingMultiDocsAndPositionsEnum), (PyObject *) self, "cost", args, 2);
        }

        static PyObject *t_MappingMultiDocsAndPositionsEnum_docID(t_MappingMultiDocsAndPositionsEnum *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.docID());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(MappingMultiDocsAndPositionsEnum), (PyObject *) self, "docID", args, 2);
        }

        static PyObject *t_MappingMultiDocsAndPositionsEnum_endOffset(t_MappingMultiDocsAndPositionsEnum *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.endOffset());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(MappingMultiDocsAndPositionsEnum), (PyObject *) self, "endOffset", args, 2);
        }

        static PyObject *t_MappingMultiDocsAndPositionsEnum_freq(t_MappingMultiDocsAndPositionsEnum *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.freq());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(MappingMultiDocsAndPositionsEnum), (PyObject *) self, "freq", args, 2);
        }

        static PyObject *t_MappingMultiDocsAndPositionsEnum_getNumSubs(t_MappingMultiDocsAndPositionsEnum *self)
        {
          jint result;
          OBJ_CALL(result = self->object.getNumSubs());
          return PyInt_FromLong((long) result);
        }

        static PyObject *t_MappingMultiDocsAndPositionsEnum_getPayload(t_MappingMultiDocsAndPositionsEnum *self, PyObject *args)
        {
          ::org::apache::lucene::util::BytesRef result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.getPayload());
            return ::org::apache::lucene::util::t_BytesRef::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(MappingMultiDocsAndPositionsEnum), (PyObject *) self, "getPayload", args, 2);
        }

        static PyObject *t_MappingMultiDocsAndPositionsEnum_getSubs(t_MappingMultiDocsAndPositionsEnum *self)
        {
          JArray< ::org::apache::lucene::index::MultiDocsAndPositionsEnum$EnumWithSlice > result((jobject) NULL);
          OBJ_CALL(result = self->object.getSubs());
          return JArray<jobject>(result.this$).wrap(::org::apache::lucene::index::t_MultiDocsAndPositionsEnum$EnumWithSlice::wrap_jobject);
        }

        static PyObject *t_MappingMultiDocsAndPositionsEnum_nextDoc(t_MappingMultiDocsAndPositionsEnum *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.nextDoc());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(MappingMultiDocsAndPositionsEnum), (PyObject *) self, "nextDoc", args, 2);
        }

        static PyObject *t_MappingMultiDocsAndPositionsEnum_nextPosition(t_MappingMultiDocsAndPositionsEnum *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.nextPosition());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(MappingMultiDocsAndPositionsEnum), (PyObject *) self, "nextPosition", args, 2);
        }

        static PyObject *t_MappingMultiDocsAndPositionsEnum_setMergeState(t_MappingMultiDocsAndPositionsEnum *self, PyObject *arg)
        {
          ::org::apache::lucene::index::MergeState a0((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::index::MergeState::initializeClass, &a0))
          {
            OBJ_CALL(self->object.setMergeState(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setMergeState", arg);
          return NULL;
        }

        static PyObject *t_MappingMultiDocsAndPositionsEnum_startOffset(t_MappingMultiDocsAndPositionsEnum *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.startOffset());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(MappingMultiDocsAndPositionsEnum), (PyObject *) self, "startOffset", args, 2);
        }

        static int t_MappingMultiDocsAndPositionsEnum_set__mergeState(t_MappingMultiDocsAndPositionsEnum *self, PyObject *arg, void *data)
        {
          {
            ::org::apache::lucene::index::MergeState value((jobject) NULL);
            if (!parseArg(arg, "k", ::org::apache::lucene::index::MergeState::initializeClass, &value))
            {
              INT_CALL(self->object.setMergeState(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "mergeState", arg);
          return -1;
        }

        static PyObject *t_MappingMultiDocsAndPositionsEnum_get__numSubs(t_MappingMultiDocsAndPositionsEnum *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object.getNumSubs());
          return PyInt_FromLong((long) value);
        }

        static PyObject *t_MappingMultiDocsAndPositionsEnum_get__payload(t_MappingMultiDocsAndPositionsEnum *self, void *data)
        {
          ::org::apache::lucene::util::BytesRef value((jobject) NULL);
          OBJ_CALL(value = self->object.getPayload());
          return ::org::apache::lucene::util::t_BytesRef::wrap_Object(value);
        }

        static PyObject *t_MappingMultiDocsAndPositionsEnum_get__subs(t_MappingMultiDocsAndPositionsEnum *self, void *data)
        {
          JArray< ::org::apache::lucene::index::MultiDocsAndPositionsEnum$EnumWithSlice > value((jobject) NULL);
          OBJ_CALL(value = self->object.getSubs());
          return JArray<jobject>(value.this$).wrap(::org::apache::lucene::index::t_MultiDocsAndPositionsEnum$EnumWithSlice::wrap_jobject);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/miscellaneous/SetKeywordMarkerFilter.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "org/apache/lucene/analysis/util/CharArraySet.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {

          ::java::lang::Class *SetKeywordMarkerFilter::class$ = NULL;
          jmethodID *SetKeywordMarkerFilter::mids$ = NULL;
          bool SetKeywordMarkerFilter::live$ = false;

          jclass SetKeywordMarkerFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/miscellaneous/SetKeywordMarkerFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_64fb9de3] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;Lorg/apache/lucene/analysis/util/CharArraySet;)V");
              mids$[mid_isKeyword_54c6a16a] = env->getMethodID(cls, "isKeyword", "()Z");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          SetKeywordMarkerFilter::SetKeywordMarkerFilter(const ::org::apache::lucene::analysis::TokenStream & a0, const ::org::apache::lucene::analysis::util::CharArraySet & a1) : ::org::apache::lucene::analysis::miscellaneous::KeywordMarkerFilter(env->newObject(initializeClass, &mids$, mid_init$_64fb9de3, a0.this$, a1.this$)) {}
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {
          static PyObject *t_SetKeywordMarkerFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SetKeywordMarkerFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_SetKeywordMarkerFilter_init_(t_SetKeywordMarkerFilter *self, PyObject *args, PyObject *kwds);

          static PyMethodDef t_SetKeywordMarkerFilter__methods_[] = {
            DECLARE_METHOD(t_SetKeywordMarkerFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SetKeywordMarkerFilter, instance_, METH_O | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(SetKeywordMarkerFilter, t_SetKeywordMarkerFilter, ::org::apache::lucene::analysis::miscellaneous::KeywordMarkerFilter, SetKeywordMarkerFilter, t_SetKeywordMarkerFilter_init_, 0, 0, 0, 0, 0);

          void t_SetKeywordMarkerFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(SetKeywordMarkerFilter), module, "SetKeywordMarkerFilter", 0);
          }

          void t_SetKeywordMarkerFilter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(SetKeywordMarkerFilter).tp_dict, "class_", make_descriptor(SetKeywordMarkerFilter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(SetKeywordMarkerFilter).tp_dict, "wrapfn_", make_descriptor(t_SetKeywordMarkerFilter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(SetKeywordMarkerFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_SetKeywordMarkerFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, SetKeywordMarkerFilter::initializeClass, 1)))
              return NULL;
            return t_SetKeywordMarkerFilter::wrap_Object(SetKeywordMarkerFilter(((t_SetKeywordMarkerFilter *) arg)->object.this$));
          }
          static PyObject *t_SetKeywordMarkerFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, SetKeywordMarkerFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_SetKeywordMarkerFilter_init_(t_SetKeywordMarkerFilter *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::util::CharArraySet a1((jobject) NULL);
            PyTypeObject **p1;
            SetKeywordMarkerFilter object((jobject) NULL);

            if (!parseArgs(args, "kK", ::org::apache::lucene::analysis::TokenStream::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, &a0, &a1, &p1, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_))
            {
              INT_CALL(object = SetKeywordMarkerFilter(a0, a1));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queries/function/valuesource/TotalTermFreqValueSource.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "org/apache/lucene/queries/function/FunctionValues.h"
#include "java/lang/Class.h"
#include "java/lang/Object.h"
#include "java/io/IOException.h"
#include "java/util/Map.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "java/lang/String.h"
#include "org/apache/lucene/search/IndexSearcher.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {

            ::java::lang::Class *TotalTermFreqValueSource::class$ = NULL;
            jmethodID *TotalTermFreqValueSource::mids$ = NULL;
            bool TotalTermFreqValueSource::live$ = false;

            jclass TotalTermFreqValueSource::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queries/function/valuesource/TotalTermFreqValueSource");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_b45b6622] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Lorg/apache/lucene/util/BytesRef;)V");
                mids$[mid_createWeight_1b6125ba] = env->getMethodID(cls, "createWeight", "(Ljava/util/Map;Lorg/apache/lucene/search/IndexSearcher;)V");
                mids$[mid_description_14c7b5c5] = env->getMethodID(cls, "description", "()Ljava/lang/String;");
                mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
                mids$[mid_getValues_4c566485] = env->getMethodID(cls, "getValues", "(Ljava/util/Map;Lorg/apache/lucene/index/AtomicReaderContext;)Lorg/apache/lucene/queries/function/FunctionValues;");
                mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
                mids$[mid_name_14c7b5c5] = env->getMethodID(cls, "name", "()Ljava/lang/String;");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            TotalTermFreqValueSource::TotalTermFreqValueSource(const ::java::lang::String & a0, const ::java::lang::String & a1, const ::java::lang::String & a2, const ::org::apache::lucene::util::BytesRef & a3) : ::org::apache::lucene::queries::function::ValueSource(env->newObject(initializeClass, &mids$, mid_init$_b45b6622, a0.this$, a1.this$, a2.this$, a3.this$)) {}

            void TotalTermFreqValueSource::createWeight(const ::java::util::Map & a0, const ::org::apache::lucene::search::IndexSearcher & a1) const
            {
              env->callVoidMethod(this$, mids$[mid_createWeight_1b6125ba], a0.this$, a1.this$);
            }

            ::java::lang::String TotalTermFreqValueSource::description() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_description_14c7b5c5]));
            }

            jboolean TotalTermFreqValueSource::equals(const ::java::lang::Object & a0) const
            {
              return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
            }

            ::org::apache::lucene::queries::function::FunctionValues TotalTermFreqValueSource::getValues(const ::java::util::Map & a0, const ::org::apache::lucene::index::AtomicReaderContext & a1) const
            {
              return ::org::apache::lucene::queries::function::FunctionValues(env->callObjectMethod(this$, mids$[mid_getValues_4c566485], a0.this$, a1.this$));
            }

            jint TotalTermFreqValueSource::hashCode() const
            {
              return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
            }

            ::java::lang::String TotalTermFreqValueSource::name() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_name_14c7b5c5]));
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {
            static PyObject *t_TotalTermFreqValueSource_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_TotalTermFreqValueSource_instance_(PyTypeObject *type, PyObject *arg);
            static int t_TotalTermFreqValueSource_init_(t_TotalTermFreqValueSource *self, PyObject *args, PyObject *kwds);
            static PyObject *t_TotalTermFreqValueSource_createWeight(t_TotalTermFreqValueSource *self, PyObject *args);
            static PyObject *t_TotalTermFreqValueSource_description(t_TotalTermFreqValueSource *self, PyObject *args);
            static PyObject *t_TotalTermFreqValueSource_equals(t_TotalTermFreqValueSource *self, PyObject *args);
            static PyObject *t_TotalTermFreqValueSource_getValues(t_TotalTermFreqValueSource *self, PyObject *args);
            static PyObject *t_TotalTermFreqValueSource_hashCode(t_TotalTermFreqValueSource *self, PyObject *args);
            static PyObject *t_TotalTermFreqValueSource_name(t_TotalTermFreqValueSource *self);

            static PyMethodDef t_TotalTermFreqValueSource__methods_[] = {
              DECLARE_METHOD(t_TotalTermFreqValueSource, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_TotalTermFreqValueSource, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_TotalTermFreqValueSource, createWeight, METH_VARARGS),
              DECLARE_METHOD(t_TotalTermFreqValueSource, description, METH_VARARGS),
              DECLARE_METHOD(t_TotalTermFreqValueSource, equals, METH_VARARGS),
              DECLARE_METHOD(t_TotalTermFreqValueSource, getValues, METH_VARARGS),
              DECLARE_METHOD(t_TotalTermFreqValueSource, hashCode, METH_VARARGS),
              DECLARE_METHOD(t_TotalTermFreqValueSource, name, METH_NOARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(TotalTermFreqValueSource, t_TotalTermFreqValueSource, ::org::apache::lucene::queries::function::ValueSource, TotalTermFreqValueSource, t_TotalTermFreqValueSource_init_, 0, 0, 0, 0, 0);

            void t_TotalTermFreqValueSource::install(PyObject *module)
            {
              installType(&PY_TYPE(TotalTermFreqValueSource), module, "TotalTermFreqValueSource", 0);
            }

            void t_TotalTermFreqValueSource::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(TotalTermFreqValueSource).tp_dict, "class_", make_descriptor(TotalTermFreqValueSource::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(TotalTermFreqValueSource).tp_dict, "wrapfn_", make_descriptor(t_TotalTermFreqValueSource::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(TotalTermFreqValueSource).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_TotalTermFreqValueSource_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, TotalTermFreqValueSource::initializeClass, 1)))
                return NULL;
              return t_TotalTermFreqValueSource::wrap_Object(TotalTermFreqValueSource(((t_TotalTermFreqValueSource *) arg)->object.this$));
            }
            static PyObject *t_TotalTermFreqValueSource_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, TotalTermFreqValueSource::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_TotalTermFreqValueSource_init_(t_TotalTermFreqValueSource *self, PyObject *args, PyObject *kwds)
            {
              ::java::lang::String a0((jobject) NULL);
              ::java::lang::String a1((jobject) NULL);
              ::java::lang::String a2((jobject) NULL);
              ::org::apache::lucene::util::BytesRef a3((jobject) NULL);
              TotalTermFreqValueSource object((jobject) NULL);

              if (!parseArgs(args, "sssk", ::org::apache::lucene::util::BytesRef::initializeClass, &a0, &a1, &a2, &a3))
              {
                INT_CALL(object = TotalTermFreqValueSource(a0, a1, a2, a3));
                self->object = object;
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_TotalTermFreqValueSource_createWeight(t_TotalTermFreqValueSource *self, PyObject *args)
            {
              ::java::util::Map a0((jobject) NULL);
              PyTypeObject **p0;
              ::org::apache::lucene::search::IndexSearcher a1((jobject) NULL);

              if (!parseArgs(args, "Kk", ::java::util::Map::initializeClass, ::org::apache::lucene::search::IndexSearcher::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_, &a1))
              {
                OBJ_CALL(self->object.createWeight(a0, a1));
                Py_RETURN_NONE;
              }

              return callSuper(&PY_TYPE(TotalTermFreqValueSource), (PyObject *) self, "createWeight", args, 2);
            }

            static PyObject *t_TotalTermFreqValueSource_description(t_TotalTermFreqValueSource *self, PyObject *args)
            {
              ::java::lang::String result((jobject) NULL);

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.description());
                return j2p(result);
              }

              return callSuper(&PY_TYPE(TotalTermFreqValueSource), (PyObject *) self, "description", args, 2);
            }

            static PyObject *t_TotalTermFreqValueSource_equals(t_TotalTermFreqValueSource *self, PyObject *args)
            {
              ::java::lang::Object a0((jobject) NULL);
              jboolean result;

              if (!parseArgs(args, "o", &a0))
              {
                OBJ_CALL(result = self->object.equals(a0));
                Py_RETURN_BOOL(result);
              }

              return callSuper(&PY_TYPE(TotalTermFreqValueSource), (PyObject *) self, "equals", args, 2);
            }

            static PyObject *t_TotalTermFreqValueSource_getValues(t_TotalTermFreqValueSource *self, PyObject *args)
            {
              ::java::util::Map a0((jobject) NULL);
              PyTypeObject **p0;
              ::org::apache::lucene::index::AtomicReaderContext a1((jobject) NULL);
              ::org::apache::lucene::queries::function::FunctionValues result((jobject) NULL);

              if (!parseArgs(args, "Kk", ::java::util::Map::initializeClass, ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_, &a1))
              {
                OBJ_CALL(result = self->object.getValues(a0, a1));
                return ::org::apache::lucene::queries::function::t_FunctionValues::wrap_Object(result);
              }

              return callSuper(&PY_TYPE(TotalTermFreqValueSource), (PyObject *) self, "getValues", args, 2);
            }

            static PyObject *t_TotalTermFreqValueSource_hashCode(t_TotalTermFreqValueSource *self, PyObject *args)
            {
              jint result;

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.hashCode());
                return PyInt_FromLong((long) result);
              }

              return callSuper(&PY_TYPE(TotalTermFreqValueSource), (PyObject *) self, "hashCode", args, 2);
            }

            static PyObject *t_TotalTermFreqValueSource_name(t_TotalTermFreqValueSource *self)
            {
              ::java::lang::String result((jobject) NULL);
              OBJ_CALL(result = self->object.name());
              return j2p(result);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "java/lang/Number.h"
#include "java/io/Serializable.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace java {
  namespace lang {

    ::java::lang::Class *Number::class$ = NULL;
    jmethodID *Number::mids$ = NULL;
    bool Number::live$ = false;

    jclass Number::initializeClass(bool getOnly)
    {
      if (getOnly)
        return (jclass) (live$ ? class$->this$ : NULL);
      if (class$ == NULL)
      {
        jclass cls = (jclass) env->findClass("java/lang/Number");

        mids$ = new jmethodID[max_mid];
        mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
        mids$[mid_byteValue_54c6a172] = env->getMethodID(cls, "byteValue", "()B");
        mids$[mid_doubleValue_54c6a174] = env->getMethodID(cls, "doubleValue", "()D");
        mids$[mid_floatValue_54c6a176] = env->getMethodID(cls, "floatValue", "()F");
        mids$[mid_intValue_54c6a179] = env->getMethodID(cls, "intValue", "()I");
        mids$[mid_longValue_54c6a17a] = env->getMethodID(cls, "longValue", "()J");
        mids$[mid_shortValue_54c6a163] = env->getMethodID(cls, "shortValue", "()S");

        class$ = (::java::lang::Class *) new JObject(cls);
        live$ = true;
      }
      return (jclass) class$->this$;
    }

    Number::Number() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

    jbyte Number::byteValue() const
    {
      return env->callByteMethod(this$, mids$[mid_byteValue_54c6a172]);
    }

    jdouble Number::doubleValue() const
    {
      return env->callDoubleMethod(this$, mids$[mid_doubleValue_54c6a174]);
    }

    jfloat Number::floatValue() const
    {
      return env->callFloatMethod(this$, mids$[mid_floatValue_54c6a176]);
    }

    jint Number::intValue() const
    {
      return env->callIntMethod(this$, mids$[mid_intValue_54c6a179]);
    }

    jlong Number::longValue() const
    {
      return env->callLongMethod(this$, mids$[mid_longValue_54c6a17a]);
    }

    jshort Number::shortValue() const
    {
      return env->callShortMethod(this$, mids$[mid_shortValue_54c6a163]);
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace java {
  namespace lang {
    static PyObject *t_Number_cast_(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Number_instance_(PyTypeObject *type, PyObject *arg);
    static int t_Number_init_(t_Number *self, PyObject *args, PyObject *kwds);
    static PyObject *t_Number_byteValue(t_Number *self);
    static PyObject *t_Number_doubleValue(t_Number *self);
    static PyObject *t_Number_floatValue(t_Number *self);
    static PyObject *t_Number_intValue(t_Number *self);
    static PyObject *t_Number_longValue(t_Number *self);
    static PyObject *t_Number_shortValue(t_Number *self);

    static PyMethodDef t_Number__methods_[] = {
      DECLARE_METHOD(t_Number, cast_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Number, instance_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Number, byteValue, METH_NOARGS),
      DECLARE_METHOD(t_Number, doubleValue, METH_NOARGS),
      DECLARE_METHOD(t_Number, floatValue, METH_NOARGS),
      DECLARE_METHOD(t_Number, intValue, METH_NOARGS),
      DECLARE_METHOD(t_Number, longValue, METH_NOARGS),
      DECLARE_METHOD(t_Number, shortValue, METH_NOARGS),
      { NULL, NULL, 0, NULL }
    };

    DECLARE_TYPE(Number, t_Number, ::java::lang::Object, Number, t_Number_init_, 0, 0, 0, 0, 0);

    void t_Number::install(PyObject *module)
    {
      installType(&PY_TYPE(Number), module, "Number", 0);
    }

    void t_Number::initialize(PyObject *module)
    {
      PyDict_SetItemString(PY_TYPE(Number).tp_dict, "class_", make_descriptor(Number::initializeClass, 1));
      PyDict_SetItemString(PY_TYPE(Number).tp_dict, "wrapfn_", make_descriptor(t_Number::wrap_jobject));
      PyDict_SetItemString(PY_TYPE(Number).tp_dict, "boxfn_", make_descriptor(boxObject));
    }

    static PyObject *t_Number_cast_(PyTypeObject *type, PyObject *arg)
    {
      if (!(arg = castCheck(arg, Number::initializeClass, 1)))
        return NULL;
      return t_Number::wrap_Object(Number(((t_Number *) arg)->object.this$));
    }
    static PyObject *t_Number_instance_(PyTypeObject *type, PyObject *arg)
    {
      if (!castCheck(arg, Number::initializeClass, 0))
        Py_RETURN_FALSE;
      Py_RETURN_TRUE;
    }

    static int t_Number_init_(t_Number *self, PyObject *args, PyObject *kwds)
    {
      Number object((jobject) NULL);

      INT_CALL(object = Number());
      self->object = object;

      return 0;
    }

    static PyObject *t_Number_byteValue(t_Number *self)
    {
      jbyte result;
      OBJ_CALL(result = self->object.byteValue());
      return PyInt_FromLong((long) result);
    }

    static PyObject *t_Number_doubleValue(t_Number *self)
    {
      jdouble result;
      OBJ_CALL(result = self->object.doubleValue());
      return PyFloat_FromDouble((double) result);
    }

    static PyObject *t_Number_floatValue(t_Number *self)
    {
      jfloat result;
      OBJ_CALL(result = self->object.floatValue());
      return PyFloat_FromDouble((double) result);
    }

    static PyObject *t_Number_intValue(t_Number *self)
    {
      jint result;
      OBJ_CALL(result = self->object.intValue());
      return PyInt_FromLong((long) result);
    }

    static PyObject *t_Number_longValue(t_Number *self)
    {
      jlong result;
      OBJ_CALL(result = self->object.longValue());
      return PyLong_FromLongLong((PY_LONG_LONG) result);
    }

    static PyObject *t_Number_shortValue(t_Number *self)
    {
      jshort result;
      OBJ_CALL(result = self->object.shortValue());
      return PyInt_FromLong((long) result);
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/payloads/MaxPayloadFunction.h"
#include "java/lang/Object.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace payloads {

          ::java::lang::Class *MaxPayloadFunction::class$ = NULL;
          jmethodID *MaxPayloadFunction::mids$ = NULL;
          bool MaxPayloadFunction::live$ = false;

          jclass MaxPayloadFunction::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/payloads/MaxPayloadFunction");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_currentScore_9fe8c3f6] = env->getMethodID(cls, "currentScore", "(ILjava/lang/String;IIIFF)F");
              mids$[mid_docScore_08788a8d] = env->getMethodID(cls, "docScore", "(ILjava/lang/String;IF)F");
              mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
              mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          MaxPayloadFunction::MaxPayloadFunction() : ::org::apache::lucene::search::payloads::PayloadFunction(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          jfloat MaxPayloadFunction::currentScore(jint a0, const ::java::lang::String & a1, jint a2, jint a3, jint a4, jfloat a5, jfloat a6) const
          {
            return env->callFloatMethod(this$, mids$[mid_currentScore_9fe8c3f6], a0, a1.this$, a2, a3, a4, a5, a6);
          }

          jfloat MaxPayloadFunction::docScore(jint a0, const ::java::lang::String & a1, jint a2, jfloat a3) const
          {
            return env->callFloatMethod(this$, mids$[mid_docScore_08788a8d], a0, a1.this$, a2, a3);
          }

          jboolean MaxPayloadFunction::equals(const ::java::lang::Object & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
          }

          jint MaxPayloadFunction::hashCode() const
          {
            return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace payloads {
          static PyObject *t_MaxPayloadFunction_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_MaxPayloadFunction_instance_(PyTypeObject *type, PyObject *arg);
          static int t_MaxPayloadFunction_init_(t_MaxPayloadFunction *self, PyObject *args, PyObject *kwds);
          static PyObject *t_MaxPayloadFunction_currentScore(t_MaxPayloadFunction *self, PyObject *args);
          static PyObject *t_MaxPayloadFunction_docScore(t_MaxPayloadFunction *self, PyObject *args);
          static PyObject *t_MaxPayloadFunction_equals(t_MaxPayloadFunction *self, PyObject *args);
          static PyObject *t_MaxPayloadFunction_hashCode(t_MaxPayloadFunction *self, PyObject *args);

          static PyMethodDef t_MaxPayloadFunction__methods_[] = {
            DECLARE_METHOD(t_MaxPayloadFunction, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_MaxPayloadFunction, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_MaxPayloadFunction, currentScore, METH_VARARGS),
            DECLARE_METHOD(t_MaxPayloadFunction, docScore, METH_VARARGS),
            DECLARE_METHOD(t_MaxPayloadFunction, equals, METH_VARARGS),
            DECLARE_METHOD(t_MaxPayloadFunction, hashCode, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(MaxPayloadFunction, t_MaxPayloadFunction, ::org::apache::lucene::search::payloads::PayloadFunction, MaxPayloadFunction, t_MaxPayloadFunction_init_, 0, 0, 0, 0, 0);

          void t_MaxPayloadFunction::install(PyObject *module)
          {
            installType(&PY_TYPE(MaxPayloadFunction), module, "MaxPayloadFunction", 0);
          }

          void t_MaxPayloadFunction::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(MaxPayloadFunction).tp_dict, "class_", make_descriptor(MaxPayloadFunction::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(MaxPayloadFunction).tp_dict, "wrapfn_", make_descriptor(t_MaxPayloadFunction::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(MaxPayloadFunction).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_MaxPayloadFunction_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, MaxPayloadFunction::initializeClass, 1)))
              return NULL;
            return t_MaxPayloadFunction::wrap_Object(MaxPayloadFunction(((t_MaxPayloadFunction *) arg)->object.this$));
          }
          static PyObject *t_MaxPayloadFunction_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, MaxPayloadFunction::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_MaxPayloadFunction_init_(t_MaxPayloadFunction *self, PyObject *args, PyObject *kwds)
          {
            MaxPayloadFunction object((jobject) NULL);

            INT_CALL(object = MaxPayloadFunction());
            self->object = object;

            return 0;
          }

          static PyObject *t_MaxPayloadFunction_currentScore(t_MaxPayloadFunction *self, PyObject *args)
          {
            jint a0;
            ::java::lang::String a1((jobject) NULL);
            jint a2;
            jint a3;
            jint a4;
            jfloat a5;
            jfloat a6;
            jfloat result;

            if (!parseArgs(args, "IsIIIFF", &a0, &a1, &a2, &a3, &a4, &a5, &a6))
            {
              OBJ_CALL(result = self->object.currentScore(a0, a1, a2, a3, a4, a5, a6));
              return PyFloat_FromDouble((double) result);
            }

            return callSuper(&PY_TYPE(MaxPayloadFunction), (PyObject *) self, "currentScore", args, 2);
          }

          static PyObject *t_MaxPayloadFunction_docScore(t_MaxPayloadFunction *self, PyObject *args)
          {
            jint a0;
            ::java::lang::String a1((jobject) NULL);
            jint a2;
            jfloat a3;
            jfloat result;

            if (!parseArgs(args, "IsIF", &a0, &a1, &a2, &a3))
            {
              OBJ_CALL(result = self->object.docScore(a0, a1, a2, a3));
              return PyFloat_FromDouble((double) result);
            }

            return callSuper(&PY_TYPE(MaxPayloadFunction), (PyObject *) self, "docScore", args, 2);
          }

          static PyObject *t_MaxPayloadFunction_equals(t_MaxPayloadFunction *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            jboolean result;

            if (!parseArgs(args, "o", &a0))
            {
              OBJ_CALL(result = self->object.equals(a0));
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(MaxPayloadFunction), (PyObject *) self, "equals", args, 2);
          }

          static PyObject *t_MaxPayloadFunction_hashCode(t_MaxPayloadFunction *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.hashCode());
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(MaxPayloadFunction), (PyObject *) self, "hashCode", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/tokenattributes/OffsetAttribute.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace tokenattributes {

          ::java::lang::Class *OffsetAttribute::class$ = NULL;
          jmethodID *OffsetAttribute::mids$ = NULL;
          bool OffsetAttribute::live$ = false;

          jclass OffsetAttribute::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/tokenattributes/OffsetAttribute");

              mids$ = new jmethodID[max_mid];
              mids$[mid_endOffset_54c6a179] = env->getMethodID(cls, "endOffset", "()I");
              mids$[mid_setOffset_d8d154a6] = env->getMethodID(cls, "setOffset", "(II)V");
              mids$[mid_startOffset_54c6a179] = env->getMethodID(cls, "startOffset", "()I");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          jint OffsetAttribute::endOffset() const
          {
            return env->callIntMethod(this$, mids$[mid_endOffset_54c6a179]);
          }

          void OffsetAttribute::setOffset(jint a0, jint a1) const
          {
            env->callVoidMethod(this$, mids$[mid_setOffset_d8d154a6], a0, a1);
          }

          jint OffsetAttribute::startOffset() const
          {
            return env->callIntMethod(this$, mids$[mid_startOffset_54c6a179]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace tokenattributes {
          static PyObject *t_OffsetAttribute_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_OffsetAttribute_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_OffsetAttribute_endOffset(t_OffsetAttribute *self);
          static PyObject *t_OffsetAttribute_setOffset(t_OffsetAttribute *self, PyObject *args);
          static PyObject *t_OffsetAttribute_startOffset(t_OffsetAttribute *self);

          static PyMethodDef t_OffsetAttribute__methods_[] = {
            DECLARE_METHOD(t_OffsetAttribute, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_OffsetAttribute, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_OffsetAttribute, endOffset, METH_NOARGS),
            DECLARE_METHOD(t_OffsetAttribute, setOffset, METH_VARARGS),
            DECLARE_METHOD(t_OffsetAttribute, startOffset, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(OffsetAttribute, t_OffsetAttribute, ::org::apache::lucene::util::Attribute, OffsetAttribute, abstract_init, 0, 0, 0, 0, 0);

          void t_OffsetAttribute::install(PyObject *module)
          {
            installType(&PY_TYPE(OffsetAttribute), module, "OffsetAttribute", 0);
          }

          void t_OffsetAttribute::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(OffsetAttribute).tp_dict, "class_", make_descriptor(OffsetAttribute::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(OffsetAttribute).tp_dict, "wrapfn_", make_descriptor(t_OffsetAttribute::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(OffsetAttribute).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_OffsetAttribute_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, OffsetAttribute::initializeClass, 1)))
              return NULL;
            return t_OffsetAttribute::wrap_Object(OffsetAttribute(((t_OffsetAttribute *) arg)->object.this$));
          }
          static PyObject *t_OffsetAttribute_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, OffsetAttribute::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_OffsetAttribute_endOffset(t_OffsetAttribute *self)
          {
            jint result;
            OBJ_CALL(result = self->object.endOffset());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_OffsetAttribute_setOffset(t_OffsetAttribute *self, PyObject *args)
          {
            jint a0;
            jint a1;

            if (!parseArgs(args, "II", &a0, &a1))
            {
              OBJ_CALL(self->object.setOffset(a0, a1));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setOffset", args);
            return NULL;
          }

          static PyObject *t_OffsetAttribute_startOffset(t_OffsetAttribute *self)
          {
            jint result;
            OBJ_CALL(result = self->object.startOffset());
            return PyInt_FromLong((long) result);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/el/GreekAnalyzer.h"
#include "org/apache/lucene/util/Version.h"
#include "java/lang/String.h"
#include "org/apache/lucene/analysis/util/CharArraySet.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace el {

          ::java::lang::Class *GreekAnalyzer::class$ = NULL;
          jmethodID *GreekAnalyzer::mids$ = NULL;
          bool GreekAnalyzer::live$ = false;
          ::java::lang::String *GreekAnalyzer::DEFAULT_STOPWORD_FILE = NULL;

          jclass GreekAnalyzer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/el/GreekAnalyzer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_0d96cf33] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;)V");
              mids$[mid_init$_83eafe28] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/analysis/util/CharArraySet;)V");
              mids$[mid_getDefaultStopSet_d2d3505c] = env->getStaticMethodID(cls, "getDefaultStopSet", "()Lorg/apache/lucene/analysis/util/CharArraySet;");
              mids$[mid_createComponents_1be39cae] = env->getMethodID(cls, "createComponents", "(Ljava/lang/String;Ljava/io/Reader;)Lorg/apache/lucene/analysis/Analyzer$TokenStreamComponents;");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              DEFAULT_STOPWORD_FILE = new ::java::lang::String(env->getStaticObjectField(cls, "DEFAULT_STOPWORD_FILE", "Ljava/lang/String;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          GreekAnalyzer::GreekAnalyzer(const ::org::apache::lucene::util::Version & a0) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_0d96cf33, a0.this$)) {}

          GreekAnalyzer::GreekAnalyzer(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::analysis::util::CharArraySet & a1) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_83eafe28, a0.this$, a1.this$)) {}

          ::org::apache::lucene::analysis::util::CharArraySet GreekAnalyzer::getDefaultStopSet()
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::analysis::util::CharArraySet(env->callStaticObjectMethod(cls, mids$[mid_getDefaultStopSet_d2d3505c]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace el {
          static PyObject *t_GreekAnalyzer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_GreekAnalyzer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_GreekAnalyzer_init_(t_GreekAnalyzer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_GreekAnalyzer_getDefaultStopSet(PyTypeObject *type);
          static PyObject *t_GreekAnalyzer_get__defaultStopSet(t_GreekAnalyzer *self, void *data);
          static PyGetSetDef t_GreekAnalyzer__fields_[] = {
            DECLARE_GET_FIELD(t_GreekAnalyzer, defaultStopSet),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_GreekAnalyzer__methods_[] = {
            DECLARE_METHOD(t_GreekAnalyzer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_GreekAnalyzer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_GreekAnalyzer, getDefaultStopSet, METH_NOARGS | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(GreekAnalyzer, t_GreekAnalyzer, ::org::apache::lucene::analysis::util::StopwordAnalyzerBase, GreekAnalyzer, t_GreekAnalyzer_init_, 0, 0, t_GreekAnalyzer__fields_, 0, 0);

          void t_GreekAnalyzer::install(PyObject *module)
          {
            installType(&PY_TYPE(GreekAnalyzer), module, "GreekAnalyzer", 0);
          }

          void t_GreekAnalyzer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(GreekAnalyzer).tp_dict, "class_", make_descriptor(GreekAnalyzer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(GreekAnalyzer).tp_dict, "wrapfn_", make_descriptor(t_GreekAnalyzer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(GreekAnalyzer).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(GreekAnalyzer::initializeClass);
            PyDict_SetItemString(PY_TYPE(GreekAnalyzer).tp_dict, "DEFAULT_STOPWORD_FILE", make_descriptor(j2p(*GreekAnalyzer::DEFAULT_STOPWORD_FILE)));
          }

          static PyObject *t_GreekAnalyzer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, GreekAnalyzer::initializeClass, 1)))
              return NULL;
            return t_GreekAnalyzer::wrap_Object(GreekAnalyzer(((t_GreekAnalyzer *) arg)->object.this$));
          }
          static PyObject *t_GreekAnalyzer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, GreekAnalyzer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_GreekAnalyzer_init_(t_GreekAnalyzer *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                GreekAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "K", ::org::apache::lucene::util::Version::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_))
                {
                  INT_CALL(object = GreekAnalyzer(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 2:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                ::org::apache::lucene::analysis::util::CharArraySet a1((jobject) NULL);
                PyTypeObject **p1;
                GreekAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "KK", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1, &p1, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_))
                {
                  INT_CALL(object = GreekAnalyzer(a0, a1));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_GreekAnalyzer_getDefaultStopSet(PyTypeObject *type)
          {
            ::org::apache::lucene::analysis::util::CharArraySet result((jobject) NULL);
            OBJ_CALL(result = ::org::apache::lucene::analysis::el::GreekAnalyzer::getDefaultStopSet());
            return ::org::apache::lucene::analysis::util::t_CharArraySet::wrap_Object(result);
          }

          static PyObject *t_GreekAnalyzer_get__defaultStopSet(t_GreekAnalyzer *self, void *data)
          {
            ::org::apache::lucene::analysis::util::CharArraySet value((jobject) NULL);
            OBJ_CALL(value = self->object.getDefaultStopSet());
            return ::org::apache::lucene::analysis::util::t_CharArraySet::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/packed/AppendingDeltaPackedLongBuffer.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace packed {

          ::java::lang::Class *AppendingDeltaPackedLongBuffer::class$ = NULL;
          jmethodID *AppendingDeltaPackedLongBuffer::mids$ = NULL;
          bool AppendingDeltaPackedLongBuffer::live$ = false;

          jclass AppendingDeltaPackedLongBuffer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/util/packed/AppendingDeltaPackedLongBuffer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_init$_06298cab] = env->getMethodID(cls, "<init>", "(F)V");
              mids$[mid_init$_a74e6883] = env->getMethodID(cls, "<init>", "(IIF)V");
              mids$[mid_ramBytesUsed_54c6a17a] = env->getMethodID(cls, "ramBytesUsed", "()J");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          AppendingDeltaPackedLongBuffer::AppendingDeltaPackedLongBuffer() : ::org::apache::lucene::util::packed::AbstractAppendingLongBuffer(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          AppendingDeltaPackedLongBuffer::AppendingDeltaPackedLongBuffer(jfloat a0) : ::org::apache::lucene::util::packed::AbstractAppendingLongBuffer(env->newObject(initializeClass, &mids$, mid_init$_06298cab, a0)) {}

          AppendingDeltaPackedLongBuffer::AppendingDeltaPackedLongBuffer(jint a0, jint a1, jfloat a2) : ::org::apache::lucene::util::packed::AbstractAppendingLongBuffer(env->newObject(initializeClass, &mids$, mid_init$_a74e6883, a0, a1, a2)) {}

          jlong AppendingDeltaPackedLongBuffer::ramBytesUsed() const
          {
            return env->callLongMethod(this$, mids$[mid_ramBytesUsed_54c6a17a]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace packed {
          static PyObject *t_AppendingDeltaPackedLongBuffer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_AppendingDeltaPackedLongBuffer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_AppendingDeltaPackedLongBuffer_init_(t_AppendingDeltaPackedLongBuffer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_AppendingDeltaPackedLongBuffer_ramBytesUsed(t_AppendingDeltaPackedLongBuffer *self, PyObject *args);

          static PyMethodDef t_AppendingDeltaPackedLongBuffer__methods_[] = {
            DECLARE_METHOD(t_AppendingDeltaPackedLongBuffer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_AppendingDeltaPackedLongBuffer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_AppendingDeltaPackedLongBuffer, ramBytesUsed, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(AppendingDeltaPackedLongBuffer, t_AppendingDeltaPackedLongBuffer, ::org::apache::lucene::util::packed::AbstractAppendingLongBuffer, AppendingDeltaPackedLongBuffer, t_AppendingDeltaPackedLongBuffer_init_, 0, 0, 0, 0, 0);

          void t_AppendingDeltaPackedLongBuffer::install(PyObject *module)
          {
            installType(&PY_TYPE(AppendingDeltaPackedLongBuffer), module, "AppendingDeltaPackedLongBuffer", 0);
          }

          void t_AppendingDeltaPackedLongBuffer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(AppendingDeltaPackedLongBuffer).tp_dict, "class_", make_descriptor(AppendingDeltaPackedLongBuffer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(AppendingDeltaPackedLongBuffer).tp_dict, "wrapfn_", make_descriptor(t_AppendingDeltaPackedLongBuffer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(AppendingDeltaPackedLongBuffer).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_AppendingDeltaPackedLongBuffer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, AppendingDeltaPackedLongBuffer::initializeClass, 1)))
              return NULL;
            return t_AppendingDeltaPackedLongBuffer::wrap_Object(AppendingDeltaPackedLongBuffer(((t_AppendingDeltaPackedLongBuffer *) arg)->object.this$));
          }
          static PyObject *t_AppendingDeltaPackedLongBuffer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, AppendingDeltaPackedLongBuffer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_AppendingDeltaPackedLongBuffer_init_(t_AppendingDeltaPackedLongBuffer *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 0:
              {
                AppendingDeltaPackedLongBuffer object((jobject) NULL);

                INT_CALL(object = AppendingDeltaPackedLongBuffer());
                self->object = object;
                break;
              }
              goto err;
             case 1:
              {
                jfloat a0;
                AppendingDeltaPackedLongBuffer object((jobject) NULL);

                if (!parseArgs(args, "F", &a0))
                {
                  INT_CALL(object = AppendingDeltaPackedLongBuffer(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 3:
              {
                jint a0;
                jint a1;
                jfloat a2;
                AppendingDeltaPackedLongBuffer object((jobject) NULL);

                if (!parseArgs(args, "IIF", &a0, &a1, &a2))
                {
                  INT_CALL(object = AppendingDeltaPackedLongBuffer(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_AppendingDeltaPackedLongBuffer_ramBytesUsed(t_AppendingDeltaPackedLongBuffer *self, PyObject *args)
          {
            jlong result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.ramBytesUsed());
              return PyLong_FromLongLong((PY_LONG_LONG) result);
            }

            return callSuper(&PY_TYPE(AppendingDeltaPackedLongBuffer), (PyObject *) self, "ramBytesUsed", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "java/lang/Integer.h"
#include "java/lang/Comparable.h"
#include "java/lang/Class.h"
#include "java/lang/Object.h"
#include "java/lang/String.h"
#include "java/lang/NumberFormatException.h"
#include "JArray.h"

namespace java {
  namespace lang {

    ::java::lang::Class *Integer::class$ = NULL;
    jmethodID *Integer::mids$ = NULL;
    bool Integer::live$ = false;
    jint Integer::BYTES = (jint) 0;
    jint Integer::MAX_VALUE = (jint) 0;
    jint Integer::MIN_VALUE = (jint) 0;
    jint Integer::SIZE = (jint) 0;
    ::java::lang::Class *Integer::TYPE = NULL;

    jclass Integer::initializeClass(bool getOnly)
    {
      if (getOnly)
        return (jclass) (live$ ? class$->this$ : NULL);
      if (class$ == NULL)
      {
        jclass cls = (jclass) env->findClass("java/lang/Integer");

        mids$ = new jmethodID[max_mid];
        mids$[mid_init$_39c7bd3c] = env->getMethodID(cls, "<init>", "(I)V");
        mids$[mid_init$_5fdc3f48] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;)V");
        mids$[mid_bitCount_39c7bd23] = env->getStaticMethodID(cls, "bitCount", "(I)I");
        mids$[mid_byteValue_54c6a172] = env->getMethodID(cls, "byteValue", "()B");
        mids$[mid_compare_d8d154b9] = env->getStaticMethodID(cls, "compare", "(II)I");
        mids$[mid_compareTo_af7b73bb] = env->getMethodID(cls, "compareTo", "(Ljava/lang/Integer;)I");
        mids$[mid_compareUnsigned_d8d154b9] = env->getStaticMethodID(cls, "compareUnsigned", "(II)I");
        mids$[mid_decode_da36ea2b] = env->getStaticMethodID(cls, "decode", "(Ljava/lang/String;)Ljava/lang/Integer;");
        mids$[mid_divideUnsigned_d8d154b9] = env->getStaticMethodID(cls, "divideUnsigned", "(II)I");
        mids$[mid_doubleValue_54c6a174] = env->getMethodID(cls, "doubleValue", "()D");
        mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
        mids$[mid_floatValue_54c6a176] = env->getMethodID(cls, "floatValue", "()F");
        mids$[mid_getInteger_da36ea2b] = env->getStaticMethodID(cls, "getInteger", "(Ljava/lang/String;)Ljava/lang/Integer;");
        mids$[mid_getInteger_fe9eddb1] = env->getStaticMethodID(cls, "getInteger", "(Ljava/lang/String;Ljava/lang/Integer;)Ljava/lang/Integer;");
        mids$[mid_getInteger_39b2b79d] = env->getStaticMethodID(cls, "getInteger", "(Ljava/lang/String;I)Ljava/lang/Integer;");
        mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
        mids$[mid_hashCode_39c7bd23] = env->getStaticMethodID(cls, "hashCode", "(I)I");
        mids$[mid_highestOneBit_39c7bd23] = env->getStaticMethodID(cls, "highestOneBit", "(I)I");
        mids$[mid_intValue_54c6a179] = env->getMethodID(cls, "intValue", "()I");
        mids$[mid_longValue_54c6a17a] = env->getMethodID(cls, "longValue", "()J");
        mids$[mid_lowestOneBit_39c7bd23] = env->getStaticMethodID(cls, "lowestOneBit", "(I)I");
        mids$[mid_max_d8d154b9] = env->getStaticMethodID(cls, "max", "(II)I");
        mids$[mid_min_d8d154b9] = env->getStaticMethodID(cls, "min", "(II)I");
        mids$[mid_numberOfLeadingZeros_39c7bd23] = env->getStaticMethodID(cls, "numberOfLeadingZeros", "(I)I");
        mids$[mid_numberOfTrailingZeros_39c7bd23] = env->getStaticMethodID(cls, "numberOfTrailingZeros", "(I)I");
        mids$[mid_parseInt_5fdc3f57] = env->getStaticMethodID(cls, "parseInt", "(Ljava/lang/String;)I");
        mids$[mid_parseInt_6e53ccd9] = env->getStaticMethodID(cls, "parseInt", "(Ljava/lang/String;I)I");
        mids$[mid_parseUnsignedInt_5fdc3f57] = env->getStaticMethodID(cls, "parseUnsignedInt", "(Ljava/lang/String;)I");
        mids$[mid_parseUnsignedInt_6e53ccd9] = env->getStaticMethodID(cls, "parseUnsignedInt", "(Ljava/lang/String;I)I");
        mids$[mid_remainderUnsigned_d8d154b9] = env->getStaticMethodID(cls, "remainderUnsigned", "(II)I");
        mids$[mid_reverse_39c7bd23] = env->getStaticMethodID(cls, "reverse", "(I)I");
        mids$[mid_reverseBytes_39c7bd23] = env->getStaticMethodID(cls, "reverseBytes", "(I)I");
        mids$[mid_rotateLeft_d8d154b9] = env->getStaticMethodID(cls, "rotateLeft", "(II)I");
        mids$[mid_rotateRight_d8d154b9] = env->getStaticMethodID(cls, "rotateRight", "(II)I");
        mids$[mid_shortValue_54c6a163] = env->getMethodID(cls, "shortValue", "()S");
        mids$[mid_signum_39c7bd23] = env->getStaticMethodID(cls, "signum", "(I)I");
        mids$[mid_sum_d8d154b9] = env->getStaticMethodID(cls, "sum", "(II)I");
        mids$[mid_toBinaryString_141401b3] = env->getStaticMethodID(cls, "toBinaryString", "(I)Ljava/lang/String;");
        mids$[mid_toHexString_141401b3] = env->getStaticMethodID(cls, "toHexString", "(I)Ljava/lang/String;");
        mids$[mid_toOctalString_141401b3] = env->getStaticMethodID(cls, "toOctalString", "(I)Ljava/lang/String;");
        mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");
        mids$[mid_toString_141401b3] = env->getStaticMethodID(cls, "toString", "(I)Ljava/lang/String;");
        mids$[mid_toString_f9118fe5] = env->getStaticMethodID(cls, "toString", "(II)Ljava/lang/String;");
        mids$[mid_toUnsignedLong_39c7bd20] = env->getStaticMethodID(cls, "toUnsignedLong", "(I)J");
        mids$[mid_toUnsignedString_141401b3] = env->getStaticMethodID(cls, "toUnsignedString", "(I)Ljava/lang/String;");
        mids$[mid_toUnsignedString_f9118fe5] = env->getStaticMethodID(cls, "toUnsignedString", "(II)Ljava/lang/String;");
        mids$[mid_valueOf_7266dabb] = env->getStaticMethodID(cls, "valueOf", "(I)Ljava/lang/Integer;");
        mids$[mid_valueOf_da36ea2b] = env->getStaticMethodID(cls, "valueOf", "(Ljava/lang/String;)Ljava/lang/Integer;");
        mids$[mid_valueOf_39b2b79d] = env->getStaticMethodID(cls, "valueOf", "(Ljava/lang/String;I)Ljava/lang/Integer;");

        class$ = (::java::lang::Class *) new JObject(cls);
        cls = (jclass) class$->this$;

        BYTES = env->getStaticIntField(cls, "BYTES");
        MAX_VALUE = env->getStaticIntField(cls, "MAX_VALUE");
        MIN_VALUE = env->getStaticIntField(cls, "MIN_VALUE");
        SIZE = env->getStaticIntField(cls, "SIZE");
        TYPE = new ::java::lang::Class(env->getStaticObjectField(cls, "TYPE", "Ljava/lang/Class;"));
        live$ = true;
      }
      return (jclass) class$->this$;
    }

    Integer::Integer(jint a0) : ::java::lang::Number(env->newObject(initializeClass, &mids$, mid_init$_39c7bd3c, a0)) {}

    Integer::Integer(const ::java::lang::String & a0) : ::java::lang::Number(env->newObject(initializeClass, &mids$, mid_init$_5fdc3f48, a0.this$)) {}

    jint Integer::bitCount(jint a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_bitCount_39c7bd23], a0);
    }

    jbyte Integer::byteValue() const
    {
      return env->callByteMethod(this$, mids$[mid_byteValue_54c6a172]);
    }

    jint Integer::compare(jint a0, jint a1)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_compare_d8d154b9], a0, a1);
    }

    jint Integer::compareTo(const Integer & a0) const
    {
      return env->callIntMethod(this$, mids$[mid_compareTo_af7b73bb], a0.this$);
    }

    jint Integer::compareUnsigned(jint a0, jint a1)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_compareUnsigned_d8d154b9], a0, a1);
    }

    Integer Integer::decode(const ::java::lang::String & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return Integer(env->callStaticObjectMethod(cls, mids$[mid_decode_da36ea2b], a0.this$));
    }

    jint Integer::divideUnsigned(jint a0, jint a1)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_divideUnsigned_d8d154b9], a0, a1);
    }

    jdouble Integer::doubleValue() const
    {
      return env->callDoubleMethod(this$, mids$[mid_doubleValue_54c6a174]);
    }

    jboolean Integer::equals(const ::java::lang::Object & a0) const
    {
      return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
    }

    jfloat Integer::floatValue() const
    {
      return env->callFloatMethod(this$, mids$[mid_floatValue_54c6a176]);
    }

    Integer Integer::getInteger(const ::java::lang::String & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return Integer(env->callStaticObjectMethod(cls, mids$[mid_getInteger_da36ea2b], a0.this$));
    }

    Integer Integer::getInteger(const ::java::lang::String & a0, const Integer & a1)
    {
      jclass cls = env->getClass(initializeClass);
      return Integer(env->callStaticObjectMethod(cls, mids$[mid_getInteger_fe9eddb1], a0.this$, a1.this$));
    }

    Integer Integer::getInteger(const ::java::lang::String & a0, jint a1)
    {
      jclass cls = env->getClass(initializeClass);
      return Integer(env->callStaticObjectMethod(cls, mids$[mid_getInteger_39b2b79d], a0.this$, a1));
    }

    jint Integer::hashCode() const
    {
      return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
    }

    jint Integer::hashCode(jint a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_hashCode_39c7bd23], a0);
    }

    jint Integer::highestOneBit(jint a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_highestOneBit_39c7bd23], a0);
    }

    jint Integer::intValue() const
    {
      return env->callIntMethod(this$, mids$[mid_intValue_54c6a179]);
    }

    jlong Integer::longValue() const
    {
      return env->callLongMethod(this$, mids$[mid_longValue_54c6a17a]);
    }

    jint Integer::lowestOneBit(jint a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_lowestOneBit_39c7bd23], a0);
    }

    jint Integer::max$(jint a0, jint a1)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_max_d8d154b9], a0, a1);
    }

    jint Integer::min$(jint a0, jint a1)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_min_d8d154b9], a0, a1);
    }

    jint Integer::numberOfLeadingZeros(jint a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_numberOfLeadingZeros_39c7bd23], a0);
    }

    jint Integer::numberOfTrailingZeros(jint a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_numberOfTrailingZeros_39c7bd23], a0);
    }

    jint Integer::parseInt(const ::java::lang::String & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_parseInt_5fdc3f57], a0.this$);
    }

    jint Integer::parseInt(const ::java::lang::String & a0, jint a1)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_parseInt_6e53ccd9], a0.this$, a1);
    }

    jint Integer::parseUnsignedInt(const ::java::lang::String & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_parseUnsignedInt_5fdc3f57], a0.this$);
    }

    jint Integer::parseUnsignedInt(const ::java::lang::String & a0, jint a1)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_parseUnsignedInt_6e53ccd9], a0.this$, a1);
    }

    jint Integer::remainderUnsigned(jint a0, jint a1)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_remainderUnsigned_d8d154b9], a0, a1);
    }

    jint Integer::reverse(jint a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_reverse_39c7bd23], a0);
    }

    jint Integer::reverseBytes(jint a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_reverseBytes_39c7bd23], a0);
    }

    jint Integer::rotateLeft(jint a0, jint a1)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_rotateLeft_d8d154b9], a0, a1);
    }

    jint Integer::rotateRight(jint a0, jint a1)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_rotateRight_d8d154b9], a0, a1);
    }

    jshort Integer::shortValue() const
    {
      return env->callShortMethod(this$, mids$[mid_shortValue_54c6a163]);
    }

    jint Integer::signum(jint a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_signum_39c7bd23], a0);
    }

    jint Integer::sum(jint a0, jint a1)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_sum_d8d154b9], a0, a1);
    }

    ::java::lang::String Integer::toBinaryString(jint a0)
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::lang::String(env->callStaticObjectMethod(cls, mids$[mid_toBinaryString_141401b3], a0));
    }

    ::java::lang::String Integer::toHexString(jint a0)
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::lang::String(env->callStaticObjectMethod(cls, mids$[mid_toHexString_141401b3], a0));
    }

    ::java::lang::String Integer::toOctalString(jint a0)
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::lang::String(env->callStaticObjectMethod(cls, mids$[mid_toOctalString_141401b3], a0));
    }

    ::java::lang::String Integer::toString() const
    {
      return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
    }

    ::java::lang::String Integer::toString(jint a0)
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::lang::String(env->callStaticObjectMethod(cls, mids$[mid_toString_141401b3], a0));
    }

    ::java::lang::String Integer::toString(jint a0, jint a1)
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::lang::String(env->callStaticObjectMethod(cls, mids$[mid_toString_f9118fe5], a0, a1));
    }

    jlong Integer::toUnsignedLong(jint a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticLongMethod(cls, mids$[mid_toUnsignedLong_39c7bd20], a0);
    }

    ::java::lang::String Integer::toUnsignedString(jint a0)
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::lang::String(env->callStaticObjectMethod(cls, mids$[mid_toUnsignedString_141401b3], a0));
    }

    ::java::lang::String Integer::toUnsignedString(jint a0, jint a1)
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::lang::String(env->callStaticObjectMethod(cls, mids$[mid_toUnsignedString_f9118fe5], a0, a1));
    }

    Integer Integer::valueOf(jint a0)
    {
      jclass cls = env->getClass(initializeClass);
      return Integer(env->callStaticObjectMethod(cls, mids$[mid_valueOf_7266dabb], a0));
    }

    Integer Integer::valueOf(const ::java::lang::String & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return Integer(env->callStaticObjectMethod(cls, mids$[mid_valueOf_da36ea2b], a0.this$));
    }

    Integer Integer::valueOf(const ::java::lang::String & a0, jint a1)
    {
      jclass cls = env->getClass(initializeClass);
      return Integer(env->callStaticObjectMethod(cls, mids$[mid_valueOf_39b2b79d], a0.this$, a1));
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace java {
  namespace lang {
    static PyObject *t_Integer_cast_(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Integer_instance_(PyTypeObject *type, PyObject *arg);
    static int t_Integer_init_(t_Integer *self, PyObject *args, PyObject *kwds);
    static PyObject *t_Integer_bitCount(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Integer_byteValue(t_Integer *self, PyObject *args);
    static PyObject *t_Integer_compare(PyTypeObject *type, PyObject *args);
    static PyObject *t_Integer_compareTo(t_Integer *self, PyObject *arg);
    static PyObject *t_Integer_compareUnsigned(PyTypeObject *type, PyObject *args);
    static PyObject *t_Integer_decode(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Integer_divideUnsigned(PyTypeObject *type, PyObject *args);
    static PyObject *t_Integer_doubleValue(t_Integer *self, PyObject *args);
    static PyObject *t_Integer_equals(t_Integer *self, PyObject *args);
    static PyObject *t_Integer_floatValue(t_Integer *self, PyObject *args);
    static PyObject *t_Integer_getInteger(PyTypeObject *type, PyObject *args);
    static PyObject *t_Integer_hashCode(t_Integer *self, PyObject *args);
    static PyObject *t_Integer_hashCode_(PyTypeObject *type, PyObject *args);
    static PyObject *t_Integer_highestOneBit(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Integer_intValue(t_Integer *self, PyObject *args);
    static PyObject *t_Integer_longValue(t_Integer *self, PyObject *args);
    static PyObject *t_Integer_lowestOneBit(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Integer_max(PyTypeObject *type, PyObject *args);
    static PyObject *t_Integer_min(PyTypeObject *type, PyObject *args);
    static PyObject *t_Integer_numberOfLeadingZeros(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Integer_numberOfTrailingZeros(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Integer_parseInt(PyTypeObject *type, PyObject *args);
    static PyObject *t_Integer_parseUnsignedInt(PyTypeObject *type, PyObject *args);
    static PyObject *t_Integer_remainderUnsigned(PyTypeObject *type, PyObject *args);
    static PyObject *t_Integer_reverse(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Integer_reverseBytes(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Integer_rotateLeft(PyTypeObject *type, PyObject *args);
    static PyObject *t_Integer_rotateRight(PyTypeObject *type, PyObject *args);
    static PyObject *t_Integer_shortValue(t_Integer *self, PyObject *args);
    static PyObject *t_Integer_signum(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Integer_sum(PyTypeObject *type, PyObject *args);
    static PyObject *t_Integer_toBinaryString(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Integer_toHexString(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Integer_toOctalString(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Integer_toString(t_Integer *self, PyObject *args);
    static PyObject *t_Integer_toString_(PyTypeObject *type, PyObject *args);
    static PyObject *t_Integer_toUnsignedLong(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Integer_toUnsignedString(PyTypeObject *type, PyObject *args);
    static PyObject *t_Integer_valueOf(PyTypeObject *type, PyObject *args);

    static PyMethodDef t_Integer__methods_[] = {
      DECLARE_METHOD(t_Integer, cast_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Integer, instance_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Integer, bitCount, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Integer, byteValue, METH_VARARGS),
      DECLARE_METHOD(t_Integer, compare, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Integer, compareTo, METH_O),
      DECLARE_METHOD(t_Integer, compareUnsigned, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Integer, decode, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Integer, divideUnsigned, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Integer, doubleValue, METH_VARARGS),
      DECLARE_METHOD(t_Integer, equals, METH_VARARGS),
      DECLARE_METHOD(t_Integer, floatValue, METH_VARARGS),
      DECLARE_METHOD(t_Integer, getInteger, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Integer, hashCode, METH_VARARGS),
      DECLARE_METHOD(t_Integer, hashCode_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Integer, highestOneBit, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Integer, intValue, METH_VARARGS),
      DECLARE_METHOD(t_Integer, longValue, METH_VARARGS),
      DECLARE_METHOD(t_Integer, lowestOneBit, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Integer, max, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Integer, min, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Integer, numberOfLeadingZeros, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Integer, numberOfTrailingZeros, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Integer, parseInt, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Integer, parseUnsignedInt, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Integer, remainderUnsigned, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Integer, reverse, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Integer, reverseBytes, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Integer, rotateLeft, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Integer, rotateRight, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Integer, shortValue, METH_VARARGS),
      DECLARE_METHOD(t_Integer, signum, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Integer, sum, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Integer, toBinaryString, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Integer, toHexString, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Integer, toOctalString, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Integer, toString, METH_VARARGS),
      DECLARE_METHOD(t_Integer, toString_, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Integer, toUnsignedLong, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Integer, toUnsignedString, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Integer, valueOf, METH_VARARGS | METH_CLASS),
      { NULL, NULL, 0, NULL }
    };

    DECLARE_TYPE(Integer, t_Integer, ::java::lang::Number, Integer, t_Integer_init_, 0, 0, 0, 0, 0);

    void t_Integer::install(PyObject *module)
    {
      installType(&PY_TYPE(Integer), module, "Integer", 0);
    }

    void t_Integer::initialize(PyObject *module)
    {
      PyDict_SetItemString(PY_TYPE(Integer).tp_dict, "class_", make_descriptor(Integer::initializeClass, 1));
      PyDict_SetItemString(PY_TYPE(Integer).tp_dict, "wrapfn_", make_descriptor(unboxInteger));
      PyDict_SetItemString(PY_TYPE(Integer).tp_dict, "boxfn_", make_descriptor(boxInteger));
      env->getClass(Integer::initializeClass);
      PyDict_SetItemString(PY_TYPE(Integer).tp_dict, "BYTES", make_descriptor(Integer::BYTES));
      PyDict_SetItemString(PY_TYPE(Integer).tp_dict, "MAX_VALUE", make_descriptor(Integer::MAX_VALUE));
      PyDict_SetItemString(PY_TYPE(Integer).tp_dict, "MIN_VALUE", make_descriptor(Integer::MIN_VALUE));
      PyDict_SetItemString(PY_TYPE(Integer).tp_dict, "SIZE", make_descriptor(Integer::SIZE));
      PyDict_SetItemString(PY_TYPE(Integer).tp_dict, "TYPE", make_descriptor(::java::lang::t_Class::wrap_Object(*Integer::TYPE)));
    }

    static PyObject *t_Integer_cast_(PyTypeObject *type, PyObject *arg)
    {
      if (!(arg = castCheck(arg, Integer::initializeClass, 1)))
        return NULL;
      return t_Integer::wrap_Object(Integer(((t_Integer *) arg)->object.this$));
    }
    static PyObject *t_Integer_instance_(PyTypeObject *type, PyObject *arg)
    {
      if (!castCheck(arg, Integer::initializeClass, 0))
        Py_RETURN_FALSE;
      Py_RETURN_TRUE;
    }

    static int t_Integer_init_(t_Integer *self, PyObject *args, PyObject *kwds)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 1:
        {
          jint a0;
          Integer object((jobject) NULL);

          if (!parseArgs(args, "I", &a0))
          {
            INT_CALL(object = Integer(a0));
            self->object = object;
            break;
          }
        }
        {
          ::java::lang::String a0((jobject) NULL);
          Integer object((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            INT_CALL(object = Integer(a0));
            self->object = object;
            break;
          }
        }
       default:
        PyErr_SetArgsError((PyObject *) self, "__init__", args);
        return -1;
      }

      return 0;
    }

    static PyObject *t_Integer_bitCount(PyTypeObject *type, PyObject *arg)
    {
      jint a0;
      jint result;

      if (!parseArg(arg, "I", &a0))
      {
        OBJ_CALL(result = ::java::lang::Integer::bitCount(a0));
        return PyInt_FromLong((long) result);
      }

      PyErr_SetArgsError(type, "bitCount", arg);
      return NULL;
    }

    static PyObject *t_Integer_byteValue(t_Integer *self, PyObject *args)
    {
      jbyte result;

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.byteValue());
        return PyInt_FromLong((long) result);
      }

      return callSuper(&PY_TYPE(Integer), (PyObject *) self, "byteValue", args, 2);
    }

    static PyObject *t_Integer_compare(PyTypeObject *type, PyObject *args)
    {
      jint a0;
      jint a1;
      jint result;

      if (!parseArgs(args, "II", &a0, &a1))
      {
        OBJ_CALL(result = ::java::lang::Integer::compare(a0, a1));
        return PyInt_FromLong((long) result);
      }

      PyErr_SetArgsError(type, "compare", args);
      return NULL;
    }

    static PyObject *t_Integer_compareTo(t_Integer *self, PyObject *arg)
    {
      Integer a0((jobject) NULL);
      jint result;

      if (!parseArg(arg, "O", &::java::lang::PY_TYPE(Integer), &a0))
      {
        OBJ_CALL(result = self->object.compareTo(a0));
        return PyInt_FromLong((long) result);
      }

      PyErr_SetArgsError((PyObject *) self, "compareTo", arg);
      return NULL;
    }

    static PyObject *t_Integer_compareUnsigned(PyTypeObject *type, PyObject *args)
    {
      jint a0;
      jint a1;
      jint result;

      if (!parseArgs(args, "II", &a0, &a1))
      {
        OBJ_CALL(result = ::java::lang::Integer::compareUnsigned(a0, a1));
        return PyInt_FromLong((long) result);
      }

      PyErr_SetArgsError(type, "compareUnsigned", args);
      return NULL;
    }

    static PyObject *t_Integer_decode(PyTypeObject *type, PyObject *arg)
    {
      ::java::lang::String a0((jobject) NULL);
      Integer result((jobject) NULL);

      if (!parseArg(arg, "s", &a0))
      {
        OBJ_CALL(result = ::java::lang::Integer::decode(a0));
        return t_Integer::wrap_Object(result);
      }

      PyErr_SetArgsError(type, "decode", arg);
      return NULL;
    }

    static PyObject *t_Integer_divideUnsigned(PyTypeObject *type, PyObject *args)
    {
      jint a0;
      jint a1;
      jint result;

      if (!parseArgs(args, "II", &a0, &a1))
      {
        OBJ_CALL(result = ::java::lang::Integer::divideUnsigned(a0, a1));
        return PyInt_FromLong((long) result);
      }

      PyErr_SetArgsError(type, "divideUnsigned", args);
      return NULL;
    }

    static PyObject *t_Integer_doubleValue(t_Integer *self, PyObject *args)
    {
      jdouble result;

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.doubleValue());
        return PyFloat_FromDouble((double) result);
      }

      return callSuper(&PY_TYPE(Integer), (PyObject *) self, "doubleValue", args, 2);
    }

    static PyObject *t_Integer_equals(t_Integer *self, PyObject *args)
    {
      ::java::lang::Object a0((jobject) NULL);
      jboolean result;

      if (!parseArgs(args, "o", &a0))
      {
        OBJ_CALL(result = self->object.equals(a0));
        Py_RETURN_BOOL(result);
      }

      return callSuper(&PY_TYPE(Integer), (PyObject *) self, "equals", args, 2);
    }

    static PyObject *t_Integer_floatValue(t_Integer *self, PyObject *args)
    {
      jfloat result;

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.floatValue());
        return PyFloat_FromDouble((double) result);
      }

      return callSuper(&PY_TYPE(Integer), (PyObject *) self, "floatValue", args, 2);
    }

    static PyObject *t_Integer_getInteger(PyTypeObject *type, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 1:
        {
          ::java::lang::String a0((jobject) NULL);
          Integer result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = ::java::lang::Integer::getInteger(a0));
            return t_Integer::wrap_Object(result);
          }
        }
        break;
       case 2:
        {
          ::java::lang::String a0((jobject) NULL);
          Integer a1((jobject) NULL);
          Integer result((jobject) NULL);

          if (!parseArgs(args, "sO", &::java::lang::PY_TYPE(Integer), &a0, &a1))
          {
            OBJ_CALL(result = ::java::lang::Integer::getInteger(a0, a1));
            return t_Integer::wrap_Object(result);
          }
        }
        {
          ::java::lang::String a0((jobject) NULL);
          jint a1;
          Integer result((jobject) NULL);

          if (!parseArgs(args, "sI", &a0, &a1))
          {
            OBJ_CALL(result = ::java::lang::Integer::getInteger(a0, a1));
            return t_Integer::wrap_Object(result);
          }
        }
      }

      PyErr_SetArgsError(type, "getInteger", args);
      return NULL;
    }

    static PyObject *t_Integer_hashCode(t_Integer *self, PyObject *args)
    {
      jint result;

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.hashCode());
        return PyInt_FromLong((long) result);
      }

      return callSuper(&PY_TYPE(Integer), (PyObject *) self, "hashCode", args, 2);
    }

    static PyObject *t_Integer_hashCode_(PyTypeObject *type, PyObject *args)
    {
      jint a0;
      jint result;

      if (!parseArgs(args, "I", &a0))
      {
        OBJ_CALL(result = ::java::lang::Integer::hashCode(a0));
        return PyInt_FromLong((long) result);
      }

      PyErr_SetArgsError(type, "hashCode_", args);
      return NULL;
    }

    static PyObject *t_Integer_highestOneBit(PyTypeObject *type, PyObject *arg)
    {
      jint a0;
      jint result;

      if (!parseArg(arg, "I", &a0))
      {
        OBJ_CALL(result = ::java::lang::Integer::highestOneBit(a0));
        return PyInt_FromLong((long) result);
      }

      PyErr_SetArgsError(type, "highestOneBit", arg);
      return NULL;
    }

    static PyObject *t_Integer_intValue(t_Integer *self, PyObject *args)
    {
      jint result;

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.intValue());
        return PyInt_FromLong((long) result);
      }

      return callSuper(&PY_TYPE(Integer), (PyObject *) self, "intValue", args, 2);
    }

    static PyObject *t_Integer_longValue(t_Integer *self, PyObject *args)
    {
      jlong result;

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.longValue());
        return PyLong_FromLongLong((PY_LONG_LONG) result);
      }

      return callSuper(&PY_TYPE(Integer), (PyObject *) self, "longValue", args, 2);
    }

    static PyObject *t_Integer_lowestOneBit(PyTypeObject *type, PyObject *arg)
    {
      jint a0;
      jint result;

      if (!parseArg(arg, "I", &a0))
      {
        OBJ_CALL(result = ::java::lang::Integer::lowestOneBit(a0));
        return PyInt_FromLong((long) result);
      }

      PyErr_SetArgsError(type, "lowestOneBit", arg);
      return NULL;
    }

    static PyObject *t_Integer_max(PyTypeObject *type, PyObject *args)
    {
      jint a0;
      jint a1;
      jint result;

      if (!parseArgs(args, "II", &a0, &a1))
      {
        OBJ_CALL(result = ::java::lang::Integer::max$(a0, a1));
        return PyInt_FromLong((long) result);
      }

      PyErr_SetArgsError(type, "max", args);
      return NULL;
    }

    static PyObject *t_Integer_min(PyTypeObject *type, PyObject *args)
    {
      jint a0;
      jint a1;
      jint result;

      if (!parseArgs(args, "II", &a0, &a1))
      {
        OBJ_CALL(result = ::java::lang::Integer::min$(a0, a1));
        return PyInt_FromLong((long) result);
      }

      PyErr_SetArgsError(type, "min", args);
      return NULL;
    }

    static PyObject *t_Integer_numberOfLeadingZeros(PyTypeObject *type, PyObject *arg)
    {
      jint a0;
      jint result;

      if (!parseArg(arg, "I", &a0))
      {
        OBJ_CALL(result = ::java::lang::Integer::numberOfLeadingZeros(a0));
        return PyInt_FromLong((long) result);
      }

      PyErr_SetArgsError(type, "numberOfLeadingZeros", arg);
      return NULL;
    }

    static PyObject *t_Integer_numberOfTrailingZeros(PyTypeObject *type, PyObject *arg)
    {
      jint a0;
      jint result;

      if (!parseArg(arg, "I", &a0))
      {
        OBJ_CALL(result = ::java::lang::Integer::numberOfTrailingZeros(a0));
        return PyInt_FromLong((long) result);
      }

      PyErr_SetArgsError(type, "numberOfTrailingZeros", arg);
      return NULL;
    }

    static PyObject *t_Integer_parseInt(PyTypeObject *type, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 1:
        {
          ::java::lang::String a0((jobject) NULL);
          jint result;

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = ::java::lang::Integer::parseInt(a0));
            return PyInt_FromLong((long) result);
          }
        }
        break;
       case 2:
        {
          ::java::lang::String a0((jobject) NULL);
          jint a1;
          jint result;

          if (!parseArgs(args, "sI", &a0, &a1))
          {
            OBJ_CALL(result = ::java::lang::Integer::parseInt(a0, a1));
            return PyInt_FromLong((long) result);
          }
        }
      }

      PyErr_SetArgsError(type, "parseInt", args);
      return NULL;
    }

    static PyObject *t_Integer_parseUnsignedInt(PyTypeObject *type, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 1:
        {
          ::java::lang::String a0((jobject) NULL);
          jint result;

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = ::java::lang::Integer::parseUnsignedInt(a0));
            return PyInt_FromLong((long) result);
          }
        }
        break;
       case 2:
        {
          ::java::lang::String a0((jobject) NULL);
          jint a1;
          jint result;

          if (!parseArgs(args, "sI", &a0, &a1))
          {
            OBJ_CALL(result = ::java::lang::Integer::parseUnsignedInt(a0, a1));
            return PyInt_FromLong((long) result);
          }
        }
      }

      PyErr_SetArgsError(type, "parseUnsignedInt", args);
      return NULL;
    }

    static PyObject *t_Integer_remainderUnsigned(PyTypeObject *type, PyObject *args)
    {
      jint a0;
      jint a1;
      jint result;

      if (!parseArgs(args, "II", &a0, &a1))
      {
        OBJ_CALL(result = ::java::lang::Integer::remainderUnsigned(a0, a1));
        return PyInt_FromLong((long) result);
      }

      PyErr_SetArgsError(type, "remainderUnsigned", args);
      return NULL;
    }

    static PyObject *t_Integer_reverse(PyTypeObject *type, PyObject *arg)
    {
      jint a0;
      jint result;

      if (!parseArg(arg, "I", &a0))
      {
        OBJ_CALL(result = ::java::lang::Integer::reverse(a0));
        return PyInt_FromLong((long) result);
      }

      PyErr_SetArgsError(type, "reverse", arg);
      return NULL;
    }

    static PyObject *t_Integer_reverseBytes(PyTypeObject *type, PyObject *arg)
    {
      jint a0;
      jint result;

      if (!parseArg(arg, "I", &a0))
      {
        OBJ_CALL(result = ::java::lang::Integer::reverseBytes(a0));
        return PyInt_FromLong((long) result);
      }

      PyErr_SetArgsError(type, "reverseBytes", arg);
      return NULL;
    }

    static PyObject *t_Integer_rotateLeft(PyTypeObject *type, PyObject *args)
    {
      jint a0;
      jint a1;
      jint result;

      if (!parseArgs(args, "II", &a0, &a1))
      {
        OBJ_CALL(result = ::java::lang::Integer::rotateLeft(a0, a1));
        return PyInt_FromLong((long) result);
      }

      PyErr_SetArgsError(type, "rotateLeft", args);
      return NULL;
    }

    static PyObject *t_Integer_rotateRight(PyTypeObject *type, PyObject *args)
    {
      jint a0;
      jint a1;
      jint result;

      if (!parseArgs(args, "II", &a0, &a1))
      {
        OBJ_CALL(result = ::java::lang::Integer::rotateRight(a0, a1));
        return PyInt_FromLong((long) result);
      }

      PyErr_SetArgsError(type, "rotateRight", args);
      return NULL;
    }

    static PyObject *t_Integer_shortValue(t_Integer *self, PyObject *args)
    {
      jshort result;

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.shortValue());
        return PyInt_FromLong((long) result);
      }

      return callSuper(&PY_TYPE(Integer), (PyObject *) self, "shortValue", args, 2);
    }

    static PyObject *t_Integer_signum(PyTypeObject *type, PyObject *arg)
    {
      jint a0;
      jint result;

      if (!parseArg(arg, "I", &a0))
      {
        OBJ_CALL(result = ::java::lang::Integer::signum(a0));
        return PyInt_FromLong((long) result);
      }

      PyErr_SetArgsError(type, "signum", arg);
      return NULL;
    }

    static PyObject *t_Integer_sum(PyTypeObject *type, PyObject *args)
    {
      jint a0;
      jint a1;
      jint result;

      if (!parseArgs(args, "II", &a0, &a1))
      {
        OBJ_CALL(result = ::java::lang::Integer::sum(a0, a1));
        return PyInt_FromLong((long) result);
      }

      PyErr_SetArgsError(type, "sum", args);
      return NULL;
    }

    static PyObject *t_Integer_toBinaryString(PyTypeObject *type, PyObject *arg)
    {
      jint a0;
      ::java::lang::String result((jobject) NULL);

      if (!parseArg(arg, "I", &a0))
      {
        OBJ_CALL(result = ::java::lang::Integer::toBinaryString(a0));
        return j2p(result);
      }

      PyErr_SetArgsError(type, "toBinaryString", arg);
      return NULL;
    }

    static PyObject *t_Integer_toHexString(PyTypeObject *type, PyObject *arg)
    {
      jint a0;
      ::java::lang::String result((jobject) NULL);

      if (!parseArg(arg, "I", &a0))
      {
        OBJ_CALL(result = ::java::lang::Integer::toHexString(a0));
        return j2p(result);
      }

      PyErr_SetArgsError(type, "toHexString", arg);
      return NULL;
    }

    static PyObject *t_Integer_toOctalString(PyTypeObject *type, PyObject *arg)
    {
      jint a0;
      ::java::lang::String result((jobject) NULL);

      if (!parseArg(arg, "I", &a0))
      {
        OBJ_CALL(result = ::java::lang::Integer::toOctalString(a0));
        return j2p(result);
      }

      PyErr_SetArgsError(type, "toOctalString", arg);
      return NULL;
    }

    static PyObject *t_Integer_toString(t_Integer *self, PyObject *args)
    {
      ::java::lang::String result((jobject) NULL);

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.toString());
        return j2p(result);
      }

      return callSuper(&PY_TYPE(Integer), (PyObject *) self, "toString", args, 2);
    }

    static PyObject *t_Integer_toString_(PyTypeObject *type, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 1:
        {
          jint a0;
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(result = ::java::lang::Integer::toString(a0));
            return j2p(result);
          }
        }
        break;
       case 2:
        {
          jint a0;
          jint a1;
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, "II", &a0, &a1))
          {
            OBJ_CALL(result = ::java::lang::Integer::toString(a0, a1));
            return j2p(result);
          }
        }
      }

      PyErr_SetArgsError(type, "toString_", args);
      return NULL;
    }

    static PyObject *t_Integer_toUnsignedLong(PyTypeObject *type, PyObject *arg)
    {
      jint a0;
      jlong result;

      if (!parseArg(arg, "I", &a0))
      {
        OBJ_CALL(result = ::java::lang::Integer::toUnsignedLong(a0));
        return PyLong_FromLongLong((PY_LONG_LONG) result);
      }

      PyErr_SetArgsError(type, "toUnsignedLong", arg);
      return NULL;
    }

    static PyObject *t_Integer_toUnsignedString(PyTypeObject *type, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 1:
        {
          jint a0;
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(result = ::java::lang::Integer::toUnsignedString(a0));
            return j2p(result);
          }
        }
        break;
       case 2:
        {
          jint a0;
          jint a1;
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, "II", &a0, &a1))
          {
            OBJ_CALL(result = ::java::lang::Integer::toUnsignedString(a0, a1));
            return j2p(result);
          }
        }
      }

      PyErr_SetArgsError(type, "toUnsignedString", args);
      return NULL;
    }

    static PyObject *t_Integer_valueOf(PyTypeObject *type, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 1:
        {
          jint a0;
          Integer result((jobject) NULL);

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(result = ::java::lang::Integer::valueOf(a0));
            return t_Integer::wrap_Object(result);
          }
        }
        {
          ::java::lang::String a0((jobject) NULL);
          Integer result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = ::java::lang::Integer::valueOf(a0));
            return t_Integer::wrap_Object(result);
          }
        }
        break;
       case 2:
        {
          ::java::lang::String a0((jobject) NULL);
          jint a1;
          Integer result((jobject) NULL);

          if (!parseArgs(args, "sI", &a0, &a1))
          {
            OBJ_CALL(result = ::java::lang::Integer::valueOf(a0, a1));
            return t_Integer::wrap_Object(result);
          }
        }
      }

      PyErr_SetArgsError(type, "valueOf", args);
      return NULL;
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/facet/taxonomy/writercache/LruTaxonomyWriterCache$LRUType.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace taxonomy {
          namespace writercache {

            ::java::lang::Class *LruTaxonomyWriterCache$LRUType::class$ = NULL;
            jmethodID *LruTaxonomyWriterCache$LRUType::mids$ = NULL;
            bool LruTaxonomyWriterCache$LRUType::live$ = false;
            LruTaxonomyWriterCache$LRUType *LruTaxonomyWriterCache$LRUType::LRU_HASHED = NULL;
            LruTaxonomyWriterCache$LRUType *LruTaxonomyWriterCache$LRUType::LRU_STRING = NULL;

            jclass LruTaxonomyWriterCache$LRUType::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/facet/taxonomy/writercache/LruTaxonomyWriterCache$LRUType");

                mids$ = new jmethodID[max_mid];
                mids$[mid_valueOf_dc8e332a] = env->getStaticMethodID(cls, "valueOf", "(Ljava/lang/String;)Lorg/apache/lucene/facet/taxonomy/writercache/LruTaxonomyWriterCache$LRUType;");
                mids$[mid_values_bbbf1f8c] = env->getStaticMethodID(cls, "values", "()[Lorg/apache/lucene/facet/taxonomy/writercache/LruTaxonomyWriterCache$LRUType;");

                class$ = (::java::lang::Class *) new JObject(cls);
                cls = (jclass) class$->this$;

                LRU_HASHED = new LruTaxonomyWriterCache$LRUType(env->getStaticObjectField(cls, "LRU_HASHED", "Lorg/apache/lucene/facet/taxonomy/writercache/LruTaxonomyWriterCache$LRUType;"));
                LRU_STRING = new LruTaxonomyWriterCache$LRUType(env->getStaticObjectField(cls, "LRU_STRING", "Lorg/apache/lucene/facet/taxonomy/writercache/LruTaxonomyWriterCache$LRUType;"));
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            LruTaxonomyWriterCache$LRUType LruTaxonomyWriterCache$LRUType::valueOf(const ::java::lang::String & a0)
            {
              jclass cls = env->getClass(initializeClass);
              return LruTaxonomyWriterCache$LRUType(env->callStaticObjectMethod(cls, mids$[mid_valueOf_dc8e332a], a0.this$));
            }

            JArray< LruTaxonomyWriterCache$LRUType > LruTaxonomyWriterCache$LRUType::values()
            {
              jclass cls = env->getClass(initializeClass);
              return JArray< LruTaxonomyWriterCache$LRUType >(env->callStaticObjectMethod(cls, mids$[mid_values_bbbf1f8c]));
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace taxonomy {
          namespace writercache {
            static PyObject *t_LruTaxonomyWriterCache$LRUType_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_LruTaxonomyWriterCache$LRUType_instance_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_LruTaxonomyWriterCache$LRUType_of_(t_LruTaxonomyWriterCache$LRUType *self, PyObject *args);
            static PyObject *t_LruTaxonomyWriterCache$LRUType_valueOf(PyTypeObject *type, PyObject *args);
            static PyObject *t_LruTaxonomyWriterCache$LRUType_values(PyTypeObject *type);
            static PyObject *t_LruTaxonomyWriterCache$LRUType_get__parameters_(t_LruTaxonomyWriterCache$LRUType *self, void *data);
            static PyGetSetDef t_LruTaxonomyWriterCache$LRUType__fields_[] = {
              DECLARE_GET_FIELD(t_LruTaxonomyWriterCache$LRUType, parameters_),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_LruTaxonomyWriterCache$LRUType__methods_[] = {
              DECLARE_METHOD(t_LruTaxonomyWriterCache$LRUType, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_LruTaxonomyWriterCache$LRUType, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_LruTaxonomyWriterCache$LRUType, of_, METH_VARARGS),
              DECLARE_METHOD(t_LruTaxonomyWriterCache$LRUType, valueOf, METH_VARARGS | METH_CLASS),
              DECLARE_METHOD(t_LruTaxonomyWriterCache$LRUType, values, METH_NOARGS | METH_CLASS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(LruTaxonomyWriterCache$LRUType, t_LruTaxonomyWriterCache$LRUType, ::java::lang::Enum, LruTaxonomyWriterCache$LRUType, abstract_init, 0, 0, t_LruTaxonomyWriterCache$LRUType__fields_, 0, 0);
            PyObject *t_LruTaxonomyWriterCache$LRUType::wrap_Object(const LruTaxonomyWriterCache$LRUType& object, PyTypeObject *p0)
            {
              PyObject *obj = t_LruTaxonomyWriterCache$LRUType::wrap_Object(object);
              if (obj != NULL && obj != Py_None)
              {
                t_LruTaxonomyWriterCache$LRUType *self = (t_LruTaxonomyWriterCache$LRUType *) obj;
                self->parameters[0] = p0;
              }
              return obj;
            }

            PyObject *t_LruTaxonomyWriterCache$LRUType::wrap_jobject(const jobject& object, PyTypeObject *p0)
            {
              PyObject *obj = t_LruTaxonomyWriterCache$LRUType::wrap_jobject(object);
              if (obj != NULL && obj != Py_None)
              {
                t_LruTaxonomyWriterCache$LRUType *self = (t_LruTaxonomyWriterCache$LRUType *) obj;
                self->parameters[0] = p0;
              }
              return obj;
            }

            void t_LruTaxonomyWriterCache$LRUType::install(PyObject *module)
            {
              installType(&PY_TYPE(LruTaxonomyWriterCache$LRUType), module, "LruTaxonomyWriterCache$LRUType", 0);
            }

            void t_LruTaxonomyWriterCache$LRUType::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(LruTaxonomyWriterCache$LRUType).tp_dict, "class_", make_descriptor(LruTaxonomyWriterCache$LRUType::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(LruTaxonomyWriterCache$LRUType).tp_dict, "wrapfn_", make_descriptor(t_LruTaxonomyWriterCache$LRUType::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(LruTaxonomyWriterCache$LRUType).tp_dict, "boxfn_", make_descriptor(boxObject));
              env->getClass(LruTaxonomyWriterCache$LRUType::initializeClass);
              PyDict_SetItemString(PY_TYPE(LruTaxonomyWriterCache$LRUType).tp_dict, "LRU_HASHED", make_descriptor(t_LruTaxonomyWriterCache$LRUType::wrap_Object(*LruTaxonomyWriterCache$LRUType::LRU_HASHED)));
              PyDict_SetItemString(PY_TYPE(LruTaxonomyWriterCache$LRUType).tp_dict, "LRU_STRING", make_descriptor(t_LruTaxonomyWriterCache$LRUType::wrap_Object(*LruTaxonomyWriterCache$LRUType::LRU_STRING)));
            }

            static PyObject *t_LruTaxonomyWriterCache$LRUType_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, LruTaxonomyWriterCache$LRUType::initializeClass, 1)))
                return NULL;
              return t_LruTaxonomyWriterCache$LRUType::wrap_Object(LruTaxonomyWriterCache$LRUType(((t_LruTaxonomyWriterCache$LRUType *) arg)->object.this$));
            }
            static PyObject *t_LruTaxonomyWriterCache$LRUType_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, LruTaxonomyWriterCache$LRUType::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static PyObject *t_LruTaxonomyWriterCache$LRUType_of_(t_LruTaxonomyWriterCache$LRUType *self, PyObject *args)
            {
              if (!parseArg(args, "T", 1, &(self->parameters)))
                Py_RETURN_SELF;
              return PyErr_SetArgsError((PyObject *) self, "of_", args);
            }

            static PyObject *t_LruTaxonomyWriterCache$LRUType_valueOf(PyTypeObject *type, PyObject *args)
            {
              ::java::lang::String a0((jobject) NULL);
              LruTaxonomyWriterCache$LRUType result((jobject) NULL);

              if (!parseArgs(args, "s", &a0))
              {
                OBJ_CALL(result = ::org::apache::lucene::facet::taxonomy::writercache::LruTaxonomyWriterCache$LRUType::valueOf(a0));
                return t_LruTaxonomyWriterCache$LRUType::wrap_Object(result);
              }

              return callSuper(type, "valueOf", args, 2);
            }

            static PyObject *t_LruTaxonomyWriterCache$LRUType_values(PyTypeObject *type)
            {
              JArray< LruTaxonomyWriterCache$LRUType > result((jobject) NULL);
              OBJ_CALL(result = ::org::apache::lucene::facet::taxonomy::writercache::LruTaxonomyWriterCache$LRUType::values());
              return JArray<jobject>(result.this$).wrap(t_LruTaxonomyWriterCache$LRUType::wrap_jobject);
            }
            static PyObject *t_LruTaxonomyWriterCache$LRUType_get__parameters_(t_LruTaxonomyWriterCache$LRUType *self, void *data)
            {
              return typeParameters(self->parameters, sizeof(self->parameters));
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/spans/SpanNearQuery.h"
#include "org/apache/lucene/util/Bits.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/index/TermContext.h"
#include "java/lang/Object.h"
#include "java/io/IOException.h"
#include "java/util/Map.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "java/lang/String.h"
#include "java/util/Set.h"
#include "org/apache/lucene/search/spans/Spans.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "org/apache/lucene/index/Term.h"
#include "org/apache/lucene/search/Query.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace spans {

          ::java::lang::Class *SpanNearQuery::class$ = NULL;
          jmethodID *SpanNearQuery::mids$ = NULL;
          bool SpanNearQuery::live$ = false;

          jclass SpanNearQuery::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/spans/SpanNearQuery");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4e7e9f44] = env->getMethodID(cls, "<init>", "([Lorg/apache/lucene/search/spans/SpanQuery;IZ)V");
              mids$[mid_init$_ff909895] = env->getMethodID(cls, "<init>", "([Lorg/apache/lucene/search/spans/SpanQuery;IZZ)V");
              mids$[mid_clone_7013cfcc] = env->getMethodID(cls, "clone", "()Lorg/apache/lucene/search/spans/SpanNearQuery;");
              mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
              mids$[mid_extractTerms_fb4f2b26] = env->getMethodID(cls, "extractTerms", "(Ljava/util/Set;)V");
              mids$[mid_getClauses_19569402] = env->getMethodID(cls, "getClauses", "()[Lorg/apache/lucene/search/spans/SpanQuery;");
              mids$[mid_getField_14c7b5c5] = env->getMethodID(cls, "getField", "()Ljava/lang/String;");
              mids$[mid_getSlop_54c6a179] = env->getMethodID(cls, "getSlop", "()I");
              mids$[mid_getSpans_f003cb44] = env->getMethodID(cls, "getSpans", "(Lorg/apache/lucene/index/AtomicReaderContext;Lorg/apache/lucene/util/Bits;Ljava/util/Map;)Lorg/apache/lucene/search/spans/Spans;");
              mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
              mids$[mid_isInOrder_54c6a16a] = env->getMethodID(cls, "isInOrder", "()Z");
              mids$[mid_rewrite_7edcaa43] = env->getMethodID(cls, "rewrite", "(Lorg/apache/lucene/index/IndexReader;)Lorg/apache/lucene/search/Query;");
              mids$[mid_toString_97a5258f] = env->getMethodID(cls, "toString", "(Ljava/lang/String;)Ljava/lang/String;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          SpanNearQuery::SpanNearQuery(const JArray< ::org::apache::lucene::search::spans::SpanQuery > & a0, jint a1, jboolean a2) : ::org::apache::lucene::search::spans::SpanQuery(env->newObject(initializeClass, &mids$, mid_init$_4e7e9f44, a0.this$, a1, a2)) {}

          SpanNearQuery::SpanNearQuery(const JArray< ::org::apache::lucene::search::spans::SpanQuery > & a0, jint a1, jboolean a2, jboolean a3) : ::org::apache::lucene::search::spans::SpanQuery(env->newObject(initializeClass, &mids$, mid_init$_ff909895, a0.this$, a1, a2, a3)) {}

          SpanNearQuery SpanNearQuery::clone() const
          {
            return SpanNearQuery(env->callObjectMethod(this$, mids$[mid_clone_7013cfcc]));
          }

          jboolean SpanNearQuery::equals(const ::java::lang::Object & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
          }

          void SpanNearQuery::extractTerms(const ::java::util::Set & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_extractTerms_fb4f2b26], a0.this$);
          }

          JArray< ::org::apache::lucene::search::spans::SpanQuery > SpanNearQuery::getClauses() const
          {
            return JArray< ::org::apache::lucene::search::spans::SpanQuery >(env->callObjectMethod(this$, mids$[mid_getClauses_19569402]));
          }

          ::java::lang::String SpanNearQuery::getField() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getField_14c7b5c5]));
          }

          jint SpanNearQuery::getSlop() const
          {
            return env->callIntMethod(this$, mids$[mid_getSlop_54c6a179]);
          }

          ::org::apache::lucene::search::spans::Spans SpanNearQuery::getSpans(const ::org::apache::lucene::index::AtomicReaderContext & a0, const ::org::apache::lucene::util::Bits & a1, const ::java::util::Map & a2) const
          {
            return ::org::apache::lucene::search::spans::Spans(env->callObjectMethod(this$, mids$[mid_getSpans_f003cb44], a0.this$, a1.this$, a2.this$));
          }

          jint SpanNearQuery::hashCode() const
          {
            return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
          }

          jboolean SpanNearQuery::isInOrder() const
          {
            return env->callBooleanMethod(this$, mids$[mid_isInOrder_54c6a16a]);
          }

          ::org::apache::lucene::search::Query SpanNearQuery::rewrite(const ::org::apache::lucene::index::IndexReader & a0) const
          {
            return ::org::apache::lucene::search::Query(env->callObjectMethod(this$, mids$[mid_rewrite_7edcaa43], a0.this$));
          }

          ::java::lang::String SpanNearQuery::toString(const ::java::lang::String & a0) const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_97a5258f], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace spans {
          static PyObject *t_SpanNearQuery_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SpanNearQuery_instance_(PyTypeObject *type, PyObject *arg);
          static int t_SpanNearQuery_init_(t_SpanNearQuery *self, PyObject *args, PyObject *kwds);
          static PyObject *t_SpanNearQuery_clone(t_SpanNearQuery *self, PyObject *args);
          static PyObject *t_SpanNearQuery_equals(t_SpanNearQuery *self, PyObject *args);
          static PyObject *t_SpanNearQuery_extractTerms(t_SpanNearQuery *self, PyObject *args);
          static PyObject *t_SpanNearQuery_getClauses(t_SpanNearQuery *self);
          static PyObject *t_SpanNearQuery_getField(t_SpanNearQuery *self, PyObject *args);
          static PyObject *t_SpanNearQuery_getSlop(t_SpanNearQuery *self);
          static PyObject *t_SpanNearQuery_getSpans(t_SpanNearQuery *self, PyObject *args);
          static PyObject *t_SpanNearQuery_hashCode(t_SpanNearQuery *self, PyObject *args);
          static PyObject *t_SpanNearQuery_isInOrder(t_SpanNearQuery *self);
          static PyObject *t_SpanNearQuery_rewrite(t_SpanNearQuery *self, PyObject *args);
          static PyObject *t_SpanNearQuery_toString(t_SpanNearQuery *self, PyObject *args);
          static PyObject *t_SpanNearQuery_get__clauses(t_SpanNearQuery *self, void *data);
          static PyObject *t_SpanNearQuery_get__field(t_SpanNearQuery *self, void *data);
          static PyObject *t_SpanNearQuery_get__inOrder(t_SpanNearQuery *self, void *data);
          static PyObject *t_SpanNearQuery_get__slop(t_SpanNearQuery *self, void *data);
          static PyGetSetDef t_SpanNearQuery__fields_[] = {
            DECLARE_GET_FIELD(t_SpanNearQuery, clauses),
            DECLARE_GET_FIELD(t_SpanNearQuery, field),
            DECLARE_GET_FIELD(t_SpanNearQuery, inOrder),
            DECLARE_GET_FIELD(t_SpanNearQuery, slop),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_SpanNearQuery__methods_[] = {
            DECLARE_METHOD(t_SpanNearQuery, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SpanNearQuery, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SpanNearQuery, clone, METH_VARARGS),
            DECLARE_METHOD(t_SpanNearQuery, equals, METH_VARARGS),
            DECLARE_METHOD(t_SpanNearQuery, extractTerms, METH_VARARGS),
            DECLARE_METHOD(t_SpanNearQuery, getClauses, METH_NOARGS),
            DECLARE_METHOD(t_SpanNearQuery, getField, METH_VARARGS),
            DECLARE_METHOD(t_SpanNearQuery, getSlop, METH_NOARGS),
            DECLARE_METHOD(t_SpanNearQuery, getSpans, METH_VARARGS),
            DECLARE_METHOD(t_SpanNearQuery, hashCode, METH_VARARGS),
            DECLARE_METHOD(t_SpanNearQuery, isInOrder, METH_NOARGS),
            DECLARE_METHOD(t_SpanNearQuery, rewrite, METH_VARARGS),
            DECLARE_METHOD(t_SpanNearQuery, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(SpanNearQuery, t_SpanNearQuery, ::org::apache::lucene::search::spans::SpanQuery, SpanNearQuery, t_SpanNearQuery_init_, 0, 0, t_SpanNearQuery__fields_, 0, 0);

          void t_SpanNearQuery::install(PyObject *module)
          {
            installType(&PY_TYPE(SpanNearQuery), module, "SpanNearQuery", 0);
          }

          void t_SpanNearQuery::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(SpanNearQuery).tp_dict, "class_", make_descriptor(SpanNearQuery::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(SpanNearQuery).tp_dict, "wrapfn_", make_descriptor(t_SpanNearQuery::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(SpanNearQuery).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_SpanNearQuery_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, SpanNearQuery::initializeClass, 1)))
              return NULL;
            return t_SpanNearQuery::wrap_Object(SpanNearQuery(((t_SpanNearQuery *) arg)->object.this$));
          }
          static PyObject *t_SpanNearQuery_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, SpanNearQuery::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_SpanNearQuery_init_(t_SpanNearQuery *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 3:
              {
                JArray< ::org::apache::lucene::search::spans::SpanQuery > a0((jobject) NULL);
                jint a1;
                jboolean a2;
                SpanNearQuery object((jobject) NULL);

                if (!parseArgs(args, "[kIZ", ::org::apache::lucene::search::spans::SpanQuery::initializeClass, &a0, &a1, &a2))
                {
                  INT_CALL(object = SpanNearQuery(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 4:
              {
                JArray< ::org::apache::lucene::search::spans::SpanQuery > a0((jobject) NULL);
                jint a1;
                jboolean a2;
                jboolean a3;
                SpanNearQuery object((jobject) NULL);

                if (!parseArgs(args, "[kIZZ", ::org::apache::lucene::search::spans::SpanQuery::initializeClass, &a0, &a1, &a2, &a3))
                {
                  INT_CALL(object = SpanNearQuery(a0, a1, a2, a3));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_SpanNearQuery_clone(t_SpanNearQuery *self, PyObject *args)
          {
            SpanNearQuery result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.clone());
              return t_SpanNearQuery::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(SpanNearQuery), (PyObject *) self, "clone", args, 2);
          }

          static PyObject *t_SpanNearQuery_equals(t_SpanNearQuery *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            jboolean result;

            if (!parseArgs(args, "o", &a0))
            {
              OBJ_CALL(result = self->object.equals(a0));
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(SpanNearQuery), (PyObject *) self, "equals", args, 2);
          }

          static PyObject *t_SpanNearQuery_extractTerms(t_SpanNearQuery *self, PyObject *args)
          {
            ::java::util::Set a0((jobject) NULL);
            PyTypeObject **p0;

            if (!parseArgs(args, "K", ::java::util::Set::initializeClass, &a0, &p0, ::java::util::t_Set::parameters_))
            {
              OBJ_CALL(self->object.extractTerms(a0));
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(SpanNearQuery), (PyObject *) self, "extractTerms", args, 2);
          }

          static PyObject *t_SpanNearQuery_getClauses(t_SpanNearQuery *self)
          {
            JArray< ::org::apache::lucene::search::spans::SpanQuery > result((jobject) NULL);
            OBJ_CALL(result = self->object.getClauses());
            return JArray<jobject>(result.this$).wrap(::org::apache::lucene::search::spans::t_SpanQuery::wrap_jobject);
          }

          static PyObject *t_SpanNearQuery_getField(t_SpanNearQuery *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.getField());
              return j2p(result);
            }

            return callSuper(&PY_TYPE(SpanNearQuery), (PyObject *) self, "getField", args, 2);
          }

          static PyObject *t_SpanNearQuery_getSlop(t_SpanNearQuery *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getSlop());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_SpanNearQuery_getSpans(t_SpanNearQuery *self, PyObject *args)
          {
            ::org::apache::lucene::index::AtomicReaderContext a0((jobject) NULL);
            ::org::apache::lucene::util::Bits a1((jobject) NULL);
            ::java::util::Map a2((jobject) NULL);
            PyTypeObject **p2;
            ::org::apache::lucene::search::spans::Spans result((jobject) NULL);

            if (!parseArgs(args, "kkK", ::org::apache::lucene::index::AtomicReaderContext::initializeClass, ::org::apache::lucene::util::Bits::initializeClass, ::java::util::Map::initializeClass, &a0, &a1, &a2, &p2, ::java::util::t_Map::parameters_))
            {
              OBJ_CALL(result = self->object.getSpans(a0, a1, a2));
              return ::org::apache::lucene::search::spans::t_Spans::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(SpanNearQuery), (PyObject *) self, "getSpans", args, 2);
          }

          static PyObject *t_SpanNearQuery_hashCode(t_SpanNearQuery *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.hashCode());
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(SpanNearQuery), (PyObject *) self, "hashCode", args, 2);
          }

          static PyObject *t_SpanNearQuery_isInOrder(t_SpanNearQuery *self)
          {
            jboolean result;
            OBJ_CALL(result = self->object.isInOrder());
            Py_RETURN_BOOL(result);
          }

          static PyObject *t_SpanNearQuery_rewrite(t_SpanNearQuery *self, PyObject *args)
          {
            ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
            ::org::apache::lucene::search::Query result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::index::IndexReader::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.rewrite(a0));
              return ::org::apache::lucene::search::t_Query::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(SpanNearQuery), (PyObject *) self, "rewrite", args, 2);
          }

          static PyObject *t_SpanNearQuery_toString(t_SpanNearQuery *self, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, "s", &a0))
            {
              OBJ_CALL(result = self->object.toString(a0));
              return j2p(result);
            }

            return callSuper(&PY_TYPE(SpanNearQuery), (PyObject *) self, "toString", args, 2);
          }

          static PyObject *t_SpanNearQuery_get__clauses(t_SpanNearQuery *self, void *data)
          {
            JArray< ::org::apache::lucene::search::spans::SpanQuery > value((jobject) NULL);
            OBJ_CALL(value = self->object.getClauses());
            return JArray<jobject>(value.this$).wrap(::org::apache::lucene::search::spans::t_SpanQuery::wrap_jobject);
          }

          static PyObject *t_SpanNearQuery_get__field(t_SpanNearQuery *self, void *data)
          {
            ::java::lang::String value((jobject) NULL);
            OBJ_CALL(value = self->object.getField());
            return j2p(value);
          }

          static PyObject *t_SpanNearQuery_get__inOrder(t_SpanNearQuery *self, void *data)
          {
            jboolean value;
            OBJ_CALL(value = self->object.isInOrder());
            Py_RETURN_BOOL(value);
          }

          static PyObject *t_SpanNearQuery_get__slop(t_SpanNearQuery *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getSlop());
            return PyInt_FromLong((long) value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/el/GreekLowerCaseFilterFactory.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "org/apache/lucene/analysis/util/MultiTermAwareComponent.h"
#include "java/lang/Class.h"
#include "java/util/Map.h"
#include "org/apache/lucene/analysis/el/GreekLowerCaseFilter.h"
#include "java/lang/String.h"
#include "org/apache/lucene/analysis/util/AbstractAnalysisFactory.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace el {

          ::java::lang::Class *GreekLowerCaseFilterFactory::class$ = NULL;
          jmethodID *GreekLowerCaseFilterFactory::mids$ = NULL;
          bool GreekLowerCaseFilterFactory::live$ = false;

          jclass GreekLowerCaseFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/el/GreekLowerCaseFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4c9e2b1c] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_ce990bd7] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/el/GreekLowerCaseFilter;");
              mids$[mid_getMultiTermComponent_0a3f1d72] = env->getMethodID(cls, "getMultiTermComponent", "()Lorg/apache/lucene/analysis/util/AbstractAnalysisFactory;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          GreekLowerCaseFilterFactory::GreekLowerCaseFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_4c9e2b1c, a0.this$)) {}

          ::org::apache::lucene::analysis::el::GreekLowerCaseFilter GreekLowerCaseFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::el::GreekLowerCaseFilter(env->callObjectMethod(this$, mids$[mid_create_ce990bd7], a0.this$));
          }

          ::org::apache::lucene::analysis::util::AbstractAnalysisFactory GreekLowerCaseFilterFactory::getMultiTermComponent() const
          {
            return ::org::apache::lucene::analysis::util::AbstractAnalysisFactory(env->callObjectMethod(this$, mids$[mid_getMultiTermComponent_0a3f1d72]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace el {
          static PyObject *t_GreekLowerCaseFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_GreekLowerCaseFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_GreekLowerCaseFilterFactory_init_(t_GreekLowerCaseFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_GreekLowerCaseFilterFactory_create(t_GreekLowerCaseFilterFactory *self, PyObject *args);
          static PyObject *t_GreekLowerCaseFilterFactory_getMultiTermComponent(t_GreekLowerCaseFilterFactory *self);
          static PyObject *t_GreekLowerCaseFilterFactory_get__multiTermComponent(t_GreekLowerCaseFilterFactory *self, void *data);
          static PyGetSetDef t_GreekLowerCaseFilterFactory__fields_[] = {
            DECLARE_GET_FIELD(t_GreekLowerCaseFilterFactory, multiTermComponent),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_GreekLowerCaseFilterFactory__methods_[] = {
            DECLARE_METHOD(t_GreekLowerCaseFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_GreekLowerCaseFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_GreekLowerCaseFilterFactory, create, METH_VARARGS),
            DECLARE_METHOD(t_GreekLowerCaseFilterFactory, getMultiTermComponent, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(GreekLowerCaseFilterFactory, t_GreekLowerCaseFilterFactory, ::org::apache::lucene::analysis::util::TokenFilterFactory, GreekLowerCaseFilterFactory, t_GreekLowerCaseFilterFactory_init_, 0, 0, t_GreekLowerCaseFilterFactory__fields_, 0, 0);

          void t_GreekLowerCaseFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(GreekLowerCaseFilterFactory), module, "GreekLowerCaseFilterFactory", 0);
          }

          void t_GreekLowerCaseFilterFactory::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(GreekLowerCaseFilterFactory).tp_dict, "class_", make_descriptor(GreekLowerCaseFilterFactory::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(GreekLowerCaseFilterFactory).tp_dict, "wrapfn_", make_descriptor(t_GreekLowerCaseFilterFactory::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(GreekLowerCaseFilterFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_GreekLowerCaseFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, GreekLowerCaseFilterFactory::initializeClass, 1)))
              return NULL;
            return t_GreekLowerCaseFilterFactory::wrap_Object(GreekLowerCaseFilterFactory(((t_GreekLowerCaseFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_GreekLowerCaseFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, GreekLowerCaseFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_GreekLowerCaseFilterFactory_init_(t_GreekLowerCaseFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            GreekLowerCaseFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = GreekLowerCaseFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_GreekLowerCaseFilterFactory_create(t_GreekLowerCaseFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::el::GreekLowerCaseFilter result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::el::t_GreekLowerCaseFilter::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(GreekLowerCaseFilterFactory), (PyObject *) self, "create", args, 2);
          }

          static PyObject *t_GreekLowerCaseFilterFactory_getMultiTermComponent(t_GreekLowerCaseFilterFactory *self)
          {
            ::org::apache::lucene::analysis::util::AbstractAnalysisFactory result((jobject) NULL);
            OBJ_CALL(result = self->object.getMultiTermComponent());
            return ::org::apache::lucene::analysis::util::t_AbstractAnalysisFactory::wrap_Object(result);
          }

          static PyObject *t_GreekLowerCaseFilterFactory_get__multiTermComponent(t_GreekLowerCaseFilterFactory *self, void *data)
          {
            ::org::apache::lucene::analysis::util::AbstractAnalysisFactory value((jobject) NULL);
            OBJ_CALL(value = self->object.getMultiTermComponent());
            return ::org::apache::lucene::analysis::util::t_AbstractAnalysisFactory::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/sinks/TeeSinkTokenFilter$SinkFilter.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/util/AttributeSource.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace sinks {

          ::java::lang::Class *TeeSinkTokenFilter$SinkFilter::class$ = NULL;
          jmethodID *TeeSinkTokenFilter$SinkFilter::mids$ = NULL;
          bool TeeSinkTokenFilter$SinkFilter::live$ = false;

          jclass TeeSinkTokenFilter$SinkFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/sinks/TeeSinkTokenFilter$SinkFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_accept_aea2d6e6] = env->getMethodID(cls, "accept", "(Lorg/apache/lucene/util/AttributeSource;)Z");
              mids$[mid_reset_54c6a166] = env->getMethodID(cls, "reset", "()V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          TeeSinkTokenFilter$SinkFilter::TeeSinkTokenFilter$SinkFilter() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          jboolean TeeSinkTokenFilter$SinkFilter::accept(const ::org::apache::lucene::util::AttributeSource & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_accept_aea2d6e6], a0.this$);
          }

          void TeeSinkTokenFilter$SinkFilter::reset() const
          {
            env->callVoidMethod(this$, mids$[mid_reset_54c6a166]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace sinks {
          static PyObject *t_TeeSinkTokenFilter$SinkFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_TeeSinkTokenFilter$SinkFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_TeeSinkTokenFilter$SinkFilter_init_(t_TeeSinkTokenFilter$SinkFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_TeeSinkTokenFilter$SinkFilter_accept(t_TeeSinkTokenFilter$SinkFilter *self, PyObject *arg);
          static PyObject *t_TeeSinkTokenFilter$SinkFilter_reset(t_TeeSinkTokenFilter$SinkFilter *self);

          static PyMethodDef t_TeeSinkTokenFilter$SinkFilter__methods_[] = {
            DECLARE_METHOD(t_TeeSinkTokenFilter$SinkFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_TeeSinkTokenFilter$SinkFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_TeeSinkTokenFilter$SinkFilter, accept, METH_O),
            DECLARE_METHOD(t_TeeSinkTokenFilter$SinkFilter, reset, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(TeeSinkTokenFilter$SinkFilter, t_TeeSinkTokenFilter$SinkFilter, ::java::lang::Object, TeeSinkTokenFilter$SinkFilter, t_TeeSinkTokenFilter$SinkFilter_init_, 0, 0, 0, 0, 0);

          void t_TeeSinkTokenFilter$SinkFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(TeeSinkTokenFilter$SinkFilter), module, "TeeSinkTokenFilter$SinkFilter", 0);
          }

          void t_TeeSinkTokenFilter$SinkFilter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(TeeSinkTokenFilter$SinkFilter).tp_dict, "class_", make_descriptor(TeeSinkTokenFilter$SinkFilter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(TeeSinkTokenFilter$SinkFilter).tp_dict, "wrapfn_", make_descriptor(t_TeeSinkTokenFilter$SinkFilter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(TeeSinkTokenFilter$SinkFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_TeeSinkTokenFilter$SinkFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, TeeSinkTokenFilter$SinkFilter::initializeClass, 1)))
              return NULL;
            return t_TeeSinkTokenFilter$SinkFilter::wrap_Object(TeeSinkTokenFilter$SinkFilter(((t_TeeSinkTokenFilter$SinkFilter *) arg)->object.this$));
          }
          static PyObject *t_TeeSinkTokenFilter$SinkFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, TeeSinkTokenFilter$SinkFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_TeeSinkTokenFilter$SinkFilter_init_(t_TeeSinkTokenFilter$SinkFilter *self, PyObject *args, PyObject *kwds)
          {
            TeeSinkTokenFilter$SinkFilter object((jobject) NULL);

            INT_CALL(object = TeeSinkTokenFilter$SinkFilter());
            self->object = object;

            return 0;
          }

          static PyObject *t_TeeSinkTokenFilter$SinkFilter_accept(t_TeeSinkTokenFilter$SinkFilter *self, PyObject *arg)
          {
            ::org::apache::lucene::util::AttributeSource a0((jobject) NULL);
            jboolean result;

            if (!parseArg(arg, "k", ::org::apache::lucene::util::AttributeSource::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.accept(a0));
              Py_RETURN_BOOL(result);
            }

            PyErr_SetArgsError((PyObject *) self, "accept", arg);
            return NULL;
          }

          static PyObject *t_TeeSinkTokenFilter$SinkFilter_reset(t_TeeSinkTokenFilter$SinkFilter *self)
          {
            OBJ_CALL(self->object.reset());
            Py_RETURN_NONE;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/MultiLevelSkipListWriter.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/store/IndexOutput.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {

        ::java::lang::Class *MultiLevelSkipListWriter::class$ = NULL;
        jmethodID *MultiLevelSkipListWriter::mids$ = NULL;
        bool MultiLevelSkipListWriter::live$ = false;

        jclass MultiLevelSkipListWriter::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/MultiLevelSkipListWriter");

            mids$ = new jmethodID[max_mid];
            mids$[mid_bufferSkip_39c7bd3c] = env->getMethodID(cls, "bufferSkip", "(I)V");
            mids$[mid_writeSkip_faad6216] = env->getMethodID(cls, "writeSkip", "(Lorg/apache/lucene/store/IndexOutput;)J");
            mids$[mid_init_54c6a166] = env->getMethodID(cls, "init", "()V");
            mids$[mid_resetSkip_54c6a166] = env->getMethodID(cls, "resetSkip", "()V");
            mids$[mid_writeSkipData_a31eeaec] = env->getMethodID(cls, "writeSkipData", "(ILorg/apache/lucene/store/IndexOutput;)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        void MultiLevelSkipListWriter::bufferSkip(jint a0) const
        {
          env->callVoidMethod(this$, mids$[mid_bufferSkip_39c7bd3c], a0);
        }

        jlong MultiLevelSkipListWriter::writeSkip(const ::org::apache::lucene::store::IndexOutput & a0) const
        {
          return env->callLongMethod(this$, mids$[mid_writeSkip_faad6216], a0.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        static PyObject *t_MultiLevelSkipListWriter_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_MultiLevelSkipListWriter_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_MultiLevelSkipListWriter_bufferSkip(t_MultiLevelSkipListWriter *self, PyObject *arg);
        static PyObject *t_MultiLevelSkipListWriter_writeSkip(t_MultiLevelSkipListWriter *self, PyObject *arg);

        static PyMethodDef t_MultiLevelSkipListWriter__methods_[] = {
          DECLARE_METHOD(t_MultiLevelSkipListWriter, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MultiLevelSkipListWriter, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MultiLevelSkipListWriter, bufferSkip, METH_O),
          DECLARE_METHOD(t_MultiLevelSkipListWriter, writeSkip, METH_O),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(MultiLevelSkipListWriter, t_MultiLevelSkipListWriter, ::java::lang::Object, MultiLevelSkipListWriter, abstract_init, 0, 0, 0, 0, 0);

        void t_MultiLevelSkipListWriter::install(PyObject *module)
        {
          installType(&PY_TYPE(MultiLevelSkipListWriter), module, "MultiLevelSkipListWriter", 0);
        }

        void t_MultiLevelSkipListWriter::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(MultiLevelSkipListWriter).tp_dict, "class_", make_descriptor(MultiLevelSkipListWriter::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(MultiLevelSkipListWriter).tp_dict, "wrapfn_", make_descriptor(t_MultiLevelSkipListWriter::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(MultiLevelSkipListWriter).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_MultiLevelSkipListWriter_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, MultiLevelSkipListWriter::initializeClass, 1)))
            return NULL;
          return t_MultiLevelSkipListWriter::wrap_Object(MultiLevelSkipListWriter(((t_MultiLevelSkipListWriter *) arg)->object.this$));
        }
        static PyObject *t_MultiLevelSkipListWriter_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, MultiLevelSkipListWriter::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_MultiLevelSkipListWriter_bufferSkip(t_MultiLevelSkipListWriter *self, PyObject *arg)
        {
          jint a0;

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(self->object.bufferSkip(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "bufferSkip", arg);
          return NULL;
        }

        static PyObject *t_MultiLevelSkipListWriter_writeSkip(t_MultiLevelSkipListWriter *self, PyObject *arg)
        {
          ::org::apache::lucene::store::IndexOutput a0((jobject) NULL);
          jlong result;

          if (!parseArg(arg, "k", ::org::apache::lucene::store::IndexOutput::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.writeSkip(a0));
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          PyErr_SetArgsError((PyObject *) self, "writeSkip", arg);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/standard/parser/Token.h"
#include "java/io/Serializable.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace parser {

              ::java::lang::Class *Token::class$ = NULL;
              jmethodID *Token::mids$ = NULL;
              jfieldID *Token::fids$ = NULL;
              bool Token::live$ = false;

              jclass Token::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/standard/parser/Token");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
                  mids$[mid_init$_39c7bd3c] = env->getMethodID(cls, "<init>", "(I)V");
                  mids$[mid_init$_d40a4f2e] = env->getMethodID(cls, "<init>", "(ILjava/lang/String;)V");
                  mids$[mid_getValue_846352c3] = env->getMethodID(cls, "getValue", "()Ljava/lang/Object;");
                  mids$[mid_newToken_24cc8f6e] = env->getStaticMethodID(cls, "newToken", "(I)Lorg/apache/lucene/queryparser/flexible/standard/parser/Token;");
                  mids$[mid_newToken_b48de57c] = env->getStaticMethodID(cls, "newToken", "(ILjava/lang/String;)Lorg/apache/lucene/queryparser/flexible/standard/parser/Token;");
                  mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

                  fids$ = new jfieldID[max_fid];
                  fids$[fid_beginColumn] = env->getFieldID(cls, "beginColumn", "I");
                  fids$[fid_beginLine] = env->getFieldID(cls, "beginLine", "I");
                  fids$[fid_endColumn] = env->getFieldID(cls, "endColumn", "I");
                  fids$[fid_endLine] = env->getFieldID(cls, "endLine", "I");
                  fids$[fid_image] = env->getFieldID(cls, "image", "Ljava/lang/String;");
                  fids$[fid_kind] = env->getFieldID(cls, "kind", "I");
                  fids$[fid_next] = env->getFieldID(cls, "next", "Lorg/apache/lucene/queryparser/flexible/standard/parser/Token;");
                  fids$[fid_specialToken] = env->getFieldID(cls, "specialToken", "Lorg/apache/lucene/queryparser/flexible/standard/parser/Token;");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              Token::Token() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

              Token::Token(jint a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_39c7bd3c, a0)) {}

              Token::Token(jint a0, const ::java::lang::String & a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_d40a4f2e, a0, a1.this$)) {}

              ::java::lang::Object Token::getValue() const
              {
                return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_getValue_846352c3]));
              }

              Token Token::newToken(jint a0)
              {
                jclass cls = env->getClass(initializeClass);
                return Token(env->callStaticObjectMethod(cls, mids$[mid_newToken_24cc8f6e], a0));
              }

              Token Token::newToken(jint a0, const ::java::lang::String & a1)
              {
                jclass cls = env->getClass(initializeClass);
                return Token(env->callStaticObjectMethod(cls, mids$[mid_newToken_b48de57c], a0, a1.this$));
              }

              ::java::lang::String Token::toString() const
              {
                return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
              }

              jint Token::_get_beginColumn() const
              {
                return env->getIntField(this$, fids$[fid_beginColumn]);
              }

              void Token::_set_beginColumn(jint a0) const
              {
                env->setIntField(this$, fids$[fid_beginColumn], a0);
              }

              jint Token::_get_beginLine() const
              {
                return env->getIntField(this$, fids$[fid_beginLine]);
              }

              void Token::_set_beginLine(jint a0) const
              {
                env->setIntField(this$, fids$[fid_beginLine], a0);
              }

              jint Token::_get_endColumn() const
              {
                return env->getIntField(this$, fids$[fid_endColumn]);
              }

              void Token::_set_endColumn(jint a0) const
              {
                env->setIntField(this$, fids$[fid_endColumn], a0);
              }

              jint Token::_get_endLine() const
              {
                return env->getIntField(this$, fids$[fid_endLine]);
              }

              void Token::_set_endLine(jint a0) const
              {
                env->setIntField(this$, fids$[fid_endLine], a0);
              }

              ::java::lang::String Token::_get_image() const
              {
                return ::java::lang::String(env->getObjectField(this$, fids$[fid_image]));
              }

              void Token::_set_image(const ::java::lang::String & a0) const
              {
                env->setObjectField(this$, fids$[fid_image], a0.this$);
              }

              jint Token::_get_kind() const
              {
                return env->getIntField(this$, fids$[fid_kind]);
              }

              void Token::_set_kind(jint a0) const
              {
                env->setIntField(this$, fids$[fid_kind], a0);
              }

              Token Token::_get_next() const
              {
                return Token(env->getObjectField(this$, fids$[fid_next]));
              }

              void Token::_set_next(const Token & a0) const
              {
                env->setObjectField(this$, fids$[fid_next], a0.this$);
              }

              Token Token::_get_specialToken() const
              {
                return Token(env->getObjectField(this$, fids$[fid_specialToken]));
              }

              void Token::_set_specialToken(const Token & a0) const
              {
                env->setObjectField(this$, fids$[fid_specialToken], a0.this$);
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace parser {
              static PyObject *t_Token_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_Token_instance_(PyTypeObject *type, PyObject *arg);
              static int t_Token_init_(t_Token *self, PyObject *args, PyObject *kwds);
              static PyObject *t_Token_getValue(t_Token *self);
              static PyObject *t_Token_newToken(PyTypeObject *type, PyObject *args);
              static PyObject *t_Token_toString(t_Token *self, PyObject *args);
              static PyObject *t_Token_get__beginColumn(t_Token *self, void *data);
              static int t_Token_set__beginColumn(t_Token *self, PyObject *arg, void *data);
              static PyObject *t_Token_get__beginLine(t_Token *self, void *data);
              static int t_Token_set__beginLine(t_Token *self, PyObject *arg, void *data);
              static PyObject *t_Token_get__endColumn(t_Token *self, void *data);
              static int t_Token_set__endColumn(t_Token *self, PyObject *arg, void *data);
              static PyObject *t_Token_get__endLine(t_Token *self, void *data);
              static int t_Token_set__endLine(t_Token *self, PyObject *arg, void *data);
              static PyObject *t_Token_get__image(t_Token *self, void *data);
              static int t_Token_set__image(t_Token *self, PyObject *arg, void *data);
              static PyObject *t_Token_get__kind(t_Token *self, void *data);
              static int t_Token_set__kind(t_Token *self, PyObject *arg, void *data);
              static PyObject *t_Token_get__next(t_Token *self, void *data);
              static int t_Token_set__next(t_Token *self, PyObject *arg, void *data);
              static PyObject *t_Token_get__specialToken(t_Token *self, void *data);
              static int t_Token_set__specialToken(t_Token *self, PyObject *arg, void *data);

              static PyObject *t_Token_get__value(t_Token *self, void *data);
              static PyGetSetDef t_Token__fields_[] = {
                DECLARE_GETSET_FIELD(t_Token, beginColumn),
                DECLARE_GETSET_FIELD(t_Token, beginLine),
                DECLARE_GETSET_FIELD(t_Token, endColumn),
                DECLARE_GETSET_FIELD(t_Token, endLine),
                DECLARE_GETSET_FIELD(t_Token, image),
                DECLARE_GETSET_FIELD(t_Token, kind),
                DECLARE_GETSET_FIELD(t_Token, next),
                DECLARE_GETSET_FIELD(t_Token, specialToken),
                DECLARE_GET_FIELD(t_Token, value),
                { NULL, NULL, NULL, NULL, NULL }
              };

              static PyMethodDef t_Token__methods_[] = {
                DECLARE_METHOD(t_Token, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_Token, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_Token, getValue, METH_NOARGS),
                DECLARE_METHOD(t_Token, newToken, METH_VARARGS | METH_CLASS),
                DECLARE_METHOD(t_Token, toString, METH_VARARGS),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(Token, t_Token, ::java::lang::Object, Token, t_Token_init_, 0, 0, t_Token__fields_, 0, 0);

              void t_Token::install(PyObject *module)
              {
                installType(&PY_TYPE(Token), module, "Token", 0);
              }

              void t_Token::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(Token).tp_dict, "class_", make_descriptor(Token::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(Token).tp_dict, "wrapfn_", make_descriptor(t_Token::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(Token).tp_dict, "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_Token_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, Token::initializeClass, 1)))
                  return NULL;
                return t_Token::wrap_Object(Token(((t_Token *) arg)->object.this$));
              }
              static PyObject *t_Token_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, Token::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_Token_init_(t_Token *self, PyObject *args, PyObject *kwds)
              {
                switch (PyTuple_GET_SIZE(args)) {
                 case 0:
                  {
                    Token object((jobject) NULL);

                    INT_CALL(object = Token());
                    self->object = object;
                    break;
                  }
                  goto err;
                 case 1:
                  {
                    jint a0;
                    Token object((jobject) NULL);

                    if (!parseArgs(args, "I", &a0))
                    {
                      INT_CALL(object = Token(a0));
                      self->object = object;
                      break;
                    }
                  }
                  goto err;
                 case 2:
                  {
                    jint a0;
                    ::java::lang::String a1((jobject) NULL);
                    Token object((jobject) NULL);

                    if (!parseArgs(args, "Is", &a0, &a1))
                    {
                      INT_CALL(object = Token(a0, a1));
                      self->object = object;
                      break;
                    }
                  }
                 default:
                 err:
                  PyErr_SetArgsError((PyObject *) self, "__init__", args);
                  return -1;
                }

                return 0;
              }

              static PyObject *t_Token_getValue(t_Token *self)
              {
                ::java::lang::Object result((jobject) NULL);
                OBJ_CALL(result = self->object.getValue());
                return ::java::lang::t_Object::wrap_Object(result);
              }

              static PyObject *t_Token_newToken(PyTypeObject *type, PyObject *args)
              {
                switch (PyTuple_GET_SIZE(args)) {
                 case 1:
                  {
                    jint a0;
                    Token result((jobject) NULL);

                    if (!parseArgs(args, "I", &a0))
                    {
                      OBJ_CALL(result = ::org::apache::lucene::queryparser::flexible::standard::parser::Token::newToken(a0));
                      return t_Token::wrap_Object(result);
                    }
                  }
                  break;
                 case 2:
                  {
                    jint a0;
                    ::java::lang::String a1((jobject) NULL);
                    Token result((jobject) NULL);

                    if (!parseArgs(args, "Is", &a0, &a1))
                    {
                      OBJ_CALL(result = ::org::apache::lucene::queryparser::flexible::standard::parser::Token::newToken(a0, a1));
                      return t_Token::wrap_Object(result);
                    }
                  }
                }

                PyErr_SetArgsError(type, "newToken", args);
                return NULL;
              }

              static PyObject *t_Token_toString(t_Token *self, PyObject *args)
              {
                ::java::lang::String result((jobject) NULL);

                if (!parseArgs(args, ""))
                {
                  OBJ_CALL(result = self->object.toString());
                  return j2p(result);
                }

                return callSuper(&PY_TYPE(Token), (PyObject *) self, "toString", args, 2);
              }

              static PyObject *t_Token_get__beginColumn(t_Token *self, void *data)
              {
                jint value;
                OBJ_CALL(value = self->object._get_beginColumn());
                return PyInt_FromLong((long) value);
              }
              static int t_Token_set__beginColumn(t_Token *self, PyObject *arg, void *data)
              {
                jint value;
                if (!parseArg(arg, "I", &value))
                {
                  INT_CALL(self->object._set_beginColumn(value));
                  return 0;
                }
                PyErr_SetArgsError((PyObject *) self, "beginColumn", arg);
                return -1;
              }

              static PyObject *t_Token_get__beginLine(t_Token *self, void *data)
              {
                jint value;
                OBJ_CALL(value = self->object._get_beginLine());
                return PyInt_FromLong((long) value);
              }
              static int t_Token_set__beginLine(t_Token *self, PyObject *arg, void *data)
              {
                jint value;
                if (!parseArg(arg, "I", &value))
                {
                  INT_CALL(self->object._set_beginLine(value));
                  return 0;
                }
                PyErr_SetArgsError((PyObject *) self, "beginLine", arg);
                return -1;
              }

              static PyObject *t_Token_get__endColumn(t_Token *self, void *data)
              {
                jint value;
                OBJ_CALL(value = self->object._get_endColumn());
                return PyInt_FromLong((long) value);
              }
              static int t_Token_set__endColumn(t_Token *self, PyObject *arg, void *data)
              {
                jint value;
                if (!parseArg(arg, "I", &value))
                {
                  INT_CALL(self->object._set_endColumn(value));
                  return 0;
                }
                PyErr_SetArgsError((PyObject *) self, "endColumn", arg);
                return -1;
              }

              static PyObject *t_Token_get__endLine(t_Token *self, void *data)
              {
                jint value;
                OBJ_CALL(value = self->object._get_endLine());
                return PyInt_FromLong((long) value);
              }
              static int t_Token_set__endLine(t_Token *self, PyObject *arg, void *data)
              {
                jint value;
                if (!parseArg(arg, "I", &value))
                {
                  INT_CALL(self->object._set_endLine(value));
                  return 0;
                }
                PyErr_SetArgsError((PyObject *) self, "endLine", arg);
                return -1;
              }

              static PyObject *t_Token_get__image(t_Token *self, void *data)
              {
                ::java::lang::String value((jobject) NULL);
                OBJ_CALL(value = self->object._get_image());
                return j2p(value);
              }
              static int t_Token_set__image(t_Token *self, PyObject *arg, void *data)
              {
                ::java::lang::String value((jobject) NULL);
                if (!parseArg(arg, "s", &value))
                {
                  INT_CALL(self->object._set_image(value));
                  return 0;
                }
                PyErr_SetArgsError((PyObject *) self, "image", arg);
                return -1;
              }

              static PyObject *t_Token_get__kind(t_Token *self, void *data)
              {
                jint value;
                OBJ_CALL(value = self->object._get_kind());
                return PyInt_FromLong((long) value);
              }
              static int t_Token_set__kind(t_Token *self, PyObject *arg, void *data)
              {
                jint value;
                if (!parseArg(arg, "I", &value))
                {
                  INT_CALL(self->object._set_kind(value));
                  return 0;
                }
                PyErr_SetArgsError((PyObject *) self, "kind", arg);
                return -1;
              }

              static PyObject *t_Token_get__next(t_Token *self, void *data)
              {
                Token value((jobject) NULL);
                OBJ_CALL(value = self->object._get_next());
                return t_Token::wrap_Object(value);
              }
              static int t_Token_set__next(t_Token *self, PyObject *arg, void *data)
              {
                Token value((jobject) NULL);
                if (!parseArg(arg, "k", Token::initializeClass, &value))
                {
                  INT_CALL(self->object._set_next(value));
                  return 0;
                }
                PyErr_SetArgsError((PyObject *) self, "next", arg);
                return -1;
              }

              static PyObject *t_Token_get__specialToken(t_Token *self, void *data)
              {
                Token value((jobject) NULL);
                OBJ_CALL(value = self->object._get_specialToken());
                return t_Token::wrap_Object(value);
              }
              static int t_Token_set__specialToken(t_Token *self, PyObject *arg, void *data)
              {
                Token value((jobject) NULL);
                if (!parseArg(arg, "k", Token::initializeClass, &value))
                {
                  INT_CALL(self->object._set_specialToken(value));
                  return 0;
                }
                PyErr_SetArgsError((PyObject *) self, "specialToken", arg);
                return -1;
              }

              static PyObject *t_Token_get__value(t_Token *self, void *data)
              {
                ::java::lang::Object value((jobject) NULL);
                OBJ_CALL(value = self->object.getValue());
                return ::java::lang::t_Object::wrap_Object(value);
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/standard/nodes/MultiPhraseQueryNode.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/queryparser/flexible/core/parser/EscapeQuerySyntax.h"
#include "java/lang/CloneNotSupportedException.h"
#include "java/lang/CharSequence.h"
#include "java/lang/String.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/FieldableNode.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/QueryNode.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace nodes {

              ::java::lang::Class *MultiPhraseQueryNode::class$ = NULL;
              jmethodID *MultiPhraseQueryNode::mids$ = NULL;
              bool MultiPhraseQueryNode::live$ = false;

              jclass MultiPhraseQueryNode::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/standard/nodes/MultiPhraseQueryNode");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
                  mids$[mid_cloneTree_b387c5e6] = env->getMethodID(cls, "cloneTree", "()Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;");
                  mids$[mid_getField_e0adba2f] = env->getMethodID(cls, "getField", "()Ljava/lang/CharSequence;");
                  mids$[mid_setField_a8afc64a] = env->getMethodID(cls, "setField", "(Ljava/lang/CharSequence;)V");
                  mids$[mid_toQueryString_99b8dfe1] = env->getMethodID(cls, "toQueryString", "(Lorg/apache/lucene/queryparser/flexible/core/parser/EscapeQuerySyntax;)Ljava/lang/CharSequence;");
                  mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              MultiPhraseQueryNode::MultiPhraseQueryNode() : ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNodeImpl(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

              ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode MultiPhraseQueryNode::cloneTree() const
              {
                return ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode(env->callObjectMethod(this$, mids$[mid_cloneTree_b387c5e6]));
              }

              ::java::lang::CharSequence MultiPhraseQueryNode::getField() const
              {
                return ::java::lang::CharSequence(env->callObjectMethod(this$, mids$[mid_getField_e0adba2f]));
              }

              void MultiPhraseQueryNode::setField(const ::java::lang::CharSequence & a0) const
              {
                env->callVoidMethod(this$, mids$[mid_setField_a8afc64a], a0.this$);
              }

              ::java::lang::CharSequence MultiPhraseQueryNode::toQueryString(const ::org::apache::lucene::queryparser::flexible::core::parser::EscapeQuerySyntax & a0) const
              {
                return ::java::lang::CharSequence(env->callObjectMethod(this$, mids$[mid_toQueryString_99b8dfe1], a0.this$));
              }

              ::java::lang::String MultiPhraseQueryNode::toString() const
              {
                return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace nodes {
              static PyObject *t_MultiPhraseQueryNode_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_MultiPhraseQueryNode_instance_(PyTypeObject *type, PyObject *arg);
              static int t_MultiPhraseQueryNode_init_(t_MultiPhraseQueryNode *self, PyObject *args, PyObject *kwds);
              static PyObject *t_MultiPhraseQueryNode_cloneTree(t_MultiPhraseQueryNode *self, PyObject *args);
              static PyObject *t_MultiPhraseQueryNode_getField(t_MultiPhraseQueryNode *self);
              static PyObject *t_MultiPhraseQueryNode_setField(t_MultiPhraseQueryNode *self, PyObject *arg);
              static PyObject *t_MultiPhraseQueryNode_toQueryString(t_MultiPhraseQueryNode *self, PyObject *args);
              static PyObject *t_MultiPhraseQueryNode_toString(t_MultiPhraseQueryNode *self, PyObject *args);
              static PyObject *t_MultiPhraseQueryNode_get__field(t_MultiPhraseQueryNode *self, void *data);
              static int t_MultiPhraseQueryNode_set__field(t_MultiPhraseQueryNode *self, PyObject *arg, void *data);
              static PyGetSetDef t_MultiPhraseQueryNode__fields_[] = {
                DECLARE_GETSET_FIELD(t_MultiPhraseQueryNode, field),
                { NULL, NULL, NULL, NULL, NULL }
              };

              static PyMethodDef t_MultiPhraseQueryNode__methods_[] = {
                DECLARE_METHOD(t_MultiPhraseQueryNode, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_MultiPhraseQueryNode, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_MultiPhraseQueryNode, cloneTree, METH_VARARGS),
                DECLARE_METHOD(t_MultiPhraseQueryNode, getField, METH_NOARGS),
                DECLARE_METHOD(t_MultiPhraseQueryNode, setField, METH_O),
                DECLARE_METHOD(t_MultiPhraseQueryNode, toQueryString, METH_VARARGS),
                DECLARE_METHOD(t_MultiPhraseQueryNode, toString, METH_VARARGS),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(MultiPhraseQueryNode, t_MultiPhraseQueryNode, ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNodeImpl, MultiPhraseQueryNode, t_MultiPhraseQueryNode_init_, 0, 0, t_MultiPhraseQueryNode__fields_, 0, 0);

              void t_MultiPhraseQueryNode::install(PyObject *module)
              {
                installType(&PY_TYPE(MultiPhraseQueryNode), module, "MultiPhraseQueryNode", 0);
              }

              void t_MultiPhraseQueryNode::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(MultiPhraseQueryNode).tp_dict, "class_", make_descriptor(MultiPhraseQueryNode::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(MultiPhraseQueryNode).tp_dict, "wrapfn_", make_descriptor(t_MultiPhraseQueryNode::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(MultiPhraseQueryNode).tp_dict, "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_MultiPhraseQueryNode_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, MultiPhraseQueryNode::initializeClass, 1)))
                  return NULL;
                return t_MultiPhraseQueryNode::wrap_Object(MultiPhraseQueryNode(((t_MultiPhraseQueryNode *) arg)->object.this$));
              }
              static PyObject *t_MultiPhraseQueryNode_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, MultiPhraseQueryNode::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_MultiPhraseQueryNode_init_(t_MultiPhraseQueryNode *self, PyObject *args, PyObject *kwds)
              {
                MultiPhraseQueryNode object((jobject) NULL);

                INT_CALL(object = MultiPhraseQueryNode());
                self->object = object;

                return 0;
              }

              static PyObject *t_MultiPhraseQueryNode_cloneTree(t_MultiPhraseQueryNode *self, PyObject *args)
              {
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode result((jobject) NULL);

                if (!parseArgs(args, ""))
                {
                  OBJ_CALL(result = self->object.cloneTree());
                  return ::org::apache::lucene::queryparser::flexible::core::nodes::t_QueryNode::wrap_Object(result);
                }

                return callSuper(&PY_TYPE(MultiPhraseQueryNode), (PyObject *) self, "cloneTree", args, 2);
              }

              static PyObject *t_MultiPhraseQueryNode_getField(t_MultiPhraseQueryNode *self)
              {
                ::java::lang::CharSequence result((jobject) NULL);
                OBJ_CALL(result = self->object.getField());
                return ::java::lang::t_CharSequence::wrap_Object(result);
              }

              static PyObject *t_MultiPhraseQueryNode_setField(t_MultiPhraseQueryNode *self, PyObject *arg)
              {
                ::java::lang::CharSequence a0((jobject) NULL);

                if (!parseArg(arg, "O", &::java::lang::PY_TYPE(CharSequence), &a0))
                {
                  OBJ_CALL(self->object.setField(a0));
                  Py_RETURN_NONE;
                }

                PyErr_SetArgsError((PyObject *) self, "setField", arg);
                return NULL;
              }

              static PyObject *t_MultiPhraseQueryNode_toQueryString(t_MultiPhraseQueryNode *self, PyObject *args)
              {
                ::org::apache::lucene::queryparser::flexible::core::parser::EscapeQuerySyntax a0((jobject) NULL);
                ::java::lang::CharSequence result((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::queryparser::flexible::core::parser::EscapeQuerySyntax::initializeClass, &a0))
                {
                  OBJ_CALL(result = self->object.toQueryString(a0));
                  return ::java::lang::t_CharSequence::wrap_Object(result);
                }

                return callSuper(&PY_TYPE(MultiPhraseQueryNode), (PyObject *) self, "toQueryString", args, 2);
              }

              static PyObject *t_MultiPhraseQueryNode_toString(t_MultiPhraseQueryNode *self, PyObject *args)
              {
                ::java::lang::String result((jobject) NULL);

                if (!parseArgs(args, ""))
                {
                  OBJ_CALL(result = self->object.toString());
                  return j2p(result);
                }

                return callSuper(&PY_TYPE(MultiPhraseQueryNode), (PyObject *) self, "toString", args, 2);
              }

              static PyObject *t_MultiPhraseQueryNode_get__field(t_MultiPhraseQueryNode *self, void *data)
              {
                ::java::lang::CharSequence value((jobject) NULL);
                OBJ_CALL(value = self->object.getField());
                return ::java::lang::t_CharSequence::wrap_Object(value);
              }
              static int t_MultiPhraseQueryNode_set__field(t_MultiPhraseQueryNode *self, PyObject *arg, void *data)
              {
                {
                  ::java::lang::CharSequence value((jobject) NULL);
                  if (!parseArg(arg, "O", &::java::lang::PY_TYPE(CharSequence), &value))
                  {
                    INT_CALL(self->object.setField(value));
                    return 0;
                  }
                }
                PyErr_SetArgsError((PyObject *) self, "field", arg);
                return -1;
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/compressing/CompressingStoredFieldsIndexReader.h"
#include "org/apache/lucene/util/Accountable.h"
#include "java/lang/Cloneable.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace compressing {

          ::java::lang::Class *CompressingStoredFieldsIndexReader::class$ = NULL;
          jmethodID *CompressingStoredFieldsIndexReader::mids$ = NULL;
          bool CompressingStoredFieldsIndexReader::live$ = false;

          jclass CompressingStoredFieldsIndexReader::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/compressing/CompressingStoredFieldsIndexReader");

              mids$ = new jmethodID[max_mid];
              mids$[mid_clone_b704ed60] = env->getMethodID(cls, "clone", "()Lorg/apache/lucene/codecs/compressing/CompressingStoredFieldsIndexReader;");
              mids$[mid_ramBytesUsed_54c6a17a] = env->getMethodID(cls, "ramBytesUsed", "()J");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          CompressingStoredFieldsIndexReader CompressingStoredFieldsIndexReader::clone() const
          {
            return CompressingStoredFieldsIndexReader(env->callObjectMethod(this$, mids$[mid_clone_b704ed60]));
          }

          jlong CompressingStoredFieldsIndexReader::ramBytesUsed() const
          {
            return env->callLongMethod(this$, mids$[mid_ramBytesUsed_54c6a17a]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace compressing {
          static PyObject *t_CompressingStoredFieldsIndexReader_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_CompressingStoredFieldsIndexReader_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_CompressingStoredFieldsIndexReader_clone(t_CompressingStoredFieldsIndexReader *self);
          static PyObject *t_CompressingStoredFieldsIndexReader_ramBytesUsed(t_CompressingStoredFieldsIndexReader *self);

          static PyMethodDef t_CompressingStoredFieldsIndexReader__methods_[] = {
            DECLARE_METHOD(t_CompressingStoredFieldsIndexReader, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CompressingStoredFieldsIndexReader, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CompressingStoredFieldsIndexReader, clone, METH_NOARGS),
            DECLARE_METHOD(t_CompressingStoredFieldsIndexReader, ramBytesUsed, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(CompressingStoredFieldsIndexReader, t_CompressingStoredFieldsIndexReader, ::java::lang::Object, CompressingStoredFieldsIndexReader, abstract_init, 0, 0, 0, 0, 0);

          void t_CompressingStoredFieldsIndexReader::install(PyObject *module)
          {
            installType(&PY_TYPE(CompressingStoredFieldsIndexReader), module, "CompressingStoredFieldsIndexReader", 0);
          }

          void t_CompressingStoredFieldsIndexReader::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(CompressingStoredFieldsIndexReader).tp_dict, "class_", make_descriptor(CompressingStoredFieldsIndexReader::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(CompressingStoredFieldsIndexReader).tp_dict, "wrapfn_", make_descriptor(t_CompressingStoredFieldsIndexReader::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(CompressingStoredFieldsIndexReader).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_CompressingStoredFieldsIndexReader_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, CompressingStoredFieldsIndexReader::initializeClass, 1)))
              return NULL;
            return t_CompressingStoredFieldsIndexReader::wrap_Object(CompressingStoredFieldsIndexReader(((t_CompressingStoredFieldsIndexReader *) arg)->object.this$));
          }
          static PyObject *t_CompressingStoredFieldsIndexReader_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, CompressingStoredFieldsIndexReader::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_CompressingStoredFieldsIndexReader_clone(t_CompressingStoredFieldsIndexReader *self)
          {
            CompressingStoredFieldsIndexReader result((jobject) NULL);
            OBJ_CALL(result = self->object.clone());
            return t_CompressingStoredFieldsIndexReader::wrap_Object(result);
          }

          static PyObject *t_CompressingStoredFieldsIndexReader_ramBytesUsed(t_CompressingStoredFieldsIndexReader *self)
          {
            jlong result;
            OBJ_CALL(result = self->object.ramBytesUsed());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/core/parser/EscapeQuerySyntax$Type.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace parser {

              ::java::lang::Class *EscapeQuerySyntax$Type::class$ = NULL;
              jmethodID *EscapeQuerySyntax$Type::mids$ = NULL;
              bool EscapeQuerySyntax$Type::live$ = false;
              EscapeQuerySyntax$Type *EscapeQuerySyntax$Type::NORMAL = NULL;
              EscapeQuerySyntax$Type *EscapeQuerySyntax$Type::STRING = NULL;

              jclass EscapeQuerySyntax$Type::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/core/parser/EscapeQuerySyntax$Type");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_valueOf_870295fe] = env->getStaticMethodID(cls, "valueOf", "(Ljava/lang/String;)Lorg/apache/lucene/queryparser/flexible/core/parser/EscapeQuerySyntax$Type;");
                  mids$[mid_values_4eb00ec4] = env->getStaticMethodID(cls, "values", "()[Lorg/apache/lucene/queryparser/flexible/core/parser/EscapeQuerySyntax$Type;");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  cls = (jclass) class$->this$;

                  NORMAL = new EscapeQuerySyntax$Type(env->getStaticObjectField(cls, "NORMAL", "Lorg/apache/lucene/queryparser/flexible/core/parser/EscapeQuerySyntax$Type;"));
                  STRING = new EscapeQuerySyntax$Type(env->getStaticObjectField(cls, "STRING", "Lorg/apache/lucene/queryparser/flexible/core/parser/EscapeQuerySyntax$Type;"));
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              EscapeQuerySyntax$Type EscapeQuerySyntax$Type::valueOf(const ::java::lang::String & a0)
              {
                jclass cls = env->getClass(initializeClass);
                return EscapeQuerySyntax$Type(env->callStaticObjectMethod(cls, mids$[mid_valueOf_870295fe], a0.this$));
              }

              JArray< EscapeQuerySyntax$Type > EscapeQuerySyntax$Type::values()
              {
                jclass cls = env->getClass(initializeClass);
                return JArray< EscapeQuerySyntax$Type >(env->callStaticObjectMethod(cls, mids$[mid_values_4eb00ec4]));
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace parser {
              static PyObject *t_EscapeQuerySyntax$Type_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_EscapeQuerySyntax$Type_instance_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_EscapeQuerySyntax$Type_of_(t_EscapeQuerySyntax$Type *self, PyObject *args);
              static PyObject *t_EscapeQuerySyntax$Type_valueOf(PyTypeObject *type, PyObject *args);
              static PyObject *t_EscapeQuerySyntax$Type_values(PyTypeObject *type);
              static PyObject *t_EscapeQuerySyntax$Type_get__parameters_(t_EscapeQuerySyntax$Type *self, void *data);
              static PyGetSetDef t_EscapeQuerySyntax$Type__fields_[] = {
                DECLARE_GET_FIELD(t_EscapeQuerySyntax$Type, parameters_),
                { NULL, NULL, NULL, NULL, NULL }
              };

              static PyMethodDef t_EscapeQuerySyntax$Type__methods_[] = {
                DECLARE_METHOD(t_EscapeQuerySyntax$Type, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_EscapeQuerySyntax$Type, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_EscapeQuerySyntax$Type, of_, METH_VARARGS),
                DECLARE_METHOD(t_EscapeQuerySyntax$Type, valueOf, METH_VARARGS | METH_CLASS),
                DECLARE_METHOD(t_EscapeQuerySyntax$Type, values, METH_NOARGS | METH_CLASS),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(EscapeQuerySyntax$Type, t_EscapeQuerySyntax$Type, ::java::lang::Enum, EscapeQuerySyntax$Type, abstract_init, 0, 0, t_EscapeQuerySyntax$Type__fields_, 0, 0);
              PyObject *t_EscapeQuerySyntax$Type::wrap_Object(const EscapeQuerySyntax$Type& object, PyTypeObject *p0)
              {
                PyObject *obj = t_EscapeQuerySyntax$Type::wrap_Object(object);
                if (obj != NULL && obj != Py_None)
                {
                  t_EscapeQuerySyntax$Type *self = (t_EscapeQuerySyntax$Type *) obj;
                  self->parameters[0] = p0;
                }
                return obj;
              }

              PyObject *t_EscapeQuerySyntax$Type::wrap_jobject(const jobject& object, PyTypeObject *p0)
              {
                PyObject *obj = t_EscapeQuerySyntax$Type::wrap_jobject(object);
                if (obj != NULL && obj != Py_None)
                {
                  t_EscapeQuerySyntax$Type *self = (t_EscapeQuerySyntax$Type *) obj;
                  self->parameters[0] = p0;
                }
                return obj;
              }

              void t_EscapeQuerySyntax$Type::install(PyObject *module)
              {
                installType(&PY_TYPE(EscapeQuerySyntax$Type), module, "EscapeQuerySyntax$Type", 0);
              }

              void t_EscapeQuerySyntax$Type::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(EscapeQuerySyntax$Type).tp_dict, "class_", make_descriptor(EscapeQuerySyntax$Type::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(EscapeQuerySyntax$Type).tp_dict, "wrapfn_", make_descriptor(t_EscapeQuerySyntax$Type::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(EscapeQuerySyntax$Type).tp_dict, "boxfn_", make_descriptor(boxObject));
                env->getClass(EscapeQuerySyntax$Type::initializeClass);
                PyDict_SetItemString(PY_TYPE(EscapeQuerySyntax$Type).tp_dict, "NORMAL", make_descriptor(t_EscapeQuerySyntax$Type::wrap_Object(*EscapeQuerySyntax$Type::NORMAL)));
                PyDict_SetItemString(PY_TYPE(EscapeQuerySyntax$Type).tp_dict, "STRING", make_descriptor(t_EscapeQuerySyntax$Type::wrap_Object(*EscapeQuerySyntax$Type::STRING)));
              }

              static PyObject *t_EscapeQuerySyntax$Type_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, EscapeQuerySyntax$Type::initializeClass, 1)))
                  return NULL;
                return t_EscapeQuerySyntax$Type::wrap_Object(EscapeQuerySyntax$Type(((t_EscapeQuerySyntax$Type *) arg)->object.this$));
              }
              static PyObject *t_EscapeQuerySyntax$Type_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, EscapeQuerySyntax$Type::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static PyObject *t_EscapeQuerySyntax$Type_of_(t_EscapeQuerySyntax$Type *self, PyObject *args)
              {
                if (!parseArg(args, "T", 1, &(self->parameters)))
                  Py_RETURN_SELF;
                return PyErr_SetArgsError((PyObject *) self, "of_", args);
              }

              static PyObject *t_EscapeQuerySyntax$Type_valueOf(PyTypeObject *type, PyObject *args)
              {
                ::java::lang::String a0((jobject) NULL);
                EscapeQuerySyntax$Type result((jobject) NULL);

                if (!parseArgs(args, "s", &a0))
                {
                  OBJ_CALL(result = ::org::apache::lucene::queryparser::flexible::core::parser::EscapeQuerySyntax$Type::valueOf(a0));
                  return t_EscapeQuerySyntax$Type::wrap_Object(result);
                }

                return callSuper(type, "valueOf", args, 2);
              }

              static PyObject *t_EscapeQuerySyntax$Type_values(PyTypeObject *type)
              {
                JArray< EscapeQuerySyntax$Type > result((jobject) NULL);
                OBJ_CALL(result = ::org::apache::lucene::queryparser::flexible::core::parser::EscapeQuerySyntax$Type::values());
                return JArray<jobject>(result.this$).wrap(t_EscapeQuerySyntax$Type::wrap_jobject);
              }
              static PyObject *t_EscapeQuerySyntax$Type_get__parameters_(t_EscapeQuerySyntax$Type *self, void *data)
              {
                return typeParameters(self->parameters, sizeof(self->parameters));
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/payloads/IntegerEncoder.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace payloads {

          ::java::lang::Class *IntegerEncoder::class$ = NULL;
          jmethodID *IntegerEncoder::mids$ = NULL;
          bool IntegerEncoder::live$ = false;

          jclass IntegerEncoder::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/payloads/IntegerEncoder");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_encode_871544e1] = env->getMethodID(cls, "encode", "([CII)Lorg/apache/lucene/util/BytesRef;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          IntegerEncoder::IntegerEncoder() : ::org::apache::lucene::analysis::payloads::AbstractEncoder(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          ::org::apache::lucene::util::BytesRef IntegerEncoder::encode(const JArray< jchar > & a0, jint a1, jint a2) const
          {
            return ::org::apache::lucene::util::BytesRef(env->callObjectMethod(this$, mids$[mid_encode_871544e1], a0.this$, a1, a2));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace payloads {
          static PyObject *t_IntegerEncoder_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_IntegerEncoder_instance_(PyTypeObject *type, PyObject *arg);
          static int t_IntegerEncoder_init_(t_IntegerEncoder *self, PyObject *args, PyObject *kwds);
          static PyObject *t_IntegerEncoder_encode(t_IntegerEncoder *self, PyObject *args);

          static PyMethodDef t_IntegerEncoder__methods_[] = {
            DECLARE_METHOD(t_IntegerEncoder, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_IntegerEncoder, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_IntegerEncoder, encode, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(IntegerEncoder, t_IntegerEncoder, ::org::apache::lucene::analysis::payloads::AbstractEncoder, IntegerEncoder, t_IntegerEncoder_init_, 0, 0, 0, 0, 0);

          void t_IntegerEncoder::install(PyObject *module)
          {
            installType(&PY_TYPE(IntegerEncoder), module, "IntegerEncoder", 0);
          }

          void t_IntegerEncoder::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(IntegerEncoder).tp_dict, "class_", make_descriptor(IntegerEncoder::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(IntegerEncoder).tp_dict, "wrapfn_", make_descriptor(t_IntegerEncoder::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(IntegerEncoder).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_IntegerEncoder_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, IntegerEncoder::initializeClass, 1)))
              return NULL;
            return t_IntegerEncoder::wrap_Object(IntegerEncoder(((t_IntegerEncoder *) arg)->object.this$));
          }
          static PyObject *t_IntegerEncoder_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, IntegerEncoder::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_IntegerEncoder_init_(t_IntegerEncoder *self, PyObject *args, PyObject *kwds)
          {
            IntegerEncoder object((jobject) NULL);

            INT_CALL(object = IntegerEncoder());
            self->object = object;

            return 0;
          }

          static PyObject *t_IntegerEncoder_encode(t_IntegerEncoder *self, PyObject *args)
          {
            JArray< jchar > a0((jobject) NULL);
            jint a1;
            jint a2;
            ::org::apache::lucene::util::BytesRef result((jobject) NULL);

            if (!parseArgs(args, "[CII", &a0, &a1, &a2))
            {
              OBJ_CALL(result = self->object.encode(a0, a1, a2));
              return ::org::apache::lucene::util::t_BytesRef::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(IntegerEncoder), (PyObject *) self, "encode", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/BitUtil.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *BitUtil::class$ = NULL;
        jmethodID *BitUtil::mids$ = NULL;
        bool BitUtil::live$ = false;

        jclass BitUtil::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/BitUtil");

            mids$ = new jmethodID[max_mid];
            mids$[mid_bitCount_b2271698] = env->getStaticMethodID(cls, "bitCount", "(B)I");
            mids$[mid_bitList_b2271698] = env->getStaticMethodID(cls, "bitList", "(B)I");
            mids$[mid_nextHighestPowerOfTwo_0ee6df33] = env->getStaticMethodID(cls, "nextHighestPowerOfTwo", "(J)J");
            mids$[mid_nextHighestPowerOfTwo_39c7bd23] = env->getStaticMethodID(cls, "nextHighestPowerOfTwo", "(I)I");
            mids$[mid_pop_andnot_c347d95a] = env->getStaticMethodID(cls, "pop_andnot", "([J[JII)J");
            mids$[mid_pop_array_6ae021fb] = env->getStaticMethodID(cls, "pop_array", "([JII)J");
            mids$[mid_pop_intersect_c347d95a] = env->getStaticMethodID(cls, "pop_intersect", "([J[JII)J");
            mids$[mid_pop_union_c347d95a] = env->getStaticMethodID(cls, "pop_union", "([J[JII)J");
            mids$[mid_pop_xor_c347d95a] = env->getStaticMethodID(cls, "pop_xor", "([J[JII)J");
            mids$[mid_zigZagDecode_39c7bd23] = env->getStaticMethodID(cls, "zigZagDecode", "(I)I");
            mids$[mid_zigZagDecode_0ee6df33] = env->getStaticMethodID(cls, "zigZagDecode", "(J)J");
            mids$[mid_zigZagEncode_39c7bd23] = env->getStaticMethodID(cls, "zigZagEncode", "(I)I");
            mids$[mid_zigZagEncode_0ee6df33] = env->getStaticMethodID(cls, "zigZagEncode", "(J)J");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        jint BitUtil::bitCount(jbyte a0)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticIntMethod(cls, mids$[mid_bitCount_b2271698], a0);
        }

        jint BitUtil::bitList(jbyte a0)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticIntMethod(cls, mids$[mid_bitList_b2271698], a0);
        }

        jlong BitUtil::nextHighestPowerOfTwo(jlong a0)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticLongMethod(cls, mids$[mid_nextHighestPowerOfTwo_0ee6df33], a0);
        }

        jint BitUtil::nextHighestPowerOfTwo(jint a0)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticIntMethod(cls, mids$[mid_nextHighestPowerOfTwo_39c7bd23], a0);
        }

        jlong BitUtil::pop_andnot(const JArray< jlong > & a0, const JArray< jlong > & a1, jint a2, jint a3)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticLongMethod(cls, mids$[mid_pop_andnot_c347d95a], a0.this$, a1.this$, a2, a3);
        }

        jlong BitUtil::pop_array(const JArray< jlong > & a0, jint a1, jint a2)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticLongMethod(cls, mids$[mid_pop_array_6ae021fb], a0.this$, a1, a2);
        }

        jlong BitUtil::pop_intersect(const JArray< jlong > & a0, const JArray< jlong > & a1, jint a2, jint a3)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticLongMethod(cls, mids$[mid_pop_intersect_c347d95a], a0.this$, a1.this$, a2, a3);
        }

        jlong BitUtil::pop_union(const JArray< jlong > & a0, const JArray< jlong > & a1, jint a2, jint a3)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticLongMethod(cls, mids$[mid_pop_union_c347d95a], a0.this$, a1.this$, a2, a3);
        }

        jlong BitUtil::pop_xor(const JArray< jlong > & a0, const JArray< jlong > & a1, jint a2, jint a3)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticLongMethod(cls, mids$[mid_pop_xor_c347d95a], a0.this$, a1.this$, a2, a3);
        }

        jint BitUtil::zigZagDecode(jint a0)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticIntMethod(cls, mids$[mid_zigZagDecode_39c7bd23], a0);
        }

        jlong BitUtil::zigZagDecode(jlong a0)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticLongMethod(cls, mids$[mid_zigZagDecode_0ee6df33], a0);
        }

        jint BitUtil::zigZagEncode(jint a0)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticIntMethod(cls, mids$[mid_zigZagEncode_39c7bd23], a0);
        }

        jlong BitUtil::zigZagEncode(jlong a0)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticLongMethod(cls, mids$[mid_zigZagEncode_0ee6df33], a0);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_BitUtil_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_BitUtil_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_BitUtil_bitCount(PyTypeObject *type, PyObject *arg);
        static PyObject *t_BitUtil_bitList(PyTypeObject *type, PyObject *arg);
        static PyObject *t_BitUtil_nextHighestPowerOfTwo(PyTypeObject *type, PyObject *args);
        static PyObject *t_BitUtil_pop_andnot(PyTypeObject *type, PyObject *args);
        static PyObject *t_BitUtil_pop_array(PyTypeObject *type, PyObject *args);
        static PyObject *t_BitUtil_pop_intersect(PyTypeObject *type, PyObject *args);
        static PyObject *t_BitUtil_pop_union(PyTypeObject *type, PyObject *args);
        static PyObject *t_BitUtil_pop_xor(PyTypeObject *type, PyObject *args);
        static PyObject *t_BitUtil_zigZagDecode(PyTypeObject *type, PyObject *args);
        static PyObject *t_BitUtil_zigZagEncode(PyTypeObject *type, PyObject *args);

        static PyMethodDef t_BitUtil__methods_[] = {
          DECLARE_METHOD(t_BitUtil, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_BitUtil, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_BitUtil, bitCount, METH_O | METH_CLASS),
          DECLARE_METHOD(t_BitUtil, bitList, METH_O | METH_CLASS),
          DECLARE_METHOD(t_BitUtil, nextHighestPowerOfTwo, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_BitUtil, pop_andnot, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_BitUtil, pop_array, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_BitUtil, pop_intersect, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_BitUtil, pop_union, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_BitUtil, pop_xor, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_BitUtil, zigZagDecode, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_BitUtil, zigZagEncode, METH_VARARGS | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(BitUtil, t_BitUtil, ::java::lang::Object, BitUtil, abstract_init, 0, 0, 0, 0, 0);

        void t_BitUtil::install(PyObject *module)
        {
          installType(&PY_TYPE(BitUtil), module, "BitUtil", 0);
        }

        void t_BitUtil::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(BitUtil).tp_dict, "class_", make_descriptor(BitUtil::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(BitUtil).tp_dict, "wrapfn_", make_descriptor(t_BitUtil::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(BitUtil).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_BitUtil_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, BitUtil::initializeClass, 1)))
            return NULL;
          return t_BitUtil::wrap_Object(BitUtil(((t_BitUtil *) arg)->object.this$));
        }
        static PyObject *t_BitUtil_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, BitUtil::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_BitUtil_bitCount(PyTypeObject *type, PyObject *arg)
        {
          jbyte a0;
          jint result;

          if (!parseArg(arg, "B", &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::util::BitUtil::bitCount(a0));
            return PyInt_FromLong((long) result);
          }

          PyErr_SetArgsError(type, "bitCount", arg);
          return NULL;
        }

        static PyObject *t_BitUtil_bitList(PyTypeObject *type, PyObject *arg)
        {
          jbyte a0;
          jint result;

          if (!parseArg(arg, "B", &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::util::BitUtil::bitList(a0));
            return PyInt_FromLong((long) result);
          }

          PyErr_SetArgsError(type, "bitList", arg);
          return NULL;
        }

        static PyObject *t_BitUtil_nextHighestPowerOfTwo(PyTypeObject *type, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              jlong a0;
              jlong result;

              if (!parseArgs(args, "J", &a0))
              {
                OBJ_CALL(result = ::org::apache::lucene::util::BitUtil::nextHighestPowerOfTwo(a0));
                return PyLong_FromLongLong((PY_LONG_LONG) result);
              }
            }
            {
              jint a0;
              jint result;

              if (!parseArgs(args, "I", &a0))
              {
                OBJ_CALL(result = ::org::apache::lucene::util::BitUtil::nextHighestPowerOfTwo(a0));
                return PyInt_FromLong((long) result);
              }
            }
          }

          PyErr_SetArgsError(type, "nextHighestPowerOfTwo", args);
          return NULL;
        }

        static PyObject *t_BitUtil_pop_andnot(PyTypeObject *type, PyObject *args)
        {
          JArray< jlong > a0((jobject) NULL);
          JArray< jlong > a1((jobject) NULL);
          jint a2;
          jint a3;
          jlong result;

          if (!parseArgs(args, "[J[JII", &a0, &a1, &a2, &a3))
          {
            OBJ_CALL(result = ::org::apache::lucene::util::BitUtil::pop_andnot(a0, a1, a2, a3));
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          PyErr_SetArgsError(type, "pop_andnot", args);
          return NULL;
        }

        static PyObject *t_BitUtil_pop_array(PyTypeObject *type, PyObject *args)
        {
          JArray< jlong > a0((jobject) NULL);
          jint a1;
          jint a2;
          jlong result;

          if (!parseArgs(args, "[JII", &a0, &a1, &a2))
          {
            OBJ_CALL(result = ::org::apache::lucene::util::BitUtil::pop_array(a0, a1, a2));
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          PyErr_SetArgsError(type, "pop_array", args);
          return NULL;
        }

        static PyObject *t_BitUtil_pop_intersect(PyTypeObject *type, PyObject *args)
        {
          JArray< jlong > a0((jobject) NULL);
          JArray< jlong > a1((jobject) NULL);
          jint a2;
          jint a3;
          jlong result;

          if (!parseArgs(args, "[J[JII", &a0, &a1, &a2, &a3))
          {
            OBJ_CALL(result = ::org::apache::lucene::util::BitUtil::pop_intersect(a0, a1, a2, a3));
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          PyErr_SetArgsError(type, "pop_intersect", args);
          return NULL;
        }

        static PyObject *t_BitUtil_pop_union(PyTypeObject *type, PyObject *args)
        {
          JArray< jlong > a0((jobject) NULL);
          JArray< jlong > a1((jobject) NULL);
          jint a2;
          jint a3;
          jlong result;

          if (!parseArgs(args, "[J[JII", &a0, &a1, &a2, &a3))
          {
            OBJ_CALL(result = ::org::apache::lucene::util::BitUtil::pop_union(a0, a1, a2, a3));
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          PyErr_SetArgsError(type, "pop_union", args);
          return NULL;
        }

        static PyObject *t_BitUtil_pop_xor(PyTypeObject *type, PyObject *args)
        {
          JArray< jlong > a0((jobject) NULL);
          JArray< jlong > a1((jobject) NULL);
          jint a2;
          jint a3;
          jlong result;

          if (!parseArgs(args, "[J[JII", &a0, &a1, &a2, &a3))
          {
            OBJ_CALL(result = ::org::apache::lucene::util::BitUtil::pop_xor(a0, a1, a2, a3));
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          PyErr_SetArgsError(type, "pop_xor", args);
          return NULL;
        }

        static PyObject *t_BitUtil_zigZagDecode(PyTypeObject *type, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              jint a0;
              jint result;

              if (!parseArgs(args, "I", &a0))
              {
                OBJ_CALL(result = ::org::apache::lucene::util::BitUtil::zigZagDecode(a0));
                return PyInt_FromLong((long) result);
              }
            }
            {
              jlong a0;
              jlong result;

              if (!parseArgs(args, "J", &a0))
              {
                OBJ_CALL(result = ::org::apache::lucene::util::BitUtil::zigZagDecode(a0));
                return PyLong_FromLongLong((PY_LONG_LONG) result);
              }
            }
          }

          PyErr_SetArgsError(type, "zigZagDecode", args);
          return NULL;
        }

        static PyObject *t_BitUtil_zigZagEncode(PyTypeObject *type, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              jint a0;
              jint result;

              if (!parseArgs(args, "I", &a0))
              {
                OBJ_CALL(result = ::org::apache::lucene::util::BitUtil::zigZagEncode(a0));
                return PyInt_FromLong((long) result);
              }
            }
            {
              jlong a0;
              jlong result;

              if (!parseArgs(args, "J", &a0))
              {
                OBJ_CALL(result = ::org::apache::lucene::util::BitUtil::zigZagEncode(a0));
                return PyLong_FromLongLong((PY_LONG_LONG) result);
              }
            }
          }

          PyErr_SetArgsError(type, "zigZagEncode", args);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/de/GermanMinimalStemFilterFactory.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/String.h"
#include "java/util/Map.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace de {

          ::java::lang::Class *GermanMinimalStemFilterFactory::class$ = NULL;
          jmethodID *GermanMinimalStemFilterFactory::mids$ = NULL;
          bool GermanMinimalStemFilterFactory::live$ = false;

          jclass GermanMinimalStemFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/de/GermanMinimalStemFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4c9e2b1c] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_a65cd6ab] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/TokenStream;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          GermanMinimalStemFilterFactory::GermanMinimalStemFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_4c9e2b1c, a0.this$)) {}

          ::org::apache::lucene::analysis::TokenStream GermanMinimalStemFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::TokenStream(env->callObjectMethod(this$, mids$[mid_create_a65cd6ab], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace de {
          static PyObject *t_GermanMinimalStemFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_GermanMinimalStemFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_GermanMinimalStemFilterFactory_init_(t_GermanMinimalStemFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_GermanMinimalStemFilterFactory_create(t_GermanMinimalStemFilterFactory *self, PyObject *args);

          static PyMethodDef t_GermanMinimalStemFilterFactory__methods_[] = {
            DECLARE_METHOD(t_GermanMinimalStemFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_GermanMinimalStemFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_GermanMinimalStemFilterFactory, create, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(GermanMinimalStemFilterFactory, t_GermanMinimalStemFilterFactory, ::org::apache::lucene::analysis::util::TokenFilterFactory, GermanMinimalStemFilterFactory, t_GermanMinimalStemFilterFactory_init_, 0, 0, 0, 0, 0);

          void t_GermanMinimalStemFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(GermanMinimalStemFilterFactory), module, "GermanMinimalStemFilterFactory", 0);
          }

          void t_GermanMinimalStemFilterFactory::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(GermanMinimalStemFilterFactory).tp_dict, "class_", make_descriptor(GermanMinimalStemFilterFactory::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(GermanMinimalStemFilterFactory).tp_dict, "wrapfn_", make_descriptor(t_GermanMinimalStemFilterFactory::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(GermanMinimalStemFilterFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_GermanMinimalStemFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, GermanMinimalStemFilterFactory::initializeClass, 1)))
              return NULL;
            return t_GermanMinimalStemFilterFactory::wrap_Object(GermanMinimalStemFilterFactory(((t_GermanMinimalStemFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_GermanMinimalStemFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, GermanMinimalStemFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_GermanMinimalStemFilterFactory_init_(t_GermanMinimalStemFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            GermanMinimalStemFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = GermanMinimalStemFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_GermanMinimalStemFilterFactory_create(t_GermanMinimalStemFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::TokenStream result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::t_TokenStream::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(GermanMinimalStemFilterFactory), (PyObject *) self, "create", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/standard/processors/StandardQueryNodeProcessorPipeline.h"
#include "org/apache/lucene/queryparser/flexible/core/config/QueryConfigHandler.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace processors {

              ::java::lang::Class *StandardQueryNodeProcessorPipeline::class$ = NULL;
              jmethodID *StandardQueryNodeProcessorPipeline::mids$ = NULL;
              bool StandardQueryNodeProcessorPipeline::live$ = false;

              jclass StandardQueryNodeProcessorPipeline::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/standard/processors/StandardQueryNodeProcessorPipeline");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_0b1f7132] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/queryparser/flexible/core/config/QueryConfigHandler;)V");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              StandardQueryNodeProcessorPipeline::StandardQueryNodeProcessorPipeline(const ::org::apache::lucene::queryparser::flexible::core::config::QueryConfigHandler & a0) : ::org::apache::lucene::queryparser::flexible::core::processors::QueryNodeProcessorPipeline(env->newObject(initializeClass, &mids$, mid_init$_0b1f7132, a0.this$)) {}
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace processors {
              static PyObject *t_StandardQueryNodeProcessorPipeline_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_StandardQueryNodeProcessorPipeline_instance_(PyTypeObject *type, PyObject *arg);
              static int t_StandardQueryNodeProcessorPipeline_init_(t_StandardQueryNodeProcessorPipeline *self, PyObject *args, PyObject *kwds);

              static PyMethodDef t_StandardQueryNodeProcessorPipeline__methods_[] = {
                DECLARE_METHOD(t_StandardQueryNodeProcessorPipeline, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_StandardQueryNodeProcessorPipeline, instance_, METH_O | METH_CLASS),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(StandardQueryNodeProcessorPipeline, t_StandardQueryNodeProcessorPipeline, ::org::apache::lucene::queryparser::flexible::core::processors::QueryNodeProcessorPipeline, StandardQueryNodeProcessorPipeline, t_StandardQueryNodeProcessorPipeline_init_, 0, 0, 0, 0, 0);

              void t_StandardQueryNodeProcessorPipeline::install(PyObject *module)
              {
                installType(&PY_TYPE(StandardQueryNodeProcessorPipeline), module, "StandardQueryNodeProcessorPipeline", 0);
              }

              void t_StandardQueryNodeProcessorPipeline::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(StandardQueryNodeProcessorPipeline).tp_dict, "class_", make_descriptor(StandardQueryNodeProcessorPipeline::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(StandardQueryNodeProcessorPipeline).tp_dict, "wrapfn_", make_descriptor(t_StandardQueryNodeProcessorPipeline::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(StandardQueryNodeProcessorPipeline).tp_dict, "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_StandardQueryNodeProcessorPipeline_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, StandardQueryNodeProcessorPipeline::initializeClass, 1)))
                  return NULL;
                return t_StandardQueryNodeProcessorPipeline::wrap_Object(StandardQueryNodeProcessorPipeline(((t_StandardQueryNodeProcessorPipeline *) arg)->object.this$));
              }
              static PyObject *t_StandardQueryNodeProcessorPipeline_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, StandardQueryNodeProcessorPipeline::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_StandardQueryNodeProcessorPipeline_init_(t_StandardQueryNodeProcessorPipeline *self, PyObject *args, PyObject *kwds)
              {
                ::org::apache::lucene::queryparser::flexible::core::config::QueryConfigHandler a0((jobject) NULL);
                StandardQueryNodeProcessorPipeline object((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::queryparser::flexible::core::config::QueryConfigHandler::initializeClass, &a0))
                {
                  INT_CALL(object = StandardQueryNodeProcessorPipeline(a0));
                  self->object = object;
                }
                else
                {
                  PyErr_SetArgsError((PyObject *) self, "__init__", args);
                  return -1;
                }

                return 0;
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/PrefixTermsEnum.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "org/apache/lucene/index/TermsEnum.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *PrefixTermsEnum::class$ = NULL;
        jmethodID *PrefixTermsEnum::mids$ = NULL;
        bool PrefixTermsEnum::live$ = false;

        jclass PrefixTermsEnum::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/PrefixTermsEnum");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_acc8615c] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/TermsEnum;Lorg/apache/lucene/util/BytesRef;)V");
            mids$[mid_accept_30bc08e1] = env->getMethodID(cls, "accept", "(Lorg/apache/lucene/util/BytesRef;)Lorg/apache/lucene/index/FilteredTermsEnum$AcceptStatus;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        PrefixTermsEnum::PrefixTermsEnum(const ::org::apache::lucene::index::TermsEnum & a0, const ::org::apache::lucene::util::BytesRef & a1) : ::org::apache::lucene::index::FilteredTermsEnum(env->newObject(initializeClass, &mids$, mid_init$_acc8615c, a0.this$, a1.this$)) {}
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_PrefixTermsEnum_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_PrefixTermsEnum_instance_(PyTypeObject *type, PyObject *arg);
        static int t_PrefixTermsEnum_init_(t_PrefixTermsEnum *self, PyObject *args, PyObject *kwds);

        static PyMethodDef t_PrefixTermsEnum__methods_[] = {
          DECLARE_METHOD(t_PrefixTermsEnum, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PrefixTermsEnum, instance_, METH_O | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(PrefixTermsEnum, t_PrefixTermsEnum, ::org::apache::lucene::index::FilteredTermsEnum, PrefixTermsEnum, t_PrefixTermsEnum_init_, 0, 0, 0, 0, 0);

        void t_PrefixTermsEnum::install(PyObject *module)
        {
          installType(&PY_TYPE(PrefixTermsEnum), module, "PrefixTermsEnum", 0);
        }

        void t_PrefixTermsEnum::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(PrefixTermsEnum).tp_dict, "class_", make_descriptor(PrefixTermsEnum::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(PrefixTermsEnum).tp_dict, "wrapfn_", make_descriptor(t_PrefixTermsEnum::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(PrefixTermsEnum).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_PrefixTermsEnum_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, PrefixTermsEnum::initializeClass, 1)))
            return NULL;
          return t_PrefixTermsEnum::wrap_Object(PrefixTermsEnum(((t_PrefixTermsEnum *) arg)->object.this$));
        }
        static PyObject *t_PrefixTermsEnum_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, PrefixTermsEnum::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_PrefixTermsEnum_init_(t_PrefixTermsEnum *self, PyObject *args, PyObject *kwds)
        {
          ::org::apache::lucene::index::TermsEnum a0((jobject) NULL);
          ::org::apache::lucene::util::BytesRef a1((jobject) NULL);
          PrefixTermsEnum object((jobject) NULL);

          if (!parseArgs(args, "kk", ::org::apache::lucene::index::TermsEnum::initializeClass, ::org::apache::lucene::util::BytesRef::initializeClass, &a0, &a1))
          {
            INT_CALL(object = PrefixTermsEnum(a0, a1));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/automaton/CompiledAutomaton$AUTOMATON_TYPE.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace automaton {

          ::java::lang::Class *CompiledAutomaton$AUTOMATON_TYPE::class$ = NULL;
          jmethodID *CompiledAutomaton$AUTOMATON_TYPE::mids$ = NULL;
          bool CompiledAutomaton$AUTOMATON_TYPE::live$ = false;
          CompiledAutomaton$AUTOMATON_TYPE *CompiledAutomaton$AUTOMATON_TYPE::ALL = NULL;
          CompiledAutomaton$AUTOMATON_TYPE *CompiledAutomaton$AUTOMATON_TYPE::NONE = NULL;
          CompiledAutomaton$AUTOMATON_TYPE *CompiledAutomaton$AUTOMATON_TYPE::NORMAL = NULL;
          CompiledAutomaton$AUTOMATON_TYPE *CompiledAutomaton$AUTOMATON_TYPE::PREFIX$ = NULL;
          CompiledAutomaton$AUTOMATON_TYPE *CompiledAutomaton$AUTOMATON_TYPE::SINGLE = NULL;

          jclass CompiledAutomaton$AUTOMATON_TYPE::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/util/automaton/CompiledAutomaton$AUTOMATON_TYPE");

              mids$ = new jmethodID[max_mid];
              mids$[mid_valueOf_9a95b48c] = env->getStaticMethodID(cls, "valueOf", "(Ljava/lang/String;)Lorg/apache/lucene/util/automaton/CompiledAutomaton$AUTOMATON_TYPE;");
              mids$[mid_values_9a1b8d3a] = env->getStaticMethodID(cls, "values", "()[Lorg/apache/lucene/util/automaton/CompiledAutomaton$AUTOMATON_TYPE;");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              ALL = new CompiledAutomaton$AUTOMATON_TYPE(env->getStaticObjectField(cls, "ALL", "Lorg/apache/lucene/util/automaton/CompiledAutomaton$AUTOMATON_TYPE;"));
              NONE = new CompiledAutomaton$AUTOMATON_TYPE(env->getStaticObjectField(cls, "NONE", "Lorg/apache/lucene/util/automaton/CompiledAutomaton$AUTOMATON_TYPE;"));
              NORMAL = new CompiledAutomaton$AUTOMATON_TYPE(env->getStaticObjectField(cls, "NORMAL", "Lorg/apache/lucene/util/automaton/CompiledAutomaton$AUTOMATON_TYPE;"));
              PREFIX$ = new CompiledAutomaton$AUTOMATON_TYPE(env->getStaticObjectField(cls, "PREFIX", "Lorg/apache/lucene/util/automaton/CompiledAutomaton$AUTOMATON_TYPE;"));
              SINGLE = new CompiledAutomaton$AUTOMATON_TYPE(env->getStaticObjectField(cls, "SINGLE", "Lorg/apache/lucene/util/automaton/CompiledAutomaton$AUTOMATON_TYPE;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          CompiledAutomaton$AUTOMATON_TYPE CompiledAutomaton$AUTOMATON_TYPE::valueOf(const ::java::lang::String & a0)
          {
            jclass cls = env->getClass(initializeClass);
            return CompiledAutomaton$AUTOMATON_TYPE(env->callStaticObjectMethod(cls, mids$[mid_valueOf_9a95b48c], a0.this$));
          }

          JArray< CompiledAutomaton$AUTOMATON_TYPE > CompiledAutomaton$AUTOMATON_TYPE::values()
          {
            jclass cls = env->getClass(initializeClass);
            return JArray< CompiledAutomaton$AUTOMATON_TYPE >(env->callStaticObjectMethod(cls, mids$[mid_values_9a1b8d3a]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace automaton {
          static PyObject *t_CompiledAutomaton$AUTOMATON_TYPE_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_CompiledAutomaton$AUTOMATON_TYPE_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_CompiledAutomaton$AUTOMATON_TYPE_of_(t_CompiledAutomaton$AUTOMATON_TYPE *self, PyObject *args);
          static PyObject *t_CompiledAutomaton$AUTOMATON_TYPE_valueOf(PyTypeObject *type, PyObject *args);
          static PyObject *t_CompiledAutomaton$AUTOMATON_TYPE_values(PyTypeObject *type);
          static PyObject *t_CompiledAutomaton$AUTOMATON_TYPE_get__parameters_(t_CompiledAutomaton$AUTOMATON_TYPE *self, void *data);
          static PyGetSetDef t_CompiledAutomaton$AUTOMATON_TYPE__fields_[] = {
            DECLARE_GET_FIELD(t_CompiledAutomaton$AUTOMATON_TYPE, parameters_),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_CompiledAutomaton$AUTOMATON_TYPE__methods_[] = {
            DECLARE_METHOD(t_CompiledAutomaton$AUTOMATON_TYPE, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CompiledAutomaton$AUTOMATON_TYPE, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CompiledAutomaton$AUTOMATON_TYPE, of_, METH_VARARGS),
            DECLARE_METHOD(t_CompiledAutomaton$AUTOMATON_TYPE, valueOf, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_CompiledAutomaton$AUTOMATON_TYPE, values, METH_NOARGS | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(CompiledAutomaton$AUTOMATON_TYPE, t_CompiledAutomaton$AUTOMATON_TYPE, ::java::lang::Enum, CompiledAutomaton$AUTOMATON_TYPE, abstract_init, 0, 0, t_CompiledAutomaton$AUTOMATON_TYPE__fields_, 0, 0);
          PyObject *t_CompiledAutomaton$AUTOMATON_TYPE::wrap_Object(const CompiledAutomaton$AUTOMATON_TYPE& object, PyTypeObject *p0)
          {
            PyObject *obj = t_CompiledAutomaton$AUTOMATON_TYPE::wrap_Object(object);
            if (obj != NULL && obj != Py_None)
            {
              t_CompiledAutomaton$AUTOMATON_TYPE *self = (t_CompiledAutomaton$AUTOMATON_TYPE *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          PyObject *t_CompiledAutomaton$AUTOMATON_TYPE::wrap_jobject(const jobject& object, PyTypeObject *p0)
          {
            PyObject *obj = t_CompiledAutomaton$AUTOMATON_TYPE::wrap_jobject(object);
            if (obj != NULL && obj != Py_None)
            {
              t_CompiledAutomaton$AUTOMATON_TYPE *self = (t_CompiledAutomaton$AUTOMATON_TYPE *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          void t_CompiledAutomaton$AUTOMATON_TYPE::install(PyObject *module)
          {
            installType(&PY_TYPE(CompiledAutomaton$AUTOMATON_TYPE), module, "CompiledAutomaton$AUTOMATON_TYPE", 0);
          }

          void t_CompiledAutomaton$AUTOMATON_TYPE::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(CompiledAutomaton$AUTOMATON_TYPE).tp_dict, "class_", make_descriptor(CompiledAutomaton$AUTOMATON_TYPE::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(CompiledAutomaton$AUTOMATON_TYPE).tp_dict, "wrapfn_", make_descriptor(t_CompiledAutomaton$AUTOMATON_TYPE::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(CompiledAutomaton$AUTOMATON_TYPE).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(CompiledAutomaton$AUTOMATON_TYPE::initializeClass);
            PyDict_SetItemString(PY_TYPE(CompiledAutomaton$AUTOMATON_TYPE).tp_dict, "ALL", make_descriptor(t_CompiledAutomaton$AUTOMATON_TYPE::wrap_Object(*CompiledAutomaton$AUTOMATON_TYPE::ALL)));
            PyDict_SetItemString(PY_TYPE(CompiledAutomaton$AUTOMATON_TYPE).tp_dict, "NONE", make_descriptor(t_CompiledAutomaton$AUTOMATON_TYPE::wrap_Object(*CompiledAutomaton$AUTOMATON_TYPE::NONE)));
            PyDict_SetItemString(PY_TYPE(CompiledAutomaton$AUTOMATON_TYPE).tp_dict, "NORMAL", make_descriptor(t_CompiledAutomaton$AUTOMATON_TYPE::wrap_Object(*CompiledAutomaton$AUTOMATON_TYPE::NORMAL)));
            PyDict_SetItemString(PY_TYPE(CompiledAutomaton$AUTOMATON_TYPE).tp_dict, "PREFIX", make_descriptor(t_CompiledAutomaton$AUTOMATON_TYPE::wrap_Object(*CompiledAutomaton$AUTOMATON_TYPE::PREFIX$)));
            PyDict_SetItemString(PY_TYPE(CompiledAutomaton$AUTOMATON_TYPE).tp_dict, "SINGLE", make_descriptor(t_CompiledAutomaton$AUTOMATON_TYPE::wrap_Object(*CompiledAutomaton$AUTOMATON_TYPE::SINGLE)));
          }

          static PyObject *t_CompiledAutomaton$AUTOMATON_TYPE_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, CompiledAutomaton$AUTOMATON_TYPE::initializeClass, 1)))
              return NULL;
            return t_CompiledAutomaton$AUTOMATON_TYPE::wrap_Object(CompiledAutomaton$AUTOMATON_TYPE(((t_CompiledAutomaton$AUTOMATON_TYPE *) arg)->object.this$));
          }
          static PyObject *t_CompiledAutomaton$AUTOMATON_TYPE_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, CompiledAutomaton$AUTOMATON_TYPE::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_CompiledAutomaton$AUTOMATON_TYPE_of_(t_CompiledAutomaton$AUTOMATON_TYPE *self, PyObject *args)
          {
            if (!parseArg(args, "T", 1, &(self->parameters)))
              Py_RETURN_SELF;
            return PyErr_SetArgsError((PyObject *) self, "of_", args);
          }

          static PyObject *t_CompiledAutomaton$AUTOMATON_TYPE_valueOf(PyTypeObject *type, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            CompiledAutomaton$AUTOMATON_TYPE result((jobject) NULL);

            if (!parseArgs(args, "s", &a0))
            {
              OBJ_CALL(result = ::org::apache::lucene::util::automaton::CompiledAutomaton$AUTOMATON_TYPE::valueOf(a0));
              return t_CompiledAutomaton$AUTOMATON_TYPE::wrap_Object(result);
            }

            return callSuper(type, "valueOf", args, 2);
          }

          static PyObject *t_CompiledAutomaton$AUTOMATON_TYPE_values(PyTypeObject *type)
          {
            JArray< CompiledAutomaton$AUTOMATON_TYPE > result((jobject) NULL);
            OBJ_CALL(result = ::org::apache::lucene::util::automaton::CompiledAutomaton$AUTOMATON_TYPE::values());
            return JArray<jobject>(result.this$).wrap(t_CompiledAutomaton$AUTOMATON_TYPE::wrap_jobject);
          }
          static PyObject *t_CompiledAutomaton$AUTOMATON_TYPE_get__parameters_(t_CompiledAutomaton$AUTOMATON_TYPE *self, void *data)
          {
            return typeParameters(self->parameters, sizeof(self->parameters));
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/shingle/ShingleAnalyzerWrapper.h"
#include "org/apache/lucene/analysis/Analyzer.h"
#include "org/apache/lucene/util/Version.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace shingle {

          ::java::lang::Class *ShingleAnalyzerWrapper::class$ = NULL;
          jmethodID *ShingleAnalyzerWrapper::mids$ = NULL;
          bool ShingleAnalyzerWrapper::live$ = false;

          jclass ShingleAnalyzerWrapper::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/shingle/ShingleAnalyzerWrapper");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_0d96cf33] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;)V");
              mids$[mid_init$_31619410] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/Analyzer;)V");
              mids$[mid_init$_e882998a] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/Analyzer;I)V");
              mids$[mid_init$_e55e5adf] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;II)V");
              mids$[mid_init$_ad527988] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/Analyzer;II)V");
              mids$[mid_init$_05cde3fa] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/Analyzer;IILjava/lang/String;ZZLjava/lang/String;)V");
              mids$[mid_getFillerToken_14c7b5c5] = env->getMethodID(cls, "getFillerToken", "()Ljava/lang/String;");
              mids$[mid_getMaxShingleSize_54c6a179] = env->getMethodID(cls, "getMaxShingleSize", "()I");
              mids$[mid_getMinShingleSize_54c6a179] = env->getMethodID(cls, "getMinShingleSize", "()I");
              mids$[mid_getTokenSeparator_14c7b5c5] = env->getMethodID(cls, "getTokenSeparator", "()Ljava/lang/String;");
              mids$[mid_getWrappedAnalyzer_29a2299f] = env->getMethodID(cls, "getWrappedAnalyzer", "(Ljava/lang/String;)Lorg/apache/lucene/analysis/Analyzer;");
              mids$[mid_isOutputUnigrams_54c6a16a] = env->getMethodID(cls, "isOutputUnigrams", "()Z");
              mids$[mid_isOutputUnigramsIfNoShingles_54c6a16a] = env->getMethodID(cls, "isOutputUnigramsIfNoShingles", "()Z");
              mids$[mid_wrapComponents_46d74455] = env->getMethodID(cls, "wrapComponents", "(Ljava/lang/String;Lorg/apache/lucene/analysis/Analyzer$TokenStreamComponents;)Lorg/apache/lucene/analysis/Analyzer$TokenStreamComponents;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ShingleAnalyzerWrapper::ShingleAnalyzerWrapper(const ::org::apache::lucene::util::Version & a0) : ::org::apache::lucene::analysis::AnalyzerWrapper(env->newObject(initializeClass, &mids$, mid_init$_0d96cf33, a0.this$)) {}

          ShingleAnalyzerWrapper::ShingleAnalyzerWrapper(const ::org::apache::lucene::analysis::Analyzer & a0) : ::org::apache::lucene::analysis::AnalyzerWrapper(env->newObject(initializeClass, &mids$, mid_init$_31619410, a0.this$)) {}

          ShingleAnalyzerWrapper::ShingleAnalyzerWrapper(const ::org::apache::lucene::analysis::Analyzer & a0, jint a1) : ::org::apache::lucene::analysis::AnalyzerWrapper(env->newObject(initializeClass, &mids$, mid_init$_e882998a, a0.this$, a1)) {}

          ShingleAnalyzerWrapper::ShingleAnalyzerWrapper(const ::org::apache::lucene::util::Version & a0, jint a1, jint a2) : ::org::apache::lucene::analysis::AnalyzerWrapper(env->newObject(initializeClass, &mids$, mid_init$_e55e5adf, a0.this$, a1, a2)) {}

          ShingleAnalyzerWrapper::ShingleAnalyzerWrapper(const ::org::apache::lucene::analysis::Analyzer & a0, jint a1, jint a2) : ::org::apache::lucene::analysis::AnalyzerWrapper(env->newObject(initializeClass, &mids$, mid_init$_ad527988, a0.this$, a1, a2)) {}

          ShingleAnalyzerWrapper::ShingleAnalyzerWrapper(const ::org::apache::lucene::analysis::Analyzer & a0, jint a1, jint a2, const ::java::lang::String & a3, jboolean a4, jboolean a5, const ::java::lang::String & a6) : ::org::apache::lucene::analysis::AnalyzerWrapper(env->newObject(initializeClass, &mids$, mid_init$_05cde3fa, a0.this$, a1, a2, a3.this$, a4, a5, a6.this$)) {}

          ::java::lang::String ShingleAnalyzerWrapper::getFillerToken() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getFillerToken_14c7b5c5]));
          }

          jint ShingleAnalyzerWrapper::getMaxShingleSize() const
          {
            return env->callIntMethod(this$, mids$[mid_getMaxShingleSize_54c6a179]);
          }

          jint ShingleAnalyzerWrapper::getMinShingleSize() const
          {
            return env->callIntMethod(this$, mids$[mid_getMinShingleSize_54c6a179]);
          }

          ::java::lang::String ShingleAnalyzerWrapper::getTokenSeparator() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getTokenSeparator_14c7b5c5]));
          }

          ::org::apache::lucene::analysis::Analyzer ShingleAnalyzerWrapper::getWrappedAnalyzer(const ::java::lang::String & a0) const
          {
            return ::org::apache::lucene::analysis::Analyzer(env->callObjectMethod(this$, mids$[mid_getWrappedAnalyzer_29a2299f], a0.this$));
          }

          jboolean ShingleAnalyzerWrapper::isOutputUnigrams() const
          {
            return env->callBooleanMethod(this$, mids$[mid_isOutputUnigrams_54c6a16a]);
          }

          jboolean ShingleAnalyzerWrapper::isOutputUnigramsIfNoShingles() const
          {
            return env->callBooleanMethod(this$, mids$[mid_isOutputUnigramsIfNoShingles_54c6a16a]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace shingle {
          static PyObject *t_ShingleAnalyzerWrapper_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_ShingleAnalyzerWrapper_instance_(PyTypeObject *type, PyObject *arg);
          static int t_ShingleAnalyzerWrapper_init_(t_ShingleAnalyzerWrapper *self, PyObject *args, PyObject *kwds);
          static PyObject *t_ShingleAnalyzerWrapper_getFillerToken(t_ShingleAnalyzerWrapper *self);
          static PyObject *t_ShingleAnalyzerWrapper_getMaxShingleSize(t_ShingleAnalyzerWrapper *self);
          static PyObject *t_ShingleAnalyzerWrapper_getMinShingleSize(t_ShingleAnalyzerWrapper *self);
          static PyObject *t_ShingleAnalyzerWrapper_getTokenSeparator(t_ShingleAnalyzerWrapper *self);
          static PyObject *t_ShingleAnalyzerWrapper_getWrappedAnalyzer(t_ShingleAnalyzerWrapper *self, PyObject *arg);
          static PyObject *t_ShingleAnalyzerWrapper_isOutputUnigrams(t_ShingleAnalyzerWrapper *self);
          static PyObject *t_ShingleAnalyzerWrapper_isOutputUnigramsIfNoShingles(t_ShingleAnalyzerWrapper *self);
          static PyObject *t_ShingleAnalyzerWrapper_get__fillerToken(t_ShingleAnalyzerWrapper *self, void *data);
          static PyObject *t_ShingleAnalyzerWrapper_get__maxShingleSize(t_ShingleAnalyzerWrapper *self, void *data);
          static PyObject *t_ShingleAnalyzerWrapper_get__minShingleSize(t_ShingleAnalyzerWrapper *self, void *data);
          static PyObject *t_ShingleAnalyzerWrapper_get__outputUnigrams(t_ShingleAnalyzerWrapper *self, void *data);
          static PyObject *t_ShingleAnalyzerWrapper_get__outputUnigramsIfNoShingles(t_ShingleAnalyzerWrapper *self, void *data);
          static PyObject *t_ShingleAnalyzerWrapper_get__tokenSeparator(t_ShingleAnalyzerWrapper *self, void *data);
          static PyGetSetDef t_ShingleAnalyzerWrapper__fields_[] = {
            DECLARE_GET_FIELD(t_ShingleAnalyzerWrapper, fillerToken),
            DECLARE_GET_FIELD(t_ShingleAnalyzerWrapper, maxShingleSize),
            DECLARE_GET_FIELD(t_ShingleAnalyzerWrapper, minShingleSize),
            DECLARE_GET_FIELD(t_ShingleAnalyzerWrapper, outputUnigrams),
            DECLARE_GET_FIELD(t_ShingleAnalyzerWrapper, outputUnigramsIfNoShingles),
            DECLARE_GET_FIELD(t_ShingleAnalyzerWrapper, tokenSeparator),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_ShingleAnalyzerWrapper__methods_[] = {
            DECLARE_METHOD(t_ShingleAnalyzerWrapper, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ShingleAnalyzerWrapper, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ShingleAnalyzerWrapper, getFillerToken, METH_NOARGS),
            DECLARE_METHOD(t_ShingleAnalyzerWrapper, getMaxShingleSize, METH_NOARGS),
            DECLARE_METHOD(t_ShingleAnalyzerWrapper, getMinShingleSize, METH_NOARGS),
            DECLARE_METHOD(t_ShingleAnalyzerWrapper, getTokenSeparator, METH_NOARGS),
            DECLARE_METHOD(t_ShingleAnalyzerWrapper, getWrappedAnalyzer, METH_O),
            DECLARE_METHOD(t_ShingleAnalyzerWrapper, isOutputUnigrams, METH_NOARGS),
            DECLARE_METHOD(t_ShingleAnalyzerWrapper, isOutputUnigramsIfNoShingles, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(ShingleAnalyzerWrapper, t_ShingleAnalyzerWrapper, ::org::apache::lucene::analysis::AnalyzerWrapper, ShingleAnalyzerWrapper, t_ShingleAnalyzerWrapper_init_, 0, 0, t_ShingleAnalyzerWrapper__fields_, 0, 0);

          void t_ShingleAnalyzerWrapper::install(PyObject *module)
          {
            installType(&PY_TYPE(ShingleAnalyzerWrapper), module, "ShingleAnalyzerWrapper", 0);
          }

          void t_ShingleAnalyzerWrapper::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(ShingleAnalyzerWrapper).tp_dict, "class_", make_descriptor(ShingleAnalyzerWrapper::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(ShingleAnalyzerWrapper).tp_dict, "wrapfn_", make_descriptor(t_ShingleAnalyzerWrapper::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(ShingleAnalyzerWrapper).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_ShingleAnalyzerWrapper_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, ShingleAnalyzerWrapper::initializeClass, 1)))
              return NULL;
            return t_ShingleAnalyzerWrapper::wrap_Object(ShingleAnalyzerWrapper(((t_ShingleAnalyzerWrapper *) arg)->object.this$));
          }
          static PyObject *t_ShingleAnalyzerWrapper_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, ShingleAnalyzerWrapper::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_ShingleAnalyzerWrapper_init_(t_ShingleAnalyzerWrapper *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                ShingleAnalyzerWrapper object((jobject) NULL);

                if (!parseArgs(args, "K", ::org::apache::lucene::util::Version::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_))
                {
                  INT_CALL(object = ShingleAnalyzerWrapper(a0));
                  self->object = object;
                  break;
                }
              }
              {
                ::org::apache::lucene::analysis::Analyzer a0((jobject) NULL);
                ShingleAnalyzerWrapper object((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::analysis::Analyzer::initializeClass, &a0))
                {
                  INT_CALL(object = ShingleAnalyzerWrapper(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 2:
              {
                ::org::apache::lucene::analysis::Analyzer a0((jobject) NULL);
                jint a1;
                ShingleAnalyzerWrapper object((jobject) NULL);

                if (!parseArgs(args, "kI", ::org::apache::lucene::analysis::Analyzer::initializeClass, &a0, &a1))
                {
                  INT_CALL(object = ShingleAnalyzerWrapper(a0, a1));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 3:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                jint a1;
                jint a2;
                ShingleAnalyzerWrapper object((jobject) NULL);

                if (!parseArgs(args, "KII", ::org::apache::lucene::util::Version::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1, &a2))
                {
                  INT_CALL(object = ShingleAnalyzerWrapper(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
              {
                ::org::apache::lucene::analysis::Analyzer a0((jobject) NULL);
                jint a1;
                jint a2;
                ShingleAnalyzerWrapper object((jobject) NULL);

                if (!parseArgs(args, "kII", ::org::apache::lucene::analysis::Analyzer::initializeClass, &a0, &a1, &a2))
                {
                  INT_CALL(object = ShingleAnalyzerWrapper(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 7:
              {
                ::org::apache::lucene::analysis::Analyzer a0((jobject) NULL);
                jint a1;
                jint a2;
                ::java::lang::String a3((jobject) NULL);
                jboolean a4;
                jboolean a5;
                ::java::lang::String a6((jobject) NULL);
                ShingleAnalyzerWrapper object((jobject) NULL);

                if (!parseArgs(args, "kIIsZZs", ::org::apache::lucene::analysis::Analyzer::initializeClass, &a0, &a1, &a2, &a3, &a4, &a5, &a6))
                {
                  INT_CALL(object = ShingleAnalyzerWrapper(a0, a1, a2, a3, a4, a5, a6));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_ShingleAnalyzerWrapper_getFillerToken(t_ShingleAnalyzerWrapper *self)
          {
            ::java::lang::String result((jobject) NULL);
            OBJ_CALL(result = self->object.getFillerToken());
            return j2p(result);
          }

          static PyObject *t_ShingleAnalyzerWrapper_getMaxShingleSize(t_ShingleAnalyzerWrapper *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getMaxShingleSize());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_ShingleAnalyzerWrapper_getMinShingleSize(t_ShingleAnalyzerWrapper *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getMinShingleSize());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_ShingleAnalyzerWrapper_getTokenSeparator(t_ShingleAnalyzerWrapper *self)
          {
            ::java::lang::String result((jobject) NULL);
            OBJ_CALL(result = self->object.getTokenSeparator());
            return j2p(result);
          }

          static PyObject *t_ShingleAnalyzerWrapper_getWrappedAnalyzer(t_ShingleAnalyzerWrapper *self, PyObject *arg)
          {
            ::java::lang::String a0((jobject) NULL);
            ::org::apache::lucene::analysis::Analyzer result((jobject) NULL);

            if (!parseArg(arg, "s", &a0))
            {
              OBJ_CALL(result = self->object.getWrappedAnalyzer(a0));
              return ::org::apache::lucene::analysis::t_Analyzer::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "getWrappedAnalyzer", arg);
            return NULL;
          }

          static PyObject *t_ShingleAnalyzerWrapper_isOutputUnigrams(t_ShingleAnalyzerWrapper *self)
          {
            jboolean result;
            OBJ_CALL(result = self->object.isOutputUnigrams());
            Py_RETURN_BOOL(result);
          }

          static PyObject *t_ShingleAnalyzerWrapper_isOutputUnigramsIfNoShingles(t_ShingleAnalyzerWrapper *self)
          {
            jboolean result;
            OBJ_CALL(result = self->object.isOutputUnigramsIfNoShingles());
            Py_RETURN_BOOL(result);
          }

          static PyObject *t_ShingleAnalyzerWrapper_get__fillerToken(t_ShingleAnalyzerWrapper *self, void *data)
          {
            ::java::lang::String value((jobject) NULL);
            OBJ_CALL(value = self->object.getFillerToken());
            return j2p(value);
          }

          static PyObject *t_ShingleAnalyzerWrapper_get__maxShingleSize(t_ShingleAnalyzerWrapper *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getMaxShingleSize());
            return PyInt_FromLong((long) value);
          }

          static PyObject *t_ShingleAnalyzerWrapper_get__minShingleSize(t_ShingleAnalyzerWrapper *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getMinShingleSize());
            return PyInt_FromLong((long) value);
          }

          static PyObject *t_ShingleAnalyzerWrapper_get__outputUnigrams(t_ShingleAnalyzerWrapper *self, void *data)
          {
            jboolean value;
            OBJ_CALL(value = self->object.isOutputUnigrams());
            Py_RETURN_BOOL(value);
          }

          static PyObject *t_ShingleAnalyzerWrapper_get__outputUnigramsIfNoShingles(t_ShingleAnalyzerWrapper *self, void *data)
          {
            jboolean value;
            OBJ_CALL(value = self->object.isOutputUnigramsIfNoShingles());
            Py_RETURN_BOOL(value);
          }

          static PyObject *t_ShingleAnalyzerWrapper_get__tokenSeparator(t_ShingleAnalyzerWrapper *self, void *data)
          {
            ::java::lang::String value((jobject) NULL);
            OBJ_CALL(value = self->object.getTokenSeparator());
            return j2p(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/blocktree/Stats.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace blocktree {

          ::java::lang::Class *Stats::class$ = NULL;
          jmethodID *Stats::mids$ = NULL;
          jfieldID *Stats::fids$ = NULL;
          bool Stats::live$ = false;

          jclass Stats::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/blocktree/Stats");

              mids$ = new jmethodID[max_mid];
              mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

              fids$ = new jfieldID[max_fid];
              fids$[fid_blockCountByPrefixLen] = env->getFieldID(cls, "blockCountByPrefixLen", "[I");
              fids$[fid_field] = env->getFieldID(cls, "field", "Ljava/lang/String;");
              fids$[fid_floorBlockCount] = env->getFieldID(cls, "floorBlockCount", "I");
              fids$[fid_floorSubBlockCount] = env->getFieldID(cls, "floorSubBlockCount", "I");
              fids$[fid_indexArcCount] = env->getFieldID(cls, "indexArcCount", "J");
              fids$[fid_indexNodeCount] = env->getFieldID(cls, "indexNodeCount", "J");
              fids$[fid_indexNumBytes] = env->getFieldID(cls, "indexNumBytes", "J");
              fids$[fid_mixedBlockCount] = env->getFieldID(cls, "mixedBlockCount", "I");
              fids$[fid_nonFloorBlockCount] = env->getFieldID(cls, "nonFloorBlockCount", "I");
              fids$[fid_segment] = env->getFieldID(cls, "segment", "Ljava/lang/String;");
              fids$[fid_subBlocksOnlyBlockCount] = env->getFieldID(cls, "subBlocksOnlyBlockCount", "I");
              fids$[fid_termsOnlyBlockCount] = env->getFieldID(cls, "termsOnlyBlockCount", "I");
              fids$[fid_totalBlockCount] = env->getFieldID(cls, "totalBlockCount", "I");
              fids$[fid_totalBlockOtherBytes] = env->getFieldID(cls, "totalBlockOtherBytes", "J");
              fids$[fid_totalBlockStatsBytes] = env->getFieldID(cls, "totalBlockStatsBytes", "J");
              fids$[fid_totalBlockSuffixBytes] = env->getFieldID(cls, "totalBlockSuffixBytes", "J");
              fids$[fid_totalTermBytes] = env->getFieldID(cls, "totalTermBytes", "J");
              fids$[fid_totalTermCount] = env->getFieldID(cls, "totalTermCount", "J");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ::java::lang::String Stats::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
          }

          JArray< jint > Stats::_get_blockCountByPrefixLen() const
          {
            return JArray< jint >(env->getObjectField(this$, fids$[fid_blockCountByPrefixLen]));
          }

          void Stats::_set_blockCountByPrefixLen(const JArray< jint > & a0) const
          {
            env->setObjectField(this$, fids$[fid_blockCountByPrefixLen], a0.this$);
          }

          ::java::lang::String Stats::_get_field() const
          {
            return ::java::lang::String(env->getObjectField(this$, fids$[fid_field]));
          }

          jint Stats::_get_floorBlockCount() const
          {
            return env->getIntField(this$, fids$[fid_floorBlockCount]);
          }

          void Stats::_set_floorBlockCount(jint a0) const
          {
            env->setIntField(this$, fids$[fid_floorBlockCount], a0);
          }

          jint Stats::_get_floorSubBlockCount() const
          {
            return env->getIntField(this$, fids$[fid_floorSubBlockCount]);
          }

          void Stats::_set_floorSubBlockCount(jint a0) const
          {
            env->setIntField(this$, fids$[fid_floorSubBlockCount], a0);
          }

          jlong Stats::_get_indexArcCount() const
          {
            return env->getLongField(this$, fids$[fid_indexArcCount]);
          }

          void Stats::_set_indexArcCount(jlong a0) const
          {
            env->setLongField(this$, fids$[fid_indexArcCount], a0);
          }

          jlong Stats::_get_indexNodeCount() const
          {
            return env->getLongField(this$, fids$[fid_indexNodeCount]);
          }

          void Stats::_set_indexNodeCount(jlong a0) const
          {
            env->setLongField(this$, fids$[fid_indexNodeCount], a0);
          }

          jlong Stats::_get_indexNumBytes() const
          {
            return env->getLongField(this$, fids$[fid_indexNumBytes]);
          }

          void Stats::_set_indexNumBytes(jlong a0) const
          {
            env->setLongField(this$, fids$[fid_indexNumBytes], a0);
          }

          jint Stats::_get_mixedBlockCount() const
          {
            return env->getIntField(this$, fids$[fid_mixedBlockCount]);
          }

          void Stats::_set_mixedBlockCount(jint a0) const
          {
            env->setIntField(this$, fids$[fid_mixedBlockCount], a0);
          }

          jint Stats::_get_nonFloorBlockCount() const
          {
            return env->getIntField(this$, fids$[fid_nonFloorBlockCount]);
          }

          void Stats::_set_nonFloorBlockCount(jint a0) const
          {
            env->setIntField(this$, fids$[fid_nonFloorBlockCount], a0);
          }

          ::java::lang::String Stats::_get_segment() const
          {
            return ::java::lang::String(env->getObjectField(this$, fids$[fid_segment]));
          }

          jint Stats::_get_subBlocksOnlyBlockCount() const
          {
            return env->getIntField(this$, fids$[fid_subBlocksOnlyBlockCount]);
          }

          void Stats::_set_subBlocksOnlyBlockCount(jint a0) const
          {
            env->setIntField(this$, fids$[fid_subBlocksOnlyBlockCount], a0);
          }

          jint Stats::_get_termsOnlyBlockCount() const
          {
            return env->getIntField(this$, fids$[fid_termsOnlyBlockCount]);
          }

          void Stats::_set_termsOnlyBlockCount(jint a0) const
          {
            env->setIntField(this$, fids$[fid_termsOnlyBlockCount], a0);
          }

          jint Stats::_get_totalBlockCount() const
          {
            return env->getIntField(this$, fids$[fid_totalBlockCount]);
          }

          void Stats::_set_totalBlockCount(jint a0) const
          {
            env->setIntField(this$, fids$[fid_totalBlockCount], a0);
          }

          jlong Stats::_get_totalBlockOtherBytes() const
          {
            return env->getLongField(this$, fids$[fid_totalBlockOtherBytes]);
          }

          void Stats::_set_totalBlockOtherBytes(jlong a0) const
          {
            env->setLongField(this$, fids$[fid_totalBlockOtherBytes], a0);
          }

          jlong Stats::_get_totalBlockStatsBytes() const
          {
            return env->getLongField(this$, fids$[fid_totalBlockStatsBytes]);
          }

          void Stats::_set_totalBlockStatsBytes(jlong a0) const
          {
            env->setLongField(this$, fids$[fid_totalBlockStatsBytes], a0);
          }

          jlong Stats::_get_totalBlockSuffixBytes() const
          {
            return env->getLongField(this$, fids$[fid_totalBlockSuffixBytes]);
          }

          void Stats::_set_totalBlockSuffixBytes(jlong a0) const
          {
            env->setLongField(this$, fids$[fid_totalBlockSuffixBytes], a0);
          }

          jlong Stats::_get_totalTermBytes() const
          {
            return env->getLongField(this$, fids$[fid_totalTermBytes]);
          }

          void Stats::_set_totalTermBytes(jlong a0) const
          {
            env->setLongField(this$, fids$[fid_totalTermBytes], a0);
          }

          jlong Stats::_get_totalTermCount() const
          {
            return env->getLongField(this$, fids$[fid_totalTermCount]);
          }

          void Stats::_set_totalTermCount(jlong a0) const
          {
            env->setLongField(this$, fids$[fid_totalTermCount], a0);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace blocktree {
          static PyObject *t_Stats_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Stats_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Stats_toString(t_Stats *self, PyObject *args);
          static PyObject *t_Stats_get__blockCountByPrefixLen(t_Stats *self, void *data);
          static int t_Stats_set__blockCountByPrefixLen(t_Stats *self, PyObject *arg, void *data);
          static PyObject *t_Stats_get__field(t_Stats *self, void *data);
          static PyObject *t_Stats_get__floorBlockCount(t_Stats *self, void *data);
          static int t_Stats_set__floorBlockCount(t_Stats *self, PyObject *arg, void *data);
          static PyObject *t_Stats_get__floorSubBlockCount(t_Stats *self, void *data);
          static int t_Stats_set__floorSubBlockCount(t_Stats *self, PyObject *arg, void *data);
          static PyObject *t_Stats_get__indexArcCount(t_Stats *self, void *data);
          static int t_Stats_set__indexArcCount(t_Stats *self, PyObject *arg, void *data);
          static PyObject *t_Stats_get__indexNodeCount(t_Stats *self, void *data);
          static int t_Stats_set__indexNodeCount(t_Stats *self, PyObject *arg, void *data);
          static PyObject *t_Stats_get__indexNumBytes(t_Stats *self, void *data);
          static int t_Stats_set__indexNumBytes(t_Stats *self, PyObject *arg, void *data);
          static PyObject *t_Stats_get__mixedBlockCount(t_Stats *self, void *data);
          static int t_Stats_set__mixedBlockCount(t_Stats *self, PyObject *arg, void *data);
          static PyObject *t_Stats_get__nonFloorBlockCount(t_Stats *self, void *data);
          static int t_Stats_set__nonFloorBlockCount(t_Stats *self, PyObject *arg, void *data);
          static PyObject *t_Stats_get__segment(t_Stats *self, void *data);
          static PyObject *t_Stats_get__subBlocksOnlyBlockCount(t_Stats *self, void *data);
          static int t_Stats_set__subBlocksOnlyBlockCount(t_Stats *self, PyObject *arg, void *data);
          static PyObject *t_Stats_get__termsOnlyBlockCount(t_Stats *self, void *data);
          static int t_Stats_set__termsOnlyBlockCount(t_Stats *self, PyObject *arg, void *data);
          static PyObject *t_Stats_get__totalBlockCount(t_Stats *self, void *data);
          static int t_Stats_set__totalBlockCount(t_Stats *self, PyObject *arg, void *data);
          static PyObject *t_Stats_get__totalBlockOtherBytes(t_Stats *self, void *data);
          static int t_Stats_set__totalBlockOtherBytes(t_Stats *self, PyObject *arg, void *data);
          static PyObject *t_Stats_get__totalBlockStatsBytes(t_Stats *self, void *data);
          static int t_Stats_set__totalBlockStatsBytes(t_Stats *self, PyObject *arg, void *data);
          static PyObject *t_Stats_get__totalBlockSuffixBytes(t_Stats *self, void *data);
          static int t_Stats_set__totalBlockSuffixBytes(t_Stats *self, PyObject *arg, void *data);
          static PyObject *t_Stats_get__totalTermBytes(t_Stats *self, void *data);
          static int t_Stats_set__totalTermBytes(t_Stats *self, PyObject *arg, void *data);
          static PyObject *t_Stats_get__totalTermCount(t_Stats *self, void *data);
          static int t_Stats_set__totalTermCount(t_Stats *self, PyObject *arg, void *data);

          static PyGetSetDef t_Stats__fields_[] = {
            DECLARE_GETSET_FIELD(t_Stats, blockCountByPrefixLen),
            DECLARE_GET_FIELD(t_Stats, field),
            DECLARE_GETSET_FIELD(t_Stats, floorBlockCount),
            DECLARE_GETSET_FIELD(t_Stats, floorSubBlockCount),
            DECLARE_GETSET_FIELD(t_Stats, indexArcCount),
            DECLARE_GETSET_FIELD(t_Stats, indexNodeCount),
            DECLARE_GETSET_FIELD(t_Stats, indexNumBytes),
            DECLARE_GETSET_FIELD(t_Stats, mixedBlockCount),
            DECLARE_GETSET_FIELD(t_Stats, nonFloorBlockCount),
            DECLARE_GET_FIELD(t_Stats, segment),
            DECLARE_GETSET_FIELD(t_Stats, subBlocksOnlyBlockCount),
            DECLARE_GETSET_FIELD(t_Stats, termsOnlyBlockCount),
            DECLARE_GETSET_FIELD(t_Stats, totalBlockCount),
            DECLARE_GETSET_FIELD(t_Stats, totalBlockOtherBytes),
            DECLARE_GETSET_FIELD(t_Stats, totalBlockStatsBytes),
            DECLARE_GETSET_FIELD(t_Stats, totalBlockSuffixBytes),
            DECLARE_GETSET_FIELD(t_Stats, totalTermBytes),
            DECLARE_GETSET_FIELD(t_Stats, totalTermCount),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_Stats__methods_[] = {
            DECLARE_METHOD(t_Stats, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Stats, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Stats, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(Stats, t_Stats, ::java::lang::Object, Stats, abstract_init, 0, 0, t_Stats__fields_, 0, 0);

          void t_Stats::install(PyObject *module)
          {
            installType(&PY_TYPE(Stats), module, "Stats", 0);
          }

          void t_Stats::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(Stats).tp_dict, "class_", make_descriptor(Stats::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(Stats).tp_dict, "wrapfn_", make_descriptor(t_Stats::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(Stats).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_Stats_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, Stats::initializeClass, 1)))
              return NULL;
            return t_Stats::wrap_Object(Stats(((t_Stats *) arg)->object.this$));
          }
          static PyObject *t_Stats_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, Stats::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_Stats_toString(t_Stats *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(&PY_TYPE(Stats), (PyObject *) self, "toString", args, 2);
          }

          static PyObject *t_Stats_get__blockCountByPrefixLen(t_Stats *self, void *data)
          {
            JArray< jint > value((jobject) NULL);
            OBJ_CALL(value = self->object._get_blockCountByPrefixLen());
            return value.wrap();
          }
          static int t_Stats_set__blockCountByPrefixLen(t_Stats *self, PyObject *arg, void *data)
          {
            JArray< jint > value((jobject) NULL);
            if (!parseArg(arg, "[I", &value))
            {
              INT_CALL(self->object._set_blockCountByPrefixLen(value));
              return 0;
            }
            PyErr_SetArgsError((PyObject *) self, "blockCountByPrefixLen", arg);
            return -1;
          }

          static PyObject *t_Stats_get__field(t_Stats *self, void *data)
          {
            ::java::lang::String value((jobject) NULL);
            OBJ_CALL(value = self->object._get_field());
            return j2p(value);
          }

          static PyObject *t_Stats_get__floorBlockCount(t_Stats *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object._get_floorBlockCount());
            return PyInt_FromLong((long) value);
          }
          static int t_Stats_set__floorBlockCount(t_Stats *self, PyObject *arg, void *data)
          {
            jint value;
            if (!parseArg(arg, "I", &value))
            {
              INT_CALL(self->object._set_floorBlockCount(value));
              return 0;
            }
            PyErr_SetArgsError((PyObject *) self, "floorBlockCount", arg);
            return -1;
          }

          static PyObject *t_Stats_get__floorSubBlockCount(t_Stats *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object._get_floorSubBlockCount());
            return PyInt_FromLong((long) value);
          }
          static int t_Stats_set__floorSubBlockCount(t_Stats *self, PyObject *arg, void *data)
          {
            jint value;
            if (!parseArg(arg, "I", &value))
            {
              INT_CALL(self->object._set_floorSubBlockCount(value));
              return 0;
            }
            PyErr_SetArgsError((PyObject *) self, "floorSubBlockCount", arg);
            return -1;
          }

          static PyObject *t_Stats_get__indexArcCount(t_Stats *self, void *data)
          {
            jlong value;
            OBJ_CALL(value = self->object._get_indexArcCount());
            return PyLong_FromLongLong((PY_LONG_LONG) value);
          }
          static int t_Stats_set__indexArcCount(t_Stats *self, PyObject *arg, void *data)
          {
            jlong value;
            if (!parseArg(arg, "J", &value))
            {
              INT_CALL(self->object._set_indexArcCount(value));
              return 0;
            }
            PyErr_SetArgsError((PyObject *) self, "indexArcCount", arg);
            return -1;
          }

          static PyObject *t_Stats_get__indexNodeCount(t_Stats *self, void *data)
          {
            jlong value;
            OBJ_CALL(value = self->object._get_indexNodeCount());
            return PyLong_FromLongLong((PY_LONG_LONG) value);
          }
          static int t_Stats_set__indexNodeCount(t_Stats *self, PyObject *arg, void *data)
          {
            jlong value;
            if (!parseArg(arg, "J", &value))
            {
              INT_CALL(self->object._set_indexNodeCount(value));
              return 0;
            }
            PyErr_SetArgsError((PyObject *) self, "indexNodeCount", arg);
            return -1;
          }

          static PyObject *t_Stats_get__indexNumBytes(t_Stats *self, void *data)
          {
            jlong value;
            OBJ_CALL(value = self->object._get_indexNumBytes());
            return PyLong_FromLongLong((PY_LONG_LONG) value);
          }
          static int t_Stats_set__indexNumBytes(t_Stats *self, PyObject *arg, void *data)
          {
            jlong value;
            if (!parseArg(arg, "J", &value))
            {
              INT_CALL(self->object._set_indexNumBytes(value));
              return 0;
            }
            PyErr_SetArgsError((PyObject *) self, "indexNumBytes", arg);
            return -1;
          }

          static PyObject *t_Stats_get__mixedBlockCount(t_Stats *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object._get_mixedBlockCount());
            return PyInt_FromLong((long) value);
          }
          static int t_Stats_set__mixedBlockCount(t_Stats *self, PyObject *arg, void *data)
          {
            jint value;
            if (!parseArg(arg, "I", &value))
            {
              INT_CALL(self->object._set_mixedBlockCount(value));
              return 0;
            }
            PyErr_SetArgsError((PyObject *) self, "mixedBlockCount", arg);
            return -1;
          }

          static PyObject *t_Stats_get__nonFloorBlockCount(t_Stats *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object._get_nonFloorBlockCount());
            return PyInt_FromLong((long) value);
          }
          static int t_Stats_set__nonFloorBlockCount(t_Stats *self, PyObject *arg, void *data)
          {
            jint value;
            if (!parseArg(arg, "I", &value))
            {
              INT_CALL(self->object._set_nonFloorBlockCount(value));
              return 0;
            }
            PyErr_SetArgsError((PyObject *) self, "nonFloorBlockCount", arg);
            return -1;
          }

          static PyObject *t_Stats_get__segment(t_Stats *self, void *data)
          {
            ::java::lang::String value((jobject) NULL);
            OBJ_CALL(value = self->object._get_segment());
            return j2p(value);
          }

          static PyObject *t_Stats_get__subBlocksOnlyBlockCount(t_Stats *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object._get_subBlocksOnlyBlockCount());
            return PyInt_FromLong((long) value);
          }
          static int t_Stats_set__subBlocksOnlyBlockCount(t_Stats *self, PyObject *arg, void *data)
          {
            jint value;
            if (!parseArg(arg, "I", &value))
            {
              INT_CALL(self->object._set_subBlocksOnlyBlockCount(value));
              return 0;
            }
            PyErr_SetArgsError((PyObject *) self, "subBlocksOnlyBlockCount", arg);
            return -1;
          }

          static PyObject *t_Stats_get__termsOnlyBlockCount(t_Stats *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object._get_termsOnlyBlockCount());
            return PyInt_FromLong((long) value);
          }
          static int t_Stats_set__termsOnlyBlockCount(t_Stats *self, PyObject *arg, void *data)
          {
            jint value;
            if (!parseArg(arg, "I", &value))
            {
              INT_CALL(self->object._set_termsOnlyBlockCount(value));
              return 0;
            }
            PyErr_SetArgsError((PyObject *) self, "termsOnlyBlockCount", arg);
            return -1;
          }

          static PyObject *t_Stats_get__totalBlockCount(t_Stats *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object._get_totalBlockCount());
            return PyInt_FromLong((long) value);
          }
          static int t_Stats_set__totalBlockCount(t_Stats *self, PyObject *arg, void *data)
          {
            jint value;
            if (!parseArg(arg, "I", &value))
            {
              INT_CALL(self->object._set_totalBlockCount(value));
              return 0;
            }
            PyErr_SetArgsError((PyObject *) self, "totalBlockCount", arg);
            return -1;
          }

          static PyObject *t_Stats_get__totalBlockOtherBytes(t_Stats *self, void *data)
          {
            jlong value;
            OBJ_CALL(value = self->object._get_totalBlockOtherBytes());
            return PyLong_FromLongLong((PY_LONG_LONG) value);
          }
          static int t_Stats_set__totalBlockOtherBytes(t_Stats *self, PyObject *arg, void *data)
          {
            jlong value;
            if (!parseArg(arg, "J", &value))
            {
              INT_CALL(self->object._set_totalBlockOtherBytes(value));
              return 0;
            }
            PyErr_SetArgsError((PyObject *) self, "totalBlockOtherBytes", arg);
            return -1;
          }

          static PyObject *t_Stats_get__totalBlockStatsBytes(t_Stats *self, void *data)
          {
            jlong value;
            OBJ_CALL(value = self->object._get_totalBlockStatsBytes());
            return PyLong_FromLongLong((PY_LONG_LONG) value);
          }
          static int t_Stats_set__totalBlockStatsBytes(t_Stats *self, PyObject *arg, void *data)
          {
            jlong value;
            if (!parseArg(arg, "J", &value))
            {
              INT_CALL(self->object._set_totalBlockStatsBytes(value));
              return 0;
            }
            PyErr_SetArgsError((PyObject *) self, "totalBlockStatsBytes", arg);
            return -1;
          }

          static PyObject *t_Stats_get__totalBlockSuffixBytes(t_Stats *self, void *data)
          {
            jlong value;
            OBJ_CALL(value = self->object._get_totalBlockSuffixBytes());
            return PyLong_FromLongLong((PY_LONG_LONG) value);
          }
          static int t_Stats_set__totalBlockSuffixBytes(t_Stats *self, PyObject *arg, void *data)
          {
            jlong value;
            if (!parseArg(arg, "J", &value))
            {
              INT_CALL(self->object._set_totalBlockSuffixBytes(value));
              return 0;
            }
            PyErr_SetArgsError((PyObject *) self, "totalBlockSuffixBytes", arg);
            return -1;
          }

          static PyObject *t_Stats_get__totalTermBytes(t_Stats *self, void *data)
          {
            jlong value;
            OBJ_CALL(value = self->object._get_totalTermBytes());
            return PyLong_FromLongLong((PY_LONG_LONG) value);
          }
          static int t_Stats_set__totalTermBytes(t_Stats *self, PyObject *arg, void *data)
          {
            jlong value;
            if (!parseArg(arg, "J", &value))
            {
              INT_CALL(self->object._set_totalTermBytes(value));
              return 0;
            }
            PyErr_SetArgsError((PyObject *) self, "totalTermBytes", arg);
            return -1;
          }

          static PyObject *t_Stats_get__totalTermCount(t_Stats *self, void *data)
          {
            jlong value;
            OBJ_CALL(value = self->object._get_totalTermCount());
            return PyLong_FromLongLong((PY_LONG_LONG) value);
          }
          static int t_Stats_set__totalTermCount(t_Stats *self, PyObject *arg, void *data)
          {
            jlong value;
            if (!parseArg(arg, "J", &value))
            {
              INT_CALL(self->object._set_totalTermCount(value));
              return 0;
            }
            PyErr_SetArgsError((PyObject *) self, "totalTermCount", arg);
            return -1;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/FieldInfo.h"
#include "org/apache/lucene/index/FieldInfo$IndexOptions.h"
#include "org/apache/lucene/index/FieldInfo$DocValuesType.h"
#include "java/lang/String.h"
#include "java/util/Map.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *FieldInfo::class$ = NULL;
        jmethodID *FieldInfo::mids$ = NULL;
        jfieldID *FieldInfo::fids$ = NULL;
        bool FieldInfo::live$ = false;

        jclass FieldInfo::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/FieldInfo");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_09a7b3ac] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;ZIZZZLorg/apache/lucene/index/FieldInfo$IndexOptions;Lorg/apache/lucene/index/FieldInfo$DocValuesType;Lorg/apache/lucene/index/FieldInfo$DocValuesType;JLjava/util/Map;)V");
            mids$[mid_attributes_db60befd] = env->getMethodID(cls, "attributes", "()Ljava/util/Map;");
            mids$[mid_getAttribute_97a5258f] = env->getMethodID(cls, "getAttribute", "(Ljava/lang/String;)Ljava/lang/String;");
            mids$[mid_getDocValuesGen_54c6a17a] = env->getMethodID(cls, "getDocValuesGen", "()J");
            mids$[mid_getDocValuesType_db3dc573] = env->getMethodID(cls, "getDocValuesType", "()Lorg/apache/lucene/index/FieldInfo$DocValuesType;");
            mids$[mid_getIndexOptions_e1b704de] = env->getMethodID(cls, "getIndexOptions", "()Lorg/apache/lucene/index/FieldInfo$IndexOptions;");
            mids$[mid_getNormType_db3dc573] = env->getMethodID(cls, "getNormType", "()Lorg/apache/lucene/index/FieldInfo$DocValuesType;");
            mids$[mid_hasDocValues_54c6a16a] = env->getMethodID(cls, "hasDocValues", "()Z");
            mids$[mid_hasNorms_54c6a16a] = env->getMethodID(cls, "hasNorms", "()Z");
            mids$[mid_hasPayloads_54c6a16a] = env->getMethodID(cls, "hasPayloads", "()Z");
            mids$[mid_hasVectors_54c6a16a] = env->getMethodID(cls, "hasVectors", "()Z");
            mids$[mid_isIndexed_54c6a16a] = env->getMethodID(cls, "isIndexed", "()Z");
            mids$[mid_omitsNorms_54c6a16a] = env->getMethodID(cls, "omitsNorms", "()Z");
            mids$[mid_putAttribute_aacea7e9] = env->getMethodID(cls, "putAttribute", "(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;");

            fids$ = new jfieldID[max_fid];
            fids$[fid_name] = env->getFieldID(cls, "name", "Ljava/lang/String;");
            fids$[fid_number] = env->getFieldID(cls, "number", "I");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        FieldInfo::FieldInfo(const ::java::lang::String & a0, jboolean a1, jint a2, jboolean a3, jboolean a4, jboolean a5, const ::org::apache::lucene::index::FieldInfo$IndexOptions & a6, const ::org::apache::lucene::index::FieldInfo$DocValuesType & a7, const ::org::apache::lucene::index::FieldInfo$DocValuesType & a8, jlong a9, const ::java::util::Map & a10) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_09a7b3ac, a0.this$, a1, a2, a3, a4, a5, a6.this$, a7.this$, a8.this$, a9, a10.this$)) {}

        ::java::util::Map FieldInfo::attributes() const
        {
          return ::java::util::Map(env->callObjectMethod(this$, mids$[mid_attributes_db60befd]));
        }

        ::java::lang::String FieldInfo::getAttribute(const ::java::lang::String & a0) const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getAttribute_97a5258f], a0.this$));
        }

        jlong FieldInfo::getDocValuesGen() const
        {
          return env->callLongMethod(this$, mids$[mid_getDocValuesGen_54c6a17a]);
        }

        ::org::apache::lucene::index::FieldInfo$DocValuesType FieldInfo::getDocValuesType() const
        {
          return ::org::apache::lucene::index::FieldInfo$DocValuesType(env->callObjectMethod(this$, mids$[mid_getDocValuesType_db3dc573]));
        }

        ::org::apache::lucene::index::FieldInfo$IndexOptions FieldInfo::getIndexOptions() const
        {
          return ::org::apache::lucene::index::FieldInfo$IndexOptions(env->callObjectMethod(this$, mids$[mid_getIndexOptions_e1b704de]));
        }

        ::org::apache::lucene::index::FieldInfo$DocValuesType FieldInfo::getNormType() const
        {
          return ::org::apache::lucene::index::FieldInfo$DocValuesType(env->callObjectMethod(this$, mids$[mid_getNormType_db3dc573]));
        }

        jboolean FieldInfo::hasDocValues() const
        {
          return env->callBooleanMethod(this$, mids$[mid_hasDocValues_54c6a16a]);
        }

        jboolean FieldInfo::hasNorms() const
        {
          return env->callBooleanMethod(this$, mids$[mid_hasNorms_54c6a16a]);
        }

        jboolean FieldInfo::hasPayloads() const
        {
          return env->callBooleanMethod(this$, mids$[mid_hasPayloads_54c6a16a]);
        }

        jboolean FieldInfo::hasVectors() const
        {
          return env->callBooleanMethod(this$, mids$[mid_hasVectors_54c6a16a]);
        }

        jboolean FieldInfo::isIndexed() const
        {
          return env->callBooleanMethod(this$, mids$[mid_isIndexed_54c6a16a]);
        }

        jboolean FieldInfo::omitsNorms() const
        {
          return env->callBooleanMethod(this$, mids$[mid_omitsNorms_54c6a16a]);
        }

        ::java::lang::String FieldInfo::putAttribute(const ::java::lang::String & a0, const ::java::lang::String & a1) const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_putAttribute_aacea7e9], a0.this$, a1.this$));
        }

        ::java::lang::String FieldInfo::_get_name() const
        {
          return ::java::lang::String(env->getObjectField(this$, fids$[fid_name]));
        }

        jint FieldInfo::_get_number() const
        {
          return env->getIntField(this$, fids$[fid_number]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_FieldInfo_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FieldInfo_instance_(PyTypeObject *type, PyObject *arg);
        static int t_FieldInfo_init_(t_FieldInfo *self, PyObject *args, PyObject *kwds);
        static PyObject *t_FieldInfo_attributes(t_FieldInfo *self);
        static PyObject *t_FieldInfo_getAttribute(t_FieldInfo *self, PyObject *arg);
        static PyObject *t_FieldInfo_getDocValuesGen(t_FieldInfo *self);
        static PyObject *t_FieldInfo_getDocValuesType(t_FieldInfo *self);
        static PyObject *t_FieldInfo_getIndexOptions(t_FieldInfo *self);
        static PyObject *t_FieldInfo_getNormType(t_FieldInfo *self);
        static PyObject *t_FieldInfo_hasDocValues(t_FieldInfo *self);
        static PyObject *t_FieldInfo_hasNorms(t_FieldInfo *self);
        static PyObject *t_FieldInfo_hasPayloads(t_FieldInfo *self);
        static PyObject *t_FieldInfo_hasVectors(t_FieldInfo *self);
        static PyObject *t_FieldInfo_isIndexed(t_FieldInfo *self);
        static PyObject *t_FieldInfo_omitsNorms(t_FieldInfo *self);
        static PyObject *t_FieldInfo_putAttribute(t_FieldInfo *self, PyObject *args);
        static PyObject *t_FieldInfo_get__name(t_FieldInfo *self, void *data);
        static PyObject *t_FieldInfo_get__number(t_FieldInfo *self, void *data);

        static PyObject *t_FieldInfo_get__docValuesGen(t_FieldInfo *self, void *data);
        static PyObject *t_FieldInfo_get__docValuesType(t_FieldInfo *self, void *data);
        static PyObject *t_FieldInfo_get__indexOptions(t_FieldInfo *self, void *data);
        static PyObject *t_FieldInfo_get__indexed(t_FieldInfo *self, void *data);
        static PyObject *t_FieldInfo_get__normType(t_FieldInfo *self, void *data);
        static PyGetSetDef t_FieldInfo__fields_[] = {
          DECLARE_GET_FIELD(t_FieldInfo, name),
          DECLARE_GET_FIELD(t_FieldInfo, number),
          DECLARE_GET_FIELD(t_FieldInfo, docValuesGen),
          DECLARE_GET_FIELD(t_FieldInfo, docValuesType),
          DECLARE_GET_FIELD(t_FieldInfo, indexOptions),
          DECLARE_GET_FIELD(t_FieldInfo, indexed),
          DECLARE_GET_FIELD(t_FieldInfo, normType),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_FieldInfo__methods_[] = {
          DECLARE_METHOD(t_FieldInfo, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FieldInfo, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FieldInfo, attributes, METH_NOARGS),
          DECLARE_METHOD(t_FieldInfo, getAttribute, METH_O),
          DECLARE_METHOD(t_FieldInfo, getDocValuesGen, METH_NOARGS),
          DECLARE_METHOD(t_FieldInfo, getDocValuesType, METH_NOARGS),
          DECLARE_METHOD(t_FieldInfo, getIndexOptions, METH_NOARGS),
          DECLARE_METHOD(t_FieldInfo, getNormType, METH_NOARGS),
          DECLARE_METHOD(t_FieldInfo, hasDocValues, METH_NOARGS),
          DECLARE_METHOD(t_FieldInfo, hasNorms, METH_NOARGS),
          DECLARE_METHOD(t_FieldInfo, hasPayloads, METH_NOARGS),
          DECLARE_METHOD(t_FieldInfo, hasVectors, METH_NOARGS),
          DECLARE_METHOD(t_FieldInfo, isIndexed, METH_NOARGS),
          DECLARE_METHOD(t_FieldInfo, omitsNorms, METH_NOARGS),
          DECLARE_METHOD(t_FieldInfo, putAttribute, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(FieldInfo, t_FieldInfo, ::java::lang::Object, FieldInfo, t_FieldInfo_init_, 0, 0, t_FieldInfo__fields_, 0, 0);

        void t_FieldInfo::install(PyObject *module)
        {
          installType(&PY_TYPE(FieldInfo), module, "FieldInfo", 0);
          PyDict_SetItemString(PY_TYPE(FieldInfo).tp_dict, "DocValuesType", make_descriptor(&PY_TYPE(FieldInfo$DocValuesType)));
          PyDict_SetItemString(PY_TYPE(FieldInfo).tp_dict, "IndexOptions", make_descriptor(&PY_TYPE(FieldInfo$IndexOptions)));
        }

        void t_FieldInfo::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(FieldInfo).tp_dict, "class_", make_descriptor(FieldInfo::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(FieldInfo).tp_dict, "wrapfn_", make_descriptor(t_FieldInfo::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(FieldInfo).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_FieldInfo_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, FieldInfo::initializeClass, 1)))
            return NULL;
          return t_FieldInfo::wrap_Object(FieldInfo(((t_FieldInfo *) arg)->object.this$));
        }
        static PyObject *t_FieldInfo_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, FieldInfo::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_FieldInfo_init_(t_FieldInfo *self, PyObject *args, PyObject *kwds)
        {
          ::java::lang::String a0((jobject) NULL);
          jboolean a1;
          jint a2;
          jboolean a3;
          jboolean a4;
          jboolean a5;
          ::org::apache::lucene::index::FieldInfo$IndexOptions a6((jobject) NULL);
          PyTypeObject **p6;
          ::org::apache::lucene::index::FieldInfo$DocValuesType a7((jobject) NULL);
          PyTypeObject **p7;
          ::org::apache::lucene::index::FieldInfo$DocValuesType a8((jobject) NULL);
          PyTypeObject **p8;
          jlong a9;
          ::java::util::Map a10((jobject) NULL);
          PyTypeObject **p10;
          FieldInfo object((jobject) NULL);

          if (!parseArgs(args, "sZIZZZKKKJK", ::org::apache::lucene::index::FieldInfo$IndexOptions::initializeClass, ::org::apache::lucene::index::FieldInfo$DocValuesType::initializeClass, ::org::apache::lucene::index::FieldInfo$DocValuesType::initializeClass, ::java::util::Map::initializeClass, &a0, &a1, &a2, &a3, &a4, &a5, &a6, &p6, ::org::apache::lucene::index::t_FieldInfo$IndexOptions::parameters_, &a7, &p7, ::org::apache::lucene::index::t_FieldInfo$DocValuesType::parameters_, &a8, &p8, ::org::apache::lucene::index::t_FieldInfo$DocValuesType::parameters_, &a9, &a10, &p10, ::java::util::t_Map::parameters_))
          {
            INT_CALL(object = FieldInfo(a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_FieldInfo_attributes(t_FieldInfo *self)
        {
          ::java::util::Map result((jobject) NULL);
          OBJ_CALL(result = self->object.attributes());
          return ::java::util::t_Map::wrap_Object(result, &::java::lang::PY_TYPE(String), &::java::lang::PY_TYPE(String));
        }

        static PyObject *t_FieldInfo_getAttribute(t_FieldInfo *self, PyObject *arg)
        {
          ::java::lang::String a0((jobject) NULL);
          ::java::lang::String result((jobject) NULL);

          if (!parseArg(arg, "s", &a0))
          {
            OBJ_CALL(result = self->object.getAttribute(a0));
            return j2p(result);
          }

          PyErr_SetArgsError((PyObject *) self, "getAttribute", arg);
          return NULL;
        }

        static PyObject *t_FieldInfo_getDocValuesGen(t_FieldInfo *self)
        {
          jlong result;
          OBJ_CALL(result = self->object.getDocValuesGen());
          return PyLong_FromLongLong((PY_LONG_LONG) result);
        }

        static PyObject *t_FieldInfo_getDocValuesType(t_FieldInfo *self)
        {
          ::org::apache::lucene::index::FieldInfo$DocValuesType result((jobject) NULL);
          OBJ_CALL(result = self->object.getDocValuesType());
          return ::org::apache::lucene::index::t_FieldInfo$DocValuesType::wrap_Object(result);
        }

        static PyObject *t_FieldInfo_getIndexOptions(t_FieldInfo *self)
        {
          ::org::apache::lucene::index::FieldInfo$IndexOptions result((jobject) NULL);
          OBJ_CALL(result = self->object.getIndexOptions());
          return ::org::apache::lucene::index::t_FieldInfo$IndexOptions::wrap_Object(result);
        }

        static PyObject *t_FieldInfo_getNormType(t_FieldInfo *self)
        {
          ::org::apache::lucene::index::FieldInfo$DocValuesType result((jobject) NULL);
          OBJ_CALL(result = self->object.getNormType());
          return ::org::apache::lucene::index::t_FieldInfo$DocValuesType::wrap_Object(result);
        }

        static PyObject *t_FieldInfo_hasDocValues(t_FieldInfo *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.hasDocValues());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_FieldInfo_hasNorms(t_FieldInfo *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.hasNorms());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_FieldInfo_hasPayloads(t_FieldInfo *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.hasPayloads());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_FieldInfo_hasVectors(t_FieldInfo *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.hasVectors());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_FieldInfo_isIndexed(t_FieldInfo *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.isIndexed());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_FieldInfo_omitsNorms(t_FieldInfo *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.omitsNorms());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_FieldInfo_putAttribute(t_FieldInfo *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::java::lang::String a1((jobject) NULL);
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, "ss", &a0, &a1))
          {
            OBJ_CALL(result = self->object.putAttribute(a0, a1));
            return j2p(result);
          }

          PyErr_SetArgsError((PyObject *) self, "putAttribute", args);
          return NULL;
        }

        static PyObject *t_FieldInfo_get__name(t_FieldInfo *self, void *data)
        {
          ::java::lang::String value((jobject) NULL);
          OBJ_CALL(value = self->object._get_name());
          return j2p(value);
        }

        static PyObject *t_FieldInfo_get__number(t_FieldInfo *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object._get_number());
          return PyInt_FromLong((long) value);
        }

        static PyObject *t_FieldInfo_get__docValuesGen(t_FieldInfo *self, void *data)
        {
          jlong value;
          OBJ_CALL(value = self->object.getDocValuesGen());
          return PyLong_FromLongLong((PY_LONG_LONG) value);
        }

        static PyObject *t_FieldInfo_get__docValuesType(t_FieldInfo *self, void *data)
        {
          ::org::apache::lucene::index::FieldInfo$DocValuesType value((jobject) NULL);
          OBJ_CALL(value = self->object.getDocValuesType());
          return ::org::apache::lucene::index::t_FieldInfo$DocValuesType::wrap_Object(value);
        }

        static PyObject *t_FieldInfo_get__indexOptions(t_FieldInfo *self, void *data)
        {
          ::org::apache::lucene::index::FieldInfo$IndexOptions value((jobject) NULL);
          OBJ_CALL(value = self->object.getIndexOptions());
          return ::org::apache::lucene::index::t_FieldInfo$IndexOptions::wrap_Object(value);
        }

        static PyObject *t_FieldInfo_get__indexed(t_FieldInfo *self, void *data)
        {
          jboolean value;
          OBJ_CALL(value = self->object.isIndexed());
          Py_RETURN_BOOL(value);
        }

        static PyObject *t_FieldInfo_get__normType(t_FieldInfo *self, void *data)
        {
          ::org::apache::lucene::index::FieldInfo$DocValuesType value((jobject) NULL);
          OBJ_CALL(value = self->object.getNormType());
          return ::org::apache::lucene::index::t_FieldInfo$DocValuesType::wrap_Object(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/ar/ArabicNormalizationFilterFactory.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "org/apache/lucene/analysis/util/AbstractAnalysisFactory.h"
#include "org/apache/lucene/analysis/util/MultiTermAwareComponent.h"
#include "java/lang/Class.h"
#include "java/util/Map.h"
#include "java/lang/String.h"
#include "org/apache/lucene/analysis/ar/ArabicNormalizationFilter.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ar {

          ::java::lang::Class *ArabicNormalizationFilterFactory::class$ = NULL;
          jmethodID *ArabicNormalizationFilterFactory::mids$ = NULL;
          bool ArabicNormalizationFilterFactory::live$ = false;

          jclass ArabicNormalizationFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/ar/ArabicNormalizationFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4c9e2b1c] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_4e13fbb2] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/ar/ArabicNormalizationFilter;");
              mids$[mid_getMultiTermComponent_0a3f1d72] = env->getMethodID(cls, "getMultiTermComponent", "()Lorg/apache/lucene/analysis/util/AbstractAnalysisFactory;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ArabicNormalizationFilterFactory::ArabicNormalizationFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_4c9e2b1c, a0.this$)) {}

          ::org::apache::lucene::analysis::ar::ArabicNormalizationFilter ArabicNormalizationFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::ar::ArabicNormalizationFilter(env->callObjectMethod(this$, mids$[mid_create_4e13fbb2], a0.this$));
          }

          ::org::apache::lucene::analysis::util::AbstractAnalysisFactory ArabicNormalizationFilterFactory::getMultiTermComponent() const
          {
            return ::org::apache::lucene::analysis::util::AbstractAnalysisFactory(env->callObjectMethod(this$, mids$[mid_getMultiTermComponent_0a3f1d72]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ar {
          static PyObject *t_ArabicNormalizationFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_ArabicNormalizationFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_ArabicNormalizationFilterFactory_init_(t_ArabicNormalizationFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_ArabicNormalizationFilterFactory_create(t_ArabicNormalizationFilterFactory *self, PyObject *args);
          static PyObject *t_ArabicNormalizationFilterFactory_getMultiTermComponent(t_ArabicNormalizationFilterFactory *self);
          static PyObject *t_ArabicNormalizationFilterFactory_get__multiTermComponent(t_ArabicNormalizationFilterFactory *self, void *data);
          static PyGetSetDef t_ArabicNormalizationFilterFactory__fields_[] = {
            DECLARE_GET_FIELD(t_ArabicNormalizationFilterFactory, multiTermComponent),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_ArabicNormalizationFilterFactory__methods_[] = {
            DECLARE_METHOD(t_ArabicNormalizationFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ArabicNormalizationFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ArabicNormalizationFilterFactory, create, METH_VARARGS),
            DECLARE_METHOD(t_ArabicNormalizationFilterFactory, getMultiTermComponent, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(ArabicNormalizationFilterFactory, t_ArabicNormalizationFilterFactory, ::org::apache::lucene::analysis::util::TokenFilterFactory, ArabicNormalizationFilterFactory, t_ArabicNormalizationFilterFactory_init_, 0, 0, t_ArabicNormalizationFilterFactory__fields_, 0, 0);

          void t_ArabicNormalizationFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(ArabicNormalizationFilterFactory), module, "ArabicNormalizationFilterFactory", 0);
          }

          void t_ArabicNormalizationFilterFactory::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(ArabicNormalizationFilterFactory).tp_dict, "class_", make_descriptor(ArabicNormalizationFilterFactory::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(ArabicNormalizationFilterFactory).tp_dict, "wrapfn_", make_descriptor(t_ArabicNormalizationFilterFactory::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(ArabicNormalizationFilterFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_ArabicNormalizationFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, ArabicNormalizationFilterFactory::initializeClass, 1)))
              return NULL;
            return t_ArabicNormalizationFilterFactory::wrap_Object(ArabicNormalizationFilterFactory(((t_ArabicNormalizationFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_ArabicNormalizationFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, ArabicNormalizationFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_ArabicNormalizationFilterFactory_init_(t_ArabicNormalizationFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            ArabicNormalizationFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = ArabicNormalizationFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_ArabicNormalizationFilterFactory_create(t_ArabicNormalizationFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::ar::ArabicNormalizationFilter result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::ar::t_ArabicNormalizationFilter::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(ArabicNormalizationFilterFactory), (PyObject *) self, "create", args, 2);
          }

          static PyObject *t_ArabicNormalizationFilterFactory_getMultiTermComponent(t_ArabicNormalizationFilterFactory *self)
          {
            ::org::apache::lucene::analysis::util::AbstractAnalysisFactory result((jobject) NULL);
            OBJ_CALL(result = self->object.getMultiTermComponent());
            return ::org::apache::lucene::analysis::util::t_AbstractAnalysisFactory::wrap_Object(result);
          }

          static PyObject *t_ArabicNormalizationFilterFactory_get__multiTermComponent(t_ArabicNormalizationFilterFactory *self, void *data)
          {
            ::org::apache::lucene::analysis::util::AbstractAnalysisFactory value((jobject) NULL);
            OBJ_CALL(value = self->object.getMultiTermComponent());
            return ::org::apache::lucene::analysis::util::t_AbstractAnalysisFactory::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/standard/builders/FuzzyQueryNodeBuilder.h"
#include "org/apache/lucene/queryparser/flexible/core/QueryNodeException.h"
#include "org/apache/lucene/search/FuzzyQuery.h"
#include "org/apache/lucene/queryparser/flexible/standard/builders/StandardQueryBuilder.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/QueryNode.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace builders {

              ::java::lang::Class *FuzzyQueryNodeBuilder::class$ = NULL;
              jmethodID *FuzzyQueryNodeBuilder::mids$ = NULL;
              bool FuzzyQueryNodeBuilder::live$ = false;

              jclass FuzzyQueryNodeBuilder::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/standard/builders/FuzzyQueryNodeBuilder");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
                  mids$[mid_build_0622d624] = env->getMethodID(cls, "build", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;)Lorg/apache/lucene/search/FuzzyQuery;");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              FuzzyQueryNodeBuilder::FuzzyQueryNodeBuilder() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

              ::org::apache::lucene::search::FuzzyQuery FuzzyQueryNodeBuilder::build(const ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode & a0) const
              {
                return ::org::apache::lucene::search::FuzzyQuery(env->callObjectMethod(this$, mids$[mid_build_0622d624], a0.this$));
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace builders {
              static PyObject *t_FuzzyQueryNodeBuilder_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_FuzzyQueryNodeBuilder_instance_(PyTypeObject *type, PyObject *arg);
              static int t_FuzzyQueryNodeBuilder_init_(t_FuzzyQueryNodeBuilder *self, PyObject *args, PyObject *kwds);
              static PyObject *t_FuzzyQueryNodeBuilder_build(t_FuzzyQueryNodeBuilder *self, PyObject *arg);

              static PyMethodDef t_FuzzyQueryNodeBuilder__methods_[] = {
                DECLARE_METHOD(t_FuzzyQueryNodeBuilder, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_FuzzyQueryNodeBuilder, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_FuzzyQueryNodeBuilder, build, METH_O),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(FuzzyQueryNodeBuilder, t_FuzzyQueryNodeBuilder, ::java::lang::Object, FuzzyQueryNodeBuilder, t_FuzzyQueryNodeBuilder_init_, 0, 0, 0, 0, 0);

              void t_FuzzyQueryNodeBuilder::install(PyObject *module)
              {
                installType(&PY_TYPE(FuzzyQueryNodeBuilder), module, "FuzzyQueryNodeBuilder", 0);
              }

              void t_FuzzyQueryNodeBuilder::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(FuzzyQueryNodeBuilder).tp_dict, "class_", make_descriptor(FuzzyQueryNodeBuilder::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(FuzzyQueryNodeBuilder).tp_dict, "wrapfn_", make_descriptor(t_FuzzyQueryNodeBuilder::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(FuzzyQueryNodeBuilder).tp_dict, "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_FuzzyQueryNodeBuilder_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, FuzzyQueryNodeBuilder::initializeClass, 1)))
                  return NULL;
                return t_FuzzyQueryNodeBuilder::wrap_Object(FuzzyQueryNodeBuilder(((t_FuzzyQueryNodeBuilder *) arg)->object.this$));
              }
              static PyObject *t_FuzzyQueryNodeBuilder_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, FuzzyQueryNodeBuilder::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_FuzzyQueryNodeBuilder_init_(t_FuzzyQueryNodeBuilder *self, PyObject *args, PyObject *kwds)
              {
                FuzzyQueryNodeBuilder object((jobject) NULL);

                INT_CALL(object = FuzzyQueryNodeBuilder());
                self->object = object;

                return 0;
              }

              static PyObject *t_FuzzyQueryNodeBuilder_build(t_FuzzyQueryNodeBuilder *self, PyObject *arg)
              {
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode a0((jobject) NULL);
                ::org::apache::lucene::search::FuzzyQuery result((jobject) NULL);

                if (!parseArg(arg, "k", ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode::initializeClass, &a0))
                {
                  OBJ_CALL(result = self->object.build(a0));
                  return ::org::apache::lucene::search::t_FuzzyQuery::wrap_Object(result);
                }

                PyErr_SetArgsError((PyObject *) self, "build", arg);
                return NULL;
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/MappingMultiDocsEnum.h"
#include "org/apache/lucene/index/MultiDocsEnum$EnumWithSlice.h"
#include "org/apache/lucene/index/MergeState.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {

        ::java::lang::Class *MappingMultiDocsEnum::class$ = NULL;
        jmethodID *MappingMultiDocsEnum::mids$ = NULL;
        bool MappingMultiDocsEnum::live$ = false;

        jclass MappingMultiDocsEnum::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/MappingMultiDocsEnum");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_advance_39c7bd23] = env->getMethodID(cls, "advance", "(I)I");
            mids$[mid_cost_54c6a17a] = env->getMethodID(cls, "cost", "()J");
            mids$[mid_docID_54c6a179] = env->getMethodID(cls, "docID", "()I");
            mids$[mid_freq_54c6a179] = env->getMethodID(cls, "freq", "()I");
            mids$[mid_getNumSubs_54c6a179] = env->getMethodID(cls, "getNumSubs", "()I");
            mids$[mid_getSubs_1bdfab69] = env->getMethodID(cls, "getSubs", "()[Lorg/apache/lucene/index/MultiDocsEnum$EnumWithSlice;");
            mids$[mid_nextDoc_54c6a179] = env->getMethodID(cls, "nextDoc", "()I");
            mids$[mid_setMergeState_fd0cfdf4] = env->getMethodID(cls, "setMergeState", "(Lorg/apache/lucene/index/MergeState;)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        MappingMultiDocsEnum::MappingMultiDocsEnum() : ::org::apache::lucene::index::DocsEnum(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        jint MappingMultiDocsEnum::advance(jint a0) const
        {
          return env->callIntMethod(this$, mids$[mid_advance_39c7bd23], a0);
        }

        jlong MappingMultiDocsEnum::cost() const
        {
          return env->callLongMethod(this$, mids$[mid_cost_54c6a17a]);
        }

        jint MappingMultiDocsEnum::docID() const
        {
          return env->callIntMethod(this$, mids$[mid_docID_54c6a179]);
        }

        jint MappingMultiDocsEnum::freq() const
        {
          return env->callIntMethod(this$, mids$[mid_freq_54c6a179]);
        }

        jint MappingMultiDocsEnum::getNumSubs() const
        {
          return env->callIntMethod(this$, mids$[mid_getNumSubs_54c6a179]);
        }

        JArray< ::org::apache::lucene::index::MultiDocsEnum$EnumWithSlice > MappingMultiDocsEnum::getSubs() const
        {
          return JArray< ::org::apache::lucene::index::MultiDocsEnum$EnumWithSlice >(env->callObjectMethod(this$, mids$[mid_getSubs_1bdfab69]));
        }

        jint MappingMultiDocsEnum::nextDoc() const
        {
          return env->callIntMethod(this$, mids$[mid_nextDoc_54c6a179]);
        }

        void MappingMultiDocsEnum::setMergeState(const ::org::apache::lucene::index::MergeState & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setMergeState_fd0cfdf4], a0.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        static PyObject *t_MappingMultiDocsEnum_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_MappingMultiDocsEnum_instance_(PyTypeObject *type, PyObject *arg);
        static int t_MappingMultiDocsEnum_init_(t_MappingMultiDocsEnum *self, PyObject *args, PyObject *kwds);
        static PyObject *t_MappingMultiDocsEnum_advance(t_MappingMultiDocsEnum *self, PyObject *args);
        static PyObject *t_MappingMultiDocsEnum_cost(t_MappingMultiDocsEnum *self, PyObject *args);
        static PyObject *t_MappingMultiDocsEnum_docID(t_MappingMultiDocsEnum *self, PyObject *args);
        static PyObject *t_MappingMultiDocsEnum_freq(t_MappingMultiDocsEnum *self, PyObject *args);
        static PyObject *t_MappingMultiDocsEnum_getNumSubs(t_MappingMultiDocsEnum *self);
        static PyObject *t_MappingMultiDocsEnum_getSubs(t_MappingMultiDocsEnum *self);
        static PyObject *t_MappingMultiDocsEnum_nextDoc(t_MappingMultiDocsEnum *self, PyObject *args);
        static PyObject *t_MappingMultiDocsEnum_setMergeState(t_MappingMultiDocsEnum *self, PyObject *arg);
        static int t_MappingMultiDocsEnum_set__mergeState(t_MappingMultiDocsEnum *self, PyObject *arg, void *data);
        static PyObject *t_MappingMultiDocsEnum_get__numSubs(t_MappingMultiDocsEnum *self, void *data);
        static PyObject *t_MappingMultiDocsEnum_get__subs(t_MappingMultiDocsEnum *self, void *data);
        static PyGetSetDef t_MappingMultiDocsEnum__fields_[] = {
          DECLARE_SET_FIELD(t_MappingMultiDocsEnum, mergeState),
          DECLARE_GET_FIELD(t_MappingMultiDocsEnum, numSubs),
          DECLARE_GET_FIELD(t_MappingMultiDocsEnum, subs),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_MappingMultiDocsEnum__methods_[] = {
          DECLARE_METHOD(t_MappingMultiDocsEnum, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MappingMultiDocsEnum, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MappingMultiDocsEnum, advance, METH_VARARGS),
          DECLARE_METHOD(t_MappingMultiDocsEnum, cost, METH_VARARGS),
          DECLARE_METHOD(t_MappingMultiDocsEnum, docID, METH_VARARGS),
          DECLARE_METHOD(t_MappingMultiDocsEnum, freq, METH_VARARGS),
          DECLARE_METHOD(t_MappingMultiDocsEnum, getNumSubs, METH_NOARGS),
          DECLARE_METHOD(t_MappingMultiDocsEnum, getSubs, METH_NOARGS),
          DECLARE_METHOD(t_MappingMultiDocsEnum, nextDoc, METH_VARARGS),
          DECLARE_METHOD(t_MappingMultiDocsEnum, setMergeState, METH_O),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(MappingMultiDocsEnum, t_MappingMultiDocsEnum, ::org::apache::lucene::index::DocsEnum, MappingMultiDocsEnum, t_MappingMultiDocsEnum_init_, 0, 0, t_MappingMultiDocsEnum__fields_, 0, 0);

        void t_MappingMultiDocsEnum::install(PyObject *module)
        {
          installType(&PY_TYPE(MappingMultiDocsEnum), module, "MappingMultiDocsEnum", 0);
        }

        void t_MappingMultiDocsEnum::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(MappingMultiDocsEnum).tp_dict, "class_", make_descriptor(MappingMultiDocsEnum::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(MappingMultiDocsEnum).tp_dict, "wrapfn_", make_descriptor(t_MappingMultiDocsEnum::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(MappingMultiDocsEnum).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_MappingMultiDocsEnum_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, MappingMultiDocsEnum::initializeClass, 1)))
            return NULL;
          return t_MappingMultiDocsEnum::wrap_Object(MappingMultiDocsEnum(((t_MappingMultiDocsEnum *) arg)->object.this$));
        }
        static PyObject *t_MappingMultiDocsEnum_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, MappingMultiDocsEnum::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_MappingMultiDocsEnum_init_(t_MappingMultiDocsEnum *self, PyObject *args, PyObject *kwds)
        {
          MappingMultiDocsEnum object((jobject) NULL);

          INT_CALL(object = MappingMultiDocsEnum());
          self->object = object;

          return 0;
        }

        static PyObject *t_MappingMultiDocsEnum_advance(t_MappingMultiDocsEnum *self, PyObject *args)
        {
          jint a0;
          jint result;

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(result = self->object.advance(a0));
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(MappingMultiDocsEnum), (PyObject *) self, "advance", args, 2);
        }

        static PyObject *t_MappingMultiDocsEnum_cost(t_MappingMultiDocsEnum *self, PyObject *args)
        {
          jlong result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.cost());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          return callSuper(&PY_TYPE(MappingMultiDocsEnum), (PyObject *) self, "cost", args, 2);
        }

        static PyObject *t_MappingMultiDocsEnum_docID(t_MappingMultiDocsEnum *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.docID());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(MappingMultiDocsEnum), (PyObject *) self, "docID", args, 2);
        }

        static PyObject *t_MappingMultiDocsEnum_freq(t_MappingMultiDocsEnum *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.freq());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(MappingMultiDocsEnum), (PyObject *) self, "freq", args, 2);
        }

        static PyObject *t_MappingMultiDocsEnum_getNumSubs(t_MappingMultiDocsEnum *self)
        {
          jint result;
          OBJ_CALL(result = self->object.getNumSubs());
          return PyInt_FromLong((long) result);
        }

        static PyObject *t_MappingMultiDocsEnum_getSubs(t_MappingMultiDocsEnum *self)
        {
          JArray< ::org::apache::lucene::index::MultiDocsEnum$EnumWithSlice > result((jobject) NULL);
          OBJ_CALL(result = self->object.getSubs());
          return JArray<jobject>(result.this$).wrap(::org::apache::lucene::index::t_MultiDocsEnum$EnumWithSlice::wrap_jobject);
        }

        static PyObject *t_MappingMultiDocsEnum_nextDoc(t_MappingMultiDocsEnum *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.nextDoc());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(MappingMultiDocsEnum), (PyObject *) self, "nextDoc", args, 2);
        }

        static PyObject *t_MappingMultiDocsEnum_setMergeState(t_MappingMultiDocsEnum *self, PyObject *arg)
        {
          ::org::apache::lucene::index::MergeState a0((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::index::MergeState::initializeClass, &a0))
          {
            OBJ_CALL(self->object.setMergeState(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setMergeState", arg);
          return NULL;
        }

        static int t_MappingMultiDocsEnum_set__mergeState(t_MappingMultiDocsEnum *self, PyObject *arg, void *data)
        {
          {
            ::org::apache::lucene::index::MergeState value((jobject) NULL);
            if (!parseArg(arg, "k", ::org::apache::lucene::index::MergeState::initializeClass, &value))
            {
              INT_CALL(self->object.setMergeState(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "mergeState", arg);
          return -1;
        }

        static PyObject *t_MappingMultiDocsEnum_get__numSubs(t_MappingMultiDocsEnum *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object.getNumSubs());
          return PyInt_FromLong((long) value);
        }

        static PyObject *t_MappingMultiDocsEnum_get__subs(t_MappingMultiDocsEnum *self, void *data)
        {
          JArray< ::org::apache::lucene::index::MultiDocsEnum$EnumWithSlice > value((jobject) NULL);
          OBJ_CALL(value = self->object.getSubs());
          return JArray<jobject>(value.this$).wrap(::org::apache::lucene::index::t_MultiDocsEnum$EnumWithSlice::wrap_jobject);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/similarities/Normalization.h"
#include "org/apache/lucene/search/similarities/BasicStats.h"
#include "java/lang/String.h"
#include "org/apache/lucene/search/Explanation.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace similarities {

          ::java::lang::Class *Normalization::class$ = NULL;
          jmethodID *Normalization::mids$ = NULL;
          bool Normalization::live$ = false;

          jclass Normalization::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/similarities/Normalization");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_explain_aa9c2b5b] = env->getMethodID(cls, "explain", "(Lorg/apache/lucene/search/similarities/BasicStats;FF)Lorg/apache/lucene/search/Explanation;");
              mids$[mid_tfn_63482206] = env->getMethodID(cls, "tfn", "(Lorg/apache/lucene/search/similarities/BasicStats;FF)F");
              mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          Normalization::Normalization() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          ::org::apache::lucene::search::Explanation Normalization::explain(const ::org::apache::lucene::search::similarities::BasicStats & a0, jfloat a1, jfloat a2) const
          {
            return ::org::apache::lucene::search::Explanation(env->callObjectMethod(this$, mids$[mid_explain_aa9c2b5b], a0.this$, a1, a2));
          }

          jfloat Normalization::tfn(const ::org::apache::lucene::search::similarities::BasicStats & a0, jfloat a1, jfloat a2) const
          {
            return env->callFloatMethod(this$, mids$[mid_tfn_63482206], a0.this$, a1, a2);
          }

          ::java::lang::String Normalization::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"
#include "org/apache/lucene/search/similarities/Normalization$NoNormalization.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace similarities {
          static PyObject *t_Normalization_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Normalization_instance_(PyTypeObject *type, PyObject *arg);
          static int t_Normalization_init_(t_Normalization *self, PyObject *args, PyObject *kwds);
          static PyObject *t_Normalization_explain(t_Normalization *self, PyObject *args);
          static PyObject *t_Normalization_tfn(t_Normalization *self, PyObject *args);
          static PyObject *t_Normalization_toString(t_Normalization *self, PyObject *args);

          static PyMethodDef t_Normalization__methods_[] = {
            DECLARE_METHOD(t_Normalization, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Normalization, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Normalization, explain, METH_VARARGS),
            DECLARE_METHOD(t_Normalization, tfn, METH_VARARGS),
            DECLARE_METHOD(t_Normalization, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(Normalization, t_Normalization, ::java::lang::Object, Normalization, t_Normalization_init_, 0, 0, 0, 0, 0);

          void t_Normalization::install(PyObject *module)
          {
            installType(&PY_TYPE(Normalization), module, "Normalization", 0);
            PyDict_SetItemString(PY_TYPE(Normalization).tp_dict, "NoNormalization", make_descriptor(&PY_TYPE(Normalization$NoNormalization)));
          }

          void t_Normalization::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(Normalization).tp_dict, "class_", make_descriptor(Normalization::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(Normalization).tp_dict, "wrapfn_", make_descriptor(t_Normalization::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(Normalization).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_Normalization_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, Normalization::initializeClass, 1)))
              return NULL;
            return t_Normalization::wrap_Object(Normalization(((t_Normalization *) arg)->object.this$));
          }
          static PyObject *t_Normalization_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, Normalization::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_Normalization_init_(t_Normalization *self, PyObject *args, PyObject *kwds)
          {
            Normalization object((jobject) NULL);

            INT_CALL(object = Normalization());
            self->object = object;

            return 0;
          }

          static PyObject *t_Normalization_explain(t_Normalization *self, PyObject *args)
          {
            ::org::apache::lucene::search::similarities::BasicStats a0((jobject) NULL);
            jfloat a1;
            jfloat a2;
            ::org::apache::lucene::search::Explanation result((jobject) NULL);

            if (!parseArgs(args, "kFF", ::org::apache::lucene::search::similarities::BasicStats::initializeClass, &a0, &a1, &a2))
            {
              OBJ_CALL(result = self->object.explain(a0, a1, a2));
              return ::org::apache::lucene::search::t_Explanation::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "explain", args);
            return NULL;
          }

          static PyObject *t_Normalization_tfn(t_Normalization *self, PyObject *args)
          {
            ::org::apache::lucene::search::similarities::BasicStats a0((jobject) NULL);
            jfloat a1;
            jfloat a2;
            jfloat result;

            if (!parseArgs(args, "kFF", ::org::apache::lucene::search::similarities::BasicStats::initializeClass, &a0, &a1, &a2))
            {
              OBJ_CALL(result = self->object.tfn(a0, a1, a2));
              return PyFloat_FromDouble((double) result);
            }

            PyErr_SetArgsError((PyObject *) self, "tfn", args);
            return NULL;
          }

          static PyObject *t_Normalization_toString(t_Normalization *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(&PY_TYPE(Normalization), (PyObject *) self, "toString", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/xml/builders/SpanTermBuilder.h"
#include "org/apache/lucene/search/spans/SpanQuery.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace xml {
          namespace builders {

            ::java::lang::Class *SpanTermBuilder::class$ = NULL;
            jmethodID *SpanTermBuilder::mids$ = NULL;
            bool SpanTermBuilder::live$ = false;

            jclass SpanTermBuilder::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/xml/builders/SpanTermBuilder");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            SpanTermBuilder::SpanTermBuilder() : ::org::apache::lucene::queryparser::xml::builders::SpanBuilderBase(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace xml {
          namespace builders {
            static PyObject *t_SpanTermBuilder_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_SpanTermBuilder_instance_(PyTypeObject *type, PyObject *arg);
            static int t_SpanTermBuilder_init_(t_SpanTermBuilder *self, PyObject *args, PyObject *kwds);

            static PyMethodDef t_SpanTermBuilder__methods_[] = {
              DECLARE_METHOD(t_SpanTermBuilder, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_SpanTermBuilder, instance_, METH_O | METH_CLASS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(SpanTermBuilder, t_SpanTermBuilder, ::org::apache::lucene::queryparser::xml::builders::SpanBuilderBase, SpanTermBuilder, t_SpanTermBuilder_init_, 0, 0, 0, 0, 0);

            void t_SpanTermBuilder::install(PyObject *module)
            {
              installType(&PY_TYPE(SpanTermBuilder), module, "SpanTermBuilder", 0);
            }

            void t_SpanTermBuilder::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(SpanTermBuilder).tp_dict, "class_", make_descriptor(SpanTermBuilder::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(SpanTermBuilder).tp_dict, "wrapfn_", make_descriptor(t_SpanTermBuilder::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(SpanTermBuilder).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_SpanTermBuilder_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, SpanTermBuilder::initializeClass, 1)))
                return NULL;
              return t_SpanTermBuilder::wrap_Object(SpanTermBuilder(((t_SpanTermBuilder *) arg)->object.this$));
            }
            static PyObject *t_SpanTermBuilder_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, SpanTermBuilder::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_SpanTermBuilder_init_(t_SpanTermBuilder *self, PyObject *args, PyObject *kwds)
            {
              SpanTermBuilder object((jobject) NULL);

              INT_CALL(object = SpanTermBuilder());
              self->object = object;

              return 0;
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/fst/PairOutputs.h"
#include "org/apache/lucene/util/fst/PairOutputs$Pair.h"
#include "java/lang/Object.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/store/DataInput.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/store/DataOutput.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace fst {

          ::java::lang::Class *PairOutputs::class$ = NULL;
          jmethodID *PairOutputs::mids$ = NULL;
          bool PairOutputs::live$ = false;

          jclass PairOutputs::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/util/fst/PairOutputs");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_32f3530a] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/fst/Outputs;Lorg/apache/lucene/util/fst/Outputs;)V");
              mids$[mid_add_f30532b1] = env->getMethodID(cls, "add", "(Lorg/apache/lucene/util/fst/PairOutputs$Pair;Lorg/apache/lucene/util/fst/PairOutputs$Pair;)Lorg/apache/lucene/util/fst/PairOutputs$Pair;");
              mids$[mid_common_f30532b1] = env->getMethodID(cls, "common", "(Lorg/apache/lucene/util/fst/PairOutputs$Pair;Lorg/apache/lucene/util/fst/PairOutputs$Pair;)Lorg/apache/lucene/util/fst/PairOutputs$Pair;");
              mids$[mid_getNoOutput_02379231] = env->getMethodID(cls, "getNoOutput", "()Lorg/apache/lucene/util/fst/PairOutputs$Pair;");
              mids$[mid_newPair_b457b73d] = env->getMethodID(cls, "newPair", "(Ljava/lang/Object;Ljava/lang/Object;)Lorg/apache/lucene/util/fst/PairOutputs$Pair;");
              mids$[mid_outputToString_93c1f663] = env->getMethodID(cls, "outputToString", "(Lorg/apache/lucene/util/fst/PairOutputs$Pair;)Ljava/lang/String;");
              mids$[mid_ramBytesUsed_53ec2f78] = env->getMethodID(cls, "ramBytesUsed", "(Lorg/apache/lucene/util/fst/PairOutputs$Pair;)J");
              mids$[mid_read_49c65b36] = env->getMethodID(cls, "read", "(Lorg/apache/lucene/store/DataInput;)Lorg/apache/lucene/util/fst/PairOutputs$Pair;");
              mids$[mid_skipOutput_f5d6a551] = env->getMethodID(cls, "skipOutput", "(Lorg/apache/lucene/store/DataInput;)V");
              mids$[mid_subtract_f30532b1] = env->getMethodID(cls, "subtract", "(Lorg/apache/lucene/util/fst/PairOutputs$Pair;Lorg/apache/lucene/util/fst/PairOutputs$Pair;)Lorg/apache/lucene/util/fst/PairOutputs$Pair;");
              mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");
              mids$[mid_write_3e3045f1] = env->getMethodID(cls, "write", "(Lorg/apache/lucene/util/fst/PairOutputs$Pair;Lorg/apache/lucene/store/DataOutput;)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          PairOutputs::PairOutputs(const ::org::apache::lucene::util::fst::Outputs & a0, const ::org::apache::lucene::util::fst::Outputs & a1) : ::org::apache::lucene::util::fst::Outputs(env->newObject(initializeClass, &mids$, mid_init$_32f3530a, a0.this$, a1.this$)) {}

          ::org::apache::lucene::util::fst::PairOutputs$Pair PairOutputs::add(const ::org::apache::lucene::util::fst::PairOutputs$Pair & a0, const ::org::apache::lucene::util::fst::PairOutputs$Pair & a1) const
          {
            return ::org::apache::lucene::util::fst::PairOutputs$Pair(env->callObjectMethod(this$, mids$[mid_add_f30532b1], a0.this$, a1.this$));
          }

          ::org::apache::lucene::util::fst::PairOutputs$Pair PairOutputs::common(const ::org::apache::lucene::util::fst::PairOutputs$Pair & a0, const ::org::apache::lucene::util::fst::PairOutputs$Pair & a1) const
          {
            return ::org::apache::lucene::util::fst::PairOutputs$Pair(env->callObjectMethod(this$, mids$[mid_common_f30532b1], a0.this$, a1.this$));
          }

          ::org::apache::lucene::util::fst::PairOutputs$Pair PairOutputs::getNoOutput() const
          {
            return ::org::apache::lucene::util::fst::PairOutputs$Pair(env->callObjectMethod(this$, mids$[mid_getNoOutput_02379231]));
          }

          ::org::apache::lucene::util::fst::PairOutputs$Pair PairOutputs::newPair(const ::java::lang::Object & a0, const ::java::lang::Object & a1) const
          {
            return ::org::apache::lucene::util::fst::PairOutputs$Pair(env->callObjectMethod(this$, mids$[mid_newPair_b457b73d], a0.this$, a1.this$));
          }

          ::java::lang::String PairOutputs::outputToString(const ::org::apache::lucene::util::fst::PairOutputs$Pair & a0) const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_outputToString_93c1f663], a0.this$));
          }

          jlong PairOutputs::ramBytesUsed(const ::org::apache::lucene::util::fst::PairOutputs$Pair & a0) const
          {
            return env->callLongMethod(this$, mids$[mid_ramBytesUsed_53ec2f78], a0.this$);
          }

          ::org::apache::lucene::util::fst::PairOutputs$Pair PairOutputs::read(const ::org::apache::lucene::store::DataInput & a0) const
          {
            return ::org::apache::lucene::util::fst::PairOutputs$Pair(env->callObjectMethod(this$, mids$[mid_read_49c65b36], a0.this$));
          }

          void PairOutputs::skipOutput(const ::org::apache::lucene::store::DataInput & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_skipOutput_f5d6a551], a0.this$);
          }

          ::org::apache::lucene::util::fst::PairOutputs$Pair PairOutputs::subtract(const ::org::apache::lucene::util::fst::PairOutputs$Pair & a0, const ::org::apache::lucene::util::fst::PairOutputs$Pair & a1) const
          {
            return ::org::apache::lucene::util::fst::PairOutputs$Pair(env->callObjectMethod(this$, mids$[mid_subtract_f30532b1], a0.this$, a1.this$));
          }

          ::java::lang::String PairOutputs::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
          }

          void PairOutputs::write(const ::org::apache::lucene::util::fst::PairOutputs$Pair & a0, const ::org::apache::lucene::store::DataOutput & a1) const
          {
            env->callVoidMethod(this$, mids$[mid_write_3e3045f1], a0.this$, a1.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace fst {
          static PyObject *t_PairOutputs_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PairOutputs_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PairOutputs_of_(t_PairOutputs *self, PyObject *args);
          static int t_PairOutputs_init_(t_PairOutputs *self, PyObject *args, PyObject *kwds);
          static PyObject *t_PairOutputs_add(t_PairOutputs *self, PyObject *args);
          static PyObject *t_PairOutputs_common(t_PairOutputs *self, PyObject *args);
          static PyObject *t_PairOutputs_getNoOutput(t_PairOutputs *self, PyObject *args);
          static PyObject *t_PairOutputs_newPair(t_PairOutputs *self, PyObject *args);
          static PyObject *t_PairOutputs_outputToString(t_PairOutputs *self, PyObject *args);
          static PyObject *t_PairOutputs_ramBytesUsed(t_PairOutputs *self, PyObject *args);
          static PyObject *t_PairOutputs_read(t_PairOutputs *self, PyObject *args);
          static PyObject *t_PairOutputs_skipOutput(t_PairOutputs *self, PyObject *args);
          static PyObject *t_PairOutputs_subtract(t_PairOutputs *self, PyObject *args);
          static PyObject *t_PairOutputs_toString(t_PairOutputs *self, PyObject *args);
          static PyObject *t_PairOutputs_write(t_PairOutputs *self, PyObject *args);
          static PyObject *t_PairOutputs_get__noOutput(t_PairOutputs *self, void *data);
          static PyObject *t_PairOutputs_get__parameters_(t_PairOutputs *self, void *data);
          static PyGetSetDef t_PairOutputs__fields_[] = {
            DECLARE_GET_FIELD(t_PairOutputs, noOutput),
            DECLARE_GET_FIELD(t_PairOutputs, parameters_),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_PairOutputs__methods_[] = {
            DECLARE_METHOD(t_PairOutputs, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PairOutputs, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PairOutputs, of_, METH_VARARGS),
            DECLARE_METHOD(t_PairOutputs, add, METH_VARARGS),
            DECLARE_METHOD(t_PairOutputs, common, METH_VARARGS),
            DECLARE_METHOD(t_PairOutputs, getNoOutput, METH_VARARGS),
            DECLARE_METHOD(t_PairOutputs, newPair, METH_VARARGS),
            DECLARE_METHOD(t_PairOutputs, outputToString, METH_VARARGS),
            DECLARE_METHOD(t_PairOutputs, ramBytesUsed, METH_VARARGS),
            DECLARE_METHOD(t_PairOutputs, read, METH_VARARGS),
            DECLARE_METHOD(t_PairOutputs, skipOutput, METH_VARARGS),
            DECLARE_METHOD(t_PairOutputs, subtract, METH_VARARGS),
            DECLARE_METHOD(t_PairOutputs, toString, METH_VARARGS),
            DECLARE_METHOD(t_PairOutputs, write, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(PairOutputs, t_PairOutputs, ::org::apache::lucene::util::fst::Outputs, PairOutputs, t_PairOutputs_init_, 0, 0, t_PairOutputs__fields_, 0, 0);
          PyObject *t_PairOutputs::wrap_Object(const PairOutputs& object, PyTypeObject *p0, PyTypeObject *p1)
          {
            PyObject *obj = t_PairOutputs::wrap_Object(object);
            if (obj != NULL && obj != Py_None)
            {
              t_PairOutputs *self = (t_PairOutputs *) obj;
              self->parameters[0] = p0;
              self->parameters[1] = p1;
            }
            return obj;
          }

          PyObject *t_PairOutputs::wrap_jobject(const jobject& object, PyTypeObject *p0, PyTypeObject *p1)
          {
            PyObject *obj = t_PairOutputs::wrap_jobject(object);
            if (obj != NULL && obj != Py_None)
            {
              t_PairOutputs *self = (t_PairOutputs *) obj;
              self->parameters[0] = p0;
              self->parameters[1] = p1;
            }
            return obj;
          }

          void t_PairOutputs::install(PyObject *module)
          {
            installType(&PY_TYPE(PairOutputs), module, "PairOutputs", 0);
            PyDict_SetItemString(PY_TYPE(PairOutputs).tp_dict, "Pair", make_descriptor(&PY_TYPE(PairOutputs$Pair)));
          }

          void t_PairOutputs::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(PairOutputs).tp_dict, "class_", make_descriptor(PairOutputs::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(PairOutputs).tp_dict, "wrapfn_", make_descriptor(t_PairOutputs::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(PairOutputs).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_PairOutputs_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, PairOutputs::initializeClass, 1)))
              return NULL;
            return t_PairOutputs::wrap_Object(PairOutputs(((t_PairOutputs *) arg)->object.this$));
          }
          static PyObject *t_PairOutputs_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, PairOutputs::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_PairOutputs_of_(t_PairOutputs *self, PyObject *args)
          {
            if (!parseArg(args, "T", 2, &(self->parameters)))
              Py_RETURN_SELF;
            return PyErr_SetArgsError((PyObject *) self, "of_", args);
          }

          static int t_PairOutputs_init_(t_PairOutputs *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::util::fst::Outputs a0((jobject) NULL);
            PyTypeObject **p0;
            ::org::apache::lucene::util::fst::Outputs a1((jobject) NULL);
            PyTypeObject **p1;
            PairOutputs object((jobject) NULL);

            if (!parseArgs(args, "KK", ::org::apache::lucene::util::fst::Outputs::initializeClass, ::org::apache::lucene::util::fst::Outputs::initializeClass, &a0, &p0, ::org::apache::lucene::util::fst::t_Outputs::parameters_, &a1, &p1, ::org::apache::lucene::util::fst::t_Outputs::parameters_))
            {
              INT_CALL(object = PairOutputs(a0, a1));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_PairOutputs_add(t_PairOutputs *self, PyObject *args)
          {
            ::org::apache::lucene::util::fst::PairOutputs$Pair a0((jobject) NULL);
            PyTypeObject **p0;
            ::org::apache::lucene::util::fst::PairOutputs$Pair a1((jobject) NULL);
            PyTypeObject **p1;
            ::org::apache::lucene::util::fst::PairOutputs$Pair result((jobject) NULL);

            if (!parseArgs(args, "KK", ::org::apache::lucene::util::fst::PairOutputs$Pair::initializeClass, ::org::apache::lucene::util::fst::PairOutputs$Pair::initializeClass, &a0, &p0, ::org::apache::lucene::util::fst::t_PairOutputs$Pair::parameters_, &a1, &p1, ::org::apache::lucene::util::fst::t_PairOutputs$Pair::parameters_))
            {
              OBJ_CALL(result = self->object.add(a0, a1));
              return ::org::apache::lucene::util::fst::t_PairOutputs$Pair::wrap_Object(result, self->parameters[0], self->parameters[1]);
            }

            return callSuper(&PY_TYPE(PairOutputs), (PyObject *) self, "add", args, 2);
          }

          static PyObject *t_PairOutputs_common(t_PairOutputs *self, PyObject *args)
          {
            ::org::apache::lucene::util::fst::PairOutputs$Pair a0((jobject) NULL);
            PyTypeObject **p0;
            ::org::apache::lucene::util::fst::PairOutputs$Pair a1((jobject) NULL);
            PyTypeObject **p1;
            ::org::apache::lucene::util::fst::PairOutputs$Pair result((jobject) NULL);

            if (!parseArgs(args, "KK", ::org::apache::lucene::util::fst::PairOutputs$Pair::initializeClass, ::org::apache::lucene::util::fst::PairOutputs$Pair::initializeClass, &a0, &p0, ::org::apache::lucene::util::fst::t_PairOutputs$Pair::parameters_, &a1, &p1, ::org::apache::lucene::util::fst::t_PairOutputs$Pair::parameters_))
            {
              OBJ_CALL(result = self->object.common(a0, a1));
              return ::org::apache::lucene::util::fst::t_PairOutputs$Pair::wrap_Object(result, self->parameters[0], self->parameters[1]);
            }

            return callSuper(&PY_TYPE(PairOutputs), (PyObject *) self, "common", args, 2);
          }

          static PyObject *t_PairOutputs_getNoOutput(t_PairOutputs *self, PyObject *args)
          {
            ::org::apache::lucene::util::fst::PairOutputs$Pair result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.getNoOutput());
              return ::org::apache::lucene::util::fst::t_PairOutputs$Pair::wrap_Object(result, self->parameters[0], self->parameters[1]);
            }

            return callSuper(&PY_TYPE(PairOutputs), (PyObject *) self, "getNoOutput", args, 2);
          }

          static PyObject *t_PairOutputs_newPair(t_PairOutputs *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            ::java::lang::Object a1((jobject) NULL);
            ::org::apache::lucene::util::fst::PairOutputs$Pair result((jobject) NULL);

            if (!parseArgs(args, "OO", self->parameters[0], self->parameters[1], &a0, &a1))
            {
              OBJ_CALL(result = self->object.newPair(a0, a1));
              return ::org::apache::lucene::util::fst::t_PairOutputs$Pair::wrap_Object(result, self->parameters[0], self->parameters[1]);
            }

            PyErr_SetArgsError((PyObject *) self, "newPair", args);
            return NULL;
          }

          static PyObject *t_PairOutputs_outputToString(t_PairOutputs *self, PyObject *args)
          {
            ::org::apache::lucene::util::fst::PairOutputs$Pair a0((jobject) NULL);
            PyTypeObject **p0;
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, "K", ::org::apache::lucene::util::fst::PairOutputs$Pair::initializeClass, &a0, &p0, ::org::apache::lucene::util::fst::t_PairOutputs$Pair::parameters_))
            {
              OBJ_CALL(result = self->object.outputToString(a0));
              return j2p(result);
            }

            return callSuper(&PY_TYPE(PairOutputs), (PyObject *) self, "outputToString", args, 2);
          }

          static PyObject *t_PairOutputs_ramBytesUsed(t_PairOutputs *self, PyObject *args)
          {
            ::org::apache::lucene::util::fst::PairOutputs$Pair a0((jobject) NULL);
            PyTypeObject **p0;
            jlong result;

            if (!parseArgs(args, "K", ::org::apache::lucene::util::fst::PairOutputs$Pair::initializeClass, &a0, &p0, ::org::apache::lucene::util::fst::t_PairOutputs$Pair::parameters_))
            {
              OBJ_CALL(result = self->object.ramBytesUsed(a0));
              return PyLong_FromLongLong((PY_LONG_LONG) result);
            }

            return callSuper(&PY_TYPE(PairOutputs), (PyObject *) self, "ramBytesUsed", args, 2);
          }

          static PyObject *t_PairOutputs_read(t_PairOutputs *self, PyObject *args)
          {
            ::org::apache::lucene::store::DataInput a0((jobject) NULL);
            ::org::apache::lucene::util::fst::PairOutputs$Pair result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::store::DataInput::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.read(a0));
              return ::org::apache::lucene::util::fst::t_PairOutputs$Pair::wrap_Object(result, self->parameters[0], self->parameters[1]);
            }

            return callSuper(&PY_TYPE(PairOutputs), (PyObject *) self, "read", args, 2);
          }

          static PyObject *t_PairOutputs_skipOutput(t_PairOutputs *self, PyObject *args)
          {
            ::org::apache::lucene::store::DataInput a0((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::store::DataInput::initializeClass, &a0))
            {
              OBJ_CALL(self->object.skipOutput(a0));
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(PairOutputs), (PyObject *) self, "skipOutput", args, 2);
          }

          static PyObject *t_PairOutputs_subtract(t_PairOutputs *self, PyObject *args)
          {
            ::org::apache::lucene::util::fst::PairOutputs$Pair a0((jobject) NULL);
            PyTypeObject **p0;
            ::org::apache::lucene::util::fst::PairOutputs$Pair a1((jobject) NULL);
            PyTypeObject **p1;
            ::org::apache::lucene::util::fst::PairOutputs$Pair result((jobject) NULL);

            if (!parseArgs(args, "KK", ::org::apache::lucene::util::fst::PairOutputs$Pair::initializeClass, ::org::apache::lucene::util::fst::PairOutputs$Pair::initializeClass, &a0, &p0, ::org::apache::lucene::util::fst::t_PairOutputs$Pair::parameters_, &a1, &p1, ::org::apache::lucene::util::fst::t_PairOutputs$Pair::parameters_))
            {
              OBJ_CALL(result = self->object.subtract(a0, a1));
              return ::org::apache::lucene::util::fst::t_PairOutputs$Pair::wrap_Object(result, self->parameters[0], self->parameters[1]);
            }

            return callSuper(&PY_TYPE(PairOutputs), (PyObject *) self, "subtract", args, 2);
          }

          static PyObject *t_PairOutputs_toString(t_PairOutputs *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(&PY_TYPE(PairOutputs), (PyObject *) self, "toString", args, 2);
          }

          static PyObject *t_PairOutputs_write(t_PairOutputs *self, PyObject *args)
          {
            ::org::apache::lucene::util::fst::PairOutputs$Pair a0((jobject) NULL);
            PyTypeObject **p0;
            ::org::apache::lucene::store::DataOutput a1((jobject) NULL);

            if (!parseArgs(args, "Kk", ::org::apache::lucene::util::fst::PairOutputs$Pair::initializeClass, ::org::apache::lucene::store::DataOutput::initializeClass, &a0, &p0, ::org::apache::lucene::util::fst::t_PairOutputs$Pair::parameters_, &a1))
            {
              OBJ_CALL(self->object.write(a0, a1));
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(PairOutputs), (PyObject *) self, "write", args, 2);
          }
          static PyObject *t_PairOutputs_get__parameters_(t_PairOutputs *self, void *data)
          {
            return typeParameters(self->parameters, sizeof(self->parameters));
          }

          static PyObject *t_PairOutputs_get__noOutput(t_PairOutputs *self, void *data)
          {
            ::org::apache::lucene::util::fst::PairOutputs$Pair value((jobject) NULL);
            OBJ_CALL(value = self->object.getNoOutput());
            return ::org::apache::lucene::util::fst::t_PairOutputs$Pair::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/Collector.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/search/Scorer.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *Collector::class$ = NULL;
        jmethodID *Collector::mids$ = NULL;
        bool Collector::live$ = false;

        jclass Collector::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/Collector");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_acceptsDocsOutOfOrder_54c6a16a] = env->getMethodID(cls, "acceptsDocsOutOfOrder", "()Z");
            mids$[mid_collect_39c7bd3c] = env->getMethodID(cls, "collect", "(I)V");
            mids$[mid_setNextReader_a6f59947] = env->getMethodID(cls, "setNextReader", "(Lorg/apache/lucene/index/AtomicReaderContext;)V");
            mids$[mid_setScorer_8be0880c] = env->getMethodID(cls, "setScorer", "(Lorg/apache/lucene/search/Scorer;)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        Collector::Collector() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        jboolean Collector::acceptsDocsOutOfOrder() const
        {
          return env->callBooleanMethod(this$, mids$[mid_acceptsDocsOutOfOrder_54c6a16a]);
        }

        void Collector::collect(jint a0) const
        {
          env->callVoidMethod(this$, mids$[mid_collect_39c7bd3c], a0);
        }

        void Collector::setNextReader(const ::org::apache::lucene::index::AtomicReaderContext & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setNextReader_a6f59947], a0.this$);
        }

        void Collector::setScorer(const ::org::apache::lucene::search::Scorer & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setScorer_8be0880c], a0.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_Collector_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_Collector_instance_(PyTypeObject *type, PyObject *arg);
        static int t_Collector_init_(t_Collector *self, PyObject *args, PyObject *kwds);
        static PyObject *t_Collector_acceptsDocsOutOfOrder(t_Collector *self);
        static PyObject *t_Collector_collect(t_Collector *self, PyObject *arg);
        static PyObject *t_Collector_setNextReader(t_Collector *self, PyObject *arg);
        static PyObject *t_Collector_setScorer(t_Collector *self, PyObject *arg);
        static int t_Collector_set__nextReader(t_Collector *self, PyObject *arg, void *data);
        static int t_Collector_set__scorer(t_Collector *self, PyObject *arg, void *data);
        static PyGetSetDef t_Collector__fields_[] = {
          DECLARE_SET_FIELD(t_Collector, nextReader),
          DECLARE_SET_FIELD(t_Collector, scorer),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_Collector__methods_[] = {
          DECLARE_METHOD(t_Collector, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_Collector, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_Collector, acceptsDocsOutOfOrder, METH_NOARGS),
          DECLARE_METHOD(t_Collector, collect, METH_O),
          DECLARE_METHOD(t_Collector, setNextReader, METH_O),
          DECLARE_METHOD(t_Collector, setScorer, METH_O),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(Collector, t_Collector, ::java::lang::Object, Collector, t_Collector_init_, 0, 0, t_Collector__fields_, 0, 0);

        void t_Collector::install(PyObject *module)
        {
          installType(&PY_TYPE(Collector), module, "Collector", 0);
        }

        void t_Collector::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(Collector).tp_dict, "class_", make_descriptor(Collector::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(Collector).tp_dict, "wrapfn_", make_descriptor(t_Collector::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(Collector).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_Collector_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, Collector::initializeClass, 1)))
            return NULL;
          return t_Collector::wrap_Object(Collector(((t_Collector *) arg)->object.this$));
        }
        static PyObject *t_Collector_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, Collector::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_Collector_init_(t_Collector *self, PyObject *args, PyObject *kwds)
        {
          Collector object((jobject) NULL);

          INT_CALL(object = Collector());
          self->object = object;

          return 0;
        }

        static PyObject *t_Collector_acceptsDocsOutOfOrder(t_Collector *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.acceptsDocsOutOfOrder());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_Collector_collect(t_Collector *self, PyObject *arg)
        {
          jint a0;

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(self->object.collect(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "collect", arg);
          return NULL;
        }

        static PyObject *t_Collector_setNextReader(t_Collector *self, PyObject *arg)
        {
          ::org::apache::lucene::index::AtomicReaderContext a0((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &a0))
          {
            OBJ_CALL(self->object.setNextReader(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setNextReader", arg);
          return NULL;
        }

        static PyObject *t_Collector_setScorer(t_Collector *self, PyObject *arg)
        {
          ::org::apache::lucene::search::Scorer a0((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::search::Scorer::initializeClass, &a0))
          {
            OBJ_CALL(self->object.setScorer(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setScorer", arg);
          return NULL;
        }

        static int t_Collector_set__nextReader(t_Collector *self, PyObject *arg, void *data)
        {
          {
            ::org::apache::lucene::index::AtomicReaderContext value((jobject) NULL);
            if (!parseArg(arg, "k", ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &value))
            {
              INT_CALL(self->object.setNextReader(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "nextReader", arg);
          return -1;
        }

        static int t_Collector_set__scorer(t_Collector *self, PyObject *arg, void *data)
        {
          {
            ::org::apache::lucene::search::Scorer value((jobject) NULL);
            if (!parseArg(arg, "k", ::org::apache::lucene::search::Scorer::initializeClass, &value))
            {
              INT_CALL(self->object.setScorer(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "scorer", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/query/QueryAutoStopWordAnalyzer.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "java/util/Collection.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/Analyzer.h"
#include "org/apache/lucene/util/Version.h"
#include "org/apache/lucene/index/Term.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace query {

          ::java::lang::Class *QueryAutoStopWordAnalyzer::class$ = NULL;
          jmethodID *QueryAutoStopWordAnalyzer::mids$ = NULL;
          bool QueryAutoStopWordAnalyzer::live$ = false;
          jfloat QueryAutoStopWordAnalyzer::defaultMaxDocFreqPercent = (jfloat) 0;

          jclass QueryAutoStopWordAnalyzer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/query/QueryAutoStopWordAnalyzer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_f0ed586e] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/analysis/Analyzer;Lorg/apache/lucene/index/IndexReader;)V");
              mids$[mid_init$_1ec7a0cb] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/analysis/Analyzer;Lorg/apache/lucene/index/IndexReader;F)V");
              mids$[mid_init$_4a9ca32c] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/analysis/Analyzer;Lorg/apache/lucene/index/IndexReader;I)V");
              mids$[mid_init$_560944dd] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/analysis/Analyzer;Lorg/apache/lucene/index/IndexReader;Ljava/util/Collection;I)V");
              mids$[mid_init$_2db3c3ea] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/analysis/Analyzer;Lorg/apache/lucene/index/IndexReader;Ljava/util/Collection;F)V");
              mids$[mid_getStopWords_2b86e588] = env->getMethodID(cls, "getStopWords", "()[Lorg/apache/lucene/index/Term;");
              mids$[mid_getStopWords_1f6a174f] = env->getMethodID(cls, "getStopWords", "(Ljava/lang/String;)[Ljava/lang/String;");
              mids$[mid_wrapComponents_46d74455] = env->getMethodID(cls, "wrapComponents", "(Ljava/lang/String;Lorg/apache/lucene/analysis/Analyzer$TokenStreamComponents;)Lorg/apache/lucene/analysis/Analyzer$TokenStreamComponents;");
              mids$[mid_getWrappedAnalyzer_29a2299f] = env->getMethodID(cls, "getWrappedAnalyzer", "(Ljava/lang/String;)Lorg/apache/lucene/analysis/Analyzer;");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              defaultMaxDocFreqPercent = env->getStaticFloatField(cls, "defaultMaxDocFreqPercent");
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          QueryAutoStopWordAnalyzer::QueryAutoStopWordAnalyzer(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::analysis::Analyzer & a1, const ::org::apache::lucene::index::IndexReader & a2) : ::org::apache::lucene::analysis::AnalyzerWrapper(env->newObject(initializeClass, &mids$, mid_init$_f0ed586e, a0.this$, a1.this$, a2.this$)) {}

          QueryAutoStopWordAnalyzer::QueryAutoStopWordAnalyzer(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::analysis::Analyzer & a1, const ::org::apache::lucene::index::IndexReader & a2, jfloat a3) : ::org::apache::lucene::analysis::AnalyzerWrapper(env->newObject(initializeClass, &mids$, mid_init$_1ec7a0cb, a0.this$, a1.this$, a2.this$, a3)) {}

          QueryAutoStopWordAnalyzer::QueryAutoStopWordAnalyzer(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::analysis::Analyzer & a1, const ::org::apache::lucene::index::IndexReader & a2, jint a3) : ::org::apache::lucene::analysis::AnalyzerWrapper(env->newObject(initializeClass, &mids$, mid_init$_4a9ca32c, a0.this$, a1.this$, a2.this$, a3)) {}

          QueryAutoStopWordAnalyzer::QueryAutoStopWordAnalyzer(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::analysis::Analyzer & a1, const ::org::apache::lucene::index::IndexReader & a2, const ::java::util::Collection & a3, jint a4) : ::org::apache::lucene::analysis::AnalyzerWrapper(env->newObject(initializeClass, &mids$, mid_init$_560944dd, a0.this$, a1.this$, a2.this$, a3.this$, a4)) {}

          QueryAutoStopWordAnalyzer::QueryAutoStopWordAnalyzer(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::analysis::Analyzer & a1, const ::org::apache::lucene::index::IndexReader & a2, const ::java::util::Collection & a3, jfloat a4) : ::org::apache::lucene::analysis::AnalyzerWrapper(env->newObject(initializeClass, &mids$, mid_init$_2db3c3ea, a0.this$, a1.this$, a2.this$, a3.this$, a4)) {}

          JArray< ::org::apache::lucene::index::Term > QueryAutoStopWordAnalyzer::getStopWords() const
          {
            return JArray< ::org::apache::lucene::index::Term >(env->callObjectMethod(this$, mids$[mid_getStopWords_2b86e588]));
          }

          JArray< ::java::lang::String > QueryAutoStopWordAnalyzer::getStopWords(const ::java::lang::String & a0) const
          {
            return JArray< ::java::lang::String >(env->callObjectMethod(this$, mids$[mid_getStopWords_1f6a174f], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace query {
          static PyObject *t_QueryAutoStopWordAnalyzer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_QueryAutoStopWordAnalyzer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_QueryAutoStopWordAnalyzer_init_(t_QueryAutoStopWordAnalyzer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_QueryAutoStopWordAnalyzer_getStopWords(t_QueryAutoStopWordAnalyzer *self, PyObject *args);
          static PyObject *t_QueryAutoStopWordAnalyzer_get__stopWords(t_QueryAutoStopWordAnalyzer *self, void *data);
          static PyGetSetDef t_QueryAutoStopWordAnalyzer__fields_[] = {
            DECLARE_GET_FIELD(t_QueryAutoStopWordAnalyzer, stopWords),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_QueryAutoStopWordAnalyzer__methods_[] = {
            DECLARE_METHOD(t_QueryAutoStopWordAnalyzer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_QueryAutoStopWordAnalyzer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_QueryAutoStopWordAnalyzer, getStopWords, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(QueryAutoStopWordAnalyzer, t_QueryAutoStopWordAnalyzer, ::org::apache::lucene::analysis::AnalyzerWrapper, QueryAutoStopWordAnalyzer, t_QueryAutoStopWordAnalyzer_init_, 0, 0, t_QueryAutoStopWordAnalyzer__fields_, 0, 0);

          void t_QueryAutoStopWordAnalyzer::install(PyObject *module)
          {
            installType(&PY_TYPE(QueryAutoStopWordAnalyzer), module, "QueryAutoStopWordAnalyzer", 0);
          }

          void t_QueryAutoStopWordAnalyzer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(QueryAutoStopWordAnalyzer).tp_dict, "class_", make_descriptor(QueryAutoStopWordAnalyzer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(QueryAutoStopWordAnalyzer).tp_dict, "wrapfn_", make_descriptor(t_QueryAutoStopWordAnalyzer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(QueryAutoStopWordAnalyzer).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(QueryAutoStopWordAnalyzer::initializeClass);
            PyDict_SetItemString(PY_TYPE(QueryAutoStopWordAnalyzer).tp_dict, "defaultMaxDocFreqPercent", make_descriptor(QueryAutoStopWordAnalyzer::defaultMaxDocFreqPercent));
          }

          static PyObject *t_QueryAutoStopWordAnalyzer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, QueryAutoStopWordAnalyzer::initializeClass, 1)))
              return NULL;
            return t_QueryAutoStopWordAnalyzer::wrap_Object(QueryAutoStopWordAnalyzer(((t_QueryAutoStopWordAnalyzer *) arg)->object.this$));
          }
          static PyObject *t_QueryAutoStopWordAnalyzer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, QueryAutoStopWordAnalyzer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_QueryAutoStopWordAnalyzer_init_(t_QueryAutoStopWordAnalyzer *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 3:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                ::org::apache::lucene::analysis::Analyzer a1((jobject) NULL);
                ::org::apache::lucene::index::IndexReader a2((jobject) NULL);
                QueryAutoStopWordAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "Kkk", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::Analyzer::initializeClass, ::org::apache::lucene::index::IndexReader::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1, &a2))
                {
                  INT_CALL(object = QueryAutoStopWordAnalyzer(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 4:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                ::org::apache::lucene::analysis::Analyzer a1((jobject) NULL);
                ::org::apache::lucene::index::IndexReader a2((jobject) NULL);
                jfloat a3;
                QueryAutoStopWordAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "KkkF", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::Analyzer::initializeClass, ::org::apache::lucene::index::IndexReader::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1, &a2, &a3))
                {
                  INT_CALL(object = QueryAutoStopWordAnalyzer(a0, a1, a2, a3));
                  self->object = object;
                  break;
                }
              }
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                ::org::apache::lucene::analysis::Analyzer a1((jobject) NULL);
                ::org::apache::lucene::index::IndexReader a2((jobject) NULL);
                jint a3;
                QueryAutoStopWordAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "KkkI", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::Analyzer::initializeClass, ::org::apache::lucene::index::IndexReader::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1, &a2, &a3))
                {
                  INT_CALL(object = QueryAutoStopWordAnalyzer(a0, a1, a2, a3));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 5:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                ::org::apache::lucene::analysis::Analyzer a1((jobject) NULL);
                ::org::apache::lucene::index::IndexReader a2((jobject) NULL);
                ::java::util::Collection a3((jobject) NULL);
                PyTypeObject **p3;
                jint a4;
                QueryAutoStopWordAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "KkkKI", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::Analyzer::initializeClass, ::org::apache::lucene::index::IndexReader::initializeClass, ::java::util::Collection::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1, &a2, &a3, &p3, ::java::util::t_Collection::parameters_, &a4))
                {
                  INT_CALL(object = QueryAutoStopWordAnalyzer(a0, a1, a2, a3, a4));
                  self->object = object;
                  break;
                }
              }
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                ::org::apache::lucene::analysis::Analyzer a1((jobject) NULL);
                ::org::apache::lucene::index::IndexReader a2((jobject) NULL);
                ::java::util::Collection a3((jobject) NULL);
                PyTypeObject **p3;
                jfloat a4;
                QueryAutoStopWordAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "KkkKF", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::Analyzer::initializeClass, ::org::apache::lucene::index::IndexReader::initializeClass, ::java::util::Collection::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1, &a2, &a3, &p3, ::java::util::t_Collection::parameters_, &a4))
                {
                  INT_CALL(object = QueryAutoStopWordAnalyzer(a0, a1, a2, a3, a4));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_QueryAutoStopWordAnalyzer_getStopWords(t_QueryAutoStopWordAnalyzer *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 0:
              {
                JArray< ::org::apache::lucene::index::Term > result((jobject) NULL);
                OBJ_CALL(result = self->object.getStopWords());
                return JArray<jobject>(result.this$).wrap(::org::apache::lucene::index::t_Term::wrap_jobject);
              }
              break;
             case 1:
              {
                ::java::lang::String a0((jobject) NULL);
                JArray< ::java::lang::String > result((jobject) NULL);

                if (!parseArgs(args, "s", &a0))
                {
                  OBJ_CALL(result = self->object.getStopWords(a0));
                  return JArray<jstring>(result.this$).wrap();
                }
              }
            }

            PyErr_SetArgsError((PyObject *) self, "getStopWords", args);
            return NULL;
          }

          static PyObject *t_QueryAutoStopWordAnalyzer_get__stopWords(t_QueryAutoStopWordAnalyzer *self, void *data)
          {
            JArray< ::org::apache::lucene::index::Term > value((jobject) NULL);
            OBJ_CALL(value = self->object.getStopWords());
            return JArray<jobject>(value.this$).wrap(::org::apache::lucene::index::t_Term::wrap_jobject);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/fst/Util$TopResults.h"
#include "java/lang/Iterable.h"
#include "org/apache/lucene/util/fst/Util$Result.h"
#include "java/util/Iterator.h"
#include "java/util/List.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace fst {

          ::java::lang::Class *Util$TopResults::class$ = NULL;
          jmethodID *Util$TopResults::mids$ = NULL;
          jfieldID *Util$TopResults::fids$ = NULL;
          bool Util$TopResults::live$ = false;

          jclass Util$TopResults::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/util/fst/Util$TopResults");

              mids$ = new jmethodID[max_mid];
              mids$[mid_iterator_40858c90] = env->getMethodID(cls, "iterator", "()Ljava/util/Iterator;");

              fids$ = new jfieldID[max_fid];
              fids$[fid_isComplete] = env->getFieldID(cls, "isComplete", "Z");
              fids$[fid_topN] = env->getFieldID(cls, "topN", "Ljava/util/List;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ::java::util::Iterator Util$TopResults::iterator() const
          {
            return ::java::util::Iterator(env->callObjectMethod(this$, mids$[mid_iterator_40858c90]));
          }

          jboolean Util$TopResults::_get_isComplete() const
          {
            return env->getBooleanField(this$, fids$[fid_isComplete]);
          }

          ::java::util::List Util$TopResults::_get_topN() const
          {
            return ::java::util::List(env->getObjectField(this$, fids$[fid_topN]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace fst {
          static PyObject *t_Util$TopResults_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Util$TopResults_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Util$TopResults_of_(t_Util$TopResults *self, PyObject *args);
          static PyObject *t_Util$TopResults_iterator(t_Util$TopResults *self);
          static PyObject *t_Util$TopResults_get__isComplete(t_Util$TopResults *self, void *data);
          static PyObject *t_Util$TopResults_get__topN(t_Util$TopResults *self, void *data);

          static PyObject *t_Util$TopResults_get__parameters_(t_Util$TopResults *self, void *data);
          static PyGetSetDef t_Util$TopResults__fields_[] = {
            DECLARE_GET_FIELD(t_Util$TopResults, isComplete),
            DECLARE_GET_FIELD(t_Util$TopResults, topN),
            DECLARE_GET_FIELD(t_Util$TopResults, parameters_),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_Util$TopResults__methods_[] = {
            DECLARE_METHOD(t_Util$TopResults, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Util$TopResults, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Util$TopResults, of_, METH_VARARGS),
            DECLARE_METHOD(t_Util$TopResults, iterator, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(Util$TopResults, t_Util$TopResults, ::java::lang::Object, Util$TopResults, abstract_init, ((PyObject *(*)(t_Util$TopResults *)) get_generic_iterator< t_Util$TopResults >), 0, t_Util$TopResults__fields_, 0, 0);
          PyObject *t_Util$TopResults::wrap_Object(const Util$TopResults& object, PyTypeObject *p0)
          {
            PyObject *obj = t_Util$TopResults::wrap_Object(object);
            if (obj != NULL && obj != Py_None)
            {
              t_Util$TopResults *self = (t_Util$TopResults *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          PyObject *t_Util$TopResults::wrap_jobject(const jobject& object, PyTypeObject *p0)
          {
            PyObject *obj = t_Util$TopResults::wrap_jobject(object);
            if (obj != NULL && obj != Py_None)
            {
              t_Util$TopResults *self = (t_Util$TopResults *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          void t_Util$TopResults::install(PyObject *module)
          {
            installType(&PY_TYPE(Util$TopResults), module, "Util$TopResults", 0);
          }

          void t_Util$TopResults::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(Util$TopResults).tp_dict, "class_", make_descriptor(Util$TopResults::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(Util$TopResults).tp_dict, "wrapfn_", make_descriptor(t_Util$TopResults::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(Util$TopResults).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_Util$TopResults_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, Util$TopResults::initializeClass, 1)))
              return NULL;
            return t_Util$TopResults::wrap_Object(Util$TopResults(((t_Util$TopResults *) arg)->object.this$));
          }
          static PyObject *t_Util$TopResults_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, Util$TopResults::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_Util$TopResults_of_(t_Util$TopResults *self, PyObject *args)
          {
            if (!parseArg(args, "T", 1, &(self->parameters)))
              Py_RETURN_SELF;
            return PyErr_SetArgsError((PyObject *) self, "of_", args);
          }

          static PyObject *t_Util$TopResults_iterator(t_Util$TopResults *self)
          {
            ::java::util::Iterator result((jobject) NULL);
            OBJ_CALL(result = self->object.iterator());
            return ::java::util::t_Iterator::wrap_Object(result);
          }
          static PyObject *t_Util$TopResults_get__parameters_(t_Util$TopResults *self, void *data)
          {
            return typeParameters(self->parameters, sizeof(self->parameters));
          }

          static PyObject *t_Util$TopResults_get__isComplete(t_Util$TopResults *self, void *data)
          {
            jboolean value;
            OBJ_CALL(value = self->object._get_isComplete());
            Py_RETURN_BOOL(value);
          }

          static PyObject *t_Util$TopResults_get__topN(t_Util$TopResults *self, void *data)
          {
            ::java::util::List value((jobject) NULL);
            OBJ_CALL(value = self->object._get_topN());
            return ::java::util::t_List::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/compound/hyphenation/PatternConsumer.h"
#include "java/util/ArrayList.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace compound {
          namespace hyphenation {

            ::java::lang::Class *PatternConsumer::class$ = NULL;
            jmethodID *PatternConsumer::mids$ = NULL;
            bool PatternConsumer::live$ = false;

            jclass PatternConsumer::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/compound/hyphenation/PatternConsumer");

                mids$ = new jmethodID[max_mid];
                mids$[mid_addClass_5fdc3f48] = env->getMethodID(cls, "addClass", "(Ljava/lang/String;)V");
                mids$[mid_addException_069f7243] = env->getMethodID(cls, "addException", "(Ljava/lang/String;Ljava/util/ArrayList;)V");
                mids$[mid_addPattern_4a264742] = env->getMethodID(cls, "addPattern", "(Ljava/lang/String;Ljava/lang/String;)V");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            void PatternConsumer::addClass(const ::java::lang::String & a0) const
            {
              env->callVoidMethod(this$, mids$[mid_addClass_5fdc3f48], a0.this$);
            }

            void PatternConsumer::addException(const ::java::lang::String & a0, const ::java::util::ArrayList & a1) const
            {
              env->callVoidMethod(this$, mids$[mid_addException_069f7243], a0.this$, a1.this$);
            }

            void PatternConsumer::addPattern(const ::java::lang::String & a0, const ::java::lang::String & a1) const
            {
              env->callVoidMethod(this$, mids$[mid_addPattern_4a264742], a0.this$, a1.this$);
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace compound {
          namespace hyphenation {
            static PyObject *t_PatternConsumer_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_PatternConsumer_instance_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_PatternConsumer_addClass(t_PatternConsumer *self, PyObject *arg);
            static PyObject *t_PatternConsumer_addException(t_PatternConsumer *self, PyObject *args);
            static PyObject *t_PatternConsumer_addPattern(t_PatternConsumer *self, PyObject *args);

            static PyMethodDef t_PatternConsumer__methods_[] = {
              DECLARE_METHOD(t_PatternConsumer, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_PatternConsumer, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_PatternConsumer, addClass, METH_O),
              DECLARE_METHOD(t_PatternConsumer, addException, METH_VARARGS),
              DECLARE_METHOD(t_PatternConsumer, addPattern, METH_VARARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(PatternConsumer, t_PatternConsumer, ::java::lang::Object, PatternConsumer, abstract_init, 0, 0, 0, 0, 0);

            void t_PatternConsumer::install(PyObject *module)
            {
              installType(&PY_TYPE(PatternConsumer), module, "PatternConsumer", 0);
            }

            void t_PatternConsumer::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(PatternConsumer).tp_dict, "class_", make_descriptor(PatternConsumer::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(PatternConsumer).tp_dict, "wrapfn_", make_descriptor(t_PatternConsumer::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(PatternConsumer).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_PatternConsumer_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, PatternConsumer::initializeClass, 1)))
                return NULL;
              return t_PatternConsumer::wrap_Object(PatternConsumer(((t_PatternConsumer *) arg)->object.this$));
            }
            static PyObject *t_PatternConsumer_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, PatternConsumer::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static PyObject *t_PatternConsumer_addClass(t_PatternConsumer *self, PyObject *arg)
            {
              ::java::lang::String a0((jobject) NULL);

              if (!parseArg(arg, "s", &a0))
              {
                OBJ_CALL(self->object.addClass(a0));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "addClass", arg);
              return NULL;
            }

            static PyObject *t_PatternConsumer_addException(t_PatternConsumer *self, PyObject *args)
            {
              ::java::lang::String a0((jobject) NULL);
              ::java::util::ArrayList a1((jobject) NULL);
              PyTypeObject **p1;

              if (!parseArgs(args, "sK", ::java::util::ArrayList::initializeClass, &a0, &a1, &p1, ::java::util::t_ArrayList::parameters_))
              {
                OBJ_CALL(self->object.addException(a0, a1));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "addException", args);
              return NULL;
            }

            static PyObject *t_PatternConsumer_addPattern(t_PatternConsumer *self, PyObject *args)
            {
              ::java::lang::String a0((jobject) NULL);
              ::java::lang::String a1((jobject) NULL);

              if (!parseArgs(args, "ss", &a0, &a1))
              {
                OBJ_CALL(self->object.addPattern(a0, a1));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "addPattern", args);
              return NULL;
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/classic/QueryParserBase$MethodRemovedUseAnother.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace classic {

          ::java::lang::Class *QueryParserBase$MethodRemovedUseAnother::class$ = NULL;
          jmethodID *QueryParserBase$MethodRemovedUseAnother::mids$ = NULL;
          bool QueryParserBase$MethodRemovedUseAnother::live$ = false;

          jclass QueryParserBase$MethodRemovedUseAnother::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/classic/QueryParserBase$MethodRemovedUseAnother");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          QueryParserBase$MethodRemovedUseAnother::QueryParserBase$MethodRemovedUseAnother() : ::java::lang::Throwable(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace classic {
          static PyObject *t_QueryParserBase$MethodRemovedUseAnother_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_QueryParserBase$MethodRemovedUseAnother_instance_(PyTypeObject *type, PyObject *arg);
          static int t_QueryParserBase$MethodRemovedUseAnother_init_(t_QueryParserBase$MethodRemovedUseAnother *self, PyObject *args, PyObject *kwds);

          static PyMethodDef t_QueryParserBase$MethodRemovedUseAnother__methods_[] = {
            DECLARE_METHOD(t_QueryParserBase$MethodRemovedUseAnother, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_QueryParserBase$MethodRemovedUseAnother, instance_, METH_O | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(QueryParserBase$MethodRemovedUseAnother, t_QueryParserBase$MethodRemovedUseAnother, ::java::lang::Throwable, QueryParserBase$MethodRemovedUseAnother, t_QueryParserBase$MethodRemovedUseAnother_init_, 0, 0, 0, 0, 0);

          void t_QueryParserBase$MethodRemovedUseAnother::install(PyObject *module)
          {
            installType(&PY_TYPE(QueryParserBase$MethodRemovedUseAnother), module, "QueryParserBase$MethodRemovedUseAnother", 0);
          }

          void t_QueryParserBase$MethodRemovedUseAnother::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(QueryParserBase$MethodRemovedUseAnother).tp_dict, "class_", make_descriptor(QueryParserBase$MethodRemovedUseAnother::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(QueryParserBase$MethodRemovedUseAnother).tp_dict, "wrapfn_", make_descriptor(t_QueryParserBase$MethodRemovedUseAnother::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(QueryParserBase$MethodRemovedUseAnother).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_QueryParserBase$MethodRemovedUseAnother_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, QueryParserBase$MethodRemovedUseAnother::initializeClass, 1)))
              return NULL;
            return t_QueryParserBase$MethodRemovedUseAnother::wrap_Object(QueryParserBase$MethodRemovedUseAnother(((t_QueryParserBase$MethodRemovedUseAnother *) arg)->object.this$));
          }
          static PyObject *t_QueryParserBase$MethodRemovedUseAnother_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, QueryParserBase$MethodRemovedUseAnother::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_QueryParserBase$MethodRemovedUseAnother_init_(t_QueryParserBase$MethodRemovedUseAnother *self, PyObject *args, PyObject *kwds)
          {
            QueryParserBase$MethodRemovedUseAnother object((jobject) NULL);

            INT_CALL(object = QueryParserBase$MethodRemovedUseAnother());
            self->object = object;

            return 0;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/charfilter/MappingCharFilter.h"
#include "org/apache/lucene/analysis/charfilter/NormalizeCharMap.h"
#include "java/io/IOException.h"
#include "java/io/Reader.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace charfilter {

          ::java::lang::Class *MappingCharFilter::class$ = NULL;
          jmethodID *MappingCharFilter::mids$ = NULL;
          bool MappingCharFilter::live$ = false;

          jclass MappingCharFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/charfilter/MappingCharFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_0fc966df] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/charfilter/NormalizeCharMap;Ljava/io/Reader;)V");
              mids$[mid_read_54c6a179] = env->getMethodID(cls, "read", "()I");
              mids$[mid_read_6f0bb349] = env->getMethodID(cls, "read", "([CII)I");
              mids$[mid_reset_54c6a166] = env->getMethodID(cls, "reset", "()V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          MappingCharFilter::MappingCharFilter(const ::org::apache::lucene::analysis::charfilter::NormalizeCharMap & a0, const ::java::io::Reader & a1) : ::org::apache::lucene::analysis::charfilter::BaseCharFilter(env->newObject(initializeClass, &mids$, mid_init$_0fc966df, a0.this$, a1.this$)) {}

          jint MappingCharFilter::read() const
          {
            return env->callIntMethod(this$, mids$[mid_read_54c6a179]);
          }

          jint MappingCharFilter::read(const JArray< jchar > & a0, jint a1, jint a2) const
          {
            return env->callIntMethod(this$, mids$[mid_read_6f0bb349], a0.this$, a1, a2);
          }

          void MappingCharFilter::reset() const
          {
            env->callVoidMethod(this$, mids$[mid_reset_54c6a166]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace charfilter {
          static PyObject *t_MappingCharFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_MappingCharFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_MappingCharFilter_init_(t_MappingCharFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_MappingCharFilter_read(t_MappingCharFilter *self, PyObject *args);
          static PyObject *t_MappingCharFilter_reset(t_MappingCharFilter *self, PyObject *args);

          static PyMethodDef t_MappingCharFilter__methods_[] = {
            DECLARE_METHOD(t_MappingCharFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_MappingCharFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_MappingCharFilter, read, METH_VARARGS),
            DECLARE_METHOD(t_MappingCharFilter, reset, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(MappingCharFilter, t_MappingCharFilter, ::org::apache::lucene::analysis::charfilter::BaseCharFilter, MappingCharFilter, t_MappingCharFilter_init_, 0, 0, 0, 0, 0);

          void t_MappingCharFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(MappingCharFilter), module, "MappingCharFilter", 0);
          }

          void t_MappingCharFilter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(MappingCharFilter).tp_dict, "class_", make_descriptor(MappingCharFilter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(MappingCharFilter).tp_dict, "wrapfn_", make_descriptor(t_MappingCharFilter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(MappingCharFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_MappingCharFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, MappingCharFilter::initializeClass, 1)))
              return NULL;
            return t_MappingCharFilter::wrap_Object(MappingCharFilter(((t_MappingCharFilter *) arg)->object.this$));
          }
          static PyObject *t_MappingCharFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, MappingCharFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_MappingCharFilter_init_(t_MappingCharFilter *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::analysis::charfilter::NormalizeCharMap a0((jobject) NULL);
            ::java::io::Reader a1((jobject) NULL);
            MappingCharFilter object((jobject) NULL);

            if (!parseArgs(args, "kk", ::org::apache::lucene::analysis::charfilter::NormalizeCharMap::initializeClass, ::java::io::Reader::initializeClass, &a0, &a1))
            {
              INT_CALL(object = MappingCharFilter(a0, a1));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_MappingCharFilter_read(t_MappingCharFilter *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 0:
              {
                jint result;
                OBJ_CALL(result = self->object.read());
                return PyInt_FromLong((long) result);
              }
              break;
             case 3:
              {
                JArray< jchar > a0((jobject) NULL);
                jint a1;
                jint a2;
                jint result;

                if (!parseArgs(args, "[CII", &a0, &a1, &a2))
                {
                  OBJ_CALL(result = self->object.read(a0, a1, a2));
                  return PyInt_FromLong((long) result);
                }
              }
            }

            return callSuper(&PY_TYPE(MappingCharFilter), (PyObject *) self, "read", args, 2);
          }

          static PyObject *t_MappingCharFilter_reset(t_MappingCharFilter *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.reset());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(MappingCharFilter), (PyObject *) self, "reset", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/standard/builders/ModifierQueryNodeBuilder.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/QueryNode.h"
#include "org/apache/lucene/queryparser/flexible/core/QueryNodeException.h"
#include "org/apache/lucene/queryparser/flexible/standard/builders/StandardQueryBuilder.h"
#include "org/apache/lucene/search/Query.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace builders {

              ::java::lang::Class *ModifierQueryNodeBuilder::class$ = NULL;
              jmethodID *ModifierQueryNodeBuilder::mids$ = NULL;
              bool ModifierQueryNodeBuilder::live$ = false;

              jclass ModifierQueryNodeBuilder::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/standard/builders/ModifierQueryNodeBuilder");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
                  mids$[mid_build_7f6ce179] = env->getMethodID(cls, "build", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;)Lorg/apache/lucene/search/Query;");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              ModifierQueryNodeBuilder::ModifierQueryNodeBuilder() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

              ::org::apache::lucene::search::Query ModifierQueryNodeBuilder::build(const ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode & a0) const
              {
                return ::org::apache::lucene::search::Query(env->callObjectMethod(this$, mids$[mid_build_7f6ce179], a0.this$));
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace builders {
              static PyObject *t_ModifierQueryNodeBuilder_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_ModifierQueryNodeBuilder_instance_(PyTypeObject *type, PyObject *arg);
              static int t_ModifierQueryNodeBuilder_init_(t_ModifierQueryNodeBuilder *self, PyObject *args, PyObject *kwds);
              static PyObject *t_ModifierQueryNodeBuilder_build(t_ModifierQueryNodeBuilder *self, PyObject *arg);

              static PyMethodDef t_ModifierQueryNodeBuilder__methods_[] = {
                DECLARE_METHOD(t_ModifierQueryNodeBuilder, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_ModifierQueryNodeBuilder, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_ModifierQueryNodeBuilder, build, METH_O),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(ModifierQueryNodeBuilder, t_ModifierQueryNodeBuilder, ::java::lang::Object, ModifierQueryNodeBuilder, t_ModifierQueryNodeBuilder_init_, 0, 0, 0, 0, 0);

              void t_ModifierQueryNodeBuilder::install(PyObject *module)
              {
                installType(&PY_TYPE(ModifierQueryNodeBuilder), module, "ModifierQueryNodeBuilder", 0);
              }

              void t_ModifierQueryNodeBuilder::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(ModifierQueryNodeBuilder).tp_dict, "class_", make_descriptor(ModifierQueryNodeBuilder::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(ModifierQueryNodeBuilder).tp_dict, "wrapfn_", make_descriptor(t_ModifierQueryNodeBuilder::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(ModifierQueryNodeBuilder).tp_dict, "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_ModifierQueryNodeBuilder_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, ModifierQueryNodeBuilder::initializeClass, 1)))
                  return NULL;
                return t_ModifierQueryNodeBuilder::wrap_Object(ModifierQueryNodeBuilder(((t_ModifierQueryNodeBuilder *) arg)->object.this$));
              }
              static PyObject *t_ModifierQueryNodeBuilder_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, ModifierQueryNodeBuilder::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_ModifierQueryNodeBuilder_init_(t_ModifierQueryNodeBuilder *self, PyObject *args, PyObject *kwds)
              {
                ModifierQueryNodeBuilder object((jobject) NULL);

                INT_CALL(object = ModifierQueryNodeBuilder());
                self->object = object;

                return 0;
              }

              static PyObject *t_ModifierQueryNodeBuilder_build(t_ModifierQueryNodeBuilder *self, PyObject *arg)
              {
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode a0((jobject) NULL);
                ::org::apache::lucene::search::Query result((jobject) NULL);

                if (!parseArg(arg, "k", ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode::initializeClass, &a0))
                {
                  OBJ_CALL(result = self->object.build(a0));
                  return ::org::apache::lucene::search::t_Query::wrap_Object(result);
                }

                PyErr_SetArgsError((PyObject *) self, "build", arg);
                return NULL;
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/similarities/AfterEffectB.h"
#include "org/apache/lucene/search/similarities/BasicStats.h"
#include "java/lang/String.h"
#include "org/apache/lucene/search/Explanation.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace similarities {

          ::java::lang::Class *AfterEffectB::class$ = NULL;
          jmethodID *AfterEffectB::mids$ = NULL;
          bool AfterEffectB::live$ = false;

          jclass AfterEffectB::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/similarities/AfterEffectB");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_explain_05d4946a] = env->getMethodID(cls, "explain", "(Lorg/apache/lucene/search/similarities/BasicStats;F)Lorg/apache/lucene/search/Explanation;");
              mids$[mid_score_076760a9] = env->getMethodID(cls, "score", "(Lorg/apache/lucene/search/similarities/BasicStats;F)F");
              mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          AfterEffectB::AfterEffectB() : ::org::apache::lucene::search::similarities::AfterEffect(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          ::org::apache::lucene::search::Explanation AfterEffectB::explain(const ::org::apache::lucene::search::similarities::BasicStats & a0, jfloat a1) const
          {
            return ::org::apache::lucene::search::Explanation(env->callObjectMethod(this$, mids$[mid_explain_05d4946a], a0.this$, a1));
          }

          jfloat AfterEffectB::score(const ::org::apache::lucene::search::similarities::BasicStats & a0, jfloat a1) const
          {
            return env->callFloatMethod(this$, mids$[mid_score_076760a9], a0.this$, a1);
          }

          ::java::lang::String AfterEffectB::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace similarities {
          static PyObject *t_AfterEffectB_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_AfterEffectB_instance_(PyTypeObject *type, PyObject *arg);
          static int t_AfterEffectB_init_(t_AfterEffectB *self, PyObject *args, PyObject *kwds);
          static PyObject *t_AfterEffectB_explain(t_AfterEffectB *self, PyObject *args);
          static PyObject *t_AfterEffectB_score(t_AfterEffectB *self, PyObject *args);
          static PyObject *t_AfterEffectB_toString(t_AfterEffectB *self, PyObject *args);

          static PyMethodDef t_AfterEffectB__methods_[] = {
            DECLARE_METHOD(t_AfterEffectB, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_AfterEffectB, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_AfterEffectB, explain, METH_VARARGS),
            DECLARE_METHOD(t_AfterEffectB, score, METH_VARARGS),
            DECLARE_METHOD(t_AfterEffectB, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(AfterEffectB, t_AfterEffectB, ::org::apache::lucene::search::similarities::AfterEffect, AfterEffectB, t_AfterEffectB_init_, 0, 0, 0, 0, 0);

          void t_AfterEffectB::install(PyObject *module)
          {
            installType(&PY_TYPE(AfterEffectB), module, "AfterEffectB", 0);
          }

          void t_AfterEffectB::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(AfterEffectB).tp_dict, "class_", make_descriptor(AfterEffectB::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(AfterEffectB).tp_dict, "wrapfn_", make_descriptor(t_AfterEffectB::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(AfterEffectB).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_AfterEffectB_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, AfterEffectB::initializeClass, 1)))
              return NULL;
            return t_AfterEffectB::wrap_Object(AfterEffectB(((t_AfterEffectB *) arg)->object.this$));
          }
          static PyObject *t_AfterEffectB_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, AfterEffectB::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_AfterEffectB_init_(t_AfterEffectB *self, PyObject *args, PyObject *kwds)
          {
            AfterEffectB object((jobject) NULL);

            INT_CALL(object = AfterEffectB());
            self->object = object;

            return 0;
          }

          static PyObject *t_AfterEffectB_explain(t_AfterEffectB *self, PyObject *args)
          {
            ::org::apache::lucene::search::similarities::BasicStats a0((jobject) NULL);
            jfloat a1;
            ::org::apache::lucene::search::Explanation result((jobject) NULL);

            if (!parseArgs(args, "kF", ::org::apache::lucene::search::similarities::BasicStats::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.explain(a0, a1));
              return ::org::apache::lucene::search::t_Explanation::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(AfterEffectB), (PyObject *) self, "explain", args, 2);
          }

          static PyObject *t_AfterEffectB_score(t_AfterEffectB *self, PyObject *args)
          {
            ::org::apache::lucene::search::similarities::BasicStats a0((jobject) NULL);
            jfloat a1;
            jfloat result;

            if (!parseArgs(args, "kF", ::org::apache::lucene::search::similarities::BasicStats::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.score(a0, a1));
              return PyFloat_FromDouble((double) result);
            }

            return callSuper(&PY_TYPE(AfterEffectB), (PyObject *) self, "score", args, 2);
          }

          static PyObject *t_AfterEffectB_toString(t_AfterEffectB *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(&PY_TYPE(AfterEffectB), (PyObject *) self, "toString", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/grouping/AbstractAllGroupsCollector.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/search/Scorer.h"
#include "java/util/Collection.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace grouping {

          ::java::lang::Class *AbstractAllGroupsCollector::class$ = NULL;
          jmethodID *AbstractAllGroupsCollector::mids$ = NULL;
          bool AbstractAllGroupsCollector::live$ = false;

          jclass AbstractAllGroupsCollector::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/grouping/AbstractAllGroupsCollector");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_acceptsDocsOutOfOrder_54c6a16a] = env->getMethodID(cls, "acceptsDocsOutOfOrder", "()Z");
              mids$[mid_getGroupCount_54c6a179] = env->getMethodID(cls, "getGroupCount", "()I");
              mids$[mid_getGroups_2d2d7de4] = env->getMethodID(cls, "getGroups", "()Ljava/util/Collection;");
              mids$[mid_setScorer_8be0880c] = env->getMethodID(cls, "setScorer", "(Lorg/apache/lucene/search/Scorer;)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          AbstractAllGroupsCollector::AbstractAllGroupsCollector() : ::org::apache::lucene::search::Collector(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          jboolean AbstractAllGroupsCollector::acceptsDocsOutOfOrder() const
          {
            return env->callBooleanMethod(this$, mids$[mid_acceptsDocsOutOfOrder_54c6a16a]);
          }

          jint AbstractAllGroupsCollector::getGroupCount() const
          {
            return env->callIntMethod(this$, mids$[mid_getGroupCount_54c6a179]);
          }

          ::java::util::Collection AbstractAllGroupsCollector::getGroups() const
          {
            return ::java::util::Collection(env->callObjectMethod(this$, mids$[mid_getGroups_2d2d7de4]));
          }

          void AbstractAllGroupsCollector::setScorer(const ::org::apache::lucene::search::Scorer & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setScorer_8be0880c], a0.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace grouping {
          static PyObject *t_AbstractAllGroupsCollector_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_AbstractAllGroupsCollector_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_AbstractAllGroupsCollector_of_(t_AbstractAllGroupsCollector *self, PyObject *args);
          static int t_AbstractAllGroupsCollector_init_(t_AbstractAllGroupsCollector *self, PyObject *args, PyObject *kwds);
          static PyObject *t_AbstractAllGroupsCollector_acceptsDocsOutOfOrder(t_AbstractAllGroupsCollector *self, PyObject *args);
          static PyObject *t_AbstractAllGroupsCollector_getGroupCount(t_AbstractAllGroupsCollector *self);
          static PyObject *t_AbstractAllGroupsCollector_getGroups(t_AbstractAllGroupsCollector *self);
          static PyObject *t_AbstractAllGroupsCollector_setScorer(t_AbstractAllGroupsCollector *self, PyObject *args);
          static PyObject *t_AbstractAllGroupsCollector_get__groupCount(t_AbstractAllGroupsCollector *self, void *data);
          static PyObject *t_AbstractAllGroupsCollector_get__groups(t_AbstractAllGroupsCollector *self, void *data);
          static int t_AbstractAllGroupsCollector_set__scorer(t_AbstractAllGroupsCollector *self, PyObject *arg, void *data);
          static PyObject *t_AbstractAllGroupsCollector_get__parameters_(t_AbstractAllGroupsCollector *self, void *data);
          static PyGetSetDef t_AbstractAllGroupsCollector__fields_[] = {
            DECLARE_GET_FIELD(t_AbstractAllGroupsCollector, groupCount),
            DECLARE_GET_FIELD(t_AbstractAllGroupsCollector, groups),
            DECLARE_SET_FIELD(t_AbstractAllGroupsCollector, scorer),
            DECLARE_GET_FIELD(t_AbstractAllGroupsCollector, parameters_),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_AbstractAllGroupsCollector__methods_[] = {
            DECLARE_METHOD(t_AbstractAllGroupsCollector, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_AbstractAllGroupsCollector, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_AbstractAllGroupsCollector, of_, METH_VARARGS),
            DECLARE_METHOD(t_AbstractAllGroupsCollector, acceptsDocsOutOfOrder, METH_VARARGS),
            DECLARE_METHOD(t_AbstractAllGroupsCollector, getGroupCount, METH_NOARGS),
            DECLARE_METHOD(t_AbstractAllGroupsCollector, getGroups, METH_NOARGS),
            DECLARE_METHOD(t_AbstractAllGroupsCollector, setScorer, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(AbstractAllGroupsCollector, t_AbstractAllGroupsCollector, ::org::apache::lucene::search::Collector, AbstractAllGroupsCollector, t_AbstractAllGroupsCollector_init_, 0, 0, t_AbstractAllGroupsCollector__fields_, 0, 0);
          PyObject *t_AbstractAllGroupsCollector::wrap_Object(const AbstractAllGroupsCollector& object, PyTypeObject *p0)
          {
            PyObject *obj = t_AbstractAllGroupsCollector::wrap_Object(object);
            if (obj != NULL && obj != Py_None)
            {
              t_AbstractAllGroupsCollector *self = (t_AbstractAllGroupsCollector *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          PyObject *t_AbstractAllGroupsCollector::wrap_jobject(const jobject& object, PyTypeObject *p0)
          {
            PyObject *obj = t_AbstractAllGroupsCollector::wrap_jobject(object);
            if (obj != NULL && obj != Py_None)
            {
              t_AbstractAllGroupsCollector *self = (t_AbstractAllGroupsCollector *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          void t_AbstractAllGroupsCollector::install(PyObject *module)
          {
            installType(&PY_TYPE(AbstractAllGroupsCollector), module, "AbstractAllGroupsCollector", 0);
          }

          void t_AbstractAllGroupsCollector::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(AbstractAllGroupsCollector).tp_dict, "class_", make_descriptor(AbstractAllGroupsCollector::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(AbstractAllGroupsCollector).tp_dict, "wrapfn_", make_descriptor(t_AbstractAllGroupsCollector::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(AbstractAllGroupsCollector).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_AbstractAllGroupsCollector_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, AbstractAllGroupsCollector::initializeClass, 1)))
              return NULL;
            return t_AbstractAllGroupsCollector::wrap_Object(AbstractAllGroupsCollector(((t_AbstractAllGroupsCollector *) arg)->object.this$));
          }
          static PyObject *t_AbstractAllGroupsCollector_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, AbstractAllGroupsCollector::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_AbstractAllGroupsCollector_of_(t_AbstractAllGroupsCollector *self, PyObject *args)
          {
            if (!parseArg(args, "T", 1, &(self->parameters)))
              Py_RETURN_SELF;
            return PyErr_SetArgsError((PyObject *) self, "of_", args);
          }

          static int t_AbstractAllGroupsCollector_init_(t_AbstractAllGroupsCollector *self, PyObject *args, PyObject *kwds)
          {
            AbstractAllGroupsCollector object((jobject) NULL);

            INT_CALL(object = AbstractAllGroupsCollector());
            self->object = object;

            return 0;
          }

          static PyObject *t_AbstractAllGroupsCollector_acceptsDocsOutOfOrder(t_AbstractAllGroupsCollector *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.acceptsDocsOutOfOrder());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(AbstractAllGroupsCollector), (PyObject *) self, "acceptsDocsOutOfOrder", args, 2);
          }

          static PyObject *t_AbstractAllGroupsCollector_getGroupCount(t_AbstractAllGroupsCollector *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getGroupCount());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_AbstractAllGroupsCollector_getGroups(t_AbstractAllGroupsCollector *self)
          {
            ::java::util::Collection result((jobject) NULL);
            OBJ_CALL(result = self->object.getGroups());
            return ::java::util::t_Collection::wrap_Object(result, self->parameters[0]);
          }

          static PyObject *t_AbstractAllGroupsCollector_setScorer(t_AbstractAllGroupsCollector *self, PyObject *args)
          {
            ::org::apache::lucene::search::Scorer a0((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::search::Scorer::initializeClass, &a0))
            {
              OBJ_CALL(self->object.setScorer(a0));
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(AbstractAllGroupsCollector), (PyObject *) self, "setScorer", args, 2);
          }
          static PyObject *t_AbstractAllGroupsCollector_get__parameters_(t_AbstractAllGroupsCollector *self, void *data)
          {
            return typeParameters(self->parameters, sizeof(self->parameters));
          }

          static PyObject *t_AbstractAllGroupsCollector_get__groupCount(t_AbstractAllGroupsCollector *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getGroupCount());
            return PyInt_FromLong((long) value);
          }

          static PyObject *t_AbstractAllGroupsCollector_get__groups(t_AbstractAllGroupsCollector *self, void *data)
          {
            ::java::util::Collection value((jobject) NULL);
            OBJ_CALL(value = self->object.getGroups());
            return ::java::util::t_Collection::wrap_Object(value);
          }

          static int t_AbstractAllGroupsCollector_set__scorer(t_AbstractAllGroupsCollector *self, PyObject *arg, void *data)
          {
            {
              ::org::apache::lucene::search::Scorer value((jobject) NULL);
              if (!parseArg(arg, "k", ::org::apache::lucene::search::Scorer::initializeClass, &value))
              {
                INT_CALL(self->object.setScorer(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "scorer", arg);
            return -1;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/packed/PagedGrowableWriter.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace packed {

          ::java::lang::Class *PagedGrowableWriter::class$ = NULL;
          jmethodID *PagedGrowableWriter::mids$ = NULL;
          bool PagedGrowableWriter::live$ = false;

          jclass PagedGrowableWriter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/util/packed/PagedGrowableWriter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_9832dac4] = env->getMethodID(cls, "<init>", "(JIIF)V");
              mids$[mid_newUnfilledCopy_b730b410] = env->getMethodID(cls, "newUnfilledCopy", "(J)Lorg/apache/lucene/util/packed/PagedGrowableWriter;");
              mids$[mid_newMutable_48ebd249] = env->getMethodID(cls, "newMutable", "(II)Lorg/apache/lucene/util/packed/PackedInts$Mutable;");
              mids$[mid_baseRamBytesUsed_54c6a17a] = env->getMethodID(cls, "baseRamBytesUsed", "()J");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          PagedGrowableWriter::PagedGrowableWriter(jlong a0, jint a1, jint a2, jfloat a3) : ::org::apache::lucene::util::packed::AbstractPagedMutable(env->newObject(initializeClass, &mids$, mid_init$_9832dac4, a0, a1, a2, a3)) {}
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace packed {
          static PyObject *t_PagedGrowableWriter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PagedGrowableWriter_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PagedGrowableWriter_of_(t_PagedGrowableWriter *self, PyObject *args);
          static int t_PagedGrowableWriter_init_(t_PagedGrowableWriter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_PagedGrowableWriter_get__parameters_(t_PagedGrowableWriter *self, void *data);
          static PyGetSetDef t_PagedGrowableWriter__fields_[] = {
            DECLARE_GET_FIELD(t_PagedGrowableWriter, parameters_),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_PagedGrowableWriter__methods_[] = {
            DECLARE_METHOD(t_PagedGrowableWriter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PagedGrowableWriter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PagedGrowableWriter, of_, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(PagedGrowableWriter, t_PagedGrowableWriter, ::org::apache::lucene::util::packed::AbstractPagedMutable, PagedGrowableWriter, t_PagedGrowableWriter_init_, 0, 0, t_PagedGrowableWriter__fields_, 0, 0);
          PyObject *t_PagedGrowableWriter::wrap_Object(const PagedGrowableWriter& object, PyTypeObject *p0)
          {
            PyObject *obj = t_PagedGrowableWriter::wrap_Object(object);
            if (obj != NULL && obj != Py_None)
            {
              t_PagedGrowableWriter *self = (t_PagedGrowableWriter *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          PyObject *t_PagedGrowableWriter::wrap_jobject(const jobject& object, PyTypeObject *p0)
          {
            PyObject *obj = t_PagedGrowableWriter::wrap_jobject(object);
            if (obj != NULL && obj != Py_None)
            {
              t_PagedGrowableWriter *self = (t_PagedGrowableWriter *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          void t_PagedGrowableWriter::install(PyObject *module)
          {
            installType(&PY_TYPE(PagedGrowableWriter), module, "PagedGrowableWriter", 0);
          }

          void t_PagedGrowableWriter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(PagedGrowableWriter).tp_dict, "class_", make_descriptor(PagedGrowableWriter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(PagedGrowableWriter).tp_dict, "wrapfn_", make_descriptor(t_PagedGrowableWriter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(PagedGrowableWriter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_PagedGrowableWriter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, PagedGrowableWriter::initializeClass, 1)))
              return NULL;
            return t_PagedGrowableWriter::wrap_Object(PagedGrowableWriter(((t_PagedGrowableWriter *) arg)->object.this$));
          }
          static PyObject *t_PagedGrowableWriter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, PagedGrowableWriter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_PagedGrowableWriter_of_(t_PagedGrowableWriter *self, PyObject *args)
          {
            if (!parseArg(args, "T", 1, &(self->parameters)))
              Py_RETURN_SELF;
            return PyErr_SetArgsError((PyObject *) self, "of_", args);
          }

          static int t_PagedGrowableWriter_init_(t_PagedGrowableWriter *self, PyObject *args, PyObject *kwds)
          {
            jlong a0;
            jint a1;
            jint a2;
            jfloat a3;
            PagedGrowableWriter object((jobject) NULL);

            if (!parseArgs(args, "JIIF", &a0, &a1, &a2, &a3))
            {
              INT_CALL(object = PagedGrowableWriter(a0, a1, a2, a3));
              self->object = object;
              self->parameters[0] = &::org::apache::lucene::util::packed::PY_TYPE(PagedGrowableWriter);
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }
          static PyObject *t_PagedGrowableWriter_get__parameters_(t_PagedGrowableWriter *self, void *data)
          {
            return typeParameters(self->parameters, sizeof(self->parameters));
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queries/ChainedFilter.h"
#include "org/apache/lucene/util/Bits.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/search/DocIdSet.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {

        ::java::lang::Class *ChainedFilter::class$ = NULL;
        jmethodID *ChainedFilter::mids$ = NULL;
        bool ChainedFilter::live$ = false;
        jint ChainedFilter::AND = (jint) 0;
        jint ChainedFilter::ANDNOT = (jint) 0;
        jint ChainedFilter::DEFAULT = (jint) 0;
        jint ChainedFilter::OR = (jint) 0;
        jint ChainedFilter::XOR = (jint) 0;

        jclass ChainedFilter::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/queries/ChainedFilter");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_cbb0d6f6] = env->getMethodID(cls, "<init>", "([Lorg/apache/lucene/search/Filter;)V");
            mids$[mid_init$_571f09d4] = env->getMethodID(cls, "<init>", "([Lorg/apache/lucene/search/Filter;I)V");
            mids$[mid_init$_fa4768a0] = env->getMethodID(cls, "<init>", "([Lorg/apache/lucene/search/Filter;[I)V");
            mids$[mid_getDocIdSet_ccce0897] = env->getMethodID(cls, "getDocIdSet", "(Lorg/apache/lucene/index/AtomicReaderContext;Lorg/apache/lucene/util/Bits;)Lorg/apache/lucene/search/DocIdSet;");
            mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

            class$ = (::java::lang::Class *) new JObject(cls);
            cls = (jclass) class$->this$;

            AND = env->getStaticIntField(cls, "AND");
            ANDNOT = env->getStaticIntField(cls, "ANDNOT");
            DEFAULT = env->getStaticIntField(cls, "DEFAULT");
            OR = env->getStaticIntField(cls, "OR");
            XOR = env->getStaticIntField(cls, "XOR");
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        ChainedFilter::ChainedFilter(const JArray< ::org::apache::lucene::search::Filter > & a0) : ::org::apache::lucene::search::Filter(env->newObject(initializeClass, &mids$, mid_init$_cbb0d6f6, a0.this$)) {}

        ChainedFilter::ChainedFilter(const JArray< ::org::apache::lucene::search::Filter > & a0, jint a1) : ::org::apache::lucene::search::Filter(env->newObject(initializeClass, &mids$, mid_init$_571f09d4, a0.this$, a1)) {}

        ChainedFilter::ChainedFilter(const JArray< ::org::apache::lucene::search::Filter > & a0, const JArray< jint > & a1) : ::org::apache::lucene::search::Filter(env->newObject(initializeClass, &mids$, mid_init$_fa4768a0, a0.this$, a1.this$)) {}

        ::org::apache::lucene::search::DocIdSet ChainedFilter::getDocIdSet(const ::org::apache::lucene::index::AtomicReaderContext & a0, const ::org::apache::lucene::util::Bits & a1) const
        {
          return ::org::apache::lucene::search::DocIdSet(env->callObjectMethod(this$, mids$[mid_getDocIdSet_ccce0897], a0.this$, a1.this$));
        }

        ::java::lang::String ChainedFilter::toString() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        static PyObject *t_ChainedFilter_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_ChainedFilter_instance_(PyTypeObject *type, PyObject *arg);
        static int t_ChainedFilter_init_(t_ChainedFilter *self, PyObject *args, PyObject *kwds);
        static PyObject *t_ChainedFilter_getDocIdSet(t_ChainedFilter *self, PyObject *args);
        static PyObject *t_ChainedFilter_toString(t_ChainedFilter *self, PyObject *args);

        static PyMethodDef t_ChainedFilter__methods_[] = {
          DECLARE_METHOD(t_ChainedFilter, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_ChainedFilter, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_ChainedFilter, getDocIdSet, METH_VARARGS),
          DECLARE_METHOD(t_ChainedFilter, toString, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(ChainedFilter, t_ChainedFilter, ::org::apache::lucene::search::Filter, ChainedFilter, t_ChainedFilter_init_, 0, 0, 0, 0, 0);

        void t_ChainedFilter::install(PyObject *module)
        {
          installType(&PY_TYPE(ChainedFilter), module, "ChainedFilter", 0);
        }

        void t_ChainedFilter::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(ChainedFilter).tp_dict, "class_", make_descriptor(ChainedFilter::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(ChainedFilter).tp_dict, "wrapfn_", make_descriptor(t_ChainedFilter::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(ChainedFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
          env->getClass(ChainedFilter::initializeClass);
          PyDict_SetItemString(PY_TYPE(ChainedFilter).tp_dict, "AND", make_descriptor(ChainedFilter::AND));
          PyDict_SetItemString(PY_TYPE(ChainedFilter).tp_dict, "ANDNOT", make_descriptor(ChainedFilter::ANDNOT));
          PyDict_SetItemString(PY_TYPE(ChainedFilter).tp_dict, "DEFAULT", make_descriptor(ChainedFilter::DEFAULT));
          PyDict_SetItemString(PY_TYPE(ChainedFilter).tp_dict, "OR", make_descriptor(ChainedFilter::OR));
          PyDict_SetItemString(PY_TYPE(ChainedFilter).tp_dict, "XOR", make_descriptor(ChainedFilter::XOR));
        }

        static PyObject *t_ChainedFilter_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, ChainedFilter::initializeClass, 1)))
            return NULL;
          return t_ChainedFilter::wrap_Object(ChainedFilter(((t_ChainedFilter *) arg)->object.this$));
        }
        static PyObject *t_ChainedFilter_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, ChainedFilter::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_ChainedFilter_init_(t_ChainedFilter *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              JArray< ::org::apache::lucene::search::Filter > a0((jobject) NULL);
              ChainedFilter object((jobject) NULL);

              if (!parseArgs(args, "[k", ::org::apache::lucene::search::Filter::initializeClass, &a0))
              {
                INT_CALL(object = ChainedFilter(a0));
                self->object = object;
                break;
              }
            }
            goto err;
           case 2:
            {
              JArray< ::org::apache::lucene::search::Filter > a0((jobject) NULL);
              jint a1;
              ChainedFilter object((jobject) NULL);

              if (!parseArgs(args, "[kI", ::org::apache::lucene::search::Filter::initializeClass, &a0, &a1))
              {
                INT_CALL(object = ChainedFilter(a0, a1));
                self->object = object;
                break;
              }
            }
            {
              JArray< ::org::apache::lucene::search::Filter > a0((jobject) NULL);
              JArray< jint > a1((jobject) NULL);
              ChainedFilter object((jobject) NULL);

              if (!parseArgs(args, "[k[I", ::org::apache::lucene::search::Filter::initializeClass, &a0, &a1))
              {
                INT_CALL(object = ChainedFilter(a0, a1));
                self->object = object;
                break;
              }
            }
           default:
           err:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_ChainedFilter_getDocIdSet(t_ChainedFilter *self, PyObject *args)
        {
          ::org::apache::lucene::index::AtomicReaderContext a0((jobject) NULL);
          ::org::apache::lucene::util::Bits a1((jobject) NULL);
          ::org::apache::lucene::search::DocIdSet result((jobject) NULL);

          if (!parseArgs(args, "kk", ::org::apache::lucene::index::AtomicReaderContext::initializeClass, ::org::apache::lucene::util::Bits::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = self->object.getDocIdSet(a0, a1));
            return ::org::apache::lucene::search::t_DocIdSet::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(ChainedFilter), (PyObject *) self, "getDocIdSet", args, 2);
        }

        static PyObject *t_ChainedFilter_toString(t_ChainedFilter *self, PyObject *args)
        {
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.toString());
            return j2p(result);
          }

          return callSuper(&PY_TYPE(ChainedFilter), (PyObject *) self, "toString", args, 2);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/miscellaneous/ScandinavianNormalizationFilter.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {

          ::java::lang::Class *ScandinavianNormalizationFilter::class$ = NULL;
          jmethodID *ScandinavianNormalizationFilter::mids$ = NULL;
          bool ScandinavianNormalizationFilter::live$ = false;

          jclass ScandinavianNormalizationFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/miscellaneous/ScandinavianNormalizationFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_c7c794dc] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;)V");
              mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ScandinavianNormalizationFilter::ScandinavianNormalizationFilter(const ::org::apache::lucene::analysis::TokenStream & a0) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_c7c794dc, a0.this$)) {}

          jboolean ScandinavianNormalizationFilter::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_54c6a16a]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {
          static PyObject *t_ScandinavianNormalizationFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_ScandinavianNormalizationFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_ScandinavianNormalizationFilter_init_(t_ScandinavianNormalizationFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_ScandinavianNormalizationFilter_incrementToken(t_ScandinavianNormalizationFilter *self, PyObject *args);

          static PyMethodDef t_ScandinavianNormalizationFilter__methods_[] = {
            DECLARE_METHOD(t_ScandinavianNormalizationFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ScandinavianNormalizationFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ScandinavianNormalizationFilter, incrementToken, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(ScandinavianNormalizationFilter, t_ScandinavianNormalizationFilter, ::org::apache::lucene::analysis::TokenFilter, ScandinavianNormalizationFilter, t_ScandinavianNormalizationFilter_init_, 0, 0, 0, 0, 0);

          void t_ScandinavianNormalizationFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(ScandinavianNormalizationFilter), module, "ScandinavianNormalizationFilter", 0);
          }

          void t_ScandinavianNormalizationFilter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(ScandinavianNormalizationFilter).tp_dict, "class_", make_descriptor(ScandinavianNormalizationFilter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(ScandinavianNormalizationFilter).tp_dict, "wrapfn_", make_descriptor(t_ScandinavianNormalizationFilter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(ScandinavianNormalizationFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_ScandinavianNormalizationFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, ScandinavianNormalizationFilter::initializeClass, 1)))
              return NULL;
            return t_ScandinavianNormalizationFilter::wrap_Object(ScandinavianNormalizationFilter(((t_ScandinavianNormalizationFilter *) arg)->object.this$));
          }
          static PyObject *t_ScandinavianNormalizationFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, ScandinavianNormalizationFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_ScandinavianNormalizationFilter_init_(t_ScandinavianNormalizationFilter *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ScandinavianNormalizationFilter object((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              INT_CALL(object = ScandinavianNormalizationFilter(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_ScandinavianNormalizationFilter_incrementToken(t_ScandinavianNormalizationFilter *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(ScandinavianNormalizationFilter), (PyObject *) self, "incrementToken", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/tartarus/snowball/ext/PortugueseStemmer.h"
#include "java/lang/Object.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace tartarus {
    namespace snowball {
      namespace ext {

        ::java::lang::Class *PortugueseStemmer::class$ = NULL;
        jmethodID *PortugueseStemmer::mids$ = NULL;
        bool PortugueseStemmer::live$ = false;

        jclass PortugueseStemmer::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/tartarus/snowball/ext/PortugueseStemmer");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
            mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
            mids$[mid_stem_54c6a16a] = env->getMethodID(cls, "stem", "()Z");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        PortugueseStemmer::PortugueseStemmer() : ::org::tartarus::snowball::SnowballProgram(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        jboolean PortugueseStemmer::equals(const ::java::lang::Object & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
        }

        jint PortugueseStemmer::hashCode() const
        {
          return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
        }

        jboolean PortugueseStemmer::stem() const
        {
          return env->callBooleanMethod(this$, mids$[mid_stem_54c6a16a]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace tartarus {
    namespace snowball {
      namespace ext {
        static PyObject *t_PortugueseStemmer_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_PortugueseStemmer_instance_(PyTypeObject *type, PyObject *arg);
        static int t_PortugueseStemmer_init_(t_PortugueseStemmer *self, PyObject *args, PyObject *kwds);
        static PyObject *t_PortugueseStemmer_equals(t_PortugueseStemmer *self, PyObject *args);
        static PyObject *t_PortugueseStemmer_hashCode(t_PortugueseStemmer *self, PyObject *args);
        static PyObject *t_PortugueseStemmer_stem(t_PortugueseStemmer *self, PyObject *args);

        static PyMethodDef t_PortugueseStemmer__methods_[] = {
          DECLARE_METHOD(t_PortugueseStemmer, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PortugueseStemmer, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PortugueseStemmer, equals, METH_VARARGS),
          DECLARE_METHOD(t_PortugueseStemmer, hashCode, METH_VARARGS),
          DECLARE_METHOD(t_PortugueseStemmer, stem, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(PortugueseStemmer, t_PortugueseStemmer, ::org::tartarus::snowball::SnowballProgram, PortugueseStemmer, t_PortugueseStemmer_init_, 0, 0, 0, 0, 0);

        void t_PortugueseStemmer::install(PyObject *module)
        {
          installType(&PY_TYPE(PortugueseStemmer), module, "PortugueseStemmer", 0);
        }

        void t_PortugueseStemmer::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(PortugueseStemmer).tp_dict, "class_", make_descriptor(PortugueseStemmer::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(PortugueseStemmer).tp_dict, "wrapfn_", make_descriptor(t_PortugueseStemmer::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(PortugueseStemmer).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_PortugueseStemmer_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, PortugueseStemmer::initializeClass, 1)))
            return NULL;
          return t_PortugueseStemmer::wrap_Object(PortugueseStemmer(((t_PortugueseStemmer *) arg)->object.this$));
        }
        static PyObject *t_PortugueseStemmer_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, PortugueseStemmer::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_PortugueseStemmer_init_(t_PortugueseStemmer *self, PyObject *args, PyObject *kwds)
        {
          PortugueseStemmer object((jobject) NULL);

          INT_CALL(object = PortugueseStemmer());
          self->object = object;

          return 0;
        }

        static PyObject *t_PortugueseStemmer_equals(t_PortugueseStemmer *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.equals(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(PortugueseStemmer), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_PortugueseStemmer_hashCode(t_PortugueseStemmer *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hashCode());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(PortugueseStemmer), (PyObject *) self, "hashCode", args, 2);
        }

        static PyObject *t_PortugueseStemmer_stem(t_PortugueseStemmer *self, PyObject *args)
        {
          jboolean result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.stem());
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(PortugueseStemmer), (PyObject *) self, "stem", args, 2);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/xml/builders/SpanOrTermsBuilder.h"
#include "org/apache/lucene/analysis/Analyzer.h"
#include "org/apache/lucene/search/spans/SpanQuery.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace xml {
          namespace builders {

            ::java::lang::Class *SpanOrTermsBuilder::class$ = NULL;
            jmethodID *SpanOrTermsBuilder::mids$ = NULL;
            bool SpanOrTermsBuilder::live$ = false;

            jclass SpanOrTermsBuilder::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/xml/builders/SpanOrTermsBuilder");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_31619410] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/Analyzer;)V");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            SpanOrTermsBuilder::SpanOrTermsBuilder(const ::org::apache::lucene::analysis::Analyzer & a0) : ::org::apache::lucene::queryparser::xml::builders::SpanBuilderBase(env->newObject(initializeClass, &mids$, mid_init$_31619410, a0.this$)) {}
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace xml {
          namespace builders {
            static PyObject *t_SpanOrTermsBuilder_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_SpanOrTermsBuilder_instance_(PyTypeObject *type, PyObject *arg);
            static int t_SpanOrTermsBuilder_init_(t_SpanOrTermsBuilder *self, PyObject *args, PyObject *kwds);

            static PyMethodDef t_SpanOrTermsBuilder__methods_[] = {
              DECLARE_METHOD(t_SpanOrTermsBuilder, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_SpanOrTermsBuilder, instance_, METH_O | METH_CLASS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(SpanOrTermsBuilder, t_SpanOrTermsBuilder, ::org::apache::lucene::queryparser::xml::builders::SpanBuilderBase, SpanOrTermsBuilder, t_SpanOrTermsBuilder_init_, 0, 0, 0, 0, 0);

            void t_SpanOrTermsBuilder::install(PyObject *module)
            {
              installType(&PY_TYPE(SpanOrTermsBuilder), module, "SpanOrTermsBuilder", 0);
            }

            void t_SpanOrTermsBuilder::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(SpanOrTermsBuilder).tp_dict, "class_", make_descriptor(SpanOrTermsBuilder::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(SpanOrTermsBuilder).tp_dict, "wrapfn_", make_descriptor(t_SpanOrTermsBuilder::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(SpanOrTermsBuilder).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_SpanOrTermsBuilder_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, SpanOrTermsBuilder::initializeClass, 1)))
                return NULL;
              return t_SpanOrTermsBuilder::wrap_Object(SpanOrTermsBuilder(((t_SpanOrTermsBuilder *) arg)->object.this$));
            }
            static PyObject *t_SpanOrTermsBuilder_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, SpanOrTermsBuilder::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_SpanOrTermsBuilder_init_(t_SpanOrTermsBuilder *self, PyObject *args, PyObject *kwds)
            {
              ::org::apache::lucene::analysis::Analyzer a0((jobject) NULL);
              SpanOrTermsBuilder object((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::analysis::Analyzer::initializeClass, &a0))
              {
                INT_CALL(object = SpanOrTermsBuilder(a0));
                self->object = object;
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/compound/hyphenation/TernaryTree$Iterator.h"
#include "java/util/Enumeration.h"
#include "java/lang/String.h"
#include "org/apache/lucene/analysis/compound/hyphenation/TernaryTree.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace compound {
          namespace hyphenation {

            ::java::lang::Class *TernaryTree$Iterator::class$ = NULL;
            jmethodID *TernaryTree$Iterator::mids$ = NULL;
            bool TernaryTree$Iterator::live$ = false;

            jclass TernaryTree$Iterator::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/compound/hyphenation/TernaryTree$Iterator");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_fe795a01] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/compound/hyphenation/TernaryTree;)V");
                mids$[mid_getValue_54c6a173] = env->getMethodID(cls, "getValue", "()C");
                mids$[mid_hasMoreElements_54c6a16a] = env->getMethodID(cls, "hasMoreElements", "()Z");
                mids$[mid_nextElement_14c7b5c5] = env->getMethodID(cls, "nextElement", "()Ljava/lang/String;");
                mids$[mid_rewind_54c6a166] = env->getMethodID(cls, "rewind", "()V");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            TernaryTree$Iterator::TernaryTree$Iterator(const ::org::apache::lucene::analysis::compound::hyphenation::TernaryTree & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_fe795a01, a0.this$)) {}

            jchar TernaryTree$Iterator::getValue() const
            {
              return env->callCharMethod(this$, mids$[mid_getValue_54c6a173]);
            }

            jboolean TernaryTree$Iterator::hasMoreElements() const
            {
              return env->callBooleanMethod(this$, mids$[mid_hasMoreElements_54c6a16a]);
            }

            ::java::lang::String TernaryTree$Iterator::nextElement() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_nextElement_14c7b5c5]));
            }

            void TernaryTree$Iterator::rewind() const
            {
              env->callVoidMethod(this$, mids$[mid_rewind_54c6a166]);
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace compound {
          namespace hyphenation {
            static PyObject *t_TernaryTree$Iterator_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_TernaryTree$Iterator_instance_(PyTypeObject *type, PyObject *arg);
            static int t_TernaryTree$Iterator_init_(t_TernaryTree$Iterator *self, PyObject *args, PyObject *kwds);
            static PyObject *t_TernaryTree$Iterator_getValue(t_TernaryTree$Iterator *self);
            static PyObject *t_TernaryTree$Iterator_hasMoreElements(t_TernaryTree$Iterator *self);
            static PyObject *t_TernaryTree$Iterator_nextElement(t_TernaryTree$Iterator *self);
            static PyObject *t_TernaryTree$Iterator_rewind(t_TernaryTree$Iterator *self);
            static PyObject *t_TernaryTree$Iterator_get__value(t_TernaryTree$Iterator *self, void *data);
            static PyGetSetDef t_TernaryTree$Iterator__fields_[] = {
              DECLARE_GET_FIELD(t_TernaryTree$Iterator, value),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_TernaryTree$Iterator__methods_[] = {
              DECLARE_METHOD(t_TernaryTree$Iterator, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_TernaryTree$Iterator, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_TernaryTree$Iterator, getValue, METH_NOARGS),
              DECLARE_METHOD(t_TernaryTree$Iterator, hasMoreElements, METH_NOARGS),
              DECLARE_METHOD(t_TernaryTree$Iterator, nextElement, METH_NOARGS),
              DECLARE_METHOD(t_TernaryTree$Iterator, rewind, METH_NOARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(TernaryTree$Iterator, t_TernaryTree$Iterator, ::java::lang::Object, TernaryTree$Iterator, t_TernaryTree$Iterator_init_, PyObject_SelfIter, ((PyObject *(*)(::java::util::t_Enumeration *)) get_enumeration_next< ::java::util::t_Enumeration,::java::lang::t_String >), t_TernaryTree$Iterator__fields_, 0, 0);

            void t_TernaryTree$Iterator::install(PyObject *module)
            {
              installType(&PY_TYPE(TernaryTree$Iterator), module, "TernaryTree$Iterator", 0);
            }

            void t_TernaryTree$Iterator::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(TernaryTree$Iterator).tp_dict, "class_", make_descriptor(TernaryTree$Iterator::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(TernaryTree$Iterator).tp_dict, "wrapfn_", make_descriptor(t_TernaryTree$Iterator::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(TernaryTree$Iterator).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_TernaryTree$Iterator_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, TernaryTree$Iterator::initializeClass, 1)))
                return NULL;
              return t_TernaryTree$Iterator::wrap_Object(TernaryTree$Iterator(((t_TernaryTree$Iterator *) arg)->object.this$));
            }
            static PyObject *t_TernaryTree$Iterator_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, TernaryTree$Iterator::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_TernaryTree$Iterator_init_(t_TernaryTree$Iterator *self, PyObject *args, PyObject *kwds)
            {
              ::org::apache::lucene::analysis::compound::hyphenation::TernaryTree a0((jobject) NULL);
              TernaryTree$Iterator object((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::analysis::compound::hyphenation::TernaryTree::initializeClass, &a0))
              {
                INT_CALL(object = TernaryTree$Iterator(a0));
                self->object = object;
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_TernaryTree$Iterator_getValue(t_TernaryTree$Iterator *self)
            {
              jchar result;
              OBJ_CALL(result = self->object.getValue());
              return PyUnicode_FromUnicode((Py_UNICODE *) &result, 1);
            }

            static PyObject *t_TernaryTree$Iterator_hasMoreElements(t_TernaryTree$Iterator *self)
            {
              jboolean result;
              OBJ_CALL(result = self->object.hasMoreElements());
              Py_RETURN_BOOL(result);
            }

            static PyObject *t_TernaryTree$Iterator_nextElement(t_TernaryTree$Iterator *self)
            {
              ::java::lang::String result((jobject) NULL);
              OBJ_CALL(result = self->object.nextElement());
              return j2p(result);
            }

            static PyObject *t_TernaryTree$Iterator_rewind(t_TernaryTree$Iterator *self)
            {
              OBJ_CALL(self->object.rewind());
              Py_RETURN_NONE;
            }

            static PyObject *t_TernaryTree$Iterator_get__value(t_TernaryTree$Iterator *self, void *data)
            {
              jchar value;
              OBJ_CALL(value = self->object.getValue());
              return PyUnicode_FromUnicode((Py_UNICODE *) &value, 1);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/IntBlockPool$DirectAllocator.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *IntBlockPool$DirectAllocator::class$ = NULL;
        jmethodID *IntBlockPool$DirectAllocator::mids$ = NULL;
        bool IntBlockPool$DirectAllocator::live$ = false;

        jclass IntBlockPool$DirectAllocator::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/IntBlockPool$DirectAllocator");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_recycleIntBlocks_9f62f13c] = env->getMethodID(cls, "recycleIntBlocks", "([[III)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        IntBlockPool$DirectAllocator::IntBlockPool$DirectAllocator() : ::org::apache::lucene::util::IntBlockPool$Allocator(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        void IntBlockPool$DirectAllocator::recycleIntBlocks(const JArray< JArray< jint > > & a0, jint a1, jint a2) const
        {
          env->callVoidMethod(this$, mids$[mid_recycleIntBlocks_9f62f13c], a0.this$, a1, a2);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_IntBlockPool$DirectAllocator_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_IntBlockPool$DirectAllocator_instance_(PyTypeObject *type, PyObject *arg);
        static int t_IntBlockPool$DirectAllocator_init_(t_IntBlockPool$DirectAllocator *self, PyObject *args, PyObject *kwds);
        static PyObject *t_IntBlockPool$DirectAllocator_recycleIntBlocks(t_IntBlockPool$DirectAllocator *self, PyObject *args);

        static PyMethodDef t_IntBlockPool$DirectAllocator__methods_[] = {
          DECLARE_METHOD(t_IntBlockPool$DirectAllocator, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_IntBlockPool$DirectAllocator, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_IntBlockPool$DirectAllocator, recycleIntBlocks, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(IntBlockPool$DirectAllocator, t_IntBlockPool$DirectAllocator, ::org::apache::lucene::util::IntBlockPool$Allocator, IntBlockPool$DirectAllocator, t_IntBlockPool$DirectAllocator_init_, 0, 0, 0, 0, 0);

        void t_IntBlockPool$DirectAllocator::install(PyObject *module)
        {
          installType(&PY_TYPE(IntBlockPool$DirectAllocator), module, "IntBlockPool$DirectAllocator", 0);
        }

        void t_IntBlockPool$DirectAllocator::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(IntBlockPool$DirectAllocator).tp_dict, "class_", make_descriptor(IntBlockPool$DirectAllocator::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(IntBlockPool$DirectAllocator).tp_dict, "wrapfn_", make_descriptor(t_IntBlockPool$DirectAllocator::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(IntBlockPool$DirectAllocator).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_IntBlockPool$DirectAllocator_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, IntBlockPool$DirectAllocator::initializeClass, 1)))
            return NULL;
          return t_IntBlockPool$DirectAllocator::wrap_Object(IntBlockPool$DirectAllocator(((t_IntBlockPool$DirectAllocator *) arg)->object.this$));
        }
        static PyObject *t_IntBlockPool$DirectAllocator_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, IntBlockPool$DirectAllocator::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_IntBlockPool$DirectAllocator_init_(t_IntBlockPool$DirectAllocator *self, PyObject *args, PyObject *kwds)
        {
          IntBlockPool$DirectAllocator object((jobject) NULL);

          INT_CALL(object = IntBlockPool$DirectAllocator());
          self->object = object;

          return 0;
        }

        static PyObject *t_IntBlockPool$DirectAllocator_recycleIntBlocks(t_IntBlockPool$DirectAllocator *self, PyObject *args)
        {
          JArray< JArray< jint > > a0((jobject) NULL);
          jint a1;
          jint a2;

          if (!parseArgs(args, "[[III", &a0, &a1, &a2))
          {
            OBJ_CALL(self->object.recycleIntBlocks(a0, a1, a2));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(IntBlockPool$DirectAllocator), (PyObject *) self, "recycleIntBlocks", args, 2);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/standard/UAX29URLEmailAnalyzer.h"
#include "org/apache/lucene/util/Version.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/util/CharArraySet.h"
#include "java/io/Reader.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace standard {

          ::java::lang::Class *UAX29URLEmailAnalyzer::class$ = NULL;
          jmethodID *UAX29URLEmailAnalyzer::mids$ = NULL;
          bool UAX29URLEmailAnalyzer::live$ = false;
          jint UAX29URLEmailAnalyzer::DEFAULT_MAX_TOKEN_LENGTH = (jint) 0;
          ::org::apache::lucene::analysis::util::CharArraySet *UAX29URLEmailAnalyzer::STOP_WORDS_SET = NULL;

          jclass UAX29URLEmailAnalyzer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/standard/UAX29URLEmailAnalyzer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_0d96cf33] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;)V");
              mids$[mid_init$_7997a391] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Ljava/io/Reader;)V");
              mids$[mid_init$_83eafe28] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/analysis/util/CharArraySet;)V");
              mids$[mid_getMaxTokenLength_54c6a179] = env->getMethodID(cls, "getMaxTokenLength", "()I");
              mids$[mid_setMaxTokenLength_39c7bd3c] = env->getMethodID(cls, "setMaxTokenLength", "(I)V");
              mids$[mid_createComponents_1be39cae] = env->getMethodID(cls, "createComponents", "(Ljava/lang/String;Ljava/io/Reader;)Lorg/apache/lucene/analysis/Analyzer$TokenStreamComponents;");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              DEFAULT_MAX_TOKEN_LENGTH = env->getStaticIntField(cls, "DEFAULT_MAX_TOKEN_LENGTH");
              STOP_WORDS_SET = new ::org::apache::lucene::analysis::util::CharArraySet(env->getStaticObjectField(cls, "STOP_WORDS_SET", "Lorg/apache/lucene/analysis/util/CharArraySet;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          UAX29URLEmailAnalyzer::UAX29URLEmailAnalyzer(const ::org::apache::lucene::util::Version & a0) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_0d96cf33, a0.this$)) {}

          UAX29URLEmailAnalyzer::UAX29URLEmailAnalyzer(const ::org::apache::lucene::util::Version & a0, const ::java::io::Reader & a1) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_7997a391, a0.this$, a1.this$)) {}

          UAX29URLEmailAnalyzer::UAX29URLEmailAnalyzer(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::analysis::util::CharArraySet & a1) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_83eafe28, a0.this$, a1.this$)) {}

          jint UAX29URLEmailAnalyzer::getMaxTokenLength() const
          {
            return env->callIntMethod(this$, mids$[mid_getMaxTokenLength_54c6a179]);
          }

          void UAX29URLEmailAnalyzer::setMaxTokenLength(jint a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setMaxTokenLength_39c7bd3c], a0);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace standard {
          static PyObject *t_UAX29URLEmailAnalyzer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_UAX29URLEmailAnalyzer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_UAX29URLEmailAnalyzer_init_(t_UAX29URLEmailAnalyzer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_UAX29URLEmailAnalyzer_getMaxTokenLength(t_UAX29URLEmailAnalyzer *self);
          static PyObject *t_UAX29URLEmailAnalyzer_setMaxTokenLength(t_UAX29URLEmailAnalyzer *self, PyObject *arg);
          static PyObject *t_UAX29URLEmailAnalyzer_get__maxTokenLength(t_UAX29URLEmailAnalyzer *self, void *data);
          static int t_UAX29URLEmailAnalyzer_set__maxTokenLength(t_UAX29URLEmailAnalyzer *self, PyObject *arg, void *data);
          static PyGetSetDef t_UAX29URLEmailAnalyzer__fields_[] = {
            DECLARE_GETSET_FIELD(t_UAX29URLEmailAnalyzer, maxTokenLength),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_UAX29URLEmailAnalyzer__methods_[] = {
            DECLARE_METHOD(t_UAX29URLEmailAnalyzer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_UAX29URLEmailAnalyzer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_UAX29URLEmailAnalyzer, getMaxTokenLength, METH_NOARGS),
            DECLARE_METHOD(t_UAX29URLEmailAnalyzer, setMaxTokenLength, METH_O),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(UAX29URLEmailAnalyzer, t_UAX29URLEmailAnalyzer, ::org::apache::lucene::analysis::util::StopwordAnalyzerBase, UAX29URLEmailAnalyzer, t_UAX29URLEmailAnalyzer_init_, 0, 0, t_UAX29URLEmailAnalyzer__fields_, 0, 0);

          void t_UAX29URLEmailAnalyzer::install(PyObject *module)
          {
            installType(&PY_TYPE(UAX29URLEmailAnalyzer), module, "UAX29URLEmailAnalyzer", 0);
          }

          void t_UAX29URLEmailAnalyzer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(UAX29URLEmailAnalyzer).tp_dict, "class_", make_descriptor(UAX29URLEmailAnalyzer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(UAX29URLEmailAnalyzer).tp_dict, "wrapfn_", make_descriptor(t_UAX29URLEmailAnalyzer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(UAX29URLEmailAnalyzer).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(UAX29URLEmailAnalyzer::initializeClass);
            PyDict_SetItemString(PY_TYPE(UAX29URLEmailAnalyzer).tp_dict, "DEFAULT_MAX_TOKEN_LENGTH", make_descriptor(UAX29URLEmailAnalyzer::DEFAULT_MAX_TOKEN_LENGTH));
            PyDict_SetItemString(PY_TYPE(UAX29URLEmailAnalyzer).tp_dict, "STOP_WORDS_SET", make_descriptor(::org::apache::lucene::analysis::util::t_CharArraySet::wrap_Object(*UAX29URLEmailAnalyzer::STOP_WORDS_SET)));
          }

          static PyObject *t_UAX29URLEmailAnalyzer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, UAX29URLEmailAnalyzer::initializeClass, 1)))
              return NULL;
            return t_UAX29URLEmailAnalyzer::wrap_Object(UAX29URLEmailAnalyzer(((t_UAX29URLEmailAnalyzer *) arg)->object.this$));
          }
          static PyObject *t_UAX29URLEmailAnalyzer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, UAX29URLEmailAnalyzer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_UAX29URLEmailAnalyzer_init_(t_UAX29URLEmailAnalyzer *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                UAX29URLEmailAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "K", ::org::apache::lucene::util::Version::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_))
                {
                  INT_CALL(object = UAX29URLEmailAnalyzer(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 2:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                ::java::io::Reader a1((jobject) NULL);
                UAX29URLEmailAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "Kk", ::org::apache::lucene::util::Version::initializeClass, ::java::io::Reader::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1))
                {
                  INT_CALL(object = UAX29URLEmailAnalyzer(a0, a1));
                  self->object = object;
                  break;
                }
              }
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                ::org::apache::lucene::analysis::util::CharArraySet a1((jobject) NULL);
                PyTypeObject **p1;
                UAX29URLEmailAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "KK", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1, &p1, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_))
                {
                  INT_CALL(object = UAX29URLEmailAnalyzer(a0, a1));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_UAX29URLEmailAnalyzer_getMaxTokenLength(t_UAX29URLEmailAnalyzer *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getMaxTokenLength());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_UAX29URLEmailAnalyzer_setMaxTokenLength(t_UAX29URLEmailAnalyzer *self, PyObject *arg)
          {
            jint a0;

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(self->object.setMaxTokenLength(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setMaxTokenLength", arg);
            return NULL;
          }

          static PyObject *t_UAX29URLEmailAnalyzer_get__maxTokenLength(t_UAX29URLEmailAnalyzer *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getMaxTokenLength());
            return PyInt_FromLong((long) value);
          }
          static int t_UAX29URLEmailAnalyzer_set__maxTokenLength(t_UAX29URLEmailAnalyzer *self, PyObject *arg, void *data)
          {
            {
              jint value;
              if (!parseArg(arg, "I", &value))
              {
                INT_CALL(self->object.setMaxTokenLength(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "maxTokenLength", arg);
            return -1;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/compound/HyphenationCompoundWordTokenFilter.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "org/apache/lucene/analysis/util/CharArraySet.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/analysis/compound/hyphenation/HyphenationTree.h"
#include "java/io/File.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/util/Version.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace compound {

          ::java::lang::Class *HyphenationCompoundWordTokenFilter::class$ = NULL;
          jmethodID *HyphenationCompoundWordTokenFilter::mids$ = NULL;
          bool HyphenationCompoundWordTokenFilter::live$ = false;

          jclass HyphenationCompoundWordTokenFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/compound/HyphenationCompoundWordTokenFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_6851072a] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/analysis/TokenStream;Lorg/apache/lucene/analysis/compound/hyphenation/HyphenationTree;)V");
              mids$[mid_init$_213956f5] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/analysis/TokenStream;Lorg/apache/lucene/analysis/compound/hyphenation/HyphenationTree;Lorg/apache/lucene/analysis/util/CharArraySet;)V");
              mids$[mid_init$_9c907b94] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/analysis/TokenStream;Lorg/apache/lucene/analysis/compound/hyphenation/HyphenationTree;III)V");
              mids$[mid_init$_46c08466] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/analysis/TokenStream;Lorg/apache/lucene/analysis/compound/hyphenation/HyphenationTree;Lorg/apache/lucene/analysis/util/CharArraySet;IIIZ)V");
              mids$[mid_getHyphenationTree_5c26e2ec] = env->getStaticMethodID(cls, "getHyphenationTree", "(Ljava/lang/String;)Lorg/apache/lucene/analysis/compound/hyphenation/HyphenationTree;");
              mids$[mid_getHyphenationTree_70e8a373] = env->getStaticMethodID(cls, "getHyphenationTree", "(Ljava/io/File;)Lorg/apache/lucene/analysis/compound/hyphenation/HyphenationTree;");
              mids$[mid_decompose_54c6a166] = env->getMethodID(cls, "decompose", "()V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          HyphenationCompoundWordTokenFilter::HyphenationCompoundWordTokenFilter(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::analysis::TokenStream & a1, const ::org::apache::lucene::analysis::compound::hyphenation::HyphenationTree & a2) : ::org::apache::lucene::analysis::compound::CompoundWordTokenFilterBase(env->newObject(initializeClass, &mids$, mid_init$_6851072a, a0.this$, a1.this$, a2.this$)) {}

          HyphenationCompoundWordTokenFilter::HyphenationCompoundWordTokenFilter(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::analysis::TokenStream & a1, const ::org::apache::lucene::analysis::compound::hyphenation::HyphenationTree & a2, const ::org::apache::lucene::analysis::util::CharArraySet & a3) : ::org::apache::lucene::analysis::compound::CompoundWordTokenFilterBase(env->newObject(initializeClass, &mids$, mid_init$_213956f5, a0.this$, a1.this$, a2.this$, a3.this$)) {}

          HyphenationCompoundWordTokenFilter::HyphenationCompoundWordTokenFilter(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::analysis::TokenStream & a1, const ::org::apache::lucene::analysis::compound::hyphenation::HyphenationTree & a2, jint a3, jint a4, jint a5) : ::org::apache::lucene::analysis::compound::CompoundWordTokenFilterBase(env->newObject(initializeClass, &mids$, mid_init$_9c907b94, a0.this$, a1.this$, a2.this$, a3, a4, a5)) {}

          HyphenationCompoundWordTokenFilter::HyphenationCompoundWordTokenFilter(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::analysis::TokenStream & a1, const ::org::apache::lucene::analysis::compound::hyphenation::HyphenationTree & a2, const ::org::apache::lucene::analysis::util::CharArraySet & a3, jint a4, jint a5, jint a6, jboolean a7) : ::org::apache::lucene::analysis::compound::CompoundWordTokenFilterBase(env->newObject(initializeClass, &mids$, mid_init$_46c08466, a0.this$, a1.this$, a2.this$, a3.this$, a4, a5, a6, a7)) {}

          ::org::apache::lucene::analysis::compound::hyphenation::HyphenationTree HyphenationCompoundWordTokenFilter::getHyphenationTree(const ::java::lang::String & a0)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::analysis::compound::hyphenation::HyphenationTree(env->callStaticObjectMethod(cls, mids$[mid_getHyphenationTree_5c26e2ec], a0.this$));
          }

          ::org::apache::lucene::analysis::compound::hyphenation::HyphenationTree HyphenationCompoundWordTokenFilter::getHyphenationTree(const ::java::io::File & a0)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::analysis::compound::hyphenation::HyphenationTree(env->callStaticObjectMethod(cls, mids$[mid_getHyphenationTree_70e8a373], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace compound {
          static PyObject *t_HyphenationCompoundWordTokenFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_HyphenationCompoundWordTokenFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_HyphenationCompoundWordTokenFilter_init_(t_HyphenationCompoundWordTokenFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_HyphenationCompoundWordTokenFilter_getHyphenationTree(PyTypeObject *type, PyObject *args);

          static PyMethodDef t_HyphenationCompoundWordTokenFilter__methods_[] = {
            DECLARE_METHOD(t_HyphenationCompoundWordTokenFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_HyphenationCompoundWordTokenFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_HyphenationCompoundWordTokenFilter, getHyphenationTree, METH_VARARGS | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(HyphenationCompoundWordTokenFilter, t_HyphenationCompoundWordTokenFilter, ::org::apache::lucene::analysis::compound::CompoundWordTokenFilterBase, HyphenationCompoundWordTokenFilter, t_HyphenationCompoundWordTokenFilter_init_, 0, 0, 0, 0, 0);

          void t_HyphenationCompoundWordTokenFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(HyphenationCompoundWordTokenFilter), module, "HyphenationCompoundWordTokenFilter", 0);
          }

          void t_HyphenationCompoundWordTokenFilter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(HyphenationCompoundWordTokenFilter).tp_dict, "class_", make_descriptor(HyphenationCompoundWordTokenFilter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(HyphenationCompoundWordTokenFilter).tp_dict, "wrapfn_", make_descriptor(t_HyphenationCompoundWordTokenFilter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(HyphenationCompoundWordTokenFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_HyphenationCompoundWordTokenFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, HyphenationCompoundWordTokenFilter::initializeClass, 1)))
              return NULL;
            return t_HyphenationCompoundWordTokenFilter::wrap_Object(HyphenationCompoundWordTokenFilter(((t_HyphenationCompoundWordTokenFilter *) arg)->object.this$));
          }
          static PyObject *t_HyphenationCompoundWordTokenFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, HyphenationCompoundWordTokenFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_HyphenationCompoundWordTokenFilter_init_(t_HyphenationCompoundWordTokenFilter *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 3:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                ::org::apache::lucene::analysis::TokenStream a1((jobject) NULL);
                ::org::apache::lucene::analysis::compound::hyphenation::HyphenationTree a2((jobject) NULL);
                HyphenationCompoundWordTokenFilter object((jobject) NULL);

                if (!parseArgs(args, "Kkk", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::TokenStream::initializeClass, ::org::apache::lucene::analysis::compound::hyphenation::HyphenationTree::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1, &a2))
                {
                  INT_CALL(object = HyphenationCompoundWordTokenFilter(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 4:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                ::org::apache::lucene::analysis::TokenStream a1((jobject) NULL);
                ::org::apache::lucene::analysis::compound::hyphenation::HyphenationTree a2((jobject) NULL);
                ::org::apache::lucene::analysis::util::CharArraySet a3((jobject) NULL);
                PyTypeObject **p3;
                HyphenationCompoundWordTokenFilter object((jobject) NULL);

                if (!parseArgs(args, "KkkK", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::TokenStream::initializeClass, ::org::apache::lucene::analysis::compound::hyphenation::HyphenationTree::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1, &a2, &a3, &p3, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_))
                {
                  INT_CALL(object = HyphenationCompoundWordTokenFilter(a0, a1, a2, a3));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 6:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                ::org::apache::lucene::analysis::TokenStream a1((jobject) NULL);
                ::org::apache::lucene::analysis::compound::hyphenation::HyphenationTree a2((jobject) NULL);
                jint a3;
                jint a4;
                jint a5;
                HyphenationCompoundWordTokenFilter object((jobject) NULL);

                if (!parseArgs(args, "KkkIII", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::TokenStream::initializeClass, ::org::apache::lucene::analysis::compound::hyphenation::HyphenationTree::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1, &a2, &a3, &a4, &a5))
                {
                  INT_CALL(object = HyphenationCompoundWordTokenFilter(a0, a1, a2, a3, a4, a5));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 8:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                ::org::apache::lucene::analysis::TokenStream a1((jobject) NULL);
                ::org::apache::lucene::analysis::compound::hyphenation::HyphenationTree a2((jobject) NULL);
                ::org::apache::lucene::analysis::util::CharArraySet a3((jobject) NULL);
                PyTypeObject **p3;
                jint a4;
                jint a5;
                jint a6;
                jboolean a7;
                HyphenationCompoundWordTokenFilter object((jobject) NULL);

                if (!parseArgs(args, "KkkKIIIZ", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::TokenStream::initializeClass, ::org::apache::lucene::analysis::compound::hyphenation::HyphenationTree::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1, &a2, &a3, &p3, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_, &a4, &a5, &a6, &a7))
                {
                  INT_CALL(object = HyphenationCompoundWordTokenFilter(a0, a1, a2, a3, a4, a5, a6, a7));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_HyphenationCompoundWordTokenFilter_getHyphenationTree(PyTypeObject *type, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::java::lang::String a0((jobject) NULL);
                ::org::apache::lucene::analysis::compound::hyphenation::HyphenationTree result((jobject) NULL);

                if (!parseArgs(args, "s", &a0))
                {
                  OBJ_CALL(result = ::org::apache::lucene::analysis::compound::HyphenationCompoundWordTokenFilter::getHyphenationTree(a0));
                  return ::org::apache::lucene::analysis::compound::hyphenation::t_HyphenationTree::wrap_Object(result);
                }
              }
              {
                ::java::io::File a0((jobject) NULL);
                ::org::apache::lucene::analysis::compound::hyphenation::HyphenationTree result((jobject) NULL);

                if (!parseArgs(args, "k", ::java::io::File::initializeClass, &a0))
                {
                  OBJ_CALL(result = ::org::apache::lucene::analysis::compound::HyphenationCompoundWordTokenFilter::getHyphenationTree(a0));
                  return ::org::apache::lucene::analysis::compound::hyphenation::t_HyphenationTree::wrap_Object(result);
                }
              }
            }

            PyErr_SetArgsError(type, "getHyphenationTree", args);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/xml/builders/SpanNotBuilder.h"
#include "org/apache/lucene/queryparser/xml/builders/SpanQueryBuilder.h"
#include "org/apache/lucene/search/spans/SpanQuery.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace xml {
          namespace builders {

            ::java::lang::Class *SpanNotBuilder::class$ = NULL;
            jmethodID *SpanNotBuilder::mids$ = NULL;
            bool SpanNotBuilder::live$ = false;

            jclass SpanNotBuilder::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/xml/builders/SpanNotBuilder");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_d9ca31a9] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/queryparser/xml/builders/SpanQueryBuilder;)V");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            SpanNotBuilder::SpanNotBuilder(const ::org::apache::lucene::queryparser::xml::builders::SpanQueryBuilder & a0) : ::org::apache::lucene::queryparser::xml::builders::SpanBuilderBase(env->newObject(initializeClass, &mids$, mid_init$_d9ca31a9, a0.this$)) {}
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace xml {
          namespace builders {
            static PyObject *t_SpanNotBuilder_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_SpanNotBuilder_instance_(PyTypeObject *type, PyObject *arg);
            static int t_SpanNotBuilder_init_(t_SpanNotBuilder *self, PyObject *args, PyObject *kwds);

            static PyMethodDef t_SpanNotBuilder__methods_[] = {
              DECLARE_METHOD(t_SpanNotBuilder, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_SpanNotBuilder, instance_, METH_O | METH_CLASS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(SpanNotBuilder, t_SpanNotBuilder, ::org::apache::lucene::queryparser::xml::builders::SpanBuilderBase, SpanNotBuilder, t_SpanNotBuilder_init_, 0, 0, 0, 0, 0);

            void t_SpanNotBuilder::install(PyObject *module)
            {
              installType(&PY_TYPE(SpanNotBuilder), module, "SpanNotBuilder", 0);
            }

            void t_SpanNotBuilder::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(SpanNotBuilder).tp_dict, "class_", make_descriptor(SpanNotBuilder::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(SpanNotBuilder).tp_dict, "wrapfn_", make_descriptor(t_SpanNotBuilder::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(SpanNotBuilder).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_SpanNotBuilder_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, SpanNotBuilder::initializeClass, 1)))
                return NULL;
              return t_SpanNotBuilder::wrap_Object(SpanNotBuilder(((t_SpanNotBuilder *) arg)->object.this$));
            }
            static PyObject *t_SpanNotBuilder_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, SpanNotBuilder::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_SpanNotBuilder_init_(t_SpanNotBuilder *self, PyObject *args, PyObject *kwds)
            {
              ::org::apache::lucene::queryparser::xml::builders::SpanQueryBuilder a0((jobject) NULL);
              SpanNotBuilder object((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::queryparser::xml::builders::SpanQueryBuilder::initializeClass, &a0))
              {
                INT_CALL(object = SpanNotBuilder(a0));
                self->object = object;
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/automaton/RegExp.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Class.h"
#include "java/util/Map.h"
#include "org/apache/lucene/util/automaton/Automaton.h"
#include "java/lang/String.h"
#include "java/util/Set.h"
#include "org/apache/lucene/util/automaton/AutomatonProvider.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace automaton {

          ::java::lang::Class *RegExp::class$ = NULL;
          jmethodID *RegExp::mids$ = NULL;
          bool RegExp::live$ = false;
          jint RegExp::ALL = (jint) 0;
          jint RegExp::ANYSTRING = (jint) 0;
          jint RegExp::AUTOMATON = (jint) 0;
          jint RegExp::COMPLEMENT = (jint) 0;
          jint RegExp::EMPTY = (jint) 0;
          jint RegExp::INTERSECTION = (jint) 0;
          jint RegExp::INTERVAL = (jint) 0;
          jint RegExp::NONE = (jint) 0;

          jclass RegExp::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/util/automaton/RegExp");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_5fdc3f48] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;)V");
              mids$[mid_init$_6e53ccc6] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;I)V");
              mids$[mid_getIdentifiers_03e99967] = env->getMethodID(cls, "getIdentifiers", "()Ljava/util/Set;");
              mids$[mid_setAllowMutate_bb0c7673] = env->getMethodID(cls, "setAllowMutate", "(Z)Z");
              mids$[mid_toAutomaton_9b0d5999] = env->getMethodID(cls, "toAutomaton", "()Lorg/apache/lucene/util/automaton/Automaton;");
              mids$[mid_toAutomaton_ab3fd6f0] = env->getMethodID(cls, "toAutomaton", "(Lorg/apache/lucene/util/automaton/AutomatonProvider;)Lorg/apache/lucene/util/automaton/Automaton;");
              mids$[mid_toAutomaton_5130eb3f] = env->getMethodID(cls, "toAutomaton", "(Ljava/util/Map;)Lorg/apache/lucene/util/automaton/Automaton;");
              mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              ALL = env->getStaticIntField(cls, "ALL");
              ANYSTRING = env->getStaticIntField(cls, "ANYSTRING");
              AUTOMATON = env->getStaticIntField(cls, "AUTOMATON");
              COMPLEMENT = env->getStaticIntField(cls, "COMPLEMENT");
              EMPTY = env->getStaticIntField(cls, "EMPTY");
              INTERSECTION = env->getStaticIntField(cls, "INTERSECTION");
              INTERVAL = env->getStaticIntField(cls, "INTERVAL");
              NONE = env->getStaticIntField(cls, "NONE");
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          RegExp::RegExp(const ::java::lang::String & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_5fdc3f48, a0.this$)) {}

          RegExp::RegExp(const ::java::lang::String & a0, jint a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_6e53ccc6, a0.this$, a1)) {}

          ::java::util::Set RegExp::getIdentifiers() const
          {
            return ::java::util::Set(env->callObjectMethod(this$, mids$[mid_getIdentifiers_03e99967]));
          }

          jboolean RegExp::setAllowMutate(jboolean a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_setAllowMutate_bb0c7673], a0);
          }

          ::org::apache::lucene::util::automaton::Automaton RegExp::toAutomaton() const
          {
            return ::org::apache::lucene::util::automaton::Automaton(env->callObjectMethod(this$, mids$[mid_toAutomaton_9b0d5999]));
          }

          ::org::apache::lucene::util::automaton::Automaton RegExp::toAutomaton(const ::org::apache::lucene::util::automaton::AutomatonProvider & a0) const
          {
            return ::org::apache::lucene::util::automaton::Automaton(env->callObjectMethod(this$, mids$[mid_toAutomaton_ab3fd6f0], a0.this$));
          }

          ::org::apache::lucene::util::automaton::Automaton RegExp::toAutomaton(const ::java::util::Map & a0) const
          {
            return ::org::apache::lucene::util::automaton::Automaton(env->callObjectMethod(this$, mids$[mid_toAutomaton_5130eb3f], a0.this$));
          }

          ::java::lang::String RegExp::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace automaton {
          static PyObject *t_RegExp_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_RegExp_instance_(PyTypeObject *type, PyObject *arg);
          static int t_RegExp_init_(t_RegExp *self, PyObject *args, PyObject *kwds);
          static PyObject *t_RegExp_getIdentifiers(t_RegExp *self);
          static PyObject *t_RegExp_setAllowMutate(t_RegExp *self, PyObject *arg);
          static PyObject *t_RegExp_toAutomaton(t_RegExp *self, PyObject *args);
          static PyObject *t_RegExp_toString(t_RegExp *self, PyObject *args);
          static int t_RegExp_set__allowMutate(t_RegExp *self, PyObject *arg, void *data);
          static PyObject *t_RegExp_get__identifiers(t_RegExp *self, void *data);
          static PyGetSetDef t_RegExp__fields_[] = {
            DECLARE_SET_FIELD(t_RegExp, allowMutate),
            DECLARE_GET_FIELD(t_RegExp, identifiers),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_RegExp__methods_[] = {
            DECLARE_METHOD(t_RegExp, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_RegExp, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_RegExp, getIdentifiers, METH_NOARGS),
            DECLARE_METHOD(t_RegExp, setAllowMutate, METH_O),
            DECLARE_METHOD(t_RegExp, toAutomaton, METH_VARARGS),
            DECLARE_METHOD(t_RegExp, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(RegExp, t_RegExp, ::java::lang::Object, RegExp, t_RegExp_init_, 0, 0, t_RegExp__fields_, 0, 0);

          void t_RegExp::install(PyObject *module)
          {
            installType(&PY_TYPE(RegExp), module, "RegExp", 0);
          }

          void t_RegExp::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(RegExp).tp_dict, "class_", make_descriptor(RegExp::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(RegExp).tp_dict, "wrapfn_", make_descriptor(t_RegExp::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(RegExp).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(RegExp::initializeClass);
            PyDict_SetItemString(PY_TYPE(RegExp).tp_dict, "ALL", make_descriptor(RegExp::ALL));
            PyDict_SetItemString(PY_TYPE(RegExp).tp_dict, "ANYSTRING", make_descriptor(RegExp::ANYSTRING));
            PyDict_SetItemString(PY_TYPE(RegExp).tp_dict, "AUTOMATON", make_descriptor(RegExp::AUTOMATON));
            PyDict_SetItemString(PY_TYPE(RegExp).tp_dict, "COMPLEMENT", make_descriptor(RegExp::COMPLEMENT));
            PyDict_SetItemString(PY_TYPE(RegExp).tp_dict, "EMPTY", make_descriptor(RegExp::EMPTY));
            PyDict_SetItemString(PY_TYPE(RegExp).tp_dict, "INTERSECTION", make_descriptor(RegExp::INTERSECTION));
            PyDict_SetItemString(PY_TYPE(RegExp).tp_dict, "INTERVAL", make_descriptor(RegExp::INTERVAL));
            PyDict_SetItemString(PY_TYPE(RegExp).tp_dict, "NONE", make_descriptor(RegExp::NONE));
          }

          static PyObject *t_RegExp_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, RegExp::initializeClass, 1)))
              return NULL;
            return t_RegExp::wrap_Object(RegExp(((t_RegExp *) arg)->object.this$));
          }
          static PyObject *t_RegExp_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, RegExp::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_RegExp_init_(t_RegExp *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::java::lang::String a0((jobject) NULL);
                RegExp object((jobject) NULL);

                if (!parseArgs(args, "s", &a0))
                {
                  INT_CALL(object = RegExp(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 2:
              {
                ::java::lang::String a0((jobject) NULL);
                jint a1;
                RegExp object((jobject) NULL);

                if (!parseArgs(args, "sI", &a0, &a1))
                {
                  INT_CALL(object = RegExp(a0, a1));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_RegExp_getIdentifiers(t_RegExp *self)
          {
            ::java::util::Set result((jobject) NULL);
            OBJ_CALL(result = self->object.getIdentifiers());
            return ::java::util::t_Set::wrap_Object(result, &::java::lang::PY_TYPE(String));
          }

          static PyObject *t_RegExp_setAllowMutate(t_RegExp *self, PyObject *arg)
          {
            jboolean a0;
            jboolean result;

            if (!parseArg(arg, "Z", &a0))
            {
              OBJ_CALL(result = self->object.setAllowMutate(a0));
              Py_RETURN_BOOL(result);
            }

            PyErr_SetArgsError((PyObject *) self, "setAllowMutate", arg);
            return NULL;
          }

          static PyObject *t_RegExp_toAutomaton(t_RegExp *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 0:
              {
                ::org::apache::lucene::util::automaton::Automaton result((jobject) NULL);
                OBJ_CALL(result = self->object.toAutomaton());
                return ::org::apache::lucene::util::automaton::t_Automaton::wrap_Object(result);
              }
              break;
             case 1:
              {
                ::org::apache::lucene::util::automaton::AutomatonProvider a0((jobject) NULL);
                ::org::apache::lucene::util::automaton::Automaton result((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::util::automaton::AutomatonProvider::initializeClass, &a0))
                {
                  OBJ_CALL(result = self->object.toAutomaton(a0));
                  return ::org::apache::lucene::util::automaton::t_Automaton::wrap_Object(result);
                }
              }
              {
                ::java::util::Map a0((jobject) NULL);
                PyTypeObject **p0;
                ::org::apache::lucene::util::automaton::Automaton result((jobject) NULL);

                if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
                {
                  OBJ_CALL(result = self->object.toAutomaton(a0));
                  return ::org::apache::lucene::util::automaton::t_Automaton::wrap_Object(result);
                }
              }
            }

            PyErr_SetArgsError((PyObject *) self, "toAutomaton", args);
            return NULL;
          }

          static PyObject *t_RegExp_toString(t_RegExp *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(&PY_TYPE(RegExp), (PyObject *) self, "toString", args, 2);
          }

          static int t_RegExp_set__allowMutate(t_RegExp *self, PyObject *arg, void *data)
          {
            {
              jboolean value;
              if (!parseArg(arg, "Z", &value))
              {
                INT_CALL(self->object.setAllowMutate(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "allowMutate", arg);
            return -1;
          }

          static PyObject *t_RegExp_get__identifiers(t_RegExp *self, void *data)
          {
            ::java::util::Set value((jobject) NULL);
            OBJ_CALL(value = self->object.getIdentifiers());
            return ::java::util::t_Set::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/OpaqueQueryNode.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/queryparser/flexible/core/parser/EscapeQuerySyntax.h"
#include "java/lang/CloneNotSupportedException.h"
#include "java/lang/CharSequence.h"
#include "java/lang/String.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/QueryNode.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace nodes {

              ::java::lang::Class *OpaqueQueryNode::class$ = NULL;
              jmethodID *OpaqueQueryNode::mids$ = NULL;
              bool OpaqueQueryNode::live$ = false;

              jclass OpaqueQueryNode::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/core/nodes/OpaqueQueryNode");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_db1d05ae] = env->getMethodID(cls, "<init>", "(Ljava/lang/CharSequence;Ljava/lang/CharSequence;)V");
                  mids$[mid_cloneTree_b387c5e6] = env->getMethodID(cls, "cloneTree", "()Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;");
                  mids$[mid_getSchema_e0adba2f] = env->getMethodID(cls, "getSchema", "()Ljava/lang/CharSequence;");
                  mids$[mid_getValue_e0adba2f] = env->getMethodID(cls, "getValue", "()Ljava/lang/CharSequence;");
                  mids$[mid_toQueryString_99b8dfe1] = env->getMethodID(cls, "toQueryString", "(Lorg/apache/lucene/queryparser/flexible/core/parser/EscapeQuerySyntax;)Ljava/lang/CharSequence;");
                  mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              OpaqueQueryNode::OpaqueQueryNode(const ::java::lang::CharSequence & a0, const ::java::lang::CharSequence & a1) : ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNodeImpl(env->newObject(initializeClass, &mids$, mid_init$_db1d05ae, a0.this$, a1.this$)) {}

              ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode OpaqueQueryNode::cloneTree() const
              {
                return ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode(env->callObjectMethod(this$, mids$[mid_cloneTree_b387c5e6]));
              }

              ::java::lang::CharSequence OpaqueQueryNode::getSchema() const
              {
                return ::java::lang::CharSequence(env->callObjectMethod(this$, mids$[mid_getSchema_e0adba2f]));
              }

              ::java::lang::CharSequence OpaqueQueryNode::getValue() const
              {
                return ::java::lang::CharSequence(env->callObjectMethod(this$, mids$[mid_getValue_e0adba2f]));
              }

              ::java::lang::CharSequence OpaqueQueryNode::toQueryString(const ::org::apache::lucene::queryparser::flexible::core::parser::EscapeQuerySyntax & a0) const
              {
                return ::java::lang::CharSequence(env->callObjectMethod(this$, mids$[mid_toQueryString_99b8dfe1], a0.this$));
              }

              ::java::lang::String OpaqueQueryNode::toString() const
              {
                return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace nodes {
              static PyObject *t_OpaqueQueryNode_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_OpaqueQueryNode_instance_(PyTypeObject *type, PyObject *arg);
              static int t_OpaqueQueryNode_init_(t_OpaqueQueryNode *self, PyObject *args, PyObject *kwds);
              static PyObject *t_OpaqueQueryNode_cloneTree(t_OpaqueQueryNode *self, PyObject *args);
              static PyObject *t_OpaqueQueryNode_getSchema(t_OpaqueQueryNode *self);
              static PyObject *t_OpaqueQueryNode_getValue(t_OpaqueQueryNode *self);
              static PyObject *t_OpaqueQueryNode_toQueryString(t_OpaqueQueryNode *self, PyObject *args);
              static PyObject *t_OpaqueQueryNode_toString(t_OpaqueQueryNode *self, PyObject *args);
              static PyObject *t_OpaqueQueryNode_get__schema(t_OpaqueQueryNode *self, void *data);
              static PyObject *t_OpaqueQueryNode_get__value(t_OpaqueQueryNode *self, void *data);
              static PyGetSetDef t_OpaqueQueryNode__fields_[] = {
                DECLARE_GET_FIELD(t_OpaqueQueryNode, schema),
                DECLARE_GET_FIELD(t_OpaqueQueryNode, value),
                { NULL, NULL, NULL, NULL, NULL }
              };

              static PyMethodDef t_OpaqueQueryNode__methods_[] = {
                DECLARE_METHOD(t_OpaqueQueryNode, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_OpaqueQueryNode, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_OpaqueQueryNode, cloneTree, METH_VARARGS),
                DECLARE_METHOD(t_OpaqueQueryNode, getSchema, METH_NOARGS),
                DECLARE_METHOD(t_OpaqueQueryNode, getValue, METH_NOARGS),
                DECLARE_METHOD(t_OpaqueQueryNode, toQueryString, METH_VARARGS),
                DECLARE_METHOD(t_OpaqueQueryNode, toString, METH_VARARGS),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(OpaqueQueryNode, t_OpaqueQueryNode, ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNodeImpl, OpaqueQueryNode, t_OpaqueQueryNode_init_, 0, 0, t_OpaqueQueryNode__fields_, 0, 0);

              void t_OpaqueQueryNode::install(PyObject *module)
              {
                installType(&PY_TYPE(OpaqueQueryNode), module, "OpaqueQueryNode", 0);
              }

              void t_OpaqueQueryNode::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(OpaqueQueryNode).tp_dict, "class_", make_descriptor(OpaqueQueryNode::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(OpaqueQueryNode).tp_dict, "wrapfn_", make_descriptor(t_OpaqueQueryNode::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(OpaqueQueryNode).tp_dict, "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_OpaqueQueryNode_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, OpaqueQueryNode::initializeClass, 1)))
                  return NULL;
                return t_OpaqueQueryNode::wrap_Object(OpaqueQueryNode(((t_OpaqueQueryNode *) arg)->object.this$));
              }
              static PyObject *t_OpaqueQueryNode_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, OpaqueQueryNode::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_OpaqueQueryNode_init_(t_OpaqueQueryNode *self, PyObject *args, PyObject *kwds)
              {
                ::java::lang::CharSequence a0((jobject) NULL);
                ::java::lang::CharSequence a1((jobject) NULL);
                OpaqueQueryNode object((jobject) NULL);

                if (!parseArgs(args, "OO", &::java::lang::PY_TYPE(CharSequence), &::java::lang::PY_TYPE(CharSequence), &a0, &a1))
                {
                  INT_CALL(object = OpaqueQueryNode(a0, a1));
                  self->object = object;
                }
                else
                {
                  PyErr_SetArgsError((PyObject *) self, "__init__", args);
                  return -1;
                }

                return 0;
              }

              static PyObject *t_OpaqueQueryNode_cloneTree(t_OpaqueQueryNode *self, PyObject *args)
              {
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode result((jobject) NULL);

                if (!parseArgs(args, ""))
                {
                  OBJ_CALL(result = self->object.cloneTree());
                  return ::org::apache::lucene::queryparser::flexible::core::nodes::t_QueryNode::wrap_Object(result);
                }

                return callSuper(&PY_TYPE(OpaqueQueryNode), (PyObject *) self, "cloneTree", args, 2);
              }

              static PyObject *t_OpaqueQueryNode_getSchema(t_OpaqueQueryNode *self)
              {
                ::java::lang::CharSequence result((jobject) NULL);
                OBJ_CALL(result = self->object.getSchema());
                return ::java::lang::t_CharSequence::wrap_Object(result);
              }

              static PyObject *t_OpaqueQueryNode_getValue(t_OpaqueQueryNode *self)
              {
                ::java::lang::CharSequence result((jobject) NULL);
                OBJ_CALL(result = self->object.getValue());
                return ::java::lang::t_CharSequence::wrap_Object(result);
              }

              static PyObject *t_OpaqueQueryNode_toQueryString(t_OpaqueQueryNode *self, PyObject *args)
              {
                ::org::apache::lucene::queryparser::flexible::core::parser::EscapeQuerySyntax a0((jobject) NULL);
                ::java::lang::CharSequence result((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::queryparser::flexible::core::parser::EscapeQuerySyntax::initializeClass, &a0))
                {
                  OBJ_CALL(result = self->object.toQueryString(a0));
                  return ::java::lang::t_CharSequence::wrap_Object(result);
                }

                return callSuper(&PY_TYPE(OpaqueQueryNode), (PyObject *) self, "toQueryString", args, 2);
              }

              static PyObject *t_OpaqueQueryNode_toString(t_OpaqueQueryNode *self, PyObject *args)
              {
                ::java::lang::String result((jobject) NULL);

                if (!parseArgs(args, ""))
                {
                  OBJ_CALL(result = self->object.toString());
                  return j2p(result);
                }

                return callSuper(&PY_TYPE(OpaqueQueryNode), (PyObject *) self, "toString", args, 2);
              }

              static PyObject *t_OpaqueQueryNode_get__schema(t_OpaqueQueryNode *self, void *data)
              {
                ::java::lang::CharSequence value((jobject) NULL);
                OBJ_CALL(value = self->object.getSchema());
                return ::java::lang::t_CharSequence::wrap_Object(value);
              }

              static PyObject *t_OpaqueQueryNode_get__value(t_OpaqueQueryNode *self, void *data)
              {
                ::java::lang::CharSequence value((jobject) NULL);
                OBJ_CALL(value = self->object.getValue());
                return ::java::lang::t_CharSequence::wrap_Object(value);
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/lucene42/Lucene42DocValuesFormat.h"
#include "org/apache/lucene/index/SegmentReadState.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/codecs/DocValuesConsumer.h"
#include "org/apache/lucene/index/SegmentWriteState.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/codecs/DocValuesProducer.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace lucene42 {

          ::java::lang::Class *Lucene42DocValuesFormat::class$ = NULL;
          jmethodID *Lucene42DocValuesFormat::mids$ = NULL;
          bool Lucene42DocValuesFormat::live$ = false;
          jint Lucene42DocValuesFormat::MAX_BINARY_FIELD_LENGTH = (jint) 0;

          jclass Lucene42DocValuesFormat::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/lucene42/Lucene42DocValuesFormat");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_init$_06298cab] = env->getMethodID(cls, "<init>", "(F)V");
              mids$[mid_fieldsConsumer_025deb44] = env->getMethodID(cls, "fieldsConsumer", "(Lorg/apache/lucene/index/SegmentWriteState;)Lorg/apache/lucene/codecs/DocValuesConsumer;");
              mids$[mid_fieldsProducer_9b0d4e4a] = env->getMethodID(cls, "fieldsProducer", "(Lorg/apache/lucene/index/SegmentReadState;)Lorg/apache/lucene/codecs/DocValuesProducer;");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              MAX_BINARY_FIELD_LENGTH = env->getStaticIntField(cls, "MAX_BINARY_FIELD_LENGTH");
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          Lucene42DocValuesFormat::Lucene42DocValuesFormat() : ::org::apache::lucene::codecs::DocValuesFormat(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          Lucene42DocValuesFormat::Lucene42DocValuesFormat(jfloat a0) : ::org::apache::lucene::codecs::DocValuesFormat(env->newObject(initializeClass, &mids$, mid_init$_06298cab, a0)) {}

          ::org::apache::lucene::codecs::DocValuesConsumer Lucene42DocValuesFormat::fieldsConsumer(const ::org::apache::lucene::index::SegmentWriteState & a0) const
          {
            return ::org::apache::lucene::codecs::DocValuesConsumer(env->callObjectMethod(this$, mids$[mid_fieldsConsumer_025deb44], a0.this$));
          }

          ::org::apache::lucene::codecs::DocValuesProducer Lucene42DocValuesFormat::fieldsProducer(const ::org::apache::lucene::index::SegmentReadState & a0) const
          {
            return ::org::apache::lucene::codecs::DocValuesProducer(env->callObjectMethod(this$, mids$[mid_fieldsProducer_9b0d4e4a], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace lucene42 {
          static PyObject *t_Lucene42DocValuesFormat_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Lucene42DocValuesFormat_instance_(PyTypeObject *type, PyObject *arg);
          static int t_Lucene42DocValuesFormat_init_(t_Lucene42DocValuesFormat *self, PyObject *args, PyObject *kwds);
          static PyObject *t_Lucene42DocValuesFormat_fieldsConsumer(t_Lucene42DocValuesFormat *self, PyObject *args);
          static PyObject *t_Lucene42DocValuesFormat_fieldsProducer(t_Lucene42DocValuesFormat *self, PyObject *args);

          static PyMethodDef t_Lucene42DocValuesFormat__methods_[] = {
            DECLARE_METHOD(t_Lucene42DocValuesFormat, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lucene42DocValuesFormat, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lucene42DocValuesFormat, fieldsConsumer, METH_VARARGS),
            DECLARE_METHOD(t_Lucene42DocValuesFormat, fieldsProducer, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(Lucene42DocValuesFormat, t_Lucene42DocValuesFormat, ::org::apache::lucene::codecs::DocValuesFormat, Lucene42DocValuesFormat, t_Lucene42DocValuesFormat_init_, 0, 0, 0, 0, 0);

          void t_Lucene42DocValuesFormat::install(PyObject *module)
          {
            installType(&PY_TYPE(Lucene42DocValuesFormat), module, "Lucene42DocValuesFormat", 0);
          }

          void t_Lucene42DocValuesFormat::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(Lucene42DocValuesFormat).tp_dict, "class_", make_descriptor(Lucene42DocValuesFormat::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(Lucene42DocValuesFormat).tp_dict, "wrapfn_", make_descriptor(t_Lucene42DocValuesFormat::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(Lucene42DocValuesFormat).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(Lucene42DocValuesFormat::initializeClass);
            PyDict_SetItemString(PY_TYPE(Lucene42DocValuesFormat).tp_dict, "MAX_BINARY_FIELD_LENGTH", make_descriptor(Lucene42DocValuesFormat::MAX_BINARY_FIELD_LENGTH));
          }

          static PyObject *t_Lucene42DocValuesFormat_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, Lucene42DocValuesFormat::initializeClass, 1)))
              return NULL;
            return t_Lucene42DocValuesFormat::wrap_Object(Lucene42DocValuesFormat(((t_Lucene42DocValuesFormat *) arg)->object.this$));
          }
          static PyObject *t_Lucene42DocValuesFormat_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, Lucene42DocValuesFormat::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_Lucene42DocValuesFormat_init_(t_Lucene42DocValuesFormat *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 0:
              {
                Lucene42DocValuesFormat object((jobject) NULL);

                INT_CALL(object = Lucene42DocValuesFormat());
                self->object = object;
                break;
              }
              goto err;
             case 1:
              {
                jfloat a0;
                Lucene42DocValuesFormat object((jobject) NULL);

                if (!parseArgs(args, "F", &a0))
                {
                  INT_CALL(object = Lucene42DocValuesFormat(a0));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_Lucene42DocValuesFormat_fieldsConsumer(t_Lucene42DocValuesFormat *self, PyObject *args)
          {
            ::org::apache::lucene::index::SegmentWriteState a0((jobject) NULL);
            ::org::apache::lucene::codecs::DocValuesConsumer result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::index::SegmentWriteState::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.fieldsConsumer(a0));
              return ::org::apache::lucene::codecs::t_DocValuesConsumer::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(Lucene42DocValuesFormat), (PyObject *) self, "fieldsConsumer", args, 2);
          }

          static PyObject *t_Lucene42DocValuesFormat_fieldsProducer(t_Lucene42DocValuesFormat *self, PyObject *args)
          {
            ::org::apache::lucene::index::SegmentReadState a0((jobject) NULL);
            ::org::apache::lucene::codecs::DocValuesProducer result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::index::SegmentReadState::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.fieldsProducer(a0));
              return ::org::apache::lucene::codecs::t_DocValuesProducer::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(Lucene42DocValuesFormat), (PyObject *) self, "fieldsProducer", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/pylucene/search/PythonIntParser.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/index/Terms.h"
#include "org/apache/lucene/index/TermsEnum.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/search/FieldCache$IntParser.h"
#include "java/lang/Throwable.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace pylucene {
      namespace search {

        ::java::lang::Class *PythonIntParser::class$ = NULL;
        jmethodID *PythonIntParser::mids$ = NULL;
        bool PythonIntParser::live$ = false;

        jclass PythonIntParser::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/pylucene/search/PythonIntParser");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_finalize_54c6a166] = env->getMethodID(cls, "finalize", "()V");
            mids$[mid_parseInt_7bc03ddb] = env->getMethodID(cls, "parseInt", "(Lorg/apache/lucene/util/BytesRef;)I");
            mids$[mid_pythonDecRef_54c6a166] = env->getMethodID(cls, "pythonDecRef", "()V");
            mids$[mid_pythonExtension_54c6a17a] = env->getMethodID(cls, "pythonExtension", "()J");
            mids$[mid_pythonExtension_0ee6df2f] = env->getMethodID(cls, "pythonExtension", "(J)V");
            mids$[mid_termsEnum_fb3ac14e] = env->getMethodID(cls, "termsEnum", "(Lorg/apache/lucene/index/Terms;)Lorg/apache/lucene/index/TermsEnum;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        PythonIntParser::PythonIntParser() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        void PythonIntParser::finalize() const
        {
          env->callVoidMethod(this$, mids$[mid_finalize_54c6a166]);
        }

        jlong PythonIntParser::pythonExtension() const
        {
          return env->callLongMethod(this$, mids$[mid_pythonExtension_54c6a17a]);
        }

        void PythonIntParser::pythonExtension(jlong a0) const
        {
          env->callVoidMethod(this$, mids$[mid_pythonExtension_0ee6df2f], a0);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace pylucene {
      namespace search {
        static PyObject *t_PythonIntParser_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_PythonIntParser_instance_(PyTypeObject *type, PyObject *arg);
        static int t_PythonIntParser_init_(t_PythonIntParser *self, PyObject *args, PyObject *kwds);
        static PyObject *t_PythonIntParser_finalize(t_PythonIntParser *self);
        static PyObject *t_PythonIntParser_pythonExtension(t_PythonIntParser *self, PyObject *args);
        static jint JNICALL t_PythonIntParser_parseInt0(JNIEnv *jenv, jobject jobj, jobject a0);
        static void JNICALL t_PythonIntParser_pythonDecRef1(JNIEnv *jenv, jobject jobj);
        static jobject JNICALL t_PythonIntParser_termsEnum2(JNIEnv *jenv, jobject jobj, jobject a0);
        static PyObject *t_PythonIntParser_get__self(t_PythonIntParser *self, void *data);
        static PyGetSetDef t_PythonIntParser__fields_[] = {
          DECLARE_GET_FIELD(t_PythonIntParser, self),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_PythonIntParser__methods_[] = {
          DECLARE_METHOD(t_PythonIntParser, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PythonIntParser, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PythonIntParser, finalize, METH_NOARGS),
          DECLARE_METHOD(t_PythonIntParser, pythonExtension, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(PythonIntParser, t_PythonIntParser, ::java::lang::Object, PythonIntParser, t_PythonIntParser_init_, 0, 0, t_PythonIntParser__fields_, 0, 0);

        void t_PythonIntParser::install(PyObject *module)
        {
          installType(&PY_TYPE(PythonIntParser), module, "PythonIntParser", 1);
        }

        void t_PythonIntParser::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(PythonIntParser).tp_dict, "class_", make_descriptor(PythonIntParser::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(PythonIntParser).tp_dict, "wrapfn_", make_descriptor(t_PythonIntParser::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(PythonIntParser).tp_dict, "boxfn_", make_descriptor(boxObject));
          jclass cls = env->getClass(PythonIntParser::initializeClass);
          JNINativeMethod methods[] = {
            { "parseInt", "(Lorg/apache/lucene/util/BytesRef;)I", (void *) t_PythonIntParser_parseInt0 },
            { "pythonDecRef", "()V", (void *) t_PythonIntParser_pythonDecRef1 },
            { "termsEnum", "(Lorg/apache/lucene/index/Terms;)Lorg/apache/lucene/index/TermsEnum;", (void *) t_PythonIntParser_termsEnum2 },
          };
          env->registerNatives(cls, methods, 3);
        }

        static PyObject *t_PythonIntParser_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, PythonIntParser::initializeClass, 1)))
            return NULL;
          return t_PythonIntParser::wrap_Object(PythonIntParser(((t_PythonIntParser *) arg)->object.this$));
        }
        static PyObject *t_PythonIntParser_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, PythonIntParser::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_PythonIntParser_init_(t_PythonIntParser *self, PyObject *args, PyObject *kwds)
        {
          PythonIntParser object((jobject) NULL);

          INT_CALL(object = PythonIntParser());
          self->object = object;

          Py_INCREF((PyObject *) self);
          self->object.pythonExtension((jlong) (Py_intptr_t) (void *) self);

          return 0;
        }

        static PyObject *t_PythonIntParser_finalize(t_PythonIntParser *self)
        {
          OBJ_CALL(self->object.finalize());
          Py_RETURN_NONE;
        }

        static PyObject *t_PythonIntParser_pythonExtension(t_PythonIntParser *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 0:
            {
              jlong result;
              OBJ_CALL(result = self->object.pythonExtension());
              return PyLong_FromLongLong((PY_LONG_LONG) result);
            }
            break;
           case 1:
            {
              jlong a0;

              if (!parseArgs(args, "J", &a0))
              {
                OBJ_CALL(self->object.pythonExtension(a0));
                Py_RETURN_NONE;
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "pythonExtension", args);
          return NULL;
        }

        static jint JNICALL t_PythonIntParser_parseInt0(JNIEnv *jenv, jobject jobj, jobject a0)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonIntParser::mids$[PythonIntParser::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          jint value;
          PyObject *o0 = ::org::apache::lucene::util::t_BytesRef::wrap_Object(::org::apache::lucene::util::BytesRef(a0));
          PyObject *result = PyObject_CallMethod(obj, "parseInt", "O", o0);
          Py_DECREF(o0);
          if (!result)
            throwPythonError();
          else if (parseArg(result, "I", &value))
          {
            throwTypeError("parseInt", result);
            Py_DECREF(result);
          }
          else
          {
            Py_DECREF(result);
            return value;
          }

          return (jint) 0;
        }

        static void JNICALL t_PythonIntParser_pythonDecRef1(JNIEnv *jenv, jobject jobj)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonIntParser::mids$[PythonIntParser::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;

          if (obj != NULL)
          {
            jenv->CallVoidMethod(jobj, PythonIntParser::mids$[PythonIntParser::mid_pythonExtension_0ee6df2f], (jlong) 0);
            env->finalizeObject(jenv, obj);
          }
        }

        static jobject JNICALL t_PythonIntParser_termsEnum2(JNIEnv *jenv, jobject jobj, jobject a0)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonIntParser::mids$[PythonIntParser::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          ::org::apache::lucene::index::TermsEnum value((jobject) NULL);
          PyObject *o0 = ::org::apache::lucene::index::t_Terms::wrap_Object(::org::apache::lucene::index::Terms(a0));
          PyObject *result = PyObject_CallMethod(obj, "termsEnum", "O", o0);
          Py_DECREF(o0);
          if (!result)
            throwPythonError();
          else if (parseArg(result, "k", ::org::apache::lucene::index::TermsEnum::initializeClass, &value))
          {
            throwTypeError("termsEnum", result);
            Py_DECREF(result);
          }
          else
          {
            jobj = jenv->NewLocalRef(value.this$);
            Py_DECREF(result);
            return jobj;
          }

          return (jobject) NULL;
        }

        static PyObject *t_PythonIntParser_get__self(t_PythonIntParser *self, void *data)
        {
          jlong ptr;
          OBJ_CALL(ptr = self->object.pythonExtension());
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;

          if (obj != NULL)
          {
            Py_INCREF(obj);
            return obj;
          }
          else
            Py_RETURN_NONE;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/BytesRefIterator.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "java/util/Comparator.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *BytesRefIterator::class$ = NULL;
        jmethodID *BytesRefIterator::mids$ = NULL;
        bool BytesRefIterator::live$ = false;
        BytesRefIterator *BytesRefIterator::EMPTY = NULL;

        jclass BytesRefIterator::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/BytesRefIterator");

            mids$ = new jmethodID[max_mid];
            mids$[mid_getComparator_5a7ff2fc] = env->getMethodID(cls, "getComparator", "()Ljava/util/Comparator;");
            mids$[mid_next_4ae19461] = env->getMethodID(cls, "next", "()Lorg/apache/lucene/util/BytesRef;");

            class$ = (::java::lang::Class *) new JObject(cls);
            cls = (jclass) class$->this$;

            EMPTY = new BytesRefIterator(env->getStaticObjectField(cls, "EMPTY", "Lorg/apache/lucene/util/BytesRefIterator;"));
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        ::java::util::Comparator BytesRefIterator::getComparator() const
        {
          return ::java::util::Comparator(env->callObjectMethod(this$, mids$[mid_getComparator_5a7ff2fc]));
        }

        ::org::apache::lucene::util::BytesRef BytesRefIterator::next() const
        {
          return ::org::apache::lucene::util::BytesRef(env->callObjectMethod(this$, mids$[mid_next_4ae19461]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_BytesRefIterator_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_BytesRefIterator_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_BytesRefIterator_getComparator(t_BytesRefIterator *self);
        static PyObject *t_BytesRefIterator_next(t_BytesRefIterator *self);
        static PyObject *t_BytesRefIterator_get__comparator(t_BytesRefIterator *self, void *data);
        static PyGetSetDef t_BytesRefIterator__fields_[] = {
          DECLARE_GET_FIELD(t_BytesRefIterator, comparator),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_BytesRefIterator__methods_[] = {
          DECLARE_METHOD(t_BytesRefIterator, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_BytesRefIterator, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_BytesRefIterator, getComparator, METH_NOARGS),
          DECLARE_METHOD(t_BytesRefIterator, next, METH_NOARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(BytesRefIterator, t_BytesRefIterator, ::java::lang::Object, BytesRefIterator, abstract_init, PyObject_SelfIter, ((PyObject *(*)(t_BytesRefIterator *)) get_next< t_BytesRefIterator,::org::apache::lucene::util::t_BytesRef,::org::apache::lucene::util::BytesRef >), t_BytesRefIterator__fields_, 0, 0);

        void t_BytesRefIterator::install(PyObject *module)
        {
          installType(&PY_TYPE(BytesRefIterator), module, "BytesRefIterator", 0);
        }

        void t_BytesRefIterator::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(BytesRefIterator).tp_dict, "class_", make_descriptor(BytesRefIterator::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(BytesRefIterator).tp_dict, "wrapfn_", make_descriptor(t_BytesRefIterator::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(BytesRefIterator).tp_dict, "boxfn_", make_descriptor(boxObject));
          env->getClass(BytesRefIterator::initializeClass);
          PyDict_SetItemString(PY_TYPE(BytesRefIterator).tp_dict, "EMPTY", make_descriptor(t_BytesRefIterator::wrap_Object(*BytesRefIterator::EMPTY)));
        }

        static PyObject *t_BytesRefIterator_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, BytesRefIterator::initializeClass, 1)))
            return NULL;
          return t_BytesRefIterator::wrap_Object(BytesRefIterator(((t_BytesRefIterator *) arg)->object.this$));
        }
        static PyObject *t_BytesRefIterator_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, BytesRefIterator::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_BytesRefIterator_getComparator(t_BytesRefIterator *self)
        {
          ::java::util::Comparator result((jobject) NULL);
          OBJ_CALL(result = self->object.getComparator());
          return ::java::util::t_Comparator::wrap_Object(result, &::org::apache::lucene::util::PY_TYPE(BytesRef));
        }

        static PyObject *t_BytesRefIterator_next(t_BytesRefIterator *self)
        {
          ::org::apache::lucene::util::BytesRef result((jobject) NULL);
          OBJ_CALL(result = self->object.next());
          return ::org::apache::lucene::util::t_BytesRef::wrap_Object(result);
        }

        static PyObject *t_BytesRefIterator_get__comparator(t_BytesRefIterator *self, void *data)
        {
          ::java::util::Comparator value((jobject) NULL);
          OBJ_CALL(value = self->object.getComparator());
          return ::java::util::t_Comparator::wrap_Object(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/facet/TopOrdAndFloatQueue$OrdAndValue.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {

        ::java::lang::Class *TopOrdAndFloatQueue$OrdAndValue::class$ = NULL;
        jmethodID *TopOrdAndFloatQueue$OrdAndValue::mids$ = NULL;
        jfieldID *TopOrdAndFloatQueue$OrdAndValue::fids$ = NULL;
        bool TopOrdAndFloatQueue$OrdAndValue::live$ = false;

        jclass TopOrdAndFloatQueue$OrdAndValue::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/facet/TopOrdAndFloatQueue$OrdAndValue");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");

            fids$ = new jfieldID[max_fid];
            fids$[fid_ord] = env->getFieldID(cls, "ord", "I");
            fids$[fid_value] = env->getFieldID(cls, "value", "F");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        TopOrdAndFloatQueue$OrdAndValue::TopOrdAndFloatQueue$OrdAndValue() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        jint TopOrdAndFloatQueue$OrdAndValue::_get_ord() const
        {
          return env->getIntField(this$, fids$[fid_ord]);
        }

        void TopOrdAndFloatQueue$OrdAndValue::_set_ord(jint a0) const
        {
          env->setIntField(this$, fids$[fid_ord], a0);
        }

        jfloat TopOrdAndFloatQueue$OrdAndValue::_get_value() const
        {
          return env->getFloatField(this$, fids$[fid_value]);
        }

        void TopOrdAndFloatQueue$OrdAndValue::_set_value(jfloat a0) const
        {
          env->setFloatField(this$, fids$[fid_value], a0);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        static PyObject *t_TopOrdAndFloatQueue$OrdAndValue_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_TopOrdAndFloatQueue$OrdAndValue_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_TopOrdAndFloatQueue$OrdAndValue_of_(t_TopOrdAndFloatQueue$OrdAndValue *self, PyObject *args);
        static int t_TopOrdAndFloatQueue$OrdAndValue_init_(t_TopOrdAndFloatQueue$OrdAndValue *self, PyObject *args, PyObject *kwds);
        static PyObject *t_TopOrdAndFloatQueue$OrdAndValue_get__ord(t_TopOrdAndFloatQueue$OrdAndValue *self, void *data);
        static int t_TopOrdAndFloatQueue$OrdAndValue_set__ord(t_TopOrdAndFloatQueue$OrdAndValue *self, PyObject *arg, void *data);
        static PyObject *t_TopOrdAndFloatQueue$OrdAndValue_get__value(t_TopOrdAndFloatQueue$OrdAndValue *self, void *data);
        static int t_TopOrdAndFloatQueue$OrdAndValue_set__value(t_TopOrdAndFloatQueue$OrdAndValue *self, PyObject *arg, void *data);

        static PyObject *t_TopOrdAndFloatQueue$OrdAndValue_get__parameters_(t_TopOrdAndFloatQueue$OrdAndValue *self, void *data);
        static PyGetSetDef t_TopOrdAndFloatQueue$OrdAndValue__fields_[] = {
          DECLARE_GETSET_FIELD(t_TopOrdAndFloatQueue$OrdAndValue, ord),
          DECLARE_GETSET_FIELD(t_TopOrdAndFloatQueue$OrdAndValue, value),
          DECLARE_GET_FIELD(t_TopOrdAndFloatQueue$OrdAndValue, parameters_),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_TopOrdAndFloatQueue$OrdAndValue__methods_[] = {
          DECLARE_METHOD(t_TopOrdAndFloatQueue$OrdAndValue, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_TopOrdAndFloatQueue$OrdAndValue, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_TopOrdAndFloatQueue$OrdAndValue, of_, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(TopOrdAndFloatQueue$OrdAndValue, t_TopOrdAndFloatQueue$OrdAndValue, ::java::lang::Object, TopOrdAndFloatQueue$OrdAndValue, t_TopOrdAndFloatQueue$OrdAndValue_init_, 0, 0, t_TopOrdAndFloatQueue$OrdAndValue__fields_, 0, 0);
        PyObject *t_TopOrdAndFloatQueue$OrdAndValue::wrap_Object(const TopOrdAndFloatQueue$OrdAndValue& object, PyTypeObject *p0)
        {
          PyObject *obj = t_TopOrdAndFloatQueue$OrdAndValue::wrap_Object(object);
          if (obj != NULL && obj != Py_None)
          {
            t_TopOrdAndFloatQueue$OrdAndValue *self = (t_TopOrdAndFloatQueue$OrdAndValue *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        PyObject *t_TopOrdAndFloatQueue$OrdAndValue::wrap_jobject(const jobject& object, PyTypeObject *p0)
        {
          PyObject *obj = t_TopOrdAndFloatQueue$OrdAndValue::wrap_jobject(object);
          if (obj != NULL && obj != Py_None)
          {
            t_TopOrdAndFloatQueue$OrdAndValue *self = (t_TopOrdAndFloatQueue$OrdAndValue *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        void t_TopOrdAndFloatQueue$OrdAndValue::install(PyObject *module)
        {
          installType(&PY_TYPE(TopOrdAndFloatQueue$OrdAndValue), module, "TopOrdAndFloatQueue$OrdAndValue", 0);
        }

        void t_TopOrdAndFloatQueue$OrdAndValue::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(TopOrdAndFloatQueue$OrdAndValue).tp_dict, "class_", make_descriptor(TopOrdAndFloatQueue$OrdAndValue::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(TopOrdAndFloatQueue$OrdAndValue).tp_dict, "wrapfn_", make_descriptor(t_TopOrdAndFloatQueue$OrdAndValue::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(TopOrdAndFloatQueue$OrdAndValue).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_TopOrdAndFloatQueue$OrdAndValue_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, TopOrdAndFloatQueue$OrdAndValue::initializeClass, 1)))
            return NULL;
          return t_TopOrdAndFloatQueue$OrdAndValue::wrap_Object(TopOrdAndFloatQueue$OrdAndValue(((t_TopOrdAndFloatQueue$OrdAndValue *) arg)->object.this$));
        }
        static PyObject *t_TopOrdAndFloatQueue$OrdAndValue_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, TopOrdAndFloatQueue$OrdAndValue::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_TopOrdAndFloatQueue$OrdAndValue_of_(t_TopOrdAndFloatQueue$OrdAndValue *self, PyObject *args)
        {
          if (!parseArg(args, "T", 1, &(self->parameters)))
            Py_RETURN_SELF;
          return PyErr_SetArgsError((PyObject *) self, "of_", args);
        }

        static int t_TopOrdAndFloatQueue$OrdAndValue_init_(t_TopOrdAndFloatQueue$OrdAndValue *self, PyObject *args, PyObject *kwds)
        {
          TopOrdAndFloatQueue$OrdAndValue object((jobject) NULL);

          INT_CALL(object = TopOrdAndFloatQueue$OrdAndValue());
          self->object = object;
          self->parameters[0] = &::org::apache::lucene::facet::PY_TYPE(TopOrdAndFloatQueue$OrdAndValue);

          return 0;
        }
        static PyObject *t_TopOrdAndFloatQueue$OrdAndValue_get__parameters_(t_TopOrdAndFloatQueue$OrdAndValue *self, void *data)
        {
          return typeParameters(self->parameters, sizeof(self->parameters));
        }

        static PyObject *t_TopOrdAndFloatQueue$OrdAndValue_get__ord(t_TopOrdAndFloatQueue$OrdAndValue *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object._get_ord());
          return PyInt_FromLong((long) value);
        }
        static int t_TopOrdAndFloatQueue$OrdAndValue_set__ord(t_TopOrdAndFloatQueue$OrdAndValue *self, PyObject *arg, void *data)
        {
          jint value;
          if (!parseArg(arg, "I", &value))
          {
            INT_CALL(self->object._set_ord(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "ord", arg);
          return -1;
        }

        static PyObject *t_TopOrdAndFloatQueue$OrdAndValue_get__value(t_TopOrdAndFloatQueue$OrdAndValue *self, void *data)
        {
          jfloat value;
          OBJ_CALL(value = self->object._get_value());
          return PyFloat_FromDouble((double) value);
        }
        static int t_TopOrdAndFloatQueue$OrdAndValue_set__value(t_TopOrdAndFloatQueue$OrdAndValue *self, PyObject *arg, void *data)
        {
          jfloat value;
          if (!parseArg(arg, "F", &value))
          {
            INT_CALL(self->object._set_value(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "value", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/similarities/BasicModelIne.h"
#include "org/apache/lucene/search/similarities/BasicStats.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace similarities {

          ::java::lang::Class *BasicModelIne::class$ = NULL;
          jmethodID *BasicModelIne::mids$ = NULL;
          bool BasicModelIne::live$ = false;

          jclass BasicModelIne::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/similarities/BasicModelIne");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_score_076760a9] = env->getMethodID(cls, "score", "(Lorg/apache/lucene/search/similarities/BasicStats;F)F");
              mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          BasicModelIne::BasicModelIne() : ::org::apache::lucene::search::similarities::BasicModel(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          jfloat BasicModelIne::score(const ::org::apache::lucene::search::similarities::BasicStats & a0, jfloat a1) const
          {
            return env->callFloatMethod(this$, mids$[mid_score_076760a9], a0.this$, a1);
          }

          ::java::lang::String BasicModelIne::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace similarities {
          static PyObject *t_BasicModelIne_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_BasicModelIne_instance_(PyTypeObject *type, PyObject *arg);
          static int t_BasicModelIne_init_(t_BasicModelIne *self, PyObject *args, PyObject *kwds);
          static PyObject *t_BasicModelIne_score(t_BasicModelIne *self, PyObject *args);
          static PyObject *t_BasicModelIne_toString(t_BasicModelIne *self, PyObject *args);

          static PyMethodDef t_BasicModelIne__methods_[] = {
            DECLARE_METHOD(t_BasicModelIne, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_BasicModelIne, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_BasicModelIne, score, METH_VARARGS),
            DECLARE_METHOD(t_BasicModelIne, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(BasicModelIne, t_BasicModelIne, ::org::apache::lucene::search::similarities::BasicModel, BasicModelIne, t_BasicModelIne_init_, 0, 0, 0, 0, 0);

          void t_BasicModelIne::install(PyObject *module)
          {
            installType(&PY_TYPE(BasicModelIne), module, "BasicModelIne", 0);
          }

          void t_BasicModelIne::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(BasicModelIne).tp_dict, "class_", make_descriptor(BasicModelIne::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(BasicModelIne).tp_dict, "wrapfn_", make_descriptor(t_BasicModelIne::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(BasicModelIne).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_BasicModelIne_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, BasicModelIne::initializeClass, 1)))
              return NULL;
            return t_BasicModelIne::wrap_Object(BasicModelIne(((t_BasicModelIne *) arg)->object.this$));
          }
          static PyObject *t_BasicModelIne_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, BasicModelIne::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_BasicModelIne_init_(t_BasicModelIne *self, PyObject *args, PyObject *kwds)
          {
            BasicModelIne object((jobject) NULL);

            INT_CALL(object = BasicModelIne());
            self->object = object;

            return 0;
          }

          static PyObject *t_BasicModelIne_score(t_BasicModelIne *self, PyObject *args)
          {
            ::org::apache::lucene::search::similarities::BasicStats a0((jobject) NULL);
            jfloat a1;
            jfloat result;

            if (!parseArgs(args, "kF", ::org::apache::lucene::search::similarities::BasicStats::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.score(a0, a1));
              return PyFloat_FromDouble((double) result);
            }

            return callSuper(&PY_TYPE(BasicModelIne), (PyObject *) self, "score", args, 2);
          }

          static PyObject *t_BasicModelIne_toString(t_BasicModelIne *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(&PY_TYPE(BasicModelIne), (PyObject *) self, "toString", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/ConstantScoreAutoRewrite.h"
#include "org/apache/lucene/search/BooleanQuery.h"
#include "org/apache/lucene/search/MultiTermQuery.h"
#include "java/lang/Class.h"
#include "java/lang/Object.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "org/apache/lucene/search/Query.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *ConstantScoreAutoRewrite::class$ = NULL;
        jmethodID *ConstantScoreAutoRewrite::mids$ = NULL;
        bool ConstantScoreAutoRewrite::live$ = false;
        jdouble ConstantScoreAutoRewrite::DEFAULT_DOC_COUNT_PERCENT = (jdouble) 0;
        jint ConstantScoreAutoRewrite::DEFAULT_TERM_COUNT_CUTOFF = (jint) 0;

        jclass ConstantScoreAutoRewrite::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/ConstantScoreAutoRewrite");

            mids$ = new jmethodID[max_mid];
            mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
            mids$[mid_getDocCountPercent_54c6a174] = env->getMethodID(cls, "getDocCountPercent", "()D");
            mids$[mid_getTermCountCutoff_54c6a179] = env->getMethodID(cls, "getTermCountCutoff", "()I");
            mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
            mids$[mid_rewrite_925c5bbc] = env->getMethodID(cls, "rewrite", "(Lorg/apache/lucene/index/IndexReader;Lorg/apache/lucene/search/MultiTermQuery;)Lorg/apache/lucene/search/Query;");
            mids$[mid_setDocCountPercent_5d1c7645] = env->getMethodID(cls, "setDocCountPercent", "(D)V");
            mids$[mid_setTermCountCutoff_39c7bd3c] = env->getMethodID(cls, "setTermCountCutoff", "(I)V");
            mids$[mid_addClause_82a56efb] = env->getMethodID(cls, "addClause", "(Lorg/apache/lucene/search/BooleanQuery;Lorg/apache/lucene/index/Term;IFLorg/apache/lucene/index/TermContext;)V");
            mids$[mid_getTopLevelQuery_6f9339e7] = env->getMethodID(cls, "getTopLevelQuery", "()Lorg/apache/lucene/search/BooleanQuery;");

            class$ = (::java::lang::Class *) new JObject(cls);
            cls = (jclass) class$->this$;

            DEFAULT_DOC_COUNT_PERCENT = env->getStaticDoubleField(cls, "DEFAULT_DOC_COUNT_PERCENT");
            DEFAULT_TERM_COUNT_CUTOFF = env->getStaticIntField(cls, "DEFAULT_TERM_COUNT_CUTOFF");
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        jboolean ConstantScoreAutoRewrite::equals(const ::java::lang::Object & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
        }

        jdouble ConstantScoreAutoRewrite::getDocCountPercent() const
        {
          return env->callDoubleMethod(this$, mids$[mid_getDocCountPercent_54c6a174]);
        }

        jint ConstantScoreAutoRewrite::getTermCountCutoff() const
        {
          return env->callIntMethod(this$, mids$[mid_getTermCountCutoff_54c6a179]);
        }

        jint ConstantScoreAutoRewrite::hashCode() const
        {
          return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
        }

        ::org::apache::lucene::search::Query ConstantScoreAutoRewrite::rewrite(const ::org::apache::lucene::index::IndexReader & a0, const ::org::apache::lucene::search::MultiTermQuery & a1) const
        {
          return ::org::apache::lucene::search::Query(env->callObjectMethod(this$, mids$[mid_rewrite_925c5bbc], a0.this$, a1.this$));
        }

        void ConstantScoreAutoRewrite::setDocCountPercent(jdouble a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setDocCountPercent_5d1c7645], a0);
        }

        void ConstantScoreAutoRewrite::setTermCountCutoff(jint a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setTermCountCutoff_39c7bd3c], a0);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_ConstantScoreAutoRewrite_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_ConstantScoreAutoRewrite_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_ConstantScoreAutoRewrite_of_(t_ConstantScoreAutoRewrite *self, PyObject *args);
        static PyObject *t_ConstantScoreAutoRewrite_equals(t_ConstantScoreAutoRewrite *self, PyObject *args);
        static PyObject *t_ConstantScoreAutoRewrite_getDocCountPercent(t_ConstantScoreAutoRewrite *self);
        static PyObject *t_ConstantScoreAutoRewrite_getTermCountCutoff(t_ConstantScoreAutoRewrite *self);
        static PyObject *t_ConstantScoreAutoRewrite_hashCode(t_ConstantScoreAutoRewrite *self, PyObject *args);
        static PyObject *t_ConstantScoreAutoRewrite_rewrite(t_ConstantScoreAutoRewrite *self, PyObject *args);
        static PyObject *t_ConstantScoreAutoRewrite_setDocCountPercent(t_ConstantScoreAutoRewrite *self, PyObject *arg);
        static PyObject *t_ConstantScoreAutoRewrite_setTermCountCutoff(t_ConstantScoreAutoRewrite *self, PyObject *arg);
        static PyObject *t_ConstantScoreAutoRewrite_get__docCountPercent(t_ConstantScoreAutoRewrite *self, void *data);
        static int t_ConstantScoreAutoRewrite_set__docCountPercent(t_ConstantScoreAutoRewrite *self, PyObject *arg, void *data);
        static PyObject *t_ConstantScoreAutoRewrite_get__termCountCutoff(t_ConstantScoreAutoRewrite *self, void *data);
        static int t_ConstantScoreAutoRewrite_set__termCountCutoff(t_ConstantScoreAutoRewrite *self, PyObject *arg, void *data);
        static PyObject *t_ConstantScoreAutoRewrite_get__parameters_(t_ConstantScoreAutoRewrite *self, void *data);
        static PyGetSetDef t_ConstantScoreAutoRewrite__fields_[] = {
          DECLARE_GETSET_FIELD(t_ConstantScoreAutoRewrite, docCountPercent),
          DECLARE_GETSET_FIELD(t_ConstantScoreAutoRewrite, termCountCutoff),
          DECLARE_GET_FIELD(t_ConstantScoreAutoRewrite, parameters_),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_ConstantScoreAutoRewrite__methods_[] = {
          DECLARE_METHOD(t_ConstantScoreAutoRewrite, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_ConstantScoreAutoRewrite, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_ConstantScoreAutoRewrite, of_, METH_VARARGS),
          DECLARE_METHOD(t_ConstantScoreAutoRewrite, equals, METH_VARARGS),
          DECLARE_METHOD(t_ConstantScoreAutoRewrite, getDocCountPercent, METH_NOARGS),
          DECLARE_METHOD(t_ConstantScoreAutoRewrite, getTermCountCutoff, METH_NOARGS),
          DECLARE_METHOD(t_ConstantScoreAutoRewrite, hashCode, METH_VARARGS),
          DECLARE_METHOD(t_ConstantScoreAutoRewrite, rewrite, METH_VARARGS),
          DECLARE_METHOD(t_ConstantScoreAutoRewrite, setDocCountPercent, METH_O),
          DECLARE_METHOD(t_ConstantScoreAutoRewrite, setTermCountCutoff, METH_O),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(ConstantScoreAutoRewrite, t_ConstantScoreAutoRewrite, ::org::apache::lucene::search::TermCollectingRewrite, ConstantScoreAutoRewrite, abstract_init, 0, 0, t_ConstantScoreAutoRewrite__fields_, 0, 0);
        PyObject *t_ConstantScoreAutoRewrite::wrap_Object(const ConstantScoreAutoRewrite& object, PyTypeObject *p0)
        {
          PyObject *obj = t_ConstantScoreAutoRewrite::wrap_Object(object);
          if (obj != NULL && obj != Py_None)
          {
            t_ConstantScoreAutoRewrite *self = (t_ConstantScoreAutoRewrite *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        PyObject *t_ConstantScoreAutoRewrite::wrap_jobject(const jobject& object, PyTypeObject *p0)
        {
          PyObject *obj = t_ConstantScoreAutoRewrite::wrap_jobject(object);
          if (obj != NULL && obj != Py_None)
          {
            t_ConstantScoreAutoRewrite *self = (t_ConstantScoreAutoRewrite *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        void t_ConstantScoreAutoRewrite::install(PyObject *module)
        {
          installType(&PY_TYPE(ConstantScoreAutoRewrite), module, "ConstantScoreAutoRewrite", 0);
        }

        void t_ConstantScoreAutoRewrite::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(ConstantScoreAutoRewrite).tp_dict, "class_", make_descriptor(ConstantScoreAutoRewrite::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(ConstantScoreAutoRewrite).tp_dict, "wrapfn_", make_descriptor(t_ConstantScoreAutoRewrite::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(ConstantScoreAutoRewrite).tp_dict, "boxfn_", make_descriptor(boxObject));
          env->getClass(ConstantScoreAutoRewrite::initializeClass);
          PyDict_SetItemString(PY_TYPE(ConstantScoreAutoRewrite).tp_dict, "DEFAULT_DOC_COUNT_PERCENT", make_descriptor(ConstantScoreAutoRewrite::DEFAULT_DOC_COUNT_PERCENT));
          PyDict_SetItemString(PY_TYPE(ConstantScoreAutoRewrite).tp_dict, "DEFAULT_TERM_COUNT_CUTOFF", make_descriptor(ConstantScoreAutoRewrite::DEFAULT_TERM_COUNT_CUTOFF));
        }

        static PyObject *t_ConstantScoreAutoRewrite_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, ConstantScoreAutoRewrite::initializeClass, 1)))
            return NULL;
          return t_ConstantScoreAutoRewrite::wrap_Object(ConstantScoreAutoRewrite(((t_ConstantScoreAutoRewrite *) arg)->object.this$));
        }
        static PyObject *t_ConstantScoreAutoRewrite_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, ConstantScoreAutoRewrite::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_ConstantScoreAutoRewrite_of_(t_ConstantScoreAutoRewrite *self, PyObject *args)
        {
          if (!parseArg(args, "T", 1, &(self->parameters)))
            Py_RETURN_SELF;
          return PyErr_SetArgsError((PyObject *) self, "of_", args);
        }

        static PyObject *t_ConstantScoreAutoRewrite_equals(t_ConstantScoreAutoRewrite *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.equals(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(ConstantScoreAutoRewrite), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_ConstantScoreAutoRewrite_getDocCountPercent(t_ConstantScoreAutoRewrite *self)
        {
          jdouble result;
          OBJ_CALL(result = self->object.getDocCountPercent());
          return PyFloat_FromDouble((double) result);
        }

        static PyObject *t_ConstantScoreAutoRewrite_getTermCountCutoff(t_ConstantScoreAutoRewrite *self)
        {
          jint result;
          OBJ_CALL(result = self->object.getTermCountCutoff());
          return PyInt_FromLong((long) result);
        }

        static PyObject *t_ConstantScoreAutoRewrite_hashCode(t_ConstantScoreAutoRewrite *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hashCode());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(ConstantScoreAutoRewrite), (PyObject *) self, "hashCode", args, 2);
        }

        static PyObject *t_ConstantScoreAutoRewrite_rewrite(t_ConstantScoreAutoRewrite *self, PyObject *args)
        {
          ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
          ::org::apache::lucene::search::MultiTermQuery a1((jobject) NULL);
          ::org::apache::lucene::search::Query result((jobject) NULL);

          if (!parseArgs(args, "kk", ::org::apache::lucene::index::IndexReader::initializeClass, ::org::apache::lucene::search::MultiTermQuery::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = self->object.rewrite(a0, a1));
            return ::org::apache::lucene::search::t_Query::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(ConstantScoreAutoRewrite), (PyObject *) self, "rewrite", args, 2);
        }

        static PyObject *t_ConstantScoreAutoRewrite_setDocCountPercent(t_ConstantScoreAutoRewrite *self, PyObject *arg)
        {
          jdouble a0;

          if (!parseArg(arg, "D", &a0))
          {
            OBJ_CALL(self->object.setDocCountPercent(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setDocCountPercent", arg);
          return NULL;
        }

        static PyObject *t_ConstantScoreAutoRewrite_setTermCountCutoff(t_ConstantScoreAutoRewrite *self, PyObject *arg)
        {
          jint a0;

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(self->object.setTermCountCutoff(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setTermCountCutoff", arg);
          return NULL;
        }
        static PyObject *t_ConstantScoreAutoRewrite_get__parameters_(t_ConstantScoreAutoRewrite *self, void *data)
        {
          return typeParameters(self->parameters, sizeof(self->parameters));
        }

        static PyObject *t_ConstantScoreAutoRewrite_get__docCountPercent(t_ConstantScoreAutoRewrite *self, void *data)
        {
          jdouble value;
          OBJ_CALL(value = self->object.getDocCountPercent());
          return PyFloat_FromDouble((double) value);
        }
        static int t_ConstantScoreAutoRewrite_set__docCountPercent(t_ConstantScoreAutoRewrite *self, PyObject *arg, void *data)
        {
          {
            jdouble value;
            if (!parseArg(arg, "D", &value))
            {
              INT_CALL(self->object.setDocCountPercent(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "docCountPercent", arg);
          return -1;
        }

        static PyObject *t_ConstantScoreAutoRewrite_get__termCountCutoff(t_ConstantScoreAutoRewrite *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object.getTermCountCutoff());
          return PyInt_FromLong((long) value);
        }
        static int t_ConstantScoreAutoRewrite_set__termCountCutoff(t_ConstantScoreAutoRewrite *self, PyObject *arg, void *data)
        {
          {
            jint value;
            if (!parseArg(arg, "I", &value))
            {
              INT_CALL(self->object.setTermCountCutoff(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "termCountCutoff", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/standard/ClassicTokenizerFactory.h"
#include "org/apache/lucene/util/AttributeFactory.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/analysis/standard/ClassicTokenizer.h"
#include "java/util/Map.h"
#include "java/io/Reader.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace standard {

          ::java::lang::Class *ClassicTokenizerFactory::class$ = NULL;
          jmethodID *ClassicTokenizerFactory::mids$ = NULL;
          bool ClassicTokenizerFactory::live$ = false;

          jclass ClassicTokenizerFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/standard/ClassicTokenizerFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4c9e2b1c] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_ee8ef5f7] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/util/AttributeFactory;Ljava/io/Reader;)Lorg/apache/lucene/analysis/standard/ClassicTokenizer;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ClassicTokenizerFactory::ClassicTokenizerFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenizerFactory(env->newObject(initializeClass, &mids$, mid_init$_4c9e2b1c, a0.this$)) {}

          ::org::apache::lucene::analysis::standard::ClassicTokenizer ClassicTokenizerFactory::create(const ::org::apache::lucene::util::AttributeFactory & a0, const ::java::io::Reader & a1) const
          {
            return ::org::apache::lucene::analysis::standard::ClassicTokenizer(env->callObjectMethod(this$, mids$[mid_create_ee8ef5f7], a0.this$, a1.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace standard {
          static PyObject *t_ClassicTokenizerFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_ClassicTokenizerFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_ClassicTokenizerFactory_init_(t_ClassicTokenizerFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_ClassicTokenizerFactory_create(t_ClassicTokenizerFactory *self, PyObject *args);

          static PyMethodDef t_ClassicTokenizerFactory__methods_[] = {
            DECLARE_METHOD(t_ClassicTokenizerFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ClassicTokenizerFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ClassicTokenizerFactory, create, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(ClassicTokenizerFactory, t_ClassicTokenizerFactory, ::org::apache::lucene::analysis::util::TokenizerFactory, ClassicTokenizerFactory, t_ClassicTokenizerFactory_init_, 0, 0, 0, 0, 0);

          void t_ClassicTokenizerFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(ClassicTokenizerFactory), module, "ClassicTokenizerFactory", 0);
          }

          void t_ClassicTokenizerFactory::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(ClassicTokenizerFactory).tp_dict, "class_", make_descriptor(ClassicTokenizerFactory::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(ClassicTokenizerFactory).tp_dict, "wrapfn_", make_descriptor(t_ClassicTokenizerFactory::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(ClassicTokenizerFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_ClassicTokenizerFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, ClassicTokenizerFactory::initializeClass, 1)))
              return NULL;
            return t_ClassicTokenizerFactory::wrap_Object(ClassicTokenizerFactory(((t_ClassicTokenizerFactory *) arg)->object.this$));
          }
          static PyObject *t_ClassicTokenizerFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, ClassicTokenizerFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_ClassicTokenizerFactory_init_(t_ClassicTokenizerFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            ClassicTokenizerFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = ClassicTokenizerFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_ClassicTokenizerFactory_create(t_ClassicTokenizerFactory *self, PyObject *args)
          {
            ::org::apache::lucene::util::AttributeFactory a0((jobject) NULL);
            ::java::io::Reader a1((jobject) NULL);
            ::org::apache::lucene::analysis::standard::ClassicTokenizer result((jobject) NULL);

            if (!parseArgs(args, "kk", ::org::apache::lucene::util::AttributeFactory::initializeClass, ::java::io::Reader::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.create(a0, a1));
              return ::org::apache::lucene::analysis::standard::t_ClassicTokenizer::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(ClassicTokenizerFactory), (PyObject *) self, "create", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/tokenattributes/PositionLengthAttribute.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace tokenattributes {

          ::java::lang::Class *PositionLengthAttribute::class$ = NULL;
          jmethodID *PositionLengthAttribute::mids$ = NULL;
          bool PositionLengthAttribute::live$ = false;

          jclass PositionLengthAttribute::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/tokenattributes/PositionLengthAttribute");

              mids$ = new jmethodID[max_mid];
              mids$[mid_getPositionLength_54c6a179] = env->getMethodID(cls, "getPositionLength", "()I");
              mids$[mid_setPositionLength_39c7bd3c] = env->getMethodID(cls, "setPositionLength", "(I)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          jint PositionLengthAttribute::getPositionLength() const
          {
            return env->callIntMethod(this$, mids$[mid_getPositionLength_54c6a179]);
          }

          void PositionLengthAttribute::setPositionLength(jint a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setPositionLength_39c7bd3c], a0);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace tokenattributes {
          static PyObject *t_PositionLengthAttribute_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PositionLengthAttribute_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PositionLengthAttribute_getPositionLength(t_PositionLengthAttribute *self);
          static PyObject *t_PositionLengthAttribute_setPositionLength(t_PositionLengthAttribute *self, PyObject *arg);
          static PyObject *t_PositionLengthAttribute_get__positionLength(t_PositionLengthAttribute *self, void *data);
          static int t_PositionLengthAttribute_set__positionLength(t_PositionLengthAttribute *self, PyObject *arg, void *data);
          static PyGetSetDef t_PositionLengthAttribute__fields_[] = {
            DECLARE_GETSET_FIELD(t_PositionLengthAttribute, positionLength),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_PositionLengthAttribute__methods_[] = {
            DECLARE_METHOD(t_PositionLengthAttribute, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PositionLengthAttribute, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PositionLengthAttribute, getPositionLength, METH_NOARGS),
            DECLARE_METHOD(t_PositionLengthAttribute, setPositionLength, METH_O),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(PositionLengthAttribute, t_PositionLengthAttribute, ::org::apache::lucene::util::Attribute, PositionLengthAttribute, abstract_init, 0, 0, t_PositionLengthAttribute__fields_, 0, 0);

          void t_PositionLengthAttribute::install(PyObject *module)
          {
            installType(&PY_TYPE(PositionLengthAttribute), module, "PositionLengthAttribute", 0);
          }

          void t_PositionLengthAttribute::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(PositionLengthAttribute).tp_dict, "class_", make_descriptor(PositionLengthAttribute::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(PositionLengthAttribute).tp_dict, "wrapfn_", make_descriptor(t_PositionLengthAttribute::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(PositionLengthAttribute).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_PositionLengthAttribute_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, PositionLengthAttribute::initializeClass, 1)))
              return NULL;
            return t_PositionLengthAttribute::wrap_Object(PositionLengthAttribute(((t_PositionLengthAttribute *) arg)->object.this$));
          }
          static PyObject *t_PositionLengthAttribute_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, PositionLengthAttribute::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_PositionLengthAttribute_getPositionLength(t_PositionLengthAttribute *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getPositionLength());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_PositionLengthAttribute_setPositionLength(t_PositionLengthAttribute *self, PyObject *arg)
          {
            jint a0;

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(self->object.setPositionLength(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setPositionLength", arg);
            return NULL;
          }

          static PyObject *t_PositionLengthAttribute_get__positionLength(t_PositionLengthAttribute *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getPositionLength());
            return PyInt_FromLong((long) value);
          }
          static int t_PositionLengthAttribute_set__positionLength(t_PositionLengthAttribute *self, PyObject *arg, void *data)
          {
            {
              jint value;
              if (!parseArg(arg, "I", &value))
              {
                INT_CALL(self->object.setPositionLength(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "positionLength", arg);
            return -1;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/SentinelIntSet.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *SentinelIntSet::class$ = NULL;
        jmethodID *SentinelIntSet::mids$ = NULL;
        jfieldID *SentinelIntSet::fids$ = NULL;
        bool SentinelIntSet::live$ = false;

        jclass SentinelIntSet::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/SentinelIntSet");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_d8d154a6] = env->getMethodID(cls, "<init>", "(II)V");
            mids$[mid_clear_54c6a166] = env->getMethodID(cls, "clear", "()V");
            mids$[mid_exists_39c7bd30] = env->getMethodID(cls, "exists", "(I)Z");
            mids$[mid_find_39c7bd23] = env->getMethodID(cls, "find", "(I)I");
            mids$[mid_getSlot_39c7bd23] = env->getMethodID(cls, "getSlot", "(I)I");
            mids$[mid_hash_39c7bd23] = env->getMethodID(cls, "hash", "(I)I");
            mids$[mid_put_39c7bd23] = env->getMethodID(cls, "put", "(I)I");
            mids$[mid_ramBytesUsed_54c6a17a] = env->getMethodID(cls, "ramBytesUsed", "()J");
            mids$[mid_rehash_54c6a166] = env->getMethodID(cls, "rehash", "()V");
            mids$[mid_size_54c6a179] = env->getMethodID(cls, "size", "()I");

            fids$ = new jfieldID[max_fid];
            fids$[fid_count] = env->getFieldID(cls, "count", "I");
            fids$[fid_emptyVal] = env->getFieldID(cls, "emptyVal", "I");
            fids$[fid_keys] = env->getFieldID(cls, "keys", "[I");
            fids$[fid_rehashCount] = env->getFieldID(cls, "rehashCount", "I");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        SentinelIntSet::SentinelIntSet(jint a0, jint a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_d8d154a6, a0, a1)) {}

        void SentinelIntSet::clear() const
        {
          env->callVoidMethod(this$, mids$[mid_clear_54c6a166]);
        }

        jboolean SentinelIntSet::exists(jint a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_exists_39c7bd30], a0);
        }

        jint SentinelIntSet::find(jint a0) const
        {
          return env->callIntMethod(this$, mids$[mid_find_39c7bd23], a0);
        }

        jint SentinelIntSet::getSlot(jint a0) const
        {
          return env->callIntMethod(this$, mids$[mid_getSlot_39c7bd23], a0);
        }

        jint SentinelIntSet::hash(jint a0) const
        {
          return env->callIntMethod(this$, mids$[mid_hash_39c7bd23], a0);
        }

        jint SentinelIntSet::put(jint a0) const
        {
          return env->callIntMethod(this$, mids$[mid_put_39c7bd23], a0);
        }

        jlong SentinelIntSet::ramBytesUsed() const
        {
          return env->callLongMethod(this$, mids$[mid_ramBytesUsed_54c6a17a]);
        }

        void SentinelIntSet::rehash() const
        {
          env->callVoidMethod(this$, mids$[mid_rehash_54c6a166]);
        }

        jint SentinelIntSet::size() const
        {
          return env->callIntMethod(this$, mids$[mid_size_54c6a179]);
        }

        jint SentinelIntSet::_get_count() const
        {
          return env->getIntField(this$, fids$[fid_count]);
        }

        void SentinelIntSet::_set_count(jint a0) const
        {
          env->setIntField(this$, fids$[fid_count], a0);
        }

        jint SentinelIntSet::_get_emptyVal() const
        {
          return env->getIntField(this$, fids$[fid_emptyVal]);
        }

        JArray< jint > SentinelIntSet::_get_keys() const
        {
          return JArray< jint >(env->getObjectField(this$, fids$[fid_keys]));
        }

        void SentinelIntSet::_set_keys(const JArray< jint > & a0) const
        {
          env->setObjectField(this$, fids$[fid_keys], a0.this$);
        }

        jint SentinelIntSet::_get_rehashCount() const
        {
          return env->getIntField(this$, fids$[fid_rehashCount]);
        }

        void SentinelIntSet::_set_rehashCount(jint a0) const
        {
          env->setIntField(this$, fids$[fid_rehashCount], a0);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_SentinelIntSet_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_SentinelIntSet_instance_(PyTypeObject *type, PyObject *arg);
        static int t_SentinelIntSet_init_(t_SentinelIntSet *self, PyObject *args, PyObject *kwds);
        static PyObject *t_SentinelIntSet_clear(t_SentinelIntSet *self);
        static PyObject *t_SentinelIntSet_exists(t_SentinelIntSet *self, PyObject *arg);
        static PyObject *t_SentinelIntSet_find(t_SentinelIntSet *self, PyObject *arg);
        static PyObject *t_SentinelIntSet_getSlot(t_SentinelIntSet *self, PyObject *arg);
        static PyObject *t_SentinelIntSet_hash(t_SentinelIntSet *self, PyObject *arg);
        static PyObject *t_SentinelIntSet_put(t_SentinelIntSet *self, PyObject *arg);
        static PyObject *t_SentinelIntSet_ramBytesUsed(t_SentinelIntSet *self);
        static PyObject *t_SentinelIntSet_rehash(t_SentinelIntSet *self);
        static PyObject *t_SentinelIntSet_size(t_SentinelIntSet *self);
        static PyObject *t_SentinelIntSet_get__count(t_SentinelIntSet *self, void *data);
        static int t_SentinelIntSet_set__count(t_SentinelIntSet *self, PyObject *arg, void *data);
        static PyObject *t_SentinelIntSet_get__emptyVal(t_SentinelIntSet *self, void *data);
        static PyObject *t_SentinelIntSet_get__keys(t_SentinelIntSet *self, void *data);
        static int t_SentinelIntSet_set__keys(t_SentinelIntSet *self, PyObject *arg, void *data);
        static PyObject *t_SentinelIntSet_get__rehashCount(t_SentinelIntSet *self, void *data);
        static int t_SentinelIntSet_set__rehashCount(t_SentinelIntSet *self, PyObject *arg, void *data);

        static PyGetSetDef t_SentinelIntSet__fields_[] = {
          DECLARE_GETSET_FIELD(t_SentinelIntSet, count),
          DECLARE_GET_FIELD(t_SentinelIntSet, emptyVal),
          DECLARE_GETSET_FIELD(t_SentinelIntSet, keys),
          DECLARE_GETSET_FIELD(t_SentinelIntSet, rehashCount),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_SentinelIntSet__methods_[] = {
          DECLARE_METHOD(t_SentinelIntSet, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SentinelIntSet, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SentinelIntSet, clear, METH_NOARGS),
          DECLARE_METHOD(t_SentinelIntSet, exists, METH_O),
          DECLARE_METHOD(t_SentinelIntSet, find, METH_O),
          DECLARE_METHOD(t_SentinelIntSet, getSlot, METH_O),
          DECLARE_METHOD(t_SentinelIntSet, hash, METH_O),
          DECLARE_METHOD(t_SentinelIntSet, put, METH_O),
          DECLARE_METHOD(t_SentinelIntSet, ramBytesUsed, METH_NOARGS),
          DECLARE_METHOD(t_SentinelIntSet, rehash, METH_NOARGS),
          DECLARE_METHOD(t_SentinelIntSet, size, METH_NOARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(SentinelIntSet, t_SentinelIntSet, ::java::lang::Object, SentinelIntSet, t_SentinelIntSet_init_, 0, 0, t_SentinelIntSet__fields_, 0, 0);

        void t_SentinelIntSet::install(PyObject *module)
        {
          installType(&PY_TYPE(SentinelIntSet), module, "SentinelIntSet", 0);
        }

        void t_SentinelIntSet::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(SentinelIntSet).tp_dict, "class_", make_descriptor(SentinelIntSet::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(SentinelIntSet).tp_dict, "wrapfn_", make_descriptor(t_SentinelIntSet::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(SentinelIntSet).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_SentinelIntSet_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, SentinelIntSet::initializeClass, 1)))
            return NULL;
          return t_SentinelIntSet::wrap_Object(SentinelIntSet(((t_SentinelIntSet *) arg)->object.this$));
        }
        static PyObject *t_SentinelIntSet_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, SentinelIntSet::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_SentinelIntSet_init_(t_SentinelIntSet *self, PyObject *args, PyObject *kwds)
        {
          jint a0;
          jint a1;
          SentinelIntSet object((jobject) NULL);

          if (!parseArgs(args, "II", &a0, &a1))
          {
            INT_CALL(object = SentinelIntSet(a0, a1));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_SentinelIntSet_clear(t_SentinelIntSet *self)
        {
          OBJ_CALL(self->object.clear());
          Py_RETURN_NONE;
        }

        static PyObject *t_SentinelIntSet_exists(t_SentinelIntSet *self, PyObject *arg)
        {
          jint a0;
          jboolean result;

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(result = self->object.exists(a0));
            Py_RETURN_BOOL(result);
          }

          PyErr_SetArgsError((PyObject *) self, "exists", arg);
          return NULL;
        }

        static PyObject *t_SentinelIntSet_find(t_SentinelIntSet *self, PyObject *arg)
        {
          jint a0;
          jint result;

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(result = self->object.find(a0));
            return PyInt_FromLong((long) result);
          }

          PyErr_SetArgsError((PyObject *) self, "find", arg);
          return NULL;
        }

        static PyObject *t_SentinelIntSet_getSlot(t_SentinelIntSet *self, PyObject *arg)
        {
          jint a0;
          jint result;

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(result = self->object.getSlot(a0));
            return PyInt_FromLong((long) result);
          }

          PyErr_SetArgsError((PyObject *) self, "getSlot", arg);
          return NULL;
        }

        static PyObject *t_SentinelIntSet_hash(t_SentinelIntSet *self, PyObject *arg)
        {
          jint a0;
          jint result;

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(result = self->object.hash(a0));
            return PyInt_FromLong((long) result);
          }

          PyErr_SetArgsError((PyObject *) self, "hash", arg);
          return NULL;
        }

        static PyObject *t_SentinelIntSet_put(t_SentinelIntSet *self, PyObject *arg)
        {
          jint a0;
          jint result;

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(result = self->object.put(a0));
            return PyInt_FromLong((long) result);
          }

          PyErr_SetArgsError((PyObject *) self, "put", arg);
          return NULL;
        }

        static PyObject *t_SentinelIntSet_ramBytesUsed(t_SentinelIntSet *self)
        {
          jlong result;
          OBJ_CALL(result = self->object.ramBytesUsed());
          return PyLong_FromLongLong((PY_LONG_LONG) result);
        }

        static PyObject *t_SentinelIntSet_rehash(t_SentinelIntSet *self)
        {
          OBJ_CALL(self->object.rehash());
          Py_RETURN_NONE;
        }

        static PyObject *t_SentinelIntSet_size(t_SentinelIntSet *self)
        {
          jint result;
          OBJ_CALL(result = self->object.size());
          return PyInt_FromLong((long) result);
        }

        static PyObject *t_SentinelIntSet_get__count(t_SentinelIntSet *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object._get_count());
          return PyInt_FromLong((long) value);
        }
        static int t_SentinelIntSet_set__count(t_SentinelIntSet *self, PyObject *arg, void *data)
        {
          jint value;
          if (!parseArg(arg, "I", &value))
          {
            INT_CALL(self->object._set_count(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "count", arg);
          return -1;
        }

        static PyObject *t_SentinelIntSet_get__emptyVal(t_SentinelIntSet *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object._get_emptyVal());
          return PyInt_FromLong((long) value);
        }

        static PyObject *t_SentinelIntSet_get__keys(t_SentinelIntSet *self, void *data)
        {
          JArray< jint > value((jobject) NULL);
          OBJ_CALL(value = self->object._get_keys());
          return value.wrap();
        }
        static int t_SentinelIntSet_set__keys(t_SentinelIntSet *self, PyObject *arg, void *data)
        {
          JArray< jint > value((jobject) NULL);
          if (!parseArg(arg, "[I", &value))
          {
            INT_CALL(self->object._set_keys(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "keys", arg);
          return -1;
        }

        static PyObject *t_SentinelIntSet_get__rehashCount(t_SentinelIntSet *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object._get_rehashCount());
          return PyInt_FromLong((long) value);
        }
        static int t_SentinelIntSet_set__rehashCount(t_SentinelIntSet *self, PyObject *arg, void *data)
        {
          jint value;
          if (!parseArg(arg, "I", &value))
          {
            INT_CALL(self->object._set_rehashCount(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "rehashCount", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/join/ToParentBlockJoinQuery.h"
#include "org/apache/lucene/search/Weight.h"
#include "java/lang/Class.h"
#include "java/lang/Object.h"
#include "org/apache/lucene/search/Filter.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/search/join/ScoreMode.h"
#include "java/util/Set.h"
#include "java/lang/String.h"
#include "org/apache/lucene/search/IndexSearcher.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "org/apache/lucene/index/Term.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace join {

          ::java::lang::Class *ToParentBlockJoinQuery::class$ = NULL;
          jmethodID *ToParentBlockJoinQuery::mids$ = NULL;
          bool ToParentBlockJoinQuery::live$ = false;

          jclass ToParentBlockJoinQuery::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/join/ToParentBlockJoinQuery");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_196d5feb] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/Query;Lorg/apache/lucene/search/Filter;Lorg/apache/lucene/search/join/ScoreMode;)V");
              mids$[mid_createWeight_367763cb] = env->getMethodID(cls, "createWeight", "(Lorg/apache/lucene/search/IndexSearcher;)Lorg/apache/lucene/search/Weight;");
              mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
              mids$[mid_extractTerms_fb4f2b26] = env->getMethodID(cls, "extractTerms", "(Ljava/util/Set;)V");
              mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
              mids$[mid_rewrite_7edcaa43] = env->getMethodID(cls, "rewrite", "(Lorg/apache/lucene/index/IndexReader;)Lorg/apache/lucene/search/Query;");
              mids$[mid_toString_97a5258f] = env->getMethodID(cls, "toString", "(Ljava/lang/String;)Ljava/lang/String;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ToParentBlockJoinQuery::ToParentBlockJoinQuery(const ::org::apache::lucene::search::Query & a0, const ::org::apache::lucene::search::Filter & a1, const ::org::apache::lucene::search::join::ScoreMode & a2) : ::org::apache::lucene::search::Query(env->newObject(initializeClass, &mids$, mid_init$_196d5feb, a0.this$, a1.this$, a2.this$)) {}

          ::org::apache::lucene::search::Weight ToParentBlockJoinQuery::createWeight(const ::org::apache::lucene::search::IndexSearcher & a0) const
          {
            return ::org::apache::lucene::search::Weight(env->callObjectMethod(this$, mids$[mid_createWeight_367763cb], a0.this$));
          }

          jboolean ToParentBlockJoinQuery::equals(const ::java::lang::Object & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
          }

          void ToParentBlockJoinQuery::extractTerms(const ::java::util::Set & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_extractTerms_fb4f2b26], a0.this$);
          }

          jint ToParentBlockJoinQuery::hashCode() const
          {
            return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
          }

          ::org::apache::lucene::search::Query ToParentBlockJoinQuery::rewrite(const ::org::apache::lucene::index::IndexReader & a0) const
          {
            return ::org::apache::lucene::search::Query(env->callObjectMethod(this$, mids$[mid_rewrite_7edcaa43], a0.this$));
          }

          ::java::lang::String ToParentBlockJoinQuery::toString(const ::java::lang::String & a0) const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_97a5258f], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace join {
          static PyObject *t_ToParentBlockJoinQuery_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_ToParentBlockJoinQuery_instance_(PyTypeObject *type, PyObject *arg);
          static int t_ToParentBlockJoinQuery_init_(t_ToParentBlockJoinQuery *self, PyObject *args, PyObject *kwds);
          static PyObject *t_ToParentBlockJoinQuery_createWeight(t_ToParentBlockJoinQuery *self, PyObject *args);
          static PyObject *t_ToParentBlockJoinQuery_equals(t_ToParentBlockJoinQuery *self, PyObject *args);
          static PyObject *t_ToParentBlockJoinQuery_extractTerms(t_ToParentBlockJoinQuery *self, PyObject *args);
          static PyObject *t_ToParentBlockJoinQuery_hashCode(t_ToParentBlockJoinQuery *self, PyObject *args);
          static PyObject *t_ToParentBlockJoinQuery_rewrite(t_ToParentBlockJoinQuery *self, PyObject *args);
          static PyObject *t_ToParentBlockJoinQuery_toString(t_ToParentBlockJoinQuery *self, PyObject *args);

          static PyMethodDef t_ToParentBlockJoinQuery__methods_[] = {
            DECLARE_METHOD(t_ToParentBlockJoinQuery, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ToParentBlockJoinQuery, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ToParentBlockJoinQuery, createWeight, METH_VARARGS),
            DECLARE_METHOD(t_ToParentBlockJoinQuery, equals, METH_VARARGS),
            DECLARE_METHOD(t_ToParentBlockJoinQuery, extractTerms, METH_VARARGS),
            DECLARE_METHOD(t_ToParentBlockJoinQuery, hashCode, METH_VARARGS),
            DECLARE_METHOD(t_ToParentBlockJoinQuery, rewrite, METH_VARARGS),
            DECLARE_METHOD(t_ToParentBlockJoinQuery, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(ToParentBlockJoinQuery, t_ToParentBlockJoinQuery, ::org::apache::lucene::search::Query, ToParentBlockJoinQuery, t_ToParentBlockJoinQuery_init_, 0, 0, 0, 0, 0);

          void t_ToParentBlockJoinQuery::install(PyObject *module)
          {
            installType(&PY_TYPE(ToParentBlockJoinQuery), module, "ToParentBlockJoinQuery", 0);
          }

          void t_ToParentBlockJoinQuery::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(ToParentBlockJoinQuery).tp_dict, "class_", make_descriptor(ToParentBlockJoinQuery::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(ToParentBlockJoinQuery).tp_dict, "wrapfn_", make_descriptor(t_ToParentBlockJoinQuery::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(ToParentBlockJoinQuery).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_ToParentBlockJoinQuery_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, ToParentBlockJoinQuery::initializeClass, 1)))
              return NULL;
            return t_ToParentBlockJoinQuery::wrap_Object(ToParentBlockJoinQuery(((t_ToParentBlockJoinQuery *) arg)->object.this$));
          }
          static PyObject *t_ToParentBlockJoinQuery_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, ToParentBlockJoinQuery::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_ToParentBlockJoinQuery_init_(t_ToParentBlockJoinQuery *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::search::Query a0((jobject) NULL);
            ::org::apache::lucene::search::Filter a1((jobject) NULL);
            ::org::apache::lucene::search::join::ScoreMode a2((jobject) NULL);
            PyTypeObject **p2;
            ToParentBlockJoinQuery object((jobject) NULL);

            if (!parseArgs(args, "kkK", ::org::apache::lucene::search::Query::initializeClass, ::org::apache::lucene::search::Filter::initializeClass, ::org::apache::lucene::search::join::ScoreMode::initializeClass, &a0, &a1, &a2, &p2, ::org::apache::lucene::search::join::t_ScoreMode::parameters_))
            {
              INT_CALL(object = ToParentBlockJoinQuery(a0, a1, a2));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_ToParentBlockJoinQuery_createWeight(t_ToParentBlockJoinQuery *self, PyObject *args)
          {
            ::org::apache::lucene::search::IndexSearcher a0((jobject) NULL);
            ::org::apache::lucene::search::Weight result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::search::IndexSearcher::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.createWeight(a0));
              return ::org::apache::lucene::search::t_Weight::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(ToParentBlockJoinQuery), (PyObject *) self, "createWeight", args, 2);
          }

          static PyObject *t_ToParentBlockJoinQuery_equals(t_ToParentBlockJoinQuery *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            jboolean result;

            if (!parseArgs(args, "o", &a0))
            {
              OBJ_CALL(result = self->object.equals(a0));
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(ToParentBlockJoinQuery), (PyObject *) self, "equals", args, 2);
          }

          static PyObject *t_ToParentBlockJoinQuery_extractTerms(t_ToParentBlockJoinQuery *self, PyObject *args)
          {
            ::java::util::Set a0((jobject) NULL);
            PyTypeObject **p0;

            if (!parseArgs(args, "K", ::java::util::Set::initializeClass, &a0, &p0, ::java::util::t_Set::parameters_))
            {
              OBJ_CALL(self->object.extractTerms(a0));
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(ToParentBlockJoinQuery), (PyObject *) self, "extractTerms", args, 2);
          }

          static PyObject *t_ToParentBlockJoinQuery_hashCode(t_ToParentBlockJoinQuery *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.hashCode());
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(ToParentBlockJoinQuery), (PyObject *) self, "hashCode", args, 2);
          }

          static PyObject *t_ToParentBlockJoinQuery_rewrite(t_ToParentBlockJoinQuery *self, PyObject *args)
          {
            ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
            ::org::apache::lucene::search::Query result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::index::IndexReader::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.rewrite(a0));
              return ::org::apache::lucene::search::t_Query::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(ToParentBlockJoinQuery), (PyObject *) self, "rewrite", args, 2);
          }

          static PyObject *t_ToParentBlockJoinQuery_toString(t_ToParentBlockJoinQuery *self, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, "s", &a0))
            {
              OBJ_CALL(result = self->object.toString(a0));
              return j2p(result);
            }

            return callSuper(&PY_TYPE(ToParentBlockJoinQuery), (PyObject *) self, "toString", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/cjk/CJKBigramFilter.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/io/IOException.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace cjk {

          ::java::lang::Class *CJKBigramFilter::class$ = NULL;
          jmethodID *CJKBigramFilter::mids$ = NULL;
          bool CJKBigramFilter::live$ = false;
          ::java::lang::String *CJKBigramFilter::DOUBLE_TYPE = NULL;
          jint CJKBigramFilter::HAN = (jint) 0;
          jint CJKBigramFilter::HANGUL = (jint) 0;
          jint CJKBigramFilter::HIRAGANA = (jint) 0;
          jint CJKBigramFilter::KATAKANA = (jint) 0;
          ::java::lang::String *CJKBigramFilter::SINGLE_TYPE = NULL;

          jclass CJKBigramFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/cjk/CJKBigramFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_c7c794dc] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;)V");
              mids$[mid_init$_d53bcf42] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;I)V");
              mids$[mid_init$_4f7f61d3] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;IZ)V");
              mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");
              mids$[mid_reset_54c6a166] = env->getMethodID(cls, "reset", "()V");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              DOUBLE_TYPE = new ::java::lang::String(env->getStaticObjectField(cls, "DOUBLE_TYPE", "Ljava/lang/String;"));
              HAN = env->getStaticIntField(cls, "HAN");
              HANGUL = env->getStaticIntField(cls, "HANGUL");
              HIRAGANA = env->getStaticIntField(cls, "HIRAGANA");
              KATAKANA = env->getStaticIntField(cls, "KATAKANA");
              SINGLE_TYPE = new ::java::lang::String(env->getStaticObjectField(cls, "SINGLE_TYPE", "Ljava/lang/String;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          CJKBigramFilter::CJKBigramFilter(const ::org::apache::lucene::analysis::TokenStream & a0) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_c7c794dc, a0.this$)) {}

          CJKBigramFilter::CJKBigramFilter(const ::org::apache::lucene::analysis::TokenStream & a0, jint a1) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_d53bcf42, a0.this$, a1)) {}

          CJKBigramFilter::CJKBigramFilter(const ::org::apache::lucene::analysis::TokenStream & a0, jint a1, jboolean a2) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_4f7f61d3, a0.this$, a1, a2)) {}

          jboolean CJKBigramFilter::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_54c6a16a]);
          }

          void CJKBigramFilter::reset() const
          {
            env->callVoidMethod(this$, mids$[mid_reset_54c6a166]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace cjk {
          static PyObject *t_CJKBigramFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_CJKBigramFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_CJKBigramFilter_init_(t_CJKBigramFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_CJKBigramFilter_incrementToken(t_CJKBigramFilter *self, PyObject *args);
          static PyObject *t_CJKBigramFilter_reset(t_CJKBigramFilter *self, PyObject *args);

          static PyMethodDef t_CJKBigramFilter__methods_[] = {
            DECLARE_METHOD(t_CJKBigramFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CJKBigramFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CJKBigramFilter, incrementToken, METH_VARARGS),
            DECLARE_METHOD(t_CJKBigramFilter, reset, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(CJKBigramFilter, t_CJKBigramFilter, ::org::apache::lucene::analysis::TokenFilter, CJKBigramFilter, t_CJKBigramFilter_init_, 0, 0, 0, 0, 0);

          void t_CJKBigramFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(CJKBigramFilter), module, "CJKBigramFilter", 0);
          }

          void t_CJKBigramFilter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(CJKBigramFilter).tp_dict, "class_", make_descriptor(CJKBigramFilter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(CJKBigramFilter).tp_dict, "wrapfn_", make_descriptor(t_CJKBigramFilter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(CJKBigramFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(CJKBigramFilter::initializeClass);
            PyDict_SetItemString(PY_TYPE(CJKBigramFilter).tp_dict, "DOUBLE_TYPE", make_descriptor(j2p(*CJKBigramFilter::DOUBLE_TYPE)));
            PyDict_SetItemString(PY_TYPE(CJKBigramFilter).tp_dict, "HAN", make_descriptor(CJKBigramFilter::HAN));
            PyDict_SetItemString(PY_TYPE(CJKBigramFilter).tp_dict, "HANGUL", make_descriptor(CJKBigramFilter::HANGUL));
            PyDict_SetItemString(PY_TYPE(CJKBigramFilter).tp_dict, "HIRAGANA", make_descriptor(CJKBigramFilter::HIRAGANA));
            PyDict_SetItemString(PY_TYPE(CJKBigramFilter).tp_dict, "KATAKANA", make_descriptor(CJKBigramFilter::KATAKANA));
            PyDict_SetItemString(PY_TYPE(CJKBigramFilter).tp_dict, "SINGLE_TYPE", make_descriptor(j2p(*CJKBigramFilter::SINGLE_TYPE)));
          }

          static PyObject *t_CJKBigramFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, CJKBigramFilter::initializeClass, 1)))
              return NULL;
            return t_CJKBigramFilter::wrap_Object(CJKBigramFilter(((t_CJKBigramFilter *) arg)->object.this$));
          }
          static PyObject *t_CJKBigramFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, CJKBigramFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_CJKBigramFilter_init_(t_CJKBigramFilter *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
                CJKBigramFilter object((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
                {
                  INT_CALL(object = CJKBigramFilter(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 2:
              {
                ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
                jint a1;
                CJKBigramFilter object((jobject) NULL);

                if (!parseArgs(args, "kI", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0, &a1))
                {
                  INT_CALL(object = CJKBigramFilter(a0, a1));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 3:
              {
                ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
                jint a1;
                jboolean a2;
                CJKBigramFilter object((jobject) NULL);

                if (!parseArgs(args, "kIZ", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0, &a1, &a2))
                {
                  INT_CALL(object = CJKBigramFilter(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_CJKBigramFilter_incrementToken(t_CJKBigramFilter *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(CJKBigramFilter), (PyObject *) self, "incrementToken", args, 2);
          }

          static PyObject *t_CJKBigramFilter_reset(t_CJKBigramFilter *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.reset());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(CJKBigramFilter), (PyObject *) self, "reset", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/gl/GalicianAnalyzer.h"
#include "org/apache/lucene/util/Version.h"
#include "java/lang/String.h"
#include "org/apache/lucene/analysis/util/CharArraySet.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace gl {

          ::java::lang::Class *GalicianAnalyzer::class$ = NULL;
          jmethodID *GalicianAnalyzer::mids$ = NULL;
          bool GalicianAnalyzer::live$ = false;
          ::java::lang::String *GalicianAnalyzer::DEFAULT_STOPWORD_FILE = NULL;

          jclass GalicianAnalyzer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/gl/GalicianAnalyzer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_0d96cf33] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;)V");
              mids$[mid_init$_83eafe28] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/analysis/util/CharArraySet;)V");
              mids$[mid_init$_c9d7e4a3] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/analysis/util/CharArraySet;Lorg/apache/lucene/analysis/util/CharArraySet;)V");
              mids$[mid_getDefaultStopSet_d2d3505c] = env->getStaticMethodID(cls, "getDefaultStopSet", "()Lorg/apache/lucene/analysis/util/CharArraySet;");
              mids$[mid_createComponents_1be39cae] = env->getMethodID(cls, "createComponents", "(Ljava/lang/String;Ljava/io/Reader;)Lorg/apache/lucene/analysis/Analyzer$TokenStreamComponents;");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              DEFAULT_STOPWORD_FILE = new ::java::lang::String(env->getStaticObjectField(cls, "DEFAULT_STOPWORD_FILE", "Ljava/lang/String;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          GalicianAnalyzer::GalicianAnalyzer(const ::org::apache::lucene::util::Version & a0) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_0d96cf33, a0.this$)) {}

          GalicianAnalyzer::GalicianAnalyzer(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::analysis::util::CharArraySet & a1) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_83eafe28, a0.this$, a1.this$)) {}

          GalicianAnalyzer::GalicianAnalyzer(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::analysis::util::CharArraySet & a1, const ::org::apache::lucene::analysis::util::CharArraySet & a2) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_c9d7e4a3, a0.this$, a1.this$, a2.this$)) {}

          ::org::apache::lucene::analysis::util::CharArraySet GalicianAnalyzer::getDefaultStopSet()
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::analysis::util::CharArraySet(env->callStaticObjectMethod(cls, mids$[mid_getDefaultStopSet_d2d3505c]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace gl {
          static PyObject *t_GalicianAnalyzer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_GalicianAnalyzer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_GalicianAnalyzer_init_(t_GalicianAnalyzer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_GalicianAnalyzer_getDefaultStopSet(PyTypeObject *type);
          static PyObject *t_GalicianAnalyzer_get__defaultStopSet(t_GalicianAnalyzer *self, void *data);
          static PyGetSetDef t_GalicianAnalyzer__fields_[] = {
            DECLARE_GET_FIELD(t_GalicianAnalyzer, defaultStopSet),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_GalicianAnalyzer__methods_[] = {
            DECLARE_METHOD(t_GalicianAnalyzer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_GalicianAnalyzer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_GalicianAnalyzer, getDefaultStopSet, METH_NOARGS | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(GalicianAnalyzer, t_GalicianAnalyzer, ::org::apache::lucene::analysis::util::StopwordAnalyzerBase, GalicianAnalyzer, t_GalicianAnalyzer_init_, 0, 0, t_GalicianAnalyzer__fields_, 0, 0);

          void t_GalicianAnalyzer::install(PyObject *module)
          {
            installType(&PY_TYPE(GalicianAnalyzer), module, "GalicianAnalyzer", 0);
          }

          void t_GalicianAnalyzer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(GalicianAnalyzer).tp_dict, "class_", make_descriptor(GalicianAnalyzer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(GalicianAnalyzer).tp_dict, "wrapfn_", make_descriptor(t_GalicianAnalyzer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(GalicianAnalyzer).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(GalicianAnalyzer::initializeClass);
            PyDict_SetItemString(PY_TYPE(GalicianAnalyzer).tp_dict, "DEFAULT_STOPWORD_FILE", make_descriptor(j2p(*GalicianAnalyzer::DEFAULT_STOPWORD_FILE)));
          }

          static PyObject *t_GalicianAnalyzer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, GalicianAnalyzer::initializeClass, 1)))
              return NULL;
            return t_GalicianAnalyzer::wrap_Object(GalicianAnalyzer(((t_GalicianAnalyzer *) arg)->object.this$));
          }
          static PyObject *t_GalicianAnalyzer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, GalicianAnalyzer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_GalicianAnalyzer_init_(t_GalicianAnalyzer *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                GalicianAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "K", ::org::apache::lucene::util::Version::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_))
                {
                  INT_CALL(object = GalicianAnalyzer(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 2:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                ::org::apache::lucene::analysis::util::CharArraySet a1((jobject) NULL);
                PyTypeObject **p1;
                GalicianAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "KK", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1, &p1, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_))
                {
                  INT_CALL(object = GalicianAnalyzer(a0, a1));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 3:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                ::org::apache::lucene::analysis::util::CharArraySet a1((jobject) NULL);
                PyTypeObject **p1;
                ::org::apache::lucene::analysis::util::CharArraySet a2((jobject) NULL);
                PyTypeObject **p2;
                GalicianAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "KKK", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1, &p1, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_, &a2, &p2, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_))
                {
                  INT_CALL(object = GalicianAnalyzer(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_GalicianAnalyzer_getDefaultStopSet(PyTypeObject *type)
          {
            ::org::apache::lucene::analysis::util::CharArraySet result((jobject) NULL);
            OBJ_CALL(result = ::org::apache::lucene::analysis::gl::GalicianAnalyzer::getDefaultStopSet());
            return ::org::apache::lucene::analysis::util::t_CharArraySet::wrap_Object(result);
          }

          static PyObject *t_GalicianAnalyzer_get__defaultStopSet(t_GalicianAnalyzer *self, void *data)
          {
            ::org::apache::lucene::analysis::util::CharArraySet value((jobject) NULL);
            OBJ_CALL(value = self->object.getDefaultStopSet());
            return ::org::apache::lucene::analysis::util::t_CharArraySet::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/PositiveScoresOnlyCollector.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/search/Scorer.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *PositiveScoresOnlyCollector::class$ = NULL;
        jmethodID *PositiveScoresOnlyCollector::mids$ = NULL;
        bool PositiveScoresOnlyCollector::live$ = false;

        jclass PositiveScoresOnlyCollector::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/PositiveScoresOnlyCollector");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_77379ce0] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/Collector;)V");
            mids$[mid_acceptsDocsOutOfOrder_54c6a16a] = env->getMethodID(cls, "acceptsDocsOutOfOrder", "()Z");
            mids$[mid_collect_39c7bd3c] = env->getMethodID(cls, "collect", "(I)V");
            mids$[mid_setNextReader_a6f59947] = env->getMethodID(cls, "setNextReader", "(Lorg/apache/lucene/index/AtomicReaderContext;)V");
            mids$[mid_setScorer_8be0880c] = env->getMethodID(cls, "setScorer", "(Lorg/apache/lucene/search/Scorer;)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        PositiveScoresOnlyCollector::PositiveScoresOnlyCollector(const ::org::apache::lucene::search::Collector & a0) : ::org::apache::lucene::search::Collector(env->newObject(initializeClass, &mids$, mid_init$_77379ce0, a0.this$)) {}

        jboolean PositiveScoresOnlyCollector::acceptsDocsOutOfOrder() const
        {
          return env->callBooleanMethod(this$, mids$[mid_acceptsDocsOutOfOrder_54c6a16a]);
        }

        void PositiveScoresOnlyCollector::collect(jint a0) const
        {
          env->callVoidMethod(this$, mids$[mid_collect_39c7bd3c], a0);
        }

        void PositiveScoresOnlyCollector::setNextReader(const ::org::apache::lucene::index::AtomicReaderContext & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setNextReader_a6f59947], a0.this$);
        }

        void PositiveScoresOnlyCollector::setScorer(const ::org::apache::lucene::search::Scorer & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setScorer_8be0880c], a0.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_PositiveScoresOnlyCollector_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_PositiveScoresOnlyCollector_instance_(PyTypeObject *type, PyObject *arg);
        static int t_PositiveScoresOnlyCollector_init_(t_PositiveScoresOnlyCollector *self, PyObject *args, PyObject *kwds);
        static PyObject *t_PositiveScoresOnlyCollector_acceptsDocsOutOfOrder(t_PositiveScoresOnlyCollector *self, PyObject *args);
        static PyObject *t_PositiveScoresOnlyCollector_collect(t_PositiveScoresOnlyCollector *self, PyObject *args);
        static PyObject *t_PositiveScoresOnlyCollector_setNextReader(t_PositiveScoresOnlyCollector *self, PyObject *args);
        static PyObject *t_PositiveScoresOnlyCollector_setScorer(t_PositiveScoresOnlyCollector *self, PyObject *args);
        static int t_PositiveScoresOnlyCollector_set__nextReader(t_PositiveScoresOnlyCollector *self, PyObject *arg, void *data);
        static int t_PositiveScoresOnlyCollector_set__scorer(t_PositiveScoresOnlyCollector *self, PyObject *arg, void *data);
        static PyGetSetDef t_PositiveScoresOnlyCollector__fields_[] = {
          DECLARE_SET_FIELD(t_PositiveScoresOnlyCollector, nextReader),
          DECLARE_SET_FIELD(t_PositiveScoresOnlyCollector, scorer),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_PositiveScoresOnlyCollector__methods_[] = {
          DECLARE_METHOD(t_PositiveScoresOnlyCollector, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PositiveScoresOnlyCollector, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PositiveScoresOnlyCollector, acceptsDocsOutOfOrder, METH_VARARGS),
          DECLARE_METHOD(t_PositiveScoresOnlyCollector, collect, METH_VARARGS),
          DECLARE_METHOD(t_PositiveScoresOnlyCollector, setNextReader, METH_VARARGS),
          DECLARE_METHOD(t_PositiveScoresOnlyCollector, setScorer, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(PositiveScoresOnlyCollector, t_PositiveScoresOnlyCollector, ::org::apache::lucene::search::Collector, PositiveScoresOnlyCollector, t_PositiveScoresOnlyCollector_init_, 0, 0, t_PositiveScoresOnlyCollector__fields_, 0, 0);

        void t_PositiveScoresOnlyCollector::install(PyObject *module)
        {
          installType(&PY_TYPE(PositiveScoresOnlyCollector), module, "PositiveScoresOnlyCollector", 0);
        }

        void t_PositiveScoresOnlyCollector::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(PositiveScoresOnlyCollector).tp_dict, "class_", make_descriptor(PositiveScoresOnlyCollector::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(PositiveScoresOnlyCollector).tp_dict, "wrapfn_", make_descriptor(t_PositiveScoresOnlyCollector::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(PositiveScoresOnlyCollector).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_PositiveScoresOnlyCollector_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, PositiveScoresOnlyCollector::initializeClass, 1)))
            return NULL;
          return t_PositiveScoresOnlyCollector::wrap_Object(PositiveScoresOnlyCollector(((t_PositiveScoresOnlyCollector *) arg)->object.this$));
        }
        static PyObject *t_PositiveScoresOnlyCollector_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, PositiveScoresOnlyCollector::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_PositiveScoresOnlyCollector_init_(t_PositiveScoresOnlyCollector *self, PyObject *args, PyObject *kwds)
        {
          ::org::apache::lucene::search::Collector a0((jobject) NULL);
          PositiveScoresOnlyCollector object((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::search::Collector::initializeClass, &a0))
          {
            INT_CALL(object = PositiveScoresOnlyCollector(a0));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_PositiveScoresOnlyCollector_acceptsDocsOutOfOrder(t_PositiveScoresOnlyCollector *self, PyObject *args)
        {
          jboolean result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.acceptsDocsOutOfOrder());
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(PositiveScoresOnlyCollector), (PyObject *) self, "acceptsDocsOutOfOrder", args, 2);
        }

        static PyObject *t_PositiveScoresOnlyCollector_collect(t_PositiveScoresOnlyCollector *self, PyObject *args)
        {
          jint a0;

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(self->object.collect(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(PositiveScoresOnlyCollector), (PyObject *) self, "collect", args, 2);
        }

        static PyObject *t_PositiveScoresOnlyCollector_setNextReader(t_PositiveScoresOnlyCollector *self, PyObject *args)
        {
          ::org::apache::lucene::index::AtomicReaderContext a0((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &a0))
          {
            OBJ_CALL(self->object.setNextReader(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(PositiveScoresOnlyCollector), (PyObject *) self, "setNextReader", args, 2);
        }

        static PyObject *t_PositiveScoresOnlyCollector_setScorer(t_PositiveScoresOnlyCollector *self, PyObject *args)
        {
          ::org::apache::lucene::search::Scorer a0((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::search::Scorer::initializeClass, &a0))
          {
            OBJ_CALL(self->object.setScorer(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(PositiveScoresOnlyCollector), (PyObject *) self, "setScorer", args, 2);
        }

        static int t_PositiveScoresOnlyCollector_set__nextReader(t_PositiveScoresOnlyCollector *self, PyObject *arg, void *data)
        {
          {
            ::org::apache::lucene::index::AtomicReaderContext value((jobject) NULL);
            if (!parseArg(arg, "k", ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &value))
            {
              INT_CALL(self->object.setNextReader(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "nextReader", arg);
          return -1;
        }

        static int t_PositiveScoresOnlyCollector_set__scorer(t_PositiveScoresOnlyCollector *self, PyObject *arg, void *data)
        {
          {
            ::org::apache::lucene::search::Scorer value((jobject) NULL);
            if (!parseArg(arg, "k", ::org::apache::lucene::search::Scorer::initializeClass, &value))
            {
              INT_CALL(self->object.setScorer(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "scorer", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/store/NIOFSDirectory.h"
#include "java/lang/Class.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/store/IOContext.h"
#include "java/io/File.h"
#include "java/lang/String.h"
#include "org/apache/lucene/store/LockFactory.h"
#include "org/apache/lucene/store/IndexInput.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {

        ::java::lang::Class *NIOFSDirectory::class$ = NULL;
        jmethodID *NIOFSDirectory::mids$ = NULL;
        bool NIOFSDirectory::live$ = false;

        jclass NIOFSDirectory::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/store/NIOFSDirectory");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_c3dacf57] = env->getMethodID(cls, "<init>", "(Ljava/io/File;)V");
            mids$[mid_init$_5f9cf6ef] = env->getMethodID(cls, "<init>", "(Ljava/io/File;Lorg/apache/lucene/store/LockFactory;)V");
            mids$[mid_openInput_3e1b5375] = env->getMethodID(cls, "openInput", "(Ljava/lang/String;Lorg/apache/lucene/store/IOContext;)Lorg/apache/lucene/store/IndexInput;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        NIOFSDirectory::NIOFSDirectory(const ::java::io::File & a0) : ::org::apache::lucene::store::FSDirectory(env->newObject(initializeClass, &mids$, mid_init$_c3dacf57, a0.this$)) {}

        NIOFSDirectory::NIOFSDirectory(const ::java::io::File & a0, const ::org::apache::lucene::store::LockFactory & a1) : ::org::apache::lucene::store::FSDirectory(env->newObject(initializeClass, &mids$, mid_init$_5f9cf6ef, a0.this$, a1.this$)) {}

        ::org::apache::lucene::store::IndexInput NIOFSDirectory::openInput(const ::java::lang::String & a0, const ::org::apache::lucene::store::IOContext & a1) const
        {
          return ::org::apache::lucene::store::IndexInput(env->callObjectMethod(this$, mids$[mid_openInput_3e1b5375], a0.this$, a1.this$));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {
        static PyObject *t_NIOFSDirectory_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_NIOFSDirectory_instance_(PyTypeObject *type, PyObject *arg);
        static int t_NIOFSDirectory_init_(t_NIOFSDirectory *self, PyObject *args, PyObject *kwds);
        static PyObject *t_NIOFSDirectory_openInput(t_NIOFSDirectory *self, PyObject *args);

        static PyMethodDef t_NIOFSDirectory__methods_[] = {
          DECLARE_METHOD(t_NIOFSDirectory, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_NIOFSDirectory, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_NIOFSDirectory, openInput, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(NIOFSDirectory, t_NIOFSDirectory, ::org::apache::lucene::store::FSDirectory, NIOFSDirectory, t_NIOFSDirectory_init_, 0, 0, 0, 0, 0);

        void t_NIOFSDirectory::install(PyObject *module)
        {
          installType(&PY_TYPE(NIOFSDirectory), module, "NIOFSDirectory", 0);
        }

        void t_NIOFSDirectory::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(NIOFSDirectory).tp_dict, "class_", make_descriptor(NIOFSDirectory::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(NIOFSDirectory).tp_dict, "wrapfn_", make_descriptor(t_NIOFSDirectory::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(NIOFSDirectory).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_NIOFSDirectory_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, NIOFSDirectory::initializeClass, 1)))
            return NULL;
          return t_NIOFSDirectory::wrap_Object(NIOFSDirectory(((t_NIOFSDirectory *) arg)->object.this$));
        }
        static PyObject *t_NIOFSDirectory_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, NIOFSDirectory::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_NIOFSDirectory_init_(t_NIOFSDirectory *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              ::java::io::File a0((jobject) NULL);
              NIOFSDirectory object((jobject) NULL);

              if (!parseArgs(args, "k", ::java::io::File::initializeClass, &a0))
              {
                INT_CALL(object = NIOFSDirectory(a0));
                self->object = object;
                break;
              }
            }
            goto err;
           case 2:
            {
              ::java::io::File a0((jobject) NULL);
              ::org::apache::lucene::store::LockFactory a1((jobject) NULL);
              NIOFSDirectory object((jobject) NULL);

              if (!parseArgs(args, "kk", ::java::io::File::initializeClass, ::org::apache::lucene::store::LockFactory::initializeClass, &a0, &a1))
              {
                INT_CALL(object = NIOFSDirectory(a0, a1));
                self->object = object;
                break;
              }
            }
           default:
           err:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_NIOFSDirectory_openInput(t_NIOFSDirectory *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::store::IOContext a1((jobject) NULL);
          ::org::apache::lucene::store::IndexInput result((jobject) NULL);

          if (!parseArgs(args, "sk", ::org::apache::lucene::store::IOContext::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = self->object.openInput(a0, a1));
            return ::org::apache::lucene::store::t_IndexInput::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(NIOFSDirectory), (PyObject *) self, "openInput", args, 2);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/standard/StandardQueryParser.h"
#include "org/apache/lucene/queryparser/flexible/standard/config/StandardQueryConfigHandler$Operator.h"
#include "java/util/TimeZone.h"
#include "org/apache/lucene/queryparser/flexible/standard/config/NumericConfig.h"
#include "org/apache/lucene/document/DateTools$Resolution.h"
#include "java/util/Locale.h"
#include "java/lang/Class.h"
#include "java/util/Map.h"
#include "org/apache/lucene/search/MultiTermQuery$RewriteMethod.h"
#include "java/lang/CharSequence.h"
#include "org/apache/lucene/analysis/Analyzer.h"
#include "java/lang/String.h"
#include "org/apache/lucene/queryparser/flexible/standard/CommonQueryParserConfiguration.h"
#include "org/apache/lucene/queryparser/flexible/core/QueryNodeException.h"
#include "org/apache/lucene/search/Query.h"
#include "java/lang/Float.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {

            ::java::lang::Class *StandardQueryParser::class$ = NULL;
            jmethodID *StandardQueryParser::mids$ = NULL;
            bool StandardQueryParser::live$ = false;

            jclass StandardQueryParser::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/standard/StandardQueryParser");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
                mids$[mid_init$_31619410] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/Analyzer;)V");
                mids$[mid_getAllowLeadingWildcard_54c6a16a] = env->getMethodID(cls, "getAllowLeadingWildcard", "()Z");
                mids$[mid_getAnalyzer_347f60a9] = env->getMethodID(cls, "getAnalyzer", "()Lorg/apache/lucene/analysis/Analyzer;");
                mids$[mid_getDateResolution_e0474751] = env->getMethodID(cls, "getDateResolution", "()Lorg/apache/lucene/document/DateTools$Resolution;");
                mids$[mid_getDateResolutionMap_db60befd] = env->getMethodID(cls, "getDateResolutionMap", "()Ljava/util/Map;");
                mids$[mid_getDefaultOperator_61148a0b] = env->getMethodID(cls, "getDefaultOperator", "()Lorg/apache/lucene/queryparser/flexible/standard/config/StandardQueryConfigHandler$Operator;");
                mids$[mid_getEnablePositionIncrements_54c6a16a] = env->getMethodID(cls, "getEnablePositionIncrements", "()Z");
                mids$[mid_getFieldsBoost_db60befd] = env->getMethodID(cls, "getFieldsBoost", "()Ljava/util/Map;");
                mids$[mid_getFuzzyMinSim_54c6a176] = env->getMethodID(cls, "getFuzzyMinSim", "()F");
                mids$[mid_getFuzzyPrefixLength_54c6a179] = env->getMethodID(cls, "getFuzzyPrefixLength", "()I");
                mids$[mid_getLocale_8bb22876] = env->getMethodID(cls, "getLocale", "()Ljava/util/Locale;");
                mids$[mid_getLowercaseExpandedTerms_54c6a16a] = env->getMethodID(cls, "getLowercaseExpandedTerms", "()Z");
                mids$[mid_getMultiFields_2c0596de] = env->getMethodID(cls, "getMultiFields", "([Ljava/lang/CharSequence;)V");
                mids$[mid_getMultiTermRewriteMethod_8919154b] = env->getMethodID(cls, "getMultiTermRewriteMethod", "()Lorg/apache/lucene/search/MultiTermQuery$RewriteMethod;");
                mids$[mid_getNumericConfigMap_db60befd] = env->getMethodID(cls, "getNumericConfigMap", "()Ljava/util/Map;");
                mids$[mid_getPhraseSlop_54c6a179] = env->getMethodID(cls, "getPhraseSlop", "()I");
                mids$[mid_getTimeZone_6cce40e5] = env->getMethodID(cls, "getTimeZone", "()Ljava/util/TimeZone;");
                mids$[mid_parse_38d6e77e] = env->getMethodID(cls, "parse", "(Ljava/lang/String;Ljava/lang/String;)Lorg/apache/lucene/search/Query;");
                mids$[mid_setAllowLeadingWildcard_bb0c767f] = env->getMethodID(cls, "setAllowLeadingWildcard", "(Z)V");
                mids$[mid_setAnalyzer_31619410] = env->getMethodID(cls, "setAnalyzer", "(Lorg/apache/lucene/analysis/Analyzer;)V");
                mids$[mid_setDateResolution_285c1498] = env->getMethodID(cls, "setDateResolution", "(Lorg/apache/lucene/document/DateTools$Resolution;)V");
                mids$[mid_setDateResolution_4c9e2b1c] = env->getMethodID(cls, "setDateResolution", "(Ljava/util/Map;)V");
                mids$[mid_setDateResolutionMap_4c9e2b1c] = env->getMethodID(cls, "setDateResolutionMap", "(Ljava/util/Map;)V");
                mids$[mid_setDefaultOperator_3de2d36e] = env->getMethodID(cls, "setDefaultOperator", "(Lorg/apache/lucene/queryparser/flexible/standard/config/StandardQueryConfigHandler$Operator;)V");
                mids$[mid_setDefaultPhraseSlop_39c7bd3c] = env->getMethodID(cls, "setDefaultPhraseSlop", "(I)V");
                mids$[mid_setEnablePositionIncrements_bb0c767f] = env->getMethodID(cls, "setEnablePositionIncrements", "(Z)V");
                mids$[mid_setFieldsBoost_4c9e2b1c] = env->getMethodID(cls, "setFieldsBoost", "(Ljava/util/Map;)V");
                mids$[mid_setFuzzyMinSim_06298cab] = env->getMethodID(cls, "setFuzzyMinSim", "(F)V");
                mids$[mid_setFuzzyPrefixLength_39c7bd3c] = env->getMethodID(cls, "setFuzzyPrefixLength", "(I)V");
                mids$[mid_setLocale_56b0e4b3] = env->getMethodID(cls, "setLocale", "(Ljava/util/Locale;)V");
                mids$[mid_setLowercaseExpandedTerms_bb0c767f] = env->getMethodID(cls, "setLowercaseExpandedTerms", "(Z)V");
                mids$[mid_setMultiFields_2c0596de] = env->getMethodID(cls, "setMultiFields", "([Ljava/lang/CharSequence;)V");
                mids$[mid_setMultiTermRewriteMethod_c3c3909e] = env->getMethodID(cls, "setMultiTermRewriteMethod", "(Lorg/apache/lucene/search/MultiTermQuery$RewriteMethod;)V");
                mids$[mid_setNumericConfigMap_4c9e2b1c] = env->getMethodID(cls, "setNumericConfigMap", "(Ljava/util/Map;)V");
                mids$[mid_setPhraseSlop_39c7bd3c] = env->getMethodID(cls, "setPhraseSlop", "(I)V");
                mids$[mid_setTimeZone_f7b32d20] = env->getMethodID(cls, "setTimeZone", "(Ljava/util/TimeZone;)V");
                mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            StandardQueryParser::StandardQueryParser() : ::org::apache::lucene::queryparser::flexible::core::QueryParserHelper(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

            StandardQueryParser::StandardQueryParser(const ::org::apache::lucene::analysis::Analyzer & a0) : ::org::apache::lucene::queryparser::flexible::core::QueryParserHelper(env->newObject(initializeClass, &mids$, mid_init$_31619410, a0.this$)) {}

            jboolean StandardQueryParser::getAllowLeadingWildcard() const
            {
              return env->callBooleanMethod(this$, mids$[mid_getAllowLeadingWildcard_54c6a16a]);
            }

            ::org::apache::lucene::analysis::Analyzer StandardQueryParser::getAnalyzer() const
            {
              return ::org::apache::lucene::analysis::Analyzer(env->callObjectMethod(this$, mids$[mid_getAnalyzer_347f60a9]));
            }

            ::org::apache::lucene::document::DateTools$Resolution StandardQueryParser::getDateResolution() const
            {
              return ::org::apache::lucene::document::DateTools$Resolution(env->callObjectMethod(this$, mids$[mid_getDateResolution_e0474751]));
            }

            ::java::util::Map StandardQueryParser::getDateResolutionMap() const
            {
              return ::java::util::Map(env->callObjectMethod(this$, mids$[mid_getDateResolutionMap_db60befd]));
            }

            ::org::apache::lucene::queryparser::flexible::standard::config::StandardQueryConfigHandler$Operator StandardQueryParser::getDefaultOperator() const
            {
              return ::org::apache::lucene::queryparser::flexible::standard::config::StandardQueryConfigHandler$Operator(env->callObjectMethod(this$, mids$[mid_getDefaultOperator_61148a0b]));
            }

            jboolean StandardQueryParser::getEnablePositionIncrements() const
            {
              return env->callBooleanMethod(this$, mids$[mid_getEnablePositionIncrements_54c6a16a]);
            }

            ::java::util::Map StandardQueryParser::getFieldsBoost() const
            {
              return ::java::util::Map(env->callObjectMethod(this$, mids$[mid_getFieldsBoost_db60befd]));
            }

            jfloat StandardQueryParser::getFuzzyMinSim() const
            {
              return env->callFloatMethod(this$, mids$[mid_getFuzzyMinSim_54c6a176]);
            }

            jint StandardQueryParser::getFuzzyPrefixLength() const
            {
              return env->callIntMethod(this$, mids$[mid_getFuzzyPrefixLength_54c6a179]);
            }

            ::java::util::Locale StandardQueryParser::getLocale() const
            {
              return ::java::util::Locale(env->callObjectMethod(this$, mids$[mid_getLocale_8bb22876]));
            }

            jboolean StandardQueryParser::getLowercaseExpandedTerms() const
            {
              return env->callBooleanMethod(this$, mids$[mid_getLowercaseExpandedTerms_54c6a16a]);
            }

            void StandardQueryParser::getMultiFields(const JArray< ::java::lang::CharSequence > & a0) const
            {
              env->callVoidMethod(this$, mids$[mid_getMultiFields_2c0596de], a0.this$);
            }

            ::org::apache::lucene::search::MultiTermQuery$RewriteMethod StandardQueryParser::getMultiTermRewriteMethod() const
            {
              return ::org::apache::lucene::search::MultiTermQuery$RewriteMethod(env->callObjectMethod(this$, mids$[mid_getMultiTermRewriteMethod_8919154b]));
            }

            ::java::util::Map StandardQueryParser::getNumericConfigMap() const
            {
              return ::java::util::Map(env->callObjectMethod(this$, mids$[mid_getNumericConfigMap_db60befd]));
            }

            jint StandardQueryParser::getPhraseSlop() const
            {
              return env->callIntMethod(this$, mids$[mid_getPhraseSlop_54c6a179]);
            }

            ::java::util::TimeZone StandardQueryParser::getTimeZone() const
            {
              return ::java::util::TimeZone(env->callObjectMethod(this$, mids$[mid_getTimeZone_6cce40e5]));
            }

            ::org::apache::lucene::search::Query StandardQueryParser::parse(const ::java::lang::String & a0, const ::java::lang::String & a1) const
            {
              return ::org::apache::lucene::search::Query(env->callObjectMethod(this$, mids$[mid_parse_38d6e77e], a0.this$, a1.this$));
            }

            void StandardQueryParser::setAllowLeadingWildcard(jboolean a0) const
            {
              env->callVoidMethod(this$, mids$[mid_setAllowLeadingWildcard_bb0c767f], a0);
            }

            void StandardQueryParser::setAnalyzer(const ::org::apache::lucene::analysis::Analyzer & a0) const
            {
              env->callVoidMethod(this$, mids$[mid_setAnalyzer_31619410], a0.this$);
            }

            void StandardQueryParser::setDateResolution(const ::org::apache::lucene::document::DateTools$Resolution & a0) const
            {
              env->callVoidMethod(this$, mids$[mid_setDateResolution_285c1498], a0.this$);
            }

            void StandardQueryParser::setDateResolution(const ::java::util::Map & a0) const
            {
              env->callVoidMethod(this$, mids$[mid_setDateResolution_4c9e2b1c], a0.this$);
            }

            void StandardQueryParser::setDateResolutionMap(const ::java::util::Map & a0) const
            {
              env->callVoidMethod(this$, mids$[mid_setDateResolutionMap_4c9e2b1c], a0.this$);
            }

            void StandardQueryParser::setDefaultOperator(const ::org::apache::lucene::queryparser::flexible::standard::config::StandardQueryConfigHandler$Operator & a0) const
            {
              env->callVoidMethod(this$, mids$[mid_setDefaultOperator_3de2d36e], a0.this$);
            }

            void StandardQueryParser::setDefaultPhraseSlop(jint a0) const
            {
              env->callVoidMethod(this$, mids$[mid_setDefaultPhraseSlop_39c7bd3c], a0);
            }

            void StandardQueryParser::setEnablePositionIncrements(jboolean a0) const
            {
              env->callVoidMethod(this$, mids$[mid_setEnablePositionIncrements_bb0c767f], a0);
            }

            void StandardQueryParser::setFieldsBoost(const ::java::util::Map & a0) const
            {
              env->callVoidMethod(this$, mids$[mid_setFieldsBoost_4c9e2b1c], a0.this$);
            }

            void StandardQueryParser::setFuzzyMinSim(jfloat a0) const
            {
              env->callVoidMethod(this$, mids$[mid_setFuzzyMinSim_06298cab], a0);
            }

            void StandardQueryParser::setFuzzyPrefixLength(jint a0) const
            {
              env->callVoidMethod(this$, mids$[mid_setFuzzyPrefixLength_39c7bd3c], a0);
            }

            void StandardQueryParser::setLocale(const ::java::util::Locale & a0) const
            {
              env->callVoidMethod(this$, mids$[mid_setLocale_56b0e4b3], a0.this$);
            }

            void StandardQueryParser::setLowercaseExpandedTerms(jboolean a0) const
            {
              env->callVoidMethod(this$, mids$[mid_setLowercaseExpandedTerms_bb0c767f], a0);
            }

            void StandardQueryParser::setMultiFields(const JArray< ::java::lang::CharSequence > & a0) const
            {
              env->callVoidMethod(this$, mids$[mid_setMultiFields_2c0596de], a0.this$);
            }

            void StandardQueryParser::setMultiTermRewriteMethod(const ::org::apache::lucene::search::MultiTermQuery$RewriteMethod & a0) const
            {
              env->callVoidMethod(this$, mids$[mid_setMultiTermRewriteMethod_c3c3909e], a0.this$);
            }

            void StandardQueryParser::setNumericConfigMap(const ::java::util::Map & a0) const
            {
              env->callVoidMethod(this$, mids$[mid_setNumericConfigMap_4c9e2b1c], a0.this$);
            }

            void StandardQueryParser::setPhraseSlop(jint a0) const
            {
              env->callVoidMethod(this$, mids$[mid_setPhraseSlop_39c7bd3c], a0);
            }

            void StandardQueryParser::setTimeZone(const ::java::util::TimeZone & a0) const
            {
              env->callVoidMethod(this$, mids$[mid_setTimeZone_f7b32d20], a0.this$);
            }

            ::java::lang::String StandardQueryParser::toString() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            static PyObject *t_StandardQueryParser_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_StandardQueryParser_instance_(PyTypeObject *type, PyObject *arg);
            static int t_StandardQueryParser_init_(t_StandardQueryParser *self, PyObject *args, PyObject *kwds);
            static PyObject *t_StandardQueryParser_getAllowLeadingWildcard(t_StandardQueryParser *self);
            static PyObject *t_StandardQueryParser_getAnalyzer(t_StandardQueryParser *self);
            static PyObject *t_StandardQueryParser_getDateResolution(t_StandardQueryParser *self);
            static PyObject *t_StandardQueryParser_getDateResolutionMap(t_StandardQueryParser *self);
            static PyObject *t_StandardQueryParser_getDefaultOperator(t_StandardQueryParser *self);
            static PyObject *t_StandardQueryParser_getEnablePositionIncrements(t_StandardQueryParser *self);
            static PyObject *t_StandardQueryParser_getFieldsBoost(t_StandardQueryParser *self);
            static PyObject *t_StandardQueryParser_getFuzzyMinSim(t_StandardQueryParser *self);
            static PyObject *t_StandardQueryParser_getFuzzyPrefixLength(t_StandardQueryParser *self);
            static PyObject *t_StandardQueryParser_getLocale(t_StandardQueryParser *self);
            static PyObject *t_StandardQueryParser_getLowercaseExpandedTerms(t_StandardQueryParser *self);
            static PyObject *t_StandardQueryParser_getMultiFields(t_StandardQueryParser *self, PyObject *arg);
            static PyObject *t_StandardQueryParser_getMultiTermRewriteMethod(t_StandardQueryParser *self);
            static PyObject *t_StandardQueryParser_getNumericConfigMap(t_StandardQueryParser *self);
            static PyObject *t_StandardQueryParser_getPhraseSlop(t_StandardQueryParser *self);
            static PyObject *t_StandardQueryParser_getTimeZone(t_StandardQueryParser *self);
            static PyObject *t_StandardQueryParser_parse(t_StandardQueryParser *self, PyObject *args);
            static PyObject *t_StandardQueryParser_setAllowLeadingWildcard(t_StandardQueryParser *self, PyObject *arg);
            static PyObject *t_StandardQueryParser_setAnalyzer(t_StandardQueryParser *self, PyObject *arg);
            static PyObject *t_StandardQueryParser_setDateResolution(t_StandardQueryParser *self, PyObject *args);
            static PyObject *t_StandardQueryParser_setDateResolutionMap(t_StandardQueryParser *self, PyObject *arg);
            static PyObject *t_StandardQueryParser_setDefaultOperator(t_StandardQueryParser *self, PyObject *arg);
            static PyObject *t_StandardQueryParser_setDefaultPhraseSlop(t_StandardQueryParser *self, PyObject *arg);
            static PyObject *t_StandardQueryParser_setEnablePositionIncrements(t_StandardQueryParser *self, PyObject *arg);
            static PyObject *t_StandardQueryParser_setFieldsBoost(t_StandardQueryParser *self, PyObject *arg);
            static PyObject *t_StandardQueryParser_setFuzzyMinSim(t_StandardQueryParser *self, PyObject *arg);
            static PyObject *t_StandardQueryParser_setFuzzyPrefixLength(t_StandardQueryParser *self, PyObject *arg);
            static PyObject *t_StandardQueryParser_setLocale(t_StandardQueryParser *self, PyObject *arg);
            static PyObject *t_StandardQueryParser_setLowercaseExpandedTerms(t_StandardQueryParser *self, PyObject *arg);
            static PyObject *t_StandardQueryParser_setMultiFields(t_StandardQueryParser *self, PyObject *arg);
            static PyObject *t_StandardQueryParser_setMultiTermRewriteMethod(t_StandardQueryParser *self, PyObject *arg);
            static PyObject *t_StandardQueryParser_setNumericConfigMap(t_StandardQueryParser *self, PyObject *arg);
            static PyObject *t_StandardQueryParser_setPhraseSlop(t_StandardQueryParser *self, PyObject *arg);
            static PyObject *t_StandardQueryParser_setTimeZone(t_StandardQueryParser *self, PyObject *arg);
            static PyObject *t_StandardQueryParser_toString(t_StandardQueryParser *self, PyObject *args);
            static PyObject *t_StandardQueryParser_get__allowLeadingWildcard(t_StandardQueryParser *self, void *data);
            static int t_StandardQueryParser_set__allowLeadingWildcard(t_StandardQueryParser *self, PyObject *arg, void *data);
            static PyObject *t_StandardQueryParser_get__analyzer(t_StandardQueryParser *self, void *data);
            static int t_StandardQueryParser_set__analyzer(t_StandardQueryParser *self, PyObject *arg, void *data);
            static PyObject *t_StandardQueryParser_get__dateResolution(t_StandardQueryParser *self, void *data);
            static int t_StandardQueryParser_set__dateResolution(t_StandardQueryParser *self, PyObject *arg, void *data);
            static PyObject *t_StandardQueryParser_get__dateResolutionMap(t_StandardQueryParser *self, void *data);
            static int t_StandardQueryParser_set__dateResolutionMap(t_StandardQueryParser *self, PyObject *arg, void *data);
            static PyObject *t_StandardQueryParser_get__defaultOperator(t_StandardQueryParser *self, void *data);
            static int t_StandardQueryParser_set__defaultOperator(t_StandardQueryParser *self, PyObject *arg, void *data);
            static int t_StandardQueryParser_set__defaultPhraseSlop(t_StandardQueryParser *self, PyObject *arg, void *data);
            static PyObject *t_StandardQueryParser_get__enablePositionIncrements(t_StandardQueryParser *self, void *data);
            static int t_StandardQueryParser_set__enablePositionIncrements(t_StandardQueryParser *self, PyObject *arg, void *data);
            static PyObject *t_StandardQueryParser_get__fieldsBoost(t_StandardQueryParser *self, void *data);
            static int t_StandardQueryParser_set__fieldsBoost(t_StandardQueryParser *self, PyObject *arg, void *data);
            static PyObject *t_StandardQueryParser_get__fuzzyMinSim(t_StandardQueryParser *self, void *data);
            static int t_StandardQueryParser_set__fuzzyMinSim(t_StandardQueryParser *self, PyObject *arg, void *data);
            static PyObject *t_StandardQueryParser_get__fuzzyPrefixLength(t_StandardQueryParser *self, void *data);
            static int t_StandardQueryParser_set__fuzzyPrefixLength(t_StandardQueryParser *self, PyObject *arg, void *data);
            static PyObject *t_StandardQueryParser_get__locale(t_StandardQueryParser *self, void *data);
            static int t_StandardQueryParser_set__locale(t_StandardQueryParser *self, PyObject *arg, void *data);
            static PyObject *t_StandardQueryParser_get__lowercaseExpandedTerms(t_StandardQueryParser *self, void *data);
            static int t_StandardQueryParser_set__lowercaseExpandedTerms(t_StandardQueryParser *self, PyObject *arg, void *data);
            static int t_StandardQueryParser_set__multiFields(t_StandardQueryParser *self, PyObject *arg, void *data);
            static PyObject *t_StandardQueryParser_get__multiTermRewriteMethod(t_StandardQueryParser *self, void *data);
            static int t_StandardQueryParser_set__multiTermRewriteMethod(t_StandardQueryParser *self, PyObject *arg, void *data);
            static PyObject *t_StandardQueryParser_get__numericConfigMap(t_StandardQueryParser *self, void *data);
            static int t_StandardQueryParser_set__numericConfigMap(t_StandardQueryParser *self, PyObject *arg, void *data);
            static PyObject *t_StandardQueryParser_get__phraseSlop(t_StandardQueryParser *self, void *data);
            static int t_StandardQueryParser_set__phraseSlop(t_StandardQueryParser *self, PyObject *arg, void *data);
            static PyObject *t_StandardQueryParser_get__timeZone(t_StandardQueryParser *self, void *data);
            static int t_StandardQueryParser_set__timeZone(t_StandardQueryParser *self, PyObject *arg, void *data);
            static PyGetSetDef t_StandardQueryParser__fields_[] = {
              DECLARE_GETSET_FIELD(t_StandardQueryParser, allowLeadingWildcard),
              DECLARE_GETSET_FIELD(t_StandardQueryParser, analyzer),
              DECLARE_GETSET_FIELD(t_StandardQueryParser, dateResolution),
              DECLARE_GETSET_FIELD(t_StandardQueryParser, dateResolutionMap),
              DECLARE_GETSET_FIELD(t_StandardQueryParser, defaultOperator),
              DECLARE_SET_FIELD(t_StandardQueryParser, defaultPhraseSlop),
              DECLARE_GETSET_FIELD(t_StandardQueryParser, enablePositionIncrements),
              DECLARE_GETSET_FIELD(t_StandardQueryParser, fieldsBoost),
              DECLARE_GETSET_FIELD(t_StandardQueryParser, fuzzyMinSim),
              DECLARE_GETSET_FIELD(t_StandardQueryParser, fuzzyPrefixLength),
              DECLARE_GETSET_FIELD(t_StandardQueryParser, locale),
              DECLARE_GETSET_FIELD(t_StandardQueryParser, lowercaseExpandedTerms),
              DECLARE_SET_FIELD(t_StandardQueryParser, multiFields),
              DECLARE_GETSET_FIELD(t_StandardQueryParser, multiTermRewriteMethod),
              DECLARE_GETSET_FIELD(t_StandardQueryParser, numericConfigMap),
              DECLARE_GETSET_FIELD(t_StandardQueryParser, phraseSlop),
              DECLARE_GETSET_FIELD(t_StandardQueryParser, timeZone),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_StandardQueryParser__methods_[] = {
              DECLARE_METHOD(t_StandardQueryParser, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_StandardQueryParser, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_StandardQueryParser, getAllowLeadingWildcard, METH_NOARGS),
              DECLARE_METHOD(t_StandardQueryParser, getAnalyzer, METH_NOARGS),
              DECLARE_METHOD(t_StandardQueryParser, getDateResolution, METH_NOARGS),
              DECLARE_METHOD(t_StandardQueryParser, getDateResolutionMap, METH_NOARGS),
              DECLARE_METHOD(t_StandardQueryParser, getDefaultOperator, METH_NOARGS),
              DECLARE_METHOD(t_StandardQueryParser, getEnablePositionIncrements, METH_NOARGS),
              DECLARE_METHOD(t_StandardQueryParser, getFieldsBoost, METH_NOARGS),
              DECLARE_METHOD(t_StandardQueryParser, getFuzzyMinSim, METH_NOARGS),
              DECLARE_METHOD(t_StandardQueryParser, getFuzzyPrefixLength, METH_NOARGS),
              DECLARE_METHOD(t_StandardQueryParser, getLocale, METH_NOARGS),
              DECLARE_METHOD(t_StandardQueryParser, getLowercaseExpandedTerms, METH_NOARGS),
              DECLARE_METHOD(t_StandardQueryParser, getMultiFields, METH_O),
              DECLARE_METHOD(t_StandardQueryParser, getMultiTermRewriteMethod, METH_NOARGS),
              DECLARE_METHOD(t_StandardQueryParser, getNumericConfigMap, METH_NOARGS),
              DECLARE_METHOD(t_StandardQueryParser, getPhraseSlop, METH_NOARGS),
              DECLARE_METHOD(t_StandardQueryParser, getTimeZone, METH_NOARGS),
              DECLARE_METHOD(t_StandardQueryParser, parse, METH_VARARGS),
              DECLARE_METHOD(t_StandardQueryParser, setAllowLeadingWildcard, METH_O),
              DECLARE_METHOD(t_StandardQueryParser, setAnalyzer, METH_O),
              DECLARE_METHOD(t_StandardQueryParser, setDateResolution, METH_VARARGS),
              DECLARE_METHOD(t_StandardQueryParser, setDateResolutionMap, METH_O),
              DECLARE_METHOD(t_StandardQueryParser, setDefaultOperator, METH_O),
              DECLARE_METHOD(t_StandardQueryParser, setDefaultPhraseSlop, METH_O),
              DECLARE_METHOD(t_StandardQueryParser, setEnablePositionIncrements, METH_O),
              DECLARE_METHOD(t_StandardQueryParser, setFieldsBoost, METH_O),
              DECLARE_METHOD(t_StandardQueryParser, setFuzzyMinSim, METH_O),
              DECLARE_METHOD(t_StandardQueryParser, setFuzzyPrefixLength, METH_O),
              DECLARE_METHOD(t_StandardQueryParser, setLocale, METH_O),
              DECLARE_METHOD(t_StandardQueryParser, setLowercaseExpandedTerms, METH_O),
              DECLARE_METHOD(t_StandardQueryParser, setMultiFields, METH_O),
              DECLARE_METHOD(t_StandardQueryParser, setMultiTermRewriteMethod, METH_O),
              DECLARE_METHOD(t_StandardQueryParser, setNumericConfigMap, METH_O),
              DECLARE_METHOD(t_StandardQueryParser, setPhraseSlop, METH_O),
              DECLARE_METHOD(t_StandardQueryParser, setTimeZone, METH_O),
              DECLARE_METHOD(t_StandardQueryParser, toString, METH_VARARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(StandardQueryParser, t_StandardQueryParser, ::org::apache::lucene::queryparser::flexible::core::QueryParserHelper, StandardQueryParser, t_StandardQueryParser_init_, 0, 0, t_StandardQueryParser__fields_, 0, 0);

            void t_StandardQueryParser::install(PyObject *module)
            {
              installType(&PY_TYPE(StandardQueryParser), module, "StandardQueryParser", 0);
            }

            void t_StandardQueryParser::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(StandardQueryParser).tp_dict, "class_", make_descriptor(StandardQueryParser::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(StandardQueryParser).tp_dict, "wrapfn_", make_descriptor(t_StandardQueryParser::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(StandardQueryParser).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_StandardQueryParser_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, StandardQueryParser::initializeClass, 1)))
                return NULL;
              return t_StandardQueryParser::wrap_Object(StandardQueryParser(((t_StandardQueryParser *) arg)->object.this$));
            }
            static PyObject *t_StandardQueryParser_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, StandardQueryParser::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_StandardQueryParser_init_(t_StandardQueryParser *self, PyObject *args, PyObject *kwds)
            {
              switch (PyTuple_GET_SIZE(args)) {
               case 0:
                {
                  StandardQueryParser object((jobject) NULL);

                  INT_CALL(object = StandardQueryParser());
                  self->object = object;
                  break;
                }
                goto err;
               case 1:
                {
                  ::org::apache::lucene::analysis::Analyzer a0((jobject) NULL);
                  StandardQueryParser object((jobject) NULL);

                  if (!parseArgs(args, "k", ::org::apache::lucene::analysis::Analyzer::initializeClass, &a0))
                  {
                    INT_CALL(object = StandardQueryParser(a0));
                    self->object = object;
                    break;
                  }
                }
               default:
               err:
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_StandardQueryParser_getAllowLeadingWildcard(t_StandardQueryParser *self)
            {
              jboolean result;
              OBJ_CALL(result = self->object.getAllowLeadingWildcard());
              Py_RETURN_BOOL(result);
            }

            static PyObject *t_StandardQueryParser_getAnalyzer(t_StandardQueryParser *self)
            {
              ::org::apache::lucene::analysis::Analyzer result((jobject) NULL);
              OBJ_CALL(result = self->object.getAnalyzer());
              return ::org::apache::lucene::analysis::t_Analyzer::wrap_Object(result);
            }

            static PyObject *t_StandardQueryParser_getDateResolution(t_StandardQueryParser *self)
            {
              ::org::apache::lucene::document::DateTools$Resolution result((jobject) NULL);
              OBJ_CALL(result = self->object.getDateResolution());
              return ::org::apache::lucene::document::t_DateTools$Resolution::wrap_Object(result);
            }

            static PyObject *t_StandardQueryParser_getDateResolutionMap(t_StandardQueryParser *self)
            {
              ::java::util::Map result((jobject) NULL);
              OBJ_CALL(result = self->object.getDateResolutionMap());
              return ::java::util::t_Map::wrap_Object(result, &::java::lang::PY_TYPE(CharSequence), &::org::apache::lucene::document::PY_TYPE(DateTools$Resolution));
            }

            static PyObject *t_StandardQueryParser_getDefaultOperator(t_StandardQueryParser *self)
            {
              ::org::apache::lucene::queryparser::flexible::standard::config::StandardQueryConfigHandler$Operator result((jobject) NULL);
              OBJ_CALL(result = self->object.getDefaultOperator());
              return ::org::apache::lucene::queryparser::flexible::standard::config::t_StandardQueryConfigHandler$Operator::wrap_Object(result);
            }

            static PyObject *t_StandardQueryParser_getEnablePositionIncrements(t_StandardQueryParser *self)
            {
              jboolean result;
              OBJ_CALL(result = self->object.getEnablePositionIncrements());
              Py_RETURN_BOOL(result);
            }

            static PyObject *t_StandardQueryParser_getFieldsBoost(t_StandardQueryParser *self)
            {
              ::java::util::Map result((jobject) NULL);
              OBJ_CALL(result = self->object.getFieldsBoost());
              return ::java::util::t_Map::wrap_Object(result, &::java::lang::PY_TYPE(String), &::java::lang::PY_TYPE(Float));
            }

            static PyObject *t_StandardQueryParser_getFuzzyMinSim(t_StandardQueryParser *self)
            {
              jfloat result;
              OBJ_CALL(result = self->object.getFuzzyMinSim());
              return PyFloat_FromDouble((double) result);
            }

            static PyObject *t_StandardQueryParser_getFuzzyPrefixLength(t_StandardQueryParser *self)
            {
              jint result;
              OBJ_CALL(result = self->object.getFuzzyPrefixLength());
              return PyInt_FromLong((long) result);
            }

            static PyObject *t_StandardQueryParser_getLocale(t_StandardQueryParser *self)
            {
              ::java::util::Locale result((jobject) NULL);
              OBJ_CALL(result = self->object.getLocale());
              return ::java::util::t_Locale::wrap_Object(result);
            }

            static PyObject *t_StandardQueryParser_getLowercaseExpandedTerms(t_StandardQueryParser *self)
            {
              jboolean result;
              OBJ_CALL(result = self->object.getLowercaseExpandedTerms());
              Py_RETURN_BOOL(result);
            }

            static PyObject *t_StandardQueryParser_getMultiFields(t_StandardQueryParser *self, PyObject *arg)
            {
              JArray< ::java::lang::CharSequence > a0((jobject) NULL);

              if (!parseArg(arg, "[O", &::java::lang::PY_TYPE(CharSequence), &a0))
              {
                OBJ_CALL(self->object.getMultiFields(a0));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "getMultiFields", arg);
              return NULL;
            }

            static PyObject *t_StandardQueryParser_getMultiTermRewriteMethod(t_StandardQueryParser *self)
            {
              ::org::apache::lucene::search::MultiTermQuery$RewriteMethod result((jobject) NULL);
              OBJ_CALL(result = self->object.getMultiTermRewriteMethod());
              return ::org::apache::lucene::search::t_MultiTermQuery$RewriteMethod::wrap_Object(result);
            }

            static PyObject *t_StandardQueryParser_getNumericConfigMap(t_StandardQueryParser *self)
            {
              ::java::util::Map result((jobject) NULL);
              OBJ_CALL(result = self->object.getNumericConfigMap());
              return ::java::util::t_Map::wrap_Object(result, &::java::lang::PY_TYPE(String), &::org::apache::lucene::queryparser::flexible::standard::config::PY_TYPE(NumericConfig));
            }

            static PyObject *t_StandardQueryParser_getPhraseSlop(t_StandardQueryParser *self)
            {
              jint result;
              OBJ_CALL(result = self->object.getPhraseSlop());
              return PyInt_FromLong((long) result);
            }

            static PyObject *t_StandardQueryParser_getTimeZone(t_StandardQueryParser *self)
            {
              ::java::util::TimeZone result((jobject) NULL);
              OBJ_CALL(result = self->object.getTimeZone());
              return ::java::util::t_TimeZone::wrap_Object(result);
            }

            static PyObject *t_StandardQueryParser_parse(t_StandardQueryParser *self, PyObject *args)
            {
              ::java::lang::String a0((jobject) NULL);
              ::java::lang::String a1((jobject) NULL);
              ::org::apache::lucene::search::Query result((jobject) NULL);

              if (!parseArgs(args, "ss", &a0, &a1))
              {
                OBJ_CALL(result = self->object.parse(a0, a1));
                return ::org::apache::lucene::search::t_Query::wrap_Object(result);
              }

              return callSuper(&PY_TYPE(StandardQueryParser), (PyObject *) self, "parse", args, 2);
            }

            static PyObject *t_StandardQueryParser_setAllowLeadingWildcard(t_StandardQueryParser *self, PyObject *arg)
            {
              jboolean a0;

              if (!parseArg(arg, "Z", &a0))
              {
                OBJ_CALL(self->object.setAllowLeadingWildcard(a0));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "setAllowLeadingWildcard", arg);
              return NULL;
            }

            static PyObject *t_StandardQueryParser_setAnalyzer(t_StandardQueryParser *self, PyObject *arg)
            {
              ::org::apache::lucene::analysis::Analyzer a0((jobject) NULL);

              if (!parseArg(arg, "k", ::org::apache::lucene::analysis::Analyzer::initializeClass, &a0))
              {
                OBJ_CALL(self->object.setAnalyzer(a0));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "setAnalyzer", arg);
              return NULL;
            }

            static PyObject *t_StandardQueryParser_setDateResolution(t_StandardQueryParser *self, PyObject *args)
            {
              switch (PyTuple_GET_SIZE(args)) {
               case 1:
                {
                  ::org::apache::lucene::document::DateTools$Resolution a0((jobject) NULL);
                  PyTypeObject **p0;

                  if (!parseArgs(args, "K", ::org::apache::lucene::document::DateTools$Resolution::initializeClass, &a0, &p0, ::org::apache::lucene::document::t_DateTools$Resolution::parameters_))
                  {
                    OBJ_CALL(self->object.setDateResolution(a0));
                    Py_RETURN_NONE;
                  }
                }
                {
                  ::java::util::Map a0((jobject) NULL);
                  PyTypeObject **p0;

                  if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
                  {
                    OBJ_CALL(self->object.setDateResolution(a0));
                    Py_RETURN_NONE;
                  }
                }
              }

              PyErr_SetArgsError((PyObject *) self, "setDateResolution", args);
              return NULL;
            }

            static PyObject *t_StandardQueryParser_setDateResolutionMap(t_StandardQueryParser *self, PyObject *arg)
            {
              ::java::util::Map a0((jobject) NULL);
              PyTypeObject **p0;

              if (!parseArg(arg, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
              {
                OBJ_CALL(self->object.setDateResolutionMap(a0));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "setDateResolutionMap", arg);
              return NULL;
            }

            static PyObject *t_StandardQueryParser_setDefaultOperator(t_StandardQueryParser *self, PyObject *arg)
            {
              ::org::apache::lucene::queryparser::flexible::standard::config::StandardQueryConfigHandler$Operator a0((jobject) NULL);
              PyTypeObject **p0;

              if (!parseArg(arg, "K", ::org::apache::lucene::queryparser::flexible::standard::config::StandardQueryConfigHandler$Operator::initializeClass, &a0, &p0, ::org::apache::lucene::queryparser::flexible::standard::config::t_StandardQueryConfigHandler$Operator::parameters_))
              {
                OBJ_CALL(self->object.setDefaultOperator(a0));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "setDefaultOperator", arg);
              return NULL;
            }

            static PyObject *t_StandardQueryParser_setDefaultPhraseSlop(t_StandardQueryParser *self, PyObject *arg)
            {
              jint a0;

              if (!parseArg(arg, "I", &a0))
              {
                OBJ_CALL(self->object.setDefaultPhraseSlop(a0));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "setDefaultPhraseSlop", arg);
              return NULL;
            }

            static PyObject *t_StandardQueryParser_setEnablePositionIncrements(t_StandardQueryParser *self, PyObject *arg)
            {
              jboolean a0;

              if (!parseArg(arg, "Z", &a0))
              {
                OBJ_CALL(self->object.setEnablePositionIncrements(a0));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "setEnablePositionIncrements", arg);
              return NULL;
            }

            static PyObject *t_StandardQueryParser_setFieldsBoost(t_StandardQueryParser *self, PyObject *arg)
            {
              ::java::util::Map a0((jobject) NULL);
              PyTypeObject **p0;

              if (!parseArg(arg, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
              {
                OBJ_CALL(self->object.setFieldsBoost(a0));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "setFieldsBoost", arg);
              return NULL;
            }

            static PyObject *t_StandardQueryParser_setFuzzyMinSim(t_StandardQueryParser *self, PyObject *arg)
            {
              jfloat a0;

              if (!parseArg(arg, "F", &a0))
              {
                OBJ_CALL(self->object.setFuzzyMinSim(a0));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "setFuzzyMinSim", arg);
              return NULL;
            }

            static PyObject *t_StandardQueryParser_setFuzzyPrefixLength(t_StandardQueryParser *self, PyObject *arg)
            {
              jint a0;

              if (!parseArg(arg, "I", &a0))
              {
                OBJ_CALL(self->object.setFuzzyPrefixLength(a0));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "setFuzzyPrefixLength", arg);
              return NULL;
            }

            static PyObject *t_StandardQueryParser_setLocale(t_StandardQueryParser *self, PyObject *arg)
            {
              ::java::util::Locale a0((jobject) NULL);

              if (!parseArg(arg, "k", ::java::util::Locale::initializeClass, &a0))
              {
                OBJ_CALL(self->object.setLocale(a0));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "setLocale", arg);
              return NULL;
            }

            static PyObject *t_StandardQueryParser_setLowercaseExpandedTerms(t_StandardQueryParser *self, PyObject *arg)
            {
              jboolean a0;

              if (!parseArg(arg, "Z", &a0))
              {
                OBJ_CALL(self->object.setLowercaseExpandedTerms(a0));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "setLowercaseExpandedTerms", arg);
              return NULL;
            }

            static PyObject *t_StandardQueryParser_setMultiFields(t_StandardQueryParser *self, PyObject *arg)
            {
              JArray< ::java::lang::CharSequence > a0((jobject) NULL);

              if (!parseArg(arg, "[O", &::java::lang::PY_TYPE(CharSequence), &a0))
              {
                OBJ_CALL(self->object.setMultiFields(a0));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "setMultiFields", arg);
              return NULL;
            }

            static PyObject *t_StandardQueryParser_setMultiTermRewriteMethod(t_StandardQueryParser *self, PyObject *arg)
            {
              ::org::apache::lucene::search::MultiTermQuery$RewriteMethod a0((jobject) NULL);

              if (!parseArg(arg, "k", ::org::apache::lucene::search::MultiTermQuery$RewriteMethod::initializeClass, &a0))
              {
                OBJ_CALL(self->object.setMultiTermRewriteMethod(a0));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "setMultiTermRewriteMethod", arg);
              return NULL;
            }

            static PyObject *t_StandardQueryParser_setNumericConfigMap(t_StandardQueryParser *self, PyObject *arg)
            {
              ::java::util::Map a0((jobject) NULL);
              PyTypeObject **p0;

              if (!parseArg(arg, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
              {
                OBJ_CALL(self->object.setNumericConfigMap(a0));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "setNumericConfigMap", arg);
              return NULL;
            }

            static PyObject *t_StandardQueryParser_setPhraseSlop(t_StandardQueryParser *self, PyObject *arg)
            {
              jint a0;

              if (!parseArg(arg, "I", &a0))
              {
                OBJ_CALL(self->object.setPhraseSlop(a0));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "setPhraseSlop", arg);
              return NULL;
            }

            static PyObject *t_StandardQueryParser_setTimeZone(t_StandardQueryParser *self, PyObject *arg)
            {
              ::java::util::TimeZone a0((jobject) NULL);

              if (!parseArg(arg, "k", ::java::util::TimeZone::initializeClass, &a0))
              {
                OBJ_CALL(self->object.setTimeZone(a0));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "setTimeZone", arg);
              return NULL;
            }

            static PyObject *t_StandardQueryParser_toString(t_StandardQueryParser *self, PyObject *args)
            {
              ::java::lang::String result((jobject) NULL);

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.toString());
                return j2p(result);
              }

              return callSuper(&PY_TYPE(StandardQueryParser), (PyObject *) self, "toString", args, 2);
            }

            static PyObject *t_StandardQueryParser_get__allowLeadingWildcard(t_StandardQueryParser *self, void *data)
            {
              jboolean value;
              OBJ_CALL(value = self->object.getAllowLeadingWildcard());
              Py_RETURN_BOOL(value);
            }
            static int t_StandardQueryParser_set__allowLeadingWildcard(t_StandardQueryParser *self, PyObject *arg, void *data)
            {
              {
                jboolean value;
                if (!parseArg(arg, "Z", &value))
                {
                  INT_CALL(self->object.setAllowLeadingWildcard(value));
                  return 0;
                }
              }
              PyErr_SetArgsError((PyObject *) self, "allowLeadingWildcard", arg);
              return -1;
            }

            static PyObject *t_StandardQueryParser_get__analyzer(t_StandardQueryParser *self, void *data)
            {
              ::org::apache::lucene::analysis::Analyzer value((jobject) NULL);
              OBJ_CALL(value = self->object.getAnalyzer());
              return ::org::apache::lucene::analysis::t_Analyzer::wrap_Object(value);
            }
            static int t_StandardQueryParser_set__analyzer(t_StandardQueryParser *self, PyObject *arg, void *data)
            {
              {
                ::org::apache::lucene::analysis::Analyzer value((jobject) NULL);
                if (!parseArg(arg, "k", ::org::apache::lucene::analysis::Analyzer::initializeClass, &value))
                {
                  INT_CALL(self->object.setAnalyzer(value));
                  return 0;
                }
              }
              PyErr_SetArgsError((PyObject *) self, "analyzer", arg);
              return -1;
            }

            static PyObject *t_StandardQueryParser_get__dateResolution(t_StandardQueryParser *self, void *data)
            {
              ::org::apache::lucene::document::DateTools$Resolution value((jobject) NULL);
              OBJ_CALL(value = self->object.getDateResolution());
              return ::org::apache::lucene::document::t_DateTools$Resolution::wrap_Object(value);
            }
            static int t_StandardQueryParser_set__dateResolution(t_StandardQueryParser *self, PyObject *arg, void *data)
            {
              {
                ::org::apache::lucene::document::DateTools$Resolution value((jobject) NULL);
                if (!parseArg(arg, "k", ::org::apache::lucene::document::DateTools$Resolution::initializeClass, &value))
                {
                  INT_CALL(self->object.setDateResolution(value));
                  return 0;
                }
              }
              {
                ::java::util::Map value((jobject) NULL);
                if (!parseArg(arg, "k", ::java::util::Map::initializeClass, &value))
                {
                  INT_CALL(self->object.setDateResolution(value));
                  return 0;
                }
              }
              PyErr_SetArgsError((PyObject *) self, "dateResolution", arg);
              return -1;
            }

            static PyObject *t_StandardQueryParser_get__dateResolutionMap(t_StandardQueryParser *self, void *data)
            {
              ::java::util::Map value((jobject) NULL);
              OBJ_CALL(value = self->object.getDateResolutionMap());
              return ::java::util::t_Map::wrap_Object(value);
            }
            static int t_StandardQueryParser_set__dateResolutionMap(t_StandardQueryParser *self, PyObject *arg, void *data)
            {
              {
                ::java::util::Map value((jobject) NULL);
                if (!parseArg(arg, "k", ::java::util::Map::initializeClass, &value))
                {
                  INT_CALL(self->object.setDateResolutionMap(value));
                  return 0;
                }
              }
              PyErr_SetArgsError((PyObject *) self, "dateResolutionMap", arg);
              return -1;
            }

            static PyObject *t_StandardQueryParser_get__defaultOperator(t_StandardQueryParser *self, void *data)
            {
              ::org::apache::lucene::queryparser::flexible::standard::config::StandardQueryConfigHandler$Operator value((jobject) NULL);
              OBJ_CALL(value = self->object.getDefaultOperator());
              return ::org::apache::lucene::queryparser::flexible::standard::config::t_StandardQueryConfigHandler$Operator::wrap_Object(value);
            }
            static int t_StandardQueryParser_set__defaultOperator(t_StandardQueryParser *self, PyObject *arg, void *data)
            {
              {
                ::org::apache::lucene::queryparser::flexible::standard::config::StandardQueryConfigHandler$Operator value((jobject) NULL);
                if (!parseArg(arg, "k", ::org::apache::lucene::queryparser::flexible::standard::config::StandardQueryConfigHandler$Operator::initializeClass, &value))
                {
                  INT_CALL(self->object.setDefaultOperator(value));
                  return 0;
                }
              }
              PyErr_SetArgsError((PyObject *) self, "defaultOperator", arg);
              return -1;
            }

            static int t_StandardQueryParser_set__defaultPhraseSlop(t_StandardQueryParser *self, PyObject *arg, void *data)
            {
              {
                jint value;
                if (!parseArg(arg, "I", &value))
                {
                  INT_CALL(self->object.setDefaultPhraseSlop(value));
                  return 0;
                }
              }
              PyErr_SetArgsError((PyObject *) self, "defaultPhraseSlop", arg);
              return -1;
            }

            static PyObject *t_StandardQueryParser_get__enablePositionIncrements(t_StandardQueryParser *self, void *data)
            {
              jboolean value;
              OBJ_CALL(value = self->object.getEnablePositionIncrements());
              Py_RETURN_BOOL(value);
            }
            static int t_StandardQueryParser_set__enablePositionIncrements(t_StandardQueryParser *self, PyObject *arg, void *data)
            {
              {
                jboolean value;
                if (!parseArg(arg, "Z", &value))
                {
                  INT_CALL(self->object.setEnablePositionIncrements(value));
                  return 0;
                }
              }
              PyErr_SetArgsError((PyObject *) self, "enablePositionIncrements", arg);
              return -1;
            }

            static PyObject *t_StandardQueryParser_get__fieldsBoost(t_StandardQueryParser *self, void *data)
            {
              ::java::util::Map value((jobject) NULL);
              OBJ_CALL(value = self->object.getFieldsBoost());
              return ::java::util::t_Map::wrap_Object(value);
            }
            static int t_StandardQueryParser_set__fieldsBoost(t_StandardQueryParser *self, PyObject *arg, void *data)
            {
              {
                ::java::util::Map value((jobject) NULL);
                if (!parseArg(arg, "k", ::java::util::Map::initializeClass, &value))
                {
                  INT_CALL(self->object.setFieldsBoost(value));
                  return 0;
                }
              }
              PyErr_SetArgsError((PyObject *) self, "fieldsBoost", arg);
              return -1;
            }

            static PyObject *t_StandardQueryParser_get__fuzzyMinSim(t_StandardQueryParser *self, void *data)
            {
              jfloat value;
              OBJ_CALL(value = self->object.getFuzzyMinSim());
              return PyFloat_FromDouble((double) value);
            }
            static int t_StandardQueryParser_set__fuzzyMinSim(t_StandardQueryParser *self, PyObject *arg, void *data)
            {
              {
                jfloat value;
                if (!parseArg(arg, "F", &value))
                {
                  INT_CALL(self->object.setFuzzyMinSim(value));
                  return 0;
                }
              }
              PyErr_SetArgsError((PyObject *) self, "fuzzyMinSim", arg);
              return -1;
            }

            static PyObject *t_StandardQueryParser_get__fuzzyPrefixLength(t_StandardQueryParser *self, void *data)
            {
              jint value;
              OBJ_CALL(value = self->object.getFuzzyPrefixLength());
              return PyInt_FromLong((long) value);
            }
            static int t_StandardQueryParser_set__fuzzyPrefixLength(t_StandardQueryParser *self, PyObject *arg, void *data)
            {
              {
                jint value;
                if (!parseArg(arg, "I", &value))
                {
                  INT_CALL(self->object.setFuzzyPrefixLength(value));
                  return 0;
                }
              }
              PyErr_SetArgsError((PyObject *) self, "fuzzyPrefixLength", arg);
              return -1;
            }

            static PyObject *t_StandardQueryParser_get__locale(t_StandardQueryParser *self, void *data)
            {
              ::java::util::Locale value((jobject) NULL);
              OBJ_CALL(value = self->object.getLocale());
              return ::java::util::t_Locale::wrap_Object(value);
            }
            static int t_StandardQueryParser_set__locale(t_StandardQueryParser *self, PyObject *arg, void *data)
            {
              {
                ::java::util::Locale value((jobject) NULL);
                if (!parseArg(arg, "k", ::java::util::Locale::initializeClass, &value))
                {
                  INT_CALL(self->object.setLocale(value));
                  return 0;
                }
              }
              PyErr_SetArgsError((PyObject *) self, "locale", arg);
              return -1;
            }

            static PyObject *t_StandardQueryParser_get__lowercaseExpandedTerms(t_StandardQueryParser *self, void *data)
            {
              jboolean value;
              OBJ_CALL(value = self->object.getLowercaseExpandedTerms());
              Py_RETURN_BOOL(value);
            }
            static int t_StandardQueryParser_set__lowercaseExpandedTerms(t_StandardQueryParser *self, PyObject *arg, void *data)
            {
              {
                jboolean value;
                if (!parseArg(arg, "Z", &value))
                {
                  INT_CALL(self->object.setLowercaseExpandedTerms(value));
                  return 0;
                }
              }
              PyErr_SetArgsError((PyObject *) self, "lowercaseExpandedTerms", arg);
              return -1;
            }

            static int t_StandardQueryParser_set__multiFields(t_StandardQueryParser *self, PyObject *arg, void *data)
            {
              {
                JArray< ::java::lang::CharSequence > value((jobject) NULL);
                if (!parseArg(arg, "[O", &::java::lang::PY_TYPE(CharSequence), &value))
                {
                  INT_CALL(self->object.setMultiFields(value));
                  return 0;
                }
              }
              PyErr_SetArgsError((PyObject *) self, "multiFields", arg);
              return -1;
            }

            static PyObject *t_StandardQueryParser_get__multiTermRewriteMethod(t_StandardQueryParser *self, void *data)
            {
              ::org::apache::lucene::search::MultiTermQuery$RewriteMethod value((jobject) NULL);
              OBJ_CALL(value = self->object.getMultiTermRewriteMethod());
              return ::org::apache::lucene::search::t_MultiTermQuery$RewriteMethod::wrap_Object(value);
            }
            static int t_StandardQueryParser_set__multiTermRewriteMethod(t_StandardQueryParser *self, PyObject *arg, void *data)
            {
              {
                ::org::apache::lucene::search::MultiTermQuery$RewriteMethod value((jobject) NULL);
                if (!parseArg(arg, "k", ::org::apache::lucene::search::MultiTermQuery$RewriteMethod::initializeClass, &value))
                {
                  INT_CALL(self->object.setMultiTermRewriteMethod(value));
                  return 0;
                }
              }
              PyErr_SetArgsError((PyObject *) self, "multiTermRewriteMethod", arg);
              return -1;
            }

            static PyObject *t_StandardQueryParser_get__numericConfigMap(t_StandardQueryParser *self, void *data)
            {
              ::java::util::Map value((jobject) NULL);
              OBJ_CALL(value = self->object.getNumericConfigMap());
              return ::java::util::t_Map::wrap_Object(value);
            }
            static int t_StandardQueryParser_set__numericConfigMap(t_StandardQueryParser *self, PyObject *arg, void *data)
            {
              {
                ::java::util::Map value((jobject) NULL);
                if (!parseArg(arg, "k", ::java::util::Map::initializeClass, &value))
                {
                  INT_CALL(self->object.setNumericConfigMap(value));
                  return 0;
                }
              }
              PyErr_SetArgsError((PyObject *) self, "numericConfigMap", arg);
              return -1;
            }

            static PyObject *t_StandardQueryParser_get__phraseSlop(t_StandardQueryParser *self, void *data)
            {
              jint value;
              OBJ_CALL(value = self->object.getPhraseSlop());
              return PyInt_FromLong((long) value);
            }
            static int t_StandardQueryParser_set__phraseSlop(t_StandardQueryParser *self, PyObject *arg, void *data)
            {
              {
                jint value;
                if (!parseArg(arg, "I", &value))
                {
                  INT_CALL(self->object.setPhraseSlop(value));
                  return 0;
                }
              }
              PyErr_SetArgsError((PyObject *) self, "phraseSlop", arg);
              return -1;
            }

            static PyObject *t_StandardQueryParser_get__timeZone(t_StandardQueryParser *self, void *data)
            {
              ::java::util::TimeZone value((jobject) NULL);
              OBJ_CALL(value = self->object.getTimeZone());
              return ::java::util::t_TimeZone::wrap_Object(value);
            }
            static int t_StandardQueryParser_set__timeZone(t_StandardQueryParser *self, PyObject *arg, void *data)
            {
              {
                ::java::util::TimeZone value((jobject) NULL);
                if (!parseArg(arg, "k", ::java::util::TimeZone::initializeClass, &value))
                {
                  INT_CALL(self->object.setTimeZone(value));
                  return 0;
                }
              }
              PyErr_SetArgsError((PyObject *) self, "timeZone", arg);
              return -1;
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/egothor/stemmer/Reduce.h"
#include "org/egothor/stemmer/Trie.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace egothor {
    namespace stemmer {

      ::java::lang::Class *Reduce::class$ = NULL;
      jmethodID *Reduce::mids$ = NULL;
      bool Reduce::live$ = false;

      jclass Reduce::initializeClass(bool getOnly)
      {
        if (getOnly)
          return (jclass) (live$ ? class$->this$ : NULL);
        if (class$ == NULL)
        {
          jclass cls = (jclass) env->findClass("org/egothor/stemmer/Reduce");

          mids$ = new jmethodID[max_mid];
          mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
          mids$[mid_optimize_c26c0475] = env->getMethodID(cls, "optimize", "(Lorg/egothor/stemmer/Trie;)Lorg/egothor/stemmer/Trie;");

          class$ = (::java::lang::Class *) new JObject(cls);
          live$ = true;
        }
        return (jclass) class$->this$;
      }

      Reduce::Reduce() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

      ::org::egothor::stemmer::Trie Reduce::optimize(const ::org::egothor::stemmer::Trie & a0) const
      {
        return ::org::egothor::stemmer::Trie(env->callObjectMethod(this$, mids$[mid_optimize_c26c0475], a0.this$));
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace egothor {
    namespace stemmer {
      static PyObject *t_Reduce_cast_(PyTypeObject *type, PyObject *arg);
      static PyObject *t_Reduce_instance_(PyTypeObject *type, PyObject *arg);
      static int t_Reduce_init_(t_Reduce *self, PyObject *args, PyObject *kwds);
      static PyObject *t_Reduce_optimize(t_Reduce *self, PyObject *arg);

      static PyMethodDef t_Reduce__methods_[] = {
        DECLARE_METHOD(t_Reduce, cast_, METH_O | METH_CLASS),
        DECLARE_METHOD(t_Reduce, instance_, METH_O | METH_CLASS),
        DECLARE_METHOD(t_Reduce, optimize, METH_O),
        { NULL, NULL, 0, NULL }
      };

      DECLARE_TYPE(Reduce, t_Reduce, ::java::lang::Object, Reduce, t_Reduce_init_, 0, 0, 0, 0, 0);

      void t_Reduce::install(PyObject *module)
      {
        installType(&PY_TYPE(Reduce), module, "Reduce", 0);
      }

      void t_Reduce::initialize(PyObject *module)
      {
        PyDict_SetItemString(PY_TYPE(Reduce).tp_dict, "class_", make_descriptor(Reduce::initializeClass, 1));
        PyDict_SetItemString(PY_TYPE(Reduce).tp_dict, "wrapfn_", make_descriptor(t_Reduce::wrap_jobject));
        PyDict_SetItemString(PY_TYPE(Reduce).tp_dict, "boxfn_", make_descriptor(boxObject));
      }

      static PyObject *t_Reduce_cast_(PyTypeObject *type, PyObject *arg)
      {
        if (!(arg = castCheck(arg, Reduce::initializeClass, 1)))
          return NULL;
        return t_Reduce::wrap_Object(Reduce(((t_Reduce *) arg)->object.this$));
      }
      static PyObject *t_Reduce_instance_(PyTypeObject *type, PyObject *arg)
      {
        if (!castCheck(arg, Reduce::initializeClass, 0))
          Py_RETURN_FALSE;
        Py_RETURN_TRUE;
      }

      static int t_Reduce_init_(t_Reduce *self, PyObject *args, PyObject *kwds)
      {
        Reduce object((jobject) NULL);

        INT_CALL(object = Reduce());
        self->object = object;

        return 0;
      }

      static PyObject *t_Reduce_optimize(t_Reduce *self, PyObject *arg)
      {
        ::org::egothor::stemmer::Trie a0((jobject) NULL);
        ::org::egothor::stemmer::Trie result((jobject) NULL);

        if (!parseArg(arg, "k", ::org::egothor::stemmer::Trie::initializeClass, &a0))
        {
          OBJ_CALL(result = self->object.optimize(a0));
          return ::org::egothor::stemmer::t_Trie::wrap_Object(result);
        }

        PyErr_SetArgsError((PyObject *) self, "optimize", arg);
        return NULL;
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/MultiDocsAndPositionsEnum$EnumWithSlice.h"
#include "org/apache/lucene/index/ReaderSlice.h"
#include "java/lang/String.h"
#include "org/apache/lucene/index/DocsAndPositionsEnum.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *MultiDocsAndPositionsEnum$EnumWithSlice::class$ = NULL;
        jmethodID *MultiDocsAndPositionsEnum$EnumWithSlice::mids$ = NULL;
        jfieldID *MultiDocsAndPositionsEnum$EnumWithSlice::fids$ = NULL;
        bool MultiDocsAndPositionsEnum$EnumWithSlice::live$ = false;

        jclass MultiDocsAndPositionsEnum$EnumWithSlice::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/MultiDocsAndPositionsEnum$EnumWithSlice");

            mids$ = new jmethodID[max_mid];
            mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

            fids$ = new jfieldID[max_fid];
            fids$[fid_docsAndPositionsEnum] = env->getFieldID(cls, "docsAndPositionsEnum", "Lorg/apache/lucene/index/DocsAndPositionsEnum;");
            fids$[fid_slice] = env->getFieldID(cls, "slice", "Lorg/apache/lucene/index/ReaderSlice;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        ::java::lang::String MultiDocsAndPositionsEnum$EnumWithSlice::toString() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
        }

        ::org::apache::lucene::index::DocsAndPositionsEnum MultiDocsAndPositionsEnum$EnumWithSlice::_get_docsAndPositionsEnum() const
        {
          return ::org::apache::lucene::index::DocsAndPositionsEnum(env->getObjectField(this$, fids$[fid_docsAndPositionsEnum]));
        }

        void MultiDocsAndPositionsEnum$EnumWithSlice::_set_docsAndPositionsEnum(const ::org::apache::lucene::index::DocsAndPositionsEnum & a0) const
        {
          env->setObjectField(this$, fids$[fid_docsAndPositionsEnum], a0.this$);
        }

        ::org::apache::lucene::index::ReaderSlice MultiDocsAndPositionsEnum$EnumWithSlice::_get_slice() const
        {
          return ::org::apache::lucene::index::ReaderSlice(env->getObjectField(this$, fids$[fid_slice]));
        }

        void MultiDocsAndPositionsEnum$EnumWithSlice::_set_slice(const ::org::apache::lucene::index::ReaderSlice & a0) const
        {
          env->setObjectField(this$, fids$[fid_slice], a0.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_MultiDocsAndPositionsEnum$EnumWithSlice_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_MultiDocsAndPositionsEnum$EnumWithSlice_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_MultiDocsAndPositionsEnum$EnumWithSlice_toString(t_MultiDocsAndPositionsEnum$EnumWithSlice *self, PyObject *args);
        static PyObject *t_MultiDocsAndPositionsEnum$EnumWithSlice_get__docsAndPositionsEnum(t_MultiDocsAndPositionsEnum$EnumWithSlice *self, void *data);
        static int t_MultiDocsAndPositionsEnum$EnumWithSlice_set__docsAndPositionsEnum(t_MultiDocsAndPositionsEnum$EnumWithSlice *self, PyObject *arg, void *data);
        static PyObject *t_MultiDocsAndPositionsEnum$EnumWithSlice_get__slice(t_MultiDocsAndPositionsEnum$EnumWithSlice *self, void *data);
        static int t_MultiDocsAndPositionsEnum$EnumWithSlice_set__slice(t_MultiDocsAndPositionsEnum$EnumWithSlice *self, PyObject *arg, void *data);

        static PyGetSetDef t_MultiDocsAndPositionsEnum$EnumWithSlice__fields_[] = {
          DECLARE_GETSET_FIELD(t_MultiDocsAndPositionsEnum$EnumWithSlice, docsAndPositionsEnum),
          DECLARE_GETSET_FIELD(t_MultiDocsAndPositionsEnum$EnumWithSlice, slice),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_MultiDocsAndPositionsEnum$EnumWithSlice__methods_[] = {
          DECLARE_METHOD(t_MultiDocsAndPositionsEnum$EnumWithSlice, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MultiDocsAndPositionsEnum$EnumWithSlice, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MultiDocsAndPositionsEnum$EnumWithSlice, toString, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(MultiDocsAndPositionsEnum$EnumWithSlice, t_MultiDocsAndPositionsEnum$EnumWithSlice, ::java::lang::Object, MultiDocsAndPositionsEnum$EnumWithSlice, abstract_init, 0, 0, t_MultiDocsAndPositionsEnum$EnumWithSlice__fields_, 0, 0);

        void t_MultiDocsAndPositionsEnum$EnumWithSlice::install(PyObject *module)
        {
          installType(&PY_TYPE(MultiDocsAndPositionsEnum$EnumWithSlice), module, "MultiDocsAndPositionsEnum$EnumWithSlice", 0);
        }

        void t_MultiDocsAndPositionsEnum$EnumWithSlice::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(MultiDocsAndPositionsEnum$EnumWithSlice).tp_dict, "class_", make_descriptor(MultiDocsAndPositionsEnum$EnumWithSlice::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(MultiDocsAndPositionsEnum$EnumWithSlice).tp_dict, "wrapfn_", make_descriptor(t_MultiDocsAndPositionsEnum$EnumWithSlice::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(MultiDocsAndPositionsEnum$EnumWithSlice).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_MultiDocsAndPositionsEnum$EnumWithSlice_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, MultiDocsAndPositionsEnum$EnumWithSlice::initializeClass, 1)))
            return NULL;
          return t_MultiDocsAndPositionsEnum$EnumWithSlice::wrap_Object(MultiDocsAndPositionsEnum$EnumWithSlice(((t_MultiDocsAndPositionsEnum$EnumWithSlice *) arg)->object.this$));
        }
        static PyObject *t_MultiDocsAndPositionsEnum$EnumWithSlice_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, MultiDocsAndPositionsEnum$EnumWithSlice::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_MultiDocsAndPositionsEnum$EnumWithSlice_toString(t_MultiDocsAndPositionsEnum$EnumWithSlice *self, PyObject *args)
        {
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.toString());
            return j2p(result);
          }

          return callSuper(&PY_TYPE(MultiDocsAndPositionsEnum$EnumWithSlice), (PyObject *) self, "toString", args, 2);
        }

        static PyObject *t_MultiDocsAndPositionsEnum$EnumWithSlice_get__docsAndPositionsEnum(t_MultiDocsAndPositionsEnum$EnumWithSlice *self, void *data)
        {
          ::org::apache::lucene::index::DocsAndPositionsEnum value((jobject) NULL);
          OBJ_CALL(value = self->object._get_docsAndPositionsEnum());
          return ::org::apache::lucene::index::t_DocsAndPositionsEnum::wrap_Object(value);
        }
        static int t_MultiDocsAndPositionsEnum$EnumWithSlice_set__docsAndPositionsEnum(t_MultiDocsAndPositionsEnum$EnumWithSlice *self, PyObject *arg, void *data)
        {
          ::org::apache::lucene::index::DocsAndPositionsEnum value((jobject) NULL);
          if (!parseArg(arg, "k", ::org::apache::lucene::index::DocsAndPositionsEnum::initializeClass, &value))
          {
            INT_CALL(self->object._set_docsAndPositionsEnum(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "docsAndPositionsEnum", arg);
          return -1;
        }

        static PyObject *t_MultiDocsAndPositionsEnum$EnumWithSlice_get__slice(t_MultiDocsAndPositionsEnum$EnumWithSlice *self, void *data)
        {
          ::org::apache::lucene::index::ReaderSlice value((jobject) NULL);
          OBJ_CALL(value = self->object._get_slice());
          return ::org::apache::lucene::index::t_ReaderSlice::wrap_Object(value);
        }
        static int t_MultiDocsAndPositionsEnum$EnumWithSlice_set__slice(t_MultiDocsAndPositionsEnum$EnumWithSlice *self, PyObject *arg, void *data)
        {
          ::org::apache::lucene::index::ReaderSlice value((jobject) NULL);
          if (!parseArg(arg, "k", ::org::apache::lucene::index::ReaderSlice::initializeClass, &value))
          {
            INT_CALL(self->object._set_slice(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "slice", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/fst/Util$TopNSearcher.h"
#include "org/apache/lucene/util/IntsRef.h"
#include "java/lang/Class.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/util/fst/FST.h"
#include "java/util/Comparator.h"
#include "org/apache/lucene/util/fst/FST$Arc.h"
#include "org/apache/lucene/util/fst/Util$TopResults.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace fst {

          ::java::lang::Class *Util$TopNSearcher::class$ = NULL;
          jmethodID *Util$TopNSearcher::mids$ = NULL;
          bool Util$TopNSearcher::live$ = false;

          jclass Util$TopNSearcher::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/util/fst/Util$TopNSearcher");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_95a8ae3f] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/fst/FST;IILjava/util/Comparator;)V");
              mids$[mid_addStartPaths_9e8aa683] = env->getMethodID(cls, "addStartPaths", "(Lorg/apache/lucene/util/fst/FST$Arc;Ljava/lang/Object;ZLorg/apache/lucene/util/IntsRef;)V");
              mids$[mid_search_c06b4353] = env->getMethodID(cls, "search", "()Lorg/apache/lucene/util/fst/Util$TopResults;");
              mids$[mid_acceptResult_5219743c] = env->getMethodID(cls, "acceptResult", "(Lorg/apache/lucene/util/IntsRef;Ljava/lang/Object;)Z");
              mids$[mid_addIfCompetitive_175f8fc8] = env->getMethodID(cls, "addIfCompetitive", "(Lorg/apache/lucene/util/fst/Util$FSTPath;)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          Util$TopNSearcher::Util$TopNSearcher(const ::org::apache::lucene::util::fst::FST & a0, jint a1, jint a2, const ::java::util::Comparator & a3) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_95a8ae3f, a0.this$, a1, a2, a3.this$)) {}

          void Util$TopNSearcher::addStartPaths(const ::org::apache::lucene::util::fst::FST$Arc & a0, const ::java::lang::Object & a1, jboolean a2, const ::org::apache::lucene::util::IntsRef & a3) const
          {
            env->callVoidMethod(this$, mids$[mid_addStartPaths_9e8aa683], a0.this$, a1.this$, a2, a3.this$);
          }

          ::org::apache::lucene::util::fst::Util$TopResults Util$TopNSearcher::search() const
          {
            return ::org::apache::lucene::util::fst::Util$TopResults(env->callObjectMethod(this$, mids$[mid_search_c06b4353]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace fst {
          static PyObject *t_Util$TopNSearcher_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Util$TopNSearcher_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Util$TopNSearcher_of_(t_Util$TopNSearcher *self, PyObject *args);
          static int t_Util$TopNSearcher_init_(t_Util$TopNSearcher *self, PyObject *args, PyObject *kwds);
          static PyObject *t_Util$TopNSearcher_addStartPaths(t_Util$TopNSearcher *self, PyObject *args);
          static PyObject *t_Util$TopNSearcher_search(t_Util$TopNSearcher *self);
          static PyObject *t_Util$TopNSearcher_get__parameters_(t_Util$TopNSearcher *self, void *data);
          static PyGetSetDef t_Util$TopNSearcher__fields_[] = {
            DECLARE_GET_FIELD(t_Util$TopNSearcher, parameters_),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_Util$TopNSearcher__methods_[] = {
            DECLARE_METHOD(t_Util$TopNSearcher, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Util$TopNSearcher, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Util$TopNSearcher, of_, METH_VARARGS),
            DECLARE_METHOD(t_Util$TopNSearcher, addStartPaths, METH_VARARGS),
            DECLARE_METHOD(t_Util$TopNSearcher, search, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(Util$TopNSearcher, t_Util$TopNSearcher, ::java::lang::Object, Util$TopNSearcher, t_Util$TopNSearcher_init_, 0, 0, t_Util$TopNSearcher__fields_, 0, 0);
          PyObject *t_Util$TopNSearcher::wrap_Object(const Util$TopNSearcher& object, PyTypeObject *p0)
          {
            PyObject *obj = t_Util$TopNSearcher::wrap_Object(object);
            if (obj != NULL && obj != Py_None)
            {
              t_Util$TopNSearcher *self = (t_Util$TopNSearcher *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          PyObject *t_Util$TopNSearcher::wrap_jobject(const jobject& object, PyTypeObject *p0)
          {
            PyObject *obj = t_Util$TopNSearcher::wrap_jobject(object);
            if (obj != NULL && obj != Py_None)
            {
              t_Util$TopNSearcher *self = (t_Util$TopNSearcher *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          void t_Util$TopNSearcher::install(PyObject *module)
          {
            installType(&PY_TYPE(Util$TopNSearcher), module, "Util$TopNSearcher", 0);
          }

          void t_Util$TopNSearcher::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(Util$TopNSearcher).tp_dict, "class_", make_descriptor(Util$TopNSearcher::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(Util$TopNSearcher).tp_dict, "wrapfn_", make_descriptor(t_Util$TopNSearcher::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(Util$TopNSearcher).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_Util$TopNSearcher_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, Util$TopNSearcher::initializeClass, 1)))
              return NULL;
            return t_Util$TopNSearcher::wrap_Object(Util$TopNSearcher(((t_Util$TopNSearcher *) arg)->object.this$));
          }
          static PyObject *t_Util$TopNSearcher_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, Util$TopNSearcher::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_Util$TopNSearcher_of_(t_Util$TopNSearcher *self, PyObject *args)
          {
            if (!parseArg(args, "T", 1, &(self->parameters)))
              Py_RETURN_SELF;
            return PyErr_SetArgsError((PyObject *) self, "of_", args);
          }

          static int t_Util$TopNSearcher_init_(t_Util$TopNSearcher *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::util::fst::FST a0((jobject) NULL);
            PyTypeObject **p0;
            jint a1;
            jint a2;
            ::java::util::Comparator a3((jobject) NULL);
            PyTypeObject **p3;
            Util$TopNSearcher object((jobject) NULL);

            if (!parseArgs(args, "KIIK", ::org::apache::lucene::util::fst::FST::initializeClass, ::java::util::Comparator::initializeClass, &a0, &p0, ::org::apache::lucene::util::fst::t_FST::parameters_, &a1, &a2, &a3, &p3, ::java::util::t_Comparator::parameters_))
            {
              INT_CALL(object = Util$TopNSearcher(a0, a1, a2, a3));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_Util$TopNSearcher_addStartPaths(t_Util$TopNSearcher *self, PyObject *args)
          {
            ::org::apache::lucene::util::fst::FST$Arc a0((jobject) NULL);
            PyTypeObject **p0;
            ::java::lang::Object a1((jobject) NULL);
            jboolean a2;
            ::org::apache::lucene::util::IntsRef a3((jobject) NULL);

            if (!parseArgs(args, "KOZk", ::org::apache::lucene::util::fst::FST$Arc::initializeClass, self->parameters[0], ::org::apache::lucene::util::IntsRef::initializeClass, &a0, &p0, ::org::apache::lucene::util::fst::t_FST$Arc::parameters_, &a1, &a2, &a3))
            {
              OBJ_CALL(self->object.addStartPaths(a0, a1, a2, a3));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "addStartPaths", args);
            return NULL;
          }

          static PyObject *t_Util$TopNSearcher_search(t_Util$TopNSearcher *self)
          {
            ::org::apache::lucene::util::fst::Util$TopResults result((jobject) NULL);
            OBJ_CALL(result = self->object.search());
            return ::org::apache::lucene::util::fst::t_Util$TopResults::wrap_Object(result, self->parameters[0]);
          }
          static PyObject *t_Util$TopNSearcher_get__parameters_(t_Util$TopNSearcher *self, void *data)
          {
            return typeParameters(self->parameters, sizeof(self->parameters));
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/RegexpQuery.h"
#include "org/apache/lucene/util/automaton/AutomatonProvider.h"
#include "org/apache/lucene/index/Term.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *RegexpQuery::class$ = NULL;
        jmethodID *RegexpQuery::mids$ = NULL;
        bool RegexpQuery::live$ = false;

        jclass RegexpQuery::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/RegexpQuery");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_7eca6a81] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/Term;)V");
            mids$[mid_init$_05555589] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/Term;I)V");
            mids$[mid_init$_66cf96d2] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/Term;ILorg/apache/lucene/util/automaton/AutomatonProvider;)V");
            mids$[mid_toString_97a5258f] = env->getMethodID(cls, "toString", "(Ljava/lang/String;)Ljava/lang/String;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        RegexpQuery::RegexpQuery(const ::org::apache::lucene::index::Term & a0) : ::org::apache::lucene::search::AutomatonQuery(env->newObject(initializeClass, &mids$, mid_init$_7eca6a81, a0.this$)) {}

        RegexpQuery::RegexpQuery(const ::org::apache::lucene::index::Term & a0, jint a1) : ::org::apache::lucene::search::AutomatonQuery(env->newObject(initializeClass, &mids$, mid_init$_05555589, a0.this$, a1)) {}

        RegexpQuery::RegexpQuery(const ::org::apache::lucene::index::Term & a0, jint a1, const ::org::apache::lucene::util::automaton::AutomatonProvider & a2) : ::org::apache::lucene::search::AutomatonQuery(env->newObject(initializeClass, &mids$, mid_init$_66cf96d2, a0.this$, a1, a2.this$)) {}

        ::java::lang::String RegexpQuery::toString(const ::java::lang::String & a0) const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_97a5258f], a0.this$));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_RegexpQuery_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_RegexpQuery_instance_(PyTypeObject *type, PyObject *arg);
        static int t_RegexpQuery_init_(t_RegexpQuery *self, PyObject *args, PyObject *kwds);
        static PyObject *t_RegexpQuery_toString(t_RegexpQuery *self, PyObject *args);

        static PyMethodDef t_RegexpQuery__methods_[] = {
          DECLARE_METHOD(t_RegexpQuery, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_RegexpQuery, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_RegexpQuery, toString, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(RegexpQuery, t_RegexpQuery, ::org::apache::lucene::search::AutomatonQuery, RegexpQuery, t_RegexpQuery_init_, 0, 0, 0, 0, 0);

        void t_RegexpQuery::install(PyObject *module)
        {
          installType(&PY_TYPE(RegexpQuery), module, "RegexpQuery", 0);
        }

        void t_RegexpQuery::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(RegexpQuery).tp_dict, "class_", make_descriptor(RegexpQuery::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(RegexpQuery).tp_dict, "wrapfn_", make_descriptor(t_RegexpQuery::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(RegexpQuery).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_RegexpQuery_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, RegexpQuery::initializeClass, 1)))
            return NULL;
          return t_RegexpQuery::wrap_Object(RegexpQuery(((t_RegexpQuery *) arg)->object.this$));
        }
        static PyObject *t_RegexpQuery_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, RegexpQuery::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_RegexpQuery_init_(t_RegexpQuery *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              ::org::apache::lucene::index::Term a0((jobject) NULL);
              RegexpQuery object((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::index::Term::initializeClass, &a0))
              {
                INT_CALL(object = RegexpQuery(a0));
                self->object = object;
                break;
              }
            }
            goto err;
           case 2:
            {
              ::org::apache::lucene::index::Term a0((jobject) NULL);
              jint a1;
              RegexpQuery object((jobject) NULL);

              if (!parseArgs(args, "kI", ::org::apache::lucene::index::Term::initializeClass, &a0, &a1))
              {
                INT_CALL(object = RegexpQuery(a0, a1));
                self->object = object;
                break;
              }
            }
            goto err;
           case 3:
            {
              ::org::apache::lucene::index::Term a0((jobject) NULL);
              jint a1;
              ::org::apache::lucene::util::automaton::AutomatonProvider a2((jobject) NULL);
              RegexpQuery object((jobject) NULL);

              if (!parseArgs(args, "kIk", ::org::apache::lucene::index::Term::initializeClass, ::org::apache::lucene::util::automaton::AutomatonProvider::initializeClass, &a0, &a1, &a2))
              {
                INT_CALL(object = RegexpQuery(a0, a1, a2));
                self->object = object;
                break;
              }
            }
           default:
           err:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_RegexpQuery_toString(t_RegexpQuery *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = self->object.toString(a0));
            return j2p(result);
          }

          return callSuper(&PY_TYPE(RegexpQuery), (PyObject *) self, "toString", args, 2);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/ext/Extensions.h"
#include "org/apache/lucene/queryparser/ext/Extensions$Pair.h"
#include "org/apache/lucene/queryparser/ext/ParserExtension.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace ext {

          ::java::lang::Class *Extensions::class$ = NULL;
          jmethodID *Extensions::mids$ = NULL;
          bool Extensions::live$ = false;
          jchar Extensions::DEFAULT_EXTENSION_FIELD_DELIMITER = (jchar) 0;

          jclass Extensions::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/ext/Extensions");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_init$_87fd545a] = env->getMethodID(cls, "<init>", "(C)V");
              mids$[mid_add_d7d984b9] = env->getMethodID(cls, "add", "(Ljava/lang/String;Lorg/apache/lucene/queryparser/ext/ParserExtension;)V");
              mids$[mid_buildExtensionField_97a5258f] = env->getMethodID(cls, "buildExtensionField", "(Ljava/lang/String;)Ljava/lang/String;");
              mids$[mid_buildExtensionField_aacea7e9] = env->getMethodID(cls, "buildExtensionField", "(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;");
              mids$[mid_escapeExtensionField_97a5258f] = env->getMethodID(cls, "escapeExtensionField", "(Ljava/lang/String;)Ljava/lang/String;");
              mids$[mid_getExtension_a8956118] = env->getMethodID(cls, "getExtension", "(Ljava/lang/String;)Lorg/apache/lucene/queryparser/ext/ParserExtension;");
              mids$[mid_getExtensionFieldDelimiter_54c6a173] = env->getMethodID(cls, "getExtensionFieldDelimiter", "()C");
              mids$[mid_splitExtensionField_7a9e9194] = env->getMethodID(cls, "splitExtensionField", "(Ljava/lang/String;Ljava/lang/String;)Lorg/apache/lucene/queryparser/ext/Extensions$Pair;");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              DEFAULT_EXTENSION_FIELD_DELIMITER = env->getStaticCharField(cls, "DEFAULT_EXTENSION_FIELD_DELIMITER");
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          Extensions::Extensions() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          Extensions::Extensions(jchar a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_87fd545a, a0)) {}

          void Extensions::add(const ::java::lang::String & a0, const ::org::apache::lucene::queryparser::ext::ParserExtension & a1) const
          {
            env->callVoidMethod(this$, mids$[mid_add_d7d984b9], a0.this$, a1.this$);
          }

          ::java::lang::String Extensions::buildExtensionField(const ::java::lang::String & a0) const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_buildExtensionField_97a5258f], a0.this$));
          }

          ::java::lang::String Extensions::buildExtensionField(const ::java::lang::String & a0, const ::java::lang::String & a1) const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_buildExtensionField_aacea7e9], a0.this$, a1.this$));
          }

          ::java::lang::String Extensions::escapeExtensionField(const ::java::lang::String & a0) const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_escapeExtensionField_97a5258f], a0.this$));
          }

          ::org::apache::lucene::queryparser::ext::ParserExtension Extensions::getExtension(const ::java::lang::String & a0) const
          {
            return ::org::apache::lucene::queryparser::ext::ParserExtension(env->callObjectMethod(this$, mids$[mid_getExtension_a8956118], a0.this$));
          }

          jchar Extensions::getExtensionFieldDelimiter() const
          {
            return env->callCharMethod(this$, mids$[mid_getExtensionFieldDelimiter_54c6a173]);
          }

          ::org::apache::lucene::queryparser::ext::Extensions$Pair Extensions::splitExtensionField(const ::java::lang::String & a0, const ::java::lang::String & a1) const
          {
            return ::org::apache::lucene::queryparser::ext::Extensions$Pair(env->callObjectMethod(this$, mids$[mid_splitExtensionField_7a9e9194], a0.this$, a1.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace ext {
          static PyObject *t_Extensions_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Extensions_instance_(PyTypeObject *type, PyObject *arg);
          static int t_Extensions_init_(t_Extensions *self, PyObject *args, PyObject *kwds);
          static PyObject *t_Extensions_add(t_Extensions *self, PyObject *args);
          static PyObject *t_Extensions_buildExtensionField(t_Extensions *self, PyObject *args);
          static PyObject *t_Extensions_escapeExtensionField(t_Extensions *self, PyObject *arg);
          static PyObject *t_Extensions_getExtension(t_Extensions *self, PyObject *arg);
          static PyObject *t_Extensions_getExtensionFieldDelimiter(t_Extensions *self);
          static PyObject *t_Extensions_splitExtensionField(t_Extensions *self, PyObject *args);
          static PyObject *t_Extensions_get__extensionFieldDelimiter(t_Extensions *self, void *data);
          static PyGetSetDef t_Extensions__fields_[] = {
            DECLARE_GET_FIELD(t_Extensions, extensionFieldDelimiter),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_Extensions__methods_[] = {
            DECLARE_METHOD(t_Extensions, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Extensions, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Extensions, add, METH_VARARGS),
            DECLARE_METHOD(t_Extensions, buildExtensionField, METH_VARARGS),
            DECLARE_METHOD(t_Extensions, escapeExtensionField, METH_O),
            DECLARE_METHOD(t_Extensions, getExtension, METH_O),
            DECLARE_METHOD(t_Extensions, getExtensionFieldDelimiter, METH_NOARGS),
            DECLARE_METHOD(t_Extensions, splitExtensionField, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(Extensions, t_Extensions, ::java::lang::Object, Extensions, t_Extensions_init_, 0, 0, t_Extensions__fields_, 0, 0);

          void t_Extensions::install(PyObject *module)
          {
            installType(&PY_TYPE(Extensions), module, "Extensions", 0);
            PyDict_SetItemString(PY_TYPE(Extensions).tp_dict, "Pair", make_descriptor(&PY_TYPE(Extensions$Pair)));
          }

          void t_Extensions::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(Extensions).tp_dict, "class_", make_descriptor(Extensions::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(Extensions).tp_dict, "wrapfn_", make_descriptor(t_Extensions::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(Extensions).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(Extensions::initializeClass);
            PyDict_SetItemString(PY_TYPE(Extensions).tp_dict, "DEFAULT_EXTENSION_FIELD_DELIMITER", make_descriptor(Extensions::DEFAULT_EXTENSION_FIELD_DELIMITER));
          }

          static PyObject *t_Extensions_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, Extensions::initializeClass, 1)))
              return NULL;
            return t_Extensions::wrap_Object(Extensions(((t_Extensions *) arg)->object.this$));
          }
          static PyObject *t_Extensions_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, Extensions::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_Extensions_init_(t_Extensions *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 0:
              {
                Extensions object((jobject) NULL);

                INT_CALL(object = Extensions());
                self->object = object;
                break;
              }
              goto err;
             case 1:
              {
                jchar a0;
                Extensions object((jobject) NULL);

                if (!parseArgs(args, "C", &a0))
                {
                  INT_CALL(object = Extensions(a0));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_Extensions_add(t_Extensions *self, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            ::org::apache::lucene::queryparser::ext::ParserExtension a1((jobject) NULL);

            if (!parseArgs(args, "sk", ::org::apache::lucene::queryparser::ext::ParserExtension::initializeClass, &a0, &a1))
            {
              OBJ_CALL(self->object.add(a0, a1));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "add", args);
            return NULL;
          }

          static PyObject *t_Extensions_buildExtensionField(t_Extensions *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::java::lang::String a0((jobject) NULL);
                ::java::lang::String result((jobject) NULL);

                if (!parseArgs(args, "s", &a0))
                {
                  OBJ_CALL(result = self->object.buildExtensionField(a0));
                  return j2p(result);
                }
              }
              break;
             case 2:
              {
                ::java::lang::String a0((jobject) NULL);
                ::java::lang::String a1((jobject) NULL);
                ::java::lang::String result((jobject) NULL);

                if (!parseArgs(args, "ss", &a0, &a1))
                {
                  OBJ_CALL(result = self->object.buildExtensionField(a0, a1));
                  return j2p(result);
                }
              }
            }

            PyErr_SetArgsError((PyObject *) self, "buildExtensionField", args);
            return NULL;
          }

          static PyObject *t_Extensions_escapeExtensionField(t_Extensions *self, PyObject *arg)
          {
            ::java::lang::String a0((jobject) NULL);
            ::java::lang::String result((jobject) NULL);

            if (!parseArg(arg, "s", &a0))
            {
              OBJ_CALL(result = self->object.escapeExtensionField(a0));
              return j2p(result);
            }

            PyErr_SetArgsError((PyObject *) self, "escapeExtensionField", arg);
            return NULL;
          }

          static PyObject *t_Extensions_getExtension(t_Extensions *self, PyObject *arg)
          {
            ::java::lang::String a0((jobject) NULL);
            ::org::apache::lucene::queryparser::ext::ParserExtension result((jobject) NULL);

            if (!parseArg(arg, "s", &a0))
            {
              OBJ_CALL(result = self->object.getExtension(a0));
              return ::org::apache::lucene::queryparser::ext::t_ParserExtension::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "getExtension", arg);
            return NULL;
          }

          static PyObject *t_Extensions_getExtensionFieldDelimiter(t_Extensions *self)
          {
            jchar result;
            OBJ_CALL(result = self->object.getExtensionFieldDelimiter());
            return PyUnicode_FromUnicode((Py_UNICODE *) &result, 1);
          }

          static PyObject *t_Extensions_splitExtensionField(t_Extensions *self, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            ::java::lang::String a1((jobject) NULL);
            ::org::apache::lucene::queryparser::ext::Extensions$Pair result((jobject) NULL);

            if (!parseArgs(args, "ss", &a0, &a1))
            {
              OBJ_CALL(result = self->object.splitExtensionField(a0, a1));
              return ::org::apache::lucene::queryparser::ext::t_Extensions$Pair::wrap_Object(result, &::java::lang::PY_TYPE(String), &::java::lang::PY_TYPE(String));
            }

            PyErr_SetArgsError((PyObject *) self, "splitExtensionField", args);
            return NULL;
          }

          static PyObject *t_Extensions_get__extensionFieldDelimiter(t_Extensions *self, void *data)
          {
            jchar value;
            OBJ_CALL(value = self->object.getExtensionFieldDelimiter());
            return PyUnicode_FromUnicode((Py_UNICODE *) &value, 1);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/egothor/stemmer/Trie.h"
#include "java/io/PrintStream.h"
#include "java/lang/Class.h"
#include "java/lang/CharSequence.h"
#include "java/io/DataOutput.h"
#include "org/egothor/stemmer/Row.h"
#include "java/io/DataInput.h"
#include "java/io/IOException.h"
#include "org/egothor/stemmer/Reduce.h"
#include "java/util/List.h"
#include "JArray.h"

namespace org {
  namespace egothor {
    namespace stemmer {

      ::java::lang::Class *Trie::class$ = NULL;
      jmethodID *Trie::mids$ = NULL;
      bool Trie::live$ = false;

      jclass Trie::initializeClass(bool getOnly)
      {
        if (getOnly)
          return (jclass) (live$ ? class$->this$ : NULL);
        if (class$ == NULL)
        {
          jclass cls = (jclass) env->findClass("org/egothor/stemmer/Trie");

          mids$ = new jmethodID[max_mid];
          mids$[mid_init$_e051d6a6] = env->getMethodID(cls, "<init>", "(Ljava/io/DataInput;)V");
          mids$[mid_init$_bb0c767f] = env->getMethodID(cls, "<init>", "(Z)V");
          mids$[mid_init$_ed85fe83] = env->getMethodID(cls, "<init>", "(ZILjava/util/List;Ljava/util/List;)V");
          mids$[mid_getAll_2fa560b3] = env->getMethodID(cls, "getAll", "(Ljava/lang/CharSequence;)[Ljava/lang/CharSequence;");
          mids$[mid_getCells_54c6a179] = env->getMethodID(cls, "getCells", "()I");
          mids$[mid_getCellsPnt_54c6a179] = env->getMethodID(cls, "getCellsPnt", "()I");
          mids$[mid_getCellsVal_54c6a179] = env->getMethodID(cls, "getCellsVal", "()I");
          mids$[mid_getFully_856f5013] = env->getMethodID(cls, "getFully", "(Ljava/lang/CharSequence;)Ljava/lang/CharSequence;");
          mids$[mid_getLastOnPath_856f5013] = env->getMethodID(cls, "getLastOnPath", "(Ljava/lang/CharSequence;)Ljava/lang/CharSequence;");
          mids$[mid_printInfo_bd6af9ff] = env->getMethodID(cls, "printInfo", "(Ljava/io/PrintStream;Ljava/lang/CharSequence;)V");
          mids$[mid_reduce_6ee87cd1] = env->getMethodID(cls, "reduce", "(Lorg/egothor/stemmer/Reduce;)Lorg/egothor/stemmer/Trie;");
          mids$[mid_store_cfb051e6] = env->getMethodID(cls, "store", "(Ljava/io/DataOutput;)V");

          class$ = (::java::lang::Class *) new JObject(cls);
          live$ = true;
        }
        return (jclass) class$->this$;
      }

      Trie::Trie(const ::java::io::DataInput & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_e051d6a6, a0.this$)) {}

      Trie::Trie(jboolean a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_bb0c767f, a0)) {}

      Trie::Trie(jboolean a0, jint a1, const ::java::util::List & a2, const ::java::util::List & a3) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_ed85fe83, a0, a1, a2.this$, a3.this$)) {}

      JArray< ::java::lang::CharSequence > Trie::getAll(const ::java::lang::CharSequence & a0) const
      {
        return JArray< ::java::lang::CharSequence >(env->callObjectMethod(this$, mids$[mid_getAll_2fa560b3], a0.this$));
      }

      jint Trie::getCells() const
      {
        return env->callIntMethod(this$, mids$[mid_getCells_54c6a179]);
      }

      jint Trie::getCellsPnt() const
      {
        return env->callIntMethod(this$, mids$[mid_getCellsPnt_54c6a179]);
      }

      jint Trie::getCellsVal() const
      {
        return env->callIntMethod(this$, mids$[mid_getCellsVal_54c6a179]);
      }

      ::java::lang::CharSequence Trie::getFully(const ::java::lang::CharSequence & a0) const
      {
        return ::java::lang::CharSequence(env->callObjectMethod(this$, mids$[mid_getFully_856f5013], a0.this$));
      }

      ::java::lang::CharSequence Trie::getLastOnPath(const ::java::lang::CharSequence & a0) const
      {
        return ::java::lang::CharSequence(env->callObjectMethod(this$, mids$[mid_getLastOnPath_856f5013], a0.this$));
      }

      void Trie::printInfo(const ::java::io::PrintStream & a0, const ::java::lang::CharSequence & a1) const
      {
        env->callVoidMethod(this$, mids$[mid_printInfo_bd6af9ff], a0.this$, a1.this$);
      }

      Trie Trie::reduce(const ::org::egothor::stemmer::Reduce & a0) const
      {
        return Trie(env->callObjectMethod(this$, mids$[mid_reduce_6ee87cd1], a0.this$));
      }

      void Trie::store(const ::java::io::DataOutput & a0) const
      {
        env->callVoidMethod(this$, mids$[mid_store_cfb051e6], a0.this$);
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace egothor {
    namespace stemmer {
      static PyObject *t_Trie_cast_(PyTypeObject *type, PyObject *arg);
      static PyObject *t_Trie_instance_(PyTypeObject *type, PyObject *arg);
      static int t_Trie_init_(t_Trie *self, PyObject *args, PyObject *kwds);
      static PyObject *t_Trie_getAll(t_Trie *self, PyObject *arg);
      static PyObject *t_Trie_getCells(t_Trie *self);
      static PyObject *t_Trie_getCellsPnt(t_Trie *self);
      static PyObject *t_Trie_getCellsVal(t_Trie *self);
      static PyObject *t_Trie_getFully(t_Trie *self, PyObject *arg);
      static PyObject *t_Trie_getLastOnPath(t_Trie *self, PyObject *arg);
      static PyObject *t_Trie_printInfo(t_Trie *self, PyObject *args);
      static PyObject *t_Trie_reduce(t_Trie *self, PyObject *arg);
      static PyObject *t_Trie_store(t_Trie *self, PyObject *arg);
      static PyObject *t_Trie_get__cells(t_Trie *self, void *data);
      static PyObject *t_Trie_get__cellsPnt(t_Trie *self, void *data);
      static PyObject *t_Trie_get__cellsVal(t_Trie *self, void *data);
      static PyGetSetDef t_Trie__fields_[] = {
        DECLARE_GET_FIELD(t_Trie, cells),
        DECLARE_GET_FIELD(t_Trie, cellsPnt),
        DECLARE_GET_FIELD(t_Trie, cellsVal),
        { NULL, NULL, NULL, NULL, NULL }
      };

      static PyMethodDef t_Trie__methods_[] = {
        DECLARE_METHOD(t_Trie, cast_, METH_O | METH_CLASS),
        DECLARE_METHOD(t_Trie, instance_, METH_O | METH_CLASS),
        DECLARE_METHOD(t_Trie, getAll, METH_O),
        DECLARE_METHOD(t_Trie, getCells, METH_NOARGS),
        DECLARE_METHOD(t_Trie, getCellsPnt, METH_NOARGS),
        DECLARE_METHOD(t_Trie, getCellsVal, METH_NOARGS),
        DECLARE_METHOD(t_Trie, getFully, METH_O),
        DECLARE_METHOD(t_Trie, getLastOnPath, METH_O),
        DECLARE_METHOD(t_Trie, printInfo, METH_VARARGS),
        DECLARE_METHOD(t_Trie, reduce, METH_O),
        DECLARE_METHOD(t_Trie, store, METH_O),
        { NULL, NULL, 0, NULL }
      };

      DECLARE_TYPE(Trie, t_Trie, ::java::lang::Object, Trie, t_Trie_init_, 0, 0, t_Trie__fields_, 0, 0);

      void t_Trie::install(PyObject *module)
      {
        installType(&PY_TYPE(Trie), module, "Trie", 0);
      }

      void t_Trie::initialize(PyObject *module)
      {
        PyDict_SetItemString(PY_TYPE(Trie).tp_dict, "class_", make_descriptor(Trie::initializeClass, 1));
        PyDict_SetItemString(PY_TYPE(Trie).tp_dict, "wrapfn_", make_descriptor(t_Trie::wrap_jobject));
        PyDict_SetItemString(PY_TYPE(Trie).tp_dict, "boxfn_", make_descriptor(boxObject));
      }

      static PyObject *t_Trie_cast_(PyTypeObject *type, PyObject *arg)
      {
        if (!(arg = castCheck(arg, Trie::initializeClass, 1)))
          return NULL;
        return t_Trie::wrap_Object(Trie(((t_Trie *) arg)->object.this$));
      }
      static PyObject *t_Trie_instance_(PyTypeObject *type, PyObject *arg)
      {
        if (!castCheck(arg, Trie::initializeClass, 0))
          Py_RETURN_FALSE;
        Py_RETURN_TRUE;
      }

      static int t_Trie_init_(t_Trie *self, PyObject *args, PyObject *kwds)
      {
        switch (PyTuple_GET_SIZE(args)) {
         case 1:
          {
            ::java::io::DataInput a0((jobject) NULL);
            Trie object((jobject) NULL);

            if (!parseArgs(args, "k", ::java::io::DataInput::initializeClass, &a0))
            {
              INT_CALL(object = Trie(a0));
              self->object = object;
              break;
            }
          }
          {
            jboolean a0;
            Trie object((jobject) NULL);

            if (!parseArgs(args, "Z", &a0))
            {
              INT_CALL(object = Trie(a0));
              self->object = object;
              break;
            }
          }
          goto err;
         case 4:
          {
            jboolean a0;
            jint a1;
            ::java::util::List a2((jobject) NULL);
            PyTypeObject **p2;
            ::java::util::List a3((jobject) NULL);
            PyTypeObject **p3;
            Trie object((jobject) NULL);

            if (!parseArgs(args, "ZIKK", ::java::util::List::initializeClass, ::java::util::List::initializeClass, &a0, &a1, &a2, &p2, ::java::util::t_List::parameters_, &a3, &p3, ::java::util::t_List::parameters_))
            {
              INT_CALL(object = Trie(a0, a1, a2, a3));
              self->object = object;
              break;
            }
          }
         default:
         err:
          PyErr_SetArgsError((PyObject *) self, "__init__", args);
          return -1;
        }

        return 0;
      }

      static PyObject *t_Trie_getAll(t_Trie *self, PyObject *arg)
      {
        ::java::lang::CharSequence a0((jobject) NULL);
        JArray< ::java::lang::CharSequence > result((jobject) NULL);

        if (!parseArg(arg, "O", &::java::lang::PY_TYPE(CharSequence), &a0))
        {
          OBJ_CALL(result = self->object.getAll(a0));
          return JArray<jobject>(result.this$).wrap(::java::lang::t_CharSequence::wrap_jobject);
        }

        PyErr_SetArgsError((PyObject *) self, "getAll", arg);
        return NULL;
      }

      static PyObject *t_Trie_getCells(t_Trie *self)
      {
        jint result;
        OBJ_CALL(result = self->object.getCells());
        return PyInt_FromLong((long) result);
      }

      static PyObject *t_Trie_getCellsPnt(t_Trie *self)
      {
        jint result;
        OBJ_CALL(result = self->object.getCellsPnt());
        return PyInt_FromLong((long) result);
      }

      static PyObject *t_Trie_getCellsVal(t_Trie *self)
      {
        jint result;
        OBJ_CALL(result = self->object.getCellsVal());
        return PyInt_FromLong((long) result);
      }

      static PyObject *t_Trie_getFully(t_Trie *self, PyObject *arg)
      {
        ::java::lang::CharSequence a0((jobject) NULL);
        ::java::lang::CharSequence result((jobject) NULL);

        if (!parseArg(arg, "O", &::java::lang::PY_TYPE(CharSequence), &a0))
        {
          OBJ_CALL(result = self->object.getFully(a0));
          return ::java::lang::t_CharSequence::wrap_Object(result);
        }

        PyErr_SetArgsError((PyObject *) self, "getFully", arg);
        return NULL;
      }

      static PyObject *t_Trie_getLastOnPath(t_Trie *self, PyObject *arg)
      {
        ::java::lang::CharSequence a0((jobject) NULL);
        ::java::lang::CharSequence result((jobject) NULL);

        if (!parseArg(arg, "O", &::java::lang::PY_TYPE(CharSequence), &a0))
        {
          OBJ_CALL(result = self->object.getLastOnPath(a0));
          return ::java::lang::t_CharSequence::wrap_Object(result);
        }

        PyErr_SetArgsError((PyObject *) self, "getLastOnPath", arg);
        return NULL;
      }

      static PyObject *t_Trie_printInfo(t_Trie *self, PyObject *args)
      {
        ::java::io::PrintStream a0((jobject) NULL);
        ::java::lang::CharSequence a1((jobject) NULL);

        if (!parseArgs(args, "kO", ::java::io::PrintStream::initializeClass, &::java::lang::PY_TYPE(CharSequence), &a0, &a1))
        {
          OBJ_CALL(self->object.printInfo(a0, a1));
          Py_RETURN_NONE;
        }

        PyErr_SetArgsError((PyObject *) self, "printInfo", args);
        return NULL;
      }

      static PyObject *t_Trie_reduce(t_Trie *self, PyObject *arg)
      {
        ::org::egothor::stemmer::Reduce a0((jobject) NULL);
        Trie result((jobject) NULL);

        if (!parseArg(arg, "k", ::org::egothor::stemmer::Reduce::initializeClass, &a0))
        {
          OBJ_CALL(result = self->object.reduce(a0));
          return t_Trie::wrap_Object(result);
        }

        PyErr_SetArgsError((PyObject *) self, "reduce", arg);
        return NULL;
      }

      static PyObject *t_Trie_store(t_Trie *self, PyObject *arg)
      {
        ::java::io::DataOutput a0((jobject) NULL);

        if (!parseArg(arg, "k", ::java::io::DataOutput::initializeClass, &a0))
        {
          OBJ_CALL(self->object.store(a0));
          Py_RETURN_NONE;
        }

        PyErr_SetArgsError((PyObject *) self, "store", arg);
        return NULL;
      }

      static PyObject *t_Trie_get__cells(t_Trie *self, void *data)
      {
        jint value;
        OBJ_CALL(value = self->object.getCells());
        return PyInt_FromLong((long) value);
      }

      static PyObject *t_Trie_get__cellsPnt(t_Trie *self, void *data)
      {
        jint value;
        OBJ_CALL(value = self->object.getCellsPnt());
        return PyInt_FromLong((long) value);
      }

      static PyObject *t_Trie_get__cellsVal(t_Trie *self, void *data)
      {
        jint value;
        OBJ_CALL(value = self->object.getCellsVal());
        return PyInt_FromLong((long) value);
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/stempel/StempelFilter.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/stempel/StempelStemmer.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace stempel {

          ::java::lang::Class *StempelFilter::class$ = NULL;
          jmethodID *StempelFilter::mids$ = NULL;
          bool StempelFilter::live$ = false;
          jint StempelFilter::DEFAULT_MIN_LENGTH = (jint) 0;

          jclass StempelFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/stempel/StempelFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_2cfd7ca0] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;Lorg/apache/lucene/analysis/stempel/StempelStemmer;)V");
              mids$[mid_init$_0fe419aa] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;Lorg/apache/lucene/analysis/stempel/StempelStemmer;I)V");
              mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              DEFAULT_MIN_LENGTH = env->getStaticIntField(cls, "DEFAULT_MIN_LENGTH");
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          StempelFilter::StempelFilter(const ::org::apache::lucene::analysis::TokenStream & a0, const ::org::apache::lucene::analysis::stempel::StempelStemmer & a1) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_2cfd7ca0, a0.this$, a1.this$)) {}

          StempelFilter::StempelFilter(const ::org::apache::lucene::analysis::TokenStream & a0, const ::org::apache::lucene::analysis::stempel::StempelStemmer & a1, jint a2) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_0fe419aa, a0.this$, a1.this$, a2)) {}

          jboolean StempelFilter::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_54c6a16a]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace stempel {
          static PyObject *t_StempelFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_StempelFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_StempelFilter_init_(t_StempelFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_StempelFilter_incrementToken(t_StempelFilter *self, PyObject *args);

          static PyMethodDef t_StempelFilter__methods_[] = {
            DECLARE_METHOD(t_StempelFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_StempelFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_StempelFilter, incrementToken, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(StempelFilter, t_StempelFilter, ::org::apache::lucene::analysis::TokenFilter, StempelFilter, t_StempelFilter_init_, 0, 0, 0, 0, 0);

          void t_StempelFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(StempelFilter), module, "StempelFilter", 0);
          }

          void t_StempelFilter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(StempelFilter).tp_dict, "class_", make_descriptor(StempelFilter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(StempelFilter).tp_dict, "wrapfn_", make_descriptor(t_StempelFilter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(StempelFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(StempelFilter::initializeClass);
            PyDict_SetItemString(PY_TYPE(StempelFilter).tp_dict, "DEFAULT_MIN_LENGTH", make_descriptor(StempelFilter::DEFAULT_MIN_LENGTH));
          }

          static PyObject *t_StempelFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, StempelFilter::initializeClass, 1)))
              return NULL;
            return t_StempelFilter::wrap_Object(StempelFilter(((t_StempelFilter *) arg)->object.this$));
          }
          static PyObject *t_StempelFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, StempelFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_StempelFilter_init_(t_StempelFilter *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 2:
              {
                ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
                ::org::apache::lucene::analysis::stempel::StempelStemmer a1((jobject) NULL);
                StempelFilter object((jobject) NULL);

                if (!parseArgs(args, "kk", ::org::apache::lucene::analysis::TokenStream::initializeClass, ::org::apache::lucene::analysis::stempel::StempelStemmer::initializeClass, &a0, &a1))
                {
                  INT_CALL(object = StempelFilter(a0, a1));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 3:
              {
                ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
                ::org::apache::lucene::analysis::stempel::StempelStemmer a1((jobject) NULL);
                jint a2;
                StempelFilter object((jobject) NULL);

                if (!parseArgs(args, "kkI", ::org::apache::lucene::analysis::TokenStream::initializeClass, ::org::apache::lucene::analysis::stempel::StempelStemmer::initializeClass, &a0, &a1, &a2))
                {
                  INT_CALL(object = StempelFilter(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_StempelFilter_incrementToken(t_StempelFilter *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(StempelFilter), (PyObject *) self, "incrementToken", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/facet/DrillDownQuery.h"
#include "java/lang/Class.h"
#include "java/lang/Object.h"
#include "org/apache/lucene/search/Filter.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/facet/FacetsConfig.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "org/apache/lucene/index/Term.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {

        ::java::lang::Class *DrillDownQuery::class$ = NULL;
        jmethodID *DrillDownQuery::mids$ = NULL;
        bool DrillDownQuery::live$ = false;

        jclass DrillDownQuery::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/facet/DrillDownQuery");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_46ac0e90] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/facet/FacetsConfig;)V");
            mids$[mid_init$_82818c2d] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/facet/FacetsConfig;Lorg/apache/lucene/search/Query;)V");
            mids$[mid_add_ee8b16d8] = env->getMethodID(cls, "add", "(Ljava/lang/String;Lorg/apache/lucene/search/Filter;)V");
            mids$[mid_add_ba45d66a] = env->getMethodID(cls, "add", "(Ljava/lang/String;[Ljava/lang/String;)V");
            mids$[mid_add_5b69597d] = env->getMethodID(cls, "add", "(Ljava/lang/String;Lorg/apache/lucene/search/Query;)V");
            mids$[mid_clone_477b643a] = env->getMethodID(cls, "clone", "()Lorg/apache/lucene/facet/DrillDownQuery;");
            mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
            mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
            mids$[mid_rewrite_7edcaa43] = env->getMethodID(cls, "rewrite", "(Lorg/apache/lucene/index/IndexReader;)Lorg/apache/lucene/search/Query;");
            mids$[mid_term_48584f7a] = env->getStaticMethodID(cls, "term", "(Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;)Lorg/apache/lucene/index/Term;");
            mids$[mid_toString_97a5258f] = env->getMethodID(cls, "toString", "(Ljava/lang/String;)Ljava/lang/String;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        DrillDownQuery::DrillDownQuery(const ::org::apache::lucene::facet::FacetsConfig & a0) : ::org::apache::lucene::search::Query(env->newObject(initializeClass, &mids$, mid_init$_46ac0e90, a0.this$)) {}

        DrillDownQuery::DrillDownQuery(const ::org::apache::lucene::facet::FacetsConfig & a0, const ::org::apache::lucene::search::Query & a1) : ::org::apache::lucene::search::Query(env->newObject(initializeClass, &mids$, mid_init$_82818c2d, a0.this$, a1.this$)) {}

        void DrillDownQuery::add(const ::java::lang::String & a0, const ::org::apache::lucene::search::Filter & a1) const
        {
          env->callVoidMethod(this$, mids$[mid_add_ee8b16d8], a0.this$, a1.this$);
        }

        void DrillDownQuery::add(const ::java::lang::String & a0, const JArray< ::java::lang::String > & a1) const
        {
          env->callVoidMethod(this$, mids$[mid_add_ba45d66a], a0.this$, a1.this$);
        }

        void DrillDownQuery::add(const ::java::lang::String & a0, const ::org::apache::lucene::search::Query & a1) const
        {
          env->callVoidMethod(this$, mids$[mid_add_5b69597d], a0.this$, a1.this$);
        }

        DrillDownQuery DrillDownQuery::clone() const
        {
          return DrillDownQuery(env->callObjectMethod(this$, mids$[mid_clone_477b643a]));
        }

        jboolean DrillDownQuery::equals(const ::java::lang::Object & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
        }

        jint DrillDownQuery::hashCode() const
        {
          return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
        }

        ::org::apache::lucene::search::Query DrillDownQuery::rewrite(const ::org::apache::lucene::index::IndexReader & a0) const
        {
          return ::org::apache::lucene::search::Query(env->callObjectMethod(this$, mids$[mid_rewrite_7edcaa43], a0.this$));
        }

        ::org::apache::lucene::index::Term DrillDownQuery::term(const ::java::lang::String & a0, const ::java::lang::String & a1, const JArray< ::java::lang::String > & a2)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::index::Term(env->callStaticObjectMethod(cls, mids$[mid_term_48584f7a], a0.this$, a1.this$, a2.this$));
        }

        ::java::lang::String DrillDownQuery::toString(const ::java::lang::String & a0) const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_97a5258f], a0.this$));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        static PyObject *t_DrillDownQuery_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_DrillDownQuery_instance_(PyTypeObject *type, PyObject *arg);
        static int t_DrillDownQuery_init_(t_DrillDownQuery *self, PyObject *args, PyObject *kwds);
        static PyObject *t_DrillDownQuery_add(t_DrillDownQuery *self, PyObject *args);
        static PyObject *t_DrillDownQuery_clone(t_DrillDownQuery *self, PyObject *args);
        static PyObject *t_DrillDownQuery_equals(t_DrillDownQuery *self, PyObject *args);
        static PyObject *t_DrillDownQuery_hashCode(t_DrillDownQuery *self, PyObject *args);
        static PyObject *t_DrillDownQuery_rewrite(t_DrillDownQuery *self, PyObject *args);
        static PyObject *t_DrillDownQuery_term(PyTypeObject *type, PyObject *args);
        static PyObject *t_DrillDownQuery_toString(t_DrillDownQuery *self, PyObject *args);

        static PyMethodDef t_DrillDownQuery__methods_[] = {
          DECLARE_METHOD(t_DrillDownQuery, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_DrillDownQuery, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_DrillDownQuery, add, METH_VARARGS),
          DECLARE_METHOD(t_DrillDownQuery, clone, METH_VARARGS),
          DECLARE_METHOD(t_DrillDownQuery, equals, METH_VARARGS),
          DECLARE_METHOD(t_DrillDownQuery, hashCode, METH_VARARGS),
          DECLARE_METHOD(t_DrillDownQuery, rewrite, METH_VARARGS),
          DECLARE_METHOD(t_DrillDownQuery, term, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_DrillDownQuery, toString, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(DrillDownQuery, t_DrillDownQuery, ::org::apache::lucene::search::Query, DrillDownQuery, t_DrillDownQuery_init_, 0, 0, 0, 0, 0);

        void t_DrillDownQuery::install(PyObject *module)
        {
          installType(&PY_TYPE(DrillDownQuery), module, "DrillDownQuery", 0);
        }

        void t_DrillDownQuery::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(DrillDownQuery).tp_dict, "class_", make_descriptor(DrillDownQuery::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(DrillDownQuery).tp_dict, "wrapfn_", make_descriptor(t_DrillDownQuery::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(DrillDownQuery).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_DrillDownQuery_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, DrillDownQuery::initializeClass, 1)))
            return NULL;
          return t_DrillDownQuery::wrap_Object(DrillDownQuery(((t_DrillDownQuery *) arg)->object.this$));
        }
        static PyObject *t_DrillDownQuery_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, DrillDownQuery::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_DrillDownQuery_init_(t_DrillDownQuery *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              ::org::apache::lucene::facet::FacetsConfig a0((jobject) NULL);
              DrillDownQuery object((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::facet::FacetsConfig::initializeClass, &a0))
              {
                INT_CALL(object = DrillDownQuery(a0));
                self->object = object;
                break;
              }
            }
            goto err;
           case 2:
            {
              ::org::apache::lucene::facet::FacetsConfig a0((jobject) NULL);
              ::org::apache::lucene::search::Query a1((jobject) NULL);
              DrillDownQuery object((jobject) NULL);

              if (!parseArgs(args, "kk", ::org::apache::lucene::facet::FacetsConfig::initializeClass, ::org::apache::lucene::search::Query::initializeClass, &a0, &a1))
              {
                INT_CALL(object = DrillDownQuery(a0, a1));
                self->object = object;
                break;
              }
            }
           default:
           err:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_DrillDownQuery_add(t_DrillDownQuery *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 2:
            {
              ::java::lang::String a0((jobject) NULL);
              ::org::apache::lucene::search::Filter a1((jobject) NULL);

              if (!parseArgs(args, "sk", ::org::apache::lucene::search::Filter::initializeClass, &a0, &a1))
              {
                OBJ_CALL(self->object.add(a0, a1));
                Py_RETURN_NONE;
              }
            }
            {
              ::java::lang::String a0((jobject) NULL);
              JArray< ::java::lang::String > a1((jobject) NULL);

              if (!parseArgs(args, "s[s", &a0, &a1))
              {
                OBJ_CALL(self->object.add(a0, a1));
                Py_RETURN_NONE;
              }
            }
            {
              ::java::lang::String a0((jobject) NULL);
              ::org::apache::lucene::search::Query a1((jobject) NULL);

              if (!parseArgs(args, "sk", ::org::apache::lucene::search::Query::initializeClass, &a0, &a1))
              {
                OBJ_CALL(self->object.add(a0, a1));
                Py_RETURN_NONE;
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "add", args);
          return NULL;
        }

        static PyObject *t_DrillDownQuery_clone(t_DrillDownQuery *self, PyObject *args)
        {
          DrillDownQuery result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.clone());
            return t_DrillDownQuery::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(DrillDownQuery), (PyObject *) self, "clone", args, 2);
        }

        static PyObject *t_DrillDownQuery_equals(t_DrillDownQuery *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.equals(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(DrillDownQuery), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_DrillDownQuery_hashCode(t_DrillDownQuery *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hashCode());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(DrillDownQuery), (PyObject *) self, "hashCode", args, 2);
        }

        static PyObject *t_DrillDownQuery_rewrite(t_DrillDownQuery *self, PyObject *args)
        {
          ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
          ::org::apache::lucene::search::Query result((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::index::IndexReader::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.rewrite(a0));
            return ::org::apache::lucene::search::t_Query::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(DrillDownQuery), (PyObject *) self, "rewrite", args, 2);
        }

        static PyObject *t_DrillDownQuery_term(PyTypeObject *type, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::java::lang::String a1((jobject) NULL);
          JArray< ::java::lang::String > a2((jobject) NULL);
          ::org::apache::lucene::index::Term result((jobject) NULL);

          if (!parseArgs(args, "ss[s", &a0, &a1, &a2))
          {
            OBJ_CALL(result = ::org::apache::lucene::facet::DrillDownQuery::term(a0, a1, a2));
            return ::org::apache::lucene::index::t_Term::wrap_Object(result);
          }

          PyErr_SetArgsError(type, "term", args);
          return NULL;
        }

        static PyObject *t_DrillDownQuery_toString(t_DrillDownQuery *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = self->object.toString(a0));
            return j2p(result);
          }

          return callSuper(&PY_TYPE(DrillDownQuery), (PyObject *) self, "toString", args, 2);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/highlight/OffsetLimitTokenFilter.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace highlight {

          ::java::lang::Class *OffsetLimitTokenFilter::class$ = NULL;
          jmethodID *OffsetLimitTokenFilter::mids$ = NULL;
          bool OffsetLimitTokenFilter::live$ = false;

          jclass OffsetLimitTokenFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/highlight/OffsetLimitTokenFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_d53bcf42] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;I)V");
              mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");
              mids$[mid_reset_54c6a166] = env->getMethodID(cls, "reset", "()V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          OffsetLimitTokenFilter::OffsetLimitTokenFilter(const ::org::apache::lucene::analysis::TokenStream & a0, jint a1) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_d53bcf42, a0.this$, a1)) {}

          jboolean OffsetLimitTokenFilter::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_54c6a16a]);
          }

          void OffsetLimitTokenFilter::reset() const
          {
            env->callVoidMethod(this$, mids$[mid_reset_54c6a166]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace highlight {
          static PyObject *t_OffsetLimitTokenFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_OffsetLimitTokenFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_OffsetLimitTokenFilter_init_(t_OffsetLimitTokenFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_OffsetLimitTokenFilter_incrementToken(t_OffsetLimitTokenFilter *self, PyObject *args);
          static PyObject *t_OffsetLimitTokenFilter_reset(t_OffsetLimitTokenFilter *self, PyObject *args);

          static PyMethodDef t_OffsetLimitTokenFilter__methods_[] = {
            DECLARE_METHOD(t_OffsetLimitTokenFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_OffsetLimitTokenFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_OffsetLimitTokenFilter, incrementToken, METH_VARARGS),
            DECLARE_METHOD(t_OffsetLimitTokenFilter, reset, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(OffsetLimitTokenFilter, t_OffsetLimitTokenFilter, ::org::apache::lucene::analysis::TokenFilter, OffsetLimitTokenFilter, t_OffsetLimitTokenFilter_init_, 0, 0, 0, 0, 0);

          void t_OffsetLimitTokenFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(OffsetLimitTokenFilter), module, "OffsetLimitTokenFilter", 0);
          }

          void t_OffsetLimitTokenFilter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(OffsetLimitTokenFilter).tp_dict, "class_", make_descriptor(OffsetLimitTokenFilter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(OffsetLimitTokenFilter).tp_dict, "wrapfn_", make_descriptor(t_OffsetLimitTokenFilter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(OffsetLimitTokenFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_OffsetLimitTokenFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, OffsetLimitTokenFilter::initializeClass, 1)))
              return NULL;
            return t_OffsetLimitTokenFilter::wrap_Object(OffsetLimitTokenFilter(((t_OffsetLimitTokenFilter *) arg)->object.this$));
          }
          static PyObject *t_OffsetLimitTokenFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, OffsetLimitTokenFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_OffsetLimitTokenFilter_init_(t_OffsetLimitTokenFilter *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            jint a1;
            OffsetLimitTokenFilter object((jobject) NULL);

            if (!parseArgs(args, "kI", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0, &a1))
            {
              INT_CALL(object = OffsetLimitTokenFilter(a0, a1));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_OffsetLimitTokenFilter_incrementToken(t_OffsetLimitTokenFilter *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(OffsetLimitTokenFilter), (PyObject *) self, "incrementToken", args, 2);
          }

          static PyObject *t_OffsetLimitTokenFilter_reset(t_OffsetLimitTokenFilter *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.reset());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(OffsetLimitTokenFilter), (PyObject *) self, "reset", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/surround/query/NotQuery.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/queryparser/surround/query/SrndQuery.h"
#include "org/apache/lucene/queryparser/surround/query/BasicQueryFactory.h"
#include "java/lang/String.h"
#include "java/util/List.h"
#include "org/apache/lucene/search/Query.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace surround {
          namespace query {

            ::java::lang::Class *NotQuery::class$ = NULL;
            jmethodID *NotQuery::mids$ = NULL;
            bool NotQuery::live$ = false;

            jclass NotQuery::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/surround/query/NotQuery");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_f09ca325] = env->getMethodID(cls, "<init>", "(Ljava/util/List;Ljava/lang/String;)V");
                mids$[mid_makeLuceneQueryFieldNoBoost_1aaeee30] = env->getMethodID(cls, "makeLuceneQueryFieldNoBoost", "(Ljava/lang/String;Lorg/apache/lucene/queryparser/surround/query/BasicQueryFactory;)Lorg/apache/lucene/search/Query;");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            NotQuery::NotQuery(const ::java::util::List & a0, const ::java::lang::String & a1) : ::org::apache::lucene::queryparser::surround::query::ComposedQuery(env->newObject(initializeClass, &mids$, mid_init$_f09ca325, a0.this$, a1.this$)) {}

            ::org::apache::lucene::search::Query NotQuery::makeLuceneQueryFieldNoBoost(const ::java::lang::String & a0, const ::org::apache::lucene::queryparser::surround::query::BasicQueryFactory & a1) const
            {
              return ::org::apache::lucene::search::Query(env->callObjectMethod(this$, mids$[mid_makeLuceneQueryFieldNoBoost_1aaeee30], a0.this$, a1.this$));
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace surround {
          namespace query {
            static PyObject *t_NotQuery_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_NotQuery_instance_(PyTypeObject *type, PyObject *arg);
            static int t_NotQuery_init_(t_NotQuery *self, PyObject *args, PyObject *kwds);
            static PyObject *t_NotQuery_makeLuceneQueryFieldNoBoost(t_NotQuery *self, PyObject *args);

            static PyMethodDef t_NotQuery__methods_[] = {
              DECLARE_METHOD(t_NotQuery, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_NotQuery, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_NotQuery, makeLuceneQueryFieldNoBoost, METH_VARARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(NotQuery, t_NotQuery, ::org::apache::lucene::queryparser::surround::query::ComposedQuery, NotQuery, t_NotQuery_init_, 0, 0, 0, 0, 0);

            void t_NotQuery::install(PyObject *module)
            {
              installType(&PY_TYPE(NotQuery), module, "NotQuery", 0);
            }

            void t_NotQuery::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(NotQuery).tp_dict, "class_", make_descriptor(NotQuery::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(NotQuery).tp_dict, "wrapfn_", make_descriptor(t_NotQuery::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(NotQuery).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_NotQuery_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, NotQuery::initializeClass, 1)))
                return NULL;
              return t_NotQuery::wrap_Object(NotQuery(((t_NotQuery *) arg)->object.this$));
            }
            static PyObject *t_NotQuery_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, NotQuery::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_NotQuery_init_(t_NotQuery *self, PyObject *args, PyObject *kwds)
            {
              ::java::util::List a0((jobject) NULL);
              PyTypeObject **p0;
              ::java::lang::String a1((jobject) NULL);
              NotQuery object((jobject) NULL);

              if (!parseArgs(args, "Ks", ::java::util::List::initializeClass, &a0, &p0, ::java::util::t_List::parameters_, &a1))
              {
                INT_CALL(object = NotQuery(a0, a1));
                self->object = object;
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_NotQuery_makeLuceneQueryFieldNoBoost(t_NotQuery *self, PyObject *args)
            {
              ::java::lang::String a0((jobject) NULL);
              ::org::apache::lucene::queryparser::surround::query::BasicQueryFactory a1((jobject) NULL);
              ::org::apache::lucene::search::Query result((jobject) NULL);

              if (!parseArgs(args, "sk", ::org::apache::lucene::queryparser::surround::query::BasicQueryFactory::initializeClass, &a0, &a1))
              {
                OBJ_CALL(result = self->object.makeLuceneQueryFieldNoBoost(a0, a1));
                return ::org::apache::lucene::search::t_Query::wrap_Object(result);
              }

              return callSuper(&PY_TYPE(NotQuery), (PyObject *) self, "makeLuceneQueryFieldNoBoost", args, 2);
            }
          }
        }
      }
    }
  }
}
